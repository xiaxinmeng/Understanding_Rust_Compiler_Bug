{"sha": "f3d57416230c94a56d89bb6119c47d46f68bc4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkNTc0MTYyMzBjOTRhNTZkODliYjYxMTljNDdkNDZmNjhiYzRlNg==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-04-13T17:41:15Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-04-13T17:41:15Z"}, "message": "sem_ch10.adb, [...]: Fix comment typos.\n\ngcc/ada/\n\t* sem_ch10.adb, sem_ch10.ads,\n\tsem_ch12.adb, sem_ch12.ads, sem_ch13.adb, sem_ch13.ads,\n\tsem_ch3.adb, sem_ch4.adb, sem_ch5.adb, sem_ch6.adb,\n\tsem_ch6.ads, sem_ch8.adb, sem_ch8.ads, sem_ch9.adb,\n\tsem_elab.adb, sem_elab.ads, sem_elim.ads, sem_eval.adb,\n\tsem_eval.ads, sem_intr.adb, sem_mech.adb, sem_mech.ads,\n\tsem_prag.adb, sem_prag.ads, sem_res.adb, sem_res.ads,\n\tsem_type.adb, sem_util.adb, sem_util.ads, sem_warn.adb,\n\tsem_warn.ads: Fix comment typos.\n\nFrom-SVN: r134242", "tree": {"sha": "d233d5950c2c7ac628ce9413ff3d59a39a79f59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d233d5950c2c7ac628ce9413ff3d59a39a79f59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d57416230c94a56d89bb6119c47d46f68bc4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d57416230c94a56d89bb6119c47d46f68bc4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d57416230c94a56d89bb6119c47d46f68bc4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d57416230c94a56d89bb6119c47d46f68bc4e6/comments", "author": null, "committer": null, "parents": [{"sha": "12a13f016fb663988db80b030c4ef8761dc9c2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a13f016fb663988db80b030c4ef8761dc9c2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a13f016fb663988db80b030c4ef8761dc9c2a9"}], "stats": {"total": 442, "additions": 227, "deletions": 215}, "files": [{"sha": "2cf7f0d3242ac833f84e8be212896c04c2eca706", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -1,5 +1,15 @@\n 2008-04-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n+\t* sem_ch10.adb, sem_ch10.ads,\n+\tsem_ch12.adb, sem_ch12.ads, sem_ch13.adb, sem_ch13.ads,\n+\tsem_ch3.adb, sem_ch4.adb, sem_ch5.adb, sem_ch6.adb,\n+\tsem_ch6.ads, sem_ch8.adb, sem_ch8.ads, sem_ch9.adb,\n+\tsem_elab.adb, sem_elab.ads, sem_elim.ads, sem_eval.adb,\n+\tsem_eval.ads, sem_intr.adb, sem_mech.adb, sem_mech.ads,\n+\tsem_prag.adb, sem_prag.ads, sem_res.adb, sem_res.ads,\n+\tsem_type.adb, sem_util.adb, sem_util.ads, sem_warn.adb,\n+\tsem_warn.ads: Fix comment typos.\n+\n \t* s-secsta.adb, s-sequio.ads, s-shasto.ads,\n \ts-soflin.ads, s-stalib.ads, s-stausa.adb,\n \ts-stausa.ads, s-strxdr.adb, s-taenca.adb, s-taenca.ads,"}, {"sha": "637e15351e5f03c9fbcffcf76a637d113a64feff", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -489,7 +489,7 @@ package body Sem_Ch10 is\n \n             --  Avoid checking implicitly generated with clauses, limited\n             --  with clauses or withs that have pragma Elaborate or\n-            --  Elaborate_All apllied.\n+            --  Elaborate_All applied.\n \n             if Nkind (Clause) = N_With_Clause\n               and then not Implicit_With (Clause)\n@@ -633,7 +633,7 @@ package body Sem_Ch10 is\n       --  level (i.e. this subunit will be handled on the way down from the\n       --  parent), so at this level we immediately return. If the subunit\n       --  ends up not analyzed, it means that the parent did not contain a\n-      --  stub for it, or that there errors were dectected in some ancestor.\n+      --  stub for it, or that there errors were detected in some ancestor.\n \n       if Nkind (Unit_Node) = N_Subunit\n         and then not Analyzed (Lib_Unit)\n@@ -928,7 +928,7 @@ package body Sem_Ch10 is\n          Remove_Unit_From_Visibility (Defining_Entity (Unit_Node));\n \n       --  If the unit is an instantiation whose body will be elaborated for\n-      --  inlining purposes, use the the proper entity of the instance. The\n+      --  inlining purposes, use the proper entity of the instance. The\n       --  entity may be missing if the instantiation was illegal.\n \n       elsif Nkind (Unit_Node) = N_Package_Instantiation\n@@ -1101,7 +1101,7 @@ package body Sem_Ch10 is\n \n                  or else Is_Preelaborated (Spec_Id)\n \n-               --  No checks needed if pagma Elaborate_Body present\n+               --  No checks needed if pragma Elaborate_Body present\n \n                  or else Has_Pragma_Elaborate_Body (Spec_Id)\n \n@@ -1275,7 +1275,7 @@ package body Sem_Ch10 is\n            and then not Limited_Present (Item)\n          then\n             --  Skip analyzing with clause if no unit, nothing to do (this\n-            --  happens for a with that references a non-existant unit)\n+            --  happens for a with that references a non-existent unit)\n \n             if Present (Library_Unit (Item)) then\n                Analyze (Item);\n@@ -1757,7 +1757,7 @@ package body Sem_Ch10 is\n    begin\n       Check_Stub_Level (N);\n \n-      --  First occurence of name may have been as an incomplete type\n+      --  First occurrence of name may have been as an incomplete type\n \n       if Present (Nam) and then Ekind (Nam) = E_Incomplete_Type then\n          Nam := Full_View (Nam);\n@@ -2165,7 +2165,7 @@ package body Sem_Ch10 is\n    begin\n       Check_Stub_Level (N);\n \n-      --  First occurence of name may have been as an incomplete type\n+      --  First occurrence of name may have been as an incomplete type\n \n       if Present (Nam) and then Ekind (Nam) = E_Incomplete_Type then\n          Nam := Full_View (Nam);\n@@ -2660,7 +2660,7 @@ package body Sem_Ch10 is\n       P     : Node_Id;\n \n       function Build_Unit_Name (Nam : Node_Id) return Node_Id;\n-      --  Comment requireed here ???\n+      --  Comment required here ???\n \n       ---------------------\n       -- Build_Unit_Name --\n@@ -5477,7 +5477,7 @@ package body Sem_Ch10 is\n                   Next_Entity (E);\n                end loop;\n \n-               --  If the previous search was not sucessful then the entity\n+               --  If the previous search was not successful then the entity\n                --  to be restored in the homonym list is the non-limited view\n \n                if E = First_Private_Entity (P) then"}, {"sha": "066ceecb4bfaec8212abf7b3c25adc6f97b0ca11", "filename": "gcc/ada/sem_ch10.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch10.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch10.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,7 +56,7 @@ package Sem_Ch10 is\n    --  private part of a nested package, even if this package appears in\n    --  the visible part of the enclosing compilation unit. This Ada 2005\n    --  rule imposes extra steps in order to install/remove the private_with\n-   --  clauses of the an enclosing unit.\n+   --  clauses of an enclosing unit.\n \n    procedure Load_Needed_Body (N : Node_Id; OK : out Boolean);\n    --  Load and analyze the body of a context unit that is generic, or"}, {"sha": "8728bfe468464e56704eafe871bfd6eb039bd124", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -111,7 +111,7 @@ package body Sem_Ch12 is\n    --  b) Each instantiation copies the original tree, and inserts into it a\n    --  series of declarations that describe the mapping between generic formals\n    --  and actuals. For example, a generic In OUT parameter is an object\n-   --  renaming of the corresponing actual, etc. Generic IN parameters are\n+   --  renaming of the corresponding actual, etc. Generic IN parameters are\n    --  constant declarations.\n \n    --  c) In order to give the right visibility for these renamings, we use\n@@ -465,7 +465,7 @@ package body Sem_Ch12 is\n \n    function Is_Generic_Formal (E : Entity_Id) return Boolean;\n    --  Utility to determine whether a given entity is declared by means of\n-   --  of a formal parameter declaration. Used to set properly the visiblity\n+   --  of a formal parameter declaration. Used to set properly the visibility\n    --  of generic formals of a generic package declared with a box or with\n    --  partial parametrization.\n \n@@ -666,7 +666,7 @@ package body Sem_Ch12 is\n    --\n    --  Nodes that are selected components in the parse tree may be rewritten\n    --  as expanded names after resolution, and must be treated as potential\n-   --  entity holders. which is why they also have an Associated_Node.\n+   --  entity holders, which is why they also have an Associated_Node.\n    --\n    --  Nodes that do not come from source, such as freeze nodes, do not appear\n    --  in the generic tree, and need not have an associated node.\n@@ -802,7 +802,7 @@ package body Sem_Ch12 is\n      (Pack_Id    : Entity_Id;\n       Is_Package : Boolean := True);\n    --  Restore the private views of external types, and unmark the generic\n-   --  renamings of actuals, so that they become comptible subtypes again.\n+   --  renamings of actuals, so that they become compatible subtypes again.\n    --  For subprograms, Pack_Id is the package constructed to hold the\n    --  renamings.\n \n@@ -882,7 +882,7 @@ package body Sem_Ch12 is\n \n       Default_Formals : constant List_Id := New_List;\n       --  If an Other_Choice is present, some of the formals may be defaulted.\n-      --  To simplify the treatement of visibility in an instance, we introduce\n+      --  To simplify the treatment of visibility in an instance, we introduce\n       --  individual defaults for each such formal. These defaults are\n       --  appended to the list of associations and replace the Others_Choice.\n \n@@ -1442,8 +1442,8 @@ package body Sem_Ch12 is\n          end loop;\n       end;\n \n-      --  If this is a formal package. normalize the parameter list by adding\n-      --  explicit box asssociations for the formals that are covered by an\n+      --  If this is a formal package, normalize the parameter list by adding\n+      --  explicit box associations for the formals that are covered by an\n       --  Others_Choice.\n \n       if not Is_Empty_List (Default_Formals) then\n@@ -1967,7 +1967,7 @@ package body Sem_Ch12 is\n       --  The formal package is rewritten so that its parameters are replaced\n       --  with corresponding declarations. For parameters with bona fide\n       --  associations these declarations are created by Analyze_Associations\n-      --  as for aa regular instantiation. For boxed parameters, we preserve\n+      --  as for a regular instantiation. For boxed parameters, we preserve\n       --  the formal declarations and analyze them, in order to introduce\n       --  entities of the right kind in the environment of the formal.\n \n@@ -3180,7 +3180,7 @@ package body Sem_Ch12 is\n             --  body to instantiate until the enclosing generic is instantiated\n             --  and there is an actual for the formal package. If the formal\n             --  package has parameters, we build a regular package instance for\n-            --  it, that preceeds the original formal package declaration.\n+            --  it, that precedes the original formal package declaration.\n \n             if In_Open_Scopes (Scope (Scope (Gen_Unit))) then\n                declare\n@@ -3338,8 +3338,9 @@ package body Sem_Ch12 is\n          --  on current node so context is complete for analysis (including\n          --  nested instantiations). If this is the main unit, the declaration\n          --  eventually replaces the instantiation node. If the instance body\n-         --  is later created, it replaces the instance node, and the declation\n-         --  is attached to it (see Build_Instance_Compilation_Unit_Nodes).\n+         --  is created later, it replaces the instance node, and the\n+         --  declaration is attached to it (see\n+         --  Build_Instance_Compilation_Unit_Nodes).\n \n          else\n             if Cunit_Entity (Current_Sem_Unit) = Defining_Entity (N) then\n@@ -3535,7 +3536,7 @@ package body Sem_Ch12 is\n          --  removed previously.\n \n          --  If current scope is the body of a child unit, remove context of\n-         --  spec as well. If an enclosing scope is an instance body. the\n+         --  spec as well. If an enclosing scope is an instance body, the\n          --  context has already been removed, but the entities in the body\n          --  must be made invisible as well.\n \n@@ -4514,7 +4515,7 @@ package body Sem_Ch12 is\n          if No (E1) then\n             return;\n \n-         --  If the formal entity comes from a formal declaration. it was\n+         --  If the formal entity comes from a formal declaration, it was\n          --  defaulted in the formal package, and no check is needed on it.\n \n          elsif Nkind (Parent (E2)) =  N_Formal_Object_Declaration then\n@@ -4701,7 +4702,7 @@ package body Sem_Ch12 is\n    begin\n       --  The instantiation appears before the generic body if we are in the\n       --  scope of the unit containing the generic, either in its spec or in\n-      --  the package body. and before the generic body.\n+      --  the package body, and before the generic body.\n \n       if Ekind (Gen_Comp) = E_Package_Body then\n          Gen_Comp := Spec_Entity (Gen_Comp);\n@@ -5777,7 +5778,7 @@ package body Sem_Ch12 is\n \n          --  If we are not instantiating, then this is where we load and\n          --  analyze subunits, i.e. at the point where the stub occurs. A\n-         --  more permissivle system might defer this analysis to the point\n+         --  more permissible system might defer this analysis to the point\n          --  of instantiation, but this seems to complicated for now.\n \n          if not Instantiating then\n@@ -5796,7 +5797,7 @@ package body Sem_Ch12 is\n                     Error_Node => N);\n \n                --  If the proper body is not found, a warning message will be\n-               --  emitted when analyzing the stub, or later at the the point\n+               --  emitted when analyzing the stub, or later at the point\n                --  of instantiation. Here we just leave the stub as is.\n \n                if Unum = No_Unit then\n@@ -5863,7 +5864,7 @@ package body Sem_Ch12 is\n       --  unit field of N points to the parent unit (which is a compilation\n       --  unit) and need not (and cannot!) be copied.\n \n-      --  When the proper body of the stub is analyzed, thie library_unit link\n+      --  When the proper body of the stub is analyzed, the library_unit link\n       --  is used to establish the proper context (see sem_ch10).\n \n       --  The other fields of a compilation unit are copied as usual\n@@ -6253,7 +6254,7 @@ package body Sem_Ch12 is\n             end loop;\n          end Find_Depth;\n \n-      --  Start of procesing for Earlier\n+      --  Start of processing for Earlier\n \n       begin\n          Find_Depth (P1, D1);\n@@ -6370,7 +6371,7 @@ package body Sem_Ch12 is\n \n    begin\n       --  If the instance and the generic body appear within the same unit, and\n-      --  the instance preceeds the generic, the freeze node for the instance\n+      --  the instance precedes the generic, the freeze node for the instance\n       --  must appear after that of the generic. If the generic is nested\n       --  within another instance I2, then current instance must be frozen\n       --  after I2. In both cases, the freeze nodes are those of enclosing\n@@ -6775,7 +6776,7 @@ package body Sem_Ch12 is\n \n          --  The inherited context is attached to the enclosing compilation\n          --  unit. This is either the main unit, or the declaration for the\n-         --  main unit (in case the instantation appears within the package\n+         --  main unit (in case the instantiation appears within the package\n          --  declaration and the main unit is its body).\n \n          Current_Unit := Parent (Inst);\n@@ -7260,7 +7261,7 @@ package body Sem_Ch12 is\n          Actual_Ent  : Entity_Id);\n       --  Associates the formal entity with the actual. In the case\n       --  where Formal_Ent is a formal package, this procedure iterates\n-      --  through all of its formals and enters associations betwen the\n+      --  through all of its formals and enters associations between the\n       --  actuals occurring in the formal package's corresponding actual\n       --  package (given by Actual_Ent) and the formal package's formal\n       --  parameters. This procedure recurses if any of the parameters is\n@@ -7277,7 +7278,7 @@ package body Sem_Ch12 is\n       procedure Map_Entities (Form : Entity_Id; Act : Entity_Id);\n       --  Within the generic part, entities in the formal package are\n       --  visible. To validate subsequent type declarations, indicate\n-      --  the correspondence betwen the entities in the analyzed formal,\n+      --  the correspondence between the entities in the analyzed formal,\n       --  and the entities in  the actual package. There are three packages\n       --  involved in the instantiation of a formal package: the parent\n       --  generic P1 which appears in the generic declaration, the fake\n@@ -8621,7 +8622,7 @@ package body Sem_Ch12 is\n               (\"cannot find body of generic package &\", Inst_Node, Gen_Unit);\n \n          --  Don't attempt to perform any cleanup actions if some other error\n-         --  was aready detected, since this can cause blowups.\n+         --  was already detected, since this can cause blowups.\n \n          else\n             return;\n@@ -8646,7 +8647,7 @@ package body Sem_Ch12 is\n             Build_Elaboration_Entity (Parent (Inst_Node), Act_Decl_Id);\n \n          --  If the instantiation is not a library unit, then append the\n-         --  declaration to the list of implicitly generated entities. unless\n+         --  declaration to the list of implicitly generated entities, unless\n          --  it is already a list member which means that it was already\n          --  processed\n \n@@ -8715,7 +8716,7 @@ package body Sem_Ch12 is\n             Set_Has_Completion (Anon_Id);\n             return;\n \n-         --  For other cases, commpile the body\n+         --  For other cases, compile the body\n \n          else\n             Load_Parent_Of_Generic\n@@ -8770,7 +8771,7 @@ package body Sem_Ch12 is\n          Check_Generic_Actuals (Pack_Id, False);\n \n          --  Generate a reference to link the visible subprogram instance to\n-         --  the the generic body, which for navigation purposes is the only\n+         --  the generic body, which for navigation purposes is the only\n          --  available source for the instance.\n \n          Generate_Reference\n@@ -9386,7 +9387,7 @@ package body Sem_Ch12 is\n             Abandon_Instantiation (Actual);\n          end if;\n \n-         --  Ada 2005 (AI-443): Synchronized formal derived type ckecks. Note\n+         --  Ada 2005 (AI-443): Synchronized formal derived type checks. Note\n          --  that the formal type declaration has been rewritten as a private\n          --  extension.\n \n@@ -10709,7 +10710,7 @@ package body Sem_Ch12 is\n \n             --  Within a nested instantiation, a defaulted actual is an empty\n             --  association, so nothing to analyze. If the subprogram actual\n-            --  isan attribute, analyze prefix only, because actual is not a\n+            --  is an attribute, analyze prefix only, because actual is not a\n             --  complete attribute reference.\n \n             --  If actual is an allocator, analyze expression only. The full\n@@ -11018,7 +11019,7 @@ package body Sem_Ch12 is\n             --  package itself. If the instance is a subprogram, all entities\n             --  in the corresponding package are renamings. If this entity is\n             --  a formal package, make its own formals private as well. The\n-            --  actual in this case is itself the renaming of an instantation.\n+            --  actual in this case is itself the renaming of an instantiation.\n             --  If the entity is not a package renaming, it is the entity\n             --  created to validate formal package actuals: ignore.\n \n@@ -11467,7 +11468,7 @@ package body Sem_Ch12 is\n             Next (Act2);\n          end loop;\n \n-         --  Find the associations added for default suprograms\n+         --  Find the associations added for default subprograms\n \n          if Present (Act2) then\n             while Nkind (Act2) /= N_Generic_Association"}, {"sha": "7ebb2e88342ed1d03b760f047c83f8b87d81afa7", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -130,7 +130,7 @@ package Sem_Ch12 is\n    --  an inlined body (so that errout can distinguish cases for generating\n    --  error messages, otherwise the treatment is identical). In this call\n    --  N is the subprogram body and E is the defining identifier of the\n-   --  subprogram in quiestion. The resulting Sloc adjustment factor is\n+   --  subprogram in question. The resulting Sloc adjustment factor is\n    --  saved as part of the internal state of the Sem_Ch12 package for use\n    --  in subsequent calls to copy nodes.\n "}, {"sha": "93d66270e745e892ee1cd1a76cfb9f473334e5c9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -67,13 +67,13 @@ package body Sem_Ch13 is\n \n    procedure Alignment_Check_For_Esize_Change (Typ : Entity_Id);\n    --  This routine is called after setting the Esize of type entity Typ.\n-   --  The purpose is to deal with the situation where an aligment has been\n+   --  The purpose is to deal with the situation where an alignment has been\n    --  inherited from a derived type that is no longer appropriate for the\n    --  new Esize value. In this case, we reset the Alignment to unknown.\n \n    procedure Check_Component_Overlap (C1_Ent, C2_Ent : Entity_Id);\n    --  Given two entities for record components or discriminants, checks\n-   --  if they hav overlapping component clauses and issues errors if so.\n+   --  if they have overlapping component clauses and issues errors if so.\n \n    function Get_Alignment_Value (Expr : Node_Id) return Uint;\n    --  Given the expression for an alignment value, returns the corresponding\n@@ -118,7 +118,7 @@ package body Sem_Ch13 is\n    --  call to Validate_Unchecked_Conversions does the actual error\n    --  checking and posting of warnings. The reason for this delayed\n    --  processing is to take advantage of back-annotations of size and\n-   --  alignment values peformed by the back end.\n+   --  alignment values performed by the back end.\n \n    type UC_Entry is record\n       Enode  : Node_Id;   -- node used for posting warnings\n@@ -294,7 +294,7 @@ package body Sem_Ch13 is\n \n       declare\n          Comps : array (0 .. Num_CC) of Entity_Id;\n-         --  Array to collect component and discrimninant entities. The data\n+         --  Array to collect component and discriminant entities. The data\n          --  starts at index 1, the 0'th entry is for the sort routine.\n \n          function CP_Lt (Op1, Op2 : Natural) return Boolean;\n@@ -1490,7 +1490,7 @@ package body Sem_Ch13 is\n             --  The Stack_Bounded_Pool is used internally for implementing\n             --  access types with a Storage_Size. Since it only work\n             --  properly when used on one specific type, we need to check\n-            --  that it is not highjacked improperly:\n+            --  that it is not hijacked improperly:\n             --    type T is access Integer;\n             --    for T'Storage_Size use n;\n             --    type Q is access Float;\n@@ -2394,7 +2394,7 @@ package body Sem_Ch13 is\n \n                   elsif Present (Component_Clause (Comp)) then\n \n-                     --  Diagose duplicate rep clause, or check consistency\n+                     --  Diagnose duplicate rep clause, or check consistency\n                      --  if this is an inherited component. In a double fault,\n                      --  there may be a duplicate inconsistent clause for an\n                      --  inherited component.\n@@ -2730,7 +2730,7 @@ package body Sem_Ch13 is\n \n       --  For records longer than System.Storage_Unit, and for those where not\n       --  all components have component clauses, the back end determines the\n-      --  length (it may for example be appopriate to round up the size\n+      --  length (it may for example be appropriate to round up the size\n       --  to some convenient boundary, based on alignment considerations, etc).\n \n       if Unknown_RM_Size (Rectype) and then Hbit + 1 <= 32 then\n@@ -3574,7 +3574,7 @@ package body Sem_Ch13 is\n \n       --  Signed case. Note that we consider types like range 1 .. -1 to be\n       --  signed for the purpose of computing the size, since the bounds have\n-      --  to be accomodated in the base type.\n+      --  to be accommodated in the base type.\n \n       if Lo < 0 or else Hi < 0 then\n          S := 1;\n@@ -3775,7 +3775,7 @@ package body Sem_Ch13 is\n            (\"representation item must be after full type declaration\", N);\n          return True;\n \n-      --  If the type has incompleted components, a representation clause is\n+      --  If the type has incomplete components, a representation clause is\n       --  illegal but stream attributes and Convention pragmas are correct.\n \n       elsif Has_Private_Component (T) then\n@@ -4058,7 +4058,7 @@ package body Sem_Ch13 is\n \n       --  For enumeration types, we must check each literal to see if the\n       --  representation is the same. Note that we do not permit enumeration\n-      --  reprsentation clauses for Character and Wide_Character, so these\n+      --  representation clauses for Character and Wide_Character, so these\n       --  cases were already dealt with.\n \n       elsif Is_Enumeration_Type (T1) then"}, {"sha": "427f836f6e72d1289cf2e94d5fedaaa7ca7ee212", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -99,7 +99,7 @@ package Sem_Ch13 is\n    function Rep_Item_Too_Early (T : Entity_Id; N : Node_Id) return Boolean;\n    --  Called at the start of processing a representation clause or a\n    --  representation pragma. Used to check that the representation item\n-   --  is not being applied to an incompleted type or to a generic formal\n+   --  is not being applied to an incomplete type or to a generic formal\n    --  type or a type derived from a generic formal type. Returns False if\n    --  no such error occurs. If this error does occur, appropriate error\n    --  messages are posted on node N, and True is returned.\n@@ -150,7 +150,7 @@ package Sem_Ch13 is\n       Act_Unit : Entity_Id);\n    --  Validate a call to unchecked conversion. N is the node for the actual\n    --  instantiation, which is used only for error messages. Act_Unit is the\n-   --  entity for the instantiation, from which the actual types etc for this\n+   --  entity for the instantiation, from which the actual types etc. for this\n    --  instantiation can be determined. This procedure makes an entry in a\n    --  table and/or generates an N_Validate_Unchecked_Conversion node. The\n    --  actual checking is done in Validate_Unchecked_Conversions or in the"}, {"sha": "88ee0d55b18d8617ea97699b58fb80fb82e29e79", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -94,7 +94,7 @@ package body Sem_Ch3 is\n    --  Parent_Type is the entity for the parent type in the derived type\n    --  definition and Derived_Type the actual derived type. Is_Completion must\n    --  be set to False if Derived_Type is the N_Defining_Identifier node in N\n-   --  (ie Derived_Type = Defining_Identifier (N)). In this case N is not the\n+   --  (i.e. Derived_Type = Defining_Identifier (N)). In this case N is not the\n    --  completion of a private type declaration. If Is_Completion is set to\n    --  True, N is the completion of a private type declaration and Derived_Type\n    --  is different from the defining identifier inside N (i.e. Derived_Type /=\n@@ -749,7 +749,7 @@ package body Sem_Ch3 is\n       --  formal part is currently being analyzed, but will be the parent scope\n       --  in the case of a parameterless function, and we always want to use\n       --  the function's parent scope. Finally, if the function is a child\n-      --  unit, we must traverse the the tree to retrieve the proper entity.\n+      --  unit, we must traverse the tree to retrieve the proper entity.\n \n       elsif Nkind (Related_Nod) = N_Function_Specification\n         and then Nkind (Parent (N)) /= N_Parameter_Specification\n@@ -2030,7 +2030,7 @@ package body Sem_Ch3 is\n       Set_Primitive_Operations      (T, New_Elmt_List);\n \n       --  Complete the decoration of the class-wide entity if it was already\n-      --  built (ie. during the creation of the limited view)\n+      --  built (i.e. during the creation of the limited view)\n \n       if Present (CW) then\n          Set_Is_Interface (CW);\n@@ -2804,7 +2804,7 @@ package body Sem_Ch3 is\n          end if;\n \n          --  Set Has_Initial_Value if initializing expression present. Note\n-         --  that if there is no initializating expression, we leave the state\n+         --  that if there is no initializing expression, we leave the state\n          --  of this flag unchanged (usually it will be False, but notably in\n          --  the case of exception choice variables, it will already be true).\n \n@@ -5969,7 +5969,7 @@ package body Sem_Ch3 is\n    --  which makes the treatment for T1 and T2 identical.\n \n    --  What we want when inheriting S, is that references to D1 and D2 in R are\n-   --  replaced with references to their correct constraints, ie D1 and D2 in\n+   --  replaced with references to their correct constraints, i.e. D1 and D2 in\n    --  T1 and 1 and X in T2. So all R's discriminant references are replaced\n    --  with either discriminant references in the derived type or expressions.\n    --  This replacement is achieved as follows: before inheriting R's\n@@ -6049,7 +6049,7 @@ package body Sem_Ch3 is\n \n    --  The full view of a private extension is handled exactly as described\n    --  above. The model chose for the private view of a private extension is\n-   --  the same for what concerns discriminants (ie they receive the same\n+   --  the same for what concerns discriminants (i.e. they receive the same\n    --  treatment as in the tagged case). However, the private view of the\n    --  private extension always inherits the components of the parent base,\n    --  without replacing any discriminant reference. Strictly speaking this is\n@@ -7381,7 +7381,7 @@ package body Sem_Ch3 is\n                --  and therefore when reanalyzing \"subtype W is G (D => 1);\"\n                --  which really looks like \"subtype W is Rec (D => 1);\" at\n                --  the point of instantiation, we want to find the discriminant\n-               --  that corresponds to D in Rec, ie X.\n+               --  that corresponds to D in Rec, i.e. X.\n \n                if Present (Original_Discriminant (Id)) then\n                   Discr := Find_Corresponding_Discriminant (Id, T);\n@@ -9193,7 +9193,7 @@ package body Sem_Ch3 is\n          end if;\n \n          --  Allow incomplete declaration of tags (used to handle forward\n-         --  references to tags). The check on Ada_Tags avoids cicularities\n+         --  references to tags). The check on Ada_Tags avoids circularities\n          --  when rebuilding the compiler.\n \n          if RTU_Loaded (Ada_Tags)"}, {"sha": "60d3cd3f689e12769e33dbb86d0150b68d81f412", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -132,7 +132,7 @@ package body Sem_Ch4 is\n    --  an invalid selector error message.\n \n    function Defined_In_Scope (T : Entity_Id; S : Entity_Id) return Boolean;\n-   --  Verify that type T is declared in scope S. Used to find intepretations\n+   --  Verify that type T is declared in scope S. Used to find interpretations\n    --  for operators given by expanded names. This is abstracted as a separate\n    --  function to handle extensions to System, where S is System, but T is\n    --  declared in the extension.\n@@ -1344,7 +1344,7 @@ package body Sem_Ch4 is\n       if not Is_Overloaded (P) then\n          if Is_Access_Type (Etype (P)) then\n \n-            --  Set the Etype. We need to go thru Is_For_Access_Subtypes to\n+            --  Set the Etype. We need to go through Is_For_Access_Subtypes to\n             --  avoid other problems caused by the Private_Subtype and it is\n             --  safe to go to the Base_Type because this is the same as\n             --  converting the access value to its Base_Type.\n@@ -2213,7 +2213,7 @@ package body Sem_Ch4 is\n                 (N, Nam, Designated_Type (Subp_Type), Must_Skip);\n \n          --  The prefix can also be a parameterless function that returns an\n-         --  access to subprogram. in which case this is an indirect call.\n+         --  access to subprogram, in which case this is an indirect call.\n \n          elsif Is_Access_Type (Subp_Type)\n            and then Ekind (Designated_Type (Subp_Type)) = E_Subprogram_Type\n@@ -3195,7 +3195,7 @@ package body Sem_Ch4 is\n \n             --  If the prefix is a private extension, check only the visible\n             --  components of the partial view. This must include the tag,\n-            --  wich can appear in expanded code in a tag check.\n+            --  which can appear in expanded code in a tag check.\n \n             if Ekind (Type_To_Use) = E_Record_Type_With_Private\n               and then  Chars (Selector_Name (N)) /= Name_uTag\n@@ -3262,7 +3262,7 @@ package body Sem_Ch4 is\n                      Set_Original_Discriminant (Sel, Comp);\n                   end if;\n \n-               --  Before declararing an error, check whether this is tagged\n+               --  Before declaring an error, check whether this is tagged\n                --  private type and a call to a primitive operation.\n \n                elsif Ada_Version >= Ada_05\n@@ -5340,8 +5340,8 @@ package body Sem_Ch4 is\n             --  is never appropriate, even when Address is defined as a visible\n             --  Integer type. The reason is that we would really prefer Address\n             --  to behave as a private type, even in this case, which is there\n-            --  only to accomodate oddities of VMS address sizes. If Address is\n-            --  a visible integer type, we get lots of overload ambiguities.\n+            --  only to accommodate oddities of VMS address sizes. If Address\n+            --  is a visible integer type, we get lots of overload ambiguities.\n \n             if Nkind (N) in N_Binary_Op then\n                declare"}, {"sha": "a1cd552dfe37808e7cbf7be122d75a4c3faa0441", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -818,7 +818,7 @@ package body Sem_Ch5 is\n \n       begin\n          --  Initialize unblocked exit count for statements of begin block\n-         --  plus one for each excption handler that is present.\n+         --  plus one for each exception handler that is present.\n \n          Unblocked_Exit_Count := 1;\n \n@@ -930,7 +930,7 @@ package body Sem_Ch5 is\n \n       procedure Non_Static_Choice_Error (Choice : Node_Id);\n       --  Error routine invoked by the generic instantiation below when\n-      --  the case statment has a non static choice.\n+      --  the case statement has a non static choice.\n \n       procedure Process_Statements (Alternative : Node_Id);\n       --  Analyzes all the statements associated to a case alternative."}, {"sha": "4d566d76b5f7bc5a14dd6edb641cc77d98aa1d47", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -112,7 +112,7 @@ package body Sem_Ch6 is\n    procedure Build_Body_To_Inline (N : Node_Id; Subp : Entity_Id);\n    --  If a subprogram has pragma Inline and inlining is active, use generic\n    --  machinery to build an unexpanded body for the subprogram. This body is\n-   --  subsequenty used for inline expansions at call sites. If subprogram can\n+   --  subsequently used for inline expansions at call sites. If subprogram can\n    --  be inlined (depending on size and nature of local declarations) this\n    --  function returns true. Otherwise subprogram body is treated normally.\n    --  If proper warnings are enabled and the subprogram contains a construct\n@@ -673,7 +673,7 @@ package body Sem_Ch6 is\n       then\n          --  Apply constraint check. Note that this is done before the implicit\n          --  conversion of the expression done for anonymous access types to\n-         --  ensure correct generation of the null-excluding check asssociated\n+         --  ensure correct generation of the null-excluding check associated\n          --  with null-excluding expressions found in return statements.\n \n          Apply_Constraint_Check (Expr, R_Type);\n@@ -998,7 +998,7 @@ package body Sem_Ch6 is\n       --  The syntactic construct: PREFIX ACTUAL_PARAMETER_PART can denote\n       --  a procedure call or an entry call. The prefix may denote an access\n       --  to subprogram type, in which case an implicit dereference applies.\n-      --  If the prefix is an indexed component (without implicit defererence)\n+      --  If the prefix is an indexed component (without implicit dereference)\n       --  then the construct denotes a call to a member of an entire family.\n       --  If the prefix is a simple name, it may still denote a call to a\n       --  parameterless member of an entry family. Resolution of these various\n@@ -2200,7 +2200,7 @@ package body Sem_Ch6 is\n             if Nkind (Ostm) = N_Raise_Statement then\n                Set_Trivial_Subprogram (Stm);\n \n-            --  If null statement, and no following statemennts, turn on flag\n+            --  If null statement, and no following statements, turn on flag\n \n             elsif Nkind (Stm) = N_Null_Statement\n               and then Comes_From_Source (Stm)\n@@ -3618,7 +3618,7 @@ package body Sem_Ch6 is\n    begin\n       --  The algorithm checks every overriding dispatching operation against\n       --  all the corresponding overridden dispatching operations, detecting\n-      --  differences in coventions.\n+      --  differences in conventions.\n \n       Prim_Op_Elmt := First_Elmt (Primitive_Operations (Typ));\n       while Present (Prim_Op_Elmt) loop\n@@ -4260,8 +4260,8 @@ package body Sem_Ch6 is\n             then\n                null;\n \n-            --  A loop with no exit statement or iteration scheme if either\n-            --  an inifite loop, or it has some other exit (raise/return).\n+            --  A loop with no exit statement or iteration scheme is either\n+            --  an infinite loop, or it has some other exit (raise/return).\n             --  In either case, no warning is required.\n \n             else\n@@ -6529,7 +6529,7 @@ package body Sem_Ch6 is\n          else\n             Error_Msg_Sloc := Sloc (E);\n \n-            --  Generate message,with useful additionalwarning if in generic\n+            --  Generate message, with useful additional warning if in generic\n \n             if Is_Generic_Unit (E) then\n                Error_Msg_N (\"previous generic unit cannot be overloaded\", S);\n@@ -6580,9 +6580,9 @@ package body Sem_Ch6 is\n \n                --  There are some cases when both can be implicit, for example\n                --  when both a literal and a function that overrides it are\n-               --  inherited in a derivation, or when an inhertited operation\n+               --  inherited in a derivation, or when an inherited operation\n                --  of a tagged full type overrides the inherited operation of\n-               --  a private extension. Ada 83 had a special rule for the the\n+               --  a private extension. Ada 83 had a special rule for the\n                --  literal case. In Ada95, the later implicit operation hides\n                --  the former, and the literal is always the former. In the\n                --  odd case where both are derived operations declared at the\n@@ -7443,7 +7443,7 @@ package body Sem_Ch6 is\n       AS_Needed      : Boolean;\n \n    begin\n-      --  If this is an emtpy initialization procedure, no need to create\n+      --  If this is an empty initialization procedure, no need to create\n       --  actual subtypes (small optimization).\n \n       if Ekind (Subp) = E_Procedure"}, {"sha": "a535bd1188398d065c46c2b1a1352ed6ce9036eb", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -78,7 +78,7 @@ package Sem_Ch6 is\n      (New_Id  : Entity_Id;\n       Old_Id  : Entity_Id;\n       Err_Loc : Node_Id := Empty);\n-   --  Check that two callable entitites (subprograms, entries, literals)\n+   --  Check that two callable entities (subprograms, entries, literals)\n    --  are fully conformant, post error message if not (RM 6.3.1(17)) with\n    --  the flag being placed on the Err_Loc node if it is specified, and\n    --  on the appropriate component of the New_Id construct if not. Note:\n@@ -92,7 +92,7 @@ package Sem_Ch6 is\n       Old_Id   : Entity_Id;\n       Err_Loc  : Node_Id := Empty;\n       Get_Inst : Boolean := False);\n-   --  Check that two callable entitites (subprograms, entries, literals)\n+   --  Check that two callable entities (subprograms, entries, literals)\n    --  are mode conformant, post error message if not (RM 6.3.1(15)) with\n    --  the flag being placed on the Err_Loc node if it is specified, and\n    --  on the appropriate component of the New_Id construct if not. The\n@@ -114,7 +114,7 @@ package Sem_Ch6 is\n      (New_Id  : Entity_Id;\n       Old_Id  : Entity_Id;\n       Err_Loc : Node_Id := Empty);\n-   --  Check that two callable entitites (subprograms, entries, literals)\n+   --  Check that two callable entities (subprograms, entries, literals)\n    --  are subtype conformant, post error message if not (RM 6.3.1(16))\n    --  the flag being placed on the Err_Loc node if it is specified, and\n    --  on the appropriate component of the New_Id construct if not.\n@@ -123,7 +123,7 @@ package Sem_Ch6 is\n      (New_Id  : Entity_Id;\n       Old_Id  : Entity_Id;\n       Err_Loc : Node_Id := Empty);\n-   --  Check that two callable entitites (subprograms, entries, literals)\n+   --  Check that two callable entities (subprograms, entries, literals)\n    --  are type conformant, post error message if not (RM 6.3.1(14)) with\n    --  the flag being placed on the Err_Loc node if it is specified, and\n    --  on the appropriate component of the New_Id construct if not."}, {"sha": "da77f5813279bcb9bc064c2e7949e62a3d8e1236", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -462,7 +462,7 @@ package body Sem_Ch8 is\n    --  gram in an instance, for which special visibility checks apply.\n \n    function Has_Implicit_Operator (N : Node_Id) return Boolean;\n-   --  N is an expanded name whose selector is an operator name (eg P.\"+\").\n+   --  N is an expanded name whose selector is an operator name (e.g. P.\"+\").\n    --  declarative part contains an implicit declaration of an operator if it\n    --  has a declaration of a type to which one of the predefined operators\n    --  apply. The existence of this routine is an implementation artifact. A\n@@ -1431,7 +1431,7 @@ package body Sem_Ch8 is\n       --    in Sub must also have one. Otherwise the subtype of the Sub's\n       --    formal parameter must exclude null.\n       --\n-      --    If Ren is a renaming of a formal function and its retrun\n+      --    If Ren is a renaming of a formal function and its return\n       --    profile has a null exclusion, then Sub's return profile must\n       --    have one. Otherwise the subtype of Sub's return profile must\n       --    exclude null.\n@@ -1957,7 +1957,7 @@ package body Sem_Ch8 is\n          if Is_Actual then\n             null;\n \n-         --  Guard agaisnt previous errors, and omit renamings of predefined\n+         --  Guard against previous errors, and omit renamings of predefined\n          --  operators.\n \n          elsif Ekind (Old_S) /= E_Function\n@@ -3838,7 +3838,7 @@ package body Sem_Ch8 is\n                All_Overloadable := All_Overloadable and Is_Overloadable (E2);\n \n             --  Ada 2005 (AI-262): Protect against a form of Beujolais effect\n-            --  that can occurr in private_with clauses. Example:\n+            --  that can occur in private_with clauses. Example:\n \n             --    with A;\n             --    private with B;              package A is\n@@ -4027,7 +4027,7 @@ package body Sem_Ch8 is\n          --  When distribution features are available (Get_PCS_Name /=\n          --  Name_No_DSA), a remote access-to-subprogram type is converted\n          --  into a record type holding whatever information is needed to\n-         --  perform a remote call on an RCI suprogram. In that case we\n+         --  perform a remote call on an RCI subprogram. In that case we\n          --  rewrite any occurrence of the RAS type into the equivalent record\n          --  type here. 'Access attribute references and RAS dereferences are\n          --  then implemented using specific TSSs. However when distribution is\n@@ -4143,7 +4143,7 @@ package body Sem_Ch8 is\n             --    the entity is unambiguous, because the tree is not\n             --    sufficiently typed at this point for Generate_Reference to\n             --    determine whether this reference modifies the denoted object\n-            --    (because implicit derefences cannot be identified prior to\n+            --    (because implicit dereferences cannot be identified prior to\n             --    full type resolution).\n             --\n             --    The Is_Actual_Parameter routine takes care of one of these\n@@ -6110,7 +6110,7 @@ package body Sem_Ch8 is\n          end if;\n \n          --  If the new use clause appears in the private part of a parent unit\n-         --  it may appear to be redudant w.r.t. a use clause in a child unit,\n+         --  it may appear to be redundant w.r.t. a use clause in a child unit,\n          --  but the previous use clause was needed in the visible part of the\n          --  child, and no warning should be emitted.\n \n@@ -6989,7 +6989,7 @@ package body Sem_Ch8 is\n          --       type T ...       use P.T;\n \n          --  The compilation unit is the body of X. GNAT first compiles the\n-         --  spec of X, then procedes to the body. At that point P is marked\n+         --  spec of X, then proceeds to the body. At that point P is marked\n          --  as use visible. The analysis then reinstalls the spec along with\n          --  its context. The use clause P.T is now recognized as redundant,\n          --  but in the wrong context. Do not emit a warning in such cases."}, {"sha": "45fb07b32cc40180b4632a21c2f682791f19149b", "filename": "gcc/ada/sem_ch8.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -146,7 +146,7 @@ package Sem_Ch8 is\n    --  return, the contents of the scope stack must be made accessible again.\n    --  The flag Handle_Use indicates whether local use clauses must be\n    --  removed/installed. In the case of inlining of instance bodies, the\n-   --  visiblity handling is done fully in Inline_Instance_Body, and use\n+   --  visibility handling is done fully in Inline_Instance_Body, and use\n    --  clauses are handled there.\n \n    procedure Set_Use (L : List_Id);"}, {"sha": "d9e7ff9ca5ac89a91738ecf85cf4441a56dfd345", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -917,7 +917,7 @@ package body Sem_Ch9 is\n       if Nkind (Call) = N_Attribute_Reference then\n \n          --  Possibly a stream attribute, but definitely illegal. Other\n-         --  illegalitles, such as procedure calls, are diagnosed after\n+         --  illegalities, such as procedure calls, are diagnosed after\n          --  resolution.\n \n          Error_Msg_N (\"entry call alternative requires an entry call\", Call);\n@@ -983,7 +983,7 @@ package body Sem_Ch9 is\n    --  order to make it available to the barrier, we create an additional\n    --  scope, as for a loop, whose only declaration is the index name. This\n    --  loop is not attached to the tree and does not appear as an entity local\n-   --  to the protected type, so its existence need only be knwown to routines\n+   --  to the protected type, so its existence need only be known to routines\n    --  that process entry families.\n \n    procedure Analyze_Entry_Index_Specification (N : Node_Id) is\n@@ -2175,7 +2175,7 @@ package body Sem_Ch9 is\n              (\"triggering statement must be delay or entry call\", Trigger);\n \n          --  Ada 2005 (AI-345): If a procedure_call_statement is used for a\n-         --  procedure_or_entry_call, the procedure_name or pro- cedure_prefix\n+         --  procedure_or_entry_call, the procedure_name or procedure_prefix\n          --  of the procedure_call_statement shall denote an entry renamed by a\n          --  procedure, or (a view of) a primitive subprogram of a limited\n          --  interface whose first parameter is a controlling parameter."}, {"sha": "34065991103940e92c6d44d80917ce0d70d46f94", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -491,7 +491,7 @@ package body Sem_Elab is\n       --  calls and calls involving object notation) where W_Scope might not\n       --  be in the context of the current unit, and there is an intermediate\n       --  package that is, in which case the Elaborate_All has to be placed\n-      --  on this intedermediate package. These special cases are handled in\n+      --  on this intermediate package. These special cases are handled in\n       --  Set_Elaboration_Constraint.\n \n       Body_Acts_As_Spec : Boolean;\n@@ -1795,7 +1795,7 @@ package body Sem_Elab is\n       --    outer level call.\n \n       --    It is an outer level instantiation from elaboration code, or the\n-      --    instantiated entity is in the same elaboratoin scope.\n+      --    instantiated entity is in the same elaboration scope.\n \n       --  And in these cases, we will check both the inter-unit case and\n       --  the intra-unit (within a single unit) case.\n@@ -1877,7 +1877,7 @@ package body Sem_Elab is\n          return;\n \n       --  Nothing to do if analyzing in special spec-expression mode, since the\n-      --  call is not actualy being made at this time.\n+      --  call is not actually being made at this time.\n \n       elsif In_Spec_Expression then\n          return;\n@@ -2408,7 +2408,7 @@ package body Sem_Elab is\n               and then\n                 not Restriction_Active (No_Entry_Calls_In_Elaboration_Code)\n             then\n-               --  Runtime elaboration check required. generate check of the\n+               --  Runtime elaboration check required. Generate check of the\n                --  elaboration Boolean for the unit containing the entity.\n \n                Insert_Elab_Check (N,"}, {"sha": "7b85b6f886fcac2d0c84c0221b965085bceac9c6", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -85,7 +85,7 @@ package Sem_Elab is\n    --  Note on pragma Elaborate. The checking here assumes that a pragma\n    --  Elaborate on a with'ed unit guarantees that subprograms within the\n    --  unit can be called without causing an ABE. This is not in fact the\n-   --  case since pragma Elaborate does not guarantee the transititive\n+   --  case since pragma Elaborate does not guarantee the transitive\n    --  coverage guaranteed by Elaborate_All. However, we leave this issue\n    --  up to the binder, which has generates warnings if there are possible\n    --  problems in the use of pragma Elaborate."}, {"sha": "ee9f8a10d4c493f7c328b2096a03aad888450eb2", "filename": "gcc/ada/sem_elim.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_elim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_elim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,7 @@ with Types; use Types;\n package Sem_Elim is\n \n    procedure Initialize;\n-   --  Initialize for new main souce program\n+   --  Initialize for new main source program\n \n    procedure Process_Eliminate_Pragma\n      (Pragma_Node         : Node_Id;\n@@ -53,7 +53,7 @@ package Sem_Elim is\n    --  flag on the given entity.\n \n    procedure Eliminate_Error_Msg (N : Node_Id; E : Entity_Id);\n-   --  Called by the back end on encouterning a call to an eliminated\n+   --  Called by the back end on encountering a call to an eliminated\n    --  subprogram. N is the node for the call, and E is the entity of\n    --  the subprogram being eliminated.\n "}, {"sha": "9801df625e52da09583cb896091cd0b440130838", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -57,7 +57,7 @@ package body Sem_Eval is\n    -----------------------------------------\n \n    --  The compile time evaluation of expressions is distributed over several\n-   --  Eval_xxx procedures. These procedures are called immediatedly after\n+   --  Eval_xxx procedures. These procedures are called immediately after\n    --  a subexpression is resolved and is therefore accomplished in a bottom\n    --  up fashion. The flags are synthesized using the following approach.\n \n@@ -3227,7 +3227,7 @@ package body Sem_Eval is\n          return Ureal_0;\n       end if;\n \n-      --  If we fall through, we have a node that cannot be interepreted\n+      --  If we fall through, we have a node that cannot be interpreted\n       --  as a compile time constant. That is definitely an error.\n \n       raise Program_Error;\n@@ -3307,7 +3307,7 @@ package body Sem_Eval is\n          Typ := Full_View (Typ);\n       end if;\n \n-      --  For a result of type integer, subsitute an N_Integer_Literal node\n+      --  For a result of type integer, substitute an N_Integer_Literal node\n       --  for the result of the compile time evaluation of the expression.\n \n       if Is_Integer_Type (Typ) then\n@@ -3497,7 +3497,7 @@ package body Sem_Eval is\n       end if;\n \n    --  If any exception occurs, it means that we have some bug in the compiler\n-   --  possibly triggered by a previous error, or by some unforseen peculiar\n+   --  possibly triggered by a previous error, or by some unforeseen peculiar\n    --  occurrence. However, this is only an optimization attempt, so there is\n    --  really no point in crashing the compiler. Instead we just decide, too\n    --  bad, we can't figure out the answer in this case after all.\n@@ -4097,7 +4097,7 @@ package body Sem_Eval is\n          --  To understand the requirement for this test, see RM 4.9.1(1).\n          --  As is made clear in RM 3.5.4(11), type Integer, for example\n          --  is a constrained subtype with constraint bounds matching the\n-         --  bounds of its corresponding uncontrained base type. In this\n+         --  bounds of its corresponding unconstrained base type. In this\n          --  situation, Integer and Integer'Base do not statically match,\n          --  even though they have the same bounds.\n "}, {"sha": "f0dcd522b15130df31264c9cb2cfe934eb1a41ba", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,7 +56,7 @@ package Sem_Eval is\n \n    --    Raises_Constraint_Error\n \n-   --      This flag indicatest that it is known at compile time that the\n+   --      This flag indicates that it is known at compile time that the\n    --      evaluation of an expression raises constraint error. If the\n    --      expression is static, and this flag is off, then it is also known at\n    --      compile time that the expression does not raise constraint error\n@@ -159,7 +159,7 @@ package Sem_Eval is\n    --  An OK static expression is one that is static in the RM definition sense\n    --  and which does not raise constraint error. For most legality checking\n    --  purposes you should use Is_Static_Expression. For those legality checks\n-   --  where the expression N should not raise constaint error use this\n+   --  where the expression N should not raise constraint error use this\n    --  routine. This routine is *not* to be used in contexts where the test is\n    --  for compile time evaluation purposes. Use Compile_Time_Known_Value\n    --  instead (see section on \"Compile-Time Known Values\" above).\n@@ -328,7 +328,7 @@ package Sem_Eval is\n       Int_Real  : Boolean := False) return Boolean;\n    --  Returns True if it can be guaranteed at compile time that expression is\n    --  known to be in range of the subtype Typ. If the values of N or of either\n-   --  bouds of Type are unknown at compile time, False will always be\n+   --  bounds of Type are unknown at compile time, False will always be\n    --  returned. A result of False does not mean that the expression is out of\n    --  range, merely that it cannot be determined at compile time that it is in\n    --  range. If Typ is a floating point type or Int_Real is set, any integer\n@@ -339,8 +339,8 @@ package Sem_Eval is\n    --  is True then any fixed-point value is treated as though it was discrete\n    --  value (i.e. the underlying integer value is used). In this case we use\n    --  the corresponding integer value, both for the bounds of Typ, and for the\n-   --  value of the expression N. If Typ is a discret type and Fixed_Int as\n-   --  well as Int_Real are false, intere values are used throughout.\n+   --  value of the expression N. If Typ is a discrete type and Fixed_Int as\n+   --  well as Int_Real are false, integer values are used throughout.\n \n    function Is_Out_Of_Range\n      (N         : Node_Id;"}, {"sha": "9d7319759b37e589ece7273c577dbc023f833ff8", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -132,7 +132,7 @@ package body Sem_Intr is\n          end if;\n \n       --  Check for the case of freeing a non-null object which will raise\n-      --  Constaint_Error. Issue warning here, do the expansion in Exp_Intr.\n+      --  Constraint_Error. Issue warning here, do the expansion in Exp_Intr.\n \n       elsif Cnam = Name_Free\n         and then Can_Never_Be_Null (Etype (Arg1))\n@@ -158,7 +158,7 @@ package body Sem_Intr is\n       T2  : Entity_Id;\n \n    begin\n-      --  Aritnmetic operators\n+      --  Arithmetic operators\n \n       if Nam = Name_Op_Add\n            or else\n@@ -304,7 +304,7 @@ package body Sem_Intr is\n          Errint (\"unrecognized intrinsic subprogram\", E, N);\n \n       --  We always allow intrinsic specifications in language defined units\n-      --  and in expanded code. We assume that the GNAT implemetors know what\n+      --  and in expanded code. We assume that the GNAT implementors know what\n       --  they are doing, and do not write or generate junk use of intrinsic!\n \n       elsif not Comes_From_Source (E)"}, {"sha": "177a39ca671904dbad87f01cdcb4aa80874d69cf", "filename": "gcc/ada/sem_mech.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_mech.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_mech.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -183,7 +183,7 @@ package body Sem_Mech is\n    is\n    begin\n       --  Right now we only do some checks for functions returning arguments\n-      --  by desctiptor. Probably mode checks need to be added here ???\n+      --  by descriptor. Probably mode checks need to be added here ???\n \n       if Mech in Descriptor_Codes and then not Is_Formal (Ent) then\n          if Is_Record_Type (Etype (Ent)) then\n@@ -207,7 +207,7 @@ package body Sem_Mech is\n \n    begin\n       --  Skip this processing if inside a generic template. Not only is\n-      --  it uneccessary (since neither extra formals nor mechanisms are\n+      --  it unnecessary (since neither extra formals nor mechanisms are\n       --  relevant for the template itself), but at least at the moment,\n       --  procedures get frozen early inside a template so attempting to\n       --  look at the formal types does not work too well if they are\n@@ -241,7 +241,7 @@ package body Sem_Mech is\n                ---------\n \n                --  Note: all RM defined conventions are treated the same\n-               --  from the point of view of parameter passing mechanims\n+               --  from the point of view of parameter passing mechanism\n \n                when Convention_Ada       |\n                     Convention_Intrinsic |"}, {"sha": "1673a671b0ec3a9080c34e2cc4b628babac7e953", "filename": "gcc/ada/sem_mech.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_mech.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_mech.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -144,7 +144,7 @@ package Sem_Mech is\n    --  this call is to set mechanism values for formals and for the\n    --  function return if they have not already been explicitly set by\n    --  a use of an extended Import or Export pragma. The idea is to set\n-   --  mechanism values whereever the semantics is dictated by either\n+   --  mechanism values wherever the semantics is dictated by either\n    --  requirements or implementation advice in the RM, and to leave\n    --  the mechanism set to Default if there is no requirement, so that\n    --  the back-end is free to choose the most efficient method."}, {"sha": "b98e0044beb3c9ab14eab08be8ca73b0205c1fa2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -564,7 +564,7 @@ package body Sem_Prag is\n       --  Decls where Decls is the list of declarative items.\n \n       function Is_Configuration_Pragma return Boolean;\n-      --  Deterermines if the placement of the current pragma is appropriate\n+      --  Determines if the placement of the current pragma is appropriate\n       --  for a configuration pragma.\n \n       function Is_In_Context_Clause return Boolean;\n@@ -587,7 +587,7 @@ package body Sem_Prag is\n       --  Common processing for Compile_Time_Error and Compile_Time_Warning\n \n       procedure Process_Convention (C : out Convention_Id; E : out Entity_Id);\n-      --  Common procesing for Convention, Interface, Import and Export.\n+      --  Common processing for Convention, Interface, Import and Export.\n       --  Checks first two arguments of pragma, and sets the appropriate\n       --  convention value in the specified entity or entities. On return\n       --  C is the convention, E is the referenced entity.\n@@ -606,7 +606,7 @@ package body Sem_Prag is\n         (Arg_Internal : Node_Id;\n          Arg_External : Node_Id;\n          Arg_Size     : Node_Id);\n-      --  Common processing for the pragmass Import/Export_Object.\n+      --  Common processing for the pragmas Import/Export_Object.\n       --  The three arguments correspond to the three named parameters\n       --  of the pragmas. An argument is empty if the corresponding\n       --  parameter is not present in the pragma.\n@@ -629,7 +629,7 @@ package body Sem_Prag is\n          Arg_First_Optional_Parameter : Node_Id := Empty);\n       --  Common processing for all extended Import and Export pragmas\n       --  applying to subprograms. The caller omits any arguments that do\n-      --  bnot apply to the pragma in question (for example, Arg_Result_Type\n+      --  not apply to the pragma in question (for example, Arg_Result_Type\n       --  can be non-Empty only in the Import_Function and Export_Function\n       --  cases). The argument names correspond to the allowed pragma\n       --  association identifiers.\n@@ -1486,7 +1486,7 @@ package body Sem_Prag is\n       --------------------------------------\n \n       --  A configuration pragma must appear in the context clause of a\n-      --  compilation unit, and only other pragmas may preceed it. Note that\n+      --  compilation unit, and only other pragmas may precede it. Note that\n       --  the test also allows use in a configuration pragma file.\n \n       procedure Check_Valid_Configuration_Pragma is\n@@ -2129,7 +2129,7 @@ package body Sem_Prag is\n \n                --  An interesting improvement here. If an object of type X\n                --  is declared atomic, and the type X is not atomic, that's\n-               --  a pity, since it may not have appropraite alignment etc.\n+               --  a pity, since it may not have appropriate alignment etc.\n                --  We can rescue this in the special case where the object\n                --  and type are in the same unit by just setting the type\n                --  as atomic, so that the back end will process it as atomic.\n@@ -2831,7 +2831,7 @@ package body Sem_Prag is\n                end if;\n \n                --  We have a match if the corresponding argument is of an\n-               --  anonymous access type, and its designicated type matches\n+               --  anonymous access type, and its designated type matches\n                --  the type of the prefix of the access attribute\n \n                return Ekind (Ftyp) = E_Anonymous_Access_Type\n@@ -3040,7 +3040,7 @@ package body Sem_Prag is\n          then\n             null;\n \n-         --  In all other cases, set entit as exported\n+         --  In all other cases, set entity as exported\n \n          else\n             Set_Exported (Ent, Arg_Internal);\n@@ -3535,7 +3535,7 @@ package body Sem_Prag is\n \n          function Inlining_Not_Possible (Subp : Entity_Id) return Boolean;\n          --  Returns True if it can be determined at this stage that inlining\n-         --  is not possible, for examle if the body is available and contains\n+         --  is not possible, for example if the body is available and contains\n          --  exception handlers, we prevent inlining, since otherwise we can\n          --  get undefined symbols at link time. This function also emits a\n          --  warning if front-end inlining is enabled and the pragma appears\n@@ -4808,7 +4808,7 @@ package body Sem_Prag is\n       end;\n \n       --  An enumeration type defines the pragmas that are supported by the\n-      --  implementation. Get_Pragma_Id (in package Prag) transorms a name\n+      --  implementation. Get_Pragma_Id (in package Prag) transforms a name\n       --  into the corresponding enumeration value for the following case.\n \n       case Prag_Id is\n@@ -6249,7 +6249,7 @@ package body Sem_Prag is\n                      --  compilation unit. If the pragma appears in some unit\n                      --  in the context, there might still be a need for an\n                      --  Elaborate_All_Desirable from the current compilation\n-                     --  to the the named unit, so we keep the check enabled.\n+                     --  to the named unit, so we keep the check enabled.\n \n                      if In_Extended_Main_Source_Unit (N) then\n                         Set_Suppress_Elaboration_Warnings\n@@ -6271,7 +6271,7 @@ package body Sem_Prag is\n             end loop Outer;\n \n             --  Give a warning if operating in static mode with -gnatwl\n-            --  (elaboration warnings eanbled) switch set.\n+            --  (elaboration warnings enabled) switch set.\n \n             if Elab_Warnings and not Dynamic_Elaboration_Checks then\n                Error_Msg_N\n@@ -9001,7 +9001,7 @@ package body Sem_Prag is\n \n          --  pragma No_Run_Time\n \n-         --  Note: this pragma is retained for backwards compatibiltiy.\n+         --  Note: this pragma is retained for backwards compatibility.\n          --  See body of Rtsfind for full details on its handling.\n \n          when Pragma_No_Run_Time =>\n@@ -10567,7 +10567,7 @@ package body Sem_Prag is\n                end if;\n             end Check_OK_Stream_Convert_Function;\n \n-         --  Start of procecessing for Stream_Convert\n+         --  Start of processing for Stream_Convert\n \n          begin\n             GNAT_Pragma;\n@@ -11962,7 +11962,7 @@ package body Sem_Prag is\n          return True;\n       end Add_Config_Static_String;\n \n-   --  Start of prorcessing for Is_Config_Static_String\n+   --  Start of processing for Is_Config_Static_String\n \n    begin\n \n@@ -11977,8 +11977,8 @@ package body Sem_Prag is\n    --  This function makes use of the following static table which indicates\n    --  whether a given pragma is significant. A value of -1 in this table\n    --  indicates that the reference is significant. A value of zero indicates\n-   --  than appearence as any argument is insignificant, a positive value\n-   --  indicates that appearence in that parameter position is significant.\n+   --  than appearance as any argument is insignificant, a positive value\n+   --  indicates that appearance in that parameter position is significant.\n \n    --  A value of 99 flags a special case requiring a special check (this is\n    --  used for cases not covered by this standard encoding, e.g. pragma Check"}, {"sha": "1bb51150417e82a5514dc1644c03d33994c47924", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -75,7 +75,7 @@ package Sem_Prag is\n    --  occurrence is a reference for the purposes of giving warnings about\n    --  unreferenced variables. This function returns True if the reference is\n    --  not a reference from this point of view (e.g. the occurrence in a pragma\n-   --  Pack) and False if it is a real reference (e.g. the occcurrence in a\n+   --  Pack) and False if it is a real reference (e.g. the occurrence in a\n    --  pragma Export);\n \n    function Is_Pragma_String_Literal (Par : Node_Id) return Boolean;"}, {"sha": "cfa1a8cd0d7e40b70284431d62c6389dd4c72199", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -828,7 +828,7 @@ package body Sem_Res is\n       function Uses_SS (T : Entity_Id) return Boolean;\n       --  Check whether the creation of an object of the type will involve\n       --  use of the secondary stack. If T is a record type, this is true\n-      --  if the expression for some component uses the secondary stack, eg.\n+      --  if the expression for some component uses the secondary stack, e.g.\n       --  through a call to a function that returns an unconstrained value.\n       --  False if T is controlled, because cleanups occur elsewhere.\n \n@@ -985,7 +985,7 @@ package body Sem_Res is\n                         or else Is_Overloaded (N)))\n \n       --  Rewrite as call if it is an explicit deference of an expression of\n-      --  a subprogram access type, and the suprogram type is not that of a\n+      --  a subprogram access type, and the subprogram type is not that of a\n       --  procedure or entry.\n \n       or else\n@@ -2387,7 +2387,7 @@ package body Sem_Res is\n             end if;\n          end if;\n \n-         --  A user-defined operator is tranformed into a function call at\n+         --  A user-defined operator is transformed into a function call at\n          --  this point, so that further processing knows that operators are\n          --  really operators (i.e. are predefined operators). User-defined\n          --  operators that are intrinsic are just renamings of the predefined\n@@ -2869,7 +2869,7 @@ package body Sem_Res is\n                Set_Parent (Actval, N);\n \n                --  Resolve aggregates with their base type, to avoid scope\n-               --  anomalies: the subtype was first built in the suprogram\n+               --  anomalies: the subtype was first built in the subprogram\n                --  declaration, and the current call may be nested.\n \n                if Nkind (Actval) = N_Aggregate\n@@ -3585,7 +3585,7 @@ package body Sem_Res is\n       --  1) Analyze Top_Record\n       --  2) Analyze Level_1_Coextension\n       --  3) Analyze Level_2_Coextension\n-      --  4) Resolve Level_2_Coextnesion. The allocator is marked as a\n+      --  4) Resolve Level_2_Coextension. The allocator is marked as a\n       --       coextension.\n       --  5) Expand Level_2_Coextension. A temporary variable Temp_1 is\n       --       generated to capture the allocated object. Temp_1 is attached\n@@ -3675,7 +3675,7 @@ package body Sem_Res is\n \n          function Process_Allocator (Nod : Node_Id) return Traverse_Result;\n          --  Recognize an allocator or a rewritten allocator node and add it\n-         --  allong with its nested coextensions to the list of Root.\n+         --  along with its nested coextensions to the list of Root.\n \n          ---------------\n          -- Copy_List --\n@@ -3833,7 +3833,7 @@ package body Sem_Res is\n          --  A special accessibility check is needed for allocators that\n          --  constrain access discriminants. The level of the type of the\n          --  expression used to constrain an access discriminant cannot be\n-         --  deeper than the type of the allocator (in constrast to access\n+         --  deeper than the type of the allocator (in contrast to access\n          --  parameters, where the level of the actual can be arbitrary).\n \n          --  We can't use Valid_Conversion to perform this check because\n@@ -3912,7 +3912,7 @@ package body Sem_Res is\n          --  A special accessibility check is needed for allocators that\n          --  constrain access discriminants. The level of the type of the\n          --  expression used to constrain an access discriminant cannot be\n-         --  deeper than the type of the allocator (in constrast to access\n+         --  deeper than the type of the allocator (in contrast to access\n          --  parameters, where the level of the actual can be arbitrary).\n          --  We can't use Valid_Conversion to perform this check because\n          --  in general the type of the allocator is unrelated to the type\n@@ -6249,7 +6249,7 @@ package body Sem_Res is\n       end if;\n \n       --  If name was overloaded, set component type correctly now\n-      --  If a misplaced call to an entry family (which has no index typs)\n+      --  If a misplaced call to an entry family (which has no index types)\n       --  return. Error will be diagnosed from calling context.\n \n       if Is_Array_Type (Array_Type) then\n@@ -6832,7 +6832,7 @@ package body Sem_Res is\n       B_Typ : constant Entity_Id := Base_Type (Typ);\n \n    begin\n-      --  Catch attempts to do fixed-point exponentation with universal\n+      --  Catch attempts to do fixed-point exponentiation with universal\n       --  operands, which is a case where the illegality is not caught during\n       --  normal operator analysis.\n \n@@ -6939,7 +6939,7 @@ package body Sem_Res is\n          B_Typ := Base_Type (Typ);\n       end if;\n \n-      --  Straigtforward case of incorrect arguments\n+      --  Straightforward case of incorrect arguments\n \n       if not Valid_Boolean_Arg (Typ) then\n          Error_Msg_N (\"invalid operand type for operator&\", N);\n@@ -7735,8 +7735,8 @@ package body Sem_Res is\n       elsif R_Typ = Any_Character then\n          return;\n \n-      --  If the type is bit-packed, then we always tranform the string literal\n-      --  into a full fledged aggregate.\n+      --  If the type is bit-packed, then we always transform the string\n+      --  literal into a full fledged aggregate.\n \n       elsif Is_Bit_Packed_Array (Typ) then\n          null;\n@@ -8252,7 +8252,7 @@ package body Sem_Res is\n             Rorig := Original_Node (Right_Opnd (Norig));\n \n             --  We are looking for cases where the right operand is not\n-            --  parenthesized, and is a bianry operator, multiply, divide, or\n+            --  parenthesized, and is a binary operator, multiply, divide, or\n             --  mod. These are the cases where the grouping can affect results.\n \n             if Paren_Count (Rorig) = 0\n@@ -9120,7 +9120,7 @@ package body Sem_Res is\n          --  Also no need to check when in an instance or inlined body, because\n          --  the legality has been established when the template was analyzed.\n          --  Furthermore, numeric conversions may occur where only a private\n-         --  view of the operand type is visible at the instanciation point.\n+         --  view of the operand type is visible at the instantiation point.\n          --  This results in a spurious error if we check that the operand type\n          --  is a numeric type.\n \n@@ -9223,7 +9223,7 @@ package body Sem_Res is\n                --  The case of a reference to an access discriminant from\n                --  within a limited type declaration (which will appear as\n                --  a discriminal) is always illegal because the level of the\n-               --  discriminant is considered to be deeper than any (namable)\n+               --  discriminant is considered to be deeper than any (nameable)\n                --  access type.\n \n                if Is_Entity_Name (Operand)\n@@ -9335,7 +9335,7 @@ package body Sem_Res is\n                --  The case of a reference to an access discriminant from\n                --  within a limited type declaration (which will appear as\n                --  a discriminal) is always illegal because the level of the\n-               --  discriminant is considered to be deeper than any (namable)\n+               --  discriminant is considered to be deeper than any (nameable)\n                --  access type.\n \n                if Is_Entity_Name (Operand)"}, {"sha": "70b534bf50c660782464bedc5462d7f7dfa79629", "filename": "gcc/ada/sem_res.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_res.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_res.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -103,7 +103,7 @@ package Sem_Res is\n    --  Several forms of names can denote calls to entities without para-\n    --  meters. The context determines whether the name denotes the entity\n    --  or a call to it. When it is a call, the node must be rebuilt\n-   --  accordingly and renalyzed to obtain possible interpretations.\n+   --  accordingly and reanalyzed to obtain possible interpretations.\n    --\n    --  The name may be that of an overloadable construct, or it can be an\n    --  explicit dereference of a prefix that denotes an access to subprogram."}, {"sha": "b118c37034a35b7165d5c3580b32bcc3c0b744e7", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -932,7 +932,7 @@ package body Sem_Type is\n \n       --  The context can be a remote access type, and the expression the\n       --  corresponding source type declared in a categorized package, or\n-      --  viceversa.\n+      --  vice versa.\n \n       elsif Is_Record_Type (T1)\n         and then (Is_Remote_Call_Interface (T1)"}, {"sha": "9ab77bbf9f800912ade63548b28eacf9736f6bdd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -2731,7 +2731,7 @@ package body Sem_Util is\n \n          and then Length_Of_Name (Chars (C)) /= 1\n \n-         --  Don't warn for non-source eneities\n+         --  Don't warn for non-source entities\n \n          and then Comes_From_Source (C)\n          and then Comes_From_Source (Def_Id)\n@@ -2999,7 +2999,7 @@ package body Sem_Util is\n         (Prim_Params  : List_Id;\n          Iface_Params : List_Id) return Boolean;\n       --  Determine whether a subprogram's parameter profile Prim_Params\n-      --  matches that of a potentially overriden interface subprogram\n+      --  matches that of a potentially overridden interface subprogram\n       --  Iface_Params. Also determine if the type of first parameter of\n       --  Iface_Params is an implemented interface.\n \n@@ -3088,7 +3088,7 @@ package body Sem_Util is\n \n          Prim_Param  := First (Prim_Params);\n \n-         --  The first parameter of the potentially overriden subprogram\n+         --  The first parameter of the potentially overridden subprogram\n          --  must be an interface implemented by Prim.\n \n          if not Is_Interface (Iface_Typ)\n@@ -3173,7 +3173,7 @@ package body Sem_Util is\n          return Empty;\n       end if;\n \n-      --  Traverse the homonym chain, looking at a potentially overriden\n+      --  Traverse the homonym chain, looking at a potentially overridden\n       --  subprogram that belongs to an implemented interface.\n \n       Hom := First_Hom;\n@@ -4472,7 +4472,7 @@ package body Sem_Util is\n                   Set_Result (Unknown);\n \n                   --  Now check size of Expr object. Any size that is not an\n-                  --  even multiple of Maxiumum_Alignment is also worrisome\n+                  --  even multiple of Maximum_Alignment is also worrisome\n                   --  since it may cause the alignment of the object to be less\n                   --  than the alignment of the type.\n \n@@ -4942,7 +4942,7 @@ package body Sem_Util is\n             then\n                --  Get default expression if any. If there is no declaration\n                --  node, it means we have an internal entity. The parent and\n-               --  tag fields are examples of such entitires. For these cases,\n+               --  tag fields are examples of such entities. For these cases,\n                --  we just test the type of the entity.\n \n                if Present (Declaration_Node (Ent)) then\n@@ -5341,9 +5341,9 @@ package body Sem_Util is\n       return False;\n    end In_Instance_Visible_Part;\n \n-   ----------------------\n-   -- In_Packiage_Body --\n-   ----------------------\n+   ---------------------\n+   -- In_Package_Body --\n+   ---------------------\n \n    function In_Package_Body return Boolean is\n       S : Entity_Id;\n@@ -6616,7 +6616,7 @@ package body Sem_Util is\n       Indx : Node_Id;\n \n    begin\n-      --  For private type, test corrresponding full type\n+      --  For private type, test corresponding full type\n \n       if Is_Private_Type (T) then\n          return Is_Potentially_Persistent_Type (Full_View (T));\n@@ -7482,7 +7482,7 @@ package body Sem_Util is\n          when N_Type_Conversion =>\n             return Known_To_Be_Assigned (P);\n \n-         --  All other references are definitely not knwon to be modifications\n+         --  All other references are definitely not known to be modifications\n \n          when others =>\n             return False;\n@@ -7611,7 +7611,7 @@ package body Sem_Util is\n          when N_Type_Conversion =>\n             return May_Be_Lvalue (P);\n \n-         --  Test for appearence in object renaming declaration\n+         --  Test for appearance in object renaming declaration\n \n          when N_Object_Renaming_Declaration =>\n             return True;\n@@ -8819,7 +8819,7 @@ package body Sem_Util is\n       function Clear_Analyzed (N : Node_Id) return Traverse_Result;\n       --  Function used to reset Analyzed flags in tree. Note that we do\n       --  not reset Analyzed flags in entities, since there is no need to\n-      --  renalalyze entities, and indeed, it is wrong to do so, since it\n+      --  reanalyze entities, and indeed, it is wrong to do so, since it\n       --  can result in generating auxiliary stuff more than once.\n \n       --------------------\n@@ -9707,7 +9707,7 @@ package body Sem_Util is\n \n          Btyp := Root_Type (Btyp);\n \n-         --  The accessibility level of anonymous acccess types associated with\n+         --  The accessibility level of anonymous access types associated with\n          --  discriminants is that of the current instance of the type, and\n          --  that's deeper than the type itself (AARM 3.10.2 (12.3.21)).\n "}, {"sha": "519f574b2b3d159b8af29d6fb7695496d534f426", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -438,7 +438,7 @@ package Sem_Util is\n       Pos : Uint;\n       Loc : Source_Ptr) return Entity_Id;\n    --  This function obtains the E_Enumeration_Literal entity for the\n-   --  specified value from the enumneration type or subtype T. The\n+   --  specified value from the enumeration type or subtype T. The\n    --  second argument is the Pos value, which is assumed to be in range.\n    --  The third argument supplies a source location for constructed\n    --  nodes returned by this function.\n@@ -547,7 +547,7 @@ package Sem_Util is\n    --  initialize procedure, which makes the type not preelaborable.\n \n    function Has_Preelaborable_Initialization (E : Entity_Id) return Boolean;\n-   --  Return True iff type E has preelaborable initialiation as defined in\n+   --  Return True iff type E has preelaborable initialisation as defined in\n    --  Ada 2005 (see AI-161 for details of the definition of this attribute).\n \n    function Has_Private_Component (Type_Id : Entity_Id) return Boolean;\n@@ -566,8 +566,8 @@ package Sem_Util is\n    --  Returns True if Typ is a composite type (array or record) which is\n    --  either itself a tagged type, or has a component (recursively) which is\n    --  a tagged type. Returns False for non-composite type, or if no tagged\n-   --  component is present. to check if '=' has to be expanded into a bunch\n-   --  component comparisons.\n+   --  component is present. This function is used to check if '=' has to be\n+   --  expanded into a bunch component comparisons.\n \n    function In_Instance return Boolean;\n    --  Returns True if the current scope is within a generic instance\n@@ -690,7 +690,7 @@ package Sem_Util is\n    --  i.e. a library unit or an entity declared in a library package.\n \n    function Is_Local_Variable_Reference (Expr : Node_Id) return Boolean;\n-   --  Determines whether Expr is a refeference to a variable or IN OUT\n+   --  Determines whether Expr is a reference to a variable or IN OUT\n    --  mode parameter of the current enclosing subprogram.\n    --  Why are OUT parameters not considered here ???\n \n@@ -747,7 +747,7 @@ package Sem_Util is\n    function Is_Selector_Name (N : Node_Id) return Boolean;\n    --  Given an N_Identifier node N, determines if it is a Selector_Name.\n    --  As described in Sinfo, Selector_Names are special because they\n-   --  represent use of the N_Identifier node for a true identifer, when\n+   --  represent use of the N_Identifier node for a true identifier, when\n    --  normally such nodes represent a direct name.\n \n    function Is_Statement (N : Node_Id) return Boolean;\n@@ -795,14 +795,15 @@ package Sem_Util is\n    --  entities in the current scope and in any parent scopes if the current\n    --  scope is a block or a package (and that recursion continues to the top\n    --  scope that is not a block or a package). This is used when the\n-   --  sequential flow-of-control assumption is violated (occurence of a label,\n-   --  head of a loop, or start of an exception handler). The effect of the\n-   --  call is to clear the Constant_Value field (but we do not need to clear\n-   --  the Is_True_Constant flag, since that only gets reset if there really is\n-   --  an assignment somewhere in the entity scope). This procedure also calls\n-   --  Kill_All_Checks, since this is a special case of needing to forget saved\n-   --  values. This procedure also clears Is_Known_Non_Null flags in variables,\n-   --  constants or parameters since these are also not known to be valid.\n+   --  sequential flow-of-control assumption is violated (occurrence of a\n+   --  label, head of a loop, or start of an exception handler). The effect of\n+   --  the call is to clear the Constant_Value field (but we do not need to\n+   --  clear the Is_True_Constant flag, since that only gets reset if there\n+   --  really is an assignment somewhere in the entity scope). This procedure\n+   --  also calls Kill_All_Checks, since this is a special case of needing to\n+   --  forget saved values. This procedure also clears Is_Known_Non_Null flags\n+   --  in variables, constants or parameters since these are also not known to\n+   --  be valid.\n    --\n    --  The Last_Assignment_Only flag is set True to clear only Last_Assignment\n    --  fields and leave other fields unchanged. This is used when we encounter\n@@ -911,15 +912,15 @@ package Sem_Util is\n    --  next entry of the Parameter_Associations list. The argument is an\n    --  actual previously returned by a call to First_Actual or Next_Actual.\n    --  Note that the result produced is always an expression, not a parameter\n-   --  assciation node, even if named notation was used.\n+   --  association node, even if named notation was used.\n \n    procedure Normalize_Actuals\n      (N       : Node_Id;\n       S       : Entity_Id;\n       Report  : Boolean;\n       Success : out Boolean);\n    --  Reorders lists of actuals according to names of formals, value returned\n-   --  in Success indicates sucess of reordering. For more details, see body.\n+   --  in Success indicates success of reordering. For more details, see body.\n    --  Errors are reported only if Report is set to True.\n \n    procedure Note_Possible_Modification (N : Node_Id; Sure : Boolean);\n@@ -1019,7 +1020,7 @@ package Sem_Util is\n \n    function Same_Object (Node1, Node2 : Node_Id) return Boolean;\n    --  Determine if Node1 and Node2 are known to designate the same object.\n-   --  This is a semantic test and both nodesmust be fully analyzed. A result\n+   --  This is a semantic test and both nodes must be fully analyzed. A result\n    --  of True is decisively correct. A result of False does not necessarily\n    --  mean that different objects are designated, just that this could not\n    --  be reliably determined at compile time."}, {"sha": "5fe97432e05c75606d6cc87faa30a368bb77a2ea", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -62,10 +62,10 @@ package body Sem_Warn is\n \n    --  The following table collects potential warnings for IN OUT parameters\n    --  that are referenced but not modified. These warnings are processed when\n-   --  the front end calls the procedure Output_Non_Modifed_In_Out_Warnings.\n+   --  the front end calls the procedure Output_Non_Modified_In_Out_Warnings.\n    --  The reason that we defer output of these messages is that we want to\n    --  detect the case where the relevant procedure is used as a generic actual\n-   --  in an instantation, since we suppress the warnings in this case. The\n+   --  in an instantiation, since we suppress the warnings in this case. The\n    --  flag Used_As_Generic_Actual will be set in this case, but only at the\n    --  point of usage. Similarly, we suppress the message if the address of the\n    --  procedure is taken, where the flag Address_Taken may be set later.\n@@ -98,7 +98,7 @@ package body Sem_Warn is\n \n    --  Instead the following is preferred\n \n-   --     if somme-other-predicate-on-E\n+   --     if some-other-predicate-on-E\n    --       and then Has_Warnings_Off (E)\n \n    --  This way if some-other-predicate is false, we avoid a false indication\n@@ -611,7 +611,7 @@ package body Sem_Warn is\n         (E                : Entity_Id;\n          Accept_Statement : Node_Id) return Entity_Id;\n       --  For an entry formal entity from an entry declaration, find the\n-      --  corrsesponding body formal from the given accept statement.\n+      --  corresponding body formal from the given accept statement.\n \n       function Missing_Subunits return Boolean;\n       --  We suppress warnings when there are missing subunits, because this\n@@ -1067,7 +1067,7 @@ package body Sem_Warn is\n                      --  actual, or its address/access is taken. In these two\n                      --  cases, we suppress the warning because the context may\n                      --  force use of IN OUT, even if in this particular case\n-                     --  the formal is not modifed.\n+                     --  the formal is not modified.\n \n                      else\n                         In_Out_Warnings.Append (E1);\n@@ -1174,7 +1174,7 @@ package body Sem_Warn is\n                         --  If the selected component comes from expansion, all\n                         --  we know is that the entity is not fully initialized\n                         --  at the point of the reference. Locate a random\n-                        --  unintialized component to get a better message.\n+                        --  uninitialized component to get a better message.\n \n                      elsif Nkind (Parent (UR)) = N_Selected_Component then\n                         Error_Msg_Node_2 := Selector_Name (Parent (UR));\n@@ -1429,7 +1429,7 @@ package body Sem_Warn is\n          end if;\n \n          --  Recurse into nested package or block. Do not recurse into a\n-         --  formal package, because the correponding body is not analyzed.\n+         --  formal package, because the corresponding body is not analyzed.\n \n          <<Continue>>\n             if ((Ekind (E1) = E_Package or else Ekind (E1) = E_Generic_Package)\n@@ -1539,7 +1539,7 @@ package body Sem_Warn is\n \n       case Nkind (N) is\n \n-         --  For identifier or exanded name, examine the entity involved\n+         --  For identifier or expanded name, examine the entity involved\n \n          when N_Identifier | N_Expanded_Name =>\n             declare\n@@ -1636,7 +1636,7 @@ package body Sem_Warn is\n \n                            function Process\n                              (N : Node_Id) return Traverse_Result;\n-                           --  Process function for instantation of Traverse\n+                           --  Process function for instantiation of Traverse\n                            --  below. Checks if N contains reference to other\n                            --  than a dereference.\n \n@@ -1882,7 +1882,7 @@ package body Sem_Warn is\n          --  The only reference to a context unit may be in a renaming\n          --  declaration. If this renaming declares a visible entity, do\n          --  not warn that the context clause could be moved to the body,\n-         --  because the renaming may be intented to re-export the unit.\n+         --  because the renaming may be intended to re-export the unit.\n \n          -------------------------\n          -- Check_Inner_Package --\n@@ -2514,7 +2514,7 @@ package body Sem_Warn is\n          end if;\n       end No_Warn_On_In_Out;\n \n-   --  Start of processing for Output_Non_Modifed_In_Out_Warnings\n+   --  Start of processing for Output_Non_Modified_In_Out_Warnings\n \n    begin\n       --  Loop through entities for which a warning may be needed\n@@ -3292,7 +3292,7 @@ package body Sem_Warn is\n       --  to this lower bound. If not, False is returned, and Low_Bound is\n       --  undefined on return.\n       --\n-      --  For now, we limite this to standard string types, so any other\n+      --  For now, we limit this to standard string types, so any other\n       --  unconstrained types return False. We may change our minds on this\n       --  later on, but strings seem the most important case.\n \n@@ -3369,7 +3369,7 @@ package body Sem_Warn is\n       begin\n          --  Nothing to do if subscript does not come from source (we don't\n          --  want to give garbage warnings on compiler expanded code, e.g. the\n-         --  loops generated for slice assignments. Sucb junk warnings would\n+         --  loops generated for slice assignments. Such junk warnings would\n          --  be placed on source constructs with no subscript in sight!)\n \n          if not Comes_From_Source (Original_Node (X)) then\n@@ -3411,7 +3411,7 @@ package body Sem_Warn is\n                   --  Tref (Sref) is used to scan the subscript\n \n                   Pctr : Natural;\n-                  --  Paretheses counter when scanning subscript\n+                  --  Parentheses counter when scanning subscript\n \n                begin\n                   --  Tref (Sref) points to start of subscript\n@@ -3602,7 +3602,7 @@ package body Sem_Warn is\n                Next_Formal (Form2);\n             end loop;\n \n-            --  Here all conditionas are met, record possible unset reference\n+            --  Here all conditions are met, record possible unset reference\n \n             Set_Unset_Reference (Form, Return_Node);\n          end if;\n@@ -3631,7 +3631,7 @@ package body Sem_Warn is\n \n                --  Case of variable that is assigned but not read. We suppress\n                --  the message if the variable is volatile, has an address\n-               --  clause, is aliasied, or is a renaming, or is imported.\n+               --  clause, is aliased, or is a renaming, or is imported.\n \n                if Referenced_As_LHS_Check_Spec (E)\n                  and then No (Address_Clause (E))\n@@ -3879,7 +3879,7 @@ package body Sem_Warn is\n                   --  If we are not at the top level, we regard an inner\n                   --  exception handler as a decisive indicator that we should\n                   --  not generate the warning, since the variable in question\n-                  --  may be acceessed after an exception in the outer block.\n+                  --  may be accessed after an exception in the outer block.\n \n                   if Nkind (Parent (P)) /= N_Subprogram_Body\n                     and then Nkind (Parent (P)) /= N_Package_Body"}, {"sha": "e3daef471ab9d7fe13285886d5cdb04fa6b1ab68", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d57416230c94a56d89bb6119c47d46f68bc4e6/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=f3d57416230c94a56d89bb6119c47d46f68bc4e6", "patch": "@@ -169,7 +169,7 @@ package Sem_Warn is\n    --  should be given for a possible infinite loop, and if so issues it.\n \n    procedure Warn_On_Known_Condition (C : Node_Id);\n-   --  C is a node for a boolean expression resluting from a relational\n+   --  C is a node for a boolean expression resulting from a relational\n    --  or membership operation. If the expression has a compile time known\n    --  value, then a warning is output if all the following conditions hold:\n    --"}]}