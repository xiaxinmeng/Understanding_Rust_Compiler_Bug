{"sha": "f64d6991d42d47569e602a11dcbd21814d0a5026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0ZDY5OTFkNDJkNDc1NjllNjAyYTExZGNiZDIxODE0ZDBhNTAyNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-08-12T15:05:38Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-08-12T15:05:38Z"}, "message": "expr.c (move_by_pieces): Set alignment for move to minimum of MOVE_MAX_PIECES mode alignment and the...\n\n        * expr.c (move_by_pieces): Set alignment for move to minimum of\n        MOVE_MAX_PIECES mode alignment and the largest non-slow mode\n        alignment, but not less than the original alignment.\n        (move_by_pieces_ninsns): Same.\n        (can_store_by_pieces): Similar for store with STORE_MAX_PIECES.\n        (store_by_pieces_1): Same.\n\nFrom-SVN: r85875", "tree": {"sha": "efaabf2ae2baf7a2843abb3d69518a7f30d1bee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efaabf2ae2baf7a2843abb3d69518a7f30d1bee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64d6991d42d47569e602a11dcbd21814d0a5026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64d6991d42d47569e602a11dcbd21814d0a5026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64d6991d42d47569e602a11dcbd21814d0a5026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64d6991d42d47569e602a11dcbd21814d0a5026/comments", "author": null, "committer": null, "parents": [{"sha": "c597ef4eab9a2de9ad0b2187547ac9bac0b53132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c597ef4eab9a2de9ad0b2187547ac9bac0b53132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c597ef4eab9a2de9ad0b2187547ac9bac0b53132"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "50d746415f978ab56bbd2a6b3565f11b09af997d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64d6991d42d47569e602a11dcbd21814d0a5026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64d6991d42d47569e602a11dcbd21814d0a5026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f64d6991d42d47569e602a11dcbd21814d0a5026", "patch": "@@ -1,3 +1,12 @@\n+2004-08-12  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* expr.c (move_by_pieces): Set alignment for move to minimum of\n+\tMOVE_MAX_PIECES mode alignment and the largest non-slow mode\n+\talignment, but not less than the original alignment.\n+\t(move_by_pieces_ninsns): Same.\n+\t(can_store_by_pieces): Similar for store with STORE_MAX_PIECES.\n+\t(store_by_pieces_1): Same.\n+\n 2004-08-12  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/16867"}, {"sha": "7d216aeb318ac28409034161ff5c1e831369d7b3", "filename": "gcc/expr.c", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64d6991d42d47569e602a11dcbd21814d0a5026/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64d6991d42d47569e602a11dcbd21814d0a5026/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f64d6991d42d47569e602a11dcbd21814d0a5026", "patch": "@@ -925,9 +925,22 @@ move_by_pieces (rtx to, rtx from, unsigned HOST_WIDE_INT len,\n \tdata.to_addr = copy_addr_to_reg (to_addr);\n     }\n \n-  if (! SLOW_UNALIGNED_ACCESS (word_mode, align)\n-      || align > MOVE_MAX * BITS_PER_UNIT || align >= BIGGEST_ALIGNMENT)\n-    align = MOVE_MAX * BITS_PER_UNIT;\n+  tmode = mode_for_size (MOVE_MAX_PIECES * BITS_PER_UNIT, MODE_INT, 1);\n+  if (align >= GET_MODE_ALIGNMENT (tmode))\n+    align = GET_MODE_ALIGNMENT (tmode);\n+  else\n+    {\n+      enum machine_mode xmode;\n+\n+      for (tmode = GET_CLASS_NARROWEST_MODE (MODE_INT), xmode = tmode;\n+\t   tmode != VOIDmode;\n+\t   xmode = tmode, tmode = GET_MODE_WIDER_MODE (tmode))\n+\tif (GET_MODE_SIZE (tmode) > MOVE_MAX_PIECES\n+\t    || SLOW_UNALIGNED_ACCESS (tmode, align))\n+\t  break;\n+\n+      align = MAX (align, GET_MODE_ALIGNMENT (xmode));\n+    }\n \n   /* First move what we can in the largest integer mode, then go to\n      successively smaller modes.  */\n@@ -992,14 +1005,28 @@ move_by_pieces_ninsns (unsigned HOST_WIDE_INT l, unsigned int align,\n \t\t       unsigned int max_size)\n {\n   unsigned HOST_WIDE_INT n_insns = 0;\n+  enum machine_mode tmode;\n \n-  if (! SLOW_UNALIGNED_ACCESS (word_mode, align)\n-      || align > MOVE_MAX * BITS_PER_UNIT || align >= BIGGEST_ALIGNMENT)\n-    align = MOVE_MAX * BITS_PER_UNIT;\n+  tmode = mode_for_size (MOVE_MAX_PIECES * BITS_PER_UNIT, MODE_INT, 1);\n+  if (align >= GET_MODE_ALIGNMENT (tmode))\n+    align = GET_MODE_ALIGNMENT (tmode);\n+  else\n+    {\n+      enum machine_mode tmode, xmode;\n+\n+      for (tmode = GET_CLASS_NARROWEST_MODE (MODE_INT), xmode = tmode;\n+\t   tmode != VOIDmode;\n+\t   xmode = tmode, tmode = GET_MODE_WIDER_MODE (tmode))\n+\tif (GET_MODE_SIZE (tmode) > MOVE_MAX_PIECES\n+\t    || SLOW_UNALIGNED_ACCESS (tmode, align))\n+\t  break;\n+\n+      align = MAX (align, GET_MODE_ALIGNMENT (xmode));\n+    }\n \n   while (max_size > 1)\n     {\n-      enum machine_mode mode = VOIDmode, tmode;\n+      enum machine_mode mode = VOIDmode;\n       enum insn_code icode;\n \n       for (tmode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n@@ -1999,9 +2026,22 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n   if (! STORE_BY_PIECES_P (len, align))\n     return 0;\n \n-  if (! SLOW_UNALIGNED_ACCESS (word_mode, align)\n-      || align > MOVE_MAX * BITS_PER_UNIT || align >= BIGGEST_ALIGNMENT)\n-    align = MOVE_MAX * BITS_PER_UNIT;\n+  tmode = mode_for_size (STORE_MAX_PIECES * BITS_PER_UNIT, MODE_INT, 1);\n+  if (align >= GET_MODE_ALIGNMENT (tmode))\n+    align = GET_MODE_ALIGNMENT (tmode);\n+  else\n+    {\n+      enum machine_mode xmode;\n+\n+      for (tmode = GET_CLASS_NARROWEST_MODE (MODE_INT), xmode = tmode;\n+\t   tmode != VOIDmode;\n+\t   xmode = tmode, tmode = GET_MODE_WIDER_MODE (tmode))\n+\tif (GET_MODE_SIZE (tmode) > STORE_MAX_PIECES\n+\t    || SLOW_UNALIGNED_ACCESS (tmode, align))\n+\t  break;\n+\n+      align = MAX (align, GET_MODE_ALIGNMENT (xmode));\n+    }\n \n   /* We would first store what we can in the largest integer mode, then go to\n      successively smaller modes.  */\n@@ -2201,9 +2241,22 @@ store_by_pieces_1 (struct store_by_pieces *data ATTRIBUTE_UNUSED,\n \tdata->to_addr = copy_addr_to_reg (to_addr);\n     }\n \n-  if (! SLOW_UNALIGNED_ACCESS (word_mode, align)\n-      || align > MOVE_MAX * BITS_PER_UNIT || align >= BIGGEST_ALIGNMENT)\n-    align = MOVE_MAX * BITS_PER_UNIT;\n+  tmode = mode_for_size (STORE_MAX_PIECES * BITS_PER_UNIT, MODE_INT, 1);\n+  if (align >= GET_MODE_ALIGNMENT (tmode))\n+    align = GET_MODE_ALIGNMENT (tmode);\n+  else\n+    {\n+      enum machine_mode xmode;\n+\n+      for (tmode = GET_CLASS_NARROWEST_MODE (MODE_INT), xmode = tmode;\n+\t   tmode != VOIDmode;\n+\t   xmode = tmode, tmode = GET_MODE_WIDER_MODE (tmode))\n+\tif (GET_MODE_SIZE (tmode) > STORE_MAX_PIECES\n+\t    || SLOW_UNALIGNED_ACCESS (tmode, align))\n+\t  break;\n+\n+      align = MAX (align, GET_MODE_ALIGNMENT (xmode));\n+    }\n \n   /* First store what we can in the largest integer mode, then go to\n      successively smaller modes.  */"}]}