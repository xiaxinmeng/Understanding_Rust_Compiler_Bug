{"sha": "0d1189b4e618517b62f938a94c722123cc0ef5f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxMTg5YjRlNjE4NTE3YjYyZjkzOGE5NGM3MjIxMjNjYzBlZjVmNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-13T16:40:41Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-13T16:43:38Z"}, "message": "Add 3 new EVRP testcases.\n\ntest new evrp functionality.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/evrp20.c\n\t* gcc.dg/tree-ssa/evrp21.c\n\t* gcc.dg/tree-ssa/evrp22.c", "tree": {"sha": "bab10fe72703ce0c68ee851a8dcd14f29693cb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab10fe72703ce0c68ee851a8dcd14f29693cb52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d1189b4e618517b62f938a94c722123cc0ef5f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1189b4e618517b62f938a94c722123cc0ef5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1189b4e618517b62f938a94c722123cc0ef5f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1189b4e618517b62f938a94c722123cc0ef5f5/comments", "author": null, "committer": null, "parents": [{"sha": "2935ff7eb7ac2bb089e61078162d3d68b5745281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2935ff7eb7ac2bb089e61078162d3d68b5745281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2935ff7eb7ac2bb089e61078162d3d68b5745281"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "7d4d55f7638f74ddc27d30e7408b12d02518e055", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp20.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1189b4e618517b62f938a94c722123cc0ef5f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1189b4e618517b62f938a94c722123cc0ef5f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp20.c?ref=0d1189b4e618517b62f938a94c722123cc0ef5f5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void call (void);\n+\n+void foo (int base)\n+{\n+  unsigned i;\n+\n+  // Ranger should be able to remove the (i > 123) comparison.\n+  for (i = base; i < 10; i++)\n+    if (i > 123)\n+      {\n+        call ();\n+\treturn;\n+      }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"call\" \"evrp\"} } */"}, {"sha": "dae788cc2b6c2e55ec2872164d6be0a6cedde14e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp21.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1189b4e618517b62f938a94c722123cc0ef5f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1189b4e618517b62f938a94c722123cc0ef5f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp21.c?ref=0d1189b4e618517b62f938a94c722123cc0ef5f5", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+extern void vrp_keep (void);\n+extern void vrp_kill (void);\n+\n+void\n+f2 (int s, int b)\n+{\n+  if (s > 4)\n+    s = 4;\n+  if (s < -16)\n+    s = -16;\n+  /* s in [-16, 4].   */\n+  b = (b & 1) + 1;\n+  /* b in range [1, 2].  */\n+  b = s << b;\n+  /* b in range [-64, 16].  */\n+  if (b == -2)\n+    vrp_keep ();\n+  if (b <= -65)\n+    vrp_kill ();\n+  if (b >= 17)\n+    vrp_kill ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vrp_keep \\\\(\" 1 \"evrp\"} } */\n+/* { dg-final { scan-tree-dump-times \"vrp_kill \\\\(\" 0 \"evrp\"} } */"}, {"sha": "3dd47e55d04d0dcf538068814b4372a978ea2dac", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp22.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1189b4e618517b62f938a94c722123cc0ef5f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1189b4e618517b62f938a94c722123cc0ef5f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp22.c?ref=0d1189b4e618517b62f938a94c722123cc0ef5f5", "patch": "@@ -0,0 +1,43 @@\n+/* See backwards thru casts if the range fits the LHS type. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2  -fdump-tree-evrp\" } */\n+\n+extern void kill(int i);\n+extern void keep(int i);\n+\n+void\n+foo (int i)\n+{\n+  if (i >= 10)\n+    {\n+      if (i <= 100)\n+\t{\n+\t  /* i has a range of [10, 100]  */\n+\t  char c = (char) i;\n+\t  if (c < 30)\n+\t    {\n+\t      /* If we wind back thru the cast with the range of c being [10,29]\n+\t       * from the branch, and recognize that the range of i fits within\n+\t       * a cast to c, then there is no missing information in a cast\n+\t       * back to int. We can use the range calculated for 'c' with 'i'\n+\t       * as well and Ranger should be able to kill the call.  */\n+\t      if (i > 29)\n+\t\tkill (i);\n+\t    }\n+\t}\n+      /* i has a range of [10, MAX]  */\n+      char d  = (char) i;\n+      if (d < 30)\n+\t{\n+\t  /* Here, a cast to a char and back is NOT equivalent, so we cannot use\n+\t   * the value of d to remove the call.  */\n+\t  if (i > 29)\n+\t    keep (i);\n+\t}\n+\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"kill \\\\(\" 0 \"evrp\"} } */\n+/* { dg-final { scan-tree-dump-times \"keep \\\\(\" 1 \"evrp\"} } */\n+"}]}