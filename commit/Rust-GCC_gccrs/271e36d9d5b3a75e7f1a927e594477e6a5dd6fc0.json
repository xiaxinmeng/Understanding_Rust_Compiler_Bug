{"sha": "271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "node_id": "C_kwDOANBUbNoAKDI3MWUzNmQ5ZDViM2E3NWU3ZjFhOTI3ZTU5NDQ3N2U2YTVkZDZmYzA", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-16T18:34:50Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-16T18:35:37Z"}, "message": "i386: Enable VxHF vector modes lower ABI levels [PR103571]\n\nEnable VxHF vector modes for SSE2, AVX and AVX512F ABIs.\n\n2021-12-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103571\n\t* config/i386/i386.h (VALID_AVX256_REG_MODE): Add V16HFmode.\n\t(VALID_AVX256_REG_OR_OI_VHF_MODE): Replace with ...\n\t(VALID_AVX256_REG_OR_OI_MODE): ... this.  Remove V16HFmode.\n\t(VALID_AVX512F_SCALAR_MODE): Remove HImode and HFmode.\n\t(VALID_AVX512FP16_SCALAR_MODE): New.\n\t(VALID_AVX512F_REG_MODE): Add V32HFmode.\n\t(VALID_SSE2_REG_MODE): Add V8HFmode, V4HFmode and V2HFmode.\n\t(VALID_SSE2_REG_VHF_MODE): Remove.\n\t(VALID_INT_MODE_P): Add V2HFmode.\n\t* config/i386/i386.c (function_arg_advance_64):\n\tRemove explicit mention of V16HFmode and V32HFmode.\n\t(ix86_hard_regno_mode_ok): Remove explicit mention of XImode\n\tand V32HFmode, use VALID_AVX512F_REG_OR_XI_MODE instead.\n\tUse VALID_AVX512FP_SCALAR_MODE for TARGET_aVX512FP16.\n\tUse VALID_AVX256_REG_OR_OI_MODE instead of\n\tVALID_AVX256_REG_OR_OI_VHF_MODE and VALID_SSE2_REG_MODE instead\n\tof VALID_SSE2_REG_VHF_MODE.\n\t(ix86_set_reg_reg_cost): Remove usge of VALID_AVX512FP16_REG_MODE.\n\t(ix86_vector_mode_supported): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103571\n\t* gcc.target/i386/pr102812.c (dg-final): Do not scan for movdqa.", "tree": {"sha": "4c372e5c814b45814d28facb3b76afa2af6cded3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c372e5c814b45814d28facb3b76afa2af6cded3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06cd44b4387a9f6ab46f377f42ee5be9cf11bf15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cd44b4387a9f6ab46f377f42ee5be9cf11bf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06cd44b4387a9f6ab46f377f42ee5be9cf11bf15"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "ec155826310395361f4eefcd2bba2ad8d2a956b7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "patch": "@@ -2942,9 +2942,7 @@ function_arg_advance_64 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \n   /* Unnamed 512 and 256bit vector mode parameters are passed on stack.  */\n   if (!named && (VALID_AVX512F_REG_MODE (mode)\n-\t\t || VALID_AVX256_REG_MODE (mode)\n-\t\t || mode == V16HFmode\n-\t\t || mode == V32HFmode))\n+\t\t || VALID_AVX256_REG_MODE (mode)))\n     return 0;\n \n   if (!examine_argument (mode, type, 0, &int_nregs, &sse_nregs)\n@@ -19915,15 +19913,17 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t  - XI mode\n \t  - any of 512-bit wide vector mode\n \t  - any scalar mode.  */\n-      /* For AVX512FP16, vmovw supports movement of HImode\n-\t between gpr and sse registser.  */\n       if (TARGET_AVX512F\n-\t  && (mode == XImode\n-\t      || mode == V32HFmode\n-\t      || VALID_AVX512F_REG_MODE (mode)\n+\t  && (VALID_AVX512F_REG_OR_XI_MODE (mode)\n \t      || VALID_AVX512F_SCALAR_MODE (mode)))\n \treturn true;\n \n+      /* For AVX512FP16, vmovw supports movement of HImode\n+\t and HFmode between GPR and SSE registers.  */\n+      if (TARGET_AVX512FP16\n+\t  && VALID_AVX512FP16_SCALAR_MODE (mode))\n+\treturn true;\n+\n       /* For AVX-5124FMAPS or AVX-5124VNNIW\n \t allow V64SF and V64SI modes for special regnos.  */\n       if ((TARGET_AVX5124FMAPS || TARGET_AVX5124VNNIW)\n@@ -19934,7 +19934,7 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       /* TODO check for QI/HI scalars.  */\n       /* AVX512VL allows sse regs16+ for 128/256 bit modes.  */\n       if (TARGET_AVX512VL\n-\t  && (VALID_AVX256_REG_OR_OI_VHF_MODE (mode)\n+\t  && (VALID_AVX256_REG_OR_OI_MODE (mode)\n \t      || VALID_AVX512VL_128_REG_MODE (mode)))\n \treturn true;\n \n@@ -19944,9 +19944,9 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \n       /* OImode and AVX modes are available only when AVX is enabled.  */\n       return ((TARGET_AVX\n-\t       && VALID_AVX256_REG_OR_OI_VHF_MODE (mode))\n+\t       && VALID_AVX256_REG_OR_OI_MODE (mode))\n \t      || VALID_SSE_REG_MODE (mode)\n-\t      || VALID_SSE2_REG_VHF_MODE (mode)\n+\t      || VALID_SSE2_REG_MODE (mode)\n \t      || VALID_MMX_REG_MODE (mode)\n \t      || VALID_MMX_REG_MODE_3DNOW (mode));\n     }\n@@ -20156,8 +20156,7 @@ ix86_set_reg_reg_cost (machine_mode mode)\n \n     case MODE_VECTOR_INT:\n     case MODE_VECTOR_FLOAT:\n-      if ((TARGET_AVX512FP16 && VALID_AVX512FP16_REG_MODE (mode))\n-\t  || (TARGET_AVX512F && VALID_AVX512F_REG_MODE (mode))\n+      if ((TARGET_AVX512F && VALID_AVX512F_REG_MODE (mode))\n \t  || (TARGET_AVX && VALID_AVX256_REG_MODE (mode))\n \t  || (TARGET_SSE2 && VALID_SSE2_REG_MODE (mode))\n \t  || (TARGET_SSE && VALID_SSE_REG_MODE (mode))\n@@ -22080,8 +22079,6 @@ ix86_vector_mode_supported_p (machine_mode mode)\n   if ((TARGET_MMX || TARGET_MMX_WITH_SSE)\n       && VALID_MMX_REG_MODE (mode))\n     return true;\n-  if (TARGET_AVX512FP16 && VALID_AVX512FP16_REG_MODE (mode))\n-    return true;\n   if ((TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n       && VALID_MMX_REG_MODE_3DNOW (mode))\n     return true;"}, {"sha": "398f7513752ff2ae63dc8b100b851ed4a16a9c70", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "patch": "@@ -1005,20 +1005,22 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_AVX256_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V32QImode || (MODE) == V16HImode || (MODE) == V8SImode\t\\\n    || (MODE) == V4DImode || (MODE) == V2TImode || (MODE) == V8SFmode\t\\\n-   || (MODE) == V4DFmode)\n+   || (MODE) == V4DFmode || (MODE) == V16HFmode)\n \n-#define VALID_AVX256_REG_OR_OI_VHF_MODE(MODE)\t\t\\\n-  (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode || (MODE) == V16HFmode)\n+#define VALID_AVX256_REG_OR_OI_MODE(MODE)\t\t\\\n+  (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode)\n \n #define VALID_AVX512F_SCALAR_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == DImode || (MODE) == DFmode || (MODE) == SImode\t\t\\\n-   || (MODE) == SFmode\t\t\t\t\t\t\t\\\n-   || (TARGET_AVX512FP16 && ((MODE) == HImode || (MODE) == HFmode)))\n+   || (MODE) == SFmode)\n+\n+#define VALID_AVX512FP16_SCALAR_MODE(MODE)\t\\\n+  ((MODE) == HImode || (MODE) == HFmode)\n \n #define VALID_AVX512F_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V8DImode || (MODE) == V8DFmode || (MODE) == V64QImode\t\\\n    || (MODE) == V16SImode || (MODE) == V16SFmode || (MODE) == V32HImode \\\n-   || (MODE) == V4TImode)\n+   || (MODE) == V4TImode || (MODE) == V32HFmode)\n \n #define VALID_AVX512F_REG_OR_XI_MODE(MODE)\t\t\t\t\\\n   (VALID_AVX512F_REG_MODE (MODE) || (MODE) == XImode)\n@@ -1035,13 +1037,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n+   || (MODE) == V8HFmode || (MODE) == V4HFmode || (MODE) == V2HFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == DFmode || (MODE) == HFmode)\n \n-#define VALID_SSE2_REG_VHF_MODE(MODE)\t\t\t\\\n-  (VALID_SSE2_REG_MODE (MODE) || (MODE) == V8HFmode\t\\\n-   || (MODE) == V4HFmode || (MODE) == V2HFmode)\n-\n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n    || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\t\t\\\n@@ -1072,7 +1071,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n    || (MODE) == SDmode || (MODE) == DDmode\t\t\t\t\\\n    || (MODE) == HFmode || (MODE) == HCmode\t\t\t\t\\\n-   || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n+   || (MODE) == V2HImode || (MODE) == V2HFmode\t\t\t\t\\\n+   || (MODE) == V1SImode || (MODE) == V4QImode\t\t\t\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\\n        && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\\n \t   || (MODE) == TFmode || (MODE) == TCmode\t\t\t\\"}, {"sha": "51c89a636fbc54026217c392a3c24cf4d4896fab", "filename": "gcc/testsuite/gcc.target/i386/pr102812.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102812.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102812.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102812.c?ref=271e36d9d5b3a75e7f1a927e594477e6a5dd6fc0", "patch": "@@ -2,7 +2,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse4 -mno-avx\" } */\n /* { dg-final { scan-assembler-not \"vmovdqa64\\t\" } } */\n-/* { dg-final { scan-assembler \"movdqa\\t\" } } */\n \n typedef _Float16 v8hf __attribute__((__vector_size__ (16)));\n "}]}