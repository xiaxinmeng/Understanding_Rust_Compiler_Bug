{"sha": "7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViNWJlNmFiOTFlYzAzZjkzMDM4YWMyYmNmMzAyOGNmMmU3YzgyYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-06T22:30:11Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-11T20:25:09Z"}, "message": "c++: Fix wrong modifying const object error for COMPONENT_REF [PR94074]\n\nI got a report that building Chromium fails with the \"modifying a const\nobject\" error.  After some poking I realized it's a bug in GCC, not in\ntheir codebase.\n\nMuch like with ARRAY_REFs, which can be const even though the array\nitself isn't, COMPONENT_REFs can be const although neither the object\nnor the field were declared const.  So let's dial down the checking.\nHere the COMPONENT_REF was const because of the \"const_cast<const U &>(m)\"\nthing -- cxx_eval_component_reference then builds a COMPONENT_REF with\nTREE_TYPE (t).\n\nWhile looking into this I noticed that we don't detect modifying a const\nobject in certain cases like in\n<https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94074#c2>.  That's because\nwe never evaluate an X::X() CALL_EXPR -- there's none.  Fixed as per\nJason's suggestion by setting TREE_READONLY on a CONSTRUCTOR after\ninitialization in cxx_eval_store_expression.\n\n2020-03-11  Marek Polacek  <polacek@redhat.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n\t* constexpr.c (cref_has_const_field): New function.\n\t(modifying_const_object_p): Consider a COMPONENT_REF\n\tconst only if any of its fields are const.\n\t(cxx_eval_store_expression): Mark a CONSTRUCTOR of a const type\n\tas readonly after its initialization has been done.\n\n\t* g++.dg/cpp1y/constexpr-tracking-const17.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const18.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const19.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const20.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const21.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const22.C: New test.", "tree": {"sha": "b15b0adac3bc6bc93e0afe5acff854aa599b68fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15b0adac3bc6bc93e0afe5acff854aa599b68fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4512b7d85184c7131e98d29255e53cd2d913ddc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4512b7d85184c7131e98d29255e53cd2d913ddc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4512b7d85184c7131e98d29255e53cd2d913ddc2"}], "stats": {"total": 204, "additions": 203, "deletions": 1}, "files": [{"sha": "da768cd2bbe04a130497e3ac226a784edfde04b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -1,3 +1,13 @@\n+2020-03-11  Marek Polacek  <polacek@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+\t* constexpr.c (cref_has_const_field): New function.\n+\t(modifying_const_object_p): Consider a COMPONENT_REF\n+\tconst only if any of its fields are const.\n+\t(cxx_eval_store_expression): Mark a CONSTRUCTOR of a const type\n+\tas readonly after its initialization has been done.\n+\n 2020-03-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94124 - wrong conversion error with non-viable overload."}, {"sha": "192face9a3aa47468d01beedc2ad49b1151fa554", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -4384,6 +4384,22 @@ maybe_simplify_trivial_copy (tree &target, tree &init)\n     }\n }\n \n+/* Returns true if REF, which is a COMPONENT_REF, has any fields\n+   of constant type.  This does not check for 'mutable', so the\n+   caller is expected to be mindful of that.  */\n+\n+static bool\n+cref_has_const_field (tree ref)\n+{\n+  while (TREE_CODE (ref) == COMPONENT_REF)\n+    {\n+      if (CP_TYPE_CONST_P (TREE_TYPE (TREE_OPERAND (ref, 1))))\n+       return true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+  return false;\n+}\n+\n /* Return true if we are modifying something that is const during constant\n    expression evaluation.  CODE is the code of the statement, OBJ is the\n    object in question, MUTABLE_P is true if one of the subobjects were\n@@ -4401,7 +4417,23 @@ modifying_const_object_p (tree_code code, tree obj, bool mutable_p)\n   if (mutable_p)\n     return false;\n \n-  return (TREE_READONLY (obj) || CP_TYPE_CONST_P (TREE_TYPE (obj)));\n+  if (TREE_READONLY (obj))\n+    return true;\n+\n+  if (CP_TYPE_CONST_P (TREE_TYPE (obj)))\n+    {\n+      /* Although a COMPONENT_REF may have a const type, we should\n+\t only consider it modifying a const object when any of the\n+\t field components is const.  This can happen when using\n+\t constructs such as const_cast<const T &>(m), making something\n+\t const even though it wasn't declared const.  */\n+      if (TREE_CODE (obj) == COMPONENT_REF)\n+\treturn cref_has_const_field (obj);\n+      else\n+\treturn true;\n+    }\n+\n+  return false;\n }\n \n /* Evaluate an INIT_EXPR or MODIFY_EXPR.  */\n@@ -4759,6 +4791,14 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   else\n     *valp = init;\n \n+  /* After initialization, 'const' semantics apply to the value of the\n+     object.  Make a note of this fact by marking the CONSTRUCTOR\n+     TREE_READONLY.  */\n+  if (TREE_CODE (t) == INIT_EXPR\n+      && TREE_CODE (*valp) == CONSTRUCTOR\n+      && TYPE_READONLY (type))\n+    TREE_READONLY (*valp) = true;\n+\n   /* Update TREE_CONSTANT and TREE_SIDE_EFFECTS on enclosing\n      CONSTRUCTORs, if any.  */\n   tree elt;"}, {"sha": "1ed0071da2b85be93d20952be2c646518a5f80ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -1,3 +1,13 @@\n+2020-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+\t* g++.dg/cpp1y/constexpr-tracking-const17.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const18.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const19.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const20.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const21.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const22.C: New test.\n+\n 2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94134"}, {"sha": "3f215d281754cc00cc9d5135a143d49cd5bd109d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const17.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const17.C?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+// { dg-do compile { target c++14 } }\n+\n+typedef decltype (sizeof (0)) size_t;\n+\n+template <typename E, size_t N>\n+struct array\n+{\n+  constexpr const E &operator[](size_t n) const noexcept { return elems[n]; }\n+  E elems[N];\n+};\n+\n+template <typename T>\n+struct S {\n+  using U = array<T, 4>;\n+  U m;\n+  constexpr S(int) : m{}\n+  {\n+    const_cast<int &>(const_cast<const U &>(m)[0]) = 42;\n+  }\n+};\n+\n+constexpr S<int> p = { 10 };"}, {"sha": "11a680468c28a28f1ffbbe75e59eeacd6b83233f", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const18.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const18.C?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+// { dg-do compile { target c++14 } }\n+\n+typedef decltype (sizeof (0)) size_t;\n+\n+template <typename E, size_t N>\n+struct array\n+{\n+  constexpr const E &operator[](size_t n) const noexcept { return elems[n]; }\n+  E elems[N];\n+};\n+\n+template <typename T>\n+struct S {\n+  using U = array<T, 4>;\n+  const U m;\n+  constexpr S(int) : m{}\n+  {\n+    const_cast<int &>(const_cast<const U &>(m)[0]) = 42; // { dg-error \"modifying a const object\" }\n+  }\n+};\n+\n+constexpr S<int> p = { 10 }; // { dg-message \"originally declared\" }"}, {"sha": "c31222ffcdd52a5cd4e3e70967869b4f0ad5bb14", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const19.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const19.C?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+// { dg-do compile { target c++14 } }\n+\n+typedef decltype (sizeof (0)) size_t;\n+\n+template <typename E, size_t N>\n+struct array\n+{\n+  constexpr const E &operator[](size_t n) const noexcept { return elems[n]; }\n+  const E elems[N];\n+};\n+\n+template <typename T>\n+struct S {\n+  using U = array<T, 4>;\n+  U m;\n+  constexpr S(int) : m{}\n+  {\n+    const_cast<int &>(const_cast<const U &>(m)[0]) = 42; // { dg-error \"modifying a const object\" }\n+  }\n+};\n+\n+constexpr S<int> p = { 10 }; // { dg-message \"originally declared\" }"}, {"sha": "2d5034945bddba3bc1f8bb0f4f7e53ed5e08ffa7", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const20.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const20.C?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+// { dg-do compile { target c++14 } }\n+\n+typedef decltype (sizeof (0)) size_t;\n+\n+template <typename E, size_t N>\n+struct array\n+{\n+  constexpr const E &operator[](size_t n) const noexcept { return elems[n]; }\n+  E elems[N];\n+};\n+\n+template <typename E, size_t N>\n+struct array2 {\n+  array<E, N> a;\n+};\n+\n+template <typename T>\n+struct S {\n+  using U = array2<T, 4>;\n+  U m;\n+  constexpr S(int) : m{}\n+  {\n+    const_cast<int &>(const_cast<const U &>(m).a[0]) = 42;\n+  }\n+};\n+\n+constexpr S<int> p = { 10 };"}, {"sha": "0b16193398e6b36f1a07d2bbd9343b52ebf372c5", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const21.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const21.C?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+// { dg-do compile { target c++14 } }\n+\n+typedef decltype (sizeof (0)) size_t;\n+\n+template <typename E, size_t N>\n+struct array\n+{\n+  constexpr const E &operator[](size_t n) const noexcept { return elems[n]; }\n+  E elems[N];\n+};\n+\n+template <typename E, size_t N>\n+struct array2 {\n+  array<E, N> a;\n+};\n+\n+template <typename T>\n+struct S {\n+  using U = array2<T, 4>;\n+  const U m;\n+  constexpr S(int) : m{}\n+  {\n+    const_cast<int &>(m.a[0]) = 42; // { dg-error \"modifying a const object\" }\n+  }\n+};\n+\n+constexpr S<int> p = { 10 }; // { dg-message \"originally declared\" }"}, {"sha": "216cf1607a46acc1f6d9e86504c04b1ee11bd620", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const22.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const22.C?ref=7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/94074 - wrong modifying const object error for COMPONENT_REF.\n+// { dg-do compile { target c++14 } }\n+\n+struct X {\n+  int i;\n+};\n+\n+template <typename T>\n+struct S {\n+  const X x;\n+  constexpr S(int) : x{}\n+  {\n+    const_cast<X&>(x).i = 19; // { dg-error \"modifying a const object\" }\n+  }\n+};\n+\n+constexpr S<int> p = { 10 }; // { dg-message \"originally declared\" }"}]}