{"sha": "0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxMTYxZmNiMjRjNTczYzUzYmMyN2I4YjkzNWM3M2UxZDg1NWM4Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-25T01:27:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-25T01:27:08Z"}, "message": "invoke.texi (-fno-builtin): Document that this is always on in C++.\n\n\t* invoke.texi (-fno-builtin): Document that this is always on\n\tin C++.\n\n\t* decl.c (duplicate_decls): Tidy.\n\t(init_decl_processing): Always set flag_no_builtin.\n\nFrom-SVN: r42553", "tree": {"sha": "a6c376b2d642ea347ecf2a383f4502c18e03f30a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c376b2d642ea347ecf2a383f4502c18e03f30a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/comments", "author": null, "committer": null, "parents": [{"sha": "d422980b3f3d50a34f91fdf5c843b14d3f59fc4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d422980b3f3d50a34f91fdf5c843b14d3f59fc4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d422980b3f3d50a34f91fdf5c843b14d3f59fc4c"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "f464a4a05f439710c56153c844045469e2839128", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "patch": "@@ -1,3 +1,8 @@\n+2001-05-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* invoke.texi (-fno-builtin): Document that this is always on\n+\tin C++.\n+\n 2001-05-24  Philip Blundell  <philb@gnu.org>\n \n \t* doc/install.texi (arm*-*-linux-gnu): Say that binutils 2.10 is"}, {"sha": "df72dfe3d0ab5e90a58e7eb2b6795a267649b31e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "patch": "@@ -1,3 +1,8 @@\n+2001-05-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (duplicate_decls): Tidy.\n+\t(init_decl_processing): Always set flag_no_builtin.\n+\n 2001-05-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/2184"}, {"sha": "c91ba6082ee7d108cfecabcb80130dd8b87cb303", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "patch": "@@ -3717,11 +3717,8 @@ duplicate_decls (newdecl, olddecl)\n \t    DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \t}\n     }\n-\n-  if (TREE_CODE (newdecl) == NAMESPACE_DECL)\n-    {\n-      NAMESPACE_LEVEL (newdecl) = NAMESPACE_LEVEL (olddecl);\n-    }\n+  else if (TREE_CODE (newdecl) == NAMESPACE_DECL)\n+    NAMESPACE_LEVEL (newdecl) = NAMESPACE_LEVEL (olddecl);\n \n   /* Now preserve various other info from the definition.  */\n   TREE_ADDRESSABLE (newdecl) = TREE_ADDRESSABLE (olddecl);\n@@ -6372,6 +6369,12 @@ init_decl_processing ()\n       flag_inline_functions = 0;\n     }\n \n+  /* In C++, we never create builtin functions whose name does not\n+     begin with `__'.  Users should be using headers to get prototypes\n+     in C++.  It would be nice if we could warn when `-fbuiltin' is\n+     used explicitly, but we do not have that information.  */\n+  flag_no_builtin = 1;\n+\n   /* Initially, C.  */\n   current_lang_name = lang_name_c;\n "}, {"sha": "80cd33e31ee46b9de9f77cf6a0f075e667e77d03", "filename": "gcc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1161fcb24c573c53bc27b8b935c73e1d855c8b/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=0b1161fcb24c573c53bc27b8b935c73e1d855c8b", "patch": "@@ -972,6 +972,13 @@ and faster, but since the function calls no longer appear as such, you\n cannot set a breakpoint on those calls, nor can you change the behavior\n of the functions by linking with a different library.\n \n+In C++, @samp{-fno-builtin} is always in effect.  The @samp{-fbuiltin}\n+option has no effect.  Therefore, in C++, the only way to get the\n+optimization benefits of builtin functions is to call the function\n+using the @samp{__builtin_} prefix.  The GNU C++ Standard Library uses\n+builtin functions to implement many functions (like\n+@code{std::strchr}), so that you automatically get efficient code.\n+\n @item -fhosted\n @cindex hosted environment\n "}]}