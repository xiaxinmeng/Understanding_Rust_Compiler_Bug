{"sha": "c89af696c372d94688b06618a226ed49235ad212", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5YWY2OTZjMzcyZDk0Njg4YjA2NjE4YTIyNmVkNDkyMzVhZDIxMg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-11-09T09:52:32Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-11-09T09:52:32Z"}, "message": "gimple-fold.c (size_must_be_zero_p): Use value_range API instead of performing ad-hoc calculations.\n\n\t* gimple-fold.c (size_must_be_zero_p): Use value_range API instead\n\tof performing ad-hoc calculations.\n\t* tree-ssanames.c (set_range_info): New overloaded function\n\taccepting value_range &.\n\t(get_range_info): Same.\n\t* tree-ssanames.h (set_range_info_raw): Remove.\n\t(set_range_info): New prototype.\n\t(get_range_info): Same.\n\t* tree-vrp.h (value_range::null_p): Rename to zero_p.\n\t* tree-vrp.c (value_range::null_p): Same.\n\nFrom-SVN: r265952", "tree": {"sha": "e5607fc7bf18b658cf1c1f072b529f36de8df0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5607fc7bf18b658cf1c1f072b529f36de8df0d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c89af696c372d94688b06618a226ed49235ad212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89af696c372d94688b06618a226ed49235ad212", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89af696c372d94688b06618a226ed49235ad212", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89af696c372d94688b06618a226ed49235ad212/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15e109b35dd461f2d6af85b861c4c71ea4478cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e109b35dd461f2d6af85b861c4c71ea4478cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e109b35dd461f2d6af85b861c4c71ea4478cb4"}], "stats": {"total": 75, "additions": 57, "deletions": 18}, "files": [{"sha": "0389eadb2f7fb93030bf6dcffc8aec1553f2431f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89af696c372d94688b06618a226ed49235ad212/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89af696c372d94688b06618a226ed49235ad212/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c89af696c372d94688b06618a226ed49235ad212", "patch": "@@ -1,3 +1,16 @@\n+2018-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-fold.c (size_must_be_zero_p): Use value_range API instead\n+\tof performing ad-hoc calculations.\n+\t* tree-ssanames.c (set_range_info): New overloaded function\n+\taccepting value_range &.\n+\t(get_range_info): Same.\n+\t* tree-ssanames.h (set_range_info_raw): Remove.\n+\t(set_range_info): New prototype.\n+\t(get_range_info): Same.\n+\t* tree-vrp.h (value_range::null_p): Rename to zero_p.\n+\t* tree-vrp.c (value_range::null_p): Same.\n+\n 2018-11-09  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (fld_type_variant_equal_p): Test user align flag."}, {"sha": "67c8cfa4f64a95258cad0bafa5b157cf883afe6f", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89af696c372d94688b06618a226ed49235ad212/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89af696c372d94688b06618a226ed49235ad212/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=c89af696c372d94688b06618a226ed49235ad212", "patch": "@@ -635,9 +635,8 @@ var_decl_component_p (tree var)\n \t      && TREE_CODE (TREE_OPERAND (inner, 0)) == ADDR_EXPR));\n }\n \n-/* If the SIZE argument representing the size of an object is in a range\n-   of values of which exactly one is valid (and that is zero), return\n-   true, otherwise false.  */\n+/* Return TRUE if the SIZE argument, representing the size of an\n+   object, is in a range of values of which exactly zero is valid.  */\n \n static bool\n size_must_be_zero_p (tree size)\n@@ -648,21 +647,19 @@ size_must_be_zero_p (tree size)\n   if (TREE_CODE (size) != SSA_NAME || !INTEGRAL_TYPE_P (TREE_TYPE (size)))\n     return false;\n \n-  wide_int min, max;\n-  enum value_range_kind rtype = get_range_info (size, &min, &max);\n-  if (rtype != VR_ANTI_RANGE)\n-    return false;\n-\n   tree type = TREE_TYPE (size);\n   int prec = TYPE_PRECISION (type);\n \n-  wide_int wone = wi::one (prec);\n-\n   /* Compute the value of SSIZE_MAX, the largest positive value that\n      can be stored in ssize_t, the signed counterpart of size_t.  */\n   wide_int ssize_max = wi::lshift (wi::one (prec), prec - 1) - 1;\n-\n-  return wi::eq_p (min, wone) && wi::geu_p (max, ssize_max);\n+  value_range valid_range (VR_RANGE,\n+\t\t\t   build_int_cst (type, 0),\n+\t\t\t   wide_int_to_tree (type, ssize_max));\n+  value_range vr;\n+  get_range_info (size, vr);\n+  vr.intersect (&valid_range);\n+  return vr.zero_p ();\n }\n \n /* Fold function call to builtin mem{{,p}cpy,move}.  Try to detect and"}, {"sha": "a2c2efb634aac76e796a80f8e41d8ee45c11d4fe", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=c89af696c372d94688b06618a226ed49235ad212", "patch": "@@ -398,6 +398,15 @@ set_range_info (tree name, enum value_range_kind range_type,\n   set_range_info_raw (name, range_type, min, max);\n }\n \n+/* Store range information for NAME from a value_range.  */\n+\n+void\n+set_range_info (tree name, const value_range &vr)\n+{\n+  wide_int min = wi::to_wide (vr.min ());\n+  wide_int max = wi::to_wide (vr.max ());\n+  set_range_info (name, vr.kind (), min, max);\n+}\n \n /* Gets range information MIN, MAX and returns enum value_range_kind\n    corresponding to tree ssa_name NAME.  enum value_range_kind returned\n@@ -421,6 +430,27 @@ get_range_info (const_tree name, wide_int *min, wide_int *max)\n   return SSA_NAME_RANGE_TYPE (name);\n }\n \n+/* Gets range information corresponding to ssa_name NAME and stores it\n+   in a value_range VR.  Returns the value_range_kind.  */\n+\n+enum value_range_kind\n+get_range_info (const_tree name, value_range &vr)\n+{\n+  tree min, max;\n+  wide_int wmin, wmax;\n+  enum value_range_kind kind = get_range_info (name, &wmin, &wmax);\n+\n+  if (kind == VR_VARYING || kind == VR_UNDEFINED)\n+    min = max = NULL;\n+  else\n+    {\n+      min = wide_int_to_tree (TREE_TYPE (name), wmin);\n+      max = wide_int_to_tree (TREE_TYPE (name), wmax);\n+    }\n+  vr = value_range (kind, min, max);\n+  return kind;\n+}\n+\n /* Set nonnull attribute to pointer NAME.  */\n \n void"}, {"sha": "a5ff14e524ff2f353cfdf5e02c05c53792afeb80", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=c89af696c372d94688b06618a226ed49235ad212", "patch": "@@ -69,12 +69,11 @@ struct GTY ((variable_size)) range_info_def {\n /* Sets the value range to SSA.  */\n extern void set_range_info (tree, enum value_range_kind, const wide_int_ref &,\n \t\t\t    const wide_int_ref &);\n-extern void set_range_info_raw (tree, enum value_range_kind,\n-\t\t\t\tconst wide_int_ref &,\n-\t\t\t\tconst wide_int_ref &);\n+extern void set_range_info (tree, const value_range &);\n /* Gets the value range from SSA.  */\n extern enum value_range_kind get_range_info (const_tree, wide_int *,\n \t\t\t\t\t     wide_int *);\n+extern enum value_range_kind get_range_info (const_tree, value_range &);\n extern void set_nonzero_bits (tree, const wide_int_ref &);\n extern wide_int get_nonzero_bits (const_tree);\n extern bool ssa_name_has_boolean_range (tree);"}, {"sha": "e45d7885645c7aa85f77858105d84b38e04e9516", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c89af696c372d94688b06618a226ed49235ad212", "patch": "@@ -743,7 +743,7 @@ vrp_bitmap_equal_p (const_bitmap b1, const_bitmap b2)\n static inline bool\n range_is_null (const value_range *vr)\n {\n-  return vr->null_p ();\n+  return vr->zero_p ();\n }\n \n static inline bool"}, {"sha": "3c870d52354b61e7b6db04adbb8db0628ceaa003", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89af696c372d94688b06618a226ed49235ad212/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=c89af696c372d94688b06618a226ed49235ad212", "patch": "@@ -63,7 +63,7 @@ class GTY((for_user)) value_range\n \n   /* Misc methods.  */\n   tree type () const;\n-  bool null_p () const;\n+  bool zero_p () const;\n   bool may_contain_p (tree) const;\n   bool singleton_p (tree *result = NULL) const;\n   void deep_copy (const value_range *);\n@@ -150,7 +150,7 @@ value_range::undefined_p () const\n /* Return TRUE if range is the constant zero.  */\n \n inline bool\n-value_range::null_p () const\n+value_range::zero_p () const\n {\n   return (m_kind == VR_RANGE\n \t  && integer_zerop (m_min)"}]}