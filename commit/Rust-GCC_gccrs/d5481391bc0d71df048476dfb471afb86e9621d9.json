{"sha": "d5481391bc0d71df048476dfb471afb86e9621d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0ODEzOTFiYzBkNzFkZjA0ODQ3NmRmYjQ3MWFmYjg2ZTk2MjFkOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-31T16:50:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-31T16:50:13Z"}, "message": "re PR tree-optimization/87168 (ICE on valid code at -Os and above on x86_64-linux-gnu: verify_ssa failed)\n\n2018-08-31  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87168\n\t* tree-ssa-sccvn.c (SSA_VAL): Add visited output parameter.\n\t(rpo_elim::eliminate_avail): When OP was not visited it must\n\tbe available.\n\n\t* gcc.dg/torture/pr87168.c: New testcase.\n\nFrom-SVN: r264021", "tree": {"sha": "5d0e9cb40c42f1eb7a3436fbc49824dd3db44ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0e9cb40c42f1eb7a3436fbc49824dd3db44ff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5481391bc0d71df048476dfb471afb86e9621d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5481391bc0d71df048476dfb471afb86e9621d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5481391bc0d71df048476dfb471afb86e9621d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5481391bc0d71df048476dfb471afb86e9621d9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01540df292a21926c326d8b9478becfe39459fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01540df292a21926c326d8b9478becfe39459fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01540df292a21926c326d8b9478becfe39459fbf"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "79aa7ce34f6e37a3f1c4260ecec610e237ea3324", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5481391bc0d71df048476dfb471afb86e9621d9", "patch": "@@ -1,3 +1,10 @@\n+2018-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87168\n+\t* tree-ssa-sccvn.c (SSA_VAL): Add visited output parameter.\n+\t(rpo_elim::eliminate_avail): When OP was not visited it must\n+\tbe available.\n+\n 2018-08-31  David Malcolm  <dmalcolm@redhat.com>\n \n \t* tree-vrp.c (copy_value_range): Convert param \"from\" from"}, {"sha": "757dd1bb28820609213e773cc35773b4223f6587", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5481391bc0d71df048476dfb471afb86e9621d9", "patch": "@@ -1,3 +1,8 @@\n+2018-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87168\n+\t* gcc.dg/torture/pr87168.c: New testcase.\n+\n 2018-08-31  Vlad Lazar  <vlad.lazar@arm.com>\n \n \t* gcc.target/aarch64/scalar_intrinsics.c (test_vnegd_s64): New."}, {"sha": "d66ed98dca0afc518d97cc8bc0715c811597e17d", "filename": "gcc/testsuite/gcc.dg/torture/pr87168.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87168.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87168.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87168.c?ref=d5481391bc0d71df048476dfb471afb86e9621d9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+\n+int a, b, c, d, e, f, *g;\n+\n+int main ()\n+{ \n+  unsigned i;\n+  while (b)\n+    { \n+      int j, m;\n+L1:\n+      f = j;\n+L2:\n+      if (i && e)\n+\t{ \n+\t  i = f;\n+\t  goto L2;\n+\t}\n+      j = f;\n+      if (a)\n+\tgoto L3;\n+      for (m = 0; m < 2; m++)\n+\tif (d)\n+\t  goto L1;\n+      goto L2;\n+L3:\n+      (&j != g) | c;\n+    }\n+  return 0;\n+}"}, {"sha": "c333b89b20479c6936f5c41baabe488097741d67", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5481391bc0d71df048476dfb471afb86e9621d9/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d5481391bc0d71df048476dfb471afb86e9621d9", "patch": "@@ -456,9 +456,11 @@ VN_INFO (tree name)\n /* Return the SSA value of X.  */\n \n inline tree\n-SSA_VAL (tree x)\n+SSA_VAL (tree x, bool *visited = NULL)\n {\n   vn_ssa_aux_t tem = vn_ssa_aux_hash->find_with_hash (x, SSA_NAME_VERSION (x));\n+  if (visited)\n+    *visited = tem && tem->visited;\n   return tem && tem->visited ? tem->valnum : x;\n }\n \n@@ -5681,7 +5683,12 @@ rpo_elim::~rpo_elim ()\n tree\n rpo_elim::eliminate_avail (basic_block bb, tree op)\n {\n-  tree valnum = SSA_VAL (op);\n+  bool visited;\n+  tree valnum = SSA_VAL (op, &visited);\n+  /* If we didn't visit OP then it must be defined outside of the\n+     region we process and also dominate it.  So it is available.  */\n+  if (!visited)\n+    return op;\n   if (TREE_CODE (valnum) == SSA_NAME)\n     {\n       if (SSA_NAME_IS_DEFAULT_DEF (valnum))"}]}