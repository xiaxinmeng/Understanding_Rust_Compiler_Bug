{"sha": "de32716c0dc0a842db46ab4ebba49be4b0763b62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzMjcxNmMwZGMwYTg0MmRiNDZhYjRlYmJhNDliZTRiMDc2M2I2Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-03-23T01:38:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-23T01:38:00Z"}, "message": "locks.h: Include ia64intrin.h.\n\n        * sysdep/ia64/locks.h: Include ia64intrin.h.\n        (compare_and_swap): Use __sync_bool_compare_and_swap.\n        (compare_and_swap_release): Expose ar.ccv assignment.\n\nFrom-SVN: r64737", "tree": {"sha": "123b92e3d573ae32f58f2baa33d404885dfc8247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123b92e3d573ae32f58f2baa33d404885dfc8247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de32716c0dc0a842db46ab4ebba49be4b0763b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de32716c0dc0a842db46ab4ebba49be4b0763b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de32716c0dc0a842db46ab4ebba49be4b0763b62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de32716c0dc0a842db46ab4ebba49be4b0763b62/comments", "author": null, "committer": null, "parents": [{"sha": "2298018014e5c94bb4de93a2da576d5bde88e1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2298018014e5c94bb4de93a2da576d5bde88e1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2298018014e5c94bb4de93a2da576d5bde88e1d0"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "0dc65e5b0efed5c37fc3d02e925152711a5497eb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32716c0dc0a842db46ab4ebba49be4b0763b62/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32716c0dc0a842db46ab4ebba49be4b0763b62/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=de32716c0dc0a842db46ab4ebba49be4b0763b62", "patch": "@@ -1,3 +1,9 @@\n+2003-03-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* sysdep/ia64/locks.h: Include ia64intrin.h.\n+\t(compare_and_swap): Use __sync_bool_compare_and_swap.\n+\t(compare_and_swap_release): Expose ar.ccv assignment.\n+\n 2003-03-22  Andreas Tobler <a.tobler@schweiz.ch>\n \n \t* include/posix.h: Add suffix for darwin dynamic libraries."}, {"sha": "bde43b420fbbb602b6ef99a7ae2995f71759d141", "filename": "libjava/sysdep/ia64/locks.h", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32716c0dc0a842db46ab4ebba49be4b0763b62/libjava%2Fsysdep%2Fia64%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32716c0dc0a842db46ab4ebba49be4b0763b62/libjava%2Fsysdep%2Fia64%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fia64%2Flocks.h?ref=de32716c0dc0a842db46ab4ebba49be4b0763b62", "patch": "@@ -11,6 +11,8 @@ details.  */\n #ifndef __SYSDEP_LOCKS_H__\n #define __SYSDEP_LOCKS_H__\n \n+#include <ia64intrin.h>\n+\n typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n \t\t\t\t/* address.\t\t\t\t*/\n \n@@ -19,19 +21,15 @@ compare_and_swap(volatile obj_addr_t *addr,\n \t \t\t\t\t      obj_addr_t old,\n \t\t\t\t\t      obj_addr_t new_val) \n {\n-  unsigned long oldval;\n-  __asm__ __volatile__(\"mov ar.ccv=%4 ;; cmpxchg8.acq %0=%1,%2,ar.ccv\"\n-\t      : \"=r\"(oldval), \"=m\"(*addr)\n-\t      : \"r\"(new_val), \"1\"(*addr), \"r\"(old) : \"memory\");\n-  return (oldval == old);\n+  return __sync_bool_compare_and_swap (addr, old, new_val);\n }\n \n // The fact that *addr is volatile should cause the compiler to\n // automatically generate an st8.rel.\n inline static void\n release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n {\n-  __asm__ __volatile__(\" \" : : : \"memory\");\n+  __asm__ __volatile__(\"\" : : : \"memory\");\n   *(addr) = new_val;\n }\n \n@@ -40,11 +38,12 @@ compare_and_swap_release(volatile obj_addr_t *addr,\n \t \t\t\t\t             obj_addr_t old,\n \t\t\t\t\t\t     obj_addr_t new_val) \n {\n-  unsigned long oldval;\n-  __asm__ __volatile__(\"mov ar.ccv=%4 ;; cmpxchg8.rel %0=%1,%2,ar.ccv\"\n-\t      : \"=r\"(oldval), \"=m\"(*addr)\n-\t      : \"r\"(new_val), \"1\"(*addr), \"r\"(old) : \"memory\");\n-  return (oldval == old);\n+  register unsigned long ar_ccv __asm__(\"ar.ccv\") = old;\n+  unsigned long out;\n+  __asm__ __volatile__(\"cmpxchg8.rel %0=%1,%2,%4\"\n+\t      : \"=r\"(out), \"=m\"(*addr)\n+\t      : \"r\"(new_val), \"m\"(*addr), \"d\"(ar_ccv) : \"memory\");\n+  return (out == old);\n }\n \n #endif"}]}