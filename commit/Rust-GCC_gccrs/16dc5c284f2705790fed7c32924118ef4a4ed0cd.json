{"sha": "16dc5c284f2705790fed7c32924118ef4a4ed0cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkYzVjMjg0ZjI3MDU3OTBmZWQ3YzMyOTI0MTE4ZWY0YTRlZDBjZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-10-18T19:45:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-10-18T19:45:55Z"}, "message": "mips-protos.h (compute_frame_size): Delete.\n\ngcc/\n\t* config/mips/mips-protos.h (compute_frame_size): Delete.\n\t* config/mips/mips.h: Update comments.\n\t* config/mips/mips.c (mips_frame_info): Remove initialized.\n\t(compute_frame_size): Rename to...\n\t(mips_compute_frame_info): ...this and make static.  Remove the\n\tSIZE argument and return no value.  Remove the setting of initialized.\n\tUpdate rest of file accordingly.\n\t(mips_set_return_address): Don't call compute_frame_size.\n\t(mips_can_use_return_insn): Don't check df_regs_ever_live_p (31).\n\tDon't call compute_frame_size.\n\nFrom-SVN: r129460", "tree": {"sha": "019710f196f53297f953c3ea048e192a3f86307e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/019710f196f53297f953c3ea048e192a3f86307e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16dc5c284f2705790fed7c32924118ef4a4ed0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dc5c284f2705790fed7c32924118ef4a4ed0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16dc5c284f2705790fed7c32924118ef4a4ed0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dc5c284f2705790fed7c32924118ef4a4ed0cd/comments", "author": null, "committer": null, "parents": [{"sha": "29c4d304fd99684f08863ecd1705ddead325a312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c4d304fd99684f08863ecd1705ddead325a312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c4d304fd99684f08863ecd1705ddead325a312"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "4b18b7b5939ce9cfaf62db7160868c994091084b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16dc5c284f2705790fed7c32924118ef4a4ed0cd", "patch": "@@ -1,3 +1,16 @@\n+2007-10-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips-protos.h (compute_frame_size): Delete.\n+\t* config/mips/mips.h: Update comments.\n+\t* config/mips/mips.c (mips_frame_info): Remove initialized.\n+\t(compute_frame_size): Rename to...\n+\t(mips_compute_frame_info): ...this and make static.  Remove the\n+\tSIZE argument and return no value.  Remove the setting of initialized.\n+\tUpdate rest of file accordingly.\n+\t(mips_set_return_address): Don't call compute_frame_size.\n+\t(mips_can_use_return_insn): Don't check df_regs_ever_live_p (31).\n+\tDon't call compute_frame_size.\n+\n 2007-10-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips-protos.h (mips_frame_pointer_required): Declare."}, {"sha": "dfb0cfa299949dacea8b709d0eac3219ba016f7f", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=16dc5c284f2705790fed7c32924118ef4a4ed0cd", "patch": "@@ -256,7 +256,6 @@ extern void mips_finish_declare_object (FILE *, tree, int, int);\n extern bool mips_small_data_pattern_p (rtx);\n extern rtx mips_rewrite_small_data (rtx);\n extern bool mips_frame_pointer_required (void);\n-extern HOST_WIDE_INT compute_frame_size (HOST_WIDE_INT);\n extern HOST_WIDE_INT mips_initial_elimination_offset (int, int);\n extern rtx mips_return_addr (int, rtx);\n extern enum mips_loadgp_style mips_current_loadgp_style (void);"}, {"sha": "22b0c790c0dd96f1493c56ae40086044e1fb5059", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=16dc5c284f2705790fed7c32924118ef4a4ed0cd", "patch": "@@ -234,9 +234,7 @@ static const char *const mips_fp_conditions[] = {\n   MIPS_FP_CONDITIONS (STRINGIFY)\n };\n \n-/* Structure to be filled in by compute_frame_size with register\n-   save masks, and offsets for the current function.  */\n-\n+/* Information about a function's frame layout.  */\n struct mips_frame_info GTY(())\n {\n   /* The size of the frame in bytes.  */\n@@ -280,9 +278,6 @@ struct mips_frame_info GTY(())\n \n   /* The offset of hard_frame_pointer_rtx from frame_pointer_rtx.  */\n   HOST_WIDE_INT hard_frame_pointer_offset;\n-\n-  /* True if this structure has been initialized after reload.  */\n-  bool initialized;\n };\n \n struct machine_function GTY(()) {\n@@ -294,7 +289,7 @@ struct machine_function GTY(()) {\n      This area is allocated by the callee at the very top of the frame.  */\n   int varargs_size;\n \n-  /* Current frame information, calculated by compute_frame_size.  */\n+  /* Current frame information, calculated by mips_compute_frame_info.  */\n   struct mips_frame_info frame;\n \n   /* The register to use as the global pointer within this function.  */\n@@ -7833,8 +7828,7 @@ mips_save_reg_p (unsigned int regno)\n   return false;\n }\n \n-/* Return the bytes needed to compute the frame pointer from the current\n-   stack pointer.  SIZE is the size (in bytes) of the local variables.\n+/* Populate the current function's mips_frame_info structure.\n \n    MIPS stack frames look like:\n \n@@ -7895,15 +7889,16 @@ mips_save_reg_p (unsigned int regno)\n    They decrease stack_pointer_rtx but leave frame_pointer_rtx and\n    hard_frame_pointer_rtx unchanged.  */\n \n-HOST_WIDE_INT\n-compute_frame_size (HOST_WIDE_INT size)\n+static void\n+mips_compute_frame_info (void)\n {\n   struct mips_frame_info *frame;\n-  HOST_WIDE_INT offset;\n+  HOST_WIDE_INT offset, size;\n   unsigned int regno, i;\n \n   frame = &cfun->machine->frame;\n   memset (frame, 0, sizeof (*frame));\n+  size = get_frame_size ();\n \n   cfun->machine->global_pointer = mips_global_pointer ();\n \n@@ -8007,9 +8002,6 @@ compute_frame_size (HOST_WIDE_INT size)\n      instructions for local variables and incoming arguments.  */\n   if (TARGET_MIPS16)\n     frame->hard_frame_pointer_offset = frame->args_size;\n-\n-  frame->initialized = reload_completed;\n-  return frame->total_size;\n }\n \n /* Return the style of GP load sequence that is being used for the\n@@ -8046,7 +8038,7 @@ mips_frame_pointer_required (void)\n      without using a second temporary register.  */\n   if (TARGET_MIPS16)\n     {\n-      compute_frame_size (get_frame_size ());\n+      mips_compute_frame_info ();\n       if (!SMALL_OPERAND (cfun->machine->frame.total_size))\n \treturn true;\n     }\n@@ -8063,7 +8055,7 @@ mips_initial_elimination_offset (int from, int to)\n {\n   HOST_WIDE_INT offset;\n \n-  compute_frame_size (get_frame_size ());\n+  mips_compute_frame_info ();\n \n   /* Set OFFSET to the offset from the soft frame pointer, which is also\n      the offset from the end-of-prologue stack pointer.  */\n@@ -8118,7 +8110,6 @@ mips_set_return_address (rtx address, rtx scratch)\n {\n   rtx slot_address;\n \n-  compute_frame_size (get_frame_size ());\n   gcc_assert ((cfun->machine->frame.mask >> 31) & 1);\n   slot_address = mips_add_offset (scratch, stack_pointer_rtx,\n \t\t\t\t  cfun->machine->frame.gp_sp_offset);\n@@ -8192,7 +8183,7 @@ mips_for_each_saved_reg (HOST_WIDE_INT sp_offset, mips_save_restore_fn fn)\n       }\n \n   /* This loop must iterate over the same space as its companion in\n-     compute_frame_size.  */\n+     mips_compute_frame_info.  */\n   offset = cfun->machine->frame.fp_sp_offset - sp_offset;\n   fpr_mode = (TARGET_SINGLE_FLOAT ? SFmode : DFmode);\n   for (regno = (FP_REG_LAST - MAX_FPRS_PER_FMT + 1);\n@@ -8447,7 +8438,7 @@ mips_expand_prologue (void)\n   if (cfun->machine->global_pointer > 0)\n     SET_REGNO (pic_offset_table_rtx, cfun->machine->global_pointer);\n \n-  size = compute_frame_size (get_frame_size ());\n+  size = cfun->machine->frame.total_size;\n \n   /* Save the registers.  Allocate up to MIPS_MAX_FIRST_STACK_STEP\n      bytes beforehand; this is enough to cover the register save area\n@@ -8768,7 +8759,7 @@ mips_can_use_return_insn (void)\n   if (! reload_completed)\n     return 0;\n \n-  if (df_regs_ever_live_p (31) || current_function_profile)\n+  if (current_function_profile)\n     return 0;\n \n   /* In mips16 mode, a function that returns a floating point value\n@@ -8777,10 +8768,7 @@ mips_can_use_return_insn (void)\n   if (mips16_cfun_returns_in_fpr_p ())\n     return 0;\n \n-  if (cfun->machine->frame.initialized)\n-    return cfun->machine->frame.total_size == 0;\n-\n-  return compute_frame_size (get_frame_size ()) == 0;\n+  return cfun->machine->frame.total_size == 0;\n }\n \f\n /* Implement HARD_REGNO_NREGS.  The size of FP registers is controlled"}, {"sha": "f362aaaedda1614f4ac45153619b5c1a34f71281", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dc5c284f2705790fed7c32924118ef4a4ed0cd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=16dc5c284f2705790fed7c32924118ef4a4ed0cd", "patch": "@@ -1881,7 +1881,7 @@ enum reg_class\n #define STACK_GROWS_DOWNWARD\n \n /* The offset of the first local variable from the beginning of the frame.\n-   See compute_frame_size for details about the frame layout.  */\n+   See mips_compute_frame_info for details about the frame layout.  */\n \n #define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n   (current_function_outgoing_args_size\t\t\t\t\t\\"}]}