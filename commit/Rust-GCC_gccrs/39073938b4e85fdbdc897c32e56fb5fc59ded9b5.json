{"sha": "39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwNzM5MzhiNGU4NWZkYmRjODk3YzMyZTU2ZmI1ZmM1OWRlZDliNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-27T12:43:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-27T13:04:36Z"}, "message": "libstdc++: Minor refactoring in <experimental/internet>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (address_v6::bytes_type): Adjust\n\tformatting.\n\t(basic_endpoint): Define _M_is_v6() to put all checks for\n\tAF_INET6 in one place.\n\t(basic_endpoint::resize): Simplify.\n\t(operator==(const tcp&, const tcp&)): Add constexpr and noexcept.\n\t(operator!=(const tcp&, const tcp&)): Likewise.\n\t(operator==(const udp&, const udp&)): Likewise.\n\t(operator!=(const udp&, const udp&)): Likewise.\n\t* testsuite/experimental/net/internet/tcp.cc: New test.\n\t* testsuite/experimental/net/internet/udp.cc: New test.", "tree": {"sha": "ef167b9db2d4ed590d81284885bfb8a21be3fec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef167b9db2d4ed590d81284885bfb8a21be3fec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee35a8685ee174c6914059143aceb7009d3e920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee35a8685ee174c6914059143aceb7009d3e920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee35a8685ee174c6914059143aceb7009d3e920"}], "stats": {"total": 129, "additions": 110, "deletions": 19}, "files": [{"sha": "f6d6ef34504f20364299676976ce685fd5fc43cb", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "patch": "@@ -273,8 +273,11 @@ namespace ip\n     // types:\n     struct bytes_type : array<unsigned char, 16>\n     {\n-      template<typename... _Tp> explicit constexpr bytes_type(_Tp... __t)\n-\t: array<unsigned char, 16>{{static_cast<unsigned char>(__t)...}} { }\n+      template<typename... _Tp>\n+\texplicit constexpr\n+\tbytes_type(_Tp... __t)\n+\t: array<unsigned char, 16>{{static_cast<unsigned char>(__t)...}}\n+\t{ }\n     };\n \n     // constructors:\n@@ -1476,15 +1479,14 @@ namespace ip\n       // members:\n       constexpr protocol_type protocol() const noexcept\n       {\n-\treturn _M_data._M_v4.sin_family == AF_INET6\n-\t  ? protocol_type::v6() : protocol_type::v4();\n+\treturn _M_is_v6() ? protocol_type::v6() : protocol_type::v4();\n       }\n \n       constexpr ip::address\n       address() const noexcept\n       {\n \tip::address __addr;\n-\tif (protocol().family() == AF_INET6)\n+\tif (_M_is_v6())\n \t  {\n \t    __builtin_memcpy(&__addr._M_v6._M_bytes,\n \t\t\t     _M_data._M_v6.sin6_addr.s6_addr, 16);\n@@ -1525,18 +1527,16 @@ namespace ip\n       { _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num); }\n \n       void* data() noexcept { return &_M_data; }\n+\n       const void* data() const noexcept { return &_M_data; }\n+\n       constexpr size_t size() const noexcept\n-      {\n-\treturn protocol().family() == AF_INET6\n-\t  ? sizeof(sockaddr_in6) : sizeof(sockaddr_in);\n-      }\n+      { return _M_is_v6() ? sizeof(sockaddr_in6) : sizeof(sockaddr_in); }\n \n       void\n       resize(size_t __s)\n       {\n-\tif ((protocol().family() == AF_INET6 && __s != sizeof(sockaddr_in6))\n-\t    || (protocol().family() == AF_INET && __s != sizeof(sockaddr_in)))\n+\tif (__s != size())\n \t  __throw_length_error(\"net::ip::basic_endpoint::resize\");\n       }\n \n@@ -1548,6 +1548,9 @@ namespace ip\n \tsockaddr_in\t_M_v4;\n \tsockaddr_in6\t_M_v6;\n       } _M_data;\n+\n+      constexpr bool _M_is_v6() const noexcept\n+      { return _M_data._M_v4.sin_family == AF_INET6; }\n     };\n \n   /** basic_endpoint comparisons\n@@ -2136,12 +2139,12 @@ namespace ip\n    * @{\n    */\n \n-  inline bool\n-  operator==(const tcp& __a, const tcp& __b)\n+  constexpr bool\n+  operator==(const tcp& __a, const tcp& __b) noexcept\n   { return __a.family() == __b.family(); }\n \n-  inline bool\n-  operator!=(const tcp& __a, const tcp& __b)\n+  constexpr bool\n+  operator!=(const tcp& __a, const tcp& __b) noexcept\n   { return !(__a == __b); }\n \n   /// @}\n@@ -2177,12 +2180,12 @@ namespace ip\n    * @{\n    */\n \n-  inline bool\n-  operator==(const udp& __a, const udp& __b)\n+  constexpr bool\n+  operator==(const udp& __a, const udp& __b) noexcept\n   { return __a.family() == __b.family(); }\n \n-  inline bool\n-  operator!=(const udp& __a, const udp& __b)\n+  constexpr bool\n+  operator!=(const udp& __a, const udp& __b) noexcept\n   { return !(__a == __b); }\n \n   /// @}"}, {"sha": "87d042377a087895cc12718574eb1f10a5585c8d", "filename": "libstdc++-v3/testsuite/experimental/net/internet/tcp.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Ftcp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Ftcp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Ftcp.cc?ref=39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/internet>\n+#include <type_traits>\n+\n+#if __has_include(<netinet/in.h>)\n+using namespace std;\n+using std::experimental::net::ip::tcp;\n+using std::experimental::net::ip::basic_endpoint;\n+using std::experimental::net::ip::basic_resolver;\n+using std::experimental::net::basic_stream_socket;\n+using std::experimental::net::basic_socket_acceptor;\n+using std::experimental::net::basic_socket_iostream;\n+\n+void\n+test01()\n+{\n+  static_assert( ! is_default_constructible<tcp>(), \"\" );\n+  static_assert( is_nothrow_copy_constructible<tcp>(), \"\" );\n+  static_assert( is_nothrow_copy_assignable<tcp>(), \"\" );\n+\n+  static_assert( is_same<tcp::endpoint, basic_endpoint<tcp>>(), \"\");\n+  static_assert( is_same<tcp::resolver, basic_resolver<tcp>>(), \"\");\n+  static_assert( is_same<tcp::socket,   basic_stream_socket<tcp>>(), \"\");\n+  static_assert( is_same<tcp::acceptor, basic_socket_acceptor<tcp>>(), \"\");\n+  static_assert( is_same<tcp::iostream, basic_socket_iostream<tcp>>(), \"\");\n+\n+  static_assert( tcp::v4() == tcp::v4(), \"\" );\n+  static_assert( tcp::v6() == tcp::v6(), \"\" );\n+  static_assert( tcp::v4() != tcp::v6(), \"\" );\n+  static_assert( tcp::v6() != tcp::v4(), \"\" );\n+\n+  static_assert( noexcept(tcp::v6() == tcp::v4()), \"\" );\n+  static_assert( noexcept(tcp::v6() != tcp::v4()), \"\" );\n+\n+  static_assert( tcp::v4().family() == AF_INET, \"\" );\n+  static_assert( tcp::v6().family() == AF_INET6, \"\" );\n+\n+  static_assert( tcp::v4().type() == SOCK_STREAM, \"\" );\n+  static_assert( tcp::v6().type() == SOCK_STREAM, \"\" );\n+\n+  static_assert( tcp::v4().protocol() == IPPROTO_TCP, \"\" );\n+  static_assert( tcp::v6().protocol() == IPPROTO_TCP, \"\" );\n+}\n+#endif"}, {"sha": "d5f42c7575e433033dcba3c40f4ee7507fa80b27", "filename": "libstdc++-v3/testsuite/experimental/net/internet/udp.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fudp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39073938b4e85fdbdc897c32e56fb5fc59ded9b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fudp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fudp.cc?ref=39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/internet>\n+#include <type_traits>\n+\n+#if __has_include(<netinet/in.h>)\n+using namespace std;\n+using std::experimental::net::ip::udp;\n+using std::experimental::net::ip::basic_endpoint;\n+using std::experimental::net::ip::basic_resolver;\n+using std::experimental::net::basic_datagram_socket;\n+using std::experimental::net::basic_socket_acceptor;\n+using std::experimental::net::basic_socket_iostream;\n+\n+void\n+test01()\n+{\n+  static_assert( ! is_default_constructible<udp>(), \"\" );\n+  static_assert( is_nothrow_copy_constructible<udp>(), \"\" );\n+  static_assert( is_nothrow_copy_assignable<udp>(), \"\" );\n+\n+  static_assert( is_same<udp::endpoint, basic_endpoint<udp>>(), \"\");\n+  static_assert( is_same<udp::resolver, basic_resolver<udp>>(), \"\");\n+  static_assert( is_same<udp::socket,   basic_datagram_socket<udp>>(), \"\");\n+\n+  static_assert( udp::v4() == udp::v4(), \"\" );\n+  static_assert( udp::v6() == udp::v6(), \"\" );\n+  static_assert( udp::v4() != udp::v6(), \"\" );\n+  static_assert( udp::v6() != udp::v4(), \"\" );\n+\n+  static_assert( noexcept(udp::v6() == udp::v4()), \"\" );\n+  static_assert( noexcept(udp::v6() != udp::v4()), \"\" );\n+\n+  static_assert( udp::v4().family() == AF_INET, \"\" );\n+  static_assert( udp::v6().family() == AF_INET6, \"\" );\n+\n+  static_assert( udp::v4().type() == SOCK_DGRAM, \"\" );\n+  static_assert( udp::v6().type() == SOCK_DGRAM, \"\" );\n+\n+  static_assert( udp::v4().protocol() == IPPROTO_UDP, \"\" );\n+  static_assert( udp::v6().protocol() == IPPROTO_UDP, \"\" );\n+}\n+#endif"}]}