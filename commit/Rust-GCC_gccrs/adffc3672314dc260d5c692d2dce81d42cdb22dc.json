{"sha": "adffc3672314dc260d5c692d2dce81d42cdb22dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRmZmMzNjcyMzE0ZGMyNjBkNWM2OTJkMmRjZTgxZDQyY2RiMjJkYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-17T20:26:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-11T09:53:51Z"}, "message": "[Ada] Fix wrong access to large bit-packed arrays with reverse SSO\n\n2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_pakd.ads: Add paragraph about scalar storage order.\n\t* exp_pakd.adb (Install_PAT): Do not set the scalar storage\n\torder of the PAT here but...\n\t(Set_PB_Type): ...here instead and...\n\t(Create_Packed_Array_Impl_Type): ...here as well.\n\t* rtsfind.ads (RE_Id): Add RE_Rev_Packed_Bytes{1,2,4}.\n\t(RE_Unit_Table): Likewise.\n\t* libgnat/s-unstyp.ads (Rev_Packed_Bytes1): New derived type.\n\t(Rev_Packed_Bytes2): Likewise.\n\t(Rev_Packed_Bytes4): Likewise.", "tree": {"sha": "a6115b164ab8c19300af419a384d9cfd9fafcaa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6115b164ab8c19300af419a384d9cfd9fafcaa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adffc3672314dc260d5c692d2dce81d42cdb22dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adffc3672314dc260d5c692d2dce81d42cdb22dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adffc3672314dc260d5c692d2dce81d42cdb22dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adffc3672314dc260d5c692d2dce81d42cdb22dc/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0a011c2be57cd7454650c3a411aca0362719ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0a011c2be57cd7454650c3a411aca0362719ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0a011c2be57cd7454650c3a411aca0362719ad"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "6d5cf62af0748d995d349d7a444aa70e533a6595", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=adffc3672314dc260d5c692d2dce81d42cdb22dc", "patch": "@@ -501,8 +501,9 @@ package body Exp_Pakd is\n       --  packed array type. It creates the type and installs it as required.\n \n       procedure Set_PB_Type;\n-      --  Sets PB_Type to Packed_Bytes{1,2,4} as required by the alignment\n-      --  requirements (see documentation in the spec of this package).\n+      --  Set PB_Type to [Rev_]Packed_Bytes{1,2,4} as required by the alignment\n+      --  and the scalar storage order requirements (see documentation in the\n+      --  spec of this package).\n \n       -----------------\n       -- Install_PAT --\n@@ -580,14 +581,6 @@ package body Exp_Pakd is\n          Set_Is_Volatile_Full_Access (PAT, Is_Volatile_Full_Access  (Typ));\n          Set_Treat_As_Volatile       (PAT, Treat_As_Volatile        (Typ));\n \n-         --  For a non-bit-packed array, propagate reverse storage order\n-         --  flag from original base type to packed array base type.\n-\n-         if not Is_Bit_Packed_Array (Typ) then\n-            Set_Reverse_Storage_Order\n-              (Etype (PAT), Reverse_Storage_Order (Base_Type (Typ)));\n-         end if;\n-\n          --  We definitely do not want to delay freezing for packed array\n          --  types. This is of particular importance for the itypes that are\n          --  generated for record components depending on discriminants where\n@@ -616,16 +609,36 @@ package body Exp_Pakd is\n            or else Alignment (Typ) = 1\n            or else Component_Alignment (Typ) = Calign_Storage_Unit\n          then\n-            PB_Type := RTE (RE_Packed_Bytes1);\n+            if Reverse_Storage_Order (Typ) then\n+               PB_Type := RTE (RE_Rev_Packed_Bytes1);\n+            else\n+               PB_Type := RTE (RE_Packed_Bytes1);\n+            end if;\n \n          elsif Csize mod 4 /= 0\n            or else Alignment (Typ) = 2\n          then\n-            PB_Type := RTE (RE_Packed_Bytes2);\n+            if Reverse_Storage_Order (Typ) then\n+               PB_Type := RTE (RE_Rev_Packed_Bytes2);\n+            else\n+               PB_Type := RTE (RE_Packed_Bytes2);\n+            end if;\n \n          else\n-            PB_Type := RTE (RE_Packed_Bytes4);\n+            if Reverse_Storage_Order (Typ) then\n+               PB_Type := RTE (RE_Rev_Packed_Bytes4);\n+            else\n+               PB_Type := RTE (RE_Packed_Bytes4);\n+            end if;\n          end if;\n+\n+         --  The Rev_Packed_Bytes{1,2,4} types cannot be directly declared with\n+         --  the reverse scalar storage order in System.Unsigned_Types because\n+         --  their component type is aliased and the combination would then be\n+         --  flagged as illegal by the compiler. Moreover changing the compiler\n+         --  would not address the bootstrap path issue with earlier versions.\n+\n+         Set_Reverse_Storage_Order (PB_Type, Reverse_Storage_Order (Typ));\n       end Set_PB_Type;\n \n    --  Start of processing for Create_Packed_Array_Impl_Type\n@@ -797,6 +810,10 @@ package body Exp_Pakd is\n          end;\n \n          Install_PAT;\n+\n+         --  Propagate the reverse storage order flag to the base type\n+\n+         Set_Reverse_Storage_Order (Etype (PAT), Reverse_Storage_Order (Typ));\n          return;\n \n       --  Case of bit-packing required for unconstrained array. We create"}, {"sha": "33726ba547e08db2c1b505693775bf1bb4b51e51", "filename": "gcc/ada/exp_pakd.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Fexp_pakd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Fexp_pakd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.ads?ref=adffc3672314dc260d5c692d2dce81d42cdb22dc", "patch": "@@ -86,6 +86,15 @@ package Exp_Pakd is\n    --    Packed_Bytes{1,2,4} type is made on the basis of alignment needs as\n    --    described above for the unconstrained case.\n \n+   --  When the packed array (sub)type is specified to have the reverse scalar\n+   --  storage order, the Packed_Bytes{1,2,4} references above are replaced\n+   --  with Rev_Packed_Bytes{1,2,4}. This is necessary because, although the\n+   --  component type is Packed_Byte and therefore endian neutral, the scalar\n+   --  storage order of the new type must be compatible with that of an outer\n+   --  composite type, if this composite type contains a component whose type\n+   --  is the packed array (sub)type and which does not start or does not end\n+   --  on a storage unit boundary.\n+\n    --  When a variable of packed array type is allocated, gigi will allocate\n    --  the amount of space indicated by the corresponding packed array type.\n    --  However, we do NOT attempt to rewrite the types of any references or"}, {"sha": "0f6c73cbd5c467080288d3a3e3bbb6abc3c359ea", "filename": "gcc/ada/libgnat/s-unstyp.ads", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Flibgnat%2Fs-unstyp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Flibgnat%2Fs-unstyp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-unstyp.ads?ref=adffc3672314dc260d5c692d2dce81d42cdb22dc", "patch": "@@ -51,8 +51,8 @@ package System.Unsigned_Types is\n    --  Used in the implementation of Is_Negative intrinsic (see Exp_Intr)\n \n    type Packed_Byte is mod 2 ** 8;\n-   pragma Universal_Aliasing (Packed_Byte);\n    for Packed_Byte'Size use 8;\n+   pragma Universal_Aliasing (Packed_Byte);\n    --  Component type for Packed_Bytes1, Packed_Bytes2 and Packed_Byte4 arrays.\n    --  As this type is used by the compiler to implement operations on user\n    --  packed array, it needs to be able to alias any type.\n@@ -89,6 +89,24 @@ package System.Unsigned_Types is\n    --  cases the clusters can be assumed to be 4-byte aligned if the array\n    --  is aligned (see System.Pack_12 in file s-pack12 as an example).\n \n+   type Rev_Packed_Bytes1 is new Packed_Bytes1;\n+   pragma Suppress_Initialization (Rev_Packed_Bytes1);\n+   --  This is equivalent to Packed_Bytes1, but for packed arrays with reverse\n+   --  scalar storage order. But the Scalar_Storage_Order attribute cannot be\n+   --  set directly here, see Exp_Pakd for more details.\n+\n+   type Rev_Packed_Bytes2 is new Packed_Bytes2;\n+   pragma Suppress_Initialization (Rev_Packed_Bytes2);\n+   --  This is equivalent to Packed_Bytes2, but for packed arrays with reverse\n+   --  scalar storage order. But the Scalar_Storage_Order attribute cannot be\n+   --  set directly here, see Exp_Pakd for more details.\n+\n+   type Rev_Packed_Bytes4 is new Packed_Bytes4;\n+   pragma Suppress_Initialization (Rev_Packed_Bytes4);\n+   --  This is equivalent to Packed_Bytes4, but for packed arrays with reverse\n+   --  scalar storage order. But the Scalar_Storage_Order attribute cannot be\n+   --  set directly here, see Exp_Pakd for more details.\n+\n    type Bits_1 is mod 2**1;\n    type Bits_2 is mod 2**2;\n    type Bits_4 is mod 2**4;"}, {"sha": "df980233ea62378d9e7dcb81816f9b153944ab8c", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adffc3672314dc260d5c692d2dce81d42cdb22dc/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=adffc3672314dc260d5c692d2dce81d42cdb22dc", "patch": "@@ -1524,6 +1524,9 @@ package Rtsfind is\n      RE_Packed_Bytes1,                   -- System.Unsigned_Types\n      RE_Packed_Bytes2,                   -- System.Unsigned_Types\n      RE_Packed_Bytes4,                   -- System.Unsigned_Types\n+     RE_Rev_Packed_Bytes1,               -- System.Unsigned_Types\n+     RE_Rev_Packed_Bytes2,               -- System.Unsigned_Types\n+     RE_Rev_Packed_Bytes4,               -- System.Unsigned_Types\n      RE_Short_Unsigned,                  -- System.Unsigned_Types\n      RE_Short_Short_Unsigned,            -- System.Unsigned_Types\n      RE_Unsigned,                        -- System.Unsigned_Types\n@@ -2798,6 +2801,9 @@ package Rtsfind is\n      RE_Packed_Bytes1                    => System_Unsigned_Types,\n      RE_Packed_Bytes2                    => System_Unsigned_Types,\n      RE_Packed_Bytes4                    => System_Unsigned_Types,\n+     RE_Rev_Packed_Bytes1                => System_Unsigned_Types,\n+     RE_Rev_Packed_Bytes2                => System_Unsigned_Types,\n+     RE_Rev_Packed_Bytes4                => System_Unsigned_Types,\n      RE_Short_Unsigned                   => System_Unsigned_Types,\n      RE_Short_Short_Unsigned             => System_Unsigned_Types,\n      RE_Unsigned                         => System_Unsigned_Types,"}]}