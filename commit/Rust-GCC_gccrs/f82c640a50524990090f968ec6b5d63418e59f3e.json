{"sha": "f82c640a50524990090f968ec6b5d63418e59f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyYzY0MGE1MDUyNDk5MDA5MGY5NjhlYzZiNWQ2MzQxOGU1OWYzZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-05-03T07:49:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-05-03T07:49:14Z"}, "message": "slp-11.c: Split into...\n\ngcc/testsuite/\n\t* gcc.dg/vect/slp-11.c: Split into...\n\t* gcc.dg/vect/slp-11a.c, gcc.dg/vect/slp-11b.c,\n\tgcc.dg/vect/slp-11c.c: ...these tests.\n\t* gcc.dg/vect/slp-12a.c: Split 4-stride loop into...\n\t* gcc.dg/vect/slp-12c.c: ...this new test.\n\t* gcc.dg/vect/slp-19.c: Split into...\n\t* gcc.dg/vect/slp-19a.c, gcc.dg/vect/slp-19b.c,\n\tgcc.dg/vect/slp-19c.c: ...these new tests.\n\nFrom-SVN: r173294", "tree": {"sha": "ef19313257792a534be39b76b6fd76ba55e8aff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef19313257792a534be39b76b6fd76ba55e8aff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f82c640a50524990090f968ec6b5d63418e59f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82c640a50524990090f968ec6b5d63418e59f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82c640a50524990090f968ec6b5d63418e59f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82c640a50524990090f968ec6b5d63418e59f3e/comments", "author": null, "committer": null, "parents": [{"sha": "21a74828ccd3b58faefb7c9d902248115d535886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a74828ccd3b58faefb7c9d902248115d535886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a74828ccd3b58faefb7c9d902248115d535886"}], "stats": {"total": 433, "additions": 295, "deletions": 138}, "files": [{"sha": "ef932387e5f7cdf611d5250ef603e2aaa90aab6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -1,3 +1,14 @@\n+2011-05-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.dg/vect/slp-11.c: Split into...\n+\t* gcc.dg/vect/slp-11a.c, gcc.dg/vect/slp-11b.c,\n+\tgcc.dg/vect/slp-11c.c: ...these tests.\n+\t* gcc.dg/vect/slp-12a.c: Split 4-stride loop into...\n+\t* gcc.dg/vect/slp-12c.c: ...this new test.\n+\t* gcc.dg/vect/slp-19.c: Split into...\n+\t* gcc.dg/vect/slp-19a.c, gcc.dg/vect/slp-19b.c,\n+\tgcc.dg/vect/slp-19c.c: ...these new tests.\n+\n 2011-05-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* lib/target-supports.exp"}, {"sha": "560146bc919ab520f1c70986855b0b262d53cc2d", "filename": "gcc/testsuite/gcc.dg/vect/slp-11a.c", "status": "renamed", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11a.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -3,15 +3,14 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 8 \n+#define N 8\n \n int\n main1 ()\n {\n   int i;\n   unsigned int out[N*8], a0, a1, a2, a3, a4, a5, a6, a7, b1, b0, b2, b3, b4, b5, b6, b7;\n   unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n-  float out2[N*8];\n \n   /* Different operations - not SLPable.  */\n   for (i = 0; i < N; i++)\n@@ -35,7 +34,7 @@ main1 ()\n       b7 = a7 * 2;\n \n       out[i*8] = b0 - 2;\n-      out[i*8 + 1] = b1 - 3; \n+      out[i*8 + 1] = b1 - 3;\n       out[i*8 + 2] = b2 - 2;\n       out[i*8 + 3] = b3 - 1;\n       out[i*8 + 4] = b4 - 8;\n@@ -58,41 +57,6 @@ main1 ()\n \tabort ();\n     }\n \n-  /* Requires permutation - not SLPable.  */\n-  for (i = 0; i < N*2; i++)\n-    {\n-      out[i*4] = (in[i*4] + 2) * 3;\n-      out[i*4 + 1] = (in[i*4 + 2] + 2) * 7;\n-      out[i*4 + 2] = (in[i*4 + 1] + 7) * 3;\n-      out[i*4 + 3] = (in[i*4 + 3] + 3) * 4;\n-    }\n-\n-  /* check results:  */\n-  for (i = 0; i < N*2; i++)\n-    {\n-      if (out[i*4] !=  (in[i*4] + 2) * 3\n-         || out[i*4 + 1] != (in[i*4 + 2] + 2) * 7\n-         || out[i*4 + 2] != (in[i*4 + 1] + 7) * 3\n-         || out[i*4 + 3] != (in[i*4 + 3] + 3) * 4)\n-        abort ();\n-    }\n-\n-  /* Different operations - not SLPable.  */\n-  for (i = 0; i < N*4; i++)\n-    {\n-      out2[i*2] = ((float) in[i*2] * 2 + 6) ;\n-      out2[i*2 + 1] = (float) (in[i*2 + 1] * 3 + 7);\n-    }\n-\n-  /* check results:  */\n-  for (i = 0; i < N*4; i++)\n-    {\n-      if (out2[i*2] !=  ((float) in[i*2] * 2 + 6)\n-         || out2[i*2 + 1] != (float) (in[i*2 + 1] * 3 + 7))\n-        abort ();\n-    }\n-\n-\n   return 0;\n }\n \n@@ -105,9 +69,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { { vect_uintfloat_cvt && vect_strided } &&  vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { target { { { ! vect_uintfloat_cvt } && vect_strided } &&  vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! { vect_int_mult && vect_strided } } } } }  */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0  \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_strided && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! { vect_strided && vect_int_mult } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-  ", "previous_filename": "gcc/testsuite/gcc.dg/vect/slp-11.c"}, {"sha": "f35fd5cbe4fb14a6105f717573e83e5308aad386", "filename": "gcc/testsuite/gcc.dg/vect/slp-11b.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11b.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned int out[N*8], a0, a1, a2, a3, a4, a5, a6, a7, b1, b0, b2, b3, b4, b5, b6, b7;\n+  unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+\n+  /* Requires permutation - not SLPable.  */\n+  for (i = 0; i < N*2; i++)\n+    {\n+      out[i*4] = (in[i*4] + 2) * 3;\n+      out[i*4 + 1] = (in[i*4 + 2] + 2) * 7;\n+      out[i*4 + 2] = (in[i*4 + 1] + 7) * 3;\n+      out[i*4 + 3] = (in[i*4 + 3] + 3) * 4;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N*2; i++)\n+    {\n+      if (out[i*4] !=  (in[i*4] + 2) * 3\n+         || out[i*4 + 1] != (in[i*4 + 2] + 2) * 7\n+         || out[i*4 + 2] != (in[i*4 + 1] + 7) * 3\n+         || out[i*4 + 3] != (in[i*4 + 3] + 3) * 4)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_strided && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! { vect_strided && vect_int_mult } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "bf1118ee8073d109e316a59475f686e22b298c11", "filename": "gcc/testsuite/gcc.dg/vect/slp-11c.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11c.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  float out[N*8];\n+\n+  /* Different operations - not SLPable.  */\n+  for (i = 0; i < N*4; i++)\n+    {\n+      out[i*2] = ((float) in[i*2] * 2 + 6) ;\n+      out[i*2 + 1] = (float) (in[i*2 + 1] * 3 + 7);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N*4; i++)\n+    {\n+      if (out[i*2] !=  ((float) in[i*2] * 2 + 6)\n+         || out[i*2 + 1] != (float) (in[i*2 + 1] * 3 + 7))\n+        abort ();\n+    }\n+\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { { vect_uintfloat_cvt && vect_strided } && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! { { vect_uintfloat_cvt && vect_strided } && vect_int_mult } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0  \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b591570ce39c2ca891c10a3f7712801dca3d18db", "filename": "gcc/testsuite/gcc.dg/vect/slp-12a.c", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -11,7 +11,7 @@ main1 ()\n   int i;\n   unsigned int out[N*8], a0, a1, a2, a3, a4, a5, a6, a7, b1, b0, b2, b3, b4, b5, b6, b7;\n   unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n-  unsigned int ia[N], ib[N*2];\n+  unsigned int ia[N];\n \n   for (i = 0; i < N; i++)\n     {\n@@ -61,27 +61,6 @@ main1 ()\n \tabort ();\n     }\n \n-  for (i = 0; i < N*2; i++)\n-    {\n-      out[i*4] = (in[i*4] + 2) * 3;\n-      out[i*4 + 1] = (in[i*4 + 1] + 2) * 7;\n-      out[i*4 + 2] = (in[i*4 + 2] + 7) * 3;\n-      out[i*4 + 3] = (in[i*4 + 3] + 7) * 7;\n-\n-      ib[i] = 7;\n-    }\n-\n-  /* check results:  */\n-  for (i = 0; i < N*2; i++)\n-    {\n-      if (out[i*4] !=  (in[i*4] + 2) * 3\n-         || out[i*4 + 1] != (in[i*4 + 1] + 2) * 7\n-         || out[i*4 + 2] != (in[i*4 + 2] + 7) * 3\n-         || out[i*4 + 3] != (in[i*4 + 3] + 7) * 7 \n-         || ib[i] != 7)\n-        abort ();\n-    }\n-\n   return 0;\n }\n \n@@ -94,11 +73,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target { vect_strided && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  {target { {! {vect_strided}} && vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" {target { vect_strided && vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" {target { {! {vect_strided}} && vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" {target  { ! vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_strided && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! { vect_strided && vect_int_mult } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_strided && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! { vect_strided && vect_int_mult } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-  "}, {"sha": "5152d21145bcaa67fccbf5fb6a010c9ef6621eaf", "filename": "gcc/testsuite/gcc.dg/vect/slp-12c.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12c.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned int out[N*8], a0, a1, a2, a3, a4, a5, a6, a7, b1, b0, b2, b3, b4, b5, b6, b7;\n+  unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  unsigned int ia[N*2];\n+\n+  for (i = 0; i < N*2; i++)\n+    {\n+      out[i*4] = (in[i*4] + 2) * 3;\n+      out[i*4 + 1] = (in[i*4 + 1] + 2) * 7;\n+      out[i*4 + 2] = (in[i*4 + 2] + 7) * 3;\n+      out[i*4 + 3] = (in[i*4 + 3] + 7) * 7;\n+\n+      ia[i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N*2; i++)\n+    {\n+      if (out[i*4] !=  (in[i*4] + 2) * 3\n+         || out[i*4 + 1] != (in[i*4 + 1] + 2) * 7\n+         || out[i*4 + 2] != (in[i*4 + 2] + 7) * 3\n+         || out[i*4 + 3] != (in[i*4 + 3] + 7) * 7\n+         || ia[i] != 7)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  { target { ! vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_int_mult } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! vect_int_mult } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0a0e76d70696b3543f24970bb0c65394df0356bb", "filename": "gcc/testsuite/gcc.dg/vect/slp-19a.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19a.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 ()\n+{\n+  unsigned int i;\n+  unsigned int out[N*8];\n+  unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  unsigned int ia[N*2];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      out[i*8] = in[i*8];\n+      out[i*8 + 1] = in[i*8 + 1];\n+      out[i*8 + 2] = in[i*8 + 2];\n+      out[i*8 + 3] = in[i*8 + 3];\n+      out[i*8 + 4] = in[i*8 + 4];\n+      out[i*8 + 5] = in[i*8 + 5];\n+      out[i*8 + 6] = in[i*8 + 6];\n+      out[i*8 + 7] = in[i*8 + 7];\n+\n+      ia[i] = in[i*8 + 2];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (out[i*8] !=  in[i*8]\n+         || out[i*8 + 1] != in[i*8 + 1]\n+         || out[i*8 + 2] != in[i*8 + 2]\n+         || out[i*8 + 3] != in[i*8 + 3]\n+         || out[i*8 + 4] != in[i*8 + 4]\n+         || out[i*8 + 5] != in[i*8 + 5]\n+         || out[i*8 + 6] != in[i*8 + 6]\n+         || out[i*8 + 7] != in[i*8 + 7]\n+         || ia[i] != in[i*8 + 2])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! vect_strided } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_strided } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! vect_strided } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a25152377f1f0e20aae5cc3d4c71102973c881e0", "filename": "gcc/testsuite/gcc.dg/vect/slp-19b.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19b.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 ()\n+{\n+  unsigned int i;\n+  unsigned int out[N*8];\n+  unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  unsigned int ia[N*2], a0, a1, a2, a3;\n+\n+  for (i = 0; i < N*2; i++)\n+    {\n+      a0 = in[i*4] + 1;\n+      a1 = in[i*4 + 1] + 2;\n+      a2 = in[i*4 + 2] + 3;\n+      a3 = in[i*4 + 3] + 4;\n+\n+      out[i*4] = a0;\n+      out[i*4 + 1] = a1;\n+      out[i*4 + 2] = a2;\n+      out[i*4 + 3] = a3;\n+\n+      ia[i] = a2;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N*2; i++)\n+    {\n+      if (out[i*4] !=  in[i*4] + 1\n+         || out[i*4 + 1] != in[i*4 + 1] + 2\n+         || out[i*4 + 2] != in[i*4 + 2] + 3\n+         || out[i*4 + 3] != in[i*4 + 3] + 4\n+         || ia[i] != in[i*4 + 2] + 3)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! vect_strided } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_strided } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! vect_strided } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f0df25f5346b17f71081a51ff905ddbba93e8234", "filename": "gcc/testsuite/gcc.dg/vect/slp-19c.c", "status": "renamed", "additions": 7, "deletions": 66, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82c640a50524990090f968ec6b5d63418e59f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19c.c?ref=f82c640a50524990090f968ec6b5d63418e59f3e", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 16\n \n int\n main1 ()\n@@ -13,62 +13,7 @@ main1 ()\n   unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n   unsigned int ia[N*2], a0, a1, a2, a3;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      out[i*8] = in[i*8];\n-      out[i*8 + 1] = in[i*8 + 1];\n-      out[i*8 + 2] = in[i*8 + 2];\n-      out[i*8 + 3] = in[i*8 + 3];\n-      out[i*8 + 4] = in[i*8 + 4];\n-      out[i*8 + 5] = in[i*8 + 5];\n-      out[i*8 + 6] = in[i*8 + 6];\n-      out[i*8 + 7] = in[i*8 + 7];\n-    \n-      ia[i] = in[i*8 + 2];\n-    }\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-      if (out[i*8] !=  in[i*8]\n-         || out[i*8 + 1] != in[i*8 + 1]\n-         || out[i*8 + 2] != in[i*8 + 2]\n-         || out[i*8 + 3] != in[i*8 + 3]\n-         || out[i*8 + 4] != in[i*8 + 4]\n-         || out[i*8 + 5] != in[i*8 + 5]\n-         || out[i*8 + 6] != in[i*8 + 6]\n-         || out[i*8 + 7] != in[i*8 + 7]\n-         || ia[i] != in[i*8 + 2])\n-\tabort ();\n-    }\n-\n-  for (i = 0; i < N*2; i++)\n-    {\n-      a0 = in[i*4] + 1;\n-      a1 = in[i*4 + 1] + 2;\n-      a2 = in[i*4 + 2] + 3;\n-      a3 = in[i*4 + 3] + 4;\n-\n-      out[i*4] = a0;\n-      out[i*4 + 1] = a1;\n-      out[i*4 + 2] = a2;\n-      out[i*4 + 3] = a3;\n-\n-      ia[i] = a2;\n-    }\n-\n-  /* check results:  */\n-  for (i = 0; i < N*2; i++)\n-    {\n-      if (out[i*4] !=  in[i*4] + 1\n-         || out[i*4 + 1] != in[i*4 + 1] + 2\n-         || out[i*4 + 2] != in[i*4 + 2] + 3\n-         || out[i*4 + 3] != in[i*4 + 3] + 4\n-         || ia[i] != in[i*4 + 2] + 3)\n-        abort ();\n-    }\n-\n-  /* The last stmt requires interleaving of not power of 2 size - not \n+  /* The last stmt requires interleaving of not power of 2 size - not\n      vectorizable.  */\n   for (i = 0; i < N/2; i++)\n     {\n@@ -116,10 +61,10 @@ main1 ()\n       out[i*6 + 3] = in[i*6 + 3];\n       out[i*6 + 4] = in[i*6 + 4];\n       out[i*6 + 5] = in[i*6 + 5];\n-    \n+\n       ia[i] = i;\n-    } \n-    \n+    }\n+\n   /* check results:  */\n   for (i = 0; i < N/2; i++)\n     {\n@@ -133,7 +78,6 @@ main1 ()\n         abort ();\n     }\n \n-\n   return 0;\n }\n \n@@ -146,9 +90,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target  vect_strided  } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target  { ! { vect_strided } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  { target  vect_strided  } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target { ! { vect_strided } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-  ", "previous_filename": "gcc/testsuite/gcc.dg/vect/slp-19.c"}]}