{"sha": "bf55c04f34813ae1195e20906b456253f90e749a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1NWMwNGYzNDgxM2FlMTE5NWUyMDkwNmI0NTYyNTNmOTBlNzQ5YQ==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-03-14T05:04:03Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-03-14T05:04:03Z"}, "message": "entered into RCS\n\nFrom-SVN: r469", "tree": {"sha": "0f59e4d249b2f0e3ff4b10937c31d800039597ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f59e4d249b2f0e3ff4b10937c31d800039597ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf55c04f34813ae1195e20906b456253f90e749a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf55c04f34813ae1195e20906b456253f90e749a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf55c04f34813ae1195e20906b456253f90e749a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf55c04f34813ae1195e20906b456253f90e749a/comments", "author": null, "committer": null, "parents": [{"sha": "c415fa055b3e70f48e25cea506b76c2e4c793bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c415fa055b3e70f48e25cea506b76c2e4c793bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c415fa055b3e70f48e25cea506b76c2e4c793bdc"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "140fbd985442620417621d406fa6abea06587986", "filename": "gcc/conditions.h", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf55c04f34813ae1195e20906b456253f90e749a/gcc%2Fconditions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf55c04f34813ae1195e20906b456253f90e749a/gcc%2Fconditions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconditions.h?ref=bf55c04f34813ae1195e20906b456253f90e749a", "patch": "@@ -0,0 +1,111 @@\n+/* Definitions for condition code handling in final.c and output routines.\n+   Copyright (C) 1987 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* None of the things in the files exist if we don't use CC0.  */\n+\n+#ifdef HAVE_cc0\n+\n+/* The variable cc_status says how to interpret the condition code.\n+   It is set by output routines for an instruction that sets the cc's\n+   and examined by output routines for jump instructions.\n+\n+   cc_status contains two components named `value1' and `value2'\n+   that record two equivalent expressions for the values that the\n+   condition codes were set from.  (Either or both may be null if\n+   there is no useful expression to record.)  These fields are\n+   used for eliminating redundant test and compare instructions\n+   in the cases where the condition codes were already set by the\n+   previous instruction.\n+\n+   cc_status.flags contains flags which say that the condition codes\n+   were set in a nonstandard manner.  The output of jump instructions\n+   uses these flags to compensate and produce the standard result\n+   with the nonstandard condition codes.  Standard flags are defined here.\n+   The tm.h file can also define other machine-dependent flags.\n+\n+   cc_status also contains a machine-dependent component `mdep'\n+   whose type, `CC_STATUS_MDEP', may be defined as a macro in the\n+   tm.h file.  */\n+\n+#ifndef CC_STATUS_MDEP\n+#define CC_STATUS_MDEP int\n+#endif\n+\n+#ifndef CC_STATUS_MDEP_INIT\n+#define CC_STATUS_MDEP_INIT 0\n+#endif\n+\n+typedef struct {int flags; rtx value1, value2; CC_STATUS_MDEP mdep;} CC_STATUS;\n+\n+/* While outputting an insn as assembler code,\n+   this is the status BEFORE that insn.  */\n+extern CC_STATUS cc_prev_status;\n+\n+/* While outputting an insn as assembler code,\n+   this is being altered to the status AFTER that insn.  */\n+extern CC_STATUS cc_status;\n+\n+/* These are the machine-independent flags:  */\n+\n+/* Set if the sign of the cc value is inverted:\n+   output a following jump-if-less as a jump-if-greater, etc.  */\n+#define CC_REVERSED 1\n+\n+/* This bit means that the current setting of the N bit is bogus\n+   and conditional jumps should use the Z bit in its place.\n+   This state obtains when an extraction of a signed single-bit field\n+   or an arithmetic shift right of a byte by 7 bits\n+   is turned into a btst, because btst does not set the N bit.  */\n+#define CC_NOT_POSITIVE 2\n+\n+/* This bit means that the current setting of the N bit is bogus\n+   and conditional jumps should pretend that the N bit is clear.\n+   Used after extraction of an unsigned bit\n+   or logical shift right of a byte by 7 bits is turned into a btst.\n+   The btst does not alter the N bit, but the result of that shift\n+   or extract is never negative.  */\n+#define CC_NOT_NEGATIVE 4\n+\n+/* This bit means that the current setting of the overflow flag\n+   is bogus and conditional jumps should pretend there is no overflow.  */\n+#define CC_NO_OVERFLOW 010\n+\n+/* This bit means that what ought to be in the Z bit\n+   should be tested as the complement of the N bit.  */\n+#define CC_Z_IN_NOT_N 020\n+\n+/* This bit means that what ought to be in the Z bit\n+   should be tested as the N bit.  */\n+#define CC_Z_IN_N 040\n+\n+/* Nonzero if we must invert the sense of the following branch, i.e.\n+   change EQ to NE.  This is not safe for IEEE floating point operations!\n+   It is intended for use only when a combination of arithmetic\n+   or logical insns can leave the condition codes set in a fortuitous\n+   (though inverted) state.  */\n+#define CC_INVERTED 0100\n+\n+/* This is how to initialize the variable cc_status.\n+   final does this at appropriate moments.  */\n+\n+#define CC_STATUS_INIT  \\\n+ (cc_status.flags = 0, cc_status.value1 = 0, cc_status.value2 = 0,  \\\n+  CC_STATUS_MDEP_INIT)\n+\n+#endif"}, {"sha": "a2054bb135e0fdc597b1e7f25d717503123acbac", "filename": "gcc/gsyms.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf55c04f34813ae1195e20906b456253f90e749a/gcc%2Fgsyms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf55c04f34813ae1195e20906b456253f90e749a/gcc%2Fgsyms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgsyms.h?ref=bf55c04f34813ae1195e20906b456253f90e749a", "patch": "@@ -0,0 +1,76 @@\n+/* For cross compilation, use the portable definitions from the COFF\n+   documentation.  */\n+\n+#define __GNU_SYMS__\n+\n+enum sdb_storage_class\n+{\n+  C_EFCN = -1,\n+  C_NULL = 0,\n+  C_AUTO = 1,\n+  C_EXT = 2,\n+  C_STAT = 3,\n+  C_REG = 4,\n+  C_EXTDEF = 5,\n+  C_LABEL = 6,\n+  C_ULABEL = 7,\n+  C_MOS = 8,\n+  C_ARG = 9,\n+  C_STRTAG = 10,\n+  C_MOU = 11,\n+  C_UNTAG = 12,\n+  C_TPDEF = 13,\n+  C_USTATIC = 14,\n+  C_ENTAG = 15,\n+  C_MOE = 16,\n+  C_REGPARM = 17,\n+  C_FIELD = 18,\n+\n+  C_BLOCK = 100,\n+  C_FCN = 101,\n+  C_EOS = 102,\n+  C_FILE = 103,\n+  C_LINE = 104,\n+  C_ALIAS = 105,\n+  C_HIDDEN = 106\n+};\n+\n+enum sdb_type\n+{\n+  T_NULL = 0,\n+  T_ARG = 1,\n+  T_VOID = 1,\n+  T_CHAR = 2,\n+  T_SHORT = 3,\n+  T_INT = 4,\n+  T_LONG = 5,\n+  T_FLOAT = 6,\n+  T_DOUBLE = 7,\n+  T_STRUCT = 8,\n+  T_UNION = 9,\n+  T_ENUM = 10,\n+  T_MOE = 11,\n+  T_UCHAR = 12,\n+  T_USHORT = 13,\n+  T_UINT = 14,\n+  T_ULONG = 15\n+};\n+\n+enum sdb_type_class\n+{\n+  DT_NON = 0,\n+  DT_PTR = 1,\n+  DT_FCN = 2,\n+  DT_ARY = 3\n+};\n+\n+enum sdb_masks\n+{\n+  N_BTMASK = 017,\n+  N_TMASK = 060,\n+  N_TMASK1 = 0300,\n+  N_TMASK2 = 0360,\n+  N_BTSHFT = 4,\n+  N_TSHIFT = 2\n+};\n+"}]}