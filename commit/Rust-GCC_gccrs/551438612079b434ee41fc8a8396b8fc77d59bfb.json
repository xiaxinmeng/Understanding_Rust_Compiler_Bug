{"sha": "551438612079b434ee41fc8a8396b8fc77d59bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxNDM4NjEyMDc5YjQzNGVlNDFmYzhhODM5NmI4ZmM3N2Q1OWJmYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-10-16T07:46:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-10-16T07:46:09Z"}, "message": "rtlanal.c (may_trap_p): Check operand modes of COMPARE.\n\n\t* rtlanal.c (may_trap_p): Check operand modes of COMPARE.\n\t* gcc.dg/20001013-1.c: New test.\n\nFrom-SVN: r36878", "tree": {"sha": "7b17ce7b18383d7738d9fcf0a3ab811f32a0db55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b17ce7b18383d7738d9fcf0a3ab811f32a0db55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/551438612079b434ee41fc8a8396b8fc77d59bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551438612079b434ee41fc8a8396b8fc77d59bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/551438612079b434ee41fc8a8396b8fc77d59bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551438612079b434ee41fc8a8396b8fc77d59bfb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "392e6b81c315fc986ee48e498528cdc8da2a3263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392e6b81c315fc986ee48e498528cdc8da2a3263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392e6b81c315fc986ee48e498528cdc8da2a3263"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "566515cf12f18dfa1f0cf3fb9f5a583ab8ae2ac0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=551438612079b434ee41fc8a8396b8fc77d59bfb", "patch": "@@ -1,3 +1,7 @@\n+2000-10-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* rtlanal.c (may_trap_p): Check operand modes of COMPARE.\n+\n 2000-10-14  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* PROBLEMS: Remove."}, {"sha": "52a430b12ff8a1ced2e35c02201ca34120206e17", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=551438612079b434ee41fc8a8396b8fc77d59bfb", "patch": "@@ -1930,6 +1930,17 @@ may_trap_p (x)\n \t certainly may trap.  */\n       return 1;\n \n+    case COMPARE:\n+      /* Any floating comparison may trap.  */\n+      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n+\treturn 1;\n+      /* But often the compare has some CC mode, so check operand\n+\t modes as well.  */\n+      if (GET_MODE_CLASS (GET_MODE (XEXP (x, 0))) == MODE_FLOAT\n+\t  || GET_MODE_CLASS (GET_MODE (XEXP (x, 1))) == MODE_FLOAT)\n+\treturn 1;\n+      break;\n+\n     default:\n       /* Any floating arithmetic may trap.  */\n       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)"}, {"sha": "f9b2a9243031a05afd32a44d781e6d4a7ff25030", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=551438612079b434ee41fc8a8396b8fc77d59bfb", "patch": "@@ -1,3 +1,7 @@\n+2000-10-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20001013-1.c: New test.\n+\n 2000-10-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c90-printf-2.c, gcc.dg/c90-scanf-2.c: Determine the type"}, {"sha": "f154cfda0a4f9cc47555b6879006fb6d5a1dab9c", "filename": "gcc/testsuite/gcc.dg/20001013-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2Ftestsuite%2Fgcc.dg%2F20001013-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551438612079b434ee41fc8a8396b8fc77d59bfb/gcc%2Ftestsuite%2Fgcc.dg%2F20001013-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001013-1.c?ref=551438612079b434ee41fc8a8396b8fc77d59bfb", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target sparc*-*-* } } */\n+/* { dg-options \"-O2 -mvis\" } */\n+\n+int l;\n+\n+int baz (double x)\n+{\n+  return l == 0;\n+}\n+\n+double bar (double x)\n+{\n+  return 1.0;\n+}\n+\n+double foo (double x)\n+{\n+  if (l == -1 || baz (x)) return x;\n+  if (x < 0.0)\n+    return bar (x);\n+  else\n+    return 0.0;\n+}\n+\n+union {\n+  double d;\n+  long long l;\n+} x = { l: 0x7ff8000000000000LL }, y;\n+\n+main ()\n+{\n+  unsigned int fsr = 0;\n+  __asm __volatile (\"ld %0, %%fsr\" : : \"m\" (fsr));\n+  y.d = foo (x.d);\n+  __asm __volatile (\"st %%fsr, %0\" : \"=m\" (fsr));\n+  if (x.l != y.l || (fsr & 0x3ff))\n+    abort ();\n+  exit (0);\n+}"}]}