{"sha": "5867bb9a60ed0ff73627180a4f2193b0087711bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2N2JiOWE2MGVkMGZmNzM2MjcxODBhNGYyMTkzYjAwODc3MTFiZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-03-06T23:50:01Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-03-06T23:50:01Z"}, "message": "re PR fortran/84697 (minloc/maxloc not simplified with zero size)\n\n2017-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/84697\n\tPR fortran/66128\n\t* expr.c (simplify_parameter_variable): If p is a size zero array\n\tand not an ARRAY_EXPR insert an empty array constructor and\n\treturn.\n\t* gfortran.h: Add prototype for gfc_is_size_zero_array.\n\t* simplify.c (is_size_zero_array): Make non-static and rename into\n\t(gfc_is_size_zero_array):  Check for parameter arrays of zero\n\tsize by comparing shape and absence of constructor.\n\t(gfc_simplify_all): Use gfc_is_size_zero_array instead of\n\tis_size_zero_array.\n\t(gfc_simplify_count): Likewise.\n\t(gfc_simplify_iall): Likewise.\n\t(gfc_simplify_iany): Likewise.\n\t(gfc_simplify_iparity): Likewise.\n\t(gfc_simplify_minval): Likewise.\n\t(gfc_simplify_maxval): Likewise.\n\t(gfc_simplify_product): Likewise.\n\t(gfc_simplify_sum): Likewise.\n\n2017-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/84697\n\tPR fortran/66128\n\t* gfortran.dg/minmaxloc_zerosize_1.f90: New test.\n\nFrom-SVN: r258305", "tree": {"sha": "cb4db9278ec8f7d85bef6aff9e215f7833d4b62b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb4db9278ec8f7d85bef6aff9e215f7833d4b62b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5867bb9a60ed0ff73627180a4f2193b0087711bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5867bb9a60ed0ff73627180a4f2193b0087711bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5867bb9a60ed0ff73627180a4f2193b0087711bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5867bb9a60ed0ff73627180a4f2193b0087711bf/comments", "author": null, "committer": null, "parents": [{"sha": "447346e465c50ad6d840c2c29c9a07417e8d219c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447346e465c50ad6d840c2c29c9a07417e8d219c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447346e465c50ad6d840c2c29c9a07417e8d219c"}], "stats": {"total": 127, "additions": 101, "deletions": 26}, "files": [{"sha": "f87cce8c0841d817535b8b773df2604b2e28a159", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5867bb9a60ed0ff73627180a4f2193b0087711bf", "patch": "@@ -1,3 +1,25 @@\n+2017-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/84697\n+\tPR fortran/66128\n+\t* expr.c (simplify_parameter_variable): If p is a size zero array\n+\tand not an ARRAY_EXPR insert an empty array constructor and\n+\treturn.\n+\t* gfortran.h: Add prototype for gfc_is_size_zero_array.\n+\t* simplify.c (is_size_zero_array): Make non-static and rename into\n+\t(gfc_is_size_zero_array):  Check for parameter arrays of zero\n+\tsize by comparing shape and absence of constructor.\n+\t(gfc_simplify_all): Use gfc_is_size_zero_array instead of\n+\tis_size_zero_array.\n+\t(gfc_simplify_count): Likewise.\n+\t(gfc_simplify_iall): Likewise.\n+\t(gfc_simplify_iany): Likewise.\n+\t(gfc_simplify_iparity): Likewise.\n+\t(gfc_simplify_minval): Likewise.\n+\t(gfc_simplify_maxval): Likewise.\n+\t(gfc_simplify_product): Likewise.\n+\t(gfc_simplify_sum): Likewise.\n+\n 2018-03-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/56667"}, {"sha": "bbaabb684c9b433e6dad9b07746f7bbaef136881", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=5867bb9a60ed0ff73627180a4f2193b0087711bf", "patch": "@@ -1857,6 +1857,22 @@ simplify_parameter_variable (gfc_expr *p, int type)\n   gfc_expr *e;\n   bool t;\n \n+  if (gfc_is_size_zero_array (p))\n+    {\n+      if (p->expr_type == EXPR_ARRAY)\n+\treturn true;\n+\n+      e = gfc_get_expr ();\n+      e->expr_type = EXPR_ARRAY;\n+      e->ts = p->ts;\n+      e->rank = p->rank;\n+      e->value.constructor = NULL;\n+      e->shape = gfc_copy_shape (p->shape, p->rank);\n+      e->where = p->where;\n+      gfc_replace_expr (p, e);\n+      return true;\n+    }\n+\n   e = gfc_copy_expr (p->symtree->n.sym->value);\n   if (e == NULL)\n     return false;"}, {"sha": "2bfd1e3019da5576cf212cb53093b725b1c4d5af", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5867bb9a60ed0ff73627180a4f2193b0087711bf", "patch": "@@ -3464,6 +3464,7 @@ int gfc_code_walker (gfc_code **, walk_code_fn_t, walk_expr_fn_t, void *);\n \n void gfc_convert_mpz_to_signed (mpz_t, int);\n gfc_expr *gfc_simplify_ieee_functions (gfc_expr *);\n+bool gfc_is_size_zero_array (gfc_expr *);\n \n /* trans-array.c  */\n "}, {"sha": "dd469335776932fba3dbb73006ea11f405b45be5", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=5867bb9a60ed0ff73627180a4f2193b0087711bf", "patch": "@@ -259,26 +259,28 @@ is_constant_array_expr (gfc_expr *e)\n }\n \n /* Test for a size zero array.  */\n-static bool\n-is_size_zero_array (gfc_expr *array)\n+bool\n+gfc_is_size_zero_array (gfc_expr *array)\n {\n-  gfc_expr *e;\n-  bool t;\n \n-  e = gfc_copy_expr (array);\n-  gfc_simplify_expr (e, 1);\n+  if (array->rank == 0)\n+    return false;\n \n-  if (e->expr_type == EXPR_CONSTANT && e->rank > 0 && !e->shape)\n-     t = true;\n-  else if (e->expr_type == EXPR_ARRAY && e->rank > 0 \n-\t   && !e->shape && !e->value.constructor)\n-     t = true;\n-  else\n-     t = false;\n+  if (array->expr_type == EXPR_VARIABLE && array->rank > 0\n+      && array->symtree->n.sym->attr.flavor == FL_PARAMETER\n+      && array->shape != NULL)\n+    {\n+      for (int i = 0; i < array->rank; i++)\n+\tif (mpz_cmp_si (array->shape[i], 0) <= 0)\n+\t  return true;\n \n-  gfc_free_expr (e);\n+      return false;\n+    }\n+\n+  if (array->expr_type == EXPR_ARRAY)\n+    return array->value.constructor == NULL;\n \n-  return t;\n+  return false;\n }\n \n \n@@ -974,7 +976,7 @@ gfc_simplify_aint (gfc_expr *e, gfc_expr *k)\n gfc_expr *\n gfc_simplify_all (gfc_expr *mask, gfc_expr *dim)\n {\n-  if (is_size_zero_array (mask))\n+  if (gfc_is_size_zero_array (mask))\n     return gfc_get_logical_expr (mask->ts.kind, &mask->where, true);\n \n   return simplify_transformation (mask, dim, NULL, true, gfc_and);\n@@ -1066,7 +1068,7 @@ gfc_simplify_and (gfc_expr *x, gfc_expr *y)\n gfc_expr *\n gfc_simplify_any (gfc_expr *mask, gfc_expr *dim)\n {\n-  if (is_size_zero_array (mask))\n+  if (gfc_is_size_zero_array (mask))\n     return gfc_get_logical_expr (mask->ts.kind, &mask->where, false);\n \n   return simplify_transformation (mask, dim, NULL, false, gfc_or);\n@@ -1965,7 +1967,7 @@ gfc_simplify_count (gfc_expr *mask, gfc_expr *dim, gfc_expr *kind)\n {\n   gfc_expr *result;\n \n-  if (is_size_zero_array (mask))\n+  if (gfc_is_size_zero_array (mask))\n     {\n       int k;\n       k = kind ? mpz_get_si (kind->value.integer) : gfc_default_integer_kind;\n@@ -3263,7 +3265,7 @@ do_bit_and (gfc_expr *result, gfc_expr *e)\n gfc_expr *\n gfc_simplify_iall (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     return gfc_get_int_expr (array->ts.kind, NULL, -1);\n \n   return simplify_transformation (array, dim, mask, -1, do_bit_and);\n@@ -3285,7 +3287,7 @@ do_bit_ior (gfc_expr *result, gfc_expr *e)\n gfc_expr *\n gfc_simplify_iany (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     return gfc_get_int_expr (array->ts.kind, NULL, 0);\n \n   return simplify_transformation (array, dim, mask, 0, do_bit_ior);\n@@ -3728,7 +3730,7 @@ do_bit_xor (gfc_expr *result, gfc_expr *e)\n gfc_expr *\n gfc_simplify_iparity (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     return gfc_get_int_expr (array->ts.kind, NULL, 0);\n \n   return simplify_transformation (array, dim, mask, 0, do_bit_xor);\n@@ -5038,7 +5040,7 @@ gfc_min (gfc_expr *op1, gfc_expr *op2)\n gfc_expr *\n gfc_simplify_minval (gfc_expr *array, gfc_expr* dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     {\n       gfc_expr *result;\n       int i;\n@@ -5094,7 +5096,7 @@ gfc_max (gfc_expr *op1, gfc_expr *op2)\n gfc_expr *\n gfc_simplify_maxval (gfc_expr *array, gfc_expr* dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     {\n       gfc_expr *result;\n       int i;\n@@ -5776,7 +5778,7 @@ gfc_simplify_norm2 (gfc_expr *e, gfc_expr *dim)\n {\n   gfc_expr *result;\n \n-  if (is_size_zero_array (e))\n+  if (gfc_is_size_zero_array (e))\n     {\n       gfc_expr *result;\n       result = gfc_get_constant_expr (e->ts.type, e->ts.kind, &e->where);\n@@ -6040,7 +6042,7 @@ gfc_simplify_precision (gfc_expr *e)\n gfc_expr *\n gfc_simplify_product (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     {\n       gfc_expr *result;\n \n@@ -7384,7 +7386,7 @@ gfc_simplify_sqrt (gfc_expr *e)\n gfc_expr *\n gfc_simplify_sum (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n {\n-  if (is_size_zero_array (array))\n+  if (gfc_is_size_zero_array (array))\n     {\n       gfc_expr *result;\n "}, {"sha": "0a41eaa7585eef00007bcf694b83053ff01e11b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5867bb9a60ed0ff73627180a4f2193b0087711bf", "patch": "@@ -1,3 +1,9 @@\n+2017-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/84697\n+\tPR fortran/66128\n+\t* gfortran.dg/minmaxloc_zerosize_1.f90: New test.\n+\n 2018-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84684"}, {"sha": "94e5d00b0641e64156cfc9397f50eb91bddca9be", "filename": "gcc/testsuite/gfortran.dg/minmaxloc_zerosize_1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_zerosize_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5867bb9a60ed0ff73627180a4f2193b0087711bf/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_zerosize_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_zerosize_1.f90?ref=5867bb9a60ed0ff73627180a4f2193b0087711bf", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do  run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+program main\n+  implicit none\n+  integer, parameter :: z(0) = 0\n+  integer, parameter, dimension(1) :: a = minloc(z)\n+  integer, parameter, dimension(1) :: b = minloc(z,mask=z>0)\n+  integer, parameter :: c = minloc(z,dim=1)\n+\n+  integer, parameter, dimension(1) :: d = maxloc(z)\n+  integer, parameter, dimension(1) :: e = maxloc(z,mask=z>0)\n+  integer, parameter :: f = maxloc(z,dim=1)\n+\n+  character(len=12) line\n+\n+  if (a(1) /= 0) stop 1\n+  if (b(1) /= 0) stop 2\n+  if (c /= 0) stop 3\n+\n+  if (d(1) /= 0) stop 4\n+  if (e(1) /= 0) stop 5\n+  if (f /= 0) stop 6\n+\n+  write (unit=line,fmt='(6I2)') minloc(z), minloc(z,mask=z>0), minloc(z,dim=1), &\n+       maxloc(z), maxloc(z,mask=z<0), maxloc(z,dim=1)\n+  if (line /= ' 0 0 0 0 0 0') stop 7\n+end program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_stop\" 1 \"original\" } }"}]}