{"sha": "ae54392bb967c32fc1a907403006a16cef7ed990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1NDM5MmJiOTY3YzMyZmMxYTkwNzQwMzAwNmExNmNlZjdlZDk5MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-09-08T22:17:24Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-09-08T22:17:24Z"}, "message": "c-pragma.c: Don't elide entire file if !HANDLE_GENERIC_PRAGMAS.\n\n\t* c-pragma.c: Don't elide entire file if !HANDLE_GENERIC_PRAGMAS.\n\t(init_pragma): Avoid warning if pfile happens to be unused.\n\t* c-pragma.h: Never define HANDLE_GENERIC_PRAGMAS.  Never\n\tdefine init_pragma to nothing.  Always prototype\n\tinit_pragma.  Prototype dispatch_pragma if !USE_CPPLIB.\n\n\t* c-lex.c (process_directive): Always call dispatch_pragma.\n\tInitialize entering_c_header to 0.\n\nFrom-SVN: r36277", "tree": {"sha": "575e61522dd8af397ddff4ea88c2f3af9da2fe7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/575e61522dd8af397ddff4ea88c2f3af9da2fe7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae54392bb967c32fc1a907403006a16cef7ed990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae54392bb967c32fc1a907403006a16cef7ed990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae54392bb967c32fc1a907403006a16cef7ed990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae54392bb967c32fc1a907403006a16cef7ed990/comments", "author": null, "committer": null, "parents": [{"sha": "385c92176c8fe88def705968cfb05d3a6ae8df4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385c92176c8fe88def705968cfb05d3a6ae8df4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385c92176c8fe88def705968cfb05d3a6ae8df4b"}], "stats": {"total": 43, "additions": 17, "deletions": 26}, "files": [{"sha": "d2f6b61241b1c1b60dfb026df7038532f31a6244", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae54392bb967c32fc1a907403006a16cef7ed990", "patch": "@@ -1,3 +1,14 @@\n+2000-09-08  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* c-pragma.c: Don't elide entire file if !HANDLE_GENERIC_PRAGMAS.\n+\t(init_pragma): Avoid warning if pfile happens to be unused.\n+\t* c-pragma.h: Never define HANDLE_GENERIC_PRAGMAS.  Never\n+\tdefine init_pragma to nothing.  Always prototype\n+\tinit_pragma.  Prototype dispatch_pragma if !USE_CPPLIB.\n+\n+\t* c-lex.c (process_directive): Always call dispatch_pragma.\n+\tInitialize entering_c_header to 0.\n+\n 2000-09-08  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md: New file, machine description for"}, {"sha": "fa5c7a79cef61677ff8b5e47a353b6719b6a8725", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=ae54392bb967c32fc1a907403006a16cef7ed990", "patch": "@@ -438,7 +438,7 @@ process_directive ()\n   int action_number, l;\n   char *new_file;\n #ifndef NO_IMPLICIT_EXTERN_C\n-  int entering_c_header;\n+  int entering_c_header = 0;\n #endif\n   \n   /* Don't read beyond this line.  */\n@@ -457,9 +457,7 @@ process_directive ()\n \n       if (!strcmp (name, \"pragma\"))\n \t{\n-#ifdef HANDLE_GENERIC_PRAGMAS\n \t  dispatch_pragma ();\n-#endif\n \t  goto skipline;\n \t}\n       else if (!strcmp (name, \"define\"))"}, {"sha": "5b8f4491cde77064a80577c21055610ed2d4cf5a", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=ae54392bb967c32fc1a907403006a16cef7ed990", "patch": "@@ -32,8 +32,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"tm_p.h\"\n \n-#ifdef HANDLE_GENERIC_PRAGMAS\n-\n #if USE_CPPLIB\n extern cpp_reader parse_in;\n #else\n@@ -438,10 +436,11 @@ dispatch_pragma ()\n void\n init_pragma ()\n {\n+  cpp_reader *pfile ATTRIBUTE_UNUSED;\n #if !USE_CPPLIB\n-  cpp_reader *pfile = 0;\n+  pfile = 0;\n #else\n-  cpp_reader *pfile = &parse_in;\n+  pfile = &parse_in;\n #endif\n \n #ifdef HANDLE_PRAGMA_PACK\n@@ -450,7 +449,6 @@ init_pragma ()\n #ifdef HANDLE_PRAGMA_WEAK\n   cpp_register_pragma (pfile, 0, \"weak\", handle_pragma_weak);\n #endif\n-\n #ifdef REGISTER_TARGET_PRAGMAS\n   REGISTER_TARGET_PRAGMAS (pfile);\n #endif\n@@ -460,5 +458,3 @@ init_pragma ()\n \t\tmark_align_stack);\n #endif\n }\n-\n-#endif /* HANDLE_GENERIC_PRAGMAS */"}, {"sha": "314273bde2e9a568b3305d5532dcaf4a31fb9921", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae54392bb967c32fc1a907403006a16cef7ed990/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=ae54392bb967c32fc1a907403006a16cef7ed990", "patch": "@@ -57,25 +57,11 @@ extern struct weak_syms * weak_decls;\n extern int add_weak PARAMS ((const char *, const char *));\n #endif /* HANDLE_PRAGMA_WEAK */\n \n-\n-/* Define HANDLE_GENERIC_PRAGMAS if any kind of front-end pragma\n-   parsing is to be done.  The code in GCC's generic C source files\n-   will only look for the definition of this constant.  They will\n-   ignore definitions of HANDLE_PRAGMA_PACK and so on.  */\n-#if defined HANDLE_PRAGMA_PACK || defined HANDLE_PRAGMA_WEAK \\\n-    || defined REGISTER_TARGET_PRAGMAS\n-#define HANDLE_GENERIC_PRAGMAS\n-#endif\n-\n-#ifdef HANDLE_GENERIC_PRAGMAS\n extern void init_pragma PARAMS ((void));\n \n-# if !USE_CPPLIB\n+/* If cpplib is in use, it handles dispatch.  */\n+#if !USE_CPPLIB\n extern void dispatch_pragma PARAMS ((void));\n-# endif\n-\n-#else\n-# define init_pragma()\n #endif\n \n /* Duplicate prototypes for the register_pragma stuff and the typedef for"}]}