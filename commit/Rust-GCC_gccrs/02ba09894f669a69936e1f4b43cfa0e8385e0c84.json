{"sha": "02ba09894f669a69936e1f4b43cfa0e8385e0c84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiYTA5ODk0ZjY2OWE2OTkzNmUxZjRiNDNjZmEwZTgzODVlMGM4NA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-12-12T23:01:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:45Z"}, "message": "[Ada] Fix handling of visibility when categorization from pragmas\n\ngcc/ada/\n\n\t* sem_cat.adb (Set_Categorization_From_Pragmas): Remove special\n\tcase for generic child units; remove optimization for empty list\n\tof pragmas; properly restore visibility.", "tree": {"sha": "b1def20751b5eddda2346bb97026dceec2f34bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1def20751b5eddda2346bb97026dceec2f34bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ba09894f669a69936e1f4b43cfa0e8385e0c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ba09894f669a69936e1f4b43cfa0e8385e0c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ba09894f669a69936e1f4b43cfa0e8385e0c84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ba09894f669a69936e1f4b43cfa0e8385e0c84/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bba393a0ac1fca0beceadce0c464502d88e2e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bba393a0ac1fca0beceadce0c464502d88e2e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bba393a0ac1fca0beceadce0c464502d88e2e57"}], "stats": {"total": 99, "additions": 53, "deletions": 46}, "files": [{"sha": "242f1d2c3014c86e755a101aa7f1775a4cc7ec93", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ba09894f669a69936e1f4b43cfa0e8385e0c84/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ba09894f669a69936e1f4b43cfa0e8385e0c84/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=02ba09894f669a69936e1f4b43cfa0e8385e0c84", "patch": "@@ -691,56 +691,25 @@ package body Sem_Cat is\n    -------------------------------------\n \n    procedure Set_Categorization_From_Pragmas (N : Node_Id) is\n-      P   : constant Node_Id := Parent (N);\n-      S   : constant Entity_Id := Current_Scope;\n+      P : constant Node_Id := Parent (N);\n \n-      procedure Set_Parents (Visibility : Boolean);\n-         --  If this is a child instance, the parents are not immediately\n-         --  visible during analysis. Make them momentarily visible so that\n-         --  the argument of the pragma can be resolved properly, and reset\n-         --  afterwards.\n+      procedure Make_Parents_Visible_And_Process_Pragmas (Par : Entity_Id);\n+      --  Parents might not be immediately visible during analysis. Make\n+      --  them momentarily visible so that the argument of the pragma can\n+      --  be resolved properly, process pragmas and restore the previous\n+      --  visibility.\n \n-      -----------------\n-      -- Set_Parents --\n-      -----------------\n+      procedure Process_Categorization_Pragmas;\n+      --  Process categorization pragmas, if any\n \n-      procedure Set_Parents (Visibility : Boolean) is\n-         Par : Entity_Id;\n-      begin\n-         Par := Scope (S);\n-         while Present (Par) and then Par /= Standard_Standard loop\n-            Set_Is_Immediately_Visible (Par, Visibility);\n-            Par := Scope (Par);\n-         end loop;\n-      end Set_Parents;\n-\n-   --  Start of processing for Set_Categorization_From_Pragmas\n-\n-   begin\n-      --  Deal with categorization pragmas in Pragmas of Compilation_Unit.\n-      --  The purpose is to set categorization flags before analyzing the\n-      --  unit itself, so as to diagnose violations of categorization as\n-      --  we process each declaration, even though the pragma appears after\n-      --  the unit. This processing is only needed if compilation unit pragmas\n-      --  are present.\n-      --  Note: This code may be incorrect in the unlikely case a child generic\n-      --  unit is instantiated as a child of its (nongeneric) parent, so that\n-      --  generic and instance are siblings.\n-\n-      if Nkind (P) /= N_Compilation_Unit\n-         or else No (First (Pragmas_After (Aux_Decls_Node (P))))\n-      then\n-         return;\n-      end if;\n+      ------------------------------------\n+      -- Process_Categorization_Pragmas --\n+      ------------------------------------\n \n-      declare\n+      procedure Process_Categorization_Pragmas is\n          PN : Node_Id;\n \n       begin\n-         if Is_Child_Unit (S) and then Is_Generic_Instance (S) then\n-            Set_Parents (True);\n-         end if;\n-\n          PN := First (Pragmas_After (Aux_Decls_Node (P)));\n          while Present (PN) loop\n \n@@ -765,11 +734,49 @@ package body Sem_Cat is\n \n             Next (PN);\n          end loop;\n+      end Process_Categorization_Pragmas;\n+\n+      ----------------------------------------------\n+      -- Make_Parents_Visible_And_Process_Pragmas --\n+      ----------------------------------------------\n+\n+      procedure Make_Parents_Visible_And_Process_Pragmas (Par : Entity_Id) is\n+      begin\n+         --  When we reached the Standard scope, then just process pragmas\n+\n+         if Par = Standard_Standard then\n+            Process_Categorization_Pragmas;\n \n-         if Is_Child_Unit (S) and then Is_Generic_Instance (S) then\n-            Set_Parents (False);\n+         --  Otherwise make the current scope momentarily visible, recurse\n+         --  into its enclosing scope, and restore the visibility. This is\n+         --  required for child units that are instances of generic parents.\n+\n+         else\n+            declare\n+               Save_Is_Immediately_Visible : constant Boolean :=\n+                 Is_Immediately_Visible (Par);\n+            begin\n+               Set_Is_Immediately_Visible (Par);\n+               Make_Parents_Visible_And_Process_Pragmas (Scope (Par));\n+               Set_Is_Immediately_Visible (Par, Save_Is_Immediately_Visible);\n+            end;\n          end if;\n-      end;\n+      end Make_Parents_Visible_And_Process_Pragmas;\n+\n+   --  Start of processing for Set_Categorization_From_Pragmas\n+\n+   begin\n+      --  Deal with categorization pragmas in Pragmas of Compilation_Unit.\n+      --  The purpose is to set categorization flags before analyzing the\n+      --  unit itself, so as to diagnose violations of categorization as\n+      --  we process each declaration, even though the pragma appears after\n+      --  the unit.\n+\n+      if Nkind (P) /= N_Compilation_Unit then\n+         return;\n+      end if;\n+\n+      Make_Parents_Visible_And_Process_Pragmas (Scope (Current_Scope));\n    end Set_Categorization_From_Pragmas;\n \n    -----------------------------------"}]}