{"sha": "ab16257805b6614e1ad674b29965a9faca5511bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIxNjI1NzgwNWI2NjE0ZTFhZDY3NGIyOTk2NWE5ZmFjYTU1MTFiZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-03-16T22:50:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-03-16T22:50:56Z"}, "message": "loop.c (strength_reduce): Adjust BENEFIT appropriately if an autoincrement memory reference will...\n\n        * loop.c (strength_reduce): Adjust BENEFIT appropriately if an\n        autoincrement memory reference will eliminate add insns.\n\nFrom-SVN: r13717", "tree": {"sha": "35f10784c5bc49520b0e58b68ed1f84ee4481035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35f10784c5bc49520b0e58b68ed1f84ee4481035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab16257805b6614e1ad674b29965a9faca5511bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab16257805b6614e1ad674b29965a9faca5511bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab16257805b6614e1ad674b29965a9faca5511bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab16257805b6614e1ad674b29965a9faca5511bd/comments", "author": null, "committer": null, "parents": [{"sha": "c8163b58edb375a97197b7a2c36c1c3645528d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8163b58edb375a97197b7a2c36c1c3645528d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8163b58edb375a97197b7a2c36c1c3645528d7d"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "3e7bb58e3e37827a8a6e706599e05b2af290305e", "filename": "gcc/loop.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab16257805b6614e1ad674b29965a9faca5511bd/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab16257805b6614e1ad674b29965a9faca5511bd/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ab16257805b6614e1ad674b29965a9faca5511bd", "patch": "@@ -3850,9 +3850,23 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t     unchanged (recompute it from the biv each time it is used).\n \t     This decision can be made independently for each giv.  */\n \n-\t  /* ??? Perhaps attempt to guess whether autoincrement will handle\n-\t     some of the new add insns; if so, can increase BENEFIT\n-\t     (undo the subtraction of add_cost that was done above).  */\n+#ifdef AUTO_INC_DEC\n+\t  /* Attempt to guess whether autoincrement will handle some of the\n+\t     new add insns; if so, increase BENEFIT (undo the subtraction of\n+\t     add_cost that was done above).  */\n+\t  if (v->giv_type == DEST_ADDR\n+\t      && GET_CODE (v->mult_val) == CONST_INT)\n+\t    {\n+#if defined (HAVE_POST_INCREMENT) || defined (HAVE_PRE_INCREMENT)\n+\t      if (INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n+\t\tbenefit += add_cost * bl->biv_count;\n+#endif\n+#if defined (HAVE_POST_DECREMENT) || defined (HAVE_PRE_DECREMENT)\n+\t      if (-INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n+\t\tbenefit += add_cost * bl->biv_count;\n+#endif\n+\t    }\n+#endif\n \n \t  /* If an insn is not to be strength reduced, then set its ignore\n \t     flag, and clear all_reduced.  */"}]}