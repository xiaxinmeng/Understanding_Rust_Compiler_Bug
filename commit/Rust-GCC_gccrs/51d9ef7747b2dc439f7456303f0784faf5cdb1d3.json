{"sha": "51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "node_id": "C_kwDOANBUbNoAKDUxZDllZjc3NDdiMmRjNDM5Zjc0NTYzMDNmMDc4NGZhZjVjZGIxZDM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-04T07:38:43Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-04T07:38:43Z"}, "message": "Fortran: Avoid var initialization in interfaces [PR54753]\n\nIntent(out) implies deallocation/default initialization; however, it is\npointless to do this for dummy-arguments symbols of procedures which are\ninside an INTERFACE block. \u2013 This also fixes a bogus error for the attached\nincluded testcase, but fixing the non-interface version still has to be done.\n\n\tPR fortran/54753\n\ngcc/fortran/ChangeLog:\n\n\t* resolve.c (can_generate_init, resolve_fl_variable_derived,\n\tresolve_symbol): Only do initialization with intent(out) if not\n\tinside of an interface block.", "tree": {"sha": "df80e8999c643a24cb6c1c5d424cba80a215ff25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df80e8999c643a24cb6c1c5d424cba80a215ff25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d9ef7747b2dc439f7456303f0784faf5cdb1d3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f950d946370bb7b8751f7b89ff856beddbe91aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f950d946370bb7b8751f7b89ff856beddbe91aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f950d946370bb7b8751f7b89ff856beddbe91aea"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "511fe3a5e556ef5c1730dcce7c22f32c30df325f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d9ef7747b2dc439f7456303f0784faf5cdb1d3/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d9ef7747b2dc439f7456303f0784faf5cdb1d3/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "patch": "@@ -12676,7 +12676,8 @@ can_generate_init (gfc_symbol *sym)\n     || a->cray_pointer\n     || sym->assoc\n     || (!a->referenced && !a->result)\n-    || (a->dummy && a->intent != INTENT_OUT)\n+    || (a->dummy && (a->intent != INTENT_OUT\n+\t\t     || sym->ns->proc_name->attr.if_source == IFSRC_IFBODY))\n     || (a->function && sym != sym->result)\n   );\n }\n@@ -12913,7 +12914,9 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n \n   /* Assign default initializer.  */\n   if (!(sym->value || sym->attr.pointer || sym->attr.allocatable)\n-      && (!no_init_flag || sym->attr.intent == INTENT_OUT))\n+      && (!no_init_flag\n+\t  || (sym->attr.intent == INTENT_OUT\n+\t      && sym->ns->proc_name->attr.if_source != IFSRC_IFBODY)))\n     sym->value = gfc_generate_initializer (&sym->ts, can_generate_init (sym));\n \n   return true;\n@@ -16154,7 +16157,8 @@ resolve_symbol (gfc_symbol *sym)\n \t\t    || sym->ts.u.derived->attr.alloc_comp\n \t\t    || sym->ts.u.derived->attr.pointer_comp))\n \t   && !(a->function && sym != sym->result))\n-\t  || (a->dummy && a->intent == INTENT_OUT && !a->pointer))\n+\t  || (a->dummy && !a->pointer && a->intent == INTENT_OUT\n+\t      && sym->ns->proc_name->attr.if_source != IFSRC_IFBODY))\n \tapply_default_init (sym);\n       else if (a->function && sym->result && a->access != ACCESS_PRIVATE\n \t       && (sym->ts.u.derived->attr.alloc_comp\n@@ -16166,6 +16170,7 @@ resolve_symbol (gfc_symbol *sym)\n \n   if (sym->ts.type == BT_CLASS && sym->ns == gfc_current_ns\n       && sym->attr.dummy && sym->attr.intent == INTENT_OUT\n+      && sym->ns->proc_name->attr.if_source != IFSRC_IFBODY\n       && !CLASS_DATA (sym)->attr.class_pointer\n       && !CLASS_DATA (sym)->attr.allocatable)\n     apply_default_init (sym);"}, {"sha": "c83aa7de1a391ab076f04c10bc8df7b673b4b1a2", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_23.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d9ef7747b2dc439f7456303f0784faf5cdb1d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d9ef7747b2dc439f7456303f0784faf5cdb1d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_23.f90?ref=51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+!\n+! PR fortran/54753\n+! TS29113:C535c\n+! F2018:C839\n+!\n+module m\n+\n+  interface\n+    subroutine s1 (x, y)\n+      class(*) :: x(..)\n+      class(*), intent (out) :: y(..)\n+    end subroutine\n+  end interface\n+\n+end module "}]}