{"sha": "2af96386a67a2224abc74e7c2144747240ac4ad5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmOTYzODZhNjdhMjIyNGFiYzc0ZTdjMjE0NDc0NzI0MGFjNGFkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-09-13T07:27:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-13T07:27:40Z"}, "message": "Define std::__to_address helper\n\n\t* include/bits/allocated_ptr.h (__allocated_ptr::get): Use\n\t__to_address.\n\t(__allocated_ptr::_S_raw_ptr): Remove.\n\t* include/bits/forward_list.h (_Fwd_list_base::_M_get_node): Use\n\t__to_address.\n\t* include/bits/hashtable_policy.h (_Hashtable_alloc): Likewise.\n\t* include/bits/ptr_traits.h (__to_address): Define new function\n\ttemplate.\n\t* include/bits/shared_ptr_base.h (__shared_ptr): Use __to_address.\n\t(__shared_ptr::_S_raw_ptr): Remove.\n\t* include/bits/stl_vector.h [__cplusplus >= 201103L]\n\t(vector::_M_data_ptr): Use __to_address.\n\t[__cplusplus < 201103L] (vector::_M_data_ptr): Don't dereference\n\tpossibly invalid pointers.\n\t* include/ext/alloc_traits.h (__alloc_traits::construct)\n\t(__alloc_traits::destroy): Use __to_address.\n\nFrom-SVN: r252055", "tree": {"sha": "ffd369339fc1045d90b7310dfd7bb7aea1173085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd369339fc1045d90b7310dfd7bb7aea1173085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af96386a67a2224abc74e7c2144747240ac4ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af96386a67a2224abc74e7c2144747240ac4ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af96386a67a2224abc74e7c2144747240ac4ad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af96386a67a2224abc74e7c2144747240ac4ad5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc03ac3218260524ca6bdb70591a1590c518c762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc03ac3218260524ca6bdb70591a1590c518c762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc03ac3218260524ca6bdb70591a1590c518c762"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "76ab00f9c8d770958ffd369d52e70023b1869468", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -1,3 +1,22 @@\n+2017-09-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/allocated_ptr.h (__allocated_ptr::get): Use\n+\t__to_address.\n+\t(__allocated_ptr::_S_raw_ptr): Remove.\n+\t* include/bits/forward_list.h (_Fwd_list_base::_M_get_node): Use\n+\t__to_address.\n+\t* include/bits/hashtable_policy.h (_Hashtable_alloc): Likewise.\n+\t* include/bits/ptr_traits.h (__to_address): Define new function\n+\ttemplate.\n+\t* include/bits/shared_ptr_base.h (__shared_ptr): Use __to_address.\n+\t(__shared_ptr::_S_raw_ptr): Remove.\n+\t* include/bits/stl_vector.h [__cplusplus >= 201103L]\n+\t(vector::_M_data_ptr): Use __to_address.\n+\t[__cplusplus < 201103L] (vector::_M_data_ptr): Don't dereference\n+\tpossibly invalid pointers.\n+\t* include/ext/alloc_traits.h (__alloc_traits::construct)\n+\t(__alloc_traits::destroy): Use __to_address.\n+\n 2017-09-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/79433"}, {"sha": "96d7841b65b7190afcfeebf213973029ea0a4828", "filename": "libstdc++-v3/include/bits/allocated_ptr.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -82,16 +82,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /// Get the address that the owned pointer refers to.\n-      value_type* get() { return _S_raw_ptr(_M_ptr); }\n+      value_type* get() { return std::__to_address(_M_ptr); }\n \n     private:\n-      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }\n-\n-      template<typename _Ptr>\n-\tstatic auto\n-\t_S_raw_ptr(_Ptr __ptr) -> decltype(_S_raw_ptr(__ptr.operator->()))\n-\t{ return _S_raw_ptr(__ptr.operator->()); }\n-\n       _Alloc* _M_alloc;\n       pointer _M_ptr;\n     };"}, {"sha": "855a72815ae715f34f7ef5e8425222e1d298f280", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -336,7 +336,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_get_node()\n       {\n \tauto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);\n-\treturn std::__addressof(*__ptr);\n+\treturn std::__to_address(__ptr);\n       }\n \n       template<typename... _Args>"}, {"sha": "da6d49c96c45bf93cd38e28c8c26714ca83ea72e", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -2048,7 +2048,7 @@ namespace __detail\n       _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)\n       {\n \tauto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);\n-\t__node_type* __n = std::__addressof(*__nptr);\n+\t__node_type* __n = std::__to_address(__nptr);\n \t__try\n \t  {\n \t    ::new ((void*)__n) __node_type;\n@@ -2094,7 +2094,7 @@ namespace __detail\n       __bucket_alloc_type __alloc(_M_node_allocator());\n \n       auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);\n-      __bucket_type* __p = std::__addressof(*__ptr);\n+      __bucket_type* __p = std::__to_address(__ptr);\n       __builtin_memset(__p, 0, __n * sizeof(__bucket_type));\n       return __p;\n     }"}, {"sha": "74d4c18126c1d5b7697b812b79e2f8cd138f55cb", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -146,6 +146,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Ptr, typename _Tp>\n     using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;\n \n+  template<typename _Tp>\n+    constexpr _Tp*\n+    __to_address(_Tp* __ptr) noexcept\n+    { return __ptr; }\n+\n+  template<typename _Ptr>\n+    constexpr typename std::pointer_traits<_Ptr>::element_type*\n+    __to_address(const _Ptr& __ptr)\n+    { return std::__to_address(__ptr.operator->()); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "20504f326e86fa735ce885d07f04d2a291045055", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -1185,7 +1185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__shared_ptr(unique_ptr<_Yp, _Del>&& __r)\n \t: _M_ptr(__r.get()), _M_refcount()\n \t{\n-\t  auto __raw = _S_raw_ptr(__r.get());\n+\t  auto __raw = __to_address(__r.get());\n \t  _M_refcount = __shared_count<_Lp>(std::move(__r));\n \t  _M_enable_shared_from_this_with(__raw);\n \t}\n@@ -1201,7 +1201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)\n \t: _M_ptr(__r.get()), _M_refcount()\n \t{\n-\t  auto __raw = _S_raw_ptr(__r.get());\n+\t  auto __raw = __to_address(__r.get());\n \t  _M_refcount = __shared_count<_Lp>(std::move(__r));\n \t  _M_enable_shared_from_this_with(__raw);\n \t}\n@@ -1386,16 +1386,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_get_deleter(const std::type_info& __ti) const noexcept\n       { return _M_refcount._M_get_deleter(__ti); }\n \n-      template<typename _Tp1>\n-\tstatic _Tp1*\n-\t_S_raw_ptr(_Tp1* __ptr)\n-\t{ return __ptr; }\n-\n-      template<typename _Tp1>\n-\tstatic auto\n-\t_S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))\n-\t{ return std::__addressof(*__ptr); }\n-\n       template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;\n       template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;\n "}, {"sha": "c7634216c013da49e4b84c85c3cb4e6bea1c80f9", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -1695,7 +1695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Ptr>\n \ttypename std::pointer_traits<_Ptr>::element_type*\n \t_M_data_ptr(_Ptr __ptr) const\n-\t{ return empty() ? nullptr : std::__addressof(*__ptr); }\n+\t{ return empty() ? nullptr : std::__to_address(__ptr); }\n #else\n       template<typename _Up>\n \t_Up*\n@@ -1705,12 +1705,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Ptr>\n \tvalue_type*\n \t_M_data_ptr(_Ptr __ptr)\n-\t{ return __ptr.operator->(); }\n+\t{ return empty() ? (value_type*)0 : __ptr.operator->(); }\n \n       template<typename _Ptr>\n \tconst value_type*\n \t_M_data_ptr(_Ptr __ptr) const\n-\t{ return __ptr.operator->(); }\n+\t{ return empty() ? (const value_type*)0 : __ptr.operator->(); }\n #endif\n     };\n "}, {"sha": "c6f449500075b6f5cfde4cea74dda00ec64418ee", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af96386a67a2224abc74e7c2144747240ac4ad5/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=2af96386a67a2224abc74e7c2144747240ac4ad5", "patch": "@@ -81,15 +81,15 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\n       {\n-\t_Base_type::construct(__a, std::addressof(*__p),\n+\t_Base_type::construct(__a, std::__to_address(__p),\n \t\t\t      std::forward<_Args>(__args)...);\n       }\n \n     // overload destroy for non-standard pointer types\n     template<typename _Ptr>\n       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n       destroy(_Alloc& __a, _Ptr __p)\n-      { _Base_type::destroy(__a, std::addressof(*__p)); }\n+      { _Base_type::destroy(__a, std::__to_address(__p)); }\n \n     static _Alloc _S_select_on_copy(const _Alloc& __a)\n     { return _Base_type::select_on_container_copy_construction(__a); }"}]}