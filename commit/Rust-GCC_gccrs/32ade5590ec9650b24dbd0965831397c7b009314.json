{"sha": "32ade5590ec9650b24dbd0965831397c7b009314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJhZGU1NTkwZWM5NjUwYjI0ZGJkMDk2NTgzMTM5N2M3YjAwOTMxNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-02-17T05:43:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-02-17T05:43:24Z"}, "message": "ios_locale.cc: Fixes for -pedantic.\n\n 2010-02-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/ios_locale.cc: Fixes for -pedantic.\n\t* src/system_error.cc: Same.\n\t* src/locale.cc: Same.\n\t* src/list.cc: Same.\n\t* src/locale_facets.cc: Same.\n\t* src/locale_init.cc: Same.\n\t* src/ios.cc: Same.\n\t* config/locale/darwin/ctype_members.cc: Same.\n\t* config/locale/gnu/collate_members.cc: Same.\n\t* config/locale/gnu/ctype_members.cc: Same.\n\t* config/locale/gnu/c_locale.cc: Same.\n\t* config/locale/gnu/monetary_members.cc: Same.\n\t* config/locale/gnu/time_members.cc: Same.\n\t* config/locale/ieee_1003.1-2001/c_locale.cc: Same.\n\t* config/locale/generic/collate_members.cc: Same.\n\t* config/locale/generic/ctype_members.cc: Same.\n\t* config/locale/generic/c_locale.cc: Same.\n\t* config/locale/generic/monetary_members.cc: Same.\n\t* config/locale/generic/time_members.cc: Same.\n\t* config/io/basic_file_stdio.cc: Same.\n\n\t* libsupc++/pbase_type_info.cc: Fixes for -fno-rtti.\n\t* libsupc++/pointer_type_info.cc: Same.\n\t* libsupc++/eh_personality.cc: Same.\n\n\t* include/std/system_error: Throw spacing.\n\t* include/bits/locale_classes.h: Same.\n\t* include/bits/locale_facets.h: Same.\n\t* include/bits/ios_base.h: Same.\n\n\t* testsuite/17_intro/headers/c++200x/all_no_rtti.cc: New.\n\t* testsuite/17_intro/headers/c++1998/all_no_rtti.cc: New\n\nFrom-SVN: r156822", "tree": {"sha": "fc054963dec75674d1c899ab4e594c10311df826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc054963dec75674d1c899ab4e594c10311df826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ade5590ec9650b24dbd0965831397c7b009314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ade5590ec9650b24dbd0965831397c7b009314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ade5590ec9650b24dbd0965831397c7b009314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ade5590ec9650b24dbd0965831397c7b009314/comments", "author": null, "committer": null, "parents": [{"sha": "bc349d0a7f40da33d4b2ed8fb972c2a5e3a26ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc349d0a7f40da33d4b2ed8fb972c2a5e3a26ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc349d0a7f40da33d4b2ed8fb972c2a5e3a26ad9"}], "stats": {"total": 342, "additions": 217, "deletions": 125}, "files": [{"sha": "99e78f503aaf14c6f5497c6d91edf92819e42f2e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,3 +1,38 @@\n+2010-02-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/ios_locale.cc: Fixes for -pedantic.\n+\t* src/system_error.cc: Same.\n+\t* src/locale.cc: Same.\n+\t* src/list.cc: Same.\n+\t* src/locale_facets.cc: Same.\n+\t* src/locale_init.cc: Same.\n+\t* src/ios.cc: Same.\n+\t* config/locale/darwin/ctype_members.cc: Same.\n+\t* config/locale/gnu/collate_members.cc: Same.\n+\t* config/locale/gnu/ctype_members.cc: Same.\n+\t* config/locale/gnu/c_locale.cc: Same.\n+\t* config/locale/gnu/monetary_members.cc: Same.\n+\t* config/locale/gnu/time_members.cc: Same.\n+\t* config/locale/ieee_1003.1-2001/c_locale.cc: Same.\n+\t* config/locale/generic/collate_members.cc: Same.\n+\t* config/locale/generic/ctype_members.cc: Same.\n+\t* config/locale/generic/c_locale.cc: Same.\n+\t* config/locale/generic/monetary_members.cc: Same.\n+\t* config/locale/generic/time_members.cc: Same.\n+\t* config/io/basic_file_stdio.cc: Same.\n+\n+\t* libsupc++/pbase_type_info.cc: Fixes for -fno-rtti.\n+\t* libsupc++/pointer_type_info.cc: Same.\n+\t* libsupc++/eh_personality.cc: Same.\n+\n+\t* include/std/system_error: Throw spacing.\n+\t* include/bits/locale_classes.h: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/ios_base.h: Same.\n+\n+\t* testsuite/17_intro/headers/c++200x/all_no_rtti.cc: New.\n+\t* testsuite/17_intro/headers/c++1998/all_no_rtti.cc: New.\n+\n 2010-02-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.h (linear_congruential_engine(_Sseq&),"}, {"sha": "472f12396d3f800cef404a67beaafa8850c2afa9", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2009\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -182,7 +182,7 @@ namespace\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Definitions for __basic_file<char>.\n-  __basic_file<char>::__basic_file(__c_lock* /*__lock*/) \n+  __basic_file<char>::__basic_file(__c_lock* /*__lock*/) throw()\n   : _M_cfile(NULL), _M_cfile_created(false) { }\n \n   __basic_file<char>::~__basic_file()"}, {"sha": "e1dd0f2a4f9174c54f83b3255171397fce8e9be0", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -55,7 +55,7 @@ namespace std\n \n #ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n-  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n     // Darwin uses the same codes for 'char' as 'wchar_t', so this routine\n     // never gets called.\n@@ -150,7 +150,7 @@ namespace std\n   }\n \n   void\n-  ctype<wchar_t>::_M_initialize_ctype()\n+  ctype<wchar_t>::_M_initialize_ctype() throw()\n   {\n     wint_t __i;\n     for (__i = 0; __i < 128; ++__i)"}, {"sha": "4ae951e77118b0a950cd0ea9ef15d6d710f08f71", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -46,8 +46,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<>\n     void\n-    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale&) \t      \n+    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err,\n+\t\t   const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n       char* __old = setlocale(LC_ALL, NULL);\n@@ -111,8 +111,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<>\n     void\n-    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale&) \n+    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err,\n+\t\t   const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n       char* __old = setlocale(LC_ALL, NULL);\n@@ -139,7 +139,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __DBL_HAS_INFINITY__\n \t       __v == numeric_limits<double>::infinity()\n \t       || __v == -numeric_limits<double>::infinity())\n-#else          \n+#else\n \t       (__v > 1.0 || __v < -1.0) && errno == ERANGE)\n #endif\n \t{\n@@ -156,8 +156,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<>\n     void\n-    __convert_to_v(const char* __s, long double& __v, \n-\t\t   ios_base::iostate& __err, const __c_locale&) \n+    __convert_to_v(const char* __s, long double& __v,\n+\t\t   ios_base::iostate& __err, const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n       char* __old = setlocale(LC_ALL, NULL);\n@@ -189,10 +189,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n        else if (\n #if __LDBL_HAS_INFINITY__\n-\t        __v == numeric_limits<long double>::infinity()\n-\t        || __v == -numeric_limits<long double>::infinity())\n+\t\t__v == numeric_limits<long double>::infinity()\n+\t\t|| __v == -numeric_limits<long double>::infinity())\n #else\n-\t        (__v > 1.0l || __v < -1.0l) && errno == ERANGE)\n+\t\t(__v > 1.0l || __v < -1.0l) && errno == ERANGE)\n #endif\n \t{\n \t  if (__v > 0.0l)\n@@ -207,7 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   void\n-  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s, \n+  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s,\n \t\t\t\t    __c_locale)\n   {\n     // Currently, the generic model only supports the \"C\" locale.\n@@ -223,7 +223,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { __cloc = NULL; }\n \n   __c_locale\n-  locale::facet::_S_clone_c_locale(__c_locale&)\n+  locale::facet::_S_clone_c_locale(__c_locale&) throw()\n   { return __c_locale(); }\n \n   __c_locale\n@@ -236,10 +236,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n-      \"LC_CTYPE\", \n+      \"LC_CTYPE\",\n       \"LC_NUMERIC\",\n-      \"LC_TIME\",   \n-      \"LC_COLLATE\", \n+      \"LC_TIME\",\n+      \"LC_COLLATE\",\n       \"LC_MONETARY\",\n       \"LC_MESSAGES\"\n     };"}, {"sha": "e7753e06f8af8d8fbfdaf36ab506daa7a742fe1f", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::collate implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,7 +38,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // be put there instead of here.\n   template<>\n     int \n-    collate<char>::_M_compare(const char* __one, const char* __two) const\n+    collate<char>::_M_compare(const char* __one, \n+\t\t\t      const char* __two) const throw()\n     { \n       int __cmp = strcoll(__one, __two);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n@@ -47,14 +48,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     size_t\n     collate<char>::_M_transform(char* __to, const char* __from, \n-\t\t\t\tsize_t __n) const\n+\t\t\t\tsize_t __n) const throw()\n     { return strxfrm(__to, __from, __n); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int \n     collate<wchar_t>::_M_compare(const wchar_t* __one, \n-\t\t\t\t const wchar_t* __two) const\n+\t\t\t\t const wchar_t* __two) const throw()\n     {\n       int __cmp = wcscoll(__one, __two);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n@@ -63,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     size_t\n     collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,\n-\t\t\t\t   size_t __n) const\n+\t\t\t\t   size_t __n) const throw()\n     { return wcsxfrm(__to, __from, __n); }\n #endif\n "}, {"sha": "ae08c3b016966f2ea05e204d6c87532557168fcb", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n-  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n     __wmask_type __ret;\n     switch (__m)\n@@ -239,7 +239,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   void\n-  ctype<wchar_t>::_M_initialize_ctype()\n+  ctype<wchar_t>::_M_initialize_ctype() throw()\n   {\n     wint_t __i;\n     for (__i = 0; __i < 128; ++__i)"}, {"sha": "26b435860bef7c2e11a790263924957eb16a7808", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,7 @@\n // std::moneypunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,10 +36,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n-  money_base::_S_construct_pattern(char, char, char)\n+  money_base::_S_construct_pattern(char, char, char) throw()\n   { return _S_default_pattern; }\n \n-  template<> \n+  template<>\n     void\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*)\n     {\n@@ -64,7 +65,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_M_data->_M_atoms[__i] = money_base::_S_atoms[__i];\n     }\n \n-  template<> \n+  template<>\n     void\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*)\n     {\n@@ -90,18 +91,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_M_data->_M_atoms[__i] = money_base::_S_atoms[__i];\n     }\n \n-  template<> \n+  template<>\n     moneypunct<char, true>::~moneypunct()\n     { delete _M_data; }\n \n-  template<> \n+  template<>\n     moneypunct<char, false>::~moneypunct()\n     { delete _M_data; }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n-    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale, \n+    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,\n \t\t\t\t\t\t\tconst char*)\n     {\n       // \"C\" locale\n@@ -115,9 +116,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_data->_M_curr_symbol = L\"\";\n       _M_data->_M_curr_symbol_size = 0;\n       _M_data->_M_positive_sign = L\"\";\n-      _M_data->_M_positive_sign_size = 0;      \n+      _M_data->_M_positive_sign_size = 0;\n       _M_data->_M_negative_sign = L\"\";\n-      _M_data->_M_negative_sign_size = 0;      \n+      _M_data->_M_negative_sign_size = 0;\n       _M_data->_M_frac_digits = 0;\n       _M_data->_M_pos_format = money_base::_S_default_pattern;\n       _M_data->_M_neg_format = money_base::_S_default_pattern;\n@@ -127,9 +128,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  static_cast<wchar_t>(money_base::_S_atoms[__i]);\n     }\n \n-  template<> \n+  template<>\n     void\n-    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale, \n+    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,\n \t\t\t\t\t\t\t const char*)\n     {\n       // \"C\" locale\n@@ -155,11 +156,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  static_cast<wchar_t>(money_base::_S_atoms[__i]);\n     }\n \n-  template<> \n+  template<>\n     moneypunct<wchar_t, true>::~moneypunct()\n     { delete _M_data; }\n \n-  template<> \n+  template<>\n     moneypunct<wchar_t, false>::~moneypunct()\n     { delete _M_data; }\n #endif"}, {"sha": "225bc3c247ce205b00919157848c10a1fd3121d2", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,8 +39,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __timepunct<char>::\n-    _M_put(char* __s, size_t __maxlen, const char* __format, \n-\t   const tm* __tm) const\n+    _M_put(char* __s, size_t __maxlen, const char* __format,\n+\t   const tm* __tm) const throw()\n     {\n       char* __old = setlocale(LC_ALL, NULL);\n       const size_t __llen = strlen(__old) + 1;\n@@ -55,10 +55,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__s[0] = '\\0';\n     }\n \n-  template<> \n+  template<>\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale)\n-    { \n+    {\n       // \"C\" locale.\n       if (!_M_data)\n \t_M_data = new __timepunct_cache<char>;\n@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_data->_M_am = \"AM\";\n       _M_data->_M_pm = \"PM\";\n       _M_data->_M_am_pm_format = \"\";\n-\t  \n+\n       // Day names, starting with \"C\"'s Sunday.\n       _M_data->_M_day1 = \"Sunday\";\n       _M_data->_M_day2 = \"Monday\";\n@@ -124,8 +124,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __timepunct<wchar_t>::\n-    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n-\t   const tm* __tm) const\n+    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format,\n+\t   const tm* __tm) const throw()\n     {\n       char* __old = setlocale(LC_ALL, NULL);\n       const size_t __llen = strlen(__old) + 1;\n@@ -137,10 +137,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       delete [] __sav;\n       // Make sure __s is null terminated.\n       if (__len == 0)\n-\t__s[0] = L'\\0';      \n+\t__s[0] = L'\\0';\n     }\n \n-  template<> \n+  template<>\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale)\n     {"}, {"sha": "9706e414dd5ebfc7ec9f0dfbcb189da77ab03060", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc)\n+\t\t   const __c_locale& __cloc) throw()\n     {\n       char* __sanity;\n       __v = __strtof_l(__s, &__sanity, __cloc);\n@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc)\n+\t\t   const __c_locale& __cloc) throw()\n     {\n       char* __sanity;\n       __v = __strtod_l(__s, &__sanity, __cloc);\n@@ -94,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __convert_to_v(const char* __s, long double& __v, ios_base::iostate& __err,\n-\t\t   const __c_locale& __cloc)\n+\t\t   const __c_locale& __cloc) throw()\n     {\n       char* __sanity;\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   __c_locale\n-  locale::facet::_S_clone_c_locale(__c_locale& __cloc)\n+  locale::facet::_S_clone_c_locale(__c_locale& __cloc) throw()\n   { return __duplocale(__cloc); }\n \n   __c_locale"}, {"sha": "bcd415355f4c03f4377541c79be33ad2e9fac0cc", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::collate implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // be put there instead of here.\n   template<>\n     int \n-    collate<char>::_M_compare(const char* __one, const char* __two) const\n+    collate<char>::_M_compare(const char* __one, \n+\t\t\t      const char* __two) const throw()\n     { \n       int __cmp = __strcoll_l(__one, __two, _M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n@@ -46,14 +47,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     size_t\n     collate<char>::_M_transform(char* __to, const char* __from, \n-\t\t\t\tsize_t __n) const \n+\t\t\t\tsize_t __n) const throw()\n     { return __strxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int \n     collate<wchar_t>::_M_compare(const wchar_t* __one, \n-\t\t\t\t const wchar_t* __two) const\n+\t\t\t\t const wchar_t* __two) const throw()\n     {\n       int __cmp = __wcscoll_l(__one, __two, _M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n@@ -62,7 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     size_t\n     collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,\n-\t\t\t\t   size_t __n) const\n+\t\t\t\t   size_t __n) const throw()\n     { return __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n #endif\n "}, {"sha": "6965694297dd5d7b088c11f9a58b18e5722cfb42", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -55,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n-  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n     __wmask_type __ret;\n     switch (__m)\n@@ -267,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   void\n-  ctype<wchar_t>::_M_initialize_ctype()\n+  ctype<wchar_t>::_M_initialize_ctype() throw()\n   {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);"}, {"sha": "159eb97cad5e3470a6f9770f539d4cc7b20eb791", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,7 +37,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n-  money_base::_S_construct_pattern(char __precedes, char __space, char __posn)\n+  money_base::_S_construct_pattern(char __precedes, char __space, \n+\t\t\t\t   char __posn) throw()\n   { \n     pattern __ret;\n "}, {"sha": "43cab22964ca55ed0804791a394f09daefa99ef1", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,7 +39,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     void\n     __timepunct<char>::\n     _M_put(char* __s, size_t __maxlen, const char* __format, \n-\t   const tm* __tm) const\n+\t   const tm* __tm) const throw()\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n       const size_t __len = __strftime_l(__s, __maxlen, __format, __tm,\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     void\n     __timepunct<wchar_t>::\n     _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n-\t   const tm* __tm) const\n+\t   const tm* __tm) const throw()\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n       const size_t __len = __wcsftime_l(__s, __maxlen, __format, __tm,"}, {"sha": "262681b8983169b4b8c1970980dcb89c3a2e3ec3", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@ namespace std\n   { }\n \n   __c_locale\n-  locale::facet::_S_clone_c_locale(__c_locale&)\n+  locale::facet::_S_clone_c_locale(__c_locale&) throw()\n   { return __c_locale(); }\n \n   template<> "}, {"sha": "0ac3d692647054359986af9eea1a59c67343f71f", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -521,7 +521,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     locale\t\t_M_ios_locale;\n \n     void\n-    _M_init() throw ();\n+    _M_init() throw();\n \n   public:\n \n@@ -680,7 +680,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  with imbue_event.\n     */\n     locale\n-    imbue(const locale& __loc) throw ();\n+    imbue(const locale& __loc) throw();\n \n     /**\n      *  @brief  Locale access"}, {"sha": "347e76124865f452c2702fb6d9926fc11789ab8f", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *\t\t copies, or have the same name.  False otherwise.\n     */\n     bool\n-    operator==(const locale& __other) const throw ();\n+    operator==(const locale& __other) const throw();\n \n     /**\n      *  @brief  Locale inequality.\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  @return  ! (*this == other)\n     */\n     bool\n-    operator!=(const locale& __other) const throw ()\n+    operator!=(const locale& __other) const throw()\n     { return !(this->operator==(__other)); }\n \n     /**\n@@ -313,7 +313,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _S_initialize();\n \n     static void\n-    _S_initialize_once() throw ();\n+    _S_initialize_once() throw();\n \n     static category\n     _S_normalize_category(category);\n@@ -378,7 +378,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t       __c_locale __old = 0);\n \n     static __c_locale\n-    _S_clone_c_locale(__c_locale& __cloc) throw ();\n+    _S_clone_c_locale(__c_locale& __cloc) throw();\n \n     static void\n     _S_destroy_c_locale(__c_locale& __cloc);\n@@ -392,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _S_get_c_locale();\n \n     _GLIBCXX_CONST static const char*\n-    _S_get_c_name() throw ();\n+    _S_get_c_name() throw();\n \n   private:\n     void\n@@ -441,7 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     template<typename _Facet>\n       friend bool\n-      has_facet(const locale&) throw ();\n+      has_facet(const locale&) throw();\n \n     // NB: There is no accessor for _M_index because it may be used\n     // before the constructor is run; the effect of calling a member\n@@ -463,7 +463,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     id() { }\n \n     size_t\n-    _M_id() const throw ();\n+    _M_id() const throw();\n   };\n \n \n@@ -703,10 +703,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // Used to abstract out _CharT bits in virtual member functions, below.\n       int\n-      _M_compare(const _CharT*, const _CharT*) const throw ();\n+      _M_compare(const _CharT*, const _CharT*) const throw();\n \n       size_t\n-      _M_transform(_CharT*, const _CharT*, size_t) const throw ();\n+      _M_transform(_CharT*, const _CharT*, size_t) const throw();\n \n   protected:\n       /// Destructor.\n@@ -765,20 +765,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Specializations.\n   template<>\n     int\n-    collate<char>::_M_compare(const char*, const char*) const throw ();\n+    collate<char>::_M_compare(const char*, const char*) const throw();\n \n   template<>\n     size_t\n-    collate<char>::_M_transform(char*, const char*, size_t) const throw ();\n+    collate<char>::_M_transform(char*, const char*, size_t) const throw();\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int\n-    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw ();\n+    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();\n \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw ();\n+    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();\n #endif\n \n   /// class collate_byname [22.2.4.2]."}, {"sha": "b3f9001a52d5cf8f81b56a40e03c49896f10b5af", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -70,17 +70,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __convert_to_v(const char*, float&, ios_base::iostate&,\n-\t\t   const __c_locale&) throw ();\n+\t\t   const __c_locale&) throw();\n \n   template<>\n     void\n     __convert_to_v(const char*, double&, ios_base::iostate&,\n-\t\t   const __c_locale&) throw ();\n+\t\t   const __c_locale&) throw();\n \n   template<>\n     void\n     __convert_to_v(const char*, long double&, ios_base::iostate&,\n-\t\t   const __c_locale&) throw ();\n+\t\t   const __c_locale&) throw();\n \n   // NB: __pad is a struct, rather than a function, so it can be\n   // partially-specialized.\n@@ -1219,7 +1219,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     protected:\n       __wmask_type\n-      _M_convert_to_wmask(const mask __m) const throw ();\n+      _M_convert_to_wmask(const mask __m) const throw();\n \n       /// Destructor\n       virtual\n@@ -1457,7 +1457,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // For use at construction time only.\n       void\n-      _M_initialize_ctype() throw ();\n+      _M_initialize_ctype() throw();\n     };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n@@ -1557,7 +1557,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     // num_put\n     // Construct and return valid scanf format for floating point types.\n     static void\n-    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw ();\n+    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();\n   };\n \n   template<typename _CharT>"}, {"sha": "c485cc47c7b9725ae0e30b3850cb77253ee9fbf7", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -103,8 +103,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   inline error_category::error_category() = default;\n \n   // DR 890.\n-  _GLIBCXX_CONST const error_category& system_category() throw ();\n-  _GLIBCXX_CONST const error_category& generic_category() throw ();\n+  _GLIBCXX_CONST const error_category& system_category() throw();\n+  _GLIBCXX_CONST const error_category& generic_category() throw();\n \n   error_code make_error_code(errc);\n "}, {"sha": "2b194f2e4863fb3b5f310756e4557a3784156c33", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- The GNU C++ exception personality routine.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -549,6 +549,7 @@ PERSONALITY_FUNCTION (int version,\n       else if (!foreign_exception)\n \tthrown_ptr = __get_object_from_ue (ue_header);\n #else\n+#ifdef __GXX_RTTI\n       // During forced unwinding, match a magic exception type.\n       if (actions & _UA_FORCE_UNWIND)\n \t{\n@@ -561,6 +562,7 @@ PERSONALITY_FUNCTION (int version,\n \t  throw_type = &typeid(abi::__foreign_exception);\n \t}\n       else\n+#endif\n         {\n           thrown_ptr = __get_object_from_ue (ue_header);\n           throw_type = __get_exception_header_from_obj\n@@ -771,7 +773,7 @@ __cxa_call_unexpected (void *exc_obj_in)\n       // If the exception spec allows std::bad_exception, throw that.\n       // We don't have a thrown object to compare against, but since\n       // bad_exception doesn't have virtual bases, that's OK; just pass 0.\n-#ifdef __EXCEPTIONS  \n+#if defined(__EXCEPTIONS) && defined(__GXX_RTTI)\n       const std::type_info &bad_exc = typeid (std::bad_exception);\n       if (check_exception_spec (&info, &bad_exc, 0, xh_switch_value))\n \tthrow std::bad_exception();"}, {"sha": "f79d9e96867f366c445746f4bb887b67739b7df0", "filename": "libstdc++-v3/libsupc++/pbase_type_info.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2007, 2009\n+// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2007, \n+// 2009, 2010\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -37,8 +38,11 @@ __do_catch (const type_info *thr_type,\n {\n   if (*this == *thr_type)\n     return true;      // same type\n+\n+#ifdef __GXX_RTTI\n   if (typeid (*this) != typeid (*thr_type))\n     return false;     // not both same kind of pointers\n+#endif\n   \n   if (!(outer & 1))\n     // We're not the same and our outer pointers are not all const qualified"}, {"sha": "be96308bf4b05362db542f5b7d3a7b4685fb50fb", "filename": "libstdc++-v3/libsupc++/pointer_type_info.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpointer_type_info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpointer_type_info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpointer_type_info.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2007, 2009\n+// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2007,\n+// 2009, 2010\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -41,11 +42,13 @@ __pointer_catch (const __pbase_type_info *thrown_type,\n                  void **thr_obj,\n                  unsigned outer) const\n {\n+#ifdef __GXX_RTTI\n   if (outer < 2 && *__pointee == typeid (void))\n     {\n       // conversion to void\n       return !thrown_type->__pointee->__is_function_p ();\n     }\n+#endif\n   \n   return __pbase_type_info::__pointer_catch (thrown_type, thr_obj, outer);\n }"}, {"sha": "66052872ac79b197061b1b3bd9a9979c01d2649c", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,7 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool ios_base::Init::_S_synced_with_stdio = true;\n \n-  ios_base::ios_base() \n+  ios_base::ios_base() throw()\n   : _M_precision(), _M_width(), _M_flags(), _M_exception(), \n   _M_streambuf_state(), _M_callbacks(0), _M_word_zero(), \n   _M_word_size(_S_local_word_size), _M_word(_M_local_word), _M_ios_locale()\n@@ -175,7 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   void \n-  ios_base::_M_dispose_callbacks(void)\n+  ios_base::_M_dispose_callbacks(void) throw()\n   {\n     _Callback_list* __p = _M_callbacks;\n     while (__p && __p->_M_remove_reference() == 0)"}, {"sha": "8b1873e7d49ae4b6f06db7d40ace2a1ca904b6c6", "filename": "libstdc++-v3/src/ios_locale.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Fios_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Fios_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_locale.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2009\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,19 +34,19 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Called only by basic_ios<>::init.\n-  void \n-  ios_base::_M_init()   \n+  void\n+  ios_base::_M_init() throw()\n   {\n     // NB: May be called more than once\n     _M_precision = 6;\n     _M_width = 0;\n     _M_flags = skipws | dec;\n     _M_ios_locale = locale();\n-  }  \n-  \n+  }\n+\n   // 27.4.2.3  ios_base locale functions\n   locale\n-  ios_base::imbue(const locale& __loc)\n+  ios_base::imbue(const locale& __loc) throw()\n   {\n     locale __old = _M_ios_locale;\n     _M_ios_locale = __loc;"}, {"sha": "a7a705ca680e545669ed17ad06bc38dadf437743", "filename": "libstdc++-v3/src/list.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flist.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -53,7 +53,7 @@\n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n   void\n-  _List_node_base::swap(_List_node_base& __x, _List_node_base& __y)\n+  _List_node_base::swap(_List_node_base& __x, _List_node_base& __y) throw()\n   {\n     if ( __x._M_next != &__x )\n     {\n@@ -86,7 +86,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n   void\n   _List_node_base::_M_transfer(_List_node_base * const __first,\n-\t\t\t       _List_node_base * const __last)\n+\t\t\t       _List_node_base * const __last) throw()\n   {\n     if (this != __last)\n     {\n@@ -104,7 +104,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::_M_reverse()\n+  _List_node_base::_M_reverse() throw()\n   {\n     _List_node_base* __tmp = this;\n     do\n@@ -118,7 +118,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::_M_hook(_List_node_base* const __position)\n+  _List_node_base::_M_hook(_List_node_base* const __position) throw()\n   {\n     this->_M_next = __position;\n     this->_M_prev = __position->_M_prev;\n@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::_M_unhook()\n+  _List_node_base::_M_unhook() throw()\n   {\n     _List_node_base* const __next_node = this->_M_next;\n     _List_node_base* const __prev_node = this->_M_prev;"}, {"sha": "937e99c8b14570a7394ece49691fad5fcfeda44c", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -217,7 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   const char*\n-  locale::facet::_S_get_c_name()\n+  locale::facet::_S_get_c_name() throw()\n   { return _S_c_name; }\n \n   locale::facet::\n@@ -408,7 +408,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   _Atomic_word locale::id::_S_refcount;  // init'd to 0 by linker\n \n   size_t\n-  locale::id::_M_id() const\n+  locale::id::_M_id() const throw()\n   {\n     if (!_M_index)\n       {"}, {"sha": "77686c6c3eaaae75abc9edcfff2c66e410c2ba65", "filename": "libstdc++-v3/src/locale_facets.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -58,7 +58,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // According to the resolution of DR 231, about 22.2.2.2.2, p11,\n   // \"str.precision() is specified in the conversion specification\".\n   void\n-  __num_base::_S_format_float(const ios_base& __io, char* __fptr, char __mod)\n+  __num_base::_S_format_float(const ios_base& __io, char* __fptr, \n+\t\t\t      char __mod) throw()\n   {\n     ios_base::fmtflags __flags = __io.flags();\n     *__fptr++ = '%';\n@@ -88,7 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n   __verify_grouping(const char* __grouping, size_t __grouping_size,\n-\t\t    const string& __grouping_tmp)\n+\t\t    const string& __grouping_tmp) throw()\n   {\n     const size_t __n = __grouping_tmp.size() - 1;\n     const size_t __min = std::min(__n, size_t(__grouping_size - 1));"}, {"sha": "45f67f67e317f6c411b42ce583d8011bf9567c60", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, \n-// 2009\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -260,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   void\n-  locale::_S_initialize_once()\n+  locale::_S_initialize_once() throw()\n   {\n     // 2 references.\n     // One reference for _S_classic, one for _S_global"}, {"sha": "214480182040c73cbb98c8730d24102f4d95212a", "filename": "libstdc++-v3/src/system_error.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -1,6 +1,6 @@\n // <system_error> implementation file\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -69,10 +69,10 @@ namespace\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   const error_category& \n-  system_category() { return system_category_instance; }\n+  system_category() throw() { return system_category_instance; }\n \n   const error_category& \n-  generic_category() { return generic_category_instance; }\n+  generic_category() throw() { return generic_category_instance; }\n   \n   system_error::~system_error() throw() { }\n "}, {"sha": "99585999ed509c3c3fda9b9994e33735242f6401", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/all_no_rtti.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall_no_rtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall_no_rtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall_no_rtti.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"-fno-rtti\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/extc++.h>"}, {"sha": "2ce83ed0eb4fe67bbdf77390496beb465db4b98f", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all_no_rtti.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_no_rtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ade5590ec9650b24dbd0965831397c7b009314/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_no_rtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_no_rtti.cc?ref=32ade5590ec9650b24dbd0965831397c7b009314", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-rtti\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/extc++.h>"}]}