{"sha": "c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlhYTBiOTNhOGUzOWVlODM4ZWVmOWQ4NmMzZTJhMjdlZDI5ZGYwOQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2016-01-01T23:54:10Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2016-01-01T23:54:10Z"}, "message": "extend.texi (Common Function Attributes): Move to correct alphabetization of table.\n\n2016-01-01  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi (Common Function Attributes) <noplt>: Move\n\tto correct alphabetization of table.  Copy-edit and correct\n\tmarkup.\n\t<stack_protect>: Likewise.\n\t<target_clones>: Likewise.\n\t<simd>: Likewise.\n\t* doc/invoke.texi (Optimize Options) <-fstack-protector-explicit>:\n\tCorrect punctuation.\n\t(Code Gen Options) <-fno-plt>: Copy-edit.\n\nFrom-SVN: r232030", "tree": {"sha": "fbb079fec4d08def0fdda3b3796d98b3d718b7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbb079fec4d08def0fdda3b3796d98b3d718b7e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6eeaad6e3b826cfe1c037ae3a63da9b13514f069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeaad6e3b826cfe1c037ae3a63da9b13514f069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eeaad6e3b826cfe1c037ae3a63da9b13514f069"}], "stats": {"total": 150, "additions": 83, "deletions": 67}, "files": [{"sha": "a19bbfecc217cabda5ec4c354acbc09a3c2f5817", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "patch": "@@ -1,3 +1,15 @@\n+2016-01-01  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (Common Function Attributes) <noplt>: Move\n+\tto correct alphabetization of table.  Copy-edit and correct\n+\tmarkup.\n+\t<stack_protect>: Likewise.\n+\t<target_clones>: Likewise.\n+\t<simd>: Likewise.\n+\t* doc/invoke.texi (Optimize Options) <-fstack-protector-explicit>:\n+\tCorrect punctuation.\n+\t(Code Gen Options) <-fno-plt>: Copy-edit.\n+\n 2016-01-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/68917"}, {"sha": "0f36d4b1924a1587abc15a4f5d1dd8849b1c0215", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 60, "deletions": 55, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "patch": "@@ -2932,6 +2932,36 @@ my_memcpy (void *dest, const void *src, size_t len)\n         __attribute__((nonnull));\n @end smallexample\n \n+@item noplt\n+@cindex @code{noplt} function attribute\n+The @code{noplt} attribute is the counterpart to option @option{-fno-plt}.\n+Calls to functions marked with this attribute in position-independent code\n+do not use the PLT.\n+\n+@smallexample\n+@group\n+/* Externally defined function foo.  */\n+int foo () __attribute__ ((noplt));\n+\n+int\n+main (/* @r{@dots{}} */)\n+@{\n+  /* @r{@dots{}} */\n+  foo ();\n+  /* @r{@dots{}} */\n+@}\n+@end group\n+@end smallexample\n+\n+The @code{noplt} attribute on function @code{foo}\n+tells the compiler to assume that\n+the function @code{foo} is externally defined and that the call to\n+@code{foo} must avoid the PLT\n+in position-independent code.\n+\n+In position-dependent code, a few targets also convert calls to\n+functions that are marked to not use the PLT to use the GOT instead.\n+\n @item noreturn\n @cindex @code{noreturn} function attribute\n @cindex functions that never return\n@@ -2977,35 +3007,6 @@ the standard C library can be guaranteed not to throw an exception\n with the notable exceptions of @code{qsort} and @code{bsearch} that\n take function pointer arguments.\n \n-@item noplt\n-@cindex @code{noplt} function attribute\n-The @code{noplt} attribute is the counterpart to option @option{-fno-plt} and\n-does not use PLT for calls to functions marked with this attribute in position\n-independent code. \n-\n-@smallexample\n-@group\n-/* Externally defined function foo.  */\n-int foo () __attribute__ ((noplt));\n-\n-int\n-main (/* @r{@dots{}} */)\n-@{\n-  /* @r{@dots{}} */\n-  foo ();\n-  /* @r{@dots{}} */\n-@}\n-@end group\n-@end smallexample\n-\n-The @code{noplt} attribute on function foo tells the compiler to assume that\n-the function foo is externally defined and the call to foo must avoid the PLT\n-in position independent code.\n-\n-Additionally, a few targets also convert calls to those functions that are\n-marked to not use the PLT to use the GOT instead for non-position independent\n-code.\n-\n @item optimize\n @cindex @code{optimize} function attribute\n The @code{optimize} attribute is used to specify that a function is to\n@@ -3120,44 +3121,35 @@ with a copy that redefines NULL appropriately.\n The warnings for missing or incorrect sentinels are enabled with\n @option{-Wformat}.\n \n-@item stack_protect\n-@cindex @code{stack_protect} function attribute\n-This function attribute make a stack protection of the function if \n-flags @option{fstack-protector} or @option{fstack-protector-strong}\n-or @option{fstack-protector-explicit} are set.\n-\n-@item target_clones (@var{options})\n-@cindex @code{target_clones} function attribute\n-The @code{target_clones} attribute is used to specify that a function is to\n-be cloned into multiple versions compiled with different target options\n-than specified on the command line.  The supported options and restrictions\n-are the same as for @code{target} attribute.\n-\n-For instance on an x86, you could compile a function with\n-@code{target_clones(\"sse4.1,avx\")}. It will create 2 function clones,\n-one compiled with @option{-msse4.1} and another with @option{-mavx}.\n-At the function call it will create resolver @code{ifunc}, that will\n-dynamically call a clone suitable for current architecture.\n-\n @item simd\n @itemx simd(\"@var{mask}\")\n-@cindex @code{simd} function attribute.\n+@cindex @code{simd} function attribute\n This attribute enables creation of one or more function versions that\n can process multiple arguments using SIMD instructions from a\n single invocation.  Specifying this attribute allows compiler to\n assume that such versions are available at link time (provided\n in the same or another translation unit).  Generated versions are\n-target dependent and described in corresponding Vector ABI document.  For\n+target-dependent and described in the corresponding Vector ABI document.  For\n x86_64 target this document can be found\n @w{@uref{https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt,here}}.\n+\n+The optional argument @var{mask} may have the value\n+@code{notinbranch} or @code{inbranch},\n+and instructs the compiler to generate non-masked or masked\n+clones correspondingly. By default, all clones are generated.\n+\n The attribute should not be used together with Cilk Plus @code{vector}\n attribute on the same function.\n-If the attribute is specified and @code{#pragma omp declare simd}\n-present on a declaration and @code{-fopenmp} or @code{-fopenmp-simd}\n+\n+If the attribute is specified and @code{#pragma omp declare simd} is\n+present on a declaration and the @option{-fopenmp} or @option{-fopenmp-simd}\n switch is specified, then the attribute is ignored.\n-The optional argument @var{mask} may have \"notinbranch\" or \"inbranch\"\n-value and instructs the compiler to generate non-masked or masked\n-clones correspondingly. By default, all clones are generated.\n+\n+@item stack_protect\n+@cindex @code{stack_protect} function attribute\n+This attribute adds stack protection code to the function if \n+flags @option{-fstack-protector}, @option{-fstack-protector-strong}\n+or @option{-fstack-protector-explicit} are set.\n \n @item target (@var{options})\n @cindex @code{target} function attribute\n@@ -3196,6 +3188,19 @@ Function Attributes}, @ref{PowerPC Function Attributes},\n @ref{ARM Function Attributes},and @ref{Nios II Function Attributes},\n for details.\n \n+@item target_clones (@var{options})\n+@cindex @code{target_clones} function attribute\n+The @code{target_clones} attribute is used to specify that a function\n+be cloned into multiple versions compiled with different target options\n+than specified on the command line.  The supported options and restrictions\n+are the same as for @code{target} attribute.\n+\n+For instance, on an x86, you could compile a function with\n+@code{target_clones(\"sse4.1,avx\")}.  GCC creates two function clones,\n+one compiled with @option{-msse4.1} and another with @option{-mavx}.\n+It also creates a resolver function (see the @code{ifunc} attribute\n+above) that dynamically selects a clone suitable for current architecture.\n+\n @item unused\n @cindex @code{unused} function attribute\n This attribute, attached to a function, means that the function is meant"}, {"sha": "178c530b169f8b1817177e60bd20a71b8f425ec8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c9aa0b93a8e39ee838eef9d86c3e2a27ed29df09", "patch": "@@ -10284,7 +10284,7 @@ references to local frame addresses.\n @item -fstack-protector-explicit\n @opindex fstack-protector-explicit\n Like @option{-fstack-protector} but only protects those functions which\n-have the @code{stack_protect} attribute\n+have the @code{stack_protect} attribute.\n \n @item -fstdarg-opt\n @opindex fstdarg-opt\n@@ -24418,21 +24418,20 @@ for @option{-fpie} and 2 for @option{-fPIE}.\n \n @item -fno-plt\n @opindex fno-plt\n-Do not use PLT for external function calls in position-independent code.\n-Instead, load callee address at call site from GOT and branch to it.\n+Do not use the PLT for external function calls in position-independent code.\n+Instead, load the callee address at call sites from the GOT and branch to it.\n This leads to more efficient code by eliminating PLT stubs and exposing\n-GOT load to optimizations.  On architectures such as 32-bit x86 where\n-PLT stubs expect GOT pointer in a specific register, this gives more\n-register allocation freedom to the compiler.  Lazy binding requires PLT:\n+GOT loads to optimizations.  On architectures such as 32-bit x86 where\n+PLT stubs expect the GOT pointer in a specific register, this gives more\n+register allocation freedom to the compiler.\n+Lazy binding requires use of the PLT; \n with @option{-fno-plt} all external symbols are resolved at load time.\n \n-Alternatively, function attribute @code{noplt} can be used to avoid PLT\n-for calls to specific external functions by marking those functions with\n-this attribute.\n+Alternatively, the function attribute @code{noplt} can be used to avoid calls\n+through the PLT for specific external functions.\n \n-Additionally, a few targets also convert calls to those functions that are\n-marked to not use the PLT to use the GOT instead for non-position independent\n-code.\n+In position-dependent code, a few targets also convert calls to\n+functions that are marked to not use the PLT to use the GOT instead.\n \n @item -fno-jump-tables\n @opindex fno-jump-tables"}]}