{"sha": "e4fa6b06f01a3b6074ff446d948e705dccf2af96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmYTZiMDZmMDFhM2I2MDc0ZmY0NDZkOTQ4ZTcwNWRjY2YyYWY5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-06-04T18:13:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-06-04T18:13:21Z"}, "message": "Align code at the start of loops and after branches.\n\nAlign code at the start of loops and after branches.  Don't accept\nnegative zero in fp_zero_operand.\n\nFrom-SVN: r12155", "tree": {"sha": "abd60dd9ceeb3110ef0f5bbe98e1e42417b18cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abd60dd9ceeb3110ef0f5bbe98e1e42417b18cc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4fa6b06f01a3b6074ff446d948e705dccf2af96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fa6b06f01a3b6074ff446d948e705dccf2af96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fa6b06f01a3b6074ff446d948e705dccf2af96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fa6b06f01a3b6074ff446d948e705dccf2af96/comments", "author": null, "committer": null, "parents": [{"sha": "446b03afbb0bc351c36a92c103d68e83f0f57937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446b03afbb0bc351c36a92c103d68e83f0f57937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446b03afbb0bc351c36a92c103d68e83f0f57937"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "d3f1e0f03ad354a51d4dcf5212142a5e438c1601", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4fa6b06f01a3b6074ff446d948e705dccf2af96/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4fa6b06f01a3b6074ff446d948e705dccf2af96/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e4fa6b06f01a3b6074ff446d948e705dccf2af96", "patch": "@@ -552,8 +552,16 @@ output_branch (logic, insn, operands)\n      rtx *operands;\n {\n   int label = lf++;\n+  int length = get_attr_length (insn);\n+  int adjusted_length;\n \n-  switch (get_attr_length (insn))\n+  /* Undo the effects of ADJUST_INSN_LENGTH, so that we get the real\n+     length.  */\n+  adjusted_length = length;\n+  ADJUST_INSN_LENGTH (insn, adjusted_length);\n+  length -= (adjusted_length - length);\n+\n+  switch (length)\n     {\n     case 2:\n       /* A branch with an unfilled delay slot.  */\n@@ -626,7 +634,8 @@ output_branch (logic, insn, operands)\n       }\n       return \"\";\n     }\n-  return \"bad\";\n+\n+  abort ();\n }\n \f\n /* Output to FILE the start of the assembler file.  */\n@@ -1206,6 +1215,27 @@ find_barrier (from)\n       hi_limit = 500;\n     }\n \n+  /* If not optimizing for space, then the constant pool will be\n+     aligned to a 4 to 16 byte boundary.  We must make room for that\n+     alignment that by reducing the limits.\n+     ??? It would be better to not align the constant pool, but\n+     ASM_OUTPUT_ALIGN_CODE does not make any provision for basing the\n+     alignment on the instruction.  */\n+\n+  if (! TARGET_SMALLCODE)\n+    {\n+      if (TARGET_SH3 || TARGET_SH3E)\n+\t{\n+\t  si_limit -= 14;\n+\t  hi_limit -= 14;\n+\t}\n+      else\n+\t{\n+\t  si_limit -= 2;\n+\t  hi_limit -= 2;\n+\t}\n+    }\n+\n   while (from && count_si < si_limit && count_hi < hi_limit)\n     {\n       int inc = get_attr_length (from);\n@@ -2228,7 +2258,7 @@ fp_zero_operand (op)\n     return 0;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  return REAL_VALUES_EQUAL (r, dconst0);\n+  return REAL_VALUES_EQUAL (r, dconst0) && ! REAL_VALUE_MINUS_ZERO (r);\n }\n \n /* Nonzero if OP is a floating point value with value 1.0.  */"}]}