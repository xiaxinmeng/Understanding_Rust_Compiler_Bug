{"sha": "a369b6399c43d766cd7690753dbac32c4221354d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2OWI2Mzk5YzQzZDc2NmNkNzY5MDc1M2RiYWMzMmM0MjIxMzU0ZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-06T13:19:04Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-06T13:19:04Z"}, "message": "Use pointer_mode for address computation.\n\ngcc/\n\n2011-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/47383\n\t* tree-ssa-address.c (addr_for_mem_ref): Use pointer_mode for\n\taddress computation and convert to address_mode if needed.\n\ngcc/testsuite/\n\n2011-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/47383\n\t* gcc.dg/pr47383.c: New.\n\nFrom-SVN: r175912", "tree": {"sha": "cdee2f1965dff3296ef8dd20710c45a7e5891482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdee2f1965dff3296ef8dd20710c45a7e5891482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a369b6399c43d766cd7690753dbac32c4221354d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a369b6399c43d766cd7690753dbac32c4221354d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a369b6399c43d766cd7690753dbac32c4221354d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a369b6399c43d766cd7690753dbac32c4221354d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dabd0988aee468283923a7716d1309db313c2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dabd0988aee468283923a7716d1309db313c2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dabd0988aee468283923a7716d1309db313c2a7"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "ab167113bcdf31a734eede51915147fd43f762c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a369b6399c43d766cd7690753dbac32c4221354d", "patch": "@@ -1,3 +1,9 @@\n+2011-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/47383\n+\t* tree-ssa-address.c (addr_for_mem_ref): Use pointer_mode for\n+\taddress computation and convert to address_mode if needed.\n+\n 2011-07-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (build_common_tree_nodes_2): Merge with"}, {"sha": "99d804e118ec9f93a0c13510f9dcb67ce7a47361", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a369b6399c43d766cd7690753dbac32c4221354d", "patch": "@@ -1,3 +1,8 @@\n+2011-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/47383\n+\t* gcc.dg/pr47383.c: New.\n+\n 2011-07-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR tree-optimization/49647"}, {"sha": "3e2b9ba18a2fd44849bc49dd356efe07100b8f37", "filename": "gcc/testsuite/gcc.dg/pr47383.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr47383.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr47383.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr47383.c?ref=a369b6399c43d766cd7690753dbac32c4221354d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target fpic } } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+\n+static int heap[2*(256 +1+29)+1];\n+static int heap_len;\n+static int heap_max;\n+void \n+__attribute__ ((noinline))\n+foo (int elems)\n+{\n+  int n, m;\n+  int max_code = -1;\n+  int node = elems;\n+  heap_len = 0, heap_max = (2*(256 +1+29)+1);\n+  for (n = 0; n < elems; n++)\n+    heap[++heap_len] = max_code = n;\n+  do {\n+    n = heap[1];\n+    heap[1] = heap[heap_len--];\n+    m = heap[1];\n+    heap[--heap_max] = n;\n+    heap[--heap_max] = m;\n+  } while (heap_len >= 2);\n+}\n+\n+int\n+main ()\n+{\n+  foo (286);\n+  return 0;\n+}"}, {"sha": "c6dced114b7ae932a92167bce7c1caad9b8f6b1a", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a369b6399c43d766cd7690753dbac32c4221354d/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=a369b6399c43d766cd7690753dbac32c4221354d", "patch": "@@ -189,19 +189,20 @@ addr_for_mem_ref (struct mem_address *addr, addr_space_t as,\n \t\t  bool really_expand)\n {\n   enum machine_mode address_mode = targetm.addr_space.address_mode (as);\n+  enum machine_mode pointer_mode = targetm.addr_space.pointer_mode (as);\n   rtx address, sym, bse, idx, st, off;\n   struct mem_addr_template *templ;\n \n   if (addr->step && !integer_onep (addr->step))\n-    st = immed_double_int_const (tree_to_double_int (addr->step), address_mode);\n+    st = immed_double_int_const (tree_to_double_int (addr->step), pointer_mode);\n   else\n     st = NULL_RTX;\n \n   if (addr->offset && !integer_zerop (addr->offset))\n     off = immed_double_int_const\n \t    (double_int_sext (tree_to_double_int (addr->offset),\n \t\t\t      TYPE_PRECISION (TREE_TYPE (addr->offset))),\n-\t     address_mode);\n+\t     pointer_mode);\n   else\n     off = NULL_RTX;\n \n@@ -220,16 +221,16 @@ addr_for_mem_ref (struct mem_address *addr, addr_space_t as,\n       if (!templ->ref)\n \t{\n \t  sym = (addr->symbol ?\n-\t\t gen_rtx_SYMBOL_REF (address_mode, ggc_strdup (\"test_symbol\"))\n+\t\t gen_rtx_SYMBOL_REF (pointer_mode, ggc_strdup (\"test_symbol\"))\n \t\t : NULL_RTX);\n \t  bse = (addr->base ?\n-\t\t gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 1)\n+\t\t gen_raw_REG (pointer_mode, LAST_VIRTUAL_REGISTER + 1)\n \t\t : NULL_RTX);\n \t  idx = (addr->index ?\n-\t\t gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 2)\n+\t\t gen_raw_REG (pointer_mode, LAST_VIRTUAL_REGISTER + 2)\n \t\t : NULL_RTX);\n \n-\t  gen_addr_rtx (address_mode, sym, bse, idx,\n+\t  gen_addr_rtx (pointer_mode, sym, bse, idx,\n \t\t\tst? const0_rtx : NULL_RTX,\n \t\t\toff? const0_rtx : NULL_RTX,\n \t\t\t&templ->ref,\n@@ -247,16 +248,18 @@ addr_for_mem_ref (struct mem_address *addr, addr_space_t as,\n \n   /* Otherwise really expand the expressions.  */\n   sym = (addr->symbol\n-\t ? expand_expr (addr->symbol, NULL_RTX, address_mode, EXPAND_NORMAL)\n+\t ? expand_expr (addr->symbol, NULL_RTX, pointer_mode, EXPAND_NORMAL)\n \t : NULL_RTX);\n   bse = (addr->base\n-\t ? expand_expr (addr->base, NULL_RTX, address_mode, EXPAND_NORMAL)\n+\t ? expand_expr (addr->base, NULL_RTX, pointer_mode, EXPAND_NORMAL)\n \t : NULL_RTX);\n   idx = (addr->index\n-\t ? expand_expr (addr->index, NULL_RTX, address_mode, EXPAND_NORMAL)\n+\t ? expand_expr (addr->index, NULL_RTX, pointer_mode, EXPAND_NORMAL)\n \t : NULL_RTX);\n \n-  gen_addr_rtx (address_mode, sym, bse, idx, st, off, &address, NULL, NULL);\n+  gen_addr_rtx (pointer_mode, sym, bse, idx, st, off, &address, NULL, NULL);\n+  if (pointer_mode != address_mode)\n+    address = convert_memory_address (address_mode, address);\n   return address;\n }\n "}]}