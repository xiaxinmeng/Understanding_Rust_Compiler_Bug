{"sha": "9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyMjU2ZGNkNDgxZmZlM2E4Yzc5YjY1ZWJhMTlmYmIxNGI3ZmY4ZA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-10-26T13:36:24Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-10-26T13:36:24Z"}, "message": "c++: Implement __is_nothrow_constructible and __is_nothrow_assignable\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (__is_nothrow_assignable): New.\n\t(__is_nothrow_constructible): Likewise.\n\t* c-common.h (RID_IS_NOTHROW_ASSIGNABLE): New.\n\t(RID_IS_NOTHROW_CONSTRUCTIBLE): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (CPTK_IS_NOTHROW_ASSIGNABLE): New.\n\t(CPTK_IS_NOTHROW_CONSTRUCTIBLE): Likewise.\n\t(is_nothrow_xible): Likewise.\n\t* method.c (is_nothrow_xible): New.\n\t(is_trivially_xible): Tweak.\n\t* parser.c (cp_parser_primary_expression): Handle the new RID_*.\n\t(cp_parser_trait_expr): Likewise.\n\t* semantics.c (trait_expr_value): Handle the new RID_*.\n\t(finish_trait_expr): Likewise.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (__is_nt_constructible_impl): Remove.\n\t(__is_nothrow_constructible_impl): Adjust.\n\t(is_nothrow_default_constructible): Likewise.\n\t(__is_nt_assignable_impl): Remove.\n\t(__is_nothrow_assignable_impl): Adjust.", "tree": {"sha": "3529c16b86b6fca18f65c782508ea6af9d01ec38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3529c16b86b6fca18f65c782508ea6af9d01ec38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783dc02d89712f5219093d33ad7f08e1509a2134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783dc02d89712f5219093d33ad7f08e1509a2134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783dc02d89712f5219093d33ad7f08e1509a2134"}], "stats": {"total": 201, "additions": 148, "deletions": 53}, "files": [{"sha": "d56238aeb019d9cb301e7aaff455d28ed52c17f6", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -527,6 +527,8 @@ const struct c_common_resword c_common_reswords[] =\n   { \"while\",\t\tRID_WHILE,\t0 },\n   { \"__is_assignable\", RID_IS_ASSIGNABLE, D_CXXONLY },\n   { \"__is_constructible\", RID_IS_CONSTRUCTIBLE, D_CXXONLY },\n+  { \"__is_nothrow_assignable\", RID_IS_NOTHROW_ASSIGNABLE, D_CXXONLY },\n+  { \"__is_nothrow_constructible\", RID_IS_NOTHROW_CONSTRUCTIBLE, D_CXXONLY },\n \n   /* C++ transactional memory.  */\n   { \"synchronized\",\tRID_SYNCHRONIZED, D_CXX_OBJC | D_TRANSMEM },"}, {"sha": "18b489d55a3418cd4bf04c039143b96118fabd1c", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -176,6 +176,7 @@ enum rid\n   RID_IS_TRIVIALLY_COPYABLE,\n   RID_IS_UNION,                RID_UNDERLYING_TYPE,\n   RID_IS_ASSIGNABLE,           RID_IS_CONSTRUCTIBLE,\n+  RID_IS_NOTHROW_ASSIGNABLE,   RID_IS_NOTHROW_CONSTRUCTIBLE,\n \n   /* C++11 */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,"}, {"sha": "1ce20989e1336457db9418f84743c244910d1f1e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -1323,7 +1323,9 @@ enum cp_trait_kind\n   CPTK_IS_UNION,\n   CPTK_UNDERLYING_TYPE,\n   CPTK_IS_ASSIGNABLE,\n-  CPTK_IS_CONSTRUCTIBLE\n+  CPTK_IS_CONSTRUCTIBLE,\n+  CPTK_IS_NOTHROW_ASSIGNABLE,\n+  CPTK_IS_NOTHROW_CONSTRUCTIBLE\n };\n \n /* The types that we are processing.  */\n@@ -6752,6 +6754,7 @@ extern void use_thunk\t\t\t\t(tree, bool);\n extern bool trivial_fn_p\t\t\t(tree);\n extern tree forward_parm\t\t\t(tree);\n extern bool is_trivially_xible\t\t\t(enum tree_code, tree, tree);\n+extern bool is_nothrow_xible\t\t\t(enum tree_code, tree, tree);\n extern bool is_xible\t\t\t\t(enum tree_code, tree, tree);\n extern tree get_defaulted_eh_spec\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n extern bool maybe_explain_implicit_delete\t(tree);"}, {"sha": "16e76351943fc0c7d17ae7e5194c4566fdc4918d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -1924,15 +1924,26 @@ is_xible_helper (enum tree_code code, tree to, tree from, bool trivial)\n bool\n is_trivially_xible (enum tree_code code, tree to, tree from)\n {\n-  tree expr;\n-  expr = is_xible_helper (code, to, from, /*trivial*/true);\n-\n+  tree expr = is_xible_helper (code, to, from, /*trivial*/true);\n   if (expr == NULL_TREE || expr == error_mark_node)\n     return false;\n   tree nt = cp_walk_tree_without_duplicates (&expr, check_nontriv, NULL);\n   return !nt;\n }\n \n+/* Returns true iff TO is nothrow assignable (if CODE is MODIFY_EXPR) or\n+   constructible (otherwise) from FROM, which is a single type for\n+   assignment or a list of types for construction.  */\n+\n+bool\n+is_nothrow_xible (enum tree_code code, tree to, tree from)\n+{\n+  tree expr = is_xible_helper (code, to, from, /*trivial*/false);\n+  if (expr == NULL_TREE || expr == error_mark_node)\n+    return false;\n+  return expr_noexcept_p (expr, tf_none);\n+}\n+\n /* Returns true iff TO is assignable (if CODE is MODIFY_EXPR) or\n    constructible (otherwise) from FROM, which is a single type for\n    assignment or a list of types for construction.  */"}, {"sha": "cce3d0a679eb41dd3577bfeae9c9f20e676a4206", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -5637,6 +5637,8 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_IS_UNION:\n \tcase RID_IS_ASSIGNABLE:\n \tcase RID_IS_CONSTRUCTIBLE:\n+\tcase RID_IS_NOTHROW_ASSIGNABLE:\n+\tcase RID_IS_NOTHROW_CONSTRUCTIBLE:\n \t  return cp_parser_trait_expr (parser, token->keyword);\n \n \t// C++ concepts\n@@ -10501,6 +10503,14 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n       kind = CPTK_IS_CONSTRUCTIBLE;\n       variadic = true;\n       break;\n+    case RID_IS_NOTHROW_ASSIGNABLE:\n+      kind = CPTK_IS_NOTHROW_ASSIGNABLE;\n+      binary = true;\n+      break;\n+    case RID_IS_NOTHROW_CONSTRUCTIBLE:\n+      kind = CPTK_IS_NOTHROW_CONSTRUCTIBLE;\n+      variadic = true;\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "ac488478f3643a657e67a882ed62baa503c93e3f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -10133,6 +10133,12 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_IS_CONSTRUCTIBLE:\n       return is_xible (INIT_EXPR, type1, type2);\n \n+    case CPTK_IS_NOTHROW_ASSIGNABLE:\n+      return is_nothrow_xible (MODIFY_EXPR, type1, type2);\n+\n+    case CPTK_IS_NOTHROW_CONSTRUCTIBLE:\n+      return is_nothrow_xible (INIT_EXPR, type1, type2);\n+\n     default:\n       gcc_unreachable ();\n       return false;\n@@ -10213,6 +10219,8 @@ finish_trait_expr (location_t loc, cp_trait_kind kind, tree type1, tree type2)\n \n     case CPTK_IS_TRIVIALLY_ASSIGNABLE:\n     case CPTK_IS_TRIVIALLY_CONSTRUCTIBLE:\n+    case CPTK_IS_NOTHROW_ASSIGNABLE:\n+    case CPTK_IS_NOTHROW_CONSTRUCTIBLE:\n       if (!check_trait_type (type1)\n \t  || !check_trait_type (type2))\n \treturn error_mark_node;"}, {"sha": "472acf9f88f132f98109dfc7e7b5d3046e0fbdbf", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_constructible1.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible1.C?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct A { };\n+struct B { B(); operator int(); };\n+struct C {\n+  C() = default;\n+  C(const C&);\n+  C(C&&) = default;\n+  C& operator=(C&&);\n+  C& operator= (const C&) = default;\n+};\n+struct D { ~D() noexcept(false) {} };\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__is_nothrow_constructible(A));\n+SA(__is_nothrow_constructible(A,A));\n+SA(!__is_nothrow_constructible(B));\n+SA(__is_nothrow_constructible(B,B));\n+\n+SA(!__is_nothrow_constructible(A,B));\n+SA(!__is_nothrow_constructible(B,A));\n+\n+SA(__is_nothrow_constructible(C));\n+SA(__is_nothrow_constructible(C,C));\n+SA(!__is_nothrow_constructible(C,C&));\n+SA(__is_nothrow_assignable(C,C&));\n+SA(!__is_nothrow_assignable(C,C));\n+SA(!__is_nothrow_assignable(C,C&&));\n+SA(!__is_nothrow_assignable(void,int));\n+SA(!__is_nothrow_assignable(const void,int));\n+SA(!__is_nothrow_assignable(volatile void,int));\n+SA(!__is_nothrow_assignable(const volatile void,int));\n+\n+SA(__is_nothrow_constructible(int,int));\n+SA(__is_nothrow_constructible(int,double));\n+SA(!__is_nothrow_constructible(int,B));\n+SA(!__is_nothrow_constructible(void,int));\n+SA(!__is_nothrow_constructible(const void,int));\n+SA(!__is_nothrow_constructible(volatile void,int));\n+SA(!__is_nothrow_constructible(const volatile void,int));\n+SA(!__is_nothrow_constructible(int, void*));\n+SA(!__is_nothrow_constructible(int, int*));\n+SA(!__is_nothrow_constructible(int, const int*));\n+SA(!__is_nothrow_constructible(int*, void*));\n+SA(!__is_nothrow_constructible(int*, const int*));\n+\n+SA(!__is_nothrow_constructible(D));"}, {"sha": "86b9668da6eadd77bf30c74387730783d4f2d365", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_constructible2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible2.C?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct X {\n+  X() = default;\n+  template<class... U> X(U...) noexcept;\n+};\n+\n+struct Y {\n+  template<class... U> Y(U...);\n+};\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__is_nothrow_constructible(X));\n+SA(!__is_nothrow_constructible(Y));"}, {"sha": "220ee0bb89e7e7abd18080c8a07f361ff9df2b39", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_constructible3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible3.C?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <class T, class... Args> void bar() {\n+  static_assert(__is_nothrow_constructible(T, Args...), \"\");\n+}\n+\n+template void bar<int>();\n+template void bar<int,int>();"}, {"sha": "9448c2d31e457dc473cc1d274c72b4174706c31a", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_constructible4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible4.C?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+void f()\n+{\n+  int x;\n+  auto l = [=]{ return x; };\n+  typedef decltype(l) C;\n+  SA(__is_nothrow_constructible(C,C));\n+}"}, {"sha": "b8471130481938ddff4e2a46b8dd8796ce5dea5f", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_constructible5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible5.C?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/80991\n+// { dg-do compile { target c++11 } }\n+\n+template<bool> void foo()\n+{\n+  static_assert(__is_nothrow_constructible(int, int), \"\");\n+}\n+\n+void bar()\n+{\n+  foo<true>();\n+}"}, {"sha": "bdfdfb99de2b5db16116c37bde31a3187d0fee1c", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_constructible6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_constructible6.C?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+// PR c++/81589\n+\n+template <typename k>\n+struct z {\n+  z() noexcept {\n+    k::error;\n+  }\n+};\n+\n+int x = __is_nothrow_constructible(z<int>);"}, {"sha": "e9a0f55dd4a8cfe841e1dc909995b51bffa5ca30", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=9e2256dcd481ffe3a8c79b65eba19fbb14b7ff8d", "patch": "@@ -963,47 +963,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-  template<bool, typename _Tp, typename... _Args>\n-    struct __is_nt_constructible_impl\n-    : public false_type\n-    { };\n-\n-  template<typename _Tp, typename... _Args>\n-    struct __is_nt_constructible_impl<true, _Tp, _Args...>\n-    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>\n-    { };\n-\n-  template<typename _Tp, typename _Arg>\n-    struct __is_nt_constructible_impl<true, _Tp, _Arg>\n-    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_nt_constructible_impl<true, _Tp>\n-    : public __bool_constant<noexcept(_Tp())>\n-    { };\n-\n-  template<typename _Tp, size_t _Num>\n-    struct __is_nt_constructible_impl<true, _Tp[_Num]>\n-    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>\n-    { };\n-\n-#if __cpp_aggregate_paren_init\n-  template<typename _Tp, size_t _Num, typename _Arg>\n-    struct __is_nt_constructible_impl<true, _Tp[_Num], _Arg>\n-    : public __is_nt_constructible_impl<true, _Tp, _Arg>\n-    { };\n-\n-  template<typename _Tp, size_t _Num, typename... _Args>\n-    struct __is_nt_constructible_impl<true, _Tp[_Num], _Args...>\n-    : public __and_<__is_nt_constructible_impl<true, _Tp, _Args>...>\n-    { };\n-#endif\n-\n   template<typename _Tp, typename... _Args>\n     using __is_nothrow_constructible_impl\n-      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),\n-\t\t\t\t   _Tp, _Args...>;\n+      = __bool_constant<__is_nothrow_constructible(_Tp, _Args...)>;\n \n   /// is_nothrow_constructible\n   template<typename _Tp, typename... _Args>\n@@ -1017,7 +979,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_nothrow_default_constructible\n   template<typename _Tp>\n     struct is_nothrow_default_constructible\n-    : public __is_nothrow_constructible_impl<_Tp>::type\n+    : public __bool_constant<__is_nothrow_constructible(_Tp)>\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n \t\"template argument must be a complete class or an unbounded array\");\n@@ -1118,15 +1080,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Tp, typename _Up>\n-    struct __is_nt_assignable_impl\n-    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>\n-    { };\n-\n-  template<typename _Tp, typename _Up>\n-    struct __is_nothrow_assignable_impl\n-    : public __and_<__bool_constant<__is_assignable(_Tp, _Up)>,\n-\t\t    __is_nt_assignable_impl<_Tp, _Up>>\n-    { };\n+    using __is_nothrow_assignable_impl\n+      = __bool_constant<__is_nothrow_assignable(_Tp, _Up)>;\n \n   /// is_nothrow_assignable\n   template<typename _Tp, typename _Up>"}]}