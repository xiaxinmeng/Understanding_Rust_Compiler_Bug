{"sha": "ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1OWY5YmVlYzRlMmY0NGJkM2MwNGViOGY0ZmI5NDMyZmVhZWE0MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-06-05T13:35:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-06-05T13:35:30Z"}, "message": "re PR c++/52595 ([DR 325] commas and non-static data member initializers don't mix)\n\n\tcp/\n\tPR c++/52595\n\t* parser.c (cp_parser_cache_defarg): Continue looking for\n\tdeclarators when scanning a potential template argument list of an\n\tNSDMI.\n\n\ttestsuite/\n\tPR c++/52595\n\t* g++,dg/cpp0x/nsdmi-defer5.C: Add template case.\n\nFrom-SVN: r224152", "tree": {"sha": "4500de3ce0d127790dc285f5cd84d207f6202132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4500de3ce0d127790dc285f5cd84d207f6202132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22749d7e82c9fa8a276266b94df1807d23d478c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22749d7e82c9fa8a276266b94df1807d23d478c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22749d7e82c9fa8a276266b94df1807d23d478c6"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "e845b9f17ce4170c3e6617c253591dab680699a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "patch": "@@ -1,3 +1,10 @@\n+2015-06-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/52595\n+\t* parser.c (cp_parser_cache_defarg): Continue looking for\n+\tdeclarators when scanning a potential template argument list of an\n+\tNSDMI.\n+\n 2015-06-04  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* call.c: Adjust includes for restructured coretypes.h."}, {"sha": "2ea61c02ed2c17831395185840f491191b39594a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "patch": "@@ -25388,26 +25388,47 @@ cp_parser_cache_defarg (cp_parser *parser, bool nsdmi)\n \t\t the default argument; otherwise the default\n \t\t argument continues.  */\n \t      bool error = false;\n+\t      cp_token *peek;\n \n \t      /* Set ITALP so cp_parser_parameter_declaration_list\n \t\t doesn't decide to commit to this parse.  */\n \t      bool saved_italp = parser->in_template_argument_list_p;\n \t      parser->in_template_argument_list_p = true;\n \n \t      cp_parser_parse_tentatively (parser);\n-\t      cp_lexer_consume_token (parser->lexer);\n \n \t      if (nsdmi)\n \t\t{\n-\t\t  int ctor_dtor_or_conv_p;\n-\t\t  cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n-\t\t\t\t\t&ctor_dtor_or_conv_p,\n-\t\t\t\t\t/*parenthesized_p=*/NULL,\n-\t\t\t\t\t/*member_p=*/true,\n-\t\t\t\t\t/*friend_p=*/false);\n+\t\t  /* Parse declarators until we reach a non-comma or\n+\t\t     somthing that cannot be an initializer.\n+\t\t     Just checking whether we're looking at a single\n+\t\t     declarator is insufficient.  Consider:\n+\t\t       int var = tuple<T,U>::x;\n+\t\t     The template parameter 'U' looks exactly like a\n+\t\t     declarator.  */\n+\t\t  do\n+\t\t    {\n+\t\t      int ctor_dtor_or_conv_p;\n+\t\t      cp_lexer_consume_token (parser->lexer);\n+\t\t      cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\t    &ctor_dtor_or_conv_p,\n+\t\t\t\t\t    /*parenthesized_p=*/NULL,\n+\t\t\t\t\t    /*member_p=*/true,\n+\t\t\t\t\t    /*friend_p=*/false);\n+\t\t      peek = cp_lexer_peek_token (parser->lexer);\n+\t\t      if (cp_parser_error_occurred (parser))\n+\t\t\tbreak;\n+\t\t    }\n+\t\t  while (peek->type == CPP_COMMA);\n+\t\t  /* If we met an '=' or ';' then the original comma\n+\t\t     was the end of the NSDMI.  Otherwise assume\n+\t\t     we're still in the NSDMI.  */\n+\t\t  error = (peek->type != CPP_EQ\n+\t\t\t   && peek->type != CPP_SEMICOLON);\n \t\t}\n \t      else\n \t\t{\n+\t\t  cp_lexer_consume_token (parser->lexer);\n \t\t  begin_scope (sk_function_parms, NULL_TREE);\n \t\t  cp_parser_parameter_declaration_list (parser, &error);\n \t\t  pop_bindings_and_leave_scope ();"}, {"sha": "3d5ce994a973cde12c4bef2872e076388ee2229a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "patch": "@@ -1,3 +1,8 @@\n+2015-06-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/52595\n+\t* g++,dg/cpp0x/nsdmi-defer5.C: Add template case.\n+\n 2015-06-05  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* gcc.target/arm/neon-reload-class.c: Remove movw and movt."}, {"sha": "cb74d8f849ffb51296da40bf7c5727add97ac063", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-defer5.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-defer5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-defer5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-defer5.C?ref=ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "patch": "@@ -5,6 +5,9 @@ template<typename T, typename U>\n struct tuple\n {\n   tuple(T, U) { }\n+\n+  static const int x = 3;\n+  int var = tuple<T,U>::x;\n };\n \n struct Y"}]}