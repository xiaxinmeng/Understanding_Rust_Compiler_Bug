{"sha": "6ac935c1503763d48c8f461d6fa8349a38513e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjOTM1YzE1MDM3NjNkNDhjOGY0NjFkNmZhODM0OWEzODUxM2U4NQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2008-04-03T19:31:28Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-04-03T19:31:28Z"}, "message": "mips.md (any_gt, [...]): New code iterators.\n\n\t* config/mips/mips.md (any_gt, any_ge, any_lt, any_le): New code\n\titerators.\n\t(u): Add attribute values for gt, gtu, ge, geu, lt, ltu, le and\n\tleu.\n\t(sgt<u>): Merge sgt and sgtu into new expander.\n\t(sgt, sgtu): Remove expanders.\n\t(*sgt<u>_<mode>): Merge *sgt_<mode> and *sgtu_<mode> into new\n\tpattern.\n\t(*sgt_<mode>, *sgtu_<mode>): Remove patterns.\n\t(*sgt<u>_<mode>_mips16): Merge *sgt_<mode>_mips16 and\n\t*sgtu_<mode>_mips16 into new pattern.\n\t(*sgt_<mode>_mips16, *sgtu_<mode>_mips16): Remove patterns.\n\t(sge<u>): Merge sge and sgeu into new expander.\n\t(sge, sgeu): Remove expanders.\n\t(*sge<u>_<mode>): Merge *sge_<mode> and second *sge_<mode> into\n\tnew pattern.\n\t(*sge_<mode>, second *sge_<mode>): Remove patterns.\n\t(slt<u>): Merge slt and sltu into new expander.\n\t(slt, sltu): Remove expanders.\n\t(*slt<u>_<mode>): Merge *slt_<mode> and *sltu_<mode> into new\n\tpattern.\n\t(*slt_<mode>, *sltu_<mode>): Remove patterns.\n\t(*slt<u>_<mode>_mips16): Merge *slt_<mode>_mips16 and\n\t*sltu_<mode>_mips16 into new pattern.\n\t(*slt_<mode>_mips16, *sltu_<mode>_mips16): Remove patterns.\n\t(sle<u>): Merge sle and sleu into new expander.\n\t(sle, sleu): Remove expanders.\n\t(*sle<u>_<mode>): Merge *sle_<mode> and *sleu_<mode> into new\n\tpattern.\n\t(*sle_<mode>, *sleu_<mode>): Remove patterns.\n\t(*sle<u>_<mode>_mips16): Merge *sle_<mode>_mips16 and\n\t*sleu_<mode>_mips16 into new pattern.\n\t(*sle_<mode>_mips16, *sleu_<mode>_mips16): Remove patterns.\n\ntestsuite/\n\n\t* gcc.target/mips/scc-1.c: New test.\n\nFrom-SVN: r133872", "tree": {"sha": "c57a428bbaccf5ba6c74773cdc722e1afb1d02fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c57a428bbaccf5ba6c74773cdc722e1afb1d02fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac935c1503763d48c8f461d6fa8349a38513e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac935c1503763d48c8f461d6fa8349a38513e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac935c1503763d48c8f461d6fa8349a38513e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac935c1503763d48c8f461d6fa8349a38513e85/comments", "author": null, "committer": null, "parents": [{"sha": "6b0c2336ba22b3d0e8d36651169a5bab2b25fe35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0c2336ba22b3d0e8d36651169a5bab2b25fe35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0c2336ba22b3d0e8d36651169a5bab2b25fe35"}], "stats": {"total": 281, "additions": 131, "deletions": 150}, "files": [{"sha": "e57b0d3787dbbcc884004d7b36be3d9b84a5cf4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ac935c1503763d48c8f461d6fa8349a38513e85", "patch": "@@ -1,3 +1,39 @@\n+2008-04-03  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.md (any_gt, any_ge, any_lt, any_le): New code\n+\titerators.\n+\t(u): Add attribute values for gt, gtu, ge, geu, lt, ltu, le and\n+\tleu.\n+\t(sgt<u>): Merge sgt and sgtu into new expander.\n+\t(sgt, sgtu): Remove expanders.\n+\t(*sgt<u>_<mode>): Merge *sgt_<mode> and *sgtu_<mode> into new\n+\tpattern.\n+\t(*sgt_<mode>, *sgtu_<mode>): Remove patterns.\n+\t(*sgt<u>_<mode>_mips16): Merge *sgt_<mode>_mips16 and\n+\t*sgtu_<mode>_mips16 into new pattern.\n+\t(*sgt_<mode>_mips16, *sgtu_<mode>_mips16): Remove patterns.\n+\t(sge<u>): Merge sge and sgeu into new expander.\n+\t(sge, sgeu): Remove expanders.\n+\t(*sge<u>_<mode>): Merge *sge_<mode> and second *sge_<mode> into\n+\tnew pattern.\n+\t(*sge_<mode>, second *sge_<mode>): Remove patterns.\n+\t(slt<u>): Merge slt and sltu into new expander.\n+\t(slt, sltu): Remove expanders.\n+\t(*slt<u>_<mode>): Merge *slt_<mode> and *sltu_<mode> into new\n+\tpattern.\n+\t(*slt_<mode>, *sltu_<mode>): Remove patterns.\n+\t(*slt<u>_<mode>_mips16): Merge *slt_<mode>_mips16 and\n+\t*sltu_<mode>_mips16 into new pattern.\n+\t(*slt_<mode>_mips16, *sltu_<mode>_mips16): Remove patterns.\n+\t(sle<u>): Merge sle and sleu into new expander.\n+\t(sle, sleu): Remove expanders.\n+\t(*sle<u>_<mode>): Merge *sle_<mode> and *sleu_<mode> into new\n+\tpattern.\n+\t(*sle_<mode>, *sleu_<mode>): Remove patterns.\n+\t(*sle<u>_<mode>_mips16): Merge *sle_<mode>_mips16 and\n+\t*sleu_<mode>_mips16 into new pattern.\n+\t(*sle_<mode>_mips16, *sleu_<mode>_mips16): Remove patterns.\n+\n 2008-04-03  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/35795"}, {"sha": "2083cb9ff50380b02201010f0d7589507a8a49d7", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 56, "deletions": 150, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=6ac935c1503763d48c8f461d6fa8349a38513e85", "patch": "@@ -610,9 +610,20 @@\n ;; by swapping the operands.\n (define_code_iterator swapped_fcond [ge gt unge ungt])\n \n+;; These code iterators allow the signed and unsigned scc operations to use\n+;; the same template.\n+(define_code_iterator any_gt [gt gtu])\n+(define_code_iterator any_ge [ge geu])\n+(define_code_iterator any_lt [lt ltu])\n+(define_code_iterator any_le [le leu])\n+\n ;; <u> expands to an empty string when doing a signed operation and\n ;; \"u\" when doing an unsigned operation.\n-(define_code_attr u [(sign_extend \"\") (zero_extend \"u\")])\n+(define_code_attr u [(sign_extend \"\") (zero_extend \"u\")\n+\t\t     (gt \"\") (gtu \"u\")\n+\t\t     (ge \"\") (geu \"u\")\n+\t\t     (lt \"\") (ltu \"u\")\n+\t\t     (le \"\") (leu \"u\")])\n \n ;; <su> is like <u>, but the signed form expands to \"s\" rather than \"\".\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n@@ -5098,174 +5109,69 @@\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"sgt\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(gt:SI (match_dup 1)\n-\t       (match_dup 2)))]\n-  \"\"\n-  { if (mips_expand_scc (GT, operands[0])) DONE; else FAIL; })\n-\n-(define_insn \"*sgt_<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(gt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t(match_operand:GPR 2 \"reg_or_0_operand\" \"dJ\")))]\n-  \"!TARGET_MIPS16\"\n-  \"slt\\t%0,%z2,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*sgt_<mode>_mips16\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n-\t(gt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t(match_operand:GPR 2 \"register_operand\" \"d\")))]\n-  \"TARGET_MIPS16\"\n-  \"slt\\t%2,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_expand \"sge\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(ge:SI (match_dup 1)\n-\t       (match_dup 2)))]\n-  \"\"\n-  { if (mips_expand_scc (GE, operands[0])) DONE; else FAIL; })\n-\n-(define_insn \"*sge_<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(ge:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t(const_int 1)))]\n-  \"!TARGET_MIPS16\"\n-  \"slt\\t%0,%.,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_expand \"slt\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(lt:SI (match_dup 1)\n-\t       (match_dup 2)))]\n-  \"\"\n-  { if (mips_expand_scc (LT, operands[0])) DONE; else FAIL; })\n-\n-(define_insn \"*slt_<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(lt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t(match_operand:GPR 2 \"arith_operand\" \"dI\")))]\n-  \"!TARGET_MIPS16\"\n-  \"slt\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*slt_<mode>_mips16\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=t,t\")\n-\t(lt:GPR (match_operand:GPR 1 \"register_operand\" \"d,d\")\n-\t\t(match_operand:GPR 2 \"arith_operand\" \"d,I\")))]\n-  \"TARGET_MIPS16\"\n-  \"slt\\t%1,%2\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand 2 \"m16_uimm8_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n-\n-(define_expand \"sle\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(le:SI (match_dup 1)\n-\t       (match_dup 2)))]\n-  \"\"\n-  { if (mips_expand_scc (LE, operands[0])) DONE; else FAIL; })\n-\n-(define_insn \"*sle_<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(le:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t(match_operand:GPR 2 \"sle_operand\" \"\")))]\n-  \"!TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"slt\\t%0,%1,%2\";\n-}\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*sle_<mode>_mips16\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n-\t(le:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t(match_operand:GPR 2 \"sle_operand\" \"\")))]\n-  \"TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"slt\\t%1,%2\";\n-}\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set (attr \"length\") (if_then_else (match_operand 2 \"m16_uimm8_m1_1\")\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 8)))])\n-\n-(define_expand \"sgtu\"\n+(define_expand \"sgt<u>\"\n   [(set (match_operand:SI 0 \"register_operand\")\n-\t(gtu:SI (match_dup 1)\n-\t\t(match_dup 2)))]\n+\t(any_gt:SI (match_dup 1)\n+\t\t   (match_dup 2)))]\n   \"\"\n-  { if (mips_expand_scc (GTU, operands[0])) DONE; else FAIL; })\n+  { if (mips_expand_scc (<CODE>, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sgtu_<mode>\"\n+(define_insn \"*sgt<u>_<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(gtu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t (match_operand:GPR 2 \"reg_or_0_operand\" \"dJ\")))]\n+\t(any_gt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:GPR 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"!TARGET_MIPS16\"\n-  \"sltu\\t%0,%z2,%1\"\n+  \"slt<u>\\t%0,%z2,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sgtu_<mode>_mips16\"\n+(define_insn \"*sgt<u>_<mode>_mips16\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n-\t(gtu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n+\t(any_gt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n-  \"sltu\\t%2,%1\"\n+  \"slt<u>\\t%2,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"sgeu\"\n+(define_expand \"sge<u>\"\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (geu:SI (match_dup 1)\n-                (match_dup 2)))]\n+\t(any_ge:SI (match_dup 1)\n+\t\t   (match_dup 2)))]\n   \"\"\n-  { if (mips_expand_scc (GEU, operands[0])) DONE; else FAIL; })\n+  { if (mips_expand_scc (<CODE>, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sge_<mode>\"\n+(define_insn \"*sge<u>_<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(geu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t         (const_int 1)))]\n+\t(any_ge:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (const_int 1)))]\n   \"!TARGET_MIPS16\"\n-  \"sltu\\t%0,%.,%1\"\n+  \"slt<u>\\t%0,%.,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"sltu\"\n+(define_expand \"slt<u>\"\n   [(set (match_operand:SI 0 \"register_operand\")\n-\t(ltu:SI (match_dup 1)\n-\t\t(match_dup 2)))]\n+\t(any_lt:SI (match_dup 1)\n+\t\t   (match_dup 2)))]\n   \"\"\n-  { if (mips_expand_scc (LTU, operands[0])) DONE; else FAIL; })\n+  { if (mips_expand_scc (<CODE>, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sltu_<mode>\"\n+(define_insn \"*slt<u>_<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(ltu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t (match_operand:GPR 2 \"arith_operand\" \"dI\")))]\n+\t(any_lt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:GPR 2 \"arith_operand\" \"dI\")))]\n   \"!TARGET_MIPS16\"\n-  \"sltu\\t%0,%1,%2\"\n+  \"slt<u>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sltu_<mode>_mips16\"\n+(define_insn \"*slt<u>_<mode>_mips16\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=t,t\")\n-\t(ltu:GPR (match_operand:GPR 1 \"register_operand\" \"d,d\")\n-\t\t (match_operand:GPR 2 \"arith_operand\" \"d,I\")))]\n+\t(any_lt:GPR (match_operand:GPR 1 \"register_operand\" \"d,d\")\n+\t\t    (match_operand:GPR 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_MIPS16\"\n-  \"sltu\\t%1,%2\"\n+  \"slt<u>\\t%1,%2\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n@@ -5274,33 +5180,33 @@\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n-(define_expand \"sleu\"\n+(define_expand \"sle<u>\"\n   [(set (match_operand:SI 0 \"register_operand\")\n-\t(leu:SI (match_dup 1)\n-\t\t(match_dup 2)))]\n+\t(any_le:SI (match_dup 1)\n+\t\t   (match_dup 2)))]\n   \"\"\n-  { if (mips_expand_scc (LEU, operands[0])) DONE; else FAIL; })\n+  { if (mips_expand_scc (<CODE>, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sleu_<mode>\"\n+(define_insn \"*sle<u>_<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(leu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t         (match_operand:GPR 2 \"sleu_operand\" \"\")))]\n+\t(any_le:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:GPR 2 \"sle_operand\" \"\")))]\n   \"!TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"sltu\\t%0,%1,%2\";\n+  return \"slt<u>\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sleu_<mode>_mips16\"\n+(define_insn \"*sle<u>_<mode>_mips16\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n-\t(leu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t         (match_operand:GPR 2 \"sleu_operand\" \"\")))]\n+\t(any_le:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:GPR 2 \"sle_operand\" \"\")))]\n   \"TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"sltu\\t%1,%2\";\n+  return \"slt<u>\\t%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")"}, {"sha": "22d1cecdaa83dcba3fbe7073c347965be11fb81d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ac935c1503763d48c8f461d6fa8349a38513e85", "patch": "@@ -1,3 +1,7 @@\n+2008-04-03  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/scc-1.c: New test.\n+\n 2008-04-03  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp43.c: New testcase."}, {"sha": "443b0bf7d170897119a8c38a067e4d93fcd68e90", "filename": "gcc/testsuite/gcc.target/mips/scc-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fscc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac935c1503763d48c8f461d6fa8349a38513e85/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fscc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fscc-1.c?ref=6ac935c1503763d48c8f461d6fa8349a38513e85", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O -mips32\" } */\n+\n+/* { dg-final { scan-assembler-times {slt\t\\$2,\\$5,\\$4} 1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$2,\\$5,\\$4} 1 } } */\n+/* { dg-final { scan-assembler-times {slt\t\\$5,\\$4} 1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$5,\\$4} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {slt\t\\$2,\\$0,\\$4} 1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$2,\\$0,\\$4} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {slt\t\\$2,\\$4,\\$5} 1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$2,\\$4,\\$5} 1 } } */\n+/* { dg-final { scan-assembler-times {slt\t\\$4,\\$5} 1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$4,\\$5} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {slt\t\\$2,\\$4,23}  1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$2,\\$4,23}  1 } } */\n+/* { dg-final { scan-assembler-times {slt\t\\$4,23}  1 } } */\n+/* { dg-final { scan-assembler-times {sltu\t\\$4,23}  1 } } */\n+\n+#define TEST(N, LHS, REL, RHS) \\\n+  NOMIPS16 int s##N (int a, int b) { return LHS REL RHS; } \\\n+  NOMIPS16 int u##N (unsigned a, unsigned b) { return LHS REL RHS; } \\\n+  MIPS16 int s##N##_16 (int a, int b) { return LHS REL RHS; } \\\n+  MIPS16 int u##N##_16 (unsigned a, unsigned b) { return LHS REL RHS; }\n+\n+#define TEST_NO16(N, LHS, REL, RHS) \\\n+  NOMIPS16 int s##N (int a, int b) { return LHS REL RHS; } \\\n+  NOMIPS16 int u##N (unsigned a, unsigned b) { return LHS REL RHS; }\n+\n+TEST (1, a, >, b);\n+TEST_NO16 (2, a, >=, 1);\n+TEST (3, a, <, b);\n+TEST (4, a, <=, 22);"}]}