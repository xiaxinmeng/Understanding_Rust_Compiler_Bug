{"sha": "28e9a294c7adb1a35e286d0e648d98b35d445277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlOWEyOTRjN2FkYjFhMzVlMjg2ZDBlNjQ4ZDk4YjM1ZDQ0NTI3Nw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-15T11:35:29Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-15T11:35:29Z"}, "message": "AVX-512. Extend ashrv insn patterns.\n\ngcc/\n\t* config/i386/sse.md (define_mode_iterator VI248_AVX512BW_AVX512VL):\n\tNew.\n\t(define_mode_iterator VI24_AVX512BW_1): Ditto.\n\t(define_insn \"<mask_codefor>ashr<mode>3<mask_name>\"): Ditto.\n\t(define_insn \"<mask_codefor>ashrv2di3<mask_name>\"): Ditto.\n\t(define_insn \"ashr<VI248_AVX512BW_AVX512VL:mode>3<mask_name>\"): Enable\n\talso for TARGET_AVX512VL.\n\t(define_expand \"ashrv2di3\"): Update to enable TARGET_AVX512VL.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215262", "tree": {"sha": "4a4eb6a7070073d35df62284b9d0686ef46c08ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a4eb6a7070073d35df62284b9d0686ef46c08ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e9a294c7adb1a35e286d0e648d98b35d445277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e9a294c7adb1a35e286d0e648d98b35d445277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e9a294c7adb1a35e286d0e648d98b35d445277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e9a294c7adb1a35e286d0e648d98b35d445277/comments", "author": null, "committer": null, "parents": [{"sha": "4564acc36fc9105aa6622601fa62bfa7cfff203b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4564acc36fc9105aa6622601fa62bfa7cfff203b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4564acc36fc9105aa6622601fa62bfa7cfff203b"}], "stats": {"total": 100, "additions": 79, "deletions": 21}, "files": [{"sha": "920e98f2b026c2aa946691f6450e464b55b76800", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e9a294c7adb1a35e286d0e648d98b35d445277/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e9a294c7adb1a35e286d0e648d98b35d445277/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28e9a294c7adb1a35e286d0e648d98b35d445277", "patch": "@@ -1,3 +1,21 @@\n+2014-09-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (define_mode_iterator VI248_AVX512BW_AVX512VL):\n+\tNew.\n+\t(define_mode_iterator VI24_AVX512BW_1): Ditto.\n+\t(define_insn \"<mask_codefor>ashr<mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"<mask_codefor>ashrv2di3<mask_name>\"): Ditto.\n+\t(define_insn \"ashr<VI248_AVX512BW_AVX512VL:mode>3<mask_name>\"): Enable\n+\talso for TARGET_AVX512VL.\n+\t(define_expand \"ashrv2di3\"): Update to enable TARGET_AVX512VL.\n+\n 2014-09-15  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \t* doc/install.texi (Options specification): add "}, {"sha": "b5ded79a0e89a62098cf9e24d046dccaadc9c8b8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 61, "deletions": 21, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e9a294c7adb1a35e286d0e648d98b35d445277/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e9a294c7adb1a35e286d0e648d98b35d445277/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=28e9a294c7adb1a35e286d0e648d98b35d445277", "patch": "@@ -382,6 +382,15 @@\n    (V8SI \"TARGET_AVX2\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n \n+(define_mode_iterator VI248_AVX512BW_AVX512VL\n+  [(V32HI \"TARGET_AVX512BW\") \n+   (V4DI \"TARGET_AVX512VL\") V16SI V8DI])\n+\n+;; Suppose TARGET_AVX512VL as baseline\n+(define_mode_iterator VI24_AVX512BW_1\n+ [(V16HI \"TARGET_AVX512BW\") (V8HI \"TARGET_AVX512BW\")\n+  V8SI V4SI])\n+   \n (define_mode_iterator VI48_AVX512F\n   [(V16SI \"TARGET_AVX512F\") V8SI V4SI\n    (V8DI \"TARGET_AVX512F\") V4DI V2DI])\n@@ -9282,12 +9291,40 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<mask_codefor>ashr<mode>3<mask_name>\"\n+  [(set (match_operand:VI24_AVX512BW_1 0 \"register_operand\" \"=v,v\")\n+\t(ashiftrt:VI24_AVX512BW_1\n+\t  (match_operand:VI24_AVX512BW_1 1 \"nonimmediate_operand\" \"v,vm\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"v,N\")))]\n+  \"TARGET_AVX512VL\"\n+  \"vpsra<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sseishft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"<mask_codefor>ashrv2di3<mask_name>\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v,v\")\n+\t(ashiftrt:V2DI\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"v,vm\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"v,N\")))]\n+  \"TARGET_AVX512VL\"\n+  \"vpsraq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sseishft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"ashr<mode>3<mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v,v\")\n-\t(ashiftrt:VI48_512\n-\t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"v,vm\")\n+  [(set (match_operand:VI248_AVX512BW_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(ashiftrt:VI248_AVX512BW_AVX512VL\n+\t  (match_operand:VI248_AVX512BW_AVX512VL 1 \"nonimmediate_operand\" \"v,vm\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"v,N\")))]\n-  \"TARGET_AVX512F && <mask_mode512bit_condition>\"\n+  \"TARGET_AVX512F\"\n   \"vpsra<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n@@ -14912,29 +14949,32 @@\n \t(ashiftrt:V2DI\n \t  (match_operand:V2DI 1 \"register_operand\")\n \t  (match_operand:DI 2 \"nonmemory_operand\")))]\n-  \"TARGET_XOP\"\n+  \"TARGET_XOP || TARGET_AVX512VL\"\n {\n-  rtx reg = gen_reg_rtx (V2DImode);\n-  rtx par;\n-  bool negate = false;\n-  int i;\n+  if (!TARGET_AVX512VL)\n+    {\n+      rtx reg = gen_reg_rtx (V2DImode);\n+      rtx par;\n+      bool negate = false;\n+      int i;\n \n-  if (CONST_INT_P (operands[2]))\n-    operands[2] = GEN_INT (-INTVAL (operands[2]));\n-  else\n-    negate = true;\n+      if (CONST_INT_P (operands[2]))\n+\toperands[2] = GEN_INT (-INTVAL (operands[2]));\n+      else\n+\tnegate = true;\n \n-  par = gen_rtx_PARALLEL (V2DImode, rtvec_alloc (2));\n-  for (i = 0; i < 2; i++)\n-    XVECEXP (par, 0, i) = operands[2];\n+      par = gen_rtx_PARALLEL (V2DImode, rtvec_alloc (2));\n+      for (i = 0; i < 2; i++)\n+\tXVECEXP (par, 0, i) = operands[2];\n \n-  emit_insn (gen_vec_initv2di (reg, par));\n+      emit_insn (gen_vec_initv2di (reg, par));\n \n-  if (negate)\n-    emit_insn (gen_negv2di2 (reg, reg));\n+      if (negate)\n+\temit_insn (gen_negv2di2 (reg, reg));\n \n-  emit_insn (gen_xop_shav2di3 (operands[0], operands[1], reg));\n-  DONE;\n+      emit_insn (gen_xop_shav2di3 (operands[0], operands[1], reg));\n+      DONE;\n+    }\n })\n \n ;; XOP FRCZ support"}]}