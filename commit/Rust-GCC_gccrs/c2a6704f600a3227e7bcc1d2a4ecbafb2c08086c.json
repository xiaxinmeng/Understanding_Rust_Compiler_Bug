{"sha": "c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhNjcwNGY2MDBhMzIyN2U3YmNjMWQyYTRlY2JhZmIyYzA4MDg2Yw==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-04-24T01:33:19Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-04-24T01:33:19Z"}, "message": "win32.cc, win32.cc (backtrace): Added this function because Win32 does not supply it.\n\n2002-04-23  Adam Megacz <adam@xwt.org>\n\n        * win32.cc, include/win32.cc (backtrace): Added this function\n        because Win32 does not supply it.\n\nFrom-SVN: r52701", "tree": {"sha": "b09f0ef88666b7cf5f7e6c1694bf7db50ac9508f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09f0ef88666b7cf5f7e6c1694bf7db50ac9508f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/comments", "author": null, "committer": null, "parents": [{"sha": "9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "d084656e02efad1df03fe46e387ddfe439346c00", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "patch": "@@ -1,3 +1,8 @@\n+2002-04-23  Adam Megacz <adam@xwt.org>\n+\n+\t* win32.cc, include/win32.cc (backtrace): Added this function\n+\tbecause Win32 does not supply it.\n+\n 2002-04-21  David S. Miller  <davem@redhat.com>\n \n \t* include/dwarf2-signal.h (MAKE_THROW_FRAME, sparc32): Document"}, {"sha": "8fbe39335d0a96bf6faf939d9df9f551742193ef", "filename": "libjava/include/win32.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "patch": "@@ -29,4 +29,10 @@ _Jv_platform_close_on_exec (jint)\n   // Ignore.\n }\n \n+#define HAVE_BACKTRACE\n+\n+/* Store up to SIZE return address of the current program state in\n+   ARRAY and return the exact number of values stored.  */\n+extern int backtrace (void **__array, int __size);\n+\n #endif /* __JV_WIN32_H__ */"}, {"sha": "af1163fbfa9ec42acc2ba28b6817309e1bae6b86", "filename": "libjava/win32.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=c2a6704f600a3227e7bcc1d2a4ecbafb2c08086c", "patch": "@@ -195,3 +195,25 @@ _Jv_platform_initProperties (java::util::Properties* newprops)\n         break;\n     }\n }\n+\n+/* Store up to SIZE return address of the current program state in\n+   ARRAY and return the exact number of values stored.  */\n+int\n+backtrace (void **__array, int __size)\n+{\n+  register void *_ebp __asm__ (\"ebp\");\n+  register void *_esp __asm__ (\"esp\");\n+  unsigned int *rfp;\n+\n+  int i=0;\n+  for (rfp = *(unsigned int**)_ebp;\n+       rfp && i < __size;\n+       rfp = *(unsigned int **)rfp)\n+    {\n+      int diff = *rfp - (unsigned int)rfp;\n+      if ((void*)rfp < _esp || diff > 4 * 1024 || diff < 0) break;\n+\n+    __array[i++] = (void*)(rfp[1]-4);\n+  }\n+  return i;\n+}"}]}