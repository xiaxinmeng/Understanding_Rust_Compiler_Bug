{"sha": "14df3f361e5aaa4145ab242886e3a857d4ae078c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkZjNmMzYxZTVhYWE0MTQ1YWIyNDI4ODZlM2E4NTdkNGFlMDc4Yw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-15T22:04:37Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-15T22:04:37Z"}, "message": "re PR target/54760 ([SH] Add __builtin_thread_pointer, __builtin_set_thread_pointer)\n\n\tPR target/54760\n\t* config/sh/sh.c (sh_find_base_reg_disp): Stop searching insns when\n\thitting a call insn if GBR is marked as call used.\n\t* config/sh/iterators.md (QIHISIDI): New mode iterator.\n\t* config/sh/predicates.md (gbr_address_mem): New predicate.\n\t* config/sh/sh.md (*movdi_gbr_load, *movdi_gbr_store): New\n\tinsn_and_split.\n\tUse QIHISIDI instead of QIHISI in unnamed GBR addressing splits.\n\n\tPR target/54760\n\t* gcc.target/sh/pr54760-2.c: Add long long and unsigned long long test\n\tfunctions.\n\t* gcc.target/sh/pr54760-4.c: New.\n\nFrom-SVN: r192480", "tree": {"sha": "0e4d00759d8ddfb538c6aca0b82c0bfa1c6bbde8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4d00759d8ddfb538c6aca0b82c0bfa1c6bbde8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14df3f361e5aaa4145ab242886e3a857d4ae078c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14df3f361e5aaa4145ab242886e3a857d4ae078c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14df3f361e5aaa4145ab242886e3a857d4ae078c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14df3f361e5aaa4145ab242886e3a857d4ae078c/comments", "author": null, "committer": null, "parents": [{"sha": "845f4111764265237c4554fae4219691b976cb7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845f4111764265237c4554fae4219691b976cb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845f4111764265237c4554fae4219691b976cb7a"}], "stats": {"total": 343, "additions": 239, "deletions": 104}, "files": [{"sha": "78ea62237ce68867c6d78694a91d45371795cf78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -1,3 +1,14 @@\n+2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54760\n+\t* config/sh/sh.c (sh_find_base_reg_disp): Stop searching insns when\n+\thitting a call insn if GBR is marked as call used.\n+\t* config/sh/iterators.md (QIHISIDI): New mode iterator.\n+\t* config/sh/predicates.md (gbr_address_mem): New predicate.\n+\t* config/sh/sh.md (*movdi_gbr_load, *movdi_gbr_store): New\n+\tinsn_and_split.\n+\tUse QIHISIDI instead of QIHISI in unnamed GBR addressing splits.\n+\n 2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.c: Update function attribute comments."}, {"sha": "e118c3ef1cd5718136021d2e58674c1c228b9995", "filename": "gcc/config/sh/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fiterators.md?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -18,6 +18,7 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+(define_mode_iterator QIHISIDI [QI HI SI DI])\n (define_mode_iterator QIHISI [QI HI SI])\n (define_mode_iterator QIHI [QI HI])\n (define_mode_iterator HISI [HI SI])"}, {"sha": "83508e895aea900d2aa97f000932f4f9009ff2d6", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -1139,3 +1139,20 @@\n \n   return INTVAL (op) >= 0 && INTVAL (op) <= max_disp;\n })\n+\n+;; A predicate that determines whether OP is a valid GBR addressing mode\n+;; memory reference.\n+(define_predicate \"gbr_address_mem\"\n+  (match_code \"mem\")\n+{\n+  rtx addr = XEXP (op, 0);\n+\n+  if (REG_P (addr) && REGNO (addr) == GBR_REG)\n+    return true;\n+  if (GET_CODE (addr) == PLUS\n+      && REG_P (XEXP (addr, 0)) && REGNO (XEXP (addr, 0)) == GBR_REG\n+      && gbr_displacement (XEXP (addr, 1), mode))\n+    return true;\n+\n+  return false;\n+})"}, {"sha": "763ee9d8ad14fd66cac3006b70ee5197ad405c1a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -13395,6 +13395,10 @@ sh_find_base_reg_disp (rtx insn, rtx x, disp_t disp = 0, rtx base_reg = NULL)\n       for (rtx i = prev_nonnote_insn (insn); i != NULL;\n \t   i = prev_nonnote_insn (i))\n \t{\n+\t  if (REGNO_REG_SET_P (regs_invalidated_by_call_regset, GBR_REG)\n+\t      && CALL_P (i))\n+\t    break;\n+\n \t  if (!NONJUMP_INSN_P (i))\n \t    continue;\n "}, {"sha": "95afd9b3996b1790ca2fccd78463cc64e2459579", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -10277,6 +10277,47 @@ label:\n   \"mov.<bwl>\t%0,@(0,gbr)\"\n   [(set_attr \"type\" \"store\")])\n \n+;; DImode memory accesses have to be split in two SImode accesses.\n+;; Split them before reload, so that it gets a better chance to figure out\n+;; how to deal with the R0 restriction for the individual SImode accesses.\n+;; Do not match this insn during or after reload because it can't be split\n+;; afterwards.\n+(define_insn_and_split \"*movdi_gbr_load\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"gbr_address_mem\"))]\n+  \"TARGET_SH1 && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 3) (match_dup 5))\n+   (set (match_dup 4) (match_dup 6))]\n+{\n+  /* Swap low/high part load order on little endian, so that the result reg\n+     of the second load can be used better.  */\n+  int off = TARGET_LITTLE_ENDIAN ? 1 : 0;\n+  operands[3 + off] = gen_lowpart (SImode, operands[0]);\n+  operands[5 + off] = gen_lowpart (SImode, operands[1]);\n+  operands[4 - off] = gen_highpart (SImode, operands[0]);\n+  operands[6 - off] = gen_highpart (SImode, operands[1]);\n+})\n+\n+(define_insn_and_split \"*movdi_gbr_store\"\n+  [(set (match_operand:DI 0 \"gbr_address_mem\")\n+\t(match_operand:DI 1 \"register_operand\"))]\n+  \"TARGET_SH1 && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 3) (match_dup 5))\n+   (set (match_dup 4) (match_dup 6))]\n+{\n+  /* Swap low/high part store order on big endian, so that stores of function\n+     call results can save a reg copy.  */\n+  int off = TARGET_LITTLE_ENDIAN ? 0 : 1;\n+  operands[3 + off] = gen_lowpart (SImode, operands[0]);\n+  operands[5 + off] = gen_lowpart (SImode, operands[1]);\n+  operands[4 - off] = gen_highpart (SImode, operands[0]);\n+  operands[6 - off] = gen_highpart (SImode, operands[1]);\n+})\n+\n ;; Sometimes memory accesses do not get combined with the store_gbr insn,\n ;; in particular when the displacements are in the range of the regular move\n ;; insns.  Thus, in the first split pass after the combine pass we search\n@@ -10287,15 +10328,15 @@ label:\n ;; other operand) and there's no point of doing it if the GBR is not\n ;; referenced in a function at all.\n (define_split\n-  [(set (match_operand:QIHISI 0 \"register_operand\")\n-\t(match_operand:QIHISI 1 \"memory_operand\"))]\n+  [(set (match_operand:QIHISIDI 0 \"register_operand\")\n+\t(match_operand:QIHISIDI 1 \"memory_operand\"))]\n   \"TARGET_SH1 && !reload_in_progress && !reload_completed\n    && df_regs_ever_live_p (GBR_REG)\"\n   [(set (match_dup 0) (match_dup 1))]\n {\n   rtx gbr_mem = sh_find_equiv_gbr_addr (curr_insn, operands[1]);\n   if (gbr_mem != NULL_RTX)\n-    operands[1] = change_address (operands[1], GET_MODE (operands[1]), gbr_mem);\n+    operands[1] = replace_equiv_address (operands[1], gbr_mem);\n   else\n     FAIL;\n })\n@@ -10309,7 +10350,7 @@ label:\n {\n   rtx gbr_mem = sh_find_equiv_gbr_addr (curr_insn, operands[1]);\n   if (gbr_mem != NULL_RTX)\n-    operands[1] = change_address (operands[1], GET_MODE (operands[1]), gbr_mem);\n+    operands[1] = replace_equiv_address (operands[1], gbr_mem);\n   else\n     FAIL;\n })\n@@ -10328,23 +10369,22 @@ label:\n   if (gbr_mem != NULL_RTX)\n     {\n       operands[2] = gen_reg_rtx (GET_MODE (operands[1]));\n-      operands[1] = change_address (operands[1], GET_MODE (operands[1]),\n-\t\t\t\t    gbr_mem);\n+      operands[1] = replace_equiv_address (operands[1], gbr_mem);\n     }\n   else\n     FAIL;\n })\n \n (define_split\n-  [(set (match_operand:QIHISI 0 \"memory_operand\")\n-\t(match_operand:QIHISI 1 \"register_operand\"))]\n+  [(set (match_operand:QIHISIDI 0 \"memory_operand\")\n+\t(match_operand:QIHISIDI 1 \"register_operand\"))]\n   \"TARGET_SH1 && !reload_in_progress && !reload_completed\n    && df_regs_ever_live_p (GBR_REG)\"\n   [(set (match_dup 0) (match_dup 1))]\n {\n   rtx gbr_mem = sh_find_equiv_gbr_addr (curr_insn, operands[0]);\n   if (gbr_mem != NULL_RTX)\n-    operands[0] = change_address (operands[0], GET_MODE (operands[0]), gbr_mem);\n+    operands[0] = replace_equiv_address (operands[0], gbr_mem);\n   else\n     FAIL;\n })"}, {"sha": "a155a531cd72af2687df8f37f13f26313f823b97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -1,3 +1,10 @@\n+2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54760\n+\t* gcc.target/sh/pr54760-2.c: Add long long and unsigned long long test\n+\tfunctions.\n+\t* gcc.target/sh/pr54760-4.c: New.\n+\n 2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/34777"}, {"sha": "91f3648a5998ee1ae7c45330d0607b59a8d998d3", "filename": "gcc/testsuite/gcc.target/sh/pr54760-2.c", "status": "modified", "additions": 131, "deletions": 95, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-2.c?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -9,107 +9,129 @@\n /* ---------------------------------------------------------------------------\n   Simple GBR load.\n */\n-#define func(name, type, disp)\\\n-  int \\\n+#define func(name, rettype, type, disp)\\\n+  rettype \\\n   name ## _tp_load (void) \\\n   { \\\n     type* tp = (type*)__builtin_thread_pointer (); \\\n     return tp[disp]; \\\n   }\n \n-func (test00, int, 0)\n-func (test01, int, 5)\n-func (test02, int, 255)\n+func (test00, int, int, 0)\n+func (test01, int, int, 5)\n+func (test02, int, int, 255)\n \n-func (test03, short, 0)\n-func (test04, short, 5)\n-func (test05, short, 255)\n+func (test03, int, short, 0)\n+func (test04, int, short, 5)\n+func (test05, int, short, 255)\n \n-func (test06, char, 0)\n-func (test07, char, 5)\n-func (test08, char, 255)\n+func (test06, int, char, 0)\n+func (test07, int, char, 5)\n+func (test08, int, char, 255)\n \n-func (test09, unsigned int, 0)\n-func (test10, unsigned int, 5)\n-func (test11, unsigned int, 255)\n+func (test09, int, unsigned int, 0)\n+func (test10, int, unsigned int, 5)\n+func (test11, int, unsigned int, 255)\n \n-func (test12, unsigned short, 0)\n-func (test13, unsigned short, 5)\n-func (test14, unsigned short, 255)\n+func (test12, int, unsigned short, 0)\n+func (test13, int, unsigned short, 5)\n+func (test14, int, unsigned short, 255)\n \n-func (test15, unsigned char, 0)\n-func (test16, unsigned char, 5)\n-func (test17, unsigned char, 255)\n+func (test15, int, unsigned char, 0)\n+func (test16, int, unsigned char, 5)\n+func (test17, int, unsigned char, 255)\n+\n+func (test18, long long, long long, 0)\n+func (test19, long long, long long, 5)\n+func (test20, long long, long long, 127)\n+\n+func (test21, long long, unsigned long long, 0)\n+func (test22, long long, unsigned long long, 5)\n+func (test23, long long, unsigned long long, 127)\n \n #undef func\n \n /* ---------------------------------------------------------------------------\n   Simple GBR store.\n */\n-#define func(name, type, disp)\\\n+#define func(name, argtype, type, disp)\\\n   void \\\n-  name ## _tp_store (int a) \\\n+  name ## _tp_store (argtype a) \\\n   { \\\n     type* tp = (type*)__builtin_thread_pointer (); \\\n     tp[disp] = (type)a; \\\n   }\n \n-func (test00, int, 0)\n-func (test01, int, 5)\n-func (test02, int, 255)\n+func (test00, int, int, 0)\n+func (test01, int, int, 5)\n+func (test02, int, int, 255)\n+\n+func (test03, int, short, 0)\n+func (test04, int, short, 5)\n+func (test05, int, short, 255)\n+\n+func (test06, int, char, 0)\n+func (test07, int, char, 5)\n+func (test08, int, char, 255)\n \n-func (test03, short, 0)\n-func (test04, short, 5)\n-func (test05, short, 255)\n+func (test09, int, unsigned int, 0)\n+func (test10, int, unsigned int, 5)\n+func (test11, int, unsigned int, 255)\n \n-func (test06, char, 0)\n-func (test07, char, 5)\n-func (test08, char, 255)\n+func (test12, int, unsigned short, 0)\n+func (test13, int, unsigned short, 5)\n+func (test14, int, unsigned short, 255)\n \n-func (test09, unsigned int, 0)\n-func (test10, unsigned int, 5)\n-func (test11, unsigned int, 255)\n+func (test15, int, unsigned char, 0)\n+func (test16, int, unsigned char, 5)\n+func (test17, int, unsigned char, 255)\n \n-func (test12, unsigned short, 0)\n-func (test13, unsigned short, 5)\n-func (test14, unsigned short, 255)\n+func (test18, long long, long long, 0)\n+func (test19, long long, long long, 5)\n+func (test20, long long, long long, 127)\n \n-func (test15, unsigned char, 0)\n-func (test16, unsigned char, 5)\n-func (test17, unsigned char, 255)\n+func (test21, long long, unsigned long long, 0)\n+func (test22, long long, unsigned long long, 5)\n+func (test23, long long, unsigned long long, 127)\n \n #undef func\n \n /* ---------------------------------------------------------------------------\n   Arithmetic on the result of a GBR load.\n */\n-#define func(name, type, disp, op, opname)\\\n-  int \\\n-  name ## _tp_load_arith_ ##opname (int a) \\\n+#define func(name, retargtype, type, disp, op, opname)\\\n+  retargtype \\\n+  name ## _tp_load_arith_ ##opname (retargtype a) \\\n   { \\\n     type* tp = (type*)__builtin_thread_pointer (); \\\n     return tp[disp] op a; \\\n   }\n \n #define funcs(op, opname) \\\n-  func (test00, int, 0, op, opname) \\\n-  func (test01, int, 5, op, opname) \\\n-  func (test02, int, 255, op, opname) \\\n-  func (test03, short, 0, op, opname) \\\n-  func (test04, short, 5, op, opname) \\\n-  func (test05, short, 255, op, opname) \\\n-  func (test06, char, 0, op, opname) \\\n-  func (test07, char, 5, op, opname) \\\n-  func (test08, char, 255, op, opname) \\\n-  func (test09, unsigned int, 0, op, opname) \\\n-  func (test10, unsigned int, 5, op, opname) \\\n-  func (test11, unsigned int, 255, op, opname) \\\n-  func (test12, unsigned short, 0, op, opname) \\\n-  func (test13, unsigned short, 5, op, opname) \\\n-  func (test14, unsigned short, 255, op, opname) \\\n-  func (test15, unsigned char, 0, op, opname) \\\n-  func (test16, unsigned char, 5, op, opname) \\\n-  func (test17, unsigned char, 255, op, opname) \\\n+  func (test00, int, int, 0, op, opname) \\\n+  func (test01, int, int, 5, op, opname) \\\n+  func (test02, int, int, 255, op, opname) \\\n+  func (test03, int, short, 0, op, opname) \\\n+  func (test04, int, short, 5, op, opname) \\\n+  func (test05, int, short, 255, op, opname) \\\n+  func (test06, int, char, 0, op, opname) \\\n+  func (test07, int, char, 5, op, opname) \\\n+  func (test08, int, char, 255, op, opname) \\\n+  func (test09, int, unsigned int, 0, op, opname) \\\n+  func (test10, int, unsigned int, 5, op, opname) \\\n+  func (test11, int, unsigned int, 255, op, opname) \\\n+  func (test12, int, unsigned short, 0, op, opname) \\\n+  func (test13, int, unsigned short, 5, op, opname) \\\n+  func (test14, int, unsigned short, 255, op, opname) \\\n+  func (test15, int, unsigned char, 0, op, opname) \\\n+  func (test16, int, unsigned char, 5, op, opname) \\\n+  func (test17, int, unsigned char, 255, op, opname) \\\n+  func (test18, long long, long long, 0, op, opname) \\\n+  func (test19, long long, long long, 5, op, opname) \\\n+  func (test20, long long, long long, 127, op, opname) \\\n+  func (test21, long long, unsigned long long, 0, op, opname) \\\n+  func (test22, long long, unsigned long long, 5, op, opname) \\\n+  func (test23, long long, unsigned long long, 127, op, opname) \\\n \n funcs (+, plus)\n funcs (-, minus)\n@@ -124,27 +146,31 @@ funcs (^, xor)\n /* ---------------------------------------------------------------------------\n   Arithmetic of the result of two GBR loads.\n */\n-#define func(name, type, disp0, disp1, op, opname)\\\n-  int \\\n+#define func(name, rettype, type, disp0, disp1, op, opname)\\\n+  rettype \\\n   name ## _tp_load_load_arith_ ##opname (void) \\\n   { \\\n     type* tp = (type*)__builtin_thread_pointer (); \\\n     return tp[disp0] op tp[disp1]; \\\n   }\n \n #define funcs(op, opname) \\\n-  func (test00, int, 0, 5, op, opname) \\\n-  func (test02, int, 1, 255, op, opname) \\\n-  func (test03, short, 0, 5, op, opname) \\\n-  func (test05, short, 1, 255, op, opname) \\\n-  func (test06, char, 0, 5, op, opname) \\\n-  func (test08, char, 1, 255, op, opname) \\\n-  func (test09, unsigned int, 0, 5, op, opname) \\\n-  func (test11, unsigned int, 1, 255, op, opname) \\\n-  func (test12, unsigned short, 0, 5, op, opname) \\\n-  func (test14, unsigned short, 1, 255, op, opname) \\\n-  func (test15, unsigned char, 0, 5, op, opname) \\\n-  func (test17, unsigned char, 1, 255, op, opname) \\\n+  func (test00, int, int, 0, 5, op, opname) \\\n+  func (test02, int, int, 1, 255, op, opname) \\\n+  func (test03, int, short, 0, 5, op, opname) \\\n+  func (test05, int, short, 1, 255, op, opname) \\\n+  func (test06, int, char, 0, 5, op, opname) \\\n+  func (test08, int, char, 1, 255, op, opname) \\\n+  func (test09, int, unsigned int, 0, 5, op, opname) \\\n+  func (test11, int, unsigned int, 1, 255, op, opname) \\\n+  func (test12, int, unsigned short, 0, 5, op, opname) \\\n+  func (test14, int, unsigned short, 1, 255, op, opname) \\\n+  func (test15, int, unsigned char, 0, 5, op, opname) \\\n+  func (test17, int, unsigned char, 1, 255, op, opname) \\\n+  func (test18, long long, long long, 0, 5, op, opname) \\\n+  func (test19, long long, long long, 1, 127, op, opname) \\\n+  func (test20, long long, unsigned long long, 0, 5, op, opname) \\\n+  func (test21, long long, unsigned long long, 1, 127, op, opname) \\\n \n funcs (+, plus)\n funcs (-, minus)\n@@ -180,40 +206,50 @@ func (test12, unsigned short, 0, 5)\n func (test14, unsigned short, 1, 255)\n func (test15, unsigned char, 0, 5)\n func (test17, unsigned char, 1, 255)\n+func (test18, long long, 0, 5)\n+func (test19, long long, 1, 127)\n+func (test20, unsigned long long, 0, 5)\n+func (test21, unsigned long long, 1, 127)\n \n #undef func\n \n /* ---------------------------------------------------------------------------\n   GBR load, arithmetic, GBR store\n */\n \n-#define func(name, type, disp, op, opname)\\\n+#define func(name, argtype, type, disp, op, opname)\\\n   void \\\n-  name ## _tp_load_arith_store_ ##opname (int a) \\\n+  name ## _tp_load_arith_store_ ##opname (argtype a) \\\n   { \\\n     type* tp = (type*)__builtin_thread_pointer (); \\\n     tp[disp] op a; \\\n   }\n \n #define funcs(op, opname) \\\n-  func (test00, int, 0, op, opname) \\\n-  func (test01, int, 5, op, opname) \\\n-  func (test02, int, 255, op, opname) \\\n-  func (test03, short, 0, op, opname) \\\n-  func (test04, short, 5, op, opname) \\\n-  func (test05, short, 255, op, opname) \\\n-  func (test06, char, 0, op, opname) \\\n-  func (test07, char, 5, op, opname) \\\n-  func (test08, char, 255, op, opname) \\\n-  func (test09, unsigned int, 0, op, opname) \\\n-  func (test10, unsigned int, 5, op, opname) \\\n-  func (test11, unsigned int, 255, op, opname) \\\n-  func (test12, unsigned short, 0, op, opname) \\\n-  func (test13, unsigned short, 5, op, opname) \\\n-  func (test14, unsigned short, 255, op, opname) \\\n-  func (test15, unsigned char, 0, op, opname) \\\n-  func (test16, unsigned char, 5, op, opname) \\\n-  func (test17, unsigned char, 255, op, opname) \\\n+  func (test00, int, int, 0, op, opname) \\\n+  func (test01, int, int, 5, op, opname) \\\n+  func (test02, int, int, 255, op, opname) \\\n+  func (test03, int, short, 0, op, opname) \\\n+  func (test04, int, short, 5, op, opname) \\\n+  func (test05, int, short, 255, op, opname) \\\n+  func (test06, int, char, 0, op, opname) \\\n+  func (test07, int, char, 5, op, opname) \\\n+  func (test08, int, char, 255, op, opname) \\\n+  func (test09, int, unsigned int, 0, op, opname) \\\n+  func (test10, int, unsigned int, 5, op, opname) \\\n+  func (test11, int, unsigned int, 255, op, opname) \\\n+  func (test12, int, unsigned short, 0, op, opname) \\\n+  func (test13, int, unsigned short, 5, op, opname) \\\n+  func (test14, int, unsigned short, 255, op, opname) \\\n+  func (test15, int, unsigned char, 0, op, opname) \\\n+  func (test16, int, unsigned char, 5, op, opname) \\\n+  func (test17, int, unsigned char, 255, op, opname) \\\n+  func (test18, long long, long long, 0, op, opname) \\\n+  func (test19, long long, long long, 5, op, opname) \\\n+  func (test20, long long, long long, 127, op, opname) \\\n+  func (test21, long long, unsigned long long, 0, op, opname) \\\n+  func (test22, long long, unsigned long long, 5, op, opname) \\\n+  func (test23, long long, unsigned long long, 127, op, opname) \\\n \n funcs (+=, plus)\n funcs (-=, minus)"}, {"sha": "3ee36a31389e593ce685c961ecee18422943e83b", "filename": "gcc/testsuite/gcc.target/sh/pr54760-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14df3f361e5aaa4145ab242886e3a857d4ae078c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-4.c?ref=14df3f361e5aaa4145ab242886e3a857d4ae078c", "patch": "@@ -0,0 +1,19 @@\n+/* Check that the GBR address optimization does not combine a gbr store\n+   and its use when a function call is inbetween, when GBR is a call used\n+   register, i.e. it is invalidated by function calls.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -fcall-used-gbr\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler \"stc\\tgbr\" } } */\n+\n+extern int test00 (void);\n+int\n+test01 (int x)\n+{\n+  /* We must see a stc gbr,rn before the function call, because\n+     a function call could modify the gbr.  In this case the user requests\n+     the old gbr value, before the function call.  */\n+  int* p = (int*)__builtin_thread_pointer ();\n+  p[5] = test00 ();\n+  return 0;\n+}"}]}