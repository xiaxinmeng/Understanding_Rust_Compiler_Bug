{"sha": "58e17cf84636d72e3620b5af50b0336d9364ddd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlMTdjZjg0NjM2ZDcyZTM2MjBiNWFmNTBiMDMzNmQ5MzY0ZGRkMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-25T16:04:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-25T16:04:27Z"}, "message": "Turn CONSTANT_ALIGNMENT into a hook\n\nThe definition:\n\n  #define CONSTANT_ALIGNMENT(EXP, ALIGN) \\\n    (TREE_CODE (EXP) == STRING_CST \\\n     && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n\nwas very common, so the patch adds a canned definition for that,\ncalled constant_alignment_word_strings.  Some ports had a variation\nthat used a port-local FASTEST_ALIGNMENT instead of BITS_PER_WORD;\nthe patch uses constant_alignment_word_strings if FASTEST_ALIGNMENT\nwas always BITS_PER_WORD and a port-local hook function otherwise.\n\n2017-09-25  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* target.def (constant_alignment): New hook.\n\t* defaults.h (CONSTANT_ALIGNMENT): Delete.\n\t* doc/tm.texi.in (CONSTANT_ALIGNMENT): Replace with...\n\t(TARGET_CONSTANT_ALIGNMENT): ...this new hook.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (default_constant_alignment): Declare.\n\t(constant_alignment_word_strings): Likewise.\n\t* targhooks.c (default_constant_alignment): New function.\n\t(constant_alignment_word_strings): Likewise.\n\t* builtins.c (get_object_alignment_2): Use targetm.constant_alignment\n\tinstead of CONSTANT_ALIGNMENT.\n\t* varasm.c (align_variable, get_variable_align, build_constant_desc)\n\t(force_const_mem): Likewise.\n\t* config/aarch64/aarch64.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/aarch64/aarch64.c (aarch64_constant_alignment): New function.\n\t(aarch64_classify_address): Call it instead of CONSTANT_ALIGNMENT.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/alpha/alpha.h (CONSTANT_ALIGNMENT): Delete commented-out\n\tdefinition.\n\t* config/arc/arc.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/arc/arc.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/arm/arm.h (CONSTANT_ALIGNMENT_FACTOR): Delete.\n\t(CONSTANT_ALIGNMENT): Likewise.\n\t* config/arm/arm.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(arm_constant_alignment): New function.\n\t* config/bfin/bfin.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/bfin/bfin.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/cr16/cr16.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/cr16/cr16.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/cris/cris.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/cris/cris.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(cris_constant_alignment): New function.\n\t* config/epiphany/epiphany.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/epiphany/epiphany.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(epiphany_constant_alignment): New function.\n\t* config/fr30/fr30.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/fr30/fr30.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/frv/frv.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/frv/frv.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/ft32/ft32.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/ft32/ft32.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/i386/i386.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/i386/i386-protos.h (ix86_constant_alignment): Delete.\n\t* config/i386/i386.c (ix86_constant_alignment): Make static.\n\tUse the same interface as the target hook.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/ia64/ia64.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/ia64/ia64.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/iq2000/iq2000.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/iq2000/iq2000.c (iq2000_constant_alignment): New function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/lm32/lm32.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/lm32/lm32.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/m32r/m32r.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/m32r/m32r.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/mcore/mcore.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/mcore/mcore.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/microblaze/microblaze.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/microblaze/microblaze.c (microblaze_constant_alignment):\n\tNew function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/mips/mips.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/mips/mips.c (mips_constant_alignment): New function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/mmix/mmix.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/mmix/mmix-protos.h (mmix_constant_alignment): Delete.\n\t* config/mmix/mmix.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(mmix_constant_alignment): Make static.  Use the same interface\n\tas the target hook.\n\t* config/moxie/moxie.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/moxie/moxie.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/nios2/nios2.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/nios2/nios2.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/pa/pa.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/pa/pa.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/powerpcspe/powerpcspe.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/powerpcspe/powerpcspe.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(rs6000_constant_alignment): New function.\n\t* config/riscv/riscv.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/riscv/riscv.c (riscv_constant_alignment): New function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/rs6000/rs6000.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/rs6000/rs6000.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(rs6000_constant_alignment): New function.\n\t* config/s390/s390.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/s390/s390.c (s390_constant_alignment): New function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/sh/sh.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/sh/sh.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/sparc/sparc.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/sparc/sparc.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(sparc_constant_alignment): New function.\n\t* config/spu/spu.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/spu/spu.c (spu_constant_alignment): New function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/stormy16/stormy16.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/stormy16/stormy16.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/tilegx/tilegx.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/tilegx/tilegx.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/tilepro/tilepro.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/tilepro/tilepro.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n\tconstant_alignment_word_strings.\n\t* config/visium/visium.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/visium/visium.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(visium_constant_alignment): New function.\n\t* config/xtensa/xtensa.h (CONSTANT_ALIGNMENT): Delete.\n\t* config/xtensa/xtensa.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t(xtensa_constant_alignment): New function.\n\t* system.h (CONSTANT_ALIGNMENT): Poison.\n\nFrom-SVN: r253154", "tree": {"sha": "324fdb8176bd47aa09f1fbed5815c901bc84370e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/324fdb8176bd47aa09f1fbed5815c901bc84370e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58e17cf84636d72e3620b5af50b0336d9364ddd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e17cf84636d72e3620b5af50b0336d9364ddd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e17cf84636d72e3620b5af50b0336d9364ddd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e17cf84636d72e3620b5af50b0336d9364ddd0/comments", "author": null, "committer": null, "parents": [{"sha": "75c44d224641800c6f5d4cad4487cea3524852a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c44d224641800c6f5d4cad4487cea3524852a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c44d224641800c6f5d4cad4487cea3524852a6"}], "stats": {"total": 768, "additions": 470, "deletions": 298}, "files": [{"sha": "e27d0ba48d645566c8f9a4aa3e04c78c4a730e3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1,3 +1,131 @@\n+2017-09-25  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target.def (constant_alignment): New hook.\n+\t* defaults.h (CONSTANT_ALIGNMENT): Delete.\n+\t* doc/tm.texi.in (CONSTANT_ALIGNMENT): Replace with...\n+\t(TARGET_CONSTANT_ALIGNMENT): ...this new hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_constant_alignment): Declare.\n+\t(constant_alignment_word_strings): Likewise.\n+\t* targhooks.c (default_constant_alignment): New function.\n+\t(constant_alignment_word_strings): Likewise.\n+\t* builtins.c (get_object_alignment_2): Use targetm.constant_alignment\n+\tinstead of CONSTANT_ALIGNMENT.\n+\t* varasm.c (align_variable, get_variable_align, build_constant_desc)\n+\t(force_const_mem): Likewise.\n+\t* config/aarch64/aarch64.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/aarch64/aarch64.c (aarch64_constant_alignment): New function.\n+\t(aarch64_classify_address): Call it instead of CONSTANT_ALIGNMENT.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/alpha/alpha.h (CONSTANT_ALIGNMENT): Delete commented-out\n+\tdefinition.\n+\t* config/arc/arc.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/arc/arc.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/arm/arm.h (CONSTANT_ALIGNMENT_FACTOR): Delete.\n+\t(CONSTANT_ALIGNMENT): Likewise.\n+\t* config/arm/arm.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(arm_constant_alignment): New function.\n+\t* config/bfin/bfin.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/bfin/bfin.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/cr16/cr16.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/cr16/cr16.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/cris/cris.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/cris/cris.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(cris_constant_alignment): New function.\n+\t* config/epiphany/epiphany.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/epiphany/epiphany.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(epiphany_constant_alignment): New function.\n+\t* config/fr30/fr30.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/fr30/fr30.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/frv/frv.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/frv/frv.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/ft32/ft32.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/ft32/ft32.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/i386/i386.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/i386/i386-protos.h (ix86_constant_alignment): Delete.\n+\t* config/i386/i386.c (ix86_constant_alignment): Make static.\n+\tUse the same interface as the target hook.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/ia64/ia64.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/ia64/ia64.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/iq2000/iq2000.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/iq2000/iq2000.c (iq2000_constant_alignment): New function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/lm32/lm32.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/lm32/lm32.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/m32r/m32r.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/m32r/m32r.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/mcore/mcore.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/mcore/mcore.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/microblaze/microblaze.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/microblaze/microblaze.c (microblaze_constant_alignment):\n+\tNew function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/mips/mips.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/mips/mips.c (mips_constant_alignment): New function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/mmix/mmix.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/mmix/mmix-protos.h (mmix_constant_alignment): Delete.\n+\t* config/mmix/mmix.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(mmix_constant_alignment): Make static.  Use the same interface\n+\tas the target hook.\n+\t* config/moxie/moxie.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/moxie/moxie.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/nios2/nios2.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/nios2/nios2.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/pa/pa.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/pa/pa.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/powerpcspe/powerpcspe.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/powerpcspe/powerpcspe.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(rs6000_constant_alignment): New function.\n+\t* config/riscv/riscv.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/riscv/riscv.c (riscv_constant_alignment): New function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/rs6000/rs6000.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/rs6000/rs6000.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(rs6000_constant_alignment): New function.\n+\t* config/s390/s390.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/s390/s390.c (s390_constant_alignment): New function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/sh/sh.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/sh/sh.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/sparc/sparc.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/sparc/sparc.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(sparc_constant_alignment): New function.\n+\t* config/spu/spu.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/spu/spu.c (spu_constant_alignment): New function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/stormy16/stormy16.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/stormy16/stormy16.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/tilegx/tilegx.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/tilegx/tilegx.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/tilepro/tilepro.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/tilepro/tilepro.c (TARGET_CONSTANT_ALIGNMENT): Redefine to\n+\tconstant_alignment_word_strings.\n+\t* config/visium/visium.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/visium/visium.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(visium_constant_alignment): New function.\n+\t* config/xtensa/xtensa.h (CONSTANT_ALIGNMENT): Delete.\n+\t* config/xtensa/xtensa.c (TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t(xtensa_constant_alignment): New function.\n+\t* system.h (CONSTANT_ALIGNMENT): Poison.\n+\n 2017-09-25  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling"}, {"sha": "ff049aa9d378deb5de7b106307be82dfa3f7495d", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -283,7 +283,7 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       exp = DECL_INITIAL (exp);\n       align = TYPE_ALIGN (TREE_TYPE (exp));\n       if (CONSTANT_CLASS_P (exp))\n-\talign = (unsigned) CONSTANT_ALIGNMENT (exp, align);\n+\talign = targetm.constant_alignment (exp, align);\n \n       known_alignment = true;\n     }\n@@ -359,7 +359,7 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n          wrapped inside a CONST_DECL.  */\n       align = TYPE_ALIGN (TREE_TYPE (exp));\n       if (CONSTANT_CLASS_P (exp))\n-\talign = (unsigned) CONSTANT_ALIGNMENT (exp, align);\n+\talign = targetm.constant_alignment (exp, align);\n \n       known_alignment = true;\n     }"}, {"sha": "71d8dc4471ec141e9f11bf57663bc97686d1f100", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1142,6 +1142,17 @@ aarch64_hard_regno_caller_save_mode (unsigned regno, unsigned nregs,\n     return choose_hard_reg_mode (regno, nregs, false);\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  Make strings word-aligned so\n+   that strcpy from constants will be faster.  */\n+\n+static HOST_WIDE_INT\n+aarch64_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST && !optimize_size)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n+\n /* Return true if calls to DECL should be treated as\n    long-calls (ie called via a register).  */\n static bool\n@@ -4622,7 +4633,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t\t{\n \t\t  tree exp = SYMBOL_REF_DECL (sym);\n \t\t  align = TYPE_ALIGN (TREE_TYPE (exp));\n-\t\t  align = CONSTANT_ALIGNMENT (exp, align);\n+\t\t  align = aarch64_constant_alignment (exp, align);\n \t\t}\n \t      else if (SYMBOL_REF_DECL (sym))\n \t\talign = DECL_ALIGN (SYMBOL_REF_DECL (sym));\n@@ -15687,6 +15698,9 @@ aarch64_libgcc_floating_mode_supported_p\n #define TARGET_HARD_REGNO_CALL_PART_CLOBBERED \\\n   aarch64_hard_regno_call_part_clobbered\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT aarch64_constant_alignment\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::aarch64_run_selftests"}, {"sha": "0786b2837196d9eb36893397fe03909628e338fa", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -90,14 +90,6 @@\n    port.  */\n #define TARGET_PTRMEMFUNC_VBIT_LOCATION ptrmemfunc_vbit_in_delta\n \n-/* Make strings word-aligned so that strcpy from constants will be\n-   faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\\\n-  ((TREE_CODE (EXP) == STRING_CST\t\t\\\n-    && !optimize_size\t\t\t\t\\\n-    && (ALIGN) < BITS_PER_WORD)\t\t\t\\\n-   ? BITS_PER_WORD : ALIGN)\n-\n /* Align definitions of arrays, unions and structures so that\n    initializations and copies can be made more efficient.  This is not\n    ABI-changing, so it only affects places where we can see the"}, {"sha": "a2878c64e94bae3a72e176c7caadb1be886aa11b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -289,7 +289,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n /* ??? Only if block-move stuff knows about different source/destination\n    alignment.  */\n #if 0\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN) MAX ((ALIGN), BITS_PER_WORD)\n #define DATA_ALIGNMENT(EXP, ALIGN) MAX ((ALIGN), BITS_PER_WORD)\n #endif\n "}, {"sha": "a0b667586b357204e505a52f446c0b62d144d055", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -10657,6 +10657,9 @@ arc_use_anchors_for_symbol_p (const_rtx symbol)\n #undef TARGET_USE_ANCHORS_FOR_SYMBOL_P\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P arc_use_anchors_for_symbol_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-arc.h\""}, {"sha": "91a4c90ac93c1c4e4afbb590f46b0026dc9ddefe", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -271,13 +271,6 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n /* The best alignment to use in cases where we have a choice.  */\n #define FASTEST_ALIGNMENT 32\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define LOCAL_ALIGNMENT(TYPE, ALIGN)             \\\n   (TREE_CODE (TYPE) == ARRAY_TYPE               \\"}, {"sha": "363f5499a67894929816c06079a3f7b3ea9e9ca7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -316,6 +316,7 @@ static opt_scalar_float_mode arm_floatn_mode (int, bool);\n static unsigned int arm_hard_regno_nregs (unsigned int, machine_mode);\n static bool arm_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool arm_modes_tieable_p (machine_mode, machine_mode);\n+static HOST_WIDE_INT arm_constant_alignment (const_tree, HOST_WIDE_INT);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -795,6 +796,9 @@ static const struct attribute_spec arm_attribute_table[] =\n \n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS arm_can_change_mode_class\n+\n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT arm_constant_alignment\n \f\n /* Obstack for minipool constant handling.  */\n static struct obstack minipool_obstack;\n@@ -31276,6 +31280,18 @@ arm_can_change_mode_class (machine_mode from, machine_mode to,\n   return true;\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  Make strings word-aligned so\n+   strcpy from constants will be faster.  */\n+\n+static HOST_WIDE_INT\n+arm_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  unsigned int factor = (TARGET_THUMB || ! arm_tune_xscale ? 1 : 2);\n+  if (TREE_CODE (exp) == STRING_CST && !optimize_size)\n+    return MAX (align, BITS_PER_WORD * factor);\n+  return align;\n+}\n+\n #if CHECKING_P\n namespace selftest {\n "}, {"sha": "c71ad5cd7101256cb81bfa6dd31c0c512655d8b1", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -592,15 +592,6 @@ extern int arm_arch_cmse;\n #define BIGGEST_FIELD_ALIGNMENT 64\n #endif\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT_FACTOR (TARGET_THUMB || ! arm_tune_xscale ? 1 : 2)\n-\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\\\n-   ((TREE_CODE (EXP) == STRING_CST\t\t\t\t\\\n-     && !optimize_size\t\t\t\t\t\t\\\n-     && (ALIGN) < BITS_PER_WORD * CONSTANT_ALIGNMENT_FACTOR)\t\\\n-    ? BITS_PER_WORD * CONSTANT_ALIGNMENT_FACTOR : (ALIGN))\n-\n /* Align definitions of arrays, unions and structures so that\n    initializations and copies can be made more efficient.  This is not\n    ABI-changing, so it only affects places where we can see the"}, {"sha": "ed9ea03682f69c36ce9fe230affc38f1184167b6", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -5882,4 +5882,7 @@ bfin_conditional_register_usage (void)\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P bfin_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "787600f3308d3294215e0e9311274d7ee7924252", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -321,11 +321,6 @@ extern const char *bfin_library_id_string;\n \n #define LOCAL_ALIGNMENT(TYPE, ALIGN) bfin_local_alignment ((TYPE), (ALIGN))\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST        \\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))    \n-\n #define TRAMPOLINE_SIZE (TARGET_FDPIC ? 30 : 18)\n \f\n /* Definitions for register eliminations."}, {"sha": "55e0965ad2f2a1e3aeb2ec7165f5eb03b933648a", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -200,6 +200,9 @@ static void cr16_print_operand_address (FILE *, machine_mode, rtx);\n #undef TARGET_MEMORY_MOVE_COST\n #define TARGET_MEMORY_MOVE_COST \tcr16_memory_move_cost\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT\tconstant_alignment_word_strings\n+\n /* Table of machine attributes.  */\n static const struct attribute_spec cr16_attribute_table[] = {\n   /* ISRs have special prologue and epilogue requirements.  */"}, {"sha": "143a1dbfda35af680c2c35e1eb271f4a8f82fc93", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -114,11 +114,6 @@ while (0)\n      && ((ALIGN) < BITS_PER_WORD))               \\\n      ? (BITS_PER_WORD) : (ALIGN))\n \n-/* In CR16 strings are word-aligned; strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(CONSTANT, ALIGN)                            \\\n-  (((TREE_CODE (CONSTANT) == STRING_CST) && ((ALIGN) < BITS_PER_WORD)) \\\n-     ? (BITS_PER_WORD) : (ALIGN))\n-\n #define STRICT_ALIGNMENT 0\n \n #define PCC_BITFIELD_TYPE_MATTERS 1"}, {"sha": "fe80a27b2d6d5d94a4fd4514aabc8e0a2ee61339", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -165,6 +165,7 @@ static bool cris_function_value_regno_p (const unsigned int);\n static void cris_file_end (void);\n static unsigned int cris_hard_regno_nregs (unsigned int, machine_mode);\n static bool cris_hard_regno_mode_ok (unsigned int, machine_mode);\n+static HOST_WIDE_INT cris_constant_alignment (const_tree, HOST_WIDE_INT);\n \n /* This is the parsed result of the \"-max-stack-stackframe=\" option.  If\n    it (still) is zero, then there was no such option given.  */\n@@ -287,6 +288,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_HARD_REGNO_MODE_OK\n #define TARGET_HARD_REGNO_MODE_OK cris_hard_regno_mode_ok\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT cris_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Helper for cris_load_multiple_op and cris_ret_movem_op.  */\n@@ -4325,6 +4329,23 @@ cris_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t      || (regno != CRIS_MOF_REGNUM && regno != CRIS_ACR_REGNUM)));\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  Note that this hook has the\n+   effect of making gcc believe that ALL references to constant stuff\n+   (in code segment, like strings) have this alignment.  That is a rather\n+   rushed assumption.  Luckily we do not care about the \"alignment\"\n+   operand to builtin memcpy (only place where it counts), so it doesn't\n+   affect any bad spots.  */\n+\n+static HOST_WIDE_INT\n+cris_constant_alignment (const_tree, HOST_WIDE_INT basic_align)\n+{\n+  if (!TARGET_CONST_ALIGN)\n+    return basic_align;\n+  if (TARGET_ALIGN_BY_32)\n+    return MAX (basic_align, 32);\n+  return MAX (basic_align, 16);\n+}\n+\n #if 0\n /* Various small functions to replace macros.  Only called from a\n    debugger.  They might collide with gcc functions or system functions,"}, {"sha": "570e2d9defe99228f6c2f7b01931a5bc7e7f1244", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -368,17 +368,6 @@ extern int cris_cpu_version;\n      ? (BASIC_ALIGN < 32 ? 32 : BASIC_ALIGN)\t\t\t\\\n      : (BASIC_ALIGN < 16 ? 16 : BASIC_ALIGN)) : BASIC_ALIGN)\n \n-/* Note that CONSTANT_ALIGNMENT has the effect of making gcc believe that\n-   ALL references to constant stuff (in code segment, like strings) has\n-   this alignment.  That is a rather rushed assumption.  Luckily we do not\n-   care about the \"alignment\" operand to builtin memcpy (only place where\n-   it counts), so it doesn't affect any bad spots.  */\n-#define CONSTANT_ALIGNMENT(CONSTANT, BASIC_ALIGN)\t\t\\\n- (TARGET_CONST_ALIGN\t\t\t\t\t\t\\\n-  ? (TARGET_ALIGN_BY_32\t\t\t\t\t\t\\\n-     ? (BASIC_ALIGN < 32 ? 32 : BASIC_ALIGN)\t\t\t\\\n-     : (BASIC_ALIGN < 16 ? 16 : BASIC_ALIGN)) : BASIC_ALIGN)\n-\n /* FIXME: Define LOCAL_ALIGNMENT for word and dword or arrays and\n    structures (if -mstack-align=), and check that it is good.  */\n "}, {"sha": "d1d9ee9998df6a43102128050a3effd216db028c", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -173,6 +173,9 @@ static rtx_insn *frame_insn (rtx);\n \n #undef TARGET_HARD_REGNO_MODE_OK\n #define TARGET_HARD_REGNO_MODE_OK epiphany_hard_regno_mode_ok\n+\n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT epiphany_constant_alignment\n \f\n bool\n epiphany_is_interrupt_p (tree decl)\n@@ -3014,4 +3017,15 @@ epiphany_start_function (FILE *file, const char *name, tree decl)\n   ASM_OUTPUT_FUNCTION_LABEL (file, name, decl);\n }\n \n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+epiphany_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST)\n+    return MAX (align, FASTEST_ALIGNMENT);\n+  return align;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "290ea20a58377fa34996466d62fb0d038a3590d1", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -147,12 +147,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define MALLOC_ABI_ALIGNMENT BIGGEST_ALIGNMENT\n \n-/* Make strings dword-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars dword-aligned for the same reasons.\n    Also, align arrays of SImode items.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\"}, {"sha": "91884811f17ebad81faf6982591ce035830d2871", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -190,6 +190,9 @@ static int fr30_num_arg_regs (machine_mode, const_tree);\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT fr30_trampoline_init\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n "}, {"sha": "c4485096f0f8e67eb5302eec1538fc4c69698df8", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -88,10 +88,6 @@ along with GCC; see the file COPYING3.  If not see\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n #define STRICT_ALIGNMENT 1\n \n #define PCC_BITFIELD_TYPE_MATTERS 1"}, {"sha": "c9877e74d7c3ac612f4cfd521cec7428c047bbff", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -523,6 +523,8 @@ static bool frv_modes_tieable_p\t\t\t(machine_mode, machine_mode);\n #define TARGET_HARD_REGNO_MODE_OK frv_hard_regno_mode_ok\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P frv_modes_tieable_p\n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "44a73e08f902da0373ea3182968090f2ad3245da", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -351,20 +351,6 @@\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-/* If defined, a C expression to compute the alignment given to a constant that\n-   is being placed in memory.  CONSTANT is the constant and ALIGN is the\n-   alignment that the object would ordinarily have.  The value of this macro is\n-   used instead of that alignment to align the object.\n-\n-   If this macro is not defined, then ALIGN is used.\n-\n-   The typical use of this macro is to increase alignment for string constants\n-   to be word aligned so that `strcpy' calls that copy constants can be done\n-   inline.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n /* Define this macro to be the value 1 if instructions will fail to work if\n    given data not on the nominal alignment.  If instructions will merely go\n    slower in that case, define this macro as 0.  */"}, {"sha": "0386e068f3babb2bca3746b555f76c4b9500c7cb", "filename": "gcc/config/ft32/ft32.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fft32%2Fft32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fft32%2Fft32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -940,6 +940,9 @@ ft32_elf_encode_section_info (tree decl, rtx rtl, int first)\n     }\n }\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-ft32.h\""}, {"sha": "32aa32095eafd9f060a0bf0376aaeec1362fa723", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -354,12 +354,6 @@ enum reg_class\n    is GET_MODE_SIZE(DImode).  */\n #define MAX_FIXED_MODE_SIZE 32\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST       \\\n-    && (ALIGN) < FASTEST_ALIGNMENT)     \\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Set this nonzero if move instructions will actually fail to work\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 1"}, {"sha": "fbe9f271434a263e18681148d73fc050b431ff99", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -209,7 +209,6 @@ extern unsigned int ix86_local_alignment (tree, machine_mode,\n \t\t\t\t\t  unsigned int);\n extern unsigned int ix86_minimum_alignment (tree, machine_mode,\n \t\t\t\t\t    unsigned int);\n-extern int ix86_constant_alignment (tree, int);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n extern tree ix86_handle_selectany_attribute (tree *, tree, tree, int, bool *);\n extern int x86_field_alignment (tree, int);"}, {"sha": "d52d1df251c6f3e7a189608bd824bb7ef9013ce4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -31563,14 +31563,10 @@ ix86_sched_init_global (FILE *, int, int)\n }\n \n \f\n-/* Compute the alignment given to a constant that is being placed in memory.\n-   EXP is the constant and ALIGN is the alignment that the object would\n-   ordinarily have.\n-   The value of this function is used instead of that alignment to align\n-   the object.  */\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n \n-int\n-ix86_constant_alignment (tree exp, int align)\n+static HOST_WIDE_INT\n+ix86_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n {\n   if (TREE_CODE (exp) == REAL_CST || TREE_CODE (exp) == VECTOR_CST\n       || TREE_CODE (exp) == INTEGER_CST)\n@@ -53609,6 +53605,9 @@ ix86_run_selftests (void)\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS ix86_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT ix86_constant_alignment\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests"}, {"sha": "899ba8b3706032121fd9c3a176e269755565872f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -848,20 +848,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   x86_field_alignment ((TYPE), (COMPUTED))\n #endif\n \n-/* If defined, a C expression to compute the alignment given to a\n-   constant that is being placed in memory.  EXP is the constant\n-   and ALIGN is the alignment that the object would ordinarily have.\n-   The value of this macro is used instead of that alignment to align\n-   the object.\n-\n-   If this macro is not defined, then ALIGN is used.\n-\n-   The typical use of this macro is to increase alignment for string\n-   constants to be word aligned so that `strcpy' calls that copy\n-   constants can be done inline.  */\n-\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN) ix86_constant_alignment ((EXP), (ALIGN))\n-\n /* If defined, a C expression to compute the alignment for a static\n    variable.  TYPE is the data type, and ALIGN is the alignment that\n    the object would ordinarily have.  The value of this macro is used"}, {"sha": "fce3006d6d9fc38992d47e153abad8e798b35e41", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -672,6 +672,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS ia64_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Returns TRUE iff the target attribute indicated by ATTR_ID takes a plain"}, {"sha": "4a9313e1d49ae1cb592ca87f3df6b9651e115f10", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -185,15 +185,6 @@ while (0)\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-/* If defined, a C expression to compute the alignment given to a constant that\n-   is being placed in memory.  CONSTANT is the constant and ALIGN is the\n-   alignment that the object would ordinarily have.  The value of this macro is\n-   used instead of that alignment to align the object.  */\n-\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n #define STRICT_ALIGNMENT 1\n \n /* Define this if you wish to imitate the way many other C compilers handle"}, {"sha": "297bd2bb0d4d65b876386be33796d7f7416f729f", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -180,6 +180,7 @@ static void iq2000_print_operand_address (FILE *, machine_mode, rtx);\n static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n static bool iq2000_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool iq2000_modes_tieable_p (machine_mode, machine_mode);\n+static HOST_WIDE_INT iq2000_constant_alignment (const_tree, HOST_WIDE_INT);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -264,6 +265,9 @@ static bool iq2000_modes_tieable_p (machine_mode, machine_mode);\n #undef  TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P\t\tiq2000_modes_tieable_p\n \n+#undef  TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT\tiq2000_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return nonzero if we split the address into high and low parts.  */\n@@ -3532,4 +3536,14 @@ iq2000_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n \t      || GET_MODE_CLASS (mode2) == MODE_COMPLEX_FLOAT));\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+iq2000_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n+\n #include \"gt-iq2000.h\""}, {"sha": "58c3597fd7802498f0f7941aa0f183cfd9258290", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -96,10 +96,6 @@\n \t|| TREE_CODE (TYPE) == UNION_TYPE\t\t\t\t\\\n \t|| TREE_CODE (TYPE) == RECORD_TYPE)) ? BITS_PER_WORD : (ALIGN))\n \n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\t\\\n-  ((TREE_CODE (EXP) == STRING_CST  || TREE_CODE (EXP) == CONSTRUCTOR)\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n #define EMPTY_FIELD_BOUNDARY 32\n \n #define STRUCTURE_SIZE_BOUNDARY 8"}, {"sha": "a4aade494d6f0e20d5108d28cf54e3a5840a9f8b", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -113,6 +113,9 @@ static bool lm32_modes_tieable_p (machine_mode, machine_mode);\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P lm32_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Current frame information calculated by lm32_compute_frame_size.  */"}, {"sha": "605bd68ca7cbd7f12006e22a02bf8cffb2e76730", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -99,11 +99,6 @@ do {                                                    \\\n \n #define TARGET_FLOAT_FORMAT IEEE_FLOAT_FORMAT\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n /* Make arrays and structures word-aligned to allow faster copying etc.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n   ((((ALIGN) < BITS_PER_WORD)\t\t\t\t\t\t\\"}, {"sha": "aefab935c34f1e1c34226ee52c5c340ec3c681bb", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -217,6 +217,9 @@ static const struct attribute_spec m32r_attribute_table[] =\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P m32r_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by m32r_option_override to initialize various things.  */"}, {"sha": "5b2a93bfca8b315c8f1c7d77d139636dedde9a70", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -260,12 +260,6 @@\n /* The best alignment to use in cases where we have a choice.  */\n #define FASTEST_ALIGNMENT 32\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\"}, {"sha": "04dfb9d085a9e6ffef2db420f8f8143ee1aa1b91", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -248,6 +248,9 @@ static const struct attribute_spec mcore_attribute_table[] =\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P mcore_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */"}, {"sha": "f411186e56720c2afe27ef3a626ddb80f2277f40", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -148,12 +148,6 @@ extern char * mcore_current_function_name;\n    is GET_MODE_SIZE(DImode).  */\n #define MAX_FIXED_MODE_SIZE 32\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\"}, {"sha": "53ca016ce658f31f098ced6492ca86e86286ae6c", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -3800,6 +3800,16 @@ microblaze_machine_dependent_reorg (void)\n       return;\n     }\n }\n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+microblaze_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n \f\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO      microblaze_encode_section_info\n@@ -3904,6 +3914,9 @@ microblaze_machine_dependent_reorg (void)\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P microblaze_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT microblaze_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-microblaze.h\""}, {"sha": "2fc7fc50a15ec98ed9dda975d9702dc72790e9f5", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -234,12 +234,6 @@ extern enum pipeline_type microblaze_pipe;\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n \n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\t\\\n-  ((TREE_CODE (EXP) == STRING_CST  || TREE_CODE (EXP) == CONSTRUCTOR)\t\\\n-   && (ALIGN) < BITS_PER_WORD\t\t\t\t\t\t\\\n-\t? BITS_PER_WORD\t\t\t\t\t\t\t\\\n-\t: (ALIGN))\n-\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n   ((((ALIGN) < BITS_PER_WORD)\t\t\t\t\t\t\\\n     && (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\"}, {"sha": "41333755b841596f1193254702defb869536dcc4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -22336,6 +22336,16 @@ mips_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n {\n   return !TARGET_64BIT || inprec <= 32 || outprec > 32;\n }\n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+mips_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -22634,6 +22644,9 @@ mips_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n #undef TARGET_TRULY_NOOP_TRUNCATION\n #define TARGET_TRULY_NOOP_TRUNCATION mips_truly_noop_truncation\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT mips_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "a2d8c7c135025be04bbb1798e78c6e4cbcaa21d0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1636,22 +1636,6 @@ FP_ASM_SPEC \"\\\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* If defined, a C expression to compute the alignment given to a\n-   constant that is being placed in memory.  CONSTANT is the constant\n-   and ALIGN is the alignment that the object would ordinarily have.\n-   The value of this macro is used instead of that alignment to align\n-   the object.\n-\n-   If this macro is not defined, then ALIGN is used.\n-\n-   The typical use of this macro is to increase alignment for string\n-   constants to be word aligned so that `strcpy' calls that copy\n-   constants can be done inline.  */\n-\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\t\\\n-  ((TREE_CODE (EXP) == STRING_CST  || TREE_CODE (EXP) == CONSTRUCTOR)\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n /* If defined, a C expression to compute the alignment for a static\n    variable.  TYPE is the data type, and ALIGN is the alignment that\n    the object would ordinarily have.  The value of this macro is used"}, {"sha": "6c38924f479c1e9ec02cca8b0d1a9018f85b5626", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -47,7 +47,6 @@ extern unsigned mmix_dbx_register_number (unsigned);\n extern int mmix_use_simple_return (void);\n extern void mmix_make_decl_one_only (tree);\n extern int mmix_data_alignment (tree, int);\n-extern int mmix_constant_alignment (tree, int);\n extern unsigned mmix_local_alignment (tree, unsigned);\n extern void mmix_asm_output_pool_prologue (FILE *, const char *, tree, int);\n extern void mmix_asm_output_aligned_common (FILE *, const char *, int, int);"}, {"sha": "09e752dca0dad3c3130151db6e89dc8b8a5cd859", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -168,6 +168,7 @@ static void mmix_print_operand (FILE *, rtx, int);\n static void mmix_print_operand_address (FILE *, machine_mode, rtx);\n static bool mmix_print_operand_punct_valid_p (unsigned char);\n static void mmix_conditional_register_usage (void);\n+static HOST_WIDE_INT mmix_constant_alignment (const_tree, HOST_WIDE_INT);\n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n    for a general description.  */\n@@ -282,6 +283,9 @@ static void mmix_conditional_register_usage (void);\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mmix_option_override\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT mmix_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n@@ -334,10 +338,10 @@ mmix_data_alignment (tree type ATTRIBUTE_UNUSED, int basic_align)\n   return basic_align;\n }\n \n-/* CONSTANT_ALIGNMENT.  */\n+/* Implement tARGET_CONSTANT_ALIGNMENT.  */\n \n-int\n-mmix_constant_alignment (tree constant ATTRIBUTE_UNUSED, int basic_align)\n+static HOST_WIDE_INT\n+mmix_constant_alignment (const_tree, HOST_WIDE_INT basic_align)\n {\n   if (basic_align < 32)\n     return 32;"}, {"sha": "7d1e83c28e0be855b8d317f8e65815c9e5f9e12c", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -167,9 +167,6 @@ struct GTY(()) machine_function\n #define DATA_ABI_ALIGNMENT(TYPE, BASIC_ALIGN) \\\n  mmix_data_alignment (TYPE, BASIC_ALIGN)\n \n-#define CONSTANT_ALIGNMENT(CONSTANT, BASIC_ALIGN) \\\n- mmix_constant_alignment (CONSTANT, BASIC_ALIGN)\n-\n #define LOCAL_ALIGNMENT(TYPE, BASIC_ALIGN) \\\n  mmix_local_alignment (TYPE, BASIC_ALIGN)\n "}, {"sha": "4901237485844a5357e46e65fec2eb75f7f2736c", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -667,6 +667,9 @@ moxie_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n #undef  TARGET_PRINT_OPERAND_ADDRESS\n #define TARGET_PRINT_OPERAND_ADDRESS moxie_print_operand_address\n \n+#undef  TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-moxie.h\""}, {"sha": "29442fb47e8f3cb1d2dbe0cc3bcdad87257d0a10", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -317,12 +317,6 @@ enum reg_class\n    is GET_MODE_SIZE(DImode).  */\n #define MAX_FIXED_MODE_SIZE 32\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\"}, {"sha": "2602605fb2142e86978f48e6727537df099983ff", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -5116,6 +5116,9 @@ nios2_adjust_reg_alloc_order (void)\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG nios2_reorg\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-nios2.h\""}, {"sha": "10bebfbcdd30fbd671943b1f1333f76ca37af5d4", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -92,10 +92,6 @@\n #define PREFERRED_STACK_BOUNDARY 32\n #define MAX_FIXED_MODE_SIZE 64\n \n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)                          \\\n-  ((TREE_CODE (EXP) == STRING_CST)                              \\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n #define LABEL_ALIGN(LABEL) nios2_label_align (LABEL)\n \n /* Layout of source language data types.  */"}, {"sha": "2586f92d837aa5bd99ddd77d401f183313497a88", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -425,6 +425,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS pa_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */"}, {"sha": "fbfbe488363100e8e951bd7d11227ccda6a890c0", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -309,11 +309,6 @@ typedef struct GTY(()) machine_function\n    atomic operations.  */\n #define MALLOC_ABI_ALIGNMENT (TARGET_SOM ? 64 : 128)\n \n-/* Get around hp-ux assembler bug, and make strcpy of constants fast.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\\\n-  (TREE_CODE (EXP) == STRING_CST\t\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\"}, {"sha": "12af88417ba90b80fbc6eeab99cd3c0528221de7", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1984,6 +1984,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS rs6000_can_change_mode_class\n+\n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT rs6000_constant_alignment\n \f\n \n /* Processor table.  */\n@@ -43752,6 +43755,17 @@ rs6000_optab_supported_p (int op, machine_mode mode1, machine_mode,\n       return true;\n     }\n }\n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+rs6000_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST\n+      && (STRICT_ALIGNMENT || !optimize_size))\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n \f\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "8381785067c48a05a55f8aeeea83ea886b5d2c3a", "filename": "gcc/config/powerpcspe/powerpcspe.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -978,14 +978,6 @@ enum data_align { align_abi, align_opt, align_both };\n #define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n   rs6000_data_alignment (TYPE, ALIGN, align_both)\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)                           \\\n-  (TREE_CODE (EXP) == STRING_CST\t                         \\\n-   && (STRICT_ALIGNMENT || !optimize_size)                       \\\n-   && (ALIGN) < BITS_PER_WORD                                    \\\n-   ? BITS_PER_WORD                                               \\\n-   : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN) \\\n   rs6000_data_alignment (TYPE, ALIGN, align_opt)"}, {"sha": "c34468e018d6b21160329dd81a316b841f61ea75", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -3995,6 +3995,17 @@ riscv_can_change_mode_class (machine_mode, machine_mode, reg_class_t rclass)\n   return !reg_classes_intersect_p (FP_REGS, rclass);\n }\n \n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+riscv_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -4142,6 +4153,9 @@ riscv_can_change_mode_class (machine_mode, machine_mode, reg_class_t rclass)\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS riscv_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT riscv_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-riscv.h\""}, {"sha": "c31d2cc99579c94ac84e6069f5ecafa164859b96", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -152,22 +152,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* If defined, a C expression to compute the alignment given to a\n-   constant that is being placed in memory.  CONSTANT is the constant\n-   and ALIGN is the alignment that the object would ordinarily have.\n-   The value of this macro is used instead of that alignment to align\n-   the object.\n-\n-   If this macro is not defined, then ALIGN is used.\n-\n-   The typical use of this macro is to increase alignment for string\n-   constants to be word aligned so that `strcpy' calls that copy\n-   constants can be done inline.  */\n-\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\t\\\n-  ((TREE_CODE (EXP) == STRING_CST  || TREE_CODE (EXP) == CONSTRUCTOR)\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n /* If defined, a C expression to compute the alignment for a static\n    variable.  TYPE is the data type, and ALIGN is the alignment that\n    the object would ordinarily have.  The value of this macro is used"}, {"sha": "3c01546658f7847cea368680a9e594db10f55068", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1974,6 +1974,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS rs6000_can_change_mode_class\n+\n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT rs6000_constant_alignment\n \f\n \n /* Processor table.  */\n@@ -39195,6 +39198,17 @@ rs6000_optab_supported_p (int op, machine_mode mode1, machine_mode,\n       return true;\n     }\n }\n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+rs6000_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST\n+      && (STRICT_ALIGNMENT || !optimize_size))\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n \f\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "60219726f9df072bdb2558c3ff17f5be2c568695", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -950,14 +950,6 @@ enum data_align { align_abi, align_opt, align_both };\n #define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n   rs6000_data_alignment (TYPE, ALIGN, align_both)\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)                           \\\n-  (TREE_CODE (EXP) == STRING_CST\t                         \\\n-   && (STRICT_ALIGNMENT || !optimize_size)                       \\\n-   && (ALIGN) < BITS_PER_WORD                                    \\\n-   ? BITS_PER_WORD                                               \\\n-   : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN) \\\n   rs6000_data_alignment (TYPE, ALIGN, align_opt)"}, {"sha": "e3fafa2a642a1c59ab3a4a19b5d20fdec66c0090", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -15906,6 +15906,15 @@ s390_vector_alignment (const_tree type)\n   return MIN (64, tree_to_shwi (TYPE_SIZE (type)));\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  Alignment on even addresses for\n+   LARL instruction.  */\n+\n+static HOST_WIDE_INT\n+s390_constant_alignment (const_tree, HOST_WIDE_INT align)\n+{\n+  return MAX (align, 16);\n+}\n+\n #ifdef HAVE_AS_MACHINE_MACHINEMODE\n /* Implement TARGET_ASM_FILE_START.  */\n static void\n@@ -16325,6 +16334,9 @@ s390_asan_shadow_offset (void)\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS s390_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT s390_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "52eee948bdf92e644f944277b19f2ee9eea5db09", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -315,7 +315,6 @@ extern const char *s390_host_detect_local_cpu (int argc, const char **argv);\n #define EMPTY_FIELD_BOUNDARY 32\n \n /* Alignment on even addresses for LARL instruction.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN) (ALIGN) < 16 ? 16 : (ALIGN)\n #define DATA_ABI_ALIGNMENT(TYPE, ALIGN) (ALIGN) < 16 ? 16 : (ALIGN)\n \n /* Alignment is not required by the hardware.  */"}, {"sha": "3c6d525eb0ccb23ef4524f6611659afeb0bbeb81", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -657,6 +657,9 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS sh_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n "}, {"sha": "339bf284862abd0811eb7ccaac05e87829484118", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -462,12 +462,6 @@ extern const sh_atomic_model& selected_atomic_model (void);\n /* The best alignment to use in cases where we have a choice.  */\n #define FASTEST_ALIGNMENT (32)\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-    ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* get_mode_alignment assumes complex values are always held in multiple\n    registers, but that is not the case on the SH; CQImode and CHImode are\n    held in a single integer register.  */"}, {"sha": "d3f002d8198e0a4875fa42a90badedae8fa39c84", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -684,6 +684,7 @@ static bool sparc_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool sparc_modes_tieable_p (machine_mode, machine_mode);\n static bool sparc_can_change_mode_class (machine_mode, machine_mode,\n \t\t\t\t\t reg_class_t);\n+static HOST_WIDE_INT sparc_constant_alignment (const_tree, HOST_WIDE_INT);\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n /* Table of valid machine attributes.  */\n@@ -925,6 +926,9 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS sparc_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT sparc_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Return the memory reference contained in X if any, zero otherwise.  */\n@@ -13429,4 +13433,14 @@ sparc_can_change_mode_class (machine_mode from, machine_mode to,\n   return true;\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+sparc_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST)\n+    return MAX (align, FASTEST_ALIGNMENT);\n+  return align;\n+}\n+\n #include \"gt-sparc.h\""}, {"sha": "9ac741f569be2b07a32b38e608970f1051f31864", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -579,12 +579,6 @@ extern enum cmodel sparc_cmodel;\n #define STACK_SAVEAREA_MODE(LEVEL) \\\n   ((LEVEL) == SAVE_NONLOCAL ? (TARGET_ARCH64 ? TImode : DImode) : Pmode)\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\"}, {"sha": "b9af9a969f7afdef93541e5384565f95d5abf630", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -4159,7 +4159,7 @@ spu_encode_section_info (tree decl, rtx rtl, int first)\n    which is both 16-byte aligned and padded to a 16-byte boundary.  This\n    would make it safe to store with a single instruction. \n    We guarantee the alignment and padding for static objects by aligning\n-   all of them to 16-bytes. (DATA_ALIGNMENT and CONSTANT_ALIGNMENT.)\n+   all of them to 16-bytes. (DATA_ALIGNMENT and TARGET_CONSTANT_ALIGNMENT.)\n    FIXME: We currently cannot guarantee this for objects on the stack\n    because assign_parm_setup_stack calls assign_stack_local with the\n    alignment of the parameter mode and in that case the alignment never\n@@ -7193,6 +7193,18 @@ spu_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n {\n   return inprec <= 32 && outprec <= inprec;\n }\n+\n+/* Implement TARGET_CONSTANT_ALIGNMENT.\n+\n+   Make all static objects 16-byte aligned.  This allows us to assume\n+   they are also padded to 16 bytes, which means we can use a single\n+   load or store instruction to access them.  */\n+\n+static HOST_WIDE_INT\n+spu_constant_alignment (const_tree, HOST_WIDE_INT align)\n+{\n+  return MAX (align, 128);\n+}\n \f\n /*  Table of machine attributes.  */\n static const struct attribute_spec spu_attribute_table[] =\n@@ -7433,6 +7445,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_TRULY_NOOP_TRUNCATION\n #define TARGET_TRULY_NOOP_TRUNCATION spu_truly_noop_truncation\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT spu_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-spu.h\""}, {"sha": "de4aa99f2761e02337735efd91971f3cc306e3ef", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -96,7 +96,6 @@ extern GTY(()) int spu_tune;\n    on the stack.  (Except a bug (?) allows some stack objects to be\n    unaligned.)  */\n #define DATA_ALIGNMENT(TYPE,ALIGN) ((ALIGN) > 128 ? (ALIGN) : 128)\n-#define CONSTANT_ALIGNMENT(TYPE,ALIGN) ((ALIGN) > 128 ? (ALIGN) : 128)\n #define LOCAL_ALIGNMENT(TYPE,ALIGN) ((ALIGN) > 128 ? (ALIGN) : 128)\n \n #define EMPTY_FIELD_BOUNDARY 32"}, {"sha": "d0bd4335073ae5637af2aee2181208750cda6a2e", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -2715,6 +2715,9 @@ xstormy16_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P xstormy16_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-stormy16.h\""}, {"sha": "31d6156cc2676c4240219a907f5f09bad1d3c5bb", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -87,10 +87,6 @@\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n #define STRICT_ALIGNMENT 1\n \n #define PCC_BITFIELD_TYPE_MATTERS 1"}, {"sha": "63fe3406ae988881c0821a0f36435cf4873db563", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -5734,6 +5734,9 @@ tilegx_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n #undef  TARGET_TRULY_NOOP_TRUNCATION\n #define TARGET_TRULY_NOOP_TRUNCATION tilegx_truly_noop_truncation\n \n+#undef  TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-tilegx.h\""}, {"sha": "066c34d2155c7b9b648db344385d89f092ad0a56", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -94,13 +94,6 @@\n #define BIGGEST_FIELD_ALIGNMENT 128\n #define WIDEST_HARDWARE_FP_SIZE 64\n \n-/* Make strings word-aligned so strcpy from constants will be\n-   faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\"}, {"sha": "ee9bc0a93437754bd2580be7074d2ff049dc4c07", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -5091,6 +5091,9 @@ tilepro_file_end (void)\n #undef  TARGET_CAN_USE_DOLOOP_P\n #define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n \n+#undef  TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-tilepro.h\""}, {"sha": "5ab8be49be0909c3f216cf04cf66fa267d4e4a3b", "filename": "gcc/config/tilepro/tilepro.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -58,13 +58,6 @@\n #define FASTEST_ALIGNMENT 32\n #define BIGGEST_FIELD_ALIGNMENT 64\n \n-/* Make strings word-aligned so strcpy from constants will be\n-   faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  ((TREE_CODE (EXP) == STRING_CST\t\\\n-    && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n-   ? FASTEST_ALIGNMENT : (ALIGN))\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\"}, {"sha": "381d432778d2a66e6ec9f46ada22f4bc98d7bf5c", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -237,6 +237,8 @@ static bool visium_modes_tieable_p (machine_mode, machine_mode);\n static bool visium_can_change_mode_class (machine_mode, machine_mode,\n \t\t\t\t\t  reg_class_t);\n \n+static HOST_WIDE_INT visium_constant_alignment (const_tree, HOST_WIDE_INT);\n+\n /* Setup the global target hooks structure.  */\n \n #undef  TARGET_MAX_ANCHOR_OFFSET\n@@ -360,6 +362,9 @@ static bool visium_can_change_mode_class (machine_mode, machine_mode,\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS visium_can_change_mode_class\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT visium_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n namespace {\n@@ -834,6 +839,14 @@ visium_data_alignment (tree type, unsigned int align)\n   return align;\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+visium_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  return visium_data_alignment (TREE_TYPE (exp), align);\n+}\n+\n /* Helper function for HARD_REGNO_RENAME_OK (FROM, TO).  Return non-zero if\n    it is OK to rename a hard register FROM to another hard register TO.  */\n "}, {"sha": "3cc0bc41280fde7f26f42eeead887a41823e9484", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -236,16 +236,6 @@\n    this macro is used instead of that alignment to align the object. */\n #define DATA_ALIGNMENT(TYPE,ALIGN) visium_data_alignment (TYPE, ALIGN)\n \n-/* `CONSTANT_ALIGNMENT (CONSTANT, BASIC-ALIGN)`\n-\n-   If defined, a C expression to compute the alignment given to a\n-   constant that is being placed in memory.  CONSTANT is the constant\n-   and BASIC-ALIGN is the alignment that the object would ordinarily\n-   have.  The value of this macro is used instead of that alignment to\n-   align the object. */\n-#define CONSTANT_ALIGNMENT(EXP,ALIGN) \\\n-  visium_data_alignment (TREE_TYPE (EXP), ALIGN)\n-\n /* `LOCAL_ALIGNMENT (TYPE, BASIC-ALIGN)`\n \n    If defined, a C expression to compute the alignment for a variable"}, {"sha": "3d60e317e6c7b4b793f9b39e1fb464d5ab724b98", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -181,6 +181,7 @@ static void xtensa_conditional_register_usage (void);\n static unsigned int xtensa_hard_regno_nregs (unsigned int, machine_mode);\n static bool xtensa_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool xtensa_modes_tieable_p (machine_mode, machine_mode);\n+static HOST_WIDE_INT xtensa_constant_alignment (const_tree, HOST_WIDE_INT);\n \n \f\n \n@@ -317,6 +318,9 @@ static bool xtensa_modes_tieable_p (machine_mode, machine_mode);\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P xtensa_modes_tieable_p\n \n+#undef TARGET_CONSTANT_ALIGNMENT\n+#define TARGET_CONSTANT_ALIGNMENT xtensa_constant_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -4380,4 +4384,19 @@ enum reg_class xtensa_regno_to_class (int regno)\n     return regno_to_class[regno];\n }\n \n+/* Implement TARGET_CONSTANT_ALIGNMENT.  Align string constants and\n+   constructors to at least a word boundary.  The typical use of this\n+   macro is to increase alignment for string constants to be word\n+   aligned so that 'strcpy' calls that copy constants can be done\n+   inline.  */\n+\n+static HOST_WIDE_INT\n+xtensa_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if ((TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+      && !optimize_size)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n+\n #include \"gt-xtensa.h\""}, {"sha": "f9216391e25c0ab8af39ee2c48585b1d8acba70a", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -169,17 +169,6 @@ along with GCC; see the file COPYING3.  If not see\n    bitfields and the structures that contain them.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* Align string constants and constructors to at least a word boundary.\n-   The typical use of this macro is to increase alignment for string\n-   constants to be word aligned so that 'strcpy' calls that copy\n-   constants can be done inline.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\t\\\n-  (!optimize_size &&\t\t\t\t\t\t\t\\\n-   (TREE_CODE (EXP) == STRING_CST || TREE_CODE (EXP) == CONSTRUCTOR)\t\\\n-   && (ALIGN) < BITS_PER_WORD\t\t\t\t\t\t\\\n-\t? BITS_PER_WORD\t\t\t\t\t\t\t\\\n-\t: (ALIGN))\n-\n /* Align arrays, unions and records to at least a word boundary.\n    One use of this macro is to increase alignment of medium-size\n    data to make it all fit in fewer cache lines.  Another is to"}, {"sha": "99cd9db5191a8d17983c4d89909e020623cb397f", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1265,10 +1265,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LOAD_EXTEND_OP(M) UNKNOWN\n #endif\n \n-#ifndef CONSTANT_ALIGNMENT\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN) ALIGN\n-#endif\n-\n #ifndef INITIAL_FRAME_ADDRESS_RTX\n #define INITIAL_FRAME_ADDRESS_RTX NULL\n #endif"}, {"sha": "8f503e1904ecb04e24d80a2c9c43f05345028d2a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1102,19 +1102,18 @@ must be aligned to 16 byte boundaries.\n If this macro is not defined, then @var{basic-align} is used.\n @end defmac\n \n-@defmac CONSTANT_ALIGNMENT (@var{constant}, @var{basic-align})\n-If defined, a C expression to compute the alignment given to a constant\n-that is being placed in memory.  @var{constant} is the constant and\n-@var{basic-align} is the alignment that the object would ordinarily\n-have.  The value of this macro is used instead of that alignment to\n-align the object.\n+@deftypefn {Target Hook} HOST_WIDE_INT TARGET_CONSTANT_ALIGNMENT (const_tree @var{constant}, HOST_WIDE_INT @var{basic_align})\n+This hook returns the alignment in bits of a constant that is being\n+placed in memory.  @var{constant} is the constant and @var{basic_align}\n+is the alignment that the object would ordinarily have.\n \n-The default definition just returns @var{basic-align}.\n+The default definition just returns @var{basic_align}.\n \n-The typical use of this macro is to increase alignment for string\n+The typical use of this hook is to increase alignment for string\n constants to be word aligned so that @code{strcpy} calls that copy\n-constants can be done inline.\n-@end defmac\n+constants can be done inline.  The function\n+@code{constant_alignment_word_strings} provides such a definition.\n+@end deftypefn\n \n @defmac LOCAL_ALIGNMENT (@var{type}, @var{basic-align})\n If defined, a C expression to compute the alignment for a variable in"}, {"sha": "15b3f1f67715a66f8efce13e113340acb5a2329a", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1050,19 +1050,7 @@ must be aligned to 16 byte boundaries.\n If this macro is not defined, then @var{basic-align} is used.\n @end defmac\n \n-@defmac CONSTANT_ALIGNMENT (@var{constant}, @var{basic-align})\n-If defined, a C expression to compute the alignment given to a constant\n-that is being placed in memory.  @var{constant} is the constant and\n-@var{basic-align} is the alignment that the object would ordinarily\n-have.  The value of this macro is used instead of that alignment to\n-align the object.\n-\n-The default definition just returns @var{basic-align}.\n-\n-The typical use of this macro is to increase alignment for string\n-constants to be word aligned so that @code{strcpy} calls that copy\n-constants can be done inline.\n-@end defmac\n+@hook TARGET_CONSTANT_ALIGNMENT\n \n @defmac LOCAL_ALIGNMENT (@var{type}, @var{basic-align})\n If defined, a C expression to compute the alignment for a variable in"}, {"sha": "59449f1942ba090dacc130525cc3d1de968879df", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -915,7 +915,7 @@ extern void fancy_abort (const char *, int, const char *)\n \tMODES_TIEABLE_P FUNCTION_ARG_PADDING SLOW_UNALIGNED_ACCESS\t\\\n \tHARD_REGNO_NREGS SECONDARY_MEMORY_NEEDED_MODE\t\t\t\\\n \tSECONDARY_MEMORY_NEEDED CANNOT_CHANGE_MODE_CLASS\t\t\\\n-\tTRULY_NOOP_TRUNCATION FUNCTION_ARG_OFFSET\n+\tTRULY_NOOP_TRUNCATION FUNCTION_ARG_OFFSET CONSTANT_ALIGNMENT\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}, {"sha": "80ef7469a503b5b35e882c8e17e979806442016a", "filename": "gcc/target.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -3335,6 +3335,21 @@ HOOK_VECTOR_END (addr_space)\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n \n+DEFHOOK\n+(constant_alignment,\n+ \"This hook returns the alignment in bits of a constant that is being\\n\\\n+placed in memory.  @var{constant} is the constant and @var{basic_align}\\n\\\n+is the alignment that the object would ordinarily have.\\n\\\n+\\n\\\n+The default definition just returns @var{basic_align}.\\n\\\n+\\n\\\n+The typical use of this hook is to increase alignment for string\\n\\\n+constants to be word aligned so that @code{strcpy} calls that copy\\n\\\n+constants can be done inline.  The function\\n\\\n+@code{constant_alignment_word_strings} provides such a definition.\",\n+ HOST_WIDE_INT, (const_tree constant, HOST_WIDE_INT basic_align),\n+ default_constant_alignment)\n+\n /* True if MODE is valid for the target.  By \"valid\", we mean able to\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported.  */"}, {"sha": "d56f53d35d8ecb3a50dcefa0784c1596ac1da362", "filename": "gcc/targhooks.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1165,6 +1165,25 @@ tree default_mangle_decl_assembler_name (tree decl ATTRIBUTE_UNUSED,\n    return id;\n }\n \n+/* The default implementation of TARGET_CONSTANT_ALIGNMENT.  */\n+\n+HOST_WIDE_INT\n+default_constant_alignment (const_tree, HOST_WIDE_INT align)\n+{\n+  return align;\n+}\n+\n+/* An implementation of TARGET_CONSTANT_ALIGNMENT that aligns strings\n+   to at least BITS_PER_WORD but otherwise makes no changes.  */\n+\n+HOST_WIDE_INT\n+constant_alignment_word_strings (const_tree exp, HOST_WIDE_INT align)\n+{\n+  if (TREE_CODE (exp) == STRING_CST)\n+    return MAX (align, BITS_PER_WORD);\n+  return align;\n+}\n+\n /* Default to natural alignment for vector types.  */\n HOST_WIDE_INT\n default_vector_alignment (const_tree type)"}, {"sha": "db1a087942a9467a6342958402a1e92522616f06", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -93,6 +93,9 @@ extern int default_builtin_vectorization_cost (enum vect_cost_for_stmt, tree, in\n \n extern tree default_builtin_reciprocal (tree);\n \n+extern HOST_WIDE_INT default_constant_alignment (const_tree, HOST_WIDE_INT);\n+extern HOST_WIDE_INT constant_alignment_word_strings (const_tree,\n+\t\t\t\t\t\t      HOST_WIDE_INT);\n extern HOST_WIDE_INT default_vector_alignment (const_tree);\n \n extern HOST_WIDE_INT default_preferred_vector_alignment (const_tree);"}, {"sha": "55fca76fab9dc0f9f8c2a77bbe13967ea15910de", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e17cf84636d72e3620b5af50b0336d9364ddd0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=58e17cf84636d72e3620b5af50b0336d9364ddd0", "patch": "@@ -1055,7 +1055,7 @@ align_variable (tree decl, bool dont_output_data)\n \t      && (in_lto_p || DECL_INITIAL (decl) != error_mark_node))\n \t    {\n \t      unsigned int const_align\n-\t\t= CONSTANT_ALIGNMENT (DECL_INITIAL (decl), align);\n+\t\t= targetm.constant_alignment (DECL_INITIAL (decl), align);\n \t      /* Don't increase alignment too much for TLS variables - TLS\n \t\t space is too precious.  */\n \t      if (! DECL_THREAD_LOCAL_P (decl) || const_align <= BITS_PER_WORD)\n@@ -1106,8 +1106,8 @@ get_variable_align (tree decl)\n \t     to mark offlined constructors.  */\n \t  && (in_lto_p || DECL_INITIAL (decl) != error_mark_node))\n \t{\n-\t  unsigned int const_align = CONSTANT_ALIGNMENT (DECL_INITIAL (decl),\n-\t\t\t\t\t\t\t align);\n+\t  unsigned int const_align\n+\t    = targetm.constant_alignment (DECL_INITIAL (decl), align);\n \t  /* Don't increase alignment too much for TLS variables - TLS space\n \t     is too precious.  */\n \t  if (! DECL_THREAD_LOCAL_P (decl) || const_align <= BITS_PER_WORD)\n@@ -3326,12 +3326,10 @@ build_constant_desc (tree exp)\n      Instead we set the flag that will be recognized in make_decl_rtl.  */\n   DECL_IN_CONSTANT_POOL (decl) = 1;\n   DECL_INITIAL (decl) = desc->value;\n-  /* ??? CONSTANT_ALIGNMENT hasn't been updated for vector types on most\n-     architectures so use DATA_ALIGNMENT as well, except for strings.  */\n+  /* ??? targetm.constant_alignment hasn't been updated for vector types on\n+     most architectures so use DATA_ALIGNMENT as well, except for strings.  */\n   if (TREE_CODE (exp) == STRING_CST)\n-    {\n-      SET_DECL_ALIGN (decl, CONSTANT_ALIGNMENT (exp, DECL_ALIGN (decl)));\n-    }\n+    SET_DECL_ALIGN (decl, targetm.constant_alignment (exp, DECL_ALIGN (decl)));\n   else\n     align_variable (decl, 0);\n \n@@ -3790,7 +3788,7 @@ force_const_mem (machine_mode mode, rtx x)\n \n   tree type = lang_hooks.types.type_for_mode (mode, 0);\n   if (type != NULL_TREE)\n-    align = CONSTANT_ALIGNMENT (make_tree (type, x), align);\n+    align = targetm.constant_alignment (make_tree (type, x), align);\n \n   pool->offset += (align / BITS_PER_UNIT) - 1;\n   pool->offset &= ~ ((align / BITS_PER_UNIT) - 1);"}]}