{"sha": "7b65ed544822a16bf1786ecab90412bd26cf7f62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2NWVkNTQ0ODIyYTE2YmYxNzg2ZWNhYjkwNDEyYmQyNmNmN2Y2Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-09-08T06:41:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-09-08T06:41:49Z"}, "message": "re PR target/11689 (g++3.3 emits un-assembleable code for k6 architecture)\n\n\tPR target/11689\n\t* config/i386/i386.c (memory_address_length): Fix computation when\n\tthe base is esp or ebp.\n\nFrom-SVN: r71198", "tree": {"sha": "18f46d4c3950b44a19601869093814166470bd2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f46d4c3950b44a19601869093814166470bd2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b65ed544822a16bf1786ecab90412bd26cf7f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b65ed544822a16bf1786ecab90412bd26cf7f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b65ed544822a16bf1786ecab90412bd26cf7f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b65ed544822a16bf1786ecab90412bd26cf7f62/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a4f08f318032e79025792157c9aad041ca96968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f08f318032e79025792157c9aad041ca96968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4f08f318032e79025792157c9aad041ca96968"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "06f8a05d2009dc5db7b0c6b0c738fb65cd701bad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b65ed544822a16bf1786ecab90412bd26cf7f62", "patch": "@@ -1,3 +1,9 @@\n+2003-09-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/11689\n+\t* config/i386/i386.c (memory_address_length): Fix computation when\n+\tthe base is esp or ebp.\n+\n 2003-09-07  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11852"}, {"sha": "04baa3c2365f9ea03309ba1dc7dd08f006d0235f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7b65ed544822a16bf1786ecab90412bd26cf7f62", "patch": "@@ -11654,10 +11654,15 @@ memory_address_length (rtx addr)\n   disp = parts.disp;\n   len = 0;\n \n+  /* Rule of thumb:\n+       - esp as the base always wants an index,\n+       - ebp as the base always wants a displacement.  */\n+\n   /* Register Indirect.  */\n   if (base && !index && !disp)\n     {\n-      /* Special cases: ebp and esp need the two-byte modrm form.  */\n+      /* esp (for its index) and ebp (for its displacement) need\n+\t the two-byte modrm form.  */\n       if (addr == stack_pointer_rtx\n \t  || addr == arg_pointer_rtx\n \t  || addr == frame_pointer_rtx\n@@ -11681,9 +11686,16 @@ memory_address_length (rtx addr)\n \t  else\n \t    len = 4;\n \t}\n+      /* ebp always wants a displacement.  */\n+      else if (base == hard_frame_pointer_rtx)\n+        len = 1;\n \n-      /* An index requires the two-byte modrm form.  */\n-      if (index)\n+      /* An index requires the two-byte modrm form...  */\n+      if (index\n+\t  /* ...like esp, which always wants an index.  */\n+\t  || base == stack_pointer_rtx\n+\t  || base == arg_pointer_rtx\n+\t  || base == frame_pointer_rtx)\n \tlen += 1;\n     }\n "}, {"sha": "3ee1a767ea6add1558be342270566515acbe1e0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b65ed544822a16bf1786ecab90412bd26cf7f62", "patch": "@@ -1,3 +1,7 @@\n+2003-09-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/opt/longbranch2.C: New test.\n+\n 2003-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++.dg/template/crash10.C: Only compile it."}, {"sha": "b74ceddf085c02d73c902fc89b5236f2ef39fd22", "filename": "gcc/testsuite/g++.dg/opt/longbranch2.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65ed544822a16bf1786ecab90412bd26cf7f62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch2.C?ref=7b65ed544822a16bf1786ecab90412bd26cf7f62", "patch": "@@ -0,0 +1,62 @@\n+// PR target/11689\n+// Originator: thor@math.tu-berlin.de\n+\n+// { dg-do compile }\n+// { dg-options \"-O3 -funroll-loops -mtune=k6 -fomit-frame-pointer\" { target i?86-*-*  } }\n+\n+// This used to fail to assemble because of an out-of-range 'loop' instructions.\n+\n+\n+class JKeeper {\n+public:\n+  unsigned long a0;\n+};\n+\n+class EBCOTLut : public JKeeper {\n+  unsigned char a1[1<<8];   \n+  unsigned char a2[1<<8];\n+  unsigned char a3[1<<8];\n+  long          a4[1<<9];\n+public:\n+  EBCOTLut(void);\n+};\n+\n+EBCOTLut::EBCOTLut(void)\n+{\n+  unsigned char inter[36];   // intermediate lookup table;\n+  unsigned long i;\n+  for(i=0;i<36;i++) {\n+    inter[i] = 0;\n+  }\n+  for(i=1;i<16;i++) {\n+    a1[i | (1<<7)] = 8<<1;\n+    a1[i | (1<<6)] = 8<<1;\n+  }\n+  for(i=0;i < ((1<<9)-1);i++) {\n+    int ds = (i>>0) & 0x01;    // significance of DOWN\n+    int us = (i>>1) & 0x01;    // significance of UP\n+    int rs = (i>>2) & 0x01;    // significance of RIGHT\n+    int ls = (i>>3) & 0x01;    // significance of LEFT\n+    int dn = (i>>5) & 0x01;    // sign of DOWN\n+    int un = (i>>6) & 0x01;    // sign of UP\n+    int rn = (i>>7) & 0x01;    // sign of RIGHT\n+    int ln = (i>>8) & 0x01;    // sign of LEFT\n+    int h,v;                   // h and v as in the VM description\n+\n+    h = ls*(1-ln*2) + rs*(1-2*rn);\n+    v = us*(1-un*2) + ds*(1-2*dn);\n+    h = (h >= -1)?(h):(-1);\n+    v = (v >= -1)?(v):(-1);\n+    h = (h <=  1)?(h):(1);\n+    v = (v <=  1)?(v):(1);\n+    a2[i] = inter[((h+1)<<3) | (v+1)];\n+    a3[i] = inter[((h+1)<<3) | (v+1)] & (unsigned char)(~1);\n+  }\n+  for(i=0;i< 1<<9; i++) {\n+    a4[i]    = 2*(i-(1<<(9-1)))*(i-(1<<(9-1))) - \n+      ((i< (1<<(9-1)))?\n+       (2*(i-(1<<(9-2)))*(i-(1<<(9-2)))):\n+       (2*(i-(3<<(9-2)))*(i-(3<<(9-2)))));\n+\n+  }\n+} "}]}