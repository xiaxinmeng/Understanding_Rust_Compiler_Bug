{"sha": "3734a25644d2f7ea652303f4268de9e52e4a5a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczNGEyNTY0NGQyZjdlYTY1MjMwM2Y0MjY4ZGU5ZTUyZTRhNWE2NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-29T22:27:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-29T22:27:53Z"}, "message": "compiler: Accept untyped integral values as string/array indices.\n\n    \n    When determining the type of an index for a string/array indexing\n    expression, the gofrontend would disallow floating-point and complex\n    values even if they were integral and throw an internal error.  This\n    patch changes gofrontend to use an integral type context when\n    determining the types of a string/array index.\n    \n    Fixes golang/go#11545.\n    \n    Reviewed-on: https://go-review.googlesource.com/13796\n\nFrom-SVN: r228270", "tree": {"sha": "be482fe03750db0319b2dd4ca21fd62cdae003d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be482fe03750db0319b2dd4ca21fd62cdae003d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3734a25644d2f7ea652303f4268de9e52e4a5a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3734a25644d2f7ea652303f4268de9e52e4a5a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3734a25644d2f7ea652303f4268de9e52e4a5a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3734a25644d2f7ea652303f4268de9e52e4a5a64/comments", "author": null, "committer": null, "parents": [{"sha": "01bdcc80e25866fcd982075617f62a53c18659a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bdcc80e25866fcd982075617f62a53c18659a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01bdcc80e25866fcd982075617f62a53c18659a3"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "eaa24dcbfef2f6931d0e1bc93e5876f307d889f2", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734a25644d2f7ea652303f4268de9e52e4a5a64/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734a25644d2f7ea652303f4268de9e52e4a5a64/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3734a25644d2f7ea652303f4268de9e52e4a5a64", "patch": "@@ -1,4 +1,4 @@\n-66c113f1af300ce27b99f18f792901d7327d6699\n+f187e13b712824b08f2a8833033840cd52a3b95a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "56bbf619bd85c596a755d1e97876165a67bec7c3", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734a25644d2f7ea652303f4268de9e52e4a5a64/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734a25644d2f7ea652303f4268de9e52e4a5a64/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3734a25644d2f7ea652303f4268de9e52e4a5a64", "patch": "@@ -9870,11 +9870,26 @@ void\n Array_index_expression::do_determine_type(const Type_context*)\n {\n   this->array_->determine_type_no_context();\n-  this->start_->determine_type_no_context();\n+\n+  Type_context index_context(Type::lookup_integer_type(\"int\"), false);\n+  if (this->start_->is_constant())\n+    this->start_->determine_type(&index_context);\n+  else\n+    this->start_->determine_type_no_context();\n   if (this->end_ != NULL)\n-    this->end_->determine_type_no_context();\n+    {\n+      if (this->end_->is_constant())\n+        this->end_->determine_type(&index_context);\n+      else\n+        this->end_->determine_type_no_context();\n+    }\n   if (this->cap_ != NULL)\n-    this->cap_->determine_type_no_context();\n+    {\n+      if (this->cap_->is_constant())\n+        this->cap_->determine_type(&index_context);\n+      else\n+        this->cap_->determine_type_no_context();\n+    }\n }\n \n // Check types of an array index.\n@@ -10415,9 +10430,19 @@ void\n String_index_expression::do_determine_type(const Type_context*)\n {\n   this->string_->determine_type_no_context();\n-  this->start_->determine_type_no_context();\n+\n+  Type_context index_context(Type::lookup_integer_type(\"int\"), false);\n+  if (this->start_->is_constant())\n+    this->start_->determine_type(&index_context);\n+  else\n+    this->start_->determine_type_no_context();\n   if (this->end_ != NULL)\n-    this->end_->determine_type_no_context();\n+    {\n+      if (this->end_->is_constant())\n+        this->end_->determine_type(&index_context);\n+      else\n+        this->end_->determine_type_no_context();\n+    }\n }\n \n // Check types of a string index."}]}