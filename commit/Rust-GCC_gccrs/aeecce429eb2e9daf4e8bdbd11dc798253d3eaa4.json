{"sha": "aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVlY2NlNDI5ZWIyZTlkYWY0ZThiZGJkMTFkYzc5ODI1M2QzZWFhNA==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "2000-01-04T21:09:51Z"}, "committer": {"name": "Mumit Khan", "email": "khan@gcc.gnu.org", "date": "2000-01-04T21:09:51Z"}, "message": "pexecute.c: Conditionally include string.h.\n\n2000-01-04  Mumit Khan  <khan@xraylith.wisc.edu>\n\n\t* pexecute.c: Conditionally include string.h.\n\t(fix_argv): Handle embedded whitespace in args for Mingw32.\n\nFrom-SVN: r31214", "tree": {"sha": "dd3b6ab2caedfc2fd72ca7e639185275c886e642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd3b6ab2caedfc2fd72ca7e639185275c886e642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4/comments", "author": null, "committer": null, "parents": [{"sha": "6be57663c901d480ffa904a115190a418bae26db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be57663c901d480ffa904a115190a418bae26db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be57663c901d480ffa904a115190a418bae26db"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "a0b4ed39d503cebd7b6f1be8f8b56f7b30e54342", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "patch": "@@ -1,3 +1,8 @@\n+2000-01-04  Mumit Khan  <khan@xraylith.wisc.edu>\n+\n+\t* pexecute.c: Conditionally include string.h.\n+\t(fix_argv): Handle embedded whitespace in args for Mingw32. \n+\n 2000-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in (ac_libiberty_warn_cflags): Turn on warnings if"}, {"sha": "5003f1fe4d54261802b3c8a8a125e7bf6e6b5218", "filename": "libiberty/pexecute.c", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4/libiberty%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4/libiberty%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.c?ref=aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "patch": "@@ -1,6 +1,6 @@\n /* Utilities to execute a program in a subprocess (possibly linked by pipes\n    with other subprocesses), and wait for it.\n-   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1996-2000 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or\n@@ -29,6 +29,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include <stdio.h>\n #include <errno.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n@@ -279,6 +282,45 @@ fix_argv (argvec)\n         argvec[i] = temp;\n       }\n \n+  for (i = 0; argvec[i] != 0; i++)\n+    {\n+      if (strpbrk (argvec[i], \" \\t\"))\n+        {\n+\t  int len, trailing_backslash;\n+\t  char *temp;\n+\n+\t  len = strlen (argvec[i]);\n+\t  trailing_backslash = 0;\n+\n+\t  /* There is an added complication when an arg with embedded white\n+\t     space ends in a backslash (such as in the case of -iprefix arg\n+\t     passed to cpp). The resulting quoted strings gets misinterpreted\n+\t     by the command interpreter -- it thinks that the ending quote\n+\t     is escaped by the trailing backslash and things get confused. \n+\t     We handle this case by escaping the trailing backslash, provided\n+\t     it was not escaped in the first place.  */\n+\t  if (len > 1 \n+\t      && argvec[i][len-1] == '\\\\' \n+\t      && argvec[i][len-2] != '\\\\')\n+\t    {\n+\t      trailing_backslash = 1;\n+\t      ++len;\t\t\t/* to escape the final backslash. */\n+\t    }\n+\n+\t  len += 2;\t\t\t/* and for the enclosing quotes. */\n+\n+\t  temp = xmalloc (len + 1);\n+\t  temp[0] = '\"';\n+\t  strcpy (temp + 1, argvec[i]);\n+\t  if (trailing_backslash)\n+\t    temp[len-2] = '\\\\';\n+\t  temp[len-1] = '\"';\n+\t  temp[len] = '\\0';\n+\n+\t  argvec[i] = temp;\n+\t}\n+    }\n+\n   return (const char * const *) argvec;\n }\n #endif /* __CYGWIN__ */"}]}