{"sha": "7ba6738bd24dacf4f207ddc7142dde603ddc7482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhNjczOGJkMjRkYWNmNGYyMDdkZGM3MTQyZGRlNjAzZGRjNzQ4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-05T11:05:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-05T11:05:59Z"}, "message": "re PR tree-optimization/87360 (ICE in remove_redundant_iv_tests at gcc/tree-ssa-loop-ivcanon.c:571 since r255467)\n\n\tPR tree-optimization/87360\n\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): On failure to analyze\n\tdata dependencies, don't return false, just continue.  Formatting\n\tfixes.\n\t(merge_loop_tree, bb_prevents_fusion_p, unroll_jam_possible_p,\n\tfuse_loops): Formatting fixes.\n\n\t* g++.dg/opt/pr87360.C: New test.\n\t* gfortran.dg/pr87360.f90: New test.\n\nFrom-SVN: r266820", "tree": {"sha": "934d9824366823f10ed625732339f448e2b34546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/934d9824366823f10ed625732339f448e2b34546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ba6738bd24dacf4f207ddc7142dde603ddc7482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba6738bd24dacf4f207ddc7142dde603ddc7482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba6738bd24dacf4f207ddc7142dde603ddc7482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba6738bd24dacf4f207ddc7142dde603ddc7482/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c6ff7b2251f5826485d778a81760e65cb1a66a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ff7b2251f5826485d778a81760e65cb1a66a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6ff7b2251f5826485d778a81760e65cb1a66a8"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "a119bb3aaef8c34833c77f916e4aeb190cdd2da5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ba6738bd24dacf4f207ddc7142dde603ddc7482", "patch": "@@ -1,5 +1,12 @@\n 2018-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/87360\n+\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): On failure to analyze\n+\tdata dependencies, don't return false, just continue.  Formatting\n+\tfixes.\n+\t(merge_loop_tree, bb_prevents_fusion_p, unroll_jam_possible_p,\n+\tfuse_loops): Formatting fixes.\n+\n \tPR sanitizer/88333\n \t* cfgexpand.c (expand_stack_vars): If asan_vec is empty, start with\n \taligning frame offset to ASAN_RED_ZONE_SIZE bytes."}, {"sha": "5920cad1f10c9b32042c65453038e8d7b8b4f7ad", "filename": "gcc/gimple-loop-jam.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Fgimple-loop-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Fgimple-loop-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.c?ref=7ba6738bd24dacf4f207ddc7142dde603ddc7482", "patch": "@@ -118,7 +118,7 @@ merge_loop_tree (struct loop *loop, struct loop *old)\n   for (i = 0; i < n; i++)\n     {\n       /* If the block was direct child of OLD loop it's now part\n-         of LOOP.  If it was outside OLD, then it moved into LOOP\n+\t of LOOP.  If it was outside OLD, then it moved into LOOP\n \t as well.  This avoids changing the loop father for BBs\n \t in inner loops of OLD.  */\n       if (bbs[i]->loop_father == old\n@@ -167,7 +167,7 @@ bb_prevents_fusion_p (basic_block bb)\n        * stores or unknown side-effects prevent fusion\n        * loads don't\n        * computations into SSA names: these aren't problematic.  Their\n-         result will be unused on the exit edges of the first N-1 copies\n+\t result will be unused on the exit edges of the first N-1 copies\n \t (those aren't taken after unrolling).  If they are used on the\n \t other edge (the one leading to the outer latch block) they are\n \t loop-carried (on the outer loop) and the Nth copy of BB will\n@@ -282,12 +282,12 @@ unroll_jam_possible_p (struct loop *outer, struct loop *loop)\n       if (!simple_iv (loop, loop, op, &iv, true))\n \treturn false;\n       /* The inductions must be regular, loop invariant step and initial\n-         value.  */\n+\t value.  */\n       if (!expr_invariant_in_loop_p (outer, iv.step)\n \t  || !expr_invariant_in_loop_p (outer, iv.base))\n \treturn false;\n       /* XXX With more effort we could also be able to deal with inductions\n-         where the initial value is loop variant but a simple IV in the\n+\t where the initial value is loop variant but a simple IV in the\n \t outer loop.  The initial value for the second body would be\n \t the original initial value plus iv.base.step.  The next value\n \t for the fused loop would be the original next value of the first\n@@ -322,7 +322,7 @@ fuse_loops (struct loop *loop)\n       gcc_assert (EDGE_COUNT (next->header->preds) == 1);\n \n       /* The PHI nodes of the second body (single-argument now)\n-         need adjustments to use the right values: either directly\n+\t need adjustments to use the right values: either directly\n \t the value of the corresponding PHI in the first copy or\n \t the one leaving the first body which unrolling did for us.\n \n@@ -449,13 +449,13 @@ tree_loop_unroll_and_jam (void)\n       dependences.create (10);\n       datarefs.create (10);\n       if (!compute_data_dependences_for_loop (outer, true, &loop_nest,\n-\t\t\t\t\t       &datarefs, &dependences))\n+\t\t\t\t\t      &datarefs, &dependences))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"Cannot analyze data dependencies\\n\");\n \t  free_data_refs (datarefs);\n \t  free_dependence_relations (dependences);\n-\t  return false;\n+\t  continue;\n \t}\n       if (!datarefs.length ())\n \tcontinue;\n@@ -490,7 +490,7 @@ tree_loop_unroll_and_jam (void)\n \t\t\t\t     &removed))\n \t    {\n \t      /* Couldn't get the distance vector.  For two reads that's\n-\t         harmless (we assume we should unroll).  For at least\n+\t\t harmless (we assume we should unroll).  For at least\n \t\t one write this means we can't check the dependence direction\n \t\t and hence can't determine safety.  */\n \n@@ -503,7 +503,7 @@ tree_loop_unroll_and_jam (void)\n \t}\n \n       /* We regard a user-specified minimum percentage of zero as a request\n-         to ignore all profitability concerns and apply the transformation\n+\t to ignore all profitability concerns and apply the transformation\n \t always.  */\n       if (!PARAM_VALUE (PARAM_UNROLL_JAM_MIN_PERCENT))\n \tprofit_unroll = 2;"}, {"sha": "5cabb68bc820fe7c8dd05b15193e11bd42c34271", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ba6738bd24dacf4f207ddc7142dde603ddc7482", "patch": "@@ -1,5 +1,9 @@\n 2018-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/87360\n+\t* g++.dg/opt/pr87360.C: New test.\n+\t* gfortran.dg/pr87360.f90: New test.\n+\n \tPR c++/87897\n \t* g++.dg/init/const13.C: New test.\n "}, {"sha": "f54bc6187e4fa84e20e8446d643b80d05a167510", "filename": "gcc/testsuite/g++.dg/opt/pr87360.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr87360.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr87360.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr87360.C?ref=7ba6738bd24dacf4f207ddc7142dde603ddc7482", "patch": "@@ -0,0 +1,27 @@\n+// PR tree-optimization/87360\n+// { dg-do compile { target size32plus } }\n+// { dg-options \"-O3 -fno-tree-dce --param unroll-jam-min-percent=0\" }\n+\n+void abort (void);\n+\n+void foo (int N)\n+{\n+  int i, j;\n+  int x[1000][1000];\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x[i][j] = i + j + 3;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      if (x[i][j] != i + j + 3)\n+\tabort ();\n+}\n+\n+int main(void)\n+{\n+  foo (1000);\n+\n+  return 0;\n+}"}, {"sha": "843253484cc2ff755b9ba085952a9be75f386a70", "filename": "gcc/testsuite/gfortran.dg/pr87360.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr87360.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba6738bd24dacf4f207ddc7142dde603ddc7482/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr87360.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr87360.f90?ref=7ba6738bd24dacf4f207ddc7142dde603ddc7482", "patch": "@@ -0,0 +1,5 @@\n+! PR tree-optimization/87360\n+! { dg-do compile }\n+! { dg-options \"-fno-tree-dce -O3 --param max-completely-peeled-insns=0\" }\n+\n+include 'function_optimize_2.f90'"}]}