{"sha": "ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1NDFmMWJjMTdiZTVmZDdmMTgxYWViNjBjM2NjMjM5OTU3YWU5Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-23T16:14:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-23T16:14:43Z"}, "message": "Adjust pb_ds extensions to use allocator_traits\n\nThese changes are largely useless, because most of them are simply\nallowing 'reference' and 'const_reference' types to be obtained from an\nallocator, and since C++11 allocators don't define reference types (they\njust use plain lvalue references. Pretending to support C++98 allocators\nwith user-defined reference types is a waste of time (especially as\nseveral of the pb_ds types appear to use a static allocator object which\nmeans stateful allocators are not supported).\n\n\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp:\n\tUse detail::rebind_traits.\n\t* include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/traits.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/entry_cmp.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/entry_pred.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/branch_policy/branch_policy.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cond_dealtor.hpp: Likewise.\n\t* include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp (has_eq_fn): Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Likewise.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tleft_child_next_sibling_heap_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/node.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tpoint_const_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/node.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/node.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/trie_policy/sample_trie_access_traits.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/type_utils.hpp: Fix typo in comment.\n\t* include/ext/pb_ds/detail/types_traits.hpp (stored_value): Add\n\tbool parameter to control whether the hash value is stored.\n\t(select_base_type): New class template and partial specialization.\n\t(maybe_null_type): Likewise.\n\t(rebind_traits): New class template.\n\t(type_base): Remove four nearly identical specializations.\n\t(type_dispatch): Remove.\n\t(type_traits): Use select_base_type and maybe_null_type instead of\n\ttype_base to control differences between specializations.\n\t* include/ext/pb_ds/list_update_policy.hpp: Use detail::rebind_traits.\n\t* include/ext/pb_ds/priority_queue.hpp: Likewise.\n\t* include/ext/pb_ds/tree_policy.hpp: Likewise.\n\t* include/ext/pb_ds/trie_policy.hpp: Likewise.\n\nFrom-SVN: r277336", "tree": {"sha": "fbe8c775d7d0015ded132327530e85d74384be04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbe8c775d7d0015ded132327530e85d74384be04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603aec6775d5191fafd57412364578db68432f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603aec6775d5191fafd57412364578db68432f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603aec6775d5191fafd57412364578db68432f74"}], "stats": {"total": 851, "additions": 382, "deletions": 469}, "files": [{"sha": "bf0af28ad5605989fc247fbba3707efac0a426a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -1,5 +1,59 @@\n 2019-10-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp:\n+\tUse detail::rebind_traits.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/traits.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/entry_cmp.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/entry_pred.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/branch_policy/branch_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cond_dealtor.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp (has_eq_fn): Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tleft_child_next_sibling_heap_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/node.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tpoint_const_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/node.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/node.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/trie_policy/sample_trie_access_traits.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/type_utils.hpp: Fix typo in comment.\n+\t* include/ext/pb_ds/detail/types_traits.hpp (stored_value): Add\n+\tbool parameter to control whether the hash value is stored.\n+\t(select_base_type): New class template and partial specialization.\n+\t(maybe_null_type): Likewise.\n+\t(rebind_traits): New class template.\n+\t(type_base): Remove four nearly identical specializations.\n+\t(type_dispatch): Remove.\n+\t(type_traits): Use select_base_type and maybe_null_type instead of\n+\ttype_base to control differences between specializations.\n+\t* include/ext/pb_ds/list_update_policy.hpp: Use detail::rebind_traits.\n+\t* include/ext/pb_ds/priority_queue.hpp: Likewise.\n+\t* include/ext/pb_ds/tree_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/trie_policy.hpp: Likewise.\n+\n \t* include/backward/hash_set (hash_set): Use __alloc_traits.\n \t* include/backward/hashtable.h (_Hashtable): Likewise.\n \t* include/ext/alloc_traits.h (__alloc_traits::allocate): Add overload"}, {"sha": "89ccf9e30ab1534bd55b3a283368f6af2ae5dd5f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -77,7 +77,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC  \\\n     debug_map_base<Key,\teq_by_less<Key, Cmp_Fn>, \\\n-\t      typename _Alloc::template rebind<Key>::other::const_reference>\n+\t      typename rebind_traits<_Alloc, Key>::const_reference>\n #endif\n \n #ifdef PB_DS_TREE_TRACE\n@@ -108,16 +108,17 @@ namespace __gnu_pbds\n       public Node_And_It_Traits::node_update\n     {\n       typedef Node_And_It_Traits \t\t\ttraits_type;\n+      typedef rebind_traits<_Alloc, typename traits_type::node>\n+\tnode_alloc_traits;\n \n     protected:\n       typedef PB_DS_BIN_TREE_TRAITS_BASE \t       \ttraits_base;\n \n       typedef\n-      typename _Alloc::template rebind<typename traits_type::node>::other\n-      node_allocator;\n+      typename node_alloc_traits::allocator_type\tnode_allocator;\n \n-      typedef typename node_allocator::value_type \tnode;\n-      typedef typename node_allocator::pointer \t\tnode_pointer;\n+      typedef typename node_alloc_traits::value_type \tnode;\n+      typedef typename node_alloc_traits::pointer \tnode_pointer;\n \n       typedef typename traits_type::null_node_update_pointer\n       null_node_update_pointer;"}, {"sha": "b44e3b0061197323c430f6f1be294df953619e7e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -58,10 +58,7 @@ namespace __gnu_pbds\n     class bin_search_tree_const_node_it_\n     {\n     private:\n-      typedef\n-      typename _Alloc::template rebind<\n-      Node>::other::pointer\n-      node_pointer;\n+      typedef typename rebind_traits<_Alloc, Node>::pointer node_pointer;\n \n     public:\n       /// Category.\n@@ -83,9 +80,8 @@ namespace __gnu_pbds\n       typedef typename Node::metadata_type metadata_type;\n \n       /// Const metadata reference type.\n-      typedef\n-      typename _Alloc::template rebind<metadata_type>::other::const_reference\n-      metadata_const_reference;\n+      typedef typename rebind_traits<_Alloc, metadata_type>::const_reference\n+\tmetadata_const_reference;\n \n \n       bin_search_tree_const_node_it_(const node_pointer p_nd = 0)\n@@ -137,10 +133,7 @@ namespace __gnu_pbds\n     : public PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n     {\n     private:\n-      typedef\n-      typename _Alloc::template rebind<\n-      Node>::other::pointer\n-      node_pointer;\n+      typedef typename rebind_traits<_Alloc, Node>::pointer node_pointer;\n \n     public:\n       /// Iterator's value type."}, {"sha": "7a601bdb697b6b8502dc52ee20e9bba48047a07a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/traits.hpp", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -64,14 +64,14 @@ namespace __gnu_pbds\n     {\n     private:\n       typedef types_traits<Key, Mapped, _Alloc, false> type_traits;\n+      typedef rebind_traits<_Alloc, Node> node_alloc_traits;\n \n     public:\n       typedef Node node;\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename _Alloc::template rebind<\n-\tnode>::other::pointer,\n+\ttypename node_alloc_traits::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n@@ -83,8 +83,7 @@ namespace __gnu_pbds\n \n       typedef\n       bin_search_tree_it_<\n-\ttypename _Alloc::template rebind<\n-\tnode>::other::pointer,\n+\ttypename node_alloc_traits::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n@@ -96,8 +95,7 @@ namespace __gnu_pbds\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename _Alloc::template rebind<\n-\tnode>::other::pointer,\n+\ttypename node_alloc_traits::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n@@ -109,8 +107,7 @@ namespace __gnu_pbds\n \n       typedef\n       bin_search_tree_it_<\n-\ttypename _Alloc::template rebind<\n-\tnode>::other::pointer,\n+\ttypename node_alloc_traits::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n@@ -171,14 +168,14 @@ namespace __gnu_pbds\n     {\n     private:\n       typedef types_traits<Key, null_type, _Alloc, false> type_traits;\n+      typedef rebind_traits<_Alloc, Node> node_alloc_traits;\n \n     public:\n       typedef Node node;\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename _Alloc::template rebind<\n-\tnode>::other::pointer,\n+\ttypename node_alloc_traits::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n@@ -192,8 +189,7 @@ namespace __gnu_pbds\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename _Alloc::template rebind<\n-\tnode>::other::pointer,\n+\ttypename node_alloc_traits::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,"}, {"sha": "58cb69e2d8d337092c612253bfc1566bfab4ef45", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -102,23 +102,23 @@ namespace __gnu_pbds\n \n       typedef integral_constant<int, simple_value> \tno_throw_copies_t;\n \n-      typedef typename _Alloc::template rebind<value_type>\t__rebind_v;\n-      typedef typename __rebind_v::other \t\tvalue_allocator;\n+      typedef rebind_traits<_Alloc, value_type>\t\t__rebind_v;\n+      typedef typename __rebind_v::allocator_type \tvalue_allocator;\n \n     public:\n-      typedef typename value_allocator::pointer\t\tpointer;\n-      typedef typename value_allocator::const_pointer\tconst_pointer;\n-      typedef typename value_allocator::reference\treference;\n-      typedef typename value_allocator::const_reference\tconst_reference;\n+      typedef typename __rebind_v::pointer\t\tpointer;\n+      typedef typename __rebind_v::const_pointer\tconst_pointer;\n+      typedef typename __rebind_v::reference\treference;\n+      typedef typename __rebind_v::const_reference\tconst_reference;\n \n       typedef typename __conditional_type<simple_value,\n \t\t\t\t\t  value_type, pointer>::__type\n       \t\t\t\t\t\t\tentry;\n \n-      typedef typename _Alloc::template rebind<entry>::other\n+      typedef typename rebind_traits<_Alloc, entry>::allocator_type\n       \t\t\t\t\t\t\tentry_allocator;\n \n-      typedef typename entry_allocator::pointer \tentry_pointer;\n+      typedef typename rebind_traits<_Alloc, entry>::pointer \tentry_pointer;\n \n       typedef binary_heap_point_const_iterator_<value_type, entry,\n \t\t\t\t\t\tsimple_value, _Alloc>"}, {"sha": "1efcdc38171cd8cb57a3389b38449445b0e12ebe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/entry_cmp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_cmp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_cmp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_cmp.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -62,10 +62,10 @@ namespace __gnu_pbds\n       struct entry_cmp<_VTp, Cmp_Fn, _Alloc, false>\n       {\n       private:\n-\ttypedef typename _Alloc::template rebind<_VTp>\t\t__rebind_v;\n+\ttypedef rebind_traits<_Alloc, _VTp>\t\t__rebind_v;\n \n       public:\n-\ttypedef typename __rebind_v::other::const_pointer\tentry;\n+\ttypedef typename __rebind_v::const_pointer\tentry;\n \n \t/// Compare plus entry.\n \tstruct type : public Cmp_Fn"}, {"sha": "3f15875453e5a567660d870ff65fe402e08ac1a7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/entry_pred.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_pred.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_pred.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_pred.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -61,10 +61,10 @@ namespace __gnu_pbds\n       struct entry_pred<_VTp, Pred, _Alloc, false>\n       {\n       private:\n-\ttypedef typename _Alloc::template rebind<_VTp>\t\t__rebind_v;\n+\ttypedef rebind_traits<_Alloc, _VTp>\t\t__rebind_v;\n \n       public:\n-\ttypedef typename __rebind_v::other::const_pointer\tentry;\n+\ttypedef typename __rebind_v::const_pointer\tentry;\n \n \tstruct type : public Pred\n \t{"}, {"sha": "bb39b9b02810c5afffd2e1475d291f60d0375c24", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -55,7 +55,7 @@ namespace __gnu_pbds\n     class binary_heap_point_const_iterator_\n     {\n     protected:\n-      typedef typename _Alloc::template rebind<Entry>::other::pointer entry_pointer;\n+      typedef typename rebind_traits<_Alloc, Entry>::pointer entry_pointer;\n \n     public:\n       /// Category.\n@@ -68,23 +68,19 @@ namespace __gnu_pbds\n       typedef Value_Type value_type;\n \n       /// Iterator's pointer type.\n-      typedef typename _Alloc::template rebind<value_type>::other::pointer\n-      pointer;\n+      typedef typename rebind_traits<_Alloc, value_type>::pointer pointer;\n \n       /// Iterator's const pointer type.\n-      typedef\n-      typename _Alloc::template rebind<value_type>::other::const_pointer\n-      const_pointer;\n+      typedef typename rebind_traits<_Alloc, value_type>::const_pointer\n+\tconst_pointer;\n \n       /// Iterator's reference type.\n-      typedef\n-      typename _Alloc::template rebind<value_type>::other::reference\n-      reference;\n+      typedef typename rebind_traits<_Alloc, value_type>::reference\n+\treference;\n \n       /// Iterator's const reference type.\n-      typedef\n-      typename _Alloc::template rebind<value_type>::other::const_reference\n-      const_reference;\n+      typedef typename rebind_traits<_Alloc, value_type>::const_reference\n+\tconst_reference;\n \n       inline\n       binary_heap_point_const_iterator_(entry_pointer p_e) : m_p_e(p_e)"}, {"sha": "d8c2d35141e421ee1e0e021c62f826de48a77246", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -78,7 +78,7 @@ namespace __gnu_pbds\n     : public PB_DS_B_HEAP_BASE\n     {\n     private:\n-      typedef typename _Alloc::template rebind<Value_Type>::other __rebind_v;\n+      typedef rebind_traits<_Alloc, Value_Type>\t\t__rebind_v;\n       typedef PB_DS_B_HEAP_BASE\t  \t\t\tbase_type;\n \n     protected:"}, {"sha": "38f60c2d0573c67be4fb28a5318b5a9934b657fe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/branch_policy/branch_policy.hpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -42,6 +42,7 @@\n #define PB_DS_BRANCH_POLICY_BASE_HPP\n \n #include <ext/pb_ds/tag_and_trait.hpp>\n+#include <ext/pb_ds/detail/types_traits.hpp>\n \n namespace __gnu_pbds\n {\n@@ -59,8 +60,8 @@ namespace __gnu_pbds\n \ttypedef typename remove_const<value_type>::type\trcvalue_type;\n \ttypedef typename remove_const<key_type>::type\trckey_type;\n \n-\ttypedef typename _Alloc::template rebind<rcvalue_type>::other rebind_v;\n-\ttypedef typename _Alloc::template rebind<rckey_type>::other   rebind_k;\n+\ttypedef rebind_traits<_Alloc, rcvalue_type>\trebind_v;\n+\ttypedef rebind_traits<_Alloc, rckey_type>\trebind_k;\n \n \ttypedef\ttypename rebind_v::reference \t\treference;\n \ttypedef\ttypename rebind_v::const_reference \tconst_reference;\n@@ -91,7 +92,7 @@ namespace __gnu_pbds\n \ttypedef typename Node_CItr::value_type \t\t   it_type;\n        \ttypedef typename std::iterator_traits<it_type>::value_type value_type;\n \ttypedef typename remove_const<value_type>::type\t\t   rcvalue_type;\n-\ttypedef typename _Alloc::template rebind<rcvalue_type>::other rebind_v;\n+\ttypedef rebind_traits<_Alloc, rcvalue_type>\trebind_v;\n \ttypedef\ttypename rebind_v::reference \t\treference;\n \ttypedef\ttypename rebind_v::const_reference \tconst_reference;\n \ttypedef\ttypename rebind_v::const_pointer\tconst_pointer;"}, {"sha": "93006fbaa8dfdbd2f986eb890280b548e0182057", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -40,6 +40,7 @@\n \n #include <utility>\n #include <iterator>\n+#include <memory>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp>\n@@ -73,7 +74,7 @@ namespace __gnu_pbds\n \n #define PB_DS_CLASS_C_DEC \\\n     PB_DS_CC_HASH_NAME<Key, Mapped, Hash_Fn, Eq_Fn, _Alloc,\t\\\n-\t\t     Store_Hash, Comb_Hash_Fn, Resize_Policy>\n+\t\t       Store_Hash, Comb_Hash_Fn, Resize_Policy>\n \n #define PB_DS_HASH_EQ_FN_C_DEC \\\n     hash_eq_fn<Key, Eq_Fn, _Alloc, Store_Hash>\n@@ -87,7 +88,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n     debug_map_base<Key,\tEq_Fn, \\\n-\t\t  typename _Alloc::template rebind<Key>::other::const_reference>\n+\t\t   typename rebind_traits<_Alloc, Key>::const_reference>\n #endif\n \n \n@@ -135,7 +136,7 @@ namespace __gnu_pbds\n \t     typename _Alloc,\n \t     bool Store_Hash,\n \t     typename Comb_Hash_Fn,\n-\t     typename Resize_Policy >\n+\t     typename Resize_Policy>\n     class PB_DS_CC_HASH_NAME:\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n@@ -156,19 +157,21 @@ namespace __gnu_pbds\n \n       struct entry : public traits_base::stored_data_type\n       {\n-\ttypename _Alloc::template rebind<entry>::other::pointer m_p_next;\n+\ttypename rebind_traits<_Alloc, entry>::pointer m_p_next;\n       };\n \n       typedef cond_dealtor<entry, _Alloc> \tcond_dealtor_t;\n \n-      typedef typename _Alloc::template rebind<entry>::other entry_allocator;\n-      typedef typename entry_allocator::pointer entry_pointer;\n-      typedef typename entry_allocator::const_pointer const_entry_pointer;\n-      typedef typename entry_allocator::reference entry_reference;\n-      typedef typename entry_allocator::const_reference const_entry_reference;\n+      typedef rebind_traits<_Alloc, entry> entry_traits;\n+      typedef typename entry_traits::allocator_type entry_allocator;\n+      typedef typename entry_traits::pointer entry_pointer;\n+      typedef typename entry_traits::const_pointer const_entry_pointer;\n+      typedef typename entry_traits::reference entry_reference;\n+      typedef typename entry_traits::const_reference const_entry_reference;\n \n-      typedef typename _Alloc::template rebind<entry_pointer>::other entry_pointer_allocator;\n-      typedef typename entry_pointer_allocator::pointer entry_pointer_array;\n+      typedef rebind_traits<_Alloc, entry_pointer> entry_pointer_traits;\n+      typedef typename entry_pointer_traits::allocator_type entry_pointer_allocator;\n+      typedef typename entry_pointer_traits::pointer entry_pointer_array;\n \n       typedef PB_DS_RANGED_HASH_FN_C_DEC ranged_hash_fn_base;\n       typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;"}, {"sha": "89766e394cd0dbf37609407d7c5a9b74b9d9da6b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cond_dealtor.hpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcond_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcond_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcond_dealtor.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -41,6 +41,8 @@\n #ifndef PB_DS_COND_DEALTOR_HPP\n #define PB_DS_COND_DEALTOR_HPP\n \n+#include <ext/pb_ds/detail/types_traits.hpp>\n+\n namespace __gnu_pbds\n {\n   namespace detail\n@@ -49,11 +51,11 @@ namespace __gnu_pbds\n     template<typename Entry, typename _Alloc>\n       class cond_dealtor\n       {\n-\ttypedef typename _Alloc::template rebind<Entry>\t__rebind_e;\n+\ttypedef rebind_traits<_Alloc, Entry>\talloc_traits;\n \n       public:\n-\ttypedef typename __rebind_e::other \t\tentry_allocator;\n-\ttypedef typename entry_allocator::pointer \tentry_pointer;\n+\ttypedef typename alloc_traits::allocator_type entry_allocator;\n+\ttypedef typename alloc_traits::pointer\t      entry_pointer;\n \n \tcond_dealtor(entry_pointer p_e)\n \t: m_p_e(p_e), m_no_action_destructor(false) { }"}, {"sha": "240493c05f380debb8b8de9f6dc665996506be0b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -35,14 +35,15 @@\n \n /**\n  * @file hash_eq_fn.hpp\n- * Contains 2 eqivalence functions, one employing a hash value,\n+ * Contains 2 equivalence functions, one employing a hash value,\n  * and one ignoring it.\n  */\n \n #ifndef PB_DS_HASH_EQ_FN_HPP\n #define PB_DS_HASH_EQ_FN_HPP\n \n #include <utility>\n+#include <ext/pb_ds/detail/types_traits.hpp>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n@@ -58,8 +59,8 @@ namespace __gnu_pbds\n     struct hash_eq_fn<Key, Eq_Fn, _Alloc, false> : public Eq_Fn\n     {\n       typedef Eq_Fn \t\t\t\t\t   eq_fn_base;\n-      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference \t   key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       hash_eq_fn() { }\n \n@@ -82,8 +83,8 @@ namespace __gnu_pbds\n     {\n       typedef typename _Alloc::size_type \t\t   size_type;\n       typedef Eq_Fn \t\t\t\t\t   eq_fn_base;\n-      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference \t   key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       hash_eq_fn() { }\n "}, {"sha": "c1cb552f9cc239b30bec7207974213ef20f6b5ad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -85,7 +85,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n    debug_map_base<Key, Eq_Fn, \\\n-\t\t  typename _Alloc::template rebind<Key>::other::const_reference>\n+\t\t  typename rebind_traits<_Alloc, Key>::const_reference>\n #endif\n \n \n@@ -169,12 +169,13 @@ namespace __gnu_pbds\n \tentry_status m_stat;\n       };\n \n-      typedef typename _Alloc::template rebind<entry>::other entry_allocator;\n-      typedef typename entry_allocator::pointer entry_pointer;\n-      typedef typename entry_allocator::const_pointer const_entry_pointer;\n-      typedef typename entry_allocator::reference entry_reference;\n-      typedef typename entry_allocator::const_reference const_entry_reference;\n-      typedef typename entry_allocator::pointer entry_array;\n+      typedef rebind_traits<_Alloc, entry> entry_traits;\n+      typedef typename entry_traits::allocator_type entry_allocator;\n+      typedef typename entry_traits::pointer entry_pointer;\n+      typedef typename entry_traits::const_pointer const_entry_pointer;\n+      typedef typename entry_traits::reference entry_reference;\n+      typedef typename entry_traits::const_reference const_entry_reference;\n+      typedef typename entry_traits::pointer entry_array;\n \n       typedef PB_DS_RANGED_PROBE_FN_C_DEC \tranged_probe_fn_base;\n "}, {"sha": "4724f7d1e893272813928dcb2938c0edf703ea98", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -43,6 +43,7 @@\n #define PB_DS_RANGED_HASH_FN_HPP\n \n #include <utility>\n+#include <ext/pb_ds/detail/types_traits.hpp>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n@@ -75,8 +76,8 @@ namespace __gnu_pbds\n       typedef typename _Alloc::size_type size_type;\n       typedef Hash_Fn hash_fn_base;\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n-      typedef typename _Alloc::template rebind< Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       ranged_hash_fn(size_type);\n \n@@ -158,8 +159,8 @@ namespace __gnu_pbds\n       typedef std::pair<size_type, size_type> comp_hash;\n       typedef Hash_Fn hash_fn_base;\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n-      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       ranged_hash_fn(size_type);\n "}, {"sha": "33904110fb428bfd524eaba6253f0dcd199378a1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -77,8 +77,8 @@ namespace __gnu_pbds\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n       typedef Hash_Fn hash_fn_base;\n       typedef Probe_Fn probe_fn_base;\n-      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       ranged_probe_fn(size_type);\n \n@@ -183,8 +183,8 @@ namespace __gnu_pbds\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n       typedef Hash_Fn hash_fn_base;\n       typedef Probe_Fn probe_fn_base;\n-      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       ranged_probe_fn(size_type);\n \n@@ -300,8 +300,8 @@ namespace __gnu_pbds\n     protected:\n       typedef typename _Alloc::size_type size_type;\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n-      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference key_const_reference;\n+      typedef typename rebind_traits<_Alloc, Key>::const_reference\n+\tkey_const_reference;\n \n       ranged_probe_fn(size_type size)\n       { Comb_Probe_Fn::notify_resized(size); }"}, {"sha": "5e80258ef68fd833027fdf81386d4e23e757fea0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -89,18 +89,21 @@ namespace __gnu_pbds\n #endif\n     class left_child_next_sibling_heap : public Cmp_Fn\n     {\n-    protected:\n+    public:\n       typedef\n-      typename _Alloc::template rebind<\n-      left_child_next_sibling_heap_node_<Value_Type, Node_Metadata,\n-\t\t\t\t\t _Alloc> >::other\n-      node_allocator;\n-\n-      typedef typename node_allocator::value_type     \tnode;\n-      typedef typename node_allocator::pointer \t\tnode_pointer;\n-      typedef typename node_allocator::const_pointer\tnode_const_pointer;\n+\tleft_child_next_sibling_heap_node_<Value_Type, Node_Metadata, _Alloc>\n+\tnode;\n+\n+    private:\n+      typedef typename detail::rebind_traits<_Alloc, node> alloc_traits;\n+\n+    protected:\n+      typedef typename alloc_traits::allocator_type node_allocator;\n+\n+      typedef typename alloc_traits::pointer \t\tnode_pointer;\n+      typedef typename alloc_traits::const_pointer\tnode_const_pointer;\n       typedef Node_Metadata node_metadata;\n-      typedef std::pair< node_pointer, node_pointer> \tnode_pointer_pair;\n+      typedef std::pair<node_pointer, node_pointer> \tnode_pointer_pair;\n \n     private:\n       typedef cond_dealtor< node, _Alloc> \t\tcond_dealtor_t;\n@@ -111,17 +114,17 @@ namespace __gnu_pbds\n \t};\n \n       typedef integral_constant<int, simple_value> \tno_throw_copies_t;\n-      typedef typename _Alloc::template rebind<Value_Type>\t__rebind_v;\n+      typedef rebind_traits<_Alloc, Value_Type>\t__rebind_v;\n \n     public:\n       typedef typename _Alloc::size_type \t\tsize_type;\n       typedef typename _Alloc::difference_type \tdifference_type;\n       typedef Value_Type \t\t\t\tvalue_type;\n \n-      typedef typename __rebind_v::other::pointer \tpointer;\n-      typedef typename __rebind_v::other::const_pointer const_pointer;\n-      typedef typename __rebind_v::other::reference\treference;\n-      typedef typename __rebind_v::other::const_reference const_reference;\n+      typedef typename __rebind_v::pointer \tpointer;\n+      typedef typename __rebind_v::const_pointer const_pointer;\n+      typedef typename __rebind_v::reference\treference;\n+      typedef typename __rebind_v::const_reference const_reference;\n \n       typedef left_child_next_sibling_heap_node_point_const_iterator_<node, _Alloc>\n       point_const_iterator;"}, {"sha": "9dd36a30ea7d84f4f7539cc59c33bc8b126728ba", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/node.hpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnode.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -41,6 +41,8 @@\n #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NODE_HPP\n #define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NODE_HPP\n \n+#include <ext/pb_ds/detail/types_traits.hpp>\n+\n namespace __gnu_pbds\n {\n   namespace detail\n@@ -57,7 +59,7 @@ namespace __gnu_pbds\n       typedef typename _Alloc::size_type \tsize_type;\n       typedef _Metadata \t\t\tmetadata_type;\n \n-      typedef typename _Alloc::template rebind<this_type>::other::pointer node_pointer;\n+      typedef typename rebind_traits<_Alloc, this_type>::pointer node_pointer;\n \n       value_type \tm_value;\n       metadata_type \tm_metadata;\n@@ -76,7 +78,7 @@ namespace __gnu_pbds\n       typedef _Value \t\t\t\tvalue_type;\n       typedef typename _Alloc::size_type \tsize_type;\n \n-      typedef typename _Alloc::template rebind<this_type>::other::pointer node_pointer;\n+      typedef typename rebind_traits<_Alloc, this_type>::pointer node_pointer;\n \n       value_type \tm_value;\n       node_pointer \tm_p_l_child;"}, {"sha": "bb6d3dc8cad05581e558f202a71dae31295db2f2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/point_const_iterator.hpp", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -61,7 +61,7 @@ namespace __gnu_pbds\n     class left_child_next_sibling_heap_node_point_const_iterator_\n     {\n     protected:\n-      typedef typename _Alloc::template rebind<Node>::other::pointer node_pointer;\n+      typedef typename rebind_traits<_Alloc, Node>::pointer node_pointer;\n \n     public:\n       /// Category.\n@@ -74,28 +74,18 @@ namespace __gnu_pbds\n       typedef typename Node::value_type value_type;\n \n       /// Iterator's pointer type.\n-      typedef\n-      typename _Alloc::template rebind<\n-\tvalue_type>::other::pointer\n-      pointer;\n+      typedef typename rebind_traits<_Alloc, value_type>::pointer pointer;\n \n       /// Iterator's const pointer type.\n-      typedef\n-      typename _Alloc::template rebind<\n-\tvalue_type>::other::const_pointer\n-      const_pointer;\n+      typedef typename rebind_traits<_Alloc, value_type>::const_pointer\n+\tconst_pointer;\n \n       /// Iterator's reference type.\n-      typedef\n-      typename _Alloc::template rebind<\n-\tvalue_type>::other::reference\n-      reference;\n+      typedef typename rebind_traits<_Alloc, value_type>::reference reference;\n \n       /// Iterator's const reference type.\n-      typedef\n-      typename _Alloc::template rebind<\n-\tvalue_type>::other::const_reference\n-      const_reference;\n+      typedef typename rebind_traits<_Alloc, value_type>::const_reference\n+\tconst_reference;\n \n       inline\n       left_child_next_sibling_heap_node_point_const_iterator_(node_pointer p_nd) : m_p_nd(p_nd)"}, {"sha": "9f561762c697c3a26d03bd0b60012fd4b1d2c37c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -78,7 +78,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n     debug_map_base<Key, Eq_Fn, \\\n-\t      typename _Alloc::template rebind<Key>::other::const_reference>\n+\t\t   typename rebind_traits<_Alloc, Key>::const_reference>\n #endif\n \n     /// list-based (with updates) associative container.\n@@ -101,17 +101,19 @@ namespace __gnu_pbds\n      : public lu_map_entry_metadata_base<typename Update_Policy::metadata_type>\n       {\n \ttypename traits_base::value_type m_value;\n-\ttypename _Alloc::template rebind<entry>::other::pointer m_p_next;\n+\ttypename rebind_traits<_Alloc, entry>::pointer m_p_next;\n       };\n \n-      typedef typename _Alloc::template rebind<entry>::other entry_allocator;\n-      typedef typename entry_allocator::pointer entry_pointer;\n-      typedef typename entry_allocator::const_pointer const_entry_pointer;\n-      typedef typename entry_allocator::reference entry_reference;\n-      typedef typename entry_allocator::const_reference const_entry_reference;\n+      typedef rebind_traits<_Alloc, entry>\t\t  entry_alloc_traits;\n+      typedef typename entry_alloc_traits::allocator_type entry_allocator;\n+      typedef typename entry_alloc_traits::pointer\t  entry_pointer;\n+      typedef typename entry_alloc_traits::const_pointer  const_entry_pointer;\n+      typedef typename entry_alloc_traits::reference\t  entry_reference;\n+      typedef typename entry_alloc_traits::const_reference const_entry_reference;\n \n-      typedef typename _Alloc::template rebind<entry_pointer>::other entry_pointer_allocator;\n-      typedef typename entry_pointer_allocator::pointer entry_pointer_array;\n+      typedef rebind_traits<_Alloc, entry_pointer>\tentry_pointer_alloc_traits;\n+      typedef typename entry_pointer_alloc_traits::allocator_type entry_pointer_allocator;\n+      typedef typename entry_pointer_alloc_traits::pointer entry_pointer_array;\n \n       typedef typename traits_base::value_type value_type_;\n       typedef typename traits_base::pointer pointer_;"}, {"sha": "57a284a39a6eb905f522d1ecccd7a0be496aeb6b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -103,11 +103,11 @@ copy_from_range(It first_it, It last_it)\n {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n   typedef std::map<key_type, mapped_type, Cmp_Fn,\n-\t\t   typename _Alloc::template rebind<value_type>::other>\n+\t\t   typename rebind_traits<_Alloc, value_type>::allocator_type>\n     map_type;\n #else\n   typedef std::set<key_type, Cmp_Fn,\n-\t\t   typename _Alloc::template rebind<Key>::other>\n+\t\t   typename rebind_traits<_Alloc, Key>::allocator_type>\n     map_type;\n #endif\n "}, {"sha": "e45d3a74e7c4c56719ec1e992c61846927632c12", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp", "status": "modified", "additions": 32, "deletions": 45, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -58,20 +58,14 @@ namespace __gnu_pbds\n     {\n \n     protected:\n-      typedef\n-      typename _Alloc::template rebind<\n-      Value_Type>::other::pointer\n-      pointer;\n+      typedef typename rebind_traits<_Alloc, Value_Type>::pointer\n+\tpointer;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\tValue_Type>::other::const_pointer\n-      const_pointer;\n+      typedef typename rebind_traits<_Alloc, Value_Type>::const_pointer\n+\tconst_pointer;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\tMetadata_Type>::other::const_pointer\n-      const_metadata_pointer;\n+      typedef typename rebind_traits<_Alloc, Metadata_Type>::const_pointer\n+\tconst_metadata_pointer;\n \n       typedef PB_DS_OV_TREE_CONST_NODE_ITERATOR_C_DEC this_type;\n \n@@ -91,33 +85,32 @@ namespace __gnu_pbds\n \n       typedef trivial_iterator_difference_type difference_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\tValue_Type>::other::const_pointer\n-      value_type;\n+      typedef typename rebind_traits<_Alloc, Value_Type>::const_pointer\n+\tvalue_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\ttypename remove_const<\n-\tValue_Type>::type>::other::const_pointer\n-      reference;\n+      typedef typename rebind_traits<_Alloc,\n+\t      typename remove_const<Value_Type>::type>::const_pointer\n+\treference;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\ttypename remove_const<\n-\tValue_Type>::type>::other::const_pointer\n-      const_reference;\n+      typedef typename rebind_traits<_Alloc, \n+\t      typename remove_const<Value_Type>::type>::const_pointer\n+\tconst_reference;\n \n       typedef Metadata_Type metadata_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\tmetadata_type>::other::const_reference\n-      metadata_const_reference;\n+      typedef typename rebind_traits<_Alloc, metadata_type>::const_reference\n+\tmetadata_const_reference;\n \n     public:\n       inline\n-      ov_tree_node_const_it_(const_pointer p_nd = 0,  const_pointer p_begin_nd = 0,  const_pointer p_end_nd = 0,  const_metadata_pointer p_metadata = 0) : m_p_value(const_cast<pointer>(p_nd)), m_p_begin_value(const_cast<pointer>(p_begin_nd)), m_p_end_value(const_cast<pointer>(p_end_nd)), m_p_metadata(p_metadata)\n+      ov_tree_node_const_it_(const_pointer p_nd = 0,\n+\t\t\t     const_pointer p_begin_nd = 0,\n+\t\t\t     const_pointer p_end_nd = 0,\n+\t\t\t     const_metadata_pointer p_metadata = 0)\n+      : m_p_value(const_cast<pointer>(p_nd)),\n+\tm_p_begin_value(const_cast<pointer>(p_begin_nd)),\n+\tm_p_end_value(const_cast<pointer>(p_end_nd)),\n+\tm_p_metadata(p_metadata)\n       { }\n \n       inline const_reference\n@@ -221,22 +214,16 @@ namespace __gnu_pbds\n \n       typedef trivial_iterator_difference_type difference_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\tValue_Type>::other::pointer\n-      value_type;\n+      typedef typename rebind_traits<_Alloc, Value_Type>::pointer\n+\tvalue_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\ttypename remove_const<\n-\tValue_Type>::type>::other::pointer\n-      reference;\n+      typedef typename rebind_traits<_Alloc,\n+\t      typename remove_const<Value_Type>::type>::pointer\n+\treference;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-\ttypename remove_const<\n-\tValue_Type>::type>::other::pointer\n-      const_reference;\n+      typedef typename rebind_traits<_Alloc, \n+\t      typename remove_const<Value_Type>::type>::pointer\n+\tconst_reference;\n \n       inline\n       ov_tree_node_it_(const_pointer p_nd = 0,  const_pointer p_begin_nd = 0,  const_pointer p_end_nd = 0,  const_metadata_pointer p_metadata = 0) : base_type(p_nd,  p_begin_nd,  p_end_nd,  p_metadata)"}, {"sha": "b601031f727db9ff037c18fc25b6595a8e7d1497", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -83,7 +83,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n     debug_map_base<Key, eq_by_less<Key, Cmp_Fn>, \\\n-       \ttypename _Alloc::template rebind<Key>::other::const_reference>\n+\t\t   typename rebind_traits<_Alloc, Key>::const_reference>\n #endif\n \n #ifdef PB_DS_TREE_TRACE\n@@ -120,8 +120,9 @@ namespace __gnu_pbds\n \n       typedef typename remove_const<typename traits_base::value_type>::type non_const_value_type;\n \n-      typedef typename _Alloc::template rebind<non_const_value_type>::other value_allocator;\n-      typedef typename value_allocator::pointer \tvalue_vector;\n+      typedef rebind_traits<_Alloc, non_const_value_type> value_alloc_traits;\n+      typedef typename value_alloc_traits::allocator_type value_allocator;\n+      typedef typename value_alloc_traits::pointer\t  value_vector;\n \n #ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_DEBUG_MAP_BASE_C_DEC \t\tdebug_base;\n@@ -136,16 +137,17 @@ namespace __gnu_pbds\n \n       typedef typename traits_type::metadata_type \tmetadata_type;\n \n-      typedef typename _Alloc::template rebind<metadata_type>::other metadata_allocator;\n-      typedef typename metadata_allocator::pointer \tmetadata_pointer;\n-      typedef typename metadata_allocator::const_reference metadata_const_reference;\n-      typedef typename metadata_allocator::reference \tmetadata_reference;\n+      typedef rebind_traits<_Alloc, metadata_type>\tmetadata_alloc_traits;\n+      typedef typename metadata_alloc_traits::allocator_type metadata_allocator;\n+      typedef typename metadata_alloc_traits::pointer\tmetadata_pointer;\n+      typedef typename metadata_alloc_traits::const_reference metadata_const_reference;\n+      typedef typename metadata_alloc_traits::reference\tmetadata_reference;\n \n       typedef typename traits_type::null_node_update_pointer\n       null_node_update_pointer;\n \n     public:\n-      typedef ov_tree_tag \t\t\t\t container_category;\n+      typedef ov_tree_tag \t\t\t\tcontainer_category;\n       typedef _Alloc \t\t\t\t\tallocator_type;\n       typedef typename _Alloc::size_type \t\tsize_type;\n       typedef typename _Alloc::difference_type \t\tdifference_type;"}, {"sha": "e9fb0b38fb0bb5944d9f46ed0e898944d122cd14", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -80,7 +80,7 @@ namespace __gnu_pbds\n       typedef PB_DS_P_HEAP_BASE\t\t\t\tbase_type;\n       typedef typename base_type::node_pointer \t\tnode_pointer;\n \n-      typedef typename _Alloc::template rebind<Value_Type>::other __rebind_a;\n+      typedef rebind_traits<_Alloc, Value_Type>\t\t__rebind_a;\n \n     public:\n       typedef Value_Type \t\t\t\tvalue_type;"}, {"sha": "2da385813a47ce32a90c6194e69eb6e51161cfb9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -83,7 +83,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n     debug_map_base<Key,\teq_by_less<Key, std::less<Key> >, \\\n-\t\t typename _Alloc::template rebind<Key>::other::const_reference>\n+\t\t typename rebind_traits<_Alloc, Key>::const_reference>\n #endif\n \n \n@@ -109,35 +109,34 @@ namespace __gnu_pbds\n     {\n     private:\n       typedef pat_trie_base\t\t\t\tbase_type;\n-      typedef PB_DS_PAT_TRIE_TRAITS_BASE \t       \ttraits_base;\n+      typedef PB_DS_PAT_TRIE_TRAITS_BASE \t\ttraits_base;\n       typedef Node_And_It_Traits\t\t\ttraits_type;\n \n       typedef typename traits_type::synth_access_traits synth_access_traits;\n       typedef typename synth_access_traits::const_iterator a_const_iterator;\n \n-      typedef typename traits_type::node \t\tnode;\n-      typedef typename _Alloc::template rebind<node>\t__rebind_n;\n-      typedef typename __rebind_n::other::const_pointer node_const_pointer;\n-      typedef typename __rebind_n::other::pointer \tnode_pointer;\n+      typedef typename traits_type::node\t\tnode;\n+      typedef rebind_traits<_Alloc, node>\t\t__rebind_n;\n+      typedef typename __rebind_n::const_pointer\tnode_const_pointer;\n+      typedef typename __rebind_n::pointer\t\tnode_pointer;\n \n-      typedef typename traits_type::head \t\thead;\n-      typedef typename _Alloc::template rebind<head>\t__rebind_h;\n-      typedef typename __rebind_h::other \t\thead_allocator;\n-      typedef typename head_allocator::pointer \t\thead_pointer;\n+      typedef typename traits_type::head\t\thead;\n+      typedef rebind_traits<_Alloc, head>\t\t__rebind_h;\n+      typedef typename __rebind_h::allocator_type \thead_allocator;\n+      typedef typename __rebind_h::pointer \t\thead_pointer;\n \n-      typedef typename traits_type::leaf \t\tleaf;\n-      typedef typename _Alloc::template rebind<leaf>\t__rebind_l;\n-      typedef typename __rebind_l::other \t\tleaf_allocator;\n-      typedef typename leaf_allocator::pointer \t\tleaf_pointer;\n-      typedef typename leaf_allocator::const_pointer \tleaf_const_pointer;\n+      typedef typename traits_type::leaf\t\tleaf;\n+      typedef rebind_traits<_Alloc, leaf>\t\t__rebind_l;\n+      typedef typename __rebind_l::allocator_type\tleaf_allocator;\n+      typedef typename __rebind_l::pointer \t\tleaf_pointer;\n+      typedef typename __rebind_l::const_pointer\tleaf_const_pointer;\n \n-      typedef typename traits_type::inode \t\tinode;\n+      typedef typename traits_type::inode\t\tinode;\n       typedef typename inode::iterator \t\t\tinode_iterator;\n-      typedef typename _Alloc::template rebind<inode> \t__rebind_in;\n-      typedef typename __rebind_in::other \t\t__rebind_ina;\n-      typedef typename __rebind_in::other      \t       \tinode_allocator;\n-      typedef typename __rebind_ina::pointer \t\tinode_pointer;\n-      typedef typename __rebind_ina::const_pointer \tinode_const_pointer;\n+      typedef rebind_traits<_Alloc, inode>\t\t__rebind_in;\n+      typedef typename __rebind_in::allocator_type\tinode_allocator;\n+      typedef typename __rebind_in::pointer \t\tinode_pointer;\n+      typedef typename __rebind_in::const_pointer\tinode_const_pointer;\n \n \n       /// Conditional deallocator.\n@@ -179,7 +178,8 @@ namespace __gnu_pbds\n       {\n       private:\n \ttypedef inode_pointer \t\t\t       \t__inp;\n-\ttypedef typename _Alloc::template rebind<__inp>::other \t__rebind_inp;\n+\ttypedef typename rebind_traits<_Alloc, __inp>::allocator_type\n+\t  __rebind_inp;\n \n #ifdef _GLIBCXX_DEBUG\n \ttypedef std::_GLIBCXX_STD_C::list<__inp, __rebind_inp> \tbag_type;"}, {"sha": "b9d71c767462637cc57a23f88ba729b71f31c37a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp", "status": "modified", "additions": 39, "deletions": 49, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -68,8 +68,8 @@ namespace __gnu_pbds\n \t{\n \t  typedef Metadata     \t\t\t\t\tmetadata_type;\n \t  typedef _Alloc     \t\t\t\t\tallocator_type;\n-\t  typedef typename _Alloc::template rebind<Metadata>\t__rebind_m;\n-\t  typedef typename __rebind_m::other::const_reference  const_reference;\n+\t  typedef typename detail::rebind_traits<_Alloc, Metadata>::const_reference\n+\t    const_reference;\n \n \t  const_reference\n \t  get_metadata() const\n@@ -99,17 +99,17 @@ namespace __gnu_pbds\n \ttypedef _Alloc\t\t\t\t\t\tallocator_type;\n \ttypedef _ATraits\t\t\t\t\taccess_traits;\n \ttypedef typename _ATraits::type_traits\t\t\ttype_traits;\n-\ttypedef typename _Alloc::template rebind<_Node_base>\t__rebind_n;\n-\ttypedef typename __rebind_n::other::pointer \t\tnode_pointer;\n+\ttypedef typename detail::rebind_traits<_Alloc, _Node_base>::pointer\n+\t  node_pointer;\n \n \tnode_pointer \t\t\t\t\t\tm_p_parent;\n \tconst node_type \t       \t\t\t\tm_type;\n \n \t_Node_base(node_type type) : m_type(type)\n \t{ }\n \n-\ttypedef typename _Alloc::template rebind<_ATraits>    __rebind_at;\n-\ttypedef typename __rebind_at::other::const_pointer    a_const_pointer;\n+\ttypedef typename detail::rebind_traits<_Alloc, _ATraits>::const_pointer\n+\t  a_const_pointer;\n \ttypedef typename _ATraits::const_iterator\t      a_const_iterator;\n \n #ifdef _GLIBCXX_DEBUG\n@@ -211,36 +211,36 @@ namespace __gnu_pbds\n     struct _Inode\n     : public _Node_base<_ATraits, Metadata>\n     {\n-      typedef _Node_base<_ATraits, Metadata> \t\t\tbase_type;\n-      typedef typename base_type::type_traits\t\t\ttype_traits;\n-      typedef typename base_type::access_traits\t       \t\taccess_traits;\n-      typedef typename type_traits::value_type \t\t\tvalue_type;\n-      typedef typename base_type::allocator_type\t\t_Alloc;\n-      typedef _Alloc\t\t\t\t\t\tallocator_type;\n-      typedef typename _Alloc::size_type \t\t\tsize_type;\n+      typedef _Node_base<_ATraits, Metadata>\t\tbase_type;\n+      typedef typename base_type::type_traits\t\ttype_traits;\n+      typedef typename base_type::access_traits\t\taccess_traits;\n+      typedef typename type_traits::value_type\t\tvalue_type;\n+      typedef typename base_type::allocator_type\t_Alloc;\n+      typedef _Alloc\t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type\t\tsize_type;\n \n     private:\n-      typedef typename base_type::a_const_pointer      \t       a_const_pointer;\n-      typedef typename base_type::a_const_iterator     \t      a_const_iterator;\n+      typedef typename base_type::a_const_pointer\ta_const_pointer;\n+      typedef typename base_type::a_const_iterator\ta_const_iterator;\n \n-      typedef typename base_type::node_pointer\t\t\tnode_pointer;\n-      typedef typename _Alloc::template rebind<base_type>\t__rebind_n;\n-      typedef typename __rebind_n::other::const_pointer      node_const_pointer;\n+      typedef typename base_type::node_pointer\t\tnode_pointer;\n+      typedef typename detail::rebind_traits<_Alloc, base_type>::const_pointer\n+\tnode_const_pointer;\n \n-      typedef _Leaf<_ATraits, Metadata>\t \t\t\tleaf;\n-      typedef typename _Alloc::template rebind<leaf>::other \t__rebind_l;\n-      typedef typename __rebind_l::pointer \t\t\tleaf_pointer;\n-      typedef typename __rebind_l::const_pointer \t    leaf_const_pointer;\n+      typedef _Leaf<_ATraits, Metadata>\t \t\tleaf;\n+      typedef typename detail::rebind_traits<_Alloc, leaf>\t__rebind_l;\n+      typedef typename __rebind_l::pointer \t\tleaf_pointer;\n+      typedef typename __rebind_l::const_pointer \tleaf_const_pointer;\n \n-      typedef typename _Alloc::template rebind<_Inode>::other \t__rebind_in;\n-      typedef typename __rebind_in::pointer \t\t\tinode_pointer;\n-      typedef typename __rebind_in::const_pointer \t    inode_const_pointer;\n+      typedef detail::rebind_traits<_Alloc, _Inode>\t__rebind_in;\n+      typedef typename __rebind_in::pointer\t\tinode_pointer;\n+      typedef typename __rebind_in::const_pointer \tinode_const_pointer;\n \n       inline size_type\n       get_pref_pos(a_const_iterator, a_const_iterator, a_const_pointer) const;\n \n     public:\n-      typedef typename _Alloc::template rebind<node_pointer>::other __rebind_np;\n+      typedef detail::rebind_traits<_Alloc, node_pointer>\t__rebind_np;\n       typedef typename __rebind_np::pointer \t\tnode_pointer_pointer;\n       typedef typename __rebind_np::reference \t\tnode_pointer_reference;\n \n@@ -500,16 +500,12 @@ namespace __gnu_pbds\n       typedef typename type_traits::const_reference \tconst_reference;\n \n       typedef allocator_type\t\t\t\t_Alloc;\n-      typedef typename _Alloc::template rebind<Node>\t__rebind_n;\n-      typedef typename __rebind_n::other::pointer\tnode_pointer;\n-      typedef typename _Alloc::template rebind<Leaf>\t__rebind_l;\n-      typedef typename __rebind_l::other::pointer\tleaf_pointer;\n-      typedef typename __rebind_l::other::const_pointer\tleaf_const_pointer;\n-      typedef typename _Alloc::template rebind<Head>\t__rebind_h;\n-      typedef typename __rebind_h::other::pointer\thead_pointer;\n-\n-      typedef typename _Alloc::template rebind<Inode> __rebind_in;\n-      typedef typename __rebind_in::other::pointer \tinode_pointer;\n+      typedef typename rebind_traits<_Alloc, Node>::pointer\tnode_pointer;\n+      typedef typename rebind_traits<_Alloc, Leaf>::pointer\tleaf_pointer;\n+      typedef typename rebind_traits<_Alloc, Leaf>::const_pointer\tleaf_const_pointer;\n+      typedef typename rebind_traits<_Alloc, Head>::pointer\thead_pointer;\n+\n+      typedef typename rebind_traits<_Alloc, Inode>::pointer \tinode_pointer;\n       typedef typename Inode::iterator\t\t\tinode_iterator;\n \n       node_pointer \t\t\t\t\tm_p_nd;\n@@ -814,16 +810,13 @@ namespace __gnu_pbds\n     class _Node_citer\n     {\n     protected:\n-      typedef typename _Alloc::template rebind<Node>\t__rebind_n;\n-      typedef typename __rebind_n::other::pointer\tnode_pointer;\n+      typedef typename rebind_traits<_Alloc, Node>::pointer\tnode_pointer;\n \n-      typedef typename _Alloc::template rebind<Leaf>\t__rebind_l;\n-      typedef typename __rebind_l::other::pointer\tleaf_pointer;\n-      typedef typename __rebind_l::other::const_pointer\tleaf_const_pointer;\n+      typedef typename rebind_traits<_Alloc, Leaf>::pointer\tleaf_pointer;\n+      typedef typename rebind_traits<_Alloc, Leaf>::const_pointer\tleaf_const_pointer;\n \n-      typedef typename _Alloc::template rebind<Inode> \t__rebind_in;\n-      typedef typename __rebind_in::other::pointer \tinode_pointer;\n-      typedef typename __rebind_in::other::const_pointer inode_const_pointer;\n+      typedef typename rebind_traits<_Alloc, Inode>::pointer \tinode_pointer;\n+      typedef typename rebind_traits<_Alloc, Inode>::const_pointer inode_const_pointer;\n \n       typedef typename Node::a_const_pointer\t\ta_const_pointer;\n       typedef typename Node::a_const_iterator\t\ta_const_iterator;\n@@ -866,9 +859,7 @@ namespace __gnu_pbds\n       typedef typename Node::metadata_type \t\tmetadata_type;\n \n       /// Const metadata reference type.\n-      typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n-      typedef typename __rebind_m::other \t\t__rebind_ma;\n-      typedef typename __rebind_ma::const_reference    metadata_const_reference;\n+      typedef typename rebind_traits<_Alloc, metadata_type>::const_reference    metadata_const_reference;\n \n       inline\n       _Node_citer(node_pointer p_nd = 0, a_const_pointer p_traits = 0)\n@@ -946,8 +937,7 @@ namespace __gnu_pbds\n     private:\n       typedef _Node_citer<Node, Leaf, Head, Inode,\n \t\t\t  _CIterator, Iterator, _Alloc>\tbase_type;\n-      typedef typename _Alloc::template rebind<Node>\t__rebind_n;\n-      typedef typename __rebind_n::other::pointer\tnode_pointer;\n+      typedef typename rebind_traits<_Alloc, Node>::pointer\tnode_pointer;\n       typedef typename base_type::inode_pointer \tinode_pointer;\n       typedef typename base_type::a_const_pointer \ta_const_pointer;\n       typedef Iterator \t\t\t\t\titerator;"}, {"sha": "b2330fa1c43a19d53a3542bb110b2b7e1d8437ba", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/node.hpp", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -55,23 +55,14 @@ namespace __gnu_pbds\n       typedef Value_Type \t\tvalue_type;\n       typedef Metadata \t\t\tmetadata_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-      rb_tree_node_<\n-      Value_Type,\n-      Metadata,\n-      _Alloc> >::other::pointer\n-      node_pointer;\n-\n-      typedef\n-      typename _Alloc::template rebind<\n-\tmetadata_type>::other::reference\n-      metadata_reference;\n-\n-      typedef\n-      typename _Alloc::template rebind<\n-\tmetadata_type>::other::const_reference\n-      metadata_const_reference;\n+      typedef typename rebind_traits<_Alloc, rb_tree_node_>::pointer\n+\tnode_pointer;\n+\n+      typedef typename rebind_traits<_Alloc, metadata_type>::reference\n+\tmetadata_reference;\n+\n+      typedef typename rebind_traits<_Alloc, metadata_type>::const_reference\n+\tmetadata_const_reference;\n \n       bool\n       special() const\n@@ -109,13 +100,8 @@ namespace __gnu_pbds\n       typedef Value_Type \t\tvalue_type;\n       typedef null_type \tmetadata_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-      rb_tree_node_<\n-      Value_Type,\n-      null_type,\n-      _Alloc> >::other::pointer\n-      node_pointer;\n+      typedef typename rebind_traits<_Alloc, rb_tree_node_>::pointer\n+\tnode_pointer;\n \n       bool\n       special() const"}, {"sha": "0cf81a73a51fa8d67b1bd91d00a4b7e49419c08c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -54,13 +54,13 @@ namespace __gnu_pbds\n       typedef typename allocator_type::size_type \t size_type;\n       typedef _Node \t\t\t\t\t node;\n \n-      typedef typename _Alloc::template rebind<node>\t __rebind_n;\n-      typedef typename __rebind_n::other::pointer      \t node_pointer;\n+      typedef typename rebind_traits<_Alloc, node>::pointer node_pointer;\n \n-      typedef typename _Alloc::template rebind<node_pointer>  __rebind_np;\n \n-      typedef typename __rebind_np::other::pointer \t entry_pointer;\n-      typedef typename __rebind_np::other::const_pointer entry_const_pointer;\n+      typedef typename rebind_traits<_Alloc, node_pointer>::pointer\n+\tentry_pointer;\n+      typedef typename rebind_traits<_Alloc, node_pointer>::const_pointer\n+\tentry_const_pointer;\n \n       enum\n \t{"}, {"sha": "b647d3f8b6831b4ee71ff882d52661861acf64cb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/node.hpp", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -53,18 +53,14 @@ namespace __gnu_pbds\n       typedef Value_Type value_type;\n       typedef Metadata metadata_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-      splay_tree_node_<Value_Type, Metadata, _Alloc> >::other::pointer\n-      node_pointer;\n+      typedef typename rebind_traits<_Alloc, splay_tree_node_>::pointer\n+\tnode_pointer;\n \n-      typedef\n-      typename _Alloc::template rebind<metadata_type>::other::reference\n-      metadata_reference;\n+      typedef typename rebind_traits<_Alloc, metadata_type>::reference\n+\tmetadata_reference;\n \n-      typedef\n-      typename _Alloc::template rebind<metadata_type>::other::const_reference\n-      metadata_const_reference;\n+      typedef typename rebind_traits<_Alloc, metadata_type>::const_reference\n+\tmetadata_const_reference;\n \n #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n       void\n@@ -99,10 +95,8 @@ namespace __gnu_pbds\n       typedef Value_Type value_type;\n       typedef null_type metadata_type;\n \n-      typedef\n-      typename _Alloc::template rebind<\n-      splay_tree_node_<Value_Type, null_type, _Alloc> >::other::pointer\n-      node_pointer;\n+      typedef typename rebind_traits<_Alloc, splay_tree_node_>::pointer\n+\tnode_pointer;\n \n       inline bool\n       special() const"}, {"sha": "f440fa3b7e7580dea4323341ab16e16a442397b5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -78,7 +78,7 @@ namespace __gnu_pbds\n     : public left_child_next_sibling_heap PB_DS_BASE_T_P\n     {\n     private:\n-      typedef typename _Alloc::template rebind<Value_Type>::other __rebind_a;\n+      typedef rebind_traits<_Alloc, Value_Type>\t\t  __rebind_a;\n       typedef left_child_next_sibling_heap PB_DS_BASE_T_P base_type;\n \n     protected:"}, {"sha": "6377d4fa43224a6cf01a81d9a1edca068abd308e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_access_traits.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -49,8 +49,8 @@ namespace __gnu_pbds\n     typedef std::size_t \t\t       \t\tsize_type;\n     typedef std::string \t\t\t       \tkey_type;\n \n-    typedef typename _Alloc::template rebind<key_type>\t__rebind_k;\n-    typedef typename __rebind_k::other::const_reference\tkey_const_reference;\n+    typedef typename rebind_traits<_Alloc, key_type>::const_reference\n+      key_const_reference;\n     typedef std::string::const_iterator \t\tconst_iterator;\n \n     /// Element type."}, {"sha": "265b1cfcfe064874010f3a22b9fd2198aca849f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/type_utils.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -35,7 +35,7 @@\n \n /**\n  * @file detail/type_utils.hpp\n- * Contains utilities for handnling types. All of these classes are based on\n+ * Contains utilities for handling types. All of these classes are based on\n  * Modern C++ by Andrei Alxandrescu.\n  */\n "}, {"sha": "86a002448457daf1f57ea99440648dd691e87d2f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 56, "deletions": 146, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -45,7 +45,7 @@\n #include <utility>\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n-#include <utility>\n+#include <memory>\n \n namespace __gnu_pbds\n {\n@@ -91,146 +91,83 @@ namespace __gnu_pbds\n \n     /// Primary template for representation of stored data.\n     /// Two types of data can be stored: value and hash.\n-    template<typename _Tv, typename _Th>\n+    template<typename _Tv, typename _Th, bool Store_Hash>\n       struct stored_data\n       : public stored_value<_Tv>, public stored_hash<_Th>\n       { };\n \n     /// Specialization for representation of stored data of just value type.\n-    template<typename _Tv>\n-      struct stored_data<_Tv, null_type>\n+    template<typename _Tv, typename _Th>\n+      struct stored_data<_Tv, _Th, false>\n       : public stored_value<_Tv>\n       { };\n \n-    /// Primary template.\n-    template<typename Key, typename Mapped, typename _Alloc, bool Store_Hash>\n-      struct type_base;\n-\n-    /**\n-     * Specialization of type_base for the case where the hash value\n-     * is not stored alongside each value.\n-     */\n-    template<typename Key, typename Mapped, typename _Alloc>\n-      struct type_base<Key, Mapped, _Alloc, false>\n+    /// Choose value_type to be a key/value pair or just a key.\n+    template<typename Key, typename Mapped>\n+      struct select_value_type\n       {\n-      public:\n-\ttypedef typename _Alloc::size_type \t\tsize_type;\n-\n-      private:\n-\ttypedef typename _Alloc::template rebind<Mapped>\t__rebind_m;\n-\ttypedef typename __rebind_m::other\t\t\t__rebind_ma;\n-\ttypedef std::pair<const Key, Mapped>\t\t\t__value_type;\n-\ttypedef typename _Alloc::template rebind<__value_type>\t__rebind_v;\n-       \ttypedef typename __rebind_v::other\t\t\t__rebind_va;\n-\n-      public:\n-\ttypedef typename __rebind_ma::value_type       \tmapped_type;\n-\ttypedef typename __rebind_ma::pointer \t\tmapped_pointer;\n-\ttypedef typename __rebind_ma::const_pointer \tmapped_const_pointer;\n-\ttypedef typename __rebind_ma::reference\t       \tmapped_reference;\n-\ttypedef typename __rebind_ma::const_reference \tmapped_const_reference;\n-\n-\ttypedef typename __rebind_va::value_type \tvalue_type;\n-\ttypedef typename __rebind_va::pointer \t\tpointer;\n-\ttypedef typename __rebind_va::const_pointer \tconst_pointer;\n-\ttypedef typename __rebind_va::reference \treference;\n-\ttypedef typename __rebind_va::const_reference \tconst_reference;\n-\n-\ttypedef stored_data<value_type, null_type>\tstored_data_type;\n+\ttypedef std::pair<const Key, Mapped> type;\n       };\n \n-    /**\n-     * Specialization of type_base for the case where the hash value\n-     * is stored alongside each value.\n-     */\n-    template<typename Key, typename Mapped, typename _Alloc>\n-      struct type_base<Key, Mapped, _Alloc, true>\n+    /// Specialization for sets where the key is the value_type.\n+    template<typename Key>\n+      struct select_value_type<Key, null_type>\n       {\n-      public:\n-\ttypedef typename _Alloc::size_type \t\tsize_type;\n-\n-      private:\n-\ttypedef typename _Alloc::template rebind<Mapped>\t__rebind_m;\n-\ttypedef typename __rebind_m::other\t\t\t__rebind_ma;\n-\ttypedef std::pair<const Key, Mapped>\t\t\t__value_type;\n-\ttypedef typename _Alloc::template rebind<__value_type>\t__rebind_v;\n-       \ttypedef typename __rebind_v::other\t\t\t__rebind_va;\n-\n-      public:\n-\ttypedef typename __rebind_ma::value_type       \tmapped_type;\n-\ttypedef typename __rebind_ma::pointer \t\tmapped_pointer;\n-\ttypedef typename __rebind_ma::const_pointer \tmapped_const_pointer;\n-\ttypedef typename __rebind_ma::reference\t       \tmapped_reference;\n-\ttypedef typename __rebind_ma::const_reference \tmapped_const_reference;\n-\n-\ttypedef typename __rebind_va::value_type \tvalue_type;\n-\ttypedef typename __rebind_va::pointer \t\tpointer;\n-\ttypedef typename __rebind_va::const_pointer \tconst_pointer;\n-\ttypedef typename __rebind_va::reference \treference;\n-\ttypedef typename __rebind_va::const_reference \tconst_reference;\n-\n-\ttypedef stored_data<value_type, size_type>\tstored_data_type;\n+\ttypedef Key type;\n       };\n \n+    /// Base class for conditionally defining a static data member.\n+    template<typename Key, typename Mapped, typename _Alloc, bool Store_Hash>\n+      struct maybe_null_type\n+      { };\n \n-    /**\n-     * Specialization of type_base for the case where the hash value\n-     * is not stored alongside each value.\n-     */\n-    template<typename Key, typename _Alloc>\n-      struct type_base<Key, null_type, _Alloc, false>\n+    /// Specialization that defines a static data member of type null_type.\n+    template<typename Key,typename _Alloc, bool Store_Hash>\n+      struct maybe_null_type<Key, null_type, _Alloc, Store_Hash>\n       {\n-      public:\n-\ttypedef typename _Alloc::size_type \t\tsize_type;\n-\ttypedef Key \t\t\t\t\tvalue_type;\n-\n-      private:\n-\ttypedef typename _Alloc::template rebind<null_type>  \t__rebind_m;\n-\ttypedef typename __rebind_m::other\t\t\t__rebind_ma;\n-\ttypedef typename _Alloc::template rebind<value_type>\t__rebind_v;\n-       \ttypedef typename __rebind_v::other\t\t\t__rebind_va;\n-\n-      public:\n-\ttypedef typename __rebind_ma::value_type       \tmapped_type;\n-\ttypedef typename __rebind_ma::pointer \t\tmapped_pointer;\n-\ttypedef typename __rebind_ma::const_pointer \tmapped_const_pointer;\n-\ttypedef typename __rebind_ma::reference\t       \tmapped_reference;\n-\ttypedef typename __rebind_ma::const_reference \tmapped_const_reference;\n-\n-\ttypedef typename __rebind_va::pointer \t\tpointer;\n-\ttypedef typename __rebind_va::const_pointer \tconst_pointer;\n-\ttypedef typename __rebind_va::reference \treference;\n-\ttypedef typename __rebind_va::const_reference \tconst_reference;\n-\n-\ttypedef stored_data<value_type, null_type>\tstored_data_type;\n-\n-\tstatic null_type \t\t\ts_null_type;\n+\tstatic null_type s_null_type;\n       };\n \n-    template<typename Key, typename _Alloc>\n+    template<typename Key,typename _Alloc, bool Store_Hash>\n       null_type\n-      type_base<Key, null_type, _Alloc, false>::s_null_type;\n+      maybe_null_type<Key, null_type, _Alloc, Store_Hash>::s_null_type;\n \n+    /// Consistent API for accessing allocator-related types.\n+    template<typename _Alloc, typename T>\n+      struct rebind_traits\n+#if __cplusplus >= 201103L\n+      : std::allocator_traits<_Alloc>::template rebind_traits<T>\n+      {\n+\tusing reference = T&;\n+\tusing const_reference = const T&;\n+      };\n+#else\n+      : _Alloc::template rebind<T>::other\n+      {\n+\ttypedef typename _Alloc::template rebind<T>::other allocator_type;\n+      };\n+#endif\n \n-    /**\n-     * Specialization of type_base for the case where the hash value\n-     * is stored alongside each value.\n-     */\n-    template<typename Key, typename _Alloc>\n-      struct type_base<Key, null_type, _Alloc, true>\n+\n+    /// Traits for abstract types.\n+    template<typename Key, typename Mapped, typename _Alloc, bool Store_Hash>\n+      struct types_traits\n+      : public maybe_null_type<Key, Mapped, _Alloc, Store_Hash>\n       {\n       public:\n-\ttypedef typename _Alloc::size_type \t\tsize_type;\n-\ttypedef Key \t\t\t\t\tvalue_type;\n+\ttypedef typename _Alloc::size_type\t\t\tsize_type;\n+\ttypedef typename select_value_type<Key, Mapped>::type\tvalue_type;\n+\ttypedef Key\t\t\t\t\t\tkey_type;\n+\ttypedef Mapped\t\t\t\t\t\tmapped_type;\n \n       private:\n-\ttypedef typename _Alloc::template rebind<null_type>  \t__rebind_m;\n-\ttypedef typename __rebind_m::other\t\t\t__rebind_ma;\n-\ttypedef typename _Alloc::template rebind<value_type>\t__rebind_v;\n-       \ttypedef typename __rebind_v::other\t\t\t__rebind_va;\n+\ttypedef rebind_traits<_Alloc, value_type>\t__rebind_va;\n+\ttypedef rebind_traits<_Alloc, key_type>\t\t__rebind_ka;\n+\ttypedef rebind_traits<_Alloc, mapped_type>\t__rebind_ma;\n+\n+\ttypedef no_throw_copies<Key, Mapped>\t\t__nothrowcopy;\n \n       public:\n-\ttypedef typename __rebind_ma::value_type       \tmapped_type;\n \ttypedef typename __rebind_ma::pointer \t\tmapped_pointer;\n \ttypedef typename __rebind_ma::const_pointer \tmapped_const_pointer;\n \ttypedef typename __rebind_ma::reference\t       \tmapped_reference;\n@@ -241,39 +178,12 @@ namespace __gnu_pbds\n \ttypedef typename __rebind_va::reference \treference;\n \ttypedef typename __rebind_va::const_reference \tconst_reference;\n \n-\ttypedef stored_data<value_type, size_type>\tstored_data_type;\n+\ttypedef stored_data<value_type, size_type, Store_Hash> stored_data_type;\n \n-\tstatic null_type \t\t      \ts_null_type;\n-      };\n-\n-    template<typename Key, typename _Alloc>\n-      null_type\n-      type_base<Key, null_type, _Alloc, true>::s_null_type;\n-\n-\n-    /// Type base dispatch.\n-    template<typename Key, typename Mapped, typename _Alloc, bool Store_Hash>\n-      struct type_dispatch\n-      {\n-\ttypedef type_base<Key, Mapped, _Alloc, Store_Hash> type;\n-      };\n-\n-    /// Traits for abstract types.\n-    template<typename Key, typename Mapped, typename _Alloc, bool Store_Hash>\n-      struct types_traits\n-      : public type_dispatch<Key, Mapped, _Alloc, Store_Hash>::type\n-      {\n-      private:\n-\ttypedef no_throw_copies<Key, Mapped>\t\t__nothrowcopy;\n-\ttypedef typename _Alloc::template rebind<Key>::other __rebind_a;\n-\n-      public:\n-\ttypedef typename _Alloc::size_type \t\tsize_type;\n-\ttypedef typename __rebind_a::value_type \tkey_type;\n-\ttypedef typename __rebind_a::pointer \t\tkey_pointer;\n-\ttypedef typename __rebind_a::const_pointer \tkey_const_pointer;\n-\ttypedef typename __rebind_a::reference \t\tkey_reference;\n-\ttypedef typename __rebind_a::const_reference \tkey_const_reference;\n+\ttypedef typename __rebind_ka::pointer \t\tkey_pointer;\n+\ttypedef typename __rebind_ka::const_pointer \tkey_const_pointer;\n+\ttypedef typename __rebind_ka::reference \tkey_reference;\n+\ttypedef typename __rebind_ka::const_reference \tkey_const_reference;\n \ttypedef std::pair<size_type, size_type> \tcomp_hash;\n \ttypedef integral_constant<int, Store_Hash> \tstore_extra;\n \ttypedef typename __nothrowcopy::indicator \tno_throw_indicator;"}, {"sha": "c1ba92ebaeb77c79815fde5b85071c862c0a188c", "filename": "libstdc++-v3/include/ext/pb_ds/list_update_policy.hpp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -43,6 +43,7 @@\n \n #include <bits/c++config.h>\n #include <cstdlib>\n+#include <ext/pb_ds/detail/types_traits.hpp>\n #include <ext/pb_ds/detail/list_update_policy/lu_counter_metadata.hpp>\n #include <ext/pb_ds/tag_and_trait.hpp>\n \n@@ -62,12 +63,10 @@ namespace __gnu_pbds\n      /// Metadata on which this functor operates.\n      typedef null_type \t\t\t\t\tmetadata_type;\n \n-   private:\n-     typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n-\n    public:\n      /// Reference to metadata on which this functor operates.\n-     typedef typename __rebind_m::other::reference \tmetadata_reference;\n+     typedef typename detail::rebind_traits<_Alloc, metadata_type>::reference\n+       metadata_reference;\n \n      /// Creates a metadata object.\n      metadata_type\n@@ -108,11 +107,11 @@ namespace __gnu_pbds\n \n     private:\n       typedef detail::lu_counter_policy_base<size_type> \tbase_type;\n-      typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n \n     public:\n       /// Reference to metadata on which this functor operates.\n-      typedef typename __rebind_m::other::reference \tmetadata_reference;\n+     typedef typename detail::rebind_traits<_Alloc, metadata_type>::reference\n+       metadata_reference;\n \n       /// Creates a metadata object.\n       metadata_type"}, {"sha": "ea16bf66b8792b419416b5dd7fdc80425faa8361", "filename": "libstdc++-v3/include/ext/pb_ds/priority_queue.hpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -95,8 +95,7 @@ namespace __gnu_pbds\n     typedef typename detail::container_base_dispatch<_Tv, Cmp_Fn, _Alloc,\n \t\t\t\t\t\t     Tag>::type\n  \t\t\t\t\t\t\tbase_type;\n-    typedef typename _Alloc::template rebind<_Tv>   \t__rebind_v;\n-    typedef typename __rebind_v::other\t\t\t__rebind_va;\n+    typedef detail::rebind_traits<_Alloc, _Tv>\t\t__rebind_va;\n \n  public:\n     typedef typename __rebind_va::reference \t\treference;"}, {"sha": "bf831b80f93236bd39db185a2a33bb8e00bbbd6a", "filename": "libstdc++-v3/include/ext/pb_ds/tree_policy.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -108,13 +108,13 @@ namespace __gnu_pbds\n     /// Const pointer to the container's value-type.\n     typedef typename base_type::const_pointer \t\tconst_pointer;\n \n-    typedef typename _Alloc::template rebind<metadata_type>::other __rebind_m;\n-\n     /// Const metadata reference.\n-    typedef typename __rebind_m::const_reference       metadata_const_reference;\n+    typedef typename detail::rebind_traits<_Alloc, metadata_type>::const_reference\n+      metadata_const_reference;\n \n     /// Metadata reference.\n-    typedef typename __rebind_m::reference \t\tmetadata_reference;\n+    typedef typename detail::rebind_traits<_Alloc, metadata_type>::reference\n+      metadata_reference;\n \n     /// Returns the node_const_iterator associated with the tree's root node.\n     virtual node_const_iterator"}, {"sha": "f74234ea104b0d78de5f0c7b34a322ee0f7446fd", "filename": "libstdc++-v3/include/ext/pb_ds/trie_policy.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec541f1bc17be5fd7f181aeb60c3cc239957ae92/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp?ref=ec541f1bc17be5fd7f181aeb60c3cc239957ae92", "patch": "@@ -76,8 +76,8 @@ namespace __gnu_pbds\n   public:\n     typedef typename _Alloc::size_type\t\t\t  size_type;\n     typedef String \t\t\t\t\t  key_type;\n-    typedef typename _Alloc::template rebind<key_type>\t  __rebind_k;\n-    typedef typename __rebind_k::other::const_reference   key_const_reference;\n+    typedef typename detail::rebind_traits<_Alloc, key_type>::const_reference\n+      key_const_reference;\n \n     enum\n       {"}]}