{"sha": "a693f55e581e2405cd15967b2d367293938fb69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5M2Y1NWU1ODFlMjQwNWNkMTU5NjdiMmQzNjcyOTM5MzhmYjY5Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:41:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:41:39Z"}, "message": "[multiple changes]\n\n2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Build_Instance_Compilation_Unit_Nodes): Revert previous\n\tchange. The context clause of a generic instance declaration must be\n\tpreserved until the end of the compilation, because it may have to be\n\tinstalled/removed repeatedly.\n\tThe latest change to sem.adb ensures that the context of both spec and\n\tbody of an instance is traversed before the instance itself, making\n\tthis patch redundant.\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb: Minor code clean-up\n\nFrom-SVN: r147164", "tree": {"sha": "bed3bf7aa0e50ac242052d39c46557c63085b1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed3bf7aa0e50ac242052d39c46557c63085b1d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a693f55e581e2405cd15967b2d367293938fb69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a693f55e581e2405cd15967b2d367293938fb69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a693f55e581e2405cd15967b2d367293938fb69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a693f55e581e2405cd15967b2d367293938fb69c/comments", "author": null, "committer": null, "parents": [{"sha": "e264efcc3847c1b3cfc107eade935d24dee661f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e264efcc3847c1b3cfc107eade935d24dee661f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e264efcc3847c1b3cfc107eade935d24dee661f6"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "46eb7c1d1b5913b052f3613faee9bf0c5a82b9ab", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a693f55e581e2405cd15967b2d367293938fb69c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a693f55e581e2405cd15967b2d367293938fb69c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a693f55e581e2405cd15967b2d367293938fb69c", "patch": "@@ -1,3 +1,17 @@\n+2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Build_Instance_Compilation_Unit_Nodes): Revert previous\n+\tchange. The context clause of a generic instance declaration must be\n+\tpreserved until the end of the compilation, because it may have to be\n+\tinstalled/removed repeatedly.\n+\tThe latest change to sem.adb ensures that the context of both spec and\n+\tbody of an instance is traversed before the instance itself, making\n+\tthis patch redundant.\n+\n+2009-05-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb: Minor code clean-up\n+\n 2009-05-06  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_aggr.adb: Fix typo."}, {"sha": "b265f734192867ce2b57ff9c01b180eaa66ef06d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a693f55e581e2405cd15967b2d367293938fb69c/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a693f55e581e2405cd15967b2d367293938fb69c/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=a693f55e581e2405cd15967b2d367293938fb69c", "patch": "@@ -3077,16 +3077,14 @@ package body Sem_Aggr is\n \n             if Nkind (N) = N_Extension_Aggregate then\n \n-               --  If the ancestor part is a C++ constructor we must handle\n-               --  here that it is a function returning a class-wide type\n+               --  If the ancestor part is a C++ constructor, then it must be a\n+               --  function returning a class-wide type, so check that here.\n \n-               if Is_CPP_Constructor_Call (Ancestor_Part (N)) then\n-                  pragma Assert\n-                    (Is_Class_Wide_Type (Etype (Ancestor_Part (N))));\n-                  Root_Typ := Root_Type (Etype (Ancestor_Part (N)));\n-               else\n-                  Root_Typ := Base_Type (Etype (Ancestor_Part (N)));\n-               end if;\n+               pragma Assert\n+                 (not Is_CPP_Constructor_Call (Ancestor_Part (N))\n+                    or else Is_Class_Wide_Type (Etype (Ancestor_Part (N))));\n+\n+               Root_Typ := Base_Type (Etype (Ancestor_Part (N)));\n \n             else\n                Root_Typ := Root_Type (Typ);"}, {"sha": "b84cf1ea8d1e533f5708ff55e4e52690254b2b8b", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a693f55e581e2405cd15967b2d367293938fb69c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a693f55e581e2405cd15967b2d367293938fb69c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a693f55e581e2405cd15967b2d367293938fb69c", "patch": "@@ -4361,18 +4361,15 @@ package body Sem_Ch12 is\n \n    begin\n       --  A new compilation unit node is built for the instance declaration.\n-      --  Place the context of the compilation this declaration, so that it\n-      --  it is processed before the instance in CodePeer.\n \n       Decl_Cunit :=\n         Make_Compilation_Unit (Sloc (N),\n-          Context_Items  => Context_Items (Parent (N)),\n+          Context_Items  => Empty_List,\n           Unit           => Act_Decl,\n           Aux_Decls_Node =>\n             Make_Compilation_Unit_Aux (Sloc (N)));\n \n       Set_Parent_Spec   (Act_Decl, Parent_Spec (N));\n-      Set_Context_Items (Parent (N), Empty_List);\n \n       --  The new compilation unit is linked to its body, but both share the\n       --  same file, so we do not set Body_Required on the new unit so as not\n@@ -8790,12 +8787,12 @@ package body Sem_Ch12 is\n       Act_Decl      : constant Node_Id    := Body_Info.Act_Decl;\n       Inst_Node     : constant Node_Id    := Body_Info.Inst_Node;\n       Loc           : constant Source_Ptr := Sloc (Inst_Node);\n-      Gen_Id        : constant Node_Id   := Name (Inst_Node);\n-      Gen_Unit      : constant Entity_Id := Get_Generic_Entity (Inst_Node);\n-      Gen_Decl      : constant Node_Id   := Unit_Declaration_Node (Gen_Unit);\n-      Anon_Id       : constant Entity_Id :=\n+      Gen_Id        : constant Node_Id    := Name (Inst_Node);\n+      Gen_Unit      : constant Entity_Id  := Get_Generic_Entity (Inst_Node);\n+      Gen_Decl      : constant Node_Id    := Unit_Declaration_Node (Gen_Unit);\n+      Anon_Id       : constant Entity_Id  :=\n                         Defining_Unit_Name (Specification (Act_Decl));\n-      Pack_Id       : constant Entity_Id :=\n+      Pack_Id       : constant Entity_Id  :=\n                         Defining_Unit_Name (Parent (Act_Decl));\n       Decls         : List_Id;\n       Gen_Body      : Node_Id;"}]}