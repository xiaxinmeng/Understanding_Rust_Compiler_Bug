{"sha": "a77af1829fd2dc976599383d01ab4467c05eba5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3YWYxODI5ZmQyZGM5NzY1OTkzODNkMDFhYjQ0NjdjMDVlYmE1Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-25T14:05:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-25T14:05:04Z"}, "message": "re PR ipa/78515 (ICE: in fold_binary_loc, at fold-const.c:8999 with -Os -mavx512bw)\n\n2016-11-25  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/78515\n\t* ipa-prop.c (compute_complex_assign_jump_func): Properly identify\n\tunary, binary and single RHSs.\n\t* tree.def (BIT_INSERT_EXPR): Adjust tree code name.\n\n\t* gcc.dg/torture/pr78515.c: New testcase.\n\nFrom-SVN: r242876", "tree": {"sha": "f944144904fa846617008bdac25466aa470f5806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f944144904fa846617008bdac25466aa470f5806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a77af1829fd2dc976599383d01ab4467c05eba5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77af1829fd2dc976599383d01ab4467c05eba5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a77af1829fd2dc976599383d01ab4467c05eba5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77af1829fd2dc976599383d01ab4467c05eba5b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cae214f76deaf8271e26b094d6d14a31e537e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cae214f76deaf8271e26b094d6d14a31e537e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cae214f76deaf8271e26b094d6d14a31e537e00"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "f87b9c5d68b9f2d1755c7814cd09ff9d9f76d35d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a77af1829fd2dc976599383d01ab4467c05eba5b", "patch": "@@ -1,3 +1,10 @@\n+2016-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/78515\n+\t* ipa-prop.c (compute_complex_assign_jump_func): Properly identify\n+\tunary, binary and single RHSs.\n+\t* tree.def (BIT_INSERT_EXPR): Adjust tree code name.\n+\n 2016-11-25  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR middle-end/78507"}, {"sha": "642111def51e4e4098fed77a79c17116b105319b", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=a77af1829fd2dc976599383d01ab4467c05eba5b", "patch": "@@ -1177,29 +1177,37 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n \n   if (index >= 0)\n     {\n-      tree op2 = gimple_assign_rhs2 (stmt);\n-\n-      if (op2)\n+      switch (gimple_assign_rhs_class (stmt))\n \t{\n-\t  if (!is_gimple_ip_invariant (op2)\n-\t      || (TREE_CODE_CLASS (gimple_expr_code (stmt)) != tcc_comparison\n-\t\t  && !useless_type_conversion_p (TREE_TYPE (name),\n-\t\t\t\t\t\t TREE_TYPE (op1))))\n-\t    return;\n-\n-\t  ipa_set_jf_arith_pass_through (jfunc, index, op2,\n-\t\t\t\t\t gimple_assign_rhs_code (stmt));\n-\t}\n-      else if (gimple_assign_single_p (stmt))\n-\t{\n-\t  bool agg_p = parm_ref_data_pass_through_p (fbi, index, call, tc_ssa);\n-\t  ipa_set_jf_simple_pass_through (jfunc, index, agg_p);\n+\tcase GIMPLE_BINARY_RHS:\n+\t  {\n+\t    tree op2 = gimple_assign_rhs2 (stmt);\n+\t    if (!is_gimple_ip_invariant (op2)\n+\t\t|| ((TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n+\t\t     != tcc_comparison)\n+\t\t    && !useless_type_conversion_p (TREE_TYPE (name),\n+\t\t\t\t\t\t   TREE_TYPE (op1))))\n+\t      return;\n+\n+\t    ipa_set_jf_arith_pass_through (jfunc, index, op2,\n+\t\t\t\t\t   gimple_assign_rhs_code (stmt));\n+\t    break;\n+\t  }\n+\tcase GIMPLE_SINGLE_RHS:\n+\t  {\n+\t    bool agg_p = parm_ref_data_pass_through_p (fbi, index, call,\n+\t\t\t\t\t\t       tc_ssa);\n+\t    ipa_set_jf_simple_pass_through (jfunc, index, agg_p);\n+\t    break;\n+\t  }\n+\tcase GIMPLE_UNARY_RHS:\n+\t  if (is_gimple_assign (stmt2)\n+\t      && gimple_assign_rhs_class (stmt2) == GIMPLE_UNARY_RHS\n+\t      && ! CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt2)))\n+\t    ipa_set_jf_unary_pass_through (jfunc, index,\n+\t\t\t\t\t   gimple_assign_rhs_code (stmt2));\n+\tdefault:;\n \t}\n-      else if (is_gimple_assign (stmt2)\n-\t       && (gimple_expr_code (stmt2) != NOP_EXPR)\n-\t       && (TREE_CODE_CLASS (gimple_expr_code (stmt2)) == tcc_unary))\n-\tipa_set_jf_unary_pass_through (jfunc, index,\n-\t\t\t\t       gimple_assign_rhs_code (stmt2));\n       return;\n     }\n "}, {"sha": "394655455014eda27cfe1c95818c08f28ba77161", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a77af1829fd2dc976599383d01ab4467c05eba5b", "patch": "@@ -1,3 +1,8 @@\n+2016-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/78515\n+\t* gcc.dg/torture/pr78515.c: New testcase.\n+\n 2016-11-25  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/78293"}, {"sha": "d700db55842400e369eec86493c42029caf0c82d", "filename": "gcc/testsuite/gcc.dg/torture/pr78515.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78515.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78515.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78515.c?ref=a77af1829fd2dc976599383d01ab4467c05eba5b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mavx512bw\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef unsigned V __attribute__ ((vector_size (64)));\n+\n+V g;\n+\n+static V\n+baz (V u, V v)\n+{\n+  g += u;\n+  return v + g + 1;\n+}\n+\n+static V\n+bar (V u)\n+{\n+  u[0] = 0;\n+  return baz(u, (V){});\n+}\n+\n+V\n+foo ()\n+{\n+  return (V){bar((V){})[0]};\n+}"}, {"sha": "e093307afb5dfadf5956e8022658e9b0fbbf82cb", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77af1829fd2dc976599383d01ab4467c05eba5b/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=a77af1829fd2dc976599383d01ab4467c05eba5b", "patch": "@@ -865,7 +865,7 @@ DEFTREECODE (FDESC_EXPR, \"fdesc_expr\", tcc_expression, 2)\n    introducing a quaternary operation.\n    The replaced bits shall be fully inside the container.  If the container\n    is of vector type, then these bits shall be aligned with its elements.  */\n-DEFTREECODE (BIT_INSERT_EXPR, \"bit_field_insert\", tcc_expression, 3)\n+DEFTREECODE (BIT_INSERT_EXPR, \"bit_insert_expr\", tcc_expression, 3)\n \n /* Given two real or integer operands of the same type,\n    returns a complex value of the corresponding complex type.  */"}]}