{"sha": "773d0331f7456614f9f7e619e642946d9bdc638a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzczZDAzMzFmNzQ1NjYxNGY5ZjdlNjE5ZTY0Mjk0NmQ5YmRjNjM4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-17T06:57:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-17T06:57:45Z"}, "message": "re PR tree-optimization/85757 (tree optimizers fail to fully clean up fixed-size memcpy)\n\n2018-05-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/85757\n\t* tree-ssa-dse.c (dse_classify_store): Record a PHI def and\n\tremove defs that only feed that PHI from further processing.\n\n\t* gcc.dg/tree-ssa/ssa-dse-34.c: New testcase.\n\nFrom-SVN: r260306", "tree": {"sha": "548ff0f2efa59788903cd0e6dc22e20a8d9a7156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/548ff0f2efa59788903cd0e6dc22e20a8d9a7156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/773d0331f7456614f9f7e619e642946d9bdc638a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773d0331f7456614f9f7e619e642946d9bdc638a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/773d0331f7456614f9f7e619e642946d9bdc638a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773d0331f7456614f9f7e619e642946d9bdc638a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ee520219f795fc363d90c1e92ebad642d0e9f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee520219f795fc363d90c1e92ebad642d0e9f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee520219f795fc363d90c1e92ebad642d0e9f69"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "23d13acc522ab40524c010173530beabaa02f6ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=773d0331f7456614f9f7e619e642946d9bdc638a", "patch": "@@ -1,3 +1,9 @@\n+2018-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/85757\n+\t* tree-ssa-dse.c (dse_classify_store): Record a PHI def and\n+\tremove defs that only feed that PHI from further processing.\n+\n 2018-05-16  Jim Wilson  <jimw@sifive.com>\n \n \t* config/riscv/riscv.md (<optab>si3_mask, <optab>si3_mask_1): Prepend"}, {"sha": "f52a555a12282aa574214b2c3279eb5fb86a92da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=773d0331f7456614f9f7e619e642946d9bdc638a", "patch": "@@ -1,3 +1,8 @@\n+2018-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/85757\n+\t* gcc.dg/tree-ssa/ssa-dse-34.c: New testcase.\n+\n 2018-05-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85363"}, {"sha": "3016dfecd3812bd89faf7d921516fd7330c5f348", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-34.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-34.c?ref=773d0331f7456614f9f7e619e642946d9bdc638a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-dse1-details\" } */\n+\n+void f(int n, char *p0, char *p1, char *p2, char *o)\n+{\n+  int t0, t1;\n+  __builtin_memcpy(&t0, p0, 1);\n+  __builtin_memcpy(&t1, p1, 1);\n+  if (n==3)\n+    __builtin_memcpy(o+2, p2, 1);\n+  __builtin_memcpy(o+0, &t0, 1);\n+  __builtin_memcpy(o+1, &t1, 1);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted dead store\" 2 \"dse1\" } } */"}, {"sha": "589cfef5df55d472e618da22f50d5ca5be1f4c08", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773d0331f7456614f9f7e619e642946d9bdc638a/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=773d0331f7456614f9f7e619e642946d9bdc638a", "patch": "@@ -577,6 +577,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n       else\n \tdefvar = gimple_vdef (temp);\n       auto_vec<gimple *, 10> defs;\n+      gimple *phi_def = NULL;\n       FOR_EACH_IMM_USE_STMT (use_stmt, ui, defvar)\n \t{\n \t  /* Limit stmt walking.  */\n@@ -600,7 +601,10 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t\t processing.  */\n \t      if (!bitmap_bit_p (visited,\n \t\t\t\t SSA_NAME_VERSION (PHI_RESULT (use_stmt))))\n-\t\tdefs.safe_push (use_stmt);\n+\t\t{\n+\t\t  defs.safe_push (use_stmt);\n+\t\t  phi_def = use_stmt;\n+\t\t}\n \t    }\n \t  /* If the statement is a use the store is not dead.  */\n \t  else if (ref_maybe_used_by_stmt_p (use_stmt, ref))\n@@ -657,15 +661,31 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t  return DSE_STORE_DEAD;\n \t}\n \n-      /* Process defs and remove paths starting with a kill from further\n-         processing.  */\n+      /* Process defs and remove those we need not process further.  */\n       for (unsigned i = 0; i < defs.length (); ++i)\n-\tif (stmt_kills_ref_p (defs[i], ref))\n-\t  {\n-\t    if (by_clobber_p && !gimple_clobber_p (defs[i]))\n-\t      *by_clobber_p = false;\n+\t{\n+\t  gimple *def = defs[i];\n+\t  gimple *use_stmt;\n+\t  use_operand_p use_p;\n+\t  /* If the path to check starts with a kill we do not need to\n+\t     process it further.\n+\t     ???  With byte tracking we need only kill the bytes currently\n+\t     live.  */\n+\t  if (stmt_kills_ref_p (def, ref))\n+\t    {\n+\t      if (by_clobber_p && !gimple_clobber_p (def))\n+\t\t*by_clobber_p = false;\n+\t      defs.unordered_remove (i);\n+\t    }\n+\t  /* In addition to kills we can remove defs whose only use\n+\t     is another def in defs.  That can only ever be PHIs of which\n+\t     we track a single for simplicity reasons (we fail for multiple\n+\t     PHIs anyways).  */\n+\t  else if (gimple_code (def) != GIMPLE_PHI\n+\t\t   && single_imm_use (gimple_vdef (def), &use_p, &use_stmt)\n+\t\t   && use_stmt == phi_def)\n \t    defs.unordered_remove (i);\n-\t  }\n+\t}\n \n       /* If all defs kill the ref we are done.  */\n       if (defs.is_empty ())"}]}