{"sha": "e0ddb4bd6563d0dc2e8fa5423c39779080b78c85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkZGI0YmQ2NTYzZDBkYzJlOGZhNTQyM2MzOTc3OTA4MGI3OGM4NQ==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2004-11-22T22:57:58Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2004-11-22T22:57:58Z"}, "message": "tree-if-conv.c (if_convertable_phi_p): Rename to ...\n\n        * tree-if-conv.c (if_convertable_phi_p): Rename to ...\n        (if_convertible_phi_p): ... new name.\n        (if_convertable_modify_expr_p): Rename to ...\n        (if_convertible_modify_expr_p): ... new name.\n        (if_convertable_stmt_p): Rename to ...\n        (if_convertible_stmt_p): ... new name.\n        (if_convertable_bb_p): Rename to ...\n        (if_convertible_bb_p): ... new name.\n        (if_convertable_loop_p): Rename to ...\n        (if_convertible_loop_p): ... new name.\n\nFrom-SVN: r91044", "tree": {"sha": "644bfffecd5962d3d7b43c4fccb530450fc41560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/644bfffecd5962d3d7b43c4fccb530450fc41560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85/comments", "author": null, "committer": null, "parents": [{"sha": "c33a9f06b2356d44a95aa261c3afb7a7e45d365e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33a9f06b2356d44a95aa261c3afb7a7e45d365e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33a9f06b2356d44a95aa261c3afb7a7e45d365e"}], "stats": {"total": 71, "additions": 42, "deletions": 29}, "files": [{"sha": "d2ce7420ecc9d557108913d6787f845d6cb65b04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0ddb4bd6563d0dc2e8fa5423c39779080b78c85", "patch": "@@ -1,3 +1,16 @@\n+2004-11-16  Devang Patel  <dpatel@apple.com>\n+\n+\t* tree-if-conv.c (if_convertable_phi_p): Rename to ...\n+\t(if_convertible_phi_p): ... new name.\n+\t(if_convertable_modify_expr_p): Rename to ...\n+\t(if_convertible_modify_expr_p): ... new name.\n+\t(if_convertable_stmt_p): Rename to ...\n+\t(if_convertible_stmt_p): ... new name.\n+\t(if_convertable_bb_p): Rename to ...\n+\t(if_convertible_bb_p): ... new name.\n+\t(if_convertable_loop_p): Rename to ...\n+\t(if_convertible_loop_p): ... new name.\n+\t\n 2004-11-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/18444"}, {"sha": "a9261017b98e8da752576dc581353cdebc3ba4f8", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ddb4bd6563d0dc2e8fa5423c39779080b78c85/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=e0ddb4bd6563d0dc2e8fa5423c39779080b78c85", "patch": "@@ -24,7 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    A short description of if-conversion:\n \n-     o Decide if a loop is if-convertable or not.\n+     o Decide if a loop is if-convertible or not.\n      o Walk all loop basic blocks in breadth first order (BFS order).\n        o Remove conditional statements (at the end of basic block)\n          and propagate condition into destination basic blocks'\n@@ -108,11 +108,11 @@ static tree tree_if_convert_stmt (struct loop *loop, tree, tree,\n \t\t\t\t  block_stmt_iterator *);\n static void tree_if_convert_cond_expr (struct loop *, tree, tree,\n \t\t\t\t       block_stmt_iterator *);\n-static bool if_convertable_phi_p (struct loop *, basic_block, tree);\n-static bool if_convertable_modify_expr_p (struct loop *, basic_block, tree);\n-static bool if_convertable_stmt_p (struct loop *, basic_block, tree);\n-static bool if_convertable_bb_p (struct loop *, basic_block, bool);\n-static bool if_convertable_loop_p (struct loop *, bool);\n+static bool if_convertible_phi_p (struct loop *, basic_block, tree);\n+static bool if_convertible_modify_expr_p (struct loop *, basic_block, tree);\n+static bool if_convertible_stmt_p (struct loop *, basic_block, tree);\n+static bool if_convertible_bb_p (struct loop *, basic_block, bool);\n+static bool if_convertible_loop_p (struct loop *, bool);\n static void add_to_predicate_list (basic_block, tree);\n static tree add_to_dst_predicate_list (struct loop * loop, basic_block, tree, tree,\n \t\t\t\t       block_stmt_iterator *);\n@@ -149,8 +149,8 @@ tree_if_conversion (struct loop *loop, bool for_vectorizer)\n   ifc_bbs = NULL;\n \n   /* if-conversion is not appropriate for all loops. First, check if loop  is\n-     if-convertable or not.  */\n-  if (!if_convertable_loop_p (loop, for_vectorizer))\n+     if-convertible or not.  */\n+  if (!if_convertible_loop_p (loop, for_vectorizer))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\"-------------------------\\n\");\n@@ -320,14 +320,14 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n   return;\n }\n \n-/* Return true, iff PHI is if-convertable. PHI is part of loop LOOP\n+/* Return true, iff PHI is if-convertible. PHI is part of loop LOOP\n    and it belongs to basic block BB.\n-   PHI is not if-convertable\n+   PHI is not if-convertible\n    - if it has more than 2 arguments.\n    - Virtual PHI is immediately used in another PHI node.  */\n \n static bool\n-if_convertable_phi_p (struct loop *loop, basic_block bb, tree phi)\n+if_convertible_phi_p (struct loop *loop, basic_block bb, tree phi)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -362,16 +362,16 @@ if_convertable_phi_p (struct loop *loop, basic_block bb, tree phi)\n   return true;\n }\n \n-/* Return true, if M_EXPR is if-convertable.\n-   MODIFY_EXPR is not if-convertable if,\n+/* Return true, if M_EXPR is if-convertible.\n+   MODIFY_EXPR is not if-convertible if,\n    - It is not movable.\n    - It could trap.\n    - LHS is not var decl.\n   MODIFY_EXPR is part of block BB, which is inside loop LOOP.\n */\n \n static bool\n-if_convertable_modify_expr_p (struct loop *loop, basic_block bb, tree m_expr)\n+if_convertible_modify_expr_p (struct loop *loop, basic_block bb, tree m_expr)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -419,14 +419,14 @@ if_convertable_modify_expr_p (struct loop *loop, basic_block bb, tree m_expr)\n   return true;\n }\n \n-/* Return true, iff STMT is if-convertable.\n-   Statement is if-convertable if,\n-   - It is if-convertable MODIFY_EXPR\n+/* Return true, iff STMT is if-convertible.\n+   Statement is if-convertible if,\n+   - It is if-convertible MODIFY_EXPR\n    - IT is LABEL_EXPR, GOTO_EXPR or COND_EXPR.\n    STMT is inside block BB, which is inside loop LOOP.  */\n \n static bool\n-if_convertable_stmt_p (struct loop *loop, basic_block bb, tree stmt)\n+if_convertible_stmt_p (struct loop *loop, basic_block bb, tree stmt)\n {\n   switch (TREE_CODE (stmt))\n     {\n@@ -435,7 +435,7 @@ if_convertable_stmt_p (struct loop *loop, basic_block bb, tree stmt)\n \n     case MODIFY_EXPR:\n \n-      if (!if_convertable_modify_expr_p (loop, bb, stmt))\n+      if (!if_convertible_modify_expr_p (loop, bb, stmt))\n \treturn false;\n       break;\n \n@@ -457,17 +457,17 @@ if_convertable_stmt_p (struct loop *loop, basic_block bb, tree stmt)\n   return true;\n }\n \n-/* Return true, iff BB is if-convertable.\n+/* Return true, iff BB is if-convertible.\n    Note: This routine does _not_ check basic block statements and phis.\n-   Basic block is not if-convertable if,\n+   Basic block is not if-convertible if,\n    - Basic block is non-empty and it is after exit block (in BFS order).\n    - Basic block is after exit block but before latch.\n    - Basic block edge(s) is not normal.\n    EXIT_BB_SEEN is true if basic block with exit edge is already seen.\n    BB is inside loop LOOP.  */\n \n static bool\n-if_convertable_bb_p (struct loop *loop, basic_block bb, bool exit_bb_seen)\n+if_convertible_bb_p (struct loop *loop, basic_block bb, bool exit_bb_seen)\n {\n   edge e;\n   edge_iterator ei;\n@@ -504,19 +504,19 @@ if_convertable_bb_p (struct loop *loop, basic_block bb, bool exit_bb_seen)\n   return true;\n }\n \n-/* Return true, iff LOOP is if-convertable.\n-   LOOP is if-convertable if,\n+/* Return true, iff LOOP is if-convertible.\n+   LOOP is if-convertible if,\n    - It is innermost.\n    - It has two or more basic blocks.\n    - It has only one exit.\n    - Loop header is not the exit edge.\n-   - If its basic blocks and phi nodes are if convertable. See above for\n+   - If its basic blocks and phi nodes are if convertible. See above for\n      more info.\n    FOR_VECTORIZER enables vectorizer specific checks. For example, support\n    for vector conditions, data dependency checks etc.. (Not implemented yet).  */\n \n static bool\n-if_convertable_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n+if_convertible_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n {\n   tree phi;\n   basic_block bb;\n@@ -579,18 +579,18 @@ if_convertable_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n     {\n       bb = ifc_bbs[i];\n \n-      if (!if_convertable_bb_p (loop, bb, exit_bb_seen))\n+      if (!if_convertible_bb_p (loop, bb, exit_bb_seen))\n \treturn false;\n \n       /* Check statements.  */\n       for (itr = bsi_start (bb); !bsi_end_p (itr); bsi_next (&itr))\n-\tif (!if_convertable_stmt_p (loop, bb, bsi_stmt (itr)))\n+\tif (!if_convertible_stmt_p (loop, bb, bsi_stmt (itr)))\n \t  return false;\n       /* ??? Check data dependency for vectorizer.  */\n \n       /* What about phi nodes ? */\n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\tif (!if_convertable_phi_p (loop, bb, phi))\n+\tif (!if_convertible_phi_p (loop, bb, phi))\n \t  return false;\n \n       if (bb_with_exit_edge_p (bb))"}]}