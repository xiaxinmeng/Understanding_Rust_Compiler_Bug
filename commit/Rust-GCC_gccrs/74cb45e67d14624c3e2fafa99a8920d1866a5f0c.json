{"sha": "74cb45e67d14624c3e2fafa99a8920d1866a5f0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjYjQ1ZTY3ZDE0NjI0YzNlMmZhZmE5OWE4OTIwZDE4NjZhNWYwYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-06T21:48:53Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-06T21:50:45Z"}, "message": "Correct implementation of wi::clz\n\nAs diagnosed with Jakub and Richard in the analysis of PR 102134, the\ncurrent implementation of wi::clz has incorrect/inconsistent behaviour.\nAs mentioned by Richard in comment #7, clz should (always) return zero\nfor negative values, but the current implementation can only return 0\nwhen precision is a multiple of HOST_BITS_PER_WIDE_INT.  The fix is\nsimply to reorder/shuffle the existing tests.\n\n2021-09-06  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* wide-int.cc (wi::clz): Reorder tests to ensure the result\n\tis zero for all negative values.", "tree": {"sha": "977fe2d0546db1f1fffd59e03f7b3db70f09a6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977fe2d0546db1f1fffd59e03f7b3db70f09a6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74cb45e67d14624c3e2fafa99a8920d1866a5f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cb45e67d14624c3e2fafa99a8920d1866a5f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74cb45e67d14624c3e2fafa99a8920d1866a5f0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cb45e67d14624c3e2fafa99a8920d1866a5f0c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc66017c118229a101f0a2c097a9c209f777883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc66017c118229a101f0a2c097a9c209f777883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc66017c118229a101f0a2c097a9c209f777883"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "a142151cdab551336e7847979ede26025720f960", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cb45e67d14624c3e2fafa99a8920d1866a5f0c/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cb45e67d14624c3e2fafa99a8920d1866a5f0c/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=74cb45e67d14624c3e2fafa99a8920d1866a5f0c", "patch": "@@ -2050,6 +2050,10 @@ wi::arshift_large (HOST_WIDE_INT *val, const HOST_WIDE_INT *xval,\n int\n wi::clz (const wide_int_ref &x)\n {\n+  if (x.sign_mask () < 0)\n+    /* The upper bit is set, so there are no leading zeros.  */\n+    return 0;\n+\n   /* Calculate how many bits there above the highest represented block.  */\n   int count = x.precision - x.len * HOST_BITS_PER_WIDE_INT;\n \n@@ -2058,9 +2062,6 @@ wi::clz (const wide_int_ref &x)\n     /* The upper -COUNT bits of HIGH are not part of the value.\n        Clear them out.  */\n     high = (high << -count) >> -count;\n-  else if (x.sign_mask () < 0)\n-    /* The upper bit is set, so there are no leading zeros.  */\n-    return 0;\n \n   /* We don't need to look below HIGH.  Either HIGH is nonzero,\n      or the top bit of the block below is nonzero; clz_hwi is"}]}