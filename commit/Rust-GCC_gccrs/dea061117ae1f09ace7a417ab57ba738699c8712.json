{"sha": "dea061117ae1f09ace7a417ab57ba738699c8712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhMDYxMTE3YWUxZjA5YWNlN2E0MTdhYjU3YmE3Mzg2OTljODcxMg==", "commit": {"author": {"name": "Andrew Senkevich", "email": "andrew.senkevich@intel.com", "date": "2017-01-23T12:52:39Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-01-23T12:52:39Z"}, "message": "Add AVX512 k-mask intrinsics\n\ngcc/\n\t* config/i386/avx512bwintrin.h: Add k-mask test, kortest intrinsics.\n\t* config/i386/avx512dqintrin.h: Ditto.\n\t* config/i386/avx512fintrin.h: Ditto.\n\t* gcc/config/i386/i386.c: Handle new builtins.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/sse.md (ktest<mode>, kortest<mode>): New.\n\t(UNSPEC_KORTEST, UNSPEC_KTEST): New.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512bw-ktestd-1.c: New test.\n\t* gcc.target/i386/avx512bw-ktestq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-ktestb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-ktestw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kortestd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kortestq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kortestb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kortestw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-ktestd-2.c: Ditt\n\t* gcc.target/i386/avx512bw-ktestq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-ktestb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-ktestw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kortestd-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kortestq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-kortestb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-kortestw-2.c: Ditto.\n\nFrom-SVN: r244801", "tree": {"sha": "6b69df3f1c4887e42f14b2c798f3139f963ea63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b69df3f1c4887e42f14b2c798f3139f963ea63a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea061117ae1f09ace7a417ab57ba738699c8712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea061117ae1f09ace7a417ab57ba738699c8712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea061117ae1f09ace7a417ab57ba738699c8712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea061117ae1f09ace7a417ab57ba738699c8712/comments", "author": null, "committer": null, "parents": [{"sha": "050116183b0368ecc4daf8b73d13627de6a11824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050116183b0368ecc4daf8b73d13627de6a11824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050116183b0368ecc4daf8b73d13627de6a11824"}], "stats": {"total": 628, "additions": 599, "deletions": 29}, "files": [{"sha": "b524d4ac17c486470bbae4d6352ffea8b855b8b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -1,3 +1,13 @@\n+2017-01-23  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* config/i386/avx512bwintrin.h: Add k-mask test, kortest intrinsics.\n+\t* config/i386/avx512dqintrin.h: Ditto.\n+\t* config/i386/avx512fintrin.h: Ditto.\n+\t* gcc/config/i386/i386.c: Handle new builtins.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/sse.md (ktest<mode>, kortest<mode>): New.\n+\t(UNSPEC_KORTEST, UNSPEC_KTEST): New.\n+\n 2017-01-23  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Liska  <mliska@suse.cz>\n \n@@ -41,15 +51,15 @@\n \tnow. Remove trailing slash.\n \n 2017-01-22  Gerald Pfeifer  <gerald@pfeifer.com>\n-\t\n+\n \t* README.Portability: Remove note on an Irix compatibility issue.\n \n 2017-01-22  Dimitry Andric <dim@FreeBSD.org>\n \n \t* gcov.c (INCLUDE_ALGORITHM): Define.\n \t(INCLUDE_VECTOR): Define.\n \tNo longer include <vector> and <algorithm> directly.\n-\t\n+\n 2017-01-21  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/extend.texi (Thread-Local): Change www.akkadia.org reference"}, {"sha": "d05eed2cb95d0fbc9cbea4bece5663acd044d1a9", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -40,6 +40,94 @@ typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n \n typedef unsigned long long __mmask64;\n \n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktest_mask32_u8  (__mmask32 __A,  __mmask32 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_ktestcsi (__A, __B);\n+  return (unsigned char) __builtin_ia32_ktestzsi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktest_mask64_u8  (__mmask64 __A,  __mmask64 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_ktestcdi (__A, __B);\n+  return (unsigned char) __builtin_ia32_ktestzdi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestz_mask32_u8 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestzsi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestz_mask64_u8 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestzdi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestc_mask32_u8 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestcsi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestc_mask64_u8 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestcdi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortest_mask32_u8  (__mmask32 __A,  __mmask32 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_kortestcsi (__A, __B);\n+  return (unsigned char) __builtin_ia32_kortestzsi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortest_mask64_u8  (__mmask64 __A,  __mmask64 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_kortestcdi (__A, __B);\n+  return (unsigned char) __builtin_ia32_kortestzdi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestz_mask32_u8 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestzsi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestz_mask64_u8 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestzdi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestc_mask32_u8 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestcsi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestc_mask64_u8 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestcdi (__A, __B);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _kadd_mask32 (__mmask32 __A, __mmask32 __B)"}, {"sha": "670e41e0b94021a5aa6ea0e5e2153953a3c5c4d5", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -34,6 +34,50 @@\n #define __DISABLE_AVX512DQ__\n #endif /* __AVX512DQ__ */\n \n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktest_mask8_u8  (__mmask8 __A,  __mmask8 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_ktestcqi (__A, __B);\n+  return (unsigned char) __builtin_ia32_ktestzqi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestz_mask8_u8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestzqi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestc_mask8_u8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestcqi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortest_mask8_u8  (__mmask8 __A,  __mmask8 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_kortestcqi (__A, __B);\n+  return (unsigned char) __builtin_ia32_kortestzqi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestz_mask8_u8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestzqi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestc_mask8_u8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestcqi (__A, __B);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _kadd_mask8 (__mmask8 __A, __mmask8 __B)"}, {"sha": "6c11453287ac5edb7092aeca962905ccc5ce04c7", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -10006,6 +10006,52 @@ _mm512_maskz_expandloadu_epi32 (__mmask16 __U, void const *__P)\n #define _kxnor_mask16 _mm512_kxnor\n #define _kxor_mask16 _mm512_kxor\n \n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktest_mask16_u8  (__mmask16 __A,  __mmask16 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_ktestchi (__A, __B);\n+  return (unsigned char) __builtin_ia32_ktestzhi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestz_mask16_u8 (__mmask16 __A, __mmask16 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestzhi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_ktestc_mask16_u8 (__mmask16 __A, __mmask16 __B)\n+{\n+  return (unsigned char) __builtin_ia32_ktestchi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortest_mask16_u8  (__mmask16 __A,  __mmask16 __B, unsigned char *__CF)\n+{\n+  *__CF = (unsigned char) __builtin_ia32_kortestchi (__A, __B);\n+  return (unsigned char) __builtin_ia32_kortestzhi (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestz_mask16_u8 (__mmask16 __A, __mmask16 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestzhi ((__mmask16) __A,\n+\t\t\t\t\t\t    (__mmask16) __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kortestc_mask16_u8 (__mmask16 __A, __mmask16 __B)\n+{\n+  return (unsigned char) __builtin_ia32_kortestchi ((__mmask16) __A,\n+\t\t\t\t\t\t    (__mmask16) __B);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _kadd_mask16 (__mmask16 __A, __mmask16 __B)"}, {"sha": "137aa3e10665ec94bafbff73ce1a722234836736", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -1464,8 +1464,23 @@ BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kiorqi, \"__builtin_ia32_korqi\", IX86_B\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kiorhi, \"__builtin_ia32_korhi\", IX86_BUILTIN_KOR16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kiorsi, \"__builtin_ia32_korsi\", IX86_BUILTIN_KOR32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kiordi, \"__builtin_ia32_kordi\", IX86_BUILTIN_KOR64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kortestchi, \"__builtin_ia32_kortestchi\", IX86_BUILTIN_KORTESTC16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kortestzhi, \"__builtin_ia32_kortestzhi\", IX86_BUILTIN_KORTESTZ16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_ktestqi, \"__builtin_ia32_ktestcqi\", IX86_BUILTIN_KTESTC8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_ktestqi, \"__builtin_ia32_ktestzqi\", IX86_BUILTIN_KTESTZ8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_ktesthi, \"__builtin_ia32_ktestchi\", IX86_BUILTIN_KTESTC16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_ktesthi, \"__builtin_ia32_ktestzhi\", IX86_BUILTIN_KTESTZ16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_ktestsi, \"__builtin_ia32_ktestcsi\", IX86_BUILTIN_KTESTC32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_ktestsi, \"__builtin_ia32_ktestzsi\", IX86_BUILTIN_KTESTZ32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_ktestdi, \"__builtin_ia32_ktestcdi\", IX86_BUILTIN_KTESTC64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_ktestdi, \"__builtin_ia32_ktestzdi\", IX86_BUILTIN_KTESTZ64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kortestqi, \"__builtin_ia32_kortestcqi\", IX86_BUILTIN_KORTESTC8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kortestqi, \"__builtin_ia32_kortestzqi\", IX86_BUILTIN_KORTESTZ8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kortesthi, \"__builtin_ia32_kortestchi\", IX86_BUILTIN_KORTESTC16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kortesthi, \"__builtin_ia32_kortestzhi\", IX86_BUILTIN_KORTESTZ16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kortestsi, \"__builtin_ia32_kortestcsi\", IX86_BUILTIN_KORTESTC32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kortestsi, \"__builtin_ia32_kortestzsi\", IX86_BUILTIN_KORTESTZ32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kortestdi, \"__builtin_ia32_kortestcdi\", IX86_BUILTIN_KORTESTC64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kortestdi, \"__builtin_ia32_kortestzdi\", IX86_BUILTIN_KORTESTZ64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kunpckhi, \"__builtin_ia32_kunpckhi\", IX86_BUILTIN_KUNPCKBW, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kxnorqi, \"__builtin_ia32_kxnorqi\", IX86_BUILTIN_KXNOR8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kxnorhi, \"__builtin_ia32_kxnorhi\", IX86_BUILTIN_KXNOR16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)"}, {"sha": "65b32e6da56660eea82e6a2566a4b8da5f67725a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -37642,16 +37642,100 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_pop (gen_rtx_REG (word_mode, FLAGS_REG)));\n       return 0;\n \n+    case IX86_BUILTIN_KTESTC8:\n+      icode = CODE_FOR_ktestqi;\n+      mode0 = QImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTZ8:\n+      icode = CODE_FOR_ktestqi;\n+      mode0 = QImode;\n+      mode1 = CCZmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTC16:\n+      icode = CODE_FOR_ktesthi;\n+      mode0 = HImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTZ16:\n+      icode = CODE_FOR_ktesthi;\n+      mode0 = HImode;\n+      mode1 = CCZmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTC32:\n+      icode = CODE_FOR_ktestsi;\n+      mode0 = SImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTZ32:\n+      icode = CODE_FOR_ktestsi;\n+      mode0 = SImode;\n+      mode1 = CCZmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTC64:\n+      icode = CODE_FOR_ktestdi;\n+      mode0 = DImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KTESTZ64:\n+      icode = CODE_FOR_ktestdi;\n+      mode0 = DImode;\n+      mode1 = CCZmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KORTESTC8:\n+      icode = CODE_FOR_kortestqi;\n+      mode0 = QImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KORTESTZ8:\n+      icode = CODE_FOR_kortestqi;\n+      mode0 = QImode;\n+      mode1 = CCZmode;\n+      goto kortest;\n+\n     case IX86_BUILTIN_KORTESTC16:\n-      icode = CODE_FOR_kortestchi;\n+      icode = CODE_FOR_kortesthi;\n       mode0 = HImode;\n       mode1 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTZ16:\n-      icode = CODE_FOR_kortestzhi;\n+      icode = CODE_FOR_kortesthi;\n       mode0 = HImode;\n       mode1 = CCZmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KORTESTC32:\n+      icode = CODE_FOR_kortestsi;\n+      mode0 = SImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KORTESTZ32:\n+      icode = CODE_FOR_kortestsi;\n+      mode0 = SImode;\n+      mode1 = CCZmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KORTESTC64:\n+      icode = CODE_FOR_kortestdi;\n+      mode0 = DImode;\n+      mode1 = CCCmode;\n+      goto kortest;\n+\n+    case IX86_BUILTIN_KORTESTZ64:\n+      icode = CODE_FOR_kortestdi;\n+      mode0 = DImode;\n+      mode1 = CCZmode;\n \n     kortest:\n       arg0 = CALL_EXPR_ARG (exp, 0); /* Mask reg src1.  */"}, {"sha": "0d074f851a2f0eff1cdfd9a19e37d0d508173275", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -108,6 +108,8 @@\n \n   ;; Mask operations\n   UNSPEC_MASKOP\n+  UNSPEC_KORTEST\n+  UNSPEC_KTEST\n \n   ;; For embed. rounding feature\n   UNSPEC_EMBEDDED_ROUNDING\n@@ -1422,31 +1424,27 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;;There are kortrest[bdq] but no intrinsics for them.\n-;;We probably don't need to implement them.\n-(define_insn \"kortestzhi\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ\n-\t  (ior:HI\n-\t    (match_operand:HI 0 \"register_operand\" \"k\")\n-\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n-\t  (const_int 0)))]\n-  \"TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)\"\n-  \"kortestw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"mode\" \"HI\")\n+(define_insn \"ktest<mode>\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(unspec:CC\n+\t  [(match_operand:SWI1248_AVX512BWDQ 0 \"register_operand\" \"k\")\n+\t   (match_operand:SWI1248_AVX512BWDQ 1 \"register_operand\" \"k\")]\n+\t  UNSPEC_KTEST))]\n+  \"TARGET_AVX512F\"\n+  \"ktest<mskmodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"mode\" \"<MODE>\")\n    (set_attr \"type\" \"msklog\")\n    (set_attr \"prefix\" \"vex\")])\n \n-(define_insn \"kortestchi\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (ior:HI\n-\t    (match_operand:HI 0 \"register_operand\" \"k\")\n-\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n-\t  (const_int -1)))]\n-  \"TARGET_AVX512F && ix86_match_ccmode (insn, CCCmode)\"\n-  \"kortestw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"mode\" \"HI\")\n+(define_insn \"kortest<mode>\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(unspec:CC\n+\t  [(match_operand:SWI1248_AVX512BWDQ 0 \"register_operand\" \"k\")\n+\t   (match_operand:SWI1248_AVX512BWDQ 1 \"register_operand\" \"k\")]\n+\t  UNSPEC_KORTEST))]\n+  \"TARGET_AVX512F\"\n+  \"kortest<mskmodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"mode\" \"<MODE>\")\n    (set_attr \"type\" \"msklog\")\n    (set_attr \"prefix\" \"vex\")])\n "}, {"sha": "d6db7601c8feede0f73eeaf741e42ee5be1ec67b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -1,3 +1,22 @@\n+2017-01-23  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-ktestd-1.c: New test.\n+\t* gcc.target/i386/avx512bw-ktestq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-ktestb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-ktestw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kortestd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kortestq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kortestb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kortestw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-ktestd-2.c: Ditt\n+\t* gcc.target/i386/avx512bw-ktestq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-ktestb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-ktestw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kortestd-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kortestq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kortestb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-kortestw-2.c: Ditto.\n+\n 2017-01-23  Richard Biener  <rguenther@suse.de>\n \t    Nick Clifton  <nickc@redhat.com>\n "}, {"sha": "9d6235c72ee808a7e75f86c1fceed306f41f5494", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kortestd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestd-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"kortestd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask32 k1;\n+  __mmask32 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _kortestc_mask32_u8(k1, k2);\n+  r = _kortestz_mask32_u8(k1, k2);\n+}"}, {"sha": "741bbbfca6a36ce8fca90b972a69d5262696273f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kortestd-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestd-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  volatile __mmask32 k1, k2;\n+  unsigned char r1, r2;\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (-1) );\n+\n+  r1 = _kortest_mask32_u8(k1, k2, &r2);\n+\n+  if ( r1 != 0 || r2 != 1 )\n+    abort ();\n+}"}, {"sha": "7f2761873ea66cfd99ee6eb86b5f5fda9a28ea73", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kortestq-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestq-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"kortestq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask64 k1;\n+  __mmask64 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _kortestc_mask64_u8(k1, k2);\n+  r = _kortestz_mask64_u8(k1, k2);\n+}"}, {"sha": "9efaac22ec24ffc0782b3dc74b3e00dd55373295", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kortestq-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kortestq-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2;\n+  unsigned char r1, r2;\n+\n+  k1 = _cvtu64_mask64(0);\n+  k2 = _cvtu64_mask64(-1);\n+\n+  r1 = _kortest_mask64_u8(k1, k2, &r2);\n+\n+  if (r1 != 0 || r2 != 1)\n+    abort ();\n+}"}, {"sha": "56d3c4aad0b0ffed1c3cbe3023d743baade3086c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-ktestd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestd-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"ktestd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask32 k1;\n+  __mmask32 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _ktestc_mask32_u8(k1, k2);\n+  r = _ktestz_mask32_u8(k1, k2);\n+}"}, {"sha": "d931f0a2e0841c1f5c6f5e4e063dcee3f3b46fc6", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-ktestd-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestd-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  volatile __mmask32 k1, k2;\n+  unsigned char r1, r2;\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (-1) );\n+\n+  r1 = _ktest_mask32_u8(k1, k2, &r2);\n+\n+  if (r1 != 1 || r2 != 0)\n+    abort ();\n+}"}, {"sha": "3d9113265066b21b9e364726aaa8d696f58e52b3", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-ktestq-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestq-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"ktestq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask64 k1;\n+  __mmask64 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _ktestc_mask64_u8(k1, k2);\n+  r = _ktestz_mask64_u8(k1, k2);\n+}"}, {"sha": "518d829837bfb974c999e8d36738ec92fa1cd34a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-ktestq-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-ktestq-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2;\n+  unsigned char r1, r2;\n+\n+  k1 = _cvtu64_mask64(0);\n+  k2 = _cvtu64_mask64(-1);\n+\n+  r1 = _ktest_mask64_u8(k1, k2, &r2);\n+\n+  if (r1 != 1 || r2 != 0)\n+    abort ();\n+}"}, {"sha": "b743d604fa1f3598ab54b948e895fd01cfdbbc67", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kortestb-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kortestb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kortestb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kortestb-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512dq\" } */\n+/* { dg-final { scan-assembler-times \"kortestb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test () {\n+  volatile __mmask8 k1;\n+  __mmask8 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _kortestc_mask8_u8(k1, k2);\n+  r = _kortestz_mask8_u8(k1, k2);\n+}"}, {"sha": "b71346abd2ef948e9f6b9bd717cd99b8113e83b3", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kortestb-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kortestb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kortestb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kortestb-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512dq-check.h\"\n+\n+void\n+avx512dq_test ()\n+{\n+  volatile __mmask8 k1, k2;\n+  unsigned char r1, r2;\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (-1) );\n+\n+  r1 = _kortest_mask8_u8(k1, k2, &r2);\n+\n+  if (r1 != 0 || r2 != 1)\n+    abort ();\n+}"}, {"sha": "4e13fd0539cd54659911de63455b0b1033c66387", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-ktestb-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-ktestb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-ktestb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-ktestb-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512dq\" } */\n+/* { dg-final { scan-assembler-times \"ktestb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test () {\n+  volatile __mmask8 k1;\n+  __mmask8 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _ktestc_mask8_u8(k1, k2);\n+  r = _ktestz_mask8_u8(k1, k2);\n+}"}, {"sha": "0c6e7c0ac6bae35207804174a94110a567907beb", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-ktestb-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-ktestb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-ktestb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-ktestb-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512dq-check.h\"\n+\n+void\n+avx512dq_test ()\n+{\n+  volatile __mmask8 k1, k2;\n+  unsigned char r1, r2;\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (-1) );\n+\n+  r1 = _ktest_mask8_u8(k1, k2, &r2);\n+\n+  if (r1 != 1 || r2 != 0)\n+    abort ();\n+}"}, {"sha": "7084ada8c6198624107ad1916ed4075034102542", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kortestw-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -mavx512f\" } */\n-/* { dg-final { scan-assembler-times \"kortestw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+/* { dg-final { scan-assembler-times \"kortestw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 6 } } */\n \n #include <immintrin.h>\n \n@@ -19,4 +19,9 @@ avx512f_test () {\n \n   r = _mm512_kortestc (k3, k4);\n   r = _mm512_kortestz (k3, k4);\n+\n+  volatile unsigned char r1 __attribute__((unused));\t\n+\n+  r1 = _kortestc_mask16_u8(k1, k2);\n+  r1 = _kortestz_mask16_u8(k1, k2);\n }"}, {"sha": "d2a56e4893c1f4823a3aa90704aa1ddb9a4fa982", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kortestw-2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -9,6 +9,8 @@ avx512f_test () {\n   volatile __mmask16 k1;\n   __mmask16 k2;\n   volatile short r = 0;\n+  volatile unsigned char r1 = 0;\n+  unsigned char r2;\n \n   /* Test kortestc.  */\n   __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n@@ -50,4 +52,11 @@ avx512f_test () {\n   r += _mm512_kortestz (k1, k2);\n   if (!r)\n     abort ();\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (-1) );\n+\n+  r1 = _kortest_mask16_u8 (k1, k2, &r2);\n+  if (r1 != 0 || r2 != 1)\n+    abort ();\n }"}, {"sha": "f6151d1671d231438af59ecdf46f6d900d1b8c19", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ktestw-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ktestw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ktestw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ktestw-1.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"ktestw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test () {\n+  volatile __mmask16 k1;\n+  __mmask16 k2;\n+\n+  volatile unsigned char r __attribute__((unused));\t\n+\n+  r = _ktestc_mask16_u8(k1, k2);\n+  r = _ktestz_mask16_u8(k1, k2);\n+}"}, {"sha": "6602c7a157441a1f9db9f99b445fc7794816f7d7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ktestw-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ktestw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea061117ae1f09ace7a417ab57ba738699c8712/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ktestw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ktestw-2.c?ref=dea061117ae1f09ace7a417ab57ba738699c8712", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void\n+avx512f_test ()\n+{\n+  volatile __mmask16 k1, k2;\n+  unsigned char r1, r2;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (-1) );\n+\n+  r1 = _ktest_mask16_u8(k1, k2, &r2);\n+\n+  if (r1 != 1 || r2 != 0)\n+    abort ();\n+}"}]}