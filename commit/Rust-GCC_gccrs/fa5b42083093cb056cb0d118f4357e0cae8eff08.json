{"sha": "fa5b42083093cb056cb0d118f4357e0cae8eff08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1YjQyMDgzMDkzY2IwNTZjYjBkMTE4ZjQzNTdlMGNhZThlZmYwOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-02T13:25:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-02T13:25:33Z"}, "message": "(jmp_uses_reg_or_mem): Renamed from uses_reg_or_mem.\n\nDon't look into condition of an IF_THEN_ELSE; also make faster.\n\nFrom-SVN: r11158", "tree": {"sha": "45864a98a3c2e410ed9cbe15a8d008e3f7cac80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45864a98a3c2e410ed9cbe15a8d008e3f7cac80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5b42083093cb056cb0d118f4357e0cae8eff08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5b42083093cb056cb0d118f4357e0cae8eff08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5b42083093cb056cb0d118f4357e0cae8eff08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5b42083093cb056cb0d118f4357e0cae8eff08/comments", "author": null, "committer": null, "parents": [{"sha": "a3aafe2b38340149d1efd7500cf3c3b92c9550ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3aafe2b38340149d1efd7500cf3c3b92c9550ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3aafe2b38340149d1efd7500cf3c3b92c9550ac"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "7811178fdc9026d3e725e24913210a7a9ac4c3e0", "filename": "gcc/flow.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5b42083093cb056cb0d118f4357e0cae8eff08/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5b42083093cb056cb0d118f4357e0cae8eff08/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=fa5b42083093cb056cb0d118f4357e0cae8eff08", "patch": "@@ -1,5 +1,5 @@\n /* Data flow analysis for GNU compiler.\n-   Copyright (C) 1987, 88, 92, 93, 94, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -287,7 +287,7 @@ static HARD_REG_SET elim_reg_set;\n \n /* Forward declarations */\n static void find_basic_blocks\t\tPROTO((rtx, rtx));\n-static int uses_reg_or_mem\t\tPROTO((rtx));\n+static int jmp_uses_reg_or_mem\t\tPROTO((rtx));\n static void mark_label_ref\t\tPROTO((rtx, rtx, int));\n static void life_analysis\t\tPROTO((rtx, int));\n void allocate_for_life_analysis\t\tPROTO((void));\n@@ -553,12 +553,12 @@ find_basic_blocks (f, nonlocal_label_list)\n \t\t  for (i = len - 1; i >= 0; i--)\n \t\t    if (GET_CODE (XVECEXP (pat, 0, i)) == SET\n \t\t\t&& SET_DEST (XVECEXP (pat, 0, i)) == pc_rtx\n-\t\t\t&& uses_reg_or_mem (SET_SRC (XVECEXP (pat, 0, i))))\n+\t\t\t&& jmp_uses_reg_or_mem (SET_SRC (XVECEXP (pat, 0, i))))\n \t\t      computed_jump = 1;\n \t      }\n \t    else if (GET_CODE (pat) == SET\n \t\t     && SET_DEST (pat) == pc_rtx\n-\t\t     && uses_reg_or_mem (SET_SRC (pat)))\n+\t\t     && jmp_uses_reg_or_mem (SET_SRC (pat)))\n \t      computed_jump = 1;\n \t\t    \n \t    if (computed_jump)\n@@ -759,32 +759,50 @@ find_basic_blocks (f, nonlocal_label_list)\n \f\n /* Subroutines of find_basic_blocks.  */\n \n-/* Return 1 if X contain a REG or MEM that is not in the constant pool.  */\n+/* Return 1 if X, the SRC_SRC of  SET of (pc) contain a REG or MEM that is\n+   not in the constant pool and not in the condition of an IF_THEN_ELSE.  */\n \n static int\n-uses_reg_or_mem (x)\n+jmp_uses_reg_or_mem (x)\n      rtx x;\n {\n   enum rtx_code code = GET_CODE (x);\n   int i, j;\n   char *fmt;\n \n-  if (code == REG\n-      || (code == MEM\n-\t  && ! (GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n-\t\t&& CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)))))\n-    return 1;\n+  switch (code)\n+    {\n+    case CONST:\n+    case LABEL_REF:\n+    case PC:\n+      return 0;\n+\n+    case REG:\n+      return 1;\n+\n+    case MEM:\n+      return ! (GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n+\t\t&& CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)));\n+\n+    case IF_THEN_ELSE:\n+      return (jmp_uses_reg_or_mem (XEXP (x, 1))\n+\t      || jmp_uses_reg_or_mem (XEXP (x, 2)));\n+\n+    case PLUS:  case MINUS:  case MULT:\n+      return (jmp_uses_reg_or_mem (XEXP (x, 0))\n+\t      || jmp_uses_reg_or_mem (XEXP (x, 1)));\n+    }\n \n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e'\n-\t  && uses_reg_or_mem (XEXP (x, i)))\n+\t  && jmp_uses_reg_or_mem (XEXP (x, i)))\n \treturn 1;\n \n       if (fmt[i] == 'E')\n \tfor (j = 0; j < XVECLEN (x, i); j++)\n-\t  if (uses_reg_or_mem (XVECEXP (x, i, j)))\n+\t  if (jmp_uses_reg_or_mem (XVECEXP (x, i, j)))\n \t    return 1;\n     }\n "}]}