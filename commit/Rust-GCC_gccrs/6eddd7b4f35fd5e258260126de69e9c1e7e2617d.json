{"sha": "6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkZGQ3YjRmMzVmZDVlMjU4MjYwMTI2ZGU2OWU5YzFlN2UyNjE3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:58:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:58:43Z"}, "message": "[multiple changes]\n\n2012-03-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Process_Formals): a generic subprogram with\n\ta formal incomplete type does not require a freeze node.\n\n2012-03-07  Bob Duff  <duff@adacore.com>\n\n\t* sem_util.ads: Minor reformatting.\n\n2012-03-07  Geert Bosch  <bosch@adacore.com>\n\n\t* targparm.ads: New target parameter Atomic_Sync_Default,\n\tdefaulting to True.\n\t* targparm.adb (Get_Target_Parameters): Add processing for\n\tAtomic_Sync_Default.\n\t* gnat1drv.adb (Adjust_Global_Switches): Adjust Supress_Options\n\tbased on ASD.\n\nFrom-SVN: r185056", "tree": {"sha": "50beb99d31b658b397856787bdf8f11e39a18263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50beb99d31b658b397856787bdf8f11e39a18263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/comments", "author": null, "committer": null, "parents": [{"sha": "84f4072a8e1097b05597a62fb96f28f9c48f868a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f4072a8e1097b05597a62fb96f28f9c48f868a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f4072a8e1097b05597a62fb96f28f9c48f868a"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "46068b71cd675809a34dee9bacdd335670956bad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "patch": "@@ -1,3 +1,21 @@\n+2012-03-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Process_Formals): a generic subprogram with\n+\ta formal incomplete type does not require a freeze node.\n+\n+2012-03-07  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.ads: Minor reformatting.\n+\n+2012-03-07  Geert Bosch  <bosch@adacore.com>\n+\n+\t* targparm.ads: New target parameter Atomic_Sync_Default,\n+\tdefaulting to True.\n+\t* targparm.adb (Get_Target_Parameters): Add processing for\n+\tAtomic_Sync_Default.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Adjust Supress_Options\n+\tbased on ASD.\n+\n 2012-03-07  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): If the object"}, {"sha": "7d96468e5f415c0a09fbc42b7883982dfa9c6450", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "patch": "@@ -345,6 +345,13 @@ procedure Gnat1drv is\n          Suppress_Options (Overflow_Check) := True;\n       end if;\n \n+      --  Set default for atomic synchronization. As this synchronization\n+      --  between atomic accesses can be expensive, and not typically needed\n+      --  on some targets, an optional target parameter can turn the option\n+      --  off. Note Atomic Synchronization is implemented as check.\n+\n+      Suppress_Options (Atomic_Synchronization) := not Atomic_Sync_Default;\n+\n       --  Set switch indicating if we can use N_Expression_With_Actions\n \n       --  Debug flag -gnatd.X decisively sets usage on"}, {"sha": "09d7597c16d3b7f56596007536f64b8df6e68eda", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "patch": "@@ -10592,9 +10592,15 @@ package body Sem_Ch6 is\n                --  Check is done on package exit. For access to subprograms,\n                --  the use is legal for Taft-amendment types.\n \n+               --  Ada 2012: tagged incomplete types are allowed as generic\n+               --  formal types. They do not introduce dependencies and the\n+               --  corresponding generic subprogram does not have a delayed\n+               --  freeze, because it does not need a freeze node.\n+\n                if Is_Tagged_Type (Formal_Type) then\n                   if Ekind (Scope (Current_Scope)) = E_Package\n                     and then not From_With_Type (Formal_Type)\n+                    and then not Is_Generic_Type (Formal_Type)\n                     and then not Is_Class_Wide_Type (Formal_Type)\n                   then\n                      if not Nkind_In"}, {"sha": "8d3138662dedcf1847541b5c914962bc708e7a01", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "patch": "@@ -1094,7 +1094,7 @@ package Sem_Util is\n    --  and the one in Nmake are both potentially use-visible, it will cause\n    --  a compilation error. Note that type and value are irrelevant.\n \n-   N_Return_Statement : constant := -2**33;\n+   N_Return_Statement : constant := -2 ** 33;\n    --  Attempt to prevent accidental uses of N_Return_Statement; similar to\n    --  Make_Return_Statement above.\n "}, {"sha": "193858ac89823685550e7a72eb072535e6c23561", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,6 +40,7 @@ package body Targparm is\n    type Targparm_Tags is\n      (AAM,  --   AAMP\n       ACR,  --   Always_Compatible_Rep\n+      ASD,  --   Atomic_Sync_Default\n       BDC,  --   Backend_Divide_Checks\n       BOC,  --   Backend_Overflow_Checks\n       CLA,  --   Command_Line_Args\n@@ -75,6 +76,7 @@ package body Targparm is\n \n    AAM_Str : aliased constant Source_Buffer := \"AAMP\";\n    ACR_Str : aliased constant Source_Buffer := \"Always_Compatible_Rep\";\n+   ASD_Str : aliased constant Source_Buffer := \"Atomic_Sync_Default\";\n    BDC_Str : aliased constant Source_Buffer := \"Backend_Divide_Checks\";\n    BOC_Str : aliased constant Source_Buffer := \"Backend_Overflow_Checks\";\n    CLA_Str : aliased constant Source_Buffer := \"Command_Line_Args\";\n@@ -110,6 +112,7 @@ package body Targparm is\n    Targparm_Str : constant array (Targparm_Tags) of Buffer_Ptr :=\n      (AAM_Str'Access,\n       ACR_Str'Access,\n+      ASD_Str'Access,\n       BDC_Str'Access,\n       BOC_Str'Access,\n       CLA_Str'Access,\n@@ -548,6 +551,7 @@ package body Targparm is\n                   case K is\n                      when AAM => AAMP_On_Target                      := Result;\n                      when ACR => Always_Compatible_Rep_On_Target     := Result;\n+                     when ASD => Atomic_Sync_Default                 := Result;\n                      when BDC => Backend_Divide_Checks_On_Target     := Result;\n                      when BOC => Backend_Overflow_Checks_On_Target   := Result;\n                      when CLA => Command_Line_Args_On_Target         := Result;\n@@ -556,6 +560,10 @@ package body Targparm is\n                            VM_Target := CLI_Target;\n                            Tagged_Type_Expansion := False;\n                         end if;\n+                        --  This is wrong, this processing should be done in\n+                        --  Gnat1drv.Adjust_Global_Switches. It is not the\n+                        --  right level for targparm to know about tagged\n+                        --  type extension???\n \n                      when CRT => Configurable_Run_Time_On_Target     := Result;\n                      when D32 => Duration_32_Bits_On_Target          := Result;\n@@ -568,6 +576,10 @@ package body Targparm is\n                            VM_Target := JVM_Target;\n                            Tagged_Type_Expansion := False;\n                         end if;\n+                        --  This is wrong, this processing should be done in\n+                        --  Gnat1drv.Adjust_Global_Switches. It is not the\n+                        --  right level for targparm to know about tagged\n+                        --  type extension???\n \n                      when MOV => Machine_Overflows_On_Target         := Result;\n                      when MRN => Machine_Rounds_On_Target            := Result;"}, {"sha": "be1c9af021807a88f96e0d12a0c926b9cfea3f51", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eddd7b4f35fd5e258260126de69e9c1e7e2617d/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=6eddd7b4f35fd5e258260126de69e9c1e7e2617d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -388,6 +388,19 @@ package Targparm is\n    --  used at the source level, and the corresponding flag is false, then an\n    --  error message will be issued saying the feature is not supported.\n \n+   Atomic_Sync_Default : Boolean := True;\n+   --  Access to atomic variables requires memory barrier synchronization in\n+   --  the general case to ensure proper behavior when such accesses are used\n+   --  on a multi-processor to synchronize tasks (e.g. by using spin locks).\n+   --  The setting of this flag determines the default behavior. Normally this\n+   --  is True, which will mean that appropriate synchronization instructions\n+   --  are generated by default. If it is False, then the default will be that\n+   --  these synchronization instructions are not generated. This may be a more\n+   --  appropriate default in some cases, e.g. on embedded targets which do not\n+   --  allow the possibility of multi-processors. The default can be overridden\n+   --  using pragmas Enable/Disable_Atomic_Synchronization and also by use of\n+   --  the debug flags gnat.d and gnatd.e.\n+\n    Support_Aggregates_On_Target : Boolean := True;\n    --  In the general case, the use of aggregates may generate calls\n    --  to run-time routines in the C library, including memset, memcpy,"}]}