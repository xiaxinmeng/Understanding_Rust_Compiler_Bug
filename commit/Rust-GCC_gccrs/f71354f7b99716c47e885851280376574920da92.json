{"sha": "f71354f7b99716c47e885851280376574920da92", "node_id": "C_kwDOANBUbNoAKGY3MTM1NGY3Yjk5NzE2YzQ3ZTg4NTg1MTI4MDM3NjU3NDkyMGRhOTI", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-20T17:51:52Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-20T17:51:52Z"}, "message": "PR-108135 Modula2 meets clang (remove dead code and bugfix m2.flex)\n\nThese patches fix warnings (and a bug) discovered by clang. The\npatch set looks longer than the changes as pge and mc needed to be\nrebuilt (due to a change in the gcc/m2/gm2-libs/DynamicString.mod\nlibrary).\n\ngcc/m2/ChangeLog:\n\n\t* gm2-gcc/m2statement.cc (gm2_gimplify_function_node):\n\tRemove.\n\t* gm2-libs/DynamicStrings.mod (Equal): Remove dead code.\n\t* m2.flex (<COMMENT>\"<*\"): Add {} for else statement.\n\t* m2pp.cc (hextree): Add conditional #ifdef DEBUGGING.\n\t* mc-boot/GDynamicStrings.c: Rebuild.\n\t* pge-boot/GDynamicStrings.c: Rebuild.\n\t* pge-boot/GFIO.c: Rebuild.\n\t* pge-boot/GIndexing.c: Rebuild.\n\t* pge-boot/GM2EXCEPTION.c: Rebuild.\n\t* pge-boot/GM2RTS.c: Rebuild.\n\t* pge-boot/GNameKey.c: Rebuild.\n\t* pge-boot/GPushBackInput.c: Rebuild.\n\t* pge-boot/GRTExceptions.c: Rebuild.\n\t* pge-boot/GStdIO.c: Rebuild.\n\t* pge-boot/GSymbolKey.c: Rebuild.\n\t* pge-boot/GSysStorage.c: Rebuild.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "b915d6d7ca04dd0d51b61c76d1c87e915e2cc2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b915d6d7ca04dd0d51b61c76d1c87e915e2cc2c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71354f7b99716c47e885851280376574920da92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71354f7b99716c47e885851280376574920da92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71354f7b99716c47e885851280376574920da92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71354f7b99716c47e885851280376574920da92/comments", "author": null, "committer": null, "parents": [{"sha": "99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b"}], "stats": {"total": 295, "additions": 164, "deletions": 131}, "files": [{"sha": "c3307db23beb285c2c54cccc09511616740d1661", "filename": "gcc/m2/gm2-gcc/m2statement.cc", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fgm2-gcc%2Fm2statement.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fgm2-gcc%2Fm2statement.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2statement.cc?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -84,23 +84,6 @@ m2statement_BuildStartFunctionCode (location_t location, tree fndecl,\n   DECL_DECLARED_INLINE_P (fndecl) = 0; /* isinline;  */\n }\n \n-static void\n-gm2_gimplify_function_node (tree fndecl)\n-{\n-  /* Convert all nested functions to GIMPLE now.  We do things in this\n-     order so that items like VLA sizes are expanded properly in the\n-     context of the correct function.  */\n-  struct cgraph_node *cgn;\n-\n-  dump_function (TDI_original, fndecl);\n-  gimplify_function_tree (fndecl);\n-\n-  cgn = cgraph_node::get_create (fndecl);\n-  for (cgn = first_nested_function (cgn);\n-       cgn != NULL; cgn = next_nested_function (cgn))\n-    gm2_gimplify_function_node (cgn->decl);\n-}\n-\n /* BuildEndFunctionCode - generates the function epilogue.  */\n \n void"}, {"sha": "a109e7a33c9f8afd47908c4a63c2be97c881ba45", "filename": "gcc/m2/gm2-libs/DynamicStrings.mod", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fgm2-libs%2FDynamicStrings.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fgm2-libs%2FDynamicStrings.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs%2FDynamicStrings.mod?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -1215,14 +1215,6 @@ BEGIN\n          i := 0 ;\n          Assert (a^.contents.len = b^.contents.len) ;\n          WHILE i<a^.contents.len DO\n-            IF a^.contents.buf[i] # a^.contents.buf[i]\n-            THEN\n-               HALT\n-            END ;\n-            IF b^.contents.buf[i] # b^.contents.buf[i]\n-            THEN\n-               HALT\n-            END ;\n             IF a^.contents.buf[i] # b^.contents.buf[i]\n             THEN\n                RETURN FALSE"}, {"sha": "15f3caf900adbca4f2590db35c5e1adc2a07bd41", "filename": "gcc/m2/m2.flex", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fm2.flex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fm2.flex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fm2.flex?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -131,8 +131,9 @@ extern  void  yylex                   (void);\n                                pushLine();\n                                skippos();\n                                BEGIN COMMENT1;\n-                             } else\n+                             } else {\n                                updatepos(); skippos();\n+\t\t\t     }\n                            }\n <COMMENT>\\n.*              { consumeLine(); }\n <COMMENT>.                 { updatepos(); skippos(); }"}, {"sha": "3f4518074c8b84b9bbfed821c54a8edfff80f1aa", "filename": "gcc/m2/m2pp.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fm2pp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fm2pp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fm2pp.cc?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -547,6 +547,7 @@ m2pp_types (pretty *s)\n     }\n }\n \n+#ifdef DEBUGGING\n /* hextree displays the critical fields for function, block and\n    bind_expr trees in raw hex.  */\n \n@@ -607,6 +608,7 @@ hextree (tree t)\n       killPretty (state);\n     }\n }\n+#endif\n \n /* translation produce a pseudo implementation module from the tree t.  */\n "}, {"sha": "a28b641c47a13083296ff5e6d1ec25bfa233d9b4", "filename": "gcc/m2/mc-boot/GDynamicStrings.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fmc-boot%2FGDynamicStrings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fmc-boot%2FGDynamicStrings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGDynamicStrings.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -1874,16 +1874,6 @@ extern \"C\" unsigned int DynamicStrings_Equal (DynamicStrings_String a, DynamicSt\n           Assertion_Assert (a->contents.len == b->contents.len);\n           while (i < a->contents.len)\n             {\n-              if (a->contents.buf.array[i] != a->contents.buf.array[i])\n-                {\n-                  M2RTS_HALT (-1);\n-                  __builtin_unreachable ();\n-                }\n-              if (b->contents.buf.array[i] != b->contents.buf.array[i])\n-                {\n-                  M2RTS_HALT (-1);\n-                  __builtin_unreachable ();\n-                }\n               if (a->contents.buf.array[i] != b->contents.buf.array[i])\n                 {\n                   return FALSE;\n@@ -1920,7 +1910,7 @@ extern \"C\" unsigned int DynamicStrings_EqualCharStar (DynamicStrings_String s, v\n   t = DynamicStrings_InitStringCharStar (a);\n   if (TraceOn)\n     {\n-      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1258, (const char *) \"EqualCharStar\", 13);\n+      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1250, (const char *) \"EqualCharStar\", 13);\n     }\n   t = AddToGarbage (t, s);\n   if (DynamicStrings_Equal (t, s))\n@@ -1958,7 +1948,7 @@ extern \"C\" unsigned int DynamicStrings_EqualArray (DynamicStrings_String s, cons\n   t = DynamicStrings_InitString ((const char *) a, _a_high);\n   if (TraceOn)\n     {\n-      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1288, (const char *) \"EqualArray\", 10);\n+      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1280, (const char *) \"EqualArray\", 10);\n     }\n   t = AddToGarbage (t, s);\n   if (DynamicStrings_Equal (t, s))\n@@ -1996,7 +1986,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Mult (DynamicStrings_String s, u\n     }\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1320, (const char *) \"Mult\", 4);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1312, (const char *) \"Mult\", 4);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2075,7 +2065,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Slice (DynamicStrings_String s,\n                       AddDebugInfo (t->contents.next);\n                       if (TraceOn)\n                         {\n-                          t->contents.next = AssignDebug (t->contents.next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1388, (const char *) \"Slice\", 5);\n+                          t->contents.next = AssignDebug (t->contents.next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1380, (const char *) \"Slice\", 5);\n                         }\n                     }\n                   t = t->contents.next;\n@@ -2093,7 +2083,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Slice (DynamicStrings_String s,\n     }\n   if (TraceOn)\n     {\n-      d = AssignDebug (d, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1405, (const char *) \"Slice\", 5);\n+      d = AssignDebug (d, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1397, (const char *) \"Slice\", 5);\n     }\n   return d;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2221,7 +2211,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveComment (DynamicStrings_St\n     }\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1517, (const char *) \"RemoveComment\", 13);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1509, (const char *) \"RemoveComment\", 13);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2246,7 +2236,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveWhitePrefix (DynamicString\n   s = DynamicStrings_Slice (s, (int ) (i), 0);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1629, (const char *) \"RemoveWhitePrefix\", 17);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1621, (const char *) \"RemoveWhitePrefix\", 17);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2271,7 +2261,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveWhitePostfix (DynamicStrin\n   s = DynamicStrings_Slice (s, 0, i+1);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1651, (const char *) \"RemoveWhitePostfix\", 18);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1643, (const char *) \"RemoveWhitePostfix\", 18);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */"}, {"sha": "7507eca9055a61daace9ad31da3dc3657d088229", "filename": "gcc/m2/pge-boot/GDynamicStrings.c", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGDynamicStrings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGDynamicStrings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGDynamicStrings.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -1217,7 +1217,7 @@ static void ConcatContents (DynamicStrings_Contents *c, const char *a_, unsigned\n       (*c).next->contents.next = NULL;\n       ConcatContents (&(*c).next->contents, (const char *) a, _a_high, h, o);\n       AddDebugInfo ((*c).next);\n-      (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 722, (const char *) \"ConcatContents\", 14);\n+      (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 722, (const char *) \"ConcatContents\", 14);\n     }\n   else\n     {\n@@ -1315,7 +1315,7 @@ static void ConcatContentsAddress (DynamicStrings_Contents *c, void * a, unsigne\n       AddDebugInfo ((*c).next);\n       if (TraceOn)\n         {\n-          (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 917, (const char *) \"ConcatContentsAddress\", 21);\n+          (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 917, (const char *) \"ConcatContentsAddress\", 21);\n         }\n     }\n   else\n@@ -1540,7 +1540,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_InitString (const char *a_, unsi\n   AddDebugInfo (s);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 758, (const char *) \"InitString\", 10);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 758, (const char *) \"InitString\", 10);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1643,7 +1643,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_InitStringCharStar (void * a)\n   AddDebugInfo (s);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 957, (const char *) \"InitStringCharStar\", 18);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 957, (const char *) \"InitStringCharStar\", 18);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1668,7 +1668,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_InitStringChar (char ch)\n   s = DynamicStrings_InitString ((const char *) &a.array[0], 1);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 977, (const char *) \"InitStringChar\", 14);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 977, (const char *) \"InitStringChar\", 14);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1826,7 +1826,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Dup (DynamicStrings_String s)\n   s = DynamicStrings_Assign (DynamicStrings_InitString ((const char *) \"\", 0), s);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1173, (const char *) \"Dup\", 3);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1173, (const char *) \"Dup\", 3);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1848,7 +1848,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Add (DynamicStrings_String a, Dy\n   a = DynamicStrings_ConCat (DynamicStrings_ConCat (DynamicStrings_InitString ((const char *) \"\", 0), a), b);\n   if (TraceOn)\n     {\n-      a = AssignDebug (a, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1193, (const char *) \"Add\", 3);\n+      a = AssignDebug (a, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1193, (const char *) \"Add\", 3);\n     }\n   return a;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1877,16 +1877,6 @@ extern \"C\" unsigned int DynamicStrings_Equal (DynamicStrings_String a, DynamicSt\n           Assertion_Assert (a->contents.len == b->contents.len);\n           while (i < a->contents.len)\n             {\n-              if (a->contents.buf.array[i] != a->contents.buf.array[i])\n-                {\n-                  M2RTS_HALT (-1);\n-                  __builtin_unreachable ();\n-                }\n-              if (b->contents.buf.array[i] != b->contents.buf.array[i])\n-                {\n-                  M2RTS_HALT (-1);\n-                  __builtin_unreachable ();\n-                }\n               if (a->contents.buf.array[i] != b->contents.buf.array[i])\n                 {\n                   return FALSE;\n@@ -1923,7 +1913,7 @@ extern \"C\" unsigned int DynamicStrings_EqualCharStar (DynamicStrings_String s, v\n   t = DynamicStrings_InitStringCharStar (a);\n   if (TraceOn)\n     {\n-      t = AssignDebug (t, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1258, (const char *) \"EqualCharStar\", 13);\n+      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1250, (const char *) \"EqualCharStar\", 13);\n     }\n   t = AddToGarbage (t, s);\n   if (DynamicStrings_Equal (t, s))\n@@ -1961,7 +1951,7 @@ extern \"C\" unsigned int DynamicStrings_EqualArray (DynamicStrings_String s, cons\n   t = DynamicStrings_InitString ((const char *) a, _a_high);\n   if (TraceOn)\n     {\n-      t = AssignDebug (t, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1288, (const char *) \"EqualArray\", 10);\n+      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1280, (const char *) \"EqualArray\", 10);\n     }\n   t = AddToGarbage (t, s);\n   if (DynamicStrings_Equal (t, s))\n@@ -1999,7 +1989,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Mult (DynamicStrings_String s, u\n     }\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1320, (const char *) \"Mult\", 4);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1312, (const char *) \"Mult\", 4);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2078,7 +2068,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Slice (DynamicStrings_String s,\n                       AddDebugInfo (t->contents.next);\n                       if (TraceOn)\n                         {\n-                          t->contents.next = AssignDebug (t->contents.next, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1388, (const char *) \"Slice\", 5);\n+                          t->contents.next = AssignDebug (t->contents.next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1380, (const char *) \"Slice\", 5);\n                         }\n                     }\n                   t = t->contents.next;\n@@ -2096,7 +2086,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Slice (DynamicStrings_String s,\n     }\n   if (TraceOn)\n     {\n-      d = AssignDebug (d, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1405, (const char *) \"Slice\", 5);\n+      d = AssignDebug (d, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1397, (const char *) \"Slice\", 5);\n     }\n   return d;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2224,7 +2214,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveComment (DynamicStrings_St\n     }\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1517, (const char *) \"RemoveComment\", 13);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1509, (const char *) \"RemoveComment\", 13);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2249,7 +2239,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveWhitePrefix (DynamicString\n   s = DynamicStrings_Slice (s, (int ) (i), 0);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1629, (const char *) \"RemoveWhitePrefix\", 17);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1621, (const char *) \"RemoveWhitePrefix\", 17);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2274,7 +2264,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveWhitePostfix (DynamicStrin\n   s = DynamicStrings_Slice (s, 0, i+1);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1651, (const char *) \"RemoveWhitePostfix\", 18);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1643, (const char *) \"RemoveWhitePostfix\", 18);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2643,7 +2633,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_PopAllocationExemption (unsigned\n         {\n           stop ();\n           /* writeString (\"mismatched number of PopAllocation's compared to PushAllocation's\")  */\n-          M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 176, (const char *) \"PopAllocationExemption\", 22, (const char *) \"mismatched number of PopAllocation's compared to PushAllocation's\", 65);\n+          M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 176, (const char *) \"PopAllocationExemption\", 22, (const char *) \"mismatched number of PopAllocation's compared to PushAllocation's\", 65);\n         }\n       else\n         {"}, {"sha": "adcbae3567bac99c2541ca72d9443ba64bedc604", "filename": "gcc/m2/pge-boot/GFIO.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGFIO.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGFIO.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGFIO.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -558,7 +558,7 @@ static FIO_File GetNextFreeDescriptor (void)\n         return f;  /* create new slot  */\n       }\n   }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -2269,7 +2269,7 @@ extern \"C\" void * FIO_getFileName (FIO_File f)\n           return fd->name.address;\n         }\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -2296,7 +2296,7 @@ extern \"C\" unsigned int FIO_getFileNameLength (FIO_File f)\n           return fd->name.size;\n         }\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "81c66fc316c2cba232fbd4d334ca897fc7420aa3", "filename": "gcc/m2/pge-boot/GIndexing.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGIndexing.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGIndexing.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGIndexing.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -227,7 +227,7 @@ extern \"C\" unsigned int Indexing_InBounds (Indexing_Index i, unsigned int n)\n     {\n       return (n >= i->Low) && (n <= i->High);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/Indexing.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/Indexing.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -247,7 +247,7 @@ extern \"C\" unsigned int Indexing_HighIndice (Indexing_Index i)\n     {\n       return i->High;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/Indexing.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/Indexing.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -267,7 +267,7 @@ extern \"C\" unsigned int Indexing_LowIndice (Indexing_Index i)\n     {\n       return i->Low;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/Indexing.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/Indexing.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "5a3ba4c3362aa4608abad004bab7bae0b5b9e20b", "filename": "gcc/m2/pge-boot/GM2EXCEPTION.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGM2EXCEPTION.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGM2EXCEPTION.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGM2EXCEPTION.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -56,13 +56,13 @@ extern \"C\" M2EXCEPTION_M2Exceptions M2EXCEPTION_M2Exception (void)\n   n = RTExceptions_GetNumber (e);\n   if (n == (UINT_MAX))\n     {\n-      RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/M2EXCEPTION.mod\")), 47, 6, const_cast<void*> (reinterpret_cast<const void*>(\"M2Exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"current coroutine is not in the exceptional execution state\")));\n+      RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/M2EXCEPTION.mod\")), 47, 6, const_cast<void*> (reinterpret_cast<const void*>(\"M2Exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"current coroutine is not in the exceptional execution state\")));\n     }\n   else\n     {\n       return (M2EXCEPTION_M2Exceptions) (n);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/M2EXCEPTION.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/M2EXCEPTION.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "1fdd5eb8ce752d9c54ef20976ec445493fdacace", "filename": "gcc/m2/pge-boot/GM2RTS.c", "status": "modified", "additions": 98, "deletions": 23, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGM2RTS.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGM2RTS.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGM2RTS.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -64,6 +64,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n typedef struct M2RTS_ArgCVEnvP_p M2RTS_ArgCVEnvP;\n \n+#   define stderrFd 2\n typedef struct M2RTS_ProcedureList_r M2RTS_ProcedureList;\n \n typedef char *M2RTS_PtrToChar;\n@@ -178,10 +179,19 @@ extern \"C\" void M2RTS_HALT (int exitcode) __attribute__ ((noreturn));\n \n /*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+          four parameters to aid debugging.  It writes an error message\n+          to stderr and calls exit (1).\n */\n \n-extern \"C\" void M2RTS_Halt (const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_Halt (const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+\n+/*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*/\n+\n+extern \"C\" void M2RTS_HaltC (void * filename, unsigned int line, void * function, void * description);\n \n /*\n    ExitOnHalt - if HALT is executed then call exit with the exit code, e.\n@@ -193,7 +203,7 @@ extern \"C\" void M2RTS_ExitOnHalt (int e);\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n */\n \n-extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n \n /*\n    Length - returns the length of a string, a. This is called whenever\n@@ -248,6 +258,18 @@ static unsigned int AppendProc (M2RTS_ProcedureList *proclist, PROC proc);\n \n static void ErrorString (const char *a_, unsigned int _a_high);\n \n+/*\n+   ErrorStringC - writes a string to stderr.\n+*/\n+\n+static void ErrorStringC (void * str);\n+\n+/*\n+   ErrorMessageC - emits an error message to stderr and then calls exit (1).\n+*/\n+\n+static void ErrorMessageC (void * message, void * filename, unsigned int line, void * function) __attribute__ ((noreturn));\n+\n /*\n    InitProcList - initialize the head and tail pointers to NIL.\n */\n@@ -322,7 +344,49 @@ static void ErrorString (const char *a_, unsigned int _a_high)\n   /* make a local copy of each unbounded array.  */\n   memcpy (a, a_, _a_high+1);\n \n-  n = static_cast<int> (libc_write (2, &a, static_cast<size_t> (StrLib_StrLen ((const char *) a, _a_high))));\n+  n = static_cast<int> (libc_write (stderrFd, &a, static_cast<size_t> (StrLib_StrLen ((const char *) a, _a_high))));\n+}\n+\n+\n+/*\n+   ErrorStringC - writes a string to stderr.\n+*/\n+\n+static void ErrorStringC (void * str)\n+{\n+  int len;\n+\n+  len = static_cast<int> (libc_write (stderrFd, str, libc_strlen (str)));\n+}\n+\n+\n+/*\n+   ErrorMessageC - emits an error message to stderr and then calls exit (1).\n+*/\n+\n+static void ErrorMessageC (void * message, void * filename, unsigned int line, void * function)\n+{\n+  typedef struct ErrorMessageC__T2_a ErrorMessageC__T2;\n+\n+  struct ErrorMessageC__T2_a { char array[10+1]; };\n+  ErrorMessageC__T2 buffer;\n+\n+  ErrorStringC (filename);\n+  ErrorString ((const char *) \":\", 1);\n+  NumberIO_CardToStr (line, 0, (char *) &buffer.array[0], 10);\n+  ErrorString ((const char *) &buffer.array[0], 10);\n+  ErrorString ((const char *) \":\", 1);\n+  if ((libc_strlen (function)) > 0)\n+    {\n+      ErrorString ((const char *) \"in \", 3);\n+      ErrorStringC (function);\n+      ErrorString ((const char *) \" has caused \", 12);\n+    }\n+  ErrorStringC (message);\n+  buffer.array[0] = ASCII_nl;\n+  buffer.array[1] = ASCII_nul;\n+  ErrorString ((const char *) &buffer.array[0], 10);\n+  libc_exit (1);\n }\n \n \n@@ -519,23 +583,34 @@ extern \"C\" void M2RTS_HALT (int exitcode)\n \n /*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+          four parameters to aid debugging.  It writes an error message\n+          to stderr and calls exit (1).\n */\n \n-extern \"C\" void M2RTS_Halt (const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high)\n+extern \"C\" void M2RTS_Halt (const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high)\n {\n-  char file[_file_high+1];\n+  char filename[_filename_high+1];\n   char function[_function_high+1];\n   char description[_description_high+1];\n \n   /* make a local copy of each unbounded array.  */\n-  memcpy (file, file_, _file_high+1);\n+  memcpy (filename, filename_, _filename_high+1);\n   memcpy (function, function_, _function_high+1);\n   memcpy (description, description_, _description_high+1);\n \n-  M2RTS_ErrorMessage ((const char *) description, _description_high, (const char *) file, _file_high, line, (const char *) function, _function_high);\n-  M2RTS_HALT (-1);\n-  __builtin_unreachable ();\n+  M2RTS_ErrorMessage ((const char *) description, _description_high, (const char *) filename, _filename_high, line, (const char *) function, _function_high);\n+}\n+\n+\n+/*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*/\n+\n+extern \"C\" void M2RTS_HaltC (void * filename, unsigned int line, void * function, void * description)\n+{\n+  ErrorMessageC (description, filename, line, function);\n }\n \n \n@@ -554,25 +629,25 @@ extern \"C\" void M2RTS_ExitOnHalt (int e)\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n */\n \n-extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high)\n+extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high)\n {\n-  typedef struct ErrorMessage__T2_a ErrorMessage__T2;\n+  typedef struct ErrorMessage__T3_a ErrorMessage__T3;\n \n-  struct ErrorMessage__T2_a { char array[10+1]; };\n-  ErrorMessage__T2 LineNo;\n+  struct ErrorMessage__T3_a { char array[10+1]; };\n+  ErrorMessage__T3 buffer;\n   char message[_message_high+1];\n-  char file[_file_high+1];\n+  char filename[_filename_high+1];\n   char function[_function_high+1];\n \n   /* make a local copy of each unbounded array.  */\n   memcpy (message, message_, _message_high+1);\n-  memcpy (file, file_, _file_high+1);\n+  memcpy (filename, filename_, _filename_high+1);\n   memcpy (function, function_, _function_high+1);\n \n-  ErrorString ((const char *) file, _file_high);\n+  ErrorString ((const char *) filename, _filename_high);\n   ErrorString ((const char *) \":\", 1);\n-  NumberIO_CardToStr (line, 0, (char *) &LineNo.array[0], 10);\n-  ErrorString ((const char *) &LineNo.array[0], 10);\n+  NumberIO_CardToStr (line, 0, (char *) &buffer.array[0], 10);\n+  ErrorString ((const char *) &buffer.array[0], 10);\n   ErrorString ((const char *) \":\", 1);\n   if (! (StrLib_StrEqual ((const char *) function, _function_high, (const char *) \"\", 0)))\n     {\n@@ -581,9 +656,9 @@ extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_\n       ErrorString ((const char *) \" has caused \", 12);\n     }\n   ErrorString ((const char *) message, _message_high);\n-  LineNo.array[0] = ASCII_nl;\n-  LineNo.array[1] = ASCII_nul;\n-  ErrorString ((const char *) &LineNo.array[0], 10);\n+  buffer.array[0] = ASCII_nl;\n+  buffer.array[1] = ASCII_nul;\n+  ErrorString ((const char *) &buffer.array[0], 10);\n   libc_exit (1);\n }\n "}, {"sha": "13511cb013292f5888a8c0cd3c040ec4315e8c8f", "filename": "gcc/m2/pge-boot/GNameKey.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGNameKey.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGNameKey.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGNameKey.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -330,7 +330,7 @@ extern \"C\" NameKey_Name NameKey_MakeKey (const char *a_, unsigned int _a_high)\n       (*p) = ASCII_nul;\n       return DoMakeKey (n, higha);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-compiler/NameKey.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-compiler/NameKey.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -380,7 +380,7 @@ extern \"C\" NameKey_Name NameKey_makekey (void * a)\n           return DoMakeKey (n, higha);\n         }\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-compiler/NameKey.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-compiler/NameKey.def\", 20, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "70cb2721e5ef2e70af2dbf7dfe7626dad8ba92f1", "filename": "gcc/m2/pge-boot/GPushBackInput.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGPushBackInput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGPushBackInput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGPushBackInput.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -275,7 +275,7 @@ extern \"C\" char PushBackInput_PutCh (char ch)\n     }\n   else\n     {\n-      Debug_Halt ((const char *) \"max push back stack exceeded, increase MaxPushBackStack\", 55, 150, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/PushBackInput.mod\", 61);\n+      Debug_Halt ((const char *) \"max push back stack exceeded, increase MaxPushBackStack\", 55, 150, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/PushBackInput.mod\", 54);\n     }\n   return ch;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -301,7 +301,7 @@ extern \"C\" void PushBackInput_PutString (const char *a_, unsigned int _a_high)\n       l -= 1;\n       if ((PushBackInput_PutCh (a[l])) != a[l])\n         {\n-          Debug_Halt ((const char *) \"assert failed\", 13, 132, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/PushBackInput.mod\", 61);\n+          Debug_Halt ((const char *) \"assert failed\", 13, 132, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/PushBackInput.mod\", 54);\n         }\n     }\n }\n@@ -322,7 +322,7 @@ extern \"C\" void PushBackInput_PutStr (DynamicStrings_String s)\n       i -= 1;\n       if ((PushBackInput_PutCh (DynamicStrings_char (s, static_cast<int> (i)))) != (DynamicStrings_char (s, static_cast<int> (i))))\n         {\n-          Debug_Halt ((const char *) \"assert failed\", 13, 113, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/PushBackInput.mod\", 61);\n+          Debug_Halt ((const char *) \"assert failed\", 13, 113, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/PushBackInput.mod\", 54);\n         }\n     }\n }"}, {"sha": "84f6ccab1d328fe3559b52fd196d26826e865e30", "filename": "gcc/m2/pge-boot/GRTExceptions.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGRTExceptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGRTExceptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGRTExceptions.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -722,7 +722,7 @@ static void AddHandler (RTExceptions_EHBlock e, RTExceptions_Handler h)\n \n static void indexf (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_indexException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 612, 9, const_cast<void*> (reinterpret_cast<const void*>(\"indexf\")), const_cast<void*> (reinterpret_cast<const void*>(\"array index out of bounds\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_indexException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 612, 9, const_cast<void*> (reinterpret_cast<const void*>(\"indexf\")), const_cast<void*> (reinterpret_cast<const void*>(\"array index out of bounds\")));\n }\n \n \n@@ -732,7 +732,7 @@ static void indexf (void * a)\n \n static void range (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_rangeException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 624, 9, const_cast<void*> (reinterpret_cast<const void*>(\"range\")), const_cast<void*> (reinterpret_cast<const void*>(\"assignment out of range\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_rangeException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 624, 9, const_cast<void*> (reinterpret_cast<const void*>(\"range\")), const_cast<void*> (reinterpret_cast<const void*>(\"assignment out of range\")));\n }\n \n \n@@ -742,7 +742,7 @@ static void range (void * a)\n \n static void casef (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_caseSelectException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 636, 9, const_cast<void*> (reinterpret_cast<const void*>(\"casef\")), const_cast<void*> (reinterpret_cast<const void*>(\"case selector out of range\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_caseSelectException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 636, 9, const_cast<void*> (reinterpret_cast<const void*>(\"casef\")), const_cast<void*> (reinterpret_cast<const void*>(\"case selector out of range\")));\n }\n \n \n@@ -752,7 +752,7 @@ static void casef (void * a)\n \n static void invalidloc (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_invalidLocation)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 648, 9, const_cast<void*> (reinterpret_cast<const void*>(\"invalidloc\")), const_cast<void*> (reinterpret_cast<const void*>(\"invalid address referenced\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_invalidLocation)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 648, 9, const_cast<void*> (reinterpret_cast<const void*>(\"invalidloc\")), const_cast<void*> (reinterpret_cast<const void*>(\"invalid address referenced\")));\n }\n \n \n@@ -762,7 +762,7 @@ static void invalidloc (void * a)\n \n static void function (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_functionException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 660, 9, const_cast<void*> (reinterpret_cast<const void*>(\"function\")), const_cast<void*> (reinterpret_cast<const void*>(\"... function ... \")));  /* --fixme-- what has happened ?  */\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_functionException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 660, 9, const_cast<void*> (reinterpret_cast<const void*>(\"function\")), const_cast<void*> (reinterpret_cast<const void*>(\"... function ... \")));  /* --fixme-- what has happened ?  */\n }\n \n \n@@ -772,7 +772,7 @@ static void function (void * a)\n \n static void wholevalue (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 672, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholevalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 672, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholevalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n }\n \n \n@@ -782,7 +782,7 @@ static void wholevalue (void * a)\n \n static void wholediv (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 684, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholediv\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 684, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholediv\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n }\n \n \n@@ -792,7 +792,7 @@ static void wholediv (void * a)\n \n static void realvalue (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 696, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal real value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 696, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal real value exception\")));\n }\n \n \n@@ -802,7 +802,7 @@ static void realvalue (void * a)\n \n static void realdiv (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 708, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"real number division by zero exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 708, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"real number division by zero exception\")));\n }\n \n \n@@ -812,7 +812,7 @@ static void realdiv (void * a)\n \n static void complexvalue (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 720, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal complex value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 720, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal complex value exception\")));\n }\n \n \n@@ -822,7 +822,7 @@ static void complexvalue (void * a)\n \n static void complexdiv (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 732, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"complex number division by zero exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 732, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"complex number division by zero exception\")));\n }\n \n \n@@ -832,7 +832,7 @@ static void complexdiv (void * a)\n \n static void protection (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_protException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 744, 9, const_cast<void*> (reinterpret_cast<const void*>(\"protection\")), const_cast<void*> (reinterpret_cast<const void*>(\"protection exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_protException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 744, 9, const_cast<void*> (reinterpret_cast<const void*>(\"protection\")), const_cast<void*> (reinterpret_cast<const void*>(\"protection exception\")));\n }\n \n \n@@ -842,7 +842,7 @@ static void protection (void * a)\n \n static void systemf (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_sysException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 756, 9, const_cast<void*> (reinterpret_cast<const void*>(\"systemf\")), const_cast<void*> (reinterpret_cast<const void*>(\"system exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_sysException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 756, 9, const_cast<void*> (reinterpret_cast<const void*>(\"systemf\")), const_cast<void*> (reinterpret_cast<const void*>(\"system exception\")));\n }\n \n \n@@ -852,7 +852,7 @@ static void systemf (void * a)\n \n static void coroutine (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_coException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 768, 9, const_cast<void*> (reinterpret_cast<const void*>(\"coroutine\")), const_cast<void*> (reinterpret_cast<const void*>(\"coroutine exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_coException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 768, 9, const_cast<void*> (reinterpret_cast<const void*>(\"coroutine\")), const_cast<void*> (reinterpret_cast<const void*>(\"coroutine exception\")));\n }\n \n \n@@ -862,7 +862,7 @@ static void coroutine (void * a)\n \n static void exception (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 780, 9, const_cast<void*> (reinterpret_cast<const void*>(\"exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"exception exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 780, 9, const_cast<void*> (reinterpret_cast<const void*>(\"exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"exception exception\")));\n }\n \n \n@@ -1181,13 +1181,13 @@ extern \"C\" RTExceptions_EHBlock RTExceptions_GetBaseExceptionBlock (void)\n {\n   if (currentEHB == NULL)\n     {\n-      M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\", 60, 598, (const char *) \"GetBaseExceptionBlock\", 21, (const char *) \"currentEHB has not been initialized yet\", 39);\n+      M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\", 53, 598, (const char *) \"GetBaseExceptionBlock\", 21, (const char *) \"currentEHB has not been initialized yet\", 39);\n     }\n   else\n     {\n       return currentEHB;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "04af632977f20ee5f8b5dfba908fdbd9b7bcd626", "filename": "gcc/m2/pge-boot/GStdIO.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGStdIO.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGStdIO.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGStdIO.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -191,7 +191,7 @@ extern \"C\" StdIO_ProcWrite StdIO_GetCurrentOutput (void)\n       M2RTS_HALT (-1);\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -250,7 +250,7 @@ extern \"C\" StdIO_ProcRead StdIO_GetCurrentInput (void)\n       M2RTS_HALT (-1);\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "61c599ea9a021e75629e98fca17646153ea680da", "filename": "gcc/m2/pge-boot/GSymbolKey.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGSymbolKey.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGSymbolKey.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGSymbolKey.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -183,7 +183,7 @@ static void FindNodeParentInTree (SymbolKey_SymbolTree t, NameKey_Name n, Symbol\n   (*parent) = t;\n   if (t == NULL)\n     {\n-      Debug_Halt ((const char *) \"parameter t should never be NIL\", 31, 240, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-compiler/SymbolKey.mod\", 61);\n+      Debug_Halt ((const char *) \"parameter t should never be NIL\", 31, 240, (const char *) \"../../gcc-read-write/gcc/m2/gm2-compiler/SymbolKey.mod\", 54);\n     }\n   Assertion_Assert (t->Right == NULL);\n   (*child) = t->Left;\n@@ -392,7 +392,7 @@ extern \"C\" void SymbolKey_PutSymKey (SymbolKey_SymbolTree t, NameKey_Name NameKe\n     }\n   else\n     {\n-      Debug_Halt ((const char *) \"symbol already stored\", 21, 156, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-compiler/SymbolKey.mod\", 61);\n+      Debug_Halt ((const char *) \"symbol already stored\", 21, 156, (const char *) \"../../gcc-read-write/gcc/m2/gm2-compiler/SymbolKey.mod\", 54);\n     }\n }\n \n@@ -459,7 +459,7 @@ extern \"C\" void SymbolKey_DelSymKey (SymbolKey_SymbolTree t, NameKey_Name NameKe\n     }\n   else\n     {\n-      Debug_Halt ((const char *) \"trying to delete a symbol that is not in the tree - the compiler never expects this to occur\", 92, 223, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-compiler/SymbolKey.mod\", 61);\n+      Debug_Halt ((const char *) \"trying to delete a symbol that is not in the tree - the compiler never expects this to occur\", 92, 223, (const char *) \"../../gcc-read-write/gcc/m2/gm2-compiler/SymbolKey.mod\", 54);\n     }\n }\n "}, {"sha": "f2a70385beafae92f879794a3521cbb7a9ebb5e6", "filename": "gcc/m2/pge-boot/GSysStorage.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGSysStorage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71354f7b99716c47e885851280376574920da92/gcc%2Fm2%2Fpge-boot%2FGSysStorage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fpge-boot%2FGSysStorage.c?ref=f71354f7b99716c47e885851280376574920da92", "patch": "@@ -93,7 +93,7 @@ extern \"C\" void SysStorage_ALLOCATE (void * *a, unsigned int size)\n   (*a) = libc_malloc (static_cast<size_t> (size));\n   if ((*a) == NULL)\n     {\n-      Debug_Halt ((const char *) \"out of memory error\", 19, 50, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/SysStorage.mod\", 58);\n+      Debug_Halt ((const char *) \"out of memory error\", 19, 50, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/SysStorage.mod\", 51);\n     }\n   if (enableTrace && trace)\n     {\n@@ -118,7 +118,7 @@ extern \"C\" void SysStorage_DEALLOCATE (void * *a, unsigned int size)\n         }\n       if ((libc_memset ((*a), 0, static_cast<size_t> (size))) != (*a))\n         {\n-          Debug_Halt ((const char *) \"memset should have returned the first parameter\", 47, 76, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/SysStorage.mod\", 58);\n+          Debug_Halt ((const char *) \"memset should have returned the first parameter\", 47, 76, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/SysStorage.mod\", 51);\n         }\n     }\n   if (enableDeallocation)\n@@ -163,7 +163,7 @@ extern \"C\" void SysStorage_REALLOCATE (void * *a, unsigned int size)\n       (*a) = libc_realloc ((*a), static_cast<size_t> (size));\n       if ((*a) == NULL)\n         {\n-          Debug_Halt ((const char *) \"out of memory error\", 19, 119, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/SysStorage.mod\", 58);\n+          Debug_Halt ((const char *) \"out of memory error\", 19, 119, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/SysStorage.mod\", 51);\n         }\n       if (enableTrace && trace)\n         {"}]}