{"sha": "3795dac6fa7e6514cdc4daa138e29d5a4f4d001e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5NWRhYzZmYTdlNjUxNGNkYzRkYWExMzhlMjlkNWE0ZjRkMDAxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-02-24T20:35:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:00Z"}, "message": "[Ada] AI1-0201 Relational operators of static string types are now static\n\n2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Eval_Relational_Op, Eval_String_Literal,\n\tEval_Type_Conversion): Relax rules on relational operators and\n\ttype conversions of static string types.", "tree": {"sha": "60fafcdeb07df49ba4ff3da8fb9d4a54cde26ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60fafcdeb07df49ba4ff3da8fb9d4a54cde26ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3795dac6fa7e6514cdc4daa138e29d5a4f4d001e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3795dac6fa7e6514cdc4daa138e29d5a4f4d001e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3795dac6fa7e6514cdc4daa138e29d5a4f4d001e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3795dac6fa7e6514cdc4daa138e29d5a4f4d001e/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c68d70e8bda9423f502351e88e464803f73941b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68d70e8bda9423f502351e88e464803f73941b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68d70e8bda9423f502351e88e464803f73941b4"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "2857c536706d03420b8228fb101066c0aead3ee7", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3795dac6fa7e6514cdc4daa138e29d5a4f4d001e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3795dac6fa7e6514cdc4daa138e29d5a4f4d001e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=3795dac6fa7e6514cdc4daa138e29d5a4f4d001e", "patch": "@@ -3241,8 +3241,9 @@ package body Sem_Eval is\n    ------------------------\n \n    --  Relational operations are static functions, so the result is static if\n-   --  both operands are static (RM 4.9(7), 4.9(20)), except that for strings,\n-   --  the result is never static, even if the operands are.\n+   --  both operands are static (RM 4.9(7), 4.9(20)), except that up to Ada\n+   --  2012, for strings the result is never static, even if the operands are.\n+   --  The string case was relaxed in Ada 2020, see AI12-0201.\n \n    --  However, for internally generated nodes, we allow string equality and\n    --  inequality to be static. This is because we rewrite A in \"ABC\" as an\n@@ -3583,7 +3584,13 @@ package body Sem_Eval is\n               and then Right_Len /= Uint_Minus_1\n               and then Left_Len /= Right_Len\n             then\n-               Fold_Uint (N, Test (Nkind (N) = N_Op_Ne), False);\n+               --  AI12-0201: comparison of string is static in Ada 202x\n+\n+               Fold_Uint\n+                 (N,\n+                  Test (Nkind (N) = N_Op_Ne),\n+                  Static => Ada_Version >= Ada_2020\n+                              and then Is_String_Type (Left_Typ));\n                Warn_On_Known_Condition (N);\n                return;\n             end if;\n@@ -3602,16 +3609,23 @@ package body Sem_Eval is\n          Test_Expression_Is_Foldable\n            (N, Left, Right, Is_Static_Expression, Fold);\n \n-         --  Only comparisons of scalars can give static results. A comparison\n-         --  of strings never yields a static result, even if both operands are\n-         --  static strings, except that as noted above, we allow equality and\n+         --  Comparisons of scalars can give static results.\n+         --  In addition starting with Ada 202x (AI12-0201), comparison of\n+         --  strings can also give static results, and as noted above, we also\n+         --  allow for earlier Ada versions internally generated equality and\n          --  inequality for strings.\n-\n-         if Is_String_Type (Left_Typ)\n-           and then not Comes_From_Source (N)\n-           and then Nkind_In (N, N_Op_Eq, N_Op_Ne)\n-         then\n-            null;\n+         --  ??? The Comes_From_Source test below isn't correct and will accept\n+         --  some cases that are illegal in Ada 2012. and before. Now that\n+         --  Ada 202x has relaxed the rules, this doesn't really matter.\n+\n+         if Is_String_Type (Left_Typ) then\n+            if Ada_Version < Ada_2020\n+              and then (Comes_From_Source (N)\n+                         or else not Nkind_In (N, N_Op_Eq, N_Op_Ne))\n+            then\n+               Is_Static_Expression := False;\n+               Set_Is_Static_Expression (N, False);\n+            end if;\n \n          elsif not Is_Scalar_Type (Left_Typ) then\n             Is_Static_Expression := False;\n@@ -3854,8 +3868,11 @@ package body Sem_Eval is\n       end if;\n \n       --  If original node was a type conversion, then result if non-static\n+      --  up to Ada 2012. AI12-0201 changes that with Ada 202x.\n \n-      if Nkind (Original_Node (N)) = N_Type_Conversion then\n+      if Nkind (Original_Node (N)) = N_Type_Conversion\n+        and then Ada_Version <= Ada_2012\n+      then\n          Set_Is_Static_Expression (N, False);\n          return;\n       end if;\n@@ -3938,6 +3955,7 @@ package body Sem_Eval is\n    --  A type conversion is potentially static if its subtype mark is for a\n    --  static scalar subtype, and its operand expression is potentially static\n    --  (RM 4.9(10)).\n+   --  Also add support for static string types.\n \n    procedure Eval_Type_Conversion (N : Node_Id) is\n       Operand     : constant Node_Id   := Expression (N);\n@@ -4011,10 +4029,14 @@ package body Sem_Eval is\n       --  following type test, fixed-point counts as real unless the flag\n       --  Conversion_OK is set, in which case it counts as integer.\n \n-      --  Fold conversion, case of string type. The result is not static\n+      --  Fold conversion, case of string type. The result is static starting\n+      --  with Ada 202x (AI12-0201).\n \n       if Is_String_Type (Target_Type) then\n-         Fold_Str (N, Strval (Get_String_Val (Operand)), Static => False);\n+         Fold_Str\n+           (N,\n+            Strval (Get_String_Val (Operand)),\n+            Static => Ada_Version >= Ada_2020);\n          return;\n \n       --  Fold conversion, case of integer target type"}]}