{"sha": "46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmY2VmOTlmNDljYzJkOWYyOGQ5OGY4ZWNkYmY4MjYzZTllMGE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-06T21:38:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-06T21:38:13Z"}, "message": "c++: Avoid strict_aliasing_warning on dependent types or expressions [PR94951]\n\nThe following testcase gets a bogus warning during build_base_path,\nwhen cp_build_indirect_ref* calls strict_aliasing_warning with a dependent\nexpression.  IMHO calling get_alias_set etc. on dependent types feels wrong\nto me, we should just defer the warnings in those cases until instantiation\nand only handle the cases where neither type nor expr are dependent.\n\n2020-05-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94951\n\t* typeck.c (cp_strict_aliasing_warning): New function.\n\t(cp_build_indirect_ref_1, build_reinterpret_cast_1): Use\n\tit instead of strict_aliasing_warning.\n\n\t* g++.dg/warn/Wstrict-aliasing-bogus-tmpl.C: New test.", "tree": {"sha": "5291205eec644bb2bc340fe83f5e35273901eeb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5291205eec644bb2bc340fe83f5e35273901eeb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ee2155ead87a5ea1c152a29341ee1e3275d706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ee2155ead87a5ea1c152a29341ee1e3275d706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25ee2155ead87a5ea1c152a29341ee1e3275d706"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "a3bec1c02c4be94496afa43a970da0b4e194ea9e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "patch": "@@ -1,5 +1,10 @@\n 2020-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/94951\n+\t* typeck.c (cp_strict_aliasing_warning): New function.\n+\t(cp_build_indirect_ref_1, build_reinterpret_cast_1): Use\n+\tit instead of strict_aliasing_warning.\n+\n \tPR c++/94907\n \t* method.c (defaulted_late_check): Don't call synthesize_method\n \ton constexpr sfk_comparison if it has been called on it already."}, {"sha": "13d9602c32b224014da5ca2c7c28d4322a92f740", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "patch": "@@ -3318,6 +3318,22 @@ build_x_indirect_ref (location_t loc, tree expr, ref_operator errorstring,\n     return rval;\n }\n \n+/* Like c-family strict_aliasing_warning, but don't warn for dependent\n+   types or expressions.  */\n+\n+static bool\n+cp_strict_aliasing_warning (location_t loc, tree type, tree expr)\n+{\n+  if (processing_template_decl)\n+    {\n+      tree e = expr;\n+      STRIP_NOPS (e);\n+      if (dependent_type_p (type) || type_dependent_expression_p (e))\n+\treturn false;\n+    }\n+  return strict_aliasing_warning (loc, type, expr);\n+}\n+\n /* The implementation of the above, and of indirection implied by other\n    constructs.  If DO_FOLD is true, fold away INDIRECT_REF of ADDR_EXPR.  */\n \n@@ -3360,10 +3376,10 @@ cp_build_indirect_ref_1 (location_t loc, tree ptr, ref_operator errorstring,\n \t  /* If a warning is issued, mark it to avoid duplicates from\n \t     the backend.  This only needs to be done at\n \t     warn_strict_aliasing > 2.  */\n-\t  if (warn_strict_aliasing > 2)\n-\t    if (strict_aliasing_warning (EXPR_LOCATION (ptr),\n-\t\t\t\t\t type, TREE_OPERAND (ptr, 0)))\n-\t      TREE_NO_WARNING (ptr) = 1;\n+\t  if (warn_strict_aliasing > 2\n+\t      && cp_strict_aliasing_warning (EXPR_LOCATION (ptr),\n+\t\t\t\t\t     type, TREE_OPERAND (ptr, 0)))\n+\t    TREE_NO_WARNING (ptr) = 1;\n \t}\n \n       if (VOID_TYPE_P (t))\n@@ -7777,7 +7793,7 @@ build_reinterpret_cast_1 (location_t loc, tree type, tree expr,\n       expr = cp_build_addr_expr (expr, complain);\n \n       if (warn_strict_aliasing > 2)\n-\tstrict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n+\tcp_strict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n \n       if (expr != error_mark_node)\n \texpr = build_reinterpret_cast_1\n@@ -7891,7 +7907,7 @@ build_reinterpret_cast_1 (location_t loc, tree type, tree expr,\n \n       if (warn_strict_aliasing <= 2)\n \t/* strict_aliasing_warning STRIP_NOPs its expr.  */\n-\tstrict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n+\tcp_strict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n \n       return build_nop_reinterpret (type, expr);\n     }"}, {"sha": "a080b9ad6d0a1f27d91391b435666a4bff537e76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "patch": "@@ -1,5 +1,8 @@\n 2020-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/94951\n+\t* g++.dg/warn/Wstrict-aliasing-bogus-tmpl.C: New test.\n+\n \tPR c++/94907\n \t* g++.dg/cpp2a/spaceship-synth8.C: New test.\n "}, {"sha": "d0375042e42299da2b54829ee20cc3ec9888683a", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-bogus-tmpl.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-bogus-tmpl.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-bogus-tmpl.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-bogus-tmpl.C?ref=46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/94951\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wall\" }\n+\n+struct A { int a; };\n+template <int N>\n+struct B : public A\n+{\n+  static B<N> foo () { B<N> t; t.a = 4; return t; }\t// { dg-bogus \"dereferencing type-punned pointer will break strict-aliasing rules\" }\n+};\n+\n+B<0> b = B<0>::foo ();"}]}