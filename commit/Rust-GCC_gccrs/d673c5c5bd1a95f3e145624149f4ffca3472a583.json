{"sha": "d673c5c5bd1a95f3e145624149f4ffca3472a583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3M2M1YzViZDFhOTVmM2UxNDU2MjQxNDlmNGZmY2EzNDcyYTU4Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-11-21T12:01:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T12:01:11Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, s-taprop-vms.adb, opt.ads: Minor reformatting.\n\nFrom-SVN: r181569", "tree": {"sha": "c5581f0350e8ed5dbc0f2fb0dca4c3d01210c5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5581f0350e8ed5dbc0f2fb0dca4c3d01210c5e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d673c5c5bd1a95f3e145624149f4ffca3472a583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d673c5c5bd1a95f3e145624149f4ffca3472a583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d673c5c5bd1a95f3e145624149f4ffca3472a583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d673c5c5bd1a95f3e145624149f4ffca3472a583/comments", "author": null, "committer": null, "parents": [{"sha": "be482a8c830c9f79a14c76a901665707c34fe15a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be482a8c830c9f79a14c76a901665707c34fe15a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be482a8c830c9f79a14c76a901665707c34fe15a"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "5a9e425693ea224cc49d3781282d84341f73436a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d673c5c5bd1a95f3e145624149f4ffca3472a583", "patch": "@@ -1,3 +1,7 @@\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, s-taprop-vms.adb, opt.ads: Minor reformatting.\n+\n 2011-11-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sinput.ads: Minor comment fix."}, {"sha": "4c1f5609318c4fc697fdf4e8bd2b7ec94ddd2b95", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=d673c5c5bd1a95f3e145624149f4ffca3472a583", "patch": "@@ -1830,6 +1830,9 @@ package Opt is\n    --  this flag, see package Expander. Indeed this flag might more logically\n    --  be in the spec of Expander, but it is referenced by Errout, and it\n    --  really seems wrong for Errout to depend on Expander.\n+   --\n+   --  Note: for many purposes, it is more appropriate to test the flag\n+   --  Full_Expander_Active, which also checks that Alfa mode is not active.\n \n    Static_Dispatch_Tables : Boolean := True;\n    --  This flag indicates if the backend supports generation of statically"}, {"sha": "67cf363dd4e091944c498b838cd96319421040c6", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=d673c5c5bd1a95f3e145624149f4ffca3472a583", "patch": "@@ -809,6 +809,12 @@ package body System.Task_Primitives.Operations is\n           (Attributes'Access, PTHREAD_EXPLICIT_SCHED);\n       pragma Assert (Result = 0);\n \n+      --  Note: the use of Unrestricted_Access in the following call is needed\n+      --  because otherwise we have an error of getting a access-to-volatile\n+      --  value which points to a non-volatile object. But in this case it is\n+      --  safe to do this, since we know we have no problems with aliasing and\n+      --  Unrestricted_Access bypasses this check.\n+\n       Result :=\n         pthread_create\n           (T.Common.LL.Thread'Unrestricted_Access,"}, {"sha": "f6fc65b496981ca46c56cde04685a158fcffafbc", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d673c5c5bd1a95f3e145624149f4ffca3472a583/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d673c5c5bd1a95f3e145624149f4ffca3472a583", "patch": "@@ -734,16 +734,16 @@ package body Sem_Ch3 is\n          Anon_Scope := Current_Scope;\n \n          --  A pathological case: function returning access functions that\n-         --  return access functions, etc.  Each anonymous access type created\n+         --  return access functions, etc. Each anonymous access type created\n          --  is in the enclosing scope of the outermost function.\n \n          declare\n             Par : Node_Id;\n+\n          begin\n             Par := Related_Nod;\n-            while Nkind_In (Par,\n-                             N_Access_Function_Definition,\n-                             N_Access_Definition)\n+            while Nkind_In (Par, N_Access_Function_Definition,\n+                                 N_Access_Definition)\n             loop\n                Par := Parent (Par);\n             end loop;"}]}