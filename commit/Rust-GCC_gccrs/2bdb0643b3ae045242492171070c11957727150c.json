{"sha": "2bdb0643b3ae045242492171070c11957727150c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkYjA2NDNiM2FlMDQ1MjQyNDkyMTcxMDcwYzExOTU3NzI3MTUwYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-04-11T00:38:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-04-11T00:38:39Z"}, "message": "class.c (instantiate_type): Handle object-relative template-id.\n\n        * class.c (instantiate_type): Handle object-relative template-id.\n\n        * semantics.c (finish_expr_stmt): Call convert_to_void here.\n        * decl.c (cplus_expand_expr_stmt): Not here.\n\n        * rtti.c (build_dynamic_cast_1): Call non_lvalue.\n        Initialize exprtype earlier.\n\n        * parse.y (fn.def1): Check for defining types in return types.\n\n        * decl.c (check_tag_decl): Notice extra fundamental types.\n        Diagnose empty decls in classes, too.\n\n        * decl.c (grokdeclarator): Don't override an anonymous name if no\n        declarator was given.\n\n        * cvt.c (convert_to_void): Call resolve_offset_ref.\n\n        * typeck.c (build_x_function_call): Abort if we get an OFFSET_REF.\n\n        * decl2.c (decl_namespace): Handle getting a type.\n\n        * typeck.c (build_c_cast): Re-enable warning for cast between\n        pointer and integer of different size.\n\nFrom-SVN: r33066", "tree": {"sha": "c5516cfcd94a09cc0c73c7cf3b57d9e185fcbf03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5516cfcd94a09cc0c73c7cf3b57d9e185fcbf03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bdb0643b3ae045242492171070c11957727150c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdb0643b3ae045242492171070c11957727150c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdb0643b3ae045242492171070c11957727150c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdb0643b3ae045242492171070c11957727150c/comments", "author": null, "committer": null, "parents": [{"sha": "a4ff8d98baa9fcc92bdd294d4db3e9d9146cd590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ff8d98baa9fcc92bdd294d4db3e9d9146cd590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ff8d98baa9fcc92bdd294d4db3e9d9146cd590"}], "stats": {"total": 1529, "additions": 794, "deletions": 735}, "files": [{"sha": "6458ed8f054d1fd61ccad747230d29cdbdf95623", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -1,3 +1,30 @@\n+2000-04-10  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* class.c (instantiate_type): Handle object-relative template-id.\n+\n+\t* semantics.c (finish_expr_stmt): Call convert_to_void here.\n+\t* decl.c (cplus_expand_expr_stmt): Not here.\n+\n+\t* rtti.c (build_dynamic_cast_1): Call non_lvalue.\n+\tInitialize exprtype earlier.\n+\n+\t* parse.y (fn.def1): Check for defining types in return types.\n+\n+\t* decl.c (check_tag_decl): Notice extra fundamental types.\n+\tDiagnose empty decls in classes, too.\n+\n+\t* decl.c (grokdeclarator): Don't override an anonymous name if no \n+\tdeclarator was given.\n+\n+\t* cvt.c (convert_to_void): Call resolve_offset_ref.\n+\n+\t* typeck.c (build_x_function_call): Abort if we get an OFFSET_REF.\n+\n+\t* decl2.c (decl_namespace): Handle getting a type.\n+\n+\t* typeck.c (build_c_cast): Re-enable warning for cast between\n+\tpointer and integer of different size.\n+\n 2000-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* inc/cxxabi.h (__pointer_type_info): Add restrict and"}, {"sha": "acddffe7c8947bedb46f10865aad4959c3615804", "filename": "gcc/cp/class.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -5442,6 +5442,9 @@ resolve_address_of_overloaded_function (target_type,\n \t\t\t&& (TREE_CODE (TREE_TYPE (target_type)) \n \t\t\t    == METHOD_TYPE)), 0);\n \n+  if (TREE_CODE (overload) == COMPONENT_REF)\n+    overload = TREE_OPERAND (overload, 1);\n+\n   /* Check that the TARGET_TYPE is reasonable.  */\n   if (TYPE_PTRFN_P (target_type))\n     /* This is OK.  */\n@@ -5651,6 +5654,7 @@ instantiate_type (lhstype, rhs, flags)\n {\n   int complain = (flags & 1);\n   int strict = (flags & 2) ? COMPARE_NO_ATTRIBUTES : COMPARE_STRICT;\n+  tree r;\n \n   if (TREE_CODE (lhstype) == UNKNOWN_TYPE)\n     {\n@@ -5711,8 +5715,9 @@ instantiate_type (lhstype, rhs, flags)\n \n     case COMPONENT_REF:\n       {\n-\ttree r = instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n+\tr = instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n \n+      comp:\n \tif (r != error_mark_node && TYPE_PTRMEMFUNC_P (lhstype)\n \t    && complain && !flag_ms_extensions)\n \t  {\n@@ -5747,12 +5752,23 @@ instantiate_type (lhstype, rhs, flags)\n       /* Fall through.  */\n \n     case TEMPLATE_ID_EXPR:\n-      return \n-\tresolve_address_of_overloaded_function (lhstype,\n-\t\t\t\t\t\tTREE_OPERAND (rhs, 0),\n-\t\t\t\t\t\tcomplain,\n-\t\t\t\t\t\t/*template_only=*/1,\n-\t\t\t\t\t\tTREE_OPERAND (rhs, 1));\n+      {\n+\ttree fns = TREE_OPERAND (rhs, 0);\n+\ttree args = TREE_OPERAND (rhs, 1);\n+\n+\tr =\n+\t  resolve_address_of_overloaded_function (lhstype,\n+\t\t\t\t\t\t  fns,\n+\t\t\t\t\t\t  complain,\n+\t\t\t\t\t\t  /*template_only=*/1,\n+\t\t\t\t\t\t  args);\n+\tif (TREE_CODE (fns) == COMPONENT_REF)\n+\t  {\n+\t    rhs = fns;\n+\t    goto comp;\n+\t  }\n+\treturn r;\n+      }\n \n     case OVERLOAD:\n       return "}, {"sha": "8f501c0f9b109b861ca79502dfd51cb6aaa3a1c3", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -928,7 +928,11 @@ convert_to_void (expr, implicit)\n                       expr, type, implicit ? implicit : \"void context\");\n         break;\n       }\n-    \n+\n+    case OFFSET_REF:\n+      expr = resolve_offset_ref (expr);\n+      break;\n+\n     default:;\n     }\n   {"}, {"sha": "a6672b6573227e7dd81097e17a4ed5ef8f74fbfc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -6781,6 +6781,7 @@ check_tag_decl (declspecs)\n      tree declspecs;\n {\n   int found_type = 0;\n+  int saw_friend = 0;\n   tree ob_modifier = NULL_TREE;\n   register tree link;\n   register tree t = NULL_TREE;\n@@ -6789,7 +6790,10 @@ check_tag_decl (declspecs)\n     {\n       register tree value = TREE_VALUE (link);\n \n-      if (TYPE_P (value))\n+      if (TYPE_P (value)\n+\t  || (TREE_CODE (value) == IDENTIFIER_NODE\n+\t      && IDENTIFIER_GLOBAL_VALUE (value)\n+\t      && TYPE_P (IDENTIFIER_GLOBAL_VALUE (value))))\n \t{\n \t  ++found_type;\n \n@@ -6804,6 +6808,8 @@ check_tag_decl (declspecs)\n \t  if (current_class_type == NULL_TREE\n \t      || current_scope () != current_class_type)\n \t    ob_modifier = value;\n+\t  else\n+\t    saw_friend = 1;\n \t}\n       else if (value == ridpointers[(int) RID_STATIC]\n \t       || value == ridpointers[(int) RID_EXTERN]\n@@ -6820,9 +6826,7 @@ check_tag_decl (declspecs)\n   if (found_type > 1)\n     error (\"multiple types in one declaration\");\n \n-  /* Inside a class, we might be in a friend or access declaration.\n-     Until we have a good way of detecting the latter, don't warn.  */\n-  if (t == NULL_TREE && ! current_class_type)\n+  if (t == NULL_TREE && ! saw_friend)\n     pedwarn (\"declaration does not declare anything\");\n \n   /* Check for an anonymous union.  We're careful\n@@ -10922,6 +10926,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t Nothing can refer to it, so nothing needs know about the name\n \t change.  */\n       if (type != error_mark_node\n+\t  && declarator\n \t  && TYPE_NAME (type)\n \t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t  && ANON_AGGRNAME_P (TYPE_IDENTIFIER (type))\n@@ -14586,9 +14591,6 @@ void\n cplus_expand_expr_stmt (exp)\n      tree exp;\n {\n-  if (stmts_are_full_exprs_p)\n-    exp = convert_to_void (exp, \"statement\");\n-\n #if 0\n   /* We should do this eventually, but right now this causes regex.o from\n      libg++ to miscompile, and tString to core dump.  */"}, {"sha": "61aa02d2c59f952b9b2b0cc73106770dec970d72", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -4472,6 +4472,8 @@ static tree\n decl_namespace (decl)\n      tree decl;\n {\n+  if (TYPE_P (decl))\n+    decl = TYPE_STUB_DECL (decl);\n   while (DECL_CONTEXT (decl))\n     {\n       decl = DECL_CONTEXT (decl);"}, {"sha": "ed32a2cc51e3ee71774ccd2676f1c53626365e89", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 710, "deletions": 709, "changes": 1419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=2bdb0643b3ae045242492171070c11957727150c"}, {"sha": "ac053ab3a636cf5cc46fb68f5acab697c510c4ab", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -776,7 +776,8 @@ constructor_declarator:\n \n fn.def1:\n \t  typed_declspecs declarator\n-\t\t{ if (!begin_function_definition ($1.t, $2))\n+\t\t{ check_for_new_type (\"return type\", $1);\n+\t\t  if (!begin_function_definition ($1.t, $2))\n \t\t    YYERROR1; }\n \t| declmods notype_declarator\n \t\t{ if (!begin_function_definition ($1.t, $2))"}, {"sha": "1154f41a3723ac205b6a9ae16dd875b3f985bcc5", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -558,7 +558,7 @@ build_dynamic_cast_1 (type, expr)\n      tree type, expr;\n {\n   enum tree_code tc = TREE_CODE (type);\n-  tree exprtype;\n+  tree exprtype = TREE_TYPE (expr);\n   tree dcast_fn;\n   tree old_expr = expr;\n   const char *errstr = NULL;\n@@ -589,10 +589,10 @@ build_dynamic_cast_1 (type, expr)\n     }\n \n   if (TREE_CODE (expr) == OFFSET_REF)\n-    expr = resolve_offset_ref (expr);\n-\n-  exprtype = TREE_TYPE (expr);\n-  assert (exprtype != NULL_TREE);\n+    {\n+      expr = resolve_offset_ref (expr);\n+      exprtype = TREE_TYPE (expr);\n+    }\n \n   if (tc == POINTER_TYPE)\n     expr = convert_from_reference (expr);\n@@ -676,7 +676,12 @@ build_dynamic_cast_1 (type, expr)\n       }\n \n     if (distance >= 0)\n-      return build_vbase_path (PLUS_EXPR, type, expr, path, 0);\n+      {\n+\texpr = build_vbase_path (PLUS_EXPR, type, expr, path, 0);\n+\tif (TREE_CODE (exprtype) == POINTER_TYPE)\n+\t  expr = non_lvalue (expr);\n+\treturn expr;\n+      }\n   }\n \n   /* Otherwise *exprtype must be a polymorphic class (have a vtbl).  */"}, {"sha": "4ff9bee8b5b36d5e724084ac806be8157708c1bf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -141,6 +141,9 @@ finish_expr_stmt (expr)\n \t\t  || TREE_CODE (TREE_TYPE (expr)) == FUNCTION_TYPE))\n \t    expr = default_conversion (expr);\n \n+\t  if (stmts_are_full_exprs_p)\n+\t    expr = convert_to_void (expr, \"statement\");\n+\n \t  if (!processing_template_decl)\n \t    expr = break_out_cleanups (expr);\n "}, {"sha": "6b7cb69c1a28c7bb7a3ff08cff3a40212112db01", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdb0643b3ae045242492171070c11957727150c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2bdb0643b3ae045242492171070c11957727150c", "patch": "@@ -2669,6 +2669,8 @@ build_x_function_call (function, params, decl)\n       return build_method_call (decl, function, params,\n \t\t\t\tNULL_TREE, LOOKUP_NORMAL);\n     }\n+  else if (TREE_CODE (function) == OFFSET_REF)\n+    my_friendly_abort (20000406);\n   else if (TREE_CODE (function) == COMPONENT_REF\n \t   && type == unknown_type_node)\n     {\n@@ -5473,9 +5475,6 @@ build_c_cast (type, expr)\n     cp_warning (\"cast from `%T' to `%T' discards qualifiers from pointer target type\",\n                 otype, type);\n \n-#if 0\n-  /* We should see about re-enabling these, they seem useful to\n-     me.  */\n   if (TREE_CODE (type) == INTEGER_TYPE\n       && TREE_CODE (otype) == POINTER_TYPE\n       && TYPE_PRECISION (type) != TYPE_PRECISION (otype))\n@@ -5488,7 +5487,6 @@ build_c_cast (type, expr)\n \t provided the 0 was explicit--not cast or made by folding.  */\n       && !(TREE_CODE (value) == INTEGER_CST && integer_zerop (value)))\n     warning (\"cast to pointer from integer of different size\");\n-#endif\n \n   if (TREE_CODE (type) == REFERENCE_TYPE)\n     value = (convert_from_reference"}]}