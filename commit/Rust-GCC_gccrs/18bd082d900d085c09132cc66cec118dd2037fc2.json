{"sha": "18bd082d900d085c09132cc66cec118dd2037fc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiZDA4MmQ5MDBkMDg1YzA5MTMyY2M2NmNlYzExOGRkMjAzN2ZjMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-07T07:35:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-07T07:35:51Z"}, "message": "optabs.c (emit_unop_insn): Break out to ...\n\n\n\t* optabs.c (emit_unop_insn): Break out to ...\n\t(maybe_emit_unop_insn): ... this one.\n\t(expand_sfix_optab): Use maybe variant.\n\t* optabs.h (maybe_emit_unop_insn): Declare.\n\n\t* i386.md (mov0 patterns): Enable by default.\n\t(FP conversion expanders): Disable expansion of code expanding\n\tsequences when instruction should be optimized for size.\n\t(single strinop patterns): Enable when optimizing for size.\n\t(string expanders): Disable expanding of code expanding sequences\n\twhen optimizning instruction for size.\n\t* i386.c (ix86_expand_vector_move_misalign): Do code size optimization\n\tper BB basis.\n\t(ix86_fp_comparison_sahf_cost): Likewise.\n\t(ix86_expand_branch): Likewise.\n\t(ix86_expand_ashl_const): Likewise.\n\t(ix86_split_ashl): Likewise.\n\t(ix86_expand_strlen): Likewise.\n\t(ix86_emit_fp_unordered_jump): Likewie.\n\nFrom-SVN: r138835", "tree": {"sha": "d9aabb94673a23bc99338f44a58ccb8a90453ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9aabb94673a23bc99338f44a58ccb8a90453ecc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18bd082d900d085c09132cc66cec118dd2037fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18bd082d900d085c09132cc66cec118dd2037fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18bd082d900d085c09132cc66cec118dd2037fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18bd082d900d085c09132cc66cec118dd2037fc2/comments", "author": null, "committer": null, "parents": [{"sha": "479c7494cf3f825f3fc74792b5ac458bade71537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479c7494cf3f825f3fc74792b5ac458bade71537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479c7494cf3f825f3fc74792b5ac458bade71537"}], "stats": {"total": 399, "additions": 278, "deletions": 121}, "files": [{"sha": "8520ddf28a9a206f2821efc141abbe18977274eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18bd082d900d085c09132cc66cec118dd2037fc2", "patch": "@@ -1,3 +1,25 @@\n+2008-08-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* optabs.c (emit_unop_insn): Break out to ...\n+\t(maybe_emit_unop_insn): ... this one.\n+\t(expand_sfix_optab): Use maybe variant.\n+\t* optabs.h (maybe_emit_unop_insn): Declare.\n+\n+\t* i386.md (mov0 patterns): Enable by default.\n+\t(FP conversion expanders): Disable expansion of code expanding\n+\tsequences when instruction should be optimized for size.\n+\t(single strinop patterns): Enable when optimizing for size.\n+\t(string expanders): Disable expanding of code expanding sequences\n+\twhen optimizning instruction for size.\n+\t* i386.c (ix86_expand_vector_move_misalign): Do code size optimization\n+\tper BB basis.\n+\t(ix86_fp_comparison_sahf_cost): Likewise.\n+\t(ix86_expand_branch): Likewise.\n+\t(ix86_expand_ashl_const): Likewise.\n+\t(ix86_split_ashl): Likewise.\n+\t(ix86_expand_strlen): Likewise.\n+\t(ix86_emit_fp_unordered_jump): Likewie.\n+\n 2008-08-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.c: Fix typo."}, {"sha": "3ebe2627ce69bb5793b8e8558353d22b0719f4b7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=18bd082d900d085c09132cc66cec118dd2037fc2", "patch": "@@ -11808,7 +11808,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n   if (MEM_P (op1))\n     {\n       /* If we're optimizing for size, movups is the smallest.  */\n-      if (optimize_size)\n+      if (optimize_insn_for_size_p ())\n \t{\n \t  op0 = gen_lowpart (V4SFmode, op0);\n \t  op1 = gen_lowpart (V4SFmode, op1);\n@@ -11890,7 +11890,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n   else if (MEM_P (op0))\n     {\n       /* If we're optimizing for size, movups is the smallest.  */\n-      if (optimize_size)\n+      if (optimize_insn_for_size_p ())\n \t{\n \t  op0 = gen_lowpart (V4SFmode, op0);\n \t  op1 = gen_lowpart (V4SFmode, op1);\n@@ -13094,7 +13094,7 @@ ix86_fp_comparison_sahf_cost (enum rtx_code code)\n   enum rtx_code bypass_code, first_code, second_code;\n   /* Return arbitrarily high cost when instruction is not preferred - this\n      avoids gcc from using it.  */\n-  if (!(TARGET_SAHF && (TARGET_USE_SAHF || optimize_size)))\n+  if (!(TARGET_SAHF && (TARGET_USE_SAHF || optimize_insn_for_size_p ())))\n     return 1024;\n   ix86_fp_comparison_codes (code, &bypass_code, &first_code, &second_code);\n   return (bypass_code != UNKNOWN || second_code != UNKNOWN) + 3;\n@@ -13579,7 +13579,7 @@ ix86_expand_branch (enum rtx_code code, rtx label)\n \t   optimizing for size.  */\n \n \tif ((code == EQ || code == NE)\n-\t    && (!optimize_size\n+\t    && (!optimize_insn_for_size_p ()\n \t        || hi[1] == const0_rtx || lo[1] == const0_rtx))\n \t  {\n \t    rtx xor0, xor1;\n@@ -15631,7 +15631,7 @@ ix86_split_long_move (rtx operands[])\n     }\n \n   /* If optimizing for size, attempt to locally unCSE nonzero constants.  */\n-  if (optimize_size)\n+  if (optimize_insn_for_size_p ())\n     {\n       for (j = 0; j < nparts - 1; j++)\n \tif (CONST_INT_P (operands[6 + j])\n@@ -15662,7 +15662,7 @@ ix86_expand_ashl_const (rtx operand, int count, enum machine_mode mode)\n \t\t  ? gen_addsi3\n \t\t  : gen_adddi3) (operand, operand, operand));\n     }\n-  else if (!optimize_size\n+  else if (!optimize_insn_for_size_p ()\n \t   && count * ix86_cost->add <= ix86_cost->shift_const)\n     {\n       int i;\n@@ -15745,7 +15745,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \t{\n \t  rtx x;\n \n-\t  if (TARGET_PARTIAL_REG_STALL && !optimize_size)\n+\t  if (TARGET_PARTIAL_REG_STALL && !optimize_insn_for_size_p ())\n \t    x = gen_rtx_ZERO_EXTEND (mode == DImode ? SImode : DImode, operands[2]);\n \t  else\n \t    x = gen_lowpart (mode == DImode ? SImode : DImode, operands[2]);\n@@ -15777,7 +15777,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n       /* For -1 << N, we can avoid the shld instruction, because we\n \t know that we're shifting 0...31/63 ones into a -1.  */\n       emit_move_insn (low[0], constm1_rtx);\n-      if (optimize_size)\n+      if (optimize_insn_for_size_p ())\n \temit_move_insn (high[0], low[0]);\n       else\n \temit_move_insn (high[0], constm1_rtx);\n@@ -16642,7 +16642,7 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n   if (stringop_alg != no_stringop && ALG_USABLE_P (stringop_alg))\n     return stringop_alg;\n   /* rep; movq or rep; movl is the smallest variant.  */\n-  else if (optimize_size)\n+  else if (optimize_insn_for_size_p ())\n     {\n       if (!count || (count & 3))\n \treturn rep_prefix_usable ? rep_prefix_1_byte : loop_1_byte;\n@@ -17557,15 +17557,15 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n \n   if (TARGET_UNROLL_STRLEN && eoschar == const0_rtx && optimize > 1\n       && !TARGET_INLINE_ALL_STRINGOPS\n-      && !optimize_size\n+      && !optimize_insn_for_size_p ()\n       && (!CONST_INT_P (align) || INTVAL (align) < 4))\n     return 0;\n \n   addr = force_reg (Pmode, XEXP (src, 0));\n   scratch1 = gen_reg_rtx (Pmode);\n \n   if (TARGET_UNROLL_STRLEN && eoschar == const0_rtx && optimize > 1\n-      && !optimize_size)\n+      && !optimize_insn_for_size_p ())\n     {\n       /* Well it seems that some optimizer does not combine a call like\n          foo(strlen(bar), strlen(bar));\n@@ -23185,7 +23185,7 @@ static tree\n ix86_builtin_reciprocal (unsigned int fn, bool md_fn,\n \t\t\t bool sqrt ATTRIBUTE_UNUSED)\n {\n-  if (! (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+  if (! (TARGET_SSE_MATH && TARGET_RECIP && !optimize_insn_for_size_p ()\n \t && flag_finite_math_only && !flag_trapping_math\n \t && flag_unsafe_math_optimizations))\n     return NULL_TREE;\n@@ -26137,7 +26137,7 @@ ix86_emit_fp_unordered_jump (rtx label)\n \n   emit_insn (gen_x86_fnstsw_1 (reg));\n \n-  if (TARGET_SAHF && (TARGET_USE_SAHF || optimize_size))\n+  if (TARGET_SAHF && (TARGET_USE_SAHF || optimize_insn_for_size_p ()))\n     {\n       emit_insn (gen_x86_sahf_1 (reg));\n "}, {"sha": "1321fed647bad7555cb1d880ade4dced43ec8f1d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 220, "deletions": 104, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=18bd082d900d085c09132cc66cec118dd2037fc2", "patch": "@@ -1419,7 +1419,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\"\n+  \"reload_completed\"\n   \"xor{l}\\t%0, %0\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")\n@@ -1430,8 +1430,7 @@\n \t(match_operand:SI 1 \"immediate_operand\" \"i\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n-   && operands[1] == constm1_rtx\n-   && (TARGET_MOVE_M1_VIA_OR || optimize_size)\"\n+   && operands[1] == constm1_rtx\"\n {\n   operands[1] = constm1_rtx;\n   return \"or{l}\\t{%1, %0|%0, %1}\";\n@@ -1710,8 +1709,7 @@\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+r\"))\n \t(match_operand:HI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\n-   && ((!TARGET_USE_MOV0 && !TARGET_PARTIAL_REG_STALL) || optimize_size)\"\n+  \"reload_completed\"\n   \"xor{w}\\t%0, %0\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"HI\")\n@@ -1867,7 +1865,7 @@\n   [(set (strict_low_part (match_operand:QI 0 \"q_regs_operand\" \"+q\"))\n \t(match_operand:QI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\"\n+  \"reload_completed\"\n   \"xor{b}\\t%0, %0\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")\n@@ -2193,7 +2191,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (!TARGET_USE_MOV0 || optimize_size)\n+  \"TARGET_64BIT\n    && reload_completed\"\n   \"xor{l}\\t%k0, %k0\";\n   [(set_attr \"type\" \"alu1\")\n@@ -2204,7 +2202,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"const_int_operand\" \"i\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (TARGET_MOVE_M1_VIA_OR || optimize_size)\n+  \"TARGET_64BIT\n    && reload_completed\n    && operands[1] == constm1_rtx\"\n {\n@@ -4502,13 +4500,16 @@\n      (use (match_dup 2))\n      (clobber (match_scratch:<ssevecmode> 3 \"\"))\n      (clobber (match_scratch:<ssevecmode> 4 \"\"))])]\n-  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH && !optimize_size\"\n+  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   enum machine_mode mode = <MODE>mode;\n   enum machine_mode vecmode = <ssevecmode>mode;\n   REAL_VALUE_TYPE TWO31r;\n   rtx two31;\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   real_ldexp (&TWO31r, &dconst1, 31);\n   two31 = const_double_from_real_value (TWO31r, mode);\n   two31 = ix86_build_const_vector (mode, true, two31);\n@@ -8215,7 +8216,7 @@\n \t\t(match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387 || TARGET_SSE_MATH\"\n {\n-  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+  if (TARGET_SSE_MATH && TARGET_RECIP && optimize_insn_for_speed_p ()\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {\n@@ -16911,10 +16912,13 @@\n \t\t\t      UNSPEC_FPATAN))\n    \t      (clobber (match_scratch:XF 6 \"\"))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   for (i = 2; i < 6; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n \n@@ -16927,11 +16931,14 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n   rtx op0 = gen_reg_rtx (XFmode);\n   rtx op1 = gen_reg_rtx (XFmode);\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_asinxf2 (op0, op1));\n   emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n@@ -16949,10 +16956,13 @@\n \t\t\t      UNSPEC_FPATAN))\n    \t      (clobber (match_scratch:XF 6 \"\"))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   for (i = 2; i < 6; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n \n@@ -16965,11 +16975,14 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n   rtx op0 = gen_reg_rtx (XFmode);\n   rtx op1 = gen_reg_rtx (XFmode);\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_acosxf2 (op0, op1));\n   emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n@@ -17124,8 +17137,11 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   ix86_emit_i387_log1p (operands[0], operands[1]);\n   DONE;\n })\n@@ -17136,9 +17152,14 @@\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op0;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n \n   operands[1] = gen_rtx_FLOAT_EXTEND (XFmode, operands[1]);\n \n@@ -17206,10 +17227,15 @@\n   [(use (match_operand:SI 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_fxtractxf3_i387 (op0, op1, operands[1]));\n   emit_insn (gen_fix_truncxfsi2 (operands[0], op1));\n@@ -17222,10 +17248,15 @@\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_fxtract_extend<mode>xf3_i387 (op0, op1, operands[1]));\n   emit_insn (gen_fix_truncxfsi2 (operands[0], op1));\n@@ -17270,10 +17301,13 @@\n \t\t   (unspec:XF [(match_dup 8) (match_dup 4)]\n \t\t\t      UNSPEC_FSCALE_EXP))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   for (i = 3; i < 10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n \n@@ -17284,9 +17318,14 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op2 = gen_reg_rtx (XFmode);\n+  rtx op2;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op2 = gen_reg_rtx (XFmode);\n   emit_move_insn (op2, standard_80387_constant_rtx (5)); /* fldl2e */\n \n   emit_insn (gen_expNcorexf3 (operands[0], operands[1], op2));\n@@ -17299,10 +17338,15 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_expxf2 (op0, op1));\n@@ -17314,9 +17358,14 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op2 = gen_reg_rtx (XFmode);\n+  rtx op2;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op2 = gen_reg_rtx (XFmode);\n   emit_move_insn (op2, standard_80387_constant_rtx (6)); /* fldl2t */\n \n   emit_insn (gen_expNcorexf3 (operands[0], operands[1], op2));\n@@ -17329,10 +17378,15 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_exp10xf2 (op0, op1));\n@@ -17344,9 +17398,14 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op2 = gen_reg_rtx (XFmode);\n+  rtx op2;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op2 = gen_reg_rtx (XFmode);\n   emit_move_insn (op2, CONST1_RTX (XFmode));  /* fld1 */\n \n   emit_insn (gen_expNcorexf3 (operands[0], operands[1], op2));\n@@ -17359,10 +17418,15 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_exp2xf2 (op0, op1));\n@@ -17394,10 +17458,13 @@\n    (set (match_operand:XF 0 \"register_operand\" \"\")\n \t(plus:XF (match_dup 12) (match_dup 7)))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   for (i = 2; i < 13; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n \n@@ -17413,10 +17480,15 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_expm1xf2 (op0, op1));\n@@ -17435,8 +17507,11 @@\n \t\t   (unspec:XF [(match_dup 1) (match_dup 3)]\n \t\t\t      UNSPEC_FSCALE_EXP))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   operands[3] = gen_reg_rtx (XFmode);\n   operands[4] = gen_reg_rtx (XFmode);\n })\n@@ -17448,10 +17523,15 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op0, op1;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_ldexpxf3 (op0, op1, operands[2]));\n@@ -17468,8 +17548,11 @@\n \t\t   (unspec:XF [(match_dup 1) (match_dup 2)]\n \t\t\t      UNSPEC_FSCALE_EXP))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n   operands[3] = gen_reg_rtx (XFmode);\n })\n \n@@ -17480,11 +17563,16 @@\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n-  rtx op2 = gen_reg_rtx (XFmode);\n+  rtx op0, op1, op2;\n+\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n+\n+  op0 = gen_reg_rtx (XFmode);\n+  op1 = gen_reg_rtx (XFmode);\n+  op2 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_extend<mode>xf2 (op2, operands[2]));\n@@ -17523,13 +17611,13 @@\n \t|| TARGET_MIX_SSE_I387)\n     && flag_unsafe_math_optimizations)\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math\n-       && (TARGET_ROUND || !optimize_size))\"\n+       && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math\n-      && (TARGET_ROUND || !optimize_size))\n+      && !flag_trapping_math)\n     {\n+      if (!TARGET_ROUND && optimize_insn_for_size_p ())\n+\tFAIL;\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (0x04)));\n@@ -17553,9 +17641,10 @@\n   [(match_operand:MODEF 0 \"register_operand\" \"\")\n    (match_operand:MODEF 1 \"nonimmediate_operand\" \"\")]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-   && !flag_trapping_math && !flag_rounding_math\n-   && !optimize_size\"\n+   && !flag_trapping_math && !flag_rounding_math\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n   if (TARGET_64BIT || (<MODE>mode != DFmode))\n     ix86_expand_round (operand0, operand1);\n   else\n@@ -17706,9 +17795,10 @@\n    (match_operand:MODEF 1 \"register_operand\" \"\")]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && ((<SSEMODEI24:MODE>mode != DImode) || TARGET_64BIT)\n-   && !flag_trapping_math && !flag_rounding_math\n-   && !optimize_size\"\n+   && !flag_trapping_math && !flag_rounding_math\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n   ix86_expand_lround (operand0, operand1);\n   DONE;\n })\n@@ -17756,8 +17846,10 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n   emit_insn (gen_frndintxf2_floor (operands[0], operands[1]));\n   DONE;\n })\n@@ -17768,15 +17860,16 @@\n   \"(TARGET_USE_FANCY_MATH_387\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n \t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations && !optimize_size)\n+    && flag_unsafe_math_optimizations)\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math\n-       && (TARGET_ROUND || !optimize_size))\"\n+       && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math\n-      && (TARGET_ROUND || !optimize_size))\n+      && (TARGET_ROUND || optimize_insn_for_speed_p ()))\n     {\n+      if (!TARGET_ROUND && optimize_insn_for_size_p ())\n+\tFAIL;\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (0x01)));\n@@ -17787,9 +17880,13 @@\n     }\n   else\n     {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n+      rtx op0, op1;\n+\n+      if (optimize_insn_for_size_p ())\n+\tFAIL;\n \n+      op0 = gen_reg_rtx (XFmode);\n+      op1 = gen_reg_rtx (XFmode);\n       emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n       emit_insn (gen_frndintxf2_floor (op0, op1));\n \n@@ -17960,9 +18057,10 @@\n   [(match_operand:DI 0 \"nonimmediate_operand\" \"\")\n    (match_operand:MODEF 1 \"register_operand\" \"\")]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH && TARGET_64BIT\n-   && !flag_trapping_math\n-   && !optimize_size\"\n+   && !flag_trapping_math\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n   ix86_expand_lfloorceil (operand0, operand1, true);\n   DONE;\n })\n@@ -17971,9 +18069,10 @@\n   [(match_operand:SI 0 \"nonimmediate_operand\" \"\")\n    (match_operand:MODEF 1 \"register_operand\" \"\")]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-   && !flag_trapping_math\n-   && (!optimize_size || !TARGET_64BIT)\"\n+   && !flag_trapping_math\"\n {\n+  if (optimize_insn_for_size_p () && TARGET_64BIT)\n+    FAIL;\n   ix86_expand_lfloorceil (operand0, operand1, true);\n   DONE;\n })\n@@ -18021,8 +18120,10 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n   emit_insn (gen_frndintxf2_ceil (operands[0], operands[1]));\n   DONE;\n })\n@@ -18033,28 +18134,33 @@\n   \"(TARGET_USE_FANCY_MATH_387\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n \t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations && !optimize_size)\n+    && flag_unsafe_math_optimizations)\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math\n-       && (TARGET_ROUND || !optimize_size))\"\n+       && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math\n-      && (TARGET_ROUND || !optimize_size))\n+      && (TARGET_ROUND || optimize_insn_for_speed_p ()))\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (0x02)));\n+      else if (optimize_insn_for_size_p ())\n+\tFAIL;\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_floorceil (operand0, operand1, false);\n       else\n \tix86_expand_floorceildf_32 (operand0, operand1, false);\n     }\n   else\n     {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n+      rtx op0, op1;\n+\n+      if (optimize_insn_for_size_p ())\n+\tFAIL;\n \n+      op0 = gen_reg_rtx (XFmode);\n+      op1 = gen_reg_rtx (XFmode);\n       emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n       emit_insn (gen_frndintxf2_ceil (op0, op1));\n \n@@ -18284,8 +18390,10 @@\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations && !optimize_size\"\n+   && flag_unsafe_math_optimizations\"\n {\n+  if (optimize_insn_for_size_p ())\n+    FAIL;\n   emit_insn (gen_frndintxf2_trunc (operands[0], operands[1]));\n   DONE;\n })\n@@ -18296,28 +18404,33 @@\n   \"(TARGET_USE_FANCY_MATH_387\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n \t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations && !optimize_size)\n+    && flag_unsafe_math_optimizations)\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math\n-       && (TARGET_ROUND || !optimize_size))\"\n+       && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math\n-      && (TARGET_ROUND || !optimize_size))\n+      && (TARGET_ROUND || optimize_insn_for_speed_p ()))\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (0x03)));\n+      else if (optimize_insn_for_size_p ())\n+\tFAIL;\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_trunc (operand0, operand1);\n       else\n \tix86_expand_truncdf_32 (operand0, operand1);\n     }\n   else\n     {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n+      rtx op0, op1;\n+\n+      if (optimize_insn_for_size_p ())\n+\tFAIL;\n \n+      op0 = gen_reg_rtx (XFmode);\n+      op1 = gen_reg_rtx (XFmode);\n       emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n       emit_insn (gen_frndintxf2_trunc (op0, op1));\n \n@@ -18508,7 +18621,7 @@\n   operands[6] = gen_rtx_PLUS (Pmode, operands[2], adjust);\n \n   /* Can't use this if the user has appropriated esi or edi.  */\n-  if ((TARGET_SINGLE_STRINGOP || optimize_size)\n+  if ((TARGET_SINGLE_STRINGOP || optimize_insn_for_size_p ())\n       && !(fixed_regs[SI_REG] || fixed_regs[DI_REG]))\n     {\n       emit_insn (gen_strmov_singleop (operands[0], operands[1],\n@@ -18527,7 +18640,7 @@\n \t\t   (match_operand 4 \"\" \"\"))\n \t      (set (match_operand 2 \"register_operand\" \"\")\n \t\t   (match_operand 5 \"\" \"\"))])]\n-  \"TARGET_SINGLE_STRINGOP || optimize_size\"\n+  \"\"\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strmovdi_rex_1\"\n@@ -18539,7 +18652,7 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n \t\t (const_int 8)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"DI\")\n@@ -18554,7 +18667,7 @@\n    (set (match_operand:SI 1 \"register_operand\" \"=S\")\n \t(plus:SI (match_dup 3)\n \t\t (const_int 4)))]\n-  \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"!TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"SI\")\n@@ -18569,7 +18682,7 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n \t\t (const_int 4)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"SI\")\n@@ -18584,7 +18697,7 @@\n    (set (match_operand:SI 1 \"register_operand\" \"=S\")\n \t(plus:SI (match_dup 3)\n \t\t (const_int 2)))]\n-  \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"!TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movsw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -18599,7 +18712,7 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n \t\t (const_int 2)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movsw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -18614,7 +18727,7 @@\n    (set (match_operand:SI 1 \"register_operand\" \"=S\")\n \t(plus:SI (match_dup 3)\n \t\t (const_int 1)))]\n-  \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"!TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -18629,7 +18742,7 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n \t\t (const_int 1)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -18791,7 +18904,7 @@\n   operands[3] = gen_rtx_PLUS (Pmode, operands[0],\n \t\t\t      GEN_INT (GET_MODE_SIZE (GET_MODE\n \t\t\t\t\t\t      (operands[2]))));\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n+  if (TARGET_SINGLE_STRINGOP || optimize_insn_for_size_p ())\n     {\n       emit_insn (gen_strset_singleop (operands[0], operands[1], operands[2],\n \t\t\t\t      operands[3]));\n@@ -18804,7 +18917,7 @@\n \t\t   (match_operand 2 \"register_operand\" \"\"))\n \t      (set (match_operand 0 \"register_operand\" \"\")\n \t\t   (match_operand 3 \"\" \"\"))])]\n-  \"TARGET_SINGLE_STRINGOP || optimize_size\"\n+  \"TARGET_SINGLE_STRINGOP\"\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strsetdi_rex_1\"\n@@ -18813,7 +18926,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int 8)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18825,7 +18938,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int 4)))]\n-  \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"!TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18837,7 +18950,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int 4)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18849,7 +18962,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int 2)))]\n-  \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"!TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stosw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18861,7 +18974,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int 2)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stosw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18873,7 +18986,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int 1)))]\n-  \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"!TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18885,7 +18998,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int 1)))]\n-  \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n+  \"TARGET_64BIT && TARGET_SINGLE_STRINGOP\"\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -18990,10 +19103,13 @@\n \t\t    (match_operand:BLK 2 \"general_operand\" \"\")))\n    (use (match_operand 3 \"general_operand\" \"\"))\n    (use (match_operand 4 \"immediate_operand\" \"\"))]\n-  \"! optimize_size || TARGET_INLINE_ALL_STRINGOPS\"\n+  \"\"\n {\n   rtx addr1, addr2, out, outlow, count, countreg, align;\n \n+  if (optimize_insn_for_size_p () && !TARGET_INLINE_ALL_STRINGOPS)\n+    FAIL;\n+\n   /* Can't use this if the user has appropriated esi or edi.  */\n   if (fixed_regs[SI_REG] || fixed_regs[DI_REG])\n     FAIL;"}, {"sha": "5b27720dd8c46914dd97c405be69eed447c1a08a", "filename": "gcc/optabs.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=18bd082d900d085c09132cc66cec118dd2037fc2", "patch": "@@ -3759,10 +3759,12 @@ expand_copysign (rtx op0, rtx op1, rtx target)\n    with two operands: an output TARGET and an input OP0.\n    TARGET *must* be nonzero, and the output is always stored there.\n    CODE is an rtx code such that (CODE OP0) is an rtx that describes\n-   the value that is stored into TARGET.  */\n+   the value that is stored into TARGET. \n \n-void\n-emit_unop_insn (int icode, rtx target, rtx op0, enum rtx_code code)\n+   Return false if expansion failed.  */\n+\n+bool\n+maybe_emit_unop_insn (int icode, rtx target, rtx op0, enum rtx_code code)\n {\n   rtx temp;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n@@ -3779,6 +3781,8 @@ emit_unop_insn (int icode, rtx target, rtx op0, enum rtx_code code)\n     temp = gen_reg_rtx (GET_MODE (temp));\n \n   pat = GEN_FCN (icode) (temp, op0);\n+  if (!pat)\n+    return false;\n \n   if (INSN_P (pat) && NEXT_INSN (pat) != NULL_RTX && code != UNKNOWN)\n     add_equal_note (pat, temp, code, op0, NULL_RTX);\n@@ -3787,6 +3791,19 @@ emit_unop_insn (int icode, rtx target, rtx op0, enum rtx_code code)\n \n   if (temp != target)\n     emit_move_insn (target, temp);\n+  return true;\n+}\n+/* Generate an instruction whose insn-code is INSN_CODE,\n+   with two operands: an output TARGET and an input OP0.\n+   TARGET *must* be nonzero, and the output is always stored there.\n+   CODE is an rtx code such that (CODE OP0) is an rtx that describes\n+   the value that is stored into TARGET.  */\n+\n+void\n+emit_unop_insn (int icode, rtx target, rtx op0, enum rtx_code code)\n+{\n+  bool ok = maybe_emit_unop_insn (icode, target, op0, code);\n+  gcc_assert (ok);\n }\n \f\n struct no_conflict_data\n@@ -5371,7 +5388,8 @@ expand_sfix_optab (rtx to, rtx from, convert_optab tab)\n \t    if (imode != GET_MODE (to))\n \t      target = gen_reg_rtx (imode);\n \n-\t    emit_unop_insn (icode, target, from, UNKNOWN);\n+\t    if (!maybe_emit_unop_insn (icode, target, from, UNKNOWN))\n+\t      return false;\n \t    if (target != to)\n \t      convert_move (to, target, 0);\n \t    return true;"}, {"sha": "4d0ce5245ea3a4c0fe118419e98bebdda910f9cf", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bd082d900d085c09132cc66cec118dd2037fc2/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=18bd082d900d085c09132cc66cec118dd2037fc2", "patch": "@@ -722,6 +722,7 @@ extern rtx expand_copysign (rtx, rtx, rtx);\n /* Generate an instruction with a given INSN_CODE with an output and\n    an input.  */\n extern void emit_unop_insn (int, rtx, rtx, enum rtx_code);\n+extern bool maybe_emit_unop_insn (int, rtx, rtx, enum rtx_code);\n \n /* Emit one rtl insn to compare two rtx's.  */\n extern void emit_cmp_insn (rtx, rtx, enum rtx_code, rtx, enum machine_mode,"}]}