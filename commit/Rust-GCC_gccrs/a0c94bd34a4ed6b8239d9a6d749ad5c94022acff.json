{"sha": "a0c94bd34a4ed6b8239d9a6d749ad5c94022acff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjOTRiZDM0YTRlZDZiODIzOWQ5YTZkNzQ5YWQ1Yzk0MDIyYWNmZg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-01-23T18:12:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-04T09:11:04Z"}, "message": "[Ada] Missing accessibility check on access discriminant in extended return\n\n2020-06-04  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Change to\n\tCheck_Return_Construct_Accessibility to better reflect its\n\tpurpose.  Add loop to properly obtain the object declaration\n\tfrom an expanded extended return statement and add calls to get\n\tthe original node for associated values. Also, avoid checks when\n\tthe return statement being examined comes from an internally\n\tgenerated function.", "tree": {"sha": "b0d503524a4470575126995ae6dd1a341160d6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d503524a4470575126995ae6dd1a341160d6c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c94bd34a4ed6b8239d9a6d749ad5c94022acff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c94bd34a4ed6b8239d9a6d749ad5c94022acff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c94bd34a4ed6b8239d9a6d749ad5c94022acff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c94bd34a4ed6b8239d9a6d749ad5c94022acff/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c02e403d145989ed9f291123689baa96f455fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c02e403d145989ed9f291123689baa96f455fb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c02e403d145989ed9f291123689baa96f455fb5"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "a01fe00ab80c206274fbff7f273c033e2b102caf", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c94bd34a4ed6b8239d9a6d749ad5c94022acff/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c94bd34a4ed6b8239d9a6d749ad5c94022acff/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a0c94bd34a4ed6b8239d9a6d749ad5c94022acff", "patch": "@@ -696,32 +696,34 @@ package body Sem_Ch6 is\n       R_Type : constant Entity_Id := Etype (Scope_Id);\n       --  Function result subtype\n \n-      procedure Check_Return_Obj_Accessibility (Return_Stmt : Node_Id);\n+      procedure Check_Return_Construct_Accessibility (Return_Stmt : Node_Id);\n       --  Apply legality rule of 6.5 (5.9) to the access discriminants of an\n       --  aggregate in a return statement.\n \n       procedure Check_Return_Subtype_Indication (Obj_Decl : Node_Id);\n       --  Check that the return_subtype_indication properly matches the result\n       --  subtype of the function, as required by RM-6.5(5.1/2-5.3/2).\n \n-      ------------------------------------\n-      -- Check_Return_Obj_Accessibility --\n-      ------------------------------------\n+      ------------------------------------------\n+      -- Check_Return_Construct_Accessibility --\n+      ------------------------------------------\n \n-      procedure Check_Return_Obj_Accessibility (Return_Stmt : Node_Id) is\n+      procedure Check_Return_Construct_Accessibility (Return_Stmt : Node_Id) is\n          Assoc         : Node_Id;\n          Agg           : Node_Id := Empty;\n          Discr         : Entity_Id;\n          Expr          : Node_Id;\n          Obj           : Node_Id;\n          Process_Exprs : Boolean := False;\n-         Return_Obj    : Node_Id;\n+         Return_Con    : Node_Id;\n \n       begin\n-         --  Only perform checks on record types with access discriminants\n+         --  Only perform checks on record types with access discriminants and\n+         --  non-internally generated functions.\n \n          if not Is_Record_Type (R_Type)\n            or else not Has_Discriminants (R_Type)\n+           or else not Comes_From_Source (Return_Stmt)\n          then\n             return;\n          end if;\n@@ -738,32 +740,47 @@ package body Sem_Ch6 is\n          --  simple return statement the expression is part of the node.\n \n          if Nkind (Return_Stmt) = N_Extended_Return_Statement then\n-            Return_Obj := Last (Return_Object_Declarations (Return_Stmt));\n+            --  Obtain the object definition from the expanded extended return\n \n-            --  We could be looking at something that's been expanded with\n-            --  an initialzation procedure which we can safely ignore.\n+            Return_Con := First (Return_Object_Declarations (Return_Stmt));\n+            while Present (Return_Con) loop\n+               --  Inspect the original node to avoid object declarations\n+               --  expanded into renamings.\n \n-            if Nkind (Return_Obj) /= N_Object_Declaration then\n-               return;\n-            end if;\n+               if Nkind (Original_Node (Return_Con)) = N_Object_Declaration\n+                 and then Comes_From_Source (Original_Node (Return_Con))\n+               then\n+                  exit;\n+               end if;\n+\n+               Nlists.Next (Return_Con);\n+            end loop;\n+\n+            pragma Assert (Present (Return_Con));\n+\n+            --  Could be dealing with a renaming\n+\n+            Return_Con := Original_Node (Return_Con);\n          else\n-            Return_Obj := Return_Stmt;\n+            Return_Con := Return_Stmt;\n          end if;\n \n          --  We may need to check an aggregate or a subtype indication\n          --  depending on how the discriminants were specified and whether\n          --  we are looking at an extended return statement.\n \n-         if Nkind (Return_Obj) = N_Object_Declaration\n-           and then Nkind (Object_Definition (Return_Obj))\n+         if Nkind (Return_Con) = N_Object_Declaration\n+           and then Nkind (Object_Definition (Return_Con))\n                       = N_Subtype_Indication\n          then\n-            Assoc := First (Constraints\n-                             (Constraint (Object_Definition (Return_Obj))));\n+            Assoc := Original_Node\n+                       (First\n+                         (Constraints\n+                           (Constraint (Object_Definition (Return_Con)))));\n          else\n             --  Qualified expressions may be nested\n \n-            Agg := Original_Node (Expression (Return_Obj));\n+            Agg := Original_Node (Expression (Return_Con));\n             while Nkind (Agg) = N_Qualified_Expression loop\n                Agg := Original_Node (Expression (Agg));\n             end loop;\n@@ -896,7 +913,7 @@ package body Sem_Ch6 is\n                end if;\n             end if;\n          end loop;\n-      end Check_Return_Obj_Accessibility;\n+      end Check_Return_Construct_Accessibility;\n \n       -------------------------------------\n       -- Check_Return_Subtype_Indication --\n@@ -1103,7 +1120,7 @@ package body Sem_Ch6 is\n             Resolve (Expr, R_Type);\n             Check_Limited_Return (N, Expr, R_Type);\n \n-            Check_Return_Obj_Accessibility (N);\n+            Check_Return_Construct_Accessibility (N);\n          end if;\n \n          --  RETURN only allowed in SPARK as the last statement in function\n@@ -1159,7 +1176,7 @@ package body Sem_Ch6 is\n \n             Check_References (Stm_Entity);\n \n-            Check_Return_Obj_Accessibility (N);\n+            Check_Return_Construct_Accessibility (N);\n \n             --  Check RM 6.5 (5.9/3)\n "}]}