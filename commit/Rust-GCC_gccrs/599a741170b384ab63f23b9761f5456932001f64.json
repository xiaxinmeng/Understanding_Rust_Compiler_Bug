{"sha": "599a741170b384ab63f23b9761f5456932001f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk5YTc0MTE3MGIzODRhYjYzZjIzYjk3NjFmNTQ1NjkzMjAwMWY2NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:12:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:12:36Z"}, "message": "[multiple changes]\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting.\n\t* einfo.ads, einfo.adb (Is_Ada_2012_Only): New flag\n\t* itypes.adb (Create_Null_Excluding_Itype): Set Is_Ada_2012_Only flag\n\tproperly.\n\t* lib-xref.adb (Generate_Reference): Warn on use of Ada 2012 entity in\n\tnon-Ada 2012 mode.\n\t* opt.ads (Warn_On_Ada_2012_Compatibility): New flag\n\t* sem_ch3.adb (Analye_Subtype_Declaration): Inherit Is_Ada_2012_Only\n\t* sem_ch7.adb (Preserve_Full_Attributes): Preserve Is_Ada_2012_Only\n\tflag.\n\t* sem_prag.adb (Analyze_Pragma, case Ada_12/Ada_2012): Allow form with\n\targument.\n\t* sem_type.adb (Disambiguate): Deal with Is_Ada_2012_Only.\n\t* sem_warn.adb (Warn_On_Ada_2012_Compatibility): New flag, treated\n\tsame as 2005 flag.\n\n2010-10-07  Javier Miranda  <miranda@adacore.com>\n\n\t* a-tags.ads: Use new support for pragma Ada_2012 with function\n\tType_Is_Abstract.\n\nFrom-SVN: r165082", "tree": {"sha": "1c6828774f1440e62389af41a529b13b12382b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c6828774f1440e62389af41a529b13b12382b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/599a741170b384ab63f23b9761f5456932001f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599a741170b384ab63f23b9761f5456932001f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599a741170b384ab63f23b9761f5456932001f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599a741170b384ab63f23b9761f5456932001f64/comments", "author": null, "committer": null, "parents": [{"sha": "0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95"}], "stats": {"total": 164, "additions": 137, "deletions": 27}, "files": [{"sha": "c774342f9248bacd75d9e39d24b95991783c3451", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -1,3 +1,26 @@\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting.\n+\t* einfo.ads, einfo.adb (Is_Ada_2012_Only): New flag\n+\t* itypes.adb (Create_Null_Excluding_Itype): Set Is_Ada_2012_Only flag\n+\tproperly.\n+\t* lib-xref.adb (Generate_Reference): Warn on use of Ada 2012 entity in\n+\tnon-Ada 2012 mode.\n+\t* opt.ads (Warn_On_Ada_2012_Compatibility): New flag\n+\t* sem_ch3.adb (Analye_Subtype_Declaration): Inherit Is_Ada_2012_Only\n+\t* sem_ch7.adb (Preserve_Full_Attributes): Preserve Is_Ada_2012_Only\n+\tflag.\n+\t* sem_prag.adb (Analyze_Pragma, case Ada_12/Ada_2012): Allow form with\n+\targument.\n+\t* sem_type.adb (Disambiguate): Deal with Is_Ada_2012_Only.\n+\t* sem_warn.adb (Warn_On_Ada_2012_Compatibility): New flag, treated\n+\tsame as 2005 flag.\n+\n+2010-10-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads: Use new support for pragma Ada_2012 with function\n+\tType_Is_Abstract.\n+\n 2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n \n \t* par-ch5.adb (P_Sequence_Of_Statements): In Ada2012 a label can end a"}, {"sha": "69ebedc5c0dbef3663c9239c2fb39f41c72a03f5", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -76,7 +76,7 @@ package Ada.Tags is\n    pragma Ada_05 (Interface_Ancestor_Tags);\n \n    function Type_Is_Abstract (T : Tag) return Boolean;\n-   pragma Ada_05 (Type_Is_Abstract);\n+   pragma Ada_2012 (Type_Is_Abstract);\n \n    Tag_Error : exception;\n "}, {"sha": "6fe87a7d4db8537ef4e3570132becd25403b1fa4", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -457,6 +457,7 @@ package body Einfo is\n    --    Was_Hidden                      Flag196\n    --    Is_Limited_Interface            Flag197\n    --    Has_Pragma_Ordered              Flag198\n+   --    Is_Ada_2012_Only                Flag199\n \n    --    Has_Anon_Block_Suffix           Flag201\n    --    Itype_Printed                   Flag202\n@@ -510,7 +511,6 @@ package body Einfo is\n    --    Is_Underlying_Record_View       Flag246\n    --    OK_To_Rename                    Flag247\n \n-   --    (unused)                        Flag199\n    --    (unused)                        Flag200\n \n    -----------------------\n@@ -1609,6 +1609,11 @@ package body Einfo is\n       return Flag185 (Id);\n    end Is_Ada_2005_Only;\n \n+   function Is_Ada_2012_Only (Id : E) return B is\n+   begin\n+      return Flag199 (Id);\n+   end Is_Ada_2012_Only;\n+\n    function Is_Aliased (Id : E) return B is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n@@ -4029,6 +4034,11 @@ package body Einfo is\n       Set_Flag185 (Id, V);\n    end Set_Is_Ada_2005_Only;\n \n+   procedure Set_Is_Ada_2012_Only (Id : E; V : B := True) is\n+   begin\n+      Set_Flag199 (Id, V);\n+   end Set_Is_Ada_2012_Only;\n+\n    procedure Set_Is_Aliased (Id : E; V : B := True) is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n@@ -6958,6 +6968,7 @@ package body Einfo is\n       W (\"Is_Local_Anonymous_Access\",       Flag194 (Id));\n       W (\"Is_Access_Constant\",              Flag69  (Id));\n       W (\"Is_Ada_2005_Only\",                Flag185 (Id));\n+      W (\"Is_Ada_2012_Only\",                Flag199 (Id));\n       W (\"Is_Aliased\",                      Flag15  (Id));\n       W (\"Is_Asynchronous\",                 Flag81  (Id));\n       W (\"Is_Atomic\",                       Flag85  (Id));"}, {"sha": "ed91d5e091261e9739f38c3ccc6557d60253e0eb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -1889,10 +1889,18 @@ package Einfo is\n --       Applies to all entities, true for access types and subtypes\n \n --    Is_Ada_2005_Only (Flag185)\n---       Present in all entities, true if a valid pragma Ada_05 applies to the\n---       entity which specifically names the entity, indicating that the entity\n---       is Ada 2005 only. Note that this flag is not set if the entity is part\n---       of a unit compiled with the normal no-argument form of pragma Ada_05.\n+--       Present in all entities, true if a valid pragma Ada_05 or Ada_2005\n+--       applies to the entity which specifically names the entity, indicating\n+--       that the entity is Ada 2005 only. Note that this flag is not set if\n+--       the entity is part of a unit compiled with the normal no-argument form\n+--       of pragma Ada_05 or Ada_2005.\n+\n+--    Is_Ada_2012_Only (Flag199)\n+--       Present in all entities, true if a valid pragma Ada_12 or Ada_2012\n+--       applies to the entity which specifically names the entity, indicating\n+--       that the entity is Ada 2012 only. Note that this flag is not set if\n+--       the entity is part of a unit compiled with the normal no-argument form\n+--       of pragma Ada_12 or Ada_2012.\n \n --    Is_Aliased (Flag15)\n --       Present in objects whose declarations carry the keyword aliased,\n@@ -4589,6 +4597,7 @@ package Einfo is\n    --    Has_Xref_Entry                      (Flag182)\n    --    In_Private_Part                     (Flag45)\n    --    Is_Ada_2005_Only                    (Flag185)\n+   --    Is_Ada_2012_Only                    (Flag199)\n    --    Is_Bit_Packed_Array                 (Flag122)  (base type only)\n    --    Is_Character_Type                   (Flag63)\n    --    Is_Child_Unit                       (Flag73)\n@@ -5932,6 +5941,7 @@ package Einfo is\n    function Is_Abstract_Type                    (Id : E) return B;\n    function Is_Access_Constant                  (Id : E) return B;\n    function Is_Ada_2005_Only                    (Id : E) return B;\n+   function Is_Ada_2012_Only                    (Id : E) return B;\n    function Is_Aliased                          (Id : E) return B;\n    function Is_Asynchronous                     (Id : E) return B;\n    function Is_Atomic                           (Id : E) return B;\n@@ -6493,6 +6503,7 @@ package Einfo is\n    procedure Set_Is_Abstract_Type                (Id : E; V : B := True);\n    procedure Set_Is_Access_Constant              (Id : E; V : B := True);\n    procedure Set_Is_Ada_2005_Only                (Id : E; V : B := True);\n+   procedure Set_Is_Ada_2012_Only                (Id : E; V : B := True);\n    procedure Set_Is_Aliased                      (Id : E; V : B := True);\n    procedure Set_Is_Asynchronous                 (Id : E; V : B := True);\n    procedure Set_Is_Atomic                       (Id : E; V : B := True);\n@@ -7152,6 +7163,7 @@ package Einfo is\n    pragma Inline (Is_Abstract_Type);\n    pragma Inline (Is_Access_Constant);\n    pragma Inline (Is_Ada_2005_Only);\n+   pragma Inline (Is_Ada_2012_Only);\n    pragma Inline (Is_Access_Type);\n    pragma Inline (Is_Access_Protected_Subprogram_Type);\n    pragma Inline (Is_Access_Subprogram_Type);\n@@ -7584,6 +7596,7 @@ package Einfo is\n    pragma Inline (Set_Is_Abstract_Type);\n    pragma Inline (Set_Is_Access_Constant);\n    pragma Inline (Set_Is_Ada_2005_Only);\n+   pragma Inline (Set_Is_Ada_2012_Only);\n    pragma Inline (Set_Is_Aliased);\n    pragma Inline (Set_Is_Asynchronous);\n    pragma Inline (Set_Is_Atomic);"}, {"sha": "e9a86b411ae61887f7d07b64bd6d6249b56ca229", "filename": "gcc/ada/itypes.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fitypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fitypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -112,6 +112,7 @@ package body Itypes is\n       Set_Treat_As_Volatile        (I_Typ, Treat_As_Volatile  (T));\n       Set_Is_Atomic                (I_Typ, Is_Atomic          (T));\n       Set_Is_Ada_2005_Only         (I_Typ, Is_Ada_2005_Only   (T));\n+      Set_Is_Ada_2012_Only         (I_Typ, Is_Ada_2012_Only   (T));\n       Set_Can_Never_Be_Null        (I_Typ);\n \n       return I_Typ;"}, {"sha": "f149b2e865c026d1f795f94f1d2db374ef5312fd", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -475,6 +475,18 @@ package body Lib.Xref is\n          Error_Msg_NE (\"& is only defined in Ada 2005?\", N, E);\n       end if;\n \n+      --  Warn if reference to Ada 2012 entity not in Ada 2012 mode. We only\n+      --  detect real explicit references (modifications and references).\n+\n+      if Comes_From_Source (N)\n+        and then Is_Ada_2012_Only (E)\n+        and then Ada_Version < Ada_12\n+        and then Warn_On_Ada_2012_Compatibility\n+        and then (Typ = 'm' or else Typ = 'r')\n+      then\n+         Error_Msg_NE (\"& is only defined in Ada 2012?\", N, E);\n+      end if;\n+\n       --  Never collect references if not in main source unit. However, we omit\n       --  this test if Typ is 'e' or 'k', since these entries are structural,\n       --  and it is useful to have them in units that reference packages as"}, {"sha": "eae72e0dd08daf5e98a122547470f4d4477c063d", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -1332,6 +1332,12 @@ package Opt is\n    --  including warnings on Ada 2005 obsolescent features used in Ada 2005\n    --  mode. Set False by -gnatwY.\n \n+   Warn_On_Ada_2012_Compatibility : Boolean := True;\n+   --  GNAT\n+   --  Set to True to generate all warnings on Ada 2012 compatibility issues,\n+   --  including warnings on Ada 2012 obsolescent features used in Ada 2012\n+   --  mode. Set False by -gnatwY.\n+\n    Warn_On_Parameter_Order : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings for cases where the argument list for"}, {"sha": "e6c34e4dc107c71a36bd74dc87629c72352f7bb6", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -323,11 +323,14 @@ begin\n \n       --  These pragmas must be processed at parse time, since we want to set\n       --  the Ada version properly at parse time to recognize the appropriate\n-      --  Ada version syntax.\n+      --  Ada version syntax. However, it is only the zero argument form that\n+      --  must be processed at parse time.\n \n       when Pragma_Ada_12 | Pragma_Ada_2012 =>\n-         Ada_Version := Ada_12;\n-         Ada_Version_Explicit := Ada_12;\n+         if Arg_Count = 0 then\n+            Ada_Version := Ada_12;\n+            Ada_Version_Explicit := Ada_12;\n+         end if;\n \n       -----------\n       -- Debug --"}, {"sha": "eae4df2e654f703b1b64b0b0f7a88eb212b685d2", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -7917,6 +7917,7 @@ package body Sem_Attr is\n                   --  that generic unit. This includes any such attribute that\n                   --  occurs within the body of a generic unit that is a child\n                   --  of the generic unit where the subprogram is declared.\n+\n                   --  The rule also prohibits applying the attribute when the\n                   --  access type is a generic formal access type (since the\n                   --  level of the actual type is not known). This restriction"}, {"sha": "6b008ae86976ebde43ee61acf34a922710a26566", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -3466,6 +3466,7 @@ package body Sem_Ch3 is\n       Set_Treat_As_Volatile (Id, Treat_As_Volatile (T));\n       Set_Is_Atomic         (Id, Is_Atomic         (T));\n       Set_Is_Ada_2005_Only  (Id, Is_Ada_2005_Only  (T));\n+      Set_Is_Ada_2012_Only  (Id, Is_Ada_2012_Only  (T));\n       Set_Convention        (Id, Convention        (T));\n \n       --  In the case where there is no constraint given in the subtype"}, {"sha": "d0e67be9c50ce213d9b2abfbf5450d62d1717047", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -2035,6 +2035,7 @@ package body Sem_Ch7 is\n          Set_Is_Volatile             (Priv, Is_Volatile                (Full));\n          Set_Treat_As_Volatile       (Priv, Treat_As_Volatile          (Full));\n          Set_Is_Ada_2005_Only        (Priv, Is_Ada_2005_Only           (Full));\n+         Set_Is_Ada_2012_Only        (Priv, Is_Ada_2012_Only           (Full));\n          Set_Has_Pragma_Unmodified   (Priv, Has_Pragma_Unmodified      (Full));\n          Set_Has_Pragma_Unreferenced (Priv, Has_Pragma_Unreferenced    (Full));\n          Set_Has_Pragma_Unreferenced_Objects"}, {"sha": "409293a09d3be85a8f908360629a93bef84f6e05", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -5344,7 +5344,7 @@ package body Sem_Prag is\n          --  pragma Ada_2005;\n          --  pragma Ada_2005 (LOCAL_NAME):\n \n-         --  Note: these pragma also have some specific processing in Par.Prag\n+         --  Note: these pragmas also have some specific processing in Par.Prag\n          --  because we want to set the Ada 2005 version mode during parsing.\n \n          when Pragma_Ada_05 | Pragma_Ada_2005 => declare\n@@ -5386,27 +5386,48 @@ package body Sem_Prag is\n          ---------------------\n \n          --  pragma Ada_12;\n+         --  pragma Ada_12 (LOCAL_NAME);\n+\n          --  pragma Ada_2012;\n+         --  pragma Ada_2012 (LOCAL_NAME):\n \n-         --  Note: these pragma also have some specific processing in Par.Prag\n+         --  Note: these pragmas also have some specific processing in Par.Prag\n          --  because we want to set the Ada 2012 version mode during parsing.\n \n-         when Pragma_Ada_12 | Pragma_Ada_2012 =>\n+         when Pragma_Ada_12 | Pragma_Ada_2012 => declare\n+            E_Id : Node_Id;\n+\n+         begin\n             GNAT_Pragma;\n-            Check_Arg_Count (0);\n \n-            --  For Ada_2012 we unconditionally enforce the documented\n-            --  configuration pragma placement, since we do not want to\n-            --  tolerate mixed modes in a unit involving Ada 2012. That would\n-            --  cause real difficulties for those cases where there are\n-            --  incompatibilities between Ada 95 and Ada 2005/Ada 2012.\n+            if Arg_Count = 1 then\n+               Check_Arg_Is_Local_Name (Arg1);\n+               E_Id := Expression (Arg1);\n \n-            Check_Valid_Configuration_Pragma;\n+               if Etype (E_Id) = Any_Type then\n+                  return;\n+               end if;\n \n-            --  Now set Ada 2012 mode\n+               Set_Is_Ada_2012_Only (Entity (E_Id));\n \n-            Ada_Version := Ada_12;\n-            Ada_Version_Explicit := Ada_12;\n+            else\n+               Check_Arg_Count (0);\n+\n+               --  For Ada_2012 we unconditionally enforce the documented\n+               --  configuration pragma placement, since we do not want to\n+               --  tolerate mixed modes in a unit involving Ada 2012. That\n+               --  would cause real difficulties for those cases where there\n+               --  are incompatibilities between Ada 95 and Ada 2012. We could\n+               --  allow mixing of Ada 2005 and Ada 2012 but it's not worth it.\n+\n+               Check_Valid_Configuration_Pragma;\n+\n+               --  Now set Ada 2012 mode\n+\n+               Ada_Version := Ada_12;\n+               Ada_Version_Explicit := Ada_12;\n+            end if;\n+         end;\n \n          ----------------------\n          -- All_Calls_Remote --"}, {"sha": "b27f446dde83da1fc806557f3212d39b73f76fc2", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -1533,15 +1533,26 @@ package body Sem_Type is\n       It2  := It;\n       Nam2 := It.Nam;\n \n+      --  Check whether one of the entities is an Ada 2005/2012 and we are\n+      --  operating in an earlier mode, in which case we discard the Ada\n+      --  2005/2012 entity, so that we get proper Ada 95 overload resolution.\n+\n       if Ada_Version < Ada_05 then\n+         if Is_Ada_2005_Only (Nam1) or else Is_Ada_2012_Only (Nam1) then\n+            return It2;\n+         elsif Is_Ada_2005_Only (Nam2) or else Is_Ada_2012_Only (Nam1) then\n+            return It1;\n+         end if;\n+      end if;\n \n-         --  Check whether one of the entities is an Ada 2005 entity and we are\n-         --  operating in an earlier mode, in which case we discard the Ada\n-         --  2005 entity, so that we get proper Ada 95 overload resolution.\n+      --  Check whether one of the entities is an Ada 2012 entity and we are\n+      --  operating in Ada 2005 mode, in which case we discard the Ada 2012\n+      --  entity, so that we get proper Ada 2005 overload resolution.\n \n-         if Is_Ada_2005_Only (Nam1) then\n+      if Ada_Version = Ada_05 then\n+         if Is_Ada_2012_Only (Nam1) then\n             return It2;\n-         elsif Is_Ada_2005_Only (Nam2) then\n+         elsif Is_Ada_2012_Only (Nam2) then\n             return It1;\n          end if;\n       end if;"}, {"sha": "f6f204ee84207db45e82dfddbb0276189ec399f8", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599a741170b384ab63f23b9761f5456932001f64/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=599a741170b384ab63f23b9761f5456932001f64", "patch": "@@ -3069,6 +3069,7 @@ package body Sem_Warn is\n             Implementation_Unit_Warnings        := True;\n             Ineffective_Inline_Warnings         := True;\n             Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Ada_2012_Compatibility      := True;\n             Warn_On_All_Unread_Out_Parameters   := True;\n             Warn_On_Assertion_Failure           := True;\n             Warn_On_Assumed_Low_Bound           := True;\n@@ -3189,6 +3190,7 @@ package body Sem_Warn is\n       Implementation_Unit_Warnings        := False;\n       Ineffective_Inline_Warnings         := True;\n       Warn_On_Ada_2005_Compatibility      := True;\n+      Warn_On_Ada_2012_Compatibility      := True;\n       Warn_On_All_Unread_Out_Parameters   := False;\n       Warn_On_Assertion_Failure           := True;\n       Warn_On_Assumed_Low_Bound           := True;\n@@ -3230,6 +3232,7 @@ package body Sem_Warn is\n             Implementation_Unit_Warnings        := True;\n             Ineffective_Inline_Warnings         := True;\n             Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Ada_2012_Compatibility      := True;\n             Warn_On_Assertion_Failure           := True;\n             Warn_On_Assumed_Low_Bound           := True;\n             Warn_On_Bad_Fixed_Value             := True;\n@@ -3259,6 +3262,7 @@ package body Sem_Warn is\n             Implementation_Unit_Warnings        := False;\n             Ineffective_Inline_Warnings         := False;\n             Warn_On_Ada_2005_Compatibility      := False;\n+            Warn_On_Ada_2012_Compatibility      := False;\n             Warn_On_All_Unread_Out_Parameters   := False;\n             Warn_On_Assertion_Failure           := False;\n             Warn_On_Assumed_Low_Bound           := False;\n@@ -3424,9 +3428,11 @@ package body Sem_Warn is\n \n          when 'y' =>\n             Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Ada_2012_Compatibility      := True;\n \n          when 'Y' =>\n             Warn_On_Ada_2005_Compatibility      := False;\n+            Warn_On_Ada_2012_Compatibility      := False;\n \n          when 'z' =>\n             Warn_On_Unchecked_Conversion        := True;"}]}