{"sha": "7df89377a7ae3906255e38a79be8e5d962c3a0df", "node_id": "C_kwDOANBUbNoAKDdkZjg5Mzc3YTdhZTM5MDYyNTVlMzhhNzliZThlNWQ5NjJjM2EwZGY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-16T05:36:36Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-24T01:00:58Z"}, "message": "Enhance optimize_atomic_bit_test_and to handle truncation.\n\nr12-5102-gfb161782545224f5 improves integer bit test on\n__atomic_fetch_[or|and]_* returns only for nop_convert, .i.e.\n\ntransfrom\n\n  mask_5 = 1 << bit_4(D);\n  mask.0_1 = (unsigned int) mask_5;\n  _2 = __atomic_fetch_or_4 (a_7(D), mask.0_1, 0);\n  t1_9 = (int) _2;\n  t2_10 = mask_5 & t1_9;\n\nto\n\n  mask_5 = 1 << n_4(D);\n  mask.1_1 = (unsigned int) mask_5;\n  _11 = .ATOMIC_BIT_TEST_AND_SET (&pscc_a_1_4, n_4(D), 0);\n  _8 = (int) _11;\n\nAnd this patch extend the original patch to handle truncation.\n.i.e.\n\ntransform\n\n  long int mask;\n  mask_8 = 1 << n_7(D);\n  mask.0_1 = (long unsigned int) mask_8;\n  _2 = __sync_fetch_and_or_8 (&pscc_a_2_3, mask.0_1);\n  _3 = (unsigned int) _2;\n  _4 = (unsigned int) mask_8;\n  _5 = _3 & _4;\n  _6 = (int) _5;\n\nto\n\n  long int mask;\n  mask_8 = 1 << n_7(D);\n  mask.0_1 = (long unsigned int) mask_8;\n  _14 = .ATOMIC_BIT_TEST_AND_SET (&pscc_a_2_3, n_7(D), 0);\n  _5 = (unsigned int) _14;\n  _6 = (int) _5;\n\n2021-11-17  Hongtao Liu  <hongtao.liu@intel.com>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103194\n\t* match.pd (gimple_nop_atomic_bit_test_and_p): Extended to\n\tmatch truncation.\n\t* tree-ssa-ccp.c (gimple_nop_convert): Declare.\n\t(optimize_atomic_bit_test_and): Enhance\n\toptimize_atomic_bit_test_and to handle truncation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr103194-2.c: New test.\n\t* gcc.target/i386/pr103194-3.c: New test.\n\t* gcc.target/i386/pr103194-4.c: New test.\n\t* gcc.target/i386/pr103194-5.c: New test.\n\t* gcc.target/i386/pr103194.c: New test.", "tree": {"sha": "64cd9f5620610f80dd1df5275f0e2bed5242ba7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64cd9f5620610f80dd1df5275f0e2bed5242ba7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7df89377a7ae3906255e38a79be8e5d962c3a0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df89377a7ae3906255e38a79be8e5d962c3a0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df89377a7ae3906255e38a79be8e5d962c3a0df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df89377a7ae3906255e38a79be8e5d962c3a0df/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d4359264585acc8210ba60abb6dfb15bf1fa57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d4359264585acc8210ba60abb6dfb15bf1fa57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d4359264585acc8210ba60abb6dfb15bf1fa57"}], "stats": {"total": 413, "additions": 345, "deletions": 68}, "files": [{"sha": "60b4ad5f70621a71faeb0813102fd0298518f393", "filename": "gcc/match.pd", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -4044,71 +4044,79 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n #if GIMPLE\n (match (nop_atomic_bit_test_and_p @0 @1 @4)\n- (bit_and (nop_convert?@4 (ATOMIC_FETCH_OR_XOR_N @2 INTEGER_CST@0 @3))\n+ (bit_and (convert?@4 (ATOMIC_FETCH_OR_XOR_N @2 INTEGER_CST@0 @3))\n \t   INTEGER_CST@1)\n  (with {\n \t int ibit = tree_log2 (@0);\n \t int ibit2 = tree_log2 (@1);\n        }\n   (if (ibit == ibit2\n-      && ibit >= 0))))\n+      && ibit >= 0\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n \n (match (nop_atomic_bit_test_and_p @0 @1 @3)\n- (bit_and (nop_convert?@3 (SYNC_FETCH_OR_XOR_N @2 INTEGER_CST@0))\n+ (bit_and (convert?@3 (SYNC_FETCH_OR_XOR_N @2 INTEGER_CST@0))\n \t  INTEGER_CST@1)\n  (with {\n \t int ibit = tree_log2 (@0);\n \t int ibit2 = tree_log2 (@1);\n        }\n   (if (ibit == ibit2\n-      && ibit >= 0))))\n+      && ibit >= 0\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n \n (match (nop_atomic_bit_test_and_p @0 @0 @4)\n  (bit_and:c\n-  (nop_convert?@4\n+  (convert1?@4\n    (ATOMIC_FETCH_OR_XOR_N @2 (nop_convert? (lshift@0 integer_onep@5 @6)) @3))\n-  @0))\n+  (convert2? @0))\n+ (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n \n (match (nop_atomic_bit_test_and_p @0 @0 @4)\n  (bit_and:c\n-  (nop_convert?@4\n+  (convert1?@4\n    (SYNC_FETCH_OR_XOR_N @2 (nop_convert? (lshift@0 integer_onep@3 @5))))\n-  @0))\n+  (convert2? @0))\n+ (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n \n (match (nop_atomic_bit_test_and_p @0 @1 @3)\n- (bit_and@4 (nop_convert?@3 (ATOMIC_FETCH_AND_N @2 INTEGER_CST@0 @5))\n+ (bit_and@4 (convert?@3 (ATOMIC_FETCH_AND_N @2 INTEGER_CST@0 @5))\n \t    INTEGER_CST@1)\n  (with {\n \t int ibit = wi::exact_log2 (wi::zext (wi::bit_not (wi::to_wide (@0)),\n \t\t\t\t\t      TYPE_PRECISION(type)));\n \t int ibit2 = tree_log2 (@1);\n        }\n   (if (ibit == ibit2\n-      && ibit >= 0))))\n+      && ibit >= 0\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n \n (match (nop_atomic_bit_test_and_p @0 @1 @3)\n  (bit_and@4\n-  (nop_convert?@3 (SYNC_FETCH_AND_AND_N @2 INTEGER_CST@0))\n+  (convert?@3 (SYNC_FETCH_AND_AND_N @2 INTEGER_CST@0))\n   INTEGER_CST@1)\n  (with {\n \t int ibit = wi::exact_log2 (wi::zext (wi::bit_not (wi::to_wide (@0)),\n \t\t\t\t\t      TYPE_PRECISION(type)));\n \t int ibit2 = tree_log2 (@1);\n        }\n   (if (ibit == ibit2\n-      && ibit >= 0))))\n+      && ibit >= 0\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n \n-(match (nop_atomic_bit_test_and_p @0 @0 @3)\n+(match (nop_atomic_bit_test_and_p @4 @0 @3)\n  (bit_and:c\n-  (nop_convert?@3\n-   (ATOMIC_FETCH_AND_N @2 (nop_convert? (bit_not (lshift@0 integer_onep@6 @7))) @5))\n-   @0))\n+  (convert1?@3\n+   (ATOMIC_FETCH_AND_N @2 (nop_convert?@4 (bit_not (lshift@0 integer_onep@6 @7))) @5))\n+  (convert2? @0))\n+ (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n \n-(match (nop_atomic_bit_test_and_p @0 @0 @3)\n+(match (nop_atomic_bit_test_and_p @4 @0 @3)\n  (bit_and:c\n-  (nop_convert?@3\n-   (SYNC_FETCH_AND_AND_N @2 (nop_convert? (bit_not (lshift@0 integer_onep@6 @7)))))\n-   @0))\n+  (convert1?@3\n+   (SYNC_FETCH_AND_AND_N @2 (nop_convert?@4 (bit_not (lshift@0 integer_onep@6 @7)))))\n+  (convert2? @0))\n+  (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n \n #endif\n "}, {"sha": "1a991fe01991d20956a349f76c88357e9682123e", "filename": "gcc/testsuite/gcc.target/i386/pr103194-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-2.c?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+#include <stdatomic.h>\n+#include <stdbool.h>\n+\n+#define FOO(RTYPE,TYPE,MASK)\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_or_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_or (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_xor_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_xor (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_xor_fetch_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_xor_fetch (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_and_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_and (a, ~mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_or_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_or (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_xor_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_xor (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_xor_and_fetch_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_xor_and_fetch (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_and_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_and (a, ~mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO(char, short, 0);\n+FOO(char, short, 7);\n+FOO(short, int, 0);\n+FOO(short, int, 15);\n+\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*bts\" 8 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btc\" 16 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btr\" 8 } } */\n+/* { dg-final { scan-assembler-not \"cmpxchg\" } } */"}, {"sha": "4907598bbd1b10bbb5e111d5c8017314118d7d7a", "filename": "gcc/testsuite/gcc.target/i386/pr103194-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-3.c?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+#include <stdatomic.h>\n+#include <stdbool.h>\n+typedef long long int64;\n+\n+#define FOO(RTYPE, TYPE,MASK)\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_or_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_or (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_xor_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_xor (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_xor_fetch_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_xor_fetch (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_and_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_and (a, ~mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_or_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_or (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_xor_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_xor (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_xor_and_fetch_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_xor_and_fetch (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_and_##TYPE##_##MASK (_Atomic TYPE* a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_and (a, ~mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+\n+FOO(int, int64, 1);\n+FOO(int, int64, 31);\n+\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*bts\" 4 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btc\" 8 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btr\" 4 } } */\n+/* { dg-final { scan-assembler-not \"cmpxchg\" } } */"}, {"sha": "8573016c5d48cc43b1cea91e417e17138fd967a9", "filename": "gcc/testsuite/gcc.target/i386/pr103194-4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-4.c?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+#include <stdatomic.h>\n+#include <stdbool.h>\n+\n+#define FOO(RTYPE,TYPE)\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_or_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_or (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_xor_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_xor (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_xor_fetch_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_xor_fetch (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_and_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_and (a, ~mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_or_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_or (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_xor_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_xor (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_xor_and_fetch_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_xor_and_fetch (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_and_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1 << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_and (a, ~mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO(short, int);\n+\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*bts\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btc\" 4 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btr\" 2 } } */\n+/* { dg-final { scan-assembler-not \"cmpxchg\" } } */"}, {"sha": "dfaddf0aa6e73ca0ca7807abd9413cc867830b46", "filename": "gcc/testsuite/gcc.target/i386/pr103194-5.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194-5.c?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+#include <stdatomic.h>\n+#include <stdbool.h>\n+\n+#define FOO(RTYPE,TYPE)\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_or_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_or (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_xor_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_xor (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_xor_fetch_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_xor_fetch (a, mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  atomic_fetch_and_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __atomic_fetch_and (a, ~mask, __ATOMIC_RELAXED) & mask;\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_or_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_or (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_xor_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_xor (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_xor_and_fetch_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_xor_and_fetch (a, mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  __attribute__((noinline,noclone)) RTYPE\t\t\t\t\\\n+  sync_fetch_and_and_##TYPE##_##MASK (_Atomic TYPE* a, TYPE MASK)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE mask = 1ll << MASK;\t\t\t\t\t\t\\\n+    return __sync_fetch_and_and (a, ~mask) & mask;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO(int, long);\n+\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*bts\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btc\" 4 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btr\" 2 } } */\n+/* { dg-final { scan-assembler-not \"cmpxchg\" } } */"}, {"sha": "a6d84332e4d8a95bdad98c00a3c6c614068520d7", "filename": "gcc/testsuite/gcc.target/i386/pr103194.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103194.c?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+long pscc_a_2_3;\n+int pscc_a_1_4;\n+void pscc()\n+{\n+  pscc_a_1_4 = __sync_fetch_and_and(&pscc_a_2_3, 1);\n+}\n+\n+static int si;\n+long\n+test_types (long n)\n+{\n+  unsigned int u2 = __atomic_fetch_xor (&si, 0, 5);\n+  return u2;\n+}"}, {"sha": "9e12da8f011a6fd45d05be5a99f0c4b8713f7020", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 51, "deletions": 48, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df89377a7ae3906255e38a79be8e5d962c3a0df/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7df89377a7ae3906255e38a79be8e5d962c3a0df", "patch": "@@ -3326,6 +3326,7 @@ convert_atomic_bit_not (enum internal_fn fn, gimple *use_stmt,\n  */\n extern bool gimple_nop_atomic_bit_test_and_p (tree, tree *,\n \t\t\t\t\t      tree (*) (tree));\n+extern bool gimple_nop_convert (tree, tree*, tree (*) (tree));\n \n /* Optimize\n      mask_2 = 1 << cnt_1;\n@@ -3462,16 +3463,16 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t  ibit = 0;\n \t}\n       else if (TYPE_PRECISION (TREE_TYPE (use_lhs))\n-\t       == TYPE_PRECISION (TREE_TYPE (use_rhs)))\n+\t       <= TYPE_PRECISION (TREE_TYPE (use_rhs)))\n \t{\n \t  gimple *use_nop_stmt;\n \t  if (!single_imm_use (use_lhs, &use_p, &use_nop_stmt)\n \t      || !is_gimple_assign (use_nop_stmt))\n \t    return;\n+\t  tree use_nop_lhs = gimple_assign_lhs (use_nop_stmt);\n \t  rhs_code = gimple_assign_rhs_code (use_nop_stmt);\n \t  if (rhs_code != BIT_AND_EXPR)\n \t    {\n-\t      tree use_nop_lhs = gimple_assign_lhs (use_nop_stmt);\n \t      if (TREE_CODE (use_nop_lhs) == SSA_NAME\n \t\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (use_nop_lhs))\n \t\treturn;\n@@ -3584,24 +3585,23 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t    }\n \t  else\n \t    {\n-\t      tree and_expr = gimple_assign_lhs (use_nop_stmt);\n \t      tree match_op[3];\n \t      gimple *g;\n-\t      if (!gimple_nop_atomic_bit_test_and_p (and_expr,\n+\t      if (!gimple_nop_atomic_bit_test_and_p (use_nop_lhs,\n \t\t\t\t\t\t     &match_op[0], NULL)\n \t\t  || SSA_NAME_OCCURS_IN_ABNORMAL_PHI (match_op[2])\n \t\t  || !single_imm_use (match_op[2], &use_p, &g)\n \t\t  || !is_gimple_assign (g))\n \t\treturn;\n-\t      mask = match_op[1];\n-\t      if (TREE_CODE (mask) == INTEGER_CST)\n+\t      mask = match_op[0];\n+\t      if (TREE_CODE (match_op[1]) == INTEGER_CST)\n \t\t{\n-\t\t  ibit = tree_log2 (mask);\n+\t\t  ibit = tree_log2 (match_op[1]);\n \t\t  gcc_assert (ibit >= 0);\n \t\t}\n \t      else\n \t\t{\n-\t\t  g = SSA_NAME_DEF_STMT (mask);\n+\t\t  g = SSA_NAME_DEF_STMT (match_op[1]);\n \t\t  gcc_assert (is_gimple_assign (g));\n \t\t  bit = gimple_assign_rhs2 (g);\n \t\t}\n@@ -3623,19 +3623,30 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t\t _1 = __atomic_fetch_and_* (ptr_6, ~mask_7, _3);\n \t\t _12 = _3 & mask_7;\n \t\t _5 = (int) _12;\n-\t       */\n-\t      replace_uses_by (use_lhs, lhs);\n-\t      tree use_nop_lhs = gimple_assign_lhs (use_nop_stmt);\n-\t      var = make_ssa_name (TREE_TYPE (use_nop_lhs));\n-\t      gimple_assign_set_lhs (use_nop_stmt, var);\n+\n+\t\t and Convert\n+\t\t _1 = __atomic_fetch_and_4 (ptr_6, ~mask, _3);\n+\t\t _2 = (short int) _1;\n+\t\t _5 = _2 & mask;\n+\t\t to\n+\t\t _1 = __atomic_fetch_and_4 (ptr_6, ~mask, _3);\n+\t\t _8 = _1 & mask;\n+\t\t _5 = (short int) _8;\n+\t      */\n+\t      gimple_seq stmts = NULL;\n+\t      match_op[1] = gimple_convert (&stmts,\n+\t\t\t\t\t    TREE_TYPE (use_rhs),\n+\t\t\t\t\t    match_op[1]);\n+\t      var = gimple_build (&stmts, BIT_AND_EXPR,\n+\t\t\t\t  TREE_TYPE (use_rhs), use_rhs, match_op[1]);\n \t      gsi = gsi_for_stmt (use_stmt);\n \t      gsi_remove (&gsi, true);\n \t      release_defs (use_stmt);\n-\t      gsi_remove (gsip, true);\n-\t      g = gimple_build_assign (use_nop_lhs, NOP_EXPR, var);\n+\t      use_stmt = gimple_seq_last_stmt (stmts);\n \t      gsi = gsi_for_stmt (use_nop_stmt);\n-\t      gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n-\t      use_stmt = use_nop_stmt;\n+\t      gsi_insert_seq_before (&gsi, stmts, GSI_SAME_STMT);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, CONVERT_EXPR, var);\n+\t      update_stmt (use_nop_stmt);\n \t    }\n \t}\n       else\n@@ -3671,55 +3682,47 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n       else if (TREE_CODE (mask) == SSA_NAME)\n \t{\n \t  gimple *g = SSA_NAME_DEF_STMT (mask);\n-\t  if (fn == IFN_ATOMIC_BIT_TEST_AND_RESET)\n+\t  tree match_op;\n+\t  if (gimple_nop_convert (mask, &match_op, NULL))\n \t    {\n-\t      if (!is_gimple_assign (g)\n-\t\t  || gimple_assign_rhs_code (g) != BIT_NOT_EXPR)\n-\t\treturn;\n-\t      mask = gimple_assign_rhs1 (g);\n+\t      mask = match_op;\n \t      if (TREE_CODE (mask) != SSA_NAME)\n \t\treturn;\n \t      g = SSA_NAME_DEF_STMT (mask);\n \t    }\n \t  if (!is_gimple_assign (g))\n \t    return;\n-\t  rhs_code = gimple_assign_rhs_code (g);\n-\t  if (rhs_code != LSHIFT_EXPR)\n-\t    {\n-\t      if (rhs_code != NOP_EXPR)\n-\t\treturn;\n \n-\t      /* Handle\n-\t\t _1 = 1 << bit_4(D);\n-\t\t mask_5 = (unsigned int) _1;\n-\t\t _2 = __atomic_fetch_or_4 (v_7(D), mask_5, 0);\n-\t\t _3 = _2 & mask_5;\n-\t\t */\n-\t      tree nop_lhs = gimple_assign_lhs (g);\n-\t      tree nop_rhs = gimple_assign_rhs1 (g);\n-\t      if (TYPE_PRECISION (TREE_TYPE (nop_lhs))\n-\t\t  != TYPE_PRECISION (TREE_TYPE (nop_rhs)))\n+\t  if (fn == IFN_ATOMIC_BIT_TEST_AND_RESET)\n+\t    {\n+\t      if (gimple_assign_rhs_code (g) != BIT_NOT_EXPR)\n \t\treturn;\n-\t      g = SSA_NAME_DEF_STMT (nop_rhs);\n-\t      if (!is_gimple_assign (g)\n-\t\t  || gimple_assign_rhs_code (g) != LSHIFT_EXPR)\n+\t      mask = gimple_assign_rhs1 (g);\n+\t      if (TREE_CODE (mask) != SSA_NAME)\n \t\treturn;\n+\t      g = SSA_NAME_DEF_STMT (mask);\n \t    }\n-\t  if (!integer_onep (gimple_assign_rhs1 (g)))\n+\n+\t  rhs_code = gimple_assign_rhs_code (g);\n+\t  if (rhs_code != LSHIFT_EXPR\n+\t      || !integer_onep (gimple_assign_rhs1 (g)))\n \t    return;\n \t  bit = gimple_assign_rhs2 (g);\n \t}\n       else\n \treturn;\n \n+      tree cmp_mask;\n       if (gimple_assign_rhs1 (use_stmt) == lhs)\n-\t{\n-\t  if (!operand_equal_p (gimple_assign_rhs2 (use_stmt), mask, 0))\n-\t    return;\n-\t}\n-      else if (gimple_assign_rhs2 (use_stmt) != lhs\n-\t       || !operand_equal_p (gimple_assign_rhs1 (use_stmt),\n-\t\t\t\t    mask, 0))\n+\tcmp_mask = gimple_assign_rhs2 (use_stmt);\n+      else\n+\tcmp_mask = gimple_assign_rhs1 (use_stmt);\n+\n+      tree match_op;\n+      if (gimple_nop_convert (cmp_mask, &match_op, NULL))\n+\tcmp_mask = match_op;\n+\n+      if (!operand_equal_p (cmp_mask, mask, 0))\n \treturn;\n     }\n "}]}