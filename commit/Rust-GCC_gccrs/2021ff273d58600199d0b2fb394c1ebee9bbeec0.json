{"sha": "2021ff273d58600199d0b2fb394c1ebee9bbeec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyMWZmMjczZDU4NjAwMTk5ZDBiMmZiMzk0YzFlYmVlOWJiZWVjMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-08-24T16:06:02Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-08-24T16:06:02Z"}, "message": "re PR tree-optimization/67284 (libgo fails to build on trunk r227015 / *-linux-gnu)\n\n\tPR tree-optimization/67284\n\t* go-gcc.cc (Gcc_backend::define_builtin): Add NORETURN_P parameter.\n\tSet TREE_THIS_VOLATILE.\n\t(Gcc_backend::Gcc_backend): Mark __builtin_trap as a noreturn call.\n\tPass false to the rest of define_builtin calls.\n\nFrom-SVN: r227134", "tree": {"sha": "079c87396419450126a4f609a527d89b25ec99c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079c87396419450126a4f609a527d89b25ec99c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2021ff273d58600199d0b2fb394c1ebee9bbeec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2021ff273d58600199d0b2fb394c1ebee9bbeec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2021ff273d58600199d0b2fb394c1ebee9bbeec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2021ff273d58600199d0b2fb394c1ebee9bbeec0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76eed9d920fedf44e7c3738acd5e434d3a00a972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76eed9d920fedf44e7c3738acd5e434d3a00a972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76eed9d920fedf44e7c3738acd5e434d3a00a972"}], "stats": {"total": 114, "additions": 64, "deletions": 50}, "files": [{"sha": "90520ded45557af0daa35bdff644cde1a2f224ce", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2021ff273d58600199d0b2fb394c1ebee9bbeec0/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2021ff273d58600199d0b2fb394c1ebee9bbeec0/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=2021ff273d58600199d0b2fb394c1ebee9bbeec0", "patch": "@@ -1,3 +1,11 @@\n+2015-08-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/67284\n+\t* go-gcc.cc (Gcc_backend::define_builtin): Add NORETURN_P parameter.\n+\tSet TREE_THIS_VOLATILE.\n+\t(Gcc_backend::Gcc_backend): Mark __builtin_trap as a noreturn call.\n+\tPass false to the rest of define_builtin calls.\n+\n 2015-07-31  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* go-lang.c (go_langhook_init_options_struct): Don't set"}, {"sha": "cb4c2e5c73a6170d4f4b5132c44162211ef638da", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2021ff273d58600199d0b2fb394c1ebee9bbeec0/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2021ff273d58600199d0b2fb394c1ebee9bbeec0/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=2021ff273d58600199d0b2fb394c1ebee9bbeec0", "patch": "@@ -498,7 +498,7 @@ class Gcc_backend : public Backend\n private:\n   void\n   define_builtin(built_in_function bcode, const char* name, const char* libname,\n-\t\t tree fntype, bool const_p);\n+\t\t tree fntype, bool const_p, bool noreturn_p);\n \n   // A mapping of the GCC built-ins exposed to GCCGo.\n   std::map<std::string, Bfunction*> builtin_functions_;\n@@ -522,33 +522,33 @@ Gcc_backend::Gcc_backend()\n   tree p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_1, \"__sync_fetch_and_add_1\",\n \t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false);\n+\t\t       false, false);\n \n   t = this->integer_type(BITS_PER_UNIT * 2, 1)->get_tree();\n   p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_2, \"__sync_fetch_and_add_2\",\n \t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false);\n+\t\t       false, false);\n \n   t = this->integer_type(BITS_PER_UNIT * 4, 1)->get_tree();\n   p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_4, \"__sync_fetch_and_add_4\",\n \t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false);\n+\t\t       false, false);\n \n   t = this->integer_type(BITS_PER_UNIT * 8, 1)->get_tree();\n   p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_8, \"__sync_fetch_and_add_8\",\n \t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false);\n+\t\t       false, false);\n \n   // We use __builtin_expect for magic import functions.\n   this->define_builtin(BUILT_IN_EXPECT, \"__builtin_expect\", NULL,\n \t\t       build_function_type_list(long_integer_type_node,\n \t\t\t\t\t\tlong_integer_type_node,\n \t\t\t\t\t\tlong_integer_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true);\n+\t\t       true, false);\n \n   // We use __builtin_memcmp for struct comparisons.\n   this->define_builtin(BUILT_IN_MEMCMP, \"__builtin_memcmp\", \"memcmp\",\n@@ -557,7 +557,7 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tconst_ptr_type_node,\n \t\t\t\t\t\tsize_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       false);\n+\t\t       false, false);\n \n   // We provide some functions for the math library.\n   tree math_function_type = build_function_type_list(double_type_node,\n@@ -574,93 +574,93 @@ Gcc_backend::Gcc_backend()\n     build_function_type_list(long_double_type_node, long_double_type_node,\n \t\t\t     long_double_type_node, NULL_TREE);\n   this->define_builtin(BUILT_IN_ACOS, \"__builtin_acos\", \"acos\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_ACOSL, \"__builtin_acosl\", \"acosl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_ASIN, \"__builtin_asin\", \"asin\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_ASINL, \"__builtin_asinl\", \"asinl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_ATAN, \"__builtin_atan\", \"atan\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_ATANL, \"__builtin_atanl\", \"atanl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_ATAN2, \"__builtin_atan2\", \"atan2\",\n-\t\t       math_function_type_two, true);\n+\t\t       math_function_type_two, true, false);\n   this->define_builtin(BUILT_IN_ATAN2L, \"__builtin_atan2l\", \"atan2l\",\n-\t\t       math_function_type_long_two, true);\n+\t\t       math_function_type_long_two, true, false);\n   this->define_builtin(BUILT_IN_CEIL, \"__builtin_ceil\", \"ceil\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_CEILL, \"__builtin_ceill\", \"ceill\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_COS, \"__builtin_cos\", \"cos\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_COSL, \"__builtin_cosl\", \"cosl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_EXP, \"__builtin_exp\", \"exp\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_EXPL, \"__builtin_expl\", \"expl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_EXPM1, \"__builtin_expm1\", \"expm1\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_EXPM1L, \"__builtin_expm1l\", \"expm1l\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_FABS, \"__builtin_fabs\", \"fabs\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_FABSL, \"__builtin_fabsl\", \"fabsl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_FLOOR, \"__builtin_floor\", \"floor\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_FLOORL, \"__builtin_floorl\", \"floorl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_FMOD, \"__builtin_fmod\", \"fmod\",\n-\t\t       math_function_type_two, true);\n+\t\t       math_function_type_two, true, false);\n   this->define_builtin(BUILT_IN_FMODL, \"__builtin_fmodl\", \"fmodl\",\n-\t\t       math_function_type_long_two, true);\n+\t\t       math_function_type_long_two, true, false);\n   this->define_builtin(BUILT_IN_LDEXP, \"__builtin_ldexp\", \"ldexp\",\n \t\t       build_function_type_list(double_type_node,\n \t\t\t\t\t\tdouble_type_node,\n \t\t\t\t\t\tinteger_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true);\n+\t\t       true, false);\n   this->define_builtin(BUILT_IN_LDEXPL, \"__builtin_ldexpl\", \"ldexpl\",\n \t\t       build_function_type_list(long_double_type_node,\n \t\t\t\t\t\tlong_double_type_node,\n \t\t\t\t\t\tinteger_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true);\n+\t\t       true, false);\n   this->define_builtin(BUILT_IN_LOG, \"__builtin_log\", \"log\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_LOGL, \"__builtin_logl\", \"logl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_LOG1P, \"__builtin_log1p\", \"log1p\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_LOG1PL, \"__builtin_log1pl\", \"log1pl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_LOG10, \"__builtin_log10\", \"log10\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_LOG10L, \"__builtin_log10l\", \"log10l\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_LOG2, \"__builtin_log2\", \"log2\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_LOG2L, \"__builtin_log2l\", \"log2l\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_SIN, \"__builtin_sin\", \"sin\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_SINL, \"__builtin_sinl\", \"sinl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_SQRT, \"__builtin_sqrt\", \"sqrt\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_SQRTL, \"__builtin_sqrtl\", \"sqrtl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_TAN, \"__builtin_tan\", \"tan\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_TANL, \"__builtin_tanl\", \"tanl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n   this->define_builtin(BUILT_IN_TRUNC, \"__builtin_trunc\", \"trunc\",\n-\t\t       math_function_type, true);\n+\t\t       math_function_type, true, false);\n   this->define_builtin(BUILT_IN_TRUNCL, \"__builtin_truncl\", \"truncl\",\n-\t\t       math_function_type_long, true);\n+\t\t       math_function_type_long, true, false);\n \n   // We use __builtin_return_address in the thunk we build for\n   // functions which call recover.\n@@ -669,13 +669,13 @@ Gcc_backend::Gcc_backend()\n \t\t       build_function_type_list(ptr_type_node,\n \t\t\t\t\t\tunsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       false);\n+\t\t       false, false);\n \n   // The compiler uses __builtin_trap for some exception handling\n   // cases.\n   this->define_builtin(BUILT_IN_TRAP, \"__builtin_trap\", NULL,\n \t\t       build_function_type(void_type_node, void_list_node),\n-\t\t       false);\n+\t\t       false, true);\n }\n \n // Get an unnamed integer type.\n@@ -3095,15 +3095,19 @@ Gcc_backend::write_global_definitions(\n // LIBNAME is the name of the corresponding library function, and is\n // NULL if there isn't one.  FNTYPE is the type of the function.\n // CONST_P is true if the function has the const attribute.\n+// NORETURN_P is true if the function has the noreturn attribute.\n \n void\n Gcc_backend::define_builtin(built_in_function bcode, const char* name,\n-\t\t\t    const char* libname, tree fntype, bool const_p)\n+\t\t\t    const char* libname, tree fntype, bool const_p,\n+\t\t\t    bool noreturn_p)\n {\n   tree decl = add_builtin_function(name, fntype, bcode, BUILT_IN_NORMAL,\n \t\t\t\t   libname, NULL_TREE);\n   if (const_p)\n     TREE_READONLY(decl) = 1;\n+  if (noreturn_p)\n+    TREE_THIS_VOLATILE(decl) = 1;\n   set_builtin_decl(bcode, decl, true);\n   this->builtin_functions_[name] = this->make_function(decl);\n   if (libname != NULL)\n@@ -3112,6 +3116,8 @@ Gcc_backend::define_builtin(built_in_function bcode, const char* name,\n \t\t\t\t  NULL, NULL_TREE);\n       if (const_p)\n \tTREE_READONLY(decl) = 1;\n+      if (noreturn_p)\n+\tTREE_THIS_VOLATILE(decl) = 1;\n       this->builtin_functions_[libname] = this->make_function(decl);\n     }\n }"}]}