{"sha": "b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "node_id": "C_kwDOANBUbNoAKGI4OTQ0ZjA0MzhhMTgzYTAyNDVmZmUxN2FlYWVhZjNhMWEwMDA2OWM", "commit": {"author": {"name": "Julia Lapenko", "email": "julia.lapenko@gmail.com", "date": "2022-05-16T07:37:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-05-19T02:34:49Z"}, "message": "compiler: traverse expressions when exporting constants\n\nWhen exporting a constant A that is expressed through a constant\nB from another package, it is necessary to traverse an expression\nrepresenting the constant A to generate a sequence of type casts\nfrom the constant B. Current implementation doesn't collect types\nof constants contained in such expressions. This change fetches\nthese types.\n\nFixes golang/go#51291\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/405976", "tree": {"sha": "479a7909cff1ed8753c874357248b16696809172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/479a7909cff1ed8753c874357248b16696809172"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8944f0438a183a0245ffe17aeaeaf3a1a00069c/comments", "author": null, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cda629f96b4e982bb87343a35a6db39445d3962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cda629f96b4e982bb87343a35a6db39445d3962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cda629f96b4e982bb87343a35a6db39445d3962"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "2cf7141c4fa3fc13896a32aceba9bbfd7c4c3792", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8944f0438a183a0245ffe17aeaeaf3a1a00069c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8944f0438a183a0245ffe17aeaeaf3a1a00069c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "patch": "@@ -1,4 +1,4 @@\n-9d07072e58ca4f9f05343dfd3475b9f49dae5ec5\n+0058658a9efb6e5c5faa6f0f65949beea5ddbc98\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a30b11af31e4647c3c8460963ba6f23bc2c7c32e", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8944f0438a183a0245ffe17aeaeaf3a1a00069c/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8944f0438a183a0245ffe17aeaeaf3a1a00069c/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "patch": "@@ -124,6 +124,11 @@ class Collect_export_references : public Traverse\n   void\n   prepare_types(const std::vector<Named_object*>& sorted_exports);\n \n+  // Third entry point (called after the method above), to find\n+  // all types in expressions referenced by exports.\n+  void\n+  prepare_expressions(const std::vector<Named_object*>& sorted_exports);\n+\n  protected:\n   // Override of parent class method.\n   int\n@@ -281,6 +286,28 @@ Collect_export_references::expression(Expression** pexpr)\n   return TRAVERSE_CONTINUE;\n }\n \n+// Collect up the set of types mentioned in expressions of things we're exporting,\n+// and collect all the packages encountered during type traversal, to make sure\n+// we can declare things referered to indirectly (for example, in the body of an\n+// exported inline function from another package).\n+\n+void\n+Collect_export_references::prepare_expressions(const std::vector<Named_object*>& sorted_exports)\n+{\n+  for (std::vector<Named_object*>::const_iterator p = sorted_exports.begin();\n+       p != sorted_exports.end();\n+       ++p)\n+    {\n+      Named_object* no = *p;\n+      if (no->classification() == Named_object::NAMED_OBJECT_CONST)\n+        {\n+          Expression* e = no->const_value()->expr();\n+          if (e != NULL)\n+            Expression::traverse(&e, this);\n+        }\n+    }\n+}\n+\n // Collect up the set of types mentioned in things we're exporting, and collect\n // all the packages encountered during type traversal, to make sure we can\n // declare things referered to indirectly (for example, in the body of an\n@@ -891,6 +918,7 @@ Export::export_globals(const std::string& package_name,\n   // Collect up the set of types mentioned in things we're exporting,\n   // and any packages that may be referred to indirectly.\n   collect.prepare_types(sorted_exports);\n+  collect.prepare_expressions(sorted_exports);\n \n   // Assign indexes to all exported types and types referenced by\n   // things we're exporting.  Return value is index of first non-exported"}]}