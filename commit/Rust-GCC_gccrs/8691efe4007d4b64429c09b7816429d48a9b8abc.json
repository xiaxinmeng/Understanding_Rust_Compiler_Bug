{"sha": "8691efe4007d4b64429c09b7816429d48a9b8abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5MWVmZTQwMDdkNGI2NDQyOWMwOWI3ODE2NDI5ZDQ4YTliOGFiYw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:20:14Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:28Z"}, "message": "AVX512FP16: Add testcase for vcvttph2w/vcvttph2uw/vcvttph2dq/vcvttph2udq/vcvttph2qq/vcvttph2uqq.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vcvttph2dq-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvttph2dq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2qq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2qq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2udq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2udq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2uqq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2uqq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2uw-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2uw-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2w-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttph2w-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2dq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2dq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2qq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2qq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2udq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2udq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2uqq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2uqq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2uw-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2uw-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2w-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvttph2w-1b.c: Ditto.", "tree": {"sha": "773318a26934a9182bff08a010c52ff543848aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/773318a26934a9182bff08a010c52ff543848aa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8691efe4007d4b64429c09b7816429d48a9b8abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8691efe4007d4b64429c09b7816429d48a9b8abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8691efe4007d4b64429c09b7816429d48a9b8abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8691efe4007d4b64429c09b7816429d48a9b8abc/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c027accb4243ceed83b13982bd08c59f6a3561d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c027accb4243ceed83b13982bd08c59f6a3561d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c027accb4243ceed83b13982bd08c59f6a3561d2"}], "stats": {"total": 881, "additions": 881, "deletions": 0}, "files": [{"sha": "0e44aaf1bb5b33510fd60103af46af400873cf90", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2dq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2dq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2dq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2dq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m256h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttph_epi32 (x1);\n+  res1 = _mm512_mask_cvttph_epi32 (res, m16, x2);\n+  res2 = _mm512_maskz_cvttph_epi32 (m16, x3);\n+  res = _mm512_cvtt_roundph_epi32 (x1, 4);\n+  res1 = _mm512_mask_cvtt_roundph_epi32 (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvtt_roundph_epi32 (m16, x3, 8);\n+}"}, {"sha": "c18fefbf20632b8eab0ad15f3c21e8a75e69607c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2dq-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2dq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2dq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2dq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_d) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvttph_epi32) (H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvttph_epi32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvttph_epi32) (SI(res), HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvttph_epi32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvttph_epi32) (HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvttph_epi32);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtt_roundph_epi32) (H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtt_roundph_epi32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvtt_roundph_epi32) (SI(res), HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtt_roundph_epi32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtt_roundph_epi32) (HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtt_roundph_epi32);\n+#endif\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+\n+"}, {"sha": "124169467ee4c096753c6381f2e2fdfb3fcd02a1", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2qq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2qq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2qq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2qq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttph_epi64 (x1);\n+  res1 = _mm512_mask_cvttph_epi64 (res, m8, x2);\n+  res2 = _mm512_maskz_cvttph_epi64 (m8, x3);\n+  res = _mm512_cvtt_roundph_epi64 (x1, 4);\n+  res1 = _mm512_mask_cvtt_roundph_epi64 (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvtt_roundph_epi64 (m8, x3, 8);\n+}"}, {"sha": "2a9a2ca26f9efd02d4d6c9ce5f3dba6a1e400120", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2qq-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2qq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2qq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2qq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_q) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvttph_epi64) (src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvttph_epi64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvttph_epi64) (SI(res), 0xcc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvttph_epi64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfa, 1);\n+  SI(res) = INTRINSIC (_maskz_cvttph_epi64) (0xfa, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvttph_epi64);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtt_roundph_epi64) (src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtt_roundph_epi64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvtt_roundph_epi64) (SI(res), 0xcc, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtt_roundph_epi64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfa, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtt_roundph_epi64) (0xfa, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtt_roundph_epi64);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "0fd60f56777b6d2421a64c4e77faa5a997da4bbe", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2udq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2udq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2udq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2udq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m256h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttph_epu32 (x1);\n+  res1 = _mm512_mask_cvttph_epu32 (res, m16, x2);\n+  res2 = _mm512_maskz_cvttph_epu32 (m16, x3);\n+  res = _mm512_cvtt_roundph_epu32 (x1, 4);\n+  res1 = _mm512_mask_cvtt_roundph_epu32 (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvtt_roundph_epu32 (m16, x3, 8);\n+}"}, {"sha": "98bce374753d962eccbe7a6d5a4acc72281ad5f6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2udq-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2udq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2udq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2udq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_d) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvttph_epu32) (H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvttph_epu32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvttph_epu32) (SI(res), HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvttph_epu32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvttph_epu32) (HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvttph_epu32);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtt_roundph_epu32) (H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtt_roundph_epu32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvtt_roundph_epu32) (SI(res), HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtt_roundph_epu32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtt_roundph_epu32) (HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtt_roundph_epu32);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "04fee2936c8ecbbc491771301d40aa07c5c6a910", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2uqq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uqq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uqq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uqq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttph_epu64 (x1);\n+  res1 = _mm512_mask_cvttph_epu64 (res, m8, x2);\n+  res2 = _mm512_maskz_cvttph_epu64 (m8, x3);\n+  res = _mm512_cvtt_roundph_epu64 (x1, 4);\n+  res1 = _mm512_mask_cvtt_roundph_epu64 (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvtt_roundph_epu64 (m8, x3, 8);\n+}"}, {"sha": "31879ef898390f9b500a728b6e6f4e3f437e9f88", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2uqq-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uqq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uqq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uqq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_q) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvttph_epu64) (src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvttph_epu64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvttph_epu64) (SI(res), 0xcc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvttph_epu64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfc, 1);\n+  SI(res) = INTRINSIC (_maskz_cvttph_epu64) (0xfc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvttph_epu64);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtt_roundph_epu64) (src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtt_roundph_epu64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvtt_roundph_epu64) (SI(res), 0xcc, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtt_roundph_epu64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfc, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtt_roundph_epu64) (0xfc, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtt_roundph_epu64);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "b31af8441a96775a7105fe852c7e7d164268cebe", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2uw-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uw-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uw-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uw-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttph_epu16 (x1);\n+  res1 = _mm512_mask_cvttph_epu16 (res, m32, x2);\n+  res2 = _mm512_maskz_cvttph_epu16 (m32, x3);\n+  res = _mm512_cvtt_roundph_epu16 (x1, 4);\n+  res1 = _mm512_mask_cvtt_roundph_epu16 (res, m32, x2, 8);\n+  res2 = _mm512_maskz_cvtt_roundph_epu16 (m32, x3, 8);\n+}"}, {"sha": "34e94e8e549dcab9db6576115f96aee2a4df99e9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2uw-1b.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uw-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uw-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2uw-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_w) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i] = v1.f32[i];\n+\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i+16] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i+16] = v2.f32[i];\n+    }\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvttph_epu16) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvttph_epu16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvttph_epu16) (SI(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvttph_epu16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1, ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvttph_epu16) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvttph_epu16);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtt_roundph_epu16) (HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtt_roundph_epu16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvtt_roundph_epu16) (SI(res), MASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtt_roundph_epu16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1, ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtt_roundph_epu16) (ZMASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtt_roundph_epu16);\n+#endif\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "a918594d0d8062e65cff306ef2df34c596310f3f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2w-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2w-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2w-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2w-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttph_epi16 (x1);\n+  res1 = _mm512_mask_cvttph_epi16 (res, m32, x2);\n+  res2 = _mm512_maskz_cvttph_epi16 (m32, x3);\n+  res = _mm512_cvtt_roundph_epi16 (x1, 4);\n+  res1 = _mm512_mask_cvtt_roundph_epi16 (res, m32, x2, 8);\n+  res2 = _mm512_maskz_cvtt_roundph_epi16 (m32, x3, 8);\n+}"}, {"sha": "23bc8e680c54f46c3dfc285a2a13ca601221db75", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttph2w-1b.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2w-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2w-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttph2w-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_w) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i] = v1.f32[i];\n+\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i+16] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i+16] = v2.f32[i];\n+    }\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res, exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvttph_epi16) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvttph_epi16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvttph_epi16) (SI(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvttph_epi16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvttph_epi16) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvttph_epi16);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtt_roundph_epi16) (HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtt_roundph_epi16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvtt_roundph_epi16) (SI(res), MASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtt_roundph_epi16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtt_roundph_epi16) (ZMASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtt_roundph_epi16);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "b4c084020ac63c637a330c11b8b2ad39cc0c11c8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2dq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2dq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2dq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2dq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvttph_epi32 (x3);\n+  res1 = _mm256_mask_cvttph_epi32 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvttph_epi32 (m8, x3);\n+\n+  res2 = _mm_cvttph_epi32 (x3);\n+  res2 = _mm_mask_cvttph_epi32 (res2, m8, x3);\n+  res2 = _mm_maskz_cvttph_epi32 (m8, x3);\n+}"}, {"sha": "f9d82f92f4d91d65a6a3153aad4f9485e6a8b5c0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2dq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2dq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2dq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2dq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2dq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2dq-1b.c\"\n+"}, {"sha": "421c688ee29e39d23efcd2d154d8bd36c0019fb5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2qq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2qq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2qq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2qq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvttph_epi64 (x3);\n+  res1 = _mm256_mask_cvttph_epi64 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvttph_epi64 (m8, x3);\n+\n+  res2 = _mm_cvttph_epi64 (x3);\n+  res2 = _mm_mask_cvttph_epi64 (res2, m8, x3);\n+  res2 = _mm_maskz_cvttph_epi64 (m8, x3);\n+}"}, {"sha": "323ab74fa054c337d444955bf23d6a8193418105", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2qq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2qq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2qq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2qq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2qq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2qq-1b.c\"\n+"}, {"sha": "60f43189d614f45bf99d5f979f4bbddb5860af1d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2udq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2udq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2udq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2udq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvttph_epu32 (x3);\n+  res1 = _mm256_mask_cvttph_epu32 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvttph_epu32 (m8, x3);\n+\n+  res2 = _mm_cvttph_epu32 (x3);\n+  res2 = _mm_mask_cvttph_epu32 (res2, m8, x3);\n+  res2 = _mm_maskz_cvttph_epu32 (m8, x3);\n+}"}, {"sha": "61365d456c27ebf2d3c03dbb68a0c466a3545c01", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2udq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2udq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2udq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2udq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2udq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2udq-1b.c\"\n+"}, {"sha": "37008f9d9e960465bf1ecb182c35058b64acc67e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2uqq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uqq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uqq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uqq-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvttph_epu64 (x3);\n+  res1 = _mm256_mask_cvttph_epu64 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvttph_epu64 (m8, x3);\n+\n+  res2 = _mm_cvttph_epu64 (x3);\n+  res2 = _mm_mask_cvttph_epu64 (res2, m8, x3);\n+  res2 = _mm_maskz_cvttph_epu64 (m8, x3);\n+}"}, {"sha": "6360402e6d6b1067b085ff34ce1375ede757841e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2uqq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uqq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uqq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uqq-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2uqq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2uqq-1b.c\"\n+"}, {"sha": "eafa31a786b954339b72ba29031f9a59adb7eb4b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2uw-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uw-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uw-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uw-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m256h x3;\n+volatile __m128h x4;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvttph_epu16 (x3);\n+  res1 = _mm256_mask_cvttph_epu16 (res1, m16, x3);\n+  res1 = _mm256_maskz_cvttph_epu16 (m16, x3);\n+\n+  res2 = _mm_cvttph_epu16 (x4);\n+  res2 = _mm_mask_cvttph_epu16 (res2, m8, x4);\n+  res2 = _mm_maskz_cvttph_epu16 (m8, x4);\n+}"}, {"sha": "dd5ed9d5b383e9315303813afc7e609b647a5b1f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2uw-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uw-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uw-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2uw-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2uw-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2uw-1b.c\"\n+"}, {"sha": "7476d3c1160f06556d99a227cf0b2cb49e2d40bf", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2w-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2w-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2w-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2w-1a.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m256h x3;\n+volatile __m128h x4;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvttph_epi16 (x3);\n+  res1 = _mm256_mask_cvttph_epi16 (res1, m16, x3);\n+  res1 = _mm256_maskz_cvttph_epi16 (m16, x3);\n+\n+  res2 = _mm_cvttph_epi16 (x4);\n+  res2 = _mm_mask_cvttph_epi16 (res2, m8, x4);\n+  res2 = _mm_maskz_cvttph_epi16 (m8, x4);\n+}"}, {"sha": "7a04a6a8ebc2f9da722fbef1bb90ac63b99e4d25", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvttph2w-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2w-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691efe4007d4b64429c09b7816429d48a9b8abc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2w-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvttph2w-1b.c?ref=8691efe4007d4b64429c09b7816429d48a9b8abc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2w-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvttph2w-1b.c\"\n+"}]}