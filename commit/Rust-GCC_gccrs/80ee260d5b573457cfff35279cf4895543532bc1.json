{"sha": "80ee260d5b573457cfff35279cf4895543532bc1", "node_id": "C_kwDOANBUbNoAKDgwZWUyNjBkNWI1NzM0NTdjZmZmMzUyNzljZjQ4OTU1NDM1MzJiYzE", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-09T12:47:18Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:51Z"}, "message": "aarch64: Use type-qualified builtins for [R]SUBHN[2] Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them to implement\n(rounding) halving-narrowing-subtract Neon intrinsics. This removes\nthe need for many casts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n\tbuiltins for [r]subhn[2].\n\t* config/aarch64/arm_neon.h (vsubhn_s16): Remove unnecessary\n\tcast.\n\t(vsubhn_s32): Likewise.\n\t(vsubhn_s64): Likewise.\n\t(vsubhn_u16): Use type-qualified builtin and remove casts.\n\t(vsubhn_u32): Likewise.\n\t(vsubhn_u64): Likewise.\n\t(vrsubhn_s16): Remove unnecessary cast.\n\t(vrsubhn_s32): Likewise.\n\t(vrsubhn_s64): Likewise.\n\t(vrsubhn_u16): Use type-qualified builtin and remove casts.\n\t(vrsubhn_u32): Likewise.\n\t(vrsubhn_u64): Likewise.\n\t(vrsubhn_high_s16): Remove unnecessary cast.\n\t(vrsubhn_high_s32): Likewise.\n\t(vrsubhn_high_s64): Likewise.\n\t(vrsubhn_high_u16): Use type-qualified builtin and remove\n\tcasts.\n\t(vrsubhn_high_u32): Likewise.\n\t(vrsubhn_high_u64): Likewise.\n\t(vsubhn_high_s16): Remove unnecessary cast.\n\t(vsubhn_high_s32): Likewise.\n\t(vsubhn_high_s64): Likewise.\n\t(vsubhn_high_u16): Use type-qualified builtin and remove\n\tcasts.\n\t(vsubhn_high_u32): Likewise.\n\t(vsubhn_high_u64): Likewise.", "tree": {"sha": "738226172d1a5da67b2b5ae4747354b162adb61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/738226172d1a5da67b2b5ae4747354b162adb61e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ee260d5b573457cfff35279cf4895543532bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ee260d5b573457cfff35279cf4895543532bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ee260d5b573457cfff35279cf4895543532bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ee260d5b573457cfff35279cf4895543532bc1/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bde2a6ecd7c7ce7930fe048ae43a5d177d91b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bde2a6ecd7c7ce7930fe048ae43a5d177d91b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bde2a6ecd7c7ce7930fe048ae43a5d177d91b39"}], "stats": {"total": 70, "additions": 28, "deletions": 42}, "files": [{"sha": "6f632f6ba00fd60b730aafead31b3e749b26f7fa", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ee260d5b573457cfff35279cf4895543532bc1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ee260d5b573457cfff35279cf4895543532bc1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=80ee260d5b573457cfff35279cf4895543532bc1", "patch": "@@ -222,16 +222,20 @@\n   BUILTIN_VQN (BINOP, addhn, 0, NONE)\n   BUILTIN_VQN (BINOPU, addhn, 0, NONE)\n   BUILTIN_VQN (BINOP, subhn, 0, NONE)\n+  BUILTIN_VQN (BINOPU, subhn, 0, NONE)\n   BUILTIN_VQN (BINOP, raddhn, 0, NONE)\n   BUILTIN_VQN (BINOPU, raddhn, 0, NONE)\n   BUILTIN_VQN (BINOP, rsubhn, 0, NONE)\n+  BUILTIN_VQN (BINOPU, rsubhn, 0, NONE)\n   /* Implemented by aarch64_<sur><addsub>hn2<mode>.  */\n   BUILTIN_VQN (TERNOP, addhn2, 0, NONE)\n   BUILTIN_VQN (TERNOPU, addhn2, 0, NONE)\n   BUILTIN_VQN (TERNOP, subhn2, 0, NONE)\n+  BUILTIN_VQN (TERNOPU, subhn2, 0, NONE)\n   BUILTIN_VQN (TERNOP, raddhn2, 0, NONE)\n   BUILTIN_VQN (TERNOPU, raddhn2, 0, NONE)\n   BUILTIN_VQN (TERNOP, rsubhn2, 0, NONE)\n+  BUILTIN_VQN (TERNOPU, rsubhn2, 0, NONE)\n \n   /* Implemented by aarch64_<us>xtl<mode>.  */\n   BUILTIN_VQN (UNOP, sxtl, 0, NONE)"}, {"sha": "288f0176baeb101180b666faefabda72cf0bbb59", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ee260d5b573457cfff35279cf4895543532bc1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ee260d5b573457cfff35279cf4895543532bc1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=80ee260d5b573457cfff35279cf4895543532bc1", "patch": "@@ -2022,186 +2022,168 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int8x8_t) __builtin_aarch64_subhnv8hi (__a, __b);\n+  return __builtin_aarch64_subhnv8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_subhnv4si (__a, __b);\n+  return __builtin_aarch64_subhnv4si (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_s64 (int64x2_t __a, int64x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_subhnv2di (__a, __b);\n+  return __builtin_aarch64_subhnv2di (__a, __b);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_subhnv8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t  (int16x8_t) __b);\n+  return __builtin_aarch64_subhnv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_subhnv4si ((int32x4_t) __a,\n-\t\t\t\t\t\t   (int32x4_t) __b);\n+  return __builtin_aarch64_subhnv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_u64 (uint64x2_t __a, uint64x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_subhnv2di ((int64x2_t) __a,\n-\t\t\t\t\t\t   (int64x2_t) __b);\n+  return __builtin_aarch64_subhnv2di_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int8x8_t) __builtin_aarch64_rsubhnv8hi (__a, __b);\n+  return __builtin_aarch64_rsubhnv8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_rsubhnv4si (__a, __b);\n+  return __builtin_aarch64_rsubhnv4si (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_s64 (int64x2_t __a, int64x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_rsubhnv2di (__a, __b);\n+  return __builtin_aarch64_rsubhnv2di (__a, __b);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_rsubhnv8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t   (int16x8_t) __b);\n+  return __builtin_aarch64_rsubhnv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_rsubhnv4si ((int32x4_t) __a,\n-\t\t\t\t\t\t    (int32x4_t) __b);\n+  return __builtin_aarch64_rsubhnv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_u64 (uint64x2_t __a, uint64x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_rsubhnv2di ((int64x2_t) __a,\n-\t\t\t\t\t\t    (int64x2_t) __b);\n+  return __builtin_aarch64_rsubhnv2di_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_high_s16 (int8x8_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  return (int8x16_t) __builtin_aarch64_rsubhn2v8hi (__a, __b, __c);\n+  return __builtin_aarch64_rsubhn2v8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_high_s32 (int16x4_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  return (int16x8_t) __builtin_aarch64_rsubhn2v4si (__a, __b, __c);\n+  return __builtin_aarch64_rsubhn2v4si (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_high_s64 (int32x2_t __a, int64x2_t __b, int64x2_t __c)\n {\n-  return (int32x4_t) __builtin_aarch64_rsubhn2v2di (__a, __b, __c);\n+  return __builtin_aarch64_rsubhn2v2di (__a, __b, __c);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_high_u16 (uint8x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  return (uint8x16_t) __builtin_aarch64_rsubhn2v8hi ((int8x8_t) __a,\n-\t\t\t\t\t\t     (int16x8_t) __b,\n-\t\t\t\t\t\t     (int16x8_t) __c);\n+  return __builtin_aarch64_rsubhn2v8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_high_u32 (uint16x4_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_rsubhn2v4si ((int16x4_t) __a,\n-\t\t\t\t\t\t     (int32x4_t) __b,\n-\t\t\t\t\t\t     (int32x4_t) __c);\n+  return __builtin_aarch64_rsubhn2v4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrsubhn_high_u64 (uint32x2_t __a, uint64x2_t __b, uint64x2_t __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_rsubhn2v2di ((int32x2_t) __a,\n-\t\t\t\t\t\t     (int64x2_t) __b,\n-\t\t\t\t\t\t     (int64x2_t) __c);\n+  return __builtin_aarch64_rsubhn2v2di_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_high_s16 (int8x8_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  return (int8x16_t) __builtin_aarch64_subhn2v8hi (__a, __b, __c);\n+  return __builtin_aarch64_subhn2v8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_high_s32 (int16x4_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  return (int16x8_t) __builtin_aarch64_subhn2v4si (__a, __b, __c);;\n+  return __builtin_aarch64_subhn2v4si (__a, __b, __c);;\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_high_s64 (int32x2_t __a, int64x2_t __b, int64x2_t __c)\n {\n-  return (int32x4_t) __builtin_aarch64_subhn2v2di (__a, __b, __c);\n+  return __builtin_aarch64_subhn2v2di (__a, __b, __c);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_high_u16 (uint8x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  return (uint8x16_t) __builtin_aarch64_subhn2v8hi ((int8x8_t) __a,\n-\t\t\t\t\t\t    (int16x8_t) __b,\n-\t\t\t\t\t\t    (int16x8_t) __c);\n+  return __builtin_aarch64_subhn2v8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_high_u32 (uint16x4_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_subhn2v4si ((int16x4_t) __a,\n-\t\t\t\t\t\t    (int32x4_t) __b,\n-\t\t\t\t\t\t    (int32x4_t) __c);\n+  return __builtin_aarch64_subhn2v4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vsubhn_high_u64 (uint32x2_t __a, uint64x2_t __b, uint64x2_t __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_subhn2v2di ((int32x2_t) __a,\n-\t\t\t\t\t\t    (int64x2_t) __b,\n-\t\t\t\t\t\t    (int64x2_t) __c);\n+  return __builtin_aarch64_subhn2v2di_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x4_t"}]}