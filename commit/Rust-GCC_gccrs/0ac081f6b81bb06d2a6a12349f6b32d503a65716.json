{"sha": "0ac081f6b81bb06d2a6a12349f6b32d503a65716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjMDgxZjZiODFiYjA2ZDJhNmExMjM0OWY2YjMyZDUwM2E2NTcxNg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-11-07T20:49:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-11-07T20:49:41Z"}, "message": "invoke.texi: Add -maltivec, -mno-altivec, and -mabi=altivec for rs6000.\n\n\n\t* doc/invoke.texi: Add -maltivec, -mno-altivec, and -mabi=altivec\n\tfor rs6000.\n\n\t* config/rs6000/rs6000.h (MASK_ALTIVEC): New.\n\t(TARGET_ALTIVEC): New.\n\t(TARGET_SWITCHES): Add altivec.\n\t(FIRST_PSEUDO_REGISTER): Change to 109.\n\t(CALL_USED_REGISTERS): Same.\n\t(FIRST_ALTIVEC_REGNO): New.\n\t(LAST_ALTIVEC_REGNO): New.\n\t(ALTIVEC_REGNO_P): New.\n\t(UNITS_PER_ALTIVEC_WORD): New.\n\t(ALTIVEC_VECTOR_MODE): New.\n\t(FIXED_REGISTERS): Add altivec registers.\n\t(REG_ALLOC_ORDER): Same.\n\t(HARD_REGNO_NREGS): Adjust for altivec registers.\n\t(HARD_REGNO_MODE_OK): Same.\n\t(MODES_TIEABLE_P): Same.\n\t(REGISTER_MOVE_COST): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(reg_class): Add ALTIVEC_REGS.\n\t(REG_CLASS_NAMES): Same.\n\t(REG_CLASS_CONTENTS): Same.\n\t(REG_CLASS_FROM_LETTER): Add 'v' constraint for ALTIVEC_REGS.\n\t(ALTIVEC_ARG_RETURN): New.\n\t(FUNCTION_VALUE): Handle VECTOR_TYPE.\n\t(LIBCALL_VALUE): Handle altivec vector modes.\n\t(VECTOR_MODE_SUPPORTED_P): New.\n\t(ALTIVEC_ARG_MIN_REG): New.\n\t(ALTIVEC_ARG_MAX_REG): New.\n\t(ALTIVEC_ARG_NUM_REG): New.\n\t(FUNCTION_VALUE_REGNO_P): Return true for altivec return register.\n\t(FUNCTION_ARG_REGNO_P): Support passing args in altivec registers.\n\t(REGISTER_NAMES): Add altivec regs.\n\t(DEBUG_REGISTER_NAMES): Same.\n\t(ADDITIONAL_REGISTER_NAMES): Same.\n\t(rs6000_builtins): New.\n\t(MD_EXPAND_BUILTIN): New.\n\t(MD_INIT_BUILTINS): New.\n\t(LEGITIMATE_OFFSET_ADDRESS_P): This addressing mode is not valid\n\tfor AltiVec instructions.\n\t(LEGITIMATE_LO_SUM_ADDRESS_P): Same.\n\t(HARD_REGNO_MODE_OK): Altivec modes can only go in altivec\n\tregisters.\n\t(SECONDARY_MEMORY_NEEDED): We need memory to copy vector modes.\n\t(TARGET_SWITCHES): Add no-altivec.\n\t(DATA_ALIGNMENT): Align vectors to 128 bits.\n\t(TARGET_OPTIONS): Add abi= option.\n\tAdd rs6000_abi_string extern.\n\t(LOCAL_ALIGNMENT): New.\n\t(CPP_CPU_SPEC): Define __ALTIVEC__ when -maltivec.\n\t(MASK_ALTIVEC_ABI): New.\n\t(TARGET_ALTIVEC_ABI): New.\n\t(CONDITIONAL_REGISTER_USAGE): Set first 20 AltiVec registers to\n\tcall-saved.\n\t(STACK_BOUNDARY): Adjust for altivec.\n\t(BIGGEST_ALIGNMENT): Same.\n\t(rs6000_args): Add vregno.\n\t(USE_ALTIVEC_FOR_ARG_P): New.\n\t(FIXED_REGISTERS): Add vrsave register.\n\t(CALL_USED_REGISTERS): Same.\n\t(CONDITIONAL_REGISTER_USAGE): Set VRSAVE info.\n\t(VRSAVE_REGNO): New.\n\t(reg_class): Add VRSAVE_REGS.\n\t(REG_CLASS_NAMES): Same.\n\t(REG_CLASS_CONTENTS): Same.\n\t(REGNO_REG_CLASS): Same.\n\n\t* config/rs6000/sysv4.h (STACK_BOUNDARY): Adjust for altivec.\n\t(ABI_STACK_BOUNDARY): Same.\n\t(BIGGEST_ALIGNMENT): Same.\n\t(ADJUST_FIELD_ALIGN): Remove undef.  Define anew.\n\t(ROUND_TYPE_ALIGN): Same.\n\n\t* config/rs6000/aix.h (ROUND_TYPE_ALIGN): Change BIGGEST_ALIGNMENT\n\tto 64.\n\n\t* config/rs6000/rs6000.c (rs6000_expand_builtin): New.\n\t(altivec_expand_builtin): New.\n\t(altivec_init_builtins): New.\n\t(TARGET_EXPAND_BUILTIN): New.\n\t(TARGET_INIT_BUILTINS): New.\n\t(rs6000_init_builtins): New.\n\t(struct builtin_description): New.\n\t(bdesc_2arg): New.\n\t(rs6000_reg_names): Add altivec registers.\n\t(alt_reg_names): Same.\n\t(secondary_reload_class): Altivec regs can hold altivec regs and\n\tmemory.\n\t(rs6000_emit_move): Force constants into memory for AltiVec moves.\n\t(print_operand): Add 'y' case for printing altivec memory\n\toperands.\n\t(rs6000_legitimize_address): Legitimize vector addresses into\n\t[REG+REG] or [REG].\n\t(altivec_expand_binop_builtin): New.\n\tNew string rs6000_current_abi.\n\t(rs6000_override_options): Call rs6000_parse_abi_options.\n\t(rs6000_parse_abi_options): New.\n\t(function_arg_boundary): Vector arguments must be 16\n\tbyte aligned.\n\t(function_arg_advance): Handle vector arguments.\n\t(function_arg_partial_nregs): Same.\n\t(init_cumulative_args): Same.\n\t(function_arg): Same.\n\n\t* config/rs6000/rs6000.md (altivec_lvx): New.\n\t(type): Add altivec attribute.\n\t(movv4si): New.\n\t(*movv4si_internal): New.\n\t(movv16qi): New.\n\t(*movv16qi_internal): New.\n\t(movv8hi): New.\n\t(*movv8hi_internal1): New.\n\t(movv4sf): New.\n\t(*movv4sf_internal1): New.\n\t(altivec_stvx): New.\n\t(vaddubm): New.\n\t(vadduhm): New.\n\t(vadduwm): New.\n\t(vaddfp): New.\n\t(vaddcuw): New.\n\t(vaddubs): New.\n\t(vaddsbs): New.\n\t(vadduhs): New.\n\t(vaddshs): New.\n\t(vadduws): New.\n\t(vaddsws): New.\n\t(vand): New.\n\t(vandc): New.\n\t(vavgub): New.\n\t(vavgsb): New.\n\t(vavguh): New.\n\t(vavgsh): New.\n\t(vavguw): New.\n\t(vavgsw): New.\n\t(vcmpbfp): New.\n\t(vcmpequb): New.\n\t(vcmpequh): New.\n\t(vcmpequw): New.\n\t(vcmpeqfp): New.\n\t(vcmpgefp): New.\n\t(vcmpgtub): New.\n\t(vcmpgtsb): New.\n\t(vcmpgtuh): New.\n\t(vcmpgtsh): New.\n\t(vcmpgtuw): New.\n\t(vcmpgtsw): New.\n\t(vcmpgtfp): New.\n\t(vcmpgefp): New.\n\t(vcmpgtub): New.\n\t(vcmpgtsb): New.\n\t(vcmpgtuh): New.\n\t(vcmpgtsh): New.\n\t(vcmpgtuw): New.\n\t(vcmpgtsw): New.\n\t(vcmpgtfp): New.\n\t(vmaxub): New.\n\t(vmaxsb): New.\n\t(vmaxuh): New.\n\t(vmaxsh): New.\n\t(vmaxuw): New.\n\t(vmaxsw): New.\n\t(vmaxfp): New.\n\t(vmrghb): New.\n\t(vmrghh): New.\n\t(vmrghw): New.\n\t(vmrglb): New.\n\t(vmrglh): New.\n\t(vmrglw): New.\n\t(vminub): New.\n\t(vminsb): New.\n\t(vminuh): New.\n\t(vminsh): New.\n\t(vminuw): New.\n\t(vminsw): New.\n\t(vminfp): New.\n\t(vmuleub): New.\n\t(vmulesb): New.\n\t(vmuleuh): New.\n\t(vmulesh): New.\n\t(vmuloub): New.\n\t(vmulosb): New.\n\t(vmulouh): New.\n\t(vmulosh): New.\n\t(vnor): New.\n\t(vor): New.\n\t(vpkuhum): New.\n\t(vpkuwum): New.\n\t(vpkpx): New.\n\t(vpkuhss): New.\n\t(vpkshss): New.\n\t(vpkuwss): New.\n\t(vpkswss): New.\n\t(vpkuhus): New.\n\t(vpkshus): New.\n\t(vpkuwus): New.\n\t(vpkswus): New.\n\t(vrlb): New.\n\t(vrlh): New.\n\t(vrlw): New.\n\t(vslb): New.\n\t(vslh): New.\n\t(vslw): New.\n\t(vsl): New.\n\t(vslo): New.\n\t(vsrb): New.\n\t(vrsh): New.\n\t(vrsw): New.\n\t(vsrab): New.\n\t(vsrah): New.\n\t(vsraw): New.\n\t(vsr): New.\n\t(vsro): New.\n\t(vsububm): New.\n\t(vsubuhm): New.\n\t(vsubuwm): New.\n\t(vsubfp): New.\n\t(vsubcuw): New.\n\t(vsububs): New.\n\t(vsubsbs): New.\n\t(vsubuhs): New.\n\t(vsubshs): New.\n\t(vsubuws): New.\n\t(vsubsws): New.\n\t(vsum4ubs): New.\n\t(vsum4sbs): New.\n\t(vsum4shs): New.\n\t(vsum2sws): New.\n\t(vsumsws): New.\n\t(vxor): New.\n\nFrom-SVN: r46833", "tree": {"sha": "2ba4d4038bdd8e6ac425507bf6ac2245eb9c734f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba4d4038bdd8e6ac425507bf6ac2245eb9c734f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ac081f6b81bb06d2a6a12349f6b32d503a65716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac081f6b81bb06d2a6a12349f6b32d503a65716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac081f6b81bb06d2a6a12349f6b32d503a65716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac081f6b81bb06d2a6a12349f6b32d503a65716/comments", "author": null, "committer": null, "parents": [{"sha": "178612c9a64ff68aaee7416724c2f6820b581238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178612c9a64ff68aaee7416724c2f6820b581238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178612c9a64ff68aaee7416724c2f6820b581238"}], "stats": {"total": 1939, "additions": 1884, "deletions": 55}, "files": [{"sha": "ae3b9c639077d6a214718e93e6a9fc8580c72aeb", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=0ac081f6b81bb06d2a6a12349f6b32d503a65716", "patch": "@@ -115,7 +115,7 @@ Boston, MA 02111-1307, USA.  */\n     || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\\\n    && TYPE_FIELDS (STRUCT) != 0\t\t\t\t\\\n    && DECL_MODE (TYPE_FIELDS (STRUCT)) == DFmode\t\\\n-   ? MAX (MAX ((COMPUTED), (SPECIFIED)), BIGGEST_ALIGNMENT) \\\n+   ? MAX (MAX ((COMPUTED), (SPECIFIED)), 64)\t\t\\\n    : MAX ((COMPUTED), (SPECIFIED)))\n \n "}, {"sha": "0cf9b9c46aa8426290634deb0868ed7c1eedbc38", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 588, "deletions": 6, "changes": 594, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0ac081f6b81bb06d2a6a12349f6b32d503a65716", "patch": "@@ -96,6 +96,9 @@ int fixuplabelno = 0;\n /* ABI enumeration available for subtarget to use.  */\n enum rs6000_abi rs6000_current_abi;\n \n+/* ABI string from -mabi= option.  */\n+const char *rs6000_abi_string;\n+\n /* Debug flags */\n const char *rs6000_debug_name;\n int rs6000_debug_stack;\t\t/* debug stack applications */\n@@ -146,6 +149,13 @@ static int rs6000_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int rs6000_adjust_priority PARAMS ((rtx, int));\n static int rs6000_issue_rate PARAMS ((void));\n \n+static void rs6000_init_builtins PARAMS ((tree));\n+static void altivec_init_builtins PARAMS ((void));\n+static rtx rs6000_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n+static rtx altivec_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n+static rtx altivec_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n+\n+static void rs6000_parse_abi_options PARAMS ((void));\n \f\n /* Default register names.  */\n char rs6000_reg_names[][8] =\n@@ -160,7 +170,13 @@ char rs6000_reg_names[][8] =\n      \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n      \"mq\", \"lr\", \"ctr\",\"ap\",\n       \"0\",  \"1\",  \"2\",  \"3\",  \"4\",  \"5\",  \"6\",  \"7\",\n-      \"xer\"\n+      \"xer\",\n+      /* AltiVec registers.  */\n+      \"v0\",  \"v1\",  \"v2\",  \"v3\",  \"v4\",  \"v5\",  \"v6\", \"v7\",\n+      \"v8\",  \"v9\",  \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\",\n+      \"v16\", \"v17\", \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\",\n+      \"v24\", \"v25\", \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\",\n+      \"vrsave\"\n };\n \n #ifdef TARGET_REGNAMES\n@@ -176,7 +192,13 @@ static const char alt_reg_names[][8] =\n   \"%f24\",  \"%f25\", \"%f26\", \"%f27\", \"%f28\", \"%f29\", \"%f30\", \"%f31\",\n     \"mq\",    \"lr\",  \"ctr\",   \"ap\",\n   \"%cr0\",  \"%cr1\", \"%cr2\", \"%cr3\", \"%cr4\", \"%cr5\", \"%cr6\", \"%cr7\",\n-  \"xer\"\n+   \"xer\",\n+   /* AltiVec registers.  */\n+   \"%v0\",  \"%v1\",  \"%v2\",  \"%v3\",  \"%v4\",  \"%v5\",  \"%v6\", \"%v7\",\n+   \"%v8\",  \"%v9\",  \"%v10\", \"%v11\", \"%v12\", \"%v13\", \"%v14\", \"%v15\",\n+   \"%v16\", \"%v17\", \"%v18\", \"%v19\", \"%v20\", \"%v21\", \"%v22\", \"%v23\",\n+   \"%v24\", \"%v25\", \"%v26\", \"%v27\", \"%v28\", \"%v29\", \"%v30\", \"%v31\",\n+   \"%vrsave\"\n };\n #endif\n \f\n@@ -205,6 +227,12 @@ static const char alt_reg_names[][8] =\n #undef TARGET_SCHED_ADJUST_PRIORITY\n #define TARGET_SCHED_ADJUST_PRIORITY rs6000_adjust_priority\n \n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS rs6000_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n@@ -438,6 +466,9 @@ rs6000_override_options (default_cpu)\n \terror (\"Unknown -mdebug-%s switch\", rs6000_debug_name);\n     }\n \n+  /* Handle -mabi= options.  */\n+  rs6000_parse_abi_options ();\n+\n #ifdef TARGET_REGNAMES\n   /* If the user desires alternate register names, copy in the\n      alternate names now.  */\n@@ -463,6 +494,17 @@ rs6000_override_options (default_cpu)\n   free_machine_status = rs6000_free_machine_status;\n }\n \n+/* Handle -mabi= options.  */\n+void rs6000_parse_abi_options ()\n+{\n+  if (rs6000_abi_string == 0)\n+    return;\n+  else if (! strcmp (rs6000_abi_string, \"altivec\"))\n+    target_flags |= MASK_ALTIVEC_ABI;\n+  else\n+    error (\"Unknown ABI specified: '%s'\", rs6000_abi_string);\n+}\n+\n void\n optimization_options (level, size)\n      int level ATTRIBUTE_UNUSED;\n@@ -1544,7 +1586,7 @@ rs6000_legitimize_address (x, oldx, mode)\n      rtx x;\n      rtx oldx ATTRIBUTE_UNUSED;\n      enum machine_mode mode;\n-{ \n+{\n   if (GET_CODE (x) == PLUS \n       && GET_CODE (XEXP (x, 0)) == REG\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n@@ -1570,6 +1612,18 @@ rs6000_legitimize_address (x, oldx, mode)\n       return gen_rtx_PLUS (Pmode, XEXP (x, 0),\n \t\t\t   force_reg (Pmode, force_operand (XEXP (x, 1), 0)));\n     }\n+  else if (ALTIVEC_VECTOR_MODE (mode))\n+    {\n+      rtx reg;\n+\n+      /* Make sure both operands are registers.  */\n+      if (GET_CODE (x) == PLUS)\n+\treturn gen_rtx_PLUS (Pmode, XEXP (x, 0),\n+\t\t\t     force_reg (Pmode, XEXP (x, 1)));\n+\n+      reg = force_reg (Pmode, x);\n+      return reg;\n+    }\n   else if (TARGET_ELF && TARGET_32BIT && TARGET_NO_TOC && ! flag_pic\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE \n@@ -1887,6 +1941,15 @@ rs6000_emit_move (dest, source, mode)\n \toperands[1] = force_const_mem (mode, operands[1]);\n       break;\n       \n+    case V16QImode:\n+    case V8HImode:\n+    case V4SFmode:\n+    case V4SImode:\n+      /* fixme: aldyh -- allow vector constants when they are implemented.  */\n+      if (CONSTANT_P (operands[1]))\n+\toperands[1] = force_const_mem (mode, operands[1]);\n+      break;\n+      \n     case SImode:\n     case DImode:\n       /* Use default pattern for address of ELF small data */\n@@ -2087,6 +2150,7 @@ init_cumulative_args (cum, fntype, libname, incoming)\n   *cum = zero_cumulative;\n   cum->words = 0;\n   cum->fregno = FP_ARG_MIN_REG;\n+  cum->vregno = ALTIVEC_ARG_MIN_REG;\n   cum->prototype = (fntype && TYPE_ARG_TYPES (fntype));\n   cum->call_cookie = CALL_NORMAL;\n   cum->sysv_gregno = GP_ARG_MIN_REG;\n@@ -2167,6 +2231,8 @@ function_arg_boundary (mode, type)\n   if ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n       && (mode == DImode || mode == DFmode))\n     return 64;\n+  else if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+    return 128;\n   else\n     return PARM_BOUNDARY;\n }\n@@ -2184,7 +2250,14 @@ function_arg_advance (cum, mode, type, named)\n {\n   cum->nargs_prototype--;\n \n-  if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n+  if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+    {\n+      if (cum->vregno <= ALTIVEC_ARG_MAX_REG && cum->nargs_prototype >= 0)\n+\tcum->vregno++;\n+      else\n+\tcum->words += RS6000_ARG_SIZE (mode, type);\n+    }\n+  else if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n     {\n       if (TARGET_HARD_FLOAT\n \t  && (mode == SFmode || mode == DFmode))\n@@ -2312,7 +2385,14 @@ function_arg (cum, mode, type, named)\n       return GEN_INT (cum->call_cookie);\n     }\n \n-  if (abi == ABI_V4 || abi == ABI_SOLARIS)\n+  if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+    {\n+      if (cum->vregno <= ALTIVEC_ARG_MAX_REG)\n+\treturn gen_rtx_REG (mode, cum->vregno);\n+      else\n+\treturn NULL;\n+    }\n+  else if (abi == ABI_V4 || abi == ABI_SOLARIS)\n     {\n       if (TARGET_HARD_FLOAT\n \t  && (mode == SFmode || mode == DFmode))\n@@ -2407,7 +2487,8 @@ function_arg_partial_nregs (cum, mode, type, named)\n   if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n     return 0;\n \n-  if (USE_FP_FOR_ARG_P (*cum, mode, type))\n+  if (USE_FP_FOR_ARG_P (*cum, mode, type)\n+      || USE_ALTIVEC_FOR_ARG_P (*cum, mode, type))\n     {\n       if (cum->nargs_prototype >= 0)\n \treturn 0;\n@@ -2863,6 +2944,476 @@ rs6000_va_arg (valist, type)\n \n   return addr_rtx;\n }\n+\n+/* Builtins.  */\n+\n+#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if ((MASK) & target_flags)\t\t\t\t\t\t\\\n+    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL);\t\\\n+} while (0)\n+\n+struct builtin_description\n+{\n+  const unsigned int mask;\n+  const enum insn_code icode;\n+  const char *const name;\n+  const enum rs6000_builtins code;\n+};\n+\n+/* Simple binary operatiors: VECc = foo (VECa, VECb).  */\n+static const struct builtin_description bdesc_2arg[] =\n+{\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddubm, \"__builtin_altivec_vaddubm\", ALTIVEC_BUILTIN_VADDUBM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vadduhm, \"__builtin_altivec_vadduhm\", ALTIVEC_BUILTIN_VADDUHM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vadduwm, \"__builtin_altivec_vadduwm\", ALTIVEC_BUILTIN_VADDUWM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddfp, \"__builtin_altivec_vaddfp\", ALTIVEC_BUILTIN_VADDFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddcuw, \"__builtin_altivec_vaddcuw\", ALTIVEC_BUILTIN_VADDCUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddubs, \"__builtin_altivec_vaddubs\", ALTIVEC_BUILTIN_VADDUBS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddsbs, \"__builtin_altivec_vaddsbs\", ALTIVEC_BUILTIN_VADDSBS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vadduhs, \"__builtin_altivec_vadduhs\", ALTIVEC_BUILTIN_VADDUHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddshs, \"__builtin_altivec_vaddshs\", ALTIVEC_BUILTIN_VADDSHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vadduws, \"__builtin_altivec_vadduws\", ALTIVEC_BUILTIN_VADDUWS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vaddsws, \"__builtin_altivec_vaddsws\", ALTIVEC_BUILTIN_VADDSWS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vand, \"__builtin_altivec_vand\", ALTIVEC_BUILTIN_VAND },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vandc, \"__builtin_altivec_vandc\", ALTIVEC_BUILTIN_VANDC },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vavgub, \"__builtin_altivec_vavgub\", ALTIVEC_BUILTIN_VAVGUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vavgsb, \"__builtin_altivec_vavgsb\", ALTIVEC_BUILTIN_VAVGSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vavguh, \"__builtin_altivec_vavguh\", ALTIVEC_BUILTIN_VAVGUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vavgsh, \"__builtin_altivec_vavgsh\", ALTIVEC_BUILTIN_VAVGSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vavguw, \"__builtin_altivec_vavguw\", ALTIVEC_BUILTIN_VAVGUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vavgsw, \"__builtin_altivec_vavgsw\", ALTIVEC_BUILTIN_VAVGSW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpbfp, \"__builtin_altivec_vcmpbfp\", ALTIVEC_BUILTIN_VCMPBFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpequb, \"__builtin_altivec_vcmpequb\", ALTIVEC_BUILTIN_VCMPEQUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpequh, \"__builtin_altivec_vcmpequh\", ALTIVEC_BUILTIN_VCMPEQUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpequw, \"__builtin_altivec_vcmpequw\", ALTIVEC_BUILTIN_VCMPEQUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpeqfp, \"__builtin_altivec_vcmpeqfp\", ALTIVEC_BUILTIN_VCMPEQFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgefp, \"__builtin_altivec_vcmpgefp\", ALTIVEC_BUILTIN_VCMPGEFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtub, \"__builtin_altivec_vcmpgtub\", ALTIVEC_BUILTIN_VCMPGTUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtsb, \"__builtin_altivec_vcmpgtsb\", ALTIVEC_BUILTIN_VCMPGTSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtuh, \"__builtin_altivec_vcmpgtuh\", ALTIVEC_BUILTIN_VCMPGTUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtsh, \"__builtin_altivec_vcmpgtsh\", ALTIVEC_BUILTIN_VCMPGTSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtuw, \"__builtin_altivec_vcmpgtuw\", ALTIVEC_BUILTIN_VCMPGTUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtsw, \"__builtin_altivec_vcmpgtsw\", ALTIVEC_BUILTIN_VCMPGTSW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtfp, \"__builtin_altivec_vcmpgtfp\", ALTIVEC_BUILTIN_VCMPGTFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxub, \"__builtin_altivec_vmaxub\", ALTIVEC_BUILTIN_VMAXUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxsb, \"__builtin_altivec_vmaxsb\", ALTIVEC_BUILTIN_VMAXSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxuh, \"__builtin_altivec_vmaxuh\", ALTIVEC_BUILTIN_VMAXUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxsh, \"__builtin_altivec_vmaxsh\", ALTIVEC_BUILTIN_VMAXSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxuw, \"__builtin_altivec_vmaxuw\", ALTIVEC_BUILTIN_VMAXUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxsw, \"__builtin_altivec_vmaxsw\", ALTIVEC_BUILTIN_VMAXSW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaxfp, \"__builtin_altivec_vmaxfp\", ALTIVEC_BUILTIN_VMAXFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmrghb, \"__builtin_altivec_vmrghb\", ALTIVEC_BUILTIN_VMRGHB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmrghh, \"__builtin_altivec_vmrghh\", ALTIVEC_BUILTIN_VMRGHH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmrghw, \"__builtin_altivec_vmrghw\", ALTIVEC_BUILTIN_VMRGHW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmrglb, \"__builtin_altivec_vmrglb\", ALTIVEC_BUILTIN_VMRGLB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmrglh, \"__builtin_altivec_vmrglh\", ALTIVEC_BUILTIN_VMRGLH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmrglw, \"__builtin_altivec_vmrglw\", ALTIVEC_BUILTIN_VMRGLW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminub, \"__builtin_altivec_vminub\", ALTIVEC_BUILTIN_VMINUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminsb, \"__builtin_altivec_vminsb\", ALTIVEC_BUILTIN_VMINSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminuh, \"__builtin_altivec_vminuh\", ALTIVEC_BUILTIN_VMINUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminsh, \"__builtin_altivec_vminsh\", ALTIVEC_BUILTIN_VMINSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminuw, \"__builtin_altivec_vminuw\", ALTIVEC_BUILTIN_VMINUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminsw, \"__builtin_altivec_vminsw\", ALTIVEC_BUILTIN_VMINSW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vminfp, \"__builtin_altivec_vminfp\", ALTIVEC_BUILTIN_VMINFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmuleub, \"__builtin_altivec_vmuleub\", ALTIVEC_BUILTIN_VMULEUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmulesb, \"__builtin_altivec_vmulesb\", ALTIVEC_BUILTIN_VMULESB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmuleuh, \"__builtin_altivec_vmuleuh\", ALTIVEC_BUILTIN_VMULEUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmulesh, \"__builtin_altivec_vmulesh\", ALTIVEC_BUILTIN_VMULESH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmuloub, \"__builtin_altivec_vmuloub\", ALTIVEC_BUILTIN_VMULOUB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmulosb, \"__builtin_altivec_vmulosb\", ALTIVEC_BUILTIN_VMULOSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmulouh, \"__builtin_altivec_vmulouh\", ALTIVEC_BUILTIN_VMULOUH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmulosh, \"__builtin_altivec_vmulosh\", ALTIVEC_BUILTIN_VMULOSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vnor, \"__builtin_altivec_vnor\", ALTIVEC_BUILTIN_VNOR },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vor, \"__builtin_altivec_vor\", ALTIVEC_BUILTIN_VOR },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkuhum, \"__builtin_altivec_vpkuhum\", ALTIVEC_BUILTIN_VPKUHUM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkuwum, \"__builtin_altivec_vpkuwum\", ALTIVEC_BUILTIN_VPKUWUM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkpx, \"__builtin_altivec_vpkpx\", ALTIVEC_BUILTIN_VPKPX },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkuhss, \"__builtin_altivec_vpkuhss\", ALTIVEC_BUILTIN_VPKUHSS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkshss, \"__builtin_altivec_vpkshss\", ALTIVEC_BUILTIN_VPKSHSS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkuwss, \"__builtin_altivec_vpkuwss\", ALTIVEC_BUILTIN_VPKUWSS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkswss, \"__builtin_altivec_vpkswss\", ALTIVEC_BUILTIN_VPKSWSS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkuhus, \"__builtin_altivec_vpkuhus\", ALTIVEC_BUILTIN_VPKUHUS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkshus, \"__builtin_altivec_vpkshus\", ALTIVEC_BUILTIN_VPKSHUS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkuwus, \"__builtin_altivec_vpkuwus\", ALTIVEC_BUILTIN_VPKUWUS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vpkswus, \"__builtin_altivec_vpkswus\", ALTIVEC_BUILTIN_VPKSWUS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vrlb, \"__builtin_altivec_vrlb\", ALTIVEC_BUILTIN_VRLB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vrlh, \"__builtin_altivec_vrlh\", ALTIVEC_BUILTIN_VRLH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vrlw, \"__builtin_altivec_vrlw\", ALTIVEC_BUILTIN_VRLW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vslb, \"__builtin_altivec_vslb\", ALTIVEC_BUILTIN_VSLB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vslh, \"__builtin_altivec_vslh\", ALTIVEC_BUILTIN_VSLH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vslw, \"__builtin_altivec_vslw\", ALTIVEC_BUILTIN_VSLW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsl, \"__builtin_altivec_vsl\", ALTIVEC_BUILTIN_VSL },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vslo, \"__builtin_altivec_vslo\", ALTIVEC_BUILTIN_VSLO },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsrb, \"__builtin_altivec_vsrb\", ALTIVEC_BUILTIN_VSRB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vrsh, \"__builtin_altivec_vrsh\", ALTIVEC_BUILTIN_VRSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vrsw, \"__builtin_altivec_vrsw\", ALTIVEC_BUILTIN_VRSW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsrab, \"__builtin_altivec_vsrab\", ALTIVEC_BUILTIN_VSRAB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsrah, \"__builtin_altivec_vsrah\", ALTIVEC_BUILTIN_VSRAH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsraw, \"__builtin_altivec_vsraw\", ALTIVEC_BUILTIN_VSRAW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsr, \"__builtin_altivec_vsr\", ALTIVEC_BUILTIN_VSR },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsro, \"__builtin_altivec_vsro\", ALTIVEC_BUILTIN_VSRO },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsububm, \"__builtin_altivec_vsububm\", ALTIVEC_BUILTIN_VSUBUBM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubuhm, \"__builtin_altivec_vsubuhm\", ALTIVEC_BUILTIN_VSUBUHM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubuwm, \"__builtin_altivec_vsubuwm\", ALTIVEC_BUILTIN_VSUBUWM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubfp, \"__builtin_altivec_vsubfp\", ALTIVEC_BUILTIN_VSUBFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubcuw, \"__builtin_altivec_vsubcuw\", ALTIVEC_BUILTIN_VSUBCUW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsububs, \"__builtin_altivec_vsububs\", ALTIVEC_BUILTIN_VSUBUBS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubsbs, \"__builtin_altivec_vsubsbs\", ALTIVEC_BUILTIN_VSUBSBS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubuhs, \"__builtin_altivec_vsubuhs\", ALTIVEC_BUILTIN_VSUBUHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubshs, \"__builtin_altivec_vsubshs\", ALTIVEC_BUILTIN_VSUBSHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubuws, \"__builtin_altivec_vsubuws\", ALTIVEC_BUILTIN_VSUBUWS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsubsws, \"__builtin_altivec_vsubsws\", ALTIVEC_BUILTIN_VSUBSWS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsum4ubs, \"__builtin_altivec_vsum4ubs\", ALTIVEC_BUILTIN_VSUM4UBS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsum4sbs, \"__builtin_altivec_vsum4sbs\", ALTIVEC_BUILTIN_VSUM4SBS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsum4shs, \"__builtin_altivec_vsum4shs\", ALTIVEC_BUILTIN_VSUM4SHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsum2sws, \"__builtin_altivec_vsum2sws\", ALTIVEC_BUILTIN_VSUM2SWS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsumsws, \"__builtin_altivec_vsumsws\", ALTIVEC_BUILTIN_VSUMSWS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vxor, \"__builtin_altivec_vxor\", ALTIVEC_BUILTIN_VXOR },\n+};\n+\n+static rtx\n+altivec_expand_binop_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat;\n+  tree arg0 = TREE_VALUE (arglist);\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+\n+  if (! target\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  pat = GEN_FCN (icode) (target, op0, op1);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n+\n+static rtx\n+altivec_expand_builtin (exp, target, subtarget, mode, ignore)\n+     tree exp;\n+     rtx target;\n+     rtx subtarget;\n+     enum machine_mode mode;\n+     int ignore;\n+{\n+  struct builtin_description *d;\n+  size_t i;\n+  enum insn_code icode;\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg0, arg1, arg2, arg3;\n+  rtx op0, op1, op2, pat;\n+  enum machine_mode tmode, mode0, mode1, mode2;\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  \n+  switch (fcode)\n+    {\n+    case ALTIVEC_BUILTIN_LD_INTERNAL:\n+      icode = CODE_FOR_altivec_lvx;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode0 = insn_data[icode].operand[1].mode;\n+\n+      if (! target\n+\t  || GET_MODE (target) != tmode\n+\t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+\n+      if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+\top0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n+\n+      pat = GEN_FCN (icode) (target, op0);\n+      if (! pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return target;\n+\n+    case ALTIVEC_BUILTIN_ST_INTERNAL:\n+      icode = CODE_FOR_altivec_stvx;\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+\n+      if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n+\top0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n+      if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n+\top1 = copy_to_mode_reg (mode1, op1);\n+\n+      pat = GEN_FCN (icode) (op0, op1);\n+      if (! pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return NULL_RTX;\n+    }\n+\n+  /* Handle simple binary operations.  */\n+  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+    if (d->code == fcode)\n+      return altivec_expand_binop_builtin (d->icode, arglist, target);\n+\n+  abort ();\n+  return NULL_RTX;\n+}\n+\n+/* Expand an expression EXP that calls a built-in function,\n+   with result going to TARGET if that's convenient\n+   (and in mode MODE if that's convenient).\n+   SUBTARGET may be used as the target for computing one of EXP's operands.\n+   IGNORE is nonzero if the value is to be ignored.  */\n+\n+static rtx\n+rs6000_expand_builtin (exp, target, subtarget, mode, ignore)\n+     tree exp;\n+     rtx target;\n+     rtx subtarget;\n+     enum machine_mode mode;\n+     int ignore;\n+{\n+  if (TARGET_ALTIVEC)\n+    return altivec_expand_builtin (exp, target, subtarget, mode, ignore);\n+\n+  abort ();\n+}\n+\n+static void\n+rs6000_init_builtins (list_node)\n+     tree list_node ATTRIBUTE_UNUSED;\n+{\n+  if (TARGET_ALTIVEC)\n+    altivec_init_builtins ();\n+}\n+\n+static void\n+altivec_init_builtins (void)\n+{\n+  struct builtin_description * d;\n+  size_t i;\n+\n+  tree endlink = void_list_node;\n+\n+  tree pint_type_node = build_pointer_type (integer_type_node);\n+\n+  /* V4SI foo (int *).  */\n+  tree v4si_ftype_pint\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pint_type_node, endlink));\n+\n+  /* void foo (int *, V4SI).  */\n+  tree void_ftype_pint_v4si\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pint_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v4si_ftype_v4si_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v4sf_ftype_v4sf_v4sf\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v8hi_ftype_v8hi_v8hi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v16qi_ftype_v16qi_v16qi\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v4si_ftype_v4sf_v4sf\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v8hi_ftype_v16qi_v16qi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v4si_ftype_v8hi_v8hi\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v8hi_ftype_v4si_v4si\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v16qi_ftype_v8hi_v8hi\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v4si_ftype_v16qi_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v4si_ftype_v8hi_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree int_ftype_v4si_v4si\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree int_ftype_v4sf_v4sf\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree int_ftype_v16qi_v16qi\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree int_ftype_v8hi_v8hi\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal\", v4si_ftype_pint, ALTIVEC_BUILTIN_LD_INTERNAL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal\", void_ftype_pint_v4si, ALTIVEC_BUILTIN_ST_INTERNAL);\n+\n+  /* Add the simple binary operators.  */\n+  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+    {\n+      enum machine_mode mode0, mode1, mode2;\n+      tree type;\n+\n+      if (d->name == 0)\n+\tcontinue;\n+      \n+      mode0 = insn_data[d->icode].operand[0].mode;\n+      mode1 = insn_data[d->icode].operand[1].mode;\n+      mode2 = insn_data[d->icode].operand[2].mode;\n+\n+      /* When all three operands are of the same mode.  */\n+      if (mode0 == mode1 && mode1 == mode2)\n+\t{\n+\t  switch (mode0)\n+\t    {\n+\t    case V4SFmode:\n+\t      type = v4sf_ftype_v4sf_v4sf;\n+\t      break;\n+\t    case V4SImode:\n+\t      type = v4si_ftype_v4si_v4si;\n+\t      break;\n+\t    case V16QImode:\n+\t      type = v16qi_ftype_v16qi_v16qi;\n+\t      break;\n+\t    case V8HImode:\n+\t      type = v8hi_ftype_v8hi_v8hi;\n+\t      break;\n+\t    default:\n+\t      abort ();\n+\t    }\n+\t}\n+\n+      /* A few other combos we really don't want to do manually.  */\n+\n+      /* vint, vfloat, vfloat.  */\n+      else if (mode0 == V4SImode && mode1 == V4SFmode && mode2 == V4SFmode)\n+\ttype = v4si_ftype_v4sf_v4sf;\n+\n+      /* vshort, vchar, vchar.  */\n+      else if (mode0 == V8HImode && mode1 == V16QImode && mode2 == V16QImode)\n+\ttype = v8hi_ftype_v16qi_v16qi;\n+\n+      /* vint, vshort, vshort.  */\n+      else if (mode0 == V4SImode && mode1 == V8HImode && mode2 == V8HImode)\n+\ttype = v4si_ftype_v8hi_v8hi;\n+\n+      /* vshort, vint, vint.  */\n+      else if (mode0 == V8HImode && mode1 == V4SImode && mode2 == V4SImode)\n+\ttype = v8hi_ftype_v4si_v4si;\n+\n+      /* vchar, vshort, vshort.  */\n+      else if (mode0 == V16QImode && mode1 == V8HImode && mode2 == V8HImode)\n+\ttype = v16qi_ftype_v8hi_v8hi;\n+\n+      /* vint, vchar, vint.  */\n+      else if (mode0 == V4SImode && mode1 == V16QImode && mode2 == V4SImode)\n+\ttype = v4si_ftype_v16qi_v4si;\n+\n+      /* vint, vshort, vint.  */\n+      else if (mode0 == V4SImode && mode1 == V8HImode && mode2 == V4SImode)\n+\ttype = v4si_ftype_v8hi_v4si;\n+\n+      /* fixme: aldyh */\n+      /* int, x, x.  */\n+      else if (mode0 == SImode)\n+\t{\n+\t  switch (mode1)\n+\t    {\n+\t    case V4SImode:\n+\t      type = int_ftype_v4si_v4si;\n+\t      break;\n+\t    case V4SFmode:\n+\t      type = int_ftype_v4sf_v4sf;\n+\t      break;\n+\t    case V16QImode:\n+\t      type = int_ftype_v16qi_v16qi;\n+\t      break;\n+\t    case V8HImode:\n+\t      type = int_ftype_v8hi_v8hi;\n+\t      break;\n+\t    default:\n+\t      abort ();\n+\t    }\n+\t}\n+\n+      else\n+\tabort ();\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+}\n+\n \f\n /* Generate a memory reference for expand_block_move, copying volatile,\n    and other bits from an original memory reference.  */\n@@ -3966,6 +4517,11 @@ secondary_reload_class (class, mode, in)\n       && (class == FLOAT_REGS || class == NON_SPECIAL_REGS))\n     return NO_REGS;\n \n+  /* Memory, and AltiVec registers can go into AltiVec registers.  */\n+  if ((regno == -1 || ALTIVEC_REGNO_P (regno))\n+      && class == ALTIVEC_REGS)\n+    return NO_REGS;\n+\n   /* We can copy among the CR registers.  */\n   if ((class == CR_REGS || class == CR0_REGS)\n       && regno >= 0 && CR_REGNO_P (regno))\n@@ -4739,6 +5295,32 @@ print_operand (file, x, code)\n \t\t     reg_names[SMALL_DATA_REG]);\n \t}\n       return;\n+\n+      /* Print AltiVec memory operand.  */\n+    case 'y':\n+      {\n+\trtx tmp;\n+\n+\tif (GET_CODE (x) != MEM)\n+\t  abort ();\n+\n+\ttmp = XEXP (x, 0);\n+\n+\tif (GET_CODE (tmp) == REG)\n+\t  fprintf (file, \"0, %s\", reg_names[REGNO (tmp)]);\n+\telse if (GET_CODE (tmp) == PLUS && GET_CODE (XEXP (tmp, 1)) == REG)\n+\t  {\n+\t    if (REGNO (XEXP (tmp, 0)) == 0)\n+\t      fprintf (file, \"%s,%s\", reg_names[ REGNO (XEXP (tmp, 1)) ],\n+\t\t       reg_names[ REGNO (XEXP (tmp, 0)) ]);\n+\t    else\n+\t      fprintf (file, \"%s,%s\", reg_names[ REGNO (XEXP (tmp, 0)) ],\n+\t\t       reg_names[ REGNO (XEXP (tmp, 1)) ]);\n+\t  }\n+\telse\n+\t  abort ();\n+\tbreak;\n+      }\n \t\t\t    \n     case 0:\n       if (GET_CODE (x) == REG)"}, {"sha": "a5fa10b5b27ef6dc75e65369b6212b869587a998", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 327, "deletions": 43, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0ac081f6b81bb06d2a6a12349f6b32d503a65716", "patch": "@@ -83,7 +83,8 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=801: -D_ARCH_PPC} \\\n %{mcpu=821: -D_ARCH_PPC} \\\n %{mcpu=823: -D_ARCH_PPC} \\\n-%{mcpu=860: -D_ARCH_PPC}\"\n+%{mcpu=860: -D_ARCH_PPC} \\\n+%{maltivec: -D__ALTIVEC__}\"\n \n /* Common ASM definitions used by ASM_SPEC among the various targets\n    for handling -mcpu=xxx switches.  */\n@@ -209,6 +210,12 @@ extern int target_flags;\n /* Nonzero if we need to schedule the prolog and epilog.  */\n #define MASK_SCHED_PROLOG\t0x00040000\n \n+/* Use AltiVec instructions.  */\n+#define MASK_ALTIVEC\t\t0x00080000\n+\n+/* Enhance the current ABI with AltiVec extensions.  */\n+#define MASK_ALTIVEC_ABI\t0x00100000\n+\n #define TARGET_POWER\t\t(target_flags & MASK_POWER)\n #define TARGET_POWER2\t\t(target_flags & MASK_POWER2)\n #define TARGET_POWERPC\t\t(target_flags & MASK_POWERPC)\n@@ -227,6 +234,8 @@ extern int target_flags;\n #define TARGET_NO_UPDATE\t(target_flags & MASK_NO_UPDATE)\n #define TARGET_NO_FUSED_MADD\t(target_flags & MASK_NO_FUSED_MADD)\n #define TARGET_SCHED_PROLOG\t(target_flags & MASK_SCHED_PROLOG)\n+#define TARGET_ALTIVEC\t\t(target_flags & MASK_ALTIVEC)\n+#define TARGET_ALTIVEC_ABI\t(target_flags & MASK_ALTIVEC_ABI)\n \n #define TARGET_32BIT\t\t(! TARGET_64BIT)\n #define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n@@ -282,6 +291,10 @@ extern int target_flags;\n \t\t\tN_(\"Use PowerPC-64 instruction set\")},\t\t\\\n   {\"no-powerpc64\",\t- MASK_POWERPC64,\t\t\t\t\\\n \t\t\tN_(\"Don't use PowerPC-64 instruction set\")},\t\\\n+  {\"altivec\",\t\tMASK_ALTIVEC,\t\t\t\t\t\\\n+\t\t\tN_(\"Use AltiVec instructions.\")},\t\t\\\n+  {\"no-altivec\",\t- MASK_ALTIVEC,\t\t\t\t\t\\\n+\t\t\tN_(\"Don't use AltiVec instructions.\")},\t\\\n   {\"new-mnemonics\",\tMASK_NEW_MNEMONICS,\t\t\t\t\\\n \t\t\tN_(\"Use new mnemonics for PowerPC architecture\")},\\\n   {\"old-mnemonics\",\t-MASK_NEW_MNEMONICS,\t\t\t\t\\\n@@ -409,6 +422,7 @@ extern enum processor_type rs6000_cpu;\n    {\"tune=\", &rs6000_select[2].string,\t\t\t\t\t\\\n     N_(\"Schedule code for given CPU\") },\t\t\t\t\\\n    {\"debug=\", &rs6000_debug_name, N_(\"Enable debug output\") },\t\t\\\n+   {\"abi=\", &rs6000_abi_string, N_(\"Specify ABI to use\") },\t\t\\\n    SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n \n@@ -424,7 +438,8 @@ struct rs6000_cpu_select\n extern struct rs6000_cpu_select rs6000_select[];\n \n /* Debug support */\n-extern const char *rs6000_debug_name;\t\t/* Name for -mdebug-xxxx option */\n+extern const char *rs6000_debug_name;\t/* Name for -mdebug-xxxx option */\n+extern const char *rs6000_abi_string;\t/* for -mabi={sysv,darwin,solaris,eabi,aix,altivec} */\n extern int rs6000_debug_stack;\t\t/* debug stack applications */\n extern int rs6000_debug_arg;\t\t/* debug argument handling */\n \n@@ -505,6 +520,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define UNITS_PER_WORD (! TARGET_POWERPC64 ? 4 : 8)\n #define MIN_UNITS_PER_WORD 4\n #define UNITS_PER_FP_WORD 8\n+#define UNITS_PER_ALTIVEC_WORD 16\n \n /* Type used for ptrdiff_t, as a string used in a declaration.  */\n #define PTRDIFF_TYPE \"int\"\n@@ -569,13 +585,20 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define PARM_BOUNDARY (TARGET_32BIT ? 32 : 64)\n \n /* Boundary (in *bits*) on which stack pointer should be aligned.  */\n-#define STACK_BOUNDARY (TARGET_32BIT ? 64 : 128)\n+#define STACK_BOUNDARY ((TARGET_32BIT && !TARGET_ALTIVEC_ABI) ? 64 : 128)\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 32\n \n /* No data type wants to be aligned rounder than this.  */\n-#define BIGGEST_ALIGNMENT 64\n+#define BIGGEST_ALIGNMENT 128\n+\n+/* A C expression to compute the alignment for a variables in the\n+   local store.  TYPE is the data type, and ALIGN is the alignment\n+   that the object would ordinarily have.  */\n+#define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n+\t((TARGET_ALTIVEC\t\t    \t\t\t\\\n+\t  && TREE_CODE (TYPE)) == VECTOR_TYPE ? 128 : ALIGN)\n \n /* Handle #pragma pack.  */\n #define HANDLE_PRAGMA_PACK 1\n@@ -594,9 +617,11 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n   (TREE_CODE (EXP) == STRING_CST\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-/* Make arrays of chars word-aligned for the same reasons.  */\n+/* Make arrays of chars word-aligned for the same reasons.\n+   Align vectors to 128 bits.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n-  (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n+  (TREE_CODE (TYPE) == VECTOR_TYPE ? 128\t\\\n+   : TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n@@ -634,10 +659,12 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    a register, in order to work around problems in allocating stack storage\n    in inline functions.  */\n \n-#define FIRST_PSEUDO_REGISTER 77\n+#define FIRST_PSEUDO_REGISTER 110\n \n /* This must not decrease, for backwards compatibility.  If\n    FIRST_PSEUDO_REGISTER increases, this should as well.  */\n+/* fixme: this needs to be defined to \"TARGET_ALTIVEC_ABI ? 110 : 77\"\n+   and then fix usages of DWARF_FRAME_REGISTERS to work.  */\n #define DWARF_FRAME_REGISTERS 77\n \n /* 1 for registers that have pervasive standard uses\n@@ -655,7 +682,12 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1}\n+   0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,\t   \\\n+   /* AltiVec registers.  */\t\t\t   \\\n+   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+   0\t\t\t\t\t\t   \\\n+}\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -669,7 +701,13 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1}\n+   1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\t   \\\n+   /* AltiVec registers.  */\t\t\t   \\\n+   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+   0\t\t\t\t\t\t   \\\n+}\n+\n \n #define MQ_REGNO     64\n #define CR0_REGNO    68\n@@ -679,6 +717,9 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define CR4_REGNO    72\n #define MAX_CR_REGNO 75\n #define XER_REGNO    76\n+#define FIRST_ALTIVEC_REGNO\t77\n+#define LAST_ALTIVEC_REGNO\t108\n+#define VRSAVE_REGNO\t\t109\n \n /* List the order in which to allocate registers.  Each register must be\n    listed once, even those in FIXED_REGISTERS.\n@@ -701,7 +742,16 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n \tmq\t\t(not saved; best to use it if we can)\n \tctr\t\t(not saved; when we have the choice ctr is better)\n \tlr\t\t(saved)\n-        cr5, r1, r2, ap, xer (fixed)  */\n+        cr5, r1, r2, ap, xer, vrsave (fixed)\n+\n+\tAltiVec registers:\n+\tv0 - v1         (not saved or used for anything)\n+\tv13 - v3        (not saved; incoming vector arg registers)\n+\tv2              (not saved; incoming vector arg reg; return value)\n+\tv19 - v14       (not saved or used for anything)\n+\tv31 - v20       (saved; order given to save least number)\n+*/\n+\t\t\t\t\t\t\n \n #define REG_ALLOC_ORDER\t\t\t\t\t\\\n   {32, \t\t\t\t\t\t\t\\\n@@ -716,7 +766,14 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19,\t\\\n    18, 17, 16, 15, 14, 13, 12,\t\t\t\t\\\n    64, 66, 65, \t\t\t\t\t\t\\\n-   73, 1, 2, 67, 76}\n+   73, 1, 2, 67, 76,\t\t\t\t\t\\\n+   /* AltiVec registers.  */\t\t\t\t\\\n+   77, 78,\t\t\t\t\t\t\\\n+   90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80,\t\t\\\n+   79,\t\t\t\t\t\t\t\\\n+   96, 95, 94, 93, 92, 91,\t\t\t\t\\\n+   108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97 \\\n+}\n \n /* True if register is floating-point.  */\n #define FP_REGNO_P(N) ((N) >= 32 && (N) <= 63)\n@@ -733,6 +790,9 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n /* True if register is the XER register.  */\n #define XER_REGNO_P(N) ((N) == XER_REGNO)\n \n+/* True if register is an AltiVec register.  */\n+#define ALTIVEC_REGNO_P(N) ((N) >= FIRST_ALTIVEC_REGNO && (N) <= LAST_ALTIVEC_REGNO)\n+\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE\n@@ -744,8 +804,23 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n   (FP_REGNO_P (REGNO)\t\t\t\t\t\t\t\\\n    ? ((GET_MODE_SIZE (MODE) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD) \\\n+   : ALTIVEC_REGNO_P (REGNO)\t\t\t\t\t\t\\\n+   ? ((GET_MODE_SIZE (MODE) + UNITS_PER_ALTIVEC_WORD - 1) / UNITS_PER_ALTIVEC_WORD) \\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n+#define ALTIVEC_VECTOR_MODE(MODE)\t\\\n+\t((MODE) == V16QImode\t\t\\\n+\t || (MODE) == V8HImode\t\t\\\n+\t || (MODE) == V4SFmode\t\t\\\n+\t || (MODE) == V4SImode)\n+\n+/* Define this macro to be nonzero if the port is prepared to handle\n+   insns involving vector mode MODE.  At the very least, it must have\n+   move patterns for this mode.  */\n+\n+#define VECTOR_MODE_SUPPORTED_P(MODE)\t\\\n+\t(TARGET_ALTIVEC && ALTIVEC_VECTOR_MODE (MODE))\n+\n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    For POWER and PowerPC, the GPRs can hold any mode, but the float\n    registers only can hold floating modes and DImode, and CR register only\n@@ -757,6 +832,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\t\t\\\n     || (GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\\\n \t&& GET_MODE_SIZE (MODE) == UNITS_PER_FP_WORD))\t\t\t\\\n+   : ALTIVEC_REGNO_P (REGNO) ? ALTIVEC_VECTOR_MODE (MODE)\t\t\\\n    : CR_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) == MODE_CC\t\t\\\n    : XER_REGNO_P (REGNO) ? (MODE) == PSImode\t\t\t\t\\\n    : ! INT_REGNO_P (REGNO) ? (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n@@ -776,6 +852,10 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    ? GET_MODE_CLASS (MODE2) == MODE_CC\t\t\\\n    : GET_MODE_CLASS (MODE2) == MODE_CC\t\t\\\n    ? GET_MODE_CLASS (MODE1) == MODE_CC\t\t\\\n+   : ALTIVEC_VECTOR_MODE (MODE1)\t\t\\\n+   ? ALTIVEC_VECTOR_MODE (MODE2)\t\t\\\n+   : ALTIVEC_VECTOR_MODE (MODE2)\t\t\\\n+   ? ALTIVEC_VECTOR_MODE (MODE1)\t\t\\\n    : 1)\n \n /* A C expression returning the cost of moving data from a register of class\n@@ -785,9 +865,11 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    registers is expensive.  */\n \n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n-   ((CLASS1) == FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 2\t\t\\\n+   ((CLASS1) == FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 2\t\\\n    : (CLASS1) == FLOAT_REGS && (CLASS2) != FLOAT_REGS ? 10\t\\\n    : (CLASS1) != FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 10\t\\\n+   : (CLASS1) == ALTIVEC_REGS && (CLASS2) != ALTIVEC_REGS ? 20\t\\\n+   : (CLASS1) != ALTIVEC_REGS && (CLASS2) == ALTIVEC_REGS ? 20\t\\\n    : (((CLASS1) == SPECIAL_REGS || (CLASS1) == MQ_REGS\t\t\\\n        || (CLASS1) == LINK_REGS || (CLASS1) == CTR_REGS\t\t\\\n        || (CLASS1) == LINK_OR_CTR_REGS)\t\t\t\t\\\n@@ -839,6 +921,12 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n     global_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n       = fixed_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n         = call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n+  if (TARGET_ALTIVEC_ABI)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fixed_regs[VRSAVE_REGNO] = call_used_regs[VRSAVE_REGNO] = 1;\t\\\n+      for (i = FIRST_ALTIVEC_REGNO; i < FIRST_ALTIVEC_REGNO + 20; ++i)\t\\\n+        call_used_regs[i] = 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n }\n \n /* Specify the registers used for certain standard purposes.\n@@ -912,6 +1000,8 @@ enum reg_class\n   BASE_REGS,\n   GENERAL_REGS,\n   FLOAT_REGS,\n+  ALTIVEC_REGS,\n+  VRSAVE_REGS,\n   NON_SPECIAL_REGS,\n   MQ_REGS,\n   LINK_REGS,\n@@ -937,6 +1027,8 @@ enum reg_class\n   \"BASE_REGS\",\t\t\t\t\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\t\t\t\\\n   \"FLOAT_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"ALTIVEC_REGS\",\t\t\t\t\t\t\t\\\n+  \"VRSAVE_REGS\",\t\t\t\t\t\t\t\\\n   \"NON_SPECIAL_REGS\",\t\t\t\t\t\t\t\\\n   \"MQ_REGS\",\t\t\t\t\t\t\t\t\\\n   \"LINK_REGS\",\t\t\t\t\t\t\t\t\\\n@@ -955,24 +1047,26 @@ enum reg_class\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n-  { 0xfffffffe, 0x00000000, 0x00000008 },\t/* BASE_REGS */\t\t\\\n-  { 0xffffffff, 0x00000000, 0x00000008 },\t/* GENERAL_REGS */\t\\\n-  { 0x00000000, 0xffffffff, 0x00000000 },\t/* FLOAT_REGS */\t\\\n-  { 0xffffffff, 0xffffffff, 0x00000008 },\t/* NON_SPECIAL_REGS */\t\\\n-  { 0x00000000, 0x00000000, 0x00000001 },\t/* MQ_REGS */\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000002 },\t/* LINK_REGS */\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000004 },\t/* CTR_REGS */\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000006 },\t/* LINK_OR_CTR_REGS */\t\\\n-  { 0x00000000, 0x00000000, 0x00000007 },\t/* SPECIAL_REGS */\t\\\n-  { 0xffffffff, 0x00000000, 0x0000000f },\t/* SPEC_OR_GEN_REGS */\t\\\n-  { 0x00000000, 0x00000000, 0x00000010 },\t/* CR0_REGS */\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000ff0 },\t/* CR_REGS */\t\t\\\n-  { 0xffffffff, 0x00000000, 0x0000ffff },\t/* NON_FLOAT_REGS */\t\\\n-  { 0x00000000, 0x00000000, 0x00010000 },\t/* XER_REGS */\t\t\\\n-  { 0xffffffff, 0xffffffff, 0x0001ffff }\t/* ALL_REGS */\t\t\\\n+#define REG_CLASS_CONTENTS\t\t\t\t\t\t     \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }, /* NO_REGS */\t     \\\n+  { 0xfffffffe, 0x00000000, 0x00000008, 0x00000000 }, /* BASE_REGS */\t     \\\n+  { 0xffffffff, 0x00000000, 0x00000008, 0x00000000 }, /* GENERAL_REGS */     \\\n+  { 0x00000000, 0xffffffff, 0x00000000, 0x00000000 }, /* FLOAT_REGS */       \\\n+  { 0x00000000, 0x00000000, 0xffffe000, 0x0001ffff }, /* ALTIVEC_REGS */     \\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00020000 }, /* VRSAVE_REGS */\t     \\\n+  { 0xffffffff, 0xffffffff, 0x00000008, 0x00000000 }, /* NON_SPECIAL_REGS */ \\\n+  { 0x00000000, 0x00000000, 0x00000001, 0x00000000 }, /* MQ_REGS */\t     \\\n+  { 0x00000000, 0x00000000, 0x00000002, 0x00000000 }, /* LINK_REGS */\t     \\\n+  { 0x00000000, 0x00000000, 0x00000004, 0x00000000 }, /* CTR_REGS */\t     \\\n+  { 0x00000000, 0x00000000, 0x00000006, 0x00000000 }, /* LINK_OR_CTR_REGS */ \\\n+  { 0x00000000, 0x00000000, 0x00000007, 0x00000000 }, /* SPECIAL_REGS */     \\\n+  { 0xffffffff, 0x00000000, 0x0000000f, 0x00000000 }, /* SPEC_OR_GEN_REGS */ \\\n+  { 0x00000000, 0x00000000, 0x00000010, 0x00000000 }, /* CR0_REGS */\t     \\\n+  { 0x00000000, 0x00000000, 0x00000ff0, 0x00000000 }, /* CR_REGS */\t     \\\n+  { 0xffffffff, 0x00000000, 0x0000ffff, 0x00000000 }, /* NON_FLOAT_REGS */   \\\n+  { 0x00000000, 0x00000000, 0x00010000, 0x00000000 }, /* XER_REGS */\t     \\\n+  { 0xffffffff, 0xffffffff, 0xffffffff, 0x0001ffff }  /* ALL_REGS */\t     \\\n }\n \n /* The same information, inverted:\n@@ -984,13 +1078,15 @@ enum reg_class\n  ((REGNO) == 0 ? GENERAL_REGS\t\t\t\\\n   : (REGNO) < 32 ? BASE_REGS\t\t\t\\\n   : FP_REGNO_P (REGNO) ? FLOAT_REGS\t\t\\\n+  : ALTIVEC_REGNO_P (REGNO) ? ALTIVEC_REGS\t\\\n   : (REGNO) == CR0_REGNO ? CR0_REGS\t\t\\\n   : CR_REGNO_P (REGNO) ? CR_REGS\t\t\\\n   : (REGNO) == MQ_REGNO ? MQ_REGS\t\t\\\n   : (REGNO) == LINK_REGISTER_REGNUM ? LINK_REGS\t\\\n   : (REGNO) == COUNT_REGISTER_REGNUM ? CTR_REGS\t\\\n   : (REGNO) == ARG_POINTER_REGNUM ? BASE_REGS\t\\\n   : (REGNO) == XER_REGNO ? XER_REGS\t\t\\\n+  : (REGNO) == VRSAVE_REGNO ? VRSAVE_REGS\t\\\n   : NO_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n@@ -1006,6 +1102,7 @@ enum reg_class\n    : (C) == 'q' ? MQ_REGS\t\\\n    : (C) == 'c' ? CTR_REGS\t\\\n    : (C) == 'l' ? LINK_REGS\t\\\n+   : (C) == 'v' ? ALTIVEC_REGS\t\\\n    : (C) == 'x' ? CR0_REGS\t\\\n    : (C) == 'y' ? CR_REGS\t\\\n    : (C) == 'z' ? XER_REGS\t\\\n@@ -1103,11 +1200,14 @@ enum reg_class\n #define SECONDARY_RELOAD_CLASS(CLASS,MODE,IN) \\\n   secondary_reload_class (CLASS, MODE, IN)\n \n-/* If we are copying between FP registers and anything else, we need a memory\n-   location.  */\n+/* If we are copying between FP or AltiVec registers and anything\n+   else, we need a memory location.  */\n \n-#define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE) \\\n- ((CLASS1) != (CLASS2) && ((CLASS1) == FLOAT_REGS || (CLASS2) == FLOAT_REGS))\n+#define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE) \t\t\\\n+ ((CLASS1) != (CLASS2) && ((CLASS1) == FLOAT_REGS\t\t\\\n+\t\t\t   || (CLASS2) == FLOAT_REGS\t\t\\\n+\t\t\t   || (CLASS1) == ALTIVEC_REGS\t\t\\\n+\t\t\t   || (CLASS2) == ALTIVEC_REGS))\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.\n@@ -1294,16 +1394,18 @@ typedef struct rs6000_stack {\n \t\t&& TYPE_PRECISION (VALTYPE) < BITS_PER_WORD)\t\\\n \t       || POINTER_TYPE_P (VALTYPE)\t\t\t\\\n \t       ? word_mode : TYPE_MODE (VALTYPE),\t\t\\\n-\t       TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_HARD_FLOAT \\\n+\t       TREE_CODE (VALTYPE) == VECTOR_TYPE ? ALTIVEC_ARG_RETURN \\\n+\t       : TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_HARD_FLOAT \\\n                ? FP_ARG_RETURN : GP_ARG_RETURN)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n-#define LIBCALL_VALUE(MODE)\t\t\t\t\t\\\n-  gen_rtx_REG (MODE, (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n-\t\t      && TARGET_HARD_FLOAT\t\t\t\\\n-\t\t      ? FP_ARG_RETURN : GP_ARG_RETURN))\n+#define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n+  gen_rtx_REG (MODE, ALTIVEC_VECTOR_MODE (MODE) ? ALTIVEC_ARG_RETURN\t\\\n+\t\t     : GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n+\t\t     && TARGET_HARD_FLOAT\t\t\t\t\\\n+\t\t     ? FP_ARG_RETURN : GP_ARG_RETURN)\n \n /* The definition of this macro implies that there are cases where\n    a scalar value cannot be returned in registers.\n@@ -1338,9 +1440,15 @@ typedef struct rs6000_stack {\n \t\t\t? FP_ARG_AIX_MAX_REG : FP_ARG_V4_MAX_REG)\n #define FP_ARG_NUM_REG (FP_ARG_MAX_REG - FP_ARG_MIN_REG + 1)\n \n+/* Minimum and maximum AltiVec registers used to hold arguments.  */\n+#define ALTIVEC_ARG_MIN_REG (FIRST_ALTIVEC_REGNO + 2)\n+#define ALTIVEC_ARG_MAX_REG (ALTIVEC_ARG_MIN_REG + 11)\n+#define ALTIVEC_ARG_NUM_REG (ALTIVEC_ARG_MAX_REG - ALTIVEC_ARG_MIN_REG + 1)\n+\n /* Return registers */\n #define GP_ARG_RETURN GP_ARG_MIN_REG\n #define FP_ARG_RETURN FP_ARG_MIN_REG\n+#define ALTIVEC_ARG_RETURN (FIRST_ALTIVEC_REGNO + 2)\n \n /* Flags for the call/call_value rtl operations set up by function_arg */\n #define CALL_NORMAL\t\t0x00000000\t/* no special processing */\n@@ -1352,13 +1460,19 @@ typedef struct rs6000_stack {\n /* 1 if N is a possible register number for a function value\n    as seen by the caller.\n \n-   On RS/6000, this is r3 and fp1.  */\n-#define FUNCTION_VALUE_REGNO_P(N)  ((N) == GP_ARG_RETURN || ((N) == FP_ARG_RETURN))\n+   On RS/6000, this is r3, fp1, and v2 (for AltiVec).  */\n+#define FUNCTION_VALUE_REGNO_P(N)  ((N) == GP_ARG_RETURN\t\\\n+\t\t\t\t    || ((N) == FP_ARG_RETURN)\t\\\n+\t\t\t\t    || (TARGET_ALTIVEC &&\t\\\n+\t\t\t\t\t(N) == ALTIVEC_ARG_RETURN))\n \n /* 1 if N is a possible register number for function argument passing.\n-   On RS/6000, these are r3-r10 and fp1-fp13.  */\n+   On RS/6000, these are r3-r10 and fp1-fp13.\n+   On AltiVec, v2 - v13 are used for passing vectors.  */\n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\t\\\n   ((unsigned)(((N) - GP_ARG_MIN_REG) < (unsigned)(GP_ARG_NUM_REG))\t\\\n+   || (TARGET_ALTIVEC &&\t\t\t\t\t\t\\\n+       (unsigned)((N) - ALTIVEC_ARG_MIN_REG) < (unsigned)(ALTIVEC_ARG_MAX_REG)) \\\n    || ((unsigned)((N) - FP_ARG_MIN_REG) < (unsigned)(FP_ARG_NUM_REG)))\n \n \f\n@@ -1394,6 +1508,7 @@ typedef struct rs6000_args\n {\n   int words;\t\t\t/* # words used for passing GP registers */\n   int fregno;\t\t\t/* next available FP register */\n+  int vregno;\t\t\t/* next available AltiVec register */\n   int nargs_prototype;\t\t/* # args left in the current prototype */\n   int orig_nargs;\t\t/* Original value of nargs_prototype */\n   int prototype;\t\t/* Whether a prototype was defined */\n@@ -1436,6 +1551,12 @@ typedef struct rs6000_args\n    && (CUM).fregno <= FP_ARG_MAX_REG    \\\n    && TARGET_HARD_FLOAT)\n \n+/* Non-zero if we can use an AltiVec register to pass this arg.  */\n+#define USE_ALTIVEC_FOR_ARG_P(CUM,MODE,TYPE)\t\\\n+  (ALTIVEC_VECTOR_MODE (MODE)\t\t\t\\\n+   && (CUM).vregno <= ALTIVEC_ARG_MAX_REG\t\\\n+   && TARGET_ALTIVEC_ABI)\n+\n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,\n    or a hard register in which to store the argument.\n@@ -1778,6 +1899,7 @@ typedef struct rs6000_args\n   && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\\\n   && INT_REG_OK_FOR_BASE_P (XEXP (X, 0), (STRICT))\t\t\\\n   && LEGITIMATE_ADDRESS_INTEGER_P (XEXP (X, 1), 0)\t\t\\\n+  && (! ALTIVEC_VECTOR_MODE (MODE) || INTVAL (X) == 0)\t\t\\\n   && (((MODE) != DFmode && (MODE) != DImode)\t\t\t\\\n       || (TARGET_32BIT\t\t\t\t\t\t\\\n \t  ? LEGITIMATE_ADDRESS_INTEGER_P (XEXP (X, 1), 4) \t\\\n@@ -1805,6 +1927,7 @@ typedef struct rs6000_args\n    && ! flag_pic && ! TARGET_TOC\t\t\t\t\\\n    && (MODE) != DImode\t\t\t\t\t\t\\\n    && (MODE) != TImode\t\t\t\t\t\t\\\n+   && ! ALTIVEC_VECTOR_MODE (MODE)\t\t\t\t\\\n    && (TARGET_HARD_FLOAT || (MODE) != DFmode)\t\t\t\\\n    && GET_CODE (X) == LO_SUM\t\t\t\t\t\\\n    && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\\\n@@ -2389,6 +2512,40 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n   &rs6000_reg_names[75][0],\t/* cr7  */\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   &rs6000_reg_names[76][0],\t/* xer  */\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  &rs6000_reg_names[77][0],\t/* v0  */\t\t\t\t\\\n+  &rs6000_reg_names[78][0],\t/* v1  */\t\t\t\t\\\n+  &rs6000_reg_names[79][0],\t/* v2  */\t\t\t\t\\\n+  &rs6000_reg_names[80][0],\t/* v3  */\t\t\t\t\\\n+  &rs6000_reg_names[81][0],\t/* v4  */\t\t\t\t\\\n+  &rs6000_reg_names[82][0],\t/* v5  */\t\t\t\t\\\n+  &rs6000_reg_names[83][0],\t/* v6  */\t\t\t\t\\\n+  &rs6000_reg_names[84][0],\t/* v7  */\t\t\t\t\\\n+  &rs6000_reg_names[85][0],\t/* v8  */\t\t\t\t\\\n+  &rs6000_reg_names[86][0],\t/* v9  */\t\t\t\t\\\n+  &rs6000_reg_names[87][0],\t/* v10  */\t\t\t\t\\\n+  &rs6000_reg_names[88][0],\t/* v11  */\t\t\t\t\\\n+  &rs6000_reg_names[89][0],\t/* v12  */\t\t\t\t\\\n+  &rs6000_reg_names[90][0],\t/* v13  */\t\t\t\t\\\n+  &rs6000_reg_names[91][0],\t/* v14  */\t\t\t\t\\\n+  &rs6000_reg_names[92][0],\t/* v15  */\t\t\t\t\\\n+  &rs6000_reg_names[93][0],\t/* v16  */\t\t\t\t\\\n+  &rs6000_reg_names[94][0],\t/* v17  */\t\t\t\t\\\n+  &rs6000_reg_names[95][0],\t/* v18  */\t\t\t\t\\\n+  &rs6000_reg_names[96][0],\t/* v19  */\t\t\t\t\\\n+  &rs6000_reg_names[97][0],\t/* v20  */\t\t\t\t\\\n+  &rs6000_reg_names[98][0],\t/* v21  */\t\t\t\t\\\n+  &rs6000_reg_names[99][0],\t/* v22  */\t\t\t\t\\\n+  &rs6000_reg_names[100][0],\t/* v23  */\t\t\t\t\\\n+  &rs6000_reg_names[101][0],\t/* v24  */\t\t\t\t\\\n+  &rs6000_reg_names[102][0],\t/* v25  */\t\t\t\t\\\n+  &rs6000_reg_names[103][0],\t/* v26  */\t\t\t\t\\\n+  &rs6000_reg_names[104][0],\t/* v27  */\t\t\t\t\\\n+  &rs6000_reg_names[105][0],\t/* v28  */\t\t\t\t\\\n+  &rs6000_reg_names[106][0],\t/* v29  */\t\t\t\t\\\n+  &rs6000_reg_names[107][0],\t/* v30  */\t\t\t\t\\\n+  &rs6000_reg_names[108][0],\t/* v31  */\t\t\t\t\\\n+  &rs6000_reg_names[109][0],\t/* vrsave  */\t\t\t\t\\\n }\n \n /* print-rtl can't handle the above REGISTER_NAMES, so define the\n@@ -2407,7 +2564,12 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n     \"f24\", \"f25\", \"f26\", \"f27\", \"f28\", \"f29\", \"f30\", \"f31\",\t\t\\\n      \"mq\",  \"lr\", \"ctr\",  \"ap\",\t\t\t\t\t\t\\\n     \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\",\t\t\\\n-  \"xer\"\t\t\t\t\t\t\t\t\t\\\n+  \"xer\",\t\t\t\t\t\t\t\t\\\n+     \"v0\",  \"v1\",  \"v2\",  \"v3\",  \"v4\",  \"v5\",  \"v6\",  \"v7\",             \\\n+     \"v8\",  \"v9\", \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\",             \\\n+    \"v16\", \"v17\", \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\",             \\\n+    \"v24\", \"v25\", \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\",             \\\n+    \"vrsave\"\t\t\t\t\t\t\t\t\\\n }\n \n /* Table of additional register names to use in user input.  */\n@@ -2429,6 +2591,15 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n   {\"fr20\", 52}, {\"fr21\", 53}, {\"fr22\", 54}, {\"fr23\", 55},\t\\\n   {\"fr24\", 56}, {\"fr25\", 57}, {\"fr26\", 58}, {\"fr27\", 59},\t\\\n   {\"fr28\", 60}, {\"fr29\", 61}, {\"fr30\", 62}, {\"fr31\", 63},\t\\\n+  {\"v0\",   77}, {\"v1\",   78}, {\"v2\",   79}, {\"v3\",   80},       \\\n+  {\"v4\",   81}, {\"v5\",   82}, {\"v6\",   83}, {\"v7\",   84},       \\\n+  {\"v8\",   85}, {\"v9\",   86}, {\"v10\",  87}, {\"v11\",  88},       \\\n+  {\"v12\",  89}, {\"v13\",  90}, {\"v14\",  91}, {\"v15\",  92},       \\\n+  {\"v16\",  93}, {\"v17\",  94}, {\"v18\",  95}, {\"v19\",  96},       \\\n+  {\"v20\",  97}, {\"v21\",  98}, {\"v22\",  99}, {\"v23\",  100},\t\\\n+  {\"v24\",  101},{\"v25\",  102},{\"v26\",  103},{\"v27\",  104},      \\\n+  {\"v28\",  105},{\"v29\",  106},{\"v30\",  107},{\"v31\",  108},      \\\n+  {\"vrsave\", 109},\t\t\t\t\t\t\\\n   /* no additional names for: mq, lr, ctr, ap */\t\t\\\n   {\"cr0\",  68}, {\"cr1\",  69}, {\"cr2\",  70}, {\"cr3\",  71},\t\\\n   {\"cr4\",  72}, {\"cr5\",  73}, {\"cr6\",  74}, {\"cr7\",  75},\t\\\n@@ -2629,3 +2800,116 @@ extern int flag_pic;\n extern int optimize;\n extern int flag_expensive_optimizations;\n extern int frame_pointer_needed;\n+\n+enum rs6000_builtins\n+{\n+  /* AltiVec builtins.  */\n+  ALTIVEC_BUILTIN_ST_INTERNAL,\n+  ALTIVEC_BUILTIN_LD_INTERNAL,\n+  ALTIVEC_BUILTIN_VADDUBM,\n+  ALTIVEC_BUILTIN_VADDUHM,\n+  ALTIVEC_BUILTIN_VADDUWM,\n+  ALTIVEC_BUILTIN_VADDFP,\n+  ALTIVEC_BUILTIN_VADDCUW,\n+  ALTIVEC_BUILTIN_VADDUBS,\n+  ALTIVEC_BUILTIN_VADDSBS,\n+  ALTIVEC_BUILTIN_VADDUHS,\n+  ALTIVEC_BUILTIN_VADDSHS,\n+  ALTIVEC_BUILTIN_VADDUWS,\n+  ALTIVEC_BUILTIN_VADDSWS,\n+  ALTIVEC_BUILTIN_VAND,\n+  ALTIVEC_BUILTIN_VANDC,\n+  ALTIVEC_BUILTIN_VAVGUB,\n+  ALTIVEC_BUILTIN_VAVGSB,\n+  ALTIVEC_BUILTIN_VAVGUH,\n+  ALTIVEC_BUILTIN_VAVGSH,\n+  ALTIVEC_BUILTIN_VAVGUW,\n+  ALTIVEC_BUILTIN_VAVGSW,\n+  ALTIVEC_BUILTIN_VCMPBFP,\n+  ALTIVEC_BUILTIN_VCMPEQUB,\n+  ALTIVEC_BUILTIN_VCMPEQUH,\n+  ALTIVEC_BUILTIN_VCMPEQUW,\n+  ALTIVEC_BUILTIN_VCMPEQFP,\n+  ALTIVEC_BUILTIN_VCMPGEFP,\n+  ALTIVEC_BUILTIN_VCMPGTUB,\n+  ALTIVEC_BUILTIN_VCMPGTSB,\n+  ALTIVEC_BUILTIN_VCMPGTUH,\n+  ALTIVEC_BUILTIN_VCMPGTSH,\n+  ALTIVEC_BUILTIN_VCMPGTUW,\n+  ALTIVEC_BUILTIN_VCMPGTSW,\n+  ALTIVEC_BUILTIN_VCMPGTFP,\n+  ALTIVEC_BUILTIN_VMAXUB,\n+  ALTIVEC_BUILTIN_VMAXSB,\n+  ALTIVEC_BUILTIN_VMAXUH,\n+  ALTIVEC_BUILTIN_VMAXSH,\n+  ALTIVEC_BUILTIN_VMAXUW,\n+  ALTIVEC_BUILTIN_VMAXSW,\n+  ALTIVEC_BUILTIN_VMAXFP,\n+  ALTIVEC_BUILTIN_VMRGHB,\n+  ALTIVEC_BUILTIN_VMRGHH,\n+  ALTIVEC_BUILTIN_VMRGHW,\n+  ALTIVEC_BUILTIN_VMRGLB,\n+  ALTIVEC_BUILTIN_VMRGLH,\n+  ALTIVEC_BUILTIN_VMRGLW,\n+  ALTIVEC_BUILTIN_VMINUB,\n+  ALTIVEC_BUILTIN_VMINSB,\n+  ALTIVEC_BUILTIN_VMINUH,\n+  ALTIVEC_BUILTIN_VMINSH,\n+  ALTIVEC_BUILTIN_VMINUW,\n+  ALTIVEC_BUILTIN_VMINSW,\n+  ALTIVEC_BUILTIN_VMINFP,\n+  ALTIVEC_BUILTIN_VMULEUB,\n+  ALTIVEC_BUILTIN_VMULESB,\n+  ALTIVEC_BUILTIN_VMULEUH,\n+  ALTIVEC_BUILTIN_VMULESH,\n+  ALTIVEC_BUILTIN_VMULOUB,\n+  ALTIVEC_BUILTIN_VMULOSB,\n+  ALTIVEC_BUILTIN_VMULOUH,\n+  ALTIVEC_BUILTIN_VMULOSH,\n+  ALTIVEC_BUILTIN_VNOR,\n+  ALTIVEC_BUILTIN_VOR,\n+  ALTIVEC_BUILTIN_VPKUHUM,\n+  ALTIVEC_BUILTIN_VPKUWUM,\n+  ALTIVEC_BUILTIN_VPKPX,\n+  ALTIVEC_BUILTIN_VPKUHSS,\n+  ALTIVEC_BUILTIN_VPKSHSS,\n+  ALTIVEC_BUILTIN_VPKUWSS,\n+  ALTIVEC_BUILTIN_VPKSWSS,\n+  ALTIVEC_BUILTIN_VPKUHUS,\n+  ALTIVEC_BUILTIN_VPKSHUS,\n+  ALTIVEC_BUILTIN_VPKUWUS,\n+  ALTIVEC_BUILTIN_VPKSWUS,\n+  ALTIVEC_BUILTIN_VRLB,\n+  ALTIVEC_BUILTIN_VRLH,\n+  ALTIVEC_BUILTIN_VRLW,\n+  ALTIVEC_BUILTIN_VSLB,\n+  ALTIVEC_BUILTIN_VSLH,\n+  ALTIVEC_BUILTIN_VSLW,\n+  ALTIVEC_BUILTIN_VSL,\n+  ALTIVEC_BUILTIN_VSLO,\n+  ALTIVEC_BUILTIN_VSRB,\n+  ALTIVEC_BUILTIN_VRSH,\n+  ALTIVEC_BUILTIN_VRSW,\n+  ALTIVEC_BUILTIN_VSRAB,\n+  ALTIVEC_BUILTIN_VSRAH,\n+  ALTIVEC_BUILTIN_VSRAW,\n+  ALTIVEC_BUILTIN_VSR,\n+  ALTIVEC_BUILTIN_VSRO,\n+  ALTIVEC_BUILTIN_VSUBUBM,\n+  ALTIVEC_BUILTIN_VSUBUHM,\n+  ALTIVEC_BUILTIN_VSUBUWM,\n+  ALTIVEC_BUILTIN_VSUBFP,\n+  ALTIVEC_BUILTIN_VSUBCUW,\n+  ALTIVEC_BUILTIN_VSUBUBS,\n+  ALTIVEC_BUILTIN_VSUBSBS,\n+  ALTIVEC_BUILTIN_VSUBUHS,\n+  ALTIVEC_BUILTIN_VSUBSHS,\n+  ALTIVEC_BUILTIN_VSUBUWS,\n+  ALTIVEC_BUILTIN_VSUBSWS,\n+  ALTIVEC_BUILTIN_VSUM4UBS,\n+  ALTIVEC_BUILTIN_VSUM4SBS,\n+  ALTIVEC_BUILTIN_VSUM4SHS,\n+  ALTIVEC_BUILTIN_VSUM2SWS,\n+  ALTIVEC_BUILTIN_VSUMSWS,\n+  ALTIVEC_BUILTIN_VXOR\n+};"}, {"sha": "5c3191a211768451f1374caa97fe86efbb5128f9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 934, "deletions": 1, "changes": 935, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0ac081f6b81bb06d2a6a12349f6b32d503a65716", "patch": "@@ -37,7 +37,7 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,load,store,fpload,fpstore,imul,lmul,idiv,ldiv,branch,compare,cr_logical,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg\"\n+(define_attr \"type\" \"integer,load,store,fpload,fpstore,imul,lmul,idiv,ldiv,branch,compare,cr_logical,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,altivec\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n@@ -13361,3 +13361,936 @@\n     emit_move_insn (gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM), operands[0]);\n   DONE;\n }\")\n+\n+;; AltiVec patterns\n+\n+;; Generic LVX load instruction.\n+(define_insn \"altivec_lvx\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(match_operand:V4SI 1 \"memory_operand\" \"m\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"lvx\\t%0,%y1\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+;; Generic STVX store instruction.\n+(define_insn \"altivec_stvx\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n+\t(match_operand:V4SI 1 \"register_operand\" \"v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"stvx\\t%1,%y0\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+;; Vector move instructions.\n+(define_expand \"movv4si\"\n+  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4SI 1 \"any_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V4SImode); DONE; }\")\n+\n+(define_insn \"*movv4si_internal\"\n+  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"=m,v,v\")\n+\t(match_operand:V4SI 1 \"input_operand\" \"v,m,v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"@\n+   stvx\\t%1,%y0\n+   ldvx\\t%0,%y1\n+   vor\\t%0,%1,%1\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_expand \"movv8hi\"\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V8HI 1 \"any_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V8HImode); DONE; }\")\n+\n+(define_insn \"*movv8hi_internal1\"\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=m,v,v\")\n+\t(match_operand:V8HI 1 \"input_operand\" \"v,m,v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"@\n+   stvx\\t%1,%y0\n+   ldvx\\t%0,%y1\n+   vor\\t%0,%1,%1\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_expand \"movv16qi\"\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V16QI 1 \"any_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V16QImode); DONE; }\")\n+\n+(define_insn \"*movv16qi_internal1\"\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=m,v,v\")\n+\t(match_operand:V16QI 1 \"input_operand\" \"v,m,v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"@\n+   stvx\\t%1,%y0\n+   ldvx\\t%0,%y1\n+   vor\\t%0,%1,%1\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_expand \"movv4sf\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4SF 1 \"any_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V4SFmode); DONE; }\")\n+\n+(define_insn \"*movv4sf_internal1\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=m,v,v\")\n+\t(match_operand:V4SF 1 \"input_operand\" \"v,m,v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"@\n+   stvx\\t%1,%y0\n+   ldvx\\t%0,%y1\n+   vor\\t%0,%1,%1\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+;; Simple binary operations.\n+\n+(define_insn \"altivec_vaddubm\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 31))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddubm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vadduhm\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 32))]\n+  \"TARGET_ALTIVEC\"\n+  \"vadduhm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vadduwm\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 33))]\n+  \"TARGET_ALTIVEC\"\n+  \"vadduwm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vaddfp\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 34))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vaddcuw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 35))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddcuw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vaddubs\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 36))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddubs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vaddsbs\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 37))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddsbs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vadduhs\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 38))]\n+  \"TARGET_ALTIVEC\"\n+  \"vadduhs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vaddshs\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 39))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddshs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vadduws\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 40))]\n+  \"TARGET_ALTIVEC\"\n+  \"vadduws\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vaddsws\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 41))]\n+  \"TARGET_ALTIVEC\"\n+  \"vaddsws\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vand\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 42))]\n+  \"TARGET_ALTIVEC\"\n+  \"vand\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vandc\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 43))]\n+  \"TARGET_ALTIVEC\"\n+  \"vandc\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vavgub\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 44))]\n+  \"TARGET_ALTIVEC\"\n+  \"vavgub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vavgsb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 45))]\n+  \"TARGET_ALTIVEC\"\n+  \"vavgsb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vavguh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 46))]\n+  \"TARGET_ALTIVEC\"\n+  \"vavguh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vavgsh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 47))]\n+  \"TARGET_ALTIVEC\"\n+  \"vavgsh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vavguw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 48))]\n+  \"TARGET_ALTIVEC\"\n+  \"vavguw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vavgsw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 49))]\n+  \"TARGET_ALTIVEC\"\n+  \"vavgsw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpbfp\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 50))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpbfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpequb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 51))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpequb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpequh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 52))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpequh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpequw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 53))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpequw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpeqfp\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 54))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpeqfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgefp\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 55))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgefp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtub\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 56))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtsb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 57))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtsb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtuh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 58))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtuh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtsh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 59))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtsh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtuw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 60))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtuw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtsw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 61))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtsw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vcmpgtfp\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 62))]\n+  \"TARGET_ALTIVEC\"\n+  \"vcmpgtfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxub\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 63))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxsb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 64))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxsb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxuh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 65))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxuh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxsh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 66))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxsh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxuw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 67))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxuw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxsw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 68))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxsw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmaxfp\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 69))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaxfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmrghb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 70))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmrghb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmrghh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 71))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmrghh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmrghw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 72))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmrghw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmrglb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 73))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmrglb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmrglh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 74))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmrglh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmrglw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 75))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmrglw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminub\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 76))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminsb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 77))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminsb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminuh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 78))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminuh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminsh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 79))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminsh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminuw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 80))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminuw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminsw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 81))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminsw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vminfp\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 82))]\n+  \"TARGET_ALTIVEC\"\n+  \"vminfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmuleub\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 83))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmuleub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmulesb\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 84))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmulesb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmuleuh\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 85))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmuleuh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmulesh\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 86))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmulesh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmuloub\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 87))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmuloub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmulosb\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 88))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmulosb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmulouh\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 89))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmulouh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vmulosh\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 90))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmulosh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vnor\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 91))]\n+  \"TARGET_ALTIVEC\"\n+  \"vnor\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vor\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 92))]\n+  \"TARGET_ALTIVEC\"\n+  \"vor\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkuhum\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                       (match_operand:V8HI 2 \"register_operand\" \"v\")] 93))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkuhum\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkuwum\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 94))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkuwum\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkpx\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 95))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkpx\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkuhss\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                       (match_operand:V8HI 2 \"register_operand\" \"v\")] 96))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkuhss\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkshss\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                       (match_operand:V8HI 2 \"register_operand\" \"v\")] 97))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkshss\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkuwss\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 98))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkuwss\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkswss\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 99))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkswss\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkuhus\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                       (match_operand:V8HI 2 \"register_operand\" \"v\")] 100))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkuhus\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkshus\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                       (match_operand:V8HI 2 \"register_operand\" \"v\")] 101))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkshus\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkuwus\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 102))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkuwus\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vpkswus\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 103))]\n+  \"TARGET_ALTIVEC\"\n+  \"vpkswus\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vrlb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 104))]\n+  \"TARGET_ALTIVEC\"\n+  \"vrlb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vrlh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 105))]\n+  \"TARGET_ALTIVEC\"\n+  \"vrlh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vrlw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 106))]\n+  \"TARGET_ALTIVEC\"\n+  \"vrlw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vslb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 107))]\n+  \"TARGET_ALTIVEC\"\n+  \"vslb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vslh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 108))]\n+  \"TARGET_ALTIVEC\"\n+  \"vslh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vslw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 109))]\n+  \"TARGET_ALTIVEC\"\n+  \"vslw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsl\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 110))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsl\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vslo\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 111))]\n+  \"TARGET_ALTIVEC\"\n+  \"vslo\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsrb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 112))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsrb\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vrsh\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 113))]\n+  \"TARGET_ALTIVEC\"\n+  \"vrsh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vrsw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 114))]\n+  \"TARGET_ALTIVEC\"\n+  \"vrsw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsrab\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 115))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsrab\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsrah\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 116))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsrah\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsraw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 117))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsraw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsr\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 118))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsr\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsro\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 119))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsro\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsububm\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 120))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsububm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubuhm\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 121))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubuhm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubuwm\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 122))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubuwm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubfp\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 123))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubfp\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubcuw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 124))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubcuw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsububs\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 125))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsububs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubsbs\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 126))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubsbs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubuhs\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 127))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubuhs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubshs\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 128))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubshs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubuws\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 129))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubuws\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsubsws\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 130))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsubsws\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsum4ubs\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 131))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsum4ubs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsum4sbs\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 132))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsum4sbs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsum4shs\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 133))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsum4shs\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsum2sws\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 134))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsum2sws\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vsumsws\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 135))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsumsws\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])\n+\n+(define_insn \"altivec_vxor\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 136))]\n+  \"TARGET_ALTIVEC\"\n+  \"vxor\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"altivec\")])"}, {"sha": "fcff961c90dbaa672958375d0a1952b0f7464658", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=0ac081f6b81bb06d2a6a12349f6b32d503a65716", "patch": "@@ -400,18 +400,31 @@ do {\t\t\t\t\t\t\t\t\t\\\n    one set of libraries with -mno-eabi instead of eabi libraries and non-eabi\n    versions, just use 64 as the stack boundary.  */\n #undef\tSTACK_BOUNDARY\n-#define\tSTACK_BOUNDARY\t64\n+#define\tSTACK_BOUNDARY\t(TARGET_ALTIVEC_ABI ? 128 : 64)\n \n /* Real stack boundary as mandated by the appropriate ABI.  */\n-#define ABI_STACK_BOUNDARY ((TARGET_EABI) ? 64 : 128)\n+#define ABI_STACK_BOUNDARY ((TARGET_EABI && !TARGET_ALTIVEC_ABI) ? 64 : 128)\n \n /* No data type wants to be aligned rounder than this.  */\n #undef\tBIGGEST_ALIGNMENT\n-#define BIGGEST_ALIGNMENT ((TARGET_EABI) ? 64 : 128)\n+#define BIGGEST_ALIGNMENT (TARGET_EABI ? 64 : 128)\n+\n+/* An expression for the alignment of a structure field FIELD if the\n+   alignment computed in the usual way is COMPUTED.  */\n+#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED)\t\t\t\t      \\\n+\t((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)     \\\n+\t ? 128 : COMPUTED)\n+\n+/* Define this macro as an expression for the alignment of a type\n+   (given by TYPE as a tree node) if the alignment computed in the\n+   usual way is COMPUTED and the alignment explicitly specified was\n+   SPECIFIED.  */\n+#define ROUND_TYPE_ALIGN(TYPE, COMPUTED, SPECIFIED)\t\t\t\\\n+\t((TARGET_ALTIVEC  && TREE_CODE (TYPE) == VECTOR_TYPE)\t        \\\n+\t ? 128 : MAX (COMPUTED, SPECIFIED))\n \n #undef  BIGGEST_FIELD_ALIGNMENT\n #undef  ADJUST_FIELD_ALIGN\n-#undef  ROUND_TYPE_ALIGN\n \n /* Use ELF style section commands.  */\n "}, {"sha": "9ad11f4232c170fe46aa032262719ffebf6fa504", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac081f6b81bb06d2a6a12349f6b32d503a65716/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0ac081f6b81bb06d2a6a12349f6b32d503a65716", "patch": "@@ -424,6 +424,7 @@ in the following sections.\n -mtune=@var{cpu-type} @gol\n -mpower  -mno-power  -mpower2  -mno-power2 @gol\n -mpowerpc  -mpowerpc64  -mno-powerpc @gol\n+-maltivec -mno-altivec @gol\n -mpowerpc-gpopt  -mno-powerpc-gpopt @gol\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt @gol\n -mnew-mnemonics  -mold-mnemonics @gol\n@@ -436,6 +437,7 @@ in the following sections.\n -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n -mtoc  -mno-toc -mlittle  -mlittle-endian  -mbig  -mbig-endian @gol\n -mcall-aix -mcall-sysv -mcall-netbsd @gol\n+-mabi=altivec @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb -msdata @gol\n -msdata=@var{opt}  -mvxworks -G @var{num}}\n@@ -6684,6 +6686,15 @@ values for @var{cpu_type} are used for @option{-mtune} as for\n architecture, registers, and mnemonics set by @option{-mcpu}, but the\n scheduling parameters set by @option{-mtune}.\n \n+@item -maltivec\n+@itemx -mno-altivec\n+@opindex maltivec\n+@opindex mno-altivec\n+These switches enable or disable the use of built-in functions that\n+allow access to the AltiVec instruction set.  You may also need to set\n+@option{-mabi=altivec} to adjust the current ABI with AltiVec ABI\n+enhancements.\n+\n @item -mfull-toc\n @itemx -mno-fp-in-toc\n @itemx -mno-sum-in-toc\n@@ -6912,6 +6923,12 @@ Linux-based GNU system.\n On System V.4 and embedded PowerPC systems compile code for the\n NetBSD operating system.\n \n+@item -mabi=altivec\n+@opindex mabi=altivec\n+Extend the current ABI with AltiVec ABI extensions.  This does not\n+change the default ABI, instead it adds the AltiVec ABI extensions to\n+the current ABI@.\n+\n @item -mprototype\n @itemx -mno-prototype\n @opindex mprototype"}]}