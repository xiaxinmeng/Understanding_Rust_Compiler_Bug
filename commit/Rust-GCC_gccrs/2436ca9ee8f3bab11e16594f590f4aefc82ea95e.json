{"sha": "2436ca9ee8f3bab11e16594f590f4aefc82ea95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzNmNhOWVlOGYzYmFiMTFlMTY1OTRmNTkwZjRhZWZjODJlYTk1ZQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2009-04-10T11:07:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T11:07:23Z"}, "message": "init.c: Install signal handler on Darwin.\n\n2009-04-10  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c: Install signal handler on Darwin.\n\nFrom-SVN: r145888", "tree": {"sha": "f6b2fe32b4e05f855cff53e7876d1674c7628219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b2fe32b4e05f855cff53e7876d1674c7628219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2436ca9ee8f3bab11e16594f590f4aefc82ea95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2436ca9ee8f3bab11e16594f590f4aefc82ea95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2436ca9ee8f3bab11e16594f590f4aefc82ea95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2436ca9ee8f3bab11e16594f590f4aefc82ea95e/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5288c909bc01b5df59bbf9334af6bac1fe93a2c"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "1b6952719a1ff851f52988dd10da88b20762eba0", "filename": "gcc/ada/init.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436ca9ee8f3bab11e16594f590f4aefc82ea95e/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436ca9ee8f3bab11e16594f590f4aefc82ea95e/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=2436ca9ee8f3bab11e16594f590f4aefc82ea95e", "patch": "@@ -2083,6 +2083,76 @@ __gnat_install_handler(void)\n   __gnat_handler_installed = 1;\n }\n \n+/******************/\n+/* Darwin Section */\n+/******************/\n+\n+#elif defined(__APPLE__)\n+\n+#include <signal.h>\n+\n+static void __gnat_error_handler (int sig, siginfo_t * si, void * uc);\n+\n+static void\n+__gnat_error_handler (int sig, siginfo_t * si, void * uc)\n+{\n+  struct Exception_Data *exception;\n+  const char *msg;\n+\n+  switch (sig)\n+    {\n+    case SIGSEGV:\n+      /* FIXME: we need to detect the case of a *real* SIGSEGV.  */\n+      exception = &storage_error;\n+      msg = \"stack overflow or erroneous memory access\";\n+      break;\n+\n+    case SIGBUS:\n+      exception = &constraint_error;\n+      msg = \"SIGBUS\";\n+      break;\n+\n+    case SIGFPE:\n+      exception = &constraint_error;\n+      msg = \"SIGFPE\";\n+      break;\n+\n+    default:\n+      exception = &program_error;\n+      msg = \"unhandled signal\";\n+    }\n+\n+  Raise_From_Signal_Handler (exception, msg);\n+}\n+\n+void\n+__gnat_install_handler (void)\n+{\n+  struct sigaction act;\n+\n+  /* Set up signal handler to map synchronous signals to appropriate\n+     exceptions.  Make sure that the handler isn't interrupted by another\n+     signal that might cause a scheduling event!  */\n+\n+  act.sa_flags = SA_NODEFER | SA_RESTART | SA_SIGINFO;\n+  act.sa_sigaction = __gnat_error_handler;\n+  sigemptyset (&act.sa_mask);\n+\n+  /* Do not install handlers if interrupt state is \"System\".  */\n+  if (__gnat_get_interrupt_state (SIGABRT) != 's')\n+    sigaction (SIGABRT, &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGFPE) != 's')\n+    sigaction (SIGFPE,  &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGILL) != 's')\n+    sigaction (SIGILL,  &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGSEGV) != 's')\n+    sigaction (SIGSEGV, &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGBUS) != 's')\n+    sigaction (SIGBUS,  &act, NULL);\n+\n+  __gnat_handler_installed = 1;\n+}\n+\n #else\n \n /* For all other versions of GNAT, the handler does nothing.  */"}]}