{"sha": "a09bb4a852f82af02b3f965358cd44b0aa266a5b", "node_id": "C_kwDOANBUbNoAKGEwOWJiNGE4NTJmODJhZjAyYjNmOTY1MzU4Y2Q0NGIwYWEyNjZhNWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-06T15:26:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:49Z"}, "message": "libstdc++: Add std::__conditional_t alias template\n\nThis change is inspired by the suggestion in\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1715r0.html\n\nThe new std::__conditional_t alias template is functionally equivalent\nto std::conditional_t but should be more efficient to compile, due to\nonly ever instantiating two specializations (std::__conditional<true>\nand std::__conditional<false>) rather than a new specialization for\nevery use of std::conditional.\n\nThe new alias template is also available in C++11, unlike the C++14\nstd::conditional_t alias.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (__conditional): New class template\n\tfor internal uses of std::conditional.\n\t(__conditional_t): New alias template to replace conditional_t.\n\t(__and_, __or_, __result_of_memfun, __result_of_memobj): Use\n\t__conditional_t instead of conditional::type.\n\t* include/bits/atomic_base.h (__atomic_impl::_Diff): Likewise.\n\t* include/bits/hashtable.h (_Hashtable): Likewise.\n\t* include/bits/hashtable_policy.h (_Node_iterator, _Insert_base)\n\t(_Local_iterator): Likewise. Replace typedefs with\n\tusing-declarations.\n\t* include/bits/move.h (move_if_noexcept): Use __conditional_t.\n\t* include/bits/parse_numbers.h (_Select_int_base): Likewise.\n\t* include/bits/ptr_traits.h (__make_not_void): Likewise.\n\t* include/bits/ranges_algobase.h (__copy_or_move_backward)\n\t(__copy_or_move): Likewise.\n\t* include/bits/ranges_base.h (borrowed_iterator_t): Likewise.\n\t* include/bits/ranges_util.h (borrowed_subrange_t): Likewise.\n\t* include/bits/regex_compiler.h (_BracketMatcher): Use\n\t__conditional_t. Replace typedefs with using-declarations.\n\t* include/bits/shared_ptr_base.h (__shared_count): Use\n\t__conditional_t.\n\t* include/bits/stl_algobase.h (__copy_move, __copy_move_backward):\n\tLikewise.\n\t* include/bits/stl_iterator.h (__detail::__clamp_iter_cat)\n\t(reverse_iterator::iterator_concept)\n\t(__make_move_if_noexcept_iterator)\n\t(iterator_traits<common_iterator<_It, _Sent>>)\n\t(iterator_traits<counted_iterator<_It>>): Likewise.\n\t* include/bits/stl_pair.h (_PCC, pair::operator=): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree::insert_return_type)\n\t(_Rb_tree::_M_clone_node): Likewise.\n\t* include/bits/unique_ptr.h (unique_ptr(unique_ptr<U,E>&&)):\n\tLikewise.\n\t* include/bits/uses_allocator.h (__uses_alloc): Likewise.\n\t(__is_uses_allocator_predicate): Likewise.\n\t* include/debug/functions.h (__foreign_iterator_aux2): Likewise.\n\t* include/experimental/any (any::_Manager, __any_caster):\n\tLikewise.\n\t* include/experimental/executor (async_completion): Likewise.\n\t* include/experimental/functional (__boyer_moore_base_t):\n\tLikewise.\n\t* include/std/any (any::_Manager): Likewise.\n\t* include/std/functional (__boyer_moore_base_t): Likewise.\n\t* include/std/ranges (borrowed_iterator_t)\n\t(borrowed_subrange_t, __detail::__maybe_present_t)\n\t(__detail::__maybe_const_t, split_view): Likewise.\n\t* include/std/tuple (__empty_not_final, tuple::operator=):\n\tLikewise.\n\t* include/std/variant (__detail::__variant::__get_t): Likewise.", "tree": {"sha": "e76d8e55f190069b983bcafcabe75e71cbca5671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76d8e55f190069b983bcafcabe75e71cbca5671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09bb4a852f82af02b3f965358cd44b0aa266a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09bb4a852f82af02b3f965358cd44b0aa266a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09bb4a852f82af02b3f965358cd44b0aa266a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09bb4a852f82af02b3f965358cd44b0aa266a5b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb582f62791dfadc243d97d37f0b83ef77cf480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb582f62791dfadc243d97d37f0b83ef77cf480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb582f62791dfadc243d97d37f0b83ef77cf480"}], "stats": {"total": 322, "additions": 168, "deletions": 154}, "files": [{"sha": "9e18aadadafe3c167db75e5a14122371713dcdcf", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -946,7 +946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // As above, but for difference_type arguments.\n     template<typename _Tp>\n-      using _Diff = conditional_t<is_pointer_v<_Tp>, ptrdiff_t, _Val<_Tp>>;\n+      using _Diff = __conditional_t<is_pointer_v<_Tp>, ptrdiff_t, _Val<_Tp>>;\n \n     template<size_t _Size, size_t _Align>\n       _GLIBCXX_ALWAYS_INLINE bool"}, {"sha": "79a3096b62b6f4be2b06282b82269bc3f5f7a75f", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -317,8 +317,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Ht>\n \tstatic constexpr\n-\ttypename conditional<std::is_lvalue_reference<_Ht>::value,\n-\t\t\t     const value_type&, value_type&&>::type\n+\t__conditional_t<std::is_lvalue_reference<_Ht>::value,\n+\t\t\tconst value_type&, value_type&&>\n \t__fwd_value_for(value_type& __val) noexcept\n \t{ return std::move(__val); }\n \n@@ -875,10 +875,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_insert_unique(_Kt&&, _Arg&&, const _NodeGenerator&);\n \n       template<typename _Kt>\n-\tstatic typename conditional<\n+\tstatic __conditional_t<\n \t  __and_<__is_nothrow_invocable<_Hash&, const key_type&>,\n \t\t __not_<__is_nothrow_invocable<_Hash&, _Kt>>>::value,\n-\t  key_type, _Kt&&>::type\n+\t  key_type, _Kt&&>\n \t_S_forward_key(_Kt&& __k)\n \t{ return std::forward<_Kt>(__k); }\n \n@@ -1540,9 +1540,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __alloc_node_gen_t __alloc_gen(*this);\n \n-\t  using _Fwd_Ht = typename\n-\t    conditional<__move_if_noexcept_cond<value_type>::value,\n-\t\t\tconst _Hashtable&, _Hashtable&&>::type;\n+\t  using _Fwd_Ht = __conditional_t<\n+\t    __move_if_noexcept_cond<value_type>::value,\n+\t    const _Hashtable&, _Hashtable&&>;\n \t  _M_assign(std::forward<_Fwd_Ht>(__ht), __alloc_gen);\n \t  __ht.clear();\n \t}"}, {"sha": "2f8502588f58abd90b0de6061ebaf0002cfbf7a6", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -360,15 +360,15 @@ namespace __detail\n       using __node_type = typename __base_type::__node_type;\n \n     public:\n-      typedef _Value\t\t\t\t\tvalue_type;\n-      typedef std::ptrdiff_t\t\t\t\tdifference_type;\n-      typedef std::forward_iterator_tag\t\t\titerator_category;\n+      using value_type = _Value;\n+      using difference_type = std::ptrdiff_t;\n+      using iterator_category = std::forward_iterator_tag;\n \n-      using pointer = typename std::conditional<__constant_iterators,\n-\t\t\t\t  const value_type*, value_type*>::type;\n+      using pointer = __conditional_t<__constant_iterators,\n+\t\t\t\t      const value_type*, value_type*>;\n \n-      using reference = typename std::conditional<__constant_iterators,\n-\t\t\t\t  const value_type&, value_type&>::type;\n+      using reference = __conditional_t<__constant_iterators,\n+\t\t\t\t\tconst value_type&, value_type&>;\n \n       _Node_iterator() = default;\n \n@@ -867,12 +867,13 @@ namespace __detail\n       using iterator = _Node_iterator<_Value, __constant_iterators::value,\n \t\t\t\t      __hash_cached::value>;\n \n-      using const_iterator = _Node_const_iterator<_Value, __constant_iterators::value,\n+      using const_iterator = _Node_const_iterator<_Value,\n+\t\t\t\t\t\t  __constant_iterators::value,\n \t\t\t\t\t\t  __hash_cached::value>;\n \n-      using __ireturn_type = typename std::conditional<__unique_keys::value,\n-\t\t\t\t\t\t     std::pair<iterator, bool>,\n-\t\t\t\t\t\t     iterator>::type;\n+      using __ireturn_type = __conditional_t<__unique_keys::value,\n+\t\t\t\t\t     std::pair<iterator, bool>,\n+\t\t\t\t\t     iterator>;\n \n       __ireturn_type\n       insert(const value_type& __v)\n@@ -1482,15 +1483,13 @@ namespace __detail\n       using __hash_code_base = typename __base_type::__hash_code_base;\n \n     public:\n-      typedef _Value\t\t\t\t\tvalue_type;\n-      typedef typename std::conditional<__constant_iterators,\n-\t\t\t\t\tconst value_type*, value_type*>::type\n-\t\t\t\t\t\t\tpointer;\n-      typedef typename std::conditional<__constant_iterators,\n-\t\t\t\t\tconst value_type&, value_type&>::type\n-\t\t\t\t\t\t\treference;\n-      typedef std::ptrdiff_t\t\t\t\tdifference_type;\n-      typedef std::forward_iterator_tag\t\t\titerator_category;\n+      using value_type = _Value;\n+      using pointer = __conditional_t<__constant_iterators,\n+\t\t\t\t      const value_type*, value_type*>;\n+      using reference = __conditional_t<__constant_iterators,\n+\t\t\t\t\tconst value_type&, value_type&>;\n+      using difference_type = ptrdiff_t;\n+      using iterator_category = forward_iterator_tag;\n \n       _Local_iterator() = default;\n "}, {"sha": "1c13abc4da8901f33a07913901a301465d7adec2", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -120,8 +120,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD\n-    constexpr typename\n-    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type\n+    constexpr\n+    __conditional_t<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>\n     move_if_noexcept(_Tp& __x) noexcept\n     { return std::move(__x); }\n "}, {"sha": "54b63c0e2bb601b400c725a219cb21fffc3ad753", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -266,9 +266,9 @@ namespace __select_int\n \n   template<unsigned long long _Val, typename _IntType, typename... _Ints>\n     struct _Select_int_base<_Val, _IntType, _Ints...>\n-    : conditional_t<(_Val <= __gnu_cxx::__int_traits<_IntType>::__max),\n-\t\t    integral_constant<_IntType, (_IntType)_Val>,\n-\t\t    _Select_int_base<_Val, _Ints...>>\n+    : __conditional_t<(_Val <= __gnu_cxx::__int_traits<_IntType>::__max),\n+\t\t      integral_constant<_IntType, (_IntType)_Val>,\n+\t\t      _Select_int_base<_Val, _Ints...>>\n     { };\n \n   template<unsigned long long _Val>"}, {"sha": "115b86d43e4fcb44aa11943594b26beac9b661b0", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     using __make_not_void\n-      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;\n+      = __conditional_t<is_void<_Tp>::value, __undefined, _Tp>;\n \n   /**\n    * @brief  Uniform interface to all pointer-like types"}, {"sha": "cfbac839749d034b731af19a4832b80b03cfa79f", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -195,9 +195,9 @@ namespace ranges\n     requires (_IsMove\n \t      ? indirectly_movable<_Iter, _Out>\n \t      : indirectly_copyable<_Iter, _Out>)\n-    constexpr conditional_t<_IsMove,\n-\t\t\t    move_backward_result<_Iter, _Out>,\n-\t\t\t    copy_backward_result<_Iter, _Out>>\n+    constexpr __conditional_t<_IsMove,\n+\t\t\t      move_backward_result<_Iter, _Out>,\n+\t\t\t      copy_backward_result<_Iter, _Out>>\n     __copy_or_move_backward(_Iter __first, _Sent __last, _Out __result);\n \n   template<bool _IsMove,\n@@ -206,9 +206,9 @@ namespace ranges\n     requires (_IsMove\n \t      ? indirectly_movable<_Iter, _Out>\n \t      : indirectly_copyable<_Iter, _Out>)\n-    constexpr conditional_t<_IsMove,\n-\t\t\t    move_result<_Iter, _Out>,\n-\t\t\t    copy_result<_Iter, _Out>>\n+    constexpr __conditional_t<_IsMove,\n+\t\t\t      move_result<_Iter, _Out>,\n+\t\t\t      copy_result<_Iter, _Out>>\n     __copy_or_move(_Iter __first, _Sent __last, _Out __result)\n     {\n       // TODO: implement more specializations to be at least on par with\n@@ -349,9 +349,9 @@ namespace ranges\n     requires (_IsMove\n \t      ? indirectly_movable<_Iter, _Out>\n \t      : indirectly_copyable<_Iter, _Out>)\n-    constexpr conditional_t<_IsMove,\n-\t\t\t    move_backward_result<_Iter, _Out>,\n-\t\t\t    copy_backward_result<_Iter, _Out>>\n+    constexpr __conditional_t<_IsMove,\n+\t\t\t      move_backward_result<_Iter, _Out>,\n+\t\t\t      copy_backward_result<_Iter, _Out>>\n     __copy_or_move_backward(_Iter __first, _Sent __last, _Out __result)\n     {\n       // TODO: implement more specializations to be at least on par with"}, {"sha": "d6166ab1dd3cf96670ed275d608924f9bcf1fd8c", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -907,9 +907,9 @@ namespace ranges\n   };\n \n   template<range _Range>\n-    using borrowed_iterator_t = conditional_t<borrowed_range<_Range>,\n-\t\t\t\t\t     iterator_t<_Range>,\n-\t\t\t\t\t     dangling>;\n+    using borrowed_iterator_t = __conditional_t<borrowed_range<_Range>,\n+\t\t\t\t\t\titerator_t<_Range>,\n+\t\t\t\t\t\tdangling>;\n \n } // namespace ranges\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "7e7b958d274481bd5f729c47beec7cae0e94c0bc", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -418,9 +418,9 @@ namespace ranges\n       enable_borrowed_range<subrange<_It, _Sent, _Kind>> = true;\n \n   template<range _Range>\n-    using borrowed_subrange_t = conditional_t<borrowed_range<_Range>,\n-\t\t\t\t\t      subrange<iterator_t<_Range>>,\n-\t\t\t\t\t      dangling>;\n+    using borrowed_subrange_t = __conditional_t<borrowed_range<_Range>,\n+\t\t\t\t\t\tsubrange<iterator_t<_Range>>,\n+\t\t\t\t\t\tdangling>;\n } // namespace ranges\n \n // The following ranges algorithms are used by <ranges>, and are defined here"}, {"sha": "88c60c2bed74d592ff8b7ed81d1a82952e5bf812", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -485,17 +485,17 @@ namespace __detail\n \n     private:\n       // Currently we only use the cache for char\n-      typedef typename std::is_same<_CharT, char>::type _UseCache;\n+      using _UseCache = typename std::is_same<_CharT, char>::type;\n \n       static constexpr size_t\n       _S_cache_size =\n \t1ul << (sizeof(_CharT) * __CHAR_BIT__ * int(_UseCache::value));\n \n       struct _Dummy { };\n-      typedef typename std::conditional<_UseCache::value,\n-\t\t\t\t\tstd::bitset<_S_cache_size>,\n-\t\t\t\t\t_Dummy>::type _CacheT;\n-      typedef typename std::make_unsigned<_CharT>::type _UnsignedCharT;\n+      using _CacheT = std::__conditional_t<_UseCache::value,\n+\t\t\t\t\t   std::bitset<_S_cache_size>,\n+\t\t\t\t\t   _Dummy>;\n+      using _UnsignedCharT = typename std::make_unsigned<_CharT>::type;\n \n       bool\n       _M_apply(_CharT __ch, false_type) const;"}, {"sha": "3473a74280d7eadb9f63f323f141b951b439bd02", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -675,9 +675,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    return;\n \n \t  using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;\n-\t  using _Del2 = typename conditional<is_reference<_Del>::value,\n+\t  using _Del2 = __conditional_t<is_reference<_Del>::value,\n \t      reference_wrapper<typename remove_reference<_Del>::type>,\n-\t      _Del>::type;\n+\t      _Del>;\n \t  using _Sp_cd_type\n \t    = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;\n \t  using _Alloc = allocator<_Sp_cd_type>;"}, {"sha": "8627d59b589a7b92a0adf8f75ed685f9f73daf68", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -420,11 +420,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n \t{\n #if __cplusplus >= 201103L\n-\t  using __assignable = conditional<_IsMove,\n-\t\t\t\t\t   is_move_assignable<_Tp>,\n-\t\t\t\t\t   is_copy_assignable<_Tp>>;\n+\t  using __assignable = __conditional_t<_IsMove,\n+\t\t\t\t\t       is_move_assignable<_Tp>,\n+\t\t\t\t\t       is_copy_assignable<_Tp>>;\n \t  // trivial types can have deleted assignment\n-\t  static_assert( __assignable::type::value, \"type must be assignable\" );\n+\t  static_assert( __assignable::value, \"type must be assignable\" );\n #endif\n \t  const ptrdiff_t _Num = __last - __first;\n \t  if (_Num)\n@@ -731,11 +731,11 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \t__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n \t{\n #if __cplusplus >= 201103L\n-\t  using __assignable = conditional<_IsMove,\n-\t\t\t\t\t   is_move_assignable<_Tp>,\n-\t\t\t\t\t   is_copy_assignable<_Tp>>;\n+\t  using __assignable = __conditional_t<_IsMove,\n+\t\t\t\t\t       is_move_assignable<_Tp>,\n+\t\t\t\t\t       is_copy_assignable<_Tp>>;\n \t  // trivial types can have deleted assignment\n-\t  static_assert( __assignable::type::value, \"type must be assignable\" );\n+\t  static_assert( __assignable::value, \"type must be assignable\" );\n #endif\n \t  const ptrdiff_t _Num = __last - __first;\n \t  if (_Num)"}, {"sha": "8afd67566134819778dcade08c3c9779e1483738", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -100,7 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // otherwise use _Otherwise.\n     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>\n       using __clamp_iter_cat\n-\t= conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;\n+\t= __conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;\n   }\n #endif\n \n@@ -155,9 +155,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __traits_type::reference\t\treference;\n #else\n       using iterator_concept\n-\t= conditional_t<random_access_iterator<_Iterator>,\n-\t\t\trandom_access_iterator_tag,\n-\t\t\tbidirectional_iterator_tag>;\n+\t= __conditional_t<random_access_iterator<_Iterator>,\n+\t\t\t  random_access_iterator_tag,\n+\t\t\t  bidirectional_iterator_tag>;\n       using iterator_category\n \t= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,\n \t\t\t\t     random_access_iterator_tag>;\n@@ -1455,9 +1455,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Iterator\t\t\t\t\tpointer;\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2106. move_iterator wrapping iterators returning prvalues\n-      typedef typename conditional<is_reference<__base_ref>::value,\n-\t\t\t typename remove_reference<__base_ref>::type&&,\n-\t\t\t __base_ref>::type\t\treference;\n+      using reference\n+\t= __conditional_t<is_reference<__base_ref>::value,\n+\t\t\t  typename remove_reference<__base_ref>::type&&,\n+\t\t\t  __base_ref>;\n #endif\n \n       _GLIBCXX17_CONSTEXPR\n@@ -1762,18 +1763,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return move_iterator<_Iterator>(std::move(__i)); }\n \n   template<typename _Iterator, typename _ReturnType\n-    = typename conditional<__move_if_noexcept_cond\n+    = __conditional_t<__move_if_noexcept_cond\n       <typename iterator_traits<_Iterator>::value_type>::value,\n-                _Iterator, move_iterator<_Iterator>>::type>\n+\t\t_Iterator, move_iterator<_Iterator>>>\n     inline _GLIBCXX17_CONSTEXPR _ReturnType\n     __make_move_if_noexcept_iterator(_Iterator __i)\n     { return _ReturnType(__i); }\n \n   // Overload for pointers that matches std::move_if_noexcept more closely,\n   // returning a constant iterator when we don't want to move.\n   template<typename _Tp, typename _ReturnType\n-    = typename conditional<__move_if_noexcept_cond<_Tp>::value,\n-\t\t\t   const _Tp*, move_iterator<_Tp*>>::type>\n+    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,\n+\t\t      const _Tp*, move_iterator<_Tp*>>>\n     inline _GLIBCXX17_CONSTEXPR _ReturnType\n     __make_move_if_noexcept_iterator(_Tp* __i)\n     { return _ReturnType(__i); }\n@@ -2178,8 +2179,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     public:\n-      using iterator_concept = conditional_t<forward_iterator<_It>,\n-\t    forward_iterator_tag, input_iterator_tag>;\n+      using iterator_concept = __conditional_t<forward_iterator<_It>,\n+\t\t\t\t\t       forward_iterator_tag,\n+\t\t\t\t\t       input_iterator_tag>;\n       using iterator_category = decltype(_S_iter_cat());\n       using value_type = iter_value_t<_It>;\n       using difference_type = iter_difference_t<_It>;\n@@ -2459,9 +2461,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     requires same_as<__detail::__iter_traits<_It>, iterator_traits<_It>>\n     struct iterator_traits<counted_iterator<_It>> : iterator_traits<_It>\n     {\n-      using pointer = conditional_t<contiguous_iterator<_It>,\n-\t\t\t\t    add_pointer_t<iter_reference_t<_It>>,\n-\t\t\t\t    void>;\n+      using pointer = __conditional_t<contiguous_iterator<_It>,\n+\t\t\t\t      add_pointer_t<iter_reference_t<_It>>,\n+\t\t\t\t      void>;\n     };\n #endif // C++20\n "}, {"sha": "5b400daf97f850517721c11937d24eec9bb5d77a", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -129,15 +129,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      is_convertible<_U2&&, _T2>>::value;\n       }\n \n-\n       template <bool __implicit, typename _U1, typename _U2>\n       static constexpr bool _DeprConsPair()\n       {\n \tusing __do_converts = __and_<is_convertible<_U1&&, _T1>,\n \t\t\t\t     is_convertible<_U2&&, _T2>>;\n-\tusing __converts = typename conditional<__implicit,\n-\t\t\t\t\t\t__do_converts,\n-\t\t\t\t\t\t__not_<__do_converts>>::type;\n+\tusing __converts = __conditional_t<__implicit,\n+\t\t\t\t\t   __do_converts,\n+\t\t\t\t\t   __not_<__do_converts>>;\n \treturn __and_<is_constructible<_T1, _U1&&>,\n \t\t      is_constructible<_T2, _U2&&>,\n \t\t      __converts\n@@ -561,21 +560,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  second(std::forward<_U2>(__p.second)) { }\n \n       pair&\n-      operator=(typename conditional<\n-\t\t__and_<is_copy_assignable<_T1>,\n-\t\t       is_copy_assignable<_T2>>::value,\n-\t\tconst pair&, const __nonesuch&>::type __p)\n+      operator=(__conditional_t<__and_<is_copy_assignable<_T1>,\n+\t\t\t\t       is_copy_assignable<_T2>>::value,\n+\t\t\t\tconst pair&, const __nonesuch&> __p)\n       {\n \tfirst = __p.first;\n \tsecond = __p.second;\n \treturn *this;\n       }\n \n       pair&\n-      operator=(typename conditional<\n-\t\t__and_<is_move_assignable<_T1>,\n-\t\t       is_move_assignable<_T2>>::value,\n-\t\tpair&&, __nonesuch&&>::type __p)\n+      operator=(__conditional_t<__and_<is_move_assignable<_T1>,\n+\t\t\t\t       is_move_assignable<_T2>>::value,\n+\t\t\t\tpair&&, __nonesuch&&> __p)\n       noexcept(__and_<is_nothrow_move_assignable<_T1>,\n \t\t      is_nothrow_move_assignable<_T2>>::value)\n       {"}, {"sha": "0692525be57b538fefe7db037bb4f81eb7601bcd", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -637,9 +637,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_clone_node(_Link_type __x, _NodeGen& __node_gen)\n \t{\n #if __cplusplus >= 201103L\n-\t  using _Vp = typename conditional<_MoveValue,\n-\t\t\t\t\t   value_type&&,\n-\t\t\t\t\t   const value_type&>::type;\n+\t  using _Vp = __conditional_t<_MoveValue,\n+\t\t\t\t      value_type&&,\n+\t\t\t\t      const value_type&>;\n #endif\n \t  _Link_type __tmp\n \t    = __node_gen(_GLIBCXX_FORWARD(_Vp, *__x->_M_valptr()));\n@@ -821,7 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201402L\n       using node_type = _Node_handle<_Key, _Val, _Node_allocator>;\n       using insert_return_type = _Node_insert_return<\n-\tconditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,\n+\t__conditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,\n \tnode_type>;\n #endif\n "}, {"sha": "c257e9573e02c89e8908d57251d26d8cd68160c3", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -338,9 +338,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Up, typename _Ep, typename = _Require<\n                __safe_conversion_up<_Up, _Ep>,\n-\t       typename conditional<is_reference<_Dp>::value,\n-\t\t\t\t    is_same<_Ep, _Dp>,\n-\t\t\t\t    is_convertible<_Ep, _Dp>>::type>>\n+\t       __conditional_t<is_reference<_Dp>::value,\n+\t\t\t       is_same<_Ep, _Dp>,\n+\t\t\t       is_convertible<_Ep, _Dp>>>>\n \tunique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))\n \t{ }\n@@ -605,9 +605,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up, typename _Ep, typename = _Require<\n \t       __safe_conversion_up<_Up, _Ep>,\n-\t       typename conditional<is_reference<_Dp>::value,\n-\t\t\t\t    is_same<_Ep, _Dp>,\n-\t\t\t\t    is_convertible<_Ep, _Dp>>::type>>\n+\t       __conditional_t<is_reference<_Dp>::value,\n+\t\t\t       is_same<_Ep, _Dp>,\n+\t\t\t       is_convertible<_Ep, _Dp>>>>\n \tunique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))\n \t{ }"}, {"sha": "358c5713da5ca1fb622c1ffa785e9ecc7a2406db", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -86,10 +86,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Alloc, typename... _Args>\n     struct __uses_alloc<true, _Tp, _Alloc, _Args...>\n-    : conditional<\n+    : __conditional_t<\n         is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,\n         __uses_alloc1<_Alloc>,\n-       \t__uses_alloc2<_Alloc>>::type\n+       \t__uses_alloc2<_Alloc>>\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2586. Wrong value category used in scoped_allocator_adaptor::construct\n@@ -131,10 +131,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<template<typename...> class _Predicate,\n \t   typename _Tp, typename _Alloc, typename... _Args>\n     struct __is_uses_allocator_predicate\n-    : conditional<uses_allocator<_Tp, _Alloc>::value,\n+    : __conditional_t<uses_allocator<_Tp, _Alloc>::value,\n       __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,\n \t    _Predicate<_Tp, _Args..., _Alloc>>,\n-      _Predicate<_Tp, _Args...>>::type { };\n+      _Predicate<_Tp, _Args...>> { };\n \n   template<typename _Tp, typename _Alloc, typename... _Args>\n     struct __is_uses_allocator_constructible"}, {"sha": "5d5354410f3f51ffcb0c5eb040d384158dd8be79", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -33,7 +33,7 @@\n \n #if __cplusplus >= 201103L\n # include <bits/stl_iterator.h>\t// for __miter_base\n-# include <type_traits>\t\t// for is_lvalue_reference and conditional.\n+# include <type_traits>\t\t// for is_lvalue_reference and __conditional_t.\n #endif\n \n #include <debug/helper_functions.h>\n@@ -158,8 +158,8 @@ namespace __gnu_debug\n       using __lvalref = std::is_lvalue_reference<\n \ttypename std::iterator_traits<_InputIterator>::reference>;\n       using __contiguous = _Is_contiguous_sequence<_Sequence>;\n-      using __tag = typename std::conditional<__lvalref::value, __contiguous,\n-\t\t\t\t\t      std::__false_type>::type;\n+      using __tag = std::__conditional_t<__lvalref::value, __contiguous,\n+\t\t\t\t\t std::__false_type>;\n #endif\n       return __foreign_iterator_aux3(__it, __other, __other_end, __tag());\n     }"}, {"sha": "44f5db0fb87eac010eb532f5fcdc7d8f81f28812", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -115,9 +115,9 @@ inline namespace fundamentals_v1\n       struct _Manager_external; // creates contained object on the heap\n \n     template<typename _Tp>\n-      using _Manager = conditional_t<_Internal<_Tp>::value,\n-\t\t\t\t     _Manager_internal<_Tp>,\n-\t\t\t\t     _Manager_external<_Tp>>;\n+      using _Manager = __conditional_t<_Internal<_Tp>::value,\n+\t\t\t\t       _Manager_internal<_Tp>,\n+\t\t\t\t       _Manager_external<_Tp>>;\n \n     template<typename _Tp, typename _Decayed = decay_t<_Tp>>\n       using _Decay = enable_if_t<!is_same<_Decayed, any>::value, _Decayed>;\n@@ -430,8 +430,8 @@ inline namespace fundamentals_v1\n       // If the type _Tp could never be stored in an any we don't want to\n       // instantiate _Manager<_Tp>, so use _Manager<any::_Op> instead, which\n       // is explicitly specialized and has a no-op _S_manage function.\n-      using _Vp = conditional_t<__and_<__does_not_decay, __is_copyable>::value,\n-\t\t\t\t_Up, any::_Op>;\n+      using _Vp = __conditional_t<__and_<__does_not_decay, __is_copyable>{},\n+\t\t\t\t  _Up, any::_Op>;\n       // First try comparing function addresses, which works without RTTI\n       if (__any->_M_manager == &any::_Manager<_Vp>::_S_manage\n #if __cpp_rtti"}, {"sha": "e7a0c6e6d989328f133031ef13c69ce75abeed08", "filename": "libstdc++-v3/include/experimental/executor", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -389,7 +389,7 @@ inline namespace v1\n \t= typename __result_type::completion_handler_type;\n \n     private:\n-      using __handler_type = conditional_t<\n+      using __handler_type = __conditional_t<\n \tis_same<_CompletionToken, completion_handler_type>::value,\n \tcompletion_handler_type&,\n \tcompletion_handler_type>;"}, {"sha": "8be2fab1e318d19d61eb77274c43e60da37b9202", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -164,9 +164,9 @@ inline namespace fundamentals_v1\n            typename _Val = typename iterator_traits<_RAIter>::value_type,\n \t   typename _Diff = typename iterator_traits<_RAIter>::difference_type>\n     using __boyer_moore_base_t\n-      = std::conditional_t<std::__is_byte_like<_Val, _Pred>::value,\n-\t\t\t   __boyer_moore_array_base<_Diff, 256, _Pred>,\n-\t\t\t   __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n+      = std::__conditional_t<std::__is_byte_like<_Val, _Pred>::value,\n+\t\t\t     __boyer_moore_array_base<_Diff, 256, _Pred>,\n+\t\t\t     __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n \n   template<typename _RAIter, typename _Hash\n \t     = std::hash<typename std::iterator_traits<_RAIter>::value_type>,"}, {"sha": "625cac619f09d26d16bbbfcaaae647360777e306", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -102,9 +102,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct _Manager_external; // creates contained object on the heap\n \n     template<typename _Tp>\n-      using _Manager = conditional_t<_Internal<_Tp>::value,\n-\t\t\t\t     _Manager_internal<_Tp>,\n-\t\t\t\t     _Manager_external<_Tp>>;\n+      using _Manager = __conditional_t<_Internal<_Tp>::value,\n+\t\t\t\t       _Manager_internal<_Tp>,\n+\t\t\t\t       _Manager_external<_Tp>>;\n \n     template<typename _Tp, typename _VTp = decay_t<_Tp>>\n       using _Decay_if_not_any = enable_if_t<!is_same_v<_VTp, any>, _VTp>;"}, {"sha": "a13f67e4c7c0cd4e446ef8cfc19b72e50fa8c6d8", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -1117,9 +1117,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n            typename _Val = typename iterator_traits<_RAIter>::value_type,\n \t   typename _Diff = typename iterator_traits<_RAIter>::difference_type>\n     using __boyer_moore_base_t\n-      = conditional_t<__is_byte_like<_Val, _Pred>::value,\n-\t\t      __boyer_moore_array_base<_Diff, 256, _Pred>,\n-\t\t      __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n+      = __conditional_t<__is_byte_like<_Val, _Pred>::value,\n+\t\t\t__boyer_moore_array_base<_Diff, 256, _Pred>,\n+\t\t\t__boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n \n   template<typename _RAIter, typename _Hash\n \t     = hash<typename iterator_traits<_RAIter>::value_type>,"}, {"sha": "07eae0cf94bb7428a5ba18919492ea4623e2753b", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -770,11 +770,11 @@ namespace __detail\n   // Data members using this alias should use [[no_unique_address]] so that\n   // they take no space when not needed.\n   template<bool _Present, typename _Tp>\n-    using __maybe_present_t = conditional_t<_Present, _Tp, _Empty>;\n+    using __maybe_present_t = __conditional_t<_Present, _Tp, _Empty>;\n \n   // Alias for a type that is conditionally const.\n   template<bool _Const, typename _Tp>\n-    using __maybe_const_t = conditional_t<_Const, const _Tp, _Tp>;\n+    using __maybe_const_t = __conditional_t<_Const, const _Tp, _Tp>;\n \n } // namespace __detail\n \n@@ -2920,9 +2920,9 @@ namespace views::__adaptor\n \t  bool _M_trailing_empty = false;\n \n \tpublic:\n-\t  using iterator_concept = conditional_t<forward_range<_Base>,\n-\t\t\t\t\t\t forward_iterator_tag,\n-\t\t\t\t\t\t input_iterator_tag>;\n+\t  using iterator_concept = __conditional_t<forward_range<_Base>,\n+\t\t\t\t\t\t   forward_iterator_tag,\n+\t\t\t\t\t\t   input_iterator_tag>;\n \t  // iterator_category defined in __lazy_split_view_outer_iter_cat\n \t  using difference_type = range_difference_t<_Base>;\n "}, {"sha": "94a4f0afd3169ff51958516d35b25629eab98234", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -66,8 +66,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Use the Empty Base-class Optimization for empty, non-final types.\n   template<typename _Tp>\n     using __empty_not_final\n-    = typename conditional<__is_final(_Tp), false_type,\n-\t\t\t   __is_empty_non_tuple<_Tp>>::type;\n+    = __conditional_t<__is_final(_Tp), false_type,\n+\t\t      __is_empty_non_tuple<_Tp>>;\n \n   template<size_t _Idx, typename _Head,\n \t   bool = __empty_not_final<_Head>::value>\n@@ -905,9 +905,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX20_CONSTEXPR\n       tuple&\n-      operator=(typename conditional<__assignable<const _Elements&...>(),\n-\t\t\t\t     const tuple&,\n-\t\t\t\t     const __nonesuch&>::type __in)\n+      operator=(__conditional_t<__assignable<const _Elements&...>(),\n+\t\t\t\tconst tuple&,\n+\t\t\t\tconst __nonesuch&> __in)\n       noexcept(__nothrow_assignable<const _Elements&...>())\n       {\n \tthis->_M_assign(__in);\n@@ -916,9 +916,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX20_CONSTEXPR\n       tuple&\n-      operator=(typename conditional<__assignable<_Elements...>(),\n-\t\t\t\t     tuple&&,\n-\t\t\t\t     __nonesuch&&>::type __in)\n+      operator=(__conditional_t<__assignable<_Elements...>(),\n+\t\t\t\ttuple&&,\n+\t\t\t\t__nonesuch&&> __in)\n       noexcept(__nothrow_assignable<_Elements...>())\n       {\n \tthis->_M_assign(std::move(__in));\n@@ -1274,9 +1274,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX20_CONSTEXPR\n       tuple&\n-      operator=(typename conditional<__assignable<const _T1&, const _T2&>(),\n-\t\t\t\t     const tuple&,\n-\t\t\t\t     const __nonesuch&>::type __in)\n+      operator=(__conditional_t<__assignable<const _T1&, const _T2&>(),\n+\t\t\t\tconst tuple&,\n+\t\t\t\tconst __nonesuch&> __in)\n       noexcept(__nothrow_assignable<const _T1&, const _T2&>())\n       {\n \tthis->_M_assign(__in);\n@@ -1285,9 +1285,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX20_CONSTEXPR\n       tuple&\n-      operator=(typename conditional<__assignable<_T1, _T2>(),\n-\t\t\t\t     tuple&&,\n-\t\t\t\t     __nonesuch&&>::type __in)\n+      operator=(__conditional_t<__assignable<_T1, _T2>(),\n+\t\t\t\ttuple&&,\n+\t\t\t\t__nonesuch&&> __in)\n       noexcept(__nothrow_assignable<_T1, _T2>())\n       {\n \tthis->_M_assign(std::move(__in));"}, {"sha": "35ff5806c5d47e1cc83bc60f4503b95c583c549c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -100,8 +100,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Metaprogramming helper types.\n \n-  template<bool, typename, typename>\n-    struct conditional;\n+  template<bool>\n+    struct __conditional\n+    {\n+      template<typename _Tp, typename>\n+\tusing type = _Tp;\n+    };\n+\n+  template<>\n+    struct __conditional<false>\n+    {\n+      template<typename, typename _Up>\n+\tusing type = _Up;\n+    };\n+\n+  // More efficient version of std::conditional_t for internal use (and C++11)\n+  template<bool _Cond, typename _If, typename _Else>\n+    using __conditional_t\n+      = typename __conditional<_Cond>::template type<_If, _Else>;\n \n   /// @cond undocumented\n   template <typename _Type>\n@@ -126,12 +142,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _B1, typename _B2>\n     struct __or_<_B1, _B2>\n-    : public conditional<_B1::value, _B1, _B2>::type\n+    : public __conditional_t<_B1::value, _B1, _B2>\n     { };\n \n   template<typename _B1, typename _B2, typename _B3, typename... _Bn>\n     struct __or_<_B1, _B2, _B3, _Bn...>\n-    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type\n+    : public __conditional_t<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>\n     { };\n \n   template<typename...>\n@@ -149,12 +165,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _B1, typename _B2>\n     struct __and_<_B1, _B2>\n-    : public conditional<_B1::value, _B2, _B1>::type\n+    : public __conditional_t<_B1::value, _B2, _B1>\n     { };\n \n   template<typename _B1, typename _B2, typename _B3, typename... _Bn>\n     struct __and_<_B1, _B2, _B3, _Bn...>\n-    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type\n+    : public __conditional_t<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>\n     { };\n \n   template<typename _Pp>\n@@ -2491,11 +2507,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef __remove_cvref_t<_Arg> _Argval;\n       typedef _Res _Class::* _MemPtr;\n-      typedef typename conditional<__or_<is_same<_Argval, _Class>,\n+      typedef typename __conditional_t<__or_<is_same<_Argval, _Class>,\n         is_base_of<_Class, _Argval>>::value,\n         __result_of_memobj_ref<_MemPtr, _Arg>,\n         __result_of_memobj_deref<_MemPtr, _Arg>\n-      >::type::type type;\n+      >::type type;\n     };\n \n   template<typename _MemPtr, typename _Arg, typename... _Args>\n@@ -2506,10 +2522,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename remove_reference<_Arg>::type _Argval;\n       typedef _Res _Class::* _MemPtr;\n-      typedef typename conditional<is_base_of<_Class, _Argval>::value,\n+      typedef typename __conditional_t<is_base_of<_Class, _Argval>::value,\n         __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,\n         __result_of_memfun_deref<_MemPtr, _Arg, _Args...>\n-      >::type::type type;\n+      >::type type;\n     };\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "ddeefd9b35e0cbe503610dd17a1ab34a2b593fce", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09bb4a852f82af02b3f965358cd44b0aa266a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=a09bb4a852f82af02b3f965358cd44b0aa266a5b", "patch": "@@ -1096,7 +1096,7 @@ namespace __variant\n       typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),\n       typename _Tp = variant_alternative_t<_Np, remove_reference_t<_AsV>>>\n     using __get_t\n-      = conditional_t<is_lvalue_reference_v<_Variant>, _Tp&, _Tp&&>;\n+      = __conditional_t<is_lvalue_reference_v<_Variant>, _Tp&, _Tp&&>;\n \n   // Return type of std::visit.\n   template<typename _Visitor, typename... _Variants>"}]}