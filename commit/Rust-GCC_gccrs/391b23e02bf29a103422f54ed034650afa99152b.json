{"sha": "391b23e02bf29a103422f54ed034650afa99152b", "node_id": "C_kwDOANBUbNoAKDM5MWIyM2UwMmJmMjlhMTAzNDIyZjU0ZWQwMzQ2NTBhZmE5OTE1MmI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-24T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-24T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "2e7e313dad8a427da339ac0358addba895808812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7e313dad8a427da339ac0358addba895808812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391b23e02bf29a103422f54ed034650afa99152b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391b23e02bf29a103422f54ed034650afa99152b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391b23e02bf29a103422f54ed034650afa99152b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391b23e02bf29a103422f54ed034650afa99152b/comments", "author": null, "committer": null, "parents": [{"sha": "2646d0e06b170569be1da28fce1d6e2f03a15f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2646d0e06b170569be1da28fce1d6e2f03a15f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2646d0e06b170569be1da28fce1d6e2f03a15f60"}], "stats": {"total": 465, "additions": 464, "deletions": 1}, "files": [{"sha": "318d889ed823a9f0c31a958f21e0b880821ae295", "filename": "gcc/ChangeLog", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,172 @@\n+2021-09-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102463\n+\t* gimple-range-fold.cc (fold_using_range::relation_fold_and_or): If\n+\tthere is no range-ops handler, don't look for a relation.\n+\n+2021-09-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Take\n+\tnon-executable_edge flag as parameter.\n+\t* gimple-range-cache.h (ranger_cache): Adjust prototype.\n+\t* gimple-range-gori.cc (gori_compute::gori_compute): Take\n+\tnon-executable_edge flag as parameter.\n+\t(gori_compute::outgoing_edge_range_p): Check new flag.\n+\t* gimple-range-gori.h (gori_compute): Adjust prototype.\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Create new flag.\n+\t(gimple_ranger::range_on_edge): Check new flag.\n+\t* gimple-range.h (gimple_ranger::non_executable_edge_flag): New.\n+\t* gimple-ssa-evrp.c (rvrp_folder): Pass ranger flag to simplifer.\n+\t(hybrid_folder::hybrid_folder): Set ranger non-executable flag value.\n+\t(hybrid_folder::fold_stmt): Set flag value in the simplifer.\n+\t* vr-values.c (simplify_using_ranges::set_and_propagate_unexecutable):\n+\tUse not_executable flag if provided inmstead of EDGE_EXECUTABLE.\n+\t(simplify_using_ranges::simplify_switch_using_ranges): Clear\n+\tEDGE_EXECUTABLE like it originally did.\n+\t(simplify_using_ranges::cleanup_edges_and_switches): Clear any\n+\tNON_EXECUTABLE flags.\n+\t(simplify_using_ranges::simplify_using_ranges): Adjust.\n+\t* vr-values.h (class simplify_using_ranges): Adjust.\n+\t(simplify_using_ranges::set_range_query): Add non-executable flag param.\n+\n+2021-09-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/102024\n+\t* config/rs6000/rs6000-call.c (rs6000_aggregate_candidate): Detect\n+\tzero-width bit fields and return indicator.\n+\t(rs6000_discover_homogeneous_aggregate): Diagnose when the\n+\tpresence of a zero-width bit field changes parameter passing in\n+\tGCC 12.\n+\n+2021-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi):\n+\tRemove dominator check.\n+\n+2021-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::precompute_relations):\n+\tHoist edge calculations before using EDGE_SUCC.\n+\n+2021-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* configure.ac: Fix --with-multilib-list description.\n+\t* configure: Regenerate.\n+\n+2021-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102448\n+\t* tree-vect-data-refs.c (vect_duplicate_ssa_name_ptr_info):\n+\tClear alignment info copied from DR_PTR_INFO.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386-expand.c (ix86_use_mask_cmp_p): Enable\n+\tHFmode mask_cmp.\n+\t* config/i386/sse.md (sseintvecmodelower): Add HF vector modes.\n+\t(<avx512>_store<mode>_mask): Extend to support HF vector modes.\n+\t(vec_cmp<mode><avx512fmaskmodelower>): Likewise.\n+\t(vcond_mask_<mode><avx512fmaskmodelower>): Likewise.\n+\t(vcond<mode><mode>): New expander.\n+\t(vcond<mode><sseintvecmodelower>): Likewise.\n+\t(vcond<sseintvecmodelower><mode>): Likewise.\n+\t(vcondu<mode><sseintvecmodelower>): Likewise.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/sse.md (extend<ssePHmodelower><mode>2):\n+\tNew expander.\n+\t(extendv4hf<mode>2): Likewise.\n+\t(extendv2hfv2df2): Likewise.\n+\t(trunc<mode><ssePHmodelower>2): Likewise.\n+\t(avx512fp16_vcvt<castmode>2ph_<mode>): Rename to ...\n+\t(trunc<mode>v4hf2): ... this, and drop constraints.\n+\t(avx512fp16_vcvtpd2ph_v2df): Rename to ...\n+\t(truncv2dfv2hf2): ... this, and likewise.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/sse.md (float<floatunssuffix><mode><ssePHmodelower>2):\n+\tNew expander.\n+\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>):\n+\tRename to ...\n+\t(float<floatunssuffix><mode>v4hf2): ... this, and drop constraints.\n+\t(avx512fp16_vcvt<floatsuffix>qq2ph_v2di): Rename to ...\n+\t(float<floatunssuffix>v2div2hf2): ... this, and likewise.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386.md (fix<fixunssuffix>_trunchf<mode>2): New expander.\n+\t(fixuns_trunchfhi2): Likewise.\n+\t(*fixuns_trunchfsi2zext): New define_insn.\n+\t* config/i386/sse.md (ssePHmodelower): New mode_attr.\n+\t(fix<fixunssuffix>_trunc<ssePHmodelower><mode>2):\n+\tNew expander for same element vector fix_truncate.\n+\t(fix<fixunssuffix>_trunc<ssePHmodelower><mode>2):\n+\tLikewise for V4HF to V4SI/V4DI fix_truncate.\n+\t(fix<fixunssuffix>_truncv2hfv2di2):\n+\tLikeise for V2HF to V2DI fix_truncate.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386.md (<code>hf3): New expander.\n+\n+2021-09-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (FMAMODEM): extend to handle FP16.\n+\t(VFH_SF_AVX512VL): Extend to handle HFmode.\n+\t(VF_SF_AVX512VL): Deleted.\n+\n+2021-09-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.md (rinthf2): New expander.\n+\t(nearbyinthf2): New expander.\n+\n+2021-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-dom.c (class dom_jump_threader_simplifier): Rename...\n+\t(class dom_jt_state): ...this and provide virtual overrides.\n+\t(dom_jt_state::register_equiv): New.\n+\t(class dom_jt_simplifier): Rename from\n+\tdom_jump_threader_simplifier.\n+\t(dom_jump_threader_simplifier::simplify): Rename...\n+\t(dom_jt_simplifier::simplify): ...to this.\n+\t(pass_dominator::execute): Use dom_jt_simplifier and\n+\tdom_jt_state.\n+\t* tree-ssa-threadedge.c (jump_threader::jump_threader):\n+\tClean-up.\n+\t(jt_state::register_equivs_stmt): Abstract out...\n+\t(jump_threader::record_temporary_equivalences_from_stmts_at_dest):\n+\t...from here.\n+\t(jump_threader::thread_around_empty_blocks): Update state.\n+\t(jump_threader::thread_through_normal_block): Same.\n+\t(jt_state::jt_state): Remove.\n+\t(jt_state::push): Remove pass specific bits.  Keep block vector\n+\tupdated.\n+\t(jt_state::append_path): New.\n+\t(jt_state::pop): Remove pass specific bits.\n+\t(jt_state::register_equiv): Same.\n+\t(jt_state::record_ranges_from_stmt): Same.\n+\t(jt_state::register_equivs_on_edge): Same.  Rename...\n+\t(jt_state::register_equivs_edge):  ...to this.\n+\t(jt_state::dump): New.\n+\t(jt_state::debug): New.\n+\t(jump_threader_simplifier::simplify): Remove.\n+\t(jt_state::get_path): New.\n+\t* tree-ssa-threadedge.h (class jt_simplifier): Make into a base\n+\tclass.  Expose common functionality as virtual methods.\n+\t(class jump_threader_simplifier): Same.  Rename...\n+\t(class jt_simplifier): ...to this.\n+\t* tree-vrp.c (class vrp_jump_threader_simplifier): Rename...\n+\t(class vrp_jt_simplifier): ...to this. Provide pass specific\n+\toverrides.\n+\t(class vrp_jt_state): New.\n+\t(vrp_jump_threader_simplifier::simplify): Rename...\n+\t(vrp_jt_simplifier::simplify): ...to this.  Inline code from\n+\twhat used to be the base class.\n+\t(vrp_jump_threader::vrp_jump_threader): Use vrp_jt_state and\n+\tvrp_jt_simplifier.\n+\n 2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/55534"}, {"sha": "6ac89e9d80a088aff6ea9333c1475277e4957ee4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1 +1 @@\n-20210923\n+20210924"}, {"sha": "9074908a613e2f5ff5ef3a048892baa9f96ef3ad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,143 @@\n+2021-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Fix comment.\n+\n+2021-09-23  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-gen-gen_entities.adb (Subprogram_Body_Or_Type): Add.\n+\t* gen_il-types.ads (Subprogram_Body_Or_Type): Likewise.\n+\n+2021-09-23  Richard Kenner  <kenner@adacore.com>\n+\n+\t* einfo-utils.adb (Next_Index): Verify input and output are\n+\tN_Is_Index.\n+\t* gen_il-gen-gen_nodes.adb (N_Has_Bounds, N_Is_Index): Add.\n+\t* gen_il-types.ads (N_Has_Bounds, N_Is_Index): Likewise.\n+\t* sem_ch3.adb (Array_Type_Declaration): Use Next, not\n+\tNext_Index.\n+\t* sem_ch12.adb (Formal_Dimensions): Likewise.\n+\t* sem_util.adb (Is_Valid_Renaming): Likewise.\n+\n+2021-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst (gnatsymbolize):\n+\tDocument new --load option and -g1 as minimal compilation\n+\trequirement.\n+\n+2021-09-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Only keep the bounds\n+\tfor internally generated attributes; otherwise, compute them\n+\t\tanew.\n+\n+2021-09-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Decorate the\n+\twrapper with attribute Is_Wrapper, and move its declaration to\n+\tthe freezing actions of its type declaration; done to facilitate\n+\tidentifying it at later stages to avoid handling it as a\n+\tprimitive operation of a tagged type; otherwise it may be\n+\thandled as a dispatching operation and erroneously registered in\n+\ta dispatch table.\n+\t(Make_Index): Add missing decoration of field Parent.\n+\t* sem_disp.adb (Check_Dispatching_Operation): Complete\n+\tdecoration of late-overriding dispatching primitives.\n+\t(Is_Access_To_Subprogram_Wrapper): New subprogram.\n+\t(Inherited_Subprograms): Prevent cascaded errors; adding missing\n+\tsupport for private types.\n+\t* sem_type.adb (Add_One_Interp): Add missing support for the\n+\tfirst interpretation of a primitive of an inmediate ancestor\n+\tinterface.\n+\t* sem_util.adb (Check_Result_And_Post_State_In_Pragma): Do not\n+\treport missing reference in postcondition placed in internally\n+\tbuilt wrappers.\n+\t* exp_disp.adb (Expand_Dispatching_Call): Adding assertion.\n+\n+2021-09-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Check the validity of\n+\tan array aggregate all of whose components are iterated\n+\tcomponent associations.\n+\t* exp_aggr.adb (Expand_Array_Aggregate,\n+\tTwo_Pass_Aggregate_Expansion): implement two-pass algorithm and\n+\treplace original aggregate with resulting temporary, to ensure\n+\tthat a proper length check is performed if context is\n+\tconstrained. Use attributes Pos and Val to handle index types of\n+\tany discrete type.\n+\n+2021-09-23  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb: Set the number of concrete nodes that have the\n+\tHomonym field to a higher number than any other field. This\n+\tisn't true, but it forces Homonym's offset to be chosen first,\n+\tso it will be at offset zero and hence slot zero.\n+\n+2021-09-23  Richard Kenner  <kenner@adacore.com>\n+\n+\t* atree.adb (Relocate_Node): If relocating a subprgram call and\n+\twe're doing unnesting, make a new Parameter_Associations, if\n+\tany.\n+\n+2021-09-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-strbou.ads (Generic_Bounded_Length): Remove explicit\n+\tInitializes contract.\n+\n+2021-09-23  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb: Generate getters and setters with much of the\n+\tcode inlined. Generate code for storing a few fields in the node\n+\theader, to avoid the extra level of indirection for those\n+\tfields. We generate the header type, so we don't have to\n+\tduplicate hand-written Ada and C code to depend on the number of\n+\theader fields.  Declare constants for slot size. Use short names\n+\tbecause these are used all over.  Remove\n+\tPut_Low_Level_Accessor_Instantiations, Put_Low_Level_C_Getter,\n+\twhich are no longer needed.  Rename\n+\tPut_High_Level_C_Getter-->Put_C_Getter.\n+\t* atree.ads, atree.adb: Take into account the header slots.\n+\tTake into account the single Node_Or_Entity_Field type.  Remove\n+\t\"pragma Assertion_Policy (Ignore);\", because the routines in\n+\tthis package are no longer efficiency critical.\n+\t* atree.h: Remove low-level getters, which are no longer used by\n+\tsinfo.h and einfo.h.\n+\t* einfo-utils.adb: Avoid crash in Known_Alignment.\n+\t* live.adb, sem_eval.adb: Remove code that prevents Node_Id from\n+\thaving a predicate.  We don't actually add a predicate to\n+\tNode_Id, but we want to be able to for temporary debugging.\n+\t* sinfo-utils.adb: Remove code that prevents Node_Id from having\n+\ta predicate.  Take into account the single Node_Or_Entity_Field\n+\ttype.\n+\t* sinfo-utils.ads: Minor.\n+\t* table.ads (Table_Type): Make the components aliased, because\n+\tlow-level setters in Atree need to take 'Access.\n+\t* treepr.adb: Take into account the single Node_Or_Entity_Field\n+\ttype.  Make some code more robust, so we can print out\n+\thalf-baked nodes.\n+\t* types.ads: Move types here for visibility purposes.\n+\t* gcc-interface/gigi.h, gcc-interface/trans.c: Take into account\n+\tthe Node_Header change in the GNAT front end.\n+\t* gcc-interface/cuintp.c, gcc-interface/targtyps.c: Add because\n+\tgigi.h now refers to type Node_Header, which is in sinfo.h.\n+\n+2021-09-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-strfix.adb (Delete, Insert, Overwrite,\n+\tReplace_Slice): Remove SPARK_Mode Off.\n+\t* libgnat/a-strfix.ads (Insert, Overwrite, Replace_Slice):\n+\tStrengthen precondition.\n+\n+2021-09-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-strbou.ads (Generic_Bounded_Length): Remove non-null\n+\tGlobal contracts.\n+\n+2021-09-23  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Update\n+\tthis section to reflect the current version of Ada RM M.2.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2021-09-22  Yannick Moy  <moy@adacore.com>\n \n \t* libgnat/a-strfix.ads (Trim): Simplify contracts."}, {"sha": "6918bf9c041a2241512348d19f30f508c6a77f56", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,29 @@\n+2021-09-23  Michel Morin  <mimomorin@gmail.com>\n+\n+\t* parser.c (cp_keyword_starts_decl_specifier_p): Do not\n+\thandle RID_ATTRIBUTE.\n+\t(cp_parser_constructor_declarator_p): Remove now-redundant\n+\tchecks.\n+\t(cp_parser_lambda_declarator_opt): Likewise.\n+\n+2021-09-23  Michel Morin  <mimomorin@gmail.com>\n+\n+\tPR c++/77565\n+\t* parser.c (cp_keyword_starts_decl_specifier_p): Handle more\n+\tdecl-specifiers (typedef/inline/cv/explicit/virtual/friend).\n+\n+2021-09-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* ptree.c (cxx_print_decl): Dump the DECL_TEMPLATE_RESULT of\n+\ta TEMPLATE_DECL.  Dump the DECL_TEMPLATE_INFO rather than just\n+\tprinting its pointer value.\n+\n+2021-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102413\n+\t* parser.c (cp_parser_omp_directive_args): Diagnose if omp::directive\n+\tis not followed by a balanced token sequence starting with open paren.\n+\n 2021-09-22  Patrick Palka  <ppalka@redhat.com>\n \n \tDR 2446"}, {"sha": "42c3cbe254847162d1b8b729c4cdb1d98d7f97f6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,16 @@\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/101320\n+\t* decl.c (gfc_verify_c_interop_param): Handle F2018 C1557,\n+\taka TS29113 C516.\n+\n+2021-09-23  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/93834\n+\t* trans-intrinsic.c (gfc_conv_allocated): Cleanup. Handle\n+\tcoindexed scalar coarrays.\n+\n 2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR fortran/101319"}, {"sha": "8198aee5839d6a98f34c3739f04d56b510f6c44f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,69 @@\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/101320\n+\t* gfortran.dg/c-interop/c516.f90: Remove xfails.  Add more\n+\ttests.\n+\n+2021-09-23  Michel Morin  <mimomorin@gmail.com>\n+\n+\tPR c++/77565\n+\t* g++.dg/spellcheck-pr77565.C: New test.\n+\n+2021-09-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr102463.c: New.\n+\n+2021-09-23  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/93834\n+\t* gfortran.dg/coarray/coarray_allocated.f90: New test.\n+\n+2021-09-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/102024\n+\t* g++.target/powerpc/pr102024.C: New.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* g++.target/i386/avx512fp16-vcondmn-vec.C: New test.\n+\t* g++.target/i386/avx512fp16-vcondmn-minmax.C: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcondmn-loop-1.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcondmn-loop-2.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vec_cmpmn.c: Ditto.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-trunc-extendvnhf.c: New test.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-floatvnhf.c: New test.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-trunchf.c: New test.\n+\t* gcc.target/i386/avx512fp16-truncvnhf.c: Ditto.\n+\n+2021-09-23  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-builtin-minmax-1.c: New test.\n+\n+2021-09-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-fma-1.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-fma-1.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-fma-vectorize-1.c: New test.\n+\n+2021-09-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-builtin-round-1.c: Add new testcase.\n+\n+2021-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102413\n+\t* g++.dg/gomp/attrs-14.C: New test.\n+\n 2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR fortran/101319"}, {"sha": "6988ffd59c471e946c57260e6efe19458566c163", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,13 @@\n+2021-09-23  Lu\u00eds Ferreira  <contact@lsferreira.net>\n+\n+\t* d-demangle.c (dlang_Type): Validate MANGLED is nonnull.\n+\t* testsuite/d-demangle-expected: New test.\n+\n+2021-09-23  Lu\u00eds Ferreira  <contact@lsferreira.net>\n+\n+\t* d-demangle.c (dlang_symbol_backref): Ensure strlen of\n+\tstring is less than length computed by dlang_number.\n+\n 2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure: Regenerate."}, {"sha": "10368ffdf971881af74cb2e7bae81dc4ffae10ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391b23e02bf29a103422f54ed034650afa99152b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391b23e02bf29a103422f54ed034650afa99152b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=391b23e02bf29a103422f54ed034650afa99152b", "patch": "@@ -1,3 +1,42 @@\n+2021-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/specialized_algorithms/memory_management_tools/destroy_neg.cc:\n+\tRemove dg-error lines for C++20-only errors.\n+\n+2021-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/19_diagnostics/headers/system_error/93151.cc:\n+\tDisable PCH.\n+\n+2021-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/system_error.cc (system_error_category) [_WIN32]:\n+\tMap Windows error codes to generic POSIX error numbers. Use\n+\tFormatMessage instead of strerror.\n+\t* testsuite/19_diagnostics/error_category/system_category.cc:\n+\tAdjust for new behaviour on Windows.\n+\n+2021-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/system_error.cc (generic_error_category): Define\n+\tclass and virtual functions as 'final'.\n+\t(generic_error_category::equivalent(int, const error_condition&)):\n+\tOverride.\n+\t(system_error_category): Define class and virtual functions as\n+\t'final'.\n+\t(system_error_category::equivalent(int, const error_condition&)):\n+\tOverride.\n+\t(generic_category_instance, system_category_instance): Use\n+\tconstinit union to make the objects immortal.\n+\n+2021-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102425\n+\t* src/c++11/system_error.cc\n+\t(system_error_category::default_error_condition): Add 0 to\n+\tswitch.\n+\t* testsuite/19_diagnostics/error_category/102425.cc: New test.\n+\n 2021-09-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/fs_path.h (path::iterator): Add noexcept to all"}]}