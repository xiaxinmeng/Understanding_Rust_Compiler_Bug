{"sha": "21c0a521e4c1059b59ec2f15fad7469134126d7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjMGE1MjFlNGMxMDU5YjU5ZWMyZjE1ZmFkNzQ2OTEzNDEyNmQ3Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-05-05T19:41:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-05-05T19:41:11Z"}, "message": "Fix indentation issues seen by -Wmisleading-indentation\n\ngcc/ChangeLog:\n\t* auto-profile.c (afdo_find_equiv_class): Fix indentation so\n\tthat it reflects the block structure.\n\t(afdo_propagate_edge): Likewise.\n\t(afdo_calculate_branch_prob): Likewise.\n\t(afdo_annotate_cfg): Likewise.\n\t* cfgcleanup.c (equal_different_set_p): Likewise.\n\t(try_crossjump_to_edge): Likewise.\n\t* cgraph.c (cgraph_node::verify_node): Likewise.\n\t* cgraphunit.c (expand_all_functions): Likewise.\n\t* config/i386/i386.c (ix86_expand_copysign): Likewise.\n\t(exact_dependency_1): Likewise.\n\t* dwarf2asm.c (dw2_output_indirect_constants): Likewise.\n\t* dwarf2out.c (tree_add_const_value_attribute_for_decl): Likewise.\n\t* gensupport.c (process_define_subst): Likewise.\n\t* lto-wrapper.c (merge_and_complain): Likewise.\n\t* tree-if-conv.c (if_convertible_bb_p): Likewise.\n\t* tree-ssa-loop-prefetch.c (find_or_create_group): Likewise.\n\t* tree-ssa-tail-merge.c (gsi_advance_fw_nondebug_nonlocal): Likewise.\n\t* tree-vect-data-refs.c (vect_grouped_load_supported): Likewise.\n\t* tree-vect-loop.c (vectorizable_reduction): Likewise.\n\t* tree-vect-slp.c (vect_transform_slp_perm_load): Likewise.\n\t* tree-vect-stmts.c (vectorizable_shift): Likewise.\n\t* tree-vrp.c (vrp_finalize): Likewise.\n\t* tree.c (variably_modified_type_p): Likewise.\n\ngcc/cp/ChangeLog:\n\t* parser.c (cp_parser_asm_definition): Only test for\n        error_mark_node if \"outputs\" was just set.\n\t(cp_parser_asm_definition): Likewise for \"inputs\".\n\ngcc/fortran/ChangeLog:\n\t* expr.c (check_inquiry): Fix indentation so that it reflects the\n\tblock structure.\n\t* interface.c (compare_parameter): Likewise.\n\t* parse.c (parse_oacc_structured_block): Likewise.\n\t* target-memory.c (expr_to_char): Likewise.\n\t* trans-types.c (gfc_init_kinds): Likewise.\n\nlibcpp/ChangeLog:\n\t* pch.c (cpp_valid_state): Fix indentation so that it reflects the\n\tblock structure.\n\nFrom-SVN: r222823", "tree": {"sha": "3c03b0fd133a40ad4cd1831ee497ff3193b7a8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c03b0fd133a40ad4cd1831ee497ff3193b7a8e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c0a521e4c1059b59ec2f15fad7469134126d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c0a521e4c1059b59ec2f15fad7469134126d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c0a521e4c1059b59ec2f15fad7469134126d7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c0a521e4c1059b59ec2f15fad7469134126d7c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0674c9de9d16a62fd3bb17c10c65adf7899043d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0674c9de9d16a62fd3bb17c10c65adf7899043d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0674c9de9d16a62fd3bb17c10c65adf7899043d6"}], "stats": {"total": 249, "additions": 149, "deletions": 100}, "files": [{"sha": "3e67699fb338b281819f789ba08d137f8cbcafa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1,3 +1,30 @@\n+2015-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* auto-profile.c (afdo_find_equiv_class): Fix indentation so\n+\tthat it reflects the block structure.\n+\t(afdo_propagate_edge): Likewise.\n+\t(afdo_calculate_branch_prob): Likewise.\n+\t(afdo_annotate_cfg): Likewise.\n+\t* cfgcleanup.c (equal_different_set_p): Likewise.\n+\t(try_crossjump_to_edge): Likewise.\n+\t* cgraph.c (cgraph_node::verify_node): Likewise.\n+\t* cgraphunit.c (expand_all_functions): Likewise.\n+\t* config/i386/i386.c (ix86_expand_copysign): Likewise.\n+\t(exact_dependency_1): Likewise.\n+\t* dwarf2asm.c (dw2_output_indirect_constants): Likewise.\n+\t* dwarf2out.c (tree_add_const_value_attribute_for_decl): Likewise.\n+\t* gensupport.c (process_define_subst): Likewise.\n+\t* lto-wrapper.c (merge_and_complain): Likewise.\n+\t* tree-if-conv.c (if_convertible_bb_p): Likewise.\n+\t* tree-ssa-loop-prefetch.c (find_or_create_group): Likewise.\n+\t* tree-ssa-tail-merge.c (gsi_advance_fw_nondebug_nonlocal): Likewise.\n+\t* tree-vect-data-refs.c (vect_grouped_load_supported): Likewise.\n+\t* tree-vect-loop.c (vectorizable_reduction): Likewise.\n+\t* tree-vect-slp.c (vect_transform_slp_perm_load): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_shift): Likewise.\n+\t* tree-vrp.c (vrp_finalize): Likewise.\n+\t* tree.c (variably_modified_type_p): Likewise.\n+\n 2015-05-05  Jack Howarth  <howarth.at.gcc@gmail.com>\n \n \t* config.gcc: Use darwin9.h, darwin10.h and darwin12.h"}, {"sha": "55dd8d18483ce441d5d50f0ca744d0cb51963699", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1143,28 +1143,28 @@ afdo_find_equiv_class (bb_set *annotated_bb)\n     bb->aux = bb;\n     dom_bbs = get_dominated_by (CDI_DOMINATORS, bb);\n     FOR_EACH_VEC_ELT (dom_bbs, i, bb1)\n-    if (bb1->aux == NULL && dominated_by_p (CDI_POST_DOMINATORS, bb, bb1)\n-        && bb1->loop_father == bb->loop_father)\n-      {\n-        bb1->aux = bb;\n-        if (bb1->count > bb->count && is_bb_annotated (bb1, *annotated_bb))\n-          {\n-            bb->count = bb1->count;\n-            set_bb_annotated (bb, annotated_bb);\n-          }\n-      }\n+      if (bb1->aux == NULL && dominated_by_p (CDI_POST_DOMINATORS, bb, bb1)\n+\t  && bb1->loop_father == bb->loop_father)\n+\t{\n+\t  bb1->aux = bb;\n+\t  if (bb1->count > bb->count && is_bb_annotated (bb1, *annotated_bb))\n+\t    {\n+\t      bb->count = bb1->count;\n+\t      set_bb_annotated (bb, annotated_bb);\n+\t    }\n+\t}\n     dom_bbs = get_dominated_by (CDI_POST_DOMINATORS, bb);\n     FOR_EACH_VEC_ELT (dom_bbs, i, bb1)\n-    if (bb1->aux == NULL && dominated_by_p (CDI_DOMINATORS, bb, bb1)\n-        && bb1->loop_father == bb->loop_father)\n-      {\n-        bb1->aux = bb;\n-        if (bb1->count > bb->count && is_bb_annotated (bb1, *annotated_bb))\n-          {\n-            bb->count = bb1->count;\n-            set_bb_annotated (bb, annotated_bb);\n-          }\n-      }\n+      if (bb1->aux == NULL && dominated_by_p (CDI_DOMINATORS, bb, bb1)\n+\t  && bb1->loop_father == bb->loop_father)\n+\t{\n+\t  bb1->aux = bb;\n+\t  if (bb1->count > bb->count && is_bb_annotated (bb1, *annotated_bb))\n+\t    {\n+\t      bb->count = bb1->count;\n+\t      set_bb_annotated (bb, annotated_bb);\n+\t    }\n+\t}\n   }\n }\n \n@@ -1191,10 +1191,10 @@ afdo_propagate_edge (bool is_succ, bb_set *annotated_bb,\n     gcov_type total_known_count = 0;\n \n     FOR_EACH_EDGE (e, ei, is_succ ? bb->succs : bb->preds)\n-    if (!is_edge_annotated (e, *annotated_edge))\n-      num_unknown_edge++, unknown_edge = e;\n-    else\n-      total_known_count += e->count;\n+      if (!is_edge_annotated (e, *annotated_edge))\n+\tnum_unknown_edge++, unknown_edge = e;\n+      else\n+\ttotal_known_count += e->count;\n \n     if (num_unknown_edge == 0)\n       {\n@@ -1404,7 +1404,7 @@ afdo_calculate_branch_prob (bb_set *annotated_bb, edge_set *annotated_edge)\n     edge_iterator ei;\n \n     FOR_EACH_EDGE (e, ei, bb->succs)\n-    e->count = (double)bb->count * e->probability / REG_BR_PROB_BASE;\n+      e->count = (double)bb->count * e->probability / REG_BR_PROB_BASE;\n     bb->aux = NULL;\n   }\n \n@@ -1502,7 +1502,7 @@ afdo_annotate_cfg (const stmt_set &promoted_stmts)\n \n     bb->count = 0;\n     FOR_EACH_EDGE (e, ei, bb->succs)\n-    e->count = 0;\n+      e->count = 0;\n \n     if (afdo_set_bb_count (bb, promoted_stmts))\n       set_bb_annotated (bb, &annotated_bb);"}, {"sha": "797d14ada5c96ebbbb2e9e3985024686f707d2c6", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1032,7 +1032,7 @@ equal_different_set_p (rtx p1, rtx s1, rtx p2, rtx s2)\n           ? rtx_renumbered_equal_p (e1, e2) : rtx_equal_p (e1, e2))\n         continue;\n \n-        return false;\n+      return false;\n     }\n \n   return true;\n@@ -2039,7 +2039,7 @@ try_crossjump_to_edge (int mode, edge e1, edge e2,\n      If we have tablejumps in the end of SRC1 and SRC2\n      they have been already compared for equivalence in outgoing_edges_match ()\n      so replace the references to TABLE1 by references to TABLE2.  */\n-    {\n+  {\n       rtx label1, label2;\n       rtx_jump_table_data *table1, *table2;\n \n@@ -2059,7 +2059,7 @@ try_crossjump_to_edge (int mode, edge e1, edge e2,\n \t\treplace_label_in_insn (insn, label1, label2, true);\n \t    }\n \t}\n-    }\n+  }\n \n   /* Avoid splitting if possible.  We must always split when SRC2 has\n      EH predecessor edges, or we may end up with basic blocks with both"}, {"sha": "7f83cccc4036b6cce2886ef15bf8026b710a1f12", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -2955,11 +2955,11 @@ cgraph_node::verify_node (void)\n \t  }\n \telse\n \t  ref_found = true;\n-\tif (!ref_found)\n-\t  {\n-\t    error (\"Analyzed alias has no reference\");\n-\t    error_found = true;\n-\t  }\n+      if (!ref_found)\n+\t{\n+\t  error (\"Analyzed alias has no reference\");\n+\t  error_found = true;\n+\t}\n     }\n \n   /* Check instrumented version reference.  */"}, {"sha": "757f03d281bde0c772d5a7c8646527f198c86a67", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -2019,14 +2019,14 @@ expand_all_functions (void)\n \n       if (node->process)\n \t{\n-     expanded_func_count++;\n-     if(node->tp_first_run)\n-       profiled_func_count++;\n-\n-    if (symtab->dump_file)\n-\t  fprintf (symtab->dump_file,\n-\t\t   \"Time profile order in expand_all_functions:%s:%d\\n\",\n-\t\t   node->asm_name (), node->tp_first_run);\n+\t  expanded_func_count++;\n+\t  if(node->tp_first_run)\n+\t    profiled_func_count++;\n+\n+\t  if (symtab->dump_file)\n+\t    fprintf (symtab->dump_file,\n+\t\t     \"Time profile order in expand_all_functions:%s:%d\\n\",\n+\t\t     node->asm_name (), node->tp_first_run);\n \t  node->process = 0;\n \t  node->expand ();\n \t}"}, {"sha": "627ef6537ddd49461a32c88b919f136179a723e3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -19606,7 +19606,7 @@ ix86_expand_copysign (rtx operands[])\n       else\n \tcopysign_insn = gen_copysigntf3_const;\n \n-\temit_insn (copysign_insn (dest, op0, op1, mask));\n+      emit_insn (copysign_insn (dest, op0, op1, mask));\n     }\n   else\n     {\n@@ -26110,7 +26110,7 @@ exact_dependency_1 (rtx addr, rtx insn)\n \t  for (j = 0; j < XVECLEN (insn, i); j++)\n \t    if (exact_dependency_1 (addr, XVECEXP (insn, i, j)))\n \t      return true;\n-\t    break;\n+\t  break;\n \t}\n     }\n   return false;"}, {"sha": "17c2d1d9887936e7bde58aea4eafa0221487075b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1,3 +1,8 @@\n+2015-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* parser.c (cp_parser_asm_definition): Only test for\n+        error_mark_node if \"outputs\" was just set.  Likewise for \"inputs\".\n+\n 2015-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "30a3fabbb986ef180e1bf453b530ea912b14198f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -16747,10 +16747,11 @@ cp_parser_asm_definition (cp_parser* parser)\n \t      && cp_lexer_next_token_is_not (parser->lexer,\n \t\t\t\t\t     CPP_CLOSE_PAREN)\n \t      && !goto_p)\n-\t    outputs = cp_parser_asm_operand_list (parser);\n-\n-\t    if (outputs == error_mark_node)\n-\t      invalid_outputs_p = true;\n+            {\n+              outputs = cp_parser_asm_operand_list (parser);\n+              if (outputs == error_mark_node)\n+                invalid_outputs_p = true;\n+            }\n \t}\n       /* If the next token is `::', there are no outputs, and the\n \t next token is the beginning of the inputs.  */\n@@ -16771,10 +16772,11 @@ cp_parser_asm_definition (cp_parser* parser)\n \t\t\t\t\t     CPP_SCOPE)\n \t      && cp_lexer_next_token_is_not (parser->lexer,\n \t\t\t\t\t     CPP_CLOSE_PAREN))\n-\t    inputs = cp_parser_asm_operand_list (parser);\n-\n-\t    if (inputs == error_mark_node)\n-\t      invalid_inputs_p = true;\n+            {\n+              inputs = cp_parser_asm_operand_list (parser);\n+              if (inputs == error_mark_node)\n+                invalid_inputs_p = true;\n+            }\n \t}\n       else if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))\n \t/* The clobbers are coming next.  */"}, {"sha": "ba1b543b8069fcbc13ac12bd0b102fbf975bc04a", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -931,9 +931,9 @@ dw2_output_indirect_constants (void)\n        iter != indirect_pool->end (); ++iter)\n     temp.quick_push (*iter);\n \n-    temp.qsort (compare_strings);\n+  temp.qsort (compare_strings);\n \n-    for (unsigned int i = 0; i < temp.length (); i++)\n+  for (unsigned int i = 0; i < temp.length (); i++)\n     dw2_output_indirect_constant_1 (temp[i].first, temp[i].second);\n }\n "}, {"sha": "ddca2a83df4cfa995962836fb503dc0cce9bdbd6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -16319,12 +16319,12 @@ tree_add_const_value_attribute_for_decl (dw_die_ref var_die, tree decl)\n \t  && !TREE_STATIC (decl)))\n     return false;\n \n-    if (TREE_READONLY (decl)\n-\t&& ! TREE_THIS_VOLATILE (decl)\n-\t&& DECL_INITIAL (decl))\n-      /* OK */;\n-    else\n-      return false;\n+  if (TREE_READONLY (decl)\n+      && ! TREE_THIS_VOLATILE (decl)\n+      && DECL_INITIAL (decl))\n+    /* OK */;\n+  else\n+    return false;\n \n   /* Don't add DW_AT_const_value if abstract origin already has one.  */\n   if (get_AT (var_die, DW_AT_const_value))"}, {"sha": "67f9e097e47b86b0d38637a4756490a472c607c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1,3 +1,12 @@\n+2015-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* expr.c (check_inquiry): Fix indentation so that it reflects the\n+\tblock structure.\n+\t* interface.c (compare_parameter): Likewise.\n+\t* parse.c (parse_oacc_structured_block): Likewise.\n+\t* target-memory.c (expr_to_char): Likewise.\n+\t* trans-types.c (gfc_init_kinds): Likewise.\n+\n 2015-05-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/65976"}, {"sha": "c34be9079b9026c42e77ac5738b4734d94149080", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -2297,8 +2297,8 @@ check_inquiry (gfc_expr *e, int not_restricted)\n \tif (strcmp (functions[i], name) == 0)\n \t  break;\n \n-\tif (functions[i] == NULL)\n-\t  return MATCH_ERROR;\n+      if (functions[i] == NULL)\n+\treturn MATCH_ERROR;\n     }\n \n   /* At this point we have an inquiry function with a variable argument.  The"}, {"sha": "0501c1d15438d955e6e709bdb96d0bbc7b6e69cc", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -2180,7 +2180,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t    gfc_error (\"Passing coarray at %L to allocatable, noncoarray, \"\n \t\t       \"INTENT(OUT) dummy argument %qs\", &actual->where,\n \t\t       formal->name);\n-\t    return 0;\n+\t  return 0;\n \t}\n       else if (warn_surprising && where && formal->attr.intent != INTENT_IN)\n \tgfc_warning (OPT_Wsurprising,"}, {"sha": "30e4eabc557f9c267cf1db7bf0cd5f0d1ea72fa8", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -4283,7 +4283,7 @@ parse_oacc_structured_block (gfc_statement acc_st)\n \tunexpected_eof ();\n       else if (st != acc_end_st)\n \tgfc_error (\"Expecting %s at %C\", gfc_ascii_statement (acc_end_st));\n-\treject_statement ();\n+      reject_statement ();\n     }\n   while (st != acc_end_st);\n "}, {"sha": "187682acf3403abcbcdc82cb24858c43776f84df", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -671,8 +671,8 @@ expr_to_char (gfc_expr *e, unsigned char *data, unsigned char *chk, size_t len)\n \t  gcc_assert (cmp && cmp->backend_decl);\n \t  if (!c->expr)\n \t    continue;\n-\t    ptr = TREE_INT_CST_LOW(DECL_FIELD_OFFSET(cmp->backend_decl))\n-\t\t\t+ TREE_INT_CST_LOW(DECL_FIELD_BIT_OFFSET(cmp->backend_decl))/8;\n+\t  ptr = TREE_INT_CST_LOW(DECL_FIELD_OFFSET(cmp->backend_decl))\n+\t    + TREE_INT_CST_LOW(DECL_FIELD_BIT_OFFSET(cmp->backend_decl))/8;\n \t  expr_to_char (c->expr, &data[ptr], &chk[ptr], len);\n \t}\n       return len;"}, {"sha": "c8be256f0d018aacddd9137ce811c3ad4ce869f6", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -438,10 +438,10 @@ gfc_init_kinds (void)\n       /* Only let float, double, long double and __float128 go through.\n \t Runtime support for others is not provided, so they would be\n \t useless.  */\n-\tif (!targetm.libgcc_floating_mode_supported_p ((machine_mode)\n+      if (!targetm.libgcc_floating_mode_supported_p ((machine_mode)\n \t\t\t\t\t\t       mode))\n-\t  continue;\n-\tif (mode != TYPE_MODE (float_type_node)\n+\tcontinue;\n+      if (mode != TYPE_MODE (float_type_node)\n \t    && (mode != TYPE_MODE (double_type_node))\n \t    && (mode != TYPE_MODE (long_double_type_node))\n #if defined(HAVE_TFmode) && defined(ENABLE_LIBQUADMATH_SUPPORT)\n@@ -587,23 +587,23 @@ gfc_init_kinds (void)\n \tgfc_fatal_error (\"REAL(KIND=4) is not available for \"\n \t\t\t \"%<-freal-8-real-4%> option\");\n \n-\tgfc_default_double_kind = 4;\n+      gfc_default_double_kind = 4;\n     }\n   else if (flag_real8_kind == 10 )\n     {\n       if (!saw_r10)\n \tgfc_fatal_error (\"REAL(KIND=10) is not available for \"\n \t\t\t \"%<-freal-8-real-10%> option\");\n \n-\tgfc_default_double_kind = 10;\n+      gfc_default_double_kind = 10;\n     }\n   else if (flag_real8_kind == 16 )\n     {\n       if (!saw_r16)\n \tgfc_fatal_error (\"REAL(KIND=10) is not available for \"\n \t\t\t \"%<-freal-8-real-16%> option\");\n \n-\tgfc_default_double_kind = 16;\n+      gfc_default_double_kind = 16;\n     }\n   else if (saw_r4 && saw_r8)\n     gfc_default_double_kind = 8;"}, {"sha": "bda01fa04f5b399e4f34acc0dd79bb4bfde2a324", "filename": "gcc/gensupport.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -2227,11 +2227,12 @@ process_define_subst (void)\n \tif (strcmp (XSTR (elem->data, 0), XSTR (elem_attr->data, 1)) == 0)\n \t    goto found;\n \n-\terror_with_line (elem->lineno,\n-\t\t\t \"%s: `define_subst' must have at least one \"\n-\t\t\t \"corresponding `define_subst_attr'\",\n-\t\t\t XSTR (elem->data, 0));\n-\treturn;\n+      error_with_line (elem->lineno,\n+\t\t       \"%s: `define_subst' must have at least one \"\n+\t\t       \"corresponding `define_subst_attr'\",\n+\t\t       XSTR (elem->data, 0));\n+      return;\n+\n       found:\n \tcontinue;\n     }"}, {"sha": "11bf9ad063913518326eaec429eb236f796024a8", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -303,13 +303,13 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t  for (j = 0; j < *decoded_options_count; ++j)\n \t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n \t      break;\n-\t    if (j == *decoded_options_count)\n-\t      append_option (decoded_options, decoded_options_count, foption);\n-\t    else if (foption->value != (*decoded_options)[j].value)\n-\t      fatal_error (input_location,\n-\t\t\t   \"Option %s not used consistently in all LTO input\"\n-\t\t\t   \" files\", foption->orig_option_with_args_text);\n-\t    break;\n+\t  if (j == *decoded_options_count)\n+\t    append_option (decoded_options, decoded_options_count, foption);\n+\t  else if (foption->value != (*decoded_options)[j].value)\n+\t    fatal_error (input_location,\n+\t\t\t \"Option %s not used consistently in all LTO input\"\n+\t\t\t \" files\", foption->orig_option_with_args_text);\n+\t  break;\n \n \tcase OPT_O:\n \tcase OPT_Ofast:"}, {"sha": "49ff4588f12c08bd6af6699f4a0c27c295aa49dd", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1087,7 +1087,7 @@ if_convertible_bb_p (struct loop *loop, basic_block bb, basic_block exit_bb)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"only critical predecessors\\n\");\n-\treturn false;\n+      return false;\n     }\n \n   return true;"}, {"sha": "a948d6842e3d00c6a9db1b8391b3904ecfb7f352", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -368,8 +368,8 @@ find_or_create_group (struct mem_ref_group **groups, tree base, tree step)\n \n       /* If step is an integer constant, keep the list of groups sorted\n          by decreasing step.  */\n-        if (cst_and_fits_in_hwi ((*groups)->step) && cst_and_fits_in_hwi (step)\n-            && int_cst_value ((*groups)->step) < int_cst_value (step))\n+      if (cst_and_fits_in_hwi ((*groups)->step) && cst_and_fits_in_hwi (step)\n+\t  && int_cst_value ((*groups)->step) < int_cst_value (step))\n \tbreak;\n     }\n "}, {"sha": "ee6e7b22c322aa71d9284e2d8955c7044a35e01e", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -379,7 +379,7 @@ gsi_advance_fw_nondebug_nonlocal (gimple_stmt_iterator *gsi)\n       stmt = gsi_stmt (*gsi);\n       if (!stmt_local_def (stmt))\n \treturn;\n-\tgsi_next_nondebug (gsi);\n+      gsi_next_nondebug (gsi);\n     }\n }\n "}, {"sha": "0992d6ce1d76a45f7b9236576c8f1b7d5a957c19", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -5028,7 +5028,7 @@ vect_grouped_load_supported (tree vectype, unsigned HOST_WIDE_INT count)\n \t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t     \"shuffle of 3 loads is not supported by\"\n \t\t\t\t     \" target\\n\");\n-\t\t    return false;\n+\t\t  return false;\n \t\t}\n \t      for (i = 0, j = 0; i < nelt; i++)\n \t\tif (3 * i + k < 2 * nelt)"}, {"sha": "49bf518a5c5701a38117c126ecb3786e1753b841", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -5057,7 +5057,7 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t     \"unsupported condition in reduction\\n\");\n \n-            return false;\n+\t  return false;\n         }\n     }\n   else"}, {"sha": "d41aa10a81eb8a50d80515039f1943fb6c068a34", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -3179,7 +3179,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n      we need the second and the third vectors: {b1,c1,a2,b2} and\n      {c2,a3,b3,c3}.  */\n \n-    {\n+  {\n       scalar_index = 0;\n       index = 0;\n       vect_stmts_counter = 0;"}, {"sha": "31f26e794e6c6447c8120560c9d3ff3cf16f1bb4", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -4437,7 +4437,7 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n                         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                          \"unusable type for last operand in\"\n                                          \" vector/vector shift/rotate.\\n\");\n-\t\t\treturn false;\n+\t\t      return false;\n \t\t    }\n \t\t  if (vec_stmt && !slp_node)\n \t\t    {"}, {"sha": "6744a91f6e9844bc410b4c76efd72ba1047bec74", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -10266,12 +10266,12 @@ vrp_finalize (void)\n \t  || (vr_value[i]->type == VR_UNDEFINED))\n \tcontinue;\n \n-\tif ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n-\t    && (TREE_CODE (vr_value[i]->max) == INTEGER_CST)\n-\t    && (vr_value[i]->type == VR_RANGE\n-\t\t|| vr_value[i]->type == VR_ANTI_RANGE))\n-\t  set_range_info (name, vr_value[i]->type, vr_value[i]->min,\n-\t\t\t  vr_value[i]->max);\n+      if ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n+\t  && (TREE_CODE (vr_value[i]->max) == INTEGER_CST)\n+\t  && (vr_value[i]->type == VR_RANGE\n+\t      || vr_value[i]->type == VR_ANTI_RANGE))\n+\tset_range_info (name, vr_value[i]->type, vr_value[i]->min,\n+\t\t\tvr_value[i]->max);\n       }\n \n   /* Free allocated memory.  */"}, {"sha": "7ac11a942d068b29ca69798b71c3f8104cb0fcf2", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -8948,7 +8948,7 @@ variably_modified_type_p (tree type, tree fn)\n \t    if (TREE_CODE (type) == QUAL_UNION_TYPE)\n \t      RETURN_TRUE_IF_VAR (DECL_QUALIFIER (t));\n \t  }\n-\tbreak;\n+      break;\n \n     case ARRAY_TYPE:\n       /* Do not call ourselves to avoid infinite recursion.  This is"}, {"sha": "6a2e0fb6f72238e795faece374c7ff726e76091b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -1,3 +1,8 @@\n+2015-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* pch.c (cpp_valid_state): Fix indentation so that it reflects the\n+\tblock structure.\n+\n 2015-05-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h: Fix comment at the top of the file."}, {"sha": "ed59565761a6186397874e8990ffe301c80d7bff", "filename": "libcpp/pch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0a521e4c1059b59ec2f15fad7469134126d7c/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0a521e4c1059b59ec2f15fad7469134126d7c/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=21c0a521e4c1059b59ec2f15fad7469134126d7c", "patch": "@@ -713,7 +713,7 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \tcpp_warning_syshdr (r, CPP_W_INVALID_PCH,\n \t\t            \"%s: not used because `__COUNTER__' is invalid\",\n \t\t            name);\n-\tgoto fail;\n+      goto fail;\n     }\n \n   /* We win!  */"}]}