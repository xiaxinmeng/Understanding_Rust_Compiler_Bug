{"sha": "59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkNDA5NjQyOTVmNzk0ZDRlYTdmYzBkOWE0NTljNGZmY2NkYTlmOQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.cs.uni-dortmund.de", "date": "1999-03-20T17:30:06Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "1999-03-20T17:30:06Z"}, "message": "tm.texi (Varargs): Don't split argument of @item across lines.\n\n\t* tm.texi (Varargs): Don't split argument of @item across lines.\n\t* invoke.texi: Fix use of @item vs @itemx.\n\nFrom-SVN: r25870", "tree": {"sha": "4310ec4815c3ae4a9ed8e66cb2276b54d890217b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4310ec4815c3ae4a9ed8e66cb2276b54d890217b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/comments", "author": null, "committer": null, "parents": [{"sha": "4bca1429ec897ce86993c9c24fda4ef53449e496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bca1429ec897ce86993c9c24fda4ef53449e496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bca1429ec897ce86993c9c24fda4ef53449e496"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "80bdea71c7fa9b74baad43f5a796d88cef882ee9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "patch": "@@ -1,3 +1,9 @@\n+Sun Mar 21 02:28:21 1999  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n+\n+\t* tm.texi (Varargs): Don't split argument of @item across lines.\n+\n+\t* invoke.texi: Fix use of @item vs @itemx.\n+\n Sun Mar 21 09:59:54 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.h (TARGET_SWITCHES): Add null description to"}, {"sha": "50fab90aaf23a2bde521886acc1bdf2da1b20ffc", "filename": "gcc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "patch": "@@ -2369,7 +2369,7 @@ This pass also performs global constant and copy propagation.\n Perform a number of minor optimizations that are relatively expensive.\n \n @item -foptimize-register-moves\n-@item -fregmove\n+@itemx -fregmove\n Attempt to reassign register numbers in move instructions and as\n operands of other simple instructions in order to maximize the amount of\n register tying.  This is especially helpful on machines with two-operand\n@@ -2398,7 +2398,7 @@ especially useful on machines with a relatively small number of\n registers and where memory load instructions take more than one cycle.\n \n @item -ffunction-sections\n-@item -fdata-sections\n+@itemx -fdata-sections\n Place each function or data item into its own section in the output\n file if the target supports arbitrary sections.  The name of the\n function or the name of the data item determines the section's name\n@@ -3803,7 +3803,7 @@ suppresses this pass.  The post-processor is never run when the\n compiler is built for cross-compilation.\n \n @item -mcpu=<name>\n-@item -mtune=<name>\n+@itemx -mtune=<name>\n @kindex -mcpu=\n @kindex -mtune=\n This specifies the name of the target ARM processor.  GCC uses this name\n@@ -3824,7 +3824,7 @@ of the @samp{-mcpu=} option.  Permissable names are: armv2, armv2a,\n armv3, armv3m, armv4, armv4t\n \n @item -mfpe=<number>\n-@item -mfp=<number>\n+@itemx -mfp=<number>\n @kindex -mfpe=\n @kindex -mfp=\n This specifes the version of the floating point emulation available on\n@@ -5734,8 +5734,8 @@ Which variants are supported depend on the configuration.\n All variants support @samp{-mcpu=base}, this is the default.\n \n @item -mtext=@var{text section}\n-@item -mdata=@var{data section}\n-@item -mrodata=@var{readonly data section}\n+@itemx -mdata=@var{data section}\n+@itemx -mrodata=@var{readonly data section}\n Put functions, data, and readonly data in @var{text section},\n @var{data section}, and @var{readonly data section} respectively\n by default.  This can be overridden with the @code{section} attribute."}, {"sha": "9d764de65c19654bf4bb0fcf03a187c47f201dc9", "filename": "gcc/tm.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d40964295f794d4ea7fc0d9a459c4ffccda9f9/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "patch": "@@ -3739,11 +3739,8 @@ that were passed to @code{__builtin_saveregs}.\n If this macro is not defined, the compiler will output an ordinary\n call to the library function @samp{__builtin_saveregs}.\n \n-@c !!! a bug in texinfo; how to make the entry on the @item line allow\n-@c more than one line of text... help...  --mew 10feb93\n @findex SETUP_INCOMING_VARARGS\n-@item SETUP_INCOMING_VARARGS (@var{args_so_far}, @var{mode}, @var{type},\n-@var{pretend_args_size}, @var{second_time})\n+@item SETUP_INCOMING_VARARGS (@var{args_so_far}, @var{mode}, @var{type}, @var{pretend_args_size}, @var{second_time})\n This macro offers an alternative to using @code{__builtin_saveregs} and\n defining the macro @code{EXPAND_BUILTIN_SAVEREGS}.  Use it to store the\n anonymous register arguments into the stack so that all the arguments"}]}