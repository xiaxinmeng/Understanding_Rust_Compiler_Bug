{"sha": "c3005b0f0c8081ccb719740c3c27ee13d5697add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwMDViMGYwYzgwODFjY2I3MTk3NDBjM2MyN2VlMTNkNTY5N2FkZA==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-07-24T18:52:51Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-07-24T18:52:51Z"}, "message": "re PR fortran/33141 (Intrinsic procedures: Improve warning/error with -std=*)\n\n2008-07-24  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/33141\n\t* lang.opt (Wnonstd-intrinsics):  Removed option.\n\t(Wintrinsics-std), (Wintrinsic-shadow):  New options.\n\t* invoke.texi (Option Summary):  Removed -Wnonstd-intrinsics\n\tfrom the list and added -Wintrinsics-std and -Wintrinsic-shadow.\n\t(Error and Warning Options):  Documented the new options and removed\n\tthe documentation for -Wnonstd-intrinsics.\n\t* gfortran.h (gfc_option_t):  New members warn_intrinsic_shadow and\n\twarn_intrinsics_std, removed warn_nonstd_intrinsics.\n\t(gfc_is_intrinsic):  Renamed from gfc_intrinsic_name.\n\t(gfc_warn_intrinsic_shadow), (gfc_check_intrinsic_standard):  New.\n\t* decl.c (match_procedure_decl):  Replaced gfc_intrinsic_name by\n\tthe new name gfc_is_intrinsic.\n\t(warn_intrinsic_shadow):  New helper method.\n\t(gfc_match_function_decl), (gfc_match_subroutine):  Call the new method\n\twarn_intrinsic_shadow to check the just-parsed procedure.\n\t* expr.c (check_init_expr):  Call new gfc_is_intrinsic to check whether\n\tthe function called is really an intrinsic in the selected standard.\n\t* intrinsic.c (gfc_is_intrinsic):  Renamed from gfc_intrinsic_name and\n\textended to take into account the selected standard settings when trying\n\tto find out whether a symbol is an intrinsic or not.\n\t(gfc_check_intrinsic_standard):  Made public and extended.\n\t(gfc_intrinsic_func_interface), (gfc_intrinsic_sub_interface):  Removed\n\tthe calls to check_intrinsic_standard, this check now happens inside\n\tgfc_is_intrinsic.\n\t(gfc_warn_intrinsic_shadow):  New method defined.\n\t* options.c (gfc_init_options):  Initialize new warning flags to false\n\tand removed intialization of Wnonstd-intrinsics flag.\n\t(gfc_post_options):  Removed logic for Wnonstd-intrinsics flag.\n\t(set_Wall):  Set new warning flags and removed Wnonstd-intrinsics flag.\n\t(gfc_handle_option):  Handle the new flags and removed handling of the\n\told Wnonstd-intrinsics flag.\n\t* primary.c (gfc_match_rvalue):  Replaced call to gfc_intrinsic_name by\n\tthe new name gfc_is_intrinsic.\n\t* resolve.c (resolve_actual_arglist):  Ditto.\n\t(resolve_generic_f), (resolve_unknown_f):  Ditto.\n\t(is_external_proc):  Ditto.\n\t(resolve_generic_s), (resolve_unknown_s):  Ditto.\n\t(resolve_symbol):  Ditto and ensure for symbols declared INTRINSIC that\n\tthey are really available in the selected standard setting.\n\n2008-07-24  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/33141\n\t* gfortran.dg/intrinsic_shadow_1.f03:  New test for -Wintrinsic-shadow.\n\t* gfortran.dg/intrinsic_shadow_2.f03:  Ditto.\n\t* gfortran.dg/intrinsic_shadow_3.f03:  Ditto.\n\t* gfortran.dg/intrinsic_std_1.f90:  New test for -Wintrinsics-std.\n\t* gfortran.dg/intrinsic_std_2.f90:  Ditto.\n\t* gfortran.dg/intrinsic_std_3.f90:  Ditto.\n\t* gfortran.dg/intrinsic_std_4.f90:  Ditto.\n\t* gfortran.dg/warn_std_1.f90:  Removed option -Wnonstd-intrinsics.\n\t* gfortran.dg/warn_std_2.f90:  Replaced -Wnonstd-intrinsics by\n\t-Wintrinsics-std and adapted expected errors/warnings.\n\t* gfortran.dg/warn_std_3.f90:  Ditto.\n\t* gfortran.dg/c_sizeof_2.f90:  Adapted expected error/warning message.\n\t* gfortran.dg/gamma_2.f90:  Ditto.\n\t* gfortran.dg/selected_char_kind_3.f90:  Ditto.\n\t* gfortran.dg/fmt_g0_2.f08:  Call with -fall-intrinsics to allow abort.\n\nFrom-SVN: r138122", "tree": {"sha": "85be9ebc4a554eb2712749c7968b5f149a50d8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85be9ebc4a554eb2712749c7968b5f149a50d8eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3005b0f0c8081ccb719740c3c27ee13d5697add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3005b0f0c8081ccb719740c3c27ee13d5697add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3005b0f0c8081ccb719740c3c27ee13d5697add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3005b0f0c8081ccb719740c3c27ee13d5697add/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "befdf74172fe5f6d61f708e152f2e54540b75f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/befdf74172fe5f6d61f708e152f2e54540b75f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/befdf74172fe5f6d61f708e152f2e54540b75f21"}], "stats": {"total": 681, "additions": 589, "deletions": 92}, "files": [{"sha": "9548643f26a3d0c1c330e8c445048795b2f8908c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,3 +1,46 @@\n+2008-07-24  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/33141\n+\t* lang.opt (Wnonstd-intrinsics):  Removed option.\n+\t(Wintrinsics-std), (Wintrinsic-shadow):  New options.\n+\t* invoke.texi (Option Summary):  Removed -Wnonstd-intrinsics\n+\tfrom the list and added -Wintrinsics-std and -Wintrinsic-shadow.\n+\t(Error and Warning Options):  Documented the new options and removed\n+\tthe documentation for -Wnonstd-intrinsics.\n+\t* gfortran.h (gfc_option_t):  New members warn_intrinsic_shadow and\n+\twarn_intrinsics_std, removed warn_nonstd_intrinsics.\n+\t(gfc_is_intrinsic):  Renamed from gfc_intrinsic_name.\n+\t(gfc_warn_intrinsic_shadow), (gfc_check_intrinsic_standard):  New.\n+\t* decl.c (match_procedure_decl):  Replaced gfc_intrinsic_name by\n+\tthe new name gfc_is_intrinsic.\n+\t(warn_intrinsic_shadow):  New helper method.\n+\t(gfc_match_function_decl), (gfc_match_subroutine):  Call the new method\n+\twarn_intrinsic_shadow to check the just-parsed procedure.\n+\t* expr.c (check_init_expr):  Call new gfc_is_intrinsic to check whether\n+\tthe function called is really an intrinsic in the selected standard.\n+\t* intrinsic.c (gfc_is_intrinsic):  Renamed from gfc_intrinsic_name and\n+\textended to take into account the selected standard settings when trying\n+\tto find out whether a symbol is an intrinsic or not.\n+\t(gfc_check_intrinsic_standard):  Made public and extended.\n+\t(gfc_intrinsic_func_interface), (gfc_intrinsic_sub_interface):  Removed\n+\tthe calls to check_intrinsic_standard, this check now happens inside\n+\tgfc_is_intrinsic.\n+\t(gfc_warn_intrinsic_shadow):  New method defined.\n+\t* options.c (gfc_init_options):  Initialize new warning flags to false\n+\tand removed intialization of Wnonstd-intrinsics flag.\n+\t(gfc_post_options):  Removed logic for Wnonstd-intrinsics flag.\n+\t(set_Wall):  Set new warning flags and removed Wnonstd-intrinsics flag.\n+\t(gfc_handle_option):  Handle the new flags and removed handling of the\n+\told Wnonstd-intrinsics flag.\n+\t* primary.c (gfc_match_rvalue):  Replaced call to gfc_intrinsic_name by\n+\tthe new name gfc_is_intrinsic.\n+\t* resolve.c (resolve_actual_arglist):  Ditto.\n+\t(resolve_generic_f), (resolve_unknown_f):  Ditto.\n+\t(is_external_proc):  Ditto.\n+\t(resolve_generic_s), (resolve_unknown_s):  Ditto.\n+\t(resolve_symbol):  Ditto and ensure for symbols declared INTRINSIC that\n+\tthey are really available in the selected standard setting.\n+\n 2008-07-24  Daniel Kraft  <d@domob.eu>\n \n \t* match.c (gfc_match):  Add assertion to catch wrong calls trying to"}, {"sha": "9b5aa7f0f93eaca404d9b053d235d0112b280c9f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -4120,8 +4120,8 @@ match_procedure_decl (void)\n       /* Handle intrinsic procedures.  */\n       if (!(proc_if->attr.external || proc_if->attr.use_assoc\n \t    || proc_if->attr.if_source == IFSRC_IFBODY)\n-\t  && (gfc_intrinsic_name (proc_if->name, 0)\n-\t      || gfc_intrinsic_name (proc_if->name, 1)))\n+\t  && (gfc_is_intrinsic (proc_if, 0, gfc_current_locus)\n+\t      || gfc_is_intrinsic (proc_if, 1, gfc_current_locus)))\n \tproc_if->attr.intrinsic = 1;\n       if (proc_if->attr.intrinsic\n \t  && !gfc_intrinsic_actual_ok (proc_if->name, 0))\n@@ -4336,6 +4336,22 @@ gfc_match_procedure (void)\n }\n \n \n+/* Warn if a matched procedure has the same name as an intrinsic; this is\n+   simply a wrapper around gfc_warn_intrinsic_shadow that interprets the current\n+   parser-state-stack to find out whether we're in a module.  */\n+\n+static void\n+warn_intrinsic_shadow (const gfc_symbol* sym, bool func)\n+{\n+  bool in_module;\n+\n+  in_module = (gfc_state_stack->previous\n+\t       && gfc_state_stack->previous->state == COMP_MODULE);\n+\n+  gfc_warn_intrinsic_shadow (sym, in_module, func);\n+}\n+\n+\n /* Match a function declaration.  */\n \n match\n@@ -4460,6 +4476,9 @@ gfc_match_function_decl (void)\n \t  sym->result = result;\n \t}\n \n+      /* Warn if this procedure has the same name as an intrinsic.  */\n+      warn_intrinsic_shadow (sym, true);\n+\n       return MATCH_YES;\n     }\n \n@@ -4842,6 +4861,9 @@ gfc_match_subroutine (void)\n   if (copy_prefix (&sym->attr, &sym->declared_at) == FAILURE)\n     return MATCH_ERROR;\n \n+  /* Warn if it has the same name as an intrinsic.  */\n+  warn_intrinsic_shadow (sym, false);\n+\n   return MATCH_YES;\n }\n "}, {"sha": "4d0c2c33f641c5ed72904a85b22669d32a7e2f29", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -2160,7 +2160,6 @@ check_init_expr (gfc_expr *e)\n {\n   match m;\n   try t;\n-  gfc_intrinsic_sym *isym;\n \n   if (e == NULL)\n     return SUCCESS;\n@@ -2179,7 +2178,12 @@ check_init_expr (gfc_expr *e)\n \n       if ((m = check_specification_function (e)) != MATCH_YES)\n \t{\n-\t  if ((m = gfc_intrinsic_func_interface (e, 0)) != MATCH_YES)\n+\t  gfc_intrinsic_sym* isym;\n+          gfc_symbol* sym;\n+\n+          sym = e->symtree->n.sym;\n+\t  if (!gfc_is_intrinsic (sym, 0, e->where)\n+              || (m = gfc_intrinsic_func_interface (e, 0)) != MATCH_YES)\n \t    {\n \t      gfc_error (\"Function '%s' in initialization expression at %L \"\n \t\t\t \"must be an intrinsic or a specification function\",\n@@ -2201,7 +2205,7 @@ check_init_expr (gfc_expr *e)\n \n \t  /* Try to scalarize an elemental intrinsic function that has an\n \t     array argument.  */\n-\t  isym = gfc_find_function (e->symtree->n.sym->name);\n+          isym = gfc_find_function (e->symtree->n.sym->name);\n \t  if (isym && isym->elemental\n \t\t&& (t = scalarize_intrinsic_call (e)) == SUCCESS)\n \t    break;"}, {"sha": "18af94e3b8d8be8de77935cd5e0fc3ec05f3a6ad", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1872,6 +1872,8 @@ typedef struct\n   int warn_surprising;\n   int warn_tabs;\n   int warn_underflow;\n+  int warn_intrinsic_shadow;\n+  int warn_intrinsics_std;\n   int warn_character_truncation;\n   int warn_array_temp;\n   int max_errors;\n@@ -1915,7 +1917,6 @@ typedef struct\n \n   int warn_std;\n   int allow_std;\n-  int warn_nonstd_intrinsics;\n   int fshort_enums;\n   int convert;\n   int record_marker;\n@@ -2255,14 +2256,18 @@ try gfc_convert_type_warn (gfc_expr *, gfc_typespec *, int, int);\n try gfc_convert_chartype (gfc_expr *, gfc_typespec *);\n int gfc_generic_intrinsic (const char *);\n int gfc_specific_intrinsic (const char *);\n-int gfc_intrinsic_name (const char *, int);\n+bool gfc_is_intrinsic (gfc_symbol*, int, locus);\n int gfc_intrinsic_actual_ok (const char *, const bool);\n gfc_intrinsic_sym *gfc_find_function (const char *);\n gfc_intrinsic_sym *gfc_find_subroutine (const char *);\n \n match gfc_intrinsic_func_interface (gfc_expr *, int);\n match gfc_intrinsic_sub_interface (gfc_code *, int);\n \n+void gfc_warn_intrinsic_shadow (const gfc_symbol*, bool, bool);\n+try gfc_check_intrinsic_standard (const gfc_intrinsic_sym*, const char**,\n+\t\t\t\t  bool, locus);\n+\n /* match.c -- FIXME */\n void gfc_free_iterator (gfc_iterator *, int);\n void gfc_free_forall_iterator (gfc_forall_iterator *);"}, {"sha": "e5eec7ef4aad1ff2ca1f0794b4ae8b8b8e75451b", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 149, "deletions": 23, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -807,15 +807,47 @@ gfc_intrinsic_actual_ok (const char *name, const bool subroutine_flag)\n }\n \n \n-/* Given a string, figure out if it is the name of an intrinsic\n-   subroutine or function.  There are no generic intrinsic\n-   subroutines, they are all specific.  */\n+/* Given a symbol, find out if it is (and is to be treated) an intrinsic.  If\n+   it's name refers to an intrinsic but this intrinsic is not included in the\n+   selected standard, this returns FALSE and sets the symbol's external\n+   attribute.  */\n \n-int\n-gfc_intrinsic_name (const char *name, int subroutine_flag)\n+bool\n+gfc_is_intrinsic (gfc_symbol* sym, int subroutine_flag, locus loc)\n {\n-  return subroutine_flag ? gfc_find_subroutine (name) != NULL\n-\t\t\t : gfc_find_function (name) != NULL;\n+  gfc_intrinsic_sym* isym;\n+  const char* symstd;\n+\n+  /* If INTRINSIC/EXTERNAL state is already known, return.  */\n+  if (sym->attr.intrinsic)\n+    return true;\n+  if (sym->attr.external)\n+    return false;\n+\n+  if (subroutine_flag)\n+    isym = gfc_find_subroutine (sym->name);\n+  else\n+    isym = gfc_find_function (sym->name);\n+\n+  /* No such intrinsic available at all?  */\n+  if (!isym)\n+    return false;\n+\n+  /* See if this intrinsic is allowed in the current standard.  */\n+  if (gfc_check_intrinsic_standard (isym, &symstd, false, loc) == FAILURE)\n+    {\n+      if (gfc_option.warn_intrinsics_std)\n+\tgfc_warning_now (\"The intrinsic '%s' at %L is not included in the\"\n+\t\t\t \" selected standard but %s and '%s' will be treated as\"\n+\t\t\t \" if declared EXTERNAL.  Use an appropriate -std=*\"\n+\t\t\t \" option or define -fall-intrinsics to allow this\"\n+\t\t\t \" intrinsic.\", sym->name, &loc, symstd, sym->name);\n+      sym->attr.external = 1;\n+\n+      return false;\n+    }\n+\n+  return true;\n }\n \n \n@@ -3448,21 +3480,82 @@ check_specific (gfc_intrinsic_sym *specific, gfc_expr *expr, int error_flag)\n \n \n /* Check whether an intrinsic belongs to whatever standard the user\n-   has chosen.  */\n+   has chosen, taking also into account -fall-intrinsics.  Here, no\n+   warning/error is emitted; but if symstd is not NULL, it is pointed to a\n+   textual representation of the symbols standard status (like\n+   \"new in Fortran 2008\", \"a GNU extension\" or \"obsolescent in Fortran 95\") that\n+   can be used to construct a detailed warning/error message in case of\n+   a FAILURE.  */\n \n-static try\n-check_intrinsic_standard (const char *name, int standard, locus *where)\n+try\n+gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n+\t\t\t      const char** symstd, bool silent, locus where)\n {\n-  /* Do not warn about GNU-extensions if -std=gnu.  */\n-  if (!gfc_option.warn_nonstd_intrinsics\n-      || (standard == GFC_STD_GNU && gfc_option.warn_std & GFC_STD_GNU))\n+  const char* symstd_msg;\n+\n+  /* For -fall-intrinsics, just succeed.  */\n+  if (gfc_option.flag_all_intrinsics)\n     return SUCCESS;\n \n-  if (gfc_notify_std (standard, \"Intrinsic '%s' at %L is not included \"\n-\t\t      \"in the selected standard\", name, where) == FAILURE)\n-    return FAILURE;\n+  /* Find the symbol's standard message for later usage.  */\n+  switch (isym->standard)\n+    {\n+    case GFC_STD_F77:\n+      symstd_msg = \"available since Fortran 77\";\n+      break;\n \n-  return SUCCESS;\n+    case GFC_STD_F95_OBS:\n+      symstd_msg = \"obsolescent in Fortran 95\";\n+      break;\n+\n+    case GFC_STD_F95_DEL:\n+      symstd_msg = \"deleted in Fortran 95\";\n+      break;\n+\n+    case GFC_STD_F95:\n+      symstd_msg = \"new in Fortran 95\";\n+      break;\n+\n+    case GFC_STD_F2003:\n+      symstd_msg = \"new in Fortran 2003\";\n+      break;\n+\n+    case GFC_STD_F2008:\n+      symstd_msg = \"new in Fortran 2008\";\n+      break;\n+\n+    case GFC_STD_GNU:\n+      symstd_msg = \"a GNU Fortran extension\";\n+      break;\n+\n+    case GFC_STD_LEGACY:\n+      symstd_msg = \"for backward compatibility\";\n+      break;\n+\n+    default:\n+      gfc_internal_error (\"Invalid standard code on intrinsic '%s' (%d)\",\n+\t\t\t  isym->name, isym->standard);\n+    }\n+\n+  /* If warning about the standard, warn and succeed.  */\n+  if (gfc_option.warn_std & isym->standard)\n+    {\n+      /* Do only print a warning if not a GNU extension.  */\n+      if (!silent && isym->standard != GFC_STD_GNU)\n+\tgfc_warning (\"Intrinsic '%s' (is %s) is used at %L\",\n+\t\t     isym->name, _(symstd_msg), &where);\n+\n+      return SUCCESS;\n+    }\n+\n+  /* If allowing the symbol's standard, succeed, too.  */\n+  if (gfc_option.allow_std & isym->standard)\n+    return SUCCESS;\n+\n+  /* Otherwise, fail.  */\n+  if (symstd)\n+    *symstd = _(symstd_msg);\n+  return FAILURE;\n }\n \n \n@@ -3508,9 +3601,6 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n       return MATCH_NO;\n     }\n \n-  if (check_intrinsic_standard (name, isym->standard, &expr->where) == FAILURE)\n-    return MATCH_ERROR;\n-\n   if ((isym->id == GFC_ISYM_REAL || isym->id == GFC_ISYM_DBLE\n        || isym->id == GFC_ISYM_CMPLX)\n       && gfc_init_expr\n@@ -3605,9 +3695,6 @@ gfc_intrinsic_sub_interface (gfc_code *c, int error_flag)\n   if (isym == NULL)\n     return MATCH_NO;\n \n-  if (check_intrinsic_standard (name, isym->standard, &c->loc) == FAILURE)\n-    return MATCH_ERROR;\n-\n   gfc_suppress_error = !error_flag;\n \n   init_arglist (isym);\n@@ -3827,3 +3914,42 @@ gfc_convert_chartype (gfc_expr *expr, gfc_typespec *ts)\n \n   return SUCCESS;\n }\n+\n+\n+/* Check if the passed name is name of an intrinsic (taking into account the\n+   current -std=* and -fall-intrinsic settings).  If it is, see if we should\n+   warn about this as a user-procedure having the same name as an intrinsic\n+   (-Wintrinsic-shadow enabled) and do so if we should.  */\n+\n+void\n+gfc_warn_intrinsic_shadow (const gfc_symbol* sym, bool in_module, bool func)\n+{\n+  gfc_intrinsic_sym* isym;\n+\n+  /* If the warning is disabled, do nothing at all.  */\n+  if (!gfc_option.warn_intrinsic_shadow)\n+    return;\n+\n+  /* Try to find an intrinsic of the same name.  */\n+  if (func)\n+    isym = gfc_find_function (sym->name);\n+  else  \n+    isym = gfc_find_subroutine (sym->name);\n+\n+  /* If no intrinsic was found with this name or it's not included in the\n+     selected standard, everything's fine.  */\n+  if (!isym || gfc_check_intrinsic_standard (isym, NULL, true,\n+\t\t\t\t\t     sym->declared_at) == FAILURE)\n+    return;\n+\n+  /* Emit the warning.  */\n+  if (in_module)\n+    gfc_warning (\"'%s' declared at %L may shadow the intrinsic of the same\"\n+\t\t \" name.  In order to call the intrinsic, explicit INTRINSIC\"\n+\t\t \" declarations may be required.\",\n+\t\t sym->name, &sym->declared_at);\n+  else\n+    gfc_warning (\"'%s' declared at %L is also the name of an intrinsic.  It can\"\n+\t\t \" only be called via an explicit interface or if declared\"\n+\t\t \" EXTERNAL.\", sym->name, &sym->declared_at);\n+}"}, {"sha": "ed3e1e70daf9687655efe824ee1a41c06051a48b", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -138,8 +138,8 @@ and warnings}.\n @gccoptlist{-fmax-errors=@var{n} @gol\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n -Wall  -Waliasing  -Wampersand  -Warray-bounds -Wcharacter-truncation @gol\n--Wconversion -Wimplicit-interface  -Wline-truncation  -Wnonstd-intrinsics @gol\n--Wsurprising -Wno-tabs  -Wunderflow -Wunused-parameter}\n+-Wconversion -Wimplicit-interface  -Wline-truncation  -Wintrinsics-std @gol\n+-Wsurprising -Wno-tabs  -Wunderflow -Wunused-parameter -Wintrinsics-shadow}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n@@ -211,7 +211,9 @@ form is determined by the file extension.\n Accept all of the intrinsic procedures provided in libgfortran \n without regard to the setting of @option{-std}.  In particular, \n this option can be quite useful with @option{-std=f95}.  Additionally,\n-@command{gfortran} will ignore @option{-Wnonstd-intrinsics}.\n+@command{gfortran} will ignore @option{-Wintrinsics-std} and will never try\n+to link to an @code{EXTERNAL} version if the intrinsic is not included in the\n+selected standard.\n \n @item -fd-lines-as-code\n @item -fd-lines-as-comments\n@@ -662,8 +664,8 @@ warnings.\n Enables commonly used warning options pertaining to usage that\n we recommend avoiding and that we believe are easy to avoid.\n This currently includes @option{-Waliasing},\n-@option{-Wampersand}, @option{-Wsurprising}, @option{-Wnonstd-intrinsics},\n-@option{-Wno-tabs}, and @option{-Wline-truncation}.\n+@option{-Wampersand}, @option{-Wsurprising}, @option{-Wintrinsics-std},\n+@option{-Wno-tabs}, @option{-Wintrinsic-shadow} and @option{-Wline-truncation}.\n \n @item -Waliasing\n @opindex @code{Waliasing}\n@@ -728,11 +730,15 @@ Warn if a procedure is called without an explicit interface.\n Note this only checks that an explicit interface is present.  It does not\n check that the declared interfaces are consistent across program units.\n \n-@item -Wnonstd-intrinsics\n-@opindex @code{Wnonstd-intrinsics}\n+@item -Wintrinsics-std\n+@opindex @code{Wintrinsics-std}\n @cindex warnings, non-standard intrinsics\n-Warn if the user tries to use an intrinsic that does not belong to the \n-standard the user has chosen via the @option{-std} option.\n+@cindex warnings, intrinsics of other standards\n+Warn if @command{gfortran} finds a procedure named like an intrinsic not\n+available in the currently selected standard (with @option{-std}) and treats\n+it as @code{EXTERNAL} procedure because of this.  @option{-fall-intrinsics} can\n+be used to never trigger this behaviour and always link to the intrinsic\n+regardless of the selected standard.\n \n @item -Wsurprising\n @opindex @code{Wsurprising}\n@@ -772,6 +778,15 @@ is active for @option{-pedantic}, @option{-std=f95}, @option{-std=f2003},\n Produce a warning when numerical constant expressions are\n encountered, which yield an UNDERFLOW during compilation.\n \n+@item -Wintrinsic-shadow\n+@opindex @code{Wintrinsic-shadow}\n+@cindex warnings, intrinsic\n+@cindex intrinsic\n+Warn if a user-defined procedure or module procedure has the same name as an\n+intrinsic; in this case, an explicit interface or @code{EXTERNAL} or\n+@code{INTRINSIC} declaration might be needed to get calls later resolved to\n+the desired intrinsic/procedure.\n+\n @item -Wunused-parameter\n @opindex @code{Wunused-parameter}\n @cindex warnings, unused parameter"}, {"sha": "7a067604e898365a2f8ac3bde6967b181e358861", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -96,9 +96,9 @@ Wline-truncation\n Fortran Warning\n Warn about truncated source lines\n \n-Wnonstd-intrinsics\n+Wintrinsics-std\n Fortran Warning\n-Warn about usage of non-standard intrinsics\n+Warn on intrinsics not part of the selected standard\n \n Wreturn-type\n Fortran Warning\n@@ -116,6 +116,10 @@ Wunderflow\n Fortran Warning\n Warn about underflow of numerical constant expressions\n \n+Wintrinsic-shadow\n+Fortran Warning\n+Warn if a user-procedure has the same name as an intrinsic\n+\n cpp\n Fortran Joined Separate Negative(nocpp)\n Enable preprocessing"}, {"sha": "592b52d6d96df7a49ec302aadb435d246a52f4de", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -76,6 +76,8 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.warn_surprising = 0;\n   gfc_option.warn_tabs = 1;\n   gfc_option.warn_underflow = 1;\n+  gfc_option.warn_intrinsic_shadow = 0;\n+  gfc_option.warn_intrinsics_std = 0;\n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n@@ -124,8 +126,6 @@ gfc_init_options (unsigned int argc, const char **argv)\n \n   set_default_std_flags ();\n \n-  gfc_option.warn_nonstd_intrinsics = 0;\n-\n   /* -fshort-enums can be default on some targets.  */\n   gfc_option.fshort_enums = targetm.default_short_enums ();\n \n@@ -355,9 +355,6 @@ gfc_post_options (const char **pfilename)\n       gfc_option.warn_tabs = 0;\n     }\n \n-  if (gfc_option.flag_all_intrinsics)\n-    gfc_option.warn_nonstd_intrinsics = 0;\n-\n   gfc_cpp_post_options ();\n \n /* FIXME: return gfc_cpp_preprocess_only ();\n@@ -379,10 +376,11 @@ set_Wall (int setting)\n   gfc_option.warn_aliasing = setting;\n   gfc_option.warn_ampersand = setting;\n   gfc_option.warn_line_truncation = setting;\n-  gfc_option.warn_nonstd_intrinsics = setting;\n   gfc_option.warn_surprising = setting;\n   gfc_option.warn_tabs = !setting;\n   gfc_option.warn_underflow = setting;\n+  gfc_option.warn_intrinsic_shadow = setting;\n+  gfc_option.warn_intrinsics_std = setting;\n   gfc_option.warn_character_truncation = setting;\n \n   set_Wunused (setting);\n@@ -522,6 +520,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_underflow = value;\n       break;\n \n+    case OPT_Wintrinsic_shadow:\n+      gfc_option.warn_intrinsic_shadow = value;\n+      break;\n+\n     case OPT_fall_intrinsics:\n       gfc_option.flag_all_intrinsics = 1;\n       break;\n@@ -783,8 +785,8 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_std = 0;\n       break;\n \n-    case OPT_Wnonstd_intrinsics:\n-      gfc_option.warn_nonstd_intrinsics = value;\n+    case OPT_Wintrinsics_std:\n+      gfc_option.warn_intrinsics_std = value;\n       break;\n \n     case OPT_fshort_enums:"}, {"sha": "782f38e4425c8b81d6a266a54e8a1449a7b4b741", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -2413,8 +2413,8 @@ gfc_match_rvalue (gfc_expr **result)\n \t    goto function0;\n \n \t  if (sym->attr.flavor == FL_UNKNOWN) sym->attr.flavor = FL_PROCEDURE;\n-\t  if (gfc_intrinsic_name (sym->name, 0)\n-\t      || gfc_intrinsic_name (sym->name, 1))\n+\t  if (gfc_is_intrinsic (sym, 0, gfc_current_locus)\n+\t      || gfc_is_intrinsic (sym, 1, gfc_current_locus))\n \t    sym->attr.intrinsic = 1;\n \t  e = gfc_get_expr ();\n \t  e->expr_type = EXPR_VARIABLE;"}, {"sha": "0b27da18fd07e01873b41933d9edb795c2d25ead", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1076,7 +1076,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype)\n \t  if (!sym->attr.intrinsic\n \t      && !(sym->attr.external || sym->attr.use_assoc\n \t\t   || sym->attr.if_source == IFSRC_IFBODY)\n-\t      && gfc_intrinsic_name (sym->name, sym->attr.subroutine))\n+\t      && gfc_is_intrinsic (sym, sym->attr.subroutine, e->where))\n \t    sym->attr.intrinsic = 1;\n \n \t  if (sym->attr.proc == PROC_ST_FUNCTION)\n@@ -1535,7 +1535,7 @@ resolve_generic_f (gfc_expr *expr)\n \n   /* Last ditch attempt.  See if the reference is to an intrinsic\n      that possesses a matching interface.  14.1.2.4  */\n-  if (sym && !gfc_intrinsic_name (sym->name, 0))\n+  if (sym && !gfc_is_intrinsic (sym, 0, expr->where))\n     {\n       gfc_error (\"There is no specific function for the generic '%s' at %L\",\n \t\t expr->symtree->n.sym->name, &expr->where);\n@@ -1673,7 +1673,7 @@ resolve_unknown_f (gfc_expr *expr)\n \n   /* See if we have an intrinsic function reference.  */\n \n-  if (gfc_intrinsic_name (sym->name, 0))\n+  if (gfc_is_intrinsic (sym, 0, expr->where))\n     {\n       if (gfc_intrinsic_func_interface (expr, 1) == MATCH_YES)\n \treturn SUCCESS;\n@@ -1721,13 +1721,13 @@ is_external_proc (gfc_symbol *sym)\n {\n   if (!sym->attr.dummy && !sym->attr.contained\n \t&& !(sym->attr.intrinsic\n-\t      || gfc_intrinsic_name (sym->name, sym->attr.subroutine))\n+\t      || gfc_is_intrinsic (sym, sym->attr.subroutine, sym->declared_at))\n \t&& sym->attr.proc != PROC_ST_FUNCTION\n \t&& !sym->attr.use_assoc\n \t&& sym->name)\n     return true;\n-  else\n-    return false;\n+\n+  return false;\n }\n \n \n@@ -2469,7 +2469,7 @@ resolve_generic_s (gfc_code *c)\n      that possesses a matching interface.  14.1.2.4  */\n   sym = c->symtree->n.sym;\n \n-  if (!gfc_intrinsic_name (sym->name, 1))\n+  if (!gfc_is_intrinsic (sym, 1, c->loc))\n     {\n       gfc_error (\"There is no specific subroutine for the generic '%s' at %L\",\n \t\t sym->name, &c->loc);\n@@ -2748,7 +2748,7 @@ resolve_unknown_s (gfc_code *c)\n \n   /* See if we have an intrinsic function reference.  */\n \n-  if (gfc_intrinsic_name (sym->name, 1))\n+  if (gfc_is_intrinsic (sym, 1, c->loc))\n     {\n       if (gfc_intrinsic_sub_interface (c, 1) == MATCH_YES)\n \treturn SUCCESS;\n@@ -7961,24 +7961,45 @@ resolve_symbol (gfc_symbol *sym)\n      type to avoid spurious warnings.  */\n   if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic)\n     {\n-      if (gfc_intrinsic_name (sym->name, 0))\n+      gfc_intrinsic_sym* isym;\n+      const char* symstd;\n+\n+      /* We already know this one is an intrinsic, so we don't call\n+\t gfc_is_intrinsic for full checking but rather use gfc_find_function and\n+\t gfc_find_subroutine directly to check whether it is a function or\n+\t subroutine.  */\n+\n+      if ((isym = gfc_find_function (sym->name)))\n \t{\n \t  if (sym->ts.type != BT_UNKNOWN && gfc_option.warn_surprising)\n-\t    gfc_warning (\"Type specified for intrinsic function '%s' at %L is ignored\",\n-\t\t\t sym->name, &sym->declared_at);\n+\t    gfc_warning (\"Type specified for intrinsic function '%s' at %L is\"\n+\t\t\t \" ignored\", sym->name, &sym->declared_at);\n \t}\n-      else if (gfc_intrinsic_name (sym->name, 1))\n+      else if ((isym = gfc_find_subroutine (sym->name)))\n \t{\n \t  if (sym->ts.type != BT_UNKNOWN)\n \t    {\n-\t      gfc_error (\"Intrinsic subroutine '%s' at %L shall not have a type specifier\", \n-\t\t\t sym->name, &sym->declared_at);\n+\t      gfc_error (\"Intrinsic subroutine '%s' at %L shall not have a type\"\n+\t\t\t \" specifier\", sym->name, &sym->declared_at);\n \t      return;\n \t    }\n \t}\n       else\n \t{\n-\t  gfc_error (\"Intrinsic '%s' at %L does not exist\", sym->name, &sym->declared_at);\n+\t  gfc_error (\"'%s' declared INTRINSIC at %L does not exist\",\n+\t\t     sym->name, &sym->declared_at);\n+\t  return;\n+\t}\n+\n+      /* Check it is actually available in the standard settings.  */\n+      if (gfc_check_intrinsic_standard (isym, &symstd, false, sym->declared_at)\n+\t    == FAILURE)\n+\t{\n+\t  gfc_error (\"The intrinsic '%s' declared INTRINSIC at %L is not\"\n+\t\t     \" available in the current standard settings but %s.  Use\"\n+                     \" an appropriate -std=* option or enable -fall-intrinsics\"\n+                     \" in order to use it.\",\n+                     sym->name, &sym->declared_at, symstd);\n \t  return;\n \t}\n      }"}, {"sha": "4baa034a1375fbcf5e704a52e87b6ca1867b4863", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,3 +1,22 @@\n+2008-07-24  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/33141\n+\t* gfortran.dg/intrinsic_shadow_1.f03:  New test for -Wintrinsic-shadow.\n+\t* gfortran.dg/intrinsic_shadow_2.f03:  Ditto.\n+\t* gfortran.dg/intrinsic_shadow_3.f03:  Ditto.\n+\t* gfortran.dg/intrinsic_std_1.f90:  New test for -Wintrinsics-std.\n+\t* gfortran.dg/intrinsic_std_2.f90:  Ditto.\n+\t* gfortran.dg/intrinsic_std_3.f90:  Ditto.\n+\t* gfortran.dg/intrinsic_std_4.f90:  Ditto.\n+\t* gfortran.dg/warn_std_1.f90:  Removed option -Wnonstd-intrinsics.\n+\t* gfortran.dg/warn_std_2.f90:  Replaced -Wnonstd-intrinsics by\n+\t-Wintrinsics-std and adapted expected errors/warnings.\n+\t* gfortran.dg/warn_std_3.f90:  Ditto.\n+\t* gfortran.dg/c_sizeof_2.f90:  Adapted expected error/warning message.\n+\t* gfortran.dg/gamma_2.f90:  Ditto.\n+\t* gfortran.dg/selected_char_kind_3.f90:  Ditto.\n+\t* gfortran.dg/fmt_g0_2.f08:  Call with -fall-intrinsics to allow abort.\n+\n 2008-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/29952"}, {"sha": "6e32cb34687e5fccbdcd399840032d0086911fa1", "filename": "gcc/testsuite/gfortran.dg/c_sizeof_2.f90", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -2,8 +2,7 @@\n ! { dg-options \"-std=f2003 -Wall\" }\n ! Support F2008's c_sizeof()\n !\n-integer(4) :: i, j(10)\n-i = c_sizeof(i) ! { dg-error \"not included in the selected standard\" }\n-i = c_sizeof(j) ! { dg-error \"not included in the selected standard\" }\n+integer(4) :: i\n+i = c_sizeof(i) ! { dg-warning \"Fortran 2008\" }\n end\n "}, {"sha": "3567561802baaa84e67f628d051e6a0921f1e0d7", "filename": "gcc/testsuite/gfortran.dg/fmt_g0_2.f08", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_2.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_2.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_2.f08?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f95 -pedantic\" }\n+! { dg-options \"-std=f95 -pedantic -fall-intrinsics\" }\n ! { dg-shouldfail \"Zero width in format descriptor\" }\n ! PR36420 Fortran 2008: g0 edit descriptor \n ! Test case provided by Jerry DeLisle <jvdelisle@gcc.gnu.org>"}, {"sha": "5b0e922cb92edc0a87e2f739bd0c309f45157bb6", "filename": "gcc/testsuite/gfortran.dg/gamma_2.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -8,25 +8,25 @@\n ! PR fortran/32980\n !\n subroutine foo()\n-intrinsic :: gamma\n-intrinsic :: dgamma\n-intrinsic :: lgamma\n-intrinsic :: algama\n-intrinsic :: dlgama\n+intrinsic :: gamma ! { dg-error \"Fortran 2008\" }\n+intrinsic :: dgamma ! { dg-error \"extension\" }\n+intrinsic :: lgamma ! { dg-error \"extension\" }\n+intrinsic :: algama ! { dg-error \"extension\" }\n+intrinsic :: dlgama ! { dg-error \"extension\" }\n \n integer, parameter :: sp = kind(1.0)\n integer, parameter :: dp = kind(1.0d0)\n \n real(sp) :: rsp = 1.0_sp\n real(dp) :: rdp = 1.0_dp\n \n-rsp = gamma(rsp)  ! FIXME \"is not included in the selected standard\"\n-rdp = gamma(rdp)  ! FIXME \"is not included in the selected standard\"\n-rdp = dgamma(rdp) ! { dg-error \"is not included in the selected standard\" }\n+rsp = gamma(rsp)\n+rdp = gamma(rdp)\n+rdp = dgamma(rdp)\n \n-rsp = lgamma(rsp) ! { dg-error \"is not included in the selected standard\" }\n-rdp = lgamma(rdp) ! { dg-error \"is not included in the selected standard\" }\n-rsp = algama(rsp) ! { dg-error \"is not included in the selected standard\" }\n-rdp = dlgama(rdp) ! { dg-error \"is not included in the selected standard\" }\n+rsp = lgamma(rsp)\n+rdp = lgamma(rdp)\n+rsp = algama(rsp)\n+rdp = dlgama(rdp)\n end subroutine foo\n end"}, {"sha": "776d0f692d9e5577fa4d7295791169017ff7ceeb", "filename": "gcc/testsuite/gfortran.dg/intrinsic_shadow_1.f03", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_1.f03?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003 -Wintrinsic-shadow\" }\n+\n+! PR fortran/33141\n+! Check that the expected warnings are emitted if a user-procedure has the same\n+! name as an intrinsic, but only if it is matched by the current -std=*.\n+\n+MODULE testmod\n+  IMPLICIT NONE\n+\n+CONTAINS\n+\n+  ! ASIN is an intrinsic\n+  REAL FUNCTION asin (arg) ! { dg-warning \"shadow the intrinsic\" }\n+    IMPLICIT NONE\n+    REAL :: arg\n+  END FUNCTION asin\n+\n+  ! ASINH is one but not in F2003\n+  REAL FUNCTION asinh (arg) ! { dg-bogus \"shadow the intrinsic\" }\n+    IMPLICIT NONE\n+    REAL :: arg\n+  END FUNCTION asinh\n+\n+END MODULE testmod\n+\n+! ACOS is an intrinsic\n+REAL FUNCTION acos (arg) ! { dg-warning \"of an intrinsic\" }\n+  IMPLICIT NONE\n+  REAL :: arg\n+END FUNCTION acos\n+\n+! ACOSH not for F2003\n+REAL FUNCTION acosh (arg) ! { dg-bogus \"of an intrinsic\" }\n+  IMPLICIT NONE\n+  REAL :: arg\n+END FUNCTION acosh\n+\n+! A subroutine with the same name as an intrinsic subroutine\n+SUBROUTINE random_number (arg) ! { dg-warning \"of an intrinsic\" }\n+  IMPLICIT NONE\n+  REAL, INTENT(OUT) :: arg\n+END SUBROUTINE random_number\n+\n+! But a subroutine with the name of an intrinsic function is ok.\n+SUBROUTINE atan (arg) ! { dg-bogus \"of an intrinsic\" }\n+  IMPLICIT NONE\n+  REAL :: arg\n+END SUBROUTINE atan\n+\n+! As should be a function with the name of an intrinsic subroutine.\n+REAL FUNCTION random_seed () ! { dg-bogus \"of an intrinsic\" }\n+END FUNCTION random_seed\n+\n+! We do only compile, so no main program needed.\n+\n+! { dg-final { cleanup-modules \"testmod\" } }"}, {"sha": "5c046166d76be2b1ebbd55b3a7e96936c089f76a", "filename": "gcc/testsuite/gfortran.dg/intrinsic_shadow_2.f03", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_2.f03?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003 -Wintrinsic-shadow -fall-intrinsics\" }\n+\n+! PR fortran/33141\n+! Check that the expected warnings are emitted if a user-procedure has the same\n+! name as an intrinsic, with -fall-intrinsics even regardless of std=*.\n+\n+MODULE testmod\n+  IMPLICIT NONE\n+\n+CONTAINS\n+\n+  ! ASINH is one but not in F2003\n+  REAL FUNCTION asinh (arg) ! { dg-warning \"shadow the intrinsic\" }\n+    IMPLICIT NONE\n+    REAL :: arg\n+  END FUNCTION asinh\n+\n+END MODULE testmod\n+\n+! ACOSH not for F2003\n+REAL FUNCTION acosh (arg) ! { dg-warning \"of an intrinsic\" }\n+  IMPLICIT NONE\n+  REAL :: arg\n+END FUNCTION acosh\n+\n+! We do only compile, so no main program needed.\n+\n+! { dg-final { cleanup-modules \"testmod\" } }"}, {"sha": "069a99b343350223a9af35b364255e07aa8f9bd1", "filename": "gcc/testsuite/gfortran.dg/intrinsic_shadow_3.f03", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_shadow_3.f03?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-Wno-intrinsic-shadow -fall-intrinsics\" }\n+\n+! PR fortran/33141\n+! Check that the \"intrinsic shadow\" warnings are not emitted if the warning\n+! is negated.\n+\n+MODULE testmod\n+  IMPLICIT NONE\n+\n+CONTAINS\n+\n+  REAL FUNCTION asin (arg) ! { dg-bogus \"shadow the intrinsic\" }\n+    IMPLICIT NONE\n+    REAL :: arg\n+  END FUNCTION asin\n+\n+END MODULE testmod\n+\n+REAL FUNCTION acos (arg) ! { dg-bogus \"of an intrinsic\" }\n+  IMPLICIT NONE\n+  REAL :: arg\n+END FUNCTION acos\n+\n+! We do only compile, so no main program needed.\n+\n+! { dg-final { cleanup-modules \"testmod\" } }"}, {"sha": "efb1dce545601e2b9f154e9a4b643d9b48839e37", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_1.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95 -Wintrinsics-std -fdump-tree-original\" }\n+\n+! PR fortran/33141\n+! Check for the expected behaviour when an intrinsic function/subroutine is\n+! called that is not available in the defined standard or that is a GNU\n+! extension:\n+! There should be a warning emitted on the call, and the reference should be\n+! treated like an external call.\n+! For declaring a non-standard intrinsic INTRINSIC, a hard error should be\n+! generated, of course.\n+\n+SUBROUTINE no_implicit\n+  IMPLICIT NONE\n+  REAL :: asinh ! { dg-warning \"Fortran 2008\" }\n+\n+  ! abort is a GNU extension\n+  CALL abort () ! { dg-warning \"extension\" }\n+\n+  ! ASINH is an intrinsic of F2008\n+  ! The warning should be issued in the declaration above where it is declared\n+  ! EXTERNAL.\n+  WRITE (*,*) ASINH (1.) ! { dg-bogus \"Fortran 2008\" }\n+END SUBROUTINE no_implicit\n+\n+SUBROUTINE implicit_type\n+  ! acosh has implicit type\n+\n+  WRITE (*,*) ACOSH (1.) ! { dg-warning \"Fortran 2008\" }\n+  WRITE (*,*) ACOSH (1.) ! { dg-bogus \"Fortran 2008\" }\n+END SUBROUTINE implicit_type\n+\n+SUBROUTINE specification_expression\n+  CHARACTER(KIND=selected_char_kind(\"ascii\")) :: x\n+! { dg-error \"specification function\" \"\" { target \"*-*-*\" } 34 }\n+! { dg-warning \"Fortran 2003\" \"\" { target \"*-*-*\" } 34 }\n+END SUBROUTINE specification_expression\n+\n+SUBROUTINE intrinsic_decl\n+  IMPLICIT NONE\n+  INTRINSIC :: atanh ! { dg-error \"Fortran 2008\" }\n+  INTRINSIC :: abort ! { dg-error \"extension\" }\n+END SUBROUTINE intrinsic_decl\n+\n+! Scan that really external functions are called.\n+! { dg-final { scan-tree-dump \" abort \" \"original\" } }\n+! { dg-final { scan-tree-dump \" asinh \" \"original\" } }\n+! { dg-final { scan-tree-dump \" acosh \" \"original\" } }"}, {"sha": "6112d906d427ce02fed88c6881237837f239f3d4", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_2.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do link }\n+! { dg-options \"-std=f95 -Wintrinsics-std -fall-intrinsics\" }\n+\n+! PR fortran/33141\n+! Check that -fall-intrinsics makes all intrinsics available.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  ! abort is a GNU extension\n+  CALL abort () ! { dg-bogus \"extension\" }\n+\n+  ! ASINH is an intrinsic of F2008\n+  WRITE (*,*) ASINH (1.) ! { dg-bogus \"Fortran 2008\" }\n+END PROGRAM main"}, {"sha": "15a424b1c9148452dd1a7ea08e04ba65d3cffb9a", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_3.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_3.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do link }\n+! { dg-options \"-std=gnu -Wintrinsics-std\" }\n+\n+! PR fortran/33141\n+! -std=gnu should allow every intrinsic.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  ! abort is a GNU extension\n+  CALL abort () ! { dg-bogus \"extension\" }\n+\n+  ! ASINH is an intrinsic of F2008\n+  WRITE (*,*) ASINH (1.) ! { dg-bogus \"Fortran 2008\" }\n+END PROGRAM main"}, {"sha": "e83ed4c884d7cb1c1aa24ac94612f605c5d3bd90", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_4.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_4.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+! { dg-options \"-std=f95 -Wno-intrinsics-std\" }\n+\n+! PR fortran/33141\n+! Check that calls to intrinsics not in the current standard are \"allowed\" and\n+! linked to external procedures with that name.\n+! Addionally, this checks that -Wno-intrinsics-std turns off the warning.\n+\n+SUBROUTINE abort ()\n+  IMPLICIT NONE\n+  WRITE (*,*) \"Correct\"\n+END SUBROUTINE abort\n+\n+REAL FUNCTION asinh (arg)\n+  IMPLICIT NONE\n+  REAL :: arg\n+\n+  WRITE (*,*) \"Correct\"\n+  asinh = arg\n+END FUNCTION asinh\n+\n+SUBROUTINE implicit_none\n+  IMPLICIT NONE\n+  REAL :: asinh ! { dg-bogus \"Fortran 2008\" }\n+  REAL :: x\n+\n+  ! Both times our version above should be called\n+  CALL abort () ! { dg-bogus \"extension\" }\n+  x = ASINH (1.) ! { dg-bogus \"Fortran 2008\" }\n+END SUBROUTINE implicit_none\n+\n+SUBROUTINE implicit_type\n+  ! ASINH has implicit type here\n+  REAL :: x\n+\n+  ! Our version should be called\n+  x = ASINH (1.) ! { dg-bogus \"Fortran 2008\" }\n+END SUBROUTINE implicit_type\n+\n+PROGRAM main\n+  ! This should give a total of three \"Correct\"s\n+  CALL implicit_none ()\n+  CALL implicit_type ()\n+END PROGRAM main\n+\n+! { dg-output \"Correct\\.*Correct\\.*Correct\" }"}, {"sha": "a7b7ae7d895b37d5e8f3b15a5dd5f7355e0feb8a", "filename": "gcc/testsuite/gfortran.dg/selected_char_kind_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_3.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,10 +1,10 @@\n ! { dg-do compile }\n-! { dg-options \"-std=f95 -pedantic -Wall\" }\n+! { dg-options \"-std=f95 -pedantic -Wall -Wno-intrinsics-std\" }\n !\n ! Check that SELECTED_CHAR_KIND is rejected with -std=f95\n !\n   implicit none\n-  character(kind=selected_char_kind(\"ascii\")) :: s ! { dg-error \"is not included in the selected standard\" }\n+  character(kind=selected_char_kind(\"ascii\")) :: s ! { dg-error \"must be an intrinsic or a specification function\" }\n   s = \"\" ! { dg-error \"has no IMPLICIT type\" }\n   print *, s\n end"}, {"sha": "b0e4b5d414841b0ddfa67f66db5f684351e2c2a8", "filename": "gcc/testsuite/gfortran.dg/warn_std_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_1.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-Wnonstd-intrinsics -std=gnu\" }\n+! { dg-options \"-std=gnu\" }\n !\n ! PR fortran/32778 - pedantic warning: intrinsics that \n !                    are GNU extensions not part of -std=gnu"}, {"sha": "325fc8cb6e16c73f4dc76aa1c1a7df54ee2f4607", "filename": "gcc/testsuite/gfortran.dg/warn_std_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_2.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-Wnonstd-intrinsics -std=f95\" }\n+! { dg-options \"-std=f95 -Wintrinsics-std\" }\n !\n ! PR fortran/32778 - pedantic warning: intrinsics that \n !                    are GNU extensions not part of -std=gnu\n@@ -11,15 +11,15 @@\n REAL(8) :: x\n \n ! GNU extension, check overload of F77 standard intrinsic\n-x = ZABS(CMPLX(0.0, 1.0, 8))    ! { dg-error \"is not included in the selected standard\" }\n+x = ZABS(CMPLX(0.0, 1.0, 8))    ! { dg-warning \"extension\" }\n \n ! GNU extension\n-CALL flush()                    ! { dg-error \"is not included in the selected standard\" }\n+CALL flush()                    ! { dg-warning \"extension\" }\n \n ! F95\n tmp = ADJUSTL(\"  gfortran  \")\n \n ! F2003\n-CALL GET_COMMAND (tmp)          ! { dg-error \"is not included in the selected standard\" }\n+CALL GET_COMMAND (tmp)          ! { dg-warning \"Fortran 2003\" }\n \n END"}, {"sha": "89fe257389b6ee6e30c7764cb3a48892a5c9e351", "filename": "gcc/testsuite/gfortran.dg/warn_std_3.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3005b0f0c8081ccb719740c3c27ee13d5697add/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_3.f90?ref=c3005b0f0c8081ccb719740c3c27ee13d5697add", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-Wnonstd-intrinsics -std=f2003\" }\n+! { dg-options \"-std=f2003 -Wintrinsics-std\" }\n !\n ! PR fortran/32778 - pedantic warning: intrinsics that \n !                    are GNU extensions not part of -std=gnu\n@@ -11,10 +11,10 @@\n REAL(8) :: x\n \n ! GNU extension, check overload of F77 standard intrinsic\n-x = ZABS(CMPLX(0.0, 1.0, 8))    ! { dg-error \"is not included in the selected standard\" }\n+x = ZABS(CMPLX(0.0, 1.0, 8))    ! { dg-warning \"extension\" }\n \n ! GNU extension\n-CALL flush()                    ! { dg-error \"is not included in the selected standard\" }\n+CALL flush()                    ! { dg-warning \"extension\" }\n \n ! F95\n tmp = ADJUSTL(\"  gfortran  \")"}]}