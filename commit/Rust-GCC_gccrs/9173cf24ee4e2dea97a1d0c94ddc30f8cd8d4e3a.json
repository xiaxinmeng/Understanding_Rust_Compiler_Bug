{"sha": "9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3M2NmMjRlZTRlMmRlYTk3YTFkMGM5NGRkYzMwZjhjZDhkNGUzYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-03-28T13:48:56Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-03-28T13:48:56Z"}, "message": "cp-tree.h (next_aggr_init_expr_arg): Remove static specifier.\n\n\t* cp-tree.h (next_aggr_init_expr_arg): Remove static specifier.\n\t(first_aggr_init_expr): Likewise.\n\t(more_aggr_init_expr_args_p): Likewise.\n\t(type_of_this_parm): Likewise.\n\t(class_of_this_parm): Likewise.\n\t* name-lookup.h (get_global_value_if_present): Likewise.\n\t(is_typename_at_global_scope): Likewise.\n\nFrom-SVN: r197196", "tree": {"sha": "62a54579b3c446167c2c2e9b84ddce48b66ab4e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62a54579b3c446167c2c2e9b84ddce48b66ab4e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "749469789ffb525395b9e1a7b26cc5f78de59411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749469789ffb525395b9e1a7b26cc5f78de59411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749469789ffb525395b9e1a7b26cc5f78de59411"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "f4952838fdb34eb192a00d11627097da8f16b437", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "patch": "@@ -1,3 +1,13 @@\n+2013-03-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cp-tree.h (next_aggr_init_expr_arg): Remove static specifier.\n+\t(first_aggr_init_expr): Likewise.\n+\t(more_aggr_init_expr_args_p): Likewise.\n+\t(type_of_this_parm): Likewise.\n+\t(class_of_this_parm): Likewise.\n+\t* name-lookup.h (get_global_value_if_present): Likewise.\n+\t(is_typename_at_global_scope): Likewise.\n+\n 2013-03-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* call.c (joust): Don't call inform for a permerror returning false."}, {"sha": "e8e40ec4e05d4014f23c2ab977e651d61b64709e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "patch": "@@ -3026,7 +3026,7 @@ typedef struct aggr_init_expr_arg_iterator_d {\n \n /* Initialize the abstract argument list iterator object ITER with the\n    arguments from AGGR_INIT_EXPR node EXP.  */\n-static inline void\n+inline void\n init_aggr_init_expr_arg_iterator (tree exp,\n \t\t\t\t       aggr_init_expr_arg_iterator *iter)\n {\n@@ -3037,7 +3037,7 @@ init_aggr_init_expr_arg_iterator (tree exp,\n \n /* Return the next argument from abstract argument list iterator object ITER,\n    and advance its state.  Return NULL_TREE if there are no more arguments.  */\n-static inline tree\n+inline tree\n next_aggr_init_expr_arg (aggr_init_expr_arg_iterator *iter)\n {\n   tree result;\n@@ -3052,7 +3052,7 @@ next_aggr_init_expr_arg (aggr_init_expr_arg_iterator *iter)\n    past and return the first argument.  Useful in for expressions, e.g.\n      for (arg = first_aggr_init_expr_arg (exp, &iter); arg;\n           arg = next_aggr_init_expr_arg (&iter))   */\n-static inline tree\n+inline tree\n first_aggr_init_expr_arg (tree exp, aggr_init_expr_arg_iterator *iter)\n {\n   init_aggr_init_expr_arg_iterator (exp, iter);\n@@ -3061,7 +3061,7 @@ first_aggr_init_expr_arg (tree exp, aggr_init_expr_arg_iterator *iter)\n \n /* Test whether there are more arguments in abstract argument list iterator\n    ITER, without changing its state.  */\n-static inline bool\n+inline bool\n more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n {\n   return (iter->i < iter->n);\n@@ -4905,7 +4905,7 @@ bool decl_spec_seq_has_spec_p (const cp_decl_specifier_seq *, cp_decl_spec);\n \n /* Return the type of the `this' parameter of FNTYPE.  */\n \n-static inline tree\n+inline tree\n type_of_this_parm (const_tree fntype)\n {\n   function_args_iterator iter;\n@@ -4916,7 +4916,7 @@ type_of_this_parm (const_tree fntype)\n \n /* Return the class of the `this' parameter of FNTYPE.  */\n \n-static inline tree\n+inline tree\n class_of_this_parm (const_tree fntype)\n {\n   return TREE_TYPE (type_of_this_parm (fntype));"}, {"sha": "11cdd1f09e83228d1ebe2b6b7bf496fe50a37de8", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=9173cf24ee4e2dea97a1d0c94ddc30f8cd8d4e3a", "patch": "@@ -347,7 +347,7 @@ extern void cp_emit_debug_info_for_using (tree, tree);\n /* Set *DECL to the (non-hidden) declaration for ID at global scope,\n    if present and return true; otherwise return false.  */\n \n-static inline bool\n+inline bool\n get_global_value_if_present (tree id, tree *decl)\n {\n   tree global_value = namespace_binding (id, global_namespace);\n@@ -358,7 +358,7 @@ get_global_value_if_present (tree id, tree *decl)\n \n /* True is the binding of IDENTIFIER at global scope names a type.  */\n \n-static inline bool\n+inline bool\n is_typename_at_global_scope (tree id)\n {\n   tree global_value = namespace_binding (id, global_namespace);"}]}