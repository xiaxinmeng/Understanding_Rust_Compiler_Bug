{"sha": "8f5439bea30bd2370638261ec7613628c8918d7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1NDM5YmVhMzBiZDIzNzA2MzgyNjFlYzc2MTM2MjhjODkxOGQ3ZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-07T16:57:23Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-07T16:57:23Z"}, "message": "d/dmd: Merge upstream dmd d517c0e6a\n\nFixes https://gcc.gnu.org/PR89016\n\nReviewed-on: https://github.com/dlang/dmd/pull/9427\n\nFrom-SVN: r269465", "tree": {"sha": "f26eba7fb1fa4abe08f558c03572201771d23362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26eba7fb1fa4abe08f558c03572201771d23362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f5439bea30bd2370638261ec7613628c8918d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5439bea30bd2370638261ec7613628c8918d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5439bea30bd2370638261ec7613628c8918d7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5439bea30bd2370638261ec7613628c8918d7d/comments", "author": null, "committer": null, "parents": [{"sha": "59d9a0aa71e3314f6a797fdfcce44ccfe8418b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d9a0aa71e3314f6a797fdfcce44ccfe8418b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d9a0aa71e3314f6a797fdfcce44ccfe8418b8d"}], "stats": {"total": 302, "additions": 151, "deletions": 151}, "files": [{"sha": "3f416dbfb7be3a30ef81b79abbd3ff3752e3cfba", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -1,4 +1,4 @@\n-ed71446aaa2bd0e548c3bf2154a638826dfe3db0\n+d517c0e6a10b548f44d82b71b3c079663cb94f8e\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "a668638148592e5c1039cd84f021c6252578f61a", "filename": "gcc/d/dmd/attrib.c", "status": "modified", "additions": 38, "deletions": 70, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fattrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fattrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.c?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -30,6 +30,7 @@\n \n bool definitelyValueParameter(Expression *e);\n Expression *semantic(Expression *e, Scope *sc);\n+StringExp *semanticString(Scope *sc, Expression *exp, const char *s);\n \n /********************************* AttribDeclaration ****************************/\n \n@@ -977,41 +978,29 @@ void PragmaDeclaration::semantic(Scope *sc)\n             error(\"string expected for library name\");\n         else\n         {\n-            Expression *e = (*args)[0];\n-\n-            sc = sc->startCTFE();\n-            e = ::semantic(e, sc);\n-            e = resolveProperties(sc, e);\n-            sc = sc->endCTFE();\n-\n-            e = e->ctfeInterpret();\n-            (*args)[0] = e;\n-            if (e->op == TOKerror)\n-                goto Lnodecl;\n-            StringExp *se = e->toStringExp();\n+            StringExp *se = semanticString(sc, (*args)[0], \"library name\");\n             if (!se)\n-                error(\"string expected for library name, not '%s'\", e->toChars());\n-            else\n+                goto Lnodecl;\n+            (*args)[0] = se;\n+\n+            char *name = (char *)mem.xmalloc(se->len + 1);\n+            memcpy(name, se->string, se->len);\n+            name[se->len] = 0;\n+            if (global.params.verbose)\n+                message(\"library   %s\", name);\n+            if (global.params.moduleDeps && !global.params.moduleDepsFile)\n             {\n-                char *name = (char *)mem.xmalloc(se->len + 1);\n-                memcpy(name, se->string, se->len);\n-                name[se->len] = 0;\n-                if (global.params.verbose)\n-                    message(\"library   %s\", name);\n-                if (global.params.moduleDeps && !global.params.moduleDepsFile)\n-                {\n-                    OutBuffer *ob = global.params.moduleDeps;\n-                    Module *imod = sc->instantiatingModule();\n-                    ob->writestring(\"depsLib \");\n-                    ob->writestring(imod->toPrettyChars());\n-                    ob->writestring(\" (\");\n-                    escapePath(ob, imod->srcfile->toChars());\n-                    ob->writestring(\") : \");\n-                    ob->writestring((char *) name);\n-                    ob->writenl();\n-                }\n-                mem.xfree(name);\n+                OutBuffer *ob = global.params.moduleDeps;\n+                Module *imod = sc->instantiatingModule();\n+                ob->writestring(\"depsLib \");\n+                ob->writestring(imod->toPrettyChars());\n+                ob->writestring(\" (\");\n+                escapePath(ob, imod->srcfile->toChars());\n+                ob->writestring(\") : \");\n+                ob->writestring((char *) name);\n+                ob->writenl();\n             }\n+            mem.xfree(name);\n         }\n         goto Lnodecl;\n     }\n@@ -1053,19 +1042,11 @@ void PragmaDeclaration::semantic(Scope *sc)\n             goto Ldecl;\n         }\n \n-        Expression *e = (*args)[0];\n-        e = ::semantic(e, sc);\n-        e = e->ctfeInterpret();\n-        (*args)[0] = e;\n-        if (e->op == TOKerror)\n-            goto Ldecl;\n-\n-        StringExp *se = e->toStringExp();\n+        StringExp *se = semanticString(sc, (*args)[0], \"mangled name\");\n         if (!se)\n-        {\n-            error(\"string expected for mangled name, not '%s'\", e->toChars());\n             goto Ldecl;\n-        }\n+        (*args)[0] = se; // Will be used for later\n+\n         if (!se->len)\n         {\n             error(\"zero-length string not allowed for mangled name\");\n@@ -1418,35 +1399,22 @@ void CompileDeclaration::setScope(Scope *sc)\n void CompileDeclaration::compileIt(Scope *sc)\n {\n     //printf(\"CompileDeclaration::compileIt(loc = %d) %s\\n\", loc.linnum, exp->toChars());\n-    sc = sc->startCTFE();\n-    exp = ::semantic(exp, sc);\n-    exp = resolveProperties(sc, exp);\n-    sc = sc->endCTFE();\n+    StringExp *se = semanticString(sc, exp, \"argument to mixin\");\n+    if (!se)\n+        return;\n+    se = se->toUTF8(sc);\n+\n+    unsigned errors = global.errors;\n+    Parser p(loc, sc->_module, (utf8_t *)se->string, se->len, 0);\n+    p.nextToken();\n \n-    if (exp->op != TOKerror)\n+    decl = p.parseDeclDefs(0);\n+    if (p.token.value != TOKeof)\n+        exp->error(\"incomplete mixin declaration (%s)\", se->toChars());\n+    if (p.errors)\n     {\n-        Expression *e = exp->ctfeInterpret();\n-        if (e->op == TOKerror) // Bugzilla 15974\n-            return;\n-        StringExp *se = e->toStringExp();\n-        if (!se)\n-            exp->error(\"argument to mixin must be a string, not (%s) of type %s\", exp->toChars(), exp->type->toChars());\n-        else\n-        {\n-            se = se->toUTF8(sc);\n-            unsigned errors = global.errors;\n-            Parser p(loc, sc->_module, (utf8_t *)se->string, se->len, 0);\n-            p.nextToken();\n-\n-            decl = p.parseDeclDefs(0);\n-            if (p.token.value != TOKeof)\n-                exp->error(\"incomplete mixin declaration (%s)\", se->toChars());\n-            if (p.errors)\n-            {\n-                assert(global.errors != errors);\n-                decl = NULL;\n-            }\n-        }\n+        assert(global.errors != errors);\n+        decl = NULL;\n     }\n }\n "}, {"sha": "cd2c5b22a74ade82136bb08cd91585a7f6e1a619", "filename": "gcc/d/dmd/dimport.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fdimport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fdimport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdimport.c?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -23,6 +23,8 @@\n #include \"attrib.h\"\n #include \"hdrgen.h\"\n \n+StringExp *semanticString(Scope *sc, Expression *exp, const char *s);\n+\n /********************************* Import ****************************/\n \n Import::Import(Loc loc, Identifiers *packages, Identifier *id, Identifier *aliasId,\n@@ -176,6 +178,8 @@ void Import::importAll(Scope *sc)\n             if (mod->md && mod->md->isdeprecated)\n             {\n                 Expression *msg = mod->md->msg;\n+                if (msg)\n+                    msg = semanticString(sc, msg, \"deprecation message\");\n                 if (StringExp *se = msg ? msg->toStringExp() : NULL)\n                     mod->deprecation(loc, \"is deprecated - %s\", se->string);\n                 else"}, {"sha": "20dbb69a91c028c69c864e2ac4f1d2157ac3358a", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -35,6 +35,7 @@ Dsymbols Module::deferred3; // deferred Dsymbol's needing semantic3() run on the\n unsigned Module::dprogress;\n \n const char *lookForSourceFile(const char **path, const char *filename);\n+StringExp *semanticString(Scope *sc, Expression *exp, const char *s);\n \n void Module::_init()\n {\n@@ -727,21 +728,16 @@ void Module::importAll(Scope *)\n         return;\n     }\n \n-    if (md && md->msg)\n-    {\n-        if (StringExp *se = md->msg->toStringExp())\n-            md->msg = se;\n-        else\n-            md->msg->error(\"string expected, not '%s'\", md->msg->toChars());\n-    }\n-\n     /* Note that modules get their own scope, from scratch.\n      * This is so regardless of where in the syntax a module\n      * gets imported, it is unaffected by context.\n      * Ignore prevsc.\n      */\n     Scope *sc = Scope::createGlobal(this);      // create root scope\n \n+    if (md && md->msg)\n+      md->msg = semanticString(sc, md->msg, \"deprecation message\");\n+\n     // Add import of \"object\", even for the \"object\" module.\n     // If it isn't there, some compiler rewrites, like\n     //    classinst == classinst -> .object.opEquals(classinst, classinst)"}, {"sha": "df373925e09079398888fa828cac42cfe60c3fba", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -6850,6 +6850,43 @@ Expression *resolveOpDollar(Scope *sc, ArrayExp *ae, Expression **pe0)\n     return ae;\n }\n \n+/***********************************************************\n+ * Resolve `exp` as a compile-time known string.\n+ * Params:\n+ *  sc  = scope\n+ *  exp = Expression which expected as a string\n+ *  s   = What the string is expected for, will be used in error diagnostic.\n+ * Returns:\n+ *  String literal, or `null` if error happens.\n+ */\n+StringExp *semanticString(Scope *sc, Expression *exp, const char *s)\n+{\n+    sc = sc->startCTFE();\n+    exp = semantic(exp, sc);\n+    exp = resolveProperties(sc, exp);\n+    sc = sc->endCTFE();\n+\n+    if (exp->op == TOKerror)\n+        return NULL;\n+\n+    Expression *e = exp;\n+    if (exp->type->isString())\n+    {\n+        e = e->ctfeInterpret();\n+        if (e->op == TOKerror)\n+            return NULL;\n+    }\n+\n+    StringExp *se = e->toStringExp();\n+    if (!se)\n+    {\n+        exp->error(\"string expected for %s, not (%s) of type %s\",\n+            s, exp->toChars(), exp->type->toChars());\n+        return NULL;\n+    }\n+    return se;\n+}\n+\n /**************************************\n  * Runs semantic on se->lwr and se->upr. Declares a temporary variable\n  * if '$' was used."}, {"sha": "3fd5c1fa33f251def51c061bd1e28138eea39d5d", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -74,6 +74,7 @@ Expression *binSemanticProp(BinExp *e, Scope *sc);\n Expression *semantic(Expression *e, Scope *sc);\n Expression *semanticY(DotIdExp *exp, Scope *sc, int flag);\n Expression *semanticY(DotTemplateInstanceExp *exp, Scope *sc, int flag);\n+StringExp *semanticString(Scope *sc, Expression *exp, const char *s);\n \n /****************************************\n  * Preprocess arguments to function.\n@@ -2259,27 +2260,9 @@ class ExpressionSemanticVisitor : public Visitor\n \n     void visit(CompileExp *exp)\n     {\n-        sc = sc->startCTFE();\n-        exp->e1 = semantic(exp->e1, sc);\n-        exp->e1 = resolveProperties(sc, exp->e1);\n-        sc = sc->endCTFE();\n-        if (exp->e1->op == TOKerror)\n-        {\n-            result = exp->e1;\n-            return;\n-        }\n-        if (!exp->e1->type->isString())\n-        {\n-            exp->error(\"argument to mixin must be a string type, not %s\", exp->e1->type->toChars());\n-            return setError();\n-        }\n-        exp->e1 = exp->e1->ctfeInterpret();\n-        StringExp *se = exp->e1->toStringExp();\n+        StringExp *se = semanticString(sc, exp->e1, \"argument to mixin\");\n         if (!se)\n-        {\n-            exp->error(\"argument to mixin must be a string, not (%s)\", exp->e1->toChars());\n             return setError();\n-        }\n         se = se->toUTF8(sc);\n         unsigned errors = global.errors;\n         Parser p(exp->loc, sc->_module, (utf8_t *)se->string, se->len, 0);\n@@ -2301,27 +2284,16 @@ class ExpressionSemanticVisitor : public Visitor\n \n     void visit(ImportExp *e)\n     {\n-        const char *name;\n-        StringExp *se;\n-\n-        sc = sc->startCTFE();\n-        e->e1 = semantic(e->e1, sc);\n-        e->e1 = resolveProperties(sc, e->e1);\n-        sc = sc->endCTFE();\n-        e->e1 = e->e1->ctfeInterpret();\n-        if (e->e1->op != TOKstring)\n-        {\n-            e->error(\"file name argument must be a string, not (%s)\", e->e1->toChars());\n-            goto Lerror;\n-        }\n-        se = (StringExp *)e->e1;\n+        StringExp *se = semanticString(sc, e->e1, \"file name argument\");\n+        if (!se)\n+            return setError();\n         se = se->toUTF8(sc);\n-        name = (char *)se->string;\n \n+        const char *name = (char *)se->string;\n         if (!global.params.fileImppath)\n         {\n             e->error(\"need -Jpath switch to import text file %s\", name);\n-            goto Lerror;\n+            return setError();\n         }\n \n         /* Be wary of CWE-22: Improper Limitation of a Pathname to a Restricted Directory\n@@ -2333,7 +2305,7 @@ class ExpressionSemanticVisitor : public Visitor\n         if (!name)\n         {\n             e->error(\"file %s cannot be found or not in a path specified with -J\", se->toChars());\n-            goto Lerror;\n+            return setError();\n         }\n \n         if (global.params.verbose)\n@@ -2363,7 +2335,7 @@ class ExpressionSemanticVisitor : public Visitor\n             if (f.read())\n             {\n                 e->error(\"cannot read file %s\", f.toChars());\n-                goto Lerror;\n+                return setError();\n             }\n             else\n             {\n@@ -2372,10 +2344,6 @@ class ExpressionSemanticVisitor : public Visitor\n             }\n         }\n         result = semantic(se, sc);\n-        return;\n-\n-    Lerror:\n-        return setError();\n     }\n \n     void visit(AssertExp *exp)"}, {"sha": "2d3a11237cbbccfcd42da4bd89e67f9e1447f176", "filename": "gcc/d/dmd/statement.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fstatement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Fd%2Fdmd%2Fstatement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.c?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -31,6 +31,7 @@ StorageClass mergeFuncAttrs(StorageClass s1, FuncDeclaration *f);\n bool checkEscapeRef(Scope *sc, Expression *e, bool gag);\n VarDeclaration *copyToTemp(StorageClass stc, const char *name, Expression *e);\n Expression *semantic(Expression *e, Scope *sc);\n+StringExp *semanticString(Scope *sc, Expression *exp, const char *s);\n \n Identifier *fixupLabelName(Scope *sc, Identifier *ident)\n {\n@@ -487,45 +488,36 @@ Statement *CompileStatement::syntaxCopy()\n     return new CompileStatement(loc, exp->syntaxCopy());\n }\n \n+static Statements *errorStatements()\n+{\n+    Statements *a = new Statements();\n+    a->push(new ErrorStatement());\n+    return a;\n+}\n+\n Statements *CompileStatement::flatten(Scope *sc)\n {\n     //printf(\"CompileStatement::flatten() %s\\n\", exp->toChars());\n-    sc = sc->startCTFE();\n-    exp = semantic(exp, sc);\n-    exp = resolveProperties(sc, exp);\n-    sc = sc->endCTFE();\n+    StringExp *se = semanticString(sc, exp, \"argument to mixin\");\n+    if (!se)\n+        return errorStatements();\n+    se = se->toUTF8(sc);\n+\n+    unsigned errors = global.errors;\n+    Parser p(loc, sc->_module, (utf8_t *)se->string, se->len, 0);\n+    p.nextToken();\n \n     Statements *a = new Statements();\n-    if (exp->op != TOKerror)\n+    while (p.token.value != TOKeof)\n     {\n-        Expression *e = exp->ctfeInterpret();\n-        if (e->op == TOKerror) // Bugzilla 15974\n-            goto Lerror;\n-        StringExp *se = e->toStringExp();\n-        if (!se)\n-           error(\"argument to mixin must be a string, not (%s) of type %s\", exp->toChars(), exp->type->toChars());\n-        else\n+        Statement *s = p.parseStatement(PSsemi | PScurlyscope);\n+        if (!s || p.errors)\n         {\n-            se = se->toUTF8(sc);\n-            unsigned errors = global.errors;\n-            Parser p(loc, sc->_module, (utf8_t *)se->string, se->len, 0);\n-            p.nextToken();\n-\n-            while (p.token.value != TOKeof)\n-            {\n-                Statement *s = p.parseStatement(PSsemi | PScurlyscope);\n-                if (!s || p.errors)\n-                {\n-                    assert(!p.errors || global.errors != errors); // make sure we caught all the cases\n-                    goto Lerror;\n-                }\n-                a->push(s);\n-            }\n-            return a;\n+            assert(!p.errors || global.errors != errors); // make sure we caught all the cases\n+            return errorStatements();\n         }\n+        a->push(s);\n     }\n-Lerror:\n-    a->push(new ErrorStatement());\n     return a;\n }\n "}, {"sha": "53d4f887027e046ba7667acb93cbaa5e8ddf1601", "filename": "gcc/testsuite/gdc.test/compilable/imports/test19609a.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609a.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1 @@\n+deprecated([]) module imports.test19609a;"}, {"sha": "91e26e2862bd205bfc81cb00be1d64debf3afb74", "filename": "gcc/testsuite/gdc.test/compilable/imports/test19609b.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609b.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1 @@\n+deprecated(['h','e','l','l','o']) module imports.test19609b;"}, {"sha": "789585d6c88a108451935f43669292412d4214ae", "filename": "gcc/testsuite/gdc.test/compilable/imports/test19609c.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest19609c.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1 @@\n+deprecated(null) module imports.test19609c;"}, {"sha": "14c72bc5afb4412cc04b7eb7052680d8782054fd", "filename": "gcc/testsuite/gdc.test/compilable/test12567e.d", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567e.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -2,7 +2,6 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail12567.d(8): Error: string expected, not '\"a\" ~ \"b\"'\n ---\n */\n deprecated(\"a\" ~ \"b\") module fail12567;", "previous_filename": "gcc/testsuite/gdc.test/fail_compilation/fail12567.d"}, {"sha": "a3d692332495647aa51cb8746c5baf3d6796f8f2", "filename": "gcc/testsuite/gdc.test/compilable/test19609.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19609.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19609.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19609.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1,12 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19609\n+/*\n+TEST_OUTPUT\n+---\n+compilable/test19609.d(10): Deprecation: module `imports.test19609a` is deprecated - \n+compilable/test19609.d(11): Deprecation: module `imports.test19609b` is deprecated - hello\n+compilable/test19609.d(12): Deprecation: module `imports.test19609c` is deprecated -\n+---\n+*/\n+import imports.test19609a;\n+import imports.test19609b;\n+import imports.test19609c;"}, {"sha": "64d080ac5d0bb379b9efbbb0923e1cacd7c80aac", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19609.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19609.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19609.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19609.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1,18 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19609\n+/*\n+TEST_OUTPUT\n+---\n+fail_compilation/imports/fail19609a.d(1): Error: `string` expected for deprecation message, not `([\"\"])` of type `string[]`\n+fail_compilation/fail19609.d(16): Deprecation: module `imports.fail19609a` is deprecated\n+fail_compilation/imports/fail19609a.d(1): Error: `string` expected for deprecation message, not `([\"\"])` of type `string[]`\n+fail_compilation/imports/fail19609b.d(1): Error: `string` expected for deprecation message, not `([1])` of type `int[]`\n+fail_compilation/fail19609.d(17): Deprecation: module `imports.fail19609b` is deprecated\n+fail_compilation/imports/fail19609b.d(1): Error: `string` expected for deprecation message, not `([1])` of type `int[]`\n+fail_compilation/imports/fail19609c.d(1): Error: `string` expected for deprecation message, not `(123.4F)` of type `float`\n+fail_compilation/fail19609.d(18): Deprecation: module `imports.fail19609c` is deprecated\n+fail_compilation/imports/fail19609c.d(1): Error: `string` expected for deprecation message, not `(123.4F)` of type `float`\n+---\n+*/\n+import imports.fail19609a;\n+import imports.fail19609b;\n+import imports.fail19609c;"}, {"sha": "6cf5d61c063bbb5ed02c89fdea346408173a2af5", "filename": "gcc/testsuite/gdc.test/fail_compilation/imports/fail19609a.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609a.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1 @@\n+deprecated([\"\"]) module imports.fail19609a;"}, {"sha": "2ba62fe7e6f694d2fb1dcde19cc47da191f44bf1", "filename": "gcc/testsuite/gdc.test/fail_compilation/imports/fail19609b.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609b.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1 @@\n+deprecated([1]) module imports.fail19609b;"}, {"sha": "4aadb600fa8f7e54151a05094f4e6b04f40665f0", "filename": "gcc/testsuite/gdc.test/fail_compilation/imports/fail19609c.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5439bea30bd2370638261ec7613628c8918d7d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ffail19609c.d?ref=8f5439bea30bd2370638261ec7613628c8918d7d", "patch": "@@ -0,0 +1 @@\n+deprecated(123.4f) module imports.fail19609c;"}]}