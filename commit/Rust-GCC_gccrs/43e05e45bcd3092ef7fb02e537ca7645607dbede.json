{"sha": "43e05e45bcd3092ef7fb02e537ca7645607dbede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNlMDVlNDViY2QzMDkyZWY3ZmIwMmU1MzdjYTc2NDU2MDdkYmVkZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-01-01T16:15:23Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-01-01T16:15:23Z"}, "message": "re PR middle-end/17544 (incorrect -Wunreachable-code warning for mains with a return statement)\n\n\t* emit-rtl.c (add_insn_before): Fix comment typo.\n\n\tPR middle-end/17544\n\t* c-decl.c (finish_function): If compiling C99, annotate the\n\tcompiler generated return with the current file name and line 0.\n\t* tree-cfg.c (remove_useless_stmts_warn_notreached): Only warn if\n\tthe source line is greater than 0.\n\t(remove_bb): Likewise.\n\ncp/\n\tPR middle-end/17544\n\t* decl.c (finish_function): Fix comment.  Annotate the compiler\n\tgenerated return with the current file name and line 0.\n\ntestsuite/\n\t* gcc.dg/20041231-1.C: New test.\n\t* g++.dg/warn/Wunreachable-code-1.C: New test.\n\nFrom-SVN: r92784", "tree": {"sha": "c6d40e9cbaa9fa337df7a271539a709395f1c913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d40e9cbaa9fa337df7a271539a709395f1c913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43e05e45bcd3092ef7fb02e537ca7645607dbede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e05e45bcd3092ef7fb02e537ca7645607dbede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e05e45bcd3092ef7fb02e537ca7645607dbede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e05e45bcd3092ef7fb02e537ca7645607dbede/comments", "author": null, "committer": null, "parents": [{"sha": "8e1d2e8278cc2bed80ad1a1564cee131996b6129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1d2e8278cc2bed80ad1a1564cee131996b6129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1d2e8278cc2bed80ad1a1564cee131996b6129"}], "stats": {"total": 106, "additions": 93, "deletions": 13}, "files": [{"sha": "8bc75edd5048ba9b92c413a65146d6018591b511", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,3 +1,12 @@\n+2005-01-01  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR middle-end/17544\n+\t* c-decl.c (finish_function): If compiling C99, annotate the\n+\tcompiler generated return with the current file name and line 0.\n+\t* tree-cfg.c (remove_useless_stmts_warn_notreached): Only warn if\n+\tthe source line is greater than 0.\n+\t(remove_bb): Likewise.\n+\n 2004-12-31  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-opt/19042"}, {"sha": "a0053ed2fbe61aeb10129f35f6cbfc7e438e5be7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -29,6 +29,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"input.h\"\n #include \"tm.h\"\n #include \"intl.h\"\n #include \"tree.h\"\n@@ -6287,7 +6288,13 @@ finish_function (void)\n       else\n \t{\n \t  if (flag_isoc99)\n-\t    c_finish_return (integer_zero_node);\n+\t    {\n+\t      tree stmt = c_finish_return (integer_zero_node);\n+\t      /* Hack.  We don't want the middle-end to warn that this\n+\t\t return is unreachable, so put the statement on the\n+\t\t special line 0.  */\n+\t      annotate_with_file_line (stmt, input_filename, 0);\n+\t    }\n \t}\n     }\n "}, {"sha": "b061e69646a0404bff97f16dbeacbe99d0473bc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,3 +1,9 @@\n+2005-01-01  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR middle-end/17544\n+\t* decl.c (finish_function): Fix comment.  Annotate the compiler\n+\tgenerated return with the current file name and line 0.\n+\n 2004-12-31  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/17799"}, {"sha": "d0d1ff354b34f19ed3de60a8cff13dc702db60a7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004  Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004,2005  Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -10635,12 +10635,19 @@ finish_function (int flags)\n     {\n       if (DECL_MAIN_P (current_function_decl))\n \t{\n-\t  /* Make it so that `main' always returns 0 by default.  */\n+\t  tree stmt;\n+\n+\t  /* Make it so that `main' always returns 0 by default (or\n+\t     1 for VMS).  */\n #if VMS_TARGET\n-\t  finish_return_stmt (integer_one_node);\n+\t  stmt = finish_return_stmt (integer_one_node);\n #else\n-\t  finish_return_stmt (integer_zero_node);\n+\t  stmt = finish_return_stmt (integer_zero_node);\n #endif\n+\t  /* Hack.  We don't want the middle-end to warn that this\n+\t     return is unreachable, so put the statement on the\n+\t     special line 0.  */\n+\t  annotate_with_file_line (stmt, input_filename, 0);\n \t}\n \n       /* Finish dealing with exception specifiers.  */"}, {"sha": "46d9183b92ddeb8b97813c4bce1d3ae4c0f45193", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,6 +1,6 @@\n /* Emit RTL for the GCC expander.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3473,7 +3473,7 @@ add_insn_before (rtx insn, rtx before)\n       if (INSN_P (insn))\n \tbb->flags |= BB_DIRTY;\n       /* Should not happen as first in the BB is always either NOTE or\n-\t LABEl.  */\n+\t LABEL.  */\n       gcc_assert (BB_HEAD (bb) != insn\n \t\t  /* Avoid clobbering of structure when creating new BB.  */\n \t\t  || BARRIER_P (insn)"}, {"sha": "76c2aeaa0873bb83c0f27fde76dd03960405e3ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,3 +1,8 @@\n+2005-01-01  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* gcc.dg/20041231-1.C: New test.\n+\t* g++.dg/warn/Wunreachable-code-1.C: New test.\n+\n 2004-12-30  David Edelsohn  <edelsohn@gnu.org>\n \n \t* gfortran.fortran-torture/execute/read_eof.f90: Open scratch"}, {"sha": "23fc86dfbb28617d7ae93c4d9b26cd658a6a92a3", "filename": "gcc/testsuite/g++.dg/warn/Wunreachable-code-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-1.C?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -0,0 +1,22 @@\n+/* PR17544 Incorrect -Wunreachable-code warning\n+   Origin: sebor@roguewave.com\n+\n+   G++ appends a \"return 0;\" when finishing a function, but it was not\n+   given a source location.  The gimplifier thinks a return statement\n+   needs a locus so it would add one, making the compiler generated code\n+   visible to the unreachable code warning.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wunreachable-code\" } */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  const char* const s = argc < 2 ? \"\" : argv [1];\n+  int i = 0;\n+  do {\n+    ++i;\n+  } while (i < s [0]);\n+  return i;\n+}\n+"}, {"sha": "37c9fe04a1f899965735fdccdbf9f51544086e0e", "filename": "gcc/testsuite/gcc.dg/20041231-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftestsuite%2Fgcc.dg%2F20041231-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftestsuite%2Fgcc.dg%2F20041231-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041231-1.c?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -0,0 +1,15 @@\n+/* PR17544 Incorrect -Wunreachable-code warning\n+   Origin: Giovanni Bajo\n+\n+   In C99 we append a \"return 0;\" when finishing a function, but it was\n+   not given a source location.  The gimplifier thinks a return statement\n+   needs a locus so it would add one, making the compiler generated code\n+   visible to the unreachable code warning.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -O -Wunreachable-code\" } */\n+\n+int main (void)    // 1\n+{                  // 2\n+  return 0;        // 3\n+}                  // 4"}, {"sha": "a68c964c0c866efcd691f308d1946028736300c6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e05e45bcd3092ef7fb02e537ca7645607dbede/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=43e05e45bcd3092ef7fb02e537ca7645607dbede", "patch": "@@ -1,5 +1,5 @@\n /* Control flow functions for trees.\n-   Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n This file is part of GCC.\n@@ -1323,8 +1323,11 @@ remove_useless_stmts_warn_notreached (tree stmt)\n   if (EXPR_HAS_LOCATION (stmt))\n     {\n       location_t loc = EXPR_LOCATION (stmt);\n-      warning (\"%Hwill never be executed\", &loc);\n-      return true;\n+      if (LOCATION_LINE (loc) > 0)\n+\t{\n+\t  warning (\"%Hwill never be executed\", &loc);\n+\t  return true;\n+\t}\n     }\n \n   switch (TREE_CODE (stmt))\n@@ -2021,11 +2024,17 @@ remove_bb (basic_block bb)\n \t since this way we lose warnings for gotos in the original\n \t program that are indeed unreachable.  */\n       if (TREE_CODE (stmt) != GOTO_EXPR && EXPR_HAS_LOCATION (stmt) && !loc)\n+\t{\n+\t  source_locus t;\n+\n #ifdef USE_MAPPED_LOCATION\n-\tloc = EXPR_LOCATION (stmt);\n+\t  t = EXPR_LOCATION (stmt);\n #else\n-\tloc = EXPR_LOCUS (stmt);\n+\t  t = EXPR_LOCUS (stmt);\n #endif\n+\t  if (t && LOCATION_LINE (*t) > 0)\n+\t    loc = t;\n+\t}\n     }\n \n   /* If requested, give a warning that the first statement in the"}]}