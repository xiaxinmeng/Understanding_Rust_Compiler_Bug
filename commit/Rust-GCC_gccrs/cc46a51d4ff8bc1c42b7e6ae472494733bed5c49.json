{"sha": "cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0NmE1MWQ0ZmY4YmMxYzQyYjdlNmFlNDcyNDk0NzMzYmVkNWM0OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-16T07:53:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-16T07:53:53Z"}, "message": "graphite.h: Do not include isl/isl_val_gmp.h, instead include isl/isl_val.h.\n\n2017-02-16  Richard Biener  <rguenther@suse.de>\n\n\t* graphite.h: Do not include isl/isl_val_gmp.h, instead include\n\tisl/isl_val.h.\n\t* graphite-isl-ast-to-gimple.c (gmp_cst_to_tree): Remove.\n\t(gcc_expression_from_isl_expr_int): Use generic isl_val interface.\n\t* graphite-sese-to-poly.c: Do not include isl/isl_val_gmp.h.\n\t(isl_val_int_from_wi): New function.\n\t(extract_affine_gmp): Rename to ...\n\t(extract_affine_wi): ... this, take a widest_int.\n\t(extract_affine_int): Just wrap extract_affine_wi.\n\t(add_param_constraints): Use isl_val_int_from_wi.\n\t(add_loop_constraints): Likewise, and extract_affine_wi.\n\nFrom-SVN: r245501", "tree": {"sha": "36c76e273c9bed8a827d4ee9eb7843e603f726de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36c76e273c9bed8a827d4ee9eb7843e603f726de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c2d5d00f8f01da6610d23517c53adca824796e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2d5d00f8f01da6610d23517c53adca824796e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2d5d00f8f01da6610d23517c53adca824796e5"}], "stats": {"total": 104, "additions": 50, "deletions": 54}, "files": [{"sha": "5fc6142eaa03f1bb21da2d5ff19aed2a07f5fd7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "patch": "@@ -1,3 +1,17 @@\n+2017-02-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite.h: Do not include isl/isl_val_gmp.h, instead include\n+\tisl/isl_val.h.\n+\t* graphite-isl-ast-to-gimple.c (gmp_cst_to_tree): Remove.\n+\t(gcc_expression_from_isl_expr_int): Use generic isl_val interface.\n+\t* graphite-sese-to-poly.c: Do not include isl/isl_val_gmp.h.\n+\t(isl_val_int_from_wi): New function.\n+\t(extract_affine_gmp): Rename to ...\n+\t(extract_affine_wi): ... this, take a widest_int.\n+\t(extract_affine_int): Just wrap extract_affine_wi.\n+\t(add_param_constraints): Use isl_val_int_from_wi.\n+\t(add_loop_constraints): Likewise, and extract_affine_wi.\n+\n 2017-02-15 Jeff Law  <law@redhat.com>\n \n \tPR middle-end/79521"}, {"sha": "ec5fb73d9b2bc0e9908f5c16ab7948e1e95b956d", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "patch": "@@ -73,22 +73,6 @@ struct ast_build_info\n   bool is_parallelizable;\n };\n \n-/* Converts a GMP constant VAL to a tree and returns it.  */\n-\n-static tree\n-gmp_cst_to_tree (tree type, mpz_t val)\n-{\n-  tree t = type ? type : integer_type_node;\n-  mpz_t tmp;\n-\n-  mpz_init (tmp);\n-  mpz_set (tmp, val);\n-  wide_int wi = wi::from_mpz (t, tmp, true);\n-  mpz_clear (tmp);\n-\n-  return wide_int_to_tree (t, wi);\n-}\n-\n /* Verifies properties that GRAPHITE should maintain during translation.  */\n \n static inline void\n@@ -325,16 +309,20 @@ gcc_expression_from_isl_expr_int (tree type, __isl_take isl_ast_expr *expr)\n {\n   gcc_assert (isl_ast_expr_get_type (expr) == isl_ast_expr_int);\n   isl_val *val = isl_ast_expr_get_val (expr);\n-  mpz_t val_mpz_t;\n-  mpz_init (val_mpz_t);\n+  size_t n = isl_val_n_abs_num_chunks (val, sizeof (HOST_WIDE_INT));\n+  HOST_WIDE_INT *chunks = XALLOCAVEC (HOST_WIDE_INT, n);\n   tree res;\n-  if (isl_val_get_num_gmp (val, val_mpz_t) == -1)\n+  if (isl_val_get_abs_num_chunks (val, sizeof (HOST_WIDE_INT), chunks) == -1)\n     res = NULL_TREE;\n   else\n-    res = gmp_cst_to_tree (type, val_mpz_t);\n+    {\n+      widest_int wi = widest_int::from_array (chunks, n, true);\n+      if (isl_val_is_neg (val))\n+\twi = -wi;\n+      res = wide_int_to_tree (type, wi);\n+    }\n   isl_val_free (val);\n   isl_ast_expr_free (expr);\n-  mpz_clear (val_mpz_t);\n   return res;\n }\n "}, {"sha": "8ff9a22e1291660d6d4c22d15441db18405d9142", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "patch": "@@ -55,7 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n #include <isl/constraint.h>\n #include <isl/aff.h>\n #include <isl/val.h>\n-#include <isl/val_gmp.h>\n \n #include \"graphite.h\"\n \n@@ -154,16 +153,32 @@ extract_affine_name (scop_p s, tree e, __isl_take isl_space *space)\n   return isl_pw_aff_alloc (dom, aff);\n }\n \n+/* Convert WI to a isl_val with CTX.  */\n+\n+static __isl_give isl_val *\n+isl_val_int_from_wi (isl_ctx *ctx, const widest_int &wi)\n+{\n+  if (wi::neg_p (wi, SIGNED))\n+    {\n+      widest_int mwi = -wi;\n+      return isl_val_neg (isl_val_int_from_chunks (ctx, mwi.get_len (),\n+\t\t\t\t\t\t   sizeof (HOST_WIDE_INT),\n+\t\t\t\t\t\t   mwi.get_val ()));\n+    }\n+  return isl_val_int_from_chunks (ctx, wi.get_len (), sizeof (HOST_WIDE_INT),\n+\t\t\t\t  wi.get_val ());\n+}\n+\n /* Extract an affine expression from the gmp constant G.  */\n \n static isl_pw_aff *\n-extract_affine_gmp (mpz_t g, __isl_take isl_space *space)\n+extract_affine_wi (const widest_int &g, __isl_take isl_space *space)\n {\n   isl_local_space *ls = isl_local_space_from_space (isl_space_copy (space));\n   isl_aff *aff = isl_aff_zero_on_domain (ls);\n   isl_set *dom = isl_set_universe (space);\n   isl_ctx *ct = isl_aff_get_ctx (aff);\n-  isl_val *v = isl_val_int_from_gmp (ct, g);\n+  isl_val *v = isl_val_int_from_wi (ct, g);\n   aff = isl_aff_add_constant_val (aff, v);\n \n   return isl_pw_aff_alloc (dom, aff);\n@@ -174,13 +189,7 @@ extract_affine_gmp (mpz_t g, __isl_take isl_space *space)\n static isl_pw_aff *\n extract_affine_int (tree e, __isl_take isl_space *space)\n {\n-  mpz_t g;\n-\n-  mpz_init (g);\n-  tree_int_to_gmp (e, g);\n-  isl_pw_aff *res = extract_affine_gmp (g, space);\n-  mpz_clear (g);\n-\n+  isl_pw_aff *res = extract_affine_wi (wi::to_widest (e), space);\n   return res;\n }\n \n@@ -411,15 +420,11 @@ add_param_constraints (scop_p scop, graphite_dim_t p)\n     {\n       isl_space *space = isl_set_get_space (scop->param_context);\n       isl_constraint *c;\n-      mpz_t g;\n       isl_val *v;\n \n       c = isl_inequality_alloc (isl_local_space_from_space (space));\n-      mpz_init (g);\n-      tree_int_to_gmp (lb, g);\n-      v = isl_val_int_from_gmp (scop->isl_context, g);\n+      v = isl_val_int_from_wi (scop->isl_context, wi::to_widest (lb));\n       v = isl_val_neg (v);\n-      mpz_clear (g);\n       c = isl_constraint_set_constant_val (c, v);\n       c = isl_constraint_set_coefficient_si (c, isl_dim_param, p, 1);\n \n@@ -431,15 +436,11 @@ add_param_constraints (scop_p scop, graphite_dim_t p)\n     {\n       isl_space *space = isl_set_get_space (scop->param_context);\n       isl_constraint *c;\n-      mpz_t g;\n       isl_val *v;\n \n       c = isl_inequality_alloc (isl_local_space_from_space (space));\n \n-      mpz_init (g);\n-      tree_int_to_gmp (ub, g);\n-      v = isl_val_int_from_gmp (scop->isl_context, g);\n-      mpz_clear (g);\n+      v = isl_val_int_from_wi (scop->isl_context, wi::to_widest (ub));\n       c = isl_constraint_set_constant_val (c, v);\n       c = isl_constraint_set_coefficient_si (c, isl_dim_param, p, -1);\n \n@@ -773,11 +774,8 @@ add_loop_constraints (scop_p scop, __isl_take isl_set *domain, loop_p loop,\n       isl_local_space *ls = isl_local_space_from_space (space);\n       isl_constraint *c = isl_inequality_alloc (ls);\n       c = isl_constraint_set_coefficient_si (c, isl_dim_set, loop_index, -1);\n-      mpz_t g;\n-      mpz_init (g);\n-      tree_int_to_gmp (nb_iters, g);\n-      isl_val *v = isl_val_int_from_gmp (scop->isl_context, g);\n-      mpz_clear (g);\n+      isl_val *v\n+\t= isl_val_int_from_wi (scop->isl_context, wi::to_widest (nb_iters));\n       c = isl_constraint_set_constant_val (c, v);\n       return isl_set_add_constraint (domain, c);\n     }\n@@ -817,12 +815,9 @@ add_loop_constraints (scop_p scop, __isl_take isl_set *domain, loop_p loop,\n \n   /* NIT is an upper bound to NB_ITERS: \"NIT >= NB_ITERS\", although we\n      do not know whether the loop executes at least once.  */\n-  mpz_t g;\n-  mpz_init (g);\n-  wi::to_mpz (nit, g, SIGNED);\n-  mpz_sub_ui (g, g, 1);\n+  --nit;\n \n-  isl_pw_aff *approx = extract_affine_gmp (g, isl_space_copy (space));\n+  isl_pw_aff *approx = extract_affine_wi (nit, isl_space_copy (space));\n   isl_set *x = isl_pw_aff_ge_set (approx, aff_nb_iters);\n   x = isl_set_project_out (x, isl_dim_set, 0,\n \t\t\t   isl_set_dim (x, isl_dim_set));\n@@ -831,8 +826,7 @@ add_loop_constraints (scop_p scop, __isl_take isl_set *domain, loop_p loop,\n   ls = isl_local_space_from_space (space);\n   c = isl_inequality_alloc (ls);\n   c = isl_constraint_set_coefficient_si (c, isl_dim_set, loop_index, -1);\n-  isl_val *v = isl_val_int_from_gmp (scop->isl_context, g);\n-  mpz_clear (g);\n+  isl_val *v = isl_val_int_from_wi (scop->isl_context, nit);\n   c = isl_constraint_set_constant_val (c, v);\n \n   if (dump_file)"}, {"sha": "d22c4f2693f5233023e0cea76899ce2086da09a8", "filename": "gcc/graphite.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2Fgraphite.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc46a51d4ff8bc1c42b7e6ae472494733bed5c49/gcc%2Fgraphite.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.h?ref=cc46a51d4ff8bc1c42b7e6ae472494733bed5c49", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sese.h\"\n #include <isl/options.h>\n #include <isl/ctx.h>\n-#include <isl/val_gmp.h>\n+#include <isl/val.h>\n #include <isl/set.h>\n #include <isl/union_set.h>\n #include <isl/map.h>"}]}