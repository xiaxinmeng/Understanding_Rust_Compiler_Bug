{"sha": "38a4afeecdf392267ff73a27a69f458b5d8b424c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhNGFmZWVjZGYzOTIyNjdmZjczYTI3YTY5ZjQ1OGI1ZDhiNDI0Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-04-23T18:04:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-04-23T18:04:33Z"}, "message": "re PR c++/26534 ([4.1] bitfield wrong optimize)\n\n2006-04-23  Mark Mitchell  <mark@codesourcery.com>\n\n\tPR c++/26534\n\t* c-common.h (c_build_bitfield_integer_type): Declare.\n\t* c-decl.c (c_build_bitfield_integer_type): Move to ...\n\t* c-common.c (c_build_bitfield_integer_type): ... here.\n\n2006-04-23  Mark Mitchell  <mark@codesourcery.com>\n\n\tPR c++/26534\n\t* cp-tree.h (is_bitfield_expr_with_lowered_type): New function.\n\t* typeck.c (is_bitfield_expr_with_lowered_type): New function.\n\t(decay_conversion): Convert bitfield expressions to the correct\n\ttype.\n\t(build_modify_expr): Remove spurious conversions.\n\t* class.c (layout_class_type): Modify the type of bitfields to\n\tindicate a limited range. \n\t* call.c (standard_conversion): Adjust the type of bitfield\n\texpressions used in an rvalue context.\n\t(build_conditional_expr): Likewise.\n\t\n2006-04-23  Mark Mitchell  <mark@codesourcery.com>\n\n\tPR c++/26534\n\t* g++.dg/opt/bitfield1.C: New test.\n\t* g++.dg/compat/abi/bitfield1_main.C: Add -w.\n\t* g++.dg/compat/abi/bitfield1_x.C: Likewise.\n\t* g++.dg/compat/abi/bitfield1_y.C: Likewise.\n\t* g++.dg/compat/abi/bitfield2_main.C: Likewise.\n\t* g++.dg/compat/abi/bitfield2_x.C: Likewise.\n\t* g++.dg/compat/abi/bitfield2_y.C: Likewise.\n\t* g++.dg/abi/bitfield1.C: Add dg-warning markers.\n\t* g++.dg/abi/bitfield2.C: Likewise.\n\t* g++.dg/init/bitfield1.C: Likewise.\n\nFrom-SVN: r113199", "tree": {"sha": "795f298e0af32f79064b451399d8021ab268f911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/795f298e0af32f79064b451399d8021ab268f911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38a4afeecdf392267ff73a27a69f458b5d8b424c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a4afeecdf392267ff73a27a69f458b5d8b424c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a4afeecdf392267ff73a27a69f458b5d8b424c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a4afeecdf392267ff73a27a69f458b5d8b424c/comments", "author": null, "committer": null, "parents": [{"sha": "acb188c1ba3c0a94da659f679d4227f955488037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb188c1ba3c0a94da659f679d4227f955488037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb188c1ba3c0a94da659f679d4227f955488037"}], "stats": {"total": 224, "additions": 178, "deletions": 46}, "files": [{"sha": "08fc7c0197e3851ffb93fc3c86bbe519c91f46c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,3 +1,10 @@\n+2006-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26534\n+\t* c-common.h (c_build_bitfield_integer_type): Declare.\n+\t* c-decl.c (c_build_bitfield_integer_type): Move to ...\n+\t* c-common.c (c_build_bitfield_integer_type): ... here.\n+\n 2006-04-23  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/21283"}, {"sha": "35982e58c1ea38058bd8d7484559006748a9cbe1", "filename": "gcc/c-common.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1871,6 +1871,31 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n     return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);\n }\n \n+/* Build a bit-field integer type for the given WIDTH and UNSIGNEDP.  */\n+\n+tree\n+c_build_bitfield_integer_type (unsigned HOST_WIDE_INT width, int unsignedp)\n+{\n+  /* Extended integer types of the same width as a standard type have\n+     lesser rank, so those of the same width as int promote to int or\n+     unsigned int and are valid for printf formats expecting int or\n+     unsigned int.  To avoid such special cases, avoid creating\n+     extended integer types for bit-fields if a standard integer type\n+     is available.  */\n+  if (width == TYPE_PRECISION (integer_type_node))\n+    return unsignedp ? unsigned_type_node : integer_type_node;\n+  if (width == TYPE_PRECISION (signed_char_type_node))\n+    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n+  if (width == TYPE_PRECISION (short_integer_type_node))\n+    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n+  if (width == TYPE_PRECISION (long_integer_type_node))\n+    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n+  if (width == TYPE_PRECISION (long_long_integer_type_node))\n+    return (unsignedp ? long_long_unsigned_type_node\n+\t    : long_long_integer_type_node);\n+  return build_nonstandard_integer_type (width, unsignedp);\n+}\n+\n /* The C version of the register_builtin_type langhook.  */\n \n void"}, {"sha": "5636685efed1ad6654df074cac7e82b4bd768646", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -644,6 +644,7 @@ extern tree c_common_type_for_size (unsigned int, int);\n extern tree c_common_unsigned_type (tree);\n extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n+extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree c_common_truthvalue_conversion (tree);\n extern void c_apply_type_quals_to_decl (int, tree);\n extern tree c_sizeof_or_alignof_type (tree, bool, int);"}, {"sha": "f4d33307bf215bb54ec208518e77ca841beb5c24", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -3814,29 +3814,6 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n     }\n }\n \n-/* Build a bit-field integer type for the given WIDTH and UNSIGNEDP.  */\n-static tree\n-c_build_bitfield_integer_type (unsigned HOST_WIDE_INT width, int unsignedp)\n-{\n-  /* Extended integer types of the same width as a standard type have\n-     lesser rank, so those of the same width as int promote to int or\n-     unsigned int and are valid for printf formats expecting int or\n-     unsigned int.  To avoid such special cases, avoid creating\n-     extended integer types for bit-fields if a standard integer type\n-     is available.  */\n-  if (width == TYPE_PRECISION (integer_type_node))\n-    return unsignedp ? unsigned_type_node : integer_type_node;\n-  if (width == TYPE_PRECISION (signed_char_type_node))\n-    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n-  if (width == TYPE_PRECISION (short_integer_type_node))\n-    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n-  if (width == TYPE_PRECISION (long_integer_type_node))\n-    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n-  if (width == TYPE_PRECISION (long_long_integer_type_node))\n-    return (unsignedp ? long_long_unsigned_type_node\n-\t    : long_long_integer_type_node);\n-  return build_nonstandard_integer_type (width, unsignedp);\n-}\n \f\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared"}, {"sha": "9137c4423e89c34def4f2344469bfe4189905baf", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -15843,6 +15843,10 @@ do\n \t        lang_specs_files=\"$lang_specs_files $srcdir/$subdir/lang-specs.h\"\n \t    fi\n \t    ;;\n+        *)\n+\t    # This language is not enabled; skip it.\n+\t    continue\n+\t    ;;\n         esac\n \n \tif test -f $srcdir/$subdir/lang.opt; then"}, {"sha": "2fa8d99feb930cab1ebf2546bc8a7532bff49e7c", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -3325,6 +3325,10 @@ changequote(,)dnl\n \t        lang_specs_files=\"$lang_specs_files $srcdir/$subdir/lang-specs.h\"\n \t    fi\n \t    ;;\n+        *)\n+\t    # This language is not enabled; skip it.\n+\t    continue\n+\t    ;;\t\n         esac\n changequote([,])dnl\n "}, {"sha": "a0a44a54075b757c6dedd2d341e9dc7efe69fc1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,3 +1,17 @@\n+2006-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26534\n+\t* cp-tree.h (is_bitfield_expr_with_lowered_type): New function.\n+\t* typeck.c (is_bitfield_expr_with_lowered_type): New function.\n+\t(decay_conversion): Convert bitfield expressions to the correct\n+\ttype.\n+\t(build_modify_expr): Remove spurious conversions.\n+\t* class.c (layout_class_type): Modify the type of bitfields to\n+\tindicate a limited range. \n+\t* call.c (standard_conversion): Adjust the type of bitfield\n+\texpressions used in an rvalue context.\n+\t(build_conditional_expr): Likewise.\n+\t\n 2006-04-22  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* decl.c: Fix comment typos."}, {"sha": "6743f924c2dd297865f84d065135b1bd083c3e44", "filename": "gcc/cp/call.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -623,7 +623,16 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       conv = build_conv (ck_lvalue, from, conv);\n     }\n   else if (fromref || (expr && lvalue_p (expr)))\n-    conv = build_conv (ck_rvalue, from, conv);\n+    {\n+      if (expr)\n+\t{\n+\t  tree bitfield_type;\n+\t  bitfield_type = is_bitfield_expr_with_lowered_type (expr);\n+\t  if (bitfield_type)\n+\t    from = bitfield_type;\n+\t}\n+      conv = build_conv (ck_rvalue, from, conv);\n+    }\n \n    /* Allow conversion between `__complex__' data types.  */\n   if (tcode == COMPLEX_TYPE && fcode == COMPLEX_TYPE)\n@@ -3196,8 +3205,12 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n      array-to-pointer (_conv.array_), and function-to-pointer\n      (_conv.func_) standard conversions are performed on the second\n      and third operands.  */\n-  arg2_type = TREE_TYPE (arg2);\n-  arg3_type = TREE_TYPE (arg3);\n+  arg2_type = is_bitfield_expr_with_lowered_type (arg2);\n+  if (!arg2_type)\n+    arg2_type = TREE_TYPE (arg2);\n+  arg3_type = is_bitfield_expr_with_lowered_type (arg3);\n+  if (!arg3_type)\n+    arg3_type = TREE_TYPE (arg3);\n   if (VOID_TYPE_P (arg2_type) || VOID_TYPE_P (arg3_type))\n     {\n       /* Do the conversions.  We don't these for `void' type arguments"}, {"sha": "1cf87dc18a31b950c6f4c7fc4fc99969753aec5d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -4727,6 +4727,29 @@ layout_class_type (tree t, tree *virtuals_p)\n \t\t \"classes to be placed at different locations in a \"\n \t\t \"future version of GCC\", field);\n \n+      /* The middle end uses the type of expressions to determine the\n+\t possible range of expression values.  In order to optimize\n+\t \"x.i > 7\" to \"false\" for a 2-bit bitfield \"i\", the middle end\n+\t must be made aware of the width of \"i\", via its type.  \n+\n+         Because C++ does not have integer types of arbitrary width,\n+\t we must (for the purposes of the front end) convert from the\n+\t type assigned here to the declared type of the bitfield\n+\t whenever a bitfield expression is used as an rvalue.\n+\t Similarly, when assigning a value to a bitfield, the value\n+\t must be converted to the type given the bitfield here.  */\n+      if (DECL_C_BIT_FIELD (field))\n+\t{\n+\t  tree ftype;\n+\t  unsigned HOST_WIDE_INT width;\n+\t  ftype = TREE_TYPE (field);\n+\t  width = tree_low_cst (DECL_SIZE (field), /*unsignedp=*/1);\n+\t  if (width != TYPE_PRECISION (ftype))\n+\t    TREE_TYPE (field) \n+\t      = c_build_bitfield_integer_type (width, \n+\t\t\t\t\t       TYPE_UNSIGNED (ftype));\n+\t}\n+\n       /* If we needed additional padding after this field, add it\n \t now.  */\n       if (padding)"}, {"sha": "34cccc0a911fab926c92cd93aeb5938e01475011", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -4351,6 +4351,7 @@ extern tree cxx_sizeof_or_alignof_expr\t\t(tree, enum tree_code);\n extern tree cxx_sizeof_or_alignof_type\t\t(tree, enum tree_code, bool);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\t(tree);\n+extern tree is_bitfield_expr_with_lowered_type  (tree); \n extern tree decay_conversion\t\t\t(tree);\n extern tree default_conversion\t\t\t(tree);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool);"}, {"sha": "7fc6cab7aea8303c6708296504161a5c1ec3fbe6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1398,21 +1398,47 @@ invalid_nonstatic_memfn_p (tree expr)\n   return false;\n }\n \n+/* If EXP is a reference to a bitfield, and the type of EXP does not\n+   match the declared type of the bitfield, return the declared type\n+   of the bitfield.  Otherwise, return NULL_TREE.  */\n+\n+tree\n+is_bitfield_expr_with_lowered_type (tree exp)\n+{\n+  tree field;\n+\n+  if (TREE_CODE (exp) == COND_EXPR)\n+    {\n+      if (!is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 1)))\n+\treturn NULL_TREE;\n+      return is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 2));\n+    }\n+  if (TREE_CODE (exp) != COMPONENT_REF)\n+    return NULL_TREE;\n+  field = TREE_OPERAND (exp, 1);\n+  if (TREE_CODE (field) != FIELD_DECL || !DECL_C_BIT_FIELD (field))\n+    return NULL_TREE;\n+  if (same_type_ignoring_top_level_qualifiers_p\n+      (TREE_TYPE (exp), DECL_BIT_FIELD_TYPE (field)))\n+    return NULL_TREE;\n+  return DECL_BIT_FIELD_TYPE (field);\n+}\n+\n /* Perform the conversions in [expr] that apply when an lvalue appears\n    in an rvalue context: the lvalue-to-rvalue, array-to-pointer, and\n    function-to-pointer conversions.\n \n-   In addition manifest constants are replaced by their values.  */\n+   In addition, manifest constants are replaced by their values, and\n+   bitfield references are converted to their declared types.  */\n \n tree\n decay_conversion (tree exp)\n {\n   tree type;\n+  tree bitfield_type;\n   enum tree_code code;\n \n   type = TREE_TYPE (exp);\n-  code = TREE_CODE (type);\n-\n   if (type == error_mark_node)\n     return error_mark_node;\n \n@@ -1422,11 +1448,15 @@ decay_conversion (tree exp)\n       return error_mark_node;\n     }\n \n+  bitfield_type = is_bitfield_expr_with_lowered_type (exp);\n+  if (bitfield_type) \n+    exp = build_nop (bitfield_type, exp);\n+\n   exp = decl_constant_value (exp);\n \n   /* build_c_cast puts on a NOP_EXPR to make the result not an lvalue.\n      Leave such NOP_EXPRs, since RHS is being used in non-lvalue context.  */\n-\n+  code = TREE_CODE (type);\n   if (code == VOID_TYPE)\n     {\n       error (\"void value not ignored as it ought to be\");\n@@ -5500,11 +5530,9 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \n \tcond = build_conditional_expr\n \t  (TREE_OPERAND (lhs, 0),\n-\t   build_modify_expr (cp_convert (TREE_TYPE (lhs),\n-\t\t\t\t\t  TREE_OPERAND (lhs, 1)),\n+\t   build_modify_expr (TREE_OPERAND (lhs, 1),\n \t\t\t      modifycode, rhs),\n-\t   build_modify_expr (cp_convert (TREE_TYPE (lhs),\n-\t\t\t\t\t  TREE_OPERAND (lhs, 2)),\n+\t   build_modify_expr (TREE_OPERAND (lhs, 2),\n \t\t\t      modifycode, rhs));\n \n \tif (cond == error_mark_node)"}, {"sha": "eed02f235f6a17489c60087ec24498f0c6628c57", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -458,6 +458,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  print_node (file, \"offset\", DECL_FIELD_OFFSET (node), indent + 4);\n \t  print_node (file, \"bit offset\", DECL_FIELD_BIT_OFFSET (node),\n \t\t      indent + 4);\n+\t  if (DECL_BIT_FIELD_TYPE (node))\n+\t    print_node (file, \"bit_field_type\", DECL_BIT_FIELD_TYPE (node),\n+\t\t\tindent + 4);\n \t}\n \n       print_node_brief (file, \"context\", DECL_CONTEXT (node), indent + 4);"}, {"sha": "f0c3a5d5e0a8337419f5797e0b6a459a0f81312d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,3 +1,17 @@\n+2006-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26534\n+\t* g++.dg/opt/bitfield1.C: New test.\n+\t* g++.dg/compat/abi/bitfield1_main.C: Add -w.\n+\t* g++.dg/compat/abi/bitfield1_x.C: Likewise.\n+\t* g++.dg/compat/abi/bitfield1_y.C: Likewise.\n+\t* g++.dg/compat/abi/bitfield2_main.C: Likewise.\n+\t* g++.dg/compat/abi/bitfield2_x.C: Likewise.\n+\t* g++.dg/compat/abi/bitfield2_y.C: Likewise.\n+\t* g++.dg/abi/bitfield1.C: Add dg-warning markers.\n+\t* g++.dg/abi/bitfield2.C: Likewise.\n+\t* g++.dg/init/bitfield1.C: Likewise.\n+\n 2006-04-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25099"}, {"sha": "d5d04bcd73a99a5ec7c8b76e790756c24c6bb86b", "filename": "gcc/testsuite/g++.dg/abi/bitfield1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield1.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -19,7 +19,7 @@ int main ()\n {\n   A a;\n \n-  a.bitS = 1;\n+  a.bitS = 1; // { dg-warning \"overflow\" }\n   a.bitU = 1;\n   a.bit = 1;\n "}, {"sha": "452861ec29ac281f873a561d9ca01c506616ac02", "filename": "gcc/testsuite/g++.dg/abi/bitfield2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield2.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -19,9 +19,9 @@ int main ()\n {\n   A a;\n \n-  a.bitS = 1;\n+  a.bitS = 1; // { dg-warning \"overflow\" }\n   a.bitU = 1;\n-  a.bit = 1;\n+  a.bit = 1;  // { dg-warning \"overflow\" }\n \n   if (a.bitS != -1)\n     return 1;"}, {"sha": "ce9aa1f09adc227d76281b038fed278db9d3d5a9", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_main.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_main.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+// { dg-options \"-w -ansi -pedantic-errors -funsigned-bitfields\" }\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>"}, {"sha": "727632af89d429ae748149d663597d8d2fd81c8d", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_x.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+// { dg-options \"-w -ansi -pedantic-errors -funsigned-bitfields\" }\n \n #include \"bitfield1.h\"\n "}, {"sha": "2827767182514cb8e094588d53543b18fa8d2fcc", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_y.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+// { dg-options \"-w -ansi -pedantic-errors -funsigned-bitfields\" }\n \n extern \"C\" void abort (void);\n "}, {"sha": "4169843f93e97471934048458a13a9220704d799", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_main.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_main.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+// { dg-options \"-w -ansi -pedantic-errors -fsigned-bitfields\" }\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>"}, {"sha": "080d21b41eaf8a18471fce56c8766d8716180f1a", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_x.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+// { dg-options \"-w -ansi -pedantic-errors -fsigned-bitfields\" }\n \n #include \"bitfield1.h\"\n "}, {"sha": "d2757832861be02c5393de241cceb83394d1c17c", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_y.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+// { dg-options \"-w -ansi -pedantic-errors -fsigned-bitfields\" }\n \n extern \"C\" void abort (void);\n "}, {"sha": "70a06d0e144569db4d1b3ca6c1e9b62d5be38b4f", "filename": "gcc/testsuite/g++.dg/init/bitfield1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbitfield1.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -14,11 +14,11 @@ void f ();\n int main ()\n {\n   (f(), a.j) = 1;\n-  (f(), a).j = 2;\n-  (b ? a.j : a2.k) = 3;\n+  (f(), a).j = 2; // { dg-warning \"overflow\" } \n+  (b ? a.j : a2.k) = 3; // { dg-warning \"overflow\" } \n   (b ? a : a2).j = 0;\n   ++(a.j) = 1;\n-  (a.j = 2) = 3;\n+  (a.j = 2) = 3; // { dg-warning \"overflow\" } \n }\n \n     "}, {"sha": "496999613137c495702547bf0680e983ef3a89b3", "filename": "gcc/testsuite/g++.dg/opt/bitfield1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4afeecdf392267ff73a27a69f458b5d8b424c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbitfield1.C?ref=38a4afeecdf392267ff73a27a69f458b5d8b424c", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/26534\n+// { dg-do run } \n+// { dg-options \"-w -O2\" }\n+ \n+struct X\n+{\n+  unsigned a:4;\n+};\n+\n+unsigned i;\n+\n+int main()\n+{\n+  struct X x = { 63u };\n+  i = x.a;\n+  if (i != 15)\n+    return 1;\n+}"}]}