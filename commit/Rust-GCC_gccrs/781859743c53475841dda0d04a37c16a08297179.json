{"sha": "781859743c53475841dda0d04a37c16a08297179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxODU5NzQzYzUzNDc1ODQxZGRhMGQwNGEzN2MxNmEwODI5NzE3OQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2007-12-13T11:33:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T11:33:49Z"}, "message": "(Attribute_to_gnu): Check for violations of the No_Implicit_Dynamic_Code restriction.\n\n\t(Attribute_to_gnu): Check for violations of the No_Implicit_Dynamic_Code\n \trestriction. This checking used to be done in the front end, but is\n\tmoved here so we can make it more accurate.\n\nFrom-SVN: r130892", "tree": {"sha": "185b0961199bea185490382242cdf2cf05ad5e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185b0961199bea185490382242cdf2cf05ad5e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/781859743c53475841dda0d04a37c16a08297179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781859743c53475841dda0d04a37c16a08297179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781859743c53475841dda0d04a37c16a08297179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781859743c53475841dda0d04a37c16a08297179/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9b54d6447926ed75338187b33949009cf4afbbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b54d6447926ed75338187b33949009cf4afbbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b54d6447926ed75338187b33949009cf4afbbb"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "81ceb365c4588bfdfa57507b196676c47cf60b02", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781859743c53475841dda0d04a37c16a08297179/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781859743c53475841dda0d04a37c16a08297179/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=781859743c53475841dda0d04a37c16a08297179", "patch": "@@ -1,3 +1,9 @@\n+2007-12-13  Bob Duff  <duff@adacore.com>\n+\n+\t* trans.c (Attribute_to_gnu): Check for violations of the\n+\tNo_Implicit_Dynamic_Code restriction. This checking used to be done in\n+\tthe front end, but is moved here so we can make it more accurate.\n+\n 2007-12-13  Pascal Obry  <obry@adacore.com>\n \n \t* adaint.c (__gnat_pthread_setaffinity_np): New routine. A dummy"}, {"sha": "b750370ffbe2318c16f389de63570d816dbd0e65", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781859743c53475841dda0d04a37c16a08297179/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781859743c53475841dda0d04a37c16a08297179/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=781859743c53475841dda0d04a37c16a08297179", "patch": "@@ -878,6 +878,29 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t  if (TREE_CODE (gnu_expr) == ADDR_EXPR)\n \t    TREE_STATIC (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n \t}\n+\n+      /* For other address attributes applied to a nested function,\n+\t find an inner ADDR_EXPR and annotate it so that we can issue\n+\t a useful warning with -Wtrampolines.  */\n+      else if (TREE_CODE (TREE_TYPE (gnu_prefix)) == FUNCTION_TYPE)\n+\t{\n+\t  for (gnu_expr = gnu_result;\n+\t       TREE_CODE (gnu_expr) == NOP_EXPR\n+\t       || TREE_CODE (gnu_expr) == CONVERT_EXPR;\n+\t       gnu_expr = TREE_OPERAND (gnu_expr, 0))\n+\t    ;\n+\n+\t  if (TREE_CODE (gnu_expr) == ADDR_EXPR\n+\t      && decl_function_context (TREE_OPERAND (gnu_expr, 0)))\n+\t    {\n+\t      set_expr_location_from_node (gnu_expr, gnat_node);\n+\n+\t      /* Check that we're not violating the No_Implicit_Dynamic_Code\n+\t\t restriction.  Be conservative if we don't know anything\n+\t\t about the trampoline strategy for the target.  */\n+\t      Check_Implicit_Dynamic_Code_Allowed (gnat_node);\n+\t    }\n+\t}\n       break;\n \n     case Attr_Pool_Address:\n@@ -4643,15 +4666,15 @@ gnat_to_gnu (Node_Id gnat_node)\n  \t     (see build_allocator).  What we need to pass to free is the\n  \t     initial allocator's return value, which has been stored just in\n  \t     front of the block we have.  */\n- \n+\n  \t  if (No (Procedure_To_Call (gnat_node))\n-\t      && align > default_allocator_alignment\n+ \t      && align > default_allocator_alignment\n  \t      && ! TYPE_FAT_OR_THIN_POINTER_P (gnu_ptr_type))\n  \t    {\n  \t      /* We set GNU_PTR\n  \t\t as * (void **)((void *)GNU_PTR - (void *)sizeof(void *))\n  \t\t in two steps:  */\n- \t      \n+\n  \t      /* GNU_PTR (void *)\n \t\t = (void *)GNU_PTR - (void *)sizeof (void *))  */\n  \t      gnu_ptr\n@@ -4660,15 +4683,15 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t     convert (ptr_void_type_node, gnu_ptr),\n \t\t     convert (ptr_void_type_node,\n \t\t\t      TYPE_SIZE_UNIT (ptr_void_type_node)));\n- \t      \n+\n  \t      /* GNU_PTR (void *) = *(void **)GNU_PTR  */\n  \t      gnu_ptr\n  \t\t= build_unary_op\n \t\t    (INDIRECT_REF, NULL_TREE,\n \t\t     convert (build_pointer_type (ptr_void_type_node),\n \t\t\t      gnu_ptr));\n  \t    }\n- \n+\n \t  gnu_result = build_call_alloc_dealloc (gnu_ptr, gnu_obj_size, align,\n \t\t\t\t\t\t Procedure_To_Call (gnat_node),\n \t\t\t\t\t\t Storage_Pool (gnat_node),"}]}