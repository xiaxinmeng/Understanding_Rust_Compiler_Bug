{"sha": "4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlOGNmNzcwMjZiNmNkY2Y5YWI5Y2ZmNmU3MGE3NWVhNGJmYWRlZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T14:51:51Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T14:51:51Z"}, "message": "[ARM][GCC][1/2x]: MVE intrinsics with binary operands.\n\nThis patch supports following MVE ACLE intrinsics with binary operand.\n\nvsubq_n_f16, vsubq_n_f32, vbrsrq_n_f16, vbrsrq_n_f32, vcvtq_n_f16_s16, vcvtq_n_f32_s32, vcvtq_n_f16_u16, vcvtq_n_f32_u32, vcreateq_f16, vcreateq_f32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nIn this patch new constraint \"Rd\" is added, which checks the constant is with in the range of 1 to 16.\nAlso a new predicate \"mve_imm_16\" is added, to check the the matching constraint Rd.\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (BINOP_NONE_NONE_NONE_QUALIFIERS): Define\n\tqualifier for binary operands.\n\t(BINOP_NONE_NONE_IMM_QUALIFIERS): Likewise.\n\t(BINOP_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n\t(BINOP_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vsubq_n_f16): Define macro.\n\t(vsubq_n_f32): Likewise.\n\t(vbrsrq_n_f16): Likewise.\n\t(vbrsrq_n_f32): Likewise.\n\t(vcvtq_n_f16_s16): Likewise.\n\t(vcvtq_n_f32_s32): Likewise.\n\t(vcvtq_n_f16_u16): Likewise.\n\t(vcvtq_n_f32_u32): Likewise.\n\t(vcreateq_f16): Likewise.\n\t(vcreateq_f32): Likewise.\n\t(__arm_vsubq_n_f16): Define intrinsic.\n\t(__arm_vsubq_n_f32): Likewise.\n\t(__arm_vbrsrq_n_f16): Likewise.\n\t(__arm_vbrsrq_n_f32): Likewise.\n\t(__arm_vcvtq_n_f16_s16): Likewise.\n\t(__arm_vcvtq_n_f32_s32): Likewise.\n\t(__arm_vcvtq_n_f16_u16): Likewise.\n\t(__arm_vcvtq_n_f32_u32): Likewise.\n\t(__arm_vcreateq_f16): Likewise.\n\t(__arm_vcreateq_f32): Likewise.\n\t(vsubq): Define polymorphic variant.\n\t(vbrsrq): Likewise.\n\t(vcvtq_n): Likewise.\n\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_NONE_QUALIFIERS): Use\n\tit.\n\t(BINOP_NONE_NONE_IMM_QUALIFIERS): Likewise.\n\t(BINOP_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n\t(BINOP_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t* config/arm/constraints.md (Rd): Define constraint to check constant is\n\tin the range of 1 to 16.\n\t* config/arm/mve.md (mve_vsubq_n_f<mode>): Define RTL pattern.\n\tmve_vbrsrq_n_f<mode>: Likewise.\n\tmve_vcvtq_n_to_f_<supf><mode>: Likewise.\n\tmve_vcreateq_f<mode>: Likewise.\n\t* config/arm/predicates.md (mve_imm_16): Define predicate to check\n\tthe matching constraint Rd.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32.c: Likewise.", "tree": {"sha": "61038c260c518c78feefe7b61bd0df129552abdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61038c260c518c78feefe7b61bd0df129552abdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a475f1534312a5672b5cc73356625b8dc42829df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475f1534312a5672b5cc73356625b8dc42829df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a475f1534312a5672b5cc73356625b8dc42829df"}], "stats": {"total": 475, "additions": 471, "deletions": 4}, "files": [{"sha": "6cef738235987cd6400182cad64717d6634e9372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -1,3 +1,49 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (BINOP_NONE_NONE_NONE_QUALIFIERS): Define\n+\tqualifier for binary operands.\n+\t(BINOP_NONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t(BINOP_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n+\t(BINOP_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vsubq_n_f16): Define macro.\n+\t(vsubq_n_f32): Likewise.\n+\t(vbrsrq_n_f16): Likewise.\n+\t(vbrsrq_n_f32): Likewise.\n+\t(vcvtq_n_f16_s16): Likewise.\n+\t(vcvtq_n_f32_s32): Likewise.\n+\t(vcvtq_n_f16_u16): Likewise.\n+\t(vcvtq_n_f32_u32): Likewise.\n+\t(vcreateq_f16): Likewise.\n+\t(vcreateq_f32): Likewise.\n+\t(__arm_vsubq_n_f16): Define intrinsic.\n+\t(__arm_vsubq_n_f32): Likewise.\n+\t(__arm_vbrsrq_n_f16): Likewise.\n+\t(__arm_vbrsrq_n_f32): Likewise.\n+\t(__arm_vcvtq_n_f16_s16): Likewise.\n+\t(__arm_vcvtq_n_f32_s32): Likewise.\n+\t(__arm_vcvtq_n_f16_u16): Likewise.\n+\t(__arm_vcvtq_n_f32_u32): Likewise.\n+\t(__arm_vcreateq_f16): Likewise.\n+\t(__arm_vcreateq_f32): Likewise.\n+\t(vsubq): Define polymorphic variant.\n+\t(vbrsrq): Likewise.\n+\t(vcvtq_n): Likewise.\n+\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_NONE_QUALIFIERS): Use\n+\tit.\n+\t(BINOP_NONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t(BINOP_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n+\t(BINOP_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t* config/arm/constraints.md (Rd): Define constraint to check constant is\n+\tin the range of 1 to 16.\n+\t* config/arm/mve.md (mve_vsubq_n_f<mode>): Define RTL pattern.\n+\tmve_vbrsrq_n_f<mode>: Likewise.\n+\tmve_vcvtq_n_to_f_<supf><mode>: Likewise.\n+\tmve_vcreateq_f<mode>: Likewise.\n+\t* config/arm/predicates.md (mve_imm_16): Define predicate to check\n+\tthe matching constraint Rd.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "00e81acb73fd6b0e0566bea930c97d0c60b1d963", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -373,6 +373,30 @@ arm_unop_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define UNOP_UNONE_IMM_QUALIFIERS \\\n   (arm_unop_unone_imm_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_binop_none_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none };\n+#define BINOP_NONE_NONE_NONE_QUALIFIERS \\\n+  (arm_binop_none_none_none_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_none_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_immediate };\n+#define BINOP_NONE_NONE_IMM_QUALIFIERS \\\n+  (arm_binop_none_none_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_none_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_immediate };\n+#define BINOP_NONE_UNONE_IMM_QUALIFIERS \\\n+  (arm_binop_none_unone_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_none_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_unsigned };\n+#define BINOP_NONE_UNONE_UNONE_QUALIFIERS \\\n+  (arm_binop_none_unone_unone_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "acb71e46c3c447451b266832d17a4e54f1e5653d", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -197,6 +197,16 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vctp64q(__a) __arm_vctp64q(__a)\n #define vctp8q(__a) __arm_vctp8q(__a)\n #define vpnot(__a) __arm_vpnot(__a)\n+#define vsubq_n_f16(__a, __b) __arm_vsubq_n_f16(__a, __b)\n+#define vsubq_n_f32(__a, __b) __arm_vsubq_n_f32(__a, __b)\n+#define vbrsrq_n_f16(__a, __b) __arm_vbrsrq_n_f16(__a, __b)\n+#define vbrsrq_n_f32(__a, __b) __arm_vbrsrq_n_f32(__a, __b)\n+#define vcvtq_n_f16_s16(__a,  __imm6) __arm_vcvtq_n_f16_s16(__a,  __imm6)\n+#define vcvtq_n_f32_s32(__a,  __imm6) __arm_vcvtq_n_f32_s32(__a,  __imm6)\n+#define vcvtq_n_f16_u16(__a,  __imm6) __arm_vcvtq_n_f16_u16(__a,  __imm6)\n+#define vcvtq_n_f32_u32(__a,  __imm6) __arm_vcvtq_n_f32_u32(__a,  __imm6)\n+#define vcreateq_f16(__a, __b) __arm_vcreateq_f16(__a, __b)\n+#define vcreateq_f32(__a, __b) __arm_vcreateq_f32(__a, __b)\n #endif\n \n __extension__ extern __inline void\n@@ -1085,6 +1095,76 @@ __arm_vcvtmq_s32_f32 (float32x4_t __a)\n   return __builtin_mve_vcvtmq_sv4si (__a);\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_n_f16 (float16x8_t __a, float16_t __b)\n+{\n+  return __builtin_mve_vsubq_n_fv8hf (__a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_n_f32 (float32x4_t __a, float32_t __b)\n+{\n+  return __builtin_mve_vsubq_n_fv4sf (__a, __b);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vbrsrq_n_f16 (float16x8_t __a, int32_t __b)\n+{\n+  return __builtin_mve_vbrsrq_n_fv8hf (__a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vbrsrq_n_f32 (float32x4_t __a, int32_t __b)\n+{\n+  return __builtin_mve_vbrsrq_n_fv4sf (__a, __b);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_f16_s16 (int16x8_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_to_f_sv8hf (__a, __imm6);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_f32_s32 (int32x4_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_to_f_sv4sf (__a, __imm6);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_f16_u16 (uint16x8_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_to_f_uv8hf (__a, __imm6);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_f32_u32 (uint32x4_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_to_f_uv4sf (__a, __imm6);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_f16 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_fv8hf (__a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_f32 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_fv4sf (__a, __b);\n+}\n+\n #endif\n \n enum {\n@@ -1452,6 +1532,27 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t]: __arm_vcvtq_f16_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vcvtq_f32_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n \n+#define vsubq(p0,p1) __arm_vsubq(p0,p1)\n+#define __arm_vsubq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16_t]: __arm_vsubq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32_t]: __arm_vsubq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+\n+#define vbrsrq(p0,p1) __arm_vbrsrq(p0,p1)\n+#define __arm_vbrsrq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vbrsrq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vbrsrq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), p1));})\n+\n+#define vcvtq_n(p0,p1) __arm_vcvtq_n(p0,p1)\n+#define __arm_vcvtq_n(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vcvtq_n_f16_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vcvtq_n_f32_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vcvtq_n_f16_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vcvtq_n_f32_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1));})\n+\n #else /* MVE Interger.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)"}, {"sha": "1695fb254c8d7bc806b5e305a2e839fbeed4fa9f", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -6,7 +6,7 @@\n \n     GCC is free software; you can redistribute it and/or modify it\n     under the terms of the GNU General Public License as published\n-    by the Free Software Foundation; either version 3, or (at your\n+    by the Free Software Foundation; either version 3, or  (at your\n     option) any later version.\n \n     GCC is distributed in the hope that it will be useful, but WITHOUT\n@@ -76,3 +76,8 @@ VAR1 (UNOP_UNONE_UNONE, vctp32q, hi)\n VAR1 (UNOP_UNONE_UNONE, vctp64q, hi)\n VAR1 (UNOP_UNONE_UNONE, vctp8q, hi)\n VAR1 (UNOP_UNONE_UNONE, vpnot, hi)\n+VAR2 (BINOP_NONE_NONE_NONE, vsubq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n+VAR2 (BINOP_NONE_UNONE_IMM, vcvtq_n_to_f_u, v8hf, v4sf)\n+VAR2 (BINOP_NONE_UNONE_UNONE, vcreateq_f, v8hf, v4sf)"}, {"sha": "f92e4dcaab706fee9b0f2b365f4a84a9160f62a9", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -34,7 +34,7 @@\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, DN, Dm, Dl, DL, Do, Dv, Dy, Di,\n ;;\t\t\t Dt, Dp, Dz, Tu\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n-;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz\n+;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd\n ;; in all states: Pf, Pg\n \n ;; The following memory constraints have been used:\n@@ -53,6 +53,11 @@\n   \"MVE EVEN registers @code{r0}, @code{r2}, @code{r4}, @code{r6}, @code{r8},\n    @code{r10}, @code{r12}, @code{r14}\")\n \n+(define_constraint \"Rd\"\n+  \"@internal In Thumb-2 state a constant in range 1 to 16\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 16\")))\n+\n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n  \"The VFP registers @code{s0}-@code{s31}.\")\n "}, {"sha": "c0cd90101fd773278c4453a00ea014f2f1ea6860", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -36,7 +36,9 @@\n \t\t\t VREV32Q_U VREV32Q_S VMOVLTQ_U VMOVLTQ_S VMOVLBQ_S\n \t\t\t VMOVLBQ_U VCVTQ_FROM_F_S VCVTQ_FROM_F_U VCVTPQ_S\n \t\t\t VCVTPQ_U VCVTNQ_S VCVTNQ_U VCVTMQ_S VCVTMQ_U\n-\t\t\t VADDLVQ_U VCTP8Q VCTP16Q VCTP32Q VCTP64Q VPNOT])\n+\t\t\t VADDLVQ_U VCTP8Q VCTP16Q VCTP32Q VCTP64Q VPNOT\n+\t\t\t VCREATEQ_F VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U VBRSRQ_N_F\n+\t\t\t VSUBQ_N_F])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -52,7 +54,8 @@\n \t\t       (VCVTPQ_S \"s\") (VCVTPQ_U \"u\") (VCVTNQ_S \"s\")\n \t\t       (VCVTNQ_U \"u\") (VCVTMQ_S \"s\") (VCVTMQ_U \"u\")\n \t\t       (VCLZQ_U \"u\") (VCLZQ_S \"s\") (VREV32Q_U \"u\")\n-\t\t       (VREV32Q_S \"s\") (VADDLVQ_U \"u\") (VADDLVQ_S \"s\")])\n+\t\t       (VREV32Q_S \"s\") (VADDLVQ_U \"u\") (VADDLVQ_S \"s\")\n+\t\t       (VCVTQ_N_TO_F_S \"s\") (VCVTQ_N_TO_F_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\")])\n@@ -75,6 +78,7 @@\n (define_int_iterator VCVTMQ [VCVTMQ_S VCVTMQ_U])\n (define_int_iterator VADDLVQ [VADDLVQ_U VADDLVQ_S])\n (define_int_iterator VCTPQ [VCTP8Q VCTP16Q VCTP32Q VCTP64Q])\n+(define_int_iterator VCVTQ_N_TO_F [VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -687,3 +691,62 @@\n   \"vpnot\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vsubq_n_f])\n+;;\n+(define_insn \"mve_vsubq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VSUBQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vsub.f<V_sz_elem>  %q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vbrsrq_n_f])\n+;;\n+(define_insn \"mve_vbrsrq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t VBRSRQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vbrsr.<V_sz_elem>  %q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtq_n_to_f_s, vcvtq_n_to_f_u])\n+;;\n+(define_insn \"mve_vcvtq_n_to_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"mve_imm_16\" \"Rd\")]\n+\t VCVTQ_N_TO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvt.f<V_sz_elem>.<supf><V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;; [vcreateq_f])\n+;;\n+(define_insn \"mve_vcreateq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:DI 1 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:DI 2 \"s_register_operand\" \"r\")]\n+\t VCREATEQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmov %q0[2], %q0[0], %Q2, %Q1\\;vmov %q0[3], %q0[1], %R2, %R1\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])"}, {"sha": "bb7462e6c1aa283367dd6a34eb19807d6f8db4ad", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -31,6 +31,10 @@\n \t      || REGNO_REG_CLASS (REGNO (op)) != NO_REGS));\n })\n \n+;; True for immediates in the range of 1 to 16 for MVE.\n+(define_predicate \"mve_imm_16\"\n+  (match_test \"satisfies_constraint_Rd (op)\"))\n+\n ; Predicate for stack protector guard's address in\n ; stack_protect_combined_set_insn and stack_protect_combined_test_insn patterns\n (define_predicate \"guard_addr_operand\""}, {"sha": "c3a4317c8b9d7b75da4e14ea567ae54385f694df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -1,3 +1,18 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f16_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f16_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f32_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f32_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "2be3c8675cbb8a6df9cbbf3a4507932084d1d9c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_f16.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, int32_t b)\n+{\n+  return vbrsrq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.16\"  }  } */"}, {"sha": "3c002808b852304c828faa25f448c38834702312", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_f32.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, int32_t b)\n+{\n+  return vbrsrq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.32\"  }  } */"}, {"sha": "045f4153a9e24a49b7bcd774daba8d8161c6fd5c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f16.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "cc78738f6a44c83332b0d4399eea2f0ccd54345c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f32.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "7aea1237b1f85b5ad785b0416296f15cfca3330a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_f16_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f16_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f16_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f16_s16.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (int16x8_t a)\n+{\n+  return vcvtq_n_f16_s16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f16.s16\"  }  } */\n+\n+float16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vcvtq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f16.s16\"  }  } */"}, {"sha": "0985a60caede382dae63fe9551140f9783c80b74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_f16_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f16_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f16_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f16_u16.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (uint16x8_t a)\n+{\n+  return vcvtq_n_f16_u16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f16.u16\"  }  } */\n+\n+float16x8_t\n+foo1 (uint16x8_t a)\n+{\n+  return vcvtq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f16.u16\"  }  } */"}, {"sha": "8324e42c3233cfe243032190080a6c1db5bc92c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_f32_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f32_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f32_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f32_s32.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (int32x4_t a)\n+{\n+  return vcvtq_n_f32_s32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.s32\"  }  } */\n+\n+float32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vcvtq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.s32\"  }  } */"}, {"sha": "ea6125a445887bacf0957b4910eb7a276e0cb543", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_f32_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f32_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f32_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_f32_u32.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t a)\n+{\n+  return vcvtq_n_f32_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (uint32x4_t a)\n+{\n+  return vcvtq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.u32\"  }  } */"}, {"sha": "9ec403834b57782428f3aee22985ec2f3f78be87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f16.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vsubq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f16\"  }  } */"}, {"sha": "e5f8c644c42485dbf0b1b03841cc7b719f16eb9e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f32.c?ref=4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vsubq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f32\"  }  } */"}]}