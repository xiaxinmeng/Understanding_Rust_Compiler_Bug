{"sha": "2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzOWQ3YWFlYTUxZGIxYmNmYWJlN2I4ZjdiM2ZkYTZmMTk4ZjYwNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-04T00:20:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-04T00:20:31Z"}, "message": "alias.c (component_uses_parent_alias_set): Rename from can_address_p.\n\n        * alias.c (component_uses_parent_alias_set): Rename from\n        can_address_p.  Return bool.  Reverse the sense of the result.\n        Reinstate the check for alias set zero.\n        (get_alias_set): Update to match.\n        * alias.h (component_uses_parent_alias_set): Likewise.\n        * emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n        * expr.c (expand_assignment): Likewise.\n        * expr.h: Remove commented out prototypes that were moved to alias.h.\n\nFrom-SVN: r91712", "tree": {"sha": "c955f6935acd1dde2f9a2c0e759835c083b1cd04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c955f6935acd1dde2f9a2c0e759835c083b1cd04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/comments", "author": null, "committer": null, "parents": [{"sha": "1b68ae543cfdc2819d365dc59c759e67e34ff4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b68ae543cfdc2819d365dc59c759e67e34ff4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b68ae543cfdc2819d365dc59c759e67e34ff4a3"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "b507d6d46d642765811bf2d174ea8c63dbae0738", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -1,3 +1,14 @@\n+2004-12-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* alias.c (component_uses_parent_alias_set): Rename from \n+\tcan_address_p.  Return bool.  Reverse the sense of the result.\n+\tReinstate the check for alias set zero.\n+\t(get_alias_set): Update to match.\n+\t* alias.h (component_uses_parent_alias_set): Likewise.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n+\t* expr.c (expand_assignment): Likewise.\n+\t* expr.h: Remove commented out prototypes that were moved to alias.h.\n+\n 2004-12-03  Richard Henderson  <rth@redhat.com>\n \n \t* doc/tm.texi (TARGET_BUILD_BUILTIN_VA_LIST): New."}, {"sha": "e2b7adf156f7e671c6171254ea84f9e43142f72d", "filename": "gcc/alias.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -378,29 +378,36 @@ find_base_decl (tree t)\n     }\n }\n \n-/* Return 1 if all the nested component references handled by\n-   get_inner_reference in T are such that we can address the object in T.  */\n+/* Return true if all nested component references handled by\n+   get_inner_reference in T are such that we should use the alias set\n+   provided by the object at the heart of T.\n \n-int\n-can_address_p (tree t)\n+   This is true for non-addressable components (which don't have their\n+   own alias set), as well as components of objects in alias set zero.\n+   This later point is a special case wherein we wish to override the\n+   alias set used by the component, but we don't have per-FIELD_DECL\n+   assignable alias sets.  */\n+\n+bool\n+component_uses_parent_alias_set (tree t)\n {\n   while (1)\n     {\n-      /* If we're at the end, it is vacuously addressable.  */\n+      /* If we're at the end, it vacuously uses its own alias set.  */\n       if (!handled_component_p (t))\n-\treturn true;\n+\treturn false;\n \n       switch (TREE_CODE (t))\n \t{\n \tcase COMPONENT_REF:\n \t  if (DECL_NONADDRESSABLE_P (TREE_OPERAND (t, 1)))\n-\t    return false;\n+\t    return true;\n \t  break;\n \n \tcase ARRAY_REF:\n \tcase ARRAY_RANGE_REF:\n \t  if (TYPE_NONALIASED_COMPONENT (TREE_TYPE (TREE_OPERAND (t, 0))))\n-\t    return false;\n+\t    return true;\n \t  break;\n \n \tcase REALPART_EXPR:\n@@ -409,10 +416,12 @@ can_address_p (tree t)\n \n \tdefault:\n \t  /* Bitfields and casts are never addressable.  */\n-\t  return false;\n+\t  return true;\n \t}\n \n       t = TREE_OPERAND (t, 0);\n+      if (get_alias_set (TREE_TYPE (t)) == 0)\n+\treturn true;\n     }\n }\n \n@@ -515,7 +524,7 @@ get_alias_set (tree t)\n \n       /* Otherwise, pick up the outermost object that we could have a pointer\n \t to, processing conversions as above.  */\n-      while (handled_component_p (t) && ! can_address_p (t))\n+      while (component_uses_parent_alias_set (t))\n \t{\n \t  t = TREE_OPERAND (t, 0);\n \t  STRIP_NOPS (t);"}, {"sha": "58fe0bd17d46af33053010626d37943ba6312f46", "filename": "gcc/alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -25,6 +25,6 @@ extern HOST_WIDE_INT new_alias_set (void);\n extern HOST_WIDE_INT get_varargs_alias_set (void);\n extern HOST_WIDE_INT get_frame_alias_set (void);\n extern void record_base_value (unsigned int, rtx, int);\n-extern int can_address_p (tree);\n+extern bool component_uses_parent_alias_set (tree);\n \n #endif /* GCC_ALIAS_H */"}, {"sha": "6858f987ad6ea9251a46d14a9a5b4b963954ddaa", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -1546,9 +1546,9 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t     || TREE_CODE (t) == SAVE_EXPR)\n \tt = TREE_OPERAND (t, 0);\n \n-      /* If this expression can't be addressed (e.g., it contains a reference\n-\t to a non-addressable field), show we don't change its alias set.  */\n-      if (! can_address_p (t))\n+      /* If this expression uses it's parent's alias set, mark it such\n+\t that we won't change it.  */\n+      if (component_uses_parent_alias_set (t))\n \tMEM_KEEP_ALIAS_SET_P (ref) = 1;\n \n       /* If this is a decl, set the attributes of the MEM from it.  */"}, {"sha": "1a43145899143afd2a7409bd29edd9c22eeacd55", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -3810,8 +3810,7 @@ expand_assignment (tree to, tree from)\n \t\t done for MEM.  Also set MEM_KEEP_ALIAS_SET_P if needed.  */\n \t      if (volatilep)\n \t\tMEM_VOLATILE_P (to_rtx) = 1;\n-\n-\t      if (!can_address_p (to))\n+\t      if (component_uses_parent_alias_set (to))\n \t\tMEM_KEEP_ALIAS_SET_P (to_rtx) = 1;\n \t    }\n "}, {"sha": "64dccd069bd98add7994f113ea03c6e9b1a76c02", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -530,11 +530,6 @@ extern unsigned int case_values_threshold (void);\n \n /* Functions from alias.c */\n #include \"alias.h\"\n-/* extern HOST_WIDE_INT get_varargs_alias_set (void); */\n-/* extern HOST_WIDE_INT get_frame_alias_set (void); */\n-/* extern void record_base_value (unsigned int, rtx, int); */\n-/* extern HOST_WIDE_INT new_alias_set (void); */\n-/* extern int can_address_p (tree); */\n \n \f\n /* rtl.h and tree.h were included.  */"}, {"sha": "30e2bca6f48e9d033287457f4651bc9127ae9bda", "filename": "gcc/testsuite/gcc.dg/attr-may-alias-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-may-alias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2039d7aaea51db1bcfabe7b8f7b3fda6f198f605/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-may-alias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-may-alias-1.c?ref=2039d7aaea51db1bcfabe7b8f7b3fda6f198f605", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"dont_delete\" } } */\n+\n+typedef struct { int x; } __attribute__((may_alias)) S;\n+\n+extern void dont_delete (void);\n+\n+void f(S *s, float *f)\n+{\n+  s->x = 1;\n+  *f = 0;\n+  if (s->x != 1)\n+    dont_delete ();\n+}"}]}