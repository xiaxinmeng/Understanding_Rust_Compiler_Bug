{"sha": "ca78ecf41b07749728154abb7ec5fcd4bc3185d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3OGVjZjQxYjA3NzQ5NzI4MTU0YWJiN2VjNWZjZDRiYzMxODVkOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-07T19:35:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-07T19:35:25Z"}, "message": "re PR target/55224 (FAIL: gcc.target/i386/tailcall-1.c scan-assembler jmp)\n\n\tPR target/55224\n\t* config/i386/i386.c (ix86_function_ok_for_sibcall): Put back exception\n\tto make a sibcall if one of the functions has void return type.\n\nFrom-SVN: r193306", "tree": {"sha": "fbd2a083fdb6f4e86cf791f08354526c8d7af52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd2a083fdb6f4e86cf791f08354526c8d7af52f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca78ecf41b07749728154abb7ec5fcd4bc3185d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca78ecf41b07749728154abb7ec5fcd4bc3185d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca78ecf41b07749728154abb7ec5fcd4bc3185d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca78ecf41b07749728154abb7ec5fcd4bc3185d8/comments", "author": null, "committer": null, "parents": [{"sha": "17b5bd7b32d9c8fdfeffd5ab4337c26555e61ee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b5bd7b32d9c8fdfeffd5ab4337c26555e61ee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b5bd7b32d9c8fdfeffd5ab4337c26555e61ee4"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "ec33622ceb9a97698bf68fe1a3bae0baada1dc0f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca78ecf41b07749728154abb7ec5fcd4bc3185d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca78ecf41b07749728154abb7ec5fcd4bc3185d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ca78ecf41b07749728154abb7ec5fcd4bc3185d8", "patch": "@@ -65,22 +65,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"tree-flow.h\"\n \n-/* Check if a 256bit AVX register is referenced in stores.   */\n-\n-static void\n-check_avx256_stores (rtx dest, const_rtx set, void *data)\n-{\n-  if (((REG_P (dest) || MEM_P (dest))\n-       && VALID_AVX256_REG_OR_OI_MODE (GET_MODE (dest)))\n-      || (GET_CODE (set) == SET\n-\t  && (REG_P (SET_SRC (set)) || MEM_P (SET_SRC (set)))\n-\t  && VALID_AVX256_REG_OR_OI_MODE (GET_MODE (SET_SRC (set)))))\n-    {\n-      bool *used = (bool *) data;\n-      *used = true;\n-    }\n-}\n-\n static rtx legitimize_dllimport_symbol (rtx, bool);\n \n #ifndef CHECK_STACK_LIMIT\n@@ -4638,6 +4622,8 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n       if (!rtx_equal_p (a, b))\n \treturn false;\n     }\n+  else if (VOID_TYPE_P (TREE_TYPE (DECL_RESULT (cfun->decl))))\n+    ;\n   else if (!rtx_equal_p (a, b))\n     return false;\n \n@@ -14954,6 +14940,22 @@ output_387_binary_op (rtx insn, rtx *operands)\n   return buf;\n }\n \n+/* Check if a 256bit AVX register is referenced in stores.   */\n+\n+static void\n+check_avx256_stores (rtx dest, const_rtx set, void *data)\n+{\n+  if (((REG_P (dest) || MEM_P (dest))\n+       && VALID_AVX256_REG_OR_OI_MODE (GET_MODE (dest)))\n+      || (GET_CODE (set) == SET\n+\t  && (REG_P (SET_SRC (set)) || MEM_P (SET_SRC (set)))\n+\t  && VALID_AVX256_REG_OR_OI_MODE (GET_MODE (SET_SRC (set)))))\n+    {\n+      bool *used = (bool *) data;\n+      *used = true;\n+    }\n+}\n+\n /* Return needed mode for entity in optimize_mode_switching pass.  */\n \n static int"}]}