{"sha": "14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3NTVmYjBjMjdjYTIzNmFmZDNlZjZjMjY1MmJiYzQxOTJjNGFjMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-19T00:21:23Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-19T00:21:23Z"}, "message": "mn10300-protos.h: Remove the prototypes for call_address_operand, const_8bit_operand.\n\n\t* config/mn10300/mn10300-protos.h: Remove the prototypes for\n\tcall_address_operand, const_8bit_operand.\n\t* config/mn10300/mn10300.c (call_address_operand,\n\tconst_8bit_operand, const_1f_operand): Move to predicates.md.\n\t* config/mn10300/mn10300.h (PREDICATE_CODES): Remove.\n\t* config/mn10300/mn10300.md: Include predicates.md.\n\t* config/mn10300/predicates.md: New.\n\nFrom-SVN: r96712", "tree": {"sha": "eb91dc655c45d278b66cccbb737e9fb5b06919b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb91dc655c45d278b66cccbb737e9fb5b06919b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/comments", "author": null, "committer": null, "parents": [{"sha": "d9d4150fa205d21a3eb75c4839e114b530cb1687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d4150fa205d21a3eb75c4839e114b530cb1687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d4150fa205d21a3eb75c4839e114b530cb1687"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "d0882f39e29be254abc090a32437ec2b5689a022", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "patch": "@@ -1,3 +1,13 @@\n+2005-03-18  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/mn10300/mn10300-protos.h: Remove the prototypes for\n+\tcall_address_operand, const_8bit_operand.\n+\t* config/mn10300/mn10300.c (call_address_operand,\n+\tconst_8bit_operand, const_1f_operand): Move to predicates.md.\n+\t* config/mn10300/mn10300.h (PREDICATE_CODES): Remove.\n+\t* config/mn10300/mn10300.md: Include predicates.md.\n+\t* config/mn10300/predicates.md: New.\n+\n 2005-03-18  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-common.c, c-decl.c, c-format.c, c-typeck.c: Use %D for"}, {"sha": "2936dcf0de1837c3aa0b58290058cd3d57c7ee9e", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "patch": "@@ -40,9 +40,7 @@ extern enum reg_class secondary_reload_class (enum reg_class,\n extern const char *output_tst (rtx, rtx);\n extern int store_multiple_operation (rtx, enum machine_mode);\n extern int symbolic_operand (rtx, enum machine_mode);\n-extern int call_address_operand (rtx, enum machine_mode);\n extern int impossible_plus_operand (rtx, enum machine_mode);\n-extern int const_8bit_operand (rtx, enum machine_mode);\n \n extern bool mn10300_wide_const_load_uses_clr (rtx operands[2]);\n #endif /* RTX_CODE */"}, {"sha": "c419101c388d930866035befd9f49f53bbfe7393", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "patch": "@@ -1295,17 +1295,6 @@ store_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return mask;\n }\n \n-/* Return true if OP is a valid call operand.  */\n-\n-int\n-call_address_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  if (flag_pic)\n-    return (EXTRA_CONSTRAINT (op, 'S') || GET_CODE (op) == REG);\n-\n-  return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == REG);\n-}\n-\n /* What (if any) secondary registers are needed to move IN with mode\n    MODE into a register in register class CLASS. \n \n@@ -1675,24 +1664,6 @@ impossible_plus_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n-/* Return 1 if X is a CONST_INT that is only 8 bits wide.  This is used\n-   for the btst insn which may examine memory or a register (the memory\n-   variant only allows an unsigned 8 bit integer).  */\n-int\n-const_8bit_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return (GET_CODE (op) == CONST_INT\n-\t  && INTVAL (op) >= 0\n-\t  && INTVAL (op) < 256);\n-}\n-\n-/* Return true if the operand is the 1.0f constant.  */\n-int\n-const_1f_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return (op == CONST1_RTX (SFmode));\n-}\n-\n /* Similarly, but when using a zero_extract pattern for a btst where\n    the source operand might end up in memory.  */\n int"}, {"sha": "4b1e44debf1a44f8a5e01410925cc4acdef941fa", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "patch": "@@ -1073,11 +1073,6 @@ while (0)\n \n #define FILE_ASM_OP \"\\t.file\\n\"\n \n-#define PREDICATE_CODES\t\t\t\t\t\\\n-  {\"const_1f_operand\", {CONST_INT, CONST_DOUBLE}},\t\\\n-  {\"const_8bit_operand\", {CONST_INT}},\t\t\t\\\n-  {\"call_address_operand\", {SYMBOL_REF, REG, UNSPEC}},\n-\n typedef struct mn10300_cc_status_mdep\n   {\n     int fpCC;"}, {"sha": "0d51857a199bd08f2f55b1de7f9ec6d435c9b609", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Matsushita MN10300\n-;; Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n ;; Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n@@ -47,6 +47,8 @@\n   (UNSPEC_GOTOFF\t3)\n   (UNSPEC_PLT\t\t4)\n ])\n+\n+(include \"predicates.md\")\n \f\n ;; ----------------------------------------------------------------------\n ;; MOVE INSTRUCTIONS"}, {"sha": "752ccd89d4f21f264248b1fe33180314f8c275ed", "filename": "gcc/config/mn10300/predicates.md", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14755fb0c27ca236afd3ef6c2652bbc4192c4ac0/gcc%2Fconfig%2Fmn10300%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fpredicates.md?ref=14755fb0c27ca236afd3ef6c2652bbc4192c4ac0", "patch": "@@ -0,0 +1,50 @@\n+;; Predicate definitions for Matsushita MN10300.\n+;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+;; Return true if the operand is the 1.0f constant.\n+\n+(define_predicate \"const_1f_operand\"\n+  (match_code \"const_int,const_double\")\n+{\n+  return (op == CONST1_RTX (SFmode));\n+})\n+\n+;; Return 1 if X is a CONST_INT that is only 8 bits wide.  This is\n+;; used for the btst insn which may examine memory or a register (the\n+;; memory variant only allows an unsigned 8 bit integer).\n+\n+(define_predicate \"const_8bit_operand\"\n+  (match_code \"const_int\")\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && INTVAL (op) >= 0\n+\t  && INTVAL (op) < 256);\n+})\n+\n+;; Return true if OP is a valid call operand.\n+\n+(define_predicate \"call_address_operand\"\n+  (match_code \"symbol_ref,reg,unspec\")\n+{\n+  if (flag_pic)\n+    return (EXTRA_CONSTRAINT (op, 'S') || GET_CODE (op) == REG);\n+\n+  return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == REG);\n+})"}]}