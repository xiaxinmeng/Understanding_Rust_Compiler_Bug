{"sha": "2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5ZWQzYmMxMGUwMmMzNDMwZmE2MzkzYjYwNDA5NWNiNGJkOTQzYQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2011-12-23T05:43:09Z"}, "committer": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2011-12-23T05:43:09Z"}, "message": "re PR tree-optimization/43491 (Unnecessary temporary for global register variable)\n\n2011-12-22  Bin Cheng  <bin.cheng@arm.com>\n\tRichard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43491\n\t* tree-ssa-pre.c (eliminate): Don't replace global register\n\tvariable when it is the RHS of a single assign.\n\n\ttestsuite:\n\t* gcc.dg/tree-ssa/pr43491.c: New test.\n\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r182650", "tree": {"sha": "dcbbdbfe25be1bb7cb6bb32976e61c401d6ec529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcbbdbfe25be1bb7cb6bb32976e61c401d6ec529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/comments", "author": null, "committer": null, "parents": [{"sha": "994182df2760962dc90ab4f2eace2de84c669133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994182df2760962dc90ab4f2eace2de84c669133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994182df2760962dc90ab4f2eace2de84c669133"}], "stats": {"total": 89, "additions": 77, "deletions": 12}, "files": [{"sha": "d739d2e969dd623a3025a3030179fb439da86739", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "patch": "@@ -1,3 +1,10 @@\n+2011-12-22  Bin Cheng  <bin.cheng@arm.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43491\n+\t* tree-ssa-pre.c (eliminate): Don't replace global register\n+\tvariable when it is the RHS of a single assign.\n+\n 2011-12-22  Joey Ye  <joey.ye@arm.com>\n \n \t* toplev.c (process_options): Fix typo."}, {"sha": "0594a96f44162dbc7b36e3ce13f3a95b93ebafbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "patch": "@@ -1,3 +1,8 @@\n+2011-12-22  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/43491\n+\t* gcc.dg/tree-ssa/pr43491.c: New test.\n+\n 2011-12-22  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR testsuite/50722"}, {"sha": "247340044567fceb1c0704e5a4713fd249d2de7b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr43491.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr43491.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr43491.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr43491.c?ref=2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+#define REGISTER register\n+\n+#if defined __arm__\n+# define REG1 asm(\"r4\")\n+#elif defined __i386__\n+# define REG1 asm(\"ebx\")\n+#elif defined __mips__\n+# define REG1 asm(\"s0\")\n+#elif defined __x86_64__\n+# define REG1 asm(\"rbp\")\n+#else\n+# undef REGISTER\n+# define REGISTER\n+# define REG1\n+#endif\n+\n+REGISTER long data_0 REG1;\n+long data_3; \n+\n+long foo(long data, long v)\n+{\n+\tlong i;\n+\tlong t, u;\n+\n+\tif (data)\n+\t\ti = data_0 + data_3;\n+\telse {\n+\t\tv = 2;\n+\t\ti = 5;\n+\t}\n+\tt = data_0 + data_3;\n+\tu = i;\n+\treturn v * t * u;\n+}\n+/* We should not eliminate global register variable when it is the RHS of\n+   a single assignment.  */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\" { target { arm-*-* i?86-*-* mips*-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"pre\" { target { ! { arm-*-* i?86-*-* mips*-*-* x86_64-*-* } } } } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "6e86024917b25ae0e970ac3e76e160586bdae53e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9ed3bc10e02c3430fa6393b604095cb4bd943a/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=2b9ed3bc10e02c3430fa6393b604095cb4bd943a", "patch": "@@ -4161,28 +4161,40 @@ eliminate (void)\n     {\n       for (gsi = gsi_start_bb (b); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n+\t  tree lhs = NULL_TREE;\n+\t  tree rhs = NULL_TREE;\n+\n \t  stmt = gsi_stmt (gsi);\n \n+\t  if (gimple_has_lhs (stmt))\n+\t    lhs = gimple_get_lhs (stmt);\n+\n+\t  if (gimple_assign_single_p (stmt))\n+\t    rhs = gimple_assign_rhs1 (stmt);\n+\n \t  /* Lookup the RHS of the expression, see if we have an\n \t     available computation for it.  If so, replace the RHS with\n-\t     the available computation.  */\n+\t     the available computation.\n+\n+\t     See PR43491.\n+\t     We don't replace global register variable when it is a the RHS of\n+\t     a single assign. We do replace local register variable since gcc\n+\t     does not guarantee local variable will be allocated in register.  */\n \t  if (gimple_has_lhs (stmt)\n-\t      && TREE_CODE (gimple_get_lhs (stmt)) == SSA_NAME\n+\t      && TREE_CODE (lhs) == SSA_NAME\n \t      && !gimple_assign_ssa_name_copy_p (stmt)\n \t      && (!gimple_assign_single_p (stmt)\n-\t\t  || !is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n+\t\t  || (!is_gimple_min_invariant (rhs)\n+                      && (gimple_assign_rhs_code (stmt) != VAR_DECL\n+                          || !is_global_var (rhs)\n+                          || !DECL_HARD_REGISTER (rhs))))\n \t      && !gimple_has_volatile_ops  (stmt)\n-\t      && !has_zero_uses (gimple_get_lhs (stmt)))\n+\t      && !has_zero_uses (lhs))\n \t    {\n-\t      tree lhs = gimple_get_lhs (stmt);\n-\t      tree rhs = NULL_TREE;\n \t      tree sprime = NULL;\n \t      pre_expr lhsexpr = get_or_alloc_expr_for_name (lhs);\n \t      pre_expr sprimeexpr;\n \n-\t      if (gimple_assign_single_p (stmt))\n-\t\trhs = gimple_assign_rhs1 (stmt);\n-\n \t      sprimeexpr = bitmap_find_leader (AVAIL_OUT (b),\n \t\t\t\t\t       get_expr_value_id (lhsexpr),\n \t\t\t\t\t       NULL);\n@@ -4298,10 +4310,9 @@ eliminate (void)\n \t     dead.  */\n \t  else if (gimple_assign_single_p (stmt)\n \t\t   && !is_gimple_reg (gimple_assign_lhs (stmt))\n-\t\t   && (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n-\t\t       || is_gimple_min_invariant (gimple_assign_rhs1 (stmt))))\n+\t\t   && (TREE_CODE (rhs) == SSA_NAME\n+\t\t       || is_gimple_min_invariant (rhs)))\n \t    {\n-\t      tree rhs = gimple_assign_rhs1 (stmt);\n \t      tree val;\n \t      val = vn_reference_lookup (gimple_assign_lhs (stmt),\n \t\t\t\t\t gimple_vuse (stmt), VN_WALK, NULL);"}]}