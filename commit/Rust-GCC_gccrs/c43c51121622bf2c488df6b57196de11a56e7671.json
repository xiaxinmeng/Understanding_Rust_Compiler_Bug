{"sha": "c43c51121622bf2c488df6b57196de11a56e7671", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQzYzUxMTIxNjIyYmYyYzQ4OGRmNmI1NzE5NmRlMTFhNTZlNzY3MQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2016-08-09T02:47:25Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2016-08-09T02:47:25Z"}, "message": "Make autofdo tests safer for parallel builds\n\nThere were some reports that the autofdo tests are non deterministic\nwith parallel builds. I wasn't able to reproduce this, but here are\ntwo changes that may help:\n\n- Always use unique file names for temporary files.\n- Don't print file names in the test log because the directories\ncan vary (suggested by Jeff Law)\n\ngcc/testsuite/:\n\n2016-08-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* lib/profopt.exp: (auto-profopt-execute): Don't include full\n\ttest command line in failure log.\n\t(profopt-execute): dito. Make autofdo file names unique.\n\nFrom-SVN: r239265", "tree": {"sha": "de7e2c2beef084535f68f160a0ce7d32c2b15294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7e2c2beef084535f68f160a0ce7d32c2b15294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c43c51121622bf2c488df6b57196de11a56e7671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43c51121622bf2c488df6b57196de11a56e7671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43c51121622bf2c488df6b57196de11a56e7671", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43c51121622bf2c488df6b57196de11a56e7671/comments", "author": null, "committer": null, "parents": [{"sha": "5e1a1c978f8e12b333979c93be32b7f92a0be1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1a1c978f8e12b333979c93be32b7f92a0be1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1a1c978f8e12b333979c93be32b7f92a0be1b7"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "c00824dfd911dd6e22b7891836cf2673543f7e6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43c51121622bf2c488df6b57196de11a56e7671/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43c51121622bf2c488df6b57196de11a56e7671/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c43c51121622bf2c488df6b57196de11a56e7671", "patch": "@@ -1,3 +1,9 @@\n+2016-08-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* lib/profopt.exp: (auto-profopt-execute): Don't include full\n+\ttest command line in failure log.\n+\t(profopt-execute): dito. Make autofdo file names unique.\n+\n 2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/64955"}, {"sha": "7c3228ae3b274de28c22feccffcae01c7be79727", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43c51121622bf2c488df6b57196de11a56e7671/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43c51121622bf2c488df6b57196de11a56e7671/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=c43c51121622bf2c488df6b57196de11a56e7671", "patch": "@@ -283,7 +283,7 @@ proc auto-profopt-execute { src } {\n \n     if { ! [check_profiling_available \"-fauto-profile\"] } {\n         regsub \"(?q)$srcdir/\" $src \"\" testcase\n-        unsupported \"$testcase\"\n+        unsupported \"$src -fauto-profile\"\n         return\n     }\n     set profile_wrapper [profopt-perf-wrapper]\n@@ -388,7 +388,7 @@ proc profopt-execute { src } {\n \t# valid, by running it after dg-additional-files-options.\n \tforeach ext $prof_ext {\n \t    profopt-target-cleanup $tmpdir $base $ext\n-\t    profopt-target-cleanup $tmpdir perf data\n+\t    profopt-target-cleanup $tmpdir $base \"perf.data\"\n \t}\n \n \t# Tree profiling requires TLS runtime support, which may need\n@@ -417,8 +417,8 @@ proc profopt-execute { src } {\n \t    }\n \t    set orig_ld_library_path \"[getenv LD_LIBRARY_PATH]\"\n \t    setenv LD_LIBRARY_PATH \"$ld_library_path:$orig_ld_library_path\"\n-\t    verbose -log \"Running $profile_wrapper $execname1\"\n-\t    set id [remote_spawn \"\" \"$profile_wrapper $execname1\" \"readonly\"]\n+\t    verbose -log \"Running $profile_wrapper -o $tmpdir/$base.perf.data $execname1\"\n+\t    set id [remote_spawn \"\" \"$profile_wrapper -o $tmpdir/$base.perf.data $execname1\" \"readonly\"]\n \t    setenv LD_LIBRARY_PATH $orig_ld_library_path\n \t    if { $id < 0 } {\n \t\twarning \"Failed to run profiler\"\n@@ -439,15 +439,17 @@ proc profopt-execute { src } {\n \t}\n \n \tset missing_file 0\n+        set bprefix \"\"\n \t# Make sure the profile data was generated, and fail if not.\n \tif { $status == \"pass\" } {\n \t    # convert profile\n \t    if { $run_autofdo == 1 } {\n-\t\tset cmd \"create_gcov --binary $execname1 --profile=perf.data -gcov_version=1 --gcov=$tmpdir/$base.$ext\"\n+                set bprefix \"afdo.\"\n+\t\tset cmd \"create_gcov --binary $execname1 --profile=$tmpdir/$base.perf.data -gcov_version=1 --gcov=$tmpdir/$bprefix$base.$ext\"\n \t\tverbose \"Running $cmd\"\n \t\tset id [remote_spawn \"\" $cmd]\n \t\tif { $id < 0 } {\n-\t\t    unsupported \"$testcase: Cannot run $cmd\"\n+\t\t    unsupported \"$src -fauto-profile: cannot run create_gcov\"\n \t\t    set status \"fail\"\n \t\t    return\n \t\t}\n@@ -456,12 +458,12 @@ proc profopt-execute { src } {\n \t    }\n \n \t    foreach ext $prof_ext {\n-\t\tremote_upload target $tmpdir/$base.$ext\n-\t\tset files [glob -nocomplain $base.$ext]\n+\t\tremote_upload target $tmpdir/$bprefix$base.$ext\n+\t\tset files [glob -nocomplain $bprefix$base.$ext]\n \t\tif { $files == \"\" } {\n \t\t    set status \"fail\"\n \t\t    set missing_file 1\n-\t\t    fail \"$testcase execution: file $base.$ext does not exist, $option $profile_option\"\n+\t\t    fail \"$testcase execution: file $bprefix$base.$ext does not exist, $option $profile_option\"\n \t\t}\n \t    }\n \t}\n@@ -490,7 +492,7 @@ proc profopt-execute { src } {\n \tlappend options \"additional_flags=$option $extra_flags $feedback_option\"\n \tset optstr \"$option $feedback_option\"\n \tif { [string first \"-fauto-profile\" $options] >= 0} {\n-\t    set options [regsub -- \"-fauto-profile\" $options \"-fauto-profile=$tmpdir/$base.$ext\"]\n+\t    set options [regsub -- \"-fauto-profile\" $options \"-fauto-profile=$tmpdir/$bprefix$base.$ext\"]\n \t}\n \n \tset comp_output [${tool}_target_compile \"$src\" \"$execname2\" \"executable\" $options]\n@@ -516,8 +518,8 @@ proc profopt-execute { src } {\n \n \t# Remove the profiling data files.\n \tforeach ext $prof_ext {\n-\t    profopt-target-cleanup $tmpdir $base $ext\n-\t    profopt-target-cleanup $tmpdir perf data\n+\t    profopt-target-cleanup $tmpdir \"$bprefix$base\" $ext\n+\t    profopt-target-cleanup $tmpdir $base \"perf.data\"\n \t    profopt-target-cleanup $tmpdir $base \"gcda.imports\"\n \t}\n "}]}