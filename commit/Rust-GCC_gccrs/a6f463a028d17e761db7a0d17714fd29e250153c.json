{"sha": "a6f463a028d17e761db7a0d17714fd29e250153c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmNDYzYTAyOGQxN2U3NjFkYjdhMGQxNzcxNGZkMjllMjUwMTUzYw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-08-07T09:58:29Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-08-07T09:58:29Z"}, "message": "sh.h (EXTRA_CONSTRAINT_Q): Adjust to GNU Coding Standards.\n\n* sh.h (EXTRA_CONSTRAINT_Q): Adjust to GNU Coding Standards.\n* sh.c (expand_block_move): Break long lines.\n(expand_ashiftrt, fpscr_set_from_mem): Likewise.\n* sh.md (mulsi3): Likewise.\n(movdi): Adjust spacing.\n\nFrom-SVN: r35548", "tree": {"sha": "d817d934c607477a136432e307ca600d45aadc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d817d934c607477a136432e307ca600d45aadc40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f463a028d17e761db7a0d17714fd29e250153c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f463a028d17e761db7a0d17714fd29e250153c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f463a028d17e761db7a0d17714fd29e250153c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f463a028d17e761db7a0d17714fd29e250153c/comments", "author": null, "committer": null, "parents": [{"sha": "1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "a25c60c2817dfa4ff6fcdde9d6c877e5114f3541", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6f463a028d17e761db7a0d17714fd29e250153c", "patch": "@@ -1,3 +1,11 @@\n+2000-08-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* sh.h (EXTRA_CONSTRAINT_Q): Adjust to GNU Coding Standards.\n+\t* sh.c (expand_block_move): Break long lines.\n+\t(expand_ashiftrt, fpscr_set_from_mem): Likewise.\n+\t* sh.md (mulsi3): Likewise.\n+\t(movdi): Adjust spacing.\n+\n 2000-08-07  Richard Henderson  <rth@cygnus.com>\n \n \t* expmed.c (store_bit_field): Don't require MEM_IN_STRUCT_P."}, {"sha": "99bb71a69107d8cafb14bf29c494220cdd85489f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a6f463a028d17e761db7a0d17714fd29e250153c", "patch": "@@ -356,16 +356,15 @@ expand_block_move (operands)\n       else if (bytes == 12)\n \t{\n \t  tree entry_name;\n+\t  rtx sym;\n \t  rtx func_addr_rtx;\n \t  rtx r4 = gen_rtx (REG, SImode, 4);\n \t  rtx r5 = gen_rtx (REG, SImode, 5);\n \n \t  entry_name = get_identifier (\"__movstrSI12_i4\");\n \n-\t  func_addr_rtx\n-\t    = copy_to_mode_reg (Pmode,\n-\t\t\t\tgen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t    IDENTIFIER_POINTER (entry_name)));\n+\t  sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+\t  func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n \t  force_into (XEXP (operands[0], 0), r4);\n \t  force_into (XEXP (operands[1], 0), r5);\n \t  emit_insn (gen_block_move_real_i4 (func_addr_rtx));\n@@ -374,6 +373,7 @@ expand_block_move (operands)\n       else if (! TARGET_SMALLCODE)\n \t{\n \t  tree entry_name;\n+\t  rtx sym;\n \t  rtx func_addr_rtx;\n \t  int dwords;\n \t  rtx r4 = gen_rtx (REG, SImode, 4);\n@@ -383,10 +383,8 @@ expand_block_move (operands)\n \t  entry_name = get_identifier (bytes & 4\n \t\t\t\t       ? \"__movstr_i4_odd\"\n \t\t\t\t       : \"__movstr_i4_even\");\n-\t  func_addr_rtx\n-\t    = copy_to_mode_reg (Pmode,\n-\t\t\t\tgen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t    IDENTIFIER_POINTER (entry_name)));\n+\t  sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+\t  func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n \t  force_into (XEXP (operands[0], 0), r4);\n \t  force_into (XEXP (operands[1], 0), r5);\n \n@@ -402,17 +400,15 @@ expand_block_move (operands)\n     {\n       char entry[30];\n       tree entry_name;\n+      rtx sym;\n       rtx func_addr_rtx;\n       rtx r4 = gen_rtx_REG (SImode, 4);\n       rtx r5 = gen_rtx_REG (SImode, 5);\n \n       sprintf (entry, \"__movstrSI%d\", bytes);\n       entry_name = get_identifier (entry);\n-\n-      func_addr_rtx\n-\t= copy_to_mode_reg (Pmode,\n-\t\t\t    gen_rtx_SYMBOL_REF\n-\t\t\t    (Pmode, IDENTIFIER_POINTER (entry_name)));\n+      sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+      func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n       force_into (XEXP (operands[0], 0), r4);\n       force_into (XEXP (operands[1], 0), r5);\n       emit_insn (gen_block_move_real (func_addr_rtx));\n@@ -424,17 +420,16 @@ expand_block_move (operands)\n   if (! TARGET_SMALLCODE)\n     {\n       tree entry_name;\n+      rtx sym;\n       rtx func_addr_rtx;\n       int final_switch, while_loop;\n       rtx r4 = gen_rtx_REG (SImode, 4);\n       rtx r5 = gen_rtx_REG (SImode, 5);\n       rtx r6 = gen_rtx_REG (SImode, 6);\n \n       entry_name = get_identifier (\"__movstr\");\n-      func_addr_rtx\n-\t= copy_to_mode_reg (Pmode,\n-\t\t\t    gen_rtx_SYMBOL_REF\n-\t\t\t    (Pmode, IDENTIFIER_POINTER (entry_name)));\n+      sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+      func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n       force_into (XEXP (operands[0], 0), r4);\n       force_into (XEXP (operands[1], 0), r5);\n \n@@ -1178,6 +1173,7 @@ int\n expand_ashiftrt (operands)\n      rtx *operands;\n {\n+  rtx sym;\n   rtx wrk;\n   char func[18];\n   tree func_name;\n@@ -1238,8 +1234,8 @@ expand_ashiftrt (operands)\n   emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n   sprintf (func, \"__ashiftrt_r4_%d\", value);\n   func_name = get_identifier (func);\n-  emit_move_insn (wrk, gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t   IDENTIFIER_POINTER (func_name)));\n+  sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (func_name));\n+  emit_move_insn (wrk, sym);\n   emit_insn (gen_ashrsi3_n (GEN_INT (value), wrk));\n   emit_move_insn (operands[0], gen_rtx_REG (SImode, 4));\n   return 1;\n@@ -5111,10 +5107,11 @@ fpscr_set_from_mem (mode, regs_live)\n {\n   enum attr_fp_mode fp_mode = mode;\n   rtx i;\n+  rtx sym;\n   rtx addr_reg = get_free_reg (regs_live);\n \n-  i = gen_rtx_SET (VOIDmode, addr_reg,\n-\t\t   gen_rtx_SYMBOL_REF (SImode, \"__fpscr_values\"));\n+  sym = gen_rtx_SYMBOL_REF (SImode, \"__fpscr_values\");\n+  i = gen_rtx_SET (VOIDmode, addr_reg, sym);\n   emit_insn (i);\n   if (fp_mode == (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE))\n     {"}, {"sha": "1ea39d673b08a13811d22cfb15e6d27745ca9b93", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a6f463a028d17e761db7a0d17714fd29e250153c", "patch": "@@ -1286,12 +1286,12 @@ extern int current_function_anonymous_args;\n \n /* The 'Q' constraint is a pc relative load operand.  */\n #define EXTRA_CONSTRAINT_Q(OP)                          \t\t\\\n-  (GET_CODE (OP) == MEM && \t\t\t\t\t\t\\\n-   ((GET_CODE (XEXP ((OP), 0)) == LABEL_REF)\t\t\t\t\\\n-    || (GET_CODE (XEXP ((OP), 0)) == CONST                \t\t\\\n-\t&& GET_CODE (XEXP (XEXP ((OP), 0), 0)) == PLUS \t\t\t\\\n-\t&& GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 0)) == LABEL_REF\t\\\n-\t&& GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 1)) == CONST_INT)))\n+  (GET_CODE (OP) == MEM \t\t\t\t\t\t\\\n+   && ((GET_CODE (XEXP ((OP), 0)) == LABEL_REF)\t\t\t\t\\\n+       || (GET_CODE (XEXP ((OP), 0)) == CONST                \t\t\\\n+\t   && GET_CODE (XEXP (XEXP ((OP), 0), 0)) == PLUS\t\t\\\n+\t   && GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 0)) == LABEL_REF \\\n+\t   && GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 1)) == CONST_INT)))\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\\\n   ((C) == 'Q' ? EXTRA_CONSTRAINT_Q (OP)\t\\"}, {"sha": "1e3549742536ff07a43a07dec8d01d85a53581c7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f463a028d17e761db7a0d17714fd29e250153c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=a6f463a028d17e761db7a0d17714fd29e250153c", "patch": "@@ -1188,8 +1188,10 @@\n     {\n       /* The address must be set outside the libcall,\n \t since it goes into a pseudo.  */\n-      rtx addr = force_reg (SImode, gen_rtx_SYMBOL_REF (SImode, \\\"__mulsi3\\\"));\n-      rtx insns = gen_mulsi3_call (operands[0], operands[1], operands[2], addr);\n+      rtx sym = gen_rtx_SYMBOL_REF (SImode, \\\"__mulsi3\\\");\n+      rtx addr = force_reg (SImode, sym);\n+      rtx insns = gen_mulsi3_call (operands[0], operands[1],\n+\t\t\t\t   operands[2], addr);\n       first = XVECEXP (insns, 0, 0);\n       last = XVECEXP (insns, 0, XVECLEN (insns, 0) - 1);\n       emit_insn (insns);\n@@ -2357,6 +2359,7 @@\n \tmov.l\t%1,%0\n \tfake\t%1,%0\"\n   [(set_attr \"type\" \"pcload,move,load,move,move,store,pcload\")])\n+\n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"\")\n \t(match_operand:SI 1 \"general_movsrc_operand\" \"\"))]\n@@ -2493,7 +2496,7 @@\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"\")\n \t(match_operand:DI 1 \"general_movsrc_operand\" \"\"))]\n   \"\"\n-  \"{ if ( prepare_move_operands (operands, DImode)) DONE; }\")\n+  \"{ if (prepare_move_operands (operands, DImode)) DONE; }\")\n \n ;; ??? This should be a define expand.\n "}]}