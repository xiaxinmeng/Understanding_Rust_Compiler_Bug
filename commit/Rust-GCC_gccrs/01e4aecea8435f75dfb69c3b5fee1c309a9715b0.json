{"sha": "01e4aecea8435f75dfb69c3b5fee1c309a9715b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlNGFlY2VhODQzNWY3NWRmYjY5YzNiNWZlZTFjMzA5YTk3MTViMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-16T17:17:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-16T17:17:16Z"}, "message": "compiler: Parse receiver as a single parameter.\n\nFixes issue 8288.\n\nFrom-SVN: r216340", "tree": {"sha": "10738cbff22a4b15a8c518f73ad342c74d67753b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10738cbff22a4b15a8c518f73ad342c74d67753b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e4aecea8435f75dfb69c3b5fee1c309a9715b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e4aecea8435f75dfb69c3b5fee1c309a9715b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e4aecea8435f75dfb69c3b5fee1c309a9715b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e4aecea8435f75dfb69c3b5fee1c309a9715b0/comments", "author": null, "committer": null, "parents": [{"sha": "d13fc1ed98037f25d3f1af9718e28ef8b22f1ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13fc1ed98037f25d3f1af9718e28ef8b22f1ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13fc1ed98037f25d3f1af9718e28ef8b22f1ac5"}], "stats": {"total": 121, "additions": 28, "deletions": 93}, "files": [{"sha": "b24de608596e878e6de93333fbfb1be3822b260a", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 27, "deletions": 92, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e4aecea8435f75dfb69c3b5fee1c309a9715b0/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e4aecea8435f75dfb69c3b5fee1c309a9715b0/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=01e4aecea8435f75dfb69c3b5fee1c309a9715b0", "patch": "@@ -974,7 +974,8 @@ Parse::parameter_list(bool* is_varargs)\n     }\n \n   bool mix_error = false;\n-  this->parameter_decl(parameters_have_names, ret, is_varargs, &mix_error);\n+  this->parameter_decl(parameters_have_names, ret, is_varargs, &mix_error,\n+\t\t       &saw_error);\n   while (this->peek_token()->is_op(OPERATOR_COMMA))\n     {\n       if (this->advance_token()->is_op(OPERATOR_RPAREN))\n@@ -984,7 +985,8 @@ Parse::parameter_list(bool* is_varargs)\n \t  error_at(this->location(), \"%<...%> must be last parameter\");\n \t  saw_error = true;\n \t}\n-      this->parameter_decl(parameters_have_names, ret, is_varargs, &mix_error);\n+      this->parameter_decl(parameters_have_names, ret, is_varargs, &mix_error,\n+\t\t\t   &saw_error);\n     }\n   if (mix_error)\n     {\n@@ -1005,7 +1007,8 @@ void\n Parse::parameter_decl(bool parameters_have_names,\n \t\t      Typed_identifier_list* til,\n \t\t      bool* is_varargs,\n-\t\t      bool* mix_error)\n+\t\t      bool* mix_error,\n+\t\t      bool* saw_error)\n {\n   if (!parameters_have_names)\n     {\n@@ -1047,6 +1050,8 @@ Parse::parameter_decl(bool parameters_have_names,\n \t}\n       if (!type->is_error_type())\n \ttil->push_back(Typed_identifier(\"\", type, location));\n+      else\n+\t*saw_error = true;\n     }\n   else\n     {\n@@ -1063,9 +1068,15 @@ Parse::parameter_decl(bool parameters_have_names,\n       else\n \t{\n \t  if (is_varargs == NULL)\n-\t    error_at(this->location(), \"invalid use of %<...%>\");\n+\t    {\n+\t      error_at(this->location(), \"invalid use of %<...%>\");\n+\t      *saw_error = true;\n+\t    }\n \t  else if (new_count > orig_count + 1)\n-\t    error_at(this->location(), \"%<...%> only permits one name\");\n+\t    {\n+\t      error_at(this->location(), \"%<...%> only permits one name\");\n+\t      *saw_error = true;\n+\t    }\n \t  else\n \t    *is_varargs = true;\n \t  this->advance_token();\n@@ -2310,103 +2321,27 @@ Parse::function_decl(bool saw_nointerface)\n     }\n }\n \n-// Receiver     = \"(\" [ identifier ] [ \"*\" ] BaseTypeName \")\" .\n-// BaseTypeName = identifier .\n+// Receiver = Parameters .\n \n Typed_identifier*\n Parse::receiver()\n {\n-  go_assert(this->peek_token()->is_op(OPERATOR_LPAREN));\n-\n-  std::string name;\n-  const Token* token = this->advance_token();\n-  Location location = token->location();\n-  if (!token->is_op(OPERATOR_MULT))\n-    {\n-      if (!token->is_identifier())\n-\t{\n-\t  error_at(this->location(), \"method has no receiver\");\n-\t  this->gogo_->mark_locals_used();\n-\t  while (!token->is_eof() && !token->is_op(OPERATOR_RPAREN))\n-\t    token = this->advance_token();\n-\t  if (!token->is_eof())\n-\t    this->advance_token();\n-\t  return NULL;\n-\t}\n-      name = token->identifier();\n-      bool is_exported = token->is_identifier_exported();\n-      token = this->advance_token();\n-      if (!token->is_op(OPERATOR_DOT) && !token->is_op(OPERATOR_RPAREN))\n-\t{\n-\t  // An identifier followed by something other than a dot or a\n-\t  // right parenthesis must be a receiver name followed by a\n-\t  // type.\n-\t  name = this->gogo_->pack_hidden_name(name, is_exported);\n-\t}\n-      else\n-\t{\n-\t  // This must be a type name.\n-\t  this->unget_token(Token::make_identifier_token(name, is_exported,\n-\t\t\t\t\t\t\t location));\n-\t  token = this->peek_token();\n-\t  name.clear();\n-\t}\n-    }\n-\n-  // Here the receiver name is in NAME (it is empty if the receiver is\n-  // unnamed) and TOKEN is the first token in the type.\n-\n-  bool is_pointer = false;\n-  if (token->is_op(OPERATOR_MULT))\n-    {\n-      is_pointer = true;\n-      token = this->advance_token();\n-    }\n-\n-  if (!token->is_identifier())\n+  Location location = this->location();\n+  Typed_identifier_list* til;\n+  if (!this->parameters(&til, NULL))\n+    return NULL;\n+  else if (til == NULL || til->empty())\n     {\n-      error_at(this->location(), \"expected receiver name or type\");\n-      this->gogo_->mark_locals_used();\n-      int c = token->is_op(OPERATOR_LPAREN) ? 1 : 0;\n-      while (!token->is_eof())\n-\t{\n-\t  token = this->advance_token();\n-\t  if (token->is_op(OPERATOR_LPAREN))\n-\t    ++c;\n-\t  else if (token->is_op(OPERATOR_RPAREN))\n-\t    {\n-\t      if (c == 0)\n-\t\tbreak;\n-\t      --c;\n-\t    }\n-\t}\n-      if (!token->is_eof())\n-\tthis->advance_token();\n+      error_at(location, \"method has no receiver\");\n       return NULL;\n     }\n-\n-  Type* type = this->type_name(true);\n-\n-  if (is_pointer && !type->is_error_type())\n-    type = Type::make_pointer_type(type);\n-\n-  if (this->peek_token()->is_op(OPERATOR_RPAREN))\n-    this->advance_token();\n-  else\n+  else if (til->size() > 1)\n     {\n-      if (this->peek_token()->is_op(OPERATOR_COMMA))\n-\terror_at(this->location(), \"method has multiple receivers\");\n-      else\n-\terror_at(this->location(), \"expected %<)%>\");\n-      this->gogo_->mark_locals_used();\n-      while (!token->is_eof() && !token->is_op(OPERATOR_RPAREN))\n-\ttoken = this->advance_token();\n-      if (!token->is_eof())\n-\tthis->advance_token();\n+      error_at(location, \"method has multiple receivers\");\n       return NULL;\n     }\n-\n-  return new Typed_identifier(name, type, location);\n+  else\n+    return &til->front();\n }\n \n // Operand    = Literal | QualifiedIdent | MethodExpr | \"(\" Expression \")\" ."}, {"sha": "86698a1535292d63be06361562df1695b57572a1", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e4aecea8435f75dfb69c3b5fee1c309a9715b0/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e4aecea8435f75dfb69c3b5fee1c309a9715b0/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=01e4aecea8435f75dfb69c3b5fee1c309a9715b0", "patch": "@@ -179,7 +179,7 @@ class Parse\n   Function_type* signature(Typed_identifier*, Location);\n   bool parameters(Typed_identifier_list**, bool* is_varargs);\n   Typed_identifier_list* parameter_list(bool* is_varargs);\n-  void parameter_decl(bool, Typed_identifier_list*, bool*, bool*);\n+  void parameter_decl(bool, Typed_identifier_list*, bool*, bool*, bool*);\n   bool result(Typed_identifier_list**);\n   Location block();\n   Type* interface_type();"}]}