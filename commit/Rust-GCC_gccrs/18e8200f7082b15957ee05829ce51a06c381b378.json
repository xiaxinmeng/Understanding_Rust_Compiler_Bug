{"sha": "18e8200f7082b15957ee05829ce51a06c381b378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThlODIwMGY3MDgyYjE1OTU3ZWUwNTgyOWNlNTFhMDZjMzgxYjM3OA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-02T16:22:33Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-02T16:22:33Z"}, "message": "re PR rtl-optimization/42835 (Missed merging common code sequence at the end of two basic blocks)\n\n\tPR target/42835\n\t* config/arm/arm-modes.def (CC_NOTB): New mode.\n\t* config/arm/arm.c (get_arm_condition_code): Handle it.\n\t* config/arm/thumb2.md (thumb2_compare_scc): Delete pattern.\n\t* config/arm/arm.md (subsi3_compare0_c): New pattern.\n\t(compare_scc): Now a define_and_split.  Add a number of extra\n\tsplitters before it.\n\ntestsuite/\n\tPR target/42835\n\t* gcc.target/arm/pr42835.c: New test.\n\nFrom-SVN: r161725", "tree": {"sha": "3e2175e4e860e041e9dd2980eda39ad668e981e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e2175e4e860e041e9dd2980eda39ad668e981e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18e8200f7082b15957ee05829ce51a06c381b378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e8200f7082b15957ee05829ce51a06c381b378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e8200f7082b15957ee05829ce51a06c381b378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e8200f7082b15957ee05829ce51a06c381b378/comments", "author": null, "committer": null, "parents": [{"sha": "faeb4ee3aac0ece0f8619ba8c3a2908c6ed7b9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faeb4ee3aac0ece0f8619ba8c3a2908c6ed7b9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faeb4ee3aac0ece0f8619ba8c3a2908c6ed7b9c1"}], "stats": {"total": 212, "additions": 142, "deletions": 70}, "files": [{"sha": "da53bdc491b8a3a7412875af7be3f2f28682839b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -1,3 +1,13 @@\n+2010-07-02  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/42835\n+\t* config/arm/arm-modes.def (CC_NOTB): New mode.\n+\t* config/arm/arm.c (get_arm_condition_code): Handle it.\n+\t* config/arm/thumb2.md (thumb2_compare_scc): Delete pattern.\n+\t* config/arm/arm.md (subsi3_compare0_c): New pattern.\n+\t(compare_scc): Now a define_and_split.  Add a number of extra\n+\tsplitters before it.\n+\n 2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/arm/arm.c (neon_vdup_constant): Expand into canonical RTL"}, {"sha": "55b98bc03c5dba0de88c84be629acfff20710cdd", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -34,6 +34,10 @@ ADJUST_FLOAT_FORMAT (HF, ((arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n    CCFPmode should be used with floating equalities.\n    CC_NOOVmode should be used with SImode integer equalities.\n    CC_Zmode should be used if only the Z flag is set correctly\n+   CC_Cmode should be used if only the C flag is set correctly, after an\n+     addition.\n+   CC_NOTBmode should be used if only the C flag is set as a not-borrow\n+     flag, after a subtraction.\n    CC_Nmode should be used if only the N (sign) flag is set correctly\n    CCmode should be used otherwise.  */\n \n@@ -53,6 +57,7 @@ CC_MODE (CC_DLTU);\n CC_MODE (CC_DGEU);\n CC_MODE (CC_DGTU);\n CC_MODE (CC_C);\n+CC_MODE (CC_NOTB);\n CC_MODE (CC_N);\n \n /* Vector modes.  */"}, {"sha": "fbdb90a2fa4d8d1e0029f2a33fb51c4c0db86939", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -16129,11 +16129,19 @@ get_arm_condition_code (rtx comparison)\n \n     case CC_Cmode:\n       switch (comp_code)\n-      {\n-      case LTU: return ARM_CS;\n-      case GEU: return ARM_CC;\n-      default: gcc_unreachable ();\n-      }\n+\t{\n+\tcase LTU: return ARM_CS;\n+\tcase GEU: return ARM_CC;\n+\tdefault: gcc_unreachable ();\n+\t}\n+\n+    case CC_NOTBmode:\n+      switch (comp_code)\n+\t{\n+\tcase LTU: return ARM_CC;\n+\tcase GEU: return ARM_CS;\n+\tdefault: gcc_unreachable ();\n+\t}\n \n     case CCmode:\n       switch (comp_code)"}, {"sha": "824022cde86d0d0f509b3df22e779fd99cb4a37f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 97, "deletions": 29, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -1149,6 +1149,19 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n+(define_insn \"*subsi3_compare0_c\"\n+  [(set (reg:CC_NOTB CC_REGNUM)\n+\t(compare:CC_NOTB (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n+\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\")))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"@\n+   sub%.\\\\t%0, %1, %2\n+   rsb%.\\\\t%0, %2, %1\"\n+  [(set_attr \"conds\" \"set\")]\n+)\n+\n (define_expand \"decscc\"\n   [(set (match_operand:SI            0 \"s_register_operand\" \"=r,r\")\n         (minus:SI (match_operand:SI  1 \"s_register_operand\" \"0,?r\")\n@@ -9304,41 +9317,96 @@\n    (set_attr \"length\" \"4,8\")]\n )\n \n-(define_insn \"*compare_scc\"\n+; A series of splitters for the compare_scc pattern below.  Note that\n+; order is important.\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(lt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t       (const_int 0)))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT && reload_completed\"\n+  [(set (match_dup 0) (lshiftrt:SI (match_dup 1) (const_int 31)))])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ge:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t       (const_int 0)))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT && reload_completed\"\n+  [(set (match_dup 0) (not:SI (match_dup 1)))\n+   (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 31)))])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(eq:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t       (const_int 0)))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT && reload_completed\"\n+  [(parallel\n+    [(set (reg:CC_NOTB CC_REGNUM)\n+\t  (compare:CC_NOTB (const_int 1) (match_dup 1)))\n+     (set (match_dup 0)\n+\t  (minus:SI (const_int 1) (match_dup 1)))])\n+   (cond_exec (ltu:CC_NOTB (reg:CC_NOTB CC_REGNUM) (const_int 0))\n+\t      (set (match_dup 0) (const_int 0)))])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ne:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t       (match_operand:SI 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT && reload_completed\"\n+  [(parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (match_dup 1) (match_dup 2)))\n+     (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))])\n+   (cond_exec (ne:CC (reg:CC CC_REGNUM) (const_int 0))\n+\t      (set (match_dup 0) (const_int 1)))]\n+{\n+  operands[3] = GEN_INT (-INTVAL (operands[2]));\n+})\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ne:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t       (match_operand:SI 2 \"arm_add_operand\" \"\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT && reload_completed\"\n+  [(parallel\n+    [(set (reg:CC_NOOV CC_REGNUM)\n+\t  (compare:CC_NOOV (minus:SI (match_dup 1) (match_dup 2))\n+\t\t\t   (const_int 0)))\n+     (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n+   (cond_exec (ne:CC_NOOV (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t      (set (match_dup 0) (const_int 1)))])\n+\n+(define_insn_and_split \"*compare_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_operator:SI 1 \"arm_comparison_operator\"\n \t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L\")]))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\"\n-  \"*\n-    if (operands[3] == const0_rtx)\n-      {\n-\tif (GET_CODE (operands[1]) == LT)\n-\t  return \\\"mov\\\\t%0, %2, lsr #31\\\";\n-\n-\tif (GET_CODE (operands[1]) == GE)\n-\t  return \\\"mvn\\\\t%0, %2\\;mov\\\\t%0, %0, lsr #31\\\";\n-\n-\tif (GET_CODE (operands[1]) == EQ)\n-\t  return \\\"rsbs\\\\t%0, %2, #1\\;movcc\\\\t%0, #0\\\";\n-      }\n+  \"TARGET_32BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:CC CC_REGNUM) (compare:CC (match_dup 2) (match_dup 3)))\n+   (cond_exec (match_dup 4) (set (match_dup 0) (const_int 0)))\n+   (cond_exec (match_dup 5) (set (match_dup 0) (const_int 1)))]\n+{\n+  rtx tmp1;\n+  enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[1]),\n+\t\t\t\t\t   operands[2], operands[3]);\n+  enum rtx_code rc = GET_CODE (operands[1]);\n \n-    if (GET_CODE (operands[1]) == NE)\n-      {\n-        if (which_alternative == 1)\n-\t  return \\\"adds\\\\t%0, %2, #%n3\\;movne\\\\t%0, #1\\\";\n-        return \\\"subs\\\\t%0, %2, %3\\;movne\\\\t%0, #1\\\";\n-      }\n-    if (which_alternative == 1)\n-      output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n-    else\n-      output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-    return \\\"mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\\\";\n-  \"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n-)\n+  tmp1 = gen_rtx_REG (mode, CC_REGNUM);\n+  \n+  operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, tmp1, const0_rtx);\n+  if (mode == CCFPmode || mode == CCFPEmode)\n+    rc = reverse_condition_maybe_unordered (rc);\n+  else\n+    rc = reverse_condition (rc);\n+  operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, tmp1, const0_rtx);\n+})\n \n (define_insn \"*cond_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")"}, {"sha": "ac275ad7eddd072cf5925fe3d283126e0238cf0a", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -599,42 +599,6 @@\n    (set_attr \"length\" \"6,10\")]\n )\n \n-(define_insn \"*thumb2_compare_scc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(match_operator:SI 1 \"arm_comparison_operator\"\n-\t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L\")]))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_THUMB2\"\n-  \"*\n-    if (operands[3] == const0_rtx)\n-      {\n-\tif (GET_CODE (operands[1]) == LT)\n-\t  return \\\"lsr\\\\t%0, %2, #31\\\";\n-\n-\tif (GET_CODE (operands[1]) == GE)\n-\t  return \\\"mvn\\\\t%0, %2\\;lsr\\\\t%0, %0, #31\\\";\n-\n-\tif (GET_CODE (operands[1]) == EQ)\n-\t  return \\\"rsbs\\\\t%0, %2, #1\\;it\\\\tcc\\;movcc\\\\t%0, #0\\\";\n-      }\n-\n-    if (GET_CODE (operands[1]) == NE)\n-      {\n-        if (which_alternative == 1)\n-\t  return \\\"adds\\\\t%0, %2, #%n3\\;it\\\\tne\\;movne\\\\t%0, #1\\\";\n-        return \\\"subs\\\\t%0, %2, %3\\;it\\\\tne\\;movne\\\\t%0, #1\\\";\n-      }\n-    if (which_alternative == 1)\n-      output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n-    else\n-      output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-    return \\\"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\\\";\n-  \"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"14\")]\n-)\n-\n (define_insn \"*thumb2_cond_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI (match_operator 3 \"equality_operator\""}, {"sha": "2f7dd0c32a8da97dcbc204b24dc77ab356c16fcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -1,3 +1,8 @@\n+2010-07-02  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/42835\n+\t* gcc.target/arm/pr42835.c: New test.\n+\n 2010-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/template/crash98.C: Remove stray // from dg-error comment."}, {"sha": "71c51ebe31c810da74c49eb3ad6b7a27f8526ea1", "filename": "gcc/testsuite/gcc.target/arm/pr42835.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42835.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e8200f7082b15957ee05829ce51a06c381b378/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42835.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42835.c?ref=18e8200f7082b15957ee05829ce51a06c381b378", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -Os\" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+\n+int foo(int *p, int i)\n+{\n+  return( (i < 0 && *p == 1)\n+\t  || (i > 0 && *p == 2) );\n+}\n+\n+/* { dg-final { scan-assembler-times \"movne\\[\\\\t \\]*r.,\\[\\\\t \\]*#\" 1 } } */\n+/* { dg-final { scan-assembler-times \"moveq\\[\\\\t \\]*r.,\\[\\\\t \\]*#\" 1 } } */"}]}