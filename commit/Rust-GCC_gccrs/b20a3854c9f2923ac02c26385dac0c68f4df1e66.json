{"sha": "b20a3854c9f2923ac02c26385dac0c68f4df1e66", "node_id": "C_kwDOANBUbNoAKGIyMGEzODU0YzlmMjkyM2FjMDJjMjYzODVkYWMwYzY4ZjRkZjFlNjY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-11-21T22:58:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-11-22T01:23:38Z"}, "message": "c++: contracts fixes\n\nFixing -Wunused-parm warnings and link errors depending on where -fcontracts\nappears on the command line.\n\ngcc/cp/ChangeLog:\n\n\t* contracts.cc (build_contract_condition_function):\n\tSet DECL_ARTIFICIAL on return value parm.\n\t* g++spec.cc (lang_specific_driver): Add -lstdc++exp\n\tjust before -lstdc++.", "tree": {"sha": "1762adf561fe112881f68a469caa411a3121be5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1762adf561fe112881f68a469caa411a3121be5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20a3854c9f2923ac02c26385dac0c68f4df1e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20a3854c9f2923ac02c26385dac0c68f4df1e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20a3854c9f2923ac02c26385dac0c68f4df1e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20a3854c9f2923ac02c26385dac0c68f4df1e66/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "f3afcc62ba0d9057857ad5290c4c9ab338e559d3", "filename": "gcc/cp/contracts.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20a3854c9f2923ac02c26385dac0c68f4df1e66/gcc%2Fcp%2Fcontracts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20a3854c9f2923ac02c26385dac0c68f4df1e66/gcc%2Fcp%2Fcontracts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcontracts.cc?ref=b20a3854c9f2923ac02c26385dac0c68f4df1e66", "patch": "@@ -1434,6 +1434,7 @@ build_contract_condition_function (tree fndecl, bool pre)\n       tree name = get_identifier (\"__r\");\n       tree parm = build_lang_decl (PARM_DECL, name, value_type);\n       DECL_CONTEXT (parm) = fn;\n+      DECL_ARTIFICIAL (parm) = true;\n       DECL_ARGUMENTS (fn) = chainon (DECL_ARGUMENTS (fn), parm);\n \n       *last = build_tree_list (NULL_TREE, value_type);"}, {"sha": "e599ac906f671b86764cd073c943397ff7393ee9", "filename": "gcc/cp/g++spec.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20a3854c9f2923ac02c26385dac0c68f4df1e66/gcc%2Fcp%2Fg%2B%2Bspec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20a3854c9f2923ac02c26385dac0c68f4df1e66/gcc%2Fcp%2Fg%2B%2Bspec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.cc?ref=b20a3854c9f2923ac02c26385dac0c68f4df1e66", "patch": "@@ -128,6 +128,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n+  /* By default, we don't add -lstdc++exp.  */\n+  bool need_experimental = false;\n+\n   /* True if we saw -static.  */\n   int static_link = 0;\n \n@@ -161,8 +164,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n       switch (decoded_options[i].opt_index)\n \t{\n \tcase OPT_fcontracts:\n-\t  args[i] |= EXPERIMENTAL;\n-\t  ++added;\n+\t  need_experimental = true;\n \t  break;\n \n \tcase OPT_nostdlib:\n@@ -292,7 +294,8 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n   /* Add one for shared_libgcc or extra static library.  */\n-  num_args = argc + added + need_math + (library > 0) * 4 + 1;\n+  num_args = (argc + added + need_math + need_experimental\n+\t      + (library > 0) * 4 + 1);\n   /* For libc++, on most platforms, the ABI library (usually called libc++abi)\n      is provided as a separate DSO, which we must also append.\n      However, a platform might have the ability to forward the ABI library\n@@ -355,11 +358,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t\t\t   &new_decoded_options[j]);\n \t}\n \n-      if ((args[i] & EXPERIMENTAL)\n-\t  && which_library == USE_LIBSTDCXX)\n-\tgenerate_option (OPT_l, \"stdc++exp\", 1, CL_DRIVER,\n-\t\t\t &new_decoded_options[++j]);\n-\n       if ((args[i] & SKIPOPT) != 0)\n \t--j;\n \n@@ -370,6 +368,12 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Add `-lstdc++' if we haven't already done so.  */\n   if (library > 0)\n     {\n+      if (need_experimental && which_library == USE_LIBSTDCXX)\n+\t{\n+\t  generate_option (OPT_l, \"stdc++exp\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j++]);\n+\t  ++added_libraries;\n+\t}\n #ifdef HAVE_LD_STATIC_DYNAMIC\n       if (library > 1 && !static_link)\n \t{"}]}