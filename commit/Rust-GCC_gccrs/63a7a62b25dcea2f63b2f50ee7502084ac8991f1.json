{"sha": "63a7a62b25dcea2f63b2f50ee7502084ac8991f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhN2E2MmIyNWRjZWEyZjYzYjJmNTBlZTc1MDIwODRhYzg5OTFmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-09-27T15:27:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-09-27T15:27:38Z"}, "message": "reload1.c (alter_reg): Require the alignment of the stack slot to be at least reg_max_ref_width bytes.\n\ngcc/\n\t* reload1.c (alter_reg): Require the alignment of the stack slot to\n\tbe at least reg_max_ref_width bytes.\n\t(scan_paradoxical_subregs): Record the largest width in\n\treg_max_ref_width.\n\nFrom-SVN: r117252", "tree": {"sha": "ae805c7684178f9920bbee449d77cb2bf5c4d45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae805c7684178f9920bbee449d77cb2bf5c4d45b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a7a62b25dcea2f63b2f50ee7502084ac8991f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a7a62b25dcea2f63b2f50ee7502084ac8991f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a7a62b25dcea2f63b2f50ee7502084ac8991f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a7a62b25dcea2f63b2f50ee7502084ac8991f1/comments", "author": null, "committer": null, "parents": [{"sha": "0d1187867f0c2f92dc4458ed0bffce479b1c11c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1187867f0c2f92dc4458ed0bffce479b1c11c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1187867f0c2f92dc4458ed0bffce479b1c11c0"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "584f6de233987d72b592ddd3f9538d4da3d19284", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a7a62b25dcea2f63b2f50ee7502084ac8991f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a7a62b25dcea2f63b2f50ee7502084ac8991f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63a7a62b25dcea2f63b2f50ee7502084ac8991f1", "patch": "@@ -1,3 +1,10 @@\n+2006-09-27  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* reload1.c (alter_reg): Require the alignment of the stack slot to\n+\tbe at least reg_max_ref_width bytes.\n+\t(scan_paradoxical_subregs): Record the largest width in\n+\treg_max_ref_width.\n+\n 2006-09-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/25261"}, {"sha": "4244b298308e961420380589ab302fb4c0363790", "filename": "gcc/reload1.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a7a62b25dcea2f63b2f50ee7502084ac8991f1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a7a62b25dcea2f63b2f50ee7502084ac8991f1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=63a7a62b25dcea2f63b2f50ee7502084ac8991f1", "patch": "@@ -1996,8 +1996,11 @@ alter_reg (int i, int from_reg)\n       && reg_equiv_memory_loc[i] == 0)\n     {\n       rtx x;\n+      enum machine_mode mode = GET_MODE (regno_reg_rtx[i]);\n       unsigned int inherent_size = PSEUDO_REGNO_BYTES (i);\n+      unsigned int inherent_align = GET_MODE_ALIGNMENT (mode);\n       unsigned int total_size = MAX (inherent_size, reg_max_ref_width[i]);\n+      unsigned int min_align = reg_max_ref_width[i] * BITS_PER_UNIT;\n       int adjust = 0;\n \n       /* Each pseudo reg has an inherent size which comes from its own mode,\n@@ -2011,8 +2014,9 @@ alter_reg (int i, int from_reg)\n       if (from_reg == -1)\n \t{\n \t  /* No known place to spill from => no slot to reuse.  */\n-\t  x = assign_stack_local (GET_MODE (regno_reg_rtx[i]), total_size,\n-\t\t\t\t  inherent_size == total_size ? 0 : -1);\n+\t  x = assign_stack_local (mode, total_size,\n+\t\t\t\t  min_align > inherent_align\n+\t\t\t\t  || total_size > inherent_size ? -1 : 0);\n \t  if (BYTES_BIG_ENDIAN)\n \t    /* Cancel the  big-endian correction done in assign_stack_local.\n \t       Get the address of the beginning of the slot.\n@@ -2028,15 +2032,15 @@ alter_reg (int i, int from_reg)\n       else if (spill_stack_slot[from_reg] != 0\n \t       && spill_stack_slot_width[from_reg] >= total_size\n \t       && (GET_MODE_SIZE (GET_MODE (spill_stack_slot[from_reg]))\n-\t\t   >= inherent_size))\n+\t\t   >= inherent_size)\n+\t       && MEM_ALIGN (spill_stack_slot[from_reg]) >= min_align)\n \tx = spill_stack_slot[from_reg];\n \n       /* Allocate a bigger slot.  */\n       else\n \t{\n \t  /* Compute maximum size needed, both for inherent size\n \t     and for total size.  */\n-\t  enum machine_mode mode = GET_MODE (regno_reg_rtx[i]);\n \t  rtx stack_slot;\n \n \t  if (spill_stack_slot[from_reg])\n@@ -2046,11 +2050,14 @@ alter_reg (int i, int from_reg)\n \t\tmode = GET_MODE (spill_stack_slot[from_reg]);\n \t      if (spill_stack_slot_width[from_reg] > total_size)\n \t\ttotal_size = spill_stack_slot_width[from_reg];\n+\t      if (MEM_ALIGN (spill_stack_slot[from_reg]) > min_align)\n+\t\tmin_align = MEM_ALIGN (spill_stack_slot[from_reg]);\n \t    }\n \n \t  /* Make a slot with that size.  */\n \t  x = assign_stack_local (mode, total_size,\n-\t\t\t\t  inherent_size == total_size ? 0 : -1);\n+\t\t\t\t  min_align > inherent_align\n+\t\t\t\t  || total_size > inherent_size ? -1 : 0);\n \t  stack_slot = x;\n \n \t  /* All pseudos mapped to this slot can alias each other.  */\n@@ -3828,7 +3835,8 @@ scan_paradoxical_subregs (rtx x)\n \n     case SUBREG:\n       if (REG_P (SUBREG_REG (x))\n-\t  && GET_MODE_SIZE (GET_MODE (x)) > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n+\t  && (GET_MODE_SIZE (GET_MODE (x))\n+\t      > reg_max_ref_width[REGNO (SUBREG_REG (x))]))\n \treg_max_ref_width[REGNO (SUBREG_REG (x))]\n \t  = GET_MODE_SIZE (GET_MODE (x));\n       return;"}]}