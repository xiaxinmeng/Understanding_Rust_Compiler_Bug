{"sha": "079c23cfe079f203d5df83fea8e92a60c7d7e878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5YzIzY2ZlMDc5ZjIwM2Q1ZGY4M2ZlYThlOTJhNjBjN2Q3ZTg3OA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-05-21T13:46:00Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-05-21T13:46:00Z"}, "message": "aarch64: Add attributes for builtins specified in aarch64-builtins.c\n\nBesides the builtins in aarch64-simd-builtins.def there are a number of builtins defined in aarch64-builtins.c itself.\nThey could also benefit from the attributes generated by aarch64_get_attributes.\nHowever aarch64_get_attributes and its helpers are only set up to handle a aarch64_simd_builtin_datum.\n\nThis patch changes these functions to instead take a flag and mode value that are extracted from\naarch64_simd_builtin_datum.flags and aarch64_simd_builtin_datum.mode anyway.\nThen the various builtin init functions in aarch64-builtins.c can pass down their own FLAG_* flags\nthat they want to derive attributes from.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_call_properties):\n\tTake a flag and mode value as arguments.\n\t(aarch64_modifies_global_state_p): Likewise.\n\t(aarch64_reads_global_state_p): Likewise.\n\t(aarch64_could_trap_p): Likewise.\n\t(aarch64_get_attributes): Likewise.\n\t(aarch64_init_simd_builtins): Adjust callsite of above.\n\t(aarch64_init_fcmla_laneq_builtins): Use aarch64_get_attributes to get\n\tfunction attributes to apply to builtins.\n\t(aarch64_init_crc32_builtins): Likewise.\n\t(aarch64_init_builtin_rsqrt): Likewise.", "tree": {"sha": "69ec39f39b0d2df402c31668a4507fea1dba2d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69ec39f39b0d2df402c31668a4507fea1dba2d3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079c23cfe079f203d5df83fea8e92a60c7d7e878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079c23cfe079f203d5df83fea8e92a60c7d7e878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079c23cfe079f203d5df83fea8e92a60c7d7e878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079c23cfe079f203d5df83fea8e92a60c7d7e878/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae352467a5a9414c0abea008f3719c6d3ae54e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae352467a5a9414c0abea008f3719c6d3ae54e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae352467a5a9414c0abea008f3719c6d3ae54e7"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "3cab3ec992c776f03fcbdd1214dd961fb1c9eaba", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079c23cfe079f203d5df83fea8e92a60c7d7e878/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079c23cfe079f203d5df83fea8e92a60c7d7e878/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=079c23cfe079f203d5df83fea8e92a60c7d7e878", "patch": "@@ -906,14 +906,13 @@ aarch64_init_simd_builtin_scalar_types (void)\n \t\t\t\t\t     \"__builtin_aarch64_simd_udi\");\n }\n \n-/* Return a set of FLAG_* flags that describe what the function could do,\n+/* Return a set of FLAG_* flags derived from FLAGS\n+   that describe what a function with result MODE could do,\n    taking the command-line flags into account.  */\n static unsigned int\n-aarch64_call_properties (aarch64_simd_builtin_datum *d)\n+aarch64_call_properties (unsigned int flags, machine_mode mode)\n {\n-  unsigned int flags = d->flags;\n-\n-  if (!(flags & FLAG_AUTO_FP) && FLOAT_MODE_P (d->mode))\n+  if (!(flags & FLAG_AUTO_FP) && FLOAT_MODE_P (mode))\n     flags |= FLAG_FP;\n \n   /* -fno-trapping-math means that we can assume any FP exceptions\n@@ -924,12 +923,12 @@ aarch64_call_properties (aarch64_simd_builtin_datum *d)\n   return flags;\n }\n \n-/* Return true if calls to the function could modify some form of\n-   global state.  */\n+/* Return true if calls to a function with flags F and mode MODE\n+   could modify some form of global state.  */\n static bool\n-aarch64_modifies_global_state_p (aarch64_simd_builtin_datum *d)\n+aarch64_modifies_global_state_p (unsigned int f, machine_mode mode)\n {\n-  unsigned int flags = aarch64_call_properties (d);\n+  unsigned int flags = aarch64_call_properties (f, mode);\n \n   if (flags & FLAG_RAISE_FP_EXCEPTIONS)\n     return true;\n@@ -940,24 +939,25 @@ aarch64_modifies_global_state_p (aarch64_simd_builtin_datum *d)\n   return flags & FLAG_WRITE_MEMORY;\n }\n \n-/* Return true if calls to the function could read some form of\n-   global state.  */\n+/* Return true if calls to a function with flags F and mode MODE\n+   could read some form of global state.  */\n static bool\n-aarch64_reads_global_state_p (aarch64_simd_builtin_datum *d)\n+aarch64_reads_global_state_p (unsigned int f, machine_mode mode)\n {\n-  unsigned int flags = aarch64_call_properties (d);\n+  unsigned int flags = aarch64_call_properties (f,  mode);\n \n   if (flags & FLAG_READ_FPCR)\n     return true;\n \n   return flags & FLAG_READ_MEMORY;\n }\n \n-/* Return true if calls to the function could raise a signal.  */\n+/* Return true if calls to a function with flags F and mode MODE\n+   could raise a signal.  */\n static bool\n-aarch64_could_trap_p (aarch64_simd_builtin_datum *d)\n+aarch64_could_trap_p (unsigned int f, machine_mode mode)\n {\n-  unsigned int flags = aarch64_call_properties (d);\n+  unsigned int flags = aarch64_call_properties (f, mode);\n \n   if (flags & FLAG_RAISE_FP_EXCEPTIONS)\n     return true;\n@@ -975,21 +975,22 @@ aarch64_add_attribute (const char *name, tree attrs)\n   return tree_cons (get_identifier (name), NULL_TREE, attrs);\n }\n \n-/* Return the appropriate function attributes.  */\n+/* Return the appropriate attributes for a function that has\n+   flags F and mode MODE.  */\n static tree\n-aarch64_get_attributes (aarch64_simd_builtin_datum *d)\n+aarch64_get_attributes (unsigned int f, machine_mode mode)\n {\n   tree attrs = NULL_TREE;\n \n-  if (!aarch64_modifies_global_state_p (d))\n+  if (!aarch64_modifies_global_state_p (f, mode))\n     {\n-      if (aarch64_reads_global_state_p (d))\n+      if (aarch64_reads_global_state_p (f, mode))\n \tattrs = aarch64_add_attribute (\"pure\", attrs);\n       else\n \tattrs = aarch64_add_attribute (\"const\", attrs);\n     }\n \n-  if (!flag_non_call_exceptions || !aarch64_could_trap_p (d))\n+  if (!flag_non_call_exceptions || !aarch64_could_trap_p (f, mode))\n     attrs = aarch64_add_attribute (\"nothrow\", attrs);\n \n   return aarch64_add_attribute (\"leaf\", attrs);\n@@ -1018,7 +1019,9 @@ aarch64_init_fcmla_laneq_builtins (void)\n \t= aarch64_simd_builtin_std_type (SImode, qualifier_lane_pair_index);\n       tree ftype = build_function_type_list (argtype, argtype, argtype,\n \t\t\t\t\t     quadtype, lanetype, NULL_TREE);\n-      tree fndecl = aarch64_general_add_builtin (d->name, ftype, d->fcode);\n+      tree attrs = aarch64_get_attributes (FLAG_FP, d->mode);\n+      tree fndecl\n+\t= aarch64_general_add_builtin (d->name, ftype, d->fcode, attrs);\n \n       aarch64_builtin_decls[d->fcode] = fndecl;\n     }\n@@ -1148,7 +1151,7 @@ aarch64_init_simd_builtins (void)\n \tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s\",\n \t\t  d->name);\n \n-      tree attrs = aarch64_get_attributes (d);\n+      tree attrs = aarch64_get_attributes (d->flags, d->mode);\n \n       fndecl = aarch64_general_add_builtin (namebuf, ftype, fcode, attrs);\n       aarch64_builtin_decls[fcode] = fndecl;\n@@ -1170,7 +1173,9 @@ aarch64_init_crc32_builtins ()\n       tree argtype = aarch64_simd_builtin_std_type (d->mode,\n \t\t\t\t\t\t    qualifier_unsigned);\n       tree ftype = build_function_type_list (usi_type, usi_type, argtype, NULL_TREE);\n-      tree fndecl = aarch64_general_add_builtin (d->name, ftype, d->fcode);\n+      tree attrs = aarch64_get_attributes (FLAG_NONE, d->mode);\n+      tree fndecl\n+\t= aarch64_general_add_builtin (d->name, ftype, d->fcode, attrs);\n \n       aarch64_builtin_decls[d->fcode] = fndecl;\n     }\n@@ -1210,8 +1215,9 @@ aarch64_init_builtin_rsqrt (void)\n   for (; bdd < bdd_end; bdd++)\n   {\n     ftype = build_function_type_list (bdd->type_node, bdd->type_node, NULL_TREE);\n+    tree attrs = aarch64_get_attributes (FLAG_FP, TYPE_MODE (bdd->type_node));\n     fndecl = aarch64_general_add_builtin (bdd->builtin_name,\n-\t\t\t\t\t  ftype, bdd->function_code);\n+\t\t\t\t\t  ftype, bdd->function_code, attrs);\n     aarch64_builtin_decls[bdd->function_code] = fndecl;\n   }\n }"}]}