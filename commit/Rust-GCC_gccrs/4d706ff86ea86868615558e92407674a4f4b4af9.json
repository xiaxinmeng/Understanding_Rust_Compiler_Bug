{"sha": "4d706ff86ea86868615558e92407674a4f4b4af9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3MDZmZjg2ZWE4Njg2ODYxNTU1OGU5MjQwNzY3NGE0ZjRiNGFmOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-29T08:46:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-29T08:46:46Z"}, "message": "Add dg test for matching function bodies\n\nThere isn't a 1:1 mapping from SVE intrinsics to SVE instructions,\nbut the intrinsics are still close enough to the instructions for\nthere to be a specific preferred sequence (or sometimes choice of\npreferred sequences) for a given combination of operands.  Sometimes\nthese sequences will be one instruction, sometimes they'll be several.\n\nI therefore wanted a convenient way of matching the exact assembly\nimplementation of a given function.  It's possible to do that using\nsingle scan-assembler lines, but:\n\n(a) they become hard to read for multiline matches\n(b) the PASS/FAIL lines tend to be overly long\n(c) it's useful to have a single place that skips over uninteresting\n    lines, such as entry block labels and .cfi_* directives, without\n    being overly broad\n\nThis patch therefore adds a new check-function-bodies dg-final test\nthat looks for specially-formatted comments.  As a demo, the patch\nconverts the SVE vec_init tests to use the new harness instead of\nscan-assembler.\n\nThe regexps in parse_function_bodies are fairly general, but might\nstill need to be extended in future for targets like Darwin or AIX.\n\n2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* doc/sourcebuild.texi (check-function-bodies): Document.\n\ngcc/testsuite/\n\t* lib/scanasm.exp (parse_function_bodies, check_function_body)\n\t(check-function-bodies): New procedures.\n\t* gcc.target/aarch64/sve/init_1.c: Use check-function-bodies\n\tinstead of scan-assembler.\n\t* gcc.target/aarch64/sve/init_2.c: Likewise.\n\t* gcc.target/aarch64/sve/init_3.c: Likewise.\n\t* gcc.target/aarch64/sve/init_4.c: Likewise.\n\t* gcc.target/aarch64/sve/init_5.c: Likewise.\n\t* gcc.target/aarch64/sve/init_6.c: Likewise.\n\t* gcc.target/aarch64/sve/init_7.c: Likewise.\n\t* gcc.target/aarch64/sve/init_8.c: Likewise.\n\t* gcc.target/aarch64/sve/init_9.c: Likewise.\n\t* gcc.target/aarch64/sve/init_10.c: Likewise.\n\t* gcc.target/aarch64/sve/init_11.c: Likewise.\n\t* gcc.target/aarch64/sve/init_12.c: Likewise.\n\nFrom-SVN: r273869", "tree": {"sha": "74dec2539f4b43e34c43b95439896bec5b92e6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74dec2539f4b43e34c43b95439896bec5b92e6ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d706ff86ea86868615558e92407674a4f4b4af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d706ff86ea86868615558e92407674a4f4b4af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d706ff86ea86868615558e92407674a4f4b4af9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d706ff86ea86868615558e92407674a4f4b4af9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708cc6132bb374e2c5bd1c4f43f9fe7306d20970"}], "stats": {"total": 558, "additions": 389, "deletions": 169}, "files": [{"sha": "650201a640c1165b6b0be379cbb093803ce05599", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,3 +1,7 @@\n+2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/sourcebuild.texi (check-function-bodies): Document.\n+\n 2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* simplify-rtx.c (simplify_const_unary_operation): Fold a"}, {"sha": "73186c5853704acfaefb22de859dc53aa37c136f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -2669,6 +2669,91 @@ assembly output.\n @item scan-not-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n Passes if @var{symbol} is not defined as a hidden symbol in the test's\n assembly output.\n+\n+@item check-function-bodies @var{prefix} @var{terminator} [@var{option}]\n+Looks through the source file for comments that give the expected assembly\n+output for selected functions.  Each line of expected output starts with the\n+prefix string @var{prefix} and the expected output for a function as a whole\n+is followed by a line that starts with the string @var{terminator}.\n+Specifying an empty terminator is equivalent to specifying @samp{\"*/\"}.\n+\n+If @var{option} is specified, the test only applies to command lines\n+that contain @var{option}.  This can be useful if a source file is compiled\n+both with and without optimization, since it is rarely useful to check the\n+assembly output for unoptimized code.\n+\n+The first line of the expected output for a function @var{fn} has the form:\n+\n+@smallexample\n+@var{prefix} @var{fn}:  [@{ target/xfail @var{selector} @}]\n+@end smallexample\n+\n+Subsequent lines of the expected output also start with @var{prefix}.\n+In both cases, whitespace after @var{prefix} is not significant.\n+\n+The test discards assembly directives such as @code{.cfi_startproc}\n+and local label definitions such as @code{.LFB0} from the compiler's\n+assembly output.  It then matches the result against the expected\n+output for a function as a single regular expression.  This means that\n+later lines can use backslashes to refer back to @samp{(@dots{})}\n+captures on earlier lines.  For example:\n+\n+@smallexample\n+/* @{ dg-final @{ check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" @} @} */\n+@dots{}\n+/*\n+** add_w0_s8_m:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+svint8_t add_w0_s8_m (@dots{}) @{ @dots{} @}\n+@dots{}\n+/*\n+** add_b0_s8_m:\n+**\tmov\t(z[0-9]+\\.b), b0\n+**\tadd\tz1\\.b, p0/m, z1\\.b, \\1\n+**\tret\n+*/\n+svint8_t add_b0_s8_m (@dots{}) @{ @dots{} @}\n+@end smallexample\n+\n+checks whether the implementations of @code{add_w0_s8_m} and\n+@code{add_b0_s8_m} match the regular expressions given.  The test only\n+runs when @samp{-DCHECK_ASM} is passed on the command line.\n+\n+It is possible to create non-capturing multi-line regular expression\n+groups of the form @samp{(@var{a}|@var{b}|@dots{})} by putting the\n+@samp{(}, @samp{|} and @samp{)} on separate lines (each still using\n+@var{prefix}).  For example:\n+\n+@smallexample\n+/*\n+** cmple_f16_tied:\n+** (\n+**\tfcmge\tp0\\.h, p0/z, z1\\.h, z0\\.h\n+** |\n+**\tfcmle\tp0\\.h, p0/z, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+svbool_t cmple_f16_tied (@dots{}) @{ @dots{} @}\n+@end smallexample\n+\n+checks whether @code{cmple_f16_tied} is implemented by the\n+@code{fcmge} instruction followed by @code{ret} or by the\n+@code{fcmle} instruction followed by @code{ret}.  The test is\n+still a single regular rexpression.\n+\n+A line containing just:\n+\n+@smallexample\n+@var{prefix} ...\n+@end smallexample\n+\n+stands for zero or more unmatched lines; the whitespace after\n+@var{prefix} is again not significant.\n+\n @end table\n \n @subsubsection Scan optimization dump files"}, {"sha": "f896434fc0bc9978e97ab6627001c7f77ba3c610", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,3 +1,21 @@\n+2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/scanasm.exp (parse_function_bodies, check_function_body)\n+\t(check-function-bodies): New procedures.\n+\t* gcc.target/aarch64/sve/init_1.c: Use check-function-bodies\n+\tinstead of scan-assembler.\n+\t* gcc.target/aarch64/sve/init_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_12.c: Likewise.\n+\n 2019-07-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/lto/pr89330_0.C (dg-lto-options): Add -fPIC."}, {"sha": "8e6004337b3bfc777369330bd7a416f0a9088496", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_1.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,26 +1,22 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 1.1: Trailing constants with stepped sequence.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tindex\t(z[0-9]+\\.s), #1, #1\n+**\tinsr\t\\1, w1\n+**\tinsr\t\\1, w0\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b)\n {\n   return (vnx4si) { a, b, 1, 2, 3, 4, 5, 6 };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        index   z0.s, #1, #1\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tindex\\t(z[0-9]+\\.s), #1, #1\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "bee039415d0898f4ef26644f2a8c015ef735e5fd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_10.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,28 +1,24 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 5.4: Interleaved repeating elements and non-repeating elements.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w3\n+**\tmov\t(z[0-9]+\\.s), w2\n+**\tinsr\t\\2, w1\n+**\tinsr\t\\2, w0\n+**\tzip1\t\\2, \\2, \\1\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int c, int f)\n {\n   return (vnx4si) { a, f, b, f, c, f, c, f };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z1.s, w3\n-        mov     z0.s, w2\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        zip1    z0.s, z0.s, z1.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w3\\n\\tmov\\t(z[0-9]+\\.s), w2\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w0\\n\\tzip1\\t\\2, \\2, \\1} } } */"}, {"sha": "8a9496f34e4766390daf6b07c23cd3390eed642a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_11.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,27 +1,23 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 5.5: Interleaved repeating elements and trailing same elements.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w1\n+**\tinsr\t\\1, w0\n+**\tmov\t(z[0-9]+\\.s), w2\n+**\tzip1\t\\1, \\1, \\2\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int f) \n {\n   return (vnx4si) { a, f, b, f, b, f, b, f };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z0.s, w1\n-        insr    z0.s, w0\n-        mov     z1.s, w2\n-        zip1    z0.s, z0.s, z1.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w1\\n\\tinsr\\t\\1, w0\\n\\tmov\\t(z[0-9]+\\.s), w2\\n\\tzip1\\t\\1, \\1, \\2} } } */"}, {"sha": "cbf418e4e6313f640587fc187b8f4740864750fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_12.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,29 +1,25 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 5.5: Interleaved repeating elements and trailing same elements.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w2\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tinsr\t\\2, w1\n+**\tinsr\t\\2, w1\n+**\tinsr\t\\2, w1\n+**\tzip1\t\\2, \\2, \\1\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int f) \n {\n   return (vnx4si) { b, f, b, f, b, f, a, f };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z1.s, w2\n-        mov     z0.s, w0\n-        insr    z0.s, w1\n-        insr    z0.s, w1\n-        insr    z0.s, w1\n-        zip1    z0.s, z0.s, z1.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w2\\n\\tmov\\t(z[0-9]+\\.s), w0\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w1\\n\\tzip1\\t\\2, \\2, \\1} } } */"}, {"sha": "83bd999d21edf7c8fdde6b4f72fb971a7632c21d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_2.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,29 +1,23 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 1.2: Trailing constants with repeating sequence.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\t...\n+**\tld1w\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\n+**\tinsr\t\\1, w1\n+**\tinsr\t\\1, w0\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b)\n {\n   return (vnx4si) { a, b, 2, 3, 2, 3, 2, 3 };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        ptrue   p0.s, vl8\n-        adrp    x2, .LANCHOR0\n-        add     x2, x2, :lo12:.LANCHOR0\n-        ld1w    z0.s, p0/z, [x2]\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "4a418b633f53722c25a2ce3ea148e3c794e5b646", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_3.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,27 +1,24 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 2.1: Leading constants with stepped sequence.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tindex\t(z[0-9]+\\.s), #6, #-1\n+**\tinsr\t\\1, w0\n+**\tinsr\t\\1, w1\n+**\trev\t\\1, \\1\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b)\n {\n   return (vnx4si) { 1, 2, 3, 4, 5, 6, a, b };\n }\n \n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        index   z0.s, #6, #-1\n-        insr    z0.s, w0\n-        insr    z0.s, w1\n-        rev     z0.s, z0.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tindex\\t(z[0-9]+\\.s), #6, #-1\\n\\tinsr\\t\\1, w0\\n\\tinsr\\t\\1, w1\\n\\trev\\t\\1, \\1} } } */"}, {"sha": "fa914488adc6579c9a417addbb81d3370be745a8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_4.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,30 +1,24 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 2.2: Leading constants with stepped sequence.  */\n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\t...\n+**\tld1w\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\n+**\tinsr\t\\1, w1\n+**\tinsr\t\\1, w0\n+**\trev\t\\1, \\1\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b)\n {\n   return (vnx4si) { 3, 2, 3, 2, 3, 2, b, a };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        ptrue   p0.s, vl8\n-        adrp    x2, .LANCHOR0\n-        add     x2, x2, :lo12:.LANCHOR0\n-        ld1w    z0.s, p0/z, [x2]\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        rev     z0.s, z0.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0\\n\\trev\\t\\1, \\1} } } */"}, {"sha": "794e265c3b8f9312c5b0163a61fc7610147ba14f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_5.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,26 +1,22 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 3: Trailing same element.  */ \n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w2\n+**\tinsr\t\\1, w1\n+**\tinsr\t\\1, w0\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int c)\n {\n   return (vnx4si) { a, b, c, c, c, c, c, c };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z0.s, w2\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w2\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "8443fc0000e3463c4f8926ae8e3a3130754cf8f4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_6.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,27 +1,23 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 3: Trailing same element.  */ \n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w2\n+**\tinsr\t\\1, w1\n+**\tinsr\t\\1, w0\n+**\trev\t\\1, \\1\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int c)\n {\n   return (vnx4si) { c, c, c, c, c, c, b, a };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z0.s, w2\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        rev     z0.s, z0.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w2\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0\\n\\trev\\t\\1, \\1} } } */"}, {"sha": "63dbbbe61f6bc879978072a0a9613a6595790051", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_7.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,31 +1,27 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 5.1: All elements.  */ \n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w7\n+**\tinsr\t\\1, w6\n+**\tinsr\t\\1, w5\n+**\tinsr\t\\1, w4\n+**\tinsr\t\\1, w3\n+**\tinsr\t\\1, w2\n+**\tinsr\t\\1, w1\n+**\tinsr\t\\1, w0\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int c, int d, int e, int f, int g, int h)\n {\n   return (vnx4si) { a, b, c, d, e, f, g, h };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z0.s, w7\n-        insr    z0.s, w6\n-        insr    z0.s, w5\n-        insr    z0.s, w4\n-        insr    z0.s, w3\n-        insr    z0.s, w2\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w7\\n\\tinsr\\t\\1, w6\\n\\tinsr\\t\\1, w5\\n\\tinsr\\t\\1, w4\\n\\tinsr\\t\\1, w3\\n\\tinsr\\t\\1, w2\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "9c2456785d53c1c66a272fa89f06abdd157d5c94", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_8.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,32 +1,26 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 5.2: Interleaved elements and constants.  */ \n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\t...\n+**\tld1w\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\n+**\tmov\t(z[0-9]+\\.s), w3\n+**\tinsr\t\\2, w2\n+**\tinsr\t\\2, w1\n+**\tinsr\t\\2, w0\n+**\tzip1\t\\2, \\2, \\1\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b, int c, int d)\n {\n   return (vnx4si) { a, 1, b, 2, c, 3, d, 4 }; \n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        ptrue   p0.s, vl8\n-        adrp    x4, .LANCHOR0\n-        add     x4, x4, :lo12:.LANCHOR0\n-        ld1w    z1.s, p0/z, [x4]\n-        mov     z0.s, w3\n-        insr    z0.s, w2\n-        insr    z0.s, w1\n-        insr    z0.s, w0\n-        zip1    z0.s, z0.s, z1.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\\n\\tmov\\t(z[0-9]+\\.s), w3\\n\\tinsr\\t\\2, w2\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w0\\n\\tzip1\\t\\2, \\2, \\1} } } */"}, {"sha": "d22ab71e696ceaaa47dd3e32d2b7a44211b4d667", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_9.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9.c?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -1,26 +1,22 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n /* Case 5.3: Repeated elements.  */ \n \n #include <stdint.h>\n \n typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n+/*\n+** foo:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmov\t(z[0-9]+\\.s), w1\n+**\tzip1\t\\1, \\1, \\2\n+**\t...\n+*/\n __attribute__((noipa))\n vnx4si foo(int a, int b)\n {\n   return (vnx4si) { a, b, a, b, a, b, a, b };\n }\n-\n-/*\n-foo:\n-.LFB0:\n-        .cfi_startproc\n-        mov     z0.s, w0\n-        mov     z1.s, w1\n-        zip1    z0.s, z0.s, z1.s\n-        ret\n-*/\n-\n-/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w0\\n\\tmov\\t(z[0-9]+\\.s), w1\\n\\tzip1\\t\\1, \\1, \\2} } } */"}, {"sha": "0f1b246b8dc5d177e01bd5b03cc44c4f40eadaa1", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d706ff86ea86868615558e92407674a4f4b4af9/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=4d706ff86ea86868615558e92407674a4f4b4af9", "patch": "@@ -554,3 +554,169 @@ proc scan-lto-assembler { args } {\n     verbose \"output_file: $output_file\"\n     dg-scan \"scan-lto-assembler\" 1 $testcase $output_file $args\n }\n+\n+# Read assembly file FILENAME and store a mapping from function names\n+# to function bodies in array RESULT.  FILENAME has already been uploaded\n+# locally where necessary and is known to exist.\n+\n+proc parse_function_bodies { filename result } {\n+    upvar $result up_result\n+\n+    # Regexp for the start of a function definition (name in \\1).\n+    set label {^([a-zA-Z_]\\S+):$}\n+\n+    # Regexp for the end of a function definition.\n+    set terminator {^\\s*\\.size}\n+\n+    # Regexp for lines that aren't interesting.\n+    set fluff {^\\s*(?:\\.|//)}\n+\n+    set fd [open $filename r]\n+    set in_function 0\n+    while { [gets $fd line] >= 0 } {\n+\tif { [regexp $label $line dummy function_name] } {\n+\t    set in_function 1\n+\t    set function_body \"\"\n+\t} elseif { $in_function } {\n+\t    if { [regexp $terminator $line] } {\n+\t\tset up_result($function_name) $function_body\n+\t\tset in_function 0\n+\t    } elseif { ![regexp $fluff $line] } {\n+\t\tappend function_body $line \"\\n\"\n+\t    }\n+\t}\n+    }\n+    close $fd\n+}\n+\n+# FUNCTIONS is an array that maps function names to function bodies.\n+# Return true if it contains a definition of function NAME and if\n+# that definition matches BODY_REGEXP.\n+\n+proc check_function_body { functions name body_regexp } {\n+    upvar $functions up_functions\n+\n+    if { ![info exists up_functions($name)] } {\n+\treturn 0\n+    }\n+    return [regexp \"^$body_regexp\\$\" $up_functions($name)]\n+}\n+\n+# Check the implementations of functions against expected output.  Used as:\n+#\n+# { dg-do { check-function-bodies PREFIX TERMINATOR[ OPTION] } }\n+#\n+# See sourcebuild.texi for details.\n+\n+proc check-function-bodies { args } {\n+    if { [llength $args] < 2 } {\n+\terror \"too few arguments to check-function-bodies\"\n+    }\n+    if { [llength $args] > 3 } {\n+\terror \"too many arguments to check-function-bodies\"\n+    }\n+\n+    if { [llength $args] == 3 } {\n+\tset required_flag [lindex $args 2]\n+\n+\tupvar 2 dg-extra-tool-flags extra_tool_flags\n+\tset flags $extra_tool_flags\n+\n+\tglobal torture_current_flags\n+\tif { [info exists torture_current_flags] } {\n+\t    append flags \" \" $torture_current_flags\n+\t}\n+\tif { ![regexp \" $required_flag \" $flags] } {\n+\t    return\n+\t}\n+    }\n+\n+    set testcase [testname-for-summary]\n+    # The name might include a list of options; extract the file name.\n+    set filename [lindex $testcase 0]\n+\n+    global srcdir\n+    set input_filename \"$srcdir/$filename\"\n+    set output_filename \"[file rootname [file tail $filename]].s\"\n+\n+    set prefix [lindex $args 0]\n+    set prefix_len [string length $prefix]\n+    set terminator [lindex $args 1]\n+    if { [string equal $terminator \"\"] } {\n+\tset terminator \"*/\"\n+    }\n+    set terminator_len [string length $terminator]\n+\n+    set have_bodies 0\n+    if { [is_remote host] } {\n+\tremote_upload host \"$filename\"\n+    }\n+    if { [file exists $output_filename] } {\n+\tparse_function_bodies $output_filename functions\n+\tset have_bodies 1\n+    } else {\n+\tverbose -log \"$testcase: output file does not exist\"\n+    }\n+\n+    set count 0\n+    set function_regexp \"\"\n+    set label {^(\\S+):$}\n+\n+    set lineno 1\n+    set fd [open $input_filename r]\n+    set in_function 0\n+    while { [gets $fd line] >= 0 } {\n+\tif { [string equal -length $prefix_len $line $prefix] } {\n+\t    set line [string trim [string range $line $prefix_len end]]\n+\t    if { !$in_function } {\n+\t\tif { [regexp \"^(.*\\\\S)\\\\s+{(.*)}\\$\" $line dummy \\\n+\t\t\t  line selector] } {\n+\t\t    set selector [dg-process-target $selector]\n+\t\t} else {\n+\t\t    set selector \"P\"\n+\t\t}\n+\t\tif { ![regexp $label $line dummy function_name] } {\n+\t\t    close $fd\n+\t\t    error \"check-function-bodies: line $lineno does not have a function label\"\n+\t\t}\n+\t\tset in_function 1\n+\t\tset function_regexp \"\"\n+\t    } elseif { [string equal $line \"(\"] } {\n+\t\tappend function_regexp \"(?:\"\n+\t    } elseif { [string equal $line \"|\"] } {\n+\t\tappend function_regexp \"|\"\n+\t    } elseif { [string equal $line \")\"] } {\n+\t\tappend function_regexp \")\"\n+\t    } elseif { [string equal $line \"...\"] } {\n+\t\tappend function_regexp \".*\"\n+\t    } else {\n+\t\tappend function_regexp \"\\t\" $line \"\\n\"\n+\t    }\n+\t} elseif { [string equal -length $terminator_len $line $terminator] } {\n+\t    if { ![string equal $selector \"N\"] } {\n+\t\tif { [string equal $selector \"F\"] } {\n+\t\t    setup_xfail \"*-*-*\"\n+\t\t}\n+\t\tset testname \"$testcase check-function-bodies $function_name\"\n+\t\tif { !$have_bodies } {\n+\t\t    unresolved $testname\n+\t\t} elseif { [check_function_body functions $function_name \\\n+\t\t\t\t$function_regexp] } {\n+\t\t    pass $testname\n+\t\t} else {\n+\t\t    fail $testname\n+\t\t}\n+\t    }\n+\t    set in_function 0\n+\t    incr count\n+\t}\n+\tincr lineno\n+    }\n+    close $fd\n+    if { $in_function } {\n+\terror \"check-function-bodies: missing \\\"$terminator\\\"\"\n+    }\n+    if { $count == 0 } {\n+\terror \"check-function-bodies: no matches found\"\n+    }\n+}"}]}