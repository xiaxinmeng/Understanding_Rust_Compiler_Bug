{"sha": "fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmYjgwMzI1ZjNlZjA4YjBlZTA3ZWRjNDJlZWYxNTI5OGJhODBlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-27T21:27:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-27T21:27:00Z"}, "message": "re PR libgomp/90641 (libgomp.c-c++-common/lastprivate-conditional-1.c etc FAIL)\n\n\tPR libgomp/90641\n\t* work.c (gomp_init_work_share): Instead of aligning final ordered\n\tvalue to multiples of long long alignment, align to that the\n\tfirst part (ordered team ids) and if inline_ordered_team_ids\n\tis not on a long long alignment boundary within the structure,\n\tuse __alignof__ (long long) - 1 pad size always.\n\t* loop.c (GOMP_loop_start): Fix *mem computation if\n\tinline_ordered_team_ids is not aligned on long long alignment boundary\n\twithin the structure.\n\t* loop-ull.c (GOMP_loop_ull_start): Likewise.\n\t* sections.c (GOMP_sections2_start): Likewise.\n\nFrom-SVN: r271671", "tree": {"sha": "df999803c550f6cea25366948c4645056d4763e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df999803c550f6cea25366948c4645056d4763e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9467fbc0ff8c06ef8eb2e96fa399734758620a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9467fbc0ff8c06ef8eb2e96fa399734758620a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9467fbc0ff8c06ef8eb2e96fa399734758620a8f"}], "stats": {"total": 107, "additions": 83, "deletions": 24}, "files": [{"sha": "73bc23e80d0e4b23a318a29f4d0c055487cc079a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "patch": "@@ -1,3 +1,17 @@\n+2019-05-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/90641\n+\t* work.c (gomp_init_work_share): Instead of aligning final ordered\n+\tvalue to multiples of long long alignment, align to that the\n+\tfirst part (ordered team ids) and if inline_ordered_team_ids\n+\tis not on a long long alignment boundary within the structure,\n+\tuse __alignof__ (long long) - 1 pad size always.\n+\t* loop.c (GOMP_loop_start): Fix *mem computation if\n+\tinline_ordered_team_ids is not aligned on long long alignment boundary\n+\twithin the structure.\n+\t* loop-ull.c (GOMP_loop_ull_start): Likewise.\n+\t* sections.c (GOMP_sections2_start): Likewise.\n+\n 2019-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/lastprivate-conditional-1.c: New test."}, {"sha": "37861d1d4f38a999a992ca96193c6f7c4d461bf9", "filename": "libgomp/loop.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Floop.c?ref=fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "patch": "@@ -267,14 +267,17 @@ GOMP_loop_start (long start, long end, long incr, long sched,\n       if (mem)\n \t{\n \t  uintptr_t size = (uintptr_t) *mem;\n+#define INLINE_ORDERED_TEAM_IDS_OFF \\\n+  ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\t\t\\\n+    + __alignof__ (long long) - 1) & ~(__alignof__ (long long) - 1))\n \t  if (size > (sizeof (struct gomp_work_share)\n-\t\t      - offsetof (struct gomp_work_share,\n-\t\t\t\t  inline_ordered_team_ids)))\n-\t    thr->ts.work_share->ordered_team_ids\n-\t      = gomp_malloc_cleared (size);\n+\t\t      - INLINE_ORDERED_TEAM_IDS_OFF))\n+\t    *mem\n+\t      = (void *) (thr->ts.work_share->ordered_team_ids\n+\t\t\t  = gomp_malloc_cleared (size));\n \t  else\n-\t    memset (thr->ts.work_share->ordered_team_ids, '\\0', size);\n-\t  *mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t    *mem = memset (((char *) thr->ts.work_share)\n+\t\t\t   + INLINE_ORDERED_TEAM_IDS_OFF, '\\0', size);\n \t}\n       gomp_work_share_init_done ();\n     }\n@@ -287,7 +290,18 @@ GOMP_loop_start (long start, long end, long incr, long sched,\n \t\t\t\t\t\t  first_reductions);\n \t}\n       if (mem)\n-\t*mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t{\n+\t  if ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\n+\t       & (__alignof__ (long long) - 1)) == 0)\n+\t    *mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t  else\n+\t    {\n+\t      uintptr_t p = (uintptr_t) thr->ts.work_share->ordered_team_ids;\n+\t      p += __alignof__ (long long) - 1;\n+\t      p &= ~(__alignof__ (long long) - 1);\n+\t      *mem = (void *) p;\n+\t    }\n+\t}\n     }\n \n   if (!istart)"}, {"sha": "edf1c323f2980c52341881b72471c993fe8c6c42", "filename": "libgomp/loop_ull.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Floop_ull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Floop_ull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Floop_ull.c?ref=fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "patch": "@@ -266,14 +266,17 @@ GOMP_loop_ull_start (bool up, gomp_ull start, gomp_ull end,\n       if (mem)\n \t{\n \t  uintptr_t size = (uintptr_t) *mem;\n+#define INLINE_ORDERED_TEAM_IDS_OFF \\\n+  ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\t\t\\\n+    + __alignof__ (long long) - 1) & ~(__alignof__ (long long) - 1))\n \t  if (size > (sizeof (struct gomp_work_share)\n-\t\t      - offsetof (struct gomp_work_share,\n-\t\t\t\t  inline_ordered_team_ids)))\n-\t    thr->ts.work_share->ordered_team_ids\n-\t      = gomp_malloc_cleared (size);\n+\t\t      - INLINE_ORDERED_TEAM_IDS_OFF))\n+\t    *mem\n+\t      = (void *) (thr->ts.work_share->ordered_team_ids\n+\t\t\t  = gomp_malloc_cleared (size));\n \t  else\n-\t    memset (thr->ts.work_share->ordered_team_ids, '\\0', size);\n-\t  *mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t    *mem = memset (((char *) thr->ts.work_share)\n+\t\t\t   + INLINE_ORDERED_TEAM_IDS_OFF, '\\0', size);\n \t}\n       gomp_work_share_init_done ();\n     }\n@@ -286,7 +289,18 @@ GOMP_loop_ull_start (bool up, gomp_ull start, gomp_ull end,\n \t\t\t\t\t\t  first_reductions);\n \t}\n       if (mem)\n-\t*mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t{\n+\t  if ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\n+\t       & (__alignof__ (long long) - 1)) == 0)\n+\t    *mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t  else\n+\t    {\n+\t      uintptr_t p = (uintptr_t) thr->ts.work_share->ordered_team_ids;\n+\t      p += __alignof__ (long long) - 1;\n+\t      p &= ~(__alignof__ (long long) - 1);\n+\t      *mem = (void *) p;\n+\t    }\n+\t}\n     }\n \n   return ialias_call (GOMP_loop_ull_runtime_next) (istart, iend);"}, {"sha": "887943670cc0bbafe8557c186f417d2ea3229caa", "filename": "libgomp/sections.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Fsections.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Fsections.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fsections.c?ref=fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "patch": "@@ -118,14 +118,17 @@ GOMP_sections2_start (unsigned count, uintptr_t *reductions, void **mem)\n       if (mem)\n \t{\n \t  uintptr_t size = (uintptr_t) *mem;\n+#define INLINE_ORDERED_TEAM_IDS_OFF \\\n+  ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\t\t\\\n+    + __alignof__ (long long) - 1) & ~(__alignof__ (long long) - 1))\n \t  if (size > (sizeof (struct gomp_work_share)\n-\t\t      - offsetof (struct gomp_work_share,\n-\t\t\t\t  inline_ordered_team_ids)))\n-\t    thr->ts.work_share->ordered_team_ids\n-\t      = gomp_malloc_cleared (size);\n+\t\t      - INLINE_ORDERED_TEAM_IDS_OFF))\n+\t    *mem\n+\t      = (void *) (thr->ts.work_share->ordered_team_ids\n+\t\t\t  = gomp_malloc_cleared (size));\n \t  else\n-\t    memset (thr->ts.work_share->ordered_team_ids, '\\0', size);\n-\t  *mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t    *mem = memset (((char *) thr->ts.work_share)\n+\t\t\t   + INLINE_ORDERED_TEAM_IDS_OFF, '\\0', size);\n \t}\n       gomp_work_share_init_done ();\n     }\n@@ -138,7 +141,18 @@ GOMP_sections2_start (unsigned count, uintptr_t *reductions, void **mem)\n \t\t\t\t\t\t  first_reductions);\n \t}\n       if (mem)\n-\t*mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t{\n+\t  if ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\n+\t       & (__alignof__ (long long) - 1)) == 0)\n+\t    *mem = (void *) thr->ts.work_share->ordered_team_ids;\n+\t  else\n+\t    {\n+\t      uintptr_t p = (uintptr_t) thr->ts.work_share->ordered_team_ids;\n+\t      p += __alignof__ (long long) - 1;\n+\t      p &= ~(__alignof__ (long long) - 1);\n+\t      *mem = (void *) p;\n+\t    }\n+\t}\n     }\n \n #ifdef HAVE_SYNC_BUILTINS"}, {"sha": "a589b8b523113a8d43cfc0921faf8e14f4bd06d9", "filename": "libgomp/work.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Fwork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfb80325f3ef08b0ee07edc42eef15298ba80ec/libgomp%2Fwork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fwork.c?ref=fcfb80325f3ef08b0ee07edc42eef15298ba80ec", "patch": "@@ -110,9 +110,12 @@ gomp_init_work_share (struct gomp_work_share *ws, size_t ordered,\n \n       if (__builtin_expect (ordered != 1, 0))\n \t{\n-\t  ordered += nthreads * sizeof (*ws->ordered_team_ids) - 1;\n-\t  ordered = ordered + __alignof__ (long long) - 1;\n-\t  ordered &= ~(__alignof__ (long long) - 1);\n+\t  size_t o = nthreads * sizeof (*ws->ordered_team_ids);\n+\t  o += __alignof__ (long long) - 1;\n+\t  if ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\n+\t       & (__alignof__ (long long) - 1)) == 0)\n+\t    o &= ~(__alignof__ (long long) - 1);\n+\t  ordered += o - 1;\n \t}\n       else\n \tordered = nthreads * sizeof (*ws->ordered_team_ids);"}]}