{"sha": "7cf240d54cd98b2907eea38ab88f155eb7c1e63f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmMjQwZDU0Y2Q5OGIyOTA3ZWVhMzhhYjg4ZjE1NWViN2MxZTYzZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-22T22:33:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-22T22:33:51Z"}, "message": "cfgcleanup.c (first_pass): New static variable.\n\n\n\t* cfgcleanup.c (first_pass): New static variable.\n\t(try_forward_edges):  Add work limiting check for threading.\n\t(try_crossjump_bb):  Add work limiting check for crossjumping.\n\t(try_optimize_cfg):  Maintain first pass variable.\n\nFrom-SVN: r76375", "tree": {"sha": "70ac6c3850dd634affec1a9ffa95e9ac6b785690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ac6c3850dd634affec1a9ffa95e9ac6b785690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf240d54cd98b2907eea38ab88f155eb7c1e63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf240d54cd98b2907eea38ab88f155eb7c1e63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf240d54cd98b2907eea38ab88f155eb7c1e63f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf240d54cd98b2907eea38ab88f155eb7c1e63f/comments", "author": null, "committer": null, "parents": [{"sha": "b16417d6156db62e5135262b3ab7da4bfa01ba48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16417d6156db62e5135262b3ab7da4bfa01ba48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16417d6156db62e5135262b3ab7da4bfa01ba48"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "6e361e776bcdf05cf412fa8b7ca6abac1c8f8467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf240d54cd98b2907eea38ab88f155eb7c1e63f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf240d54cd98b2907eea38ab88f155eb7c1e63f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cf240d54cd98b2907eea38ab88f155eb7c1e63f", "patch": "@@ -1,3 +1,10 @@\n+2004-01-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgcleanup.c (first_pass): New static variable.\n+\t(try_forward_edges):  Add work limiting check for threading.\n+\t(try_crossjump_bb):  Add work limiting check for crossjumping.\n+\t(try_optimize_cfg):  Maintain first pass variable.\n+\n 2004-01-22  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.c (function_arg): Generalize logic so that it"}, {"sha": "ad44cbb446749ffb1645236c50bbebb7ba74045b", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf240d54cd98b2907eea38ab88f155eb7c1e63f/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf240d54cd98b2907eea38ab88f155eb7c1e63f/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=7cf240d54cd98b2907eea38ab88f155eb7c1e63f", "patch": "@@ -67,6 +67,8 @@ enum bb_flags\n \n #define FORWARDER_BLOCK_P(BB) (BB_FLAGS (BB) & BB_FORWARDER_BLOCK)\n \n+/* Set to true when we are running first pass of try_optimize_cfg loop.  */\n+static bool first_pass;\n static bool try_crossjump_to_edge (int, edge, edge);\n static bool try_crossjump_bb (int, basic_block);\n static bool outgoing_edges_match (int, basic_block, basic_block);\n@@ -429,6 +431,7 @@ try_forward_edges (int mode, basic_block b)\n       int counter;\n       bool threaded = false;\n       int nthreaded_edges = 0;\n+      bool may_thread = first_pass | (b->flags & BB_DIRTY);\n \n       next = e->succ_next;\n \n@@ -447,6 +450,7 @@ try_forward_edges (int mode, basic_block b)\n \t{\n \t  basic_block new_target = NULL;\n \t  bool new_target_threaded = false;\n+\t  may_thread |= target->flags & BB_DIRTY;\n \n \t  if (FORWARDER_BLOCK_P (target)\n \t      && target->succ->dest != EXIT_BLOCK_PTR)\n@@ -459,7 +463,7 @@ try_forward_edges (int mode, basic_block b)\n \n \t  /* Allow to thread only over one edge at time to simplify updating\n \t     of probabilities.  */\n-\t  else if (mode & CLEANUP_THREADING)\n+\t  else if ((mode & CLEANUP_THREADING) && may_thread)\n \t    {\n \t      edge t = thread_jump (mode, e, target);\n \t      if (t)\n@@ -1573,6 +1577,12 @@ try_crossjump_bb (int mode, basic_block bb)\n \t     If there is a match, we'll do it the other way around.  */\n \t  if (e == fallthru)\n \t    continue;\n+\t  /* If nothing changed since the last attempt, there is nothing\n+\t     we can do.  */\n+\t  if (!first_pass\n+\t      && (!(e->src->flags & BB_DIRTY)\n+\t\t  && !(fallthru->src->flags & BB_DIRTY)))\n+\t    continue;\n \n \t  if (try_crossjump_to_edge (mode, e, fallthru))\n \t    {\n@@ -1615,6 +1625,13 @@ try_crossjump_bb (int mode, basic_block bb)\n \t  if (e->src->index > e2->src->index)\n \t    continue;\n \n+\t  /* If nothing changed since the last attempt, there is nothing\n+\t     we can do.  */\n+\t  if (!first_pass\n+\t      && (!(e->src->flags & BB_DIRTY)\n+\t\t  && !(e2->src->flags & BB_DIRTY)))\n+\t    continue;\n+\n \t  if (try_crossjump_to_edge (mode, e, e2))\n \t    {\n \t      changed = true;\n@@ -1644,11 +1661,12 @@ try_optimize_cfg (int mode)\n   FOR_EACH_BB (bb)\n     update_forwarder_flag (bb);\n \n-  if (mode & CLEANUP_UPDATE_LIFE)\n+  if (mode & (CLEANUP_UPDATE_LIFE | CLEANUP_CROSSJUMP | CLEANUP_THREADING))\n     clear_bb_flags ();\n \n   if (! (* targetm.cannot_modify_jumps_p) ())\n     {\n+      first_pass = true;\n       /* Attempt to merge blocks as made possible by edge removal.  If\n \t a block has only one successor, and the successor has only\n \t one predecessor, they may be combined.  */\n@@ -1824,6 +1842,7 @@ try_optimize_cfg (int mode)\n #endif\n \n \t  changed_overall |= changed;\n+\t  first_pass = false;\n \t}\n       while (changed);\n     }"}]}