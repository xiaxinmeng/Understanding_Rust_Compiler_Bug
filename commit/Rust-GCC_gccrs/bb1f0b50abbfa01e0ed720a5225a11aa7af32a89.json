{"sha": "bb1f0b50abbfa01e0ed720a5225a11aa7af32a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxZjBiNTBhYmJmYTAxZTBlZDcyMGE1MjI1YTExYWE3YWYzMmE4OQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-08T15:11:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-08T15:11:25Z"}, "message": "c++: ICE with constexpr call that returns a PMF [PR98551]\n\nWe shouldn't do replace_result_decl after evaluating a call that returns\na PMF because PMF temporaries aren't wrapped in a TARGET_EXPR (and so we\ncan't trust ctx->object), and PMF initializers can't be self-referential\nanyway, so replace_result_decl would always be a no-op.\n\nTo that end, this patch changes the relevant AGGREGATE_TYPE_P test to\nCLASS_TYPE_P, which should rule out PMFs (as well as arrays, which we\ncan't return and therefore won't see here).  This fixes an ICE from the\nsanity check in replace_result_decl in the below testcase during\nconstexpr evaluation of the call f() in the initializer g(f()).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98551\n\t* constexpr.c (cxx_eval_call_expression): Check CLASS_TYPE_P\n\tinstead of AGGREGATE_TYPE_P before calling replace_result_decl.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98551\n\t* g++.dg/cpp0x/constexpr-pmf2.C: New test.", "tree": {"sha": "886628713cacc3c072c090e3b42db7a5f5e5f10d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886628713cacc3c072c090e3b42db7a5f5e5f10d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89/comments", "author": null, "committer": null, "parents": [{"sha": "98a1fb705ead9258642f2dec0431f11508a9b13c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a1fb705ead9258642f2dec0431f11508a9b13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98a1fb705ead9258642f2dec0431f11508a9b13c"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "9dddc53ca52aedbd656408b15da83c3c6bb030c5", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=bb1f0b50abbfa01e0ed720a5225a11aa7af32a89", "patch": "@@ -2790,7 +2790,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t    /* Rewrite all occurrences of the function's RESULT_DECL with the\n \t       current object under construction.  */\n \t    if (!*non_constant_p && ctx->object\n-\t\t&& AGGREGATE_TYPE_P (TREE_TYPE (res))\n+\t\t&& CLASS_TYPE_P (TREE_TYPE (res))\n \t\t&& !is_empty_class (TREE_TYPE (res)))\n \t      if (replace_result_decl (&result, res, ctx->object))\n \t\tcacheable = false;"}, {"sha": "a76e712afe1ba5ac9d28d0bbe89eefa5c317604b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-pmf2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1f0b50abbfa01e0ed720a5225a11aa7af32a89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf2.C?ref=bb1f0b50abbfa01e0ed720a5225a11aa7af32a89", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/98551\n+// { dg-do compile { target c++11 } }\n+\n+struct A {};\n+struct B { int t(); };\n+using pmf = decltype(&B::t);\n+constexpr pmf f() { return &B::t; }\n+constexpr A g(pmf) { return {}; };\n+constexpr A x = g(f());"}]}