{"sha": "9943eb0be30702b303d91c36718c3a2c8dfced8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0M2ViMGJlMzA3MDJiMzAzZDkxYzM2NzE4YzNhMmM4ZGZjZWQ4Yg==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2007-09-12T00:48:49Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2007-09-12T00:48:49Z"}, "message": "spu.c (spu_emit_branch_or_set): Handle NaN values as operands to DFmode GE or LE compares.\n\n\t* config/spu/spu.c (spu_emit_branch_or_set): Handle NaN values as\n\toperands to DFmode GE or LE compares.\n\ntestsuite/\n\t* gcc.target/spu/dfcgt-nan.c: New test.\n\nFrom-SVN: r128404", "tree": {"sha": "e79af483bb97019f406ce527c11a2427923e9114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e79af483bb97019f406ce527c11a2427923e9114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9943eb0be30702b303d91c36718c3a2c8dfced8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9943eb0be30702b303d91c36718c3a2c8dfced8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9943eb0be30702b303d91c36718c3a2c8dfced8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9943eb0be30702b303d91c36718c3a2c8dfced8b/comments", "author": null, "committer": null, "parents": [{"sha": "c5926214424159cb5233844bf5c2e72346c4e6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5926214424159cb5233844bf5c2e72346c4e6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5926214424159cb5233844bf5c2e72346c4e6c1"}], "stats": {"total": 96, "additions": 86, "deletions": 10}, "files": [{"sha": "4af559e80e4a28bebd9ad402bc5ace30c15a8e73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9943eb0be30702b303d91c36718c3a2c8dfced8b", "patch": "@@ -1,3 +1,8 @@\n+2007-09-12  Sa Liu  <saliu@de.ibm.com>\n+\n+\t* config/spu/spu.c (spu_emit_branch_or_set): Handle NaN values as\n+\toperands to DFmode GE or LE compares.\n+\n 2007-09-12  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.h (enum reg_class, REG_CLASS_CONTENTS,"}, {"sha": "2dd78a099ac95357bd630ec17e95400b2ae05b1f", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9943eb0be30702b303d91c36718c3a2c8dfced8b", "patch": "@@ -720,13 +720,14 @@ spu_emit_branch_or_set (int is_set, enum rtx_code code, rtx operands[])\n {\n   int reverse_compare = 0;\n   int reverse_test = 0;\n-  rtx compare_result;\n-  rtx comp_rtx;\n+  rtx compare_result, eq_result;\n+  rtx comp_rtx, eq_rtx;\n   rtx target = operands[0];\n   enum machine_mode comp_mode;\n   enum machine_mode op_mode;\n-  enum spu_comp_code scode;\n+  enum spu_comp_code scode, eq_code, ior_code;\n   int index;\n+  int eq_test = 0;\n \n   /* When spu_compare_op1 is a CONST_INT change (X >= C) to (X > C-1),\n      and so on, to keep the constant in operand 1. */\n@@ -757,17 +758,40 @@ spu_emit_branch_or_set (int is_set, enum rtx_code code, rtx operands[])\n \t  }\n     }\n \n+  comp_mode = SImode;\n+  op_mode = GET_MODE (spu_compare_op0);\n+\n   switch (code)\n     {\n     case GE:\n-      reverse_compare = 1;\n-      reverse_test = 1;\n       scode = SPU_GT;\n+      if (HONOR_NANS (op_mode) && spu_arch == PROCESSOR_CELLEDP)\n+\t{\n+\t  reverse_compare = 0;\n+\t  reverse_test = 0;\n+\t  eq_test = 1;\n+\t  eq_code = SPU_EQ;\n+\t}\n+      else\n+\t{\n+\t  reverse_compare = 1;\n+\t  reverse_test = 1;\n+\t}\n       break;\n     case LE:\n-      reverse_compare = 0;\n-      reverse_test = 1;\n       scode = SPU_GT;\n+      if (HONOR_NANS (op_mode) && spu_arch == PROCESSOR_CELLEDP)\n+\t{\n+\t  reverse_compare = 1;\n+\t  reverse_test = 0;\n+\t  eq_test = 1;\n+\t  eq_code = SPU_EQ;\n+\t}\n+      else\n+\t{\n+\t  reverse_compare = 0;\n+\t  reverse_test = 1;\n+\t}\n       break;\n     case LT:\n       reverse_compare = 1;\n@@ -809,9 +833,6 @@ spu_emit_branch_or_set (int is_set, enum rtx_code code, rtx operands[])\n       break;\n     }\n \n-  comp_mode = SImode;\n-  op_mode = GET_MODE (spu_compare_op0);\n-\n   switch (op_mode)\n     {\n     case QImode:\n@@ -916,6 +937,20 @@ spu_emit_branch_or_set (int is_set, enum rtx_code code, rtx operands[])\n \tabort ();\n       emit_insn (comp_rtx);\n \n+      if (eq_test)\n+        {\n+          eq_result = gen_reg_rtx (comp_mode);\n+          eq_rtx = GEN_FCN (spu_comp_icode[index][eq_code]) (eq_result,\n+\t\t\t\t\t\t\t     spu_compare_op0,\n+\t\t\t\t\t\t\t     spu_compare_op1);\n+          if (eq_rtx == 0)\n+\t    abort ();\n+          emit_insn (eq_rtx);\n+          ior_code = ior_optab->handlers[(int)comp_mode].insn_code;\n+          gcc_assert (ior_code != CODE_FOR_nothing);\n+          emit_insn (GEN_FCN (ior_code)\n+\t\t     (compare_result, compare_result, eq_result));\n+        }\n     }\n \n   if (is_set == 0)"}, {"sha": "a562e626aed5b15ffb2f66271e76f7f00a04edd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9943eb0be30702b303d91c36718c3a2c8dfced8b", "patch": "@@ -1,3 +1,8 @@\n+2007-09-12  Ben Elliston  <bje@au.ibm.com>\n+\t    Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.target/spu/dfcgt-nan.c: New test.\n+\n 2007-09-11  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/cpp/trad/include.c: Don't run for newlib targets."}, {"sha": "18ce0135638c74fa4771caf9a237198b486aea14", "filename": "gcc/testsuite/gcc.target/spu/dfcgt-nan.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fdfcgt-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9943eb0be30702b303d91c36718c3a2c8dfced8b/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fdfcgt-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fdfcgt-nan.c?ref=9943eb0be30702b303d91c36718c3a2c8dfced8b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=celledp -O1\" } */\n+/* { dg-final { scan-assembler \"dfceq\" } } */\n+\n+/* GCC previously transformed an \"a <= b\" test into \"! (a > b)\" when\n+   compiling with -march=celledp, so that the dfcgt instruction can be\n+   used to implement the comparison.\n+\n+   However, this transformation violates the IEEE-754 standard in the\n+   presence of NaN values.  If either a or b is a NaN, a <= b should\n+   evaluate to false according to IEEE rules.  However, after the\n+   transformation, a > b as implemented by dfcgt itself returns false,\n+   so the transformed test returns true.\n+\n+   Note that the equivalent transformation is valid for single-\n+   precision floating-point values on the Cell SPU, because the format\n+   does not have NaNs.  It is invalid for double-precision, even on\n+   Cell, however.  */\n+\n+int test (double a, double b) __attribute__ ((noinline));\n+int test (double a, double b)\n+{\n+  return a <= b;\n+}\n+\n+int main (void)\n+{\n+  double x = 0.0;\n+  double y = 0.0/0.0;\n+  return test (x, y);\n+}"}]}