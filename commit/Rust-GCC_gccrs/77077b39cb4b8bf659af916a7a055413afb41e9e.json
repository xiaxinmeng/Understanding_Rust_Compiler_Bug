{"sha": "77077b39cb4b8bf659af916a7a055413afb41e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwNzdiMzljYjRiOGJmNjU5YWY5MTZhN2EwNTU0MTNhZmI0MWU5ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-09T14:56:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-09T14:56:00Z"}, "message": "* call.c, parser.c, tree.c: Fix comment typos.\n\nFrom-SVN: r77536", "tree": {"sha": "3f90803367d6646435cf35a29f7bae51ff0bcfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f90803367d6646435cf35a29f7bae51ff0bcfba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77077b39cb4b8bf659af916a7a055413afb41e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77077b39cb4b8bf659af916a7a055413afb41e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77077b39cb4b8bf659af916a7a055413afb41e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77077b39cb4b8bf659af916a7a055413afb41e9e/comments", "author": null, "committer": null, "parents": [{"sha": "b83c4036106e89a5c12f75519bdfeb125d27cbb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83c4036106e89a5c12f75519bdfeb125d27cbb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83c4036106e89a5c12f75519bdfeb125d27cbb6"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "48bbd25a305d3f33141b75e03c1b1836ea8bedf9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77077b39cb4b8bf659af916a7a055413afb41e9e", "patch": "@@ -1,3 +1,7 @@\n+2004-02-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* call.c, parser.c, tree.c: Fix comment typos.\n+\n 2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n \n \tBug 13856"}, {"sha": "559a8f7992edb39117a7111d18be86a357235f1e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=77077b39cb4b8bf659af916a7a055413afb41e9e", "patch": "@@ -584,7 +584,7 @@ standard_conversion (tree to, tree from, tree expr)\n \t\t  (_class.member.lookup_) base class of D, a program\n \t\t  that necessitates this conversion is ill-formed.  */\n \t       /* Therefore, we use DERIVED_FROM_P, and not\n-\t\t  ACESSIBLY_UNIQUELY_DERIVED_FROM_P, in this test.  */\n+\t\t  ACCESSIBLY_UNIQUELY_DERIVED_FROM_P, in this test.  */\n \t       && DERIVED_FROM_P (TREE_TYPE (to), TREE_TYPE (from)))\n \t{\n \t  from = \n@@ -5524,7 +5524,7 @@ compare_ics (tree ics1, tree ics2)\n \t   A& is better than binding an expression of type C to a\n \t   reference of type A&, \n \n-\t --onversion of B to A is better than conversion of C to A  */\n+\t --conversion of B to A is better than conversion of C to A  */\n       if (is_properly_derived_from (from_type1, to)\n \t  && is_properly_derived_from (from_type2, to))\n \t{"}, {"sha": "b17d669cd6dc2d86dfe9a773041d4acfa2ecf8a7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=77077b39cb4b8bf659af916a7a055413afb41e9e", "patch": "@@ -1824,7 +1824,7 @@ cp_parser_name_lookup_error (cp_parser* parser,\n \n /* If we are parsing tentatively, remember that an error has occurred\n    during this tentative parse.  Returns true if the error was\n-   simulated; false if a messgae should be issued by the caller.  */\n+   simulated; false if a message should be issued by the caller.  */\n \n static bool\n cp_parser_simulate_error (cp_parser* parser)\n@@ -4895,7 +4895,7 @@ cp_parser_pm_expression (cp_parser* parser)\n \n /* Parse a multiplicative-expression.\n \n-   mulitplicative-expression:\n+   multiplicative-expression:\n      pm-expression\n      multiplicative-expression * pm-expression\n      multiplicative-expression / pm-expression"}, {"sha": "cab893831abca5c91bc827175ca71d5f92c5f4f6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77077b39cb4b8bf659af916a7a055413afb41e9e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=77077b39cb4b8bf659af916a7a055413afb41e9e", "patch": "@@ -2082,7 +2082,7 @@ cp_cannot_inline_tree_fn (tree* fnp)\n   /* Don't auto-inline anything that might not be bound within\n      this unit of translation.\n      Exclude comdat functions from this rule.  While they can be bound\n-     to the other unit, they all must be the same.  This is especilly\n+     to the other unit, they all must be the same.  This is especially\n      important so templates can inline.  */\n   if (!DECL_DECLARED_INLINE_P (fn) && !(*targetm.binds_local_p) (fn)\n       && !DECL_COMDAT (fn))"}]}