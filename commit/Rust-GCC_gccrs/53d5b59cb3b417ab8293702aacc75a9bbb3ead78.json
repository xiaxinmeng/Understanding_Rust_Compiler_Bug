{"sha": "53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkNWI1OWNiM2I0MTdhYjgyOTM3MDJhYWNjNzVhOWJiYjNlYWQ3OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-16T07:26:26Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-16T07:26:26Z"}, "message": "Fortran/OpenMP: Add support for OpenMP 5.1 masked construct\n\nCommit r12-2891-gd0befed793b94f3f407be44e6f69f81a02f5f073 added C/C++\nsupport for the masked construct. This patch extends it to\nFortran.\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses): Handle 'filter' clause.\n\t(show_omp_node, show_code_node): Handle (combined) omp masked construct.\n\t* frontend-passes.c (gfc_code_walker): Likewise.\n\t* gfortran.h (enum gfc_statement): Add ST_OMP_*_MASKED*.\n\t(enum gfc_exec_op): Add EXEC_OMP_*_MASKED*.\n\t* match.h (gfc_match_omp_masked, gfc_match_omp_masked_taskloop,\n\tgfc_match_omp_masked_taskloop_simd, gfc_match_omp_parallel_masked,\n\tgfc_match_omp_parallel_masked_taskloop,\n\tgfc_match_omp_parallel_masked_taskloop_simd): New prototypes.\n\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_FILTER.\n\t(gfc_match_omp_clauses): Match it.\n\t(OMP_MASKED_CLAUSES, gfc_match_omp_parallel_masked,\n\tgfc_match_omp_parallel_masked_taskloop,\n\tgfc_match_omp_parallel_masked_taskloop_simd,\n\tgfc_match_omp_masked, gfc_match_omp_masked_taskloop,\n\tgfc_match_omp_masked_taskloop_simd): New.\n\t(resolve_omp_clauses): Resolve filter clause.\n\t(gfc_resolve_omp_parallel_blocks, resolve_omp_do,\n\tomp_code_to_statement, gfc_resolve_omp_directive): Handle\n\tomp masked constructs.\n\t* parse.c (decode_omp_directive, case_exec_markers,\n\tgfc_ascii_statement, parse_omp_do, parse_omp_structured_block,\n\tparse_executable): Likewise.\n\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n\t* st.c (gfc_free_statement): Likewise.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Handle filter clause.\n\t(GFC_OMP_SPLIT_MASKED, GFC_OMP_MASK_MASKED): New enum values.\n\t(gfc_trans_omp_masked): New.\n\t(gfc_split_omp_clauses): Handle combined masked directives.\n\t(gfc_trans_omp_master_taskloop): Rename to ...\n\t(gfc_trans_omp_master_masked_taskloop): ... this; handle also\n\tcombined masked directives.\n\t(gfc_trans_omp_parallel_master): Rename to ...\n\t(gfc_trans_omp_parallel_master_masked): ... this; handle\n\tcombined masked directives.\n\t(gfc_trans_omp_directive): Handle EXEC_OMP_*_MASKED*.\n\t* trans.c (trans_code): Likewise.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/masked-1.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/masked-1.f90: New test.\n\t* gfortran.dg/gomp/masked-2.f90: New test.\n\t* gfortran.dg/gomp/masked-3.f90: New test.\n\t* gfortran.dg/gomp/masked-combined-1.f90: New test.\n\t* gfortran.dg/gomp/masked-combined-2.f90: New test.", "tree": {"sha": "18e7e534b3d1f8ab6e04025bca03bca374ebd970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e7e534b3d1f8ab6e04025bca03bca374ebd970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd40498d1981fde0720a0886d6f59ea5fb7ab40"}], "stats": {"total": 799, "additions": 766, "deletions": 33}, "files": [{"sha": "53c49fe4d6f9d8f731a8e76f99aa99bab020a3cd", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -1808,6 +1808,12 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n       show_expr (omp_clauses->grainsize);\n       fputc (')', dumpfile);\n     }\n+  if (omp_clauses->filter)\n+    {\n+      fputs (\" FILTER(\", dumpfile);\n+      show_expr (omp_clauses->filter);\n+      fputc (')', dumpfile);\n+    }\n   if (omp_clauses->hint)\n     {\n       fputs (\" HINT(\", dumpfile);\n@@ -1946,6 +1952,9 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DO_SIMD: name = \"DO SIMD\"; break;\n     case EXEC_OMP_LOOP: name = \"LOOP\"; break;\n     case EXEC_OMP_FLUSH: name = \"FLUSH\"; break;\n+    case EXEC_OMP_MASKED: name = \"MASKED\"; break;\n+    case EXEC_OMP_MASKED_TASKLOOP: name = \"MASKED TASKLOOP\"; break;\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD: name = \"MASKED TASKLOOP SIMD\"; break;\n     case EXEC_OMP_MASTER: name = \"MASTER\"; break;\n     case EXEC_OMP_MASTER_TASKLOOP: name = \"MASTER TASKLOOP\"; break;\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD: name = \"MASTER TASKLOOP SIMD\"; break;\n@@ -1956,6 +1965,11 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL_DO_SIMD: name = \"PARALLEL DO SIMD\"; break;\n     case EXEC_OMP_PARALLEL_LOOP: name = \"PARALLEL LOOP\"; break;\n     case EXEC_OMP_PARALLEL_MASTER: name = \"PARALLEL MASTER\"; break;\n+    case EXEC_OMP_PARALLEL_MASKED: name = \"PARALLEL MASK\"; break;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+      name = \"PARALLEL MASK TASKLOOP\"; break;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      name = \"PARALLEL MASK TASKLOOP SIMD\"; break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n       name = \"PARALLEL MASTER TASKLOOP\"; break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -2032,10 +2046,14 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DO_SIMD:\n     case EXEC_OMP_LOOP:\n     case EXEC_OMP_ORDERED:\n+    case EXEC_OMP_MASKED:\n     case EXEC_OMP_PARALLEL:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_LOOP:\n+    case EXEC_OMP_PARALLEL_MASKED:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -3250,6 +3268,9 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_OMP_DO_SIMD:\n     case EXEC_OMP_FLUSH:\n     case EXEC_OMP_LOOP:\n+    case EXEC_OMP_MASKED:\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_MASTER:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n@@ -3258,6 +3279,9 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_LOOP:\n+    case EXEC_OMP_PARALLEL_MASKED:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:"}, {"sha": "145bff50f3e9d7eb040efede891970c635716b69", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -5556,6 +5556,9 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_DO_SIMD:\n \t    case EXEC_OMP_PARALLEL_LOOP:\n+\t    case EXEC_OMP_PARALLEL_MASKED:\n+\t    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+\t    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \t    case EXEC_OMP_PARALLEL_MASTER:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:"}, {"sha": "5fde4174a5bc9269c2af502c2a9bf651fb376c47", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -275,7 +275,13 @@ enum gfc_statement\n   ST_OMP_PARALLEL_LOOP, ST_OMP_END_PARALLEL_LOOP, ST_OMP_TEAMS_LOOP,\n   ST_OMP_END_TEAMS_LOOP, ST_OMP_TARGET_PARALLEL_LOOP,\n   ST_OMP_END_TARGET_PARALLEL_LOOP, ST_OMP_TARGET_TEAMS_LOOP,\n-  ST_OMP_END_TARGET_TEAMS_LOOP, ST_NONE\n+  ST_OMP_END_TARGET_TEAMS_LOOP, ST_OMP_MASKED, ST_OMP_END_MASKED,\n+  ST_OMP_PARALLEL_MASKED, ST_OMP_END_PARALLEL_MASKED,\n+  ST_OMP_PARALLEL_MASKED_TASKLOOP, ST_OMP_END_PARALLEL_MASKED_TASKLOOP,\n+  ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD,\n+  ST_OMP_END_PARALLEL_MASKED_TASKLOOP_SIMD, ST_OMP_MASKED_TASKLOOP,\n+  ST_OMP_END_MASKED_TASKLOOP, ST_OMP_MASKED_TASKLOOP_SIMD,\n+  ST_OMP_END_MASKED_TASKLOOP_SIMD, ST_NONE\n };\n \n /* Types of interfaces that we can have.  Assignment interfaces are\n@@ -1466,6 +1472,7 @@ typedef struct gfc_omp_clauses\n   struct gfc_expr *device;\n   struct gfc_expr *thread_limit;\n   struct gfc_expr *grainsize;\n+  struct gfc_expr *filter;\n   struct gfc_expr *hint;\n   struct gfc_expr *num_tasks;\n   struct gfc_expr *priority;\n@@ -2758,7 +2765,10 @@ enum gfc_exec_op\n   EXEC_OMP_PARALLEL_MASTER, EXEC_OMP_PARALLEL_MASTER_TASKLOOP,\n   EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD, EXEC_OMP_MASTER_TASKLOOP,\n   EXEC_OMP_MASTER_TASKLOOP_SIMD, EXEC_OMP_LOOP, EXEC_OMP_PARALLEL_LOOP,\n-  EXEC_OMP_TEAMS_LOOP, EXEC_OMP_TARGET_PARALLEL_LOOP, EXEC_OMP_TARGET_TEAMS_LOOP\n+  EXEC_OMP_TEAMS_LOOP, EXEC_OMP_TARGET_PARALLEL_LOOP,\n+  EXEC_OMP_TARGET_TEAMS_LOOP, EXEC_OMP_MASKED, EXEC_OMP_PARALLEL_MASKED,\n+  EXEC_OMP_PARALLEL_MASKED_TASKLOOP, EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD,\n+  EXEC_OMP_MASKED_TASKLOOP, EXEC_OMP_MASKED_TASKLOOP_SIMD\n };\n \n typedef struct gfc_code"}, {"sha": "dce650346d3b212f1378814149edef338089f0cf", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -169,6 +169,9 @@ match gfc_match_omp_do (void);\n match gfc_match_omp_do_simd (void);\n match gfc_match_omp_loop (void);\n match gfc_match_omp_flush (void);\n+match gfc_match_omp_masked (void);\n+match gfc_match_omp_masked_taskloop (void);\n+match gfc_match_omp_masked_taskloop_simd (void);\n match gfc_match_omp_master (void);\n match gfc_match_omp_master_taskloop (void);\n match gfc_match_omp_master_taskloop_simd (void);\n@@ -178,6 +181,9 @@ match gfc_match_omp_parallel (void);\n match gfc_match_omp_parallel_do (void);\n match gfc_match_omp_parallel_do_simd (void);\n match gfc_match_omp_parallel_loop (void);\n+match gfc_match_omp_parallel_masked (void);\n+match gfc_match_omp_parallel_masked_taskloop (void);\n+match gfc_match_omp_parallel_masked_taskloop_simd (void);\n match gfc_match_omp_parallel_master (void);\n match gfc_match_omp_parallel_master_taskloop (void);\n match gfc_match_omp_parallel_master_taskloop_simd (void);"}, {"sha": "1bce43cb33ee25ff6589eb4da0bf948788b28043", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -847,6 +847,7 @@ enum omp_mask1\n   OMP_CLAUSE_DETACH,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_AFFINITY,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_BIND,  /* OpenMP 5.0.  */\n+  OMP_CLAUSE_FILTER,  /* OpenMP 5.1.  */\n   OMP_CLAUSE_NOWAIT,\n   /* This must come last.  */\n   OMP_MASK1_LAST\n@@ -1772,6 +1773,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    }\n \t  break;\n \tcase 'f':\n+\t  if ((mask & OMP_CLAUSE_FILTER)\n+\t      && c->filter == NULL\n+\t      && gfc_match (\"filter ( %e )\", &c->filter) == MATCH_YES)\n+\t    continue;\n \t  if ((mask & OMP_CLAUSE_FINAL)\n \t      && c->final_expr == NULL\n \t      && gfc_match (\"final ( %e )\", &c->final_expr) == MATCH_YES)\n@@ -3199,6 +3204,8 @@ gfc_match_oacc_routine (void)\n #define OMP_ATOMIC_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_ATOMIC) | OMP_CLAUSE_CAPTURE | OMP_CLAUSE_HINT\t\\\n    | OMP_CLAUSE_MEMORDER)\n+#define OMP_MASKED_CLAUSES \\\n+  (omp_mask (OMP_CLAUSE_FILTER))\n \n \n static match\n@@ -4157,6 +4164,31 @@ gfc_match_omp_parallel_do_simd (void)\n }\n \n \n+match\n+gfc_match_omp_parallel_masked (void)\n+{\n+  return match_omp (EXEC_OMP_PARALLEL_MASKED,\n+\t\t    OMP_PARALLEL_CLAUSES | OMP_MASKED_CLAUSES);\n+}\n+\n+match\n+gfc_match_omp_parallel_masked_taskloop (void)\n+{\n+  return match_omp (EXEC_OMP_PARALLEL_MASKED_TASKLOOP,\n+\t\t    (OMP_PARALLEL_CLAUSES | OMP_MASKED_CLAUSES\n+\t\t     | OMP_TASKLOOP_CLAUSES)\n+\t\t    & ~(omp_mask (OMP_CLAUSE_IN_REDUCTION)));\n+}\n+\n+match\n+gfc_match_omp_parallel_masked_taskloop_simd (void)\n+{\n+  return match_omp (EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD,\n+\t\t    (OMP_PARALLEL_CLAUSES | OMP_MASKED_CLAUSES\n+\t\t     | OMP_TASKLOOP_CLAUSES | OMP_SIMD_CLAUSES)\n+\t\t    & ~(omp_mask (OMP_CLAUSE_IN_REDUCTION)));\n+}\n+\n match\n gfc_match_omp_parallel_master (void)\n {\n@@ -4703,6 +4735,27 @@ gfc_match_omp_workshare (void)\n }\n \n \n+match\n+gfc_match_omp_masked (void)\n+{\n+  return match_omp (EXEC_OMP_MASKED, OMP_MASKED_CLAUSES);\n+}\n+\n+match\n+gfc_match_omp_masked_taskloop (void)\n+{\n+  return match_omp (EXEC_OMP_MASKED_TASKLOOP,\n+\t\t    OMP_MASKED_CLAUSES | OMP_TASKLOOP_CLAUSES);\n+}\n+\n+match\n+gfc_match_omp_masked_taskloop_simd (void)\n+{\n+  return match_omp (EXEC_OMP_MASKED_TASKLOOP_SIMD,\n+\t\t    (OMP_MASKED_CLAUSES | OMP_TASKLOOP_CLAUSES\n+\t\t     | OMP_SIMD_CLAUSES));\n+}\n+\n match\n gfc_match_omp_master (void)\n {\n@@ -5254,6 +5307,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \n \t    case EXEC_OMP_PARALLEL:\n \t    case EXEC_OMP_PARALLEL_DO:\n+\t    case EXEC_OMP_PARALLEL_MASKED:\n \t    case EXEC_OMP_PARALLEL_MASTER:\n \t    case EXEC_OMP_PARALLEL_SECTIONS:\n \t    case EXEC_OMP_PARALLEL_WORKSHARE:\n@@ -5268,10 +5322,12 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t      ok = ifc == OMP_IF_PARALLEL || ifc == OMP_IF_SIMD;\n \t      break;\n \n+\t    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \t      ok = ifc == OMP_IF_PARALLEL || ifc == OMP_IF_TASKLOOP;\n \t      break;\n \n+\t    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \t      ok = (ifc == OMP_IF_PARALLEL\n \t\t    || ifc == OMP_IF_TASKLOOP\n@@ -5290,11 +5346,13 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t      break;\n \n \t    case EXEC_OMP_TASKLOOP:\n+\t    case EXEC_OMP_MASKED_TASKLOOP:\n \t    case EXEC_OMP_MASTER_TASKLOOP:\n \t      ok = ifc == OMP_IF_TASKLOOP;\n \t      break;\n \n \t    case EXEC_OMP_TASKLOOP_SIMD:\n+\t    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n \t    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n \t      ok = ifc == OMP_IF_TASKLOOP || ifc == OMP_IF_SIMD;\n \t      break;\n@@ -6060,9 +6118,13 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t\t&& (code->op == EXEC_OMP_LOOP\n \t\t\t    || code->op == EXEC_OMP_TASKLOOP\n \t\t\t    || code->op == EXEC_OMP_TASKLOOP_SIMD\n+\t\t\t    || code->op == EXEC_OMP_MASKED_TASKLOOP\n+\t\t\t    || code->op == EXEC_OMP_MASKED_TASKLOOP_SIMD\n \t\t\t    || code->op == EXEC_OMP_MASTER_TASKLOOP\n \t\t\t    || code->op == EXEC_OMP_MASTER_TASKLOOP_SIMD\n \t\t\t    || code->op == EXEC_OMP_PARALLEL_LOOP\n+\t\t\t    || code->op == EXEC_OMP_PARALLEL_MASKED_TASKLOOP\n+\t\t\t    || code->op == EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD\n \t\t\t    || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n \t\t\t    || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD\n \t\t\t    || code->op == EXEC_OMP_TARGET_PARALLEL_LOOP\n@@ -6322,6 +6384,8 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n     resolve_positive_int_expr (omp_clauses->num_teams, \"NUM_TEAMS\");\n   if (omp_clauses->device)\n     resolve_nonnegative_int_expr (omp_clauses->device, \"DEVICE\");\n+  if (omp_clauses->filter)\n+    resolve_nonnegative_int_expr (omp_clauses->filter, \"FILTER\");\n   if (omp_clauses->hint)\n     {\n       resolve_scalar_int_expr (omp_clauses->hint, \"HINT\");\n@@ -6984,8 +7048,12 @@ gfc_resolve_omp_parallel_blocks (gfc_code *code, gfc_namespace *ns)\n     case EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n@@ -7133,13 +7201,25 @@ resolve_omp_do (gfc_code *code)\n       is_simd = true;\n       break;\n     case EXEC_OMP_PARALLEL_LOOP: name = \"!$OMP PARALLEL LOOP\"; break;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+      name = \"!$OMP PARALLEL MASKED TASKLOOP\";\n+      break;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      name = \"!$OMP PARALLEL MASKED TASKLOOP SIMD\";\n+      is_simd = true;\n+      break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n       name = \"!$OMP PARALLEL MASTER TASKLOOP\";\n       break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n       name = \"!$OMP PARALLEL MASTER TASKLOOP SIMD\";\n       is_simd = true;\n       break;\n+    case EXEC_OMP_MASKED_TASKLOOP: name = \"!$OMP MASKED TASKLOOP\"; break;\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n+      name = \"!$OMP MASKED TASKLOOP SIMD\";\n+      is_simd = true;\n+      break;\n     case EXEC_OMP_MASTER_TASKLOOP: name = \"!$OMP MASTER TASKLOOP\"; break;\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n       name = \"!$OMP MASTER TASKLOOP SIMD\";\n@@ -7302,6 +7382,12 @@ omp_code_to_statement (gfc_code *code)\n     {\n     case EXEC_OMP_PARALLEL:\n       return ST_OMP_PARALLEL;\n+    case EXEC_OMP_PARALLEL_MASKED:\n+      return ST_OMP_PARALLEL_MASKED;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+      return ST_OMP_PARALLEL_MASKED_TASKLOOP;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      return ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD;\n     case EXEC_OMP_PARALLEL_MASTER:\n       return ST_OMP_PARALLEL_MASTER;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n@@ -7316,6 +7402,12 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_ORDERED;\n     case EXEC_OMP_CRITICAL:\n       return ST_OMP_CRITICAL;\n+    case EXEC_OMP_MASKED:\n+      return ST_OMP_MASKED;\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+      return ST_OMP_MASKED_TASKLOOP;\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n+      return ST_OMP_MASKED_TASKLOOP_SIMD;\n     case EXEC_OMP_MASTER:\n       return ST_OMP_MASTER;\n     case EXEC_OMP_MASTER_TASKLOOP:\n@@ -7822,8 +7914,12 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns)\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_LOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_SIMD:\n@@ -7846,8 +7942,10 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns)\n       resolve_omp_do (code);\n       break;\n     case EXEC_OMP_CANCEL:\n+    case EXEC_OMP_MASKED:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n     case EXEC_OMP_PARALLEL:\n+    case EXEC_OMP_PARALLEL_MASKED:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_SECTIONS:"}, {"sha": "e1d78de5d9eeddbff8393778dac552037df5cf73", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -920,6 +920,11 @@ decode_omp_directive (void)\n       matchs (\"end do simd\", gfc_match_omp_end_nowait, ST_OMP_END_DO_SIMD);\n       matcho (\"end do\", gfc_match_omp_end_nowait, ST_OMP_END_DO);\n       matchs (\"end simd\", gfc_match_omp_eos_error, ST_OMP_END_SIMD);\n+      matcho (\"end masked taskloop simd\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_MASKED_TASKLOOP_SIMD);\n+      matcho (\"end masked taskloop\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_MASKED_TASKLOOP);\n+      matcho (\"end masked\", gfc_match_omp_eos_error, ST_OMP_END_MASKED);\n       matcho (\"end master taskloop simd\", gfc_match_omp_eos_error,\n \t      ST_OMP_END_MASTER_TASKLOOP_SIMD);\n       matcho (\"end master taskloop\", gfc_match_omp_eos_error,\n@@ -929,6 +934,12 @@ decode_omp_directive (void)\n       matchs (\"end parallel do simd\", gfc_match_omp_eos_error,\n \t      ST_OMP_END_PARALLEL_DO_SIMD);\n       matcho (\"end parallel do\", gfc_match_omp_eos_error, ST_OMP_END_PARALLEL_DO);\n+      matcho (\"end parallel masked taskloop simd\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_PARALLEL_MASKED_TASKLOOP_SIMD);\n+      matcho (\"end parallel masked taskloop\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_PARALLEL_MASKED_TASKLOOP);\n+      matcho (\"end parallel masked\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_PARALLEL_MASKED);\n       matcho (\"end parallel master taskloop simd\", gfc_match_omp_eos_error,\n \t      ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD);\n       matcho (\"end parallel master taskloop\", gfc_match_omp_eos_error,\n@@ -982,6 +993,11 @@ decode_omp_directive (void)\n       matcho (\"flush\", gfc_match_omp_flush, ST_OMP_FLUSH);\n       break;\n     case 'm':\n+      matcho (\"masked taskloop simd\", gfc_match_omp_masked_taskloop_simd,\n+\t      ST_OMP_MASKED_TASKLOOP_SIMD);\n+      matcho (\"masked taskloop\", gfc_match_omp_masked_taskloop,\n+\t      ST_OMP_MASKED_TASKLOOP);\n+      matcho (\"masked\", gfc_match_omp_masked, ST_OMP_MASKED);\n       matcho (\"master taskloop simd\", gfc_match_omp_master_taskloop_simd,\n \t      ST_OMP_MASTER_TASKLOOP_SIMD);\n       matcho (\"master taskloop\", gfc_match_omp_master_taskloop,\n@@ -1009,6 +1025,14 @@ decode_omp_directive (void)\n       matcho (\"parallel do\", gfc_match_omp_parallel_do, ST_OMP_PARALLEL_DO);\n       matcho (\"parallel loop\", gfc_match_omp_parallel_loop,\n \t      ST_OMP_PARALLEL_LOOP);\n+      matcho (\"parallel masked taskloop simd\",\n+\t      gfc_match_omp_parallel_masked_taskloop_simd,\n+\t      ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD);\n+      matcho (\"parallel masked taskloop\",\n+\t      gfc_match_omp_parallel_masked_taskloop,\n+\t      ST_OMP_PARALLEL_MASKED_TASKLOOP);\n+      matcho (\"parallel masked\", gfc_match_omp_parallel_masked,\n+\t      ST_OMP_PARALLEL_MASKED);\n       matcho (\"parallel master taskloop simd\",\n \t      gfc_match_omp_parallel_master_taskloop_simd,\n \t      ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD);\n@@ -1639,11 +1663,15 @@ next_statement (void)\n #define case_exec_markers case ST_DO: case ST_FORALL_BLOCK: \\\n   case ST_IF_BLOCK: case ST_BLOCK: case ST_ASSOCIATE: \\\n   case ST_WHERE_BLOCK: case ST_SELECT_CASE: case ST_SELECT_TYPE: \\\n-  case ST_SELECT_RANK: case ST_OMP_PARALLEL: case ST_OMP_PARALLEL_MASTER: \\\n+  case ST_SELECT_RANK: case ST_OMP_PARALLEL: case ST_OMP_PARALLEL_MASKED: \\\n+  case ST_OMP_PARALLEL_MASKED_TASKLOOP: \\\n+  case ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD: case ST_OMP_PARALLEL_MASTER: \\\n   case ST_OMP_PARALLEL_MASTER_TASKLOOP: \\\n   case ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD: \\\n   case ST_OMP_PARALLEL_SECTIONS: case ST_OMP_SECTIONS: case ST_OMP_ORDERED: \\\n-  case ST_OMP_CRITICAL: case ST_OMP_MASTER: case ST_OMP_MASTER_TASKLOOP: \\\n+  case ST_OMP_CRITICAL: case ST_OMP_MASKED: case ST_OMP_MASKED_TASKLOOP: \\\n+  case ST_OMP_MASKED_TASKLOOP_SIMD: \\\n+  case ST_OMP_MASTER: case ST_OMP_MASTER_TASKLOOP: \\\n   case ST_OMP_MASTER_TASKLOOP_SIMD: case ST_OMP_SINGLE: \\\n   case ST_OMP_DO: case ST_OMP_PARALLEL_DO: case ST_OMP_ATOMIC: \\\n   case ST_OMP_WORKSHARE: case ST_OMP_PARALLEL_WORKSHARE: \\\n@@ -2376,6 +2404,15 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_LOOP:\n       p = \"!$OMP END LOOP\";\n       break;\n+    case ST_OMP_END_MASKED:\n+      p = \"!$OMP END MASKED\";\n+      break;\n+    case ST_OMP_END_MASKED_TASKLOOP:\n+      p = \"!$OMP END MASKED TASKLOOP\";\n+      break;\n+    case ST_OMP_END_MASKED_TASKLOOP_SIMD:\n+      p = \"!$OMP END MASKED TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_END_MASTER:\n       p = \"!$OMP END MASTER\";\n       break;\n@@ -2400,6 +2437,15 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_PARALLEL_LOOP:\n       p = \"!$OMP END PARALLEL LOOP\";\n       break;\n+    case ST_OMP_END_PARALLEL_MASKED:\n+      p = \"!$OMP END PARALLEL MASKED\";\n+      break;\n+    case ST_OMP_END_PARALLEL_MASKED_TASKLOOP:\n+      p = \"!$OMP END PARALLEL MASKED TASKLOOP\";\n+      break;\n+    case ST_OMP_END_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      p = \"!$OMP END PARALLEL MASKED TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_END_PARALLEL_MASTER:\n       p = \"!$OMP END PARALLEL MASTER\";\n       break;\n@@ -2499,6 +2545,15 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_LOOP:\n       p = \"!$OMP LOOP\";\n       break;\n+    case ST_OMP_MASKED:\n+      p = \"!$OMP MASKED\";\n+      break;\n+    case ST_OMP_MASKED_TASKLOOP:\n+      p = \"!$OMP MASKED TASKLOOP\";\n+      break;\n+    case ST_OMP_MASKED_TASKLOOP_SIMD:\n+      p = \"!$OMP MASKED TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_MASTER:\n       p = \"!$OMP MASTER\";\n       break;\n@@ -2524,6 +2579,15 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_PARALLEL_DO_SIMD:\n       p = \"!$OMP PARALLEL DO SIMD\";\n       break;\n+    case ST_OMP_PARALLEL_MASKED:\n+      p = \"!$OMP PARALLEL MASKED\";\n+      break;\n+    case ST_OMP_PARALLEL_MASKED_TASKLOOP:\n+      p = \"!$OMP PARALLEL MASKED TASKLOOP\";\n+      break;\n+    case ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      p = \"!$OMP PARALLEL MASKED TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_PARALLEL_MASTER:\n       p = \"!$OMP PARALLEL MASTER\";\n       break;\n@@ -5127,10 +5191,20 @@ parse_omp_do (gfc_statement omp_st)\n       break;\n     case ST_OMP_TASKLOOP: omp_end_st = ST_OMP_END_TASKLOOP; break;\n     case ST_OMP_TASKLOOP_SIMD: omp_end_st = ST_OMP_END_TASKLOOP_SIMD; break;\n+    case ST_OMP_MASKED_TASKLOOP: omp_end_st = ST_OMP_END_MASKED_TASKLOOP; break;\n+    case ST_OMP_MASKED_TASKLOOP_SIMD:\n+      omp_end_st = ST_OMP_END_MASKED_TASKLOOP_SIMD;\n+      break;\n     case ST_OMP_MASTER_TASKLOOP: omp_end_st = ST_OMP_END_MASTER_TASKLOOP; break;\n     case ST_OMP_MASTER_TASKLOOP_SIMD:\n       omp_end_st = ST_OMP_END_MASTER_TASKLOOP_SIMD;\n       break;\n+    case ST_OMP_PARALLEL_MASKED_TASKLOOP:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASKED_TASKLOOP;\n+      break;\n+    case ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASKED_TASKLOOP_SIMD;\n+      break;\n     case ST_OMP_PARALLEL_MASTER_TASKLOOP:\n       omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP;\n       break;\n@@ -5380,6 +5454,9 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_PARALLEL:\n       omp_end_st = ST_OMP_END_PARALLEL;\n       break;\n+    case ST_OMP_PARALLEL_MASKED:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASKED;\n+      break;\n     case ST_OMP_PARALLEL_MASTER:\n       omp_end_st = ST_OMP_END_PARALLEL_MASTER;\n       break;\n@@ -5395,6 +5472,9 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_CRITICAL:\n       omp_end_st = ST_OMP_END_CRITICAL;\n       break;\n+    case ST_OMP_MASKED:\n+      omp_end_st = ST_OMP_END_MASKED;\n+      break;\n     case ST_OMP_MASTER:\n       omp_end_st = ST_OMP_END_MASTER;\n       break;\n@@ -5477,6 +5557,7 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n \t\t  break;\n \n \t\tcase ST_OMP_PARALLEL:\n+\t\tcase ST_OMP_PARALLEL_MASKED:\n \t\tcase ST_OMP_PARALLEL_MASTER:\n \t\tcase ST_OMP_PARALLEL_SECTIONS:\n \t\t  parse_omp_structured_block (st, false);\n@@ -5679,11 +5760,13 @@ parse_executable (gfc_statement st)\n \t  break;\n \n \tcase ST_OMP_PARALLEL:\n+\tcase ST_OMP_PARALLEL_MASKED:\n \tcase ST_OMP_PARALLEL_MASTER:\n \tcase ST_OMP_PARALLEL_SECTIONS:\n \tcase ST_OMP_SECTIONS:\n \tcase ST_OMP_ORDERED:\n \tcase ST_OMP_CRITICAL:\n+\tcase ST_OMP_MASKED:\n \tcase ST_OMP_MASTER:\n \tcase ST_OMP_SINGLE:\n \tcase ST_OMP_TARGET:\n@@ -5711,8 +5794,12 @@ parse_executable (gfc_statement st)\n \tcase ST_OMP_PARALLEL_DO:\n \tcase ST_OMP_PARALLEL_DO_SIMD:\n \tcase ST_OMP_PARALLEL_LOOP:\n+\tcase ST_OMP_PARALLEL_MASKED_TASKLOOP:\n+\tcase ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \tcase ST_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+\tcase ST_OMP_MASKED_TASKLOOP:\n+\tcase ST_OMP_MASKED_TASKLOOP_SIMD:\n \tcase ST_OMP_MASTER_TASKLOOP:\n \tcase ST_OMP_MASTER_TASKLOOP_SIMD:\n \tcase ST_OMP_SIMD:"}, {"sha": "8eb8a9ab6d725c57ec7ac348fbd3d388230c0439", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -10818,6 +10818,9 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_LOOP:\n+\tcase EXEC_OMP_MASKED:\n+\tcase EXEC_OMP_MASKED_TASKLOOP:\n+\tcase EXEC_OMP_MASKED_TASKLOOP_SIMD:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:\n \tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n@@ -10826,6 +10829,9 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_PARALLEL_LOOP:\n+\tcase EXEC_OMP_PARALLEL_MASKED:\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -11793,6 +11799,9 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t    case EXEC_OMP_PARALLEL:\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_DO_SIMD:\n+\t    case EXEC_OMP_PARALLEL_MASKED:\n+\t    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+\t    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \t    case EXEC_OMP_PARALLEL_MASTER:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -12248,6 +12257,9 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:\n \tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n+\tcase EXEC_OMP_MASKED:\n+\tcase EXEC_OMP_MASKED_TASKLOOP:\n+\tcase EXEC_OMP_MASKED_TASKLOOP_SIMD:\n \tcase EXEC_OMP_ORDERED:\n \tcase EXEC_OMP_SCAN:\n \tcase EXEC_OMP_SECTIONS:\n@@ -12289,6 +12301,9 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_PARALLEL_LOOP:\n+\tcase EXEC_OMP_PARALLEL_MASKED:\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:"}, {"sha": "f61f88adcc5fdc29910181a521a0fb803b64ab36", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -227,13 +227,19 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_DO_SIMD:\n     case EXEC_OMP_LOOP:\n     case EXEC_OMP_END_SINGLE:\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_ORDERED:\n+    case EXEC_OMP_MASKED:\n     case EXEC_OMP_PARALLEL:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_LOOP:\n+    case EXEC_OMP_PARALLEL_MASKED:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:"}, {"sha": "623c21fc790b53c6fa1fe09a05b3527c13a4be15", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 147, "deletions": 29, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -4047,6 +4047,21 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n+  if (clauses->filter)\n+    {\n+      tree filter;\n+\n+      gfc_init_se (&se, NULL);\n+      gfc_conv_expr (&se, clauses->filter);\n+      gfc_add_block_to_block (block, &se.pre);\n+      filter = gfc_evaluate_now (se.expr, block);\n+      gfc_add_block_to_block (block, &se.post);\n+\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_FILTER);\n+      OMP_CLAUSE_FILTER_EXPR (c) = filter;\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+    }\n+\n   if (clauses->hint)\n     {\n       tree hint;\n@@ -5389,6 +5404,26 @@ gfc_trans_omp_master (gfc_code *code)\n   return build1_v (OMP_MASTER, stmt);\n }\n \n+static tree\n+gfc_trans_omp_masked (gfc_code *code, gfc_omp_clauses *clauses)\n+{\n+  stmtblock_t block;\n+  tree body = gfc_trans_code (code->block->next);\n+  if (IS_EMPTY_STMT (body))\n+    return body;\n+  if (!clauses)\n+    clauses = code->ext.omp_clauses;\n+  gfc_start_block (&block);\n+  tree omp_clauses = gfc_trans_omp_clauses (&block, clauses, code->loc);\n+  tree stmt = make_node (OMP_MASKED);\n+  TREE_TYPE (stmt) = void_type_node;\n+  OMP_MASKED_BODY (stmt) = body;\n+  OMP_MASKED_CLAUSES (stmt) = omp_clauses;\n+  gfc_add_expr_to_block (&block, stmt);\n+  return gfc_finish_block (&block);\n+}\n+\n+\n static tree\n gfc_trans_omp_ordered (gfc_code *code)\n {\n@@ -5432,6 +5467,7 @@ enum\n   GFC_OMP_SPLIT_TEAMS,\n   GFC_OMP_SPLIT_TARGET,\n   GFC_OMP_SPLIT_TASKLOOP,\n+  GFC_OMP_SPLIT_MASKED,\n   GFC_OMP_SPLIT_NUM\n };\n \n@@ -5443,7 +5479,8 @@ enum\n   GFC_OMP_MASK_DISTRIBUTE = (1 << GFC_OMP_SPLIT_DISTRIBUTE),\n   GFC_OMP_MASK_TEAMS = (1 << GFC_OMP_SPLIT_TEAMS),\n   GFC_OMP_MASK_TARGET = (1 << GFC_OMP_SPLIT_TARGET),\n-  GFC_OMP_MASK_TASKLOOP = (1 << GFC_OMP_SPLIT_TASKLOOP)\n+  GFC_OMP_MASK_TASKLOOP = (1 << GFC_OMP_SPLIT_TASKLOOP),\n+  GFC_OMP_MASK_MASKED = (1 << GFC_OMP_SPLIT_MASKED)\n };\n \n /* If a var is in lastprivate/firstprivate/reduction but not in a\n@@ -5632,10 +5669,24 @@ gfc_split_omp_clauses (gfc_code *code,\n       mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n+    case EXEC_OMP_PARALLEL_MASKED:\n+      mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_MASKED;\n+      innermost = GFC_OMP_SPLIT_MASKED;\n+      break;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+      mask = (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_MASKED\n+\t      | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD);\n+      innermost = GFC_OMP_SPLIT_TASKLOOP;\n+      break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n       mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_TASKLOOP;\n       break;\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      mask = (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_MASKED\n+\t      | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD);\n+      innermost = GFC_OMP_SPLIT_SIMD;\n+      break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n       mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n@@ -5692,10 +5743,18 @@ gfc_split_omp_clauses (gfc_code *code,\n       mask = GFC_OMP_MASK_TARGET | GFC_OMP_MASK_TEAMS | GFC_OMP_MASK_DO;\n       innermost = GFC_OMP_SPLIT_DO;\n       break;\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+      mask = GFC_OMP_SPLIT_MASKED | GFC_OMP_SPLIT_TASKLOOP;\n+      innermost = GFC_OMP_SPLIT_TASKLOOP;\n+      break;\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_TASKLOOP:\n       innermost = GFC_OMP_SPLIT_TASKLOOP;\n       break;\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n+      mask = GFC_OMP_MASK_MASKED | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n+      innermost = GFC_OMP_SPLIT_SIMD;\n+      break;\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_TASKLOOP_SIMD:\n       mask = GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n@@ -5814,6 +5873,8 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  clausesa[GFC_OMP_SPLIT_PARALLEL].if_expr\n \t    = code->ext.omp_clauses->if_expr;\n \t}\n+      if (mask & GFC_OMP_MASK_MASKED)\n+\tclausesa[GFC_OMP_SPLIT_MASKED].filter = code->ext.omp_clauses->filter;\n       if ((mask & GFC_OMP_MASK_DO) && !is_loop)\n \t{\n \t  /* First the clauses that are unique to some constructs.  */\n@@ -5896,16 +5957,18 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  clausesa[GFC_OMP_SPLIT_TASKLOOP].collapse\n \t    = code->ext.omp_clauses->collapse;\n \t}\n-      /* Private clause is supported on all constructs,\n-\t it is enough to put it on the innermost one.  For\n+      /* Private clause is supported on all constructs but master/masked,\n+\t it is enough to put it on the innermost one except for master/masked.  For\n \t !$ omp parallel do put it on parallel though,\n \t as that's what we did for OpenMP 3.1.  */\n-      clausesa[innermost == GFC_OMP_SPLIT_DO && !is_loop\n+      clausesa[((innermost == GFC_OMP_SPLIT_DO && !is_loop)\n+\t\t|| code->op == EXEC_OMP_PARALLEL_MASTER\n+\t\t|| code->op == EXEC_OMP_PARALLEL_MASKED)\n \t       ? (int) GFC_OMP_SPLIT_PARALLEL\n \t       : innermost].lists[OMP_LIST_PRIVATE]\n \t= code->ext.omp_clauses->lists[OMP_LIST_PRIVATE];\n       /* Firstprivate clause is supported on all constructs but\n-\t simd.  Put it on the outermost of those and duplicate\n+\t simd and masked/master.  Put it on the outermost of those and duplicate\n \t on parallel and teams.  */\n       if (mask & GFC_OMP_MASK_TARGET)\n \tclausesa[GFC_OMP_SPLIT_TARGET].lists[OMP_LIST_FIRSTPRIVATE]\n@@ -6588,43 +6651,66 @@ gfc_trans_omp_taskloop (gfc_code *code, gfc_exec_op op)\n }\n \n static tree\n-gfc_trans_omp_master_taskloop (gfc_code *code, gfc_exec_op op)\n+gfc_trans_omp_master_masked_taskloop (gfc_code *code, gfc_exec_op op)\n {\n+  gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM];\n   stmtblock_t block;\n   tree stmt;\n \n-  gfc_start_block (&block);\n+  if (op != EXEC_OMP_MASTER_TASKLOOP_SIMD\n+      && code->op != EXEC_OMP_MASTER_TASKLOOP)\n+    gfc_split_omp_clauses (code, clausesa);\n+\n   pushlevel ();\n-  if (op == EXEC_OMP_MASTER_TASKLOOP_SIMD)\n+  if (op == EXEC_OMP_MASKED_TASKLOOP_SIMD\n+      || op == EXEC_OMP_MASTER_TASKLOOP_SIMD)\n     stmt = gfc_trans_omp_taskloop (code, EXEC_OMP_TASKLOOP_SIMD);\n   else\n     {\n-      gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM];\n-      gcc_assert (op == EXEC_OMP_MASTER_TASKLOOP);\n-      if (op != code->op)\n-\tgfc_split_omp_clauses (code, clausesa);\n+      gcc_assert (op == EXEC_OMP_MASKED_TASKLOOP\n+\t\t  || op == EXEC_OMP_MASTER_TASKLOOP);\n       stmt = gfc_trans_omp_do (code, EXEC_OMP_TASKLOOP, NULL,\n-\t\t\t       op != code->op\n+\t\t\t       code->op != EXEC_OMP_MASTER_TASKLOOP\n \t\t\t       ? &clausesa[GFC_OMP_SPLIT_TASKLOOP]\n \t\t\t       : code->ext.omp_clauses, NULL);\n-      if (op != code->op)\n-\tgfc_free_split_omp_clauses (code, clausesa);\n     }\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n   else\n     poplevel (0, 0);\n-  stmt = build1_v (OMP_MASTER, stmt);\n-  gfc_add_expr_to_block (&block, stmt);\n+  gfc_start_block (&block);\n+  if (op == EXEC_OMP_MASKED_TASKLOOP || op == EXEC_OMP_MASKED_TASKLOOP_SIMD)\n+    {\n+      tree clauses = gfc_trans_omp_clauses (&block,\n+\t\t\t\t\t    &clausesa[GFC_OMP_SPLIT_MASKED],\n+\t\t\t\t\t    code->loc);\n+      tree msk = make_node (OMP_MASKED);\n+      TREE_TYPE (msk) = void_type_node;\n+      OMP_MASKED_BODY (msk) = stmt;\n+      OMP_MASKED_CLAUSES (msk) = clauses;\n+      OMP_MASKED_COMBINED (msk) = 1;\n+      gfc_add_expr_to_block (&block, msk);\n+    }\n+  else\n+    {\n+      gcc_assert (op == EXEC_OMP_MASTER_TASKLOOP\n+\t\t  || op == EXEC_OMP_MASTER_TASKLOOP_SIMD);\n+      stmt = build1_v (OMP_MASTER, stmt);\n+      gfc_add_expr_to_block (&block, stmt);\n+    }\n+  if (op != EXEC_OMP_MASTER_TASKLOOP_SIMD\n+      && code->op != EXEC_OMP_MASTER_TASKLOOP)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n static tree\n-gfc_trans_omp_parallel_master (gfc_code *code)\n+gfc_trans_omp_parallel_master_masked (gfc_code *code)\n {\n   stmtblock_t block;\n   tree stmt, omp_clauses;\n   gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM];\n+  bool parallel_combined = false;\n \n   if (code->op != EXEC_OMP_PARALLEL_MASTER)\n     gfc_split_omp_clauses (code, clausesa);\n@@ -6635,28 +6721,53 @@ gfc_trans_omp_parallel_master (gfc_code *code)\n \t\t\t\t       ? code->ext.omp_clauses\n \t\t\t\t       : &clausesa[GFC_OMP_SPLIT_PARALLEL],\n \t\t\t\t       code->loc);\n-  if (code->op != EXEC_OMP_PARALLEL_MASTER)\n-    gfc_free_split_omp_clauses (code, clausesa);\n   pushlevel ();\n   if (code->op == EXEC_OMP_PARALLEL_MASTER)\n     stmt = gfc_trans_omp_master (code);\n+  else if (code->op == EXEC_OMP_PARALLEL_MASKED)\n+    stmt = gfc_trans_omp_masked (code, &clausesa[GFC_OMP_SPLIT_MASKED]);\n   else\n     {\n-      gcc_assert (code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n-\t\t  || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD);\n-      gfc_exec_op op = (code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n-\t\t\t? EXEC_OMP_MASTER_TASKLOOP\n-\t\t\t: EXEC_OMP_MASTER_TASKLOOP_SIMD);\n-      stmt = gfc_trans_omp_master_taskloop (code, op);\n+      gfc_exec_op op;\n+      switch (code->op)\n+\t{\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+\t  op = EXEC_OMP_MASKED_TASKLOOP;\n+\t  break;\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+\t  op = EXEC_OMP_MASKED_TASKLOOP_SIMD;\n+\t  break;\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\t  op = EXEC_OMP_MASTER_TASKLOOP;\n+\t  break;\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+\t  op = EXEC_OMP_MASTER_TASKLOOP_SIMD;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      stmt = gfc_trans_omp_master_masked_taskloop (code, op);\n+      parallel_combined = true;\n     }\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n   else\n     poplevel (0, 0);\n   stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n \t\t     void_type_node, stmt, omp_clauses);\n-  OMP_PARALLEL_COMBINED (stmt) = 1;\n+  /* masked does have just filter clause, but during gimplification\n+     isn't represented by a gimplification omp context, so for\n+       !$omp parallel masked don't set OMP_PARALLEL_COMBINED,\n+     so that\n+       !$omp parallel masked\n+       !$omp taskloop simd lastprivate (x)\n+     isn't confused with\n+       !$omp parallel masked taskloop simd lastprivate (x)  */\n+  if (parallel_combined)\n+    OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n+  if (code->op != EXEC_OMP_PARALLEL_MASTER)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -6969,11 +7080,15 @@ gfc_trans_omp_directive (gfc_code *code)\n       return gfc_trans_omp_do_simd (code, NULL, NULL, NULL_TREE);\n     case EXEC_OMP_FLUSH:\n       return gfc_trans_omp_flush (code);\n+    case EXEC_OMP_MASKED:\n+      return gfc_trans_omp_masked (code, NULL);\n     case EXEC_OMP_MASTER:\n       return gfc_trans_omp_master (code);\n+    case EXEC_OMP_MASKED_TASKLOOP:\n+    case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n-      return gfc_trans_omp_master_taskloop (code, code->op);\n+      return gfc_trans_omp_master_masked_taskloop (code, code->op);\n     case EXEC_OMP_ORDERED:\n       return gfc_trans_omp_ordered (code);\n     case EXEC_OMP_PARALLEL:\n@@ -6984,10 +7099,13 @@ gfc_trans_omp_directive (gfc_code *code)\n       return gfc_trans_omp_parallel_do (code, true, NULL, NULL);\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n       return gfc_trans_omp_parallel_do_simd (code, NULL, NULL);\n+    case EXEC_OMP_PARALLEL_MASKED:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n-      return gfc_trans_omp_parallel_master (code);\n+      return gfc_trans_omp_parallel_master_masked (code);\n     case EXEC_OMP_PARALLEL_SECTIONS:\n       return gfc_trans_omp_parallel_sections (code);\n     case EXEC_OMP_PARALLEL_WORKSHARE:"}, {"sha": "ce5b2f8d594b5448fe62b7c4fef5230b16e26d4b", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -2156,6 +2156,9 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_LOOP:\n \tcase EXEC_OMP_FLUSH:\n+\tcase EXEC_OMP_MASKED:\n+\tcase EXEC_OMP_MASKED_TASKLOOP:\n+\tcase EXEC_OMP_MASKED_TASKLOOP_SIMD:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:\n \tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n@@ -2164,6 +2167,9 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_PARALLEL_LOOP:\n+\tcase EXEC_OMP_PARALLEL_MASKED:\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP:\n+\tcase EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:"}, {"sha": "1bd61760ced2052e1b98d75fe17f45068990376a", "filename": "gcc/testsuite/gfortran.dg/gomp/masked-1.f90", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-1.f90?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -0,0 +1,94 @@\n+! { dg-additional-options \"-ffree-line-length-none\" }\n+subroutine foo (x, a)\n+  implicit none\n+  integer, value :: x\n+  integer, contiguous :: a(0:)\n+  external :: bar\n+  integer :: i\n+\n+  !$omp masked\n+   call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (0)\n+   call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (7)\n+   call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (x)\n+   call bar ()\n+  !$omp end masked\n+\n+  !$omp masked taskloop simd filter (x) grainsize (12) simdlen (4)\n+    do i = 0, 127\n+      a(i) = i\n+    end do\n+  !$omp end masked taskloop simd\n+\n+  !$omp parallel masked filter (x) firstprivate (x)\n+    call bar ()\n+  !$omp end parallel masked\n+\n+  !$omp masked\n+    !$omp masked filter (0)\n+      !$omp masked filter (x)\n+      !$omp end masked\n+    !$omp end masked\n+  !$omp end masked\n+end\n+\n+subroutine foobar (d, f, fi, p, s, g, i1, i2, l, ll, nth, ntm, pp, q, r, r2)\n+  implicit none (type, external)\n+  logical :: i1, i2, fi\n+  integer :: i, d, f, p, s, g, l, ll, nth, ntm, pp, q, r, r2\n+  allocatable :: q\n+  integer, save :: t\n+  !$omp threadprivate (t)\n+\n+  !$omp parallel masked &\n+  !$omp&  private (p) firstprivate (f) if (parallel: i2) default(shared) shared(s) reduction(+:r) &\n+  !$omp&  num_threads (nth) proc_bind(spread) copyin(t) filter (d)  ! allocate (f)\n+    !\n+  !$omp end parallel masked\n+\n+  !$omp taskgroup task_reduction (+:r2)  ! allocate (r2)\n+    !$omp masked taskloop &\n+    !$omp&  private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) collapse(1) untied if(taskloop: i1) final(fi) mergeable priority (pp) &\n+    !$omp&  reduction(default, +:r) in_reduction(+:r2) filter (d)  ! allocate (f)\n+    do i = 0, 63\n+      ll = ll + 1\n+    end do\n+    !$omp end masked taskloop\n+  !$omp end taskgroup\n+\n+  !$omp taskgroup task_reduction (+:r2)  ! allocate (r2)\n+    !$omp masked taskloop simd &\n+    !$omp&  private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) collapse(1) untied if(taskloop: i1) if(simd: i2) final(fi) mergeable priority (pp) &\n+    !$omp&  safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) in_reduction(+:r2) nontemporal(ntm) &\n+    !$omp&  order(concurrent) filter (d)  !  allocate (f)\n+    do i = 0, 63\n+      ll = ll + 1\n+    end do\n+    !$omp end masked taskloop simd\n+  !$omp end taskgroup\n+\n+  !$omp parallel masked taskloop &\n+    !$omp&  private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) collapse(1) untied if(taskloop: i1) final(fi) mergeable priority (pp) &\n+    !$omp&  reduction(default, +:r) if (parallel: i2) num_threads (nth) proc_bind(spread) copyin(t) filter (d)  ! allocate (f)\n+    do i = 0, 63\n+      ll = ll + 1\n+    end do\n+  !$omp end parallel masked taskloop\n+\n+  !$omp parallel masked taskloop simd &\n+    !$omp&  private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) collapse(1) untied if(taskloop: i1) if(simd: i2) final(fi) mergeable priority (pp) &\n+    !$omp&  safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) nontemporal(ntm) if (parallel: i2) num_threads (nth) proc_bind(spread) copyin(t) &\n+    !$omp&  order(concurrent) filter (d)  ! allocate (f)\n+    do i = 0, 63\n+      ll = ll + 1\n+    end do\n+  !$omp end parallel masked taskloop simd\n+end subroutine"}, {"sha": "95ef78c0664020a46f83bbaa63e412f150d1a075", "filename": "gcc/testsuite/gfortran.dg/gomp/masked-2.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-2.f90?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -0,0 +1,46 @@\n+module m\n+  implicit none (external, type)\n+  type t\n+  end type t\n+contains\n+subroutine foo (x, y, z, a)\n+  external :: bar\n+  type(t) :: x\n+  integer :: y\n+  real :: z\n+  integer :: a(4)\n+\n+  !$omp masked filter (x)  ! { dg-error \"FILTER clause at .1. requires a scalar INTEGER expression\" }\n+    call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (y)  ! OK\n+    call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (z)  ! { dg-error \"FILTER clause at .1. requires a scalar INTEGER expression\" }\n+    call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (a)  ! { dg-error \"FILTER clause at .1. requires a scalar INTEGER expression\" }\n+    call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (0.0)  ! { dg-error \"FILTER clause at .1. requires a scalar INTEGER expression\" }\n+    call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter ([1])  ! { dg-error \"FILTER clause at .1. requires a scalar INTEGER expression\" }\n+    call bar ()\n+  !$omp end masked\n+\n+  !$omp masked filter (-1)  ! { dg-warning \"INTEGER expression of FILTER clause at .1. must be non-negative\" }\n+    call bar ()\n+  !$omp end masked\n+end\n+end module\n+\n+subroutine bar\n+  !$omp masked filter (0) filter (0)  ! { dg-error \"27: Failed to match clause\" }\n+    call foobar\n+end"}, {"sha": "49c633d21a52e9b692ea57646fce6d8c0814e166", "filename": "gcc/testsuite/gfortran.dg/gomp/masked-3.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-3.f90?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -0,0 +1,12 @@\n+subroutine foo\n+\n+  !$omp masked\n+     goto 55  ! { dg-error \"invalid branch to/from OpenMP structured block\" }\n+              ! { dg-warning \"Legacy Extension: Label at .1. is not in the same block as the GOTO statement\" \"\" { target *-*-* } .-1 }\n+  !$omp end masked\n+\n+  !$omp masked\n+55  continue  ! { dg-warning \"Legacy Extension: Label at .1. is not in the same block as the GOTO statement\" }\n+    return    ! { dg-error \"invalid branch to/from OpenMP structured block\" }\n+  !$omp end masked\n+end subroutine foo"}, {"sha": "23ffb084ee1df6d9703e00e2da7dad4cf348d04d", "filename": "gcc/testsuite/gfortran.dg/gomp/masked-combined-1.f90", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-combined-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-combined-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-combined-1.f90?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -0,0 +1,65 @@\n+subroutine foo (a, f)\n+  implicit none (type, external)\n+  interface\n+    subroutine bar (x)\n+      integer :: x\n+    end subroutine\n+  end interface\n+\n+  integer, value :: f\n+  integer, contiguous :: a(0:)\n+  integer :: i, j, k, u, v, w, x, y, z\n+\n+  !$omp parallel masked default(none) private (k) filter (f) firstprivate (f)\n+    call bar (k)\n+  !$omp end parallel masked\n+\n+  !$omp parallel masked default(none) private (k)\n+    call bar (k)\n+  !$omp end parallel masked\n+  \n+  !$omp parallel default(none) firstprivate(a, f) shared(x, y, z)\n+    !$omp masked taskloop reduction (+:x) default(none) firstprivate(a) filter (f)\n+      do i = 0, 63\n+        x = x + a(i)\n+      end do\n+    !$omp end masked taskloop\n+    !$omp masked taskloop simd reduction (+:y) default(none) firstprivate(a) private (i) filter (f)\n+      do i = 0, 63\n+        y = y + a(i)\n+      end do\n+    !$omp end masked taskloop simd\n+    !$omp masked taskloop simd reduction (+:y) default(none) firstprivate(a) private (i)\n+      do i = 0, 63\n+        y = y + a(i)\n+      end do\n+    !$omp end masked taskloop simd\n+    !$omp masked taskloop simd collapse(2) reduction (+:z) default(none) firstprivate(a) private (i, j) filter (f)\n+      do j = 0, 0\n+        do i = 0, 63\n+          z = z + a(i)\n+        end do\n+      end do\n+    !$omp end masked taskloop simd\n+  !$omp end parallel\n+\n+  !$omp parallel masked taskloop reduction (+:u) default(none) firstprivate(a, f) filter (f)\n+    do i = 0, 63\n+      u = u + a(i)\n+    end do\n+  !$omp end parallel masked taskloop\n+\n+  !$omp parallel masked taskloop simd reduction (+:v) default(none) firstprivate(a, f) filter (f)\n+    do i = 0, 63\n+      v = v + a(i)\n+    end do\n+  !$omp end parallel masked taskloop simd\n+\n+  !$omp parallel masked taskloop simd collapse(2) reduction (+:w) default(none) firstprivate(a, f) filter (f)\n+    do j = 0, 0\n+      do i = 0, 63\n+        w = w + a(i)\n+      end do\n+    end do\n+  !$omp end parallel masked taskloop simd\n+end"}, {"sha": "c94425fd0bda4a043c2fcbb49fd0407180a8968d", "filename": "gcc/testsuite/gfortran.dg/gomp/masked-combined-2.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-combined-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-combined-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-combined-2.f90?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -0,0 +1,24 @@\n+subroutine foo (a)\n+  implicit none (external, type)\n+  integer, contiguous :: a(0:)\n+  integer :: i, r, s\n+  r = 0; s = 0\n+\n+  ! In 'parallel masked taskloop', in_reduction is not permitted.\n+\n+  !$omp taskgroup task_reduction(+:r)\n+    !$omp parallel masked taskloop in_reduction(+:r)  ! { dg-error \"36: Failed to match clause\" }\n+      do i = 0, 63\n+        r = r + a(i)\n+      end do\n+    !!$omp end parallel masked taskloop\n+  !$omp end taskgroup\n+\n+  !$omp taskgroup task_reduction(+:s)\n+    !$omp parallel masked taskloop simd in_reduction(+:s)  ! { dg-error \"41: Failed to match clause\" }\n+      do i = 0, 63\n+        s = s + a(i)\n+      end do\n+    !!$omp end parallel masked taskloop simd\n+  !$omp end taskgroup\n+end"}, {"sha": "6b7ebc7b8285c771a8faecb9d1e60a4ac14e878d", "filename": "libgomp/testsuite/libgomp.fortran/masked-1.f90", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fmasked-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d5b59cb3b417ab8293702aacc75a9bbb3ead78/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fmasked-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fmasked-1.f90?ref=53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "patch": "@@ -0,0 +1,119 @@\n+module m\n+  use omp_lib\n+  implicit none (type, external)\n+contains\n+  subroutine foo (x, a)\n+    integer, value :: x\n+    integer, contiguous :: a(0:)\n+    integer :: i\n+\n+    !$omp masked\n+      if (omp_get_thread_num () /= 0) &\n+        stop 1\n+      a(128) = a(128) + 1\n+    !$omp end masked\n+\n+    !$omp masked filter (0)\n+      if (omp_get_thread_num () /= 0) &\n+        stop 2\n+      a(129) = a(129) + 1\n+    !$omp end masked\n+\n+    !$omp masked filter (7)\n+      if (omp_get_thread_num () /= 7) &\n+        stop 3\n+      a(130) = a(130) + 1\n+    !$omp end masked\n+\n+    !$omp masked filter (x)\n+      if (omp_get_thread_num () /= x) &\n+        stop 4\n+      a(131) = a(131) + 1\n+    !$omp end masked\n+\n+    !$omp masked taskloop simd filter (x) shared(a) grainsize (12) simdlen (4)\n+      do i = 0, 127\n+        a(i) = a(i) + i\n+      end do\n+    !$omp end masked taskloop simd\n+  end\n+end\n+\n+program main\n+  use m\n+  implicit none (type, external)\n+  integer :: i\n+  integer :: a(0:135)\n+\n+  a = 0\n+\n+  !$omp parallel num_threads (4)\n+    call foo (4, a)\n+  !$omp end parallel\n+  do i = 0, 127\n+    if (a(i) /= 0) &\n+      stop 5\n+  end do\n+  if (a(128) /= 1 .or. a(129) /= 1 .or. a(130) /= 0 .or. a(131) /= 0) &\n+    stop 6\n+\n+  !$omp parallel num_threads (4)\n+    call foo (3, a)\n+  !$omp end parallel\n+  do i = 0, 127\n+    if (a(i) /= i) &\n+      stop 7\n+  end do\n+  if (a(128) /= 2 .or. a(129) /= 2 .or. a(130) /= 0 .or. a(131) /= 1) &\n+    stop 8\n+\n+  !$omp parallel num_threads (8)\n+    call foo (8, a)\n+  !$omp end parallel\n+  do i = 0, 127\n+    if (a(i) /= i) &\n+      stop 9\n+  end do\n+  if (a(128) /= 3 .or. a(129) /= 3 .or. a(130) /= 1 .or. a(131) /= 1) &\n+    stop 10\n+\n+  !$omp parallel num_threads (8)\n+    call foo (6, a)\n+  !$omp end parallel\n+  do i = 0, 127\n+    if (a(i) /= 2 * i) &\n+      stop 11\n+  end do\n+  if (a(128) /= 4 .or. a(129) /= 4 .or. a(130) /= 2 .or. a(131) /= 2) &\n+    stop 12\n+\n+  do i = 0, 7\n+    a(i) = 0\n+  end do\n+  ! The filter expression can evaluate to different values in different threads.\n+  !$omp parallel masked num_threads (8) filter (omp_get_thread_num () + 1)\n+    a(omp_get_thread_num ()) = a(omp_get_thread_num ()) + 1\n+  !$omp end parallel masked\n+  do i = 0, 7\n+    if (a(i) /= 0) &\n+      stop 13\n+  end do\n+\n+  ! And multiple threads can be filtered.\n+  !$omp parallel masked num_threads (8) filter (iand (omp_get_thread_num (), not(1)))\n+    a(omp_get_thread_num ()) = a(omp_get_thread_num ()) + 1\n+  !$omp end parallel masked\n+  do i = 0, 7\n+    block\n+      integer :: j\n+      j = iand (i, 1)\n+      if (j /= 0) then\n+        j = 0\n+      else\n+        j = 1\n+      end if\n+      if (a(i) /= j) &\n+        stop 14\n+    end block\n+  end do\n+end program main"}]}