{"sha": "a764d3df8bf289beef2c4305b504a51d5a0718a2", "node_id": "C_kwDOANBUbNoAKGE3NjRkM2RmOGJmMjg5YmVlZjJjNDMwNWI1MDRhNTFkNWEwNzE4YTI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-01T23:25:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-01T23:25:44Z"}, "message": "c++: streamline tf_qualifying_scope usage\n\nThis patch introduces a convenience wrapper tsubst_scope for tsubst'ing\ninto a type with tf_qualifying_scope set, and makes suitable callers use\nit instead of explicitly setting tf_qualifying_scope.  This patch also\nmakes tsubst_copy immediately delegate to tsubst for all type trees,\nwhich allows tsubst_copy to be oblivious to the tf_qualifying_scope flag.\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_scope): Define.\n\t(tsubst_decl) <case USING_DECL>: Call tsubst_scope instead of\n\tcalling tsubst_scope with tf_qualifying_scope set.\n\t(tsubst_qualified_id): Call tsubst_scope instead of\n\tcalling tsubst with tf_qualifying_scope set.\n\t(tsubst_copy): Immediately delegate to tsubst for all TYPE_P\n\ttrees.  Remove tf_qualifying_scope manipulation.\n\t<case SCOPE_REF>: Call tsubst_scope instead of calling\n\ttsubst with tf_qualifying_scope set.", "tree": {"sha": "4ed1b7fdb462b0d83eed39c55b5a31c9c5078a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed1b7fdb462b0d83eed39c55b5a31c9c5078a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a764d3df8bf289beef2c4305b504a51d5a0718a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a764d3df8bf289beef2c4305b504a51d5a0718a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a764d3df8bf289beef2c4305b504a51d5a0718a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a764d3df8bf289beef2c4305b504a51d5a0718a2/comments", "author": null, "committer": null, "parents": [{"sha": "24ebc5404b88b765221b551dc5288f6d64ba3dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ebc5404b88b765221b551dc5288f6d64ba3dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ebc5404b88b765221b551dc5288f6d64ba3dc7"}], "stats": {"total": 43, "additions": 17, "deletions": 26}, "files": [{"sha": "ba1b30275132c611548cdfee184d1ac621673233", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a764d3df8bf289beef2c4305b504a51d5a0718a2/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a764d3df8bf289beef2c4305b504a51d5a0718a2/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=a764d3df8bf289beef2c4305b504a51d5a0718a2", "patch": "@@ -206,6 +206,7 @@ static bool dependent_template_arg_p (tree);\n static bool dependent_type_p_r (tree);\n static tree tsubst_copy\t(tree, tree, tsubst_flags_t, tree);\n static tree tsubst_decl (tree, tree, tsubst_flags_t);\n+static tree tsubst_scope (tree, tree, tsubst_flags_t, tree);\n static void perform_instantiation_time_access_checks (tree, tree);\n static tree listify (tree);\n static tree listify_autos (tree, tree);\n@@ -15010,9 +15011,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      variadic_p = true;\n \t    }\n \t  else\n-\t    scope = tsubst_copy (scope, args,\n-\t\t\t\t complain | tf_qualifying_scope,\n-\t\t\t\t in_decl);\n+\t    scope = tsubst_scope (scope, args, complain, in_decl);\n \n \t  tree name = DECL_NAME (t);\n \t  if (IDENTIFIER_CONV_OP_P (name)\n@@ -16625,6 +16624,16 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     }\n }\n \n+/* Convenience wrapper over tsubst for substituting into the LHS\n+   of the :: scope resolution operator.  */\n+\n+static tree\n+tsubst_scope (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n+{\n+  gcc_checking_assert (TYPE_P (t));\n+  return tsubst (t, args, complain | tf_qualifying_scope, in_decl);\n+}\n+\n /* OLDFNS is a lookup set of member functions from some class template, and\n    NEWFNS is a lookup set of member functions from NEWTYPE, a specialization\n    of that class template.  Return the subset of NEWFNS which are\n@@ -16889,7 +16898,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   scope = TREE_OPERAND (qualified_id, 0);\n   if (args)\n     {\n-      scope = tsubst (scope, args, complain | tf_qualifying_scope, in_decl);\n+      scope = tsubst_scope (scope, args, complain, in_decl);\n       expr = tsubst_copy (name, args, complain, in_decl);\n     }\n   else\n@@ -17135,8 +17144,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   if (t == NULL_TREE || t == error_mark_node || args == NULL_TREE)\n     return t;\n \n-  tsubst_flags_t qualifying_scope_flag = (complain & tf_qualifying_scope);\n-  complain &= ~tf_qualifying_scope;\n+  if (TYPE_P (t))\n+    return tsubst (t, args, complain, in_decl);\n \n   if (tree d = maybe_dependent_member_ref (t, args, complain, in_decl))\n     return d;\n@@ -17611,8 +17620,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n     case SCOPE_REF:\n       {\n-\ttree op0 = tsubst_copy (TREE_OPERAND (t, 0), args,\n-\t\t\t\tcomplain | tf_qualifying_scope, in_decl);\n+\ttree op0 = tsubst_scope (TREE_OPERAND (t, 0), args, complain, in_decl);\n \ttree op1 = tsubst_copy (TREE_OPERAND (t, 1), args, complain, in_decl);\n \treturn build_qualified_name (/*type=*/NULL_TREE, op0, op1,\n \t\t\t\t     QUALIFIED_NAME_IS_TEMPLATE (t));\n@@ -17708,26 +17716,9 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \treturn tree_cons (purpose, value, chain);\n       }\n \n-    case RECORD_TYPE:\n-    case UNION_TYPE:\n-    case ENUMERAL_TYPE:\n-    case INTEGER_TYPE:\n-    case TEMPLATE_TYPE_PARM:\n-    case TEMPLATE_TEMPLATE_PARM:\n-    case BOUND_TEMPLATE_TEMPLATE_PARM:\n     case TEMPLATE_PARM_INDEX:\n-    case POINTER_TYPE:\n-    case REFERENCE_TYPE:\n-    case OFFSET_TYPE:\n-    case FUNCTION_TYPE:\n-    case METHOD_TYPE:\n-    case ARRAY_TYPE:\n-    case TYPENAME_TYPE:\n-    case UNBOUND_CLASS_TEMPLATE:\n-    case TYPEOF_TYPE:\n-    case DECLTYPE_TYPE:\n     case TYPE_DECL:\n-      return tsubst (t, args, complain | qualifying_scope_flag, in_decl);\n+      return tsubst (t, args, complain, in_decl);\n \n     case USING_DECL:\n       t = DECL_NAME (t);"}]}