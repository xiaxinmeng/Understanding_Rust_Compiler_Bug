{"sha": "4c07fd98b80242f8d4fd30e6264150826c21cee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwN2ZkOThiODAyNDJmOGQ0ZmQzMGU2MjY0MTUwODI2YzIxY2VlNg==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-07-20T17:11:37Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-07-20T17:11:37Z"}, "message": "S/390: Fix pr67443.c.\n\nThe attached patch rewrites the pr67443.c testcase in a different way\nso that the test still works with the changed allocation of globals\npinned to registers.  The test ist hopefully more robust now.\n\ngcc/testsuite/ChangeLog:\n\n2016-07-20  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/pr67443.c: Fix test case.\n\nFrom-SVN: r238531", "tree": {"sha": "fba3e31b88864aec76b598a7c19c75bc94c9ed12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba3e31b88864aec76b598a7c19c75bc94c9ed12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c07fd98b80242f8d4fd30e6264150826c21cee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c07fd98b80242f8d4fd30e6264150826c21cee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c07fd98b80242f8d4fd30e6264150826c21cee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c07fd98b80242f8d4fd30e6264150826c21cee6/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fee21d65c0bab6356853d0e107778828a44f003b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee21d65c0bab6356853d0e107778828a44f003b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee21d65c0bab6356853d0e107778828a44f003b"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "ef0270ed6e12498fb1be513ec729e322e6ab7850", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c07fd98b80242f8d4fd30e6264150826c21cee6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c07fd98b80242f8d4fd30e6264150826c21cee6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c07fd98b80242f8d4fd30e6264150826c21cee6", "patch": "@@ -1,3 +1,7 @@\n+2016-07-20  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/pr67443.c: Fix test case.\n+\n 2016-07-20  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/insv-1.c: Xfail some tests."}, {"sha": "771b56fc175e68cd106687aab759fc27bfaa02f2", "filename": "gcc/testsuite/gcc.target/s390/pr67443.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c07fd98b80242f8d4fd30e6264150826c21cee6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr67443.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c07fd98b80242f8d4fd30e6264150826c21cee6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr67443.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr67443.c?ref=4c07fd98b80242f8d4fd30e6264150826c21cee6", "patch": "@@ -2,47 +2,51 @@\n \n /* { dg-do run { target s390*-*-* } } */\n /* { dg-prune-output \"call-clobbered register used for global register variable\" } */\n-/* { dg-options \"-march=z900 -fPIC -fomit-frame-pointer -O3\" } */\n+/* { dg-options \"-march=z900 -fPIC -fomit-frame-pointer -O3 -save-temps\" } */\n \n #include <assert.h>\n \n-/* Block all registers except the first three argument registers.  */\n-register long r0 asm (\"r0\");\n-register long r1 asm (\"r1\");\n-register long r5 asm (\"r5\");\n-register long r6 asm (\"r6\");\n-register long r7 asm (\"r7\");\n-register long r8 asm (\"r8\");\n-register long r9 asm (\"r9\");\n-register long r10 asm (\"r10\");\n-register long r11 asm (\"r11\");\n-\n struct s_t\n {\n   unsigned f1 : 8;\n   unsigned f2 : 24;\n };\n \n __attribute__ ((noinline))\n-void foo (struct s_t *ps, int c, int i)\n+int bar ()\n {\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+void foo (struct s_t *ps, int c)\n+{\n+  int tmp;\n+\n   /* Uses r2 as address register.  */\n   ps->f1 = c;\n-  /* The calculation of the value is so expensive that it's cheaper to spill ps\n-     to the stack and reload it later (into a different register).\n-     ==> Uses r4 as address register.*/\n-  ps->f2 = i + i % 3;\n+  /* Clobber all registers that r2 could be stored into.  */\n+  __asm__ __volatile__ (\"\" : : : \"memory\",\n+\t\t\t\"r0\",\"r1\",\"r6\",\"r7\",\"r8\",\"r9\",\"r10\",\"r11\");\n+  /* Force that the pointer is evicted from r2 and stored on the stack.  */\n+  tmp = bar ();\n+  /* User the pointer again.  It gets reloaded to a different register because\n+     r2 is already occupied.  */\n+  ps->f2 = tmp;\n   /* If dead store elimination fails to detect that the address in r2 during\n-     the first assignment is an alias of the address in r4 during the second\n+     the first assignment is an alias of the address in rX during the second\n      assignment, it eliminates the first assignment and the f1 field is not\n      written (bug).  */\n }\n+/* Make sure that r2 is used only once as an address register for storing.\n+   If this check fails, the test case needs to be fixed.\n+   { dg-final { scan-assembler-times \"\\tst.\\?\\t.*,0\\\\(%r2\\\\)\" 1 } } */\n \n int main (void)\n {\n   struct s_t s = { 0x01u, 0x020304u };\n \n-  foo (&s, 0, 0);\n+  foo (&s, 0);\n   assert (s.f1 == 0&& s.f2 == 0);\n \n   return 0;"}]}