{"sha": "0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4ODUzZWVmYjkxZDRhODFiYjQ1ZWIyNWRiNGRkOTVkYzJjZjFjNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-03T08:23:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-03T08:23:55Z"}, "message": "ipa-cp.c (gather_context_independent_values): Use ipa_get_param_move_cost.\n\n\t* ipa-cp.c (gather_context_independent_values): Use ipa_get_param_move_cost.\n\t(get_replacement_map): Remove PARAM; move parameter folding into tree-inline.c\n\t(create_specialized_node): Update.\n\t* ipa-prop.c (ipa_populate_param_decls): Do not look for origins;\n\tassert that we have gimple body; update move_cost.\n\t(count_formal_params): Assert that we have gimple body.\n\t(ipa_dump_param): New function.\n\t(ipa_alloc_node_params): Break out from ...\n\t(ipa_initialize_node_params): ... here.\n\t(ipa_get_vector_of_formal_parms): ICE when used in WPA.\n\t(ipa_write_node_info): Stream move costs.\n\t(ipa_read_node_info): Read move costs.\n\t(ipa_update_after_lto_read): Do not recompute node params.\n\t* ipa-prop.h (ipa_param_descriptor): Add move_cost.\n\t(ipa_get_param): Check we are not in WPA.\n\t(ipa_get_param_move_cost): New.\n\t* tree-inline.c (tree_function_versioning): Fold replacement as needed.\n\t* ipa-inline-analysis.c (inline_node_duplication_hook): Expect only\n\tparm numbers to be present.\n\n\t* gcc.dg/ipa/ipa-1.c: Update.\n\t* gcc.dg/ipa/ipa-2.c: Update.\n\t* gcc.dg/ipa/ipa-3.c: Update.\n\t* gcc.dg/ipa/ipa-4.c: Update.\n\t* gcc.dg/ipa/ipa-5.c: Update.\n\t* gcc.dg/ipa/ipa-7.c: Update.\n\t* gcc.dg/ipa/ipa-8.c: Update.\n\t* gcc.dg/ipa/ipcp-1.c: Update.\n\t* gcc.dg/ipa/ipcp-2.c: Update.\n\nFrom-SVN: r201462", "tree": {"sha": "6893c12531b17830080c226b0ab4329896a5a588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6893c12531b17830080c226b0ab4329896a5a588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/comments", "author": null, "committer": null, "parents": [{"sha": "563430f7f3c7d4c2358dd2acaf33258d7f0b0c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563430f7f3c7d4c2358dd2acaf33258d7f0b0c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563430f7f3c7d4c2358dd2acaf33258d7f0b0c57"}], "stats": {"total": 233, "additions": 153, "deletions": 80}, "files": [{"sha": "f54c696bcf1500673dfc105c4b5d627e0cc9a82a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -1,3 +1,25 @@\n+2013-08-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (gather_context_independent_values): Use ipa_get_param_move_cost.\n+\t(get_replacement_map): Remove PARAM; move parameter folding into tree-inline.c\n+\t(create_specialized_node): Update.\n+\t* ipa-prop.c (ipa_populate_param_decls): Do not look for origins;\n+\tassert that we have gimple body; update move_cost.\n+\t(count_formal_params): Assert that we have gimple body.\n+\t(ipa_dump_param): New function.\n+\t(ipa_alloc_node_params): Break out from ...\n+\t(ipa_initialize_node_params): ... here.\n+\t(ipa_get_vector_of_formal_parms): ICE when used in WPA.\n+\t(ipa_write_node_info): Stream move costs.\n+\t(ipa_read_node_info): Read move costs.\n+\t(ipa_update_after_lto_read): Do not recompute node params.\n+\t* ipa-prop.h (ipa_param_descriptor): Add move_cost.\n+\t(ipa_get_param): Check we are not in WPA.\n+\t(ipa_get_param_move_cost): New.\n+\t* tree-inline.c (tree_function_versioning): Fold replacement as needed.\n+\t* ipa-inline-analysis.c (inline_node_duplication_hook): Expect only\n+\tparm numbers to be present.\n+\n 2013-08-02  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/58048"}, {"sha": "b463a62f72a13ec1d07860a94a8451071ddb4848", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -1758,13 +1758,12 @@ gather_context_independent_values (struct ipa_node_params *info,\n \t    }\n \t  else if (removable_params_cost\n \t\t   && !ipa_is_param_used (info, i))\n-\t    *removable_params_cost\n-\t      += estimate_move_cost (TREE_TYPE (ipa_get_param (info, i)));\n+\t    *removable_params_cost += ipa_get_param_move_cost (info, i);\n \t}\n       else if (removable_params_cost\n \t       && !ipa_is_param_used (info, i))\n \t*removable_params_cost\n-\t  += estimate_move_cost (TREE_TYPE (ipa_get_param (info, i)));\n+\t  += ipa_get_param_move_cost (info, i);\n \n       if (known_aggs)\n \t{\n@@ -1933,8 +1932,8 @@ estimate_local_effects (struct cgraph_node *node)\n \t    {\n \t      fprintf (dump_file, \" - estimates for value \");\n \t      print_ipcp_constant_value (dump_file, val->value);\n-\t      fprintf (dump_file, \" for parameter \");\n-\t      print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n+\t      fprintf (dump_file, \" for \");\n+\t      ipa_dump_param (dump_file, info, i);\n \t      fprintf (dump_file, \": time_benefit: %i, size: %i\\n\",\n \t\t       time_benefit, size);\n \t    }\n@@ -1990,8 +1989,8 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t{\n \t\t  fprintf (dump_file, \" - estimates for value \");\n \t\t  print_ipcp_constant_value (dump_file, val->value);\n-\t\t  fprintf (dump_file, \" for parameter \");\n-\t\t  print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n+\t\t  fprintf (dump_file, \" for \");\n+\t          ipa_dump_param (dump_file, info, i);\n \t\t  fprintf (dump_file, \"[%soffset: \" HOST_WIDE_INT_PRINT_DEC\n \t\t\t\t       \"]: time_benefit: %i, size: %i\\n\",\n \t\t\t\t       plats->aggs_by_ref ? \"ref \" : \"\",\n@@ -2480,36 +2479,17 @@ gather_edges_for_value (struct ipcp_value *val, int caller_count)\n    Return it or NULL if for some reason it cannot be created.  */\n \n static struct ipa_replace_map *\n-get_replacement_map (tree value, tree parm, int parm_num)\n+get_replacement_map (struct ipa_node_params *info, tree value, int parm_num)\n {\n-  tree req_type = TREE_TYPE (parm);\n   struct ipa_replace_map *replace_map;\n \n-  if (!useless_type_conversion_p (req_type, TREE_TYPE (value)))\n-    {\n-      if (fold_convertible_p (req_type, value))\n-\tvalue = fold_build1 (NOP_EXPR, req_type, value);\n-      else if (TYPE_SIZE (req_type) == TYPE_SIZE (TREE_TYPE (value)))\n-\tvalue = fold_build1 (VIEW_CONVERT_EXPR, req_type, value);\n-      else\n-\t{\n-\t  if (dump_file)\n-\t    {\n-\t      fprintf (dump_file, \"    const \");\n-\t      print_generic_expr (dump_file, value, 0);\n-\t      fprintf (dump_file, \"  can't be converted to param \");\n-\t      print_generic_expr (dump_file, parm, 0);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\t  return NULL;\n-\t}\n-    }\n \n   replace_map = ggc_alloc_ipa_replace_map ();\n   if (dump_file)\n     {\n-      fprintf (dump_file, \"    replacing param \");\n-      print_generic_expr (dump_file, parm, 0);\n+      fprintf (dump_file, \"    replacing \");\n+      ipa_dump_param (dump_file, info, parm_num);\n+  \n       fprintf (dump_file, \" with const \");\n       print_generic_expr (dump_file, value, 0);\n       fprintf (dump_file, \"\\n\");\n@@ -2697,7 +2677,7 @@ create_specialized_node (struct cgraph_node *node,\n \t{\n \t  struct ipa_replace_map *replace_map;\n \n-\t  replace_map = get_replacement_map (t, ipa_get_param (info, i), i);\n+\t  replace_map = get_replacement_map (info, t, i);\n \t  if (replace_map)\n \t    vec_safe_push (replace_trees, replace_map);\n \t}\n@@ -2781,8 +2761,8 @@ find_more_scalar_values_for_callers_subset (struct cgraph_node *node,\n \t    {\n \t      fprintf (dump_file, \"    adding an extra known scalar value \");\n \t      print_ipcp_constant_value (dump_file, newval);\n-\t      fprintf (dump_file, \" for parameter \");\n-\t      print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n+\t      fprintf (dump_file, \" for \");\n+\t      ipa_dump_param (dump_file, info, i);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -3352,9 +3332,8 @@ decide_about_value (struct cgraph_node *node, int index, HOST_WIDE_INT offset,\n     {\n       fprintf (dump_file, \" - considering value \");\n       print_ipcp_constant_value (dump_file, val->value);\n-      fprintf (dump_file, \" for parameter \");\n-      print_generic_expr (dump_file, ipa_get_param (IPA_NODE_REF (node),\n-\t\t\t\t\t\t    index), 0);\n+      fprintf (dump_file, \" for \");\n+      ipa_dump_param (dump_file, IPA_NODE_REF (node), index);\n       if (offset != -1)\n \tfprintf (dump_file, \", offset: \" HOST_WIDE_INT_PRINT_DEC, offset);\n       fprintf (dump_file, \" (caller_count: %i)\\n\", caller_count);"}, {"sha": "518d3b99ba9bfc7ffef50108cb8d72915855583b", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -1101,12 +1101,13 @@ inline_node_duplication_hook (struct cgraph_node *src,\n       known_vals.safe_grow_cleared (count);\n       for (i = 0; i < count; i++)\n \t{\n-\t  tree t = ipa_get_param (parms_info, i);\n \t  struct ipa_replace_map *r;\n \n \t  for (j = 0; vec_safe_iterate (dst->clone.tree_map, j, &r); j++)\n \t    {\n-\t      if (r->old_tree == t && r->replace_p && !r->ref_p)\n+\t      if (((!r->old_tree && r->parm_num == i)\n+\t\t   || (r->old_tree && r->old_tree == ipa_get_param (parms_info, i)))\n+\t\t   && r->replace_p && !r->ref_p)\n \t\t{\n \t\t  known_vals[i] = r->new_tree;\n \t\t  break;"}, {"sha": "ef4dff72542733e7c5fb81a2b5d0344b4de85f41", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -130,16 +130,14 @@ ipa_populate_param_decls (struct cgraph_node *node,\n   tree parm;\n   int param_num;\n \n-  /* We do not copy DECL_ARGUMENTS to virtual clones.  */\n-  while (node->clone_of)\n-    node = node->clone_of;\n-\n   fndecl = node->symbol.decl;\n+  gcc_assert (gimple_has_body_p (fndecl));\n   fnargs = DECL_ARGUMENTS (fndecl);\n   param_num = 0;\n   for (parm = fnargs; parm; parm = DECL_CHAIN (parm))\n     {\n       descriptors[param_num].decl = parm;\n+      descriptors[param_num].move_cost = estimate_move_cost (TREE_TYPE (parm));\n       param_num++;\n     }\n }\n@@ -151,13 +149,41 @@ count_formal_params (tree fndecl)\n {\n   tree parm;\n   int count = 0;\n+  gcc_assert (gimple_has_body_p (fndecl));\n \n   for (parm = DECL_ARGUMENTS (fndecl); parm; parm = DECL_CHAIN (parm))\n     count++;\n \n   return count;\n }\n \n+/* Return the declaration of Ith formal parameter of the function corresponding\n+   to INFO.  Note there is no setter function as this array is built just once\n+   using ipa_initialize_node_params. */\n+\n+void\n+ipa_dump_param (FILE *file, struct ipa_node_params *info, int i)\n+{\n+  fprintf (file, \"param #%i\", i);\n+  if (info->descriptors[i].decl)\n+    {\n+      fprintf (file, \" \");\n+      print_generic_expr (file, info->descriptors[i].decl, 0);\n+    }\n+}\n+\n+/* Initialize the ipa_node_params structure associated with NODE \n+   to hold PARAM_COUNT parameters.  */\n+\n+void\n+ipa_alloc_node_params (struct cgraph_node *node, int param_count)\n+{\n+  struct ipa_node_params *info = IPA_NODE_REF (node);\n+\n+  if (!info->descriptors.exists () && param_count)\n+    info->descriptors.safe_grow_cleared (param_count);\n+}\n+\n /* Initialize the ipa_node_params structure associated with NODE by counting\n    the function parameters, creating the descriptors and populating their\n    param_decls.  */\n@@ -169,15 +195,8 @@ ipa_initialize_node_params (struct cgraph_node *node)\n \n   if (!info->descriptors.exists ())\n     {\n-      int param_count;\n-      gcc_assert (!node->clone_of);\n-\n-      param_count = count_formal_params (node->symbol.decl);\n-      if (param_count)\n-\t{\n-\t  info->descriptors.safe_grow_cleared (param_count);\n-\t  ipa_populate_param_decls (node, info->descriptors);\n-\t}\n+      ipa_alloc_node_params (node, count_formal_params (node->symbol.decl));\n+      ipa_populate_param_decls (node, info->descriptors);\n     }\n }\n \n@@ -3064,6 +3083,7 @@ ipa_get_vector_of_formal_parms (tree fndecl)\n   int count;\n   tree parm;\n \n+  gcc_assert (!flag_wpa);\n   count = count_formal_params (fndecl);\n   args.create (count);\n   for (parm = DECL_ARGUMENTS (fndecl); parm; parm = DECL_CHAIN (parm))\n@@ -3856,6 +3876,9 @@ ipa_write_node_info (struct output_block *ob, struct cgraph_node *node)\n   node_ref = lto_symtab_encoder_encode (encoder, (symtab_node) node);\n   streamer_write_uhwi (ob, node_ref);\n \n+  streamer_write_uhwi (ob, ipa_get_param_count (info));\n+  for (j = 0; j < ipa_get_param_count (info); j++)\n+    streamer_write_uhwi (ob, ipa_get_param_move_cost (info, j));\n   bp = bitpack_create (ob->main_stream);\n   gcc_assert (info->uses_analysis_done\n \t      || ipa_get_param_count (info) == 0);\n@@ -3896,8 +3919,11 @@ ipa_read_node_info (struct lto_input_block *ib, struct cgraph_node *node,\n   struct cgraph_edge *e;\n   struct bitpack_d bp;\n \n-  ipa_initialize_node_params (node);\n+  ipa_alloc_node_params (node, streamer_read_uhwi (ib));\n \n+  for (k = 0; k < ipa_get_param_count (info); k++)\n+    info->descriptors[k].move_cost = streamer_read_uhwi (ib);\n+    \n   bp = streamer_read_bitpack (ib);\n   if (ipa_get_param_count (info) != 0)\n     info->uses_analysis_done = true;\n@@ -4049,13 +4075,8 @@ ipa_prop_read_jump_functions (void)\n void\n ipa_update_after_lto_read (void)\n {\n-  struct cgraph_node *node;\n-\n   ipa_check_create_node_params ();\n   ipa_check_create_edge_args ();\n-\n-  FOR_EACH_DEFINED_FUNCTION (node)\n-    ipa_initialize_node_params (node);\n }\n \n void"}, {"sha": "2ccac2f3edec01afb8e1ab9577f4b23c747d1a1b", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -320,6 +320,7 @@ struct ipa_param_descriptor\n      says how many there are.  If any use could not be described by means of\n      ipa-prop structures, this is IPA_UNDESCRIBED_USE.  */\n   int controlled_uses;\n+  unsigned int move_cost : 31;\n   /* The parameter is used.  */\n   unsigned used : 1;\n };\n@@ -377,9 +378,19 @@ ipa_get_param_count (struct ipa_node_params *info)\n static inline tree\n ipa_get_param (struct ipa_node_params *info, int i)\n {\n+  gcc_checking_assert (!flag_wpa);\n   return info->descriptors[i].decl;\n }\n \n+/* Return the move cost of Ith formal parameter of the function corresponding\n+   to INFO.  */\n+\n+static inline int\n+ipa_get_param_move_cost (struct ipa_node_params *info, int i)\n+{\n+  return info->descriptors[i].move_cost;\n+}\n+\n /* Set the used flag corresponding to the Ith formal parameter of the function\n    associated with INFO to VAL.  */\n \n@@ -653,6 +664,7 @@ int ipa_get_param_decl_index (struct ipa_node_params *, tree);\n tree ipa_value_from_jfunc (struct ipa_node_params *info,\n \t\t\t   struct ipa_jump_func *jfunc);\n unsigned int ipcp_transform_function (struct cgraph_node *node);\n+void ipa_dump_param (FILE *, struct ipa_node_params *info, int i);\n \n \n /* From tree-sra.c:  */"}, {"sha": "2f942edede6453d81257faa1966eeebd12fb7558", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -1,3 +1,15 @@\n+2013-08-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-1.c: Update.\n+\t* gcc.dg/ipa/ipa-2.c: Update.\n+\t* gcc.dg/ipa/ipa-3.c: Update.\n+\t* gcc.dg/ipa/ipa-4.c: Update.\n+\t* gcc.dg/ipa/ipa-5.c: Update.\n+\t* gcc.dg/ipa/ipa-7.c: Update.\n+\t* gcc.dg/ipa/ipa-8.c: Update.\n+\t* gcc.dg/ipa/ipcp-1.c: Update.\n+\t* gcc.dg/ipa/ipcp-2.c: Update.\n+\n 2013-08-02  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/58048"}, {"sha": "3cc32da1c98a990328dd49bdb13314ae14af86f3", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-1.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -25,7 +25,7 @@ int main ()\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 7\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */\n \n "}, {"sha": "7f14d42a03a575c1f302edfb6a36cf416b6803d8", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-2.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -23,5 +23,5 @@ int main ()\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 7\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */"}, {"sha": "36fd50678923b9357a4e804b736fa9b4881fc592", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-3.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -29,8 +29,8 @@ int main ()\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 7\" \"cp\"  } } */\n /* { dg-final { scan-ipa-dump \"Creating a specialized node of g\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param b with const 7\" \"cp\"  } } */\n-/* { dg-final { scan-ipa-dump \"replacing param c with const 3\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 b with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .1 c with const 3\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */"}, {"sha": "566b32971364131f1c887a6ba110f6387996af1e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-4.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -26,5 +26,5 @@ int main ()\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f\" \"cp\"  } } */\n-/* { dg-final { scan-ipa-dump-times \"replacing param a with const 7\" 1 \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"replacing param .0 a with const 7\" 1 \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */"}, {"sha": "daa64fada6fbe984daec15d170feab8bad670bf6", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-5.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -28,6 +28,6 @@ int main ()\n }\n \n /* { dg-final { scan-ipa-dump-times \"Creating a specialized node\" 3 \"cp\"  } } */\n-/* { dg-final { scan-ipa-dump \"replacing param c with const 3\" \"cp\"  } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .1 c with const 3\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 7\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */"}, {"sha": "271a34a3d602b6b5c136fabf3341e06e6b131e8d", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-7.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -27,7 +27,7 @@ int main ()\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump-times \"replacing param . with const 7\" 1 \"cp\" } } */\n+/* { dg-final { scan-ipa-dump-times \"replacing param .. . with const 7\" 1 \"cp\" } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */\n \n "}, {"sha": "d138cf26330b2ea670847775f6897c504b314ce5", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-8.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -23,9 +23,9 @@ int main ()\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 7\" \"cp\"  } } */\n /* { dg-final { scan-ipa-dump \"Creating a specialized node of g\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param b with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 b with const 7\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */\n \n "}, {"sha": "a2ffd420203a93998f68cd049878f87d5817062c", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-1.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -46,7 +46,7 @@ main (int argc, char *argv[])\n \n \n /* { dg-final { scan-ipa-dump \"Creating a specialized node of f.*for all known contexts\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 7\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 7\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */\n \n "}, {"sha": "62f564f216a03c00725ecf6662a197d43e91df3e", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-2.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -94,6 +94,6 @@ top2 (int q)\n }\n \n /* { dg-final { scan-ipa-dump-times \"Creating a specialized node of foo\" 1 \"cp\" } } */\n-/* { dg-final { scan-ipa-dump-times \"replacing param p with const 0\" 3 \"cp\"  } } */\n-/* { dg-final { scan-ipa-dump \"replacing param s with const 4\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"replacing param .. p with const 0\" 3 \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 s with const 4\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */"}, {"sha": "462cade498ee4f0423be48ed8f37c48e2d6951a5", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-4.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -61,8 +61,8 @@ main (int argc, char *argv[])\n /* { dg-final { scan-ipa-dump \"Creating a specialized node of g1.*for all known contexts\" \"cp\" } } */\n /* { dg-final { scan-ipa-dump \"Creating a specialized node of g2.*for all known contexts\" \"cp\" } } */\n /* { dg-final { scan-ipa-dump-not \"Creating a specialized node of h.*for all known contexts\" \"cp\" } } */\n-/* { dg-final { scan-ipa-dump-times \"replacing param a with const 7\" 2 \"cp\"  } } */\n-/* { dg-final { scan-ipa-dump \"replacing param a with const 11\" \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"replacing param .0 a with const 7\" 2 \"cp\"  } } */\n+/* { dg-final { scan-ipa-dump \"replacing param .0 a with const 11\" \"cp\"  } } */\n /* { dg-final { cleanup-ipa-dump \"cp\" } } */\n \n "}, {"sha": "2ebcd0d7a3ec77bf750a9218f3b72558f2e67db0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0e8853eefb91d4a81bb45eb25db4dd95dc2cf1c4", "patch": "@@ -5150,17 +5150,43 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t      {\n \t\tint i = replace_info->parm_num;\n \t\ttree parm;\n+\t\ttree req_type;\n+\n \t\tfor (parm = DECL_ARGUMENTS (old_decl); i; parm = DECL_CHAIN (parm))\n \t\t  i --;\n \t\treplace_info->old_tree = parm;\n+\t\treq_type = TREE_TYPE (parm);\n+\t\tif (!useless_type_conversion_p (req_type, TREE_TYPE (replace_info->new_tree)))\n+\t\t  {\n+\t\t    if (fold_convertible_p (req_type, replace_info->new_tree))\n+\t\t      replace_info->new_tree = fold_build1 (NOP_EXPR, req_type, replace_info->new_tree);\n+\t\t    else if (TYPE_SIZE (req_type) == TYPE_SIZE (TREE_TYPE (replace_info->new_tree)))\n+\t\t      replace_info->new_tree = fold_build1 (VIEW_CONVERT_EXPR, req_type, replace_info->new_tree);\n+\t\t    else\n+\t\t      {\n+\t\t\tif (dump_file)\n+\t\t\t  {\n+\t\t\t    fprintf (dump_file, \"    const \");\n+\t\t\t    print_generic_expr (dump_file, replace_info->new_tree, 0);\n+\t\t\t    fprintf (dump_file, \"  can't be converted to param \");\n+\t\t\t    print_generic_expr (dump_file, parm, 0);\n+\t\t\t    fprintf (dump_file, \"\\n\");\n+\t\t\t  }\n+\t\t\treplace_info->old_tree = NULL;\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t    else\n+\t      gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);\n+\t    if (replace_info->old_tree)\n+\t      {\n+\t\tinit = setup_one_parameter (&id, replace_info->old_tree,\n+\t\t\t\t\t    replace_info->new_tree, id.src_fn,\n+\t\t\t\t\t    NULL,\n+\t\t\t\t\t    &vars);\n+\t\tif (init)\n+\t\t  init_stmts.safe_push (init);\n \t      }\n-\t    gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);\n-\t    init = setup_one_parameter (&id, replace_info->old_tree,\n-\t    \t\t\t        replace_info->new_tree, id.src_fn,\n-\t\t\t\t        NULL,\n-\t\t\t\t        &vars);\n-\t    if (init)\n-\t      init_stmts.safe_push (init);\n \t  }\n       }\n   /* Copy the function's arguments.  */"}]}