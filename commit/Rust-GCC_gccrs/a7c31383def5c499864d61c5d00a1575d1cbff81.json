{"sha": "a7c31383def5c499864d61c5d00a1575d1cbff81", "node_id": "C_kwDOANBUbNoAKGE3YzMxMzgzZGVmNWM0OTk4NjRkNjFjNWQwMGExNTc1ZDFjYmZmODE", "commit": {"author": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-11-03T01:01:13Z"}, "committer": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-11-07T16:13:29Z"}, "message": "Changed DefId type from uint64_t to be struct\n\nDefId was uint64_t previously but it has been changed to be a struct.\nIn order to reduce code breakage, ==, !=, and < operators have been implemented\nfor DefId. Since DefId is now a proper struct, bit manipulation code has been\nremoved with member accesses.\n\nFixes #439\n\nSigned-off-by: Nirmal Patel <npate012@gmail.com>", "tree": {"sha": "82d8bd640e581df5f58e2db8b5512e7cad38267a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d8bd640e581df5f58e2db8b5512e7cad38267a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7c31383def5c499864d61c5d00a1575d1cbff81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c31383def5c499864d61c5d00a1575d1cbff81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c31383def5c499864d61c5d00a1575d1cbff81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c31383def5c499864d61c5d00a1575d1cbff81/comments", "author": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f0df4812c37fc428b5508e019e9fb7f8a7b77b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0df4812c37fc428b5508e019e9fb7f8a7b77b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0df4812c37fc428b5508e019e9fb7f8a7b77b1"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "14c131a033dceb4425f069dc58e69c8c425ca929", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c31383def5c499864d61c5d00a1575d1cbff81/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c31383def5c499864d61c5d00a1575d1cbff81/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=a7c31383def5c499864d61c5d00a1575d1cbff81", "patch": "@@ -1297,7 +1297,7 @@ class FnType : public BaseType, public SubstitutionRef\n       params (std::move (params)), type (type), flags (flags),\n       identifier (identifier), id (id), abi (abi)\n   {\n-    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    LocalDefId local_def_id = id.localDefId;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n \n@@ -1312,7 +1312,7 @@ class FnType : public BaseType, public SubstitutionRef\n       params (params), type (type), flags (flags), identifier (identifier),\n       id (id), abi (abi)\n   {\n-    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    LocalDefId local_def_id = id.localDefId;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n \n@@ -1471,7 +1471,7 @@ class ClosureType : public BaseType, public SubstitutionRef\n       parameter_types (std::move (parameter_types)),\n       result_type (std::move (result_type)), id (id)\n   {\n-    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    LocalDefId local_def_id = id.localDefId;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n \n@@ -1485,7 +1485,7 @@ class ClosureType : public BaseType, public SubstitutionRef\n       parameter_types (std::move (parameter_types)),\n       result_type (std::move (result_type)), id (id)\n   {\n-    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    LocalDefId local_def_id = id.localDefId;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n "}, {"sha": "9e5b50951780e0cb3fa9c55ba25024780522e622", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c31383def5c499864d61c5d00a1575d1cbff81/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c31383def5c499864d61c5d00a1575d1cbff81/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=a7c31383def5c499864d61c5d00a1575d1cbff81", "patch": "@@ -63,7 +63,7 @@ NodeMapping::get_defid () const\n DefId\n NodeMapping::get_defid (CrateNum crate_num, LocalDefId local_defid)\n {\n-  return ((uint64_t) crate_num << 32) | local_defid;\n+  return DefId{crate_num, local_defid};\n }\n \n std::string\n@@ -209,8 +209,8 @@ Mappings::insert_hir_crate (HIR::Crate *crate)\n void\n Mappings::insert_defid_mapping (DefId id, HIR::Item *item)\n {\n-  CrateNum crate_num = (id & DEF_ID_CRATE_MASK) >> 32;\n-  LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+  CrateNum crate_num = id.crateNum;\n+  LocalDefId local_def_id = id.localDefId;\n \n   rust_assert (lookup_defid (id) == nullptr);\n   rust_assert (lookup_local_defid (crate_num, local_def_id) == nullptr);"}, {"sha": "066577961813dd389a45e9156f2cdf64a6c1b7dc", "filename": "gcc/rust/util/rust-mapping-common.h", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c31383def5c499864d61c5d00a1575d1cbff81/gcc%2Frust%2Futil%2Frust-mapping-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c31383def5c499864d61c5d00a1575d1cbff81/gcc%2Frust%2Futil%2Frust-mapping-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-mapping-common.h?ref=a7c31383def5c499864d61c5d00a1575d1cbff81", "patch": "@@ -31,17 +31,32 @@ typedef uint32_t NodeId;\n typedef uint32_t HirId;\n // refers to any top-level decl in HIR\n typedef uint32_t LocalDefId;\n-// refers to <Crate><DefId>\n-typedef uint64_t DefId;\n \n-#define DEF_ID_CRATE_MASK 0xFFFFFFFF00000000\n-#define DEF_ID_LOCAL_DEF_MASK 0x00000000FFFFFFFF\n+struct DefId\n+{\n+  CrateNum crateNum;\n+  LocalDefId localDefId;\n+\n+  bool operator== (const DefId &other) const\n+  {\n+    return this->crateNum == other.crateNum\n+\t   && this->localDefId == other.localDefId;\n+  }\n+\n+  bool operator!= (const DefId &other) const { return !(*this == other); }\n+\n+  bool operator< (const DefId &other) const\n+  {\n+    return ((uint64_t) this->crateNum << 32 | this->localDefId)\n+\t   < ((uint64_t) other.crateNum << 32 | other.localDefId);\n+  }\n+};\n \n #define UNKNOWN_CREATENUM ((uint32_t) (0))\n #define UNKNOWN_NODEID ((uint32_t) (0))\n #define UNKNOWN_HIRID ((uint32_t) (0))\n #define UNKNOWN_LOCAL_DEFID ((uint32_t) (0))\n-#define UNKNOWN_DEFID ((uint64_t) (0))\n+#define UNKNOWN_DEFID (DefId{0, 0})\n \n } // namespace Rust\n "}]}