{"sha": "1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxM2Y5YmY5YjE4MDVmY2ZmMWM1YWZiZmNmZGY3YmFmNmY4Y2I1YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:48:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:48:07Z"}, "message": "s-secsta.adb (Chunk): Ensure this object has a static size known at compile time...\n\n2007-04-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-secsta.adb (Chunk): Ensure this object has a static size known at\n\tcompile time, to avoid dynamic memory allocation\n\t(Elaboration code): Only use dynamic memory allocation when needed.\n\nFrom-SVN: r125464", "tree": {"sha": "d7d3c341391a7ca4a07eceac77a4b346696cae45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d3c341391a7ca4a07eceac77a4b346696cae45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a/comments", "author": null, "committer": null, "parents": [{"sha": "0c1edb568006ba74d4a3eb3d697aa3afc3425734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1edb568006ba74d4a3eb3d697aa3afc3425734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1edb568006ba74d4a3eb3d697aa3afc3425734"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "0efa5556696e0fb78632f1aa61f9a04f469b68dc", "filename": "gcc/ada/s-secsta.adb", "status": "modified", "additions": 49, "deletions": 22, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a/gcc%2Fada%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a/gcc%2Fada%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.adb?ref=1513f9bf9b1805fcff1c5afbfcfdf7baf6f8cb5a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,8 +33,8 @@\n \n with System.Soft_Links;\n with System.Parameters;\n-with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n package body System.Secondary_Stack is\n \n@@ -116,13 +116,13 @@ package body System.Secondary_Stack is\n    --  Pointer to record used to represent a dynamically allocated secondary\n    --  stack descriptor for a secondary stack chunk.\n \n-   procedure Free is new Unchecked_Deallocation (Chunk_Id, Chunk_Ptr);\n+   procedure Free is new Ada.Unchecked_Deallocation (Chunk_Id, Chunk_Ptr);\n    --  Free a dynamically allocated chunk\n \n    function To_Stack_Ptr is new\n-     Unchecked_Conversion (Address, Stack_Ptr);\n+     Ada.Unchecked_Conversion (Address, Stack_Ptr);\n    function To_Addr is new\n-     Unchecked_Conversion (Stack_Ptr, Address);\n+     Ada.Unchecked_Conversion (Stack_Ptr, Address);\n    --  Convert to and from address stored in task data structures\n \n    --------------------------------------------------------------\n@@ -166,7 +166,7 @@ package body System.Secondary_Stack is\n    --  Pointer to record used to describe statically allocated sec stack\n \n    function To_Fixed_Stack_Ptr is new\n-     Unchecked_Conversion (Address, Fixed_Stack_Ptr);\n+     Ada.Unchecked_Conversion (Address, Fixed_Stack_Ptr);\n    --  Convert from address stored in task data structures\n \n    --------------\n@@ -302,7 +302,8 @@ package body System.Secondary_Stack is\n             Stack : Stack_Ptr := To_Stack_Ptr (Stk);\n             Chunk : Chunk_Ptr;\n \n-            procedure Free is new Unchecked_Deallocation (Stack_Id, Stack_Ptr);\n+            procedure Free is\n+              new Ada.Unchecked_Deallocation (Stack_Id, Stack_Ptr);\n \n          begin\n             Chunk := Stack.Current_Chunk;\n@@ -492,21 +493,47 @@ package body System.Secondary_Stack is\n    Stack : aliased Stack_Id;\n    for Stack'Alignment use Standard'Maximum_Alignment;\n \n-   Chunk : aliased Chunk_Id (1, SS_Ptr (Default_Secondary_Stack_Size));\n-   for Chunk'Alignment use Standard'Maximum_Alignment;\n+   Static_Secondary_Stack_Size : constant := 10 * 1024;\n+   --  Static_Secondary_Stack_Size must be static so that Chunk is allocated\n+   --  statically, and not via dynamic memory allocation.\n \n-   Chunk_Address : Address;\n+   Chunk : aliased Chunk_Id (1, Static_Secondary_Stack_Size);\n+   for Chunk'Alignment use Standard'Maximum_Alignment;\n+   --  Default chunk used, unless gnatbind -D is specified with a value\n+   --  greater than Static_Secondary_Stack_Size\n \n begin\n-   if SS_Ratio_Dynamic then\n-      Stack.Top           := 1;\n-      Stack.Current_Chunk := Chunk'Access;\n-      Stack.Default_Size  := SSE.Storage_Offset (Default_Secondary_Stack_Size);\n-      System.Soft_Links.Set_Sec_Stack_Addr_NT (Stack'Address);\n-\n-   else\n-      Chunk_Address := Chunk'Address;\n-      SS_Init (Chunk_Address, Default_Secondary_Stack_Size);\n-      System.Soft_Links.Set_Sec_Stack_Addr_NT (Chunk_Address);\n-   end if;\n+   declare\n+      Chunk_Address : Address;\n+      Chunk_Access  : Chunk_Ptr;\n+\n+   begin\n+      if Default_Secondary_Stack_Size <= Static_Secondary_Stack_Size then\n+\n+         --  Normally we allocate the secondary stack for the main program\n+         --  statically, using the default secondary stack size.\n+\n+         Chunk_Access := Chunk'Access;\n+\n+      else\n+         --  Default_Secondary_Stack_Size was increased via gnatbind -D, so we\n+         --  need to allocate a chunk dynamically.\n+\n+         Chunk_Access :=\n+           new Chunk_Id (1, SS_Ptr (Default_Secondary_Stack_Size));\n+      end if;\n+\n+      if SS_Ratio_Dynamic then\n+         Stack.Top           := 1;\n+         Stack.Current_Chunk := Chunk_Access;\n+         Stack.Default_Size  :=\n+           SSE.Storage_Offset (Default_Secondary_Stack_Size);\n+         System.Soft_Links.Set_Sec_Stack_Addr_NT (Stack'Address);\n+\n+      else\n+         Chunk_Address := Chunk_Access.all'Address;\n+         SS_Init (Chunk_Address, Default_Secondary_Stack_Size);\n+         System.Soft_Links.Set_Sec_Stack_Addr_NT (Chunk_Address);\n+      end if;\n+   end;\n end System.Secondary_Stack;"}]}