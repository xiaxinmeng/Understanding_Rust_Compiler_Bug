{"sha": "e847d3bfe5c0afdcfde359f76a05ff8ae32cef57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg0N2QzYmZlNWMwYWZkY2ZkZTM1OWY3NmEwNWZmOGFlMzJjZWY1Nw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-10-15T23:57:34Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-10-15T23:57:34Z"}, "message": "invoke.texi (Wextra): Move it just after Wall...\n\n2007-10-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* doc/invoke.texi (Wextra): Move it just after Wall, list the\n\toptions enabled by Wextra and mention Wuninitialized.\n\nFrom-SVN: r129373", "tree": {"sha": "d5fc367f48419abcdb423aa6da1b8ac4fba5b043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5fc367f48419abcdb423aa6da1b8ac4fba5b043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57/comments", "author": null, "committer": null, "parents": [{"sha": "cc0a3c3a1a1230c1d9d6396efa3db86efd29c624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0a3c3a1a1230c1d9d6396efa3db86efd29c624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0a3c3a1a1230c1d9d6396efa3db86efd29c624"}], "stats": {"total": 165, "additions": 69, "deletions": 96}, "files": [{"sha": "fe079a72c419276e7399034e18fd420f94586cb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e847d3bfe5c0afdcfde359f76a05ff8ae32cef57", "patch": "@@ -1,3 +1,8 @@\n+2007-10-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* doc/invoke.texi (Wextra): Move it just after Wall, list the\n+\toptions enabled by Wextra and mention Wuninitialized.\n+\t\n 2007-10-15  Nigel Stephens  <nigel@mips.com>\n \n \t* config/mips/mips.h (LOCAL_ALIGNMENT): Define."}, {"sha": "a0b9c795a1789de0317b2dcda9f5f6895f64ab9c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 64, "deletions": 96, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e847d3bfe5c0afdcfde359f76a05ff8ae32cef57/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e847d3bfe5c0afdcfde359f76a05ff8ae32cef57", "patch": "@@ -2623,14 +2623,75 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wstrict-overflow  @gol\n -Wswitch  @gol\n -Wtrigraphs  @gol\n--Wuninitialized @r{(only with} @option{-O1}@r{,} @option{-O2} @r{or} @option{-O3}@r{)}  @gol\n+-Wuninitialized @r{(only with} @option{-O1} @r{and above)}  @gol\n -Wunknown-pragmas  @gol\n -Wunused-function  @gol\n -Wunused-label     @gol\n -Wunused-value     @gol\n -Wunused-variable  @gol\n }\n \n+Note that some warning flags are not implied by @option{-Wall}.  Some of\n+them warn about constructions that users generally do not consider\n+questionable, but which occasionally you might wish to check for;\n+others warn about constructions that are necessary or hard to avoid in\n+some cases, and there is no simple way to modify the code to suppress\n+the warning. Some of them are enabled by @option{-Wextra} but many of\n+them must be enabled individually.\n+\n+@item -Wextra\n+@opindex W\n+@opindex Wextra\n+This enables some extra warning flags that are not enabled by\n+@option{-Wall}. (This option used to be called @option{-W}.  The older\n+name is still supported, but the newer name is more descriptive.)\n+\n+@gccoptlist{-Wclobbered  @gol\n+-Wempty-body  @gol\n+-Wmissing-field-initializers  @gol\n+-Wmissing-parameter-type @r{(C only)}  @gol\n+-Wold-style-declaration @r{(C only)}  @gol\n+-Woverride-init  @gol\n+-Wsign-compare  @gol\n+-Wtype-limits  @gol\n+-Wuninitialized @r{(only with} @option{-O1} @r{and above)}  @gol\n+-Wunused-parameter @r{(only with} @option{-Wunused} @r{or}\n+@option{-Wall}@r{)}  @gol\n+}\n+\n+The option @option{-Wextra} also prints warning messages for the\n+following cases:\n+\n+@itemize @bullet\n+\n+@item\n+A pointer is compared against integer zero with @samp{<}, @samp{<=},\n+@samp{>}, or @samp{>=}.\n+\n+@item \n+(C++ only) An enumerator and a non-enumerator both appear in a\n+conditional expression.\n+\n+@item \n+(C++ only) A non-static reference or non-static @samp{const} member\n+appears in a class without constructors.\n+\n+@item \n+(C++ only) Ambiguous virtual bases.\n+\n+@item \n+(C++ only) Subscripting an array which has been declared @samp{register}.\n+\n+@item \n+(C++ only) Taking the address of a variable which has been declared\n+@samp{register}.\n+\n+@item \n+(C++ only) A base class is not initialized in a derived class' copy\n+constructor.\n+\n+@end itemize\n+\n @item -Wno-import\n @opindex Wno-import\n Inhibit warning messages about the use of @samp{#import}.\n@@ -3086,7 +3147,8 @@ Some spurious warnings can be avoided if you declare all the functions\n you use that never return as @code{noreturn}.  @xref{Function\n Attributes}.\n \n-This warning is enabled by @option{-Wall}.\n+This warning is enabled by @option{-Wall} or @option{-Wextra} in\n+optimizing compilations (@option{-O1} and above).\n \n @item -Wunknown-pragmas\n @opindex Wunknown-pragmas\n@@ -3207,100 +3269,6 @@ This option is only active when @option{-ftree-vrp} is active\n (default for -O2 and above). It warns about subscripts to arrays\n that are always out of bounds. This warning is enabled by @option{-Wall}.\n \n-@end table\n-\n-The following @option{-W@dots{}} options are not implied by @option{-Wall}.\n-Some of them warn about constructions that users generally do not\n-consider questionable, but which occasionally you might wish to check\n-for; others warn about constructions that are necessary or hard to avoid\n-in some cases, and there is no simple way to modify the code to suppress\n-the warning.\n-\n-@table @gcctabopt\n-@item -Wextra\n-@opindex W\n-@opindex Wextra\n-(This option used to be called @option{-W}.  The older name is still\n-supported, but the newer name is more descriptive.)  Print extra warning\n-messages for these events:\n-\n-@itemize @bullet\n-@item\n-Warn if a comparison is always true or always false due to the limited\n-range of the data type, but do not warn for constant expressions.  For\n-example, warn if an unsigned variable is compared against zero with\n-@samp{<} or @samp{>=}.  This warning can be independently controlled\n-by @option{-Wtype-limits}.\n-\n-@item @r{(C only)}\n-Storage-class specifiers like @code{static} are not the first things\n-in a declaration.  According to the C Standard, this usage is\n-obsolescent.  This warning can be independently controlled by\n-@option{-Wold-style-declaration}.\n-\n-@item\n-If @option{-Wall} or @option{-Wunused} is also specified, warn about unused\n-arguments.\n-\n-@item\n-A comparison between signed and unsigned values could produce an\n-incorrect result when the signed value is converted to unsigned.\n-(But don't warn if @option{-Wno-sign-compare} is also specified.)\n-\n-@item\n-An aggregate has an initializer which does not initialize all members.\n-This warning can be independently controlled by\n-@option{-Wmissing-field-initializers}.\n-\n-@item\n-An initialized field without side effects is overridden when using\n-designated initializers (@pxref{Designated Inits, , Designated\n-Initializers}).  This warning can be independently controlled by\n-@option{-Woverride-init}.\n-\n-@item @r{(C only)}\n-A function parameter is declared without a type specifier in K&R-style\n-functions.  This warning can be independently controlled by\n-@option{-Wmissing-parameter-type}.\n-\n-@item\n-An empty body occurs in an @samp{if}, @samp{else} or\n-@samp{do while} statement. This warning can be independently\n-controlled by @option{-Wempty-body}.\n-\n-@item @r{(C++ only)}\n-An empty body occurs in a @samp{while} or @samp{for} statement with no\n-whitespacing before the semicolon. This warning can be independently\n-controlled by @option{-Wempty-body}.\n-\n-@item\n-A pointer is compared against integer zero with @samp{<}, @samp{<=},\n-@samp{>}, or @samp{>=}.\n-\n-@item\n-A variable might be changed by @samp{longjmp} or @samp{vfork}.\n-This warning can be independently controlled by @option{-Wclobbered}.\n-\n-@item @r{(C++ only)}\n-An enumerator and a non-enumerator both appear in a conditional expression.\n-\n-@item @r{(C++ only)}\n-A non-static reference or non-static @samp{const} member appears in a\n-class without constructors.\n-\n-@item @r{(C++ only)}\n-Ambiguous virtual bases.\n-\n-@item @r{(C++ only)}\n-Subscripting an array which has been declared @samp{register}.\n-\n-@item @r{(C++ only)}\n-Taking the address of a variable which has been declared @samp{register}.\n-\n-@item @r{(C++ only)}\n-A base class is not initialized in a derived class' copy constructor.\n-@end itemize\n-\n @item -Wno-div-by-zero\n @opindex Wno-div-by-zero\n @opindex Wdiv-by-zero"}]}