{"sha": "647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3YzYxZjFjNDYyM2VjOTU5MWNiNGYxMGRkOTRjZmY1YTdiNGZhOA==", "commit": {"author": {"name": "Vidya Praveen", "email": "vidyapraveen@arm.com", "date": "2018-01-08T16:24:49Z"}, "committer": {"name": "Vidya Praveen", "email": "vp@gcc.gnu.org", "date": "2018-01-08T16:24:49Z"}, "message": "PR target/83663 - Revert r255946\n\ngcc/\n\n2018-01-08  Vidya Praveen  <vidyapraveen@arm.com>\n\n\tPR target/83663 - Revert r255946\n\t* config/aarch64/aarch64.c (aarch64_expand_vector_init): Modify code\n\tgeneration for cases where splatting a value is not useful.\n\t* simplify-rtx.c (simplify_ternary_operation): Simplify vec_merge\n\tacross a vec_duplicate and a paradoxical subreg forming a vector\n\tmode to a vec_concat.\n\ngcc/testsuite/\n\n2018-01-08  Vidya Praveen  <vidyapraveen@arm.com>\n\n\tPR target/83663 - Revert r255946\n\t* gcc.target/aarch64/vect-slp-dup.c: New.\n\nFrom-SVN: r256346", "tree": {"sha": "d20e0b074d60ee4eba89a6fd74157717b7cbe59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d20e0b074d60ee4eba89a6fd74157717b7cbe59e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/comments", "author": {"login": "vparm", "id": 63807973, "node_id": "MDQ6VXNlcjYzODA3OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/63807973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vparm", "html_url": "https://github.com/vparm", "followers_url": "https://api.github.com/users/vparm/followers", "following_url": "https://api.github.com/users/vparm/following{/other_user}", "gists_url": "https://api.github.com/users/vparm/gists{/gist_id}", "starred_url": "https://api.github.com/users/vparm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vparm/subscriptions", "organizations_url": "https://api.github.com/users/vparm/orgs", "repos_url": "https://api.github.com/users/vparm/repos", "events_url": "https://api.github.com/users/vparm/events{/privacy}", "received_events_url": "https://api.github.com/users/vparm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a00a42220eca0305312b842ded274fd0aa23383d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00a42220eca0305312b842ded274fd0aa23383d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00a42220eca0305312b842ded274fd0aa23383d"}], "stats": {"total": 133, "additions": 17, "deletions": 116}, "files": [{"sha": "27292bb449e8f1c606b023bfa311a01d177e7d18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "patch": "@@ -1,3 +1,12 @@\n+2018-01-08  Vidya Praveen  <vidyapraveen@arm.com>\n+\n+\tPR target/83663 - Revert r255946\n+\t* config/aarch64/aarch64.c (aarch64_expand_vector_init): Modify code\n+\tgeneration for cases where splatting a value is not useful.\n+\t* simplify-rtx.c (simplify_ternary_operation): Simplify vec_merge\n+\tacross a vec_duplicate and a paradoxical subreg forming a vector\n+\tmode to a vec_concat.\n+\n 2018-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/t-aprofile (MULTILIB_MATCHES): Add mapping rules for"}, {"sha": "03a92b6d695b056fa2ccb575b5bc49b23a7b0000", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "patch": "@@ -12129,51 +12129,9 @@ aarch64_expand_vector_init (rtx target, rtx vals)\n \t    maxv = matches[i][1];\n \t  }\n \n-      /* Create a duplicate of the most common element, unless all elements\n-\t are equally useless to us, in which case just immediately set the\n-\t vector register using the first element.  */\n-\n-      if (maxv == 1)\n-\t{\n-\t  /* For vectors of two 64-bit elements, we can do even better.  */\n-\t  if (n_elts == 2\n-\t      && (inner_mode == E_DImode\n-\t\t  || inner_mode == E_DFmode))\n-\n-\t    {\n-\t      rtx x0 = XVECEXP (vals, 0, 0);\n-\t      rtx x1 = XVECEXP (vals, 0, 1);\n-\t      /* Combine can pick up this case, but handling it directly\n-\t\t here leaves clearer RTL.\n-\n-\t\t This is load_pair_lanes<mode>, and also gives us a clean-up\n-\t\t for store_pair_lanes<mode>.  */\n-\t      if (memory_operand (x0, inner_mode)\n-\t\t  && memory_operand (x1, inner_mode)\n-\t\t  && !STRICT_ALIGNMENT\n-\t\t  && rtx_equal_p (XEXP (x1, 0),\n-\t\t\t\t  plus_constant (Pmode,\n-\t\t\t\t\t\t XEXP (x0, 0),\n-\t\t\t\t\t\t GET_MODE_SIZE (inner_mode))))\n-\t\t{\n-\t\t  rtx t;\n-\t\t  if (inner_mode == DFmode)\n-\t\t    t = gen_load_pair_lanesdf (target, x0, x1);\n-\t\t  else\n-\t\t    t = gen_load_pair_lanesdi (target, x0, x1);\n-\t\t  emit_insn (t);\n-\t\t  return;\n-\t\t}\n-\t    }\n-\t  rtx x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n-\t  aarch64_emit_move (target, lowpart_subreg (mode, x, inner_mode));\n-\t  maxelement = 0;\n-\t}\n-      else\n-\t{\n-\t  rtx x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, maxelement));\n-\t  aarch64_emit_move (target, gen_vec_duplicate (mode, x));\n-\t}\n+      /* Create a duplicate of the most common element.  */\n+      rtx x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, maxelement));\n+      aarch64_emit_move (target, gen_vec_duplicate (mode, x));\n \n       /* Insert the rest.  */\n       for (int i = 0; i < n_elts; i++)"}, {"sha": "b052fbbe94952d59739961043c34c2fa1ee82b18", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "patch": "@@ -5888,57 +5888,6 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \t\treturn simplify_gen_binary (VEC_CONCAT, mode, newop0, newop1);\n \t    }\n \n-\t  /* Replace:\n-\n-\t      (vec_merge:outer (vec_duplicate:outer x:inner)\n-\t\t\t       (subreg:outer y:inner 0)\n-\t\t\t       (const_int N))\n-\n-\t     with (vec_concat:outer x:inner y:inner) if N == 1,\n-\t     or (vec_concat:outer y:inner x:inner) if N == 2.\n-\t     We assume that degenrate cases (N == 0 or N == 3), which\n-\t     represent taking all elements from either input, are handled\n-\t     elsewhere.\n-\n-\t     Implicitly, this means we have a paradoxical subreg, but such\n-\t     a check is cheap, so make it anyway.\n-\n-\t     Only applies for vectors of two elements.  */\n-\n-\t  if ((GET_CODE (op0) == VEC_DUPLICATE\n-\t       || GET_CODE (op1) == VEC_DUPLICATE)\n-\t      && GET_MODE (op0) == GET_MODE (op1)\n-\t      && known_eq (GET_MODE_NUNITS (GET_MODE (op0)), 2)\n-\t      && known_eq (GET_MODE_NUNITS (GET_MODE (op1)), 2)\n-\t      && IN_RANGE (sel, 1, 2))\n-\t    {\n-\t      rtx newop0 = op0, newop1 = op1;\n-\n-\t      /* Canonicalize locally such that the VEC_DUPLICATE is always\n-\t\t the first operand.  */\n-\t      if (GET_CODE (newop1) == VEC_DUPLICATE)\n-\t\t{\n-\t\t  std::swap (newop0, newop1);\n-\t\t  /* If we swap the operand order, we also need to swap\n-\t\t     the selector mask.  */\n-\t\t  sel = sel == 1 ? 2 : 1;\n-\t\t}\n-\n-\t      if (GET_CODE (newop1) == SUBREG\n-\t\t  && paradoxical_subreg_p (newop1)\n-\t\t  && subreg_lowpart_p (newop1)\n-\t\t  && GET_MODE (SUBREG_REG (newop1))\n-\t\t      == GET_MODE (XEXP (newop0, 0)))\n-\t\t{\n-\t\t  newop0 = XEXP (newop0, 0);\n-\t\t  newop1 = SUBREG_REG (newop1);\n-\t\t  if (sel == 2)\n-\t\t    std::swap (newop0, newop1);\n-\t\t  return simplify_gen_binary (VEC_CONCAT, mode,\n-\t\t\t\t\t      newop0, newop1);\n-\t\t}\n-\t    }\n-\n \t  /* Replace (vec_merge (vec_duplicate x) (vec_duplicate y)\n \t\t\t\t (const_int n))\n \t     with (vec_concat x y) or (vec_concat y x) depending on value"}, {"sha": "5c1387306932b0823ae538bc287d09d3b1c81d88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8", "patch": "@@ -1,3 +1,8 @@\n+2018-01-08  Vidya Praveen <vidyapraveen@arm.com>\n+\n+\tPR target/83663 - Revert r255946\n+\t* gcc.target/aarch64/vect-slp-dup.c: New.\n+\n 2018-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/multilib.exp: Add fp16, dotprod and armv8.3-a"}, {"sha": "0541e480d1f8561dbd9b2a56926c8df60d667a54", "filename": "gcc/testsuite/gcc.target/aarch64/vect-slp-dup.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00a42220eca0305312b842ded274fd0aa23383d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-slp-dup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00a42220eca0305312b842ded274fd0aa23383d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-slp-dup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-slp-dup.c?ref=a00a42220eca0305312b842ded274fd0aa23383d", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do compile } */\n-\n-/* { dg-options \"-O3 -ftree-vectorize -fno-vect-cost-model\" } */\n-\n-void bar (double);\n-\n-void\n-foo (double *restrict in, double *restrict in2,\n-     double *restrict out1, double *restrict out2)\n-{\n-  for (int i = 0; i < 1024; i++)\n-    {\n-      out1[i] = in[i] + 2.0 * in[i+128];\n-      out1[i+1] = in[i+1] + 2.0 * in2[i];\n-      bar (in[i]);\n-    }\n-}\n-\n-/* { dg-final { scan-assembler-not \"dup\\tv\\[0-9\\]+.2d, v\\[0-9\\]+\" } } */\n-"}]}