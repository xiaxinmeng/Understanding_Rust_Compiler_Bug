{"sha": "bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlM2IxYmZkYzNkYWQ3YTIyOGFmNzVjZmE1YWZjN2UwZDU3YmE2NA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-28T08:44:08Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-28T08:44:08Z"}, "message": "re PR target/49868 (Implement named address space to place/access data in flash memory)\n\n\tPR target/49868\n\tPR target/52261\n\t* doc/extend.texi (AVR Named Address Spaces): No more try to fix\n\taddress spaces located outside of device flash.\n\t* config/avr/avr.h (base_arch_s): Remove field n_segments.\n\t(mcu_type_s): Add field n_flash.\n\t* config/avr/avr-devices.c (avr_arch_types): Remove .n_segments.\n\tSet .have_elpm and .have_elpmx to 1 for avrxmega4 and avrxmega5.\n\t(AVR_MCU): Add N_FLASH argument.\n\t* config/avr/avr-mcus.def (AVR_MCU): Add initializer for .n_flash.\n\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Only define built-in\n\tmacro __FLASH<n> if that address space makes sense for the device.\n\t* config/avr/avr.c (avr_out_lpm): Don't try to fix address spaces\n\toutside of target flash.\n\t(avr_asm_named_section): Ditto.\n\t(avr_asm_select_section): Ditto.\n\t(avr_addr_space_convert): Ditto.\n\t(avr_emit_movmemhi): Ditto.\n\t(avr_nonconst_pointer_addrspace, avr_pgm_check_var_decl): Error if\n\taddress space is outside of device flash.\n\t(avr_insert_attributes): Ditto.\n\t(avr_xload_libgcc_p): Use avr_current_device->n_flash instead of\n\tavr_current_arch->n_segments.\n\nFrom-SVN: r184614", "tree": {"sha": "4128030d1d70a9e062d6448521aacef17f60225e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4128030d1d70a9e062d6448521aacef17f60225e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5250783d82bea40b075a7baea87212ae52f62bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5250783d82bea40b075a7baea87212ae52f62bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5250783d82bea40b075a7baea87212ae52f62bfe"}], "stats": {"total": 555, "additions": 303, "deletions": 252}, "files": [{"sha": "3adb7c9579171655006203822470d462dfddc572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -1,3 +1,30 @@\n+2012-02-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49868\n+\tPR target/52261\n+\t* doc/extend.texi (AVR Named Address Spaces): No more try to fix\n+\taddress spaces located outside of device flash.\n+\n+\t* config/avr/avr.h (base_arch_s): Remove field n_segments.\n+\t(mcu_type_s): Add field n_flash.\n+\t* config/avr/avr-devices.c (avr_arch_types): Remove .n_segments.\n+\tSet .have_elpm and .have_elpmx to 1 for avrxmega4 and avrxmega5.\n+\t(AVR_MCU): Add N_FLASH argument.\n+\t* config/avr/avr-mcus.def (AVR_MCU): Add initializer for .n_flash.\n+\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Only define built-in\n+\tmacro __FLASH<n> if that address space makes sense for the device.\n+\t* config/avr/avr.c (avr_out_lpm): Don't try to fix address spaces\n+\toutside of target flash.\n+\t(avr_asm_named_section): Ditto.\n+\t(avr_asm_select_section): Ditto.\n+\t(avr_addr_space_convert): Ditto.\n+\t(avr_emit_movmemhi): Ditto.\n+\t(avr_nonconst_pointer_addrspace, avr_pgm_check_var_decl): Error if\n+\taddress space is outside of device flash.\n+\t(avr_insert_attributes): Ditto.\n+\t(avr_xload_libgcc_p): Use avr_current_device->n_flash instead of\n+\tavr_current_arch->n_segments.\n+\n 2012-02-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/52352"}, {"sha": "64f5f801626c6ed064af81f3a8c4363f9bc0ec11", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -143,7 +143,11 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n       int i;\n       \n       for (i = 0; avr_addrspace[i].name; i++)\n-        if (!ADDR_SPACE_GENERIC_P (i))\n+        if (!ADDR_SPACE_GENERIC_P (i)\n+            /* Only supply __FLASH<n> macro if the address space is reasonable\n+               for this target.  The address space qualifier itself is still\n+               supported, but using it will throw an error.  */\n+            && avr_addrspace[i].segment < avr_current_device->n_flash)\n           {\n             const char *name = avr_addrspace[i].name;\n             char *Name = (char*) alloca (1 + strlen (name));"}, {"sha": "4f8696b8f7efd05f7b2d688ac279add84e377b1d", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -30,34 +30,34 @@ const struct base_arch_s\n avr_arch_types[] =\n {\n   /* unknown device specified */\n-  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, 32, 1, NULL,              \"avr2\"  },\n+  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, 32, NULL,              \"avr2\"  },\n   /*\n-    A  M  J  LM E  E  E  X  R   d S   S O  # F  A\n-    S  U  M  PO L  L  I  M  A   a t   F ff 6 l  r\n-    M  L  P  MV P  P  J  E  M   t a   R s  4 a  c \n-             XW M  M  M  G  P   a r     e    s  h\n-                   X  P  A  D     t     t  k h  ID   */\n-  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"1\",   \"avr1\"  },\n-  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"2\",   \"avr2\"  },\n-  { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"25\",  \"avr25\" },\n-  { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"3\",   \"avr3\"  },\n-  { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0x0060, 32, 2,  \"31\",  \"avr31\" },\n-  { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"35\",  \"avr35\" },\n-  { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"4\",   \"avr4\"  },\n-  { 0, 1, 1, 1, 0, 0, 0, 0, 0, 0x0060, 32, 1,  \"5\",   \"avr5\"  },\n-  { 0, 1, 1, 1, 1, 1, 0, 0, 0, 0x0060, 32, 2,  \"51\",  \"avr51\" },\n-  { 0, 1, 1, 1, 1, 1, 1, 0, 0, 0x0060, 32, 4,  \"6\",   \"avr6\"  },\n+    A  M  J  LM E  E  E  X  R   d S   S O   A\n+    S  U  M  PO L  L  I  M  A   a t   F ff  r\n+    M  L  P  MV P  P  J  E  M   t a   R s   c \n+             XW M  M  M  G  P   a r     e   h\n+                   X  P  A  D     t     t   ID   */\n+  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, 32, \"1\",   \"avr1\"  },\n+  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, 32, \"2\",   \"avr2\"  },\n+  { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x0060, 32, \"25\",  \"avr25\" },\n+  { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0x0060, 32, \"3\",   \"avr3\"  },\n+  { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0x0060, 32, \"31\",  \"avr31\" },\n+  { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0x0060, 32, \"35\",  \"avr35\" },\n+  { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0x0060, 32, \"4\",   \"avr4\"  },\n+  { 0, 1, 1, 1, 0, 0, 0, 0, 0, 0x0060, 32, \"5\",   \"avr5\"  },\n+  { 0, 1, 1, 1, 1, 1, 0, 0, 0, 0x0060, 32, \"51\",  \"avr51\" },\n+  { 0, 1, 1, 1, 1, 1, 1, 0, 0, 0x0060, 32, \"6\",   \"avr6\"  },\n \n-  { 0, 1, 1, 1, 0, 0, 0, 1, 0, 0x2000,  0, 1,  \"102\", \"avrxmega2\" },\n-  { 0, 1, 1, 1, 0, 0, 0, 1, 0, 0x2000,  0, 1,  \"104\", \"avrxmega4\" }, /* Same */\n-  { 0, 1, 1, 1, 0, 0, 0, 1, 1, 0x2000,  0, 1,  \"105\", \"avrxmega5\" },\n-  { 0, 1, 1, 1, 1, 1, 1, 1, 0, 0x2000,  0, 4,  \"106\", \"avrxmega6\" },\n-  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0x2000,  0, 4,  \"107\", \"avrxmega7\" }\n+  { 0, 1, 1, 1, 0, 0, 0, 1, 0, 0x2000,  0, \"102\", \"avrxmega2\" },\n+  { 0, 1, 1, 1, 1, 1, 0, 1, 0, 0x2000,  0, \"104\", \"avrxmega4\" },\n+  { 0, 1, 1, 1, 1, 1, 0, 1, 1, 0x2000,  0, \"105\", \"avrxmega5\" },\n+  { 0, 1, 1, 1, 1, 1, 1, 1, 0, 0x2000,  0, \"106\", \"avrxmega6\" },\n+  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0x2000,  0, \"107\", \"avrxmega7\" }\n };\n \n const struct mcu_type_s avr_mcu_types[] = {\n-#define AVR_MCU(NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, LIBRARY_NAME) \\\n-  { NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, LIBRARY_NAME },\n+#define AVR_MCU(NAME,ARCH,MACRO,SHORT_SP,ERRATA_SKIP,DATA_SEC,N_FLASH,LIB_NAME)\\\n+  { NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, N_FLASH, LIB_NAME },\n #include \"avr-mcus.def\"\n #undef AVR_MCU\n     /* End of list.  */"}, {"sha": "462d6a26f7c0f701281aaef86a7a6987e6e0946e", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 196, "deletions": 196, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -26,215 +26,215 @@\n \n    Before including this file, define a macro:\n \n-   AVR_MCU (NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, LIBRARY_NAME)\n+   AVR_MCU (NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, N_FLASH, LIBRARY_NAME)\n \n    where the arguments are the fields of struct mcu_type_s.  */\n \n /* \"avr2\" must be first for the \"0\" default to work as intended.  */\n \n /* Classic, <= 8K.  */\n-AVR_MCU (\"avr2\",                 ARCH_AVR2, NULL,                        0, 1, 0x0060, \"s8515\")\n-AVR_MCU (\"at90s2313\",            ARCH_AVR2, \"__AVR_AT90S2313__\",         1, 0, 0x0060, \"s2313\")\n-AVR_MCU (\"at90s2323\",            ARCH_AVR2, \"__AVR_AT90S2323__\",         1, 0, 0x0060, \"s2323\")\n-AVR_MCU (\"at90s2333\",            ARCH_AVR2, \"__AVR_AT90S2333__\",         1, 0, 0x0060, \"s2333\")\n-AVR_MCU (\"at90s2343\",            ARCH_AVR2, \"__AVR_AT90S2343__\",         1, 0, 0x0060, \"s2343\")\n-AVR_MCU (\"attiny22\",             ARCH_AVR2, \"__AVR_ATtiny22__\",          1, 0, 0x0060, \"tn22\")\n-AVR_MCU (\"attiny26\",             ARCH_AVR2, \"__AVR_ATtiny26__\",          1, 0, 0x0060, \"tn26\")\n-AVR_MCU (\"at90s4414\",            ARCH_AVR2, \"__AVR_AT90S4414__\",         0, 0, 0x0060, \"s4414\")\n-AVR_MCU (\"at90s4433\",            ARCH_AVR2, \"__AVR_AT90S4433__\",         1, 0, 0x0060, \"s4433\")\n-AVR_MCU (\"at90s4434\",            ARCH_AVR2, \"__AVR_AT90S4434__\",         0, 0, 0x0060, \"s4434\")\n-AVR_MCU (\"at90s8515\",            ARCH_AVR2, \"__AVR_AT90S8515__\",         0, 1, 0x0060, \"s8515\")\n-AVR_MCU (\"at90c8534\",            ARCH_AVR2, \"__AVR_AT90C8534__\",         0, 0, 0x0060, \"c8534\")\n-AVR_MCU (\"at90s8535\",            ARCH_AVR2, \"__AVR_AT90S8535__\",         0, 0, 0x0060, \"s8535\")\n+AVR_MCU (\"avr2\",                 ARCH_AVR2, NULL,                        0, 1, 0x0060, 6, \"s8515\")\n+AVR_MCU (\"at90s2313\",            ARCH_AVR2, \"__AVR_AT90S2313__\",         1, 0, 0x0060, 1, \"s2313\")\n+AVR_MCU (\"at90s2323\",            ARCH_AVR2, \"__AVR_AT90S2323__\",         1, 0, 0x0060, 1, \"s2323\")\n+AVR_MCU (\"at90s2333\",            ARCH_AVR2, \"__AVR_AT90S2333__\",         1, 0, 0x0060, 1, \"s2333\")\n+AVR_MCU (\"at90s2343\",            ARCH_AVR2, \"__AVR_AT90S2343__\",         1, 0, 0x0060, 1, \"s2343\")\n+AVR_MCU (\"attiny22\",             ARCH_AVR2, \"__AVR_ATtiny22__\",          1, 0, 0x0060, 1, \"tn22\")\n+AVR_MCU (\"attiny26\",             ARCH_AVR2, \"__AVR_ATtiny26__\",          1, 0, 0x0060, 1, \"tn26\")\n+AVR_MCU (\"at90s4414\",            ARCH_AVR2, \"__AVR_AT90S4414__\",         0, 0, 0x0060, 1, \"s4414\")\n+AVR_MCU (\"at90s4433\",            ARCH_AVR2, \"__AVR_AT90S4433__\",         1, 0, 0x0060, 1, \"s4433\")\n+AVR_MCU (\"at90s4434\",            ARCH_AVR2, \"__AVR_AT90S4434__\",         0, 0, 0x0060, 1, \"s4434\")\n+AVR_MCU (\"at90s8515\",            ARCH_AVR2, \"__AVR_AT90S8515__\",         0, 1, 0x0060, 1, \"s8515\")\n+AVR_MCU (\"at90c8534\",            ARCH_AVR2, \"__AVR_AT90C8534__\",         0, 0, 0x0060, 1, \"c8534\")\n+AVR_MCU (\"at90s8535\",            ARCH_AVR2, \"__AVR_AT90S8535__\",         0, 0, 0x0060, 1, \"s8535\")\n /* Classic + MOVW, <= 8K.  */\n-AVR_MCU (\"avr25\",                ARCH_AVR25, NULL,                       0, 0, 0x0060, \"tn85\")\n-AVR_MCU (\"ata6289\",              ARCH_AVR25, \"__AVR_ATA6289__\",          0, 0, 0x0100, \"a6289\")\n-AVR_MCU (\"attiny13\",             ARCH_AVR25, \"__AVR_ATtiny13__\",         1, 0, 0x0060, \"tn13\")\n-AVR_MCU (\"attiny13a\",            ARCH_AVR25, \"__AVR_ATtiny13A__\",        1, 0, 0x0060, \"tn13a\")\n-AVR_MCU (\"attiny2313\",           ARCH_AVR25, \"__AVR_ATtiny2313__\",       1, 0, 0x0060, \"tn2313\")\n-AVR_MCU (\"attiny2313a\",          ARCH_AVR25, \"__AVR_ATtiny2313A__\",      1, 0, 0x0060, \"tn2313a\")\n-AVR_MCU (\"attiny24\",             ARCH_AVR25, \"__AVR_ATtiny24__\",         1, 0, 0x0060, \"tn24\")\n-AVR_MCU (\"attiny24a\",            ARCH_AVR25, \"__AVR_ATtiny24A__\",        1, 0, 0x0060, \"tn24a\")\n-AVR_MCU (\"attiny4313\",           ARCH_AVR25, \"__AVR_ATtiny4313__\",       0, 0, 0x0060, \"tn4313\")\n-AVR_MCU (\"attiny44\",             ARCH_AVR25, \"__AVR_ATtiny44__\",         0, 0, 0x0060, \"tn44\")\n-AVR_MCU (\"attiny44a\",            ARCH_AVR25, \"__AVR_ATtiny44A__\",        0, 0, 0x0060, \"tn44a\")\n-AVR_MCU (\"attiny84\",             ARCH_AVR25, \"__AVR_ATtiny84__\",         0, 0, 0x0060, \"tn84\")\n-AVR_MCU (\"attiny84a\",            ARCH_AVR25, \"__AVR_ATtiny84A__\",        0, 0, 0x0060, \"tn84\")\n-AVR_MCU (\"attiny25\",             ARCH_AVR25, \"__AVR_ATtiny25__\",         1, 0, 0x0060, \"tn25\")\n-AVR_MCU (\"attiny45\",             ARCH_AVR25, \"__AVR_ATtiny45__\",         0, 0, 0x0060, \"tn45\")\n-AVR_MCU (\"attiny85\",             ARCH_AVR25, \"__AVR_ATtiny85__\",         0, 0, 0x0060, \"tn85\")\n-AVR_MCU (\"attiny261\",            ARCH_AVR25, \"__AVR_ATtiny261__\",        1, 0, 0x0060, \"tn261\")\n-AVR_MCU (\"attiny261a\",           ARCH_AVR25, \"__AVR_ATtiny261A__\",       1, 0, 0x0060, \"tn261a\")\n-AVR_MCU (\"attiny461\",            ARCH_AVR25, \"__AVR_ATtiny461__\",        0, 0, 0x0060, \"tn461\")\n-AVR_MCU (\"attiny461a\",           ARCH_AVR25, \"__AVR_ATtiny461A__\",       0, 0, 0x0060, \"tn461a\")\n-AVR_MCU (\"attiny861\",            ARCH_AVR25, \"__AVR_ATtiny861__\",        0, 0, 0x0060, \"tn861\")\n-AVR_MCU (\"attiny861a\",           ARCH_AVR25, \"__AVR_ATtiny861A__\",       0, 0, 0x0060, \"tn861a\")\n-AVR_MCU (\"attiny43u\",            ARCH_AVR25, \"__AVR_ATtiny43U__\",        0, 0, 0x0060, \"tn43u\")\n-AVR_MCU (\"attiny87\",             ARCH_AVR25, \"__AVR_ATtiny87__\",         0, 0, 0x0100, \"tn87\")\n-AVR_MCU (\"attiny48\",             ARCH_AVR25, \"__AVR_ATtiny48__\",         0, 0, 0x0100, \"tn48\")\n-AVR_MCU (\"attiny88\",             ARCH_AVR25, \"__AVR_ATtiny88__\",         0, 0, 0x0100, \"tn88\")\n-AVR_MCU (\"at86rf401\",            ARCH_AVR25, \"__AVR_AT86RF401__\",        0, 0, 0x0060, \"86401\")\n+AVR_MCU (\"avr25\",                ARCH_AVR25, NULL,                       0, 0, 0x0060, 1, \"tn85\")\n+AVR_MCU (\"ata6289\",              ARCH_AVR25, \"__AVR_ATA6289__\",          0, 0, 0x0100, 1, \"a6289\")\n+AVR_MCU (\"attiny13\",             ARCH_AVR25, \"__AVR_ATtiny13__\",         1, 0, 0x0060, 1, \"tn13\")\n+AVR_MCU (\"attiny13a\",            ARCH_AVR25, \"__AVR_ATtiny13A__\",        1, 0, 0x0060, 1, \"tn13a\")\n+AVR_MCU (\"attiny2313\",           ARCH_AVR25, \"__AVR_ATtiny2313__\",       1, 0, 0x0060, 1, \"tn2313\")\n+AVR_MCU (\"attiny2313a\",          ARCH_AVR25, \"__AVR_ATtiny2313A__\",      1, 0, 0x0060, 1, \"tn2313a\")\n+AVR_MCU (\"attiny24\",             ARCH_AVR25, \"__AVR_ATtiny24__\",         1, 0, 0x0060, 1, \"tn24\")\n+AVR_MCU (\"attiny24a\",            ARCH_AVR25, \"__AVR_ATtiny24A__\",        1, 0, 0x0060, 1, \"tn24a\")\n+AVR_MCU (\"attiny4313\",           ARCH_AVR25, \"__AVR_ATtiny4313__\",       0, 0, 0x0060, 1, \"tn4313\")\n+AVR_MCU (\"attiny44\",             ARCH_AVR25, \"__AVR_ATtiny44__\",         0, 0, 0x0060, 1, \"tn44\")\n+AVR_MCU (\"attiny44a\",            ARCH_AVR25, \"__AVR_ATtiny44A__\",        0, 0, 0x0060, 1, \"tn44a\")\n+AVR_MCU (\"attiny84\",             ARCH_AVR25, \"__AVR_ATtiny84__\",         0, 0, 0x0060, 1, \"tn84\")\n+AVR_MCU (\"attiny84a\",            ARCH_AVR25, \"__AVR_ATtiny84A__\",        0, 0, 0x0060, 1, \"tn84\")\n+AVR_MCU (\"attiny25\",             ARCH_AVR25, \"__AVR_ATtiny25__\",         1, 0, 0x0060, 1, \"tn25\")\n+AVR_MCU (\"attiny45\",             ARCH_AVR25, \"__AVR_ATtiny45__\",         0, 0, 0x0060, 1, \"tn45\")\n+AVR_MCU (\"attiny85\",             ARCH_AVR25, \"__AVR_ATtiny85__\",         0, 0, 0x0060, 1, \"tn85\")\n+AVR_MCU (\"attiny261\",            ARCH_AVR25, \"__AVR_ATtiny261__\",        1, 0, 0x0060, 1, \"tn261\")\n+AVR_MCU (\"attiny261a\",           ARCH_AVR25, \"__AVR_ATtiny261A__\",       1, 0, 0x0060, 1, \"tn261a\")\n+AVR_MCU (\"attiny461\",            ARCH_AVR25, \"__AVR_ATtiny461__\",        0, 0, 0x0060, 1, \"tn461\")\n+AVR_MCU (\"attiny461a\",           ARCH_AVR25, \"__AVR_ATtiny461A__\",       0, 0, 0x0060, 1, \"tn461a\")\n+AVR_MCU (\"attiny861\",            ARCH_AVR25, \"__AVR_ATtiny861__\",        0, 0, 0x0060, 1, \"tn861\")\n+AVR_MCU (\"attiny861a\",           ARCH_AVR25, \"__AVR_ATtiny861A__\",       0, 0, 0x0060, 1, \"tn861a\")\n+AVR_MCU (\"attiny43u\",            ARCH_AVR25, \"__AVR_ATtiny43U__\",        0, 0, 0x0060, 1, \"tn43u\")\n+AVR_MCU (\"attiny87\",             ARCH_AVR25, \"__AVR_ATtiny87__\",         0, 0, 0x0100, 1, \"tn87\")\n+AVR_MCU (\"attiny48\",             ARCH_AVR25, \"__AVR_ATtiny48__\",         0, 0, 0x0100, 1, \"tn48\")\n+AVR_MCU (\"attiny88\",             ARCH_AVR25, \"__AVR_ATtiny88__\",         0, 0, 0x0100, 1, \"tn88\")\n+AVR_MCU (\"at86rf401\",            ARCH_AVR25, \"__AVR_AT86RF401__\",        0, 0, 0x0060, 1, \"86401\")\n /* Classic, > 8K, <= 64K.  */\n-AVR_MCU (\"avr3\",                 ARCH_AVR3, NULL,                        0, 0, 0x0060, \"43355\")\n-AVR_MCU (\"at43usb355\",           ARCH_AVR3, \"__AVR_AT43USB355__\",        0, 0, 0x0060, \"43355\")\n-AVR_MCU (\"at76c711\",             ARCH_AVR3, \"__AVR_AT76C711__\",          0, 0, 0x0060, \"76711\")\n+AVR_MCU (\"avr3\",                 ARCH_AVR3, NULL,                        0, 0, 0x0060, 1, \"43355\")\n+AVR_MCU (\"at43usb355\",           ARCH_AVR3, \"__AVR_AT43USB355__\",        0, 0, 0x0060, 1, \"43355\")\n+AVR_MCU (\"at76c711\",             ARCH_AVR3, \"__AVR_AT76C711__\",          0, 0, 0x0060, 1, \"76711\")\n /* Classic, == 128K.  */\n-AVR_MCU (\"avr31\",                ARCH_AVR31, NULL,                       0, 1, 0x0060, \"m103\")\n-AVR_MCU (\"atmega103\",            ARCH_AVR31, \"__AVR_ATmega103__\",        0, 1, 0x0060, \"m103\")\n-AVR_MCU (\"at43usb320\",           ARCH_AVR31, \"__AVR_AT43USB320__\",       0, 0, 0x0060, \"43320\")\n+AVR_MCU (\"avr31\",                ARCH_AVR31, NULL,                       0, 1, 0x0060, 2, \"m103\")\n+AVR_MCU (\"atmega103\",            ARCH_AVR31, \"__AVR_ATmega103__\",        0, 1, 0x0060, 2, \"m103\")\n+AVR_MCU (\"at43usb320\",           ARCH_AVR31, \"__AVR_AT43USB320__\",       0, 0, 0x0060, 2, \"43320\")\n /* Classic + MOVW + JMP/CALL.  */\n-AVR_MCU (\"avr35\",                ARCH_AVR35, NULL,                       0, 0, 0x0100, \"usb162\")\n-AVR_MCU (\"at90usb82\",            ARCH_AVR35, \"__AVR_AT90USB82__\",        0, 0, 0x0100, \"usb82\")\n-AVR_MCU (\"at90usb162\",           ARCH_AVR35, \"__AVR_AT90USB162__\",       0, 0, 0x0100, \"usb162\")\n-AVR_MCU (\"atmega8u2\",            ARCH_AVR35, \"__AVR_ATmega8U2__\",        0, 0, 0x0100, \"m8u2\")\n-AVR_MCU (\"atmega16u2\",           ARCH_AVR35, \"__AVR_ATmega16U2__\",       0, 0, 0x0100, \"m16u2\")\n-AVR_MCU (\"atmega32u2\",           ARCH_AVR35, \"__AVR_ATmega32U2__\",       0, 0, 0x0100, \"m32u2\")\n-AVR_MCU (\"attiny167\",            ARCH_AVR35, \"__AVR_ATtiny167__\",        0, 0, 0x0100, \"tn167\")\n+AVR_MCU (\"avr35\",                ARCH_AVR35, NULL,                       0, 0, 0x0100, 1, \"usb162\")\n+AVR_MCU (\"at90usb82\",            ARCH_AVR35, \"__AVR_AT90USB82__\",        0, 0, 0x0100, 1, \"usb82\")\n+AVR_MCU (\"at90usb162\",           ARCH_AVR35, \"__AVR_AT90USB162__\",       0, 0, 0x0100, 1, \"usb162\")\n+AVR_MCU (\"atmega8u2\",            ARCH_AVR35, \"__AVR_ATmega8U2__\",        0, 0, 0x0100, 1, \"m8u2\")\n+AVR_MCU (\"atmega16u2\",           ARCH_AVR35, \"__AVR_ATmega16U2__\",       0, 0, 0x0100, 1, \"m16u2\")\n+AVR_MCU (\"atmega32u2\",           ARCH_AVR35, \"__AVR_ATmega32U2__\",       0, 0, 0x0100, 1, \"m32u2\")\n+AVR_MCU (\"attiny167\",            ARCH_AVR35, \"__AVR_ATtiny167__\",        0, 0, 0x0100, 1, \"tn167\")\n /* Enhanced, <= 8K.  */\n-AVR_MCU (\"avr4\",                 ARCH_AVR4, NULL,                        0, 0, 0x0060, \"m8\")\n-AVR_MCU (\"atmega8\",              ARCH_AVR4, \"__AVR_ATmega8__\",           0, 0, 0x0060, \"m8\")\n-AVR_MCU (\"atmega48\",             ARCH_AVR4, \"__AVR_ATmega48__\",          0, 0, 0x0100, \"m48\")\n-AVR_MCU (\"atmega48a\",            ARCH_AVR4, \"__AVR_ATmega48A__\",         0, 0, 0x0100, \"m48a\")\n-AVR_MCU (\"atmega48p\",            ARCH_AVR4, \"__AVR_ATmega48P__\",         0, 0, 0x0100, \"m48p\")\n-AVR_MCU (\"atmega88\",             ARCH_AVR4, \"__AVR_ATmega88__\",          0, 0, 0x0100, \"m88\")\n-AVR_MCU (\"atmega88a\",            ARCH_AVR4, \"__AVR_ATmega88A__\",         0, 0, 0x0100, \"m88a\")\n-AVR_MCU (\"atmega88p\",            ARCH_AVR4, \"__AVR_ATmega88P__\",         0, 0, 0x0100, \"m88p\")\n-AVR_MCU (\"atmega88pa\",           ARCH_AVR4, \"__AVR_ATmega88PA__\",        0, 0, 0x0100, \"m88pa\")\n-AVR_MCU (\"atmega8515\",           ARCH_AVR4, \"__AVR_ATmega8515__\",        0, 0, 0x0060, \"m8515\")\n-AVR_MCU (\"atmega8535\",           ARCH_AVR4, \"__AVR_ATmega8535__\",        0, 0, 0x0060, \"m8535\")\n-AVR_MCU (\"atmega8hva\",           ARCH_AVR4, \"__AVR_ATmega8HVA__\",        0, 0, 0x0100, \"m8hva\")\n-AVR_MCU (\"at90pwm1\",             ARCH_AVR4, \"__AVR_AT90PWM1__\",          0, 0, 0x0100, \"90pwm1\")\n-AVR_MCU (\"at90pwm2\",             ARCH_AVR4, \"__AVR_AT90PWM2__\",          0, 0, 0x0100, \"90pwm2\")\n-AVR_MCU (\"at90pwm2b\",            ARCH_AVR4, \"__AVR_AT90PWM2B__\",         0, 0, 0x0100, \"90pwm2b\")\n-AVR_MCU (\"at90pwm3\",             ARCH_AVR4, \"__AVR_AT90PWM3__\",          0, 0, 0x0100, \"90pwm3\")\n-AVR_MCU (\"at90pwm3b\",            ARCH_AVR4, \"__AVR_AT90PWM3B__\",         0, 0, 0x0100, \"90pwm3b\")\n-AVR_MCU (\"at90pwm81\",            ARCH_AVR4, \"__AVR_AT90PWM81__\",         0, 0, 0x0100, \"90pwm81\")\n+AVR_MCU (\"avr4\",                 ARCH_AVR4, NULL,                        0, 0, 0x0060, 1, \"m8\")\n+AVR_MCU (\"atmega8\",              ARCH_AVR4, \"__AVR_ATmega8__\",           0, 0, 0x0060, 1, \"m8\")\n+AVR_MCU (\"atmega48\",             ARCH_AVR4, \"__AVR_ATmega48__\",          0, 0, 0x0100, 1, \"m48\")\n+AVR_MCU (\"atmega48a\",            ARCH_AVR4, \"__AVR_ATmega48A__\",         0, 0, 0x0100, 1, \"m48a\")\n+AVR_MCU (\"atmega48p\",            ARCH_AVR4, \"__AVR_ATmega48P__\",         0, 0, 0x0100, 1, \"m48p\")\n+AVR_MCU (\"atmega88\",             ARCH_AVR4, \"__AVR_ATmega88__\",          0, 0, 0x0100, 1, \"m88\")\n+AVR_MCU (\"atmega88a\",            ARCH_AVR4, \"__AVR_ATmega88A__\",         0, 0, 0x0100, 1, \"m88a\")\n+AVR_MCU (\"atmega88p\",            ARCH_AVR4, \"__AVR_ATmega88P__\",         0, 0, 0x0100, 1, \"m88p\")\n+AVR_MCU (\"atmega88pa\",           ARCH_AVR4, \"__AVR_ATmega88PA__\",        0, 0, 0x0100, 1, \"m88pa\")\n+AVR_MCU (\"atmega8515\",           ARCH_AVR4, \"__AVR_ATmega8515__\",        0, 0, 0x0060, 1, \"m8515\")\n+AVR_MCU (\"atmega8535\",           ARCH_AVR4, \"__AVR_ATmega8535__\",        0, 0, 0x0060, 1, \"m8535\")\n+AVR_MCU (\"atmega8hva\",           ARCH_AVR4, \"__AVR_ATmega8HVA__\",        0, 0, 0x0100, 1, \"m8hva\")\n+AVR_MCU (\"at90pwm1\",             ARCH_AVR4, \"__AVR_AT90PWM1__\",          0, 0, 0x0100, 1, \"90pwm1\")\n+AVR_MCU (\"at90pwm2\",             ARCH_AVR4, \"__AVR_AT90PWM2__\",          0, 0, 0x0100, 1, \"90pwm2\")\n+AVR_MCU (\"at90pwm2b\",            ARCH_AVR4, \"__AVR_AT90PWM2B__\",         0, 0, 0x0100, 1, \"90pwm2b\")\n+AVR_MCU (\"at90pwm3\",             ARCH_AVR4, \"__AVR_AT90PWM3__\",          0, 0, 0x0100, 1, \"90pwm3\")\n+AVR_MCU (\"at90pwm3b\",            ARCH_AVR4, \"__AVR_AT90PWM3B__\",         0, 0, 0x0100, 1, \"90pwm3b\")\n+AVR_MCU (\"at90pwm81\",            ARCH_AVR4, \"__AVR_AT90PWM81__\",         0, 0, 0x0100, 1, \"90pwm81\")\n /* Enhanced, > 8K, <= 64K.  */\n-AVR_MCU (\"avr5\",                 ARCH_AVR5, NULL,                        0, 0, 0x0060, \"m16\")\n-AVR_MCU (\"atmega16\",             ARCH_AVR5, \"__AVR_ATmega16__\",          0, 0, 0x0060, \"m16\")\n-AVR_MCU (\"atmega16a\",            ARCH_AVR5, \"__AVR_ATmega16A__\",         0, 0, 0x0060, \"m16a\")\n-AVR_MCU (\"atmega161\",            ARCH_AVR5, \"__AVR_ATmega161__\",         0, 0, 0x0060, \"m161\")\n-AVR_MCU (\"atmega162\",            ARCH_AVR5, \"__AVR_ATmega162__\",         0, 0, 0x0100, \"m162\")\n-AVR_MCU (\"atmega163\",            ARCH_AVR5, \"__AVR_ATmega163__\",         0, 0, 0x0060, \"m163\")\n-AVR_MCU (\"atmega164a\",           ARCH_AVR5, \"__AVR_ATmega164A__\",        0, 0, 0x0100, \"m164a\")\n-AVR_MCU (\"atmega164p\",           ARCH_AVR5, \"__AVR_ATmega164P__\",        0, 0, 0x0100, \"m164p\")\n-AVR_MCU (\"atmega165\",            ARCH_AVR5, \"__AVR_ATmega165__\",         0, 0, 0x0100, \"m165\")\n-AVR_MCU (\"atmega165a\",           ARCH_AVR5, \"__AVR_ATmega165A__\",        0, 0, 0x0100, \"m165a\")\n-AVR_MCU (\"atmega165p\",           ARCH_AVR5, \"__AVR_ATmega165P__\",        0, 0, 0x0100, \"m165p\")\n-AVR_MCU (\"atmega168\",            ARCH_AVR5, \"__AVR_ATmega168__\",         0, 0, 0x0100, \"m168\")\n-AVR_MCU (\"atmega168a\",           ARCH_AVR5, \"__AVR_ATmega168A__\",        0, 0, 0x0100, \"m168a\")\n-AVR_MCU (\"atmega168p\",           ARCH_AVR5, \"__AVR_ATmega168P__\",        0, 0, 0x0100, \"m168p\")\n-AVR_MCU (\"atmega169\",            ARCH_AVR5, \"__AVR_ATmega169__\",         0, 0, 0x0100, \"m169\")\n-AVR_MCU (\"atmega169a\",           ARCH_AVR5, \"__AVR_ATmega169A__\",        0, 0, 0x0100, \"m169a\")\n-AVR_MCU (\"atmega169p\",           ARCH_AVR5, \"__AVR_ATmega169P__\",        0, 0, 0x0100, \"m169p\")\n-AVR_MCU (\"atmega169pa\",          ARCH_AVR5, \"__AVR_ATmega169PA__\",       0, 0, 0x0100, \"m169pa\")\n-AVR_MCU (\"atmega32\",             ARCH_AVR5, \"__AVR_ATmega32__\",          0, 0, 0x0060, \"m32\")\n-AVR_MCU (\"atmega323\",            ARCH_AVR5, \"__AVR_ATmega323__\",         0, 0, 0x0060, \"m323\")\n-AVR_MCU (\"atmega324a\",           ARCH_AVR5, \"__AVR_ATmega324A__\",        0, 0, 0x0100, \"m324a\")\n-AVR_MCU (\"atmega324p\",           ARCH_AVR5, \"__AVR_ATmega324P__\",        0, 0, 0x0100, \"m324p\")\n-AVR_MCU (\"atmega324pa\",          ARCH_AVR5, \"__AVR_ATmega324PA__\",       0, 0, 0x0100, \"m324pa\")\n-AVR_MCU (\"atmega325\",            ARCH_AVR5, \"__AVR_ATmega325__\",         0, 0, 0x0100, \"m325\")\n-AVR_MCU (\"atmega325a\",           ARCH_AVR5, \"__AVR_ATmega325A__\",        0, 0, 0x0100, \"m325a\")\n-AVR_MCU (\"atmega325p\",           ARCH_AVR5, \"__AVR_ATmega325P__\",        0, 0, 0x0100, \"m325p\")\n-AVR_MCU (\"atmega3250\",           ARCH_AVR5, \"__AVR_ATmega3250__\",        0, 0, 0x0100, \"m3250\")\n-AVR_MCU (\"atmega3250a\",          ARCH_AVR5, \"__AVR_ATmega3250A__\",       0, 0, 0x0100, \"m3250a\")\n-AVR_MCU (\"atmega3250p\",          ARCH_AVR5, \"__AVR_ATmega3250P__\",       0, 0, 0x0100, \"m3250p\")\n-AVR_MCU (\"atmega328\",            ARCH_AVR5, \"__AVR_ATmega328__\",         0, 0, 0x0100, \"m328\")\n-AVR_MCU (\"atmega328p\",           ARCH_AVR5, \"__AVR_ATmega328P__\",        0, 0, 0x0100, \"m328p\")\n-AVR_MCU (\"atmega329\",            ARCH_AVR5, \"__AVR_ATmega329__\",         0, 0, 0x0100, \"m329\")\n-AVR_MCU (\"atmega329a\",           ARCH_AVR5, \"__AVR_ATmega329A__\",        0, 0, 0x0100, \"m329a\")\n-AVR_MCU (\"atmega329p\",           ARCH_AVR5, \"__AVR_ATmega329P__\",        0, 0, 0x0100, \"m329p\")\n-AVR_MCU (\"atmega329pa\",          ARCH_AVR5, \"__AVR_ATmega329PA__\",       0, 0, 0x0100, \"m329pa\")\n-AVR_MCU (\"atmega3290\",           ARCH_AVR5, \"__AVR_ATmega3290__\",        0, 0, 0x0100, \"m3290\")\n-AVR_MCU (\"atmega3290a\",          ARCH_AVR5, \"__AVR_ATmega3290A__\",       0, 0, 0x0100, \"m3290a\")\n-AVR_MCU (\"atmega3290p\",          ARCH_AVR5, \"__AVR_ATmega3290P__\",       0, 0, 0x0100, \"m3290p\")\n-AVR_MCU (\"atmega406\",            ARCH_AVR5, \"__AVR_ATmega406__\",         0, 0, 0x0100, \"m406\")\n-AVR_MCU (\"atmega64\",             ARCH_AVR5, \"__AVR_ATmega64__\",          0, 0, 0x0100, \"m64\")\n-AVR_MCU (\"atmega640\",            ARCH_AVR5, \"__AVR_ATmega640__\",         0, 0, 0x0200, \"m640\")\n-AVR_MCU (\"atmega644\",            ARCH_AVR5, \"__AVR_ATmega644__\",         0, 0, 0x0100, \"m644\")\n-AVR_MCU (\"atmega644a\",           ARCH_AVR5, \"__AVR_ATmega644A__\",        0, 0, 0x0100, \"m644a\")\n-AVR_MCU (\"atmega644p\",           ARCH_AVR5, \"__AVR_ATmega644P__\",        0, 0, 0x0100, \"m644p\")\n-AVR_MCU (\"atmega644pa\",          ARCH_AVR5, \"__AVR_ATmega644PA__\",       0, 0, 0x0100, \"m644pa\")\n-AVR_MCU (\"atmega645\",            ARCH_AVR5, \"__AVR_ATmega645__\",         0, 0, 0x0100, \"m645\")\n-AVR_MCU (\"atmega645a\",           ARCH_AVR5, \"__AVR_ATmega645A__\",        0, 0, 0x0100, \"m645a\")\n-AVR_MCU (\"atmega645p\",           ARCH_AVR5, \"__AVR_ATmega645P__\",        0, 0, 0x0100, \"m645p\")\n-AVR_MCU (\"atmega6450\",           ARCH_AVR5, \"__AVR_ATmega6450__\",        0, 0, 0x0100, \"m6450\")\n-AVR_MCU (\"atmega6450a\",          ARCH_AVR5, \"__AVR_ATmega6450A__\",       0, 0, 0x0100, \"m6450a\")\n-AVR_MCU (\"atmega6450p\",          ARCH_AVR5, \"__AVR_ATmega6450P__\",       0, 0, 0x0100, \"m6450p\")\n-AVR_MCU (\"atmega649\",            ARCH_AVR5, \"__AVR_ATmega649__\",         0, 0, 0x0100, \"m649\")\n-AVR_MCU (\"atmega649a\",           ARCH_AVR5, \"__AVR_ATmega649A__\",        0, 0, 0x0100, \"m649a\")\n-AVR_MCU (\"atmega649p\",           ARCH_AVR5, \"__AVR_ATmega649P__\",        0, 0, 0x0100, \"m649p\")\n-AVR_MCU (\"atmega6490\",           ARCH_AVR5, \"__AVR_ATmega6490__\",        0, 0, 0x0100, \"m6490\")\n-AVR_MCU (\"atmega16hva\",          ARCH_AVR5, \"__AVR_ATmega16HVA__\",       0, 0, 0x0100, \"m16hva\")\n-AVR_MCU (\"atmega16hva2\",         ARCH_AVR5, \"__AVR_ATmega16HVA2__\",      0, 0, 0x0100, \"m16hva2\")\n-AVR_MCU (\"atmega16hvb\",          ARCH_AVR5, \"__AVR_ATmega16HVB__\",       0, 0, 0x0100, \"m16hvb\")\n-AVR_MCU (\"atmega32hvb\",          ARCH_AVR5, \"__AVR_ATmega32HVB__\",       0, 0, 0x0100, \"m32hvb\")\n-AVR_MCU (\"atmega64hve\",          ARCH_AVR5, \"__AVR_ATmega64HVE__\",       0, 0, 0x0100, \"m64hve\")\n-AVR_MCU (\"at90can32\",            ARCH_AVR5, \"__AVR_AT90CAN32__\",         0, 0, 0x0100, \"can32\")\n-AVR_MCU (\"at90can64\",            ARCH_AVR5, \"__AVR_AT90CAN64__\",         0, 0, 0x0100, \"can64\")\n-AVR_MCU (\"at90pwm216\",           ARCH_AVR5, \"__AVR_AT90PWM216__\",        0, 0, 0x0100, \"90pwm216\")\n-AVR_MCU (\"at90pwm316\",           ARCH_AVR5, \"__AVR_AT90PWM316__\",        0, 0, 0x0100, \"90pwm316\")\n-AVR_MCU (\"atmega32c1\",           ARCH_AVR5, \"__AVR_ATmega32C1__\",        0, 0, 0x0100, \"m32c1\")\n-AVR_MCU (\"atmega64c1\",           ARCH_AVR5, \"__AVR_ATmega64C1__\",        0, 0, 0x0100, \"m64c1\")\n-AVR_MCU (\"atmega16m1\",           ARCH_AVR5, \"__AVR_ATmega16M1__\",        0, 0, 0x0100, \"m16m1\")\n-AVR_MCU (\"atmega32m1\",           ARCH_AVR5, \"__AVR_ATmega32M1__\",        0, 0, 0x0100, \"m32m1\")\n-AVR_MCU (\"atmega64m1\",           ARCH_AVR5, \"__AVR_ATmega64M1__\",        0, 0, 0x0100, \"m64m1\")\n-AVR_MCU (\"atmega16u4\",           ARCH_AVR5, \"__AVR_ATmega16U4__\",        0, 0, 0x0100, \"m16u4\")\n-AVR_MCU (\"atmega32u4\",           ARCH_AVR5, \"__AVR_ATmega32U4__\",        0, 0, 0x0100, \"m32u4\")\n-AVR_MCU (\"atmega32u6\",           ARCH_AVR5, \"__AVR_ATmega32U6__\",        0, 0, 0x0100, \"m32u6\")\n-AVR_MCU (\"at90scr100\",           ARCH_AVR5, \"__AVR_AT90SCR100__\",        0, 0, 0x0100, \"90scr100\")\n-AVR_MCU (\"at90usb646\",           ARCH_AVR5, \"__AVR_AT90USB646__\",        0, 0, 0x0100, \"usb646\")\n-AVR_MCU (\"at90usb647\",           ARCH_AVR5, \"__AVR_AT90USB647__\",        0, 0, 0x0100, \"usb647\")\n-AVR_MCU (\"at94k\",                ARCH_AVR5, \"__AVR_AT94K__\",             0, 0, 0x0060, \"at94k\")\n-AVR_MCU (\"m3000\",                ARCH_AVR5, \"__AVR_M3000__\",             0, 0, 0x1000, \"m3000\")\n+AVR_MCU (\"avr5\",                 ARCH_AVR5, NULL,                        0, 0, 0x0060, 1, \"m16\")\n+AVR_MCU (\"atmega16\",             ARCH_AVR5, \"__AVR_ATmega16__\",          0, 0, 0x0060, 1, \"m16\")\n+AVR_MCU (\"atmega16a\",            ARCH_AVR5, \"__AVR_ATmega16A__\",         0, 0, 0x0060, 1, \"m16a\")\n+AVR_MCU (\"atmega161\",            ARCH_AVR5, \"__AVR_ATmega161__\",         0, 0, 0x0060, 1, \"m161\")\n+AVR_MCU (\"atmega162\",            ARCH_AVR5, \"__AVR_ATmega162__\",         0, 0, 0x0100, 1, \"m162\")\n+AVR_MCU (\"atmega163\",            ARCH_AVR5, \"__AVR_ATmega163__\",         0, 0, 0x0060, 1, \"m163\")\n+AVR_MCU (\"atmega164a\",           ARCH_AVR5, \"__AVR_ATmega164A__\",        0, 0, 0x0100, 1, \"m164a\")\n+AVR_MCU (\"atmega164p\",           ARCH_AVR5, \"__AVR_ATmega164P__\",        0, 0, 0x0100, 1, \"m164p\")\n+AVR_MCU (\"atmega165\",            ARCH_AVR5, \"__AVR_ATmega165__\",         0, 0, 0x0100, 1, \"m165\")\n+AVR_MCU (\"atmega165a\",           ARCH_AVR5, \"__AVR_ATmega165A__\",        0, 0, 0x0100, 1, \"m165a\")\n+AVR_MCU (\"atmega165p\",           ARCH_AVR5, \"__AVR_ATmega165P__\",        0, 0, 0x0100, 1, \"m165p\")\n+AVR_MCU (\"atmega168\",            ARCH_AVR5, \"__AVR_ATmega168__\",         0, 0, 0x0100, 1, \"m168\")\n+AVR_MCU (\"atmega168a\",           ARCH_AVR5, \"__AVR_ATmega168A__\",        0, 0, 0x0100, 1, \"m168a\")\n+AVR_MCU (\"atmega168p\",           ARCH_AVR5, \"__AVR_ATmega168P__\",        0, 0, 0x0100, 1, \"m168p\")\n+AVR_MCU (\"atmega169\",            ARCH_AVR5, \"__AVR_ATmega169__\",         0, 0, 0x0100, 1, \"m169\")\n+AVR_MCU (\"atmega169a\",           ARCH_AVR5, \"__AVR_ATmega169A__\",        0, 0, 0x0100, 1, \"m169a\")\n+AVR_MCU (\"atmega169p\",           ARCH_AVR5, \"__AVR_ATmega169P__\",        0, 0, 0x0100, 1, \"m169p\")\n+AVR_MCU (\"atmega169pa\",          ARCH_AVR5, \"__AVR_ATmega169PA__\",       0, 0, 0x0100, 1, \"m169pa\")\n+AVR_MCU (\"atmega32\",             ARCH_AVR5, \"__AVR_ATmega32__\",          0, 0, 0x0060, 1, \"m32\")\n+AVR_MCU (\"atmega323\",            ARCH_AVR5, \"__AVR_ATmega323__\",         0, 0, 0x0060, 1, \"m323\")\n+AVR_MCU (\"atmega324a\",           ARCH_AVR5, \"__AVR_ATmega324A__\",        0, 0, 0x0100, 1, \"m324a\")\n+AVR_MCU (\"atmega324p\",           ARCH_AVR5, \"__AVR_ATmega324P__\",        0, 0, 0x0100, 1, \"m324p\")\n+AVR_MCU (\"atmega324pa\",          ARCH_AVR5, \"__AVR_ATmega324PA__\",       0, 0, 0x0100, 1, \"m324pa\")\n+AVR_MCU (\"atmega325\",            ARCH_AVR5, \"__AVR_ATmega325__\",         0, 0, 0x0100, 1, \"m325\")\n+AVR_MCU (\"atmega325a\",           ARCH_AVR5, \"__AVR_ATmega325A__\",        0, 0, 0x0100, 1, \"m325a\")\n+AVR_MCU (\"atmega325p\",           ARCH_AVR5, \"__AVR_ATmega325P__\",        0, 0, 0x0100, 1, \"m325p\")\n+AVR_MCU (\"atmega3250\",           ARCH_AVR5, \"__AVR_ATmega3250__\",        0, 0, 0x0100, 1, \"m3250\")\n+AVR_MCU (\"atmega3250a\",          ARCH_AVR5, \"__AVR_ATmega3250A__\",       0, 0, 0x0100, 1, \"m3250a\")\n+AVR_MCU (\"atmega3250p\",          ARCH_AVR5, \"__AVR_ATmega3250P__\",       0, 0, 0x0100, 1, \"m3250p\")\n+AVR_MCU (\"atmega328\",            ARCH_AVR5, \"__AVR_ATmega328__\",         0, 0, 0x0100, 1, \"m328\")\n+AVR_MCU (\"atmega328p\",           ARCH_AVR5, \"__AVR_ATmega328P__\",        0, 0, 0x0100, 1, \"m328p\")\n+AVR_MCU (\"atmega329\",            ARCH_AVR5, \"__AVR_ATmega329__\",         0, 0, 0x0100, 1, \"m329\")\n+AVR_MCU (\"atmega329a\",           ARCH_AVR5, \"__AVR_ATmega329A__\",        0, 0, 0x0100, 1, \"m329a\")\n+AVR_MCU (\"atmega329p\",           ARCH_AVR5, \"__AVR_ATmega329P__\",        0, 0, 0x0100, 1, \"m329p\")\n+AVR_MCU (\"atmega329pa\",          ARCH_AVR5, \"__AVR_ATmega329PA__\",       0, 0, 0x0100, 1, \"m329pa\")\n+AVR_MCU (\"atmega3290\",           ARCH_AVR5, \"__AVR_ATmega3290__\",        0, 0, 0x0100, 1, \"m3290\")\n+AVR_MCU (\"atmega3290a\",          ARCH_AVR5, \"__AVR_ATmega3290A__\",       0, 0, 0x0100, 1, \"m3290a\")\n+AVR_MCU (\"atmega3290p\",          ARCH_AVR5, \"__AVR_ATmega3290P__\",       0, 0, 0x0100, 1, \"m3290p\")\n+AVR_MCU (\"atmega406\",            ARCH_AVR5, \"__AVR_ATmega406__\",         0, 0, 0x0100, 1, \"m406\")\n+AVR_MCU (\"atmega64\",             ARCH_AVR5, \"__AVR_ATmega64__\",          0, 0, 0x0100, 1, \"m64\")\n+AVR_MCU (\"atmega640\",            ARCH_AVR5, \"__AVR_ATmega640__\",         0, 0, 0x0200, 1, \"m640\")\n+AVR_MCU (\"atmega644\",            ARCH_AVR5, \"__AVR_ATmega644__\",         0, 0, 0x0100, 1, \"m644\")\n+AVR_MCU (\"atmega644a\",           ARCH_AVR5, \"__AVR_ATmega644A__\",        0, 0, 0x0100, 1, \"m644a\")\n+AVR_MCU (\"atmega644p\",           ARCH_AVR5, \"__AVR_ATmega644P__\",        0, 0, 0x0100, 1, \"m644p\")\n+AVR_MCU (\"atmega644pa\",          ARCH_AVR5, \"__AVR_ATmega644PA__\",       0, 0, 0x0100, 1, \"m644pa\")\n+AVR_MCU (\"atmega645\",            ARCH_AVR5, \"__AVR_ATmega645__\",         0, 0, 0x0100, 1, \"m645\")\n+AVR_MCU (\"atmega645a\",           ARCH_AVR5, \"__AVR_ATmega645A__\",        0, 0, 0x0100, 1, \"m645a\")\n+AVR_MCU (\"atmega645p\",           ARCH_AVR5, \"__AVR_ATmega645P__\",        0, 0, 0x0100, 1, \"m645p\")\n+AVR_MCU (\"atmega6450\",           ARCH_AVR5, \"__AVR_ATmega6450__\",        0, 0, 0x0100, 1, \"m6450\")\n+AVR_MCU (\"atmega6450a\",          ARCH_AVR5, \"__AVR_ATmega6450A__\",       0, 0, 0x0100, 1, \"m6450a\")\n+AVR_MCU (\"atmega6450p\",          ARCH_AVR5, \"__AVR_ATmega6450P__\",       0, 0, 0x0100, 1, \"m6450p\")\n+AVR_MCU (\"atmega649\",            ARCH_AVR5, \"__AVR_ATmega649__\",         0, 0, 0x0100, 1, \"m649\")\n+AVR_MCU (\"atmega649a\",           ARCH_AVR5, \"__AVR_ATmega649A__\",        0, 0, 0x0100, 1, \"m649a\")\n+AVR_MCU (\"atmega649p\",           ARCH_AVR5, \"__AVR_ATmega649P__\",        0, 0, 0x0100, 1, \"m649p\")\n+AVR_MCU (\"atmega6490\",           ARCH_AVR5, \"__AVR_ATmega6490__\",        0, 0, 0x0100, 1, \"m6490\")\n+AVR_MCU (\"atmega16hva\",          ARCH_AVR5, \"__AVR_ATmega16HVA__\",       0, 0, 0x0100, 1, \"m16hva\")\n+AVR_MCU (\"atmega16hva2\",         ARCH_AVR5, \"__AVR_ATmega16HVA2__\",      0, 0, 0x0100, 1, \"m16hva2\")\n+AVR_MCU (\"atmega16hvb\",          ARCH_AVR5, \"__AVR_ATmega16HVB__\",       0, 0, 0x0100, 1, \"m16hvb\")\n+AVR_MCU (\"atmega32hvb\",          ARCH_AVR5, \"__AVR_ATmega32HVB__\",       0, 0, 0x0100, 1, \"m32hvb\")\n+AVR_MCU (\"atmega64hve\",          ARCH_AVR5, \"__AVR_ATmega64HVE__\",       0, 0, 0x0100, 1, \"m64hve\")\n+AVR_MCU (\"at90can32\",            ARCH_AVR5, \"__AVR_AT90CAN32__\",         0, 0, 0x0100, 1, \"can32\")\n+AVR_MCU (\"at90can64\",            ARCH_AVR5, \"__AVR_AT90CAN64__\",         0, 0, 0x0100, 1, \"can64\")\n+AVR_MCU (\"at90pwm216\",           ARCH_AVR5, \"__AVR_AT90PWM216__\",        0, 0, 0x0100, 1, \"90pwm216\")\n+AVR_MCU (\"at90pwm316\",           ARCH_AVR5, \"__AVR_AT90PWM316__\",        0, 0, 0x0100, 1, \"90pwm316\")\n+AVR_MCU (\"atmega32c1\",           ARCH_AVR5, \"__AVR_ATmega32C1__\",        0, 0, 0x0100, 1, \"m32c1\")\n+AVR_MCU (\"atmega64c1\",           ARCH_AVR5, \"__AVR_ATmega64C1__\",        0, 0, 0x0100, 1, \"m64c1\")\n+AVR_MCU (\"atmega16m1\",           ARCH_AVR5, \"__AVR_ATmega16M1__\",        0, 0, 0x0100, 1, \"m16m1\")\n+AVR_MCU (\"atmega32m1\",           ARCH_AVR5, \"__AVR_ATmega32M1__\",        0, 0, 0x0100, 1, \"m32m1\")\n+AVR_MCU (\"atmega64m1\",           ARCH_AVR5, \"__AVR_ATmega64M1__\",        0, 0, 0x0100, 1, \"m64m1\")\n+AVR_MCU (\"atmega16u4\",           ARCH_AVR5, \"__AVR_ATmega16U4__\",        0, 0, 0x0100, 1, \"m16u4\")\n+AVR_MCU (\"atmega32u4\",           ARCH_AVR5, \"__AVR_ATmega32U4__\",        0, 0, 0x0100, 1, \"m32u4\")\n+AVR_MCU (\"atmega32u6\",           ARCH_AVR5, \"__AVR_ATmega32U6__\",        0, 0, 0x0100, 1, \"m32u6\")\n+AVR_MCU (\"at90scr100\",           ARCH_AVR5, \"__AVR_AT90SCR100__\",        0, 0, 0x0100, 1, \"90scr100\")\n+AVR_MCU (\"at90usb646\",           ARCH_AVR5, \"__AVR_AT90USB646__\",        0, 0, 0x0100, 1, \"usb646\")\n+AVR_MCU (\"at90usb647\",           ARCH_AVR5, \"__AVR_AT90USB647__\",        0, 0, 0x0100, 1, \"usb647\")\n+AVR_MCU (\"at94k\",                ARCH_AVR5, \"__AVR_AT94K__\",             0, 0, 0x0060, 1, \"at94k\")\n+AVR_MCU (\"m3000\",                ARCH_AVR5, \"__AVR_M3000__\",             0, 0, 0x1000, 1, \"m3000\")\n /* Enhanced, == 128K.  */\n-AVR_MCU (\"avr51\",                ARCH_AVR51, NULL,                       0, 0, 0x0100, \"m128\")\n-AVR_MCU (\"atmega128\",            ARCH_AVR51, \"__AVR_ATmega128__\",        0, 0, 0x0100, \"m128\")\n-AVR_MCU (\"atmega1280\",           ARCH_AVR51, \"__AVR_ATmega1280__\",       0, 0, 0x0200, \"m1280\")\n-AVR_MCU (\"atmega1281\",           ARCH_AVR51, \"__AVR_ATmega1281__\",       0, 0, 0x0200, \"m1281\")\n-AVR_MCU (\"atmega1284p\",          ARCH_AVR51, \"__AVR_ATmega1284P__\",      0, 0, 0x0100, \"m1284p\")\n-AVR_MCU (\"atmega128rfa1\",        ARCH_AVR51, \"__AVR_ATmega128RFA1__\",    0, 0, 0x0200, \"m128rfa1\")\n-AVR_MCU (\"at90can128\",           ARCH_AVR51, \"__AVR_AT90CAN128__\",       0, 0, 0x0100, \"can128\")\n-AVR_MCU (\"at90usb1286\",          ARCH_AVR51, \"__AVR_AT90USB1286__\",      0, 0, 0x0100, \"usb1286\")\n-AVR_MCU (\"at90usb1287\",          ARCH_AVR51, \"__AVR_AT90USB1287__\",      0, 0, 0x0100, \"usb1286\")\n+AVR_MCU (\"avr51\",                ARCH_AVR51, NULL,                       0, 0, 0x0100, 2, \"m128\")\n+AVR_MCU (\"atmega128\",            ARCH_AVR51, \"__AVR_ATmega128__\",        0, 0, 0x0100, 2, \"m128\")\n+AVR_MCU (\"atmega1280\",           ARCH_AVR51, \"__AVR_ATmega1280__\",       0, 0, 0x0200, 2, \"m1280\")\n+AVR_MCU (\"atmega1281\",           ARCH_AVR51, \"__AVR_ATmega1281__\",       0, 0, 0x0200, 2, \"m1281\")\n+AVR_MCU (\"atmega1284p\",          ARCH_AVR51, \"__AVR_ATmega1284P__\",      0, 0, 0x0100, 2, \"m1284p\")\n+AVR_MCU (\"atmega128rfa1\",        ARCH_AVR51, \"__AVR_ATmega128RFA1__\",    0, 0, 0x0200, 2, \"m128rfa1\")\n+AVR_MCU (\"at90can128\",           ARCH_AVR51, \"__AVR_AT90CAN128__\",       0, 0, 0x0100, 2, \"can128\")\n+AVR_MCU (\"at90usb1286\",          ARCH_AVR51, \"__AVR_AT90USB1286__\",      0, 0, 0x0100, 2, \"usb1286\")\n+AVR_MCU (\"at90usb1287\",          ARCH_AVR51, \"__AVR_AT90USB1287__\",      0, 0, 0x0100, 2, \"usb1286\")\n /* 3-Byte PC.  */\n-AVR_MCU (\"avr6\",                 ARCH_AVR6, NULL,                        0, 0, 0x0200, \"m2561\")\n-AVR_MCU (\"atmega2560\",           ARCH_AVR6, \"__AVR_ATmega2560__\",        0, 0, 0x0200, \"m2560\")\n-AVR_MCU (\"atmega2561\",           ARCH_AVR6, \"__AVR_ATmega2561__\",        0, 0, 0x0200, \"m2561\")\n+AVR_MCU (\"avr6\",                 ARCH_AVR6, NULL,                        0, 0, 0x0200, 4, \"m2561\")\n+AVR_MCU (\"atmega2560\",           ARCH_AVR6, \"__AVR_ATmega2560__\",        0, 0, 0x0200, 4, \"m2560\")\n+AVR_MCU (\"atmega2561\",           ARCH_AVR6, \"__AVR_ATmega2561__\",        0, 0, 0x0200, 4, \"m2561\")\n /* Xmega, 16K <= Flash < 64K, RAM <= 64K */\n-AVR_MCU (\"avrxmega2\",        ARCH_AVRXMEGA2, NULL,                       0, 0, 0x2000, \"x32a4\")\n-AVR_MCU (\"atxmega16a4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16A4__\",      0, 0, 0x2000, \"x16a4\")\n-AVR_MCU (\"atxmega16d4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16D4__\",      0, 0, 0x2000, \"x16d4\")\n-AVR_MCU (\"atxmega16x1\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16X1__\",      0, 0, 0x2000, \"x16x1\")\n-AVR_MCU (\"atxmega32a4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32A4__\",      0, 0, 0x2000, \"x32a4\")\n-AVR_MCU (\"atxmega32d4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32D4__\",      0, 0, 0x2000, \"x32d4\")\n-AVR_MCU (\"atxmega32x1\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32X1__\",      0, 0, 0x2000, \"x32x1\")\n-/* Xmega, Flash == 64K, RAM <= 64K */\n-AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, NULL,                       0, 0, 0x2000, \"x64a4\")\n-AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64A3__\",      0, 0, 0x2000, \"x64a3\")\n-AVR_MCU (\"atxmega64d3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64D3__\",      0, 0, 0x2000, \"x64d3\")\n-/* Xmega, Flash == 64K, RAM > 64K */\n-AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, NULL,                       0, 0, 0x2000, \"x64a1\")\n-AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, \"__AVR_ATxmega64A1__\",      0, 0, 0x2000, \"x64a1\")\n-AVR_MCU (\"atxmega64a1u\",     ARCH_AVRXMEGA5, \"__AVR_ATxmega64A1U__\",     0, 0, 0x2000, \"x64a1u\")\n-/* Xmega, 128K <= Flash <= 256K, RAM <= 64K */\n-AVR_MCU (\"avrxmega6\",        ARCH_AVRXMEGA6, NULL,                       0, 0, 0x2000, \"x128a3\")\n-AVR_MCU (\"atxmega128a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128A3__\",     0, 0, 0x2000, \"x128a3\")\n-AVR_MCU (\"atxmega128d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128D3__\",     0, 0, 0x2000, \"x128d3\")\n-AVR_MCU (\"atxmega192a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192A3__\",     0, 0, 0x2000, \"x192a3\")\n-AVR_MCU (\"atxmega192d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192D3__\",     0, 0, 0x2000, \"x192d3\")\n-AVR_MCU (\"atxmega256a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3__\",     0, 0, 0x2000, \"x256a3\")\n-AVR_MCU (\"atxmega256a3b\",    ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3B__\",    0, 0, 0x2000, \"x256a3b\")\n-AVR_MCU (\"atxmega256a3bu\",   ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3BU__\",   0, 0, 0x2000, \"x256a3bu\")\n-AVR_MCU (\"atxmega256d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256D3__\",     0, 0, 0x2000, \"x256d3\")\n-/* Xmega, 128K <= Flash <= 256K, RAM > 64K RAM.  */\n-AVR_MCU (\"avrxmega7\",        ARCH_AVRXMEGA7, NULL,                       0, 0, 0x2000, \"x128a1\")\n-AVR_MCU (\"atxmega128a1\",     ARCH_AVRXMEGA7, \"__AVR_ATxmega128A1__\",     0, 0, 0x2000, \"x128a1\")\n-AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, \"__AVR_ATxmega128A1U__\",    0, 0, 0x2000, \"x128a1u\")\n+AVR_MCU (\"avrxmega2\",        ARCH_AVRXMEGA2, NULL,                       0, 0, 0x2000, 1, \"x32a4\")\n+AVR_MCU (\"atxmega16a4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16A4__\",      0, 0, 0x2000, 1, \"x16a4\")\n+AVR_MCU (\"atxmega16d4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16D4__\",      0, 0, 0x2000, 1, \"x16d4\")\n+AVR_MCU (\"atxmega16x1\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16X1__\",      0, 0, 0x2000, 1, \"x16x1\")\n+AVR_MCU (\"atxmega32a4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32A4__\",      0, 0, 0x2000, 1, \"x32a4\")\n+AVR_MCU (\"atxmega32d4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32D4__\",      0, 0, 0x2000, 1, \"x32d4\")\n+AVR_MCU (\"atxmega32x1\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32X1__\",      0, 0, 0x2000, 1, \"x32x1\")\n+/* Xmega, 64K < Flash <= 128K, RAM <= 64K */\n+AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, NULL,                       0, 0, 0x2000, 2, \"x64a4\")\n+AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64A3__\",      0, 0, 0x2000, 2, \"x64a3\")\n+AVR_MCU (\"atxmega64d3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64D3__\",      0, 0, 0x2000, 2, \"x64d3\")\n+/* Xmega, 64K < Flash <= 128K, RAM > 64K */\n+AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, NULL,                       0, 0, 0x2000, 2, \"x64a1\")\n+AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, \"__AVR_ATxmega64A1__\",      0, 0, 0x2000, 2, \"x64a1\")\n+AVR_MCU (\"atxmega64a1u\",     ARCH_AVRXMEGA5, \"__AVR_ATxmega64A1U__\",     0, 0, 0x2000, 2, \"x64a1u\")\n+/* Xmega, 128K < Flash, RAM <= 64K */\n+AVR_MCU (\"avrxmega6\",        ARCH_AVRXMEGA6, NULL,                       0, 0, 0x2000, 5, \"x128a3\")\n+AVR_MCU (\"atxmega128a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128A3__\",     0, 0, 0x2000, 3, \"x128a3\")\n+AVR_MCU (\"atxmega128d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128D3__\",     0, 0, 0x2000, 3, \"x128d3\")\n+AVR_MCU (\"atxmega192a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192A3__\",     0, 0, 0x2000, 4, \"x192a3\")\n+AVR_MCU (\"atxmega192d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192D3__\",     0, 0, 0x2000, 4, \"x192d3\")\n+AVR_MCU (\"atxmega256a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3__\",     0, 0, 0x2000, 5, \"x256a3\")\n+AVR_MCU (\"atxmega256a3b\",    ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3B__\",    0, 0, 0x2000, 5, \"x256a3b\")\n+AVR_MCU (\"atxmega256a3bu\",   ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3BU__\",   0, 0, 0x2000, 5, \"x256a3bu\")\n+AVR_MCU (\"atxmega256d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256D3__\",     0, 0, 0x2000, 5, \"x256d3\")\n+/* Xmega, 128K < Flash, RAM > 64K RAM.  */\n+AVR_MCU (\"avrxmega7\",        ARCH_AVRXMEGA7, NULL,                       0, 0, 0x2000, 3, \"x128a1\")\n+AVR_MCU (\"atxmega128a1\",     ARCH_AVRXMEGA7, \"__AVR_ATxmega128A1__\",     0, 0, 0x2000, 3, \"x128a1\")\n+AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, \"__AVR_ATxmega128A1U__\",    0, 0, 0x2000, 3, \"x128a1u\")\n /* Assembler only.  */\n-AVR_MCU (\"avr1\",                 ARCH_AVR1, NULL,                        0, 0, 0x0060, \"s1200\")\n-AVR_MCU (\"at90s1200\",            ARCH_AVR1, \"__AVR_AT90S1200__\",         0, 0, 0x0060, \"s1200\")\n-AVR_MCU (\"attiny11\",             ARCH_AVR1, \"__AVR_ATtiny11__\",          0, 0, 0x0060, \"tn11\")\n-AVR_MCU (\"attiny12\",             ARCH_AVR1, \"__AVR_ATtiny12__\",          0, 0, 0x0060, \"tn12\")\n-AVR_MCU (\"attiny15\",             ARCH_AVR1, \"__AVR_ATtiny15__\",          0, 0, 0x0060, \"tn15\")\n-AVR_MCU (\"attiny28\",             ARCH_AVR1, \"__AVR_ATtiny28__\",          0, 0, 0x0060, \"tn28\")\n+AVR_MCU (\"avr1\",                 ARCH_AVR1, NULL,                        0, 0, 0x0060, 1, \"s1200\")\n+AVR_MCU (\"at90s1200\",            ARCH_AVR1, \"__AVR_AT90S1200__\",         0, 0, 0x0060, 1, \"s1200\")\n+AVR_MCU (\"attiny11\",             ARCH_AVR1, \"__AVR_ATtiny11__\",          0, 0, 0x0060, 1, \"tn11\")\n+AVR_MCU (\"attiny12\",             ARCH_AVR1, \"__AVR_ATtiny12__\",          0, 0, 0x0060, 1, \"tn12\")\n+AVR_MCU (\"attiny15\",             ARCH_AVR1, \"__AVR_ATtiny15__\",          0, 0, 0x0060, 1, \"tn15\")\n+AVR_MCU (\"attiny28\",             ARCH_AVR1, \"__AVR_ATtiny28__\",          0, 0, 0x0060, 1, \"tn28\")"}, {"sha": "3fe26d4161f327e32c73d15cc7e6784b7b1b2986", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -2577,7 +2577,7 @@ avr_xload_libgcc_p (enum machine_mode mode)\n   int n_bytes = GET_MODE_SIZE (mode);\n   \n   return (n_bytes > 1\n-          || avr_current_arch->n_segments > 1);\n+          || avr_current_device->n_flash > 1);\n }\n \n \n@@ -2773,10 +2773,7 @@ avr_out_lpm (rtx insn, rtx *op, int *plen)\n \n   regno_dest = REGNO (dest);\n \n-  /* Cut down segment number to a number the device actually supports.\n-     We do this late to preserve the address space's name for diagnostics.  */\n-\n-  segment = avr_addrspace[as].segment % avr_current_arch->n_segments;\n+  segment = avr_addrspace[as].segment;\n \n   /* Set RAMPZ as needed.  */\n \n@@ -7101,6 +7098,7 @@ avr_nonconst_pointer_addrspace (tree typ)\n \n   if (POINTER_TYPE_P (typ))\n     {\n+      addr_space_t as;\n       tree target = TREE_TYPE (typ);\n \n       /* Pointer to function: Test the function's return type.  */\n@@ -7113,12 +7111,16 @@ avr_nonconst_pointer_addrspace (tree typ)\n       while (TREE_CODE (target) == ARRAY_TYPE)\n         target = TREE_TYPE (target);\n \n-      if (!ADDR_SPACE_GENERIC_P (TYPE_ADDR_SPACE (target))\n-          && !TYPE_READONLY (target))\n-        {\n-          /* Pointers to non-generic address space must be const.  */\n+      /* Pointers to non-generic address space must be const.\n+         Refuse address spaces outside the device's flash.  */\n           \n-          return TYPE_ADDR_SPACE (target);\n+      as = TYPE_ADDR_SPACE (target);\n+        \n+      if (!ADDR_SPACE_GENERIC_P (as)\n+          && (!TYPE_READONLY (target)\n+              || avr_addrspace[as].segment >= avr_current_device->n_flash))\n+        {\n+          return as;\n         }\n \n       /* Scan pointer's target type.  */\n@@ -7180,12 +7182,29 @@ avr_pgm_check_var_decl (tree node)\n \n   if (reason)\n     {\n-      if (TYPE_P (node))\n-        error (\"pointer targeting address space %qs must be const in %qT\",\n-               avr_addrspace[as].name, node);\n+      avr_edump (\"%?: %s, %d, %d\\n\",\n+                 avr_addrspace[as].name,\n+                 avr_addrspace[as].segment, avr_current_device->n_flash);\n+      if (avr_addrspace[as].segment >= avr_current_device->n_flash)\n+        {\n+          if (TYPE_P (node))\n+            error (\"%qT uses address space %qs beyond flash of %qs\",\n+                   node, avr_addrspace[as].name, avr_current_device->name);\n+          else\n+            error (\"%s %q+D uses address space %qs beyond flash of %qs\",\n+                   reason, node, avr_addrspace[as].name,\n+                   avr_current_device->name);\n+        }\n       else\n-        error (\"pointer targeting address space %qs must be const in %s %q+D\",\n-               avr_addrspace[as].name, reason, node);\n+        {\n+          if (TYPE_P (node))\n+            error (\"pointer targeting address space %qs must be const in %qT\",\n+                   avr_addrspace[as].name, node);\n+          else\n+            error (\"pointer targeting address space %qs must be const\"\n+                   \" in %s %q+D\",\n+                   avr_addrspace[as].name, reason, node);\n+        }\n     }\n \n   return reason == NULL;\n@@ -7203,6 +7222,7 @@ avr_insert_attributes (tree node, tree *attributes)\n       && (TREE_STATIC (node) || DECL_EXTERNAL (node))\n       && avr_progmem_p (node, *attributes))\n     {\n+      addr_space_t as;\n       tree node0 = node;\n \n       /* For C++, we have to peel arrays in order to get correct\n@@ -7214,11 +7234,19 @@ avr_insert_attributes (tree node, tree *attributes)\n \n       if (error_mark_node == node0)\n         return;\n+\n+      as = TYPE_ADDR_SPACE (TREE_TYPE (node));\n+\n+      if (avr_addrspace[as].segment >= avr_current_device->n_flash)\n+        {\n+          error (\"variable %q+D located in address space %qs\"\n+                 \" beyond flash of %qs\",\n+                 node, avr_addrspace[as].name, avr_current_device->name);\n+        }\n       \n       if (!TYPE_READONLY (node0)\n           && !TREE_READONLY (node))\n         {\n-          addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (node));\n           const char *reason = \"__attribute__((progmem))\";\n \n           if (!ADDR_SPACE_GENERIC_P (as))\n@@ -7403,7 +7431,7 @@ avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n   if (flags & AVR_SECTION_PROGMEM)\n     {\n       addr_space_t as = (flags & AVR_SECTION_PROGMEM) / SECTION_MACH_DEP;\n-      int segment = avr_addrspace[as].segment % avr_current_arch->n_segments;\n+      int segment = avr_addrspace[as].segment;\n       const char *old_prefix = \".rodata\";\n       const char *new_prefix = progmem_section_prefix[segment];\n       \n@@ -7518,7 +7546,7 @@ avr_asm_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n       && avr_progmem_p (decl, DECL_ATTRIBUTES (decl)))\n     {\n       addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (decl));\n-      int segment = avr_addrspace[as].segment % avr_current_arch->n_segments;\n+      int segment = avr_addrspace[as].segment;\n       \n       if (sect->common.flags & SECTION_NAMED)\n         {\n@@ -9852,7 +9880,7 @@ avr_addr_space_convert (rtx src, tree type_from, tree type_to)\n              \n       msb = ADDR_SPACE_GENERIC_P (as_from)\n         ? 0x80\n-        : avr_addrspace[as_from].segment % avr_current_arch->n_segments;\n+        : avr_addrspace[as_from].segment;\n \n       src = force_reg (Pmode, src);\n       \n@@ -9936,10 +9964,10 @@ avr_emit_movmemhi (rtx *xop)\n     }\n   else\n     {\n-      int segment = avr_addrspace[as].segment % avr_current_arch->n_segments;\n+      int segment = avr_addrspace[as].segment;\n       \n       if (segment\n-          && avr_current_arch->n_segments > 1)\n+          && avr_current_device->n_flash > 1)\n         {\n           a_hi8 = GEN_INT (segment);\n           emit_move_insn (rampz_rtx, a_hi8 = copy_to_mode_reg (QImode, a_hi8));"}, {"sha": "b051c4b99ee2f405051e87db69c87cff1ef41647", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -60,9 +60,6 @@ struct base_arch_s\n      SFR-address = RAM-address - sfr_offset  */\n   int sfr_offset;\n \n-  /* Number of 64k segments in the flash.  */\n-  int n_segments;\n-\n   /* Architecture id to built-in define __AVR_ARCH__ (NULL -> no macro) */\n   const char *const macro;\n   \n@@ -129,6 +126,9 @@ struct mcu_type_s {\n   /* Start of data section.  */\n   int data_section_start;\n   \n+  /* Number of 64k segments in the flash.  */\n+  int n_flash;\n+\n   /* Name of device library.  */\n   const char *const library_name; \n };"}, {"sha": "990192c93115afa3b79004ca04c03377f814bae6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bae3b1bfdc3dad7a228af75cfa5afc7e0d57ba64", "patch": "@@ -1266,14 +1266,6 @@ address space @code{__flash@var{N}}.\n The compiler will set the @code{RAMPZ} segment register approptiately \n before reading data by means of the @code{ELPM} instruction.\n \n-On devices with less 64@tie{}kiB flash segments as indicated by the address\n-space, the compiler will cut down the segment number to a number the\n-device actually supports. Counting starts at@tie{}@code{0}\n-for space @code{__flash}. For example, if you access address space\n-@code{__flash3} on an ATmega128 device with two 64@tie{}kiB flash segments,\n-the compiler will generate a read from @code{__flash1}, i.e.@: it\n-will load @code{RAMPZ} with@tie{}@code{1} before reading.\n-\n @item __memx\n @cindex @code{__memx} AVR Named Address Spaces\n This is a 24-bit address space that linearizes flash and RAM:"}]}