{"sha": "a645583d4d68eecdd9101e1013e7bf01907ea786", "node_id": "C_kwDOANBUbNoAKGE2NDU1ODNkNGQ2OGVlY2RkOTEwMWUxMDEzZTdiZjAxOTA3ZWE3ODY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-11T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-11T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "206b22413b8375e1c681cb5533a25a1528bea3d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206b22413b8375e1c681cb5533a25a1528bea3d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a645583d4d68eecdd9101e1013e7bf01907ea786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a645583d4d68eecdd9101e1013e7bf01907ea786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a645583d4d68eecdd9101e1013e7bf01907ea786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a645583d4d68eecdd9101e1013e7bf01907ea786/comments", "author": null, "committer": null, "parents": [{"sha": "50243f4918c2ed7f1ddbf0e8df97a37aee73ebf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50243f4918c2ed7f1ddbf0e8df97a37aee73ebf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50243f4918c2ed7f1ddbf0e8df97a37aee73ebf2"}], "stats": {"total": 423, "additions": 422, "deletions": 1}, "files": [{"sha": "07e865e6ca9ba56e10ab68dfd11b35cb365fd977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,165 @@\n+2022-02-10  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle-end/100775\n+\t* function.cc (gen_call_used_regs_seq): Call\n+\tdf_update_exit_block_uses when updating df.\n+\n+2022-02-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104469\n+\t* config/i386/sse.md (vec_unpacks_float_lo_v4si):\n+\tChange operand 1 constraint to register_operand.\n+\n+2022-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104373\n+\t* tree-ssa-sccvn.h (do_rpo_vn): New export exposing the\n+\twalk kind.\n+\t* tree-ssa-sccvn.cc (do_rpo_vn): Export, get the default\n+\twalk kind as argument.\n+\t(run_rpo_vn): Adjust.\n+\t(pass_fre::execute): Likewise.\n+\t* tree-ssa-uninit.cc (warn_uninitialized_vars): Skip\n+\tblocks not reachable.\n+\t(execute_late_warn_uninitialized): Mark all edges as\n+\texecutable.\n+\t(execute_early_warn_uninitialized): Use VN to compute\n+\texecutable edges.\n+\t(pass_data_early_warn_uninitialized): Enable a dump file,\n+\tchange dump name to warn_uninit.\n+\n+2022-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104467\n+\t* match.pd (vector extract simplification): Multiply the\n+\tnumber of CTOR elements with the number of element elements.\n+\n+2022-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104466\n+\t* tree-ssa-alias.cc (refs_may_alias_p_2): Use rbase1/rbase2\n+\tfor the MR_DEPENDENCE checks as intended.\n+\n+2022-02-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.md (define_insn \"nvptx_atomic_store<mode>\"): New\n+\tdefine_insn.\n+\t(define_expand \"atomic_store<mode>\"): Use nvptx_atomic_store<mode> for\n+\tTARGET_SM70.\n+\t(define_c_enum \"unspecv\"): Add UNSPECV_ST.\n+\n+2022-02-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-protos.h (nvptx_mem_maybe_shared_p): Declare.\n+\t* config/nvptx/nvptx.cc (nvptx_mem_data_area): New static function.\n+\t(nvptx_mem_maybe_shared_p): New function.\n+\t* config/nvptx/nvptx.md (define_expand \"atomic_store<mode>\"): New\n+\tdefine_expand.\n+\n+2022-02-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/97005\n+\t* config/nvptx/nvptx.md (define_insn \"sub<mode>3\"): Workaround\n+\tdriver JIT bug by using sub.s16 instead of sub.u16.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (copysign<mode>3): Allow immediate\n+\tfloating point constants as operands 1 and/or 2.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/104345\n+\t* config/nvptx/nvptx.md (sel_true<mode>): Fix indentation.\n+\t(sel_false<mode>): Likewise.\n+\t(define_code_iterator eqne): New code iterator for EQ and NE.\n+\t(*selp<mode>_neg_<code>): New define_insn_and_split to optimize\n+\tthe negation of a selp instruction.\n+\t(*selp<mode>_not_<code>): New define_insn_and_split to optimize\n+\tthe bitwise not of a selp instruction.\n+\t(*setcc_int<mode>): Use set instruction for neg:SI of a selp.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (any_logic): Move code iterator earlier\n+\tin machine description.\n+\t(logic): Move code attribute earlier in machine description.\n+\t(ilogic): New code attribute, like logic but \"ior\" for IOR.\n+\t(and<mode>3, ior<mode>3, xor<mode>3): Delete. Replace with...\n+\t(<ilogic><mode>3): New define_insn for HSDIM logic operations.\n+\t(<ilogic>bi3): New define_insn for BI mode logic operations.\n+\t(define_split): Lower logic operations from integer modes to\n+\tBI mode predicate operations.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (UNSPEC_ISINF): New UNSPEC.\n+\t(one_cmplbi2): New define_insn for not.pred.\n+\t(mulditi3): New define_expand for signed widening multiply.\n+\t(umulditi3): New define_expand for unsigned widening multiply.\n+\t(smul<mode>3_highpart): New define_insn for signed highpart mult.\n+\t(umul<mode>3_highpart): New define_insn for unsigned highpart mult.\n+\t(*smulhi3_highpart_2): Renamed from smulhi3_highpart.\n+\t(*smulsi3_highpart_2): Renamed from smulsi3_highpart.\n+\t(*umulhi3_highpart_2): Renamed from umulhi3_highpart.\n+\t(*umulsi3_highpart_2): Renamed from umulsi3_highpart.\n+\t(*setcc<mode>_from_not_bi): New define_insn.\n+\t(*setcc_isinf<mode>): New define_insn for testp.infinite.\n+\t(isinf<mode>2): New define_expand.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (cmp<mode>): Renamed from *cmp<mode>.\n+\t(setcc<mode>_from_bi): Additionally support QImode.\n+\t(extendbi<mode>2): Additionally support QImode.\n+\t(zero_extendbi<mode>2): Additionally support QImode.\n+\t(any_sbinary, any_ubinary, any_sunary, any_uunary): New code\n+\titerators for signed and unsigned, binary and unary operations.\n+\t(<sbinary>qi3, <ubinary>qi3, <sunary>qi2, <uunary>qi2): New\n+\texpanders to perform QImode operations using SImode instructions.\n+\t(cstoreqi4): New define_expand.\n+\t(*ext_truncsi2_qi): New define_insn.\n+\t(*zext_truncsi2_qi): New define_insn.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (*cmpf): New define_insn.\n+\t(cstorehf4): New define_expand.\n+\t(fmahf4): New define_insn.\n+\t(neghf2): New define_insn.\n+\t(abshf2): New define_insn.\n+\n+2022-02-10  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/install.texi (Specific): Change the www.bitwizard.nl\n+\treference to use https.\n+\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* gimplify.cc (gimplify_scan_omp_clauses): Added cases for\n+\tOMP_CLAUSE_HAS_DEVICE_ADDR\n+\tand handle array sections.\n+\t(gimplify_adjust_omp_clauses): Added OMP_CLAUSE_HAS_DEVICE_ADDR case.\n+\t* omp-low.cc (scan_sharing_clauses): Handle OMP_CLAUSE_HAS_DEVICE_ADDR.\n+\t(lower_omp_target): Same.\n+\t* tree-core.h (enum omp_clause_code): Same.\n+\t* tree-nested.cc (convert_nonlocal_omp_clauses): Same.\n+\t(convert_local_omp_clauses): Same.\n+\t* tree-pretty-print.cc (dump_omp_clause): Same.\n+\t* tree.cc: Same.\n+\n+2022-02-10  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* auto-profile.cc (afdo_indirect_call): Don't attempt to promote indirect calls\n+\tthat will result in direct recursive calls.\n+\n+2022-02-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/104474\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_sve_expand_vector_init_handle_trailing_constants):\n+\tUse CONST0_RTX instead of const0_rtx for the non-constant elements.\n+\n 2022-02-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/104462"}, {"sha": "f22e11ed9b089c9b240007ca2a1a094bd15bf64e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1 +1 @@\n-20220210\n+20220211"}, {"sha": "ca3e9885904920db241db4453ddfff2691780be8", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,14 @@\n+2022-02-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98797\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_sub_svalue): Generalize getting\n+\tindividual chars of a STRING_CST from element_region to any\n+\tsubregion which is a concrete access of a single byte from its\n+\tparent region.\n+\t* region.cc (region::get_relative_concrete_byte_range): New.\n+\t* region.h (region::get_relative_concrete_byte_range): New decl.\n+\n 2022-02-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104452"}, {"sha": "f958e32294a95fff8c070718b78d283412d7e9f5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,9 @@\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* c-omp.cc (c_omp_split_clauses): Added OMP_CLAUSE_HAS_DEVICE_ADDR case.\n+\t* c-pragma.h (enum pragma_kind): Added 5.1 in comment.\n+\t(enum pragma_omp_clause): Added PRAGMA_OMP_CLAUSE_HAS_DEVICE_ADDR.\n+\n 2022-02-09  Jason Merrill  <jason@redhat.com>\n \n \t* c-cppbuiltin.cc (c_cpp_builtins): Update values"}, {"sha": "29c7b747bbd49d477b431b043b4572e4553ce7c1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,16 @@\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* c-parser.cc (c_parser_omp_clause_name): Parse 'has_device_addr'\n+\tclause.\n+\t(c_parser_omp_variable_list): Handle array sections.\n+\t(c_parser_omp_clause_has_device_addr): Added.\n+\t(c_parser_omp_all_clauses): Added PRAGMA_OMP_CLAUSE_HAS_DEVICE_ADDR\n+\tcase.\n+\t(c_parser_omp_target_exit_data): Added HAS_DEVICE_ADDR to\n+\tOMP_CLAUSE_MASK.\n+\t* c-typeck.cc (handle_omp_array_sections): Handle clause restrictions.\n+\t(c_finish_omp_clauses): Handle array sections.\n+\n 2022-02-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/104427"}, {"sha": "5a4bb7307fc4c2747dda2fa5e4ffc2330d634792", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,29 @@\n+2022-02-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* module.cc (depset::hash::add_specializations): Use\n+\tSTRIP_TEMPLATE.\n+\n+2022-02-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c++/102204\n+\t* decl2.cc (cp_omp_mappable_type_1): Remove check for virtual\n+\tmembers as those are permitted since OpenMP 5.0.\n+\n+2022-02-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (filter_memfn_lookup): Handle dependent USING_DECL\n+\tbetter.\n+\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* parser.cc (cp_parser_omp_clause_name): Parse 'has_device_addr' clause.\n+\t(cp_parser_omp_var_list_no_open): Handle array sections.\n+\t(cp_parser_omp_all_clauses): Added PRAGMA_OMP_CLAUSE_HAS_DEVICE_ADDR\n+\tcase.\n+\t(cp_parser_omp_target_update): Added HAS_DEVICE_ADDR to OMP_CLAUSE_MASK.\n+\t* semantics.cc (handle_omp_array_sections): Handle clause restrictions.\n+\t(finish_omp_clauses): Handle array sections.\n+\n 2022-02-09  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/104432"}, {"sha": "4a1e6c647dd2fa1dbc555bd8328eedf4838e87bf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,28 @@\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-common.cc (GFC_EQUIV_FMT): New macro respecting the\n+\ttarget's NO_DOT_IN_LABEL and NO_DOLLAR_IN_LABEL preferences.\n+\t(build_equiv_decl): Use GFC_EQUIV_FMT here.\n+\n+2022-02-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/104329\n+\t* openmp.cc (resolve_omp_atomic): Defer extra-code assert after\n+\tother diagnostics.\n+\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* dump-parse-tree.cc (show_omp_clauses): Added OMP_LIST_HAS_DEVICE_ADDR\n+\tcase.\n+\t* gfortran.h: Added OMP_LIST_HAS_DEVICE_ADDR.\n+\t* openmp.cc (enum omp_mask2): Added OMP_CLAUSE_HAS_DEVICE_ADDR.\n+\t(gfc_match_omp_clauses): Parse HAS_DEVICE_ADDR clause.\n+\t(resolve_omp_clauses): Same.\n+\t* trans-openmp.cc (gfc_trans_omp_variable_list): Added\n+\tOMP_LIST_HAS_DEVICE_ADDR case.\n+\t(gfc_trans_omp_clauses): Firstprivatize of array descriptors.\n+\n 2022-02-09  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/66193"}, {"sha": "4767cd488c22e05dd501f97bc3aad394f5ddc5d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,140 @@\n+2022-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104373\n+\t* g++.dg/warn/Wuninitialized-32.C (operator new[]): Use __SIZE_TYPE__\n+\tas type of the first argument instead of unsigned long.\n+\n+2022-02-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c++/102204\n+\t* g++.dg/gomp/unmappable-1.C: Remove previously expected dg-message.\n+\n+2022-02-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98797\n+\t* gcc.dg/analyzer/casts-1.c: Mark xfails as fixed; add further\n+\ttest coverage for casts of string literals.\n+\n+2022-02-10  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle-end/100775\n+\t* gcc.target/arm/pr100775.c: New test.\n+\n+2022-02-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104469\n+\t* gcc.target/i386/pr104469.c: New test.\n+\n+2022-02-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104458\n+\t* gcc.target/i386/pr104458.c: Replace long with long long.\n+\n+2022-02-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102052\n+\t* gcc.dg/analyzer/fields.c (size_t): Use __SIZE_TYPE__ rather than\n+\thardcoding long unsigned int.\n+\t* gcc.dg/analyzer/gzio-3.c (size_t): Likewise.\n+\t* gcc.dg/analyzer/gzio-3a.c (size_t): Likewise.\n+\t* gcc.dg/analyzer/pr98969.c (test_1): Use __UINTPTR_TYPE__ rather\n+\tthan long int.\n+\t(test_2): Likewise.\n+\t* gcc.dg/analyzer/pr99716-2.c (test_mountpoint): Use \"rand\" rather\n+\tthan \"random\".\n+\t* gcc.dg/analyzer/pr99774-1.c (size_t): Use __SIZE_TYPE__ rather\n+\tthan hardcoding long unsigned int.\n+\t* gcc.dg/analyzer/strndup-1.c: Add MinGW to targets that don't\n+\timplement strndup.\n+\t* gcc.dg/analyzer/zlib-5.c (size_t): Use __SIZE_TYPE__ rather\n+\tthan hardcoding long unsigned int.\n+\n+2022-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104373\n+\t* g++.dg/warn/Wuninitialized-32.C: New testcase.\n+\t* gcc.dg/uninit-pr20644-O0.c: Remove XFAIL.\n+\n+2022-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104467\n+\t* gcc.dg/torture/pr104467.c: New testcase.\n+\n+2022-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104466\n+\t* gfortran.dg/pr104466.f90: New testcase.\n+\n+2022-02-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/atomic-store-2.c: New test.\n+\n+2022-02-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/atomic-store-1.c: New test.\n+\t* gcc.target/nvptx/atomic-store-3.c: New test.\n+\t* gcc.target/nvptx/stack-atomics-run.c: Update.\n+\n+2022-02-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/104329\n+\t* gfortran.dg/gomp/atomic-28.f90: New test.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/104345\n+\t* gcc.target/nvptx/neg-selp.c: New test case.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/bool-1.c: Update.\n+\t* gcc.target/nvptx/bool-2.c: New test case for and.pred.\n+\t* gcc.target/nvptx/bool-3.c: New test case for or.pred.\n+\t* gcc.target/nvptx/bool-4.c: New test case for xor.pred.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/mul-hi64.c: New test case.\n+\t* gcc.target/nvptx/umul-hi64.c: New test case.\n+\t* gcc.target/nvptx/mul-wide64.c: New test case.\n+\t* gcc.target/nvptx/umul-wide64.c: New test case.\n+\t* gcc.target/nvptx/isinf.c: New test case.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/bool-1.c: New test case.\n+\n+2022-02-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/float16-3.c: New test case for neghf2.\n+\t* gcc.target/nvptx/float16-4.c: New test case for abshf2.\n+\t* gcc.target/nvptx/float16-5.c: New test case for fmahf4.\n+\t* gcc.target/nvptx/float16-6.c: New test case.\n+\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* c-c++-common/gomp/clauses-1.c: Added has_device_addr to test cases.\n+\t* g++.dg/gomp/attrs-1.C: Added has_device_addr to test cases.\n+\t* g++.dg/gomp/attrs-2.C: Added has_device_addr to test cases.\n+\t* c-c++-common/gomp/target-has-device-addr-1.c: New test.\n+\t* c-c++-common/gomp/target-has-device-addr-2.c: New test.\n+\t* c-c++-common/gomp/target-is-device-ptr-1.c: New test.\n+\t* c-c++-common/gomp/target-is-device-ptr-2.c: New test.\n+\t* gfortran.dg/gomp/is_device_ptr-3.f90: New test.\n+\t* gfortran.dg/gomp/target-has-device-addr-1.f90: New test.\n+\t* gfortran.dg/gomp/target-has-device-addr-2.f90: New test.\n+\n+2022-02-10  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* g++.dg/tree-prof/indir-call-recursive-inlining.C : New test.\n+\n+2022-02-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/104474\n+\t* gcc.target/aarch64/sve/pr104474-1.c: New test.\n+\t* gcc.target/aarch64/sve/pr104474-2.c: New test.\n+\t* gcc.target/aarch64/sve/pr104474-3.c: New test.\n+\n 2022-02-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/uninit-1.c: Add test coverage for shifts,"}, {"sha": "e04e6635ad6dbf753ad6ec0772c5270354b0bc32", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,24 @@\n+2022-02-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c++/102204\n+\t* testsuite/libgomp.c++/target-virtual-1.C: New test.\n+\n+2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* libgomp.texi: Updated entry for HAS_DEVICE_ADDR.\n+\t* target.c (copy_firstprivate_data): Copy only if host address is not\n+\tNULL.\n+\t* testsuite/libgomp.c++/target-has-device-addr-2.C: New test.\n+\t* testsuite/libgomp.c++/target-has-device-addr-4.C: New test.\n+\t* testsuite/libgomp.c++/target-has-device-addr-5.C: New test.\n+\t* testsuite/libgomp.c++/target-has-device-addr-6.C: New test.\n+\t* testsuite/libgomp.c-c++-common/target-has-device-addr-1.c: New test.\n+\t* testsuite/libgomp.c/target-has-device-addr-3.c: New test.\n+\t* testsuite/libgomp.fortran/target-has-device-addr-1.f90: New test.\n+\t* testsuite/libgomp.fortran/target-has-device-addr-2.f90: New test.\n+\t* testsuite/libgomp.fortran/target-has-device-addr-3.f90: New test.\n+\t* testsuite/libgomp.fortran/target-has-device-addr-4.f90: New test.\n+\n 2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/104385"}, {"sha": "b19a6d8e2462236c85979cf44d73b82da37f3a33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a645583d4d68eecdd9101e1013e7bf01907ea786/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a645583d4d68eecdd9101e1013e7bf01907ea786/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a645583d4d68eecdd9101e1013e7bf01907ea786", "patch": "@@ -1,3 +1,23 @@\n+2022-02-10  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\t* include/bits/atomic_wait.h (__waiter_base::_S_do_spin,\n+\t__waiter_base::_S_do_spin_v): Change memory order from relaxed\n+\tto acquire.\n+\n+2022-02-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/c_compatibility/stdatomic.h (atomic_fetch_xor): Add\n+\tusing-declaration.\n+\t(atomic_fetch_xor_explicit): Likewise.\n+\t* testsuite/29_atomics/headers/stdatomic.h/c_compat.cc: Check\n+\tarithmetic and logical operations for atomic_int.\n+\n+2022-02-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/dir-common.h (_GLIBCXX_HAVE_DIRFD): Undefine\n+\twhen <dirent.h> is not available.\n+\t(_GLIBCXX_HAVE_UNLINKAT):  Likewise.\n+\n 2022-02-09  Thomas Rodgers  <rodgert@appliantology.com>\n \n \tPR libstdc++/104442"}]}