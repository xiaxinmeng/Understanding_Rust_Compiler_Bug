{"sha": "37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiNWVjOGZjZDA3OTk5ZWQ0ZDZkYzAxMjZmYzQ4ODBhZWQzNmVmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-28T21:20:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-28T21:20:26Z"}, "message": "re PR middle-end/56461 (GCC is leaking lots of memory)\n\n\tPR middle-end/56461\n\t* tree-vectorizer.h (vect_get_slp_defs): Change 3rd argument\n\ttype to vec<vec<tree> > *.\n\t* tree-vect-slp.c (vect_get_slp_defs): Likewise.  Change vec_defs\n\tto be vec<tree> instead of vec<tree> *, set vec_defs\n\tto vNULL and call vec_defs.create (number_of_vects), adjust other\n\tuses of vec_defs.\n\t* tree-vect-stmts.c (vect_get_vec_defs, vectorizable_call,\n\tvectorizable_condition): Adjust vect_get_slp_defs callers.\n\nFrom-SVN: r196360", "tree": {"sha": "897ae70d6d0e70bf7f7d7013342324fa45972e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/897ae70d6d0e70bf7f7d7013342324fa45972e27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b3bb3f347116edf9a2badd3ad3f461686583b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3bb3f347116edf9a2badd3ad3f461686583b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3bb3f347116edf9a2badd3ad3f461686583b33"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "833ca4ee355136c61b0e7f4a86dcf9784eab08cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "patch": "@@ -1,3 +1,15 @@\n+2013-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/56461\n+\t* tree-vectorizer.h (vect_get_slp_defs): Change 3rd argument\n+\ttype to vec<vec<tree> > *.\n+\t* tree-vect-slp.c (vect_get_slp_defs): Likewise.  Change vec_defs\n+\tto be vec<tree> instead of vec<tree> *, set vec_defs\n+\tto vNULL and call vec_defs.create (number_of_vects), adjust other\n+\tuses of vec_defs.\n+\t* tree-vect-stmts.c (vect_get_vec_defs, vectorizable_call,\n+\tvectorizable_condition): Adjust vect_get_slp_defs callers.\n+\n 2013-02-28  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "873c18e74ed0e619265e2f0af2354db22b332b27", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "patch": "@@ -2614,14 +2614,14 @@ vect_get_slp_vect_defs (slp_tree slp_node, vec<tree> *vec_oprnds)\n \n void\n vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n-                   vec<slp_void_p> *vec_oprnds, int reduc_index)\n+\t\t   vec<vec<tree> > *vec_oprnds, int reduc_index)\n {\n   gimple first_stmt;\n   int number_of_vects = 0, i;\n   unsigned int child_index = 0;\n   HOST_WIDE_INT lhs_size_unit, rhs_size_unit;\n   slp_tree child = NULL;\n-  vec<tree> *vec_defs;\n+  vec<tree> vec_defs;\n   tree oprnd;\n   bool vectorized_defs;\n \n@@ -2676,19 +2676,20 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n         }\n \n       /* Allocate memory for vectorized defs.  */\n-      vec_alloc (vec_defs, number_of_vects);\n+      vec_defs = vNULL;\n+      vec_defs.create (number_of_vects);\n \n       /* For reduction defs we call vect_get_constant_vectors (), since we are\n          looking for initial loop invariant values.  */\n       if (vectorized_defs && reduc_index == -1)\n         /* The defs are already vectorized.  */\n-        vect_get_slp_vect_defs (child, vec_defs);\n+\tvect_get_slp_vect_defs (child, &vec_defs);\n       else\n         /* Build vectors from scalar defs.  */\n-        vect_get_constant_vectors (oprnd, slp_node, vec_defs, i,\n+\tvect_get_constant_vectors (oprnd, slp_node, &vec_defs, i,\n                                    number_of_vects, reduc_index);\n \n-      vec_oprnds->quick_push ((slp_void_p) vec_defs);\n+      vec_oprnds->quick_push (vec_defs);\n \n       /* For reductions, we only need initial values.  */\n       if (reduc_index != -1)"}, {"sha": "7ba76cd5f2eb8c0bad114088106a4614a7cf7b71", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "patch": "@@ -1583,7 +1583,7 @@ vect_get_vec_defs (tree op0, tree op1, gimple stmt,\n       int nops = (op1 == NULL_TREE) ? 1 : 2;\n       vec<tree> ops;\n       ops.create (nops);\n-      vec<slp_void_p> vec_defs;\n+      vec<vec<tree> > vec_defs;\n       vec_defs.create (nops);\n \n       ops.quick_push (op0);\n@@ -1592,9 +1592,9 @@ vect_get_vec_defs (tree op0, tree op1, gimple stmt,\n \n       vect_get_slp_defs (ops, slp_node, &vec_defs, reduc_index);\n \n-      *vec_oprnds0 = *((vec<tree> *) vec_defs[0]);\n+      *vec_oprnds0 = vec_defs[0];\n       if (op1)\n-        *vec_oprnds1 = *((vec<tree> *) vec_defs[1]);\n+\t*vec_oprnds1 = vec_defs[1];\n \n       ops.release ();\n       vec_defs.release ();\n@@ -1882,22 +1882,22 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n \t  if (slp_node)\n \t    {\n-\t      vec<slp_void_p> vec_defs;\n+\t      vec<vec<tree> > vec_defs;\n \t      vec_defs.create (nargs);\n \t      vec<tree> vec_oprnds0;\n \n \t      for (i = 0; i < nargs; i++)\n \t\tvargs.quick_push (gimple_call_arg (stmt, i));\n \t      vect_get_slp_defs (vargs, slp_node, &vec_defs, -1);\n-\t      vec_oprnds0 = *((vec<tree> *) vec_defs[0]);\n+\t      vec_oprnds0 = vec_defs[0];\n \n \t      /* Arguments are ready.  Create the new vector stmt.  */\n \t      FOR_EACH_VEC_ELT (vec_oprnds0, i, vec_oprnd0)\n \t\t{\n \t\t  size_t k;\n \t\t  for (k = 0; k < nargs; k++)\n \t\t    {\n-\t\t      vec<tree> vec_oprndsk = *((vec<tree> *) vec_defs[k]);\n+\t\t      vec<tree> vec_oprndsk = vec_defs[k];\n \t\t      vargs[k] = vec_oprndsk[i];\n \t\t    }\n \t\t  new_stmt = gimple_build_call_vec (fndecl, vargs);\n@@ -1909,7 +1909,7 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n \t      for (i = 0; i < nargs; i++)\n \t\t{\n-\t\t  vec<tree> vec_oprndsi = *((vec<tree> *) vec_defs[i]);\n+\t\t  vec<tree> vec_oprndsi = vec_defs[i];\n \t\t  vec_oprndsi.release ();\n \t\t}\n \t      vec_defs.release ();\n@@ -1958,14 +1958,14 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n \t  if (slp_node)\n \t    {\n-\t      vec<slp_void_p> vec_defs;\n+\t      vec<vec<tree> > vec_defs;\n \t      vec_defs.create (nargs);\n \t      vec<tree> vec_oprnds0;\n \n \t      for (i = 0; i < nargs; i++)\n \t\tvargs.quick_push (gimple_call_arg (stmt, i));\n \t      vect_get_slp_defs (vargs, slp_node, &vec_defs, -1);\n-\t      vec_oprnds0 = *((vec<tree> *) vec_defs[0]);\n+\t      vec_oprnds0 = vec_defs[0];\n \n \t      /* Arguments are ready.  Create the new vector stmt.  */\n \t      for (i = 0; vec_oprnds0.iterate (i, &vec_oprnd0); i += 2)\n@@ -1974,7 +1974,7 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t  vargs.truncate (0);\n \t\t  for (k = 0; k < nargs; k++)\n \t\t    {\n-\t\t      vec<tree> vec_oprndsk = *((vec<tree> *) vec_defs[k]);\n+\t\t      vec<tree> vec_oprndsk = vec_defs[k];\n \t\t      vargs.quick_push (vec_oprndsk[i]);\n \t\t      vargs.quick_push (vec_oprndsk[i + 1]);\n \t\t    }\n@@ -1987,7 +1987,7 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n \t      for (i = 0; i < nargs; i++)\n \t\t{\n-\t\t  vec<tree> vec_oprndsi = *((vec<tree> *) vec_defs[i]);\n+\t\t  vec<tree> vec_oprndsi = vec_defs[i];\n \t\t  vec_oprndsi.release ();\n \t\t}\n \t      vec_defs.release ();\n@@ -5392,18 +5392,18 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n             {\n               vec<tree> ops;\n \t      ops.create (4);\n-              vec<slp_void_p> vec_defs;\n+\t      vec<vec<tree> > vec_defs;\n \n \t      vec_defs.create (4);\n               ops.safe_push (TREE_OPERAND (cond_expr, 0));\n               ops.safe_push (TREE_OPERAND (cond_expr, 1));\n               ops.safe_push (then_clause);\n               ops.safe_push (else_clause);\n               vect_get_slp_defs (ops, slp_node, &vec_defs, -1);\n-              vec_oprnds3 = *((vec<tree> *) vec_defs.pop ());\n-              vec_oprnds2 = *((vec<tree> *) vec_defs.pop ());\n-              vec_oprnds1 = *((vec<tree> *) vec_defs.pop ());\n-              vec_oprnds0 = *((vec<tree> *) vec_defs.pop ());\n+\t      vec_oprnds3 = vec_defs.pop ();\n+\t      vec_oprnds2 = vec_defs.pop ();\n+\t      vec_oprnds1 = vec_defs.pop ();\n+\t      vec_oprnds0 = vec_defs.pop ();\n \n               ops.release ();\n               vec_defs.release ();"}, {"sha": "f2ec7135a9bf50dcadd8b840abc26bc417c530f2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "patch": "@@ -978,7 +978,7 @@ extern bool vect_analyze_slp (loop_vec_info, bb_vec_info);\n extern bool vect_make_slp_decision (loop_vec_info);\n extern void vect_detect_hybrid_slp (loop_vec_info);\n extern void vect_get_slp_defs (vec<tree> , slp_tree,\n-\t\t\t       vec<slp_void_p> *, int);\n+\t\t\t       vec<vec<tree> > *, int);\n \n extern LOC find_bb_location (basic_block);\n extern bb_vec_info vect_slp_analyze_bb (basic_block);"}]}