{"sha": "d3da83f66f13d371f8bb73443fed32d5c820484d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkYTgzZjY2ZjEzZDM3MWY4YmI3MzQ0M2ZlZDMyZDVjODIwNDg0ZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-05T09:37:47Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-05T10:29:47Z"}, "message": "d: Merge upstream dmd 6d5bffa54\n\nRemoves an unused parameter from Condition::include(), all callers have\nbeen updated in the front-end.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11229\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 6d5bffa54.\n\t* d-builtins.cc (maybe_set_builtin_1): Update call to\n\tCondition::include().\n\t* decl.cc (DeclVisitor::visit(AttribDeclaration *)): Likewise.\n\t* types.cc (layout_aggregate_members): Likewise.", "tree": {"sha": "2455b1d0f737e396e800dabbaa653a42bb162005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2455b1d0f737e396e800dabbaa653a42bb162005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3da83f66f13d371f8bb73443fed32d5c820484d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3da83f66f13d371f8bb73443fed32d5c820484d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3da83f66f13d371f8bb73443fed32d5c820484d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3da83f66f13d371f8bb73443fed32d5c820484d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9758d196f57950ea89baa5cdf6ebd7125b5056e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9758d196f57950ea89baa5cdf6ebd7125b5056e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9758d196f57950ea89baa5cdf6ebd7125b5056e0"}], "stats": {"total": 113, "additions": 52, "deletions": 61}, "files": [{"sha": "61014cbea516b4934021fc85d31ff8bf6449aabd", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -668,7 +668,7 @@ maybe_set_builtin_1 (Dsymbol *d)\n   if (ad != NULL)\n     {\n       /* Recursively search through attribute decls.  */\n-      Dsymbols *decls = ad->include (NULL, NULL);\n+      Dsymbols *decls = ad->include (NULL);\n       if (decls && decls->length)\n \t{\n \t  for (size_t i = 0; i < decls->length; i++)"}, {"sha": "d5f8797b55e4e07318498dfe46dd44fa8293e7fc", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -232,7 +232,7 @@ class DeclVisitor : public Visitor\n \n   void visit (AttribDeclaration *d)\n   {\n-    Dsymbols *ds = d->include (NULL, NULL);\n+    Dsymbols *ds = d->include (NULL);\n \n     if (!ds)\n       return;"}, {"sha": "0a4fb7673963ce18c7c62d70b01420b3f893d409", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -1,4 +1,4 @@\n-48d704f082ebe8b199a9ef7712c223216cd70d3a\n+6d5bffa54f7da21d388d9999e586fd8a11ebcdb1\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "02761ab03552de4ae91558152f9b89ca71119253", "filename": "gcc/d/dmd/attrib.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fattrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fattrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -41,7 +41,7 @@ AttribDeclaration::AttribDeclaration(Dsymbols *decl)\n     this->decl = decl;\n }\n \n-Dsymbols *AttribDeclaration::include(Scope *, ScopeDsymbol *)\n+Dsymbols *AttribDeclaration::include(Scope *)\n {\n     if (errors)\n         return NULL;\n@@ -51,7 +51,7 @@ Dsymbols *AttribDeclaration::include(Scope *, ScopeDsymbol *)\n \n int AttribDeclaration::apply(Dsymbol_apply_ft_t fp, void *param)\n {\n-    Dsymbols *d = include(_scope, NULL);\n+    Dsymbols *d = include(_scope);\n \n     if (d)\n     {\n@@ -111,7 +111,7 @@ Scope *AttribDeclaration::newScope(Scope *sc)\n \n void AttribDeclaration::addMember(Scope *sc, ScopeDsymbol *sds)\n {\n-    Dsymbols *d = include(sc, sds);\n+    Dsymbols *d = include(sc);\n \n     if (d)\n     {\n@@ -131,7 +131,7 @@ void AttribDeclaration::addMember(Scope *sc, ScopeDsymbol *sds)\n \n void AttribDeclaration::setScope(Scope *sc)\n {\n-    Dsymbols *d = include(sc, NULL);\n+    Dsymbols *d = include(sc);\n \n     //printf(\"\\tAttribDeclaration::setScope '%s', d = %p\\n\",toChars(), d);\n     if (d)\n@@ -151,7 +151,7 @@ void AttribDeclaration::setScope(Scope *sc)\n \n void AttribDeclaration::importAll(Scope *sc)\n {\n-    Dsymbols *d = include(sc, NULL);\n+    Dsymbols *d = include(sc);\n \n     //printf(\"\\tAttribDeclaration::importAll '%s', d = %p\\n\", toChars(), d);\n     if (d)\n@@ -174,7 +174,7 @@ void AttribDeclaration::semantic(Scope *sc)\n     if (semanticRun != PASSinit)\n         return;\n     semanticRun = PASSsemantic;\n-    Dsymbols *d = include(sc, NULL);\n+    Dsymbols *d = include(sc);\n \n     //printf(\"\\tAttribDeclaration::semantic '%s', d = %p\\n\",toChars(), d);\n     if (d)\n@@ -195,7 +195,7 @@ void AttribDeclaration::semantic(Scope *sc)\n \n void AttribDeclaration::semantic2(Scope *sc)\n {\n-    Dsymbols *d = include(sc, NULL);\n+    Dsymbols *d = include(sc);\n \n     if (d)\n     {\n@@ -214,7 +214,7 @@ void AttribDeclaration::semantic2(Scope *sc)\n \n void AttribDeclaration::semantic3(Scope *sc)\n {\n-    Dsymbols *d = include(sc, NULL);\n+    Dsymbols *d = include(sc);\n \n     if (d)\n     {\n@@ -236,7 +236,7 @@ void AttribDeclaration::addComment(const utf8_t *comment)\n     //printf(\"AttribDeclaration::addComment %s\\n\", comment);\n     if (comment)\n     {\n-        Dsymbols *d = include(NULL, NULL);\n+        Dsymbols *d = include(NULL);\n \n         if (d)\n         {\n@@ -252,7 +252,7 @@ void AttribDeclaration::addComment(const utf8_t *comment)\n \n void AttribDeclaration::setFieldOffset(AggregateDeclaration *ad, unsigned *poffset, bool isunion)\n {\n-    Dsymbols *d = include(NULL, NULL);\n+    Dsymbols *d = include(NULL);\n \n     if (d)\n     {\n@@ -266,7 +266,7 @@ void AttribDeclaration::setFieldOffset(AggregateDeclaration *ad, unsigned *poffs\n \n bool AttribDeclaration::hasPointers()\n {\n-    Dsymbols *d = include(NULL, NULL);\n+    Dsymbols *d = include(NULL);\n \n     if (d)\n     {\n@@ -282,7 +282,7 @@ bool AttribDeclaration::hasPointers()\n \n bool AttribDeclaration::hasStaticCtorOrDtor()\n {\n-    Dsymbols *d = include(NULL, NULL);\n+    Dsymbols *d = include(NULL);\n \n     if (d)\n     {\n@@ -303,14 +303,14 @@ const char *AttribDeclaration::kind() const\n \n bool AttribDeclaration::oneMember(Dsymbol **ps, Identifier *ident)\n {\n-    Dsymbols *d = include(NULL, NULL);\n+    Dsymbols *d = include(NULL);\n \n     return Dsymbol::oneMembers(d, ps, ident);\n }\n \n void AttribDeclaration::checkCtorConstInit()\n {\n-    Dsymbols *d = include(NULL, NULL);\n+    Dsymbols *d = include(NULL);\n \n     if (d)\n     {\n@@ -327,7 +327,7 @@ void AttribDeclaration::checkCtorConstInit()\n \n void AttribDeclaration::addLocalClass(ClassDeclarations *aclasses)\n {\n-    Dsymbols *d = include(NULL, NULL);\n+    Dsymbols *d = include(NULL);\n \n     if (d)\n     {\n@@ -383,7 +383,7 @@ bool StorageClassDeclaration::oneMember(Dsymbol **ps, Identifier *ident)\n \n void StorageClassDeclaration::addMember(Scope *sc, ScopeDsymbol *sds)\n {\n-    Dsymbols *d = include(sc, sds);\n+    Dsymbols *d = include(sc);\n     if (d)\n     {\n         Scope *sc2 = newScope(sc);\n@@ -922,7 +922,7 @@ static unsigned setMangleOverride(Dsymbol *s, char *sym)\n \n     if (ad)\n     {\n-        Dsymbols *decls = ad->include(NULL, NULL);\n+        Dsymbols *decls = ad->include(NULL);\n         unsigned nestedCount = 0;\n \n         if (decls && decls->length)\n@@ -1207,7 +1207,7 @@ bool ConditionalDeclaration::oneMember(Dsymbol **ps, Identifier *ident)\n     //printf(\"ConditionalDeclaration::oneMember(), inc = %d\\n\", condition->inc);\n     if (condition->inc)\n     {\n-        Dsymbols *d = condition->include(NULL, NULL) ? decl : elsedecl;\n+        Dsymbols *d = condition->include(NULL) ? decl : elsedecl;\n         return Dsymbol::oneMembers(d, ps, ident);\n     }\n     else\n@@ -1221,20 +1221,20 @@ bool ConditionalDeclaration::oneMember(Dsymbol **ps, Identifier *ident)\n \n // Decide if 'then' or 'else' code should be included\n \n-Dsymbols *ConditionalDeclaration::include(Scope *sc, ScopeDsymbol *sds)\n+Dsymbols *ConditionalDeclaration::include(Scope *sc)\n {\n     //printf(\"ConditionalDeclaration::include(sc = %p) _scope = %p\\n\", sc, _scope);\n \n     if (errors)\n         return NULL;\n \n     assert(condition);\n-    return condition->include(_scope ? _scope : sc, sds) ? decl : elsedecl;\n+    return condition->include(_scope ? _scope : sc) ? decl : elsedecl;\n }\n \n void ConditionalDeclaration::setScope(Scope *sc)\n {\n-    Dsymbols *d = include(sc, NULL);\n+    Dsymbols *d = include(sc);\n \n     //printf(\"\\tConditionalDeclaration::setScope '%s', d = %p\\n\",toChars(), d);\n     if (d)\n@@ -1299,7 +1299,7 @@ Dsymbol *StaticIfDeclaration::syntaxCopy(Dsymbol *s)\n  * Different from other AttribDeclaration subclasses, include() call requires\n  * the completion of addMember and setScope phases.\n  */\n-Dsymbols *StaticIfDeclaration::include(Scope *sc, ScopeDsymbol *)\n+Dsymbols *StaticIfDeclaration::include(Scope *sc)\n {\n     //printf(\"StaticIfDeclaration::include(sc = %p) _scope = %p\\n\", sc, _scope);\n \n@@ -1313,7 +1313,7 @@ Dsymbols *StaticIfDeclaration::include(Scope *sc, ScopeDsymbol *)\n         assert(scopesym);   // addMember is already done\n         assert(_scope);      // setScope is already done\n \n-        d = ConditionalDeclaration::include(_scope, scopesym);\n+        d = ConditionalDeclaration::include(_scope);\n \n         if (d && !addisdone)\n         {\n@@ -1338,7 +1338,7 @@ Dsymbols *StaticIfDeclaration::include(Scope *sc, ScopeDsymbol *)\n     }\n     else\n     {\n-        d = ConditionalDeclaration::include(sc, scopesym);\n+        d = ConditionalDeclaration::include(sc);\n         onStack = false;\n         return d;\n     }\n@@ -1423,7 +1423,7 @@ bool StaticForeachDeclaration::oneMember(Dsymbol **ps, Identifier *ident)\n     return false;\n }\n \n-Dsymbols *StaticForeachDeclaration::include(Scope *, ScopeDsymbol *)\n+Dsymbols *StaticForeachDeclaration::include(Scope *)\n {\n     if (errors || onStack)\n         return NULL;"}, {"sha": "a20e96bc92952366d19b76704f983dd60c8fb9ce", "filename": "gcc/d/dmd/attrib.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fattrib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fattrib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.h?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -28,7 +28,7 @@ class AttribDeclaration : public Dsymbol\n     Dsymbols *decl;     // array of Dsymbol's\n \n     AttribDeclaration(Dsymbols *decl);\n-    virtual Dsymbols *include(Scope *sc, ScopeDsymbol *sds);\n+    virtual Dsymbols *include(Scope *sc);\n     int apply(Dsymbol_apply_ft_t fp, void *param);\n     static Scope *createNewScope(Scope *sc,\n         StorageClass newstc, LINK linkage, CPPMANGLE cppmangle, Prot protection,\n@@ -180,7 +180,7 @@ class ConditionalDeclaration : public AttribDeclaration\n     ConditionalDeclaration(Condition *condition, Dsymbols *decl, Dsymbols *elsedecl);\n     Dsymbol *syntaxCopy(Dsymbol *s);\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n-    Dsymbols *include(Scope *sc, ScopeDsymbol *sds);\n+    Dsymbols *include(Scope *sc);\n     void addComment(const utf8_t *comment);\n     void setScope(Scope *sc);\n     void accept(Visitor *v) { v->visit(this); }\n@@ -195,7 +195,7 @@ class StaticIfDeclaration : public ConditionalDeclaration\n \n     StaticIfDeclaration(Condition *condition, Dsymbols *decl, Dsymbols *elsedecl);\n     Dsymbol *syntaxCopy(Dsymbol *s);\n-    Dsymbols *include(Scope *sc, ScopeDsymbol *sds);\n+    Dsymbols *include(Scope *sc);\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     void setScope(Scope *sc);\n     void importAll(Scope *sc);\n@@ -216,7 +216,7 @@ class StaticForeachDeclaration : public AttribDeclaration\n     StaticForeachDeclaration(StaticForeach *sfe, Dsymbols *decl);\n     Dsymbol *syntaxCopy(Dsymbol *s);\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n-    Dsymbols *include(Scope *sc, ScopeDsymbol *sds);\n+    Dsymbols *include(Scope *sc);\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     void addComment(const utf8_t *comment);\n     void setScope(Scope *sc);"}, {"sha": "33d61edbcc80cc43c8bf9003f6264be422283c30", "filename": "gcc/d/dmd/canthrow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fcanthrow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fcanthrow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcanthrow.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -250,7 +250,7 @@ bool Dsymbol_canThrow(Dsymbol *s, FuncDeclaration *func, bool mustNotThrow)\n     ad = s->isAttribDeclaration();\n     if (ad)\n     {\n-        Dsymbols *decl = ad->include(NULL, NULL);\n+        Dsymbols *decl = ad->include(NULL);\n         if (decl && decl->length)\n         {\n             for (size_t i = 0; i < decl->length; i++)"}, {"sha": "88febdf5e1ed68023bc96279694c7d6a20490703", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -430,7 +430,7 @@ void printDepsConditional(Scope *sc, DVCondition* condition, const char* depType\n }\n \n \n-int DebugCondition::include(Scope *sc, ScopeDsymbol *)\n+int DebugCondition::include(Scope *sc)\n {\n     //printf(\"DebugCondition::include() level = %d, debuglevel = %d\\n\", level, global.params.debuglevel);\n     if (inc == 0)\n@@ -609,7 +609,7 @@ VersionCondition::VersionCondition(Module *mod, unsigned level, Identifier *iden\n {\n }\n \n-int VersionCondition::include(Scope *sc, ScopeDsymbol *)\n+int VersionCondition::include(Scope *sc)\n {\n     //printf(\"VersionCondition::include() level = %d, versionlevel = %d\\n\", level, global.params.versionlevel);\n     //if (ident) printf(\"\\tident = '%s'\\n\", ident->toChars());\n@@ -654,7 +654,7 @@ Condition *StaticIfCondition::syntaxCopy()\n     return new StaticIfCondition(loc, exp->syntaxCopy());\n }\n \n-int StaticIfCondition::include(Scope *sc, ScopeDsymbol *sds)\n+int StaticIfCondition::include(Scope *sc)\n {\n     if (inc == 0)\n     {\n@@ -666,7 +666,6 @@ int StaticIfCondition::include(Scope *sc, ScopeDsymbol *sds)\n         }\n \n         sc = sc->push(sc->scopesym);\n-        sc->sds = sds;                  // sds gets any addMember()\n \n         bool errors = false;\n         bool result = evalStaticCondition(sc, exp, exp, errors);"}, {"sha": "c32f7bba5e6fb5d8a1434eb5a89158baec1ee199", "filename": "gcc/d/dmd/cond.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fcond.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fcond.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.h?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -37,7 +37,7 @@ class Condition\n     Condition(Loc loc);\n \n     virtual Condition *syntaxCopy() = 0;\n-    virtual int include(Scope *sc, ScopeDsymbol *sds) = 0;\n+    virtual int include(Scope *sc) = 0;\n     virtual DebugCondition *isDebugCondition() { return NULL; }\n     virtual VersionCondition *isVersionCondition() { return NULL; }\n     virtual void accept(Visitor *v) { v->visit(this); }\n@@ -81,7 +81,7 @@ class DebugCondition : public DVCondition\n \n     DebugCondition(Module *mod, unsigned level, Identifier *ident);\n \n-    int include(Scope *sc, ScopeDsymbol *sds);\n+    int include(Scope *sc);\n     DebugCondition *isDebugCondition() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };\n@@ -95,7 +95,7 @@ class VersionCondition : public DVCondition\n \n     VersionCondition(Module *mod, unsigned level, Identifier *ident);\n \n-    int include(Scope *sc, ScopeDsymbol *sds);\n+    int include(Scope *sc);\n     VersionCondition *isVersionCondition() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };\n@@ -107,6 +107,6 @@ class StaticIfCondition : public Condition\n \n     StaticIfCondition(Loc loc, Expression *exp);\n     Condition *syntaxCopy();\n-    int include(Scope *sc, ScopeDsymbol *sds);\n+    int include(Scope *sc);\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "7c21ab2efe7a2ad458df91b4536caf31d250e3f5", "filename": "gcc/d/dmd/doc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -926,7 +926,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n              * Hence, Ddoc omits attributes from template members.\n              */\n \n-            Dsymbols *d = ad->include(NULL, NULL);\n+            Dsymbols *d = ad->include(NULL);\n \n             if (d)\n             {\n@@ -962,7 +962,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n             }\n \n             /* If generating doc comment, be careful because if we're inside\n-             * a template, then include(NULL, NULL) will fail.\n+             * a template, then include(NULL) will fail.\n              */\n             Dsymbols *d = cd->decl ? cd->decl : cd->elsedecl;\n             for (size_t i = 0; i < d->length; i++)"}, {"sha": "a5d56b2e4a7573dbf82ce53d8b96048ee9bc2a66", "filename": "gcc/d/dmd/dscope.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fdscope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fdscope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -64,7 +64,6 @@ Scope::Scope()\n     //printf(\"Scope::Scope() %p\\n\", this);\n     this->_module = NULL;\n     this->scopesym = NULL;\n-    this->sds = NULL;\n     this->enclosing = NULL;\n     this->parent = NULL;\n     this->sw = NULL;\n@@ -151,7 +150,6 @@ Scope *Scope::push()\n     //printf(\"Scope::push(this = %p) new = %p\\n\", this, s);\n     assert(!(flags & SCOPEfree));\n     s->scopesym = NULL;\n-    s->sds = NULL;\n     s->enclosing = this;\n     s->slabel = NULL;\n     s->nofree = 0;"}, {"sha": "f835192fe34614f99d8a9fc655d6b5c5c042d97b", "filename": "gcc/d/dmd/dsymbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fdsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fdsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -1488,7 +1488,7 @@ int ScopeDsymbol_foreach(Scope *sc, Dsymbols *members, ForeachDg dg, void *ctx,\n     {   Dsymbol *s = (*members)[i];\n \n         if (AttribDeclaration *a = s->isAttribDeclaration())\n-            result = ScopeDsymbol_foreach(sc, a->include(sc, NULL), dg, ctx, &n);\n+            result = ScopeDsymbol_foreach(sc, a->include(sc), dg, ctx, &n);\n         else if (TemplateMixin *tm = s->isTemplateMixin())\n             result = ScopeDsymbol_foreach(sc, tm->members, dg, ctx, &n);\n         else if (s->isTemplateInstance())"}, {"sha": "cec57d4a8e6e8a3545f340b433ad84fa6ba9b71c", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -2160,9 +2160,7 @@ class ExpressionSemanticVisitor : public Visitor\n                     if (m <= MATCHnomatch)\n                         goto Lno;\n                     s->semantic(sc);\n-                    if (sc->sds)\n-                        s->addMember(sc, sc->sds);\n-                    else if (!sc->insert(s))\n+                    if (!sc->insert(s))\n                         e->error(\"declaration %s is already defined\", s->toChars());\n \n                     unSpeculative(sc, s);\n@@ -2194,8 +2192,6 @@ class ExpressionSemanticVisitor : public Visitor\n              */\n             if (!tup && !sc->insert(s))\n                 e->error(\"declaration %s is already defined\", s->toChars());\n-            if (sc->sds)\n-                s->addMember(sc, sc->sds);\n \n             unSpeculative(sc, s);\n         }"}, {"sha": "20e8c426a7f2fac576c5719a57eab423157b51f7", "filename": "gcc/d/dmd/json.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fjson.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fjson.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fjson.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -596,7 +596,7 @@ class ToJsonVisitor : public Visitor\n \n     void visit(AttribDeclaration *d)\n     {\n-        Dsymbols *ds = d->include(NULL, NULL);\n+        Dsymbols *ds = d->include(NULL);\n \n         if (ds)\n         {"}, {"sha": "7456f7098f62d04f1438a21cd88e417e0d9249a9", "filename": "gcc/d/dmd/scope.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fscope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fscope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fscope.h?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -72,8 +72,6 @@ struct Scope\n \n     Module *_module;            // Root module\n     ScopeDsymbol *scopesym;     // current symbol\n-    ScopeDsymbol *sds;          // if in static if, and declaring new symbols,\n-                                // sds gets the addMember()\n     FuncDeclaration *func;      // function we are in\n     Dsymbol *parent;            // parent to use\n     LabelStatement *slabel;     // enclosing labelled statement"}, {"sha": "b0daed514b75aa8fab36a4332bfc87a957664f49", "filename": "gcc/d/dmd/statement.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fstatement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fstatement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -419,18 +419,18 @@ Statement *toStatement(Dsymbol *s)\n \n         void visit(ConditionalDeclaration *d)\n         {\n-            result = visitMembers(d->loc, d->include(NULL, NULL));\n+            result = visitMembers(d->loc, d->include(NULL));\n         }\n \n         void visit(StaticForeachDeclaration *d)\n         {\n             assert(d->sfe && !!d->sfe->aggrfe ^ !!d->sfe->rangefe);\n-            result = visitMembers(d->loc, d->include(NULL, NULL));\n+            result = visitMembers(d->loc, d->include(NULL));\n         }\n \n         void visit(CompileDeclaration *d)\n         {\n-            result = visitMembers(d->loc, d->include(NULL, NULL));\n+            result = visitMembers(d->loc, d->include(NULL));\n         }\n     };\n \n@@ -993,7 +993,7 @@ Statements *ConditionalStatement::flatten(Scope *sc)\n     Statement *s;\n \n     //printf(\"ConditionalStatement::flatten()\\n\");\n-    if (condition->include(sc, NULL))\n+    if (condition->include(sc))\n     {\n         DebugCondition *dc = condition->isDebugCondition();\n         if (dc)"}, {"sha": "3186db7e2a43d1d5915c73b9df9327e8107d2af5", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -2023,7 +2023,7 @@ class StatementSemanticVisitor : public Visitor\n         // If we can short-circuit evaluate the if statement, don't do the\n         // semantic analysis of the skipped code.\n         // This feature allows a limited form of conditional compilation.\n-        if (cs->condition->include(sc, NULL))\n+        if (cs->condition->include(sc))\n         {\n             DebugCondition *dc = cs->condition->isDebugCondition();\n             if (dc)"}, {"sha": "46cacf3e4c5d3c9464bc0d59e7c68ecce21b9ac3", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -119,7 +119,7 @@ static void collectUnitTests(Dsymbols *symbols, AA *uniqueUnitTests, Expressions\n \n             if (attrDecl)\n             {\n-                Dsymbols *decl = attrDecl->include(NULL, NULL);\n+                Dsymbols *decl = attrDecl->include(NULL);\n                 collectUnitTests(decl, uniqueUnitTests, unitTests);\n             }\n         }"}, {"sha": "e8073b860faa36213c3c2e3c8c0fbe16e6924bf0", "filename": "gcc/d/types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3da83f66f13d371f8bb73443fed32d5c820484d/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=d3da83f66f13d371f8bb73443fed32d5c820484d", "patch": "@@ -364,7 +364,7 @@ layout_aggregate_members (Dsymbols *members, tree context, bool inherited_p)\n       AttribDeclaration *attrib = sym->isAttribDeclaration ();\n       if (attrib != NULL)\n \t{\n-\t  Dsymbols *decls = attrib->include (NULL, NULL);\n+\t  Dsymbols *decls = attrib->include (NULL);\n \t  if (decls != NULL)\n \t    {\n \t      fields += layout_aggregate_members (decls, context, inherited_p);"}]}