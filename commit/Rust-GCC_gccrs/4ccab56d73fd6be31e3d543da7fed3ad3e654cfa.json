{"sha": "4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjYWI1NmQ3M2ZkNmJlMzFlM2Q1NDNkYTdmZWQzYWQzZTY1NGNmYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-08T15:53:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-08T15:53:56Z"}, "message": "Add selftest for pretty-print.c\n\ngcc/ChangeLog:\n\t* pretty-print.c: Include \"selftest.h\".\n\t(pp_format): Fix comment.\n\t(identifier_to_locale): Likewise.\n\t(selftest::test_basic_printing): New function.\n\t(selftest::assert_pp_format): New function.\n\t(selftest::test_pp_format): New function.\n\t(selftest::pretty_print_c_tests): New function.\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\tselftest::pretty_print_c_tests.\n\t* selftest.h (pretty_print_c_tests): New declaration.\n\nFrom-SVN: r237221", "tree": {"sha": "303bf1ee5663cffd001834088e35aabf734a8172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303bf1ee5663cffd001834088e35aabf734a8172"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "568876dc709a2ee474d321c0f36eb81684cc5b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568876dc709a2ee474d321c0f36eb81684cc5b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568876dc709a2ee474d321c0f36eb81684cc5b9b"}], "stats": {"total": 179, "additions": 178, "deletions": 1}, "files": [{"sha": "8c1a79cb90d64949cf2e30072ffa247bf7622470", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "patch": "@@ -1,3 +1,16 @@\n+2016-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* pretty-print.c: Include \"selftest.h\".\n+\t(pp_format): Fix comment.\n+\t(identifier_to_locale): Likewise.\n+\t(selftest::test_basic_printing): New function.\n+\t(selftest::assert_pp_format): New function.\n+\t(selftest::test_pp_format): New function.\n+\t(selftest::pretty_print_c_tests): New function.\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\tselftest::pretty_print_c_tests.\n+\t* selftest.h (pretty_print_c_tests): New declaration.\n+\n 2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* invoke.texi (max-loop-headers-insns): Document."}, {"sha": "d805da4178c8c3c6e751cd0ddc1dd031eb63b2ef", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 163, "deletions": 1, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"pretty-print.h\"\n #include \"diagnostic-color.h\"\n+#include \"selftest.h\"\n \n #if HAVE_ICONV\n #include <iconv.h>\n@@ -304,7 +305,7 @@ pp_indent (pretty_printer *pp)\n \n /* Formatting phases 1 and 2: render TEXT->format_spec plus\n    TEXT->args_ptr into a series of chunks in pp_buffer (PP)->args[].\n-   Phase 3 is in pp_format_text.  */\n+   Phase 3 is in pp_output_formatted_text.  */\n \n void\n pp_format (pretty_printer *pp, text_info *text)\n@@ -1203,3 +1204,164 @@ identifier_to_locale (const char *ident)\n     return ret;\n   }\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Smoketest for pretty_printer.  */\n+\n+static void\n+test_basic_printing ()\n+{\n+  pretty_printer pp;\n+  pp_string (&pp, \"hello\");\n+  pp_space (&pp);\n+  pp_string (&pp, \"world\");\n+\n+  ASSERT_STREQ (\"hello world\", pp_formatted_text (&pp));\n+}\n+\n+/* Helper function for testing pp_format.\n+   Verify that pp_format (FMT, ...) followed by pp_output_formatted_text\n+   prints EXPECTED, assuming that pp_show_color is SHOW_COLOR.  */\n+\n+static void\n+assert_pp_format_va (const char *expected, bool show_color, const char *fmt,\n+\t\t     va_list *ap)\n+{\n+  pretty_printer pp;\n+  text_info ti;\n+  rich_location rich_loc (line_table, UNKNOWN_LOCATION);\n+\n+  ti.format_spec = fmt;\n+  ti.args_ptr = ap;\n+  ti.err_no = 0;\n+  ti.x_data = NULL;\n+  ti.m_richloc = &rich_loc;\n+\n+  pp_show_color (&pp) = show_color;\n+  pp_format (&pp, &ti);\n+  pp_output_formatted_text (&pp);\n+  ASSERT_STREQ (expected, pp_formatted_text (&pp));\n+}\n+\n+/* Verify that pp_format (FMT, ...) followed by pp_output_formatted_text\n+   prints EXPECTED, with show_color disabled.  */\n+\n+static void\n+assert_pp_format (const char *expected, const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  assert_pp_format_va (expected, false, fmt, &ap);\n+  va_end (ap);\n+}\n+\n+/* As above, but with colorization enabled.  */\n+\n+static void\n+assert_pp_format_colored (const char *expected, const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  assert_pp_format_va (expected, true, fmt, &ap);\n+  va_end (ap);\n+}\n+\n+/* Verify that pp_format works, for various format codes.  */\n+\n+static void\n+test_pp_format ()\n+{\n+  /* Avoid introducing locale-specific differences in the results\n+     by hardcoding open_quote and close_quote.  */\n+  const char *old_open_quote = open_quote;\n+  const char *old_close_quote = close_quote;\n+  open_quote = \"`\";\n+  close_quote = \"'\";\n+\n+  /* Verify that plain text is passed through unchanged.  */\n+  assert_pp_format (\"unformatted\", \"unformatted\");\n+\n+  /* Verify various individual format codes, in the order listed in the\n+     comment for pp_format above.  For each code, we append a second\n+     argument with a known bit pattern (0x12345678), to ensure that we\n+     are consuming arguments correctly.  */\n+  assert_pp_format (\"-27 12345678\", \"%d %x\", -27, 0x12345678);\n+  assert_pp_format (\"-5 12345678\", \"%i %x\", -5, 0x12345678);\n+  assert_pp_format (\"10 12345678\", \"%u %x\", 10, 0x12345678);\n+  assert_pp_format (\"17 12345678\", \"%o %x\", 15, 0x12345678);\n+  assert_pp_format (\"cafebabe 12345678\", \"%x %x\", 0xcafebabe, 0x12345678);\n+  assert_pp_format (\"-27 12345678\", \"%ld %x\", (long)-27, 0x12345678);\n+  assert_pp_format (\"-5 12345678\", \"%li %x\", (long)-5, 0x12345678);\n+  assert_pp_format (\"10 12345678\", \"%lu %x\", (long)10, 0x12345678);\n+  assert_pp_format (\"17 12345678\", \"%lo %x\", (long)15, 0x12345678);\n+  assert_pp_format (\"cafebabe 12345678\", \"%lx %x\", (long)0xcafebabe,\n+\t\t    0x12345678);\n+  assert_pp_format (\"-27 12345678\", \"%lld %x\", (long long)-27, 0x12345678);\n+  assert_pp_format (\"-5 12345678\", \"%lli %x\", (long long)-5, 0x12345678);\n+  assert_pp_format (\"10 12345678\", \"%llu %x\", (long long)10, 0x12345678);\n+  assert_pp_format (\"17 12345678\", \"%llo %x\", (long long)15, 0x12345678);\n+  assert_pp_format (\"cafebabe 12345678\", \"%llx %x\", (long long)0xcafebabe,\n+\t\t    0x12345678);\n+  assert_pp_format (\"-27 12345678\", \"%wd %x\", (HOST_WIDE_INT)-27, 0x12345678);\n+  assert_pp_format (\"-5 12345678\", \"%wi %x\", (HOST_WIDE_INT)-5, 0x12345678);\n+  assert_pp_format (\"10 12345678\", \"%wu %x\", (unsigned HOST_WIDE_INT)10,\n+\t\t    0x12345678);\n+  assert_pp_format (\"17 12345678\", \"%wo %x\", (HOST_WIDE_INT)15, 0x12345678);\n+  assert_pp_format (\"0xcafebabe 12345678\", \"%wx %x\", (HOST_WIDE_INT)0xcafebabe,\n+\t\t    0x12345678);\n+  assert_pp_format (\"A 12345678\", \"%c %x\", 'A', 0x12345678);\n+  assert_pp_format (\"hello world 12345678\", \"%s %x\", \"hello world\",\n+\t\t    0x12345678);\n+  assert_pp_format (\"0xcafebabe 12345678\", \"%p %x\", (void *)0xcafebabe,\n+\t\t    0x12345678);\n+  assert_pp_format (\"normal colored normal 12345678\",\n+\t\t    \"normal %rcolored%R normal %x\",\n+\t\t    \"error\", 0x12345678);\n+  /* The following assumes an empty value for GCC_COLORS.  */\n+  assert_pp_format_colored\n+    (\"normal \\33[01;31m\\33[Kcolored\\33[m\\33[K normal 12345678\",\n+     \"normal %rcolored%R normal %x\", \"error\", 0x12345678);\n+  /* TODO:\n+     %m: strerror(text->err_no) - does not consume a value from args_ptr.  */\n+  assert_pp_format (\"% 12345678\", \"%% %x\", 0x12345678);\n+  assert_pp_format (\"` 12345678\", \"%< %x\", 0x12345678);\n+  assert_pp_format (\"' 12345678\", \"%> %x\", 0x12345678);\n+  assert_pp_format (\"' 12345678\", \"%' %x\", 0x12345678);\n+  assert_pp_format (\"abc 12345678\", \"%.*s %x\", 3, \"abcdef\", 0x12345678);\n+  assert_pp_format (\"abc 12345678\", \"%.3s %x\", \"abcdef\", 0x12345678);\n+\n+  /* Verify flag 'q'.  */\n+  assert_pp_format (\"`foo' 12345678\", \"%qs %x\", \"foo\", 0x12345678);\n+  assert_pp_format_colored (\"`\\33[01m\\33[Kfoo\\33[m\\33[K' 12345678\", \"%qs %x\",\n+\t\t\t    \"foo\", 0x12345678);\n+\n+  /* Verify that combinations work, along with unformatted text.  */\n+  assert_pp_format (\"the quick brown fox jumps over the lazy dog\",\n+\t\t    \"the %s %s %s jumps over the %s %s\",\n+\t\t    \"quick\", \"brown\", \"fox\", \"lazy\", \"dog\");\n+  assert_pp_format (\"item 3 of 7\", \"item %i of %i\", 3, 7);\n+  assert_pp_format (\"problem with `bar' at line 10\",\n+\t\t    \"problem with %qs at line %i\", \"bar\", 10);\n+\n+  /* Restore old values of open_quote and close_quote.  */\n+  open_quote = old_open_quote;\n+  close_quote = old_close_quote;\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+pretty_print_c_tests ()\n+{\n+  test_basic_printing ();\n+  test_pp_format ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */"}, {"sha": "e9121b8933893bd03ece93fc10da34a82bb53e9c", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "patch": "@@ -46,6 +46,7 @@ selftest::run_tests ()\n   hash_map_tests_c_tests ();\n   hash_set_tests_c_tests ();\n   vec_c_tests ();\n+  pretty_print_c_tests ();\n   wide_int_cc_tests ();\n \n   /* Mid-level data structures.  */"}, {"sha": "dba4bb7624f0d899de1c5758dab39715df65b2e1", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccab56d73fd6be31e3d543da7fed3ad3e654cfa/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=4ccab56d73fd6be31e3d543da7fed3ad3e654cfa", "patch": "@@ -50,6 +50,7 @@ extern void gimple_c_tests ();\n extern void hash_map_tests_c_tests ();\n extern void hash_set_tests_c_tests ();\n extern void input_c_tests ();\n+extern void pretty_print_c_tests ();\n extern void rtl_tests_c_tests ();\n extern void spellcheck_c_tests ();\n extern void tree_c_tests ();"}]}