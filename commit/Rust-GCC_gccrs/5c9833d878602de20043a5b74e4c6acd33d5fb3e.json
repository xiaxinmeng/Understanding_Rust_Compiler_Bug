{"sha": "5c9833d878602de20043a5b74e4c6acd33d5fb3e", "node_id": "C_kwDOANBUbNoAKDVjOTgzM2Q4Nzg2MDJkZTIwMDQzYTViNzRlNGM2YWNkMzNkNWZiM2U", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2023-01-09T17:48:30Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2023-01-15T16:05:00Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Complete deadlock fix on safe iterators [PR108288]\n\nComplete fix on all _Safe_iterator post-increment and post-decrement implementations\nand on _Safe_local_iterator.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108288\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::operator++(int)): Extend deadlock\n\tfix to other iterator category.\n\t(_Safe_iterator<>::operator--(int)): Likewise.\n\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>::operator++(int)):\n\tFix deadlock.\n\t* testsuite/util/debug/unordered_checks.h (invalid_local_iterator_pre_increment): New.\n\t(invalid_local_iterator_post_increment): New.\n\t* testsuite/23_containers/unordered_map/debug/invalid_local_iterator_post_increment_neg.cc:\n\tNew test.\n\t* testsuite/23_containers/unordered_map/debug/invalid_local_iterator_pre_increment_neg.cc:\n\tNew test.", "tree": {"sha": "075fe8050395359716ce8aa1b9eaaa8b500d7c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/075fe8050395359716ce8aa1b9eaaa8b500d7c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c9833d878602de20043a5b74e4c6acd33d5fb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9833d878602de20043a5b74e4c6acd33d5fb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9833d878602de20043a5b74e4c6acd33d5fb3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9833d878602de20043a5b74e4c6acd33d5fb3e/comments", "author": null, "committer": null, "parents": [{"sha": "844190af178c210a6aff6b7eb4dd8c6a49210ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844190af178c210a6aff6b7eb4dd8c6a49210ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844190af178c210a6aff6b7eb4dd8c6a49210ff9"}], "stats": {"total": 124, "additions": 84, "deletions": 40}, "files": [{"sha": "755da7dffe5e92e5c143db80201ee05c49940d03", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=5c9833d878602de20043a5b74e4c6acd33d5fb3e", "patch": "@@ -129,14 +129,6 @@ namespace __gnu_debug\n \ttypename _Sequence::_Base::iterator,\n \ttypename _Sequence::_Base::const_iterator>::__type _OtherIterator;\n \n-      struct _Attach_single\n-      { };\n-\n-      _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n-      _GLIBCXX_NOEXCEPT\n-      : _Iter_base(__i)\n-      { _M_attach_single(__seq); }\n-\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename _Traits::iterator_category\titerator_category;\n@@ -347,8 +339,9 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_iterator(base()++, this->_M_sequence, _Attach_single());\n+\t_Safe_iterator __ret = *this;\n+\t++*this;\n+\treturn __ret;\n       }\n \n       // ------ Utilities ------\n@@ -520,12 +513,6 @@ namespace __gnu_debug\n \n     protected:\n       typedef typename _Safe_base::_OtherIterator _OtherIterator;\n-      typedef typename _Safe_base::_Attach_single _Attach_single;\n-\n-      _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n-      _GLIBCXX_NOEXCEPT\n-      : _Safe_base(__i, __seq, _Attach_single())\n-      { }\n \n     public:\n       /// @post the iterator is singular and unattached\n@@ -609,9 +596,9 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_iterator(this->base()++, this->_M_sequence,\n-\t\t\t      _Attach_single());\n+\t_Safe_iterator __ret = *this;\n+\t++*this;\n+\treturn __ret;\n       }\n \n       // ------ Bidirectional iterator requirements ------\n@@ -640,9 +627,9 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_iterator(this->base()--, this->_M_sequence,\n-\t\t\t      _Attach_single());\n+\t_Safe_iterator __ret = *this;\n+\t--*this;\n+\treturn __ret;\n       }\n \n       // ------ Utilities ------\n@@ -666,13 +653,6 @@ namespace __gnu_debug\n       typedef _Safe_iterator<_OtherIterator, _Sequence,\n \t\t\t     std::random_access_iterator_tag> _OtherSelf;\n \n-      typedef typename _Safe_base::_Attach_single _Attach_single;\n-\n-      _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n-      _GLIBCXX_NOEXCEPT\n-      : _Safe_base(__i, __seq, _Attach_single())\n-      { }\n-\n     public:\n       typedef typename _Safe_base::difference_type\tdifference_type;\n       typedef typename _Safe_base::reference\t\treference;\n@@ -761,6 +741,9 @@ namespace __gnu_debug\n       _Safe_iterator\n       operator++(int) _GLIBCXX_NOEXCEPT\n       {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n+\t\t\t      _M_message(__msg_bad_inc)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n \t_Safe_iterator __ret = *this;\n \t++*this;\n \treturn __ret;\n@@ -785,6 +768,9 @@ namespace __gnu_debug\n       _Safe_iterator\n       operator--(int) _GLIBCXX_NOEXCEPT\n       {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n+\t\t\t      _M_message(__msg_bad_dec)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n \t_Safe_iterator __ret = *this;\n \t--*this;\n \treturn __ret;"}, {"sha": "1079ee8dc4ff2cf97ad29fc7d05644c3997aeb01", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=5c9833d878602de20043a5b74e4c6acd33d5fb3e", "patch": "@@ -84,14 +84,6 @@ namespace __gnu_debug\n       typedef _Safe_local_iterator _Self;\n       typedef _Safe_local_iterator<_OtherIterator, _Sequence> _OtherSelf;\n \n-      struct _Attach_single\n-      { };\n-\n-      _Safe_local_iterator(_Iterator __i, _Safe_sequence_base* __cont,\n-\t\t\t   _Attach_single) noexcept\n-      : _Iter_base(__i)\n-      { _M_attach_single(__cont); }\n-\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename _Traits::iterator_category\titerator_category;\n@@ -290,9 +282,9 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_local_iterator(base()++, this->_M_sequence,\n-\t\t\t\t    _Attach_single());\n+\t_Safe_local_iterator __ret = *this;\n+\t++*this;\n+\treturn __ret;\n       }\n \n       // ------ Utilities ------"}, {"sha": "74005c3ec69bb5366103e92722d531c1637f5d70", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/invalid_local_iterator_post_increment_neg.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Finvalid_local_iterator_post_increment_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Finvalid_local_iterator_post_increment_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Finvalid_local_iterator_post_increment_neg.cc?ref=5c9833d878602de20043a5b74e4c6acd33d5fb3e", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run { target c++11 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <debug/unordered_checks.h>\n+\n+void test01()\n+{\n+  __gnu_test::invalid_local_iterator_post_increment<std::unordered_map<int, int>>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "016cd1c694771982f81103fef854ddc684f7d1cd", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/invalid_local_iterator_pre_increment_neg.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Finvalid_local_iterator_pre_increment_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Finvalid_local_iterator_pre_increment_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Finvalid_local_iterator_pre_increment_neg.cc?ref=5c9833d878602de20043a5b74e4c6acd33d5fb3e", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run { target c++11 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <debug/unordered_checks.h>\n+\n+void test01()\n+{\n+  __gnu_test::invalid_local_iterator_pre_increment<std::unordered_map<int, int>>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "76ae05bbf8bd8c7b2ec4c50ed9fdc4596e9359ad", "filename": "libstdc++-v3/testsuite/util/debug/unordered_checks.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fdebug%2Funordered_checks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9833d878602de20043a5b74e4c6acd33d5fb3e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fdebug%2Funordered_checks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fdebug%2Funordered_checks.h?ref=5c9833d878602de20043a5b74e4c6acd33d5fb3e", "patch": "@@ -125,6 +125,40 @@ namespace __gnu_test\n       VERIFY( *it == val );\n     }\n \n+  template<typename _Tp>\n+    void invalid_local_iterator_pre_increment()\n+    {\n+      typedef _Tp cont_type;\n+      typedef typename cont_type::value_type cont_val_type;\n+      typedef typename CopyableValueType<cont_val_type>::value_type val_type;\n+      generate_unique<val_type> gu;\n+\n+      cont_type c;\n+      for (size_t i = 0; i != 5; ++i)\n+\tc.insert(gu.build());\n+\n+      auto lit = c.begin(0);\n+      for (size_t i = 0; i != 6; ++i)\n+\t++lit;\n+    }\n+\n+  template<typename _Tp>\n+    void invalid_local_iterator_post_increment()\n+    {\n+      typedef _Tp cont_type;\n+      typedef typename cont_type::value_type cont_val_type;\n+      typedef typename CopyableValueType<cont_val_type>::value_type val_type;\n+      generate_unique<val_type> gu;\n+\n+      cont_type c;\n+      for (size_t i = 0; i != 5; ++i)\n+\tc.insert(gu.build());\n+\n+      auto lit = c.begin(0);\n+      for (size_t i = 0; i != 6; ++i)\n+\tlit++;\n+    }\n+\n   template<typename _Tp>\n     void invalid_local_iterator_compare()\n     {"}]}