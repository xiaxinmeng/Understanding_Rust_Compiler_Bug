{"sha": "a873cb9978cec9b70b04daa2acb3a9dfb33110d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3M2NiOTk3OGNlYzliNzBiMDRkYWEyYWNiM2E5ZGZiMzMxMTBkMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-05T12:28:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-27T09:15:59Z"}, "message": "[Ada] Small improvement to System.Value_R.Scan_Raw_Real\n\ngcc/ada/\n\n\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Round Extra.\n\t(Scan_Integral_Digits): Likewise.", "tree": {"sha": "676cc15ef33d09b0c6602b2b2fb014cad301345d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/676cc15ef33d09b0c6602b2b2fb014cad301345d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a873cb9978cec9b70b04daa2acb3a9dfb33110d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a873cb9978cec9b70b04daa2acb3a9dfb33110d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a873cb9978cec9b70b04daa2acb3a9dfb33110d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a873cb9978cec9b70b04daa2acb3a9dfb33110d2/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd0a8448945618a6756d474b7c931fabc51ad0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd0a8448945618a6756d474b7c931fabc51ad0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd0a8448945618a6756d474b7c931fabc51ad0f"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "0fa4fe1ac76b2ebb50b30e00ca2737a2e7bdc6fd", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a873cb9978cec9b70b04daa2acb3a9dfb33110d2/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a873cb9978cec9b70b04daa2acb3a9dfb33110d2/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=a873cb9978cec9b70b04daa2acb3a9dfb33110d2", "patch": "@@ -144,6 +144,9 @@ package body System.Value_R is\n       --  Set to True if addition of a digit will cause Value to be superior\n       --  to Precision_Limit.\n \n+      Precision_Limit_Just_Reached : Boolean := False;\n+      --  Set to True if Precision_Limit_Reached was just set to True\n+\n       Digit : Char_As_Digit;\n       --  The current digit\n \n@@ -185,11 +188,24 @@ package body System.Value_R is\n \n          --  If precision limit has been reached, just ignore any remaining\n          --  digits for the computation of Value and Scale, but store the\n-         --  first in Extra. The scanning should continue only to assess the\n-         --  validity of the string.\n+         --  first in Extra and use the second to round Extra. The scanning\n+         --  should continue only to assess the validity of the string.\n+\n+         if Precision_Limit_Reached then\n+            if Precision_Limit_Just_Reached then\n+               if Digit >= Base / 2 then\n+                  if Extra = Base - 1 then\n+                     Extra := 0;\n+                     Value := Value + 1;\n+                  else\n+                     Extra := Extra + 1;\n+                  end if;\n+               end if;\n \n-         if not Precision_Limit_Reached then\n+               Precision_Limit_Just_Reached := False;\n+            end if;\n \n+         else\n             --  Trailing '0' digits are ignored until a non-zero digit is found\n \n             if Digit = 0 then\n@@ -218,14 +234,15 @@ package body System.Value_R is\n                Temp := Value * Uns (Base) + Uns (Digit);\n \n                if Value <= Umax\n-                   or else (Value <= UmaxB and then Temp <= Precision_Limit)\n+                 or else (Value <= UmaxB and then Temp <= Precision_Limit)\n                then\n                   Value := Temp;\n                   Scale := Scale - 1;\n \n                else\n                   Extra := Digit;\n                   Precision_Limit_Reached := True;\n+                  Precision_Limit_Just_Reached := True;\n                end if;\n             end if;\n          end if;\n@@ -289,6 +306,9 @@ package body System.Value_R is\n       --  Set to True if addition of a digit will cause Value to be superior\n       --  to Precision_Limit.\n \n+      Precision_Limit_Just_Reached : Boolean := False;\n+      --  Set to True if Precision_Limit_Reached was just set to True\n+\n       Digit : Char_As_Digit;\n       --  The current digit\n \n@@ -324,12 +344,25 @@ package body System.Value_R is\n \n          --  If precision limit has been reached, just ignore any remaining\n          --  digits for the computation of Value, but update Scale and store\n-         --  the first in Extra. The scanning should continue only to assess\n-         --  the validity of the string.\n+         --  the first in Extra and use the second to round Extra. The scanning\n+         --  should continue only to assess the validity of the string.\n \n          if Precision_Limit_Reached then\n             Scale := Scale + 1;\n \n+            if Precision_Limit_Just_Reached then\n+               if Digit >= Base / 2 then\n+                  if Extra = Base - 1 then\n+                     Extra := 0;\n+                     Value := Value + 1;\n+                  else\n+                     Extra := Extra + 1;\n+                  end if;\n+               end if;\n+\n+               Precision_Limit_Just_Reached := False;\n+            end if;\n+\n          else\n             Temp := Value * Uns (Base) + Uns (Digit);\n \n@@ -341,6 +374,7 @@ package body System.Value_R is\n             else\n                Extra := Digit;\n                Precision_Limit_Reached := True;\n+               Precision_Limit_Just_Reached := True;\n                Scale := Scale + 1;\n             end if;\n          end if;"}]}