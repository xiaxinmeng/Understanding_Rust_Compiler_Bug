{"sha": "a5a6b5863919991ad636cbbb4470a6a2d94480bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhNmI1ODYzOTE5OTkxYWQ2MzZjYmJiNDQ3MGE2YTJkOTQ0ODBiZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-29T15:46:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-29T15:46:50Z"}, "message": "string_conversions.cc: Remove.\n\n2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/string_conversions.cc: Remove.\n\t* config/abi/pre/gnu.ver: Delete exports.\n\t* src/Makefile.am: Update.\n\t* include/ext/string_conversions.h: Add.\n\t* include/Makefile.am: Update.\n\t* include/bits/basic_string.h: Include string_conversions.h,\n\tdefine numeric conversion functions.\n\t* include/ext/vstring.h: Likewise.\n\t* src/Makefile.in: Regenerate.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r137253", "tree": {"sha": "5a00007eecec1218ceda338407006c4058eea70b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a00007eecec1218ceda338407006c4058eea70b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a6b5863919991ad636cbbb4470a6a2d94480bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a6b5863919991ad636cbbb4470a6a2d94480bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a6b5863919991ad636cbbb4470a6a2d94480bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a6b5863919991ad636cbbb4470a6a2d94480bd/comments", "author": null, "committer": null, "parents": [{"sha": "faf2ecc57e3ef478efebee6f83c440df073152c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf2ecc57e3ef478efebee6f83c440df073152c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf2ecc57e3ef478efebee6f83c440df073152c2"}], "stats": {"total": 627, "additions": 375, "deletions": 252}, "files": [{"sha": "e1d798e0e1f7bc624c4270c3140e3f79a9d9550f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -1,3 +1,16 @@\n+2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/string_conversions.cc: Remove.\n+\t* config/abi/pre/gnu.ver: Delete exports.\n+\t* src/Makefile.am: Update.\n+\t* include/ext/string_conversions.h: Add.\n+\t* include/Makefile.am: Update.\n+\t* include/bits/basic_string.h: Include string_conversions.h,\n+\tdefine numeric conversion functions.\n+\t* include/ext/vstring.h: Likewise.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\t\n+\n 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (copy_n): Add in C++0x mode."}, {"sha": "4578ce513fc1f7e29871263d502f8b319b7f1f33", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -896,11 +896,6 @@ GLIBCXX_3.4.11 {\n     # char16_t and char32_t\n     _ZNSt14numeric_limitsIu8char*;\n \n-    # string conversions\n-    _ZSt?sto*;\n-    _ZSt9to_string*;\n-    _ZSt10to_wstring*;    \n-\n } GLIBCXX_3.4.10;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "a8f48c7d2820322eb853945d432f910d9ffc08a6", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -499,6 +499,7 @@ ext_headers = \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/string_conversions.h \\\n \t${ext_srcdir}/throw_allocator.h \\\n \t${ext_srcdir}/typelist.h \\\n \t${ext_srcdir}/type_traits.h \\"}, {"sha": "8c1e626934ffb7bc4094df7e66721549d1388c27", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -750,6 +750,7 @@ ext_headers = \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/string_conversions.h \\\n \t${ext_srcdir}/throw_allocator.h \\\n \t${ext_srcdir}/typelist.h \\\n \t${ext_srcdir}/type_traits.h \\"}, {"sha": "19c79d11cf785c7ac25991eb80f517c516841b0e", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 123, "deletions": 27, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -2473,42 +2473,138 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    wchar_t __delim);\n #endif  \n \n+_GLIBCXX_END_NAMESPACE\n \n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99))\n \n-  // 21.4 Numeric Conversions [string.conversions].\n-  int stoi(const string&, size_t* = 0, int = 10);\n-  long stol(const string&, size_t* = 0, int = 10);\n-  unsigned long stoul(const string&, size_t* = 0, int = 10);\n-  long long stoll(const string&, size_t* = 0, int = 10);\n-  unsigned long long stoull(const string&, size_t* = 0, int = 10);\n+#include <ext/string_conversions.h>\n \n-  float stof(const string&, size_t* = 0);\n-  double stod(const string&, size_t* = 0);\n-  long double stold(const string&, size_t* = 0);\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  string to_string(long long);\n-  string to_string(unsigned long long);\n-  string to_string(long double);\n+  // 21.4 Numeric Conversions [string.conversions].\n+  inline int\n+  stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa<long, int>(&std::strtol, \"stoi\", __str.c_str(),\n+\t\t\t\t\t__idx, __base); }\n+\n+  inline long\n+  stol(const string& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtol, \"stol\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long\n+  stoul(const string& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtoul, \"stoul\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline long long\n+  stoll(const string& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtoll, \"stoll\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long long\n+  stoull(const string& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtoull, \"stoull\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  // NB: strtof vs strtod.\n+  inline float\n+  stof(const string& __str, size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::strtof, \"stof\", __str.c_str(), __idx); }\n+\n+  inline double\n+  stod(const string& __str, size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::strtod, \"stod\", __str.c_str(), __idx); }\n+\n+  inline long double\n+  stold(const string& __str, size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n+\n+  // NB: (v)snprintf vs sprintf.\n+  inline string\n+  to_string(long long __val)\n+  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n+\t\t\t\t\t   4 * sizeof(long long),\n+\t\t\t\t\t   \"%lld\", __val); }\n+\n+  inline string\n+  to_string(unsigned long long __val)\n+  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n+\t\t\t\t\t   4 * sizeof(unsigned long long),\n+\t\t\t\t\t   \"%llu\", __val); }\n+\n+  inline string\n+  to_string(long double __val)\n+  {\n+    const int __n = \n+      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\n+\t\t\t\t\t   \"%Lf\", __val);\n+  }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  int stoi(const wstring&, size_t* = 0, int = 10);\n-  long stol(const wstring&, size_t* = 0, int = 10);\n-  unsigned long stoul(const wstring&, size_t* = 0, int = 10);\n-  long long stoll(const wstring&, size_t* = 0, int = 10);\n-  unsigned long long stoull(const wstring&, size_t* = 0, int = 10);\n-\n-  float stof(const wstring&, size_t* = 0);\n-  double stod(const wstring&, size_t* = 0);\n-  long double stold(const wstring&, size_t* = 0);\n-\n-  wstring to_wstring(long long);\n-  wstring to_wstring(unsigned long long);\n-  wstring to_wstring(long double);\n-#endif\n-\n+  inline int \n+  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, \"stoi\", __str.c_str(),\n+\t\t\t\t\t__idx, __base); }\n+\n+  inline long \n+  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstol, \"stol\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long\n+  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstoul, \"stoul\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline long long\n+  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstoll, \"stoll\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long long\n+  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstoull, \"stoull\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  // NB: wcstof vs wcstod.\n+  inline float\n+  stof(const wstring& __str, size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::wcstof, \"stof\", __str.c_str(), __idx); }\n+\n+  inline double\n+  stod(const wstring& __str, size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::wcstod, \"stod\", __str.c_str(), __idx); }\n+\n+  inline long double\n+  stold(const wstring& __str, size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::wcstold, \"stold\", __str.c_str(), __idx); }\n+\n+  inline wstring\n+  to_wstring(long long __val)\n+  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n+\t\t\t\t\t    4 * sizeof(long long),\n+\t\t\t\t\t    L\"%lld\", __val); }\n+\n+  inline wstring\n+  to_wstring(unsigned long long __val)\n+  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n+\t\t\t\t\t    4 * sizeof(unsigned long long),\n+\t\t\t\t\t    L\"%llu\", __val); }\n+\n+  inline wstring\n+  to_wstring(long double __val)\n+  {\n+    const int __n =\n+      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,\n+\t\t\t\t\t    L\"%Lf\", __val);\n+  }\n #endif\n \n _GLIBCXX_END_NAMESPACE\n \n+#endif\n+\n #endif /* _BASIC_STRING_H */"}, {"sha": "69bcce491f4b139cdde2d2884abc70fdbb9e027e", "filename": "libstdc++-v3/include/ext/string_conversions.h", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -0,0 +1,99 @@\n+// String Conversions -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _STRING_CONVERSIONS_H\n+#define _STRING_CONVERSIONS_H 1\n+\n+#pragma GCC system_header\n+\n+#include <ext/numeric_traits.h>\n+#include <bits/functexcept.h>\n+#include <cstddef>\n+#include <cstdlib>\n+#include <cwchar>\n+#include <cstdio>\n+#include <cerrno>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  // Helper for all the sto* functions.\n+  template<typename _TRet, typename _Ret = _TRet, typename _CharT,\n+\t   typename... _Base>\n+    _Ret\n+    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),\n+\t   const char* __name, const _CharT* __str, std::size_t* __idx,\n+\t   _Base... __base)\n+    {\n+      _Ret __ret;\n+\n+      _CharT* __endptr;\n+      errno = 0;\n+      const _TRet __tmp = __convf(__str, &__endptr, __base...);\n+\n+      if (__endptr == __str)\n+\tstd::__throw_invalid_argument(__name);\n+      else if (errno == ERANGE\n+\t       || (std::__are_same<_Ret, int>::__value\n+\t\t   && (__tmp < __numeric_traits<int>::__min\n+\t\t       || __tmp > __numeric_traits<int>::__max)))\n+\tstd::__throw_out_of_range(__name);\n+      else\n+\t__ret = __tmp;\n+\n+      if (__idx)\n+\t*__idx = __endptr - __str;\n+\n+      return __ret;\n+    }\n+\n+  // Helper for the to_string / to_wstring functions.\n+  template<typename _String, typename _CharT = typename _String::value_type>\n+    _String\n+    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,\n+\t\t\t\t __builtin_va_list), std::size_t __n,\n+\t\t const _CharT* __fmt, ...)\n+    {\n+      // XXX Eventually the result will be constructed in place in\n+      // the C++0x string, likely with the help of internal hooks.\n+      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t  * __n));\n+\n+      __builtin_va_list __args;\n+      __builtin_va_start(__args, __fmt);\n+\n+      const int __len = __convf(__s, __n, __fmt, __args);\n+\n+      __builtin_va_end(__args);\n+\n+      return _String(__s, __s + __len);\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // _STRING_CONVERSIONS_H"}, {"sha": "0e74bfa8cb24175b7f1799a629c84f1e846e80a6", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 131, "deletions": 1, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -1,6 +1,6 @@\n // Versatile string -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -2321,6 +2321,136 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99))\n+\n+#include <ext/string_conversions.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  // 21.4 Numeric Conversions [string.conversions].\n+  inline int\n+  stoi(const __vstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa<long, int>(&std::strtol, \"stoi\", __str.c_str(),\n+\t\t\t\t\t__idx, __base); }\n+\n+  inline long\n+  stol(const __vstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtol, \"stol\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long\n+  stoul(const __vstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtoul, \"stoul\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline long long\n+  stoll(const __vstring& __str, std::size_t* __idx = 0,\tint __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtoll, \"stoll\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long long\n+  stoull(const __vstring& __str, std::size_t* __idx, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::strtoull, \"stoull\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  // NB: strtof vs strtod.\n+  inline float\n+  stof(const __vstring& __str, std::size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::strtof, \"stof\", __str.c_str(), __idx); }\n+\n+  inline double\n+  stod(const __vstring& __str, std::size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::strtod, \"stod\", __str.c_str(), __idx); }\n+\n+  inline long double\n+  stold(const __vstring& __str, std::size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n+\n+  // NB: (v)snprintf vs sprintf.\n+  inline __vstring\n+  to_string(long long __val)\n+  { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf,\n+\t\t\t\t\t      4 * sizeof(long long),\n+\t\t\t\t\t      \"%lld\", __val); }\n+\n+  inline __vstring\n+  to_string(unsigned long long __val)\n+  { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf,\n+\t\t\t\t\t      4 * sizeof(unsigned long long),\n+\t\t\t\t\t      \"%llu\", __val); }\n+\n+  inline __vstring\n+  to_string(long double __val)\n+  {\n+    const int __n = __numeric_traits<long double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf, __n,\n+\t\t\t\t\t      \"%Lf\", __val);\n+  }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  inline int \n+  stoi(const __wvstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, \"stoi\", __str.c_str(),\n+\t\t\t\t\t__idx, __base); }\n+\n+  inline long \n+  stol(const __wvstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstol, \"stol\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long\n+  stoul(const __wvstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstoul, \"stoul\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline long long\n+  stoll(const __wvstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstoll, \"stoll\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  inline unsigned long long\n+  stoull(const __wvstring& __str, std::size_t* __idx = 0, int __base = 10)\n+  { return __gnu_cxx::__stoa(&std::wcstoull, \"stoull\", __str.c_str(),\n+\t\t\t     __idx, __base); }\n+\n+  // NB: wcstof vs wcstod.\n+  inline float\n+  stof(const __wvstring& __str, std::size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::wcstof, \"stof\", __str.c_str(), __idx); }\n+\n+  inline double\n+  stod(const __wvstring& __str, std::size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::wcstod, \"stod\", __str.c_str(), __idx); }\n+\n+  inline long double\n+  stold(const __wvstring& __str, std::size_t* __idx = 0)\n+  { return __gnu_cxx::__stoa(&std::wcstold, \"stold\", __str.c_str(), __idx); }\n+\n+  inline __wvstring\n+  to_wstring(long long __val)\n+  { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n+\t\t\t\t\t       4 * sizeof(long long),\n+\t\t\t\t\t       L\"%lld\", __val); }\n+\n+  inline __wvstring\n+  to_wstring(unsigned long long __val)\n+  { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n+\t\t\t\t\t       4 * sizeof(unsigned long long),\n+\t\t\t\t\t       L\"%llu\", __val); }\n+\n+  inline __wvstring\n+  to_wstring(long double __val)\n+  {\n+    const int __n = __numeric_traits<long double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf, __n,\n+\t\t\t\t\t       L\"%Lf\", __val);\n+  }\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif\n+\n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include \"vstring.tcc\" \n #endif"}, {"sha": "f5d99c63525b351a7f1078b8978695734d517b5c", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -182,7 +182,6 @@ sources = \\\n \tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n \tstring-inst.cc \\\n-\tstring_conversions.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n@@ -279,11 +278,6 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n-string_conversions.lo: string_conversions.cc\n-\t$(LTCXXCOMPILE) -x c++ -std=gnu++0x -c $<\n-string_conversions.o: string_conversions.cc\n-\t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n-\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "508a399e7e8a8e1231294f9e59df39e3ce0332d1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a6b5863919991ad636cbbb4470a6a2d94480bd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a5a6b5863919991ad636cbbb4470a6a2d94480bd", "patch": "@@ -83,12 +83,11 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tallocator-inst.cc concept-inst.cc fstream-inst.cc ext-inst.cc \\\n \tios-inst.cc iostream-inst.cc istream-inst.cc istream.cc \\\n \tlocale-inst.cc misc-inst.cc ostream-inst.cc sstream-inst.cc \\\n-\tstreambuf-inst.cc streambuf.cc string-inst.cc \\\n-\tstring_conversions.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc mutex.cc condition_variable.cc atomicity.cc \\\n-\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n-\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n-\ttime_members.cc basic_file.cc c++locale.cc \\\n+\tstreambuf-inst.cc streambuf.cc string-inst.cc valarray-inst.cc \\\n+\twlocale-inst.cc wstring-inst.cc mutex.cc condition_variable.cc \\\n+\tatomicity.cc codecvt_members.cc collate_members.cc \\\n+\tctype_members.cc messages_members.cc monetary_members.cc \\\n+\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n \tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n@@ -109,8 +108,8 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n \tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n-\tstring-inst.lo string_conversions.lo valarray-inst.lo \\\n-\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n+\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n+\twstring-inst.lo mutex.lo condition_variable.lo \\\n \t$(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n@@ -419,7 +418,6 @@ sources = \\\n \tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n \tstring-inst.cc \\\n-\tstring_conversions.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n@@ -874,11 +872,6 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n-string_conversions.lo: string_conversions.cc\n-\t$(LTCXXCOMPILE) -x c++ -std=gnu++0x -c $<\n-string_conversions.o: string_conversions.cc\n-\t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n-\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "ef402ea0c39b3cac5674505bd217cac8eaa6eefe", "filename": "libstdc++-v3/src/string_conversions.cc", "status": "removed", "additions": 0, "deletions": 199, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2ecc57e3ef478efebee6f83c440df073152c2/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2ecc57e3ef478efebee6f83c440df073152c2/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc?ref=faf2ecc57e3ef478efebee6f83c440df073152c2", "patch": "@@ -1,199 +0,0 @@\n-// String Conversions -*- C++ -*-\n-\n-// Copyright (C) 2008 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#include <string>\n-#include <limits>\n-#include <cerrno>\n-#include <cstdlib>\n-#include <cstdarg>\n-\n-#ifdef _GLIBCXX_USE_C99\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  // Helper for all the sto* functions.\n-  template<typename _TRet, typename _Ret = _TRet, typename _CharT,\n-\t   typename... _Base>\n-    inline _Ret\n-    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),\n-\t   const char* __name, const basic_string<_CharT>& __str,\n-\t   size_t* __idx, _Base... __base)\n-    {\n-      _Ret __ret;\n-\n-      _CharT* __endptr;\n-      errno = 0;\n-      const _TRet __tmp = __convf(__str.c_str(), &__endptr, __base...);\n-\n-      if (__endptr == __str.c_str())\n-\t__throw_invalid_argument(__name);\n-      else if (errno == ERANGE\n-\t       || (__are_same<_Ret, int>::__value\n-\t\t   && (__tmp < numeric_limits<_Ret>::min()\n-\t\t       || __tmp > numeric_limits<_Ret>::max())))\n-\t__throw_out_of_range(__name);\n-      else\n-\t__ret = __tmp;\n-\n-      if (__idx)\n-\t*__idx = __endptr - __str.c_str();\n-\n-      return __ret;\n-    }\n-\n-  // Helper for the to_string / to_wstring functions.\n-  template<typename _CharT>\n-    inline basic_string<_CharT>\n-    __to_xstring(int (*__convf) (_CharT*, size_t, const _CharT*, va_list),\n-\t\t size_t __n, const _CharT* __fmt, ...)\n-    {\n-      // XXX Eventually the result will be constructed in place in\n-      // the C++0x string, likely with the help of internal hooks.\n-      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t  * __n));\n-\n-      va_list __args;\n-      va_start(__args, __fmt);\n-\n-      const int __len = __convf(__s, __n, __fmt, __args);\n-\n-      va_end(__args);\n-\n-      return basic_string<_CharT>(__s, __s + __len);\n-    }\n-\n-\n-  int\n-  stoi(const string& __str, size_t* __idx, int __base)\n-  { return std::__stoa<long, int>(&std::strtol, \"stoi\", __str,\n-\t\t\t\t  __idx, __base); }\n-\n-  long\n-  stol(const string& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::strtol, \"stol\", __str, __idx, __base); }\n-\n-  unsigned long\n-  stoul(const string& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::strtoul, \"stoul\", __str, __idx, __base); }\n-\n-  long long\n-  stoll(const string& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::strtoll, \"stoll\", __str, __idx, __base); }\n-\n-  unsigned long long\n-  stoull(const string& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::strtoull, \"stoull\", __str, __idx, __base); }\n-\n-  // NB: strtof vs strtod.\n-  float\n-  stof(const string& __str, size_t* __idx)\n-  { return std::__stoa(&std::strtof, \"stof\", __str, __idx); }\n-\n-  double\n-  stod(const string& __str, size_t* __idx)\n-  { return std::__stoa(&std::strtod, \"stod\", __str, __idx); }\n-\n-  long double\n-  stold(const string& __str, size_t* __idx)\n-  { return std::__stoa(&std::strtold, \"stold\", __str, __idx); }\n-\n-  // NB: (v)snprintf vs sprintf.\n-  string\n-  to_string(long long __val)\n-  { return std::__to_xstring(&std::vsnprintf, 4 * sizeof(long long),\n-\t\t\t     \"%lld\", __val); }\n-\n-  string\n-  to_string(unsigned long long __val)\n-  { return std::__to_xstring(&std::vsnprintf, 4 * sizeof(unsigned long long),\n-\t\t\t     \"%llu\", __val); }\n-\n-  string\n-  to_string(long double __val)\n-  {\n-    const int __n = numeric_limits<long double>::max_exponent10 + 20;\n-    return std::__to_xstring(&std::vsnprintf, __n, \"%Lf\", __val);\n-  }\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  int \n-  stoi(const wstring& __str, size_t* __idx, int __base)\n-  { return std::__stoa<long, int>(&std::wcstol, \"stoi\", __str,\n-\t\t\t\t  __idx, __base); }\n-\n-  long \n-  stol(const wstring& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::wcstol, \"stol\", __str, __idx, __base); }\n-\n-  unsigned long\n-  stoul(const wstring& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::wcstoul, \"stoul\", __str, __idx, __base); }\n-\n-  long long\n-  stoll(const wstring& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::wcstoll, \"stoll\", __str, __idx, __base); }\n-\n-  unsigned long long\n-  stoull(const wstring& __str, size_t* __idx, int __base)\n-  { return std::__stoa(&std::wcstoull, \"stoull\", __str, __idx, __base); }\n-\n-  // NB: wcstof vs wcstod.\n-  float\n-  stof(const wstring& __str, size_t* __idx)\n-  { return std::__stoa(&std::wcstof, \"stof\", __str, __idx); }\n-\n-  double\n-  stod(const wstring& __str, size_t* __idx)\n-  { return std::__stoa(&std::wcstod, \"stod\", __str, __idx); }\n-\n-  long double\n-  stold(const wstring& __str, size_t* __idx)\n-  { return std::__stoa(&std::wcstold, \"stold\", __str, __idx); }\n-\n-  wstring\n-  to_wstring(long long __val)\n-  { return std::__to_xstring(&std::vswprintf, 4 * sizeof(long long),\n-\t\t\t     L\"%lld\", __val); }\n-\n-  wstring\n-  to_wstring(unsigned long long __val)\n-  { return std::__to_xstring(&std::vswprintf, 4 * sizeof(unsigned long long),\n-\t\t\t     L\"%llu\", __val); }\n-\n-  wstring\n-  to_wstring(long double __val)\n-  {\n-    const int __n = numeric_limits<long double>::max_exponent10 + 20;\n-    return std::__to_xstring(&std::vswprintf, __n, L\"%Lf\", __val);\n-  }\n-#endif\n-\n-_GLIBCXX_END_NAMESPACE\n-\n-#endif"}]}