{"sha": "26c347808e62259bf9d5b5c729b68c001dc31272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjMzQ3ODA4ZTYyMjU5YmY5ZDViNWM3MjliNjhjMDAxZGMzMTI3Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-07-08T15:59:53Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-07-08T15:59:53Z"}, "message": "combine.c (combine_simplify_rtx): Add an explicit cast to avoid signed/unsigned comparison warning.\n\n\n\t* combine.c (combine_simplify_rtx): Add an explicit cast\n\tto avoid signed/unsigned comparison warning.\n\t(simplify_if_then_else): Likewise.\n\t(extended_count): Likewise.\n\t(simplify_shift_const): Likewise.\n\t(simplify_comparison): Likewise.\n\nFrom-SVN: r55329", "tree": {"sha": "dcc7ec7e5428f2b03e086574827b31dc5dbee771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc7ec7e5428f2b03e086574827b31dc5dbee771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26c347808e62259bf9d5b5c729b68c001dc31272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c347808e62259bf9d5b5c729b68c001dc31272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c347808e62259bf9d5b5c729b68c001dc31272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c347808e62259bf9d5b5c729b68c001dc31272/comments", "author": null, "committer": null, "parents": [{"sha": "d5372501f517fd370beb0173346c726c9a1bf56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5372501f517fd370beb0173346c726c9a1bf56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5372501f517fd370beb0173346c726c9a1bf56a"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "38fe2bfc612a5ce2e91f6f141c58a476e5a68bf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c347808e62259bf9d5b5c729b68c001dc31272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c347808e62259bf9d5b5c729b68c001dc31272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26c347808e62259bf9d5b5c729b68c001dc31272", "patch": "@@ -1,3 +1,12 @@\n+2002-07-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* combine.c (combine_simplify_rtx): Add an explicit cast\n+\tto avoid signed/unsigned comparison warning.\n+\t(simplify_if_then_else): Likewise.\n+\t(extended_count): Likewise.\n+\t(simplify_shift_const): Likewise.\n+\t(simplify_comparison): Likewise.\n+\n 2002-07-08  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md: Add imadd type.  Update scheduler description"}, {"sha": "646abec2e995a44a8250709dd61b69865889eadf", "filename": "gcc/combine.c", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c347808e62259bf9d5b5c729b68c001dc31272/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c347808e62259bf9d5b5c729b68c001dc31272/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=26c347808e62259bf9d5b5c729b68c001dc31272", "patch": "@@ -4104,7 +4104,7 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n       if (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n \t\t\t\t GET_MODE_BITSIZE (GET_MODE (XEXP (x, 0))))\n \t  && num_sign_bit_copies (XEXP (x, 0), GET_MODE (XEXP (x, 0)))\n-\t     >= GET_MODE_BITSIZE (mode) + 1\n+\t     >= (unsigned int) (GET_MODE_BITSIZE (mode) + 1)\n \t  && ! (GET_CODE (XEXP (x, 0)) == LSHIFTRT\n \t\t&& GET_CODE (XEXP (XEXP (x, 0), 0)) == MULT))\n \treturn gen_lowpart_for_combine (mode, XEXP (x, 0));\n@@ -4865,7 +4865,8 @@ simplify_if_then_else (x)\n \t       && subreg_lowpart_p (XEXP (XEXP (t, 0), 0))\n \t       && rtx_equal_p (SUBREG_REG (XEXP (XEXP (t, 0), 0)), f)\n \t       && (num_sign_bit_copies (f, GET_MODE (f))\n-\t\t   > (GET_MODE_BITSIZE (mode)\n+\t\t   > (unsigned int)\n+\t\t     (GET_MODE_BITSIZE (mode)\n \t\t      - GET_MODE_BITSIZE (GET_MODE (XEXP (XEXP (t, 0), 0))))))\n \t{\n \t  c1 = XEXP (XEXP (t, 0), 1); z = f; op = GET_CODE (XEXP (t, 0));\n@@ -4880,7 +4881,8 @@ simplify_if_then_else (x)\n \t       && subreg_lowpart_p (XEXP (XEXP (t, 0), 1))\n \t       && rtx_equal_p (SUBREG_REG (XEXP (XEXP (t, 0), 1)), f)\n \t       && (num_sign_bit_copies (f, GET_MODE (f))\n-\t\t   > (GET_MODE_BITSIZE (mode)\n+\t\t   > (unsigned int)\n+\t\t     (GET_MODE_BITSIZE (mode)\n \t\t      - GET_MODE_BITSIZE (GET_MODE (XEXP (XEXP (t, 0), 1))))))\n \t{\n \t  c1 = XEXP (XEXP (t, 0), 0); z = f; op = GET_CODE (XEXP (t, 0));\n@@ -8804,8 +8806,8 @@ extended_count (x, mode, unsignedp)\n \n   return (unsignedp\n \t  ? (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n-\t     ? (GET_MODE_BITSIZE (mode) - 1\n-\t\t- floor_log2 (nonzero_bits (x, mode)))\n+\t     ? (unsigned int) (GET_MODE_BITSIZE (mode) - 1\n+\t\t\t       - floor_log2 (nonzero_bits (x, mode)))\n \t     : 0)\n \t  : num_sign_bit_copies (x, mode) - 1);\n }\n@@ -9035,7 +9037,7 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t multiple operations, each of which are defined, we know what the\n \t result is supposed to be.  */\n \n-      if (count > GET_MODE_BITSIZE (shift_mode) - 1)\n+      if (count > (unsigned int) (GET_MODE_BITSIZE (shift_mode) - 1))\n \t{\n \t  if (code == ASHIFTRT)\n \t    count = GET_MODE_BITSIZE (shift_mode) - 1;\n@@ -9151,9 +9153,9 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t  if (subreg_lowpart_p (varop)\n \t      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (varop)))\n \t\t  > GET_MODE_SIZE (GET_MODE (varop)))\n-\t      && (((GET_MODE_SIZE (GET_MODE (SUBREG_REG (varop)))\n-\t\t    + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD)\n-\t\t  == mode_words))\n+\t      && (unsigned int) ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (varop)))\n+\t\t\t\t  + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD)\n+\t\t == mode_words)\n \t    {\n \t      varop = SUBREG_REG (varop);\n \t      if (GET_MODE_SIZE (GET_MODE (varop)) > GET_MODE_SIZE (mode))\n@@ -9194,7 +9196,8 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t     bit of a wider mode may be different from what would be\n \t     interpreted as the sign bit in a narrower mode, so, if\n \t     the result is narrower, don't discard the shift.  */\n-\t  if (code == LSHIFTRT && count == GET_MODE_BITSIZE (result_mode) - 1\n+\t  if (code == LSHIFTRT\n+\t      && count == (unsigned int) (GET_MODE_BITSIZE (result_mode) - 1)\n \t      && (GET_MODE_BITSIZE (result_mode)\n \t\t  >= GET_MODE_BITSIZE (GET_MODE (varop))))\n \t    {\n@@ -9228,8 +9231,9 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t\t (ashiftrt:M1 (ashift:M1 (and:M1 (subreg:M1 FOO 0 C2) C3) C1).\n \t\t This simplifies certain SIGN_EXTEND operations.  */\n \t      if (code == ASHIFT && first_code == ASHIFTRT\n-\t\t  && (GET_MODE_BITSIZE (result_mode)\n-\t\t      - GET_MODE_BITSIZE (GET_MODE (varop))) == count)\n+\t\t  && count == (unsigned int)\n+\t\t\t      (GET_MODE_BITSIZE (result_mode)\n+\t\t\t       - GET_MODE_BITSIZE (GET_MODE (varop))))\n \t\t{\n \t\t  /* C3 has the low-order C1 bits zero.  */\n \n@@ -9385,7 +9389,8 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t      && XEXP (XEXP (varop, 0), 1) == constm1_rtx\n \t      && (STORE_FLAG_VALUE == 1 || STORE_FLAG_VALUE == -1)\n \t      && (code == LSHIFTRT || code == ASHIFTRT)\n-\t      && count == GET_MODE_BITSIZE (GET_MODE (varop)) - 1\n+\t      && count == (unsigned int)\n+\t\t\t  (GET_MODE_BITSIZE (GET_MODE (varop)) - 1)\n \t      && rtx_equal_p (XEXP (XEXP (varop, 0), 0), XEXP (varop, 1)))\n \t    {\n \t      count = 0;\n@@ -9440,7 +9445,7 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t  if (code == LSHIFTRT\n \t      && XEXP (varop, 1) == const0_rtx\n \t      && GET_MODE (XEXP (varop, 0)) == result_mode\n-\t      && count == GET_MODE_BITSIZE (result_mode) - 1\n+\t      && count == (unsigned int) (GET_MODE_BITSIZE (result_mode) - 1)\n \t      && GET_MODE_BITSIZE (result_mode) <= HOST_BITS_PER_WIDE_INT\n \t      && ((STORE_FLAG_VALUE\n \t\t   & ((HOST_WIDE_INT) 1\n@@ -9459,7 +9464,8 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \tcase NEG:\n \t  /* (lshiftrt (neg A) C) where A is either 0 or 1 and C is one less\n \t     than the number of bits in the mode is equivalent to A.  */\n-\t  if (code == LSHIFTRT && count == GET_MODE_BITSIZE (result_mode) - 1\n+\t  if (code == LSHIFTRT\n+\t      && count == (unsigned int) (GET_MODE_BITSIZE (result_mode) - 1)\n \t      && nonzero_bits (XEXP (varop, 0), result_mode) == 1)\n \t    {\n \t      varop = XEXP (varop, 0);\n@@ -9483,7 +9489,8 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \t  /* (lshiftrt (plus A -1) C) where A is either 0 or 1 and C\n \t     is one less than the number of bits in the mode is\n \t     equivalent to (xor A 1).  */\n-\t  if (code == LSHIFTRT && count == GET_MODE_BITSIZE (result_mode) - 1\n+\t  if (code == LSHIFTRT\n+\t      && count == (unsigned int) (GET_MODE_BITSIZE (result_mode) - 1)\n \t      && XEXP (varop, 1) == constm1_rtx\n \t      && nonzero_bits (XEXP (varop, 0), result_mode) == 1\n \t      && merge_outer_ops (&outer_op, &outer_const, XOR,\n@@ -9548,10 +9555,12 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \n \t  if ((STORE_FLAG_VALUE == 1 || STORE_FLAG_VALUE == -1)\n \t      && GET_CODE (XEXP (varop, 0)) == ASHIFTRT\n-\t      && count == GET_MODE_BITSIZE (GET_MODE (varop)) - 1\n+\t      && count == (unsigned int)\n+\t\t\t  (GET_MODE_BITSIZE (GET_MODE (varop)) - 1)\n \t      && (code == LSHIFTRT || code == ASHIFTRT)\n \t      && GET_CODE (XEXP (XEXP (varop, 0), 1)) == CONST_INT\n-\t      && INTVAL (XEXP (XEXP (varop, 0), 1)) == count\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (XEXP (XEXP (varop, 0), 1))\n+\t\t == count\n \t      && rtx_equal_p (XEXP (XEXP (varop, 0), 0), XEXP (varop, 1)))\n \t    {\n \t      count = 0;\n@@ -9615,7 +9624,7 @@ simplify_shift_const (x, code, result_mode, varop, orig_count)\n \n   if (x && GET_RTX_CLASS (GET_CODE (x)) == '2'\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n-      && INTVAL (XEXP (x, 1)) == count)\n+      && (unsigned HOST_WIDE_INT) INTVAL (XEXP (x, 1)) == count)\n     const_rtx = XEXP (x, 1);\n   else\n     const_rtx = GEN_INT (count);\n@@ -10527,7 +10536,8 @@ simplify_comparison (code, pop0, pop1)\n \t\t\t& ~GET_MODE_MASK (mode))\n \t\t  || (num_sign_bit_copies (XEXP (SUBREG_REG (op0), 0),\n \t\t\t\t\t   GET_MODE (SUBREG_REG (op0)))\n-\t\t      > (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n+\t\t      > (unsigned int)\n+\t\t\t(GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n \t\t\t - GET_MODE_BITSIZE (mode)))))\n \t    {\n \t      op0 = SUBREG_REG (op0);\n@@ -10611,7 +10621,8 @@ simplify_comparison (code, pop0, pop1)\n \t     of bits in X minus 1, is one iff X > 0.  */\n \t  if (sign_bit_comparison_p && GET_CODE (XEXP (op0, 0)) == ASHIFTRT\n \t      && GET_CODE (XEXP (XEXP (op0, 0), 1)) == CONST_INT\n-\t      && INTVAL (XEXP (XEXP (op0, 0), 1)) == mode_width - 1\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (XEXP (XEXP (op0, 0), 1))\n+\t\t == mode_width - 1\n \t      && rtx_equal_p (XEXP (XEXP (op0, 0), 0), XEXP (op0, 1)))\n \t    {\n \t      op0 = XEXP (op0, 1);\n@@ -10869,7 +10880,8 @@ simplify_comparison (code, pop0, pop1)\n \t     low-order bit.  */\n \t  if (const_op == 0 && equality_comparison_p\n \t      && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t      && INTVAL (XEXP (op0, 1)) == mode_width - 1)\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (XEXP (op0, 1))\n+\t\t == mode_width - 1)\n \t    {\n \t      op0 = simplify_and_const_int (NULL_RTX, mode, XEXP (op0, 0),\n \t\t\t\t\t    (HOST_WIDE_INT) 1);\n@@ -10966,7 +10978,8 @@ simplify_comparison (code, pop0, pop1)\n \t  if (const_op == 0\n \t      && (equality_comparison_p || sign_bit_comparison_p)\n \t      && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t      && INTVAL (XEXP (op0, 1)) == mode_width - 1)\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (XEXP (op0, 1))\n+\t\t == mode_width - 1)\n \t    {\n \t      op0 = XEXP (op0, 0);\n \t      code = (code == NE || code == GT ? LT : GE);\n@@ -11067,9 +11080,11 @@ simplify_comparison (code, pop0, pop1)\n \n \t  if (zero_extended\n \t      || ((num_sign_bit_copies (op0, tmode)\n-\t\t   > GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))\n+\t\t   > (unsigned int) (GET_MODE_BITSIZE (tmode)\n+\t\t\t\t     - GET_MODE_BITSIZE (mode)))\n \t\t  && (num_sign_bit_copies (op1, tmode)\n-\t\t      > GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))))\n+\t\t      > (unsigned int) (GET_MODE_BITSIZE (tmode)\n+\t\t\t\t\t- GET_MODE_BITSIZE (mode)))))\n \t    {\n \t      /* If OP0 is an AND and we don't have an AND in MODE either,\n \t\t make a new AND in the proper mode.  */"}]}