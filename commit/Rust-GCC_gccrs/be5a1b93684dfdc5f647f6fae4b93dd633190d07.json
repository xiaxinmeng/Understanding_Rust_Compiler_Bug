{"sha": "be5a1b93684dfdc5f647f6fae4b93dd633190d07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1YTFiOTM2ODRkZmRjNWY2NDdmNmZhZTRiOTNkZDYzMzE5MGQwNw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-06-22T09:51:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T09:51:06Z"}, "message": "sem_res.adb: Add comment.\n\n2010-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Add comment.\n\t* projects.texi, gnat_ugn.texi: Remove macro.\n\nFrom-SVN: r161158", "tree": {"sha": "85efa69b4afd1e4dfb5d85b6e73dd8afac2cabda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85efa69b4afd1e4dfb5d85b6e73dd8afac2cabda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be5a1b93684dfdc5f647f6fae4b93dd633190d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5a1b93684dfdc5f647f6fae4b93dd633190d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5a1b93684dfdc5f647f6fae4b93dd633190d07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5a1b93684dfdc5f647f6fae4b93dd633190d07/comments", "author": null, "committer": null, "parents": [{"sha": "a9e00bfdb8c2a33475bada913eaed971cc984fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e00bfdb8c2a33475bada913eaed971cc984fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e00bfdb8c2a33475bada913eaed971cc984fbd"}], "stats": {"total": 182, "additions": 95, "deletions": 87}, "files": [{"sha": "0f45849c81b8db4d2c084fa8f83c605fc96bdf4f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=be5a1b93684dfdc5f647f6fae4b93dd633190d07", "patch": "@@ -1,3 +1,8 @@\n+2010-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Add comment.\n+\t* projects.texi, gnat_ugn.texi: Remove macro.\n+\n 2010-06-22  Vincent Celier  <celier@adacore.com>\n \n \t* prj-attr.adb: Remove project level attribute Main_Language."}, {"sha": "b725b50be8b93f52339c31ceaa8a99edf74d1c8a", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=be5a1b93684dfdc5f647f6fae4b93dd633190d07", "patch": "@@ -11781,10 +11781,6 @@ are used in this example.\n @end quotation\n @end macro\n \n-@macro CINDEX{TXT}\n-@cindex \\TXT\\\n-@end macro\n-\n @include projects.texi\n \n @c *****************************************"}, {"sha": "c2ed8561104279244e9ae26acb35d0276fd6ac40", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 84, "deletions": 83, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=be5a1b93684dfdc5f647f6fae4b93dd633190d07", "patch": "@@ -235,12 +235,12 @@ corresponding source files. This is the only settings that are needed by all\n the tools that will use this project (builder, compiler, binder and linker for\n the compilation, IDEs to edit the source files,@dots{}).\n \n-@CINDEX{Source directories}\n+@cindex Source directories\n First step is to declare the source directories, which are the directories\n to be searched to find source files. In the case of the example,\n the @file{common} directory is the only source directory.\n \n-@CINDEX{@code{Source_Dirs}}\n+@cindex @code{Source_Dirs}\n There are several ways of defining source directories:\n \n @itemize @bullet\n@@ -256,7 +256,7 @@ There are several ways of defining source directories:\n   @file{build.gpr} is inside @file{common/}, or \"common\" if it is one level up).\n   Each of the source directories must exist and be readable.\n \n-  @CINDEX{portability}\n+  @cindex portability\n   The syntax for directories is platform specific. For portability, however, the\n   project manager will always properly translate UNIX-like path names to the\n   native format of specific platform. For instance, when the same project file\n@@ -268,9 +268,9 @@ There are several ways of defining source directories:\n   list ends with @emph{\"/**\"}, then that path and all its subdirectories\n   (recursively) are included in the list of source directories. For\n   instance, @file{./**} represent the complete directory tree rooted at \".\".\n-  @CINDEX{Source directories, recursive}\n+  @cindex Source directories, recursive\n \n-  @CINDEX{@code{Excluded_Source_Dirs}}\n+  @cindex @code{Excluded_Source_Dirs}\n   When using that construct, it can sometimes be convenient to also use\n   the attribute @b{Excluded_Source_Dirs}, which is also a list of paths.\n   Each entry specifies a directory whose immediate content, not including\n@@ -310,7 +310,7 @@ locating the specified source files in the specified source directories.\n   the sources in subdirectory \"common\" for the default language (Ada) using\n   the default naming convention.\n \n-  @CINDEX{@code{Languages}}\n+  @cindex @code{Languages}\n   However, when compiling a multi-language application, or a pure C\n   application, the project\n   manager must be told which languages are of interest, which is done by setting\n@@ -319,7 +319,7 @@ locating the specified source files in the specified source directories.\n   while other tools like @command{gprbuild} know about many more\n   languages such as C, C++, Fortran, assembly  and others can be added dynamically.\n \n-  @CINDEX{Naming scheme}\n+  @cindex Naming scheme\n   Even when using only Ada, the default naming might not be suitable. Indeed,\n   how does the project manager recognizes an \"Ada file\" from any other\n   file ? Project files can describe the naming scheme used for source files,\n@@ -329,7 +329,7 @@ locating the specified source files in the specified source directories.\n   is explicitly specified.\n   @xref{Naming Schemes}.\n \n-@item @CINDEX{@code{Source_Files}}\n+@item @cindex @code{Source_Files}\n   In some cases, source directories might contain files that should not be\n   included in a project. One can specify the explicit list of file names to\n   be considered through the @b{Source_Files} attribute.\n@@ -346,7 +346,7 @@ locating the specified source files in the specified source directories.\n   @emph{Source_Dirs} can be set to the empty list, with the same\n   result.\n \n-@item @CINDEX{@code{Source_List_File}}\n+@item @cindex @code{Source_List_File}\n   If ther is a great number of files, it might be more convenient to use\n   the attribute @b{Source_List_File}, which specifies the full path of a file.\n   This file must contain a list of source file names (one per line, no\n@@ -358,9 +358,9 @@ locating the specified source files in the specified source directories.\n   @code{Source_List_File} are given explicit values. In this case, the attribute\n   @code{Source_Files} prevails.\n \n-@item @CINDEX{@code{Excluded_Source_Files}}\n-  @CINDEX{@code{Locally_Removed_Files}}\n-  @CINDEX{@code{Excluded_Source_List_File}}\n+@item @cindex @code{Excluded_Source_Files}\n+  @cindex @code{Locally_Removed_Files}\n+  @cindex @code{Excluded_Source_List_File}\n   Specifying an explicit list of files is not always convenient.It might be\n   more convenient to use the default search rules with specific exceptions.\n   This can be done thanks to the attribute @b{Excluded_Source_Files}\n@@ -407,7 +407,7 @@ to create new or temporary files there. Instead, all  files are created\n in the object directory. It is of course not true for project-aware IDEs,\n whose purpose it is to create the source files.\n \n-@CINDEX{@code{Object_Dir}}\n+@cindex @code{Object_Dir}\n The object directory is specified through the @b{Object_Dir} attribute.\n Its value is the path to the object directory, either absolute or\n relative to the directory containing the project file. This\n@@ -440,7 +440,7 @@ When the @command{linker} is called, it usually creates an executable. By\n default, this executable is placed in the object directory of the project. It\n might be convenient to store it in its own directory.\n \n-@CINDEX{@code{Exec_Dir}}\n+@cindex @code{Exec_Dir}\n This can be done through the @code{Exec_Dir} attribute, which, like\n @emph{Object_Dir} contains a single absolute or relative path and must point to\n an existing and writable directory, unless you ask the tool to create it on your\n@@ -480,7 +480,7 @@ such as @command{makefile}, one does not need to specify the list of\n dependencies of each executable, the project-aware builders knows enough of the\n semantics of the languages to build ands link only the necessary elements.\n \n-@CINDEX{@code{Main}}\n+@cindex @code{Main}\n The list of main files is specified via the @b{Main} attribute. It contains\n a list of file names (no directories). If a project defines this\n attribute, it is not necessary to identify  main files on the\n@@ -510,7 +510,7 @@ automatically builds all the executables corresponding to the files\n listed in the @emph{Main} attribute. It is possible to specify one\n or more executables on the command line to build a subset of them.\n \n-@CINDEX{@code{Main_Language}}\n+@cindex @code{Main_Language}\n The attribute @b{Main_Language} contains a string that specifies the\n language of the main program.\n @c ??? What is this for, we already have the naming scheme\n@@ -531,7 +531,7 @@ Of course, we always want more control. This section will show you how to\n specify the compilation switches that the various tools involved in the\n building of the executable should use.\n \n-@CINDEX{command line length}\n+@cindex command line length\n Since source names and locations are described into the project file, it is not\n necessary to use switches on the command line for this purpose (switches such as\n -I for gcc). This removes a major source of command line length overflow.\n@@ -549,7 +549,7 @@ the project manager and will be called with user defined switches from the\n project files. However, we need to introduce a new project file concept to\n express which switches to be used for any of the tools involved in the build.\n \n-@CINDEX{project file packages}\n+@cindex project file packages\n A project file is subdivided into zero or more @b{packages}, each of which\n contains the attributes specific to one tool (or one set of tools). Project\n files use an Ada-like syntax for packages. Package names permitted in project\n@@ -594,7 +594,7 @@ Several attributes can be used to specify the switches:\n \n @table @asis\n @item @b{Default_Switches}:\n-  @CINDEX{@code{Default_Switches}}\n+  @cindex @code{Default_Switches}\n   This is the first mention in this manual of an @b{indexed attribute}. When\n   this attribute is defined, one must supply an @emph{index} in the form of a\n   literal string.\n@@ -614,7 +614,7 @@ Several attributes can be used to specify the switches:\n   @end smallexample\n \n @item @b{Switches}:\n-  @CINDEX{@code{Switches}}\n+  @cindex @code{Switches}\n   in some cases, we might want to use specific switches\n   for one or more files. For instance, compiling @file{proc.adb} might not be\n   possible at high level of optimization because of a compiler issue.\n@@ -635,7 +635,7 @@ Several attributes can be used to specify the switches:\n   in which case it has the same semantics as @emph{Default_Switches}.\n \n @item @b{Local_Configuration_Pragams}:\n-  @CINDEX{@code{Local_Configuration_Pragmas}}\n+  @cindex @code{Local_Configuration_Pragmas}\n   this attribute may specify the path\n   of a file containing configuration pragmas for use by the Ada compiler,\n   such as @code{pragma Restrictions (No_Tasking)}. These pragmas will be\n@@ -707,7 +707,7 @@ Notice the three steps described earlier:\n @end itemize\n \n @noindent\n-@CINDEX{@option{-v} option (for GPRbuild)}\n+@cindex @option{-v} option (for GPRbuild)\n The default output of GPRbuild's execution is kept reasonably simple and easy to\n understand. In particular, some of the less frequently used commands are not\n shown, and some parameters are abbreviated. So it is not possible to rerun the\n@@ -721,7 +721,7 @@ information, more complete compilation, post-compilation and link commands.\n @c ---------------------------------------------\n \n @noindent\n-@CINDEX{@code{Executable}}\n+@cindex @code{Executable}\n By default, the executable name corresponding to a main file is\n computed from the main source file name. Through the attribute\n @b{Builder.Executable}, it is possible to change this default.\n@@ -740,7 +740,7 @@ on Windows), we could configure our project file to build \"proc1\"\n @end smallexample\n \n @noindent\n-@CINDEX{@code{Executable_Suffix}}\n+@cindex @code{Executable_Suffix}\n Attribute @b{Executable_Suffix}, when specified, may change the suffix\n of the executable files, when no attribute @code{Executable} applies:\n its value replace the platform-specific executable suffix.\n@@ -847,7 +847,7 @@ The following attributes can be defined in package @code{Naming}:\n \n @table @asis\n @item @b{Casing}:\n-  @CINDEX{@code{Casing}}\n+  @cindex @code{Casing}\n   Its value must be one of @code{\"lowercase\"} (the default if\n   unspecified), @code{\"uppercase\"} or @code{\"mixedcase\"}. It describes the\n   casing of file names with regards to the Ada unit name. Given an Ada unit\n@@ -857,7 +857,7 @@ The following attributes can be defined in package @code{Naming}:\n   irrelevant.\n \n @item @b{Dot_Replacement}:\n-  @CINDEX{@code{Dot_Replacement}}\n+  @cindex @code{Dot_Replacement}\n   This attribute specifies the string that should replace the \".\" in unit\n   names. Its default value is @code{\"-\"} so that a unit\n   @code{Parent.Child}is expected to be found in the file @file{parent-child.adb}.\n@@ -875,8 +875,8 @@ The following attributes can be defined in package @code{Naming}:\n   @end itemize\n \n @item @b{Spec_Suffix} and @b{Specification_Suffix}:\n-  @CINDEX{@code{Spec_Suffix}}\n-  @CINDEX{@code{Specification_Suffix}}\n+  @cindex @code{Spec_Suffix}\n+  @cindex @code{Specification_Suffix}\n   For Ada, these attributes give the suffix used in file names that contain\n   specifications. For other languages, they give the extension for files\n   that contain declaration (header files in C for instance). The attribute\n@@ -895,8 +895,8 @@ The following attributes can be defined in package @code{Naming}:\n   @end itemize\n \n @item @b{Body_Suffix} and @b{Implementation_Suffix}:\n-  @CINDEX{@code{Body_Suffix}}\n-  @CINDEX{@code{Implementation_Suffix}}\n+  @cindex @code{Body_Suffix}\n+  @cindex @code{Implementation_Suffix}\n   These attributes give the extension used for file names that contain\n   code (bodies in Ada). They are indexed on the language. The second\n   version is obsolescent and fully replaced by the first attribute.\n@@ -921,15 +921,15 @@ The following attributes can be defined in package @code{Naming}:\n   (GPS).\n \n @item @b{Separate_Suffix}:\n-  @CINDEX{@code{Separate_Suffix}}\n+  @cindex @code{Separate_Suffix}\n   This attribute is specific to Ada. It denotes the suffix used in file names\n   that contain separate bodies. If it is not specified, then it defaults to\n   same value as @code{Body_Suffix (\"Ada\")}. The same rules apply as for the\n   @code{Body_Suffix} attribute. The only accepted index is \"Ada\".\n \n @item @b{Spec} or @b{Specification}:\n-  @CINDEX{@code{Spec}}\n-  @CINDEX{@code{Specification}}\n+  @cindex @code{Spec}\n+  @cindex @code{Specification}\n   This attribute @code{Spec} can be used to define the source file name for a\n   given Ada compilation unit's spec. The index is the literal name of the Ada\n   unit (case insensitive). The value is the literal base name of the file that\n@@ -948,13 +948,13 @@ The following attributes can be defined in package @code{Naming}:\n   @end smallexample\n \n @item @b{Body} or @b{Implementation}:\n-  @CINDEX{@code{Body}}\n-  @CINDEX{@code{Implementation}}\n+  @cindex @code{Body}\n+  @cindex @code{Implementation}\n   These attribute play the same role as @emph{Spec} for Ada bodies.\n \n @item @b{Specification_Exceptions} and @b{Implementation_Exceptions}:\n-  @CINDEX{@code{Specification_Exceptions}}\n-  @CINDEX{@code{Implementation_Exceptions}}\n+  @cindex @code{Specification_Exceptions}\n+  @cindex @code{Implementation_Exceptions}\n   These attributes define exceptions to the naming scheme for languages\n   other than Ada. They are indexed on the language name, and contain\n   a list of file names respectively for headers and source code.\n@@ -1049,7 +1049,7 @@ of our project:\n @end smallexample\n \n @noindent\n-@CINDEX{@code{Externally_Built}}\n+@cindex @code{Externally_Built}\n When such a project is compiled, @command{gnatmake} will automatically\n check the other projects and recompile their sources when needed. It will also\n recompile the sources from @code{Build} when needed, and finally create the\n@@ -1081,7 +1081,7 @@ and no project file with the @file{^.gpr^.GPR^} extension is found, then\n the file is searched for exactly as written in the @code{with} clause,\n that is with no extension.\n \n-@CINDEX{project path}\n+@cindex project path\n When a relative path or a base name is used, the\n project files are searched relative to each of the directories in the\n @b{project path}. This path includes all the directories found with the\n@@ -1091,8 +1091,8 @@ the search stops:\n @itemize @bullet\n @item First, the file is searched relative to the directory that contains the\n   current project file.\n-@item @CINDEX{@code{ADA_PROJECT_PATH}}\n-  @CINDEX{@code{GPR_PROJECT_PATH}}\n+@item @cindex @code{ADA_PROJECT_PATH}\n+  @cindex @code{GPR_PROJECT_PATH}\n   Then it is searched relative to all the directories specified in the\n   ^environment variables^logical names^ @b{GPR_PROJECT_PATH} and\n   @b{ADA_PROJECT_PATH} (in that order) if they exist.. The former is\n@@ -1268,7 +1268,7 @@ There are two main approaches to avoiding this duplication:\n   in any directory and we are sure it shares no sources with @code{Build}\n   or @code{Logging}, which of course would be invalid.\n \n-  @CINDEX{project qualifier}\n+  @cindex project qualifier\n   Note the additional use of the @b{abstract} qualifier in @file{shared.gpr}.\n   This qualifier is optional, but helps convey the message that we do not\n   intend this project to have sources (@pxref{Qualified Projects} for\n@@ -1296,15 +1296,15 @@ Here is a list of commonly used global attributes:\n \n @table @asis\n @item @b{Builder.Global_Configuration_Pragmas}:\n-  @CINDEX{@code{Global_Configuration_Pragmas}}\n+  @cindex @code{Global_Configuration_Pragmas}\n   This attribute points to a file that contains configuration pragmas\n   to use when building executables. These pragmas apply for all\n   executables build from this project hierarchy. As we have seen before,\n   additional pragmas can be specified on a per-project basis by setting the\n   @code{Compiler.Local_Configuration_Pragmas} attribute.\n \n @item @b{Builder.Global_Compilation_Switches}:\n-  @CINDEX{@code{Global_Compilation_Switches}}\n+  @cindex @code{Global_Compilation_Switches}\n   This attribute is a list of compiler switches to use when compiling any\n   source file in the project hierarchy. These switches are used in addition\n   to the ones defined in the @code{Compiler} package, which only apply to\n@@ -1345,14 +1345,14 @@ because in presence of multiple projects depending on each other,\n you will also have to duplicate the complete hierarchy and adapt the project\n files to point to the right copies.\n \n-@CINDEX{scenarios}\n+@cindex scenarios\n Instead, project files support the notion of scenarios controlled\n by external values. Such values can come from several sources (in decreasing\n order of priority):\n \n @table @asis\n @item @b{Command line}:\n-  @CINDEX{@option{-X}}\n+  @cindex @option{-X}\n   When launching @command{gnatmake} or @command{gprbuild}, the user can pass\n   extra @option{-X} switches to define the external value. In\n   our case, the command line might look like\n@@ -1372,7 +1372,7 @@ order of priority):\n \n @end table\n \n-@CINDEX{@code{external}}\n+@cindex @code{external}\n We now need to get that value in the project. The general form is to use\n the predefined function @b{external} which returns the current value of\n the external. For instance, we could setup the object directory to point to\n@@ -1392,8 +1392,8 @@ value to use if \"mode\" is not set from the command line or the environment.\n In order to set the switches according to the different scenarios, other\n constructs have to be introduced such as typed variables and case statements.\n \n-@CINDEX{typed variable}\n-@CINDEX{case statement}\n+@cindex typed variable\n+@cindex case statement\n A @b{typed variable} is a variable that\n can take only a limited number of values, similar to an enumeration in Ada.\n Such a variable can then be used in a @b{case statement} and create conditional\n@@ -1484,15 +1484,15 @@ front of the @code{project} keyword.\n \n @table @asis\n @item @b{Library_Name}:\n-  @CINDEX{@code{Library_Name}}\n+  @cindex @code{Library_Name}\n   This attribute is the name of the library to be built. There is no\n   restriction on the name of a library imposed by the project manager;\n   however, there may be system specific restrictions on the name.\n   In general, it is recommended to stick to alphanumeric characters\n   (and possibly underscores) to help portability.\n \n @item @b{Library_Dir}:\n-  @CINDEX{@code{Library_Dir}}\n+  @cindex @code{Library_Dir}\n   This attribute  is the path (absolute or relative) of the directory where\n   the library is to be installed. In the process of building a library,\n   the sources are compiled, the object files end up  in the explicit or\n@@ -1521,7 +1521,7 @@ Other library-related attributes can be used to change the defaults:\n \n @table @asis\n @item @b{Library_Kind}:\n-  @CINDEX{@code{Library_Kind}}\n+  @cindex @code{Library_Kind}\n   The value of this attribute must be either @code{\"static\"}, @code{\"dynamic\"} or\n   @code{\"relocatable\"} (the latter is a synonym for dynamic). It indicates\n   which kind of library should be build (the default is to build a\n@@ -1542,17 +1542,17 @@ Other library-related attributes can be used to change the defaults:\n   to indicate at the various kinds of library to be build and their\n   corresponding object_dir.\n \n+@cindex @code{Library_ALI_Dir}\n @item @b{Library_ALI_Dir}:\n-  @CINDEX{@code{Library_ALI_Dir}}\n   This attribute may be specified to indicate the directory where the ALI\n   files of the library are installed. By default, they are copied into the\n   @code{Library_Dir} directory, but as for the executables where we have a\n   separate @code{Exec_Dir} attribute, you might want to put them in a separate\n   directory since there can be hundreds of them. The same restrictions as for\n   the @code{Library_Dir} attribute apply.\n \n+@cindex @code{Library_Version}\n @item @b{Library_Version}:\n-  @CINDEX{@code{Library_Version}}\n   This attribute is platform dependent, and has no effect on VMS and Windows.\n   On Unix, it is used only for dynamic libraries as the internal\n   name of the library (the @code{\"soname\"}). If the library file name (built\n@@ -1561,32 +1561,32 @@ Other library-related attributes can be used to change the defaults:\n   will be @code{Library_Version}. This follows the usual installation schemes\n   for dynamic libraries on many Unix systems.\n \n-  @smallexample @c projectfile\n-  @group\n+@smallexample @c projectfile\n+@group\n   project Logging is\n      Version := \"1\";\n      for Library_Dir use \"lib\";\n      for Library_Name use \"logging\";\n      for Library_Kind use \"dynamic\";\n      for Library_Version use \"liblogging.so.\" & Version;\n-  end Loggin;\n-  @end group\n-  @end smallexample\n+  end Logging;\n+@end group\n+@end smallexample\n \n   @noindent\n   After the compilation, the directory @file{lib} will contain both a\n   @file{libdummy.so.1} library and a symbolic link to it called\n   @file{libdummy.so}.\n \n+@cindex @code{Library_GCC}\n @item @b{Library_GCC}:\n-  @CINDEX{@code{Library_GCC}}\n   This attribute is the name of the tool to use instead of \"gcc\" to link shared\n   libraries. A common use of this attribute is to define a wrapper script that\n   accomplishes specific actions before calling gcc (which itself is calling the\n   linker to build the library image).\n \n+@cindex @code{Linker_Options}\n @item @b{Linker.Linker_Options}:\n-  @CINDEX{@code{Linker_Options}}\n   This attribute specifies additional switches to be given to the linker when\n   linking an executable. It is ignored when defined in the main project and\n   taken into account in all other projects that are imported directly or\n@@ -1691,7 +1691,7 @@ the proper order of libraries in the final link command.\n @c ---------------------------------------------\n \n @noindent\n-@CINDEX{standalone libraries}\n+@cindex standalone libraries\n A @b{stand-alone library} is a library that contains the necessary code to\n elaborate the Ada units that are included in the library. A stand-alone\n library is a convenient way to add an Ada subsystem to a more global system\n@@ -1709,19 +1709,19 @@ two attributes that make a project a Library Project (@code{Library_Name} and\n \n @table @asis\n @item @b{Library_Interface}:\n-  @CINDEX{@code{Library_Interface}}\n+  @cindex @code{Library_Interface}\n   This attribute defines an explicit subset of the units of the project.\n   Projects importing this library project may only \"with\" units whose sources\n   are listed in the @code{Library_Interface}. Other sources are considered\n   implementation units.\n \n-  @smallexample @c projectfile\n-  @group\n+@smallexample @c projectfile\n+@group\n      for Library_Dir use \"lib\";\n      for Library_Name use \"loggin\";\n      for Library_Interface use (\"lib1\", \"lib2\");  --  unit names\n-  @end group\n-  @end smallexample\n+@end group\n+@end smallexample\n \n @end table\n \n@@ -1735,7 +1735,7 @@ included in the library.\n \n @table @asis\n @item @b{Library_Auto_Init}:\n-  @CINDEX{@code{Library_Auto_Init}}\n+  @cindex @code{Library_Auto_Init}\n   A dynamic stand-alone Library is automatically initialized\n   if automatic initialization of Stand-alone Libraries is supported on the\n   platform and if attribute @b{Library_Auto_Init} is not specified or\n@@ -1750,7 +1750,7 @@ included in the library.\n   package.\n \n @item @b{Library_Dir}:\n-  @CINDEX{@code{Library_Dir}}\n+  @cindex @code{Library_Dir}\n   For a stand-alone library, only the @file{ALI} files of the interface units\n   (those that are listed in attribute @code{Library_Interface}) are copied to\n   the library directory. As a consequence, only the interface units may be\n@@ -1763,12 +1763,12 @@ included in the library.\n   used in the call to @command{gnatbind}.\n \n @item @b{Library_Options}:\n-  @CINDEX{@code{Library_Options}}\n+  @cindex @code{Library_Options}\n   This attribute may be used to specified additional switches to  @command{gcc}\n   when linking the library.\n \n @item @b{Library_Src_Dir}:\n-  @CINDEX{@code{Library_Src_Dir}}\n+  @cindex @code{Library_Src_Dir}\n   This attribute defines the location (absolute or relative to the project\n   directory) where the sources of the interface units are copied at\n   installation time.\n@@ -1780,7 +1780,7 @@ included in the library.\n   which is the default value for this attribute.\n \n @item @b{Library_Symbol_Policy}:\n-  @CINDEX{@code{Library_Symbol_Policy}}\n+  @cindex @code{Library_Symbol_Policy}\n   This attribute controls the export of symbols and, on some platforms (like\n   VMS) that have the notions of major and minor IDs built in the library\n   files, it controls the setting of these IDs. It is not supported on all\n@@ -1811,15 +1811,15 @@ included in the library.\n   @end itemize\n \n @item @b{Library_Reference_Symbol_File}\n-  @CINDEX{@code{Library_Reference_Symbol_File}}\n+  @cindex @code{Library_Reference_Symbol_File}\n   This attribute may define the path name of a reference symbol file that is\n   read when the symbol policy is either \"compliant\" or \"controlled\", on\n   platforms that support symbol control, such as VMS, when building a\n   stand-alone library. The path may be an absolute path or a path relative\n   to the project directory.\n \n @item @b{Library_Symbol_File}\n-  @CINDEX{@code{Library_Symbol_File}}\n+  @cindex @code{Library_Symbol_File}\n   This attribute may define the name of the symbol file to be created when\n   building a stand-alone library when the symbol policy is either \"compliant\",\n   \"controlled\" or \"restricted\", on platforms that support symbol control,\n@@ -1950,8 +1950,8 @@ necessary to indicate that the inherited body is not part of the sources\n of the project, otherwise there will be a compilation error\n when compiling the spec.\n \n-@CINDEX{@code{Excluded_Source_Files}}\n-@CINDEX{@code{Excluded_Source_List_File}}\n+@cindex @code{Excluded_Source_Files}\n+@cindex @code{Excluded_Source_List_File}\n For that purpose, the attribute @b{Excluded_Source_Files} is used.\n Its value is a list of file names.\n It is also possible to use attribute @code{Excluded_Source_List_File}.\n@@ -2023,7 +2023,7 @@ The extension @file{b_ext.gpr} is required, even though we are not overriding\n any of the sources of @file{b.gpr} because otherwise @file{c_expr.gpr} would\n import @file{b.gpr} which itself knows nothing about @file{a_ext.gpr}.\n \n-@CINDEX{extends all}\n+@cindex extends all\n When extending a large system spanning multiple projects, it is often\n inconvenient to extend every project in the hierarchy that is impacted by a\n small change introduced in a low layer. In such cases, it is possible to create\n@@ -2988,7 +2988,7 @@ The following switches are used by GNAT tools that support project files:\n @table @option\n \n @item ^-P^/PROJECT_FILE=^@var{project}\n-@CINDEX{@option{^-P^/PROJECT_FILE^} (any project-aware tool)}\n+@cindex @option{^-P^/PROJECT_FILE^} (any project-aware tool)\n Indicates the name of a project file. This project file will be parsed with\n the verbosity indicated by @option{^-vP^MESSAGE_PROJECT_FILES=^@emph{x}},\n if any, and using the external references indicated\n@@ -3006,7 +3006,7 @@ on the command line are checked, the order of the switches\n or @option{^-X^/EXTERNAL_REFERENCE^} is not significant.\n \n @item ^-X^/EXTERNAL_REFERENCE=^@var{name=value}\n-@CINDEX{@option{^-X^/EXTERNAL_REFERENCE^} (any project-aware tool)}\n+@cindex @option{^-X^/EXTERNAL_REFERENCE^} (any project-aware tool)\n Indicates that external variable @var{name} has the value @var{value}.\n The Project Manager will use this value for occurrences of\n @code{external(name)} when parsing the project file.\n@@ -3028,7 +3028,7 @@ An external variable specified with a @option{^-X^/EXTERNAL_REFERENCE^} switch\n takes precedence over the value of the same name in the environment.\n \n @item ^-vP^/MESSAGES_PROJECT_FILE=^@emph{x}\n-@CINDEX{@option{^-vP^/MESSAGES_PROJECT_FILE^} (any project-aware tool)}\n+@cindex @option{^-vP^/MESSAGES_PROJECT_FILE^} (any project-aware tool)\n Indicates the verbosity of the parsing of GNAT project files.\n \n @ifclear vms\n@@ -3048,18 +3048,18 @@ If several @option{^-vP^/MESSAGES_PROJECT_FILE=^@emph{x}} switches are present,\n only the last one is used.\n \n @item ^-aP^/ADD_PROJECT_SEARCH_DIR=^<dir>\n-@CINDEX{@option{^-aP^/ADD_PROJECT_SEARCH_DIR=^} (any project-aware tool)}\n+@cindex @option{^-aP^/ADD_PROJECT_SEARCH_DIR=^} (any project-aware tool)\n Add directory <dir> at the beginning of the project search path, in order,\n after the current working directory.\n \n @ifclear vms\n @item -eL\n-@CINDEX{@option{-eL} (any project-aware tool)}\n+@cindex @option{-eL} (any project-aware tool)\n Follow all symbolic links when processing project files.\n @end ifclear\n \n @item ^--subdirs^/SUBDIRS^=<subdir>\n-@CINDEX{@option{^--subdirs^/SUBDIRS^=} (gnatmake and gnatclean)}\n+@cindex @option{^--subdirs^/SUBDIRS^=} (gnatmake and gnatclean)\n This switch is recognized by gnatmake and gnatclean. It indicate that the real\n directories (except the source directories) are the subdirectories <subdir>\n of the directories specified in the project files. This applies in particular\n@@ -3884,6 +3884,7 @@ The switches for GPRclean are:\n   x = 0 (default), 1 or 2.\n \n @item @option{-Xnm=val} : Specify an external reference for Project Files.\n+\n @end itemize\n \n "}, {"sha": "06619cb9aebed766735bd04dcf09a23ecf88ef56", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5a1b93684dfdc5f647f6fae4b93dd633190d07/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=be5a1b93684dfdc5f647f6fae4b93dd633190d07", "patch": "@@ -1445,6 +1445,12 @@ package body Sem_Res is\n                null;\n \n             else\n+               --  Note: we go to First_Subtype here to ensure the message\n+               --  has the proper source type name (Typ may be an anonymous\n+               --  base type).\n+               --  Could we use Wrong_Type here??? (this would require setting\n+               --  Etype (N) to the actual type found where Typ was expected).\n+\n                Error_Msg_NE (\"expect type&\", N, First_Subtype (Typ));\n             end if;\n          end if;"}]}