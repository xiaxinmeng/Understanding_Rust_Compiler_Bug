{"sha": "f22f434020d20d8d12bf5171cbb7ba720808ac15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyZjQzNDAyMGQyMGQ4ZDEyYmY1MTcxY2JiN2JhNzIwODA4YWMxNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-12T12:11:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-05-12T12:11:00Z"}, "message": "re PR middle-end/44085 (OpenMP - untied task accesses threadprivate - non-conforming but no msg)\n\n\tPR middle-end/44085\n\t* gimplify.c (enum omp_region_type): Add ORT_UNTIED_TASK,\n\tchange value of ORT_TASK.\n\t(new_omp_context): Handle ORT_UNTIED_TASK like ORT_TASK.\n\t(omp_notice_threadprivate_variable): New function.\n\t(omp_notice_variable): Call it for threadprivate variables.\n\tIf enclosing ctx is a task, print enclosing task rather than\n\tenclosing parallel.  Handle ORT_UNTIED_TASK like ORT_TASK.\n\t(gimplify_omp_task): Pass ORT_UNTIED_TASK instead of ORT_TASK\n\tif task has untied clause.\n\n\t* gcc.dg/gomp/pr44085.c: New test.\n\t* gfortran.dg/gomp/pr44085.f90: New test.\n\nFrom-SVN: r159316", "tree": {"sha": "7303bd5cc39e81125c26e6d6f98ccc7eb2175c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7303bd5cc39e81125c26e6d6f98ccc7eb2175c34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22f434020d20d8d12bf5171cbb7ba720808ac15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22f434020d20d8d12bf5171cbb7ba720808ac15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22f434020d20d8d12bf5171cbb7ba720808ac15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22f434020d20d8d12bf5171cbb7ba720808ac15/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c2db0d3628062fc4fc9227c2e3ac4922b10f059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2db0d3628062fc4fc9227c2e3ac4922b10f059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2db0d3628062fc4fc9227c2e3ac4922b10f059"}], "stats": {"total": 117, "additions": 109, "deletions": 8}, "files": [{"sha": "52f831909f44d4193b5603897bb3c89f55737747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f22f434020d20d8d12bf5171cbb7ba720808ac15", "patch": "@@ -1,5 +1,16 @@\n 2010-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/44085\n+\t* gimplify.c (enum omp_region_type): Add ORT_UNTIED_TASK,\n+\tchange value of ORT_TASK.\n+\t(new_omp_context): Handle ORT_UNTIED_TASK like ORT_TASK.\n+\t(omp_notice_threadprivate_variable): New function.\n+\t(omp_notice_variable): Call it for threadprivate variables.\n+\tIf enclosing ctx is a task, print enclosing task rather than\n+\tenclosing parallel.  Handle ORT_UNTIED_TASK like ORT_TASK.\n+\t(gimplify_omp_task): Pass ORT_UNTIED_TASK instead of ORT_TASK\n+\tif task has untied clause.\n+\n \tPR debug/42278\n \t* dwarf2out.c (base_type_die): Don't add name attribute here.\n \t(modified_type_die): Instead of sizetype use"}, {"sha": "c74189194bd40a8ef3479224fae773634b1c1e1a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f22f434020d20d8d12bf5171cbb7ba720808ac15", "patch": "@@ -74,9 +74,10 @@ enum gimplify_omp_var_data\n enum omp_region_type\n {\n   ORT_WORKSHARE = 0,\n-  ORT_TASK = 1,\n   ORT_PARALLEL = 2,\n-  ORT_COMBINED_PARALLEL = 3\n+  ORT_COMBINED_PARALLEL = 3,\n+  ORT_TASK = 4,\n+  ORT_UNTIED_TASK = 5\n };\n \n struct gimplify_omp_ctx\n@@ -318,7 +319,7 @@ new_omp_context (enum omp_region_type region_type)\n   c->privatized_types = pointer_set_create ();\n   c->location = input_location;\n   c->region_type = region_type;\n-  if (region_type != ORT_TASK)\n+  if ((region_type & ORT_TASK) == 0)\n     c->default_kind = OMP_CLAUSE_DEFAULT_SHARED;\n   else\n     c->default_kind = OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n@@ -5470,6 +5471,31 @@ omp_add_variable (struct gimplify_omp_ctx *ctx, tree decl, unsigned int flags)\n   splay_tree_insert (ctx->variables, (splay_tree_key)decl, flags);\n }\n \n+/* Notice a threadprivate variable DECL used in OpenMP context CTX.\n+   This just prints out diagnostics about threadprivate variable uses\n+   in untied tasks.  If DECL2 is non-NULL, prevent this warning\n+   on that variable.  */\n+\n+static bool\n+omp_notice_threadprivate_variable (struct gimplify_omp_ctx *ctx, tree decl,\n+\t\t\t\t   tree decl2)\n+{\n+  splay_tree_node n;\n+\n+  if (ctx->region_type != ORT_UNTIED_TASK)\n+    return false;\n+  n = splay_tree_lookup (ctx->variables, (splay_tree_key)decl);\n+  if (n == NULL)\n+    {\n+      error (\"threadprivate variable %qE used in untied task\", DECL_NAME (decl));\n+      error_at (ctx->location, \"enclosing task\");\n+      splay_tree_insert (ctx->variables, (splay_tree_key)decl, 0);\n+    }\n+  if (decl2)\n+    splay_tree_insert (ctx->variables, (splay_tree_key)decl2, 0);\n+  return false;\n+}\n+\n /* Record the fact that DECL was used within the OpenMP context CTX.\n    IN_CODE is true when real code uses DECL, and false when we should\n    merely emit default(none) errors.  Return true if DECL is going to\n@@ -5490,14 +5516,14 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n   if (is_global_var (decl))\n     {\n       if (DECL_THREAD_LOCAL_P (decl))\n-\treturn false;\n+\treturn omp_notice_threadprivate_variable (ctx, decl, NULL_TREE);\n \n       if (DECL_HAS_VALUE_EXPR_P (decl))\n \t{\n \t  tree value = get_base_address (DECL_VALUE_EXPR (decl));\n \n \t  if (value && DECL_P (value) && DECL_THREAD_LOCAL_P (value))\n-\t    return false;\n+\t    return omp_notice_threadprivate_variable (ctx, decl, value);\n \t}\n     }\n \n@@ -5523,7 +5549,10 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \tcase OMP_CLAUSE_DEFAULT_NONE:\n \t  error (\"%qE not specified in enclosing parallel\",\n \t\t DECL_NAME (decl));\n-\t  error_at (ctx->location, \"enclosing parallel\");\n+\t  if ((ctx->region_type & ORT_TASK) != 0)\n+\t    error_at (ctx->location, \"enclosing task\");\n+\t  else\n+\t    error_at (ctx->location, \"enclosing parallel\");\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_DEFAULT_SHARED:\n \t  flags |= GOVD_SHARED;\n@@ -5536,7 +5565,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t  break;\n \tcase OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n \t  /* decl will be either GOVD_FIRSTPRIVATE or GOVD_SHARED.  */\n-\t  gcc_assert (ctx->region_type == ORT_TASK);\n+\t  gcc_assert ((ctx->region_type & ORT_TASK) != 0);\n \t  if (ctx->outer_context)\n \t    omp_notice_variable (ctx->outer_context, decl, in_code);\n \t  for (octx = ctx->outer_context; octx; octx = octx->outer_context)\n@@ -6039,7 +6068,10 @@ gimplify_omp_task (tree *expr_p, gimple_seq *pre_p)\n   gimple_seq body = NULL;\n   struct gimplify_ctx gctx;\n \n-  gimplify_scan_omp_clauses (&OMP_TASK_CLAUSES (expr), pre_p, ORT_TASK);\n+  gimplify_scan_omp_clauses (&OMP_TASK_CLAUSES (expr), pre_p,\n+\t\t\t     find_omp_clause (OMP_TASK_CLAUSES (expr),\n+\t\t\t\t\t      OMP_CLAUSE_UNTIED)\n+\t\t\t     ? ORT_UNTIED_TASK : ORT_TASK);\n \n   push_gimplify_context (&gctx);\n "}, {"sha": "d2628e4b422090934aa86fffc68ad92ef7ebf75a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f22f434020d20d8d12bf5171cbb7ba720808ac15", "patch": "@@ -1,3 +1,9 @@\n+2010-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/44085\n+\t* gcc.dg/gomp/pr44085.c: New test.\n+\t* gfortran.dg/gomp/pr44085.f90: New test.\n+\n 2010-05-12  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* objc-obj-c++-shared/Object1.m: New."}, {"sha": "55462abe504eb241a885a6ad3f95e5647d1b9efb", "filename": "gcc/testsuite/gcc.dg/gomp/pr44085.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr44085.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr44085.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr44085.c?ref=f22f434020d20d8d12bf5171cbb7ba720808ac15", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/44085 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+int thr1, thr2;\n+#pragma omp threadprivate (thr1, thr2)\n+\n+void\n+foo (void)\n+{\n+#pragma omp task untied\t/* { dg-error \"enclosing task\" } */\n+  {\n+    thr1++;\t\t/* { dg-error \"used in untied task\" } */\n+    thr2 |= 4;\t\t/* { dg-error \"used in untied task\" } */\n+  }\n+}\n+\n+void\n+bar (void)\n+{\n+#pragma omp task\n+  {\n+    thr1++;\n+    thr2 |= 4;\n+  }\n+}"}, {"sha": "db8fbbc9544f0d0a628a8a1406adccb3b39e2f5e", "filename": "gcc/testsuite/gfortran.dg/gomp/pr44085.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr44085.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f434020d20d8d12bf5171cbb7ba720808ac15/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr44085.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr44085.f90?ref=f22f434020d20d8d12bf5171cbb7ba720808ac15", "patch": "@@ -0,0 +1,25 @@\n+! PR middle-end/44085\n+! { dg-do compile }\n+! { dg-require-effective-target tls_native }\n+! { dg-options \"-fopenmp\" }\n+\n+  integer, save :: thr1, thr2\n+  integer :: thr3, thr4\n+  common /thrs/ thr3, thr4\n+!$omp threadprivate (thr1, thr2, /thrs/)\n+\n+!$omp task untied\t\t! { dg-error \"enclosing task\" }\n+  thr1 = thr1 + 1\t\t! { dg-error \"used in untied task\" }\n+  thr2 = thr2 + 2\t\t! { dg-error \"used in untied task\" }\n+  thr3 = thr3 + 3\t\t! { dg-error \"used in untied task\" }\n+  thr4 = thr4 + 4\t\t! { dg-error \"used in untied task\" }\n+!$omp end task\n+\n+!$omp task\n+  thr1 = thr1 + 1\n+  thr2 = thr2 + 2\n+  thr3 = thr3 + 3\n+  thr4 = thr4 + 4\n+!$omp end task\n+\n+  end"}]}