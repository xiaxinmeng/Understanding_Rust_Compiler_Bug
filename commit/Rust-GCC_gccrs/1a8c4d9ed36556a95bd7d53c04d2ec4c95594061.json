{"sha": "1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "node_id": "C_kwDOANBUbNoAKDFhOGM0ZDllZDM2NTU2YTk1YmQ3ZDUzYzA0ZDJlYzRjOTU1OTQwNjE", "commit": {"author": {"name": "Hafiz Abid Qadeer", "email": "abidh@codesourcery.com", "date": "2022-02-18T21:28:08Z"}, "committer": {"name": "Hafiz Abid Qadeer", "email": "abidh@codesourcery.com", "date": "2022-05-06T09:45:05Z"}, "message": "Add a restriction on allocate clause (OpenMP 5.0)\n\nAn allocate clause in target region must specify an allocator\nunless the compilation unit has requires construct with\ndynamic_allocators clause.  Current implementation of the allocate\nclause did not check for this restriction. This patch fills that\ngap.\n\ngcc/ChangeLog:\n\n\t* omp-low.cc (omp_maybe_offloaded_ctx): New prototype.\n\t(scan_sharing_clauses):  Check a restriction on allocate clause.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/allocate-2.c: Add tests.\n\t* c-c++-common/gomp/allocate-8.c: New test.\n\t* gfortran.dg/gomp/allocate-3.f90: Add tests.\n\t* gcc.dg/gomp/pr104517.c: Update.", "tree": {"sha": "d3fb88f1fbe3f66e9c1e85431540fb79131dd8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3fb88f1fbe3f66e9c1e85431540fb79131dd8f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/comments", "author": {"login": "abidh", "id": 4067533, "node_id": "MDQ6VXNlcjQwNjc1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4067533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abidh", "html_url": "https://github.com/abidh", "followers_url": "https://api.github.com/users/abidh/followers", "following_url": "https://api.github.com/users/abidh/following{/other_user}", "gists_url": "https://api.github.com/users/abidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abidh/subscriptions", "organizations_url": "https://api.github.com/users/abidh/orgs", "repos_url": "https://api.github.com/users/abidh/repos", "events_url": "https://api.github.com/users/abidh/events{/privacy}", "received_events_url": "https://api.github.com/users/abidh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abidh", "id": 4067533, "node_id": "MDQ6VXNlcjQwNjc1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4067533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abidh", "html_url": "https://github.com/abidh", "followers_url": "https://api.github.com/users/abidh/followers", "following_url": "https://api.github.com/users/abidh/following{/other_user}", "gists_url": "https://api.github.com/users/abidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abidh/subscriptions", "organizations_url": "https://api.github.com/users/abidh/orgs", "repos_url": "https://api.github.com/users/abidh/repos", "events_url": "https://api.github.com/users/abidh/events{/privacy}", "received_events_url": "https://api.github.com/users/abidh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8025f29fbd8f87e27354b69d0bc9eb8d1aeae94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8025f29fbd8f87e27354b69d0bc9eb8d1aeae94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8025f29fbd8f87e27354b69d0bc9eb8d1aeae94c"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "49481b232ebc24ad5128d661f9ee0367c4c95abc", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "patch": "@@ -195,6 +195,7 @@ static vec<gomp_task *> task_cpyfns;\n \n static void scan_omp (gimple_seq *, omp_context *);\n static tree scan_omp_1_op (tree *, int *, void *);\n+static bool omp_maybe_offloaded_ctx (omp_context *ctx);\n \n #define WALK_SUBSTMTS  \\\n     case GIMPLE_BIND: \\\n@@ -1154,6 +1155,15 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t    || !integer_onep (OMP_CLAUSE_ALLOCATE_ALLOCATOR (c))\n \t    || OMP_CLAUSE_ALLOCATE_ALIGN (c) != NULL_TREE))\n       {\n+\t/* The allocate clauses that appear on a target construct or on\n+\t   constructs in a target region must specify an allocator expression\n+\t   unless a requires directive with the dynamic_allocators clause\n+\t   is present in the same compilation unit.  */\n+\tif (OMP_CLAUSE_ALLOCATE_ALLOCATOR (c) == NULL_TREE\n+\t    && ((omp_requires_mask & OMP_REQUIRES_DYNAMIC_ALLOCATORS) == 0)\n+\t    && omp_maybe_offloaded_ctx (ctx))\n+\t  error_at (OMP_CLAUSE_LOCATION (c), \"%<allocate%> clause must\"\n+\t\t    \" specify an allocator here\");\n \tif (ctx->allocate_map == NULL)\n \t  ctx->allocate_map = new hash_map<tree, tree>;\n \ttree val = integer_zero_node;"}, {"sha": "6bb4a8af2e7c8d35654e69f05dcf0e97e03806cf", "filename": "gcc/testsuite/c-c++-common/gomp/allocate-2.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-2.c?ref=1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "patch": "@@ -43,3 +43,18 @@ foo (int x, int z)\n   #pragma omp parallel private (x) allocate (0 : x)\t/* { dg-error \"'allocate' clause allocator expression has type 'int' rather than 'omp_allocator_handle_t'\" } */\n   bar (x, &x, 0);\n }\n+\n+void\n+foo1 ()\n+{\n+  int a = 10;\n+#pragma omp target\n+  {\n+    #pragma omp parallel private (a) allocate(a) // { dg-error \"'allocate' clause must specify an allocator here\" }\n+    a = 20;\n+  }\n+#pragma omp target private(a) allocate(a) // { dg-error \"'allocate' clause must specify an allocator here\" }\n+  {\n+    a = 30;\n+  }\n+}"}, {"sha": "bacefafc6fc5cb41d3a851ae45b0d90baf87746e", "filename": "gcc/testsuite/c-c++-common/gomp/allocate-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-8.c?ref=1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "patch": "@@ -0,0 +1,18 @@\n+#pragma omp requires dynamic_allocators\n+void\n+foo ()\n+{\n+  int a = 10;\n+#pragma omp parallel private (a) allocate(a)\n+  a = 20;\n+#pragma omp target\n+  {\n+    #pragma omp parallel private (a) allocate(a)\n+    a = 30;\n+  }\n+#pragma omp target private(a) allocate(a)\n+  {\n+    a = 40;\n+  }\n+}\n+"}, {"sha": "7e3bd1a1d1e141b7d7d037421e6a2acb02d76f4b", "filename": "gcc/testsuite/gcc.dg/gomp/pr104517.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104517.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104517.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104517.c?ref=1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "patch": "@@ -2,11 +2,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fcompare-debug -fopenmp -fno-tree-ter -save-temps\" } */\n \n-enum {\n-  omp_default_mem_alloc,\n-  omp_large_cap_mem_alloc,\n-  omp_const_mem_alloc,\n-  omp_high_bw_mem_alloc\n+typedef enum omp_allocator_handle_t\n+{\n+  omp_null_allocator = 0,\n+  omp_default_mem_alloc = 1,\n+  omp_large_cap_mem_alloc = 2,\n+  omp_const_mem_alloc = 3,\n+  omp_high_bw_mem_alloc = 4,\n } omp_allocator_handle_t;\n \n int t, bar_nte, bar_tl, bar_i3, bar_dd;\n@@ -23,16 +25,16 @@ bar (int *idp, int s, int nth, int g, int nta, int fi, int pp, int *q,\n   int p = 0, i2 = 0, i1 = 0, m = 0, d = 0;\n \n #pragma omp target parallel for                               \\\n-  device(p) firstprivate (f) allocate (f) in_reduction(+:r2)\n+  device(p) firstprivate (f) allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 4; i++)\n     ll++;\n \n #pragma omp target parallel for                                         \\\n   device(d) map (m)                                                     \\\n   if (target: p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n   if (parallel: i2) reduction(+:r) num_threads (nth) linear (ll)        \\\n-  schedule(static) collapse(1) nowait depend(inout: d) allocate (f)     \\\n-  in_reduction(+:r2)\n+  schedule(static) collapse(1) nowait depend(inout: d) \\\n+  allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 4; i++)\n     ll++;\n "}, {"sha": "0bee99d2d0c1964b0abe4866a3d79a30710288d7", "filename": "gcc/testsuite/gfortran.dg/gomp/allocate-3.f90", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fallocate-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4d9ed36556a95bd7d53c04d2ec4c95594061/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fallocate-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fallocate-3.f90?ref=1a8c4d9ed36556a95bd7d53c04d2ec4c95594061", "patch": "@@ -12,3 +12,17 @@ subroutine foo(x)\n   !$omp end parallel do simd\n \n end subroutine\n+\n+subroutine bar(a)\n+  implicit none\n+  integer  :: a\n+!$omp target\n+  !$omp parallel private (a) allocate(a) ! { dg-error \"'allocate' clause must specify an allocator here\" }\n+    a = 20\n+  !$omp end parallel\n+!$omp end target\n+\n+!$omp target private(a) allocate(a) ! { dg-error \"'allocate' clause must specify an allocator here\" }\n+  a = 30;\n+!$omp end target\n+end subroutine"}]}