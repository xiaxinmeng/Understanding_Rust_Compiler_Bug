{"sha": "79ea774f9a9d36d986152d93f9eae4a9ba36b37b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllYTc3NGY5YTlkMzZkOTg2MTUyZDkzZjllYWU0YTliYTM2YjM3Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-27T08:24:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-27T08:24:09Z"}, "message": "Rewrite maintainer-scripts/update_version_git\n\nThis patch rewrites update_version_git to be just a thin wrapper around\nMartin's new python script.  This just arranges to check out the gcc\nrepo in a temporary directory, copy out the contrib scripts so that\nthe running script doesn't change with branch checkouts and runs the script.\n\nI've run it today manually but hopefully we can do it from cron again\nfrom tomorrow.\n\n2020-05-27  Jakub Jelinek  <jakub@redhat.com>\n\n\t* update_version_git: Rewrite using\n\tcontrib/gcc-changelog/git_update_version.py.", "tree": {"sha": "9939ad35da37b6e8e385bc98fa8f60fe53fa2aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9939ad35da37b6e8e385bc98fa8f60fe53fa2aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ea774f9a9d36d986152d93f9eae4a9ba36b37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ea774f9a9d36d986152d93f9eae4a9ba36b37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ea774f9a9d36d986152d93f9eae4a9ba36b37b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ea774f9a9d36d986152d93f9eae4a9ba36b37b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b423f910dcc2a58a86b61cc5b966a81066abbf12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b423f910dcc2a58a86b61cc5b966a81066abbf12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b423f910dcc2a58a86b61cc5b966a81066abbf12"}], "stats": {"total": 77, "additions": 10, "deletions": 67}, "files": [{"sha": "4ebeee5afadcca70f346a16a4006a25932110de9", "filename": "maintainer-scripts/update_version_git", "status": "modified", "additions": 10, "deletions": 67, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ea774f9a9d36d986152d93f9eae4a9ba36b37b/maintainer-scripts%2Fupdate_version_git", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ea774f9a9d36d986152d93f9eae4a9ba36b37b/maintainer-scripts%2Fupdate_version_git", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fupdate_version_git?ref=79ea774f9a9d36d986152d93f9eae4a9ba36b37b", "patch": "@@ -1,85 +1,28 @@\n #!/bin/sh\n #\n-# Update the current version date in all files in the tree containing\n-# it.  Consider all single-component-version release branches except\n-# those matching the regular expression in $IGNORE_BRANCHES, and also\n-# consider those branches listed in the space separated list in\n-# $ADD_BRANCHES.\n+# Update the current version date in DATESTAMP files and generate\n+# ChangeLog file entries since the last DATESTAMP update from the\n+# commit messages.\n \n GITROOT=${GITROOT:-\"/git/gcc.git\"}\n-IGNORE_BRANCHES='releases/gcc-(.*\\..*|5|6|7)'\n-ADD_BRANCHES='master'\n \n # Run this from /tmp.\n export GITROOT\n-BASEDIR=/tmp/$$\n-/bin/rm -rf \"$BASEDIR\"\n-/bin/mkdir \"$BASEDIR\"\n+BASEDIR=`mktemp -d`\n cd \"$BASEDIR\"\n \n GIT=${GIT:-/usr/local/bin/git}\n \n-# Compute the branches which we should update.\n-BRANCHES=`(cd $GITROOT \\\n-\t   && ${GIT} for-each-ref --format='%(refname)' \\\n-\t\t     'refs/heads/releases/gcc-*') \\\n-\t  | sed -e 's/refs\\/heads\\///' \\\n-          | egrep -v $IGNORE_BRANCHES`\n-# Always update the mainline.\n-BRANCHES=\"${ADD_BRANCHES} ${BRANCHES}\"\n-\n-# This is put into the datestamp files.\n-CURR_DATE=`/bin/date +\"%Y%m%d\"`\n-\n-datestamp_FILES=\"gcc/DATESTAMP\"\n-\n-\n # Assume all will go well.\n-RESULT=0\n SUBDIR=$BASEDIR/gcc\n-for BRANCH in $BRANCHES; do\n-  echo \"Working on \\\"$BRANCH\\\".\"\n-  # Check out the files on the branch.\n-  if [ -d \"$SUBDIR\" ]; then\n-    cd \"$SUBDIR\"\n-    ${GIT} pull -q\n-    ${GIT} checkout -q \"$BRANCH\"\n-  else\n-    ${GIT} clone -q -b \"$BRANCH\" \"$GITROOT\" \"$SUBDIR\"\n-  fi\n-\n-  # There are no files to commit yet.\n-  COMMIT_FILES=\"\"\n-\n-  cd \"$SUBDIR\"\n-  for file in $datestamp_FILES; do\n-    if test -f $file; then\n-      echo \"${CURR_DATE}\" > $file.new\n+${GIT} clone -q -b master \"$GITROOT\" \"$SUBDIR\"\n \n-      if /usr/bin/cmp -s $file $file.new; then\n-\trm -f $file.new\n-      else\n-\tmv -f $file.new $file\n-        COMMIT_FILES=\"$COMMIT_FILES $file\"\n-      fi\n-    fi\n-  done\n+cp -a $SUBDIR/contrib/gcc-changelog $BASEDIR/gcc-changelog\n+cd \"$SUBDIR\"\n+python3 ../gcc-changelog/git_update_version.py -p\n+RESULT=$?\n \n-  if test -n \"$COMMIT_FILES\"; then\n-    for i in $COMMIT_FILES; do\n-    echo \"Attempting to commit $i\"\n-    if ${GIT} commit -m \"Daily bump.\" $i; then\n-      if ! ${GIT} push origin \"$BRANCH\"; then\n-        # If we could not push the files, indicate failure.\n-        RESULT=1\n-      fi\n-    else\n-      # If we could not commit the files, indicate failure.\n-      RESULT=1\n-    fi\n-    done\n-  fi\n-done\n+cd /tmp\n \n /bin/rm -rf $BASEDIR\n exit $RESULT"}]}