{"sha": "42630fadbe248717859d61c0244c821c32b4e52c", "node_id": "C_kwDOANBUbNoAKDQyNjMwZmFkYmUyNDg3MTc4NTlkNjFjMDI0NGM4MjFjMzJiNGU1MmM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-14T18:20:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-14T18:25:58Z"}, "message": "i386: Fix up split_double_concat [PR109109]\n\nIn my PR107627 change I've missed one important case, which causes\nmiscompilation of f4 and f6 in the following tests.\n\nCombine matches there *concatsidi3_3 define_insn_and_split (as with all\nother f* functions in those tests), and RA ends up with:\n(insn 11 10 17 2 (set (reg:DI 0 ax [89])\n        (ior:DI (ashift:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg:SI 0 ax [94])\n                                (const_int 4 [0x4]))\n                            (symbol_ref:SI (\"arr\") [flags 0x2]  <var_decl 0x7f4e7fe4ccf0 arr>)) [1 arr[ax_6(D)]+0 S4 A32]))\n                (const_int 32 [0x20]))\n            (zero_extend:DI (reg:SI 1 dx [95])))) \"pr109109-6.c\":24:49 681 {*concatsidi3_3}\n     (nil))\nsplit_double_concat turned that into:\n        movl    arr(,%eax,4), %edx\n        movl    %edx, %eax\nwhich is incorrect, because the first instruction overrides the input\n%edx value that should be put into output %eax; the two insns can't be\nswapped because the MEM's address uses %eax.\n\nThe following patch fixes that case to emit\n        movl    arr(,%eax,4), %eax\n        xchgl   %edx, %eax\ninstead.\n\n2023-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/109109\n\t* config/i386/i386-expand.cc (split_double_concat): Fix splitting\n\twhen lo is equal to dhi and hi is a MEM which uses dlo register.\n\n\t* gcc.target/i386/pr109109-1.c: New test.\n\t* gcc.target/i386/pr109109-2.c: New test.", "tree": {"sha": "ea35ba9348beb524ce44725a8a7b676dec305381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea35ba9348beb524ce44725a8a7b676dec305381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42630fadbe248717859d61c0244c821c32b4e52c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42630fadbe248717859d61c0244c821c32b4e52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42630fadbe248717859d61c0244c821c32b4e52c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42630fadbe248717859d61c0244c821c32b4e52c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423d34f61c43e400f0d5b837fe93c83963b2ecdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423d34f61c43e400f0d5b837fe93c83963b2ecdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423d34f61c43e400f0d5b837fe93c83963b2ecdd"}], "stats": {"total": 331, "additions": 328, "deletions": 3}, "files": [{"sha": "e89abf2e817b8e7c1b144cb4c586e59f3649dd6b", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42630fadbe248717859d61c0244c821c32b4e52c/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42630fadbe248717859d61c0244c821c32b4e52c/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=42630fadbe248717859d61c0244c821c32b4e52c", "patch": "@@ -197,9 +197,20 @@ split_double_concat (machine_mode mode, rtx dst, rtx lo, rtx hi)\n     {\n       /* In this case, code below would first emit_move_insn (dlo, lo)\n \t and then emit_move_insn (dhi, hi).  But the former would\n-\t invalidate hi's address.  Load into dhi first.  */\n-      emit_move_insn (dhi, hi);\n-      hi = dhi;\n+\t invalidate hi's address.  */\n+      if (rtx_equal_p (dhi, lo))\n+\t{\n+\t  /* We can't load into dhi first, so load into dlo\n+\t     first and we'll swap.  */\n+\t  emit_move_insn (dlo, hi);\n+\t  hi = dlo;\n+\t}\n+      else\n+\t{\n+\t  /* Load into dhi first.  */\n+\t  emit_move_insn (dhi, hi);\n+\t  hi = dhi;\n+\t}\n     }\n   if (!rtx_equal_p (dlo, hi))\n     {"}, {"sha": "ab133649f2b655d15c9f265f56a08771adbf568c", "filename": "gcc/testsuite/gcc.target/i386/pr109109-1.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42630fadbe248717859d61c0244c821c32b4e52c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109109-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42630fadbe248717859d61c0244c821c32b4e52c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109109-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109109-1.c?ref=42630fadbe248717859d61c0244c821c32b4e52c", "patch": "@@ -0,0 +1,139 @@\n+/* PR target/109109 */\n+/* { dg-do run { target ia32 } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int arr[64];\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f1 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) arr[ax]) << 32) | ax;\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f2 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) arr[dx]) << 32) | ax;\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f3 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) ((unsigned int *) (((char *) arr) + ax))[dx]) << 32) | ax;\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f4 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) arr[ax]) << 32) | dx;\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f5 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) arr[dx]) << 32) | dx;\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f6 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) ((unsigned int *) (((char *) arr) + ax))[dx]) << 32) | dx;\n+}\n+\n+__attribute__((noipa, regparm (3))) unsigned long long\n+f7 (unsigned int ax, unsigned int dx, unsigned int cx)\n+{\n+  return (((unsigned long long) arr[ax]) << 32) | cx;\n+}\n+\n+__attribute__((noipa, regparm (3))) unsigned long long\n+f8 (unsigned int ax, unsigned int dx, unsigned int cx)\n+{\n+  return (((unsigned long long) arr[dx]) << 32) | cx;\n+}\n+\n+__attribute__((noipa, regparm (3))) unsigned long long\n+f9 (unsigned int ax, unsigned int dx, unsigned int cx)\n+{\n+  return (((unsigned long long) ((unsigned int *) (((char *) arr) + ax))[dx]) << 32) | cx;\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f10 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) ax) << 32) | arr[ax];\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f11 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) ax) << 32) | arr[dx];\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f12 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) ax) << 32) | ((unsigned int *) (((char *) arr) + ax))[dx];\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f13 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) dx) << 32) | arr[ax];\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f14 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) dx) << 32) | arr[dx];\n+}\n+\n+__attribute__((noipa, regparm (2))) unsigned long long\n+f15 (unsigned int ax, unsigned int dx)\n+{\n+  return (((unsigned long long) dx) << 32) | ((unsigned int *) (((char *) arr) + ax))[dx];\n+}\n+\n+__attribute__((noipa, regparm (3))) unsigned long long\n+f16 (unsigned int ax, unsigned int dx, unsigned int cx)\n+{\n+  return (((unsigned long long) cx) << 32) | arr[ax];\n+}\n+\n+__attribute__((noipa, regparm (3))) unsigned long long\n+f17 (unsigned int ax, unsigned int dx, unsigned int cx)\n+{\n+  return (((unsigned long long) cx) << 32) | arr[dx];\n+}\n+\n+__attribute__((noipa, regparm (3))) unsigned long long\n+f18 (unsigned int ax, unsigned int dx, unsigned int cx)\n+{\n+  return (((unsigned long long) cx) << 32) | ((unsigned int *) (((char *) arr) + ax))[dx];\n+}\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < 64; i++)\n+    arr[i] = 64 + i;\n+#define CHECK_EQ(x, y) do { if (x != y) __builtin_abort (); } while (0)\n+  CHECK_EQ (f1 (8, 9), 0x4800000008ULL);\n+  CHECK_EQ (f2 (8, 9), 0x4900000008ULL);\n+  CHECK_EQ (f3 (8, 9), 0x4b00000008ULL);\n+  CHECK_EQ (f4 (8, 9), 0x4800000009ULL);\n+  CHECK_EQ (f5 (8, 9), 0x4900000009ULL);\n+  CHECK_EQ (f6 (8, 9), 0x4b00000009ULL);\n+  CHECK_EQ (f7 (8, 9, 10), 0x480000000aULL);\n+  CHECK_EQ (f8 (8, 9, 10), 0x490000000aULL);\n+  CHECK_EQ (f9 (8, 9, 10), 0x4b0000000aULL);\n+  CHECK_EQ (f10 (8, 9), 0x800000048ULL);\n+  CHECK_EQ (f11 (8, 9), 0x800000049ULL);\n+  CHECK_EQ (f12 (8, 9), 0x80000004bULL);\n+  CHECK_EQ (f13 (8, 9), 0x900000048ULL);\n+  CHECK_EQ (f14 (8, 9), 0x900000049ULL);\n+  CHECK_EQ (f15 (8, 9), 0x90000004bULL);\n+  CHECK_EQ (f16 (8, 9, 10), 0xa00000048ULL);\n+  CHECK_EQ (f17 (8, 9, 10), 0xa00000049ULL);\n+  CHECK_EQ (f18 (8, 9, 10), 0xa0000004bULL);\n+}"}, {"sha": "48d440ada9bc2d2a63f0858d79b0f72c62823fe5", "filename": "gcc/testsuite/gcc.target/i386/pr109109-2.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42630fadbe248717859d61c0244c821c32b4e52c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109109-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42630fadbe248717859d61c0244c821c32b4e52c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109109-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109109-2.c?ref=42630fadbe248717859d61c0244c821c32b4e52c", "patch": "@@ -0,0 +1,175 @@\n+/* PR target/109109 */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long arr[64];\n+\n+__attribute__((noipa)) unsigned __int128\n+f1 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) arr[ax]) << 64) | ax;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f2 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) arr[dx]) << 64) | ax;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f3 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) ((unsigned long *) (((char *) arr) + ax))[dx]) << 64) | ax;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f4 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) arr[ax]) << 64) | dx;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f5 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) arr[dx]) << 64) | dx;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f6 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) ((unsigned long *) (((char *) arr) + ax))[dx]) << 64) | dx;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f7 (unsigned long di, unsigned long si, unsigned long dx, unsigned long cx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) arr[ax]) << 64) | cx;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f8 (unsigned long di, unsigned long si, unsigned long dx, unsigned long cx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) arr[dx]) << 64) | cx;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f9 (unsigned long di, unsigned long si, unsigned long dx, unsigned long cx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) ((unsigned long *) (((char *) arr) + ax))[dx]) << 64) | cx;\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f10 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) ax) << 64) | arr[ax];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f11 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) ax) << 64) | arr[dx];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f12 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) ax) << 64) | ((unsigned long *) (((char *) arr) + ax))[dx];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f13 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) dx) << 64) | arr[ax];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f14 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) dx) << 64) | arr[dx];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f15 (unsigned long di, unsigned long si, unsigned long dx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) dx) << 64) | ((unsigned long *) (((char *) arr) + ax))[dx];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f16 (unsigned long di, unsigned long si, unsigned long dx, unsigned long cx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) cx) << 64) | arr[ax];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f17 (unsigned long di, unsigned long si, unsigned long dx, unsigned long cx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) cx) << 64) | arr[dx];\n+}\n+\n+__attribute__((noipa)) unsigned __int128\n+f18 (unsigned long di, unsigned long si, unsigned long dx, unsigned long cx)\n+{\n+  unsigned long ax;\n+  asm (\"\" : \"=a\" (ax) : \"0\" (di));\n+  return (((unsigned __int128) cx) << 64) | ((unsigned long *) (((char *) arr) + ax))[dx];\n+}\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < 64; i++)\n+    arr[i] = 64 + i;\n+#define CHECK_EQ(x, y1, y2) do { unsigned __int128 y = y1; y <<= 64; y += y2; if (x != y) __builtin_abort (); } while (0)\n+  CHECK_EQ (f1 (8, 0, 9), 0x48, 0x8);\n+  CHECK_EQ (f2 (8, 0, 9), 0x49, 0x8);\n+  CHECK_EQ (f3 (8, 0, 9), 0x4a, 0x8);\n+  CHECK_EQ (f4 (8, 0, 9), 0x48, 0x9);\n+  CHECK_EQ (f5 (8, 0, 9), 0x49, 0x9);\n+  CHECK_EQ (f6 (8, 0, 9), 0x4a, 0x9);\n+  CHECK_EQ (f7 (8, 0, 9, 10), 0x48, 0xa);\n+  CHECK_EQ (f8 (8, 0, 9, 10), 0x49, 0xa);\n+  CHECK_EQ (f9 (8, 0, 9, 10), 0x4a, 0xa);\n+  CHECK_EQ (f10 (8, 0, 9), 0x8, 0x48);\n+  CHECK_EQ (f11 (8, 0, 9), 0x8, 0x49);\n+  CHECK_EQ (f12 (8, 0, 9), 0x8, 0x4a);\n+  CHECK_EQ (f13 (8, 0, 9), 0x9, 0x48);\n+  CHECK_EQ (f14 (8, 0, 9), 0x9, 0x49);\n+  CHECK_EQ (f15 (8, 0, 9), 0x9, 0x4a);\n+  CHECK_EQ (f16 (8, 0, 9, 10), 0xa, 0x48);\n+  CHECK_EQ (f17 (8, 0, 9, 10), 0xa, 0x49);\n+  CHECK_EQ (f18 (8, 0, 9, 10), 0xa, 0x4a);\n+}"}]}