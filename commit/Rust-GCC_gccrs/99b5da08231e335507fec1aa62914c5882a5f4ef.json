{"sha": "99b5da08231e335507fec1aa62914c5882a5f4ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliNWRhMDgyMzFlMzM1NTA3ZmVjMWFhNjI5MTRjNTg4MmE1ZjRlZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:17:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:17:40Z"}, "message": "Add expand_modifier flags.\n\n(chkr_*_libfunc): New decls.\n(memory_use_mode): New declaration.\n\nFrom-SVN: r14612", "tree": {"sha": "291613c5de5f9cb28864fc9e9e39031f41b14c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/291613c5de5f9cb28864fc9e9e39031f41b14c34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b5da08231e335507fec1aa62914c5882a5f4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b5da08231e335507fec1aa62914c5882a5f4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b5da08231e335507fec1aa62914c5882a5f4ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b5da08231e335507fec1aa62914c5882a5f4ef/comments", "author": null, "committer": null, "parents": [{"sha": "921b3427bc1eba4170b054b3a03e97f0ec590878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921b3427bc1eba4170b054b3a03e97f0ec590878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/921b3427bc1eba4170b054b3a03e97f0ec590878"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "d6bf3f6195b5de4a399e279821123632cbd39b3c", "filename": "gcc/expr.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b5da08231e335507fec1aa62914c5882a5f4ef/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b5da08231e335507fec1aa62914c5882a5f4ef/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=99b5da08231e335507fec1aa62914c5882a5f4ef", "patch": "@@ -45,9 +45,27 @@ Boston, MA 02111-1307, USA.  */\n    EXPAND_SUM means it is ok to return a PLUS rtx or MULT rtx.\n    EXPAND_INITIALIZER is similar but also record any labels on forced_labels.\n    EXPAND_CONST_ADDRESS means it is ok to return a MEM whose address\n-    is a constant that is not a legitimate address.  */\n+    is a constant that is not a legitimate address.\n+   EXPAND_MEMORY_USE_* are explained below.  */\n enum expand_modifier {EXPAND_NORMAL, EXPAND_SUM,\n-\t\t      EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER};\n+\t\t      EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER,\n+\t\t      EXPAND_MEMORY_USE_WO, EXPAND_MEMORY_USE_RW,\n+\t\t      EXPAND_MEMORY_USE_BAD, EXPAND_MEMORY_USE_DONT};\n+\n+/* Argument for chkr_* functions.\n+   MEMORY_USE_RO: the pointer reads memory.\n+   MEMORY_USE_WO: the pointer writes to memory.\n+   MEMORY_USE_RW: the pointer modifies memory (ie it reads and writes). An\n+                  example is (*ptr)++\n+   MEMORY_USE_BAD: use this if you don't know the behavior of the pointer, or\n+                   if you know there are no pointers.  Using an INDIRECT_REF\n+                   with MEMORY_USE_BAD will abort.\n+   MEMORY_USE_TW: just test for writing, without update.  Special.\n+   MEMORY_USE_DONT: the memory is neither read nor written.  This is used by\n+   \t\t   '->' and '.'.  */\n+enum memory_use_mode {MEMORY_USE_BAD = 0, MEMORY_USE_RO = 1,\n+\t\t      MEMORY_USE_WO = 2, MEMORY_USE_RW = 3,\n+\t\t      MEMORY_USE_TW = 6, MEMORY_USE_DONT = 99};\n \n /* List of labels that must never be deleted.  */\n extern rtx forced_labels;\n@@ -150,7 +168,7 @@ struct args_size\n ((SIZE).var == 0 ? GEN_INT ((SIZE).constant)\t\\\n  : expand_expr (size_binop (PLUS_EXPR, (SIZE).var,\t\t\t\\\n \t\t\t    size_int ((SIZE).constant)),\t\t\\\n-\t\tNULL_RTX, VOIDmode, 0))\n+\t\tNULL_RTX, VOIDmode, EXPAND_MEMORY_USE_BAD))\n \n /* Convert the implicit sum in a `struct args_size' into a tree.  */\n #define ARGS_SIZE_TREE(SIZE)\t\t\t\t\t\t\\\n@@ -482,6 +500,12 @@ extern rtx fixunsxfti_libfunc;\n extern rtx fixunstfsi_libfunc;\n extern rtx fixunstfdi_libfunc;\n extern rtx fixunstfti_libfunc;\n+\n+/* For check-memory-usage.  */\n+extern rtx chkr_check_addr_libfunc;\n+extern rtx chkr_set_right_libfunc;\n+extern rtx chkr_copy_bitmap_libfunc;\n+extern rtx chkr_check_exec_libfunc;\n \f\n typedef rtx (*rtxfun) ();\n "}]}