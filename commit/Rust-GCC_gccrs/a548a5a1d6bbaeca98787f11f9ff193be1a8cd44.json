{"sha": "a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0OGE1YTFkNmJiYWVjYTk4Nzg3ZjExZjlmZjE5M2JlMWE4Y2Q0NA==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2018-06-07T11:07:05Z"}, "committer": {"name": "Sebastian Peryt", "email": "speryt@gcc.gnu.org", "date": "2018-06-07T11:07:05Z"}, "message": "config.gcc: Support \"tremont\".\n\n2018-06-07  Olga Makhotina  <olga.makhotina@intel.com>\n\ngcc/\n\n        * config.gcc: Support \"tremont\".\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect \"tremont\".\n        * config/i386/i386-c.c (ix86_target_macros_internal): Handle\n        PROCESSOR_TREMONT.\n        * config/i386/i386.c (m_TREMONT): Define.\n        (processor_target_table): Add \"tremont\".\n        (PTA_TREMONT): Define.\n        (ix86_lea_outperforms): Add TARGET_TREMONT.\n        (get_builtin_code_for_version): Handle PROCESSOR_TREMONT.\n        (fold_builtin_cpu): Add M_INTEL_TREMONT, replace M_INTEL_GOLDMONT\n        and M_INTEL_GOLDMONT_PLUS.\n        (fold_builtin_cpu): Add \"tremont\".\n        (ix86_add_stmt_cost): Add TARGET_TREMONT.\n        (ix86_option_override_internal): Add \"tremont\".\n        * config/i386/i386.h (processor_costs): Define TARGET_TREMONT.\n        (processor_type): Add PROCESSOR_TREMONT.\n        * config/i386/x86-tune.def: Add m_TREMONT.\n        * doc/invoke.texi: Add tremont as x86 -march=/-mtune= CPU type.\n\ngcc/testsuite/\n\n        * gcc.target/i386/funcspec-56.inc: Test arch=tremont.\n\nlibgcc/\n\n        * config/i386/cpuinfo.h (processor_types): Add INTEL_TREMONT.\n\nFrom-SVN: r261270", "tree": {"sha": "30d15d00259f4b44421b2a7f07cd118beb502796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d15d00259f4b44421b2a7f07cd118beb502796"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cef87b05f2114ffc9aad85610eee0ec434ee5703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef87b05f2114ffc9aad85610eee0ec434ee5703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef87b05f2114ffc9aad85610eee0ec434ee5703"}], "stats": {"total": 122, "additions": 92, "deletions": 30}, "files": [{"sha": "81eec65e43dd0df2fc5c5096e876aa0eddfdd688", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -1,3 +1,24 @@\n+2018-06-07  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config.gcc: Support \"tremont\".\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect \"tremont\".\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tPROCESSOR_TREMONT.\n+\t* config/i386/i386.c (m_TREMONT): Define.\n+\t(processor_target_table): Add \"tremont\".\n+\t(PTA_TREMONT): Define.\n+\t(ix86_lea_outperforms): Add TARGET_TREMONT.\n+\t(get_builtin_code_for_version): Handle PROCESSOR_TREMONT.\n+\t(fold_builtin_cpu): Add M_INTEL_TREMONT, replace M_INTEL_GOLDMONT\n+\tand M_INTEL_GOLDMONT_PLUS.\n+\t(fold_builtin_cpu): Add \"tremont\".\n+\t(ix86_add_stmt_cost): Add TARGET_TREMONT.\n+\t(ix86_option_override_internal): Add \"tremont\".\n+\t* config/i386/i386.h (processor_costs): Define TARGET_TREMONT.\n+\t(processor_type): Add PROCESSOR_TREMONT.\n+\t* config/i386/x86-tune.def: Add m_TREMONT.\n+\t* doc/invoke.texi: Add tremont as x86 -march=/-mtune= CPU type.\n+\n 2018-06-07  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc/config/msp430/msp430.c (msp430_mcu_name): Set the \"i\" in the"}, {"sha": "8b2fd908c3807ce91c8d96126d264602f83a982d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -650,7 +650,7 @@ bdver3 bdver4 znver1 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n sandybridge ivybridge haswell broadwell bonnell silvermont knl knm \\\n skylake-avx512 cannonlake icelake-client icelake-server skylake goldmont \\\n-goldmont-plus x86-64 native\"\n+goldmont-plus tremont x86-64 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space."}, {"sha": "8c830bde1dd07be30bcb3e3c46f15b17398e5190", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -872,7 +872,10 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\tcpu = \"sandybridge\";\n \t      else if (has_sse4_2)\n \t\t{\n-\t\t  if (has_sgx)\n+\t\t  if (has_gfni)\n+\t\t    /* Assume Tremont.  */\n+\t\t    cpu = \"tremont\";\n+\t\t  else if (has_sgx)\n \t\t    /* Assume Goldmont Plus.  */\n \t\t    cpu = \"goldmont-plus\";\n \t\t  else if (has_xsave)"}, {"sha": "8996a8531a7815790dc97d79f260b7aa5040b159", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -182,6 +182,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__goldmont_plus\");\n       def_or_undef (parse_in, \"__goldmont_plus__\");\n       break;\n+    case PROCESSOR_TREMONT:\n+      def_or_undef (parse_in, \"__tremont\");\n+      def_or_undef (parse_in, \"__tremont__\");\n+      break;\n     case PROCESSOR_KNL:\n       def_or_undef (parse_in, \"__knl\");\n       def_or_undef (parse_in, \"__knl__\");\n@@ -325,6 +329,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_GOLDMONT_PLUS:\n       def_or_undef (parse_in, \"__tune_goldmont_plus__\");\n       break;\n+    case PROCESSOR_TREMONT:\n+      def_or_undef (parse_in, \"__tune_tremont__\");\n+      break;\n     case PROCESSOR_KNL:\n       def_or_undef (parse_in, \"__tune_knl__\");\n       break;"}, {"sha": "b95f0612562552a8156c301b1d309f27291bfebc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -152,6 +152,7 @@ const struct processor_costs *ix86_cost = NULL;\n #define m_ICELAKE_SERVER (HOST_WIDE_INT_1U<<PROCESSOR_ICELAKE_SERVER)\n #define m_GOLDMONT (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT)\n #define m_GOLDMONT_PLUS (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT_PLUS)\n+#define m_TREMONT (HOST_WIDE_INT_1U<<PROCESSOR_TREMONT)\n #define m_INTEL (HOST_WIDE_INT_1U<<PROCESSOR_INTEL)\n \n #define m_GEODE (HOST_WIDE_INT_1U<<PROCESSOR_GEODE)\n@@ -863,6 +864,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"goldmont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"goldmont-plus\", &slm_cost, 16, 15, 16, 7, 16},\n+  {\"tremont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knm\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"skylake\", &skylake_cost, 16, 10, 16, 10, 16},\n@@ -3497,6 +3499,8 @@ ix86_option_override_internal (bool main_args_p,\n     | PTA_FSGSBASE;\n   const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID\n     | PTA_SGX;\n+  const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB\n+    | PTA_GFNI;\n   const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n     | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;\n \n@@ -3574,6 +3578,7 @@ ix86_option_override_internal (bool main_args_p,\n       {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n       {\"goldmont\", PROCESSOR_GOLDMONT, CPU_GLM, PTA_GOLDMONT},\n       {\"goldmont-plus\", PROCESSOR_GOLDMONT_PLUS, CPU_GLM, PTA_GOLDMONT_PLUS},\n+      {\"tremont\", PROCESSOR_TREMONT, CPU_GLM, PTA_TREMONT},\n       {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL},\n       {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM},\n       {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n@@ -21252,7 +21257,7 @@ ix86_lea_outperforms (rtx_insn *insn, unsigned int regno0, unsigned int regno1,\n      non-destructive destination purposes, or due to wanting\n      ability to use SCALE, the use of LEA is justified.  */\n   if (TARGET_SILVERMONT || TARGET_GOLDMONT || TARGET_GOLDMONT_PLUS\n-      || TARGET_INTEL)\n+      || TARGET_TREMONT || TARGET_INTEL)\n     {\n       if (has_scale)\n \treturn true;\n@@ -32435,6 +32440,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"goldmont-plus\";\n \t      priority = P_PROC_SSE4_2;\n \t      break;\n+\t    case PROCESSOR_TREMONT:\n+\t      arg_str = \"tremont\";\n+\t      priority = P_PROC_SSE4_2;\n+\t      break;\n \t    case PROCESSOR_AMDFAM10:\n \t      arg_str = \"amdfam10h\";\n \t      priority = P_PROC_SSE4_A;\n@@ -33120,6 +33129,9 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_AMD_BTVER2,    \n     M_AMDFAM17H,\n     M_INTEL_KNM,\n+    M_INTEL_GOLDMONT,\n+    M_INTEL_GOLDMONT_PLUS,\n+    M_INTEL_TREMONT,\n     M_CPU_SUBTYPE_START,\n     M_INTEL_COREI7_NEHALEM,\n     M_INTEL_COREI7_WESTMERE,\n@@ -33139,9 +33151,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_INTEL_COREI7_SKYLAKE_AVX512,\n     M_INTEL_COREI7_CANNONLAKE,\n     M_INTEL_COREI7_ICELAKE_CLIENT,\n-    M_INTEL_COREI7_ICELAKE_SERVER,\n-    M_INTEL_GOLDMONT,\n-    M_INTEL_GOLDMONT_PLUS\n+    M_INTEL_COREI7_ICELAKE_SERVER\n   };\n \n   static struct _arch_names_table\n@@ -33172,6 +33182,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"silvermont\", M_INTEL_SILVERMONT},\n       {\"goldmont\", M_INTEL_GOLDMONT},\n       {\"goldmont-plus\", M_INTEL_GOLDMONT_PLUS},\n+      {\"tremont\", M_INTEL_TREMONT},\n       {\"knl\", M_INTEL_KNL},\n       {\"knm\", M_INTEL_KNM},\n       {\"amdfam10h\", M_AMDFAM10H},\n@@ -51300,7 +51311,7 @@ ix86_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n      for Silvermont as it has out of order integer pipeline and can execute\n      2 scalar instruction per tick, but has in order SIMD pipeline.  */\n   if ((TARGET_SILVERMONT || TARGET_GOLDMONT || TARGET_GOLDMONT_PLUS\n-       || TARGET_INTEL) && stmt_info && stmt_info->stmt)\n+       || TARGET_TREMONT || TARGET_INTEL) && stmt_info && stmt_info->stmt)\n     {\n       tree lhs_op = gimple_get_lhs (stmt_info->stmt);\n       if (lhs_op && TREE_CODE (TREE_TYPE (lhs_op)) == INTEGER_TYPE)"}, {"sha": "05255dc2c9ed525900a405fa5f5226a9afd6c439", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -391,6 +391,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_SILVERMONT (ix86_tune == PROCESSOR_SILVERMONT)\n #define TARGET_GOLDMONT (ix86_tune == PROCESSOR_GOLDMONT)\n #define TARGET_GOLDMONT_PLUS (ix86_tune == PROCESSOR_GOLDMONT_PLUS)\n+#define TARGET_TREMONT (ix86_tune == PROCESSOR_TREMONT)\n #define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n #define TARGET_KNM (ix86_tune == PROCESSOR_KNM)\n #define TARGET_SKYLAKE (ix86_tune == PROCESSOR_SKYLAKE)\n@@ -2287,6 +2288,7 @@ enum processor_type\n   PROCESSOR_SILVERMONT,\n   PROCESSOR_GOLDMONT,\n   PROCESSOR_GOLDMONT_PLUS,\n+  PROCESSOR_TREMONT,\n   PROCESSOR_KNL,\n   PROCESSOR_KNM,\n   PROCESSOR_SKYLAKE,"}, {"sha": "8a8d5ab24409b763dfd6474d6dbad1a3f8584de2", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -42,7 +42,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Preffer stores affecting whole integer register\n@@ -51,7 +51,8 @@ DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_HASWELL\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL\n-\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_SKYLAKE_AVX512 | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_SKYLAKE_AVX512 | m_TREMONT\n+\t  | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n    destinations to be 128bit to allow register renaming on 128bit SSE units,\n@@ -87,14 +88,14 @@ DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE | m_SKYLAKE_AVX512\n-\t  | m_HASWELL | m_GENERIC)\n+\t  | m_HASWELL | m_TREMONT | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n \t  | m_KNL | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_AMD_MULTIPLE\n-\t  | m_GENERIC)\n+\t  | m_TREMONT | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.  */\n@@ -133,7 +134,7 @@ DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n \n DEF_TUNE (X86_TUNE_ACCUMULATE_OUTGOING_ARGS, \"accumulate_outgoing_args\",\n \t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_ATHLON_K8)\n+\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ATHLON_K8)\n \n /* X86_TUNE_PROLOGUE_USING_MOVE: Do not use push/pop in prologues that are\n    considered on critical path.  */\n@@ -195,7 +196,8 @@ DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n    than 4 branch instructions in the 16 byte window.  */\n DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\",\n           m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL | m_ATHLON_K8 | m_AMDFAM10)\n+\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_INTEL | m_ATHLON_K8\n+\t  | m_AMDFAM10)\n \n /*****************************************************************************/\n /* Integer instruction selection tuning                                      */\n@@ -224,24 +226,24 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_LAKEMONT | m_PPRO))\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t    | m_BONNELL | m_SILVERMONT | m_INTEL |  m_KNL | m_KNM | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_GENERIC))\n+\t    | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_GENERIC))\n+\t    | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_BONNELL | m_SILVERMONT | m_KNL\n-\t | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL)\n+\t | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_INTEL)\n \n /* X86_TUNE_AVOID_LEA_FOR_ADDR: Avoid lea for address computation.  */\n DEF_TUNE (X86_TUNE_AVOID_LEA_FOR_ADDR, \"avoid_lea_for_addr\",\n-\t  m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_KNL\n-\t  | m_KNM)\n+\t  m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n+\t  | m_KNL | m_KNM)\n \n /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n    vector path on AMD machines.\n@@ -259,7 +261,7 @@ DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM8, \"slow_imul_imm8\",\n    a conditional move.  */\n DEF_TUNE (X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE, \"avoid_mem_opnd_for_cmove\",\n \t  m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_KNL\n-\t  | m_KNM | m_INTEL)\n+\t  | m_KNM | m_TREMONT | m_INTEL)\n \n /* X86_TUNE_SINGLE_STRINGOP: Enable use of single string operations, such\n    as MOVS and STOS (without a REP prefix) to move/set sequences of bytes.  */\n@@ -278,18 +280,19 @@ DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_ZNVER1 | m_GOLDMONT | m_GOLDMONT_PLUS | m_GENERIC)\n+\t  | m_BTVER | m_ZNVER1 | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n+\t  | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n \t  ~(m_PENT | m_LAKEMONT | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t    | m_K6 | m_GOLDMONT | m_GOLDMONT_PLUS))\n+\t    | m_K6 | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT))\n \n /* X86_TUNE_USE_BT: Enable use of BT (bit test) instructions.  */\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n           m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_GENERIC)\n+\t  | m_TREMONT | m_GENERIC)\n \n /* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n    for bit-manipulation instructions.  */\n@@ -306,7 +309,7 @@ DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n    if-converted sequence to one.  */\n DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n \t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n \n /*****************************************************************************/\n /* 387 instruction selection tuning                                          */\n@@ -323,7 +326,7 @@ DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\",\n DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL\n \t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE\n-\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_GENERIC))\n+\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n@@ -332,7 +335,7 @@ DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -348,14 +351,14 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_SKYLAKE_AVX512 | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_TREMONT | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_SKYLAKE_AVX512 | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_TREMONT | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n    of movupd.  */\n@@ -393,7 +396,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n    fp converts to destination register.  */\n DEF_TUNE (X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS, \"split_mem_opnd_for_fp_converts\",\n \t  m_SILVERMONT | m_KNL | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_INTEL)\n+\t  | m_TREMONT | m_INTEL)\n \n /* X86_TUNE_USE_VECTOR_FP_CONVERTS: Prefer vector packed SSE conversion\n    from FP to FP.  This form of instructions avoids partial write to the\n@@ -408,11 +411,11 @@ DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\", m_AMDFAM10)\n /* X86_TUNE_SLOW_SHUFB: Indicates tunings with slow pshufb instruction.  */\n DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n \t  m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_INTEL)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_INTEL)\n \n /* X86_TUNE_AVOID_4BYTE_PREFIXES: Avoid instructions requiring 4+ bytes of prefixes.  */\n DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n-\t  m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL)\n+\t  m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_INTEL)\n \n /* X86_TUNE_USE_GATHER: Use gather instructions.  */\n DEF_TUNE (X86_TUNE_USE_GATHER, \"use_gather\","}, {"sha": "74cb9027dc2b42156e274d98f0a54b0ff990d746", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -26660,6 +26660,11 @@ Intel Goldmont Plus CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE,\n PTWRITE, RDPID, SGX and UMIP instruction set support.\n \n+@item tremont\n+Intel Tremont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,\n+SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, PTWRITE,\n+RDPID, SGX, UMIP, GFNI-SSE, CLWB and ENCLV instruction set support.\n+\n @item knl\n Intel Knight's Landing CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,"}, {"sha": "440c8ce3e3d074b3a8f904e6aae675d0ff4041e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -1,3 +1,7 @@\n+2018-06-07  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Test arch=tremont.\n+\n 2018-06-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69615"}, {"sha": "9c9c347e8cd0a8c4eb719782ac36c9dd619cff63", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -144,6 +144,7 @@ extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx\n extern void test_arch_silvermont (void)\t\t__attribute__((__target__(\"arch=silvermont\")));\n extern void test_arch_goldmont (void)\t\t__attribute__((__target__(\"arch=goldmont\")));\n extern void test_arch_goldmont_plus (void)\t__attribute__((__target__(\"arch=goldmont-plus\")));\n+extern void test_arch_tremont (void)\t\t__attribute__((__target__(\"arch=tremont\")));\n extern void test_arch_knl (void)\t\t__attribute__((__target__(\"arch=knl\")));\n extern void test_arch_knm (void)\t\t__attribute__((__target__(\"arch=knm\")));\n extern void test_arch_skylake (void)\t\t__attribute__((__target__(\"arch=skylake\")));"}, {"sha": "575db684f4eaae730bd4d2d00ac0d36a170380c1", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -1,3 +1,7 @@\n+2018-06-07  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config/i386/cpuinfo.h (processor_types): Add INTEL_TREMONT.\n+\n 2018-06-07  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-driver.c: Rename cs_all to all and assign it from"}, {"sha": "0aa887b7482c1648675994ce368928a1e61d0c36", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548a5a1d6bbaeca98787f11f9ff193be1a8cd44/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=a548a5a1d6bbaeca98787f11f9ff193be1a8cd44", "patch": "@@ -50,6 +50,7 @@ enum processor_types\n   INTEL_KNM,\n   INTEL_GOLDMONT,\n   INTEL_GOLDMONT_PLUS,\n+  INTEL_TREMONT,\n   CPU_TYPE_MAX\n };\n "}]}