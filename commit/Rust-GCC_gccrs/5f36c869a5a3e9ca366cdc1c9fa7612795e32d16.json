{"sha": "5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzNmM4NjlhNWEzZTljYTM2NmNkYzFjOWZhNzYxMjc5NWUzMmQxNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-13T20:35:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-13T20:35:59Z"}, "message": "re PR c++/70594 (-fcompare-debug failure)\n\n\tPR c++/70594\n\t* tree-sra.c (create_access_replacement,\n\tget_replaced_param_substitute): Set DECL_NAMELESS on repl if it\n\tgets fancy name.\n\t* tree-pretty-print.c (dump_fancy_name): New function.\n\t(dump_decl_name, dump_generic_node): Use it.\n\nFrom-SVN: r234961", "tree": {"sha": "0cac4a7a9e433c5534ba4454c22865d450fd9388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cac4a7a9e433c5534ba4454c22865d450fd9388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "328903d1c541c8de7d815750431f2327b8e15a3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "patch": "@@ -1,3 +1,12 @@\n+2016-04-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70594\n+\t* tree-sra.c (create_access_replacement,\n+\tget_replaced_param_substitute): Set DECL_NAMELESS on repl if it\n+\tgets fancy name.\n+\t* tree-pretty-print.c (dump_fancy_name): New function.\n+\t(dump_decl_name, dump_generic_node): Use it.\n+\n 2016-04-13  Jason Merrill  <jason@redhat.com>\n \n \t* cfgexpand.c (pass_expand::execute): Handle attribute \"abi warning\"."}, {"sha": "f8a6b43219d4d4984e8f90c56260112839710053", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "patch": "@@ -161,6 +161,85 @@ print_generic_expr (FILE *file, tree t, int flags)\n   pp_flush (tree_pp);\n }\n \n+/* Dump NAME, an IDENTIFIER_POINTER, sanitized so that D<num> sequences\n+   in it are replaced with Dxxxx, as long as they are at the start or\n+   preceded by $ and at the end or followed by $.  See make_fancy_name\n+   in tree-sra.c.  */\n+\n+static void\n+dump_fancy_name (pretty_printer *pp, tree name)\n+{\n+  int cnt = 0;\n+  int length = IDENTIFIER_LENGTH (name);\n+  const char *n = IDENTIFIER_POINTER (name);\n+  do\n+    {\n+      n = strchr (n, 'D');\n+      if (n == NULL)\n+\tbreak;\n+      if (ISDIGIT (n[1])\n+\t  && (n == IDENTIFIER_POINTER (name) || n[-1] == '$'))\n+\t{\n+\t  int l = 2;\n+\t  while (ISDIGIT (n[l]))\n+\t    l++;\n+\t  if (n[l] == '\\0' || n[l] == '$')\n+\t    {\n+\t      cnt++;\n+\t      length += 5 - l;\n+\t    }\n+\t  n += l;\n+\t}\n+      else\n+\tn++;\n+    }\n+  while (1);\n+  if (cnt == 0)\n+    {\n+      pp_tree_identifier (pp, name);\n+      return;\n+    }\n+\n+  char *str = XNEWVEC (char, length + 1);\n+  char *p = str;\n+  const char *q;\n+  q = n = IDENTIFIER_POINTER (name);\n+  do\n+    {\n+      q = strchr (q, 'D');\n+      if (q == NULL)\n+\tbreak;\n+      if (ISDIGIT (q[1])\n+\t  && (q == IDENTIFIER_POINTER (name) || q[-1] == '$'))\n+\t{\n+\t  int l = 2;\n+\t  while (ISDIGIT (q[l]))\n+\t    l++;\n+\t  if (q[l] == '\\0' || q[l] == '$')\n+\t    {\n+\t      memcpy (p, n, q - n);\n+\t      memcpy (p + (q - n), \"Dxxxx\", 5);\n+\t      p += (q - n) + 5;\n+\t      n = q + l;\n+\t    }\n+\t  q += l;\n+\t}\n+      else\n+\tq++;\n+    }\n+  while (1);\n+  memcpy (p, n, IDENTIFIER_LENGTH (name) - (n - IDENTIFIER_POINTER (name)));\n+  str[length] = '\\0';\n+  if (pp_translate_identifiers (pp))\n+    {\n+      const char *text = identifier_to_locale (str);\n+      pp_append_text (pp, text, text + strlen (text));\n+    }\n+  else\n+    pp_append_text (pp, str, str + length);\n+  XDELETEVEC (str);\n+}\n+\n /* Dump the name of a _DECL node and its DECL_UID if TDF_UID is set\n    in FLAGS.  */\n \n@@ -171,6 +250,10 @@ dump_decl_name (pretty_printer *pp, tree node, int flags)\n     {\n       if ((flags & TDF_ASMNAME) && DECL_ASSEMBLER_NAME_SET_P (node))\n \tpp_tree_identifier (pp, DECL_ASSEMBLER_NAME (node));\n+      /* For DECL_NAMELESS names look for embedded uids in the\n+\t names and sanitize them for TDF_NOUID.  */\n+      else if ((flags & TDF_NOUID) && DECL_NAMELESS (node))\n+\tdump_fancy_name (pp, DECL_NAME (node));\n       else\n \tpp_tree_identifier (pp, DECL_NAME (node));\n     }\n@@ -2593,8 +2676,15 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n \n     case SSA_NAME:\n       if (SSA_NAME_IDENTIFIER (node))\n-\tdump_generic_node (pp, SSA_NAME_IDENTIFIER (node),\n-\t\t\t   spc, flags, false);\n+\t{\n+\t  if ((flags & TDF_NOUID)\n+\t      && SSA_NAME_VAR (node)\n+\t      && DECL_NAMELESS (SSA_NAME_VAR (node)))\n+\t    dump_fancy_name (pp, SSA_NAME_IDENTIFIER (node));\n+\t  else\n+\t    dump_generic_node (pp, SSA_NAME_IDENTIFIER (node),\n+\t\t\t       spc, flags, false);\n+\t}\n       pp_underscore (pp);\n       pp_decimal_int (pp, SSA_NAME_VERSION (node));\n       if (SSA_NAME_IS_DEFAULT_DEF (node))"}, {"sha": "6fafe559cf29d417e8471e70b8ceb5b19876c836", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f36c869a5a3e9ca366cdc1c9fa7612795e32d16/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5f36c869a5a3e9ca366cdc1c9fa7612795e32d16", "patch": "@@ -2132,6 +2132,7 @@ create_access_replacement (struct access *access)\n       bool fail = false;\n \n       DECL_NAME (repl) = get_identifier (pretty_name);\n+      DECL_NAMELESS (repl) = 1;\n       obstack_free (&name_obstack, pretty_name);\n \n       /* Get rid of any SSA_NAMEs embedded in debug_expr,\n@@ -4704,6 +4705,7 @@ get_replaced_param_substitute (struct ipa_parm_adjustment *adj)\n \n       repl = create_tmp_reg (TREE_TYPE (adj->base), \"ISR\");\n       DECL_NAME (repl) = get_identifier (pretty_name);\n+      DECL_NAMELESS (repl) = 1;\n       obstack_free (&name_obstack, pretty_name);\n \n       adj->new_ssa_base = repl;"}]}