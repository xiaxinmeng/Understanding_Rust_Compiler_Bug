{"sha": "ecbe845e2db207fa1f25ad71e9b67a0f60454929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiZTg0NWUyZGIyMDdmYTFmMjVhZDcxZTliNjdhMGY2MDQ1NDkyOQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-01-29T18:45:53Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-01-29T18:45:53Z"}, "message": "s390.md (movstrsico, [...]): Remove, replace by ...\n\n\t* config/s390/s390.md (movstrsico, movstrdix_64,\n\tmovstrsix_31): Remove, replace by ...\n\t(movstrdi_short, movstrsi_short, movstrdi_long,\n\tmovstrsi_long): ... these.  New.\n\t(movstrdi, movstrsi): Adapt.\n\n\t(rotldi3, rotlsi3, ashldi3, *ashldi3_31, *ashldi3_64,\n\tashlsi3, lshrdi3, *lshrdi3_31, *lshrdi3_64, lshrsi3):\n\tRemove unnecessary CC clobber.\n\t(*ashrdi3_cc_31, *ashrdi3_cconly_31, *ashrdi3_cc_64,\n\t*ashrdi3_cconly_64, *ashrsi3_cc, *ashrsi3_cconly): New.\n\n\t(divmoddi4): Don't partially initialize TImode register.\n\nFrom-SVN: r49325", "tree": {"sha": "ee9416776cb10183408138e026ac842a89dc5f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9416776cb10183408138e026ac842a89dc5f90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecbe845e2db207fa1f25ad71e9b67a0f60454929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbe845e2db207fa1f25ad71e9b67a0f60454929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbe845e2db207fa1f25ad71e9b67a0f60454929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbe845e2db207fa1f25ad71e9b67a0f60454929/comments", "author": null, "committer": null, "parents": [{"sha": "0b32fca5ed1da184c34cde94cb1c5603bcdc233b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b32fca5ed1da184c34cde94cb1c5603bcdc233b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b32fca5ed1da184c34cde94cb1c5603bcdc233b"}], "stats": {"total": 322, "additions": 214, "deletions": 108}, "files": [{"sha": "86f65a30403b160a1f41e6e8c5b4f5ebecb701c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbe845e2db207fa1f25ad71e9b67a0f60454929/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbe845e2db207fa1f25ad71e9b67a0f60454929/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecbe845e2db207fa1f25ad71e9b67a0f60454929", "patch": "@@ -1,3 +1,19 @@\n+2002-01-29  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (movstrsico, movstrdix_64, \n+\tmovstrsix_31): Remove, replace by ...\n+\t(movstrdi_short, movstrsi_short, movstrdi_long, \n+\tmovstrsi_long): ... these.  New.\n+\t(movstrdi, movstrsi): Adapt.\n+\n+\t(rotldi3, rotlsi3, ashldi3, *ashldi3_31, *ashldi3_64,\n+\tashlsi3, lshrdi3, *lshrdi3_31, *lshrdi3_64, lshrsi3): \n+\tRemove unnecessary CC clobber.\n+\t(*ashrdi3_cc_31, *ashrdi3_cconly_31, *ashrdi3_cc_64,\n+\t*ashrdi3_cconly_64, *ashrsi3_cc, *ashrsi3_cconly): New.\n+\n+\t(divmoddi4): Don't partially initialize TImode register.\n+\n 2002-01-29  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* doc/sourcebuild.texi (C Tests): Document gcc.dg/debug directory."}, {"sha": "0208effa85c34401be01a723669704687c35c2aa", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 198, "deletions": 108, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbe845e2db207fa1f25ad71e9b67a0f60454929/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbe845e2db207fa1f25ad71e9b67a0f60454929/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ecbe845e2db207fa1f25ad71e9b67a0f60454929", "patch": "@@ -1580,7 +1580,7 @@\n       operands[1] = change_address (operands[1], VOIDmode, addr1);\n       operands[2] = GEN_INT (INTVAL (operands[2]) - 1);\n \n-      emit_insn (gen_movstrsico (operands[0], operands[1], operands[2]));\n+      emit_insn (gen_movstrdi_short (operands[0], operands[1], operands[2]));\n       DONE;\n     } \n   else \n@@ -1609,21 +1609,30 @@\n         }\n       else\n \t{\n-          rtx label = gen_label_rtx ();\n-          rtx reg0, reg1, len;\n+          rtx label1 = gen_label_rtx ();\n+          rtx label2 = gen_label_rtx ();\n+          rtx reg0, reg1, len, blocks;\n       \t\t\n           reg0 = gen_reg_rtx (DImode);\n           reg1 = gen_reg_rtx (DImode);\n           len = gen_reg_rtx (DImode);\n+          blocks = gen_reg_rtx (DImode);\n \n           emit_move_insn (len, operands[2]);\t\n           emit_insn (gen_cmpdi (len, const0_rtx));\n-          emit_jump_insn (gen_beq (label));\n+          emit_jump_insn (gen_beq (label1));\n           emit_move_insn (reg0, addr0);\n           emit_move_insn (reg1, addr1);\n           emit_insn (gen_adddi3 (len, len, constm1_rtx));\n-          emit_insn (gen_movstrdix_64 (reg0, reg1, reg0, reg1, len));\n-          emit_label (label); \n+          emit_insn (gen_ashrdi3 (blocks, len, GEN_INT (8)));\n+          emit_insn (gen_cmpdi (blocks, const0_rtx));\n+          emit_jump_insn (gen_beq (label2));\n+          emit_insn (gen_movstrdi_long (reg0, reg1, reg0, reg1, blocks, blocks));\n+          emit_label (label2); \n+\t  operands[0] = change_address (operands[0], VOIDmode, reg0);\n+\t  operands[1] = change_address (operands[1], VOIDmode, reg1);\n+          emit_insn (gen_movstrdi_short (operands[0], operands[1], len));\n+          emit_label (label1); \n           DONE;\t   \n        }\t \n     }\n@@ -1638,7 +1647,7 @@\n          (match_operand:BLK 1 \"general_operand\" \"\"))\n     (use (match_operand:SI 2 \"general_operand\" \"\"))\n     (match_operand 3 \"\" \"\")]\n-    \"\"\n+    \"!TARGET_64BIT\"\n     \"\n {\n   rtx addr0 = force_operand (XEXP (operands[0], 0), NULL_RTX);\n@@ -1650,14 +1659,11 @@\n       operands[1] = change_address (operands[1], VOIDmode, addr1);\n       operands[2] = GEN_INT (INTVAL (operands[2]) - 1);\n \n-      emit_insn (gen_movstrsico (operands[0], operands[1], operands[2]));\n+      emit_insn (gen_movstrsi_short (operands[0], operands[1], operands[2]));\n       DONE;\n     } \n   else \n     {\n-      if (TARGET_64BIT)\n-\tFAIL;\n-\n       if (TARGET_MVCLE) \n \t{\n           /* implementation suggested by  Richard Henderson <rth@cygnus.com> */\n@@ -1683,119 +1689,141 @@\n         }\n       else\n \t{\n-          rtx label = gen_label_rtx ();\n-          rtx reg0, reg1, len; \n+          rtx label1 = gen_label_rtx ();\n+          rtx label2 = gen_label_rtx ();\n+          rtx reg0, reg1, len, blocks;\n       \t\t\n           reg0 = gen_reg_rtx (SImode);\n           reg1 = gen_reg_rtx (SImode);\n \t  len = gen_reg_rtx (SImode); \n+\t  blocks = gen_reg_rtx (SImode); \n \t  \n \t  emit_move_insn (len, operands[2]);\n           emit_insn (gen_cmpsi (len, const0_rtx));\n-          emit_jump_insn (gen_beq (label));\n+          emit_jump_insn (gen_beq (label1));\n           emit_move_insn (reg0, addr0);\n           emit_move_insn (reg1, addr1);\n           emit_insn (gen_addsi3 (len, len, constm1_rtx));\n-          emit_insn (gen_movstrsix_31 (reg0, reg1, reg0, reg1, len));\n-          emit_label (label); \n+          emit_insn (gen_ashrsi3 (blocks, len, GEN_INT (8)));\n+          emit_insn (gen_cmpsi (blocks, const0_rtx));\n+          emit_jump_insn (gen_beq (label2));\n+          emit_insn (gen_movstrsi_long (reg0, reg1, reg0, reg1, blocks, blocks));\n+          emit_label (label2); \n+\t  operands[0] = change_address (operands[0], VOIDmode, reg0);\n+\t  operands[1] = change_address (operands[1], VOIDmode, reg1);\n+          emit_insn (gen_movstrsi_short (operands[0], operands[1], len));\n+          emit_label (label1); \n           DONE;\t   \n        }\t \n     }\n }\")\n \n-; Move a block that is less than 256 bytes in length.\n+; Move a block that is up to 256 bytes in length.\n+; The block length is taken as (operands[2] % 256) + 1.\n \n-(define_insn \"movstrsico\"\n-  [(set (match_operand:BLK 0 \"s_operand\" \"=oQ\")\n-        (match_operand:BLK 1 \"s_operand\" \"oQ\"))\n-   (use (match_operand 2 \"const_int_operand\" \"I\"))]\n-  \"((unsigned) INTVAL (operands[2]) < 256)\"\n-  \"mvc\\\\t%O0(%c2+1,%R0),%1\"\n-  [(set_attr \"op_type\" \"SS\")\n-   (set_attr \"atype\" \"mem\")])\n+(define_insn \"movstrdi_short\"\n+  [(set (match_operand:BLK 0 \"s_operand\" \"=oQ,oQ\")\n+        (match_operand:BLK 1 \"s_operand\" \"oQ,oQ\"))\n+   (use (match_operand:DI 2 \"nonmemory_operand\" \"n,a\"))\n+   (clobber (match_scratch:DI 3 \"=X,&a\"))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"mvc\\\\t%O0(%b2+1,%R0),%1\\\";\n+\n+      case 1:\n+\toutput_asm_insn (\\\"bras\\\\t%3,.+10\\\", operands);\n+\toutput_asm_insn (\\\"mvc\\\\t%O0(1,%R0),%1\\\", operands);\n+\treturn \\\"ex\\\\t%2,0(%3)\\\";\n+\n+      default:\n+        abort ();\n+    }\n+}\"\n+  [(set_attr \"op_type\" \"SS,NN\")\n+   (set_attr \"atype\"   \"mem,mem\")\n+   (set_attr \"length\"  \"*,14\")])\n+\n+(define_insn \"movstrsi_short\"\n+  [(set (match_operand:BLK 0 \"s_operand\" \"=oQ,oQ\")\n+        (match_operand:BLK 1 \"s_operand\" \"oQ,oQ\"))\n+   (use (match_operand:SI 2 \"nonmemory_operand\" \"n,a\"))\n+   (clobber (match_scratch:SI 3 \"=X,&a\"))]\n+  \"!TARGET_64BIT\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"mvc\\\\t%O0(%b2+1,%R0),%1\\\";\n+\n+      case 1:\n+\toutput_asm_insn (\\\"bras\\\\t%3,.+10\\\", operands);\n+\toutput_asm_insn (\\\"mvc\\\\t%O0(1,%R0),%1\\\", operands);\n+\treturn \\\"ex\\\\t%2,0(%3)\\\";\n+\n+      default:\n+        abort ();\n+    }\n+}\"\n+  [(set_attr \"op_type\" \"SS,NN\")\n+   (set_attr \"atype\"   \"mem,mem\")\n+   (set_attr \"length\"  \"*,14\")])\n \n-; Move a block that is more than 256 bytes in lenght or length in register\n+; Move a block that is a multiple of 256 bytes in length\n \n-(define_insn \"movstrdix_64\"\n-  [(use (match_operand:DI 4 \"register_operand\" \"a\"))\n+(define_insn \"movstrdi_long\"\n+  [(set (match_operand:DI 4 \"register_operand\" \"=d\")\n+        (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=a\")\n         (plus:DI (match_operand:DI 2 \"register_operand\" \"0\")\n-                 (and:DI (match_dup 4) (const_int -256))))\n+                 (ashift:DI (match_operand:DI 5 \"register_operand\" \"4\")\n+                            (const_int 8))))\n    (set (match_operand:DI 1 \"register_operand\" \"=a\")\n         (plus:DI (match_operand:DI 3 \"register_operand\" \"1\")\n-                 (and:DI (match_dup 4) (const_int -256))))\n+                 (ashift:DI (match_dup 5) (const_int 8))))\n    (set (mem:BLK (match_dup 2))\n         (mem:BLK (match_dup 3)))\n-   (clobber (match_scratch:DI 5 \"=&a\"))\n-   (clobber (reg:CC 33))]\n-  \"\"\n+   (use (match_dup 5))]\n+  \"TARGET_64BIT\"\n   \"*\n {\n-  rtx xop[4];\n-  xop[0] = gen_label_rtx ();\n-  xop[1] = gen_label_rtx ();\n-  xop[2] = gen_label_rtx ();\n-  xop[3] = operands[5];\n-  output_asm_insn (\\\"srag\\\\t%5,%4,8\\\", operands);\n-  output_asm_insn (\\\"jz\\\\t%l1\\\", xop);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[0]));\n   output_asm_insn (\\\"mvc\\\\t0(256,%0),0(%1)\\\", operands);\n   output_asm_insn (\\\"la\\\\t%0,256(%0)\\\", operands);\n   output_asm_insn (\\\"la\\\\t%1,256(%1)\\\", operands);\n-  output_asm_insn (\\\"brct\\\\t%3,%l0\\\", xop);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[1]));\n-  output_asm_insn (\\\"bras\\\\t%3,%l2\\\", xop);\n-  output_asm_insn (\\\"mvc\\\\t0(1,%0),0(%1)\\\", operands);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[2]));\n-  return \\\"ex\\\\t%4,0(%5)\\\";\n+  return \\\"brct\\\\t%4,.-14\\\";\n }\"\n   [(set_attr \"op_type\" \"NN\")\n    (set_attr \"atype\"   \"mem\")\n-   (set_attr \"length\" \"44\")])\n+   (set_attr \"length\"  \"18\")])\n \n-(define_insn \"movstrsix_31\"\n-  [(use (match_operand:SI 4 \"register_operand\" \"a\"))\n+(define_insn \"movstrsi_long\"\n+  [(set (match_operand:SI 4 \"register_operand\" \"=d\")\n+        (const_int 0))\n    (set (match_operand:SI 0 \"register_operand\" \"=a\")\n         (plus:SI (match_operand:SI 2 \"register_operand\" \"0\")\n-                 (and:SI (match_dup 4) (const_int -256))))\n+                 (ashift:SI (match_operand:SI 5 \"register_operand\" \"4\")\n+                            (const_int 8))))\n    (set (match_operand:SI 1 \"register_operand\" \"=a\")\n         (plus:SI (match_operand:SI 3 \"register_operand\" \"1\")\n-                 (and:SI (match_dup 4) (const_int -256))))\n+                 (ashift:SI (match_dup 5) (const_int 8))))\n    (set (mem:BLK (match_dup 2))\n         (mem:BLK (match_dup 3)))\n-   (clobber (match_scratch:SI 5 \"=&a\"))\n-   (clobber (reg:CC 33))]\n-  \"\"\n+   (use (match_dup 5))]\n+  \"!TARGET_64BIT\"\n   \"*\n {\n-  rtx xop[4];\n-  xop[0] = gen_label_rtx ();\n-  xop[1] = gen_label_rtx ();\n-  xop[2] = gen_label_rtx ();\n-  xop[3] = operands[5];\n-  output_asm_insn (\\\"lr\\\\t%5,%4\\\", operands);\n-  output_asm_insn (\\\"sra\\\\t%5,8\\\", operands);\n-  output_asm_insn (\\\"jz\\\\t%l1\\\", xop);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[0]));\n   output_asm_insn (\\\"mvc\\\\t0(256,%0),0(%1)\\\", operands);\n   output_asm_insn (\\\"la\\\\t%0,256(%0)\\\", operands);\n   output_asm_insn (\\\"la\\\\t%1,256(%1)\\\", operands);\n-  output_asm_insn (\\\"brct\\\\t%3,%l0\\\", xop);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[1]));\n-  output_asm_insn (\\\"bras\\\\t%3,%l2\\\", xop);\n-  output_asm_insn (\\\"mvc\\\\t0(1,%0),0(%1)\\\", operands);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[2]));\n-  return \\\"ex\\\\t%4,0(%5)\\\";\n+  return \\\"brct\\\\t%4,.-14\\\";\n }\"\n-   [(set_attr \"op_type\" \"NN\")\n-    (set_attr \"length\" \"42\")\n-    (set_attr \"atype\" \"mem\")])\n+  [(set_attr \"op_type\" \"NN\")\n+   (set_attr \"atype\"   \"mem\")\n+   (set_attr \"length\"  \"18\")])\n \n ; Move a block that is larger than 255 bytes in length.\n \n@@ -3836,6 +3864,7 @@\n   operands[4] = gen_reg_rtx(TImode);\n   emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n   emit_move_insn (gen_lowpart (DImode, operands[4]), operands[1]);\n+  emit_move_insn (gen_highpart (DImode, operands[4]), const0_rtx);\n   insn = emit_insn (gen_divmodtidi3 (operands[4], operands[4], operands[2]));\n   REG_NOTES (insn) =\n \tgen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n@@ -5322,8 +5351,7 @@\n (define_insn \"rotldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n \t(rotate:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t   (match_operand:DI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"TARGET_64BIT\"\n   \"@\n    rllg\\\\t%0,%1,%c2\n@@ -5337,8 +5365,7 @@\n (define_insn \"rotlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(rotate:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"TARGET_64BIT\"\n   \"@\n    rll\\\\t%0,%1,%c2\n@@ -5349,37 +5376,32 @@\n ;;\n ;;- Arithmetic shift instructions.\n ;;\n-;;  for left shifts always setal shifts are used (ANSI-C)\n \n ;\n ; ashldi3 instruction pattern(s).\n ;\n \n (define_expand \"ashldi3\"\n-  [(parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-          (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-     (clobber (reg:CC 33))])]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\")\n \n (define_insn \"*ashldi3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (ashift:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"!TARGET_64BIT\"\n   \"@\n    sldl\\\\t%0,%c2\n    sldl\\\\t%0,0(%2)\"     \n   [(set_attr \"op_type\"  \"RS\")])\n \n (define_insn \"*ashldi3_64\"\n-  [(set            (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (ashift:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"TARGET_64BIT\"\n   \"@\n    sllg\\\\t%0,%1,%2\n@@ -5399,6 +5421,31 @@\n   \"\"\n   \"\")\n \n+(define_insn \"*ashrdi3_cc_31\"\n+  [(set (reg 33)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n+  \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\"\n+  \"@\n+   srda\\\\t%0,%c2\n+   srda\\\\t%0,0(%2)\"     \n+  [(set_attr \"op_type\"  \"RS\")])\n+\n+(define_insn \"*ashrdi3_cconly_31\"\n+  [(set (reg 33)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\"\n+  \"@\n+   srda\\\\t%0,%c2\n+   srda\\\\t%0,0(%2)\"     \n+  [(set_attr \"op_type\"  \"RS\")])\n+\n (define_insn \"*ashrdi3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n@@ -5410,6 +5457,31 @@\n    srda\\\\t%0,0(%2)\"     \n   [(set_attr \"op_type\"  \"RS\")])\n \n+(define_insn \"*ashrdi3_cc_64\"\n+  [(set (reg 33)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n+                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"@\n+   srag\\\\t%0,%1,%c2\n+   srag\\\\t%0,%1,0(%2)\"\n+  [(set_attr \"op_type\"  \"RSE\")])\n+\n+(define_insn \"*ashrdi3_cconly_64\"\n+  [(set (reg 33)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n+                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"@\n+   srag\\\\t%0,%1,%c2\n+   srag\\\\t%0,%1,0(%2)\"\n+  [(set_attr \"op_type\"  \"RSE\")])\n+\n (define_insn \"*ashrdi3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n@@ -5424,13 +5496,11 @@\n ;\n ; ashlsi3 instruction pattern(s).\n ;\n-; all 32 bits has to be shifted (testcase co750c)\n \n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"\"\n   \"@\n    sll\\\\t%0,%c2\n@@ -5441,6 +5511,31 @@\n ; ashrsi3 instruction pattern(s).\n ;\n \n+(define_insn \"*ashrsi3_cc\"\n+  [(set (reg 33)\n+        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+                 (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (ashiftrt:SI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"@\n+   sra\\\\t%0,%c2\n+   sra\\\\t%0,0(%2)\"\n+  [(set_attr \"op_type\"  \"RS\")])\n+\n+(define_insn \"*ashrsi3_cconly\"\n+  [(set (reg 33)\n+        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=d,d\"))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"@\n+   sra\\\\t%0,%c2\n+   sra\\\\t%0,0(%2)\"\n+  [(set_attr \"op_type\"  \"RS\")])\n+\n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n@@ -5462,19 +5557,16 @@\n ;\n \n (define_expand \"lshrdi3\"\n-  [(parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-          (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                       (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-     (clobber (reg:CC 33))])]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                     (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\")\n \n (define_insn \"*lshrdi3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"!TARGET_64BIT\"\n   \"@\n    srdl\\\\t%0,%c2\n@@ -5484,8 +5576,7 @@\n (define_insn \"*lshrdi3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"TARGET_64BIT\"\n   \"@\n    srlg\\\\t%0,%1,%c2\n@@ -5499,8 +5590,7 @@\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n-   (clobber (reg:CC 33))]\n+                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n   \"\"\n   \"@\n    srl\\\\t%0,%c2"}]}