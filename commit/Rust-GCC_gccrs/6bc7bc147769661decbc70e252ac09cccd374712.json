{"sha": "6bc7bc147769661decbc70e252ac09cccd374712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjN2JjMTQ3NzY5NjYxZGVjYmM3MGUyNTJhYzA5Y2NjZDM3NDcxMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-03T20:19:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-03T20:19:55Z"}, "message": "ansidecl.h (EXPORTED_CONST): Define.\n\ninclude/:\n\t* ansidecl.h (EXPORTED_CONST): Define.\ngcc/:\n\t* dummy-checksum.c (executable_checksum): Use EXPORTED_CONST.\n\t* genattrtab.c (write_length_unit_log): Likewise.\n\t* genchecksum.c (dosum): Likewise.\n\t* gengtype.c (write_rtx_next): Likewise.\n\t(finish_root_table, write_roots): Likewise.\n\t* gimple.c (gimple_ops_offset_): Likewise.\n\t* tree-nomudflap.c (gt_ggc_r_gt_tree_mudflap_h): Likewise.\n\t* config/arc/arc.c (arc_attribute_table): Likewise.\n\t* config/arm/arm.c (arm_attribute_table): Likewise.\n\t* config/avr/avr.c (avr_attribute_table): Likewise.\n\t* config/crx/crx.c (crx_attribute_table): Likewise.\n\t* config/m32r/m32r.c (m32r_attribute_table): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_attribute_table): Likewise.\n\t* config/mcore/mcore.c (mcore_attribute_table): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_attribute_table): Likewise.\n\t* config/sh/sh.c (sh_attribute_table): Likewise.\n\t* config/sparc/sparc.c (sparc_attribute_table): Likewise.\n\t* config/spu/spu.c (spu_attribute_table): Likewise.\n\t* config/v850/v850.c (v850_attribute_table): Likewise.\n\n\t* config/alpha/alpha.c (vms_attribute_table): Make static.\n\t* config/bfin/bfin.c (bfin_attribute_table): Likewise.\n\t* config/h8300/h8300.c (h8300_attribute_table): Likewise.\n\t* config/mips/mips.c (mips_attribute_table): Likewise.\n\n\t* Makefile.in (dummy-checksum.o): Depend upon $(CONFIG_H) and\n\t$(SYSTEM_H).\n\t(cc1-checksum.o): Likewise.\ngcc/cp/:\n\t* Make-lang.in (cc1plus-checksum.o): Depend upon $(CONFIG_H) and\n\t$(SYSTEM_H).\ngcc/objc/:\n\t* Make-lang.in (cc1obj-checksum.o): Depend upon $(CONFIG_H) and\n\t$(SYSTEM_H).\ngcc/objcp/:\n\t* Make-lang.in (cc1objplus-checksum.o): Depend upon $(CONFIG_H)\n\tand $(SYSTEM_H).\n\nFrom-SVN: r148146", "tree": {"sha": "fb195405d46afa714beccb16a23db5902deea35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb195405d46afa714beccb16a23db5902deea35e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc7bc147769661decbc70e252ac09cccd374712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc7bc147769661decbc70e252ac09cccd374712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc7bc147769661decbc70e252ac09cccd374712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc7bc147769661decbc70e252ac09cccd374712/comments", "author": null, "committer": null, "parents": [{"sha": "54f806c7a214a001ae91fa236eccb9bed62a0143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f806c7a214a001ae91fa236eccb9bed62a0143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f806c7a214a001ae91fa236eccb9bed62a0143"}], "stats": {"total": 145, "additions": 106, "deletions": 39}, "files": [{"sha": "c2cac32adff2c9366dab70ab1d09d618a0f2d476", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,3 +1,34 @@\n+2009-06-03  Ian Lance Taylor  <iant@google.com>\n+\n+\t* dummy-checksum.c (executable_checksum): Use EXPORTED_CONST.\n+\t* genattrtab.c (write_length_unit_log): Likewise.\n+\t* genchecksum.c (dosum): Likewise.\n+\t* gengtype.c (write_rtx_next): Likewise.\n+\t(finish_root_table, write_roots): Likewise.\n+\t* gimple.c (gimple_ops_offset_): Likewise.\n+\t* tree-nomudflap.c (gt_ggc_r_gt_tree_mudflap_h): Likewise.\n+\t* config/arc/arc.c (arc_attribute_table): Likewise.\n+\t* config/arm/arm.c (arm_attribute_table): Likewise.\n+\t* config/avr/avr.c (avr_attribute_table): Likewise.\n+\t* config/crx/crx.c (crx_attribute_table): Likewise.\n+\t* config/m32r/m32r.c (m32r_attribute_table): Likewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_attribute_table): Likewise.\n+\t* config/mcore/mcore.c (mcore_attribute_table): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_attribute_table): Likewise.\n+\t* config/sh/sh.c (sh_attribute_table): Likewise.\n+\t* config/sparc/sparc.c (sparc_attribute_table): Likewise.\n+\t* config/spu/spu.c (spu_attribute_table): Likewise.\n+\t* config/v850/v850.c (v850_attribute_table): Likewise.\n+\n+\t* config/alpha/alpha.c (vms_attribute_table): Make static.\n+\t* config/bfin/bfin.c (bfin_attribute_table): Likewise.\n+\t* config/h8300/h8300.c (h8300_attribute_table): Likewise.\n+\t* config/mips/mips.c (mips_attribute_table): Likewise.\n+\n+\t* Makefile.in (dummy-checksum.o): Depend upon $(CONFIG_H) and\n+\t$(SYSTEM_H).\n+\t(cc1-checksum.o): Likewise.\n+\n 2009-06-03  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/vect.md (*movv2sf_internal): Handle big endian case."}, {"sha": "814b90d31a4bfba75c9e164433e459e80074495d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1671,7 +1671,7 @@ $(SPECS): xgcc$(exeext)\n gcc-cross$(exeext): xgcc$(exeext)\n \tcp xgcc$(exeext) gcc-cross$(exeext)\n \n-dummy-checksum.o : dummy-checksum.c\n+dummy-checksum.o : dummy-checksum.c $(CONFIG_H) $(SYSTEM_H)\n \n cc1-dummy$(exeext): $(C_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) \\\n@@ -1680,7 +1680,7 @@ cc1-dummy$(exeext): $(C_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n cc1-checksum.c : cc1-dummy$(exeext) build/genchecksum$(build_exeext)\n \tbuild/genchecksum$(build_exeext) cc1-dummy$(exeext) > $@\n \n-cc1-checksum.o : cc1-checksum.c\n+cc1-checksum.o : cc1-checksum.c $(CONFIG_H) $(SYSTEM_H)\n \n cc1$(exeext): $(C_OBJS) cc1-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) \\"}, {"sha": "1803627c1f45efb19397e42e014dc0d0d4f3d7c4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -7334,7 +7334,7 @@ alpha_using_fp (void)\n \n #if TARGET_ABI_OPEN_VMS\n \n-const struct attribute_spec vms_attribute_table[] =\n+static const struct attribute_spec vms_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"overlaid\",   0, 0, true,  false, false, NULL },"}, {"sha": "221dea1ceac8fe3c15e74f5d4743fc4a31142930", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -78,7 +78,7 @@ static bool arc_handle_option (size_t, const char *, int);\n static void record_cc_ref (rtx);\n static void arc_init_reg_tables (void);\n static int get_arc_condition_code (rtx);\n-const struct attribute_spec arc_attribute_table[];\n+EXPORTED_CONST struct attribute_spec arc_attribute_table[];\n static tree arc_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n static bool arc_assemble_integer (rtx, unsigned int, int);\n static void arc_output_function_prologue (FILE *, HOST_WIDE_INT);"}, {"sha": "141a4b846a61ead0b71a9b421e4ad4b8013e83eb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -58,7 +58,7 @@\n typedef struct minipool_node    Mnode;\n typedef struct minipool_fixup   Mfix;\n \n-const struct attribute_spec arm_attribute_table[];\n+EXPORTED_CONST struct attribute_spec arm_attribute_table[];\n \n void (*arm_lang_output_object_attributes_hook)(void);\n "}, {"sha": "1e79644fc2e05f593bc21b10b76496a45939d990", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -67,7 +67,7 @@ static int compare_sign_p (rtx insn);\n static tree avr_handle_progmem_attribute (tree *, tree, tree, int, bool *);\n static tree avr_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree avr_handle_fntype_attribute (tree *, tree, tree, int, bool *);\n-const struct attribute_spec avr_attribute_table[];\n+EXPORTED_CONST struct attribute_spec avr_attribute_table[];\n static bool avr_assemble_integer (rtx, unsigned int, int);\n static void avr_file_start (void);\n static void avr_file_end (void);"}, {"sha": "715ec818cf501d316cec4c19c3479f5a5e1baf91", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -5446,7 +5446,7 @@ bfin_handle_l1_data_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n }\n \n /* Table of valid machine attributes.  */\n-const struct attribute_spec bfin_attribute_table[] =\n+static const struct attribute_spec bfin_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"interrupt_handler\", 0, 0, false, true,  true, handle_int_attribute },"}, {"sha": "28446259044d2b11b7e4795f569d1c48adb9e603", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,6 +1,7 @@\n /* Output routines for GCC for CRX.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -122,7 +123,7 @@ static enum machine_mode output_memory_reference_mode;\n /*****************************************************************************/\n \n /* Table of machine attributes.  */\n-const struct attribute_spec crx_attribute_table[];\n+EXPORTED_CONST struct attribute_spec crx_attribute_table[];\n \n /*****************************************************************************/\n /* TARGETM FUNCTION PROTOTYPES\t\t\t\t\t\t     */\n@@ -1435,4 +1436,3 @@ crx_expand_epilogue (void)\n   else\n     emit_jump_insn (gen_pop_and_popret_return (GEN_INT (sum_regs)));\n }\n-"}, {"sha": "c3dd29723fe0fb4563684f752daee25b4248652e", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -5263,7 +5263,7 @@ h8300_insert_attributes (tree node, tree *attributes)\n    tiny_data: This variable lives in the tiny data area and can be\n    referenced with 16-bit absolute memory references.  */\n \n-const struct attribute_spec h8300_attribute_table[] =\n+static const struct attribute_spec h8300_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"interrupt_handler\", 0, 0, true,  false, false, h8300_handle_fndecl_attribute },"}, {"sha": "3ee6b6bb5fc1931cd746bb9cced754758943e161", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on the Renesas M32R cpu.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008 Free Software Foundation, Inc.\n+   2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -65,7 +65,7 @@ static bool  m32r_handle_option (size_t, const char *, int);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n-const struct attribute_spec m32r_attribute_table[];\n+EXPORTED_CONST struct attribute_spec m32r_attribute_table[];\n static rtx   m32r_legitimize_address (rtx, rtx, enum machine_mode);\n static tree  m32r_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void  m32r_output_function_prologue (FILE *, HOST_WIDE_INT);"}, {"sha": "a8a8db8ac3e4dfc41ac19fe0d76490b2a4348c1f", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -73,7 +73,7 @@ static int m68hc11_shift_cost (enum machine_mode, rtx, int);\n static int m68hc11_rtx_costs_1 (rtx, enum rtx_code, enum rtx_code);\n static bool m68hc11_rtx_costs (rtx, int, int, int *, bool);\n static tree m68hc11_handle_fntype_attribute (tree *, tree, tree, int, bool *);\n-const struct attribute_spec m68hc11_attribute_table[];\n+EXPORTED_CONST struct attribute_spec m68hc11_attribute_table[];\n \n void create_regs_rtx (void);\n "}, {"sha": "d03a28391797a5846fb7971d41e74b52caf4aa7d", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -127,7 +127,7 @@ static void       mcore_mark_dllexport          (tree);\n static void       mcore_mark_dllimport          (tree);\n static int        mcore_dllexport_p             (tree);\n static int        mcore_dllimport_p             (tree);\n-const struct attribute_spec mcore_attribute_table[];\n+EXPORTED_CONST struct attribute_spec mcore_attribute_table[];\n static tree       mcore_handle_naked_attribute  (tree *, tree, tree, int, bool *);\n #ifdef OBJECT_FORMAT_ELF\n static void\t  mcore_asm_named_section       (const char *,"}, {"sha": "9e3d20be25b855dabac062bb18688216f1274a13", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -565,7 +565,7 @@ const enum reg_class mips_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n };\n \n /* The value of TARGET_ATTRIBUTE_TABLE.  */\n-const struct attribute_spec mips_attribute_table[] = {\n+static const struct attribute_spec mips_attribute_table[] = {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"long_call\",   0, 0, false, true,  true,  NULL },\n   { \"far\",     \t   0, 0, false, true,  true,  NULL },"}, {"sha": "04ff6b54242c3cd7ae0f76f87bcea4af9aba0e3a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -775,7 +775,7 @@ static bool rs6000_ms_bitfield_layout_p (const_tree);\n static tree rs6000_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static void rs6000_eliminate_indexed_memrefs (rtx operands[2]);\n static const char *rs6000_mangle_type (const_tree);\n-extern const struct attribute_spec rs6000_attribute_table[];\n+EXPORTED_CONST struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static rtx rs6000_savres_routine_sym (rs6000_stack_t *, bool, bool, bool);\n static rtx rs6000_emit_stack_reset (rs6000_stack_t *, rtx, rtx, int, bool);"}, {"sha": "fdb38d718150ab375f5b02c5972e321c0915ba0a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -184,7 +184,7 @@ static void push_regs (HARD_REG_SET *, int);\n static int calc_live_regs (HARD_REG_SET *);\n static HOST_WIDE_INT rounded_frame_size (int);\n static rtx mark_constant_pool_use (rtx);\n-const struct attribute_spec sh_attribute_table[];\n+EXPORTED_CONST struct attribute_spec sh_attribute_table[];\n static tree sh_handle_interrupt_handler_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_resbank_handler_attribute (tree *, tree,\n \t\t\t\t\t\t tree, int, bool *);"}, {"sha": "2d9431804ab78d0c74e7e770d20382fcef21f221", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -421,7 +421,7 @@ static void sparc_file_end (void);\n static const char *sparc_mangle_type (const_tree);\n #endif\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n-const struct attribute_spec sparc_attribute_table[];\n+EXPORTED_CONST struct attribute_spec sparc_attribute_table[];\n #endif\n \f\n /* Option handling.  */"}, {"sha": "a97bf24941f8db90c1582759565a71319c082a96", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -316,7 +316,7 @@ spu_libgcc_shift_count_mode (void);\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST spu_sched_adjust_cost\n \n-const struct attribute_spec spu_attribute_table[];\n+EXPORTED_CONST struct attribute_spec spu_attribute_table[];\n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE spu_attribute_table\n "}, {"sha": "0af2451341a97888688d202c6e4d8f3e8f880e66", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -58,7 +58,7 @@ static void substitute_ep_register   (rtx, rtx, int, int, rtx *, rtx *);\n static void v850_reorg\t\t     (void);\n static int  ep_memory_offset         (enum machine_mode, int);\n static void v850_set_data_area       (tree, v850_data_area);\n-const struct attribute_spec v850_attribute_table[];\n+EXPORTED_CONST struct attribute_spec v850_attribute_table[];\n static tree v850_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n static tree v850_handle_data_area_attribute (tree *, tree, tree, int, bool *);\n static void v850_insert_attributes   (tree, tree *);"}, {"sha": "bfd468b71b0ff2b5c621e3d066799a485cdc09ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,3 +1,8 @@\n+2009-06-03  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Make-lang.in (cc1plus-checksum.o): Depend upon $(CONFIG_H) and\n+\t$(SYSTEM_H).\n+\n 2009-06-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (maybe_deduce_size_from_array_init): Use relayout_decl."}, {"sha": "4c25122d65a543314424a6495edd262bcc8b6011", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -98,7 +98,7 @@ cc1plus-dummy$(exeext): $(CXX_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n cc1plus-checksum.c : cc1plus-dummy$(exeext) build/genchecksum$(build_exeext)\n \tbuild/genchecksum$(build_exeext) cc1plus-dummy$(exeext) > $@\n \n-cc1plus-checksum.o : cc1plus-checksum.c\n+cc1plus-checksum.o : cc1plus-checksum.c $(CONFIG_H) $(SYSTEM_H)\n \n cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\"}, {"sha": "c90f1ca934012a0ea263894d0c497e2f3c819b9d", "filename": "gcc/dummy-checksum.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fdummy-checksum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fdummy-checksum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdummy-checksum.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1 +1,3 @@\n-const unsigned char executable_checksum[16] = { 0 };\n+#include \"config.h\"\n+#include \"system.h\"\n+EXPORTED_CONST unsigned char executable_checksum[16] = { 0 };"}, {"sha": "def9a694a0e87d19c4ab7d5630d7069da95b6177", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,6 +1,7 @@\n /* Generate code from machine description to compute values of attributes.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GCC.\n@@ -1637,7 +1638,7 @@ write_length_unit_log (void)\n       for (length_unit_log = 0; length_or & 1; length_or >>= 1)\n \tlength_unit_log++;\n     }\n-  printf (\"const int length_unit_log = %u;\\n\", length_unit_log);\n+  printf (\"EXPORTED_CONST int length_unit_log = %u;\\n\", length_unit_log);\n }\n \n /* Take a COND expression and see if any of the conditions in it can be"}, {"sha": "fa00d0e3225b04daeae86554a4c271a6a9956c1c", "filename": "gcc/genchecksum.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgenchecksum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgenchecksum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenchecksum.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,5 +1,5 @@\n /* Generate checksums of executables for PCH validation\n-   Copyright (C) 2005, 2007\n+   Copyright (C) 2005, 2007, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -56,7 +56,9 @@ dosum (const char *file)\n       exit (1);\n     }\n \n-  fputs (\"const unsigned char executable_checksum[16] = { \", stdout);\n+  puts (\"#include \\\"config.h\\\"\");\n+  puts (\"#include \\\"system.h\\\"\");\n+  fputs (\"EXPORTED_CONST unsigned char executable_checksum[16] = { \", stdout);\n   for (i = 0; i < 16; i++)\n     printf (\"%#02x%s\", result[i], i == 15 ? \" };\\n\" : \", \");\n }"}, {"sha": "2ec09dc880a98c6c0cbfb1b513625b46b89bdc48", "filename": "gcc/gengtype.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,5 +1,5 @@\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -964,7 +964,7 @@ write_rtx_next (void)\n   int i;\n \n   oprintf (f, \"\\n/* Used to implement the RTX_NEXT macro.  */\\n\");\n-  oprintf (f, \"const unsigned char rtx_next[NUM_RTX_CODE] = {\\n\");\n+  oprintf (f, \"EXPORTED_CONST unsigned char rtx_next[NUM_RTX_CODE] = {\\n\");\n   for (i = 0; i < NUM_RTX_CODE; i++)\n     if (rtx_next_new[i] == -1)\n       oprintf (f, \"  0,\\n\");\n@@ -3028,7 +3028,7 @@ finish_root_table (struct flist *flp, const char *pfx, const char *lastname,\n     size_t fnum;\n     for (fnum = 0; fnum < num_lang_dirs; fnum++)\n       oprintf (base_files [fnum],\n-\t       \"const struct %s * const %s[] = {\\n\",\n+\t       \"EXPORTED_CONST struct %s * const %s[] = {\\n\",\n \t       tname, name);\n   }\n \n@@ -3359,7 +3359,7 @@ write_roots (pair_p variables)\n \t{\n \t  fli->started_p = 1;\n \n-\t  oprintf (f, \"const struct ggc_root_tab gt_ggc_r_\");\n+\t  oprintf (f, \"EXPORTED_CONST struct ggc_root_tab gt_ggc_r_\");\n \t  put_mangled_filename (f, v->line.file);\n \t  oprintf (f, \"[] = {\\n\");\n \t}\n@@ -3393,7 +3393,7 @@ write_roots (pair_p variables)\n \t{\n \t  fli->started_p = 1;\n \n-\t  oprintf (f, \"const struct ggc_root_tab gt_ggc_rd_\");\n+\t  oprintf (f, \"EXPORTED_CONST struct ggc_root_tab gt_ggc_rd_\");\n \t  put_mangled_filename (f, v->line.file);\n \t  oprintf (f, \"[] = {\\n\");\n \t}\n@@ -3437,7 +3437,7 @@ write_roots (pair_p variables)\n \t{\n \t  fli->started_p = 1;\n \n-\t  oprintf (f, \"const struct ggc_cache_tab gt_ggc_rc_\");\n+\t  oprintf (f, \"EXPORTED_CONST struct ggc_cache_tab gt_ggc_rc_\");\n \t  put_mangled_filename (f, v->line.file);\n \t  oprintf (f, \"[] = {\\n\");\n \t}\n@@ -3473,7 +3473,7 @@ write_roots (pair_p variables)\n \t{\n \t  fli->started_p = 1;\n \n-\t  oprintf (f, \"const struct ggc_root_tab gt_pch_rc_\");\n+\t  oprintf (f, \"EXPORTED_CONST struct ggc_root_tab gt_pch_rc_\");\n \t  put_mangled_filename (f, v->line.file);\n \t  oprintf (f, \"[] = {\\n\");\n \t}\n@@ -3509,7 +3509,7 @@ write_roots (pair_p variables)\n \t{\n \t  fli->started_p = 1;\n \n-\t  oprintf (f, \"const struct ggc_root_tab gt_pch_rs_\");\n+\t  oprintf (f, \"EXPORTED_CONST struct ggc_root_tab gt_pch_rs_\");\n \t  put_mangled_filename (f, v->line.file);\n \t  oprintf (f, \"[] = {\\n\");\n \t}"}, {"sha": "d3578da28dacc3ef7d871a2fe143385e29f5b315", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -45,7 +45,7 @@ const char *const gimple_code_name[] = {\n    operands vector the size of the structure minus the size of the 1\n    element tree array at the end (see gimple_ops).  */\n #define DEFGSCODE(SYM, NAME, STRUCT)\t(sizeof (STRUCT) - sizeof (tree)),\n-const size_t gimple_ops_offset_[] = {\n+EXPORTED_CONST size_t gimple_ops_offset_[] = {\n #include \"gimple.def\"\n };\n #undef DEFGSCODE"}, {"sha": "afe61caba085e9676c88abfa3526ce3e69d56ace", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,3 +1,8 @@\n+2009-06-03  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Make-lang.in (cc1obj-checksum.o): Depend upon $(CONFIG_H) and\n+\t$(SYSTEM_H).\n+\n 2009-05-27  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (cc1obj-dummy$(exeext)): Change $(COMPILER) to"}, {"sha": "bfe8a849091adb56906051d24abb24b985d73835", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -59,7 +59,7 @@ cc1obj-dummy$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) dummy-checksum.o $(BACKEN\n cc1obj-checksum.c : cc1obj-dummy$(exeext) build/genchecksum$(build_exeext)\n \tbuild/genchecksum$(build_exeext) cc1obj-dummy$(exeext) > $@\n \n-cc1obj-checksum.o : cc1obj-checksum.c\n+cc1obj-checksum.o : cc1obj-checksum.c $(CONFIG_H) $(SYSTEM_H)\n \n cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\"}, {"sha": "12b93aac710729eb0a5d67ede1576a3b1171c555", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,3 +1,8 @@\n+2009-06-03  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Make-lang.in (cc1objplus-checksum.o): Depend upon $(CONFIG_H)\n+\tand $(SYSTEM_H).\n+\n 2009-05-27  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (cc1objplus-dummy$(exeext)): Change $(COMPILER) to"}, {"sha": "2b1b80984296908888364d9efc340b1aa823f9ff", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -61,7 +61,7 @@ cc1objplus-dummy$(exeext): $(OBJCXX_OBJS) dummy-checksum.o $(BACKEND) \\\n cc1objplus-checksum.c : cc1objplus-dummy$(exeext) build/genchecksum$(build_exeext)\n \tbuild/genchecksum$(build_exeext) cc1objplus-dummy$(exeext) > $@\n \n-cc1objplus-checksum.o : cc1objplus-checksum.c\n+cc1objplus-checksum.o : cc1objplus-checksum.c $(CONFIG_H) $(SYSTEM_H)\n \n cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\"}, {"sha": "96b58f37c5ad67d9e78a34e5394099a512ff0394", "filename": "gcc/tree-nomudflap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Ftree-nomudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/gcc%2Ftree-nomudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nomudflap.c?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -132,6 +132,6 @@ struct gimple_opt_pass pass_mudflap_2 =\n We prepare a little dummy struct here.\n */\n \n-const struct ggc_root_tab gt_ggc_r_gt_tree_mudflap_h[] = {\n+EXPORTED_CONST struct ggc_root_tab gt_ggc_r_gt_tree_mudflap_h[] = {\n   LAST_GGC_ROOT_TAB\n };"}, {"sha": "4693ff9a5984f108efda7cf7fb1adcb39d7e7ad6", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -1,3 +1,7 @@\n+2009-06-02  Ian Lance Taylor  <iant@google.com>\n+\n+\t* ansidecl.h (EXPORTED_CONST): Define.\n+\n 2009-05-31  Ian Lance Taylor  <iant@google.com>\n \n \t* ansidecl.h: Add extern \"C\" when compiling with C++.  Treat C++"}, {"sha": "f9864cd386424ece83ec45dda3d2a2d27ae51bf2", "filename": "include/ansidecl.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc7bc147769661decbc70e252ac09cccd374712/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc7bc147769661decbc70e252ac09cccd374712/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=6bc7bc147769661decbc70e252ac09cccd374712", "patch": "@@ -395,6 +395,18 @@ So instead we use the macro below and test it against specific values.  */\n #define __extension__\n #endif\n \n+/* This is used to declare a const variable which should be visible\n+   outside of the current compilation unit.  Use it as\n+     EXPORTED_CONST int i = 1;\n+   This is because the semantics of const are different in C and C++.\n+   \"extern const\" is permitted in C but it looks strange, and gcc\n+   warns about it when -Wc++-compat is not used.  */\n+#ifdef __cplusplus\n+#define EXPORTED_CONST extern const\n+#else\n+#define EXPORTED_CONST const\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}]}