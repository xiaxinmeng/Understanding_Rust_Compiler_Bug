{"sha": "991656092f78eeab2a48fdbacf4e1f08567badaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxNjU2MDkyZjc4ZWVhYjJhNDhmZGJhY2Y0ZTFmMDg1NjdiYWRhZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-09T09:49:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-09T09:49:38Z"}, "message": "tree-cfg: Allow enum types as result of POINTER_DIFF_EXPR [PR98556]\n\nAs conversions between signed integers and signed enums with the same\nprecision are useless in GIMPLE, it seems strange that we require that\nPOINTER_DIFF_EXPR result must be INTEGER_TYPE.\n\nIf we really wanted to require that, we'd need to change the gimplifier\nto ensure that, which it isn't the case on the following testcase.\nWhat is going on during the gimplification is that when we have the\n(enum T) (p - q) cast, it is stripped through\n      /* Strip away as many useless type conversions as possible\n         at the toplevel.  */\n      STRIP_USELESS_TYPE_CONVERSION (*expr_p);\nand when the MODIFY_EXPR is gimplified, the *to_p has enum T type,\nwhile *from_p has intptr_t type and as there is no conversion in between,\nwe just create GIMPLE_ASSIGN from that.\n\n2021-01-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98556\n\t* tree-cfg.c (verify_gimple_assign_binary): Allow lhs of\n\tPOINTER_DIFF_EXPR to be any integral type.\n\n\t* c-c++-common/pr98556.c: New test.", "tree": {"sha": "2f040766c9ff696bc09e48ca329d3f33ae5e2ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f040766c9ff696bc09e48ca329d3f33ae5e2ddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991656092f78eeab2a48fdbacf4e1f08567badaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991656092f78eeab2a48fdbacf4e1f08567badaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991656092f78eeab2a48fdbacf4e1f08567badaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991656092f78eeab2a48fdbacf4e1f08567badaf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16dae48e9cd0421106517fc657c8743a14468945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dae48e9cd0421106517fc657c8743a14468945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16dae48e9cd0421106517fc657c8743a14468945"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "865957bf353c8c59f237a4de3a2902c73285f700", "filename": "gcc/testsuite/c-c++-common/pr98556.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991656092f78eeab2a48fdbacf4e1f08567badaf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr98556.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991656092f78eeab2a48fdbacf4e1f08567badaf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr98556.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr98556.c?ref=991656092f78eeab2a48fdbacf4e1f08567badaf", "patch": "@@ -0,0 +1,11 @@\n+/* PR c++/98556 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+enum T { E = -__LONG_MAX__ - 1 };\n+\n+enum T\n+foo (char *p, char *q)\n+{\n+  return (enum T) (p - q);\n+}"}, {"sha": "75d814bd121f40c6a430f33f4c7d6395642f6c33", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991656092f78eeab2a48fdbacf4e1f08567badaf/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991656092f78eeab2a48fdbacf4e1f08567badaf/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=991656092f78eeab2a48fdbacf4e1f08567badaf", "patch": "@@ -3940,7 +3940,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    /* Because we special-case pointers to void we allow difference\n \t       of arbitrary pointers with the same mode.  */\n \t    || TYPE_MODE (rhs1_type) != TYPE_MODE (rhs2_type)\n-\t    || TREE_CODE (lhs_type) != INTEGER_TYPE\n+\t    || !INTEGRAL_TYPE_P (lhs_type)\n \t    || TYPE_UNSIGNED (lhs_type)\n \t    || TYPE_PRECISION (lhs_type) != TYPE_PRECISION (rhs1_type))\n \t  {"}]}