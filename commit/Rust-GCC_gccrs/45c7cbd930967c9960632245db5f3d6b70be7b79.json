{"sha": "45c7cbd930967c9960632245db5f3d6b70be7b79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjN2NiZDkzMDk2N2M5OTYwNjMyMjQ1ZGI1ZjNkNmI3MGJlN2I3OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-11T21:10:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-11T21:10:10Z"}, "message": "acconfig.h (_GLIBCPP_SYMVER): Add.\n\n\n2002-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acconfig.h (_GLIBCPP_SYMVER): Add.\n\t(_GLIBCPP_ASM_SYMVER): Add.\n\t* acinclude.m4 (GLIBCPP_ENABLE_SYMVERS): Define _GLIBCPP_SYMVER.\n\t* aclocal.m4: Regenerate.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/bits/c++config (_GLIBCPP_AT_AT): Define, as an expedient\n\thack around m4 issues with quoting '@'.\n\t* src/locale.cc: Use _GLIBCPP_ASM_SYMVER.\n\t* src/globals.cc: Same.\n\n\t* testsuite/22_locale/ctor_copy_dtor.cc (test04): Fix for\n\tnon-glibc systems.\n\nFrom-SVN: r58065", "tree": {"sha": "2ec1fea83044eda777ab19f05512196d135e86c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ec1fea83044eda777ab19f05512196d135e86c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45c7cbd930967c9960632245db5f3d6b70be7b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c7cbd930967c9960632245db5f3d6b70be7b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c7cbd930967c9960632245db5f3d6b70be7b79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c7cbd930967c9960632245db5f3d6b70be7b79/comments", "author": null, "committer": null, "parents": [{"sha": "a0bed689af362730fc12c06706035d679d7c4a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bed689af362730fc12c06706035d679d7c4a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bed689af362730fc12c06706035d679d7c4a69"}], "stats": {"total": 215, "additions": 158, "deletions": 57}, "files": [{"sha": "f37120439171cae8b40c37661a1f72653dd0f8ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -1,3 +1,19 @@\n+2002-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acconfig.h (_GLIBCPP_SYMVER): Add.\n+\t(_GLIBCPP_ASM_SYMVER): Add.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_SYMVERS): Define _GLIBCPP_SYMVER.\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/bits/c++config (_GLIBCPP_AT_AT): Define, as an expedient\n+\thack around m4 issues with quoting '@'.\n+\t* src/locale.cc: Use _GLIBCPP_ASM_SYMVER.\n+\t* src/globals.cc: Same.\n+\t\n+\t* testsuite/22_locale/ctor_copy_dtor.cc (test04): Fix for\n+\tnon-glibc systems.\n+\n 2002-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/linker-map.gnu (GLIBCPP_3.2.1): Add."}, {"sha": "7d0551f6ca34e5746528b15331ec864727df91df", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -158,7 +158,44 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n@@ -173,7 +210,7 @@ mkcheck.in testsuite_flags.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:"}, {"sha": "777e94a5039a96692710ab30ddf2a4099a467761", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -46,6 +46,20 @@\n // Define if you have the copysignf function.\n #undef _GLIBCPP_HAVE_COPYSIGNF\n \n+// Define to use symbol versioning in the shared library.\n+#undef _GLIBCPP_SYMVER\n+\n+// Define symbol versioning in assember directives. If symbol\n+// versioning is beigng used, and the assembler supports this kind of\n+// thing, then use it.\n+// NB: _GLIBCPP_AT_AT is a hack to work around quoting issues in m4.\n+#if _GLIBCPP_SYMVER\n+  #define _GLIBCPP_ASM_SYMVER(cur, old, version) \\\n+   asm (\".symver \" #cur \",\" #old _GLIBCPP_AT_AT #version);\n+#else\n+  #define _GLIBCPP_ASM_SYMVER(cur, old, version)\n+#endif\n+\n // Define if mbstate_t exists in wchar.h.\n #undef HAVE_MBSTATE_T\n "}, {"sha": "2bfec92da0f0d1e8d000417e13aa317ae19974b8", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -2194,6 +2194,7 @@ case $enable_symvers in\n       ;;\n   gnu)\n       LINKER_MAP=config/linker-map.gnu\n+      AC_DEFINE(_GLIBCPP_SYMVER)\t\n       ;;\n esac\n "}, {"sha": "3bde35d3b3f6988422886a28219e1a2bfa05626b", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -2206,6 +2206,7 @@ case $enable_symvers in\n       ;;\n   gnu)\n       LINKER_MAP=config/linker-map.gnu\n+      AC_DEFINE(_GLIBCPP_SYMVER)\t\n       ;;\n esac\n "}, {"sha": "c565a8ba006f3de5021419cbdae3748ced77db15", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -24,6 +24,20 @@\n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCPP_CONCEPT_CHECKS\n \n+// Define to use symbol versioning in the shared library.\n+#undef _GLIBCPP_SYMVER\n+\n+// Define symbol versioning in assember directives. If symbol\n+// versioning is beigng used, and the assembler supports this kind of\n+// thing, then use it.\n+// NB: _GLIBCPP_AT_AT is a hack to work around quoting issues in m4.\n+#if _GLIBCPP_SYMVER\n+  #define _GLIBCPP_ASM_SYMVER(cur, old, version) \\\n+   asm (\".symver \" #cur \",\" #old _GLIBCPP_AT_AT #version);\n+#else\n+  #define _GLIBCPP_ASM_SYMVER(cur, old, version)\n+#endif\n+\n // Define if mbstate_t exists in wchar.h.\n #undef HAVE_MBSTATE_T\n "}, {"sha": "a7659c907d5c4fd7e6954eaf916ad7227f989cc5", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -22214,6 +22214,10 @@ case $enable_symvers in\n       ;;\n   gnu)\n       LINKER_MAP=config/linker-map.gnu\n+      cat >> confdefs.h <<\\EOF\n+#define _GLIBCPP_SYMVER 1\n+EOF\n+\t\n       ;;\n esac\n \n@@ -22228,7 +22232,7 @@ else\n   GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE=\n fi\n echo $ac_n \"checking versioning on shared library symbols\"\"... $ac_c\" 1>&6\n-echo \"configure:22232: checking versioning on shared library symbols\" >&5\n+echo \"configure:22236: checking versioning on shared library symbols\" >&5\n echo \"$ac_t\"\"$enable_symvers\" 1>&6\n \n \n@@ -22315,7 +22319,7 @@ glibcpp_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:22319: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:22323: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -22339,7 +22343,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:22343: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:22347: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -22385,7 +22389,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:22389: checking for install location\" >&5\n+echo \"configure:22393: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n "}, {"sha": "d8082ea5b57dabe90803834057d6929c6de0ad62", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -55,6 +55,9 @@\n // Use corrected code from the committee library group's issues list.\n #define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n \n+// Hopefully temporary workaround to autoconf/m4 issue with quoting '@'.\n+#define _GLIBCPP_AT_AT \"@@\"\n+\n // In those parts of the standard C++ library that use a mutex instead\n // of a spin-lock, we now unconditionally use GCC's gthr.h mutex\n // abstraction layer.  All support to directly map to various"}, {"sha": "7eb1a9477d1d9a7cb3540d0fb34b934615d6befe", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -54,22 +54,21 @@ namespace __gnu_cxx\n   // The rename syntax is \n   //   asm (\".symver currentname,oldname@@GLIBCPP_3.2\")\n   // At the same time, these new __gnu_cxx symbols are not exported.\n-  // In the future, GLIBCXX_ABI > 5 should remove all asm directives\n-  // in this file.\n+  // In the future, GLIBCXX_ABI > 5 should remove all uses of\n+  // _GLIBCPP_ASM_SYMVER in this file.\n   typedef char fake_locale[sizeof(locale)]\n   __attribute__ ((aligned(__alignof__(locale))));\n   fake_locale c_locale;\n-  asm (\".symver _ZN9__gnu_cxx8c_localeE,_ZSt8c_locale@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8c_localeE, _ZSt8c_locale, GLIBCPP_3.2)\n \n   typedef char fake_locale_Impl[sizeof(locale::_Impl)]\n   __attribute__ ((aligned(__alignof__(locale::_Impl))));\n   fake_locale_Impl c_locale_impl;\n-  asm (\".symver _ZN9__gnu_cxx13c_locale_implE,\\\n-        _ZSt13c_locale_impl@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13c_locale_implE, _ZSt13c_locale_impl, GLIBCPP_3.2)\n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n-  asm (\".symver _ZN9__gnu_cxx9facet_vecE,_ZSt9facet_vec@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9facet_vecE, _ZSt9facet_vec, GLIBCPP_3.2)\n \n   typedef char fake_facet_name[sizeof(char*)]\n   __attribute__ ((aligned(__alignof__(char*))));\n@@ -78,161 +77,161 @@ namespace __gnu_cxx\n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n   fake_ctype_c ctype_c;\n-  asm (\".symver _ZN9__gnu_cxx7ctype_cE,_ZSt7ctype_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx7ctype_cE, _ZSt7ctype_c, GLIBCPP_3.2)\n \n   typedef char fake_collate_c[sizeof(std::collate<char>)]\n   __attribute__ ((aligned(__alignof__(std::collate<char>))));\n   fake_collate_c collate_c;\n-  asm (\".symver _ZN9__gnu_cxx9collate_cE,_ZSt9collate_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9collate_cE, _ZSt9collate_c, GLIBCPP_3.2)\n \n   typedef char fake_numpunct_c[sizeof(numpunct<char>)]\n   __attribute__ ((aligned(__alignof__(numpunct<char>))));\n   fake_numpunct_c numpunct_c;\n-  asm (\".symver _ZN9__gnu_cxx10numpunct_cE,_ZSt10numpunct_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10numpunct_cE, _ZSt10numpunct_c, GLIBCPP_3.2)\n \n   typedef char fake_num_get_c[sizeof(num_get<char>)]\n   __attribute__ ((aligned(__alignof__(num_get<char>))));\n   fake_num_get_c num_get_c;\n-  asm (\".symver _ZN9__gnu_cxx9num_get_cE,_ZSt9num_get_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_get_cE, _ZSt9num_get_c, GLIBCPP_3.2)\n \n   typedef char fake_num_put_c[sizeof(num_put<char>)]\n   __attribute__ ((aligned(__alignof__(num_put<char>))));\n   fake_num_put_c num_put_c;\n-  asm (\".symver _ZN9__gnu_cxx9num_put_cE,_ZSt9num_put_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_put_cE, _ZSt9num_put_c, GLIBCPP_3.2)\n \n   typedef char fake_codecvt_c[sizeof(codecvt<char, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<char, char, mbstate_t>))));\n   fake_codecvt_c codecvt_c;\n-  asm (\".symver _ZN9__gnu_cxx9codecvt_cE,_ZSt9codecvt_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9codecvt_cE, _ZSt9codecvt_c, GLIBCPP_3.2)\n \n   typedef char fake_moneypunct_c[sizeof(moneypunct<char, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<char, true>))));\n   fake_moneypunct_c moneypunct_tc;\n   fake_moneypunct_c moneypunct_fc;\n-  asm (\".symver _ZN9__gnu_cxx13moneypunct_tcE,\\\n-        _ZSt13moneypunct_tc@@GLIBCPP_3.2\");\n-  asm (\".symver _ZN9__gnu_cxx13moneypunct_fcE,\\\n-        _ZSt13moneypunct_fc@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_tcE,\\\n+        _ZSt13moneypunct_tc, GLIBCPP_3.2)\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_fcE,\\\n+        _ZSt13moneypunct_fc, GLIBCPP_3.2)\n \n   typedef char fake_money_get_c[sizeof(money_get<char>)]\n   __attribute__ ((aligned(__alignof__(money_get<char>))));\n   fake_money_get_c money_get_c;\n-  asm (\".symver _ZN9__gnu_cxx11money_get_cE,_ZSt11money_get_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_get_cE, _ZSt11money_get_c, GLIBCPP_3.2)\n   \n   typedef char fake_money_put_c[sizeof(money_put<char>)]\n   __attribute__ ((aligned(__alignof__(money_put<char>))));\n   fake_money_put_c money_put_c;\n-  asm (\".symver _ZN9__gnu_cxx11money_put_cE,_ZSt11money_put_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_put_cE, _ZSt11money_put_c, GLIBCPP_3.2)\n \n   typedef char fake_timepunct_c[sizeof(__timepunct<char>)]\n   __attribute__ ((aligned(__alignof__(__timepunct<char>))));\n   fake_timepunct_c timepunct_c;\n-  asm (\".symver _ZN9__gnu_cxx11timepunct_cE,_ZSt11timepunct_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11timepunct_cE, _ZSt11timepunct_c, GLIBCPP_3.2)\n \n   typedef char fake_time_get_c[sizeof(time_get<char>)]\n   __attribute__ ((aligned(__alignof__(time_get<char>))));\n   fake_time_get_c time_get_c;\n-  asm (\".symver _ZN9__gnu_cxx10time_get_cE,_ZSt10time_get_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_get_cE, _ZSt10time_get_c, GLIBCPP_3.2)\n \n   typedef char fake_time_put_c[sizeof(time_put<char>)]\n   __attribute__ ((aligned(__alignof__(time_put<char>))));\n   fake_time_put_c time_put_c;\n-  asm (\".symver _ZN9__gnu_cxx10time_put_cE,_ZSt10time_put_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_put_cE, _ZSt10time_put_c, GLIBCPP_3.2)\n \n   typedef char fake_messages_c[sizeof(messages<char>)]\n   __attribute__ ((aligned(__alignof__(messages<char>))));\n   fake_messages_c messages_c;\n-  asm (\".symver _ZN9__gnu_cxx10messages_cE,_ZSt10messages_c@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10messages_cE, _ZSt10messages_c, GLIBCPP_3.2)\n \n #ifdef  _GLIBCPP_USE_WCHAR_T\n   typedef char fake_wtype_w[sizeof(std::ctype<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<wchar_t>))));\n   fake_wtype_w ctype_w;\n-  asm (\".symver _ZN9__gnu_cxx7ctype_wE,_ZSt7ctype_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx7ctype_wE, _ZSt7ctype_w, GLIBCPP_3.2)\n \n   typedef char fake_wollate_w[sizeof(std::collate<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::collate<wchar_t>))));\n   fake_wollate_w collate_w;\n-  asm (\".symver _ZN9__gnu_cxx9collate_wE,_ZSt9collate_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9collate_wE, _ZSt9collate_w, GLIBCPP_3.2)\n \n   typedef char fake_numpunct_w[sizeof(numpunct<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(numpunct<wchar_t>))));\n   fake_numpunct_w numpunct_w;\n-  asm (\".symver _ZN9__gnu_cxx10numpunct_wE,_ZSt10numpunct_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10numpunct_wE, _ZSt10numpunct_w, GLIBCPP_3.2)\n \n   typedef char fake_num_get_w[sizeof(num_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(num_get<wchar_t>))));\n   fake_num_get_w num_get_w;\n-  asm (\".symver _ZN9__gnu_cxx9num_get_wE,_ZSt9num_get_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_get_wE, _ZSt9num_get_w, GLIBCPP_3.2)\n \n   typedef char fake_num_put_w[sizeof(num_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(num_put<wchar_t>))));\n   fake_num_put_w num_put_w;\n-  asm (\".symver _ZN9__gnu_cxx9num_put_wE,_ZSt9num_put_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_put_wE, _ZSt9num_put_w, GLIBCPP_3.2)\n \n   typedef char fake_wodecvt_w[sizeof(codecvt<wchar_t, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<wchar_t, char, mbstate_t>))));\n   fake_wodecvt_w codecvt_w;\n-  asm (\".symver _ZN9__gnu_cxx9codecvt_wE,_ZSt9codecvt_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9codecvt_wE, _ZSt9codecvt_w, GLIBCPP_3.2)\n \n   typedef char fake_moneypunct_w[sizeof(moneypunct<wchar_t, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<wchar_t, true>))));\n   fake_moneypunct_w moneypunct_tw;\n   fake_moneypunct_w moneypunct_fw;\n-  asm (\".symver _ZN9__gnu_cxx13moneypunct_twE,\\\n-        _ZSt13moneypunct_tw@@GLIBCPP_3.2\");\n-  asm (\".symver _ZN9__gnu_cxx13moneypunct_fwE,\\\n-        _ZSt13moneypunct_fw@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_twE,\\\n+        _ZSt13moneypunct_tw, GLIBCPP_3.2)\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_fwE,\\\n+        _ZSt13moneypunct_fw, GLIBCPP_3.2)\n \n   typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n   fake_money_get_w money_get_w;\n-  asm (\".symver _ZN9__gnu_cxx11money_get_wE,_ZSt11money_get_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_get_wE, _ZSt11money_get_w, GLIBCPP_3.2)\n   \n   typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n   fake_money_put_w money_put_w;\n-  asm (\".symver _ZN9__gnu_cxx11money_put_wE,_ZSt11money_put_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_put_wE, _ZSt11money_put_w, GLIBCPP_3.2)\n \n   typedef char fake_timepunct_w[sizeof(__timepunct<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(__timepunct<wchar_t>))));\n   fake_timepunct_w timepunct_w;\n-  asm (\".symver _ZN9__gnu_cxx11timepunct_wE,_ZSt11timepunct_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11timepunct_wE, _ZSt11timepunct_w, GLIBCPP_3.2)\n \n   typedef char fake_time_get_w[sizeof(time_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(time_get<wchar_t>))));\n   fake_time_get_w time_get_w;\n-  asm (\".symver _ZN9__gnu_cxx10time_get_wE,_ZSt10time_get_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_get_wE, _ZSt10time_get_w, GLIBCPP_3.2)\n \n   typedef char fake_time_put_w[sizeof(time_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(time_put<wchar_t>))));\n   fake_time_put_w time_put_w;\n-  asm (\".symver _ZN9__gnu_cxx10time_put_wE,_ZSt10time_put_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_put_wE, _ZSt10time_put_w, GLIBCPP_3.2)\n \n   typedef char fake_messages_w[sizeof(messages<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(messages<wchar_t>))));\n   fake_messages_w messages_w;\n-  asm (\".symver _ZN9__gnu_cxx10messages_wE,_ZSt10messages_w@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10messages_wE, _ZSt10messages_w, GLIBCPP_3.2)\n #endif\n \n   typedef char fake_filebuf[sizeof(stdio_filebuf<char>)]\n   __attribute__ ((aligned(__alignof__(stdio_filebuf<char>))));\n   fake_filebuf buf_cout;\n   fake_filebuf buf_cin;\n   fake_filebuf buf_cerr;\n-  asm (\".symver _ZN9__gnu_cxx8buf_coutE,_ZSt8buf_cout@@GLIBCPP_3.2\");\n-  asm (\".symver _ZN9__gnu_cxx7buf_cinE,_ZSt7buf_cin@@GLIBCPP_3.2\");\n-  asm (\".symver _ZN9__gnu_cxx8buf_cerrE,_ZSt8buf_cerr@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8buf_coutE, _ZSt8buf_cout, GLIBCPP_3.2)\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx7buf_cinE, _ZSt7buf_cin, GLIBCPP_3.2)\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8buf_cerrE, _ZSt8buf_cerr, GLIBCPP_3.2)\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   typedef char fake_wfilebuf[sizeof(stdio_filebuf<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(stdio_filebuf<wchar_t>))));\n   fake_wfilebuf buf_wcout;\n   fake_wfilebuf buf_wcin;\n   fake_wfilebuf buf_wcerr;\n-  asm (\".symver _ZN9__gnu_cxx9buf_wcoutE,_ZSt9buf_wcout@@GLIBCPP_3.2\");\n-  asm (\".symver _ZN9__gnu_cxx8buf_wcinE,_ZSt8buf_wcin@@GLIBCPP_3.2\");\n-  asm (\".symver _ZN9__gnu_cxx9buf_wcerrE,_ZSt9buf_wcerr@@GLIBCPP_3.2\");\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9buf_wcoutE, _ZSt9buf_wcout, GLIBCPP_3.2)\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8buf_wcinE, _ZSt8buf_wcin, GLIBCPP_3.2)\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9buf_wcerrE, _ZSt9buf_wcerr, GLIBCPP_3.2)\n #endif\n \n   // Globals for once-only runtime initialization of mutex objects.  This"}, {"sha": "127197d0138f4d3494fc66162e6230735499bda4", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -55,15 +55,13 @@ namespace std\n   const locale::category \tlocale::messages;\n   const locale::category \tlocale::all;\n \n-  // In the future, GLIBCXX_ABI > 5 should remove all asm directives\n-  // in this file, and remove exports of any static data members of locale.\n+  // In the future, GLIBCXX_ABI > 5 should remove all uses of\n+  // _GLIBCPP_ASM_SYMVER in this file, and remove exports of any\n+  // static data members of locale.\n   locale::_Impl* \t\tlocale::_S_classic;\n-\n   locale::_Impl* \t\tlocale::_S_global; \n-\n   const size_t \t\t\tlocale::_S_categories_size;\n-  asm (\".symver _ZNSt6locale18_S_categories_sizeE,_ZNSt6locale17_S_num_categoriesE@@GLIBCPP_3.2\");\n-\n+  _GLIBCPP_ASM_SYMVER(_ZNSt6locale18_S_categories_sizeE, _ZNSt6locale17_S_num_categoriesE, GLIBCPP_3.2)\n   const size_t \t\t\tlocale::_S_extra_categories_size;\n \n   // Definitions for static const data members of locale::id"}, {"sha": "534af61a1e235b82ab19b7d80914ff307a7fb938", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c7cbd930967c9960632245db5f3d6b70be7b79/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=45c7cbd930967c9960632245db5f3d6b70be7b79", "patch": "@@ -362,26 +362,39 @@ void test04()\n   if (!setenv(\"LC_COLLATE\", \"de_DE\", 1))\n     {\n       std::locale loc(\"\");\n+\n+#if _GLIBCPP_NUM_CATEGORIES\n       VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_COLLATE=de_DE;\"\n \t      \"LC_TIME=C;LC_MONETARY=C;LC_MESSAGES=C;LC_PAPER=C;\"\n \t      \"LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=C;\"\n \t      \"LC_IDENTIFICATION=C\" );\n+#else\n+      VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_COLLATE=de_DE;\"\n+\t      \"LC_TIME=C;LC_MONETARY=C;LC_MESSAGES=C\" );\n+#endif\n     }\n \n   // Changing the LANG default while LC_COLLATE is set.\n   if (!setenv(\"LANG\", \"fr_FR\", 1))\n     {\n       std::locale loc(\"\");\n+#if _GLIBCPP_NUM_CATEGORIES\n       VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n \t      \"LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;\"\n \t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n \t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n \t      \"LC_IDENTIFICATION=fr_FR\" );\n+#else\n+      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n+\t      \"LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;\"\n+\t      \"LC_MESSAGES=fr_FR\" );\n+#endif\n     }\n   \n   // Changing another (C only) category.\n   const char* oldLC_IDENTIFICATION =\n     getenv(\"LC_IDENTIFICATION\") ? strdup(getenv(\"LC_IDENTIFICATION\")) : \"\";\n+#if _GLIBCPP_NUM_CATEGORIES\n   if (!setenv(\"LC_IDENTIFICATION\", \"it_IT\", 1))\n     {\n       std::locale loc(\"\");\n@@ -391,6 +404,7 @@ void test04()\n \t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n \t      \"LC_IDENTIFICATION=it_IT\" );\n     }\n+#endif\n \n   // Restore the environment.\n   setenv(\"LC_ALL\", oldLC_ALL ? oldLC_ALL : \"\", 1);"}]}