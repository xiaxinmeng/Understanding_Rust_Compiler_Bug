{"sha": "7b7395409c7aaef493337479c7fd586e52aea3d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3Mzk1NDA5YzdhYWVmNDkzMzM3NDc5YzdmZDU4NmU1MmFlYTNkMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-04T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-04T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "cda1f266de1c574877e09861e05897c899fcbb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cda1f266de1c574877e09861e05897c899fcbb3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b7395409c7aaef493337479c7fd586e52aea3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7395409c7aaef493337479c7fd586e52aea3d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7395409c7aaef493337479c7fd586e52aea3d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7395409c7aaef493337479c7fd586e52aea3d1/comments", "author": null, "committer": null, "parents": [{"sha": "2484f7a4b0f52e6ed04754be336f1fa6fde47f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2484f7a4b0f52e6ed04754be336f1fa6fde47f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2484f7a4b0f52e6ed04754be336f1fa6fde47f6b"}], "stats": {"total": 278, "additions": 277, "deletions": 1}, "files": [{"sha": "393eba20fdff71dbd3a234828643ff0839fd0544", "filename": "gcc/ChangeLog", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,171 @@\n+2021-09-03  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/102107\n+\t* config/rs6000/rs6000-logue.c (rs6000_emit_prologue): On ELFv2 use r11\n+\tinstead of r12 for CR save, in all cases.\n+\n+2021-09-03  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.cc (register_vector_type):\n+\tHandle error_mark_node as the type of the type_decl.\n+\n+2021-09-03  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (struct aarch64_simd_type_info):\n+\tMark with GTY.\n+\t(aarch64_simd_types): Likewise.\n+\t(aarch64_simd_intOI_type_node): Likewise.\n+\t(aarch64_simd_intCI_type_node): Likewise.\n+\t(aarch64_simd_intXI_type_node): Likewise.\n+\t* config/aarch64/aarch64.h (aarch64_fp16_type_node): Likewise.\n+\t(aarch64_fp16_ptr_type_node): Likewise.\n+\t(aarch64_bf16_type_node): Likewise.\n+\t(aarch64_bf16_ptr_type_node): Likewise.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_minus::op1_op2_relation_effect): Abstract\n+\tout to...\n+\t(minus_op1_op2_relation_effect): ...here.\n+\t(class operator_pointer_diff): New.\n+\t(operator_pointer_diff::op1_op2_relation_effect): Call\n+\tminus_op1_op2_relation_effect.\n+\t(integral_table::integral_table): Add entry for POINTER_DIFF_EXPR.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::thread_through_all_blocks):\n+\tAdd may_peel_loop_headers.\n+\t(back_threader_registry::thread_through_all_blocks): Same.\n+\t(try_thread_blocks): Pass may_peel_loop_headers argument.\n+\t(pass_early_thread_jumps::execute): Same.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadedge.c (has_phis_p): New.\n+\t(forwarder_block_p): New.\n+\t(potentially_threadable_block): Call forwarder_block_p.\n+\t(jump_threader::thread_around_empty_blocks): Call has_phis_p.\n+\t(jump_threader::thread_through_normal_block): Call\n+\tforwarder_block_p.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::dump): New.\n+\t(back_threader::debug): New.\n+\t(back_threader_profitability::profitable_path_p): Dump blocks\n+\teven if we are bailing early.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (cancel_thread): New.\n+\t(jump_thread_path_registry::thread_block_1): Use cancel_thread.\n+\t(jump_thread_path_registry::mark_threaded_blocks): Same.\n+\t(jump_thread_path_registry::register_jump_thread): Same.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadedge.c (jt_state::push): Only call methods for\n+\twhich objects are available.\n+\t(jt_state::pop): Same.\n+\t(jt_state::register_equiv): Same.\n+\t(jt_state::register_equivs_on_edge): Same.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadedge.c (jump_threader::thread_across_edge):\n+\tMove pop until after a thread is registered.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (debug): New.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-trace.cc (push_dump_file::push_dump_file): New.\n+\t(push_dump_file::~push_dump_file): New.\n+\t(dump_ranger): Change dump_file temporarily while dumping\n+\tranger.\n+\t* gimple-range-trace.h (class push_dump_file): New.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-trace.cc (debug_seed_ranger): Remove static.\n+\t(dump_ranger): Dump function name.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::range_defined_in_block):\n+\tAdjust for non-null.\n+\t(path_range_query::adjust_for_non_null_uses): New.\n+\t(path_range_query::precompute_ranges): Call\n+\tadjust_for_non_null_uses.\n+\t* gimple-range-path.h: Add m_non_null and\n+\tadjust_for_non_null_uses.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::dump): Dump path\n+\tlength.\n+\t(path_range_query::precompute_ranges): Dump entire path.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-relation.cc (relation_oracle::debug): New.\n+\t* value-relation.h (relation_oracle::debug): New.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-loop-ch.c: Remove unnecessary include file.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::postfold_gcond_edges):\n+\tSkip statements with no defining BB.\n+\t* gimple-range-path.cc (path_range_query::range_defined_in_block):\n+\tDo not get confused by statements with no defining BB.\n+\n+2021-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (adjust_imagpart_expr): Move from\n+\tgimple_range_adjustment.  Add support for constants.\n+\t(adjust_realpart_expr): New.\n+\t(gimple_range_adjustment): Move IMAGPART_EXPR code to\n+\tadjust_imagpart_expr.\n+\t* range-op.cc (integral_table::integral_table): Add entry for\n+\tREALPART_CST.\n+\n+2021-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_atomic_pipeline): Use\n+\tIFN_ATOMIC_COMPARE_EXCHANGE instead of\n+\tBUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_? so that memory order\n+\tcan be provided.\n+\n+2021-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102024\n+\t* tree.h (DECL_FIELD_ABI_IGNORED): Changed into rvalue only macro\n+\tthat is false if DECL_BIT_FIELD.\n+\t(SET_DECL_FIELD_ABI_IGNORED, DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD,\n+\tSET_DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD): Define.\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): For\n+\tDECL_BIT_FIELD stream DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD instead\n+\tof DECL_FIELD_ABI_IGNORED.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Use\n+\tSET_DECL_FIELD_ABI_IGNORED instead of writing to\n+\tDECL_FIELD_ABI_IGNORED and for DECL_BIT_FIELD use\n+\tSET_DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD instead.\n+\t* lto-streamer-out.c (hash_tree): For DECL_BIT_FIELD hash\n+\tDECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD instead of DECL_FIELD_ABI_IGNORED.\n+\n+2021-09-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102166\n+\t* config/i386/amxbf16intrin.h : Remove macro check for __AMX_BF16__.\n+\t* config/i386/amxint8intrin.h : Remove macro check for __AMX_INT8__.\n+\t* config/i386/amxtileintrin.h : Remove macro check for __AMX_TILE__.\n+\n 2021-09-02  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/17506"}, {"sha": "fd5abf169bae34085ef344c987f6de89c6e9356f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1 +1 @@\n-20210903\n+20210904"}, {"sha": "abc4c76bf0b2f930891ca2b9cd1dfe9450e131c9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,8 @@\n+2021-09-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ads): Generate pragmas to disable style checks\n+\tand -gnatwu warning for the package specification.\n+\n 2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* c-attribs.c (handle_unavailable_attribute): New."}, {"sha": "6d8a6d32794cbd3f9fcecbc37dbfb50016b686e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,59 @@\n+2021-09-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (register_local_var_uses): Do not mangle\n+\tframe entries for the outermost scope.  Record the outer\n+\tscope as nesting depth 0.\n+\n+2021-09-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (coro_build_artificial_var): New.\n+\t(build_actor_fn): Use var builder, rename vars to use\n+\timplementation namespace.\n+\t(coro_rewrite_function_body): Likewise.\n+\t(morph_fn_to_coro): Likewise.\n+\n+2021-09-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (transform_local_var_uses): Record\n+\tframe offset expressions as DECL_VALUE_EXPRs instead of\n+\trewriting them.\n+\n+2021-09-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101904\n+\t* call.c (build_this_conversion): New function, split out from\n+\tadd_function_candidate.\n+\t(add_function_candidate): New parameter shortcut_bad_convs.\n+\tDocument it.  Use build_this_conversion.  Stop at the first bad\n+\targument conversion when shortcut_bad_convs is true.\n+\t(add_template_candidate_real): New parameter shortcut_bad_convs.\n+\tUse build_this_conversion to check the 'this' conversion before\n+\tattempting deduction.  When the rejection reason code is\n+\trr_bad_arg_conversion, pass -1 instead of 0 as the viable\n+\tparameter to add_candidate.  Pass 'convs' to add_candidate.\n+\t(add_template_candidate): New parameter shortcut_bad_convs.\n+\t(add_template_conv_candidate): Pass false as shortcut_bad_convs\n+\tto add_template_candidate_real.\n+\t(add_candidates): Prefer to shortcut bad conversions during\n+\toverload resolution under the assumption that we'll eventually\n+\tsee a strictly viable candidate.  If this assumption turns out\n+\tto be false, re-process the non-strictly viable candidates\n+\twithout shortcutting those bad conversions.\n+\n+2021-09-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (limit_bad_template_recursion): Suppress -Wunused for decls\n+\twe decide not to instantiate.\n+\n+2021-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102024\n+\t* class.c (build_base_field): Use SET_DECL_FIELD_ABI_IGNORED\n+\tinstead of writing to DECL_FIELD_ABI_IGNORED.\n+\t(layout_class_type): Likewise.  In the place where zero-width\n+\tbitfields used to be removed, use\n+\tSET_DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD on those fields instead.\n+\n 2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* call.c (build_over_call): Handle unavailable state in addition to"}, {"sha": "6306971b8b11001bbbd09a1af132bab9cbcd23af", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,9 @@\n+2021-09-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* decl.c (gfc_verify_c_interop_param): Reject pointer with\n+\tCONTIGUOUS attributes as dummy arg. Reject character len > 1\n+\twhen passed as byte stream.\n+\n 2021-09-01  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/56985"}, {"sha": "0a2d2d1c414e36b9e0a5a3a2ccd6eef3f4eaa5e5", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,9 @@\n+2021-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102024\n+\t* lto-common.c (compare_tree_sccs_1): Also compare\n+\tDECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD values.\n+\n 2021-09-02  liuhongt  <hongtao.liu@intel.com>\n \n \t* lto-lang.c (lto_type_for_mode): Return float16_type_node"}, {"sha": "0a7cd9f2a7f25d6c27fa7dee08561735bb9a3c67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,24 @@\n+2021-09-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101904\n+\t* g++.dg/template/conv17.C: New test.\n+\n+2021-09-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/bind_c_char_6.f90: Update dg-error.\n+\t* gfortran.dg/bind_c_char_7.f90: Likewise.\n+\t* gfortran.dg/bind_c_char_8.f90: Likewise.\n+\t* gfortran.dg/iso_c_binding_char_1.f90: Likewise.\n+\t* gfortran.dg/pr32599.f03: Likewise.\n+\t* gfortran.dg/bind_c_char_9.f90: Comment testcase bits which are\n+\timplementable but not valid F2018.\n+\t* gfortran.dg/bind_c_contiguous.f90: New test.\n+\n+2021-09-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102166\n+\t* g++.target/i386/pr102166.C: New test.\n+\n 2021-09-02  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n "}, {"sha": "29925c4c8c5a115af8712a5ac5ae06fd724ecc3e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,11 @@\n+2021-09-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/i386/sfp-machine.h (alias_HFtype, alias_SFtype\n+\talias_DFtype, alias_TFtype): New.\n+\t(ALIAS_SELECTOR): New.\n+\t(strong_alias): Use __typeof and a _Generic selector to\n+\tprovide the type to the synthesized function.\n+\n 2021-09-02  liuhongt  <hongtao.liu@intel.com>\n \n \t* config/i386/32/sfp-machine.h (_FP_NANFRAC_H): New macro."}, {"sha": "88eb40111b62930dbf4262df68c5242570a6f718", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7395409c7aaef493337479c7fd586e52aea3d1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7395409c7aaef493337479c7fd586e52aea3d1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7b7395409c7aaef493337479c7fd586e52aea3d1", "patch": "@@ -1,3 +1,9 @@\n+2021-09-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.c-c++-common/error-1.c: Use \\r\\n not \\n\\r in\n+\tdg-output.\n+\t* testsuite/libgomp.fortran/error-1.f90: Likewise.\n+\n 2021-08-23  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}]}