{"sha": "70cdb21e579191fe9f0f1d45e328908e59c0179e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjZGIyMWU1NzkxOTFmZTlmMGYxZDQ1ZTMyODkwOGU1OWMwMTc5ZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-08-28T10:18:23Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-08-28T10:18:23Z"}, "message": "expr.c (expand_assignment): Handle misaligned DECLs.\n\n2019-09-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\t    Richard Biener  <rguenther@suse.de>\n\n\t* expr.c (expand_assignment): Handle misaligned DECLs.\n\t(expand_expr_real_1): Handle FUNCTION_DECL as unaligned.\n\t* function.c (assign_parm_adjust_stack_rtl): Check movmisalign optab\n\ttoo.\n\t(assign_parm_setup_stack): Allocate properly aligned stack slots.\n\t* varasm.c (build_constant_desc): Align constants of misaligned types.\n\t* config/arm/predicates.md (aligned_operand): New predicate.\n\t* config/arm/arm.md (movdi, movsi, movhi, movhf, movsf, movdf): Use\n\taligned_operand to check restrictions on memory addresses.\n\t* config/arm/neon.md (movti, mov<VSTRUCT>, mov<VH>): Likewise.\n\t* config/arm/vec-common.md (mov<VALL>): Likewise.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r274986", "tree": {"sha": "87bd6c87d5f7ac587e7732bc7828111ec593e9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87bd6c87d5f7ac587e7732bc7828111ec593e9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70cdb21e579191fe9f0f1d45e328908e59c0179e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70cdb21e579191fe9f0f1d45e328908e59c0179e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70cdb21e579191fe9f0f1d45e328908e59c0179e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70cdb21e579191fe9f0f1d45e328908e59c0179e/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e62506f36294bc26b9a64bcfd2464464ef784b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62506f36294bc26b9a64bcfd2464464ef784b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62506f36294bc26b9a64bcfd2464464ef784b72"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "b9b9da98491e1c148e140b1053a2adf91417a448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -1,3 +1,18 @@\n+2019-09-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* expr.c (expand_assignment): Handle misaligned DECLs.\n+\t(expand_expr_real_1): Handle FUNCTION_DECL as unaligned.\n+\t* function.c (assign_parm_adjust_stack_rtl): Check movmisalign optab\n+\ttoo.\n+\t(assign_parm_setup_stack): Allocate properly aligned stack slots.\n+\t* varasm.c (build_constant_desc): Align constants of misaligned types.\n+\t* config/arm/predicates.md (aligned_operand): New predicate.\n+\t* config/arm/arm.md (movdi, movsi, movhi, movhf, movsf, movdf): Use\n+\taligned_operand to check restrictions on memory addresses.\n+\t* config/arm/neon.md (movti, mov<VSTRUCT>, mov<VH>): Likewise.\n+\t* config/arm/vec-common.md (mov<VALL>): Likewise.\n+\n 2019-08-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/91530"}, {"sha": "0be7a018eedeea048523f622f99bdd765b8d86ec", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -5231,6 +5231,8 @@\n \t(match_operand:DI 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n+  gcc_checking_assert (aligned_operand (operands[0], DImode));\n+  gcc_checking_assert (aligned_operand (operands[1], DImode));\n   if (can_create_pseudo_p ())\n     {\n       if (!REG_P (operands[0]))\n@@ -5407,6 +5409,8 @@\n   {\n   rtx base, offset, tmp;\n \n+  gcc_checking_assert (aligned_operand (operands[0], SImode));\n+  gcc_checking_assert (aligned_operand (operands[1], SImode));\n   if (TARGET_32BIT || TARGET_HAVE_MOVT)\n     {\n       /* Everything except mem = const or mem = mem can be done easily.  */\n@@ -5896,6 +5900,8 @@\n \t(match_operand:HI 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n+  gcc_checking_assert (aligned_operand (operands[0], HImode));\n+  gcc_checking_assert (aligned_operand (operands[1], HImode));\n   if (TARGET_ARM)\n     {\n       if (can_create_pseudo_p ())\n@@ -6305,6 +6311,8 @@\n \t(match_operand:HF 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n+  gcc_checking_assert (aligned_operand (operands[0], HFmode));\n+  gcc_checking_assert (aligned_operand (operands[1], HFmode));\n   if (TARGET_32BIT)\n     {\n       if (MEM_P (operands[0]))\n@@ -6369,6 +6377,8 @@\n \t(match_operand:SF 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n+  gcc_checking_assert (aligned_operand (operands[0], SFmode));\n+  gcc_checking_assert (aligned_operand (operands[1], SFmode));\n   if (TARGET_32BIT)\n     {\n       if (MEM_P (operands[0]))\n@@ -6464,6 +6474,8 @@\n \t(match_operand:DF 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n+  gcc_checking_assert (aligned_operand (operands[0], DFmode));\n+  gcc_checking_assert (aligned_operand (operands[1], DFmode));\n   if (TARGET_32BIT)\n     {\n       if (MEM_P (operands[0]))"}, {"sha": "a5aa8d68e62159396f879d54128a364a2261e937", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -127,6 +127,8 @@\n \t(match_operand:TI 1 \"general_operand\"))]\n   \"TARGET_NEON\"\n {\n+  gcc_checking_assert (aligned_operand (operands[0], TImode));\n+  gcc_checking_assert (aligned_operand (operands[1], TImode));\n   if (can_create_pseudo_p ())\n     {\n       if (!REG_P (operands[0]))\n@@ -139,6 +141,8 @@\n \t(match_operand:VSTRUCT 1 \"general_operand\"))]\n   \"TARGET_NEON\"\n {\n+  gcc_checking_assert (aligned_operand (operands[0], <MODE>mode));\n+  gcc_checking_assert (aligned_operand (operands[1], <MODE>mode));\n   if (can_create_pseudo_p ())\n     {\n       if (!REG_P (operands[0]))\n@@ -151,6 +155,8 @@\n \t(match_operand:VH 1 \"s_register_operand\"))]\n   \"TARGET_NEON\"\n {\n+  gcc_checking_assert (aligned_operand (operands[0], <MODE>mode));\n+  gcc_checking_assert (aligned_operand (operands[1], <MODE>mode));\n   if (can_create_pseudo_p ())\n     {\n       if (!REG_P (operands[0]))"}, {"sha": "983faac8a72ef75e80cc34031c07c6435902c36f", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -697,3 +697,7 @@\n   (ior (and (match_code \"symbol_ref\")\n \t    (match_test \"!arm_is_long_call_p (SYMBOL_REF_DECL (op))\"))\n        (match_operand 0 \"s_register_operand\")))\n+\n+(define_special_predicate \"aligned_operand\"\n+  (ior (not (match_code \"mem\"))\n+       (match_test \"MEM_ALIGN (op) >= GET_MODE_ALIGNMENT (mode)\")))"}, {"sha": "33ff5627284d7cc898074b562179938982ecc420", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -26,6 +26,8 @@\n   \"TARGET_NEON\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n+  gcc_checking_assert (aligned_operand (operands[0], <MODE>mode));\n+  gcc_checking_assert (aligned_operand (operands[1], <MODE>mode));\n   if (can_create_pseudo_p ())\n     {\n       if (!REG_P (operands[0]))"}, {"sha": "022b571fb79a905d4992d23b9a107c0f47c4c806", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -5001,9 +5001,10 @@ expand_assignment (tree to, tree from, bool nontemporal)\n   /* Handle misaligned stores.  */\n   mode = TYPE_MODE (TREE_TYPE (to));\n   if ((TREE_CODE (to) == MEM_REF\n-       || TREE_CODE (to) == TARGET_MEM_REF)\n+       || TREE_CODE (to) == TARGET_MEM_REF\n+       || DECL_P (to))\n       && mode != BLKmode\n-      && !mem_ref_refers_to_non_mem_p (to)\n+      && (DECL_P (to) || !mem_ref_refers_to_non_mem_p (to))\n       && ((align = get_object_alignment (to))\n \t  < GET_MODE_ALIGNMENT (mode))\n       && (((icode = optab_handler (movmisalign_optab, mode))\n@@ -10795,6 +10796,14 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t    MEM_VOLATILE_P (op0) = 1;\n \t  }\n \n+\tif (MEM_P (op0) && TREE_CODE (tem) == FUNCTION_DECL)\n+\t  {\n+\t    if (op0 == orig_op0)\n+\t      op0 = copy_rtx (op0);\n+\n+\t    set_mem_align (op0, BITS_PER_UNIT);\n+\t  }\n+\n \t/* In cases where an aligned union has an unaligned object\n \t   as a field, we might be extracting a BLKmode value from\n \t   an integer-mode (e.g., SImode) object.  Handle this case"}, {"sha": "751d2de3bfd8ed81b6a1679338e5fe670c37d577", "filename": "gcc/function.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -2807,8 +2807,10 @@ assign_parm_adjust_stack_rtl (struct assign_parm_data_one *data)\n      stack slot, if we need one.  */\n   if (stack_parm\n       && ((GET_MODE_ALIGNMENT (data->nominal_mode) > MEM_ALIGN (stack_parm)\n-\t   && targetm.slow_unaligned_access (data->nominal_mode,\n-\t\t\t\t\t     MEM_ALIGN (stack_parm)))\n+\t   && ((optab_handler (movmisalign_optab, data->nominal_mode)\n+\t\t!= CODE_FOR_nothing)\n+\t       || targetm.slow_unaligned_access (data->nominal_mode,\n+\t\t\t\t\t\t MEM_ALIGN (stack_parm))))\n \t  || (data->nominal_type\n \t      && TYPE_ALIGN (data->nominal_type) > MEM_ALIGN (stack_parm)\n \t      && MEM_ALIGN (stack_parm) < PREFERRED_STACK_BOUNDARY)))\n@@ -3461,11 +3463,20 @@ assign_parm_setup_stack (struct assign_parm_data_all *all, tree parm,\n \t  int align = STACK_SLOT_ALIGNMENT (data->arg.type,\n \t\t\t\t\t    GET_MODE (data->entry_parm),\n \t\t\t\t\t    TYPE_ALIGN (data->arg.type));\n+\t  if (align < (int)GET_MODE_ALIGNMENT (GET_MODE (data->entry_parm))\n+\t      && ((optab_handler (movmisalign_optab,\n+\t\t\t\t  GET_MODE (data->entry_parm))\n+\t\t   != CODE_FOR_nothing)\n+\t\t  || targetm.slow_unaligned_access (GET_MODE (data->entry_parm),\n+\t\t\t\t\t\t    align)))\n+\t    align = GET_MODE_ALIGNMENT (GET_MODE (data->entry_parm));\n \t  data->stack_parm\n \t    = assign_stack_local (GET_MODE (data->entry_parm),\n \t\t\t\t  GET_MODE_SIZE (GET_MODE (data->entry_parm)),\n \t\t\t\t  align);\n+\t  align = MEM_ALIGN (data->stack_parm);\n \t  set_mem_attributes (data->stack_parm, parm, 1);\n+\t  set_mem_align (data->stack_parm, align);\n \t}\n \n       dest = validize_mem (copy_rtx (data->stack_parm));"}, {"sha": "a7c22523f9faf12c96b917b37b34777ca750cb02", "filename": "gcc/varasm.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cdb21e579191fe9f0f1d45e328908e59c0179e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=70cdb21e579191fe9f0f1d45e328908e59c0179e", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stmt.h\"\n #include \"expr.h\"\n #include \"expmed.h\"\n+#include \"optabs.h\"\n #include \"output.h\"\n #include \"langhooks.h\"\n #include \"debug.h\"\n@@ -3386,7 +3387,15 @@ build_constant_desc (tree exp)\n   if (TREE_CODE (exp) == STRING_CST)\n     SET_DECL_ALIGN (decl, targetm.constant_alignment (exp, DECL_ALIGN (decl)));\n   else\n-    align_variable (decl, 0);\n+    {\n+      align_variable (decl, 0);\n+      if (DECL_ALIGN (decl) < GET_MODE_ALIGNMENT (DECL_MODE (decl))\n+\t  && ((optab_handler (movmisalign_optab, DECL_MODE (decl))\n+\t       != CODE_FOR_nothing)\n+\t      || targetm.slow_unaligned_access (DECL_MODE (decl),\n+\t\t\t\t\t\tDECL_ALIGN (decl))))\n+\tSET_DECL_ALIGN (decl, GET_MODE_ALIGNMENT (DECL_MODE (decl)));\n+    }\n \n   /* Now construct the SYMBOL_REF and the MEM.  */\n   if (use_object_blocks_p ())"}]}