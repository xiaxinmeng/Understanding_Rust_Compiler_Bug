{"sha": "ce43f55e9976929f9ff2388c8971a65afd24e26d", "node_id": "C_kwDOANBUbNoAKGNlNDNmNTVlOTk3NjkyOWY5ZmYyMzg4Yzg5NzFhNjVhZmQyNGUyNmQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-23T14:11:04Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-27T09:52:33Z"}, "message": "parser: Parse `default` impl Functions and Methods\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-item.h (class Method): Add `is_default` field.\n\t(class Function): Likewise.\n\t* parse/rust-parse-impl.h (Parser::parse_item): Add nice error when\n\tparsing `default` outside of an `impl` block\n\t(Parser::parse_trait_impl_item): Allow parsing functions\n\tor methods when seeing `default`.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/parse_invalid_specialization.rs: New test.\n\t* rust/compile/parse_specialization.rs: New test.\n\t* rust/compile/default_not_a_kw.rs: New test.", "tree": {"sha": "6df3152421ed8f15efbffe46b957060dcba575cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6df3152421ed8f15efbffe46b957060dcba575cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce43f55e9976929f9ff2388c8971a65afd24e26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce43f55e9976929f9ff2388c8971a65afd24e26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce43f55e9976929f9ff2388c8971a65afd24e26d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce43f55e9976929f9ff2388c8971a65afd24e26d/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f"}], "stats": {"total": 166, "additions": 80, "deletions": 86}, "files": [{"sha": "065ca1ed58acbb386c24946bfc6eba6695a06d56", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=ce43f55e9976929f9ff2388c8971a65afd24e26d", "patch": "@@ -743,6 +743,7 @@ class Method : public InherentImplItem, public TraitImplItem\n   std::unique_ptr<BlockExpr> function_body;\n   Location locus;\n   NodeId node_id;\n+  bool is_default;\n \n public:\n   // Returns whether the method is in an error state.\n@@ -783,7 +784,8 @@ class Method : public InherentImplItem, public TraitImplItem\n \t  SelfParam self_param, std::vector<FunctionParam> function_params,\n \t  std::unique_ptr<Type> return_type, WhereClause where_clause,\n \t  std::unique_ptr<BlockExpr> function_body, Visibility vis,\n-\t  std::vector<Attribute> outer_attrs, Location locus)\n+\t  std::vector<Attribute> outer_attrs, Location locus,\n+\t  bool is_default = false)\n     : outer_attrs (std::move (outer_attrs)), vis (std::move (vis)),\n       qualifiers (std::move (qualifiers)),\n       method_name (std::move (method_name)),\n@@ -793,7 +795,8 @@ class Method : public InherentImplItem, public TraitImplItem\n       return_type (std::move (return_type)),\n       where_clause (std::move (where_clause)),\n       function_body (std::move (function_body)), locus (locus),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ()),\n+      is_default (is_default)\n   {}\n \n   // TODO: add constructor with less fields\n@@ -803,7 +806,8 @@ class Method : public InherentImplItem, public TraitImplItem\n     : outer_attrs (other.outer_attrs), vis (other.vis),\n       qualifiers (other.qualifiers), method_name (other.method_name),\n       self_param (other.self_param), function_params (other.function_params),\n-      where_clause (other.where_clause), locus (other.locus)\n+      where_clause (other.where_clause), locus (other.locus),\n+      is_default (other.is_default)\n   {\n     // guard to prevent null dereference (always required)\n     if (other.return_type != nullptr)\n@@ -831,6 +835,7 @@ class Method : public InherentImplItem, public TraitImplItem\n     function_params = other.function_params;\n     where_clause = other.where_clause;\n     locus = other.locus;\n+    is_default = other.is_default;\n \n     // guard to prevent null dereference (always required)\n     if (other.return_type != nullptr)\n@@ -1526,6 +1531,7 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n   WhereClause where_clause;\n   std::unique_ptr<BlockExpr> function_body;\n   Location locus;\n+  bool is_default;\n \n public:\n   std::string as_string () const override;\n@@ -1548,15 +1554,17 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n \t    std::vector<FunctionParam> function_params,\n \t    std::unique_ptr<Type> return_type, WhereClause where_clause,\n \t    std::unique_ptr<BlockExpr> function_body, Visibility vis,\n-\t    std::vector<Attribute> outer_attrs, Location locus)\n+\t    std::vector<Attribute> outer_attrs, Location locus,\n+\t    bool is_default = false)\n     : VisItem (std::move (vis), std::move (outer_attrs)),\n       qualifiers (std::move (qualifiers)),\n       function_name (std::move (function_name)),\n       generic_params (std::move (generic_params)),\n       function_params (std::move (function_params)),\n       return_type (std::move (return_type)),\n       where_clause (std::move (where_clause)),\n-      function_body (std::move (function_body)), locus (locus)\n+      function_body (std::move (function_body)), locus (locus),\n+      is_default (is_default)\n   {}\n \n   // TODO: add constructor with less fields\n@@ -1566,7 +1574,8 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n     : VisItem (other), qualifiers (other.qualifiers),\n       function_name (other.function_name),\n       function_params (other.function_params),\n-      where_clause (other.where_clause), locus (other.locus)\n+      where_clause (other.where_clause), locus (other.locus),\n+      is_default (other.is_default)\n   {\n     // guard to prevent null dereference (always required)\n     if (other.return_type != nullptr)\n@@ -1592,6 +1601,7 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n     // visibility = other.visibility->clone_visibility();\n     // outer_attrs = other.outer_attrs;\n     locus = other.locus;\n+    is_default = other.is_default;\n \n     // guard to prevent null dereference (always required)\n     if (other.return_type != nullptr)"}, {"sha": "7807d750ba2464a8c168848f0019fbad036a2476", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 47, "deletions": 80, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=ce43f55e9976929f9ff2388c8971a65afd24e26d", "patch": "@@ -1086,6 +1086,13 @@ Parser<ManagedTokenSource>::parse_item (bool called_from_statement)\n \t  return parse_vis_item (std::move (outer_attrs));\n \t  // or should this go straight to parsing union?\n \t}\n+      else if (t->get_str () == \"default\")\n+\t{\n+\t  add_error (Error (t->get_locus (),\n+\t\t\t    \"%qs is only allowed on items within %qs blocks\",\n+\t\t\t    \"default\", \"impl\"));\n+\t  return nullptr;\n+\t}\n       else if (t->get_str () == \"macro_rules\")\n \t{\n \t  // macro_rules! macro item\n@@ -5538,81 +5545,35 @@ Parser<ManagedTokenSource>::parse_trait_impl_item ()\n   // parse outer attributes (if they exist)\n   AST::AttrVec outer_attrs = parse_outer_attributes ();\n \n-  // TODO: clean this function up, it is basically unreadable hacks\n+  auto visibility = AST::Visibility::create_private ();\n+  if (lexer.peek_token ()->get_id () == PUB)\n+    visibility = parse_visibility ();\n \n   // branch on next token:\n   const_TokenPtr t = lexer.peek_token ();\n   switch (t->get_id ())\n     {\n-    case IDENTIFIER:\n     case SUPER:\n     case SELF:\n     case CRATE:\n     case DOLLAR_SIGN:\n       // these seem to be SimplePath tokens, so this is a macro invocation\n       // semi\n       return parse_macro_invocation_semi (std::move (outer_attrs));\n+    case IDENTIFIER:\n+      if (lexer.peek_token ()->get_str () == \"default\")\n+\treturn parse_trait_impl_function_or_method (visibility,\n+\t\t\t\t\t\t    std::move (outer_attrs));\n+      else\n+\treturn parse_macro_invocation_semi (std::move (outer_attrs));\n     case TYPE:\n-      return parse_type_alias (AST::Visibility::create_private (),\n-\t\t\t       std::move (outer_attrs));\n-      case PUB: {\n-\t// visibility, so not a macro invocation semi - must be constant,\n-\t// function, or method\n-\tAST::Visibility vis = parse_visibility ();\n-\n-\t// TODO: is a recursive call to parse_trait_impl_item better?\n-\tswitch (lexer.peek_token ()->get_id ())\n-\t  {\n-\t  case TYPE:\n-\t    return parse_type_alias (std::move (vis), std::move (outer_attrs));\n-\t  case EXTERN_TOK:\n-\t  case UNSAFE:\n-\t  case FN_TOK:\n-\t    // function or method\n-\t    return parse_trait_impl_function_or_method (std::move (vis),\n-\t\t\t\t\t\t\tstd::move (\n-\t\t\t\t\t\t\t  outer_attrs));\n-\t  case CONST:\n-\t    // lookahead to resolve production - could be function/method or\n-\t    // const item\n-\t    t = lexer.peek_token (1);\n-\n-\t    switch (t->get_id ())\n-\t      {\n-\t      case IDENTIFIER:\n-\t      case UNDERSCORE:\n-\t\treturn parse_const_item (std::move (vis),\n-\t\t\t\t\t std::move (outer_attrs));\n-\t      case UNSAFE:\n-\t      case EXTERN_TOK:\n-\t      case FN_TOK:\n-\t\treturn parse_trait_impl_function_or_method (std::move (vis),\n-\t\t\t\t\t\t\t    std::move (\n-\t\t\t\t\t\t\t      outer_attrs));\n-\t      default:\n-\t\tadd_error (Error (t->get_locus (),\n-\t\t\t\t  \"unexpected token %qs in some sort of const \"\n-\t\t\t\t  \"item in trait impl\",\n-\t\t\t\t  t->get_token_description ()));\n-\n-\t\tlexer.skip_token (1); // TODO: is this right thing to do?\n-\t\treturn nullptr;\n-\t      }\n-\t  default:\n-\t    add_error (Error (t->get_locus (),\n-\t\t\t      \"unrecognised token %qs for item in trait impl\",\n-\t\t\t      t->get_token_description ()));\n-\n-\t    // skip?\n-\t    return nullptr;\n-\t  }\n-      }\n+      return parse_type_alias (visibility, std::move (outer_attrs));\n     case EXTERN_TOK:\n     case UNSAFE:\n     case FN_TOK:\n       // function or method\n-      return parse_trait_impl_function_or_method (\n-\tAST::Visibility::create_private (), std::move (outer_attrs));\n+      return parse_trait_impl_function_or_method (visibility,\n+\t\t\t\t\t\t  std::move (outer_attrs));\n     case CONST:\n       // lookahead to resolve production - could be function/method or const\n       // item\n@@ -5622,13 +5583,12 @@ Parser<ManagedTokenSource>::parse_trait_impl_item ()\n \t{\n \tcase IDENTIFIER:\n \tcase UNDERSCORE:\n-\t  return parse_const_item (AST::Visibility::create_private (),\n-\t\t\t\t   std::move (outer_attrs));\n+\t  return parse_const_item (visibility, std::move (outer_attrs));\n \tcase UNSAFE:\n \tcase EXTERN_TOK:\n \tcase FN_TOK:\n-\t  return parse_trait_impl_function_or_method (\n-\t    AST::Visibility::create_private (), std::move (outer_attrs));\n+\t  return parse_trait_impl_function_or_method (visibility,\n+\t\t\t\t\t\t      std::move (outer_attrs));\n \tdefault:\n \t  add_error (Error (\n \t    t->get_locus (),\n@@ -5640,13 +5600,14 @@ Parser<ManagedTokenSource>::parse_trait_impl_item ()\n \t}\n       gcc_unreachable ();\n     default:\n-      add_error (Error (t->get_locus (),\n-\t\t\t\"unrecognised token %qs for item in trait impl\",\n-\t\t\tt->get_token_description ()));\n-\n-      // skip?\n-      return nullptr;\n+      break;\n     }\n+  add_error (Error (t->get_locus (),\n+\t\t    \"unrecognised token %qs for item in trait impl\",\n+\t\t    t->get_token_description ()));\n+\n+  // skip?\n+  return nullptr;\n }\n \n /* For internal use only by parse_trait_impl_item() - splits giant method into\n@@ -5665,6 +5626,14 @@ Parser<ManagedTokenSource>::parse_trait_impl_function_or_method (\n   // parse function or method qualifiers\n   AST::FunctionQualifiers qualifiers = parse_function_qualifiers ();\n \n+  auto is_default = false;\n+  auto t = lexer.peek_token ();\n+  if (t->get_id () == IDENTIFIER && t->get_str () == \"default\")\n+    {\n+      is_default = true;\n+      lexer.skip_token ();\n+    }\n+\n   skip_token (FN_TOK);\n \n   // parse function or method name\n@@ -5789,21 +5758,19 @@ Parser<ManagedTokenSource>::parse_trait_impl_function_or_method (\n   // do actual if instead of ternary for return value optimisation\n   if (is_method)\n     {\n-      return std::unique_ptr<AST::Method> (\n-\tnew AST::Method (std::move (ident), std::move (qualifiers),\n-\t\t\t std::move (generic_params), std::move (self_param),\n-\t\t\t std::move (function_params), std::move (return_type),\n-\t\t\t std::move (where_clause), std::move (body),\n-\t\t\t std::move (vis), std::move (outer_attrs), locus));\n+      return std::unique_ptr<AST::Method> (new AST::Method (\n+\tstd::move (ident), std::move (qualifiers), std::move (generic_params),\n+\tstd::move (self_param), std::move (function_params),\n+\tstd::move (return_type), std::move (where_clause), std::move (body),\n+\tstd::move (vis), std::move (outer_attrs), locus, is_default));\n     }\n   else\n     {\n-      return std::unique_ptr<AST::Function> (\n-\tnew AST::Function (std::move (ident), std::move (qualifiers),\n-\t\t\t   std::move (generic_params),\n-\t\t\t   std::move (function_params), std::move (return_type),\n-\t\t\t   std::move (where_clause), std::move (body),\n-\t\t\t   std::move (vis), std::move (outer_attrs), locus));\n+      return std::unique_ptr<AST::Function> (new AST::Function (\n+\tstd::move (ident), std::move (qualifiers), std::move (generic_params),\n+\tstd::move (function_params), std::move (return_type),\n+\tstd::move (where_clause), std::move (body), std::move (vis),\n+\tstd::move (outer_attrs), locus, is_default));\n     }\n }\n "}, {"sha": "b79b39dba3021a96faa6fd5e21c1155c830fb895", "filename": "gcc/testsuite/rust/compile/default_not_a_kw.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdefault_not_a_kw.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdefault_not_a_kw.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdefault_not_a_kw.rs?ref=ce43f55e9976929f9ff2388c8971a65afd24e26d", "patch": "@@ -0,0 +1,2 @@\n+// allowed\n+pub fn default() {}"}, {"sha": "1ce73848d0a38569e71cb6d466625d3700e8dcab", "filename": "gcc/testsuite/rust/compile/parse_invalid_specialization.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_invalid_specialization.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_invalid_specialization.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_invalid_specialization.rs?ref=ce43f55e9976929f9ff2388c8971a65afd24e26d", "patch": "@@ -0,0 +1,4 @@\n+default fn f() {\n+    // { dg-error \".default. is only allowed on items within .impl. blocks\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "5de1f6a6f96a986648d271db3460a5acc8b36fda", "filename": "gcc/testsuite/rust/compile/parse_specialization.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_specialization.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce43f55e9976929f9ff2388c8971a65afd24e26d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_specialization.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_specialization.rs?ref=ce43f55e9976929f9ff2388c8971a65afd24e26d", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+\n+trait Foo {\n+    fn bar();\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    default fn bar() {}\n+}"}]}