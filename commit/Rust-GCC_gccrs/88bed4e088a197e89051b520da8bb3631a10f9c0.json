{"sha": "88bed4e088a197e89051b520da8bb3631a10f9c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiZWQ0ZTA4OGExOTdlODkwNTFiNTIwZGE4YmIzNjMxYTEwZjljMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-03T13:32:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-21T10:45:16Z"}, "message": "[Ada] Adjust new fast bit-field copy path to big-endian platforms\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_Assign_Array_Bitfield_Fast): If big-endian\n\tordering is in effect for the operands and they are small,\n\tadjust the unchecked conversions done around them.", "tree": {"sha": "9a6b067a8e76446459fd868dfd47ab32ac79ed0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a6b067a8e76446459fd868dfd47ab32ac79ed0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88bed4e088a197e89051b520da8bb3631a10f9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bed4e088a197e89051b520da8bb3631a10f9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88bed4e088a197e89051b520da8bb3631a10f9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bed4e088a197e89051b520da8bb3631a10f9c0/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d315f859f89dc925cc60c6df53a615b97be110e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d315f859f89dc925cc60c6df53a615b97be110e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d315f859f89dc925cc60c6df53a615b97be110e5"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "70866a893f5618ea660a0b3225fbc2416b60531b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bed4e088a197e89051b520da8bb3631a10f9c0/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bed4e088a197e89051b520da8bb3631a10f9c0/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=88bed4e088a197e89051b520da8bb3631a10f9c0", "patch": "@@ -1472,18 +1472,30 @@ package body Exp_Ch5 is\n \n       Loc  : constant Source_Ptr := Sloc (N);\n \n+      L_Typ : constant Entity_Id := Etype (Larray);\n+      R_Typ : constant Entity_Id := Etype (Rarray);\n+      --  The original type of the arrays\n+\n       L_Val : constant Node_Id :=\n         Unchecked_Convert_To (RTE (RE_Val_2), Larray);\n       R_Val : constant Node_Id :=\n         Unchecked_Convert_To (RTE (RE_Val_2), Rarray);\n       --  Converted values of left- and right-hand sides\n \n-      C_Size : constant Uint := Component_Size (Etype (Larray));\n+      L_Small : constant Boolean :=\n+        Known_Static_RM_Size (L_Typ)\n+          and then RM_Size (L_Typ) < Standard_Long_Long_Integer_Size;\n+      R_Small : constant Boolean :=\n+        Known_Static_RM_Size (R_Typ)\n+          and then RM_Size (R_Typ) < Standard_Long_Long_Integer_Size;\n+      --  Whether the above unchecked conversions need to be padded with zeros\n+\n+      C_Size : constant Uint := Component_Size (L_Typ);\n       pragma Assert (C_Size >= 1);\n-      pragma Assert (C_Size = Component_Size (Etype (Rarray)));\n+      pragma Assert (C_Size = Component_Size (R_Typ));\n \n       Larray_Bounds : constant Range_Values :=\n-        Get_Index_Bounds (First_Index (Etype (Larray)));\n+        Get_Index_Bounds (First_Index (L_Typ));\n       L_Bounds : constant Range_Values :=\n         (if Nkind (Name (N)) = N_Slice\n          then Get_Index_Bounds (Discrete_Range (Name (N)))\n@@ -1496,7 +1508,7 @@ package body Exp_Ch5 is\n         Make_Integer_Literal (Loc, (L_Bounds.L - Larray_Bounds.L) * C_Size);\n \n       Rarray_Bounds : constant Range_Values :=\n-        Get_Index_Bounds (First_Index (Etype (Rarray)));\n+        Get_Index_Bounds (First_Index (R_Typ));\n       R_Bounds : constant Range_Values :=\n         (if Nkind (Expression (N)) = N_Slice\n          then Get_Index_Bounds (Discrete_Range (Expression (N)))\n@@ -1516,15 +1528,56 @@ package body Exp_Ch5 is\n               Duplicate_Subexpr (Larray, True),\n             Attribute_Name => Name_Component_Size));\n \n-      Call : constant Node_Id := Make_Function_Call (Loc,\n+      L_Arg, R_Arg, Call : Node_Id;\n+\n+   begin\n+      --  The semantics of unchecked conversion between bit-packed arrays that\n+      --  are implemented as modular types and modular types is precisely that\n+      --  of unchecked conversion between modular types. Therefore, if it needs\n+      --  to be padded with zeros, the padding must be moved to the correct end\n+      --  for memory order because System.Bitfield_Utils works in memory order.\n+\n+      if L_Small\n+        and then (Bytes_Big_Endian xor Reverse_Storage_Order (L_Typ))\n+      then\n+         L_Arg := Make_Op_Shift_Left (Loc,\n+           Left_Opnd  => L_Val,\n+           Right_Opnd => Make_Integer_Literal (Loc,\n+                           Standard_Long_Long_Integer_Size - RM_Size (L_Typ)));\n+      else\n+         L_Arg := L_Val;\n+      end if;\n+\n+      if R_Small\n+        and then (Bytes_Big_Endian xor Reverse_Storage_Order (R_Typ))\n+      then\n+         R_Arg := Make_Op_Shift_Left (Loc,\n+           Left_Opnd  => R_Val,\n+           Right_Opnd => Make_Integer_Literal (Loc,\n+                           Standard_Long_Long_Integer_Size - RM_Size (R_Typ)));\n+      else\n+         R_Arg := R_Val;\n+      end if;\n+\n+      Call := Make_Function_Call (Loc,\n         Name => New_Occurrence_Of (RTE (RE_Fast_Copy_Bitfield), Loc),\n         Parameter_Associations => New_List (\n-          R_Val, R_Bit, L_Val, L_Bit, Size));\n+          R_Arg, R_Bit, L_Arg, L_Bit, Size));\n+\n+      --  Conversely, the final unchecked conversion must take significant bits\n+\n+      if L_Small\n+        and then (Bytes_Big_Endian xor Reverse_Storage_Order (L_Typ))\n+      then\n+         Call := Make_Op_Shift_Right (Loc,\n+           Left_Opnd  => Call,\n+           Right_Opnd => Make_Integer_Literal (Loc,\n+                           Standard_Long_Long_Integer_Size - RM_Size (L_Typ)));\n+      end if;\n \n-   begin\n       return Make_Assignment_Statement (Loc,\n         Name => Duplicate_Subexpr (Larray, True),\n-        Expression => Unchecked_Convert_To (Etype (Larray), Call));\n+        Expression => Unchecked_Convert_To (L_Typ, Call));\n    end Expand_Assign_Array_Bitfield_Fast;\n \n    ------------------------------------------"}]}