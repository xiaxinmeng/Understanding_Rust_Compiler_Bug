{"sha": "26d970a5b93d150689f84c0649143959db4dd40e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkOTcwYTViOTNkMTUwNjg5Zjg0YzA2NDkxNDM5NTlkYjRkZDQwZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-19T19:05:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-19T19:05:52Z"}, "message": "(mark_set_resources): Add new parm IN_DEST; add callers changed.\n\nRework to scan an entire insn to look for auto-inc operations.\n\nFrom-SVN: r1898", "tree": {"sha": "54cc490b4d99ad0e9f57169b8ae1638b11328840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54cc490b4d99ad0e9f57169b8ae1638b11328840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d970a5b93d150689f84c0649143959db4dd40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d970a5b93d150689f84c0649143959db4dd40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d970a5b93d150689f84c0649143959db4dd40e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d970a5b93d150689f84c0649143959db4dd40e/comments", "author": null, "committer": null, "parents": [{"sha": "87f60669a0cb51b25762676f52897131573dc12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f60669a0cb51b25762676f52897131573dc12d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f60669a0cb51b25762676f52897131573dc12d"}], "stats": {"total": 181, "additions": 111, "deletions": 70}, "files": [{"sha": "e0398cfe23877f91c295885f42960906189e026a", "filename": "gcc/reorg.c", "status": "modified", "additions": 111, "deletions": 70, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d970a5b93d150689f84c0649143959db4dd40e/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d970a5b93d150689f84c0649143959db4dd40e/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=26d970a5b93d150689f84c0649143959db4dd40e", "patch": "@@ -392,9 +392,12 @@ mark_referenced_resources (x, res, include_called_routine)\n       }\n }\n \f\n-/* Given an insn, INSN, and a pointer to a `struct resource', RES, indicate\n-   which resources are modified by the insn. If INCLUDE_CALLED_ROUTINE\n-   is TRUE, also mark resources potentially set by the called routine.\n+/* Given X, a part of an insn, and a pointer to a `struct resource', RES,\n+   indicate which resources are modified by the insn. If INCLUDE_CALLED_ROUTINE\n+   is nonzero, also mark resources potentially set by the called routine.\n+\n+   If IN_DEST is nonzero, it means we are inside a SET.  Otherwise,\n+   objects are being referenced instead of set.\n \n    We never mark the insn as modifying the condition code unless it explicitly\n    SETs CC0 even though this is not totally correct.  The reason for this is\n@@ -403,18 +406,31 @@ mark_referenced_resources (x, res, include_called_routine)\n    our computation and thus may be placed in a delay slot.   */\n \n static void\n-mark_set_resources (insn, res, include_called_routine)\n-     register rtx insn;\n+mark_set_resources (x, res, in_dest, include_called_routine)\n+     register rtx x;\n      register struct resources *res;\n+     int in_dest;\n      int include_called_routine;\n {\n-  register int i;\n+  register enum rtx_code code = GET_CODE (x);\n+  register int i, j;\n+  register char *format_ptr;\n \n-  switch (GET_CODE (insn))\n+ restart:\n+\n+  switch (code)\n     {\n     case NOTE:\n     case BARRIER:\n     case CODE_LABEL:\n+    case USE:\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+    case CONST:\n+    case PC:\n+    case CC0:\n       /* These don't set any resources.  */\n       return;\n \n@@ -425,7 +441,7 @@ mark_set_resources (insn, res, include_called_routine)\n \n       if (include_called_routine)\n \t{\n-\t  rtx next = NEXT_INSN (insn);\n+\t  rtx next = NEXT_INSN (x);\n \n \t  res->cc = res->memory = 1;\n \t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n@@ -439,66 +455,91 @@ mark_set_resources (insn, res, include_called_routine)\n \t  for (; (next && GET_CODE (next) == INSN\n \t\t  && GET_CODE (PATTERN (next)) == CLOBBER);\n \t       next = NEXT_INSN (next))\n-\t    mark_referenced_resources (XEXP (PATTERN (next), 0), res, 0);\n+\t    mark_set_resources (XEXP (PATTERN (next), 0), res, 1, 0);\n \t}\n \n       /* ... and also what it's RTL says it modifies, if anything.  */\n \n     case JUMP_INSN:\n     case INSN:\n-      {\n-\tregister rtx body = PATTERN (insn);\n-\tregister rtx note;\n-\n-\t/* An insn consisting of just a CLOBBER (or USE) is\n-\t   just for flow and doesn't actually do anything, so we don't check\n-\t   for it.\n-\n-\t   If the source of a SET is a CALL, this is actually done by\n-\t   the called routine.  So only include it if we are to include the\n-\t   effects of the calling routine.  */\n-\n-\tif (GET_CODE (body) == SET\n-\t    && (include_called_routine || GET_CODE (SET_SRC (body)) != CALL))\n-\t  mark_referenced_resources (SET_DEST (body), res, 0);\n-\telse if (GET_CODE (body) == PARALLEL)\n-\t  {\n-\t    for (i = 0; i < XVECLEN (body, 0); i++)\n-\t      if ((GET_CODE (XVECEXP (body, 0, i)) == SET\n-\t\t   && (include_called_routine\n-\t\t       || GET_CODE (SET_SRC (XVECEXP (body, 0, i))) != CALL))\n-\t\t  || GET_CODE (XVECEXP (body, 0, i)) == CLOBBER)\n-\t\tmark_referenced_resources (SET_DEST (XVECEXP (body, 0, i)),\n-\t\t\t\t\t   res, 0);\n-\t  }\n-\telse if (GET_CODE (body) == SEQUENCE)\n-\t  for (i = 0; i < XVECLEN (body, 0); i++)\n-\t    if (! (INSN_ANNULLED_BRANCH_P (XVECEXP (body, 0, 0))\n-\t\t   && INSN_FROM_TARGET_P (XVECEXP (body, 0, i))))\n-\t      mark_set_resources (XVECEXP (body, 0, i), res,\n-\t\t\t\t  include_called_routine);\n-\n-#ifdef AUTO_INC_DEC\n-\t/* If any register are incremented or decremented in an address,\n-\t   they are set here.  */\n-\tfor (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t  if (REG_NOTE_KIND (note) == REG_INC)\n-\t    mark_referenced_resources (XEXP (note, 0), res, 0);\n-#endif\n \n-#ifdef PUSH_ROUNDING\n-\t/* An insn that has a PRE_DEC on SP will not have a REG_INC note.\n-\t   Until we fix this correctly, consider all insns as modifying\n-\t   SP on such machines.  So far, we don't have delay slot scheduling\n-\t   on any machines with PUSH_ROUNDING.  */\n-\tSET_HARD_REG_BIT (res->regs, STACK_POINTER_REGNUM);\n-#endif\n-\treturn;\n-      }\n+\t/* An insn consisting of just a CLOBBER (or USE) is just for flow\n+\t   and doesn't actually do anything, so we ignore it.  */\n \n-    default:\n-      abort ();\n+      x = PATTERN (x);\n+      if (GET_CODE (x) != USE && GET_CODE (x) != CLOBBER)\n+\tgoto restart;\n+      return;\n+\n+    case SET:\n+      /* If the source of a SET is a CALL, this is actually done by\n+\t the called routine.  So only include it if we are to include the\n+\t effects of the calling routine.  */\n+\n+      mark_set_resources (SET_DEST (x), res,\n+\t\t\t  (include_called_routine\n+\t\t\t   || GET_CODE (SET_SRC (x)) != CALL),\n+\t\t\t  0);\n+\n+      mark_set_resources (SET_SRC (x), res, 0, 0);\n+      return;\n+\n+    case CLOBBER:\n+      mark_set_resources (XEXP (x, 0), res, 1, 0);\n+      return;\n+      \n+    case SEQUENCE:\n+      for (i = 0; i < XVECLEN (x, 0); i++)\n+\tif (! (INSN_ANNULLED_BRANCH_P (XVECEXP (x, 0, 0))\n+\t       && INSN_FROM_TARGET_P (XVECEXP (x, 0, i))))\n+\t  mark_set_resources (XVECEXP (x, 0, i), res, 0,\n+\t\t\t      include_called_routine);\n+      return;\n+\n+    case POST_INC:\n+    case PRE_INC:\n+    case POST_DEC:\n+    case PRE_DEC:\n+      mark_set_resources (XEXP (x, 0), res, 1, 0);\n+      return;\n+\n+    case ZERO_EXTRACT:\n+      mark_set_resources (XEXP (x, 0), res, in_dest, 0);\n+      mark_set_resources (XEXP (x, 1), res, 0, 0);\n+      mark_set_resources (XEXP (x, 2), res, 0, 0);\n+      return;\n+\n+    case MEM:\n+      if (in_dest)\n+\t{\n+\t  res->memory = 1;\n+\t  res->volatil = MEM_VOLATILE_P (x);\n+\t}\n+\n+      mark_set_resources (XEXP (x, 0), res, 0, 0);\n+      goto restart;\n+\n+    case REG:\n+      for (i = 0; i < HARD_REGNO_NREGS (REGNO (x), GET_MODE (x)); i++)\n+\tSET_HARD_REG_BIT (res->regs, REGNO (x) + i);\n+      return;\n     }\n+\n+  /* Process each sub-expression and flag what it needs.  */\n+  format_ptr = GET_RTX_FORMAT (code);\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++)\n+    switch (*format_ptr++)\n+      {\n+      case 'e':\n+\tmark_set_resources (XEXP (x, i), res, in_dest, include_called_routine);\n+\tbreak;\n+\n+      case 'E':\n+\tfor (j = 0; j < XVECLEN (x, i); j++)\n+\t  mark_set_resources (XVECEXP (x, i, j), res, in_dest,\n+\t\t\t      include_called_routine);\n+\tbreak;\n+      }\n }\n \f\n /* Return TRUE if this insn should stop the search for insn to fill delay\n@@ -599,7 +640,7 @@ insn_sets_resource_p (insn, res, include_called_routine)\n   struct resources insn_sets;\n \n   CLEAR_RESOURCE (&insn_sets);\n-  mark_set_resources (insn, &insn_sets, include_called_routine);\n+  mark_set_resources (insn, &insn_sets, 0, include_called_routine);\n   return resource_conflicts_p (&insn_sets, res);\n }\n \f\n@@ -1402,7 +1443,7 @@ try_merge_delay_insns (insn, thread)\n \t    mark_referenced_resources (next_to_match, &needed, 1);\n \t}\n \n-      mark_set_resources (trial, &set, 1);\n+      mark_set_resources (trial, &set, 0, 1);\n       mark_referenced_resources (trial, &needed, 1);\n     }\n \n@@ -1549,7 +1590,7 @@ redundant_insn_p (insn, target, delay_list)\n \n   CLEAR_RESOURCE (&needed);\n   CLEAR_RESOURCE (&set);\n-  mark_set_resources (insn, &set, 1);\n+  mark_set_resources (insn, &set, 0, 1);\n   mark_referenced_resources (insn, &needed, 1);\n \n   /* If TARGET is a SEQUENCE, get the main insn.  */\n@@ -2143,7 +2184,7 @@ mark_target_live_regs (target, res)\n \t}\n \n       mark_referenced_resources (insn, &needed, 1);\n-      mark_set_resources (insn, &set, 1);\n+      mark_set_resources (insn, &set, 0, 1);\n \n       COPY_HARD_REG_SET (scratch, set.regs);\n       AND_COMPL_HARD_REG_SET (scratch, needed.regs);\n@@ -2179,7 +2220,7 @@ mark_target_live_regs (target, res)\n \t  AND_COMPL_HARD_REG_SET (scratch, set.regs);\n \t  IOR_HARD_REG_SET (new_resources.regs, scratch);\n \n-\t  mark_set_resources (insn, &set, 1);\n+\t  mark_set_resources (insn, &set, 0, 1);\n \t}\n \n       AND_HARD_REG_SET (res->regs, new_resources.regs);\n@@ -2249,7 +2290,7 @@ fill_simple_delay_slots (first, non_jumps_p)\n       delay_list = 0;\n       CLEAR_RESOURCE (&needed);\n       CLEAR_RESOURCE (&set);\n-      mark_set_resources (insn, &set, 0);\n+      mark_set_resources (insn, &set, 0, 0);\n       mark_referenced_resources (insn, &needed, 0);\n \n       for (trial = prev_nonnote_insn (insn); ! stop_search_p (trial, 1);\n@@ -2295,7 +2336,7 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t\t}\n \t    }\n \n-\t  mark_set_resources (trial, &set, 1);\n+\t  mark_set_resources (trial, &set, 0, 1);\n \t  mark_referenced_resources (trial, &needed, 1);\n \t}\n \n@@ -2354,7 +2395,7 @@ fill_simple_delay_slots (first, non_jumps_p)\n \n \t  if (GET_CODE (insn) == CALL_INSN)\n \t    {\n-\t      mark_set_resources (insn, &set, 1);\n+\t      mark_set_resources (insn, &set, 0, 1);\n \t      mark_referenced_resources (insn, &needed, 1);\n \t      maybe_never = 1;\n \t    }\n@@ -2454,7 +2495,7 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t\t  continue;\n \t\t}\n \n-\t      mark_set_resources (trial, &set, 1);\n+\t      mark_set_resources (trial, &set, 0, 1);\n \t      mark_referenced_resources (trial, &needed, 1);\n \n \t      /* Ensure we don't put insns between the setting of cc and the\n@@ -2573,7 +2614,7 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t    }\n \t}\n \n-      mark_set_resources (trial, &set, 1);\n+      mark_set_resources (trial, &set, 0, 1);\n       mark_referenced_resources (trial, &needed, 1);\n     }\n \n@@ -2783,7 +2824,7 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n \n       /* This insn can't go into a delay slot.  */\n       lose = 1;\n-      mark_set_resources (trial, &set, 1);\n+      mark_set_resources (trial, &set, 0, 1);\n       mark_referenced_resources (trial, &needed, 1);\n \n       /* Ensure we don't put insns between the setting of cc and the comparison"}]}