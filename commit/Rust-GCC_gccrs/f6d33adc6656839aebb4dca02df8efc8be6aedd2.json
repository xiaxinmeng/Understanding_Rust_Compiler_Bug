{"sha": "f6d33adc6656839aebb4dca02df8efc8be6aedd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkMzNhZGM2NjU2ODM5YWViYjRkY2EwMmRmOGVmYzhiZTZhZWRkMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-19T12:03:01Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T09:59:22Z"}, "message": "Fix bug using ADT types as return types to functions\n\nWhen we use anything other than builtin types for returns or parameters\nthe type resolver was missing the NodeId mappings meaning it would\nalawys fail to resolve them.\n\nThen in gimple conversion we need to be able to reference the already\ncreated RECORD types instead of always creating new instances.", "tree": {"sha": "9d4bc5c4da1a45c82bd2bb9e73d1c000071e9b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d4bc5c4da1a45c82bd2bb9e73d1c000071e9b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d33adc6656839aebb4dca02df8efc8be6aedd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d33adc6656839aebb4dca02df8efc8be6aedd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d33adc6656839aebb4dca02df8efc8be6aedd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d33adc6656839aebb4dca02df8efc8be6aedd2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb44a8feb815ee31946b33e713c62ac2d333d7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb44a8feb815ee31946b33e713c62ac2d333d7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb44a8feb815ee31946b33e713c62ac2d333d7be"}], "stats": {"total": 229, "additions": 132, "deletions": 97}, "files": [{"sha": "6516c71b9292e8faaa7dc825ecf64c760168fd9c", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -225,12 +225,43 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n-\n   void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n \n+  void visit (TyTy::FnType &type) override\n+  {\n+    Backend::Btyped_identifier receiver;\n+    std::vector<Backend::Btyped_identifier> parameters;\n+    std::vector<Backend::Btyped_identifier> results;\n+\n+    if (!type.get_return_type ()->is_unit ())\n+      {\n+\tauto hir_type = type.get_return_type ();\n+\tauto ret = TyTyResolveCompile::compile (ctx, hir_type);\n+\tresults.push_back (Backend::Btyped_identifier (\n+\t  \"_\", ret,\n+\t  ctx->get_mappings ()->lookup_location (hir_type->get_ref ())));\n+      }\n+\n+    for (size_t i = 0; i < type.num_params (); i++)\n+      {\n+\tauto param_tyty = type.param_at (i);\n+\tauto compiled_param_type\n+\t  = TyTyResolveCompile::compile (ctx, param_tyty->get_base_type ());\n+\n+\tauto compiled_param = Backend::Btyped_identifier (\n+\t  param_tyty->get_identifier (), compiled_param_type,\n+\t  ctx->get_mappings ()->lookup_location (param_tyty->get_ref ()));\n+\n+\tparameters.push_back (compiled_param);\n+      }\n+\n+    translated = ctx->get_backend ()->function_type (\n+      receiver, parameters, results, NULL,\n+      ctx->get_mappings ()->lookup_location (type.get_ref ()));\n+  }\n+\n   void visit (TyTy::UnitType &type) override\n   {\n     translated = ctx->get_backend ()->void_type ();\n@@ -320,6 +351,51 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n   ::Btype *translated;\n };\n \n+class TyTyCompileParam : public TyTy::TyVisitor\n+{\n+public:\n+  static ::Bvariable *compile (Context *ctx, Bfunction *fndecl,\n+\t\t\t       TyTy::TyBase *ty)\n+  {\n+    TyTyCompileParam compiler (ctx, fndecl);\n+    ty->accept_vis (compiler);\n+    rust_assert (compiler.translated != nullptr);\n+    return compiler.translated;\n+  }\n+\n+  ~TyTyCompileParam () {}\n+\n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ParamType &type) override\n+  {\n+    auto btype = TyTyResolveCompile::compile (ctx, type.get_base_type ());\n+    bool tree_addressable = false;\n+    translated = ctx->get_backend ()->parameter_variable (\n+      fndecl, type.get_identifier (), btype, tree_addressable,\n+      ctx->get_mappings ()->lookup_location (type.get_ref ()));\n+  }\n+\n+private:\n+  TyTyCompileParam (Context *ctx, ::Bfunction *fndecl)\n+    : ctx (ctx), fndecl (fndecl), translated (nullptr)\n+  {}\n+\n+  Context *ctx;\n+  ::Bfunction *fndecl;\n+  ::Bvariable *translated;\n+};\n+\n } // namespace Compile\n } // namespace Rust\n "}, {"sha": "82dbc9b7fd731984600e175d6f40e1858497080e", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -127,16 +127,16 @@ class CompileItem : public HIRCompileBase\n \t  return;\n       }\n \n-    TyTy::TyBase *fnType;\n+    TyTy::TyBase *fntype;\n     if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n-\t\t\t\t\t &fnType))\n+\t\t\t\t\t &fntype))\n       {\n \trust_fatal_error (function.locus, \"failed to lookup function type\");\n \treturn;\n       }\n \n     // convert to the actual function type\n-    auto compiled_fn_type = TyTyCompile::compile (ctx->get_backend (), fnType);\n+    ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n     unsigned int flags = 0;\n     bool is_main_fn = function.function_name.compare (\"main\") == 0;\n@@ -159,15 +159,14 @@ class CompileItem : public HIRCompileBase\n     ctx->insert_function_decl (function.get_mappings ().get_hirid (), fndecl);\n \n     // setup the params\n-    TyTy::TyBase *tyret = TyTyExtractRetFromFnType::compile (fnType);\n+    TyTy::TyBase *tyret = TyTyExtractRetFromFnType::compile (fntype);\n     std::vector<TyTy::ParamType *> typarams\n-      = TyTyExtractParamsFromFnType::compile (fnType);\n+      = TyTyExtractParamsFromFnType::compile (fntype);\n     std::vector<Bvariable *> param_vars;\n \n     for (auto &it : typarams)\n       {\n-\tauto compiled_param\n-\t  = TyTyCompileParam::compile (ctx->get_backend (), fndecl, it);\n+\tauto compiled_param = TyTyCompileParam::compile (ctx, fndecl, it);\n \tparam_vars.push_back (compiled_param);\n \n \tctx->insert_var_decl (it->get_ref (), compiled_param);\n@@ -226,7 +225,7 @@ class CompileItem : public HIRCompileBase\n     Bvariable *return_address = nullptr;\n     if (function.has_function_return_type ())\n       {\n-\tBtype *return_type = TyTyCompile::compile (ctx->get_backend (), tyret);\n+\tBtype *return_type = TyTyResolveCompile::compile (ctx, tyret);\n \n \tbool address_is_taken = false;\n \tBstatement *ret_var_stmt = nullptr;"}, {"sha": "3eb2ca5d1ef69219fa55a3f9f56169e550a2ca57", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -278,54 +278,6 @@ class TyTyExtractRetFromFnType : public TyTy::TyVisitor\n   TyTy::TyBase *translated;\n };\n \n-class TyTyCompileParam : public TyTy::TyVisitor\n-{\n-public:\n-  static ::Bvariable *compile (::Backend *backend, Bfunction *fndecl,\n-\t\t\t       TyTy::TyBase *ty)\n-  {\n-    TyTyCompileParam compiler (backend, fndecl);\n-    ty->accept_vis (compiler);\n-    rust_assert (compiler.translated != nullptr);\n-    return compiler.translated;\n-  }\n-\n-  ~TyTyCompileParam () {}\n-\n-  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n-\n-  void visit (TyTy::ParamType &type) override\n-  {\n-    auto btype = TyTyCompile::compile (backend, type.get_base_type ());\n-    bool tree_addressable = false;\n-    translated = backend->parameter_variable (fndecl, type.get_identifier (),\n-\t\t\t\t\t      btype, tree_addressable,\n-\t\t\t\t\t      mappings->lookup_location (\n-\t\t\t\t\t\ttype.get_ref ()));\n-  }\n-\n-private:\n-  TyTyCompileParam (::Backend *backend, ::Bfunction *fndecl)\n-    : backend (backend), translated (nullptr), fndecl (fndecl),\n-      mappings (Analysis::Mappings::get ())\n-  {}\n-\n-  ::Backend *backend;\n-  ::Bvariable *translated;\n-  ::Bfunction *fndecl;\n-  Analysis::Mappings *mappings;\n-};\n-\n } // namespace Compile\n } // namespace Rust\n "}, {"sha": "ec4ef6bdaa9bb34038f88d9a448d49218cb6f2fd", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -274,8 +274,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     for (auto &param : fn->function_params)\n       {\n \tmappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t    param.get_mappings ()->get_hirid (),\n-\t\t\t\t    &param);\n+\t\t\t\t    param.get_mappings ().get_hirid (), &param);\n \tmappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t\t   param.get_locus ());\n       }"}, {"sha": "00608bd98e2f69bc231b2deeae26509b3e85df14", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -448,7 +448,7 @@ struct FunctionParam\n \n   Type *get_type () { return type.get (); }\n \n-  Analysis::NodeMapping *get_mappings () { return &mappings; }\n+  Analysis::NodeMapping &get_mappings () { return mappings; }\n };\n \n // Visibility of item - if the item has it, then it is some form of public"}, {"sha": "dfa319bc7d3d3aaec6a9a77c12c608af955e01b4", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -41,8 +41,7 @@ class TypeCheckExpr : public TypeCheckBase\n       resolver.infered\n \t= new TyTy::UnitType (expr->get_mappings ().get_hirid ());\n \n-    resolver.context->insert_type (expr->get_mappings ().get_hirid (),\n-\t\t\t\t   resolver.infered);\n+    resolver.context->insert_type (expr->get_mappings (), resolver.infered);\n     return resolver.infered;\n   }\n \n@@ -215,7 +214,12 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t\t   \"assignment infer - reverse lookup failure\");\n \t    return;\n \t  }\n-\tcontext->insert_type (ref, infered);\n+\n+\tcontext->insert_type (\n+\t  Analysis::NodeMapping (\n+\t    expr.get_lhs ()->get_mappings ().get_crate_num (), ref_node_id, ref,\n+\t    UNKNOWN_LOCAL_DEFID),\n+\t  infered);\n       }\n   }\n "}, {"sha": "e60c051e4a26b1f048b577c140ae0e6a726bcaa9", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -69,26 +69,24 @@ class TypeCheckStmt : public TypeCheckBase\n \t    return;\n \t  }\n \n-\tcontext->insert_type (stmt.get_mappings ().get_hirid (), combined);\n+\tcontext->insert_type (stmt.get_mappings (), combined);\n       }\n     else\n       {\n \t// let x:i32;\n \tif (specified_ty != nullptr)\n \t  {\n-\t    context->insert_type (stmt.get_mappings ().get_hirid (),\n-\t\t\t\t  specified_ty);\n+\t    context->insert_type (stmt.get_mappings (), specified_ty);\n \t  }\n \t// let x = 123;\n \telse if (init_expr_ty != nullptr)\n \t  {\n-\t    context->insert_type (stmt.get_mappings ().get_hirid (),\n-\t\t\t\t  init_expr_ty);\n+\t    context->insert_type (stmt.get_mappings (), init_expr_ty);\n \t  }\n \t// let x;\n \telse\n \t  {\n-\t    context->insert_type (stmt.get_mappings ().get_hirid (),\n+\t    context->insert_type (stmt.get_mappings (),\n \t\t\t\t  new TyTy::InferType (\n \t\t\t\t    stmt.get_mappings ().get_hirid ()));\n \t  }"}, {"sha": "e2bc3ed78c32f422daafd57594a368ed08a286ef", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -49,8 +49,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n \t\t\t\t     std::to_string (idx), field_type);\n       fields.push_back (ty_field);\n-      context->insert_type (field.get_mappings ().get_hirid (),\n-\t\t\t    ty_field->get_field_type ());\n+      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n       idx++;\n       return true;\n     });\n@@ -60,7 +59,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t   struct_decl.get_identifier (), true,\n \t\t\t   std::move (fields));\n \n-    context->insert_type (struct_decl.get_mappings ().get_hirid (), type);\n+    context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n   void visit (HIR::StructStruct &struct_decl)\n@@ -73,8 +72,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n \t\t\t\t     field.get_field_name (), field_type);\n       fields.push_back (ty_field);\n-      context->insert_type (field.get_mappings ().get_hirid (),\n-\t\t\t    ty_field->get_field_type ());\n+      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n       return true;\n     });\n \n@@ -83,25 +81,23 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t   struct_decl.get_identifier (), false,\n \t\t\t   std::move (fields));\n \n-    context->insert_type (struct_decl.get_mappings ().get_hirid (), type);\n+    context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n   void visit (HIR::StaticItem &var)\n   {\n     TyTy::TyBase *type = TypeCheckType::Resolve (var.get_type ());\n     TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (var.get_expr ());\n \n-    context->insert_type (var.get_mappings ().get_hirid (),\n-\t\t\t  type->combine (expr_type));\n+    context->insert_type (var.get_mappings (), type->combine (expr_type));\n   }\n \n   void visit (HIR::ConstantItem &constant)\n   {\n     TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());\n     TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n \n-    context->insert_type (constant.get_mappings ().get_hirid (),\n-\t\t\t  type->combine (expr_type));\n+    context->insert_type (constant.get_mappings (), type->combine (expr_type));\n   }\n \n   void visit (HIR::Function &function)\n@@ -123,16 +119,16 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t// get the name as well required for later on\n \tauto param_type = TypeCheckType::Resolve (param.type.get ());\n \tauto param_tyty\n-\t  = new TyTy::ParamType (param.get_mappings ()->get_hirid (),\n+\t  = new TyTy::ParamType (param.get_mappings ().get_hirid (),\n \t\t\t\t param.param_name->as_string (), param_type);\n \tparams.push_back (param_tyty);\n \n-\tcontext->insert_type (param.get_mappings ()->get_hirid (), param_tyty);\n+\tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t\t    params, ret_type);\n-    context->insert_type (function.get_mappings ().get_hirid (), fnType);\n+    context->insert_type (function.get_mappings (), fnType);\n   }\n \n private:"}, {"sha": "579dfb0063eea2219af36b2a18fc37ea92b8f1ab", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -70,7 +70,7 @@ class TypeCheckType : public TypeCheckBase\n     type->accept_vis (resolver);\n \n     if (resolver.translated != nullptr)\n-      resolver.context->insert_type (type->get_mappings ().get_hirid (),\n+      resolver.context->insert_type (type->get_mappings (),\n \t\t\t\t     resolver.translated);\n \n     return resolver.translated;\n@@ -112,10 +112,6 @@ class TypeCheckType : public TypeCheckBase\n \n   void visit (HIR::TypePath &path)\n   {\n-    // check if this is already defined or not\n-    if (context->lookup_type (path.get_mappings ().get_hirid (), &translated))\n-      return;\n-\n     // lookup the Node this resolves to\n     NodeId ref;\n     if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n@@ -132,11 +128,10 @@ class TypeCheckType : public TypeCheckBase\n       {\n \t// we got an HIR node\n \tif (context->lookup_type (hir_lookup, &translated))\n-\t  return;\n+\t  {\n+\t    return;\n+\t  }\n       }\n-\n-    // this might be a struct type (TyTy::ADT) reference\n-    // TODO\n     gcc_unreachable ();\n   }\n "}, {"sha": "aa3d505b5d115838894722af7ff871efef02f0b0", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -116,7 +116,7 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \treturn false;\n       }\n \n-    context->insert_type (field->get_mappings ().get_hirid (), resolved_field);\n+    context->insert_type (field->get_mappings (), resolved_field);\n     return true;\n   });\n "}, {"sha": "e0458a7305ac577d0ad501187801517111b330bb", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -37,7 +37,7 @@ class TypeCheckContext\n   bool lookup_builtin (std::string name, TyTy::TyBase **type);\n   void insert_builtin (HirId id, NodeId ref, TyTy::TyBase *type);\n \n-  void insert_type (HirId id, TyTy::TyBase *type);\n+  void insert_type (const Analysis::NodeMapping &mappings, TyTy::TyBase *type);\n   bool lookup_type (HirId id, TyTy::TyBase **type);\n \n   void insert_type_by_node_id (NodeId ref, HirId id);"}, {"sha": "65c55630f05d94130a55459fb44c0c95ae2899e2", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -73,9 +73,13 @@ TypeCheckContext::insert_builtin (HirId id, NodeId ref, TyTy::TyBase *type)\n }\n \n void\n-TypeCheckContext::insert_type (HirId id, TyTy::TyBase *type)\n+TypeCheckContext::insert_type (const Analysis::NodeMapping &mappings,\n+\t\t\t       TyTy::TyBase *type)\n {\n   rust_assert (type != nullptr);\n+  NodeId ref = mappings.get_nodeid ();\n+  HirId id = mappings.get_hirid ();\n+  node_id_refs[ref] = id;\n   resolved[id] = type;\n }\n "}, {"sha": "a5906d8a2d17b3806e0314eb7df0b2f316ddee9e", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -159,7 +159,7 @@ class TyTyResolver\n \t}\n \n       // insert the new resolved definition\n-      context->insert_type (decl->get_mappings ().get_hirid (), resolved_tyty);\n+      context->insert_type (decl->get_mappings (), resolved_tyty);\n       return true;\n     });\n   }"}, {"sha": "951bdccb5a5cd4ddc154acf036180437ba67bdbf", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -332,7 +332,7 @@ Mappings::insert_hir_param (CrateNum crateNum, HirId id,\n   rust_assert (lookup_hir_stmt (crateNum, id) == nullptr);\n \n   hirParamMappings[crateNum][id] = param;\n-  nodeIdToHirMappings[crateNum][param->get_mappings ()->get_nodeid ()] = id;\n+  nodeIdToHirMappings[crateNum][param->get_mappings ().get_nodeid ()] = id;\n }\n \n HIR::FunctionParam *"}, {"sha": "3c0b24a391339805c0e0a87de3a346c858b1c61a", "filename": "gcc/testsuite/rust.test/compilable/struct_base_init_1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_base_init_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d33adc6656839aebb4dca02df8efc8be6aedd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_base_init_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_base_init_1.rs?ref=f6d33adc6656839aebb4dca02df8efc8be6aedd2", "patch": "@@ -0,0 +1,12 @@\n+struct Foo {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn foo() -> Foo {\n+    Foo { a: 42, b: 32 }\n+}\n+\n+fn main() {\n+    let _f = Foo { a: 10, ..foo() };\n+}"}]}