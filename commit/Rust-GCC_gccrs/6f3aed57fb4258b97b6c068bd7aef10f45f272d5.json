{"sha": "6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYzYWVkNTdmYjQyNThiOTdiNmMwNjhiZDdhZWYxMGY0NWYyNzJkNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-17T19:09:56Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-17T19:09:56Z"}, "message": "2003-06-17  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/DirectByteBufferImpl.java\n\t(address): Made package private.\n\t(DirectByteBufferImpl): New constructor.\n\t* java/nio/natDirectByteBufferImpl.cc\n\t(allocateImpl): Moved to java.nio namespace, implemented.\n\t(freeImpl): Likewise.\n\t(getImpl): Likewise.\n\t(putImpl): Likewise.\n\t* jni.cc\n\t(_Jv_JNI_NewDirectByteBuffer): Implemented.\n\t(_Jv_JNI_GetDirectBufferAddress): Implemented.\n\t(_Jv_JNI_GetDirectBufferCapacity): Implemented.\n\nFrom-SVN: r68105", "tree": {"sha": "070d161eb50c6f132e76f98bbc8b9ada414dad0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/070d161eb50c6f132e76f98bbc8b9ada414dad0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/comments", "author": null, "committer": null, "parents": [{"sha": "67f63f32d59b22241faa6f3390757ce9535f8898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f63f32d59b22241faa6f3390757ce9535f8898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f63f32d59b22241faa6f3390757ce9535f8898"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "da274367f52ae00c3f6604fc254428cde7a08549", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "patch": "@@ -1,3 +1,18 @@\n+2003-06-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/DirectByteBufferImpl.java\n+\t(address): Made package private.\n+\t(DirectByteBufferImpl): New constructor.\n+\t* java/nio/natDirectByteBufferImpl.cc\n+\t(allocateImpl): Moved to java.nio namespace, implemented.\n+\t(freeImpl): Likewise.\n+\t(getImpl): Likewise.\n+\t(putImpl): Likewise.\n+\t* jni.cc\n+\t(_Jv_JNI_NewDirectByteBuffer): Implemented.\n+\t(_Jv_JNI_GetDirectBufferAddress): Implemented.\n+\t(_Jv_JNI_GetDirectBufferCapacity): Implemented.\n+\n 2003-06-17  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* include/powerpc-signal.h: New File."}, {"sha": "c746723f0d873077c77475498ce03975e8d5aaec", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "patch": "@@ -42,9 +42,14 @@\n \n public class DirectByteBufferImpl extends ByteBuffer\n {\n-  private RawData address;\n+  RawData address;\n   private int offset;\n   private boolean readOnly;\n+\n+  public DirectByteBufferImpl (RawData address, long len)\n+  {\n+    this (address, 0, (int) len, (int) len, 0, -1, false);\n+  }\n   \n   public DirectByteBufferImpl (RawData address, int offset, int capacity,\n                                int limit, int position, int mark,"}, {"sha": "2ceea17055134706755d968c42e48353d441850e", "filename": "libjava/java/nio/natDirectByteBufferImpl.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc?ref=6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "patch": "@@ -13,33 +13,33 @@ details.  */\n #include <gcj/cni.h>\n #include <jvm.h>\n \n+#include <stdlib.h>\n+\n #include <gnu/gcj/RawData.h>\n #include <java/nio/DirectByteBufferImpl.h>\n \n gnu::gcj::RawData*\n-java::nio::DirectByteBufferImpl::allocateImpl (jint /*capacity*/)\n+java::nio::DirectByteBufferImpl::allocateImpl (jint capacity)\n {\n-  // FIXME: implement this\n-  return 0;\n+  return reinterpret_cast<gnu::gcj::RawData*> (::malloc (capacity));\n }\n \n void\n-java::nio::DirectByteBufferImpl::freeImpl (gnu::gcj::RawData* /*address*/)\n+java::nio::DirectByteBufferImpl::freeImpl (gnu::gcj::RawData* address)\n {\n-  // FIXME: implement this\n+  ::free (reinterpret_cast<void*> (address));\n }\n \n jbyte\n-java::nio::DirectByteBufferImpl::getImpl (jint /*index*/)\n+java::nio::DirectByteBufferImpl::getImpl (jint index)\n {\n-  // FIXME: implement this\n-  // Dont forget: add offset to index\n-  return 0;\n+  jbyte* pointer = reinterpret_cast<jbyte*> (address) + offset + index;\n+  return *pointer;\n }\n \n void\n-java::nio::DirectByteBufferImpl::putImpl (jint /*index*/, jbyte /*value*/)\n+java::nio::DirectByteBufferImpl::putImpl (jint index, jbyte value)\n {\n-  // FIXME: implement this\n-  // Dont forget: add offset to index\n+  jbyte* pointer = reinterpret_cast<jbyte*> (address) + offset + index;\n+  *pointer = value;\n }"}, {"sha": "81ef0f7d36acac222c291ea4d2edafcb7653918b", "filename": "libjava/jni.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f3aed57fb4258b97b6c068bd7aef10f45f272d5/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=6f3aed57fb4258b97b6c068bd7aef10f45f272d5", "patch": "@@ -35,11 +35,13 @@ details.  */\n #include <java/lang/reflect/Method.h>\n #include <java/lang/reflect/Modifier.h>\n #include <java/lang/OutOfMemoryError.h>\n-#include <java/util/IdentityHashMap.h>\n #include <java/lang/Integer.h>\n #include <java/lang/ThreadGroup.h>\n #include <java/lang/Thread.h>\n #include <java/lang/IllegalAccessError.h>\n+#include <java/nio/DirectByteBufferImpl.h>\n+#include <java/util/IdentityHashMap.h>\n+#include <gnu/gcj/RawData.h>\n \n #include <gcj/method.h>\n #include <gcj/field.h>\n@@ -1720,24 +1722,28 @@ void\n // Direct byte buffers.\n \n static jobject\n-(JNICALL _Jv_JNI_NewDirectByteBuffer) (JNIEnv *, void *, jlong)\n+(JNICALL _Jv_JNI_NewDirectByteBuffer) (JNIEnv *, void *address, jlong length)\n {\n-  // For now we don't support this.\n-  return NULL;\n+  using namespace gnu::gcj;\n+  using namespace java::nio;\n+  return new DirectByteBufferImpl (reinterpret_cast<RawData *> (address),\n+\t\t\t\t   length);\n }\n \n static void *\n-(JNICALL _Jv_JNI_GetDirectBufferAddress) (JNIEnv *, jobject)\n+(JNICALL _Jv_JNI_GetDirectBufferAddress) (JNIEnv *, jobject buffer)\n {\n-  // For now we don't support this.\n-  return NULL;\n+  using namespace java::nio;\n+  DirectByteBufferImpl* bb = static_cast<DirectByteBufferImpl *> (buffer);\n+  return reinterpret_cast<void *> (bb->address);\n }\n \n static jlong\n-(JNICALL _Jv_JNI_GetDirectBufferCapacity) (JNIEnv *, jobject)\n+(JNICALL _Jv_JNI_GetDirectBufferCapacity) (JNIEnv *, jobject buffer)\n {\n-  // For now we don't support this.\n-  return -1;\n+  using namespace java::nio;\n+  DirectByteBufferImpl* bb = static_cast<DirectByteBufferImpl *> (buffer);\n+  return bb->capacity();\n }\n \n \f"}]}