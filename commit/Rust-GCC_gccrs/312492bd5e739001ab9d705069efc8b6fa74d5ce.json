{"sha": "312492bd5e739001ab9d705069efc8b6fa74d5ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyNDkyYmQ1ZTczOTAwMWFiOWQ3MDUwNjllZmM4YjZmYTc0ZDVjZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2017-01-20T00:10:11Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2017-01-20T00:10:11Z"}, "message": "[AArch64][3/4] New PAUTH builtins required by libgcc unwinder\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins): New\n\tentries for AARCH64_PAUTH_BUILTIN_XPACLRI,\n\tAARCH64_PAUTH_BUILTIN_PACIA1716, AARCH64_PAUTH_BUILTIN_AUTIA1716.\n\t(aarch64_init_pauth_hint_builtins): New.\n\t(aarch64_init_builtins): Call aarch64_init_pauth_hint_builtins.\n\t(aarch64_expand_builtin): Expand new builtins.\n\nFrom-SVN: r244669", "tree": {"sha": "6b88d8dcaa9a29ffcd331935ffd88398cfc491cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b88d8dcaa9a29ffcd331935ffd88398cfc491cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312492bd5e739001ab9d705069efc8b6fa74d5ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312492bd5e739001ab9d705069efc8b6fa74d5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312492bd5e739001ab9d705069efc8b6fa74d5ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312492bd5e739001ab9d705069efc8b6fa74d5ce/comments", "author": null, "committer": null, "parents": [{"sha": "115ac9ff61a51bca1ad98dff8192c23e685249ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/115ac9ff61a51bca1ad98dff8192c23e685249ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/115ac9ff61a51bca1ad98dff8192c23e685249ea"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "fbc9c303ea030b23b10ad2d848fd475e0bef3fe0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312492bd5e739001ab9d705069efc8b6fa74d5ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312492bd5e739001ab9d705069efc8b6fa74d5ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=312492bd5e739001ab9d705069efc8b6fa74d5ce", "patch": "@@ -1,3 +1,12 @@\n+2017-01-19  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins): New\n+\tentries for AARCH64_PAUTH_BUILTIN_XPACLRI,\n+\tAARCH64_PAUTH_BUILTIN_PACIA1716, AARCH64_PAUTH_BUILTIN_AUTIA1716.\n+\t(aarch64_init_pauth_hint_builtins): New.\n+\t(aarch64_init_builtins): Call aarch64_init_pauth_hint_builtins.\n+\t(aarch64_expand_builtin): Expand new builtins.\n+\n 2017-01-19  Jiong Wang  <jiong.wang@arm.com>\n \n \t* reg-notes.def (CFA_TOGGLE_RA_MANGLE): New reg-note."}, {"sha": "6c6530c43441dcbaba64703b8da20898c0d97dbc", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312492bd5e739001ab9d705069efc8b6fa74d5ce/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312492bd5e739001ab9d705069efc8b6fa74d5ce/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=312492bd5e739001ab9d705069efc8b6fa74d5ce", "patch": "@@ -376,6 +376,10 @@ enum aarch64_builtins\n   AARCH64_CRC32_BUILTIN_BASE,\n   AARCH64_CRC32_BUILTINS\n   AARCH64_CRC32_BUILTIN_MAX,\n+  /* ARMv8.3-A Pointer Authentication Builtins.  */\n+  AARCH64_PAUTH_BUILTIN_AUTIA1716,\n+  AARCH64_PAUTH_BUILTIN_PACIA1716,\n+  AARCH64_PAUTH_BUILTIN_XPACLRI,\n   AARCH64_BUILTIN_MAX\n };\n \n@@ -923,6 +927,33 @@ aarch64_init_fp16_types (void)\n   aarch64_fp16_ptr_type_node = build_pointer_type (aarch64_fp16_type_node);\n }\n \n+/* Pointer authentication builtins that will become NOP on legacy platform.\n+   Currently, these builtins are for internal use only (libgcc EH unwinder).  */\n+\n+void\n+aarch64_init_pauth_hint_builtins (void)\n+{\n+  /* Pointer Authentication builtins.  */\n+  tree ftype_pointer_auth\n+    = build_function_type_list (ptr_type_node, ptr_type_node,\n+\t\t\t\tunsigned_intDI_type_node, NULL_TREE);\n+  tree ftype_pointer_strip\n+    = build_function_type_list (ptr_type_node, ptr_type_node, NULL_TREE);\n+\n+  aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_AUTIA1716]\n+    = add_builtin_function (\"__builtin_aarch64_autia1716\", ftype_pointer_auth,\n+\t\t\t    AARCH64_PAUTH_BUILTIN_AUTIA1716, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_PACIA1716]\n+    = add_builtin_function (\"__builtin_aarch64_pacia1716\", ftype_pointer_auth,\n+\t\t\t    AARCH64_PAUTH_BUILTIN_PACIA1716, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_XPACLRI]\n+    = add_builtin_function (\"__builtin_aarch64_xpaclri\", ftype_pointer_strip,\n+\t\t\t    AARCH64_PAUTH_BUILTIN_XPACLRI, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+}\n+\n void\n aarch64_init_builtins (void)\n {\n@@ -951,6 +982,10 @@ aarch64_init_builtins (void)\n \n   aarch64_init_crc32_builtins ();\n   aarch64_init_builtin_rsqrt ();\n+\n+/* Initialize pointer authentication builtins which are backed by instructions\n+   in NOP encoding space.  */\n+  aarch64_init_pauth_hint_builtins ();\n }\n \n tree\n@@ -1293,6 +1328,44 @@ aarch64_expand_builtin (tree exp,\n \t}\n       emit_insn (pat);\n       return target;\n+\n+    case AARCH64_PAUTH_BUILTIN_AUTIA1716:\n+    case AARCH64_PAUTH_BUILTIN_PACIA1716:\n+    case AARCH64_PAUTH_BUILTIN_XPACLRI:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = force_reg (Pmode, expand_normal (arg0));\n+\n+      if (!target)\n+\ttarget = gen_reg_rtx (Pmode);\n+      else\n+\ttarget = force_reg (Pmode, target);\n+\n+      emit_move_insn (target, op0);\n+\n+      if (fcode == AARCH64_PAUTH_BUILTIN_XPACLRI)\n+\t{\n+\t  rtx lr = gen_rtx_REG (Pmode, R30_REGNUM);\n+\t  icode = CODE_FOR_xpaclri;\n+\t  emit_move_insn (lr, op0);\n+\t  emit_insn (GEN_FCN (icode) ());\n+\t  emit_move_insn (target, lr);\n+\t}\n+      else\n+\t{\n+\t  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+\t  rtx op1 = force_reg (Pmode, expand_normal (arg1));\n+\t  icode = (fcode == AARCH64_PAUTH_BUILTIN_PACIA1716\n+\t\t   ? CODE_FOR_paci1716 : CODE_FOR_auti1716);\n+\n+\t  rtx x16_reg = gen_rtx_REG (Pmode, R16_REGNUM);\n+\t  rtx x17_reg = gen_rtx_REG (Pmode, R17_REGNUM);\n+\t  emit_move_insn (x17_reg, op0);\n+\t  emit_move_insn (x16_reg, op1);\n+\t  emit_insn (GEN_FCN (icode) ());\n+\t  emit_move_insn (target, x17_reg);\n+\t}\n+\n+      return target;\n     }\n \n   if (fcode >= AARCH64_SIMD_BUILTIN_BASE && fcode <= AARCH64_SIMD_BUILTIN_MAX)"}]}