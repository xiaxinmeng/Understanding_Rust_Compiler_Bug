{"sha": "104099b897fe28c5d28b81a83d7655ea3b91c0c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0MDk5Yjg5N2ZlMjhjNWQyOGI4MWE4M2Q3NjU1ZWEzYjkxYzBjOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-10-11T08:19:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-10-11T08:19:03Z"}, "message": "decl.c (gnat_to_gnu_entity): New case to deal with the definition of named numbers.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Named_{Integer|Real}>:\n\tNew case to deal with the definition of named numbers.\n\t<E_Variable>: Minor tweaks.  Set DECL_IGNORED_P on the CONST_DECL\n\tif a corresponding variable is built.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Integer_Literal>: Return\n\terror_mark_node instead of aborting on overflow for named numbers.\n\t<N_Number_Declaration>: Reuse the <N_Object_Declaration> case and\n\tdeal with error_mark_node specifically.\n\t* gcc-interface/utils.c (create_var_decl): Do not set DECL_IGNORED_P\n\ton CONST_DECLs.\n\t(gnat_write_global_declarations): Output global constants.\n\nFrom-SVN: r276864", "tree": {"sha": "b9d711df9dcd97928a740c08d713f196d23cdb21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9d711df9dcd97928a740c08d713f196d23cdb21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/104099b897fe28c5d28b81a83d7655ea3b91c0c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104099b897fe28c5d28b81a83d7655ea3b91c0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104099b897fe28c5d28b81a83d7655ea3b91c0c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104099b897fe28c5d28b81a83d7655ea3b91c0c8/comments", "author": null, "committer": null, "parents": [{"sha": "848830dcf75bf887e7ff59a50a0be1463b7a8570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848830dcf75bf887e7ff59a50a0be1463b7a8570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848830dcf75bf887e7ff59a50a0be1463b7a8570"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "896efda0e88b75e5bef682351e4b365719c54780", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=104099b897fe28c5d28b81a83d7655ea3b91c0c8", "patch": "@@ -1,3 +1,17 @@\n+2019-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Named_{Integer|Real}>:\n+\tNew case to deal with the definition of named numbers.\n+\t<E_Variable>: Minor tweaks.  Set DECL_IGNORED_P on the CONST_DECL\n+\tif a corresponding variable is built.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Integer_Literal>: Return\n+\terror_mark_node instead of aborting on overflow for named numbers.\n+\t<N_Number_Declaration>: Reuse the <N_Object_Declaration> case and\n+\tdeal with error_mark_node specifically.\n+\t* gcc-interface/utils.c (create_var_decl): Do not set DECL_IGNORED_P\n+\ton CONST_DECLs.\n+\t(gnat_write_global_declarations): Output global constants.\n+\n 2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch7.adb (Check_Unnesting_In_Decls_Or_Stmts): When"}, {"sha": "4878f5e3f9f5ef1a352af0103ddb30508d8decd5", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=104099b897fe28c5d28b81a83d7655ea3b91c0c8", "patch": "@@ -585,6 +585,29 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tgcc_unreachable ();\n       }\n \n+    case E_Named_Integer:\n+    case E_Named_Real:\n+      {\n+\ttree gnu_ext_name = NULL_TREE;\n+\n+\tif (Is_Public (gnat_entity))\n+\t  gnu_ext_name = create_concat_name (gnat_entity, NULL);\n+\n+\t/* All references are supposed to be folded in the front-end.  */\n+\tgcc_assert (definition && gnu_expr);\n+\n+\tgnu_type = gnat_to_gnu_type (Etype (gnat_entity));\n+\tgnu_expr = convert (gnu_type, gnu_expr);\n+\n+\t/* Build a CONST_DECL for debugging purposes exclusively.  */\n+\tgnu_decl\n+\t  = create_var_decl (gnu_entity_name, gnu_ext_name, gnu_type,\n+\t\t\t     gnu_expr, true, Is_Public (gnat_entity),\n+\t\t\t     false, false, false, artificial_p,\n+\t\t\t     debug_info_p, NULL, gnat_entity, true);\n+      }\n+      break;\n+\n     case E_Constant:\n       /* Ignore constant definitions already marked with the error node.  See\n \t the N_Object_Declaration case of gnat_to_gnu for the rationale.  */\n@@ -1519,18 +1542,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t/* If this is a constant and we are defining it or it generates a real\n \t   symbol at the object level and we are referencing it, we may want\n \t   or need to have a true variable to represent it:\n-\t     - if optimization isn't enabled, for debugging purposes,\n \t     - if the constant is public and not overlaid on something else,\n \t     - if its address is taken,\n-\t     - if either itself or its type is aliased.  */\n+\t     - if it is aliased,\n+\t     - if optimization isn't enabled, for debugging purposes.  */\n \tif (TREE_CODE (gnu_decl) == CONST_DECL\n \t    && (definition || Sloc (gnat_entity) > Standard_Location)\n-\t    && ((!optimize && debug_info_p)\n-\t\t|| (Is_Public (gnat_entity)\n-\t\t    && No (Address_Clause (gnat_entity)))\n+\t    && ((Is_Public (gnat_entity) && No (Address_Clause (gnat_entity)))\n \t\t|| Address_Taken (gnat_entity)\n \t\t|| Is_Aliased (gnat_entity)\n-\t\t|| Is_Aliased (gnat_type)))\n+\t\t|| (!optimize && debug_info_p)))\n \t  {\n \t    tree gnu_corr_var\n \t      = create_var_decl (gnu_entity_name, gnu_ext_name, gnu_type,\n@@ -1540,6 +1561,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t\t\t attr_list, gnat_entity, false);\n \n \t    SET_DECL_CONST_CORRESPONDING_VAR (gnu_decl, gnu_corr_var);\n+\t    DECL_IGNORED_P (gnu_decl) = 1;\n \t  }\n \n \t/* If this is a constant, even if we don't need a true variable, we"}, {"sha": "1ee9732cac66804dcd7842c25858a223299f932f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=104099b897fe28c5d28b81a83d7655ea3b91c0c8", "patch": "@@ -6881,11 +6881,17 @@ gnat_to_gnu (Node_Id gnat_node)\n \tgnu_result = UI_To_gnu (Intval (gnat_node), gnu_type);\n \n \t/* If the result overflows (meaning it doesn't fit in its base type),\n-\t   abort.  We would like to check that the value is within the range\n-\t   of the subtype, but that causes problems with subtypes whose usage\n-\t   will raise Constraint_Error and with biased representation, so\n-\t   we don't.  */\n-\tgcc_assert (!TREE_OVERFLOW (gnu_result));\n+\t   abort, unless this is for a named number because that's not fatal.\n+\t   We would like to check that the value is within the range of the\n+\t   subtype, but that causes problems with subtypes whose usage will\n+\t   raise Constraint_Error and also with biased representation.  */\n+\tif (TREE_OVERFLOW (gnu_result))\n+\t  {\n+\t    if (Nkind (Parent (gnat_node)) == N_Number_Declaration)\n+\t      gnu_result = error_mark_node;\n+\t    else\n+\t      gcc_unreachable ();\n+\t  }\n       }\n       break;\n \n@@ -7030,6 +7036,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Object_Declaration:\n+    case N_Number_Declaration:\n     case N_Exception_Declaration:\n       gnat_temp = Defining_Entity (gnat_node);\n       gnu_result = alloc_stmt_list ();\n@@ -7052,8 +7059,15 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t  gnu_expr = gnat_to_gnu (Expression (gnat_node));\n \n-\t  if (type_annotate_only && TREE_CODE (gnu_expr) == ERROR_MARK)\n-\t    gnu_expr = NULL_TREE;\n+\t  if (TREE_CODE (gnu_expr) == ERROR_MARK)\n+\t    {\n+\t      /* If this is a named number for which we cannot manipulate\n+\t\t the value, just skip the declaration altogether.  */\n+\t      if (kind == N_Number_Declaration)\n+\t\tbreak;\n+\t      else if (type_annotate_only)\n+\t\tgnu_expr = NULL_TREE;\n+\t    }\n \t}\n       else\n \tgnu_expr = NULL_TREE;\n@@ -7163,7 +7177,6 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_result = alloc_stmt_list ();\n       break;\n \n-    case N_Number_Declaration:\n     case N_Package_Renaming_Declaration:\n       /* These are fully handled in the front end.  */\n       /* ??? For package renamings, find a way to use GENERIC namespaces so"}, {"sha": "e14645ae2163bd12603d307de669990be49b1aee", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104099b897fe28c5d28b81a83d7655ea3b91c0c8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=104099b897fe28c5d28b81a83d7655ea3b91c0c8", "patch": "@@ -2731,13 +2731,11 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n       && !have_global_bss_p ())\n     DECL_COMMON (var_decl) = 1;\n \n-  /* Do not emit debug info for a CONST_DECL if optimization isn't enabled,\n-     since we will create an associated variable.  Likewise for an external\n-     constant whose initializer is not absolute, because this would mean a\n-     global relocation in a read-only section which runs afoul of the PE-COFF\n-     run-time relocation mechanism.  */\n+  /* Do not emit debug info if not requested, or for an external constant whose\n+     initializer is not absolute because this would require a global relocation\n+     in a read-only section which runs afoul of the PE-COFF run-time relocation\n+     mechanism.  */\n   if (!debug_info_p\n-      || (TREE_CODE (var_decl) == CONST_DECL && !optimize)\n       || (extern_flag\n \t  && constant_p\n \t  && init\n@@ -5840,6 +5838,11 @@ gnat_write_global_declarations (void)\n \t&& DECL_FUNCTION_IS_DEF (iter))\n       debug_hooks->early_global_decl (iter);\n \n+  /* Output global constants.  */\n+  FOR_EACH_VEC_SAFE_ELT (global_decls, i, iter)\n+    if (TREE_CODE (iter) == CONST_DECL && !DECL_IGNORED_P (iter))\n+      debug_hooks->early_global_decl (iter);\n+\n   /* Then output the global variables.  We need to do that after the debug\n      information for global types is emitted so that they are finalized.  Skip\n      external global variables, unless we need to emit debug info for them:"}]}