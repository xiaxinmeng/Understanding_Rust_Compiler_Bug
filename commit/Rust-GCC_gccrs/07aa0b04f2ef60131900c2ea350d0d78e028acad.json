{"sha": "07aa0b04f2ef60131900c2ea350d0d78e028acad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhYTBiMDRmMmVmNjAxMzE5MDBjMmVhMzUwZDBkNzhlMDI4YWNhZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-01T22:55:25Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-01T22:55:25Z"}, "message": "cpplib.c: Include symcat.h.\n\n\t* cpplib.c: Include symcat.h.  Add 'origin' field to struct\n\tdirective.  Add origin values to DIRECTIVE_TABLE.  Generate\n\tthe strings and function names on the fly.  Take the #sccs\n\tentry out of the table if SCCS_DIRECTIVE is not defined.\n\t(_cpp_handle_directive): Decide if the # was at the beginning\n\tof the line here.  Issue -pedantic warnings for extended\n\tdirectives here.  Warn about K+R directives with the #\n\tindented, and C89/extended directives with the # not indented,\n\there.\n\t(do_import, do_include_next, do_warning, do_ident, do_sccs,\n\tdo_assert, do_unassert): Don't issue pedantic warning here.\n\n\t* cpphash.h: Add CPP_WTRADITIONAL macro.\n\t* cpplib.h (struct cpp_options): Rename warn_stringify to\n\twarn_traditional; update comments.\n\t* cppinit.c (handle_option): Set warn_traditional not\n\twarn_stringify.\n\t* cpphash.c: Replace CPP_OPTION (pfile, warn_stringify) with\n\tCPP_WTRADITIONAL (pfile).\n\t* cpplex.c (_cpp_lex_token): Don't decide if directives should\n\tbe ignored in -traditional mode here.\n\n\t* cpplex.c: Copy ISTABLE macros from cppinit.c, and adapt them\n\tto initialize speccase[] and trigraph_map[].  Delete all\n\treferences to pfile->input_speccase.  Always treat '?' as a\n\tspecial character.  Remove table-initialization code from\n\t_cpp_init_input_buffer.\n\n\t* cpplib.h (struct cpp_reader): Remove input_speccase field.\n\t* cppinit.c (cpp_cleanup): Don't free input_speccase.\n\nFrom-SVN: r32860", "tree": {"sha": "a3327cb688c6ff2c7d9052ffeb7c1c2b56f14d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3327cb688c6ff2c7d9052ffeb7c1c2b56f14d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07aa0b04f2ef60131900c2ea350d0d78e028acad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07aa0b04f2ef60131900c2ea350d0d78e028acad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07aa0b04f2ef60131900c2ea350d0d78e028acad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07aa0b04f2ef60131900c2ea350d0d78e028acad/comments", "author": null, "committer": null, "parents": [{"sha": "9f47f030f5a96a83863009b0f7f4e313695bb156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f47f030f5a96a83863009b0f7f4e313695bb156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f47f030f5a96a83863009b0f7f4e313695bb156"}], "stats": {"total": 193, "additions": 126, "deletions": 67}, "files": [{"sha": "3fb581dbed61b522fefbb3fdb963832ab1b8a009", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -1,5 +1,27 @@\n 2000-04-01  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* cpplib.c: Include symcat.h.  Add 'origin' field to struct\n+\tdirective.  Add origin values to DIRECTIVE_TABLE.  Generate\n+\tthe strings and function names on the fly.  Take the #sccs\n+\tentry out of the table if SCCS_DIRECTIVE is not defined.\n+\t(_cpp_handle_directive): Decide if the # was at the beginning\n+\tof the line here.  Issue -pedantic warnings for extended\n+\tdirectives here.  Warn about K+R directives with the #\n+\tindented, and C89/extended directives with the # not indented,\n+\there.\n+\t(do_import, do_include_next, do_warning, do_ident, do_sccs,\n+\tdo_assert, do_unassert): Don't issue pedantic warning here.\n+\n+\t* cpphash.h: Add CPP_WTRADITIONAL macro.\n+\t* cpplib.h (struct cpp_options): Rename warn_stringify to\n+\twarn_traditional; update comments.\n+\t* cppinit.c (handle_option): Set warn_traditional not\n+\twarn_stringify.\n+\t* cpphash.c: Replace CPP_OPTION (pfile, warn_stringify) with\n+\tCPP_WTRADITIONAL (pfile).\n+\t* cpplex.c (_cpp_lex_token): Don't decide if directives should\n+\tbe ignored in -traditional mode here.\n+\n \t* cpplex.c: Copy ISTABLE macros from cppinit.c, and adapt them\n \tto initialize speccase[] and trigraph_map[].  Delete all\n \treferences to pfile->input_speccase.  Always treat '?' as a"}, {"sha": "0eadc9a4c942d5bda1f54cd65ab5d79b4e95b758", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -406,7 +406,7 @@ collect_expansion (pfile, arglist)\n \t  if (last_token == STRIZE)\n \t    cpp_error (pfile, \"`#' is not followed by a macro argument name\");\n \n-\t  if (CPP_TRADITIONAL (pfile) || CPP_OPTION (pfile, warn_stringify))\n+\t  if (CPP_TRADITIONAL (pfile) || CPP_WTRADITIONAL (pfile))\n \t    goto maybe_trad_stringify;\n \t  else\n \t    goto norm;\n@@ -480,7 +480,7 @@ collect_expansion (pfile, arglist)\n \t\t\t     (int) argv[i].len, argv[i].name);\n \t\tcontinue;\n \t      }\n-\t    if (CPP_OPTION (pfile, warn_stringify))\n+\t    if (CPP_WTRADITIONAL (pfile))\n \t      cpp_warning (pfile, \"macro argument `%.*s' is stringified\",\n \t\t\t     (int) argv[i].len, argv[i].name);\n "}, {"sha": "3d0a147e4cdc4c76f3c78a1580c87828012bcff2", "filename": "gcc/cpphash.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -226,7 +226,9 @@ extern unsigned char _cpp_IStable[256];\n #define CPP_PRINT_DEPS(PFILE) CPP_OPTION (PFILE, print_deps)\n #define CPP_TRADITIONAL(PFILE) CPP_OPTION (PFILE, traditional)\n #define CPP_PEDANTIC(PFILE) \\\n-  (CPP_OPTION (PFILE, pedantic) && !CPP_BUFFER (pfile)->system_header_p)\n+  (CPP_OPTION (PFILE, pedantic) && !CPP_BUFFER (PFILE)->system_header_p)\n+#define CPP_WTRADITIONAL(PF) \\\n+  (CPP_OPTION (PF, warn_traditional) && !CPP_BUFFER (PF)->system_header_p)\n \n /* CPP_IS_MACRO_BUFFER is true if the buffer contains macro expansion.\n    (Note that it is false while we're expanding macro *arguments*.) */"}, {"sha": "93298efeec90523bd9c6cb9ddc10c583a124df7e", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -1647,7 +1647,7 @@ handle_option (pfile, argc, argv)\n \t      CPP_OPTION (pfile, warn_comments) = 1;\n \t    }\n \t  else if (!strcmp (argv[i], \"-Wtraditional\"))\n-\t    CPP_OPTION (pfile, warn_stringify) = 1;\n+\t    CPP_OPTION (pfile, warn_traditional) = 1;\n \t  else if (!strcmp (argv[i], \"-Wtrigraphs\"))\n \t    CPP_OPTION (pfile, warn_trigraphs) = 1;\n \t  else if (!strcmp (argv[i], \"-Wcomment\"))\n@@ -1661,7 +1661,7 @@ handle_option (pfile, argc, argv)\n \t  else if (!strcmp (argv[i], \"-Werror\"))\n \t    CPP_OPTION (pfile, warnings_are_errors) = 1;\n \t  else if (!strcmp (argv[i], \"-Wno-traditional\"))\n-\t    CPP_OPTION (pfile, warn_stringify) = 0;\n+\t    CPP_OPTION (pfile, warn_traditional) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n \t    CPP_OPTION (pfile, warn_trigraphs) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-comment\"))"}, {"sha": "b0d3f5f8cfc8cd3cd1d907c9ef31d75911cd81ae", "filename": "gcc/cpplex.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -729,12 +729,6 @@ _cpp_lex_token (pfile)\n \n       if (!pfile->only_seen_white)\n \tgoto randomchar;\n-      /* -traditional directives are recognized only with the # in\n-\t column 1.\n-\t XXX Layering violation.  */\n-      if (CPP_TRADITIONAL (pfile)\n-\t  && CPP_BUFFER (pfile)->cur - CPP_BUFFER (pfile)->line_base != 1)\n-\tgoto randomchar;\n       return CPP_DIRECTIVE;\n \n     case '\\\"':"}, {"sha": "747f6f5282172b388419f10bc76a7a10de944186", "filename": "gcc/cpplib.c", "status": "modified", "additions": 64, "deletions": 54, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -26,6 +26,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpphash.h\"\n #include \"hashtab.h\"\n #include \"intl.h\"\n+#include \"symcat.h\"\n \n #define PEEKN(N) (CPP_BUFFER (pfile)->rlimit - CPP_BUFFER (pfile)->cur >= (N) \\\n \t\t  ? CPP_BUFFER (pfile)->cur[N] : EOF)\n@@ -37,10 +38,11 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n struct directive\n {\n-  unsigned int length;\t\t/* Length of name */\n-  const char *name;\t\t/* Name of directive */\n   int (*func)\t\t\t/* Function to handle directive */\n     PARAMS ((cpp_reader *));\n+  const char *name;\t\t/* Name of directive */\n+  unsigned short length;\t/* Length of name */\n+  unsigned short origin;\t/* Origin of this directive */\n };\n \n /* Stack of conditionals currently in progress\n@@ -72,6 +74,9 @@ static int consider_directive_while_skipping\n \t\t\t\t\tPARAMS ((cpp_reader *, IF_STACK *));\n static int get_macro_name\t\tPARAMS ((cpp_reader *));\n \n+/* Values for the \"origin\" field of the table below.  */\n+enum { KANDR = 0, STDC89, EXTENSION };\n+\n /* This is the table of directive handlers.  It is ordered by\n    frequency of occurrence; the numbers at the end are directive\n    counts from all the source code I have lying around (egcs and libc\n@@ -82,26 +87,33 @@ static int get_macro_name\t\tPARAMS ((cpp_reader *));\n    of which all but #warning and #include_next are deprecated.  The name\n    is where the extension appears to have come from.  */\n \n+/* #sccs is not always recognized.  */\n+#ifdef SCCS_DIRECTIVE\n+# define SCCS_ENTRY D(sccs, T_SCCS, EXTENSION)\t\t/*     0 - SVR2? */\n+#else\n+# define SCCS_ENTRY /* nothing */\n+#endif\n+\n #define DIRECTIVE_TABLE\t\t\t\t\t\t\t\\\n-D(\"define\",\t  do_define,\t   T_DEFINE)\t\t/* 270554 */\t\\\n-D(\"include\",\t  do_include,\t   T_INCLUDE)\t\t/*  52262 */\t\\\n-D(\"endif\",\t  do_endif,\t   T_ENDIF)\t\t/*  45855 */\t\\\n-D(\"ifdef\",\t  do_ifdef,\t   T_IFDEF)\t\t/*  22000 */\t\\\n-D(\"if\",\t\t  do_if,\t   T_IF)\t\t/*  18162 */\t\\\n-D(\"else\",\t  do_else,\t   T_ELSE)\t\t/*   9863 */\t\\\n-D(\"ifndef\",\t  do_ifndef,\t   T_IFNDEF)\t\t/*   9675 */\t\\\n-D(\"undef\",\t  do_undef,\t   T_UNDEF)\t\t/*   4837 */\t\\\n-D(\"line\",\t  do_line,\t   T_LINE)\t\t/*   2465 */\t\\\n-D(\"elif\",\t  do_elif,\t   T_ELIF)\t\t/*    610 */\t\\\n-D(\"error\",\t  do_error,\t   T_ERROR)\t\t/*    475 */\t\\\n-D(\"pragma\",\t  do_pragma,\t   T_PRAGMA)\t\t/*    195 */\t\\\n-D(\"warning\",\t  do_warning,\t   T_WARNING)\t\t/*     22 - GNU   */ \\\n-D(\"include_next\", do_include_next, T_INCLUDE_NEXT)\t/*     19 - GNU   */ \\\n-D(\"ident\",\t  do_ident,\t   T_IDENT)\t\t/*     11 - SVR4  */ \\\n-D(\"import\",\t  do_import,\t   T_IMPORT)\t\t/*      0 - ObjC  */ \\\n-D(\"assert\",\t  do_assert,\t   T_ASSERT)\t\t/*      0 - SVR4  */ \\\n-D(\"unassert\",\t  do_unassert,\t   T_UNASSERT)\t\t/*      0 - SVR4  */ \\\n-D(\"sccs\",\t  do_sccs,\t   T_SCCS)\t\t/*      0 - SVR2? */\n+D(define,\tT_DEFINE,\tKANDR)\t\t/* 270554 */\t\t\\\n+D(include,\tT_INCLUDE,\tKANDR)\t\t/*  52262 */\t\t\\\n+D(endif,\tT_ENDIF,\tKANDR)\t\t/*  45855 */\t\t\\\n+D(ifdef,\tT_IFDEF,\tKANDR)\t\t/*  22000 */\t\t\\\n+D(if,\t\tT_IF,\t\tKANDR)\t\t/*  18162 */\t\t\\\n+D(else,\t\tT_ELSE,\t\tKANDR)\t\t/*   9863 */\t\t\\\n+D(ifndef,\tT_IFNDEF,\tKANDR)\t\t/*   9675 */\t\t\\\n+D(undef,\tT_UNDEF,\tKANDR)\t\t/*   4837 */\t\t\\\n+D(line,\t\tT_LINE,\t\tKANDR)\t\t/*   2465 */\t\t\\\n+D(elif,\t\tT_ELIF,\t\tKANDR)\t\t/*    610 */\t\t\\\n+D(error,\tT_ERROR,\tSTDC89)\t\t/*    475 */\t\t\\\n+D(pragma,\tT_PRAGMA,\tSTDC89)\t\t/*    195 */\t\t\\\n+D(warning,\tT_WARNING,\tEXTENSION)\t/*     22 - GNU   */\t\\\n+D(include_next,\tT_INCLUDE_NEXT,\tEXTENSION)\t/*     19 - GNU   */\t\\\n+D(ident,\tT_IDENT,\tEXTENSION)\t/*     11 - SVR4  */\t\\\n+D(import,\tT_IMPORT,\tEXTENSION)\t/*      0 - ObjC  */\t\\\n+D(assert,\tT_ASSERT,\tEXTENSION)\t/*      0 - SVR4  */\t\\\n+D(unassert,\tT_UNASSERT,\tEXTENSION)\t/*      0 - SVR4  */\t\\\n+SCCS_ENTRY\n \n /* Use the table to generate a series of prototypes, an enum for the\n    directive names, and an array of directive handlers.  */\n@@ -110,19 +122,20 @@ D(\"sccs\",\t  do_sccs,\t   T_SCCS)\t\t/*      0 - SVR2? */\n    instead of void, because some old compilers have trouble with\n    pointers to functions returning void.  */\n \n-#define D(name, fun, tag) static int fun PARAMS ((cpp_reader *));\n+#define D(name, t, o) static int CONCAT2(do_, name) PARAMS ((cpp_reader *));\n DIRECTIVE_TABLE\n #undef D\n \n-#define D(name, fun, tag) tag,\n+#define D(n, tag, o) tag,\n enum\n {\n   DIRECTIVE_TABLE\n   N_DIRECTIVES\n };\n #undef D\n \n-#define D(name, fun, tag) { sizeof name - 1, name, fun },\n+#define D(name, t, origin) \\\n+{ CONCAT2(do_, name), STRINGX(name), sizeof STRINGX(name) - 1, origin },\n static const struct directive dtable[] =\n {\n DIRECTIVE_TABLE\n@@ -138,6 +151,7 @@ _cpp_handle_directive (pfile)\n      cpp_reader *pfile;\n {\n   int c, i;\n+  int hash_at_bol;\n   unsigned int len;\n   U_CHAR *ident;\n   long old_written = CPP_WRITTEN (pfile);\n@@ -148,6 +162,10 @@ _cpp_handle_directive (pfile)\n       return 0;\n     }\n \n+  /* -traditional directives are recognized only with the # in column 1.\n+     XXX Layering violation.  */\n+  hash_at_bol = (CPP_BUFFER (pfile)->cur - CPP_BUFFER (pfile)->line_base == 1);\n+  \n   _cpp_skip_hspace (pfile);\n \n   c = PEEKC ();\n@@ -163,7 +181,7 @@ _cpp_handle_directive (pfile)\n       if (CPP_PEDANTIC (pfile)\n \t  && ! CPP_OPTION (pfile, preprocessed)\n \t  && ! CPP_BUFFER (pfile)->manual_pop)\n-\tcpp_pedwarn (pfile, \"`#' followed by integer\");\n+\tcpp_pedwarn (pfile, \"# followed by integer\");\n       do_line (pfile);\n       return 1;\n     }\n@@ -180,7 +198,7 @@ _cpp_handle_directive (pfile)\n   len = CPP_PWRITTEN (pfile) - ident;\n   if (len == 0)\n     {\n-      /* A line of just `#' becomes blank.  A line with something\n+      /* A line of just # becomes blank.  A line with something\n \t other than an identifier after the # is reparsed as a non-\n \t directive line.  */\n       CPP_SET_WRITTEN (pfile, old_written);\n@@ -206,10 +224,26 @@ _cpp_handle_directive (pfile)\n       cpp_error (pfile, \"`#%s' may not be used inside a macro argument\",\n \t\t dtable[i].name);\n       _cpp_skip_rest_of_line (pfile);\n+      return 1;\n     }\n-  else\n-    (*dtable[i].func) (pfile);\n \n+  if (CPP_PEDANTIC (pfile) && dtable[i].origin == EXTENSION)\n+    cpp_pedwarn (pfile, \"ISO C does not allow #%s\", dtable[i].name);\n+  if (CPP_WTRADITIONAL (pfile))\n+    {\n+      if (!hash_at_bol && dtable[i].origin == KANDR)\n+\tcpp_warning (pfile, \"the # in #%s should be at the left margin\",\n+\t\t     dtable[i].name);\n+      else if (hash_at_bol && dtable[i].origin != KANDR)\n+\tcpp_warning (pfile,\n+\t\t     \"the # in #%s should not be at the left margin\",\n+\t\t     dtable[i].name);\n+    }\n+\n+  if (CPP_TRADITIONAL (pfile) && !hash_at_bol)\n+    return 0;\n+\n+  (*dtable[i].func) (pfile);\n   return 1;\n }\n \n@@ -527,9 +561,6 @@ do_import (pfile)\n   unsigned int len;\n   char *token;\n \n-  if (CPP_PEDANTIC (pfile))\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#import'\");\n-\n   if (CPP_OPTION (pfile, warn_import)\n       && !CPP_BUFFER (pfile)->system_header_p && !pfile->import_warning)\n     {\n@@ -559,9 +590,6 @@ do_include_next (pfile)\n   char *token;\n   struct file_name_list *search_start = 0;\n \n-  if (CPP_PEDANTIC (pfile))\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#include_next'\");\n-  \n   len = parse_include (pfile, dtable[T_INCLUDE_NEXT].name);\n   if (len == 0)\n     return 0;\n@@ -835,9 +863,6 @@ do_warning (pfile)\n   _cpp_skip_rest_of_line (pfile);\n   limit = CPP_BUFFER (pfile)->cur;\n \n-  if (CPP_PEDANTIC (pfile))\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#warning'\");\n-\n   cpp_warning (pfile, \"#warning %.*s\", (int)(limit - text), text);\n   return 0;\n }\n@@ -850,10 +875,6 @@ do_ident (pfile)\n {\n   long old_written = CPP_WRITTEN (pfile);\n \n-  /* Allow #ident in system headers, since that's not user's fault.  */\n-  if (CPP_PEDANTIC (pfile))\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#ident'\");\n-\n   CPP_PUTS (pfile, \"#ident \", 7);\n \n   /* Next token should be a string constant.  */\n@@ -1066,20 +1087,15 @@ do_pragma_poison (pfile)\n }\n  \n /* Just ignore #sccs, on systems where we define it at all.  */\n+#ifdef SCCS_DIRECTIVE\n static int\n do_sccs (pfile)\n      cpp_reader *pfile;\n {\n-#ifdef SCCS_DIRECTIVE\n-  if (CPP_PEDANTIC (pfile))\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#sccs'\");\n-#else\n-  cpp_error (pfile, \"undefined or invalid # directive `sccs'\");\n-#endif\n   _cpp_skip_rest_of_line (pfile);\n   return 0;\n }\n-\n+#endif\n \n /* We've found an `#if' directive.  If the only thing before it in\n    this file is white space, and if it is of the form\n@@ -1612,9 +1628,6 @@ do_assert (pfile)\n   size_t blen, tlen;\n   unsigned long bhash, thash;\n \n-  if (CPP_PEDANTIC (pfile) && pfile->done_initializing)\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#assert'\");\n-\n   _cpp_skip_hspace (pfile);\n   sym = CPP_PWRITTEN (pfile);\t/* remember where it starts */\n   ret = _cpp_parse_assertion (pfile);\n@@ -1678,9 +1691,6 @@ do_unassert (pfile)\n   long baselen, thislen;\n   HASHNODE *base, *this, *next;\n   \n-  if (CPP_PEDANTIC (pfile) && pfile->done_initializing)\n-    cpp_pedwarn (pfile, \"ANSI C does not allow `#unassert'\");\n-\n   _cpp_skip_hspace (pfile);\n \n   sym = CPP_PWRITTEN (pfile);\t/* remember where it starts */"}, {"sha": "a8faf33ad1588fa1fa35c80deb3b5a69c4562dc3", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -236,8 +236,9 @@ struct cpp_options\n   unsigned char warn_import;\n \n   /* Nonzero means warn if a macro argument is (or would be)\n-     stringified with -traditional.  */\n-  unsigned char warn_stringify;\n+     stringified with -traditional, and warn about directives\n+     with the # indented from the beginning of the line.  */\n+  unsigned char warn_traditional;\n \n   /* Nonzero means turn warnings into errors.  */\n   unsigned char warnings_are_errors;"}, {"sha": "8395c80441b6f9c3030d6c957644aaf108d9cee4", "filename": "gcc/testsuite/gcc.dg/cpp-tradwarn1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aa0b04f2ef60131900c2ea350d0d78e028acad/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn1.c?ref=07aa0b04f2ef60131900c2ea350d0d78e028acad", "patch": "@@ -0,0 +1,30 @@\n+/* Test for warnings about nontraditional directives.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-pedantic -Wtraditional\" } */\n+\n+/* Block 1: K+R directives should have the # at the left margin.  */\n+\n+#define foo bar\t\t/* { dg-bogus \"left margin\" \"^#kandr\"     } */\n+# define foo bar\t/* { dg-bogus \"left margin\" \"^# kandr\"    } */\n+ #define foo bar\t/* { dg-warning \"left margin\" \"^ #kandr\"  } */\n+ # define foo bar\t/* { dg-warning \"left margin\" \"^ # kandr\" } */\n+\n+/* Block 2: C89 directives should not have the # at the left margin.  */\n+\n+#pragma whatever\t/* { dg-warning \"left margin\" \"^#c89\"     } */\n+# pragma whatever\t/* { dg-warning \"left margin\" \"^# c89\"    } */\n+ #pragma whatever\t/* { dg-bogus \"left margin\" \"^ #c89\"      } */\n+ # pragma whatever\t/* { dg-bogus \"left margin\" \"^ # c89\"     } */\n+\n+/* Block 3: Extensions should not have the # at the left margin,\n+   _and_ they should get a -pedantic warning. */\n+\n+#assert foo(bar)\t/* { dg-warning \"left margin\" \"^#ext\"    } */\n+# assert bar(baz)\t/* { dg-warning \"left margin\" \"^# ext\"   } */\n+ #assert baz(quux)\t/* { dg-bogus \"left margin\" \"^ #ext\"     } */\n+ # assert quux(weeble)\t/* { dg-bogus \"left margin\" \"^ # ext\"    } */\n+\n+/* { dg-warning \"ISO C does not\" \"extension warning\" { target native } 22 } */\n+/* { dg-warning \"ISO C does not\" \"extension warning\" { target native } 23 } */\n+/* { dg-warning \"ISO C does not\" \"extension warning\" { target native } 24 } */\n+/* { dg-warning \"ISO C does not\" \"extension warning\" { target native } 25 } */"}]}