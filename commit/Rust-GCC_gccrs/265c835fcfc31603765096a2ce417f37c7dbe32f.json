{"sha": "265c835fcfc31603765096a2ce417f37c7dbe32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1YzgzNWZjZmMzMTYwMzc2NTA5NmEyY2U0MTdmMzdjN2RiZTMyZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-17T18:11:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-17T18:11:49Z"}, "message": "rx: Cleanup non-VOIDmode SETs.\n\nSET should always have VOIDmode.  A number of places used\nSImode or QImode for the mode of the SET rtx itself.\n\nFrom-SVN: r168925", "tree": {"sha": "aa1e3a2af099b3aceb0884fe387d3b44ec2b7194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1e3a2af099b3aceb0884fe387d3b44ec2b7194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265c835fcfc31603765096a2ce417f37c7dbe32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c835fcfc31603765096a2ce417f37c7dbe32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265c835fcfc31603765096a2ce417f37c7dbe32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c835fcfc31603765096a2ce417f37c7dbe32f/comments", "author": null, "committer": null, "parents": [{"sha": "b4d83be3f3b2093a4fe071908571434781242522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d83be3f3b2093a4fe071908571434781242522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d83be3f3b2093a4fe071908571434781242522"}], "stats": {"total": 282, "additions": 88, "deletions": 194}, "files": [{"sha": "a71a8276b1c4ea4113b45d4164bc4e7b334fede8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c835fcfc31603765096a2ce417f37c7dbe32f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c835fcfc31603765096a2ce417f37c7dbe32f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=265c835fcfc31603765096a2ce417f37c7dbe32f", "patch": "@@ -1,5 +1,17 @@\n 2011-01-17  Richard Henderson  <rth@redhat.com>\n \n+\t* config/rx/rx.c (gen_rx_store_vector): Use VOIDmode for gen_rtx_SET.\n+\t(gen_rx_rtsd_vector, gen_rx_popm_vector): Likewise.\n+\t* config/rx/rx.md (pop_and_return): Use VOIDmode for SET.\n+\t(stack_push, stack_pushm, stack_pop, stack_popm): Likewise.\n+\t(bitset, bitset_in_memory): Likewise.\n+\t(bitinvert, bitinvert_in_memory): Likewise.\n+\t(bitclr, bitclr_in_memory): Likewise.\n+\t(insv, sync_lock_test_and_setsi, movstr, rx_movstr): Likewise.\n+\t(rx_strend, rx_cmpstrn): Likewise.\n+\t(rx_setmem): Likewise.  Make the source BLKmode to match the dest.\n+\t(bitop peep2 patterns): Remove.\n+\n \t* config/rx/rx.c (rx_match_ccmode): New.\n \t* config/rx/rx-protos.h: Update.\n \t* config/rx/rx.md (abssi2): Clobber, don't set flags."}, {"sha": "16646aeb4f24fb66e0a7ce1b7fb3e1b544e444cf", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c835fcfc31603765096a2ce417f37c7dbe32f/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c835fcfc31603765096a2ce417f37c7dbe32f/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=265c835fcfc31603765096a2ce417f37c7dbe32f", "patch": "@@ -1249,13 +1249,13 @@ gen_rx_store_vector (unsigned int low, unsigned int high)\n   vector = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n   XVECEXP (vector, 0, 0) =\n-    gen_rtx_SET (SImode, stack_pointer_rtx,\n+    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t gen_rtx_MINUS (SImode, stack_pointer_rtx,\n \t\t\t\tGEN_INT ((count - 1) * UNITS_PER_WORD)));\n \n   for (i = 0; i < count - 1; i++)\n     XVECEXP (vector, 0, i + 1) =\n-      gen_rtx_SET (SImode,\n+      gen_rtx_SET (VOIDmode,\n \t\t   gen_rtx_MEM (SImode,\n \t\t\t\tgen_rtx_MINUS (SImode, stack_pointer_rtx,\n \t\t\t\t\t       GEN_INT ((i + 1) * UNITS_PER_WORD))),\n@@ -1479,12 +1479,12 @@ gen_rx_rtsd_vector (unsigned int adjust, unsigned int low, unsigned int high)\n   vector = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n   XVECEXP (vector, 0, 0) =\n-    gen_rtx_SET (SImode, stack_pointer_rtx,\n+    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t plus_constant (stack_pointer_rtx, adjust));\n \n   for (i = 0; i < count - 2; i++)\n     XVECEXP (vector, 0, i + 1) =\n-      gen_rtx_SET (SImode,\n+      gen_rtx_SET (VOIDmode,\n \t\t   gen_rtx_REG (SImode, low + i),\n \t\t   gen_rtx_MEM (SImode,\n \t\t\t\ti == 0 ? stack_pointer_rtx\n@@ -1508,13 +1508,13 @@ gen_rx_popm_vector (unsigned int low, unsigned int high)\n   vector = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n   XVECEXP (vector, 0, 0) =\n-    gen_rtx_SET (SImode, stack_pointer_rtx,\n+    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t plus_constant (stack_pointer_rtx,\n \t\t\t\t(count - 1) * UNITS_PER_WORD));\n \n   for (i = 0; i < count - 1; i++)\n     XVECEXP (vector, 0, i + 1) =\n-      gen_rtx_SET (SImode,\n+      gen_rtx_SET (VOIDmode,\n \t\t   gen_rtx_REG (SImode, low + i),\n \t\t   gen_rtx_MEM (SImode,\n \t\t\t\ti == 0 ? stack_pointer_rtx"}, {"sha": "7d5a93b1655c75f96d4df92389c3d0f38227aa66", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 70, "deletions": 188, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c835fcfc31603765096a2ce417f37c7dbe32f/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c835fcfc31603765096a2ce417f37c7dbe32f/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=265c835fcfc31603765096a2ce417f37c7dbe32f", "patch": "@@ -429,9 +429,9 @@\n \n (define_insn \"pop_and_return\"\n   [(match_parallel 1 \"rx_rtsd_vector\"\n-\t\t   [(set:SI (reg:SI SP_REG)\n-\t\t\t    (plus:SI (reg:SI SP_REG)\n-\t\t\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n+     [(set (reg:SI SP_REG)\n+\t   (plus:SI (reg:SI SP_REG)\n+\t\t    (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n   \"reload_completed\"\n   {\n     rx_emit_stack_popm (operands, false);\n@@ -656,21 +656,21 @@\n )\n \n (define_insn \"stack_push\"\n-  [(set:SI (reg:SI SP_REG)\n-\t   (minus:SI (reg:SI SP_REG)\n-\t\t     (const_int 4)))\n-   (set:SI (mem:SI (reg:SI SP_REG))\n-\t   (match_operand:SI 0 \"register_operand\" \"r\"))]\n+  [(set (reg:SI SP_REG)\n+\t(minus:SI (reg:SI SP_REG)\n+\t\t  (const_int 4)))\n+   (set (mem:SI (reg:SI SP_REG))\n+\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"push.l\\t%0\"\n   [(set_attr \"length\" \"2\")]\n )\n \n (define_insn \"stack_pushm\"\n   [(match_parallel 1 \"rx_store_multiple_vector\"\n-\t\t   [(set:SI (reg:SI SP_REG)\n-\t\t\t    (minus:SI (reg:SI SP_REG)\n-\t\t\t\t      (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n+     [(set (reg:SI SP_REG)\n+\t   (minus:SI (reg:SI SP_REG)\n+\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n   \"reload_completed\"\n   {\n     rx_emit_stack_pushm (operands);\n@@ -681,11 +681,11 @@\n )\n \n (define_insn \"stack_pop\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t   (mem:SI (reg:SI SP_REG)))\n-   (set:SI (reg:SI SP_REG)\n-\t   (plus:SI (reg:SI SP_REG)\n-\t\t    (const_int 4)))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mem:SI (reg:SI SP_REG)))\n+   (set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (const_int 4)))]\n   \"\"\n   \"pop\\t%0\"\n   [(set_attr \"length\" \"2\")\n@@ -694,9 +694,9 @@\n \n (define_insn \"stack_popm\"\n   [(match_parallel 1 \"rx_load_multiple_vector\"\n-\t\t   [(set:SI (reg:SI SP_REG)\n-\t\t\t    (plus:SI (reg:SI SP_REG)\n-\t\t\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n+     [(set (reg:SI SP_REG)\n+\t   (plus:SI (reg:SI SP_REG)\n+\t\t    (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n   \"reload_completed\"\n   {\n     rx_emit_stack_popm (operands, true);\n@@ -1525,210 +1525,92 @@\n ;; of three instructions at a time.\n \n (define_insn \"bitset\"\n-  [(set:SI (match_operand:SI                    0 \"register_operand\" \"=r\")\n-\t   (ior:SI (match_operand:SI            1 \"register_operand\" \"0\")\n-\t\t   (ashift:SI (const_int 1)\n-\t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"ri\"))))]\n+  [(set (match_operand:SI                    0 \"register_operand\" \"=r\")\n+\t(ior:SI (match_operand:SI            1 \"register_operand\" \"0\")\n+\t\t(ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"ri\"))))]\n   \"\"\n   \"bset\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n )\n \n (define_insn \"bitset_in_memory\"\n-  [(set:QI (match_operand:QI                    0 \"memory_operand\" \"=m\")\n-\t   (ior:QI (match_operand:QI            1 \"memory_operand\" \"0\")\n-\t\t   (ashift:QI (const_int 1)\n-\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"ri\"))))]\n+  [(set (match_operand:QI                    0 \"memory_operand\" \"=m\")\n+\t(ior:QI (match_operand:QI            1 \"memory_operand\" \"0\")\n+\t\t(ashift:QI (const_int 1)\n+\t\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"ri\"))))]\n   \"\"\n   \"bset\\t%2, %0.B\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"timings\" \"34\")]\n )\n \n-;; (set (reg A) (const_int 1))\n-;; (set (reg A) (ashift (reg A) (reg B)))\n-;; (set (reg C) (ior (reg A) (reg C)))\n-(define_peephole2\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (const_int 1))\n-   (set:SI (match_dup 0)\n-\t   (ashift:SI (match_dup 0)\n-\t\t      (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set:SI (match_operand:SI 2 \"register_operand\" \"\")\n-\t   (ior:SI (match_dup 0)\n-\t\t   (match_dup 2)))]\n-  \"dead_or_set_p (insn, operands[0])\"\n-  [(set:SI (match_dup 2)\n-\t   (ior:SI (match_dup 2)\n-\t\t   (ashift:SI (const_int 1)\n-\t\t\t      (match_dup 1))))]\n-)\n-  \n-;; (set (reg A) (const_int 1))\n-;; (set (reg A) (ashift (reg A) (reg B)))\n-;; (set (reg A) (ior (reg A) (reg C)))\n-;; (set (reg C) (reg A)\n-(define_peephole2\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (const_int 1))\n-   (set:SI (match_dup 0)\n-\t   (ashift:SI (match_dup 0)\n-\t\t      (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set:SI (match_dup 0)\n-\t   (ior:SI (match_dup 0)\n-\t\t   (match_operand:SI 2 \"register_operand\" \"\")))\n-   (set:SI (match_dup 2) (match_dup 0))]\n-  \"dead_or_set_p (insn, operands[0])\"\n-  [(set:SI (match_dup 2)\n-\t   (ior:SI (match_dup 2)\n-\t\t   (ashift:SI (const_int 1)\n-\t\t\t      (match_dup 1))))]\n-)\n-  \n (define_insn \"bitinvert\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n-\t   (xor:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (ashift:SI (const_int 1)\n-\t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"ri\"))))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t(ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"ri\"))))]\n   \"\"\n   \"bnot\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n )\n \n (define_insn \"bitinvert_in_memory\"\n-  [(set:QI (match_operand:QI 0 \"memory_operand\" \"+m\")\n-\t   (xor:QI (match_operand:QI 1 \"register_operand\" \"0\")\n-\t\t   (ashift:QI (const_int 1)\n-\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"ri\"))))]\n+  [(set (match_operand:QI 0 \"memory_operand\" \"+m\")\n+\t(xor:QI (match_operand:QI 1 \"register_operand\" \"0\")\n+\t\t(ashift:QI (const_int 1)\n+\t\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"ri\"))))]\n   \"\"\n   \"bnot\\t%2, %0.B\"\n   [(set_attr \"length\" \"5\")\n    (set_attr \"timings\" \"33\")]\n )\n \n-;; (set (reg A) (const_int 1))\n-;; (set (reg A) (ashift (reg A) (reg B)))\n-;; (set (reg C) (xor (reg A) (reg C)))\n-(define_peephole2\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (const_int 1))\n-   (set:SI (match_dup 0)\n-\t   (ashift:SI (match_dup 0)\n-\t\t      (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set:SI (match_operand:SI 2 \"register_operand\" \"\")\n-\t   (xor:SI (match_dup 0)\n-\t\t   (match_dup 2)))]\n-  \"dead_or_set_p (insn, operands[0])\"\n-  [(set:SI (match_dup 2)\n-\t   (xor:SI (match_dup 2)\n-\t\t   (ashift:SI (const_int 1)\n-\t\t\t      (match_dup 1))))]\n-  \"\"\n-)\n-  \n-;; (set (reg A) (const_int 1))\n-;; (set (reg A) (ashift (reg A) (reg B)))\n-;; (set (reg A) (xor (reg A) (reg C)))\n-;; (set (reg C) (reg A))\n-(define_peephole2\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (const_int 1))\n-   (set:SI (match_dup 0)\n-\t   (ashift:SI (match_dup 0)\n-\t\t      (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set:SI (match_dup 0)\n-\t   (xor:SI (match_dup 0)\n-\t\t   (match_operand:SI 2 \"register_operand\" \"\")))\n-   (set:SI (match_dup 2) (match_dup 0))]\n-  \"dead_or_set_p (insn, operands[0])\"\n-  [(set:SI (match_dup 2)\n-\t   (xor:SI (match_dup 2)\n-\t\t   (ashift:SI (const_int 1)\n-\t\t\t      (match_dup 1))))]\n-  \"\"\n-)\n-\n (define_insn \"bitclr\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t   (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (not:SI (ashift:SI (const_int 1)\n-\t\t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t(not:SI\n+\t\t  (ashift:SI\n+\t\t    (const_int 1)\n+\t\t    (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))))]\n   \"\"\n   \"bclr\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n )\n \n (define_insn \"bitclr_in_memory\"\n-  [(set:QI (match_operand:QI 0 \"memory_operand\" \"=m\")\n-\t   (and:QI (match_operand:QI 1 \"memory_operand\" \"0\")\n-\t\t   (not:QI (ashift:QI (const_int 1)\n-\t\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"ri\")))))]\n+  [(set (match_operand:QI 0 \"memory_operand\" \"=m\")\n+\t(and:QI (match_operand:QI 1 \"memory_operand\" \"0\")\n+\t\t(not:QI\n+\t\t  (ashift:QI\n+\t\t    (const_int 1)\n+\t\t    (match_operand:QI 2 \"nonmemory_operand\" \"ri\")))))]\n   \"\"\n   \"bclr\\t%2, %0.B\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"timings\" \"34\")]\n )\n \n-;; (set (reg A) (const_int -2))\n-;; (set (reg A) (rotate (reg A) (reg B)))\n-;; (set (reg C) (and (reg A) (reg C)))\n-(define_peephole2\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (const_int -2))\n-   (set:SI (match_dup 0)\n-\t   (rotate:SI (match_dup 0)\n-\t\t      (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set:SI (match_operand:SI 2 \"register_operand\" \"\")\n-\t   (and:SI (match_dup 0)\n-\t\t   (match_dup 2)))]\n-  \"dead_or_set_p (insn, operands[0])\"\n-  [(set:SI (match_dup 2)\n-\t   (and:SI (match_dup 2)\n-\t\t   (not:SI (ashift:SI (const_int 1)\n-\t\t\t\t      (match_dup 1)))))]\n-)\n-  \n-;; (set (reg A) (const_int -2))\n-;; (set (reg A) (rotate (reg A) (reg B)))\n-;; (set (reg A) (and (reg A) (reg C)))\n-;; (set (reg C) (reg A)\n-(define_peephole2\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (const_int -2))\n-   (set:SI (match_dup 0)\n-\t   (rotate:SI (match_dup 0)\n-\t\t      (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set:SI (match_dup 0)\n-\t   (and:SI (match_dup 0)\n-\t\t   (match_operand:SI 2 \"register_operand\" \"\")))\n-   (set:SI (match_dup 2) (match_dup 0))]\n-  \"dead_or_set_p (insn, operands[0])\"\n-  [(set:SI (match_dup 2)\n-\t   (and:SI (match_dup 2)\n-\t\t   (not:SI (ashift:SI (const_int 1)\n-\t\t\t\t      (match_dup 1)))))]\n-)\n-\n (define_expand \"insv\"\n-  [(set:SI (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\") ;; Destination\n-\t\t            (match_operand    1 \"immediate_operand\")    ;; # of bits to set\n-\t\t\t    (match_operand    2 \"immediate_operand\"))   ;; Starting bit\n-\t   (match_operand\t              3 \"immediate_operand\"))]  ;; Bits to insert\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\") ;; Destination\n+\t\t         (match_operand    1 \"immediate_operand\")    ;; # of bits to set\n+\t\t\t (match_operand    2 \"immediate_operand\"))   ;; Starting bit\n+\t(match_operand\t              3 \"immediate_operand\"))]       ;; Bits to insert\n   \"\"\n   {\n     if (rx_expand_insv (operands))\n       DONE;\n     FAIL;\n   }\n-)   \n+)\n \f\n ;; Atomic exchange operation.\n \n (define_insn \"sync_lock_test_and_setsi\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\"   \"=r,r\")\n-\t   (match_operand:SI 1 \"rx_compare_operand\" \"=r,Q\"))\n-   (set:SI (match_dup 1)\n-\t   (match_operand:SI 2 \"register_operand\"    \"0,0\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"   \"=r,r\")\n+\t(match_operand:SI 1 \"rx_compare_operand\" \"=r,Q\"))\n+   (set (match_dup 1)\n+\t(match_operand:SI 2 \"register_operand\"    \"0,0\"))]\n   \"\"\n   \"xchg\\t%1, %0\"\n   [(set_attr \"length\" \"3,6\")\n@@ -1738,9 +1620,9 @@\n ;; Block move functions.\n \n (define_expand \"movstr\"\n-  [(set:SI (match_operand:BLK 1 \"memory_operand\")    ;; Dest\n-\t   (match_operand:BLK 2 \"memory_operand\"))   ;; Source\n-   (use (match_operand:SI     0 \"register_operand\")) ;; Updated Dest\n+  [(set (match_operand:BLK 1 \"memory_operand\")    ;; Dest\n+\t(match_operand:BLK 2 \"memory_operand\"))   ;; Source\n+   (use (match_operand:SI  0 \"register_operand\")) ;; Updated Dest\n   ]\n   \"\"\n   {\n@@ -1763,8 +1645,8 @@\n )\n \n (define_insn \"rx_movstr\"\n-  [(set:SI (mem:BLK (reg:SI 1))\n-\t   (mem:BLK (reg:SI 2)))\n+  [(set (mem:BLK (reg:SI 1))\n+\t(mem:BLK (reg:SI 2)))\n    (unspec_volatile:BLK [(reg:SI 1) (reg:SI 2) (reg:SI 3)] UNSPEC_MOVSTR)\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n@@ -1776,8 +1658,8 @@\n )\n \n (define_insn \"rx_strend\"\n-  [(set:SI (match_operand:SI                      0 \"register_operand\" \"=r\")\n-\t   (unspec_volatile:SI [(match_operand:SI 1 \"register_operand\"  \"r\")\n+  [(set (match_operand:SI                      0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"register_operand\"  \"r\")\n \t\t\t\t(reg:SI 3)] UNSPEC_STRLEN))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n@@ -1858,8 +1740,8 @@\n )\n \n (define_insn \"rx_setmem\"\n-  [(set:BLK (mem:BLK (reg:SI 1)) (reg 2))\n-   (unspec_volatile:BLK [(reg:SI 1) (reg:SI 2) (reg:SI 3)] UNSPEC_SETMEM)\n+  [(set (mem:BLK (reg:SI 1))\n+\t(unspec_volatile:BLK [(reg:SI 1) (reg:SI 2) (reg:SI 3)] UNSPEC_SETMEM))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 3))]\n   \"\"\n@@ -1912,11 +1794,11 @@\n )\n \n (define_insn \"rx_cmpstrn\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t   (unspec_volatile:SI [(reg:SI 1) (reg:SI 2) (reg:SI 3)]\n-\t\t\t       UNSPEC_CMPSTRN))\n-   (use (match_operand:BLK   1 \"memory_operand\" \"m\"))\n-   (use (match_operand:BLK   2 \"memory_operand\" \"m\"))\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(reg:SI 1) (reg:SI 2) (reg:SI 3)]\n+\t\t\t    UNSPEC_CMPSTRN))\n+   (use (match_operand:BLK 1 \"memory_operand\" \"m\"))\n+   (use (match_operand:BLK 2 \"memory_operand\" \"m\"))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n    (clobber (reg:SI 3))"}]}