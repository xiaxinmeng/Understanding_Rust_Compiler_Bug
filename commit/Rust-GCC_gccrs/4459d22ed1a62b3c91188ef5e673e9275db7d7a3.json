{"sha": "4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1OWQyMmVkMWE2MmIzYzkxMTg4ZWY1ZTY3M2U5Mjc1ZGI3ZDdhMw==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-09-23T08:09:50Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-09-23T08:09:50Z"}, "message": "algobase.h: Uglify internal identifiers; correct line breaks.\n\n2009-09-23  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/algobase.h: Uglify internal identifiers;\n        correct line breaks.\n        * include/parallel/algo.h: Likewise.\n        * include/parallel/base.h: Likewise.\n        * include/parallel/equally_split.h: Likewise.\n        * include/parallel/find.h: Likewise.\n        * include/parallel/find_selectors.h: Likewise.\n        * include/parallel/for_each_selectors.h: Likewise.\n        * include/parallel/list_partition.h: Likewise.\n        * include/parallel/losertree.h: Likewise.\n        * include/parallel/merge.h: Likewise.\n        * include/parallel/multiseq_selection.h: Likewise.\n        * include/parallel/multiway_merge.h: Likewise.\n        * include/parallel/multiway_mergesort.h: Likewise.\n        * include/parallel/numeric: Likewise.\n        * include/parallel/numericfwd.h: Likewise.\n        * include/parallel/omp_loop.h: Likewise.\n        * include/parallel/omp_loop_static.h: Likewise.\n        * include/parallel/par_loop.h: Likewise.\n        * include/parallel/partition.h: Likewise.\n        * include/parallel/random_shuffle.h: Likewise.\n        * include/parallel/search.h: Likewise.\n        * include/parallel/sort.h: Likewise.\n        * include/parallel/workstealing.h: Likewise.\n\nFrom-SVN: r152061", "tree": {"sha": "11326eb089485811e883e7782d51fe2a18e33038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11326eb089485811e883e7782d51fe2a18e33038"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/comments", "author": null, "committer": null, "parents": [{"sha": "30b639a8453177e071582d070321627a10291427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b639a8453177e071582d070321627a10291427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b639a8453177e071582d070321627a10291427"}], "stats": {"total": 662, "additions": 347, "deletions": 315}, "files": [{"sha": "2696be70fb42a99b8c0d4f75655b1ccd56f20e46", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -1,3 +1,30 @@\n+2009-09-23  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/algobase.h: Uglify internal identifiers;\n+        correct line breaks.\n+        * include/parallel/algo.h: Likewise.\n+        * include/parallel/base.h: Likewise.\n+        * include/parallel/equally_split.h: Likewise.\n+        * include/parallel/find.h: Likewise.\n+        * include/parallel/find_selectors.h: Likewise.\n+        * include/parallel/for_each_selectors.h: Likewise.\n+        * include/parallel/list_partition.h: Likewise.\n+        * include/parallel/losertree.h: Likewise.\n+        * include/parallel/merge.h: Likewise.\n+        * include/parallel/multiseq_selection.h: Likewise.\n+        * include/parallel/multiway_merge.h: Likewise.\n+        * include/parallel/multiway_mergesort.h: Likewise.\n+        * include/parallel/numeric: Likewise.\n+        * include/parallel/numericfwd.h: Likewise.\n+        * include/parallel/omp_loop.h: Likewise.\n+        * include/parallel/omp_loop_static.h: Likewise.\n+        * include/parallel/par_loop.h: Likewise.\n+        * include/parallel/partition.h: Likewise.\n+        * include/parallel/random_shuffle.h: Likewise.\n+        * include/parallel/search.h: Likewise.\n+        * include/parallel/sort.h: Likewise.\n+        * include/parallel/workstealing.h: Likewise.\n+\n 2009-09-21  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/appendix_contributing.xml: Adjust link to"}, {"sha": "ec632b496b8a91fab588ac86b6c05ba7b5f8c15a", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 76, "deletions": 76, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -150,8 +150,8 @@ namespace __parallel\n \n       if (_GLIBCXX_PARALLEL_CONDITION(true))\n         {\n-          binder2nd<__gnu_parallel::equal_to<_ValueType, const _Tp&> >\n-            __comp(__gnu_parallel::equal_to<_ValueType, const _Tp&>(), __val);\n+          binder2nd<__gnu_parallel::_EqualTo<_ValueType, const _Tp&> >\n+            __comp(__gnu_parallel::_EqualTo<_ValueType, const _Tp&>(), __val);\n           return __gnu_parallel::__find_template(\n                    __begin, __end, __begin, __comp,\n                    __gnu_parallel::__find_if_selector()).first;\n@@ -293,7 +293,7 @@ namespace __parallel\n       typedef typename iteratorf_traits::value_type _FValueType;\n \n       return find_first_of(__begin1, __end1, __begin2, __end2, __gnu_parallel::\n-                           equal_to<_IValueType, _FValueType>());\n+                           _EqualTo<_IValueType, _FValueType>());\n     }\n \n   // Sequential fallback\n@@ -815,15 +815,15 @@ namespace __parallel\n \n       if (_GLIBCXX_PARALLEL_CONDITION(true))\n         {\n-          _RAIter spot = __gnu_parallel::\n+          _RAIter __spot = __gnu_parallel::\n               __find_template(\n                 __begin, __end - 1, __begin, equal_to<_ValueType>(),\n                 __gnu_parallel::__adjacent_find_selector())\n             .first;\n-          if (spot == (__end - 1))\n+          if (__spot == (__end - 1))\n             return __end;\n           else\n-            return spot;\n+            return __spot;\n         }\n       else\n         return adjacent_find(__begin, __end, __gnu_parallel::sequential_tag());\n@@ -1038,16 +1038,16 @@ namespace __parallel\n                   _RAIter2 __begin2, _RAIter2 __end2,\n                   random_access_iterator_tag, random_access_iterator_tag)\n     {\n-      typedef std::iterator_traits<_RAIter1> iterator1_traits;\n-      typedef typename iterator1_traits::value_type _ValueType1;\n-      typedef std::iterator_traits<_RAIter2> iterator2_traits;\n-      typedef typename iterator2_traits::value_type _ValueType2;\n+      typedef std::iterator_traits<_RAIter1> _Iterator1Traits;\n+      typedef typename _Iterator1Traits::value_type _ValueType1;\n+      typedef std::iterator_traits<_RAIter2> _Iterator2Traits;\n+      typedef typename _Iterator2Traits::value_type _ValueType2;\n \n       if (_GLIBCXX_PARALLEL_CONDITION(true))\n         return __gnu_parallel::\n           __search_template(\n             __begin1, __end1, __begin2, __end2,\n-            __gnu_parallel::equal_to<_ValueType1, _ValueType2>());\n+            __gnu_parallel::_EqualTo<_ValueType1, _ValueType2>());\n       else\n         return search(__begin1, __end1, __begin2, __end2,\n                       __gnu_parallel::sequential_tag());\n@@ -1069,10 +1069,10 @@ namespace __parallel\n     search(_FIterator1 __begin1, _FIterator1 __end1,\n            _FIterator2 __begin2, _FIterator2 __end2)\n     {\n-      typedef std::iterator_traits<_FIterator1> iterator1_traits;\n-      typedef typename iterator1_traits::iterator_category _IteratorCategory1;\n-      typedef std::iterator_traits<_FIterator2> iterator2_traits;\n-      typedef typename iterator2_traits::iterator_category _IteratorCategory2;\n+      typedef std::iterator_traits<_FIterator1> _Iterator1Traits;\n+      typedef typename _Iterator1Traits::iterator_category _IteratorCategory1;\n+      typedef std::iterator_traits<_FIterator2> _Iterator2Traits;\n+      typedef typename _Iterator2Traits::iterator_category _IteratorCategory2;\n \n       return __search_switch(__begin1, __end1, __begin2, __end2,\n                            _IteratorCategory1(), _IteratorCategory2());\n@@ -1124,79 +1124,79 @@ namespace __parallel\n            _FIterator2 __begin2, _FIterator2 __end2,\n            _BinaryPredicate  __pred)\n     {\n-      typedef std::iterator_traits<_FIterator1> iterator1_traits;\n-      typedef typename iterator1_traits::iterator_category _IteratorCategory1;\n-      typedef std::iterator_traits<_FIterator2> iterator2_traits;\n-      typedef typename iterator2_traits::iterator_category _IteratorCategory2;\n+      typedef std::iterator_traits<_FIterator1> _Iterator1Traits;\n+      typedef typename _Iterator1Traits::iterator_category _IteratorCategory1;\n+      typedef std::iterator_traits<_FIterator2> _Iterator2Traits;\n+      typedef typename _Iterator2Traits::iterator_category _IteratorCategory2;\n       return __search_switch(__begin1, __end1, __begin2, __end2, __pred,\n                            _IteratorCategory1(), _IteratorCategory2());\n     }\n \n   // Sequential fallback\n   template<typename _FIterator, typename _Integer, typename _Tp>\n     inline _FIterator\n-    search_n(_FIterator __begin, _FIterator __end, _Integer count,\n+    search_n(_FIterator __begin, _FIterator __end, _Integer __count,\n              const _Tp& __val, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::search_n(__begin, __end, count, __val); }\n+    { return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val); }\n \n   // Sequential fallback\n   template<typename _FIterator, typename _Integer, typename _Tp,\n            typename _BinaryPredicate>\n     inline _FIterator\n-    search_n(_FIterator __begin, _FIterator __end, _Integer count,\n+    search_n(_FIterator __begin, _FIterator __end, _Integer __count,\n              const _Tp& __val, _BinaryPredicate __binary_pred,\n              __gnu_parallel::sequential_tag)\n     { return _GLIBCXX_STD_P::search_n(\n-               __begin, __end, count, __val, __binary_pred); }\n+               __begin, __end, __count, __val, __binary_pred); }\n \n   // Public interface.\n   template<typename _FIterator, typename _Integer, typename _Tp>\n     inline _FIterator\n-    search_n(_FIterator __begin, _FIterator __end, _Integer count,\n+    search_n(_FIterator __begin, _FIterator __end, _Integer __count,\n              const _Tp& __val)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return search_n(__begin, __end, count, __val,\n-                      __gnu_parallel::equal_to<_ValueType, _Tp>());\n+      return search_n(__begin, __end, __count, __val,\n+                      __gnu_parallel::_EqualTo<_ValueType, _Tp>());\n     }\n \n   // Parallel algorithm for random access iterators.\n   template<typename _RAIter, typename _Integer,\n            typename _Tp, typename _BinaryPredicate>\n     _RAIter\n-    __search_n_switch(_RAIter __begin, _RAIter __end, _Integer count,\n+    __search_n_switch(_RAIter __begin, _RAIter __end, _Integer __count,\n                       const _Tp& __val, _BinaryPredicate __binary_pred,\n                       random_access_iterator_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(true))\n         {\n-          __gnu_parallel::_PseudoSequence<_Tp, _Integer> __ps(__val, count);\n+          __gnu_parallel::_PseudoSequence<_Tp, _Integer> __ps(__val, __count);\n           return __gnu_parallel::__search_template(\n                    __begin, __end, __ps.begin(), __ps.end(), __binary_pred);\n         }\n       else\n-        return std::__search_n(__begin, __end, count, __val,\n+        return std::__search_n(__begin, __end, __count, __val,\n                                __binary_pred, random_access_iterator_tag());\n     }\n \n   // Sequential fallback for input iterator case.\n   template<typename _FIterator, typename _Integer, typename _Tp,\n            typename _BinaryPredicate, typename _IteratorTag>\n     inline _FIterator\n-    __search_n_switch(_FIterator __begin, _FIterator __end, _Integer count,\n+    __search_n_switch(_FIterator __begin, _FIterator __end, _Integer __count,\n                       const _Tp& __val, _BinaryPredicate __binary_pred,\n                       _IteratorTag)\n-    { return __search_n(__begin, __end, count, __val, __binary_pred,\n+    { return __search_n(__begin, __end, __count, __val, __binary_pred,\n                         _IteratorTag()); }\n \n   // Public interface.\n   template<typename _FIterator, typename _Integer, typename _Tp,\n            typename _BinaryPredicate>\n     inline _FIterator\n-    search_n(_FIterator __begin, _FIterator __end, _Integer count,\n+    search_n(_FIterator __begin, _FIterator __end, _Integer __count,\n              const _Tp& __val, _BinaryPredicate __binary_pred)\n     {\n-      return __search_n_switch(__begin, __end, count, __val, __binary_pred,\n+      return __search_n_switch(__begin, __end, __count, __val, __binary_pred,\n                              typename std::iterator_traits<_FIterator>::\n                              iterator_category());\n     }\n@@ -1207,15 +1207,15 @@ namespace __parallel\n            typename _UnaryOperation>\n     inline _OutputIterator\n     transform(_IIter __begin, _IIter __end, _OutputIterator __result, \n-              _UnaryOperation unary_op, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::transform(__begin, __end, __result, unary_op); }\n+              _UnaryOperation __unary_op, __gnu_parallel::sequential_tag)\n+    { return _GLIBCXX_STD_P::transform(__begin, __end, __result, __unary_op); }\n \n   // Parallel unary transform for random access iterators.\n   template<typename _RAIter1, typename _RAIter2,\n            typename _UnaryOperation>\n     _RAIter2\n     __transform1_switch(_RAIter1 __begin, _RAIter1 __end,\n-                      _RAIter2 __result, _UnaryOperation unary_op,\n+                      _RAIter2 __result, _UnaryOperation __unary_op,\n                       random_access_iterator_tag, random_access_iterator_tag,\n                       __gnu_parallel::_Parallelism __parallelism_tag\n                       = __gnu_parallel::parallel_balanced)\n@@ -1233,13 +1233,13 @@ namespace __parallel\n           __gnu_parallel::__transform1_selector<_ItTrip> __functionality;\n           __gnu_parallel::\n             __for_each_template_random_access(\n-              begin_pair, end_pair, unary_op, __functionality,\n+              begin_pair, end_pair, __unary_op, __functionality,\n               __gnu_parallel::_DummyReduct(),\n               __dummy, __dummy, -1, __parallelism_tag);\n           return __functionality._M_finish_iterator;\n         }\n       else\n-        return transform(__begin, __end, __result, unary_op, \n+        return transform(__begin, __end, __result, __unary_op, \n                          __gnu_parallel::sequential_tag());\n     }\n \n@@ -1249,25 +1249,25 @@ namespace __parallel\n            typename _IteratorTag2>\n     inline _RAIter2\n     __transform1_switch(_RAIter1 __begin, _RAIter1 __end,\n-                      _RAIter2 __result, _UnaryOperation unary_op,\n+                      _RAIter2 __result, _UnaryOperation __unary_op,\n                       _IteratorTag1, _IteratorTag2)\n-    { return transform(__begin, __end, __result, unary_op, \n+    { return transform(__begin, __end, __result, __unary_op, \n                        __gnu_parallel::sequential_tag()); }\n \n   // Public interface.\n   template<typename _IIter, typename _OutputIterator,\n            typename _UnaryOperation>\n     inline _OutputIterator\n     transform(_IIter __begin, _IIter __end, _OutputIterator __result,\n-              _UnaryOperation unary_op, \n+              _UnaryOperation __unary_op, \n               __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       typedef std::iterator_traits<_IIter> _IIterTraits;\n       typedef std::iterator_traits<_OutputIterator> _OIterTraits;\n       typedef typename _IIterTraits::iterator_category _IIteratorCategory;\n       typedef typename _OIterTraits::iterator_category _OIterCategory;\n \n-      return __transform1_switch(__begin, __end, __result, unary_op,\n+      return __transform1_switch(__begin, __end, __result, __unary_op,\n                                _IIteratorCategory(), _OIterCategory(), \n                                __parallelism_tag);\n     }\n@@ -1276,14 +1276,14 @@ namespace __parallel\n            typename _UnaryOperation>\n     inline _OutputIterator\n     transform(_IIter __begin, _IIter __end, _OutputIterator __result,\n-              _UnaryOperation unary_op)\n+              _UnaryOperation __unary_op)\n     {\n       typedef std::iterator_traits<_IIter> _IIterTraits;\n       typedef std::iterator_traits<_OutputIterator> _OIterTraits;\n       typedef typename _IIterTraits::iterator_category _IIteratorCategory;\n       typedef typename _OIterTraits::iterator_category _OIterCategory;\n \n-      return __transform1_switch(__begin, __end, __result, unary_op,\n+      return __transform1_switch(__begin, __end, __result, __unary_op,\n                                _IIteratorCategory(), _OIterCategory());\n     }\n \n@@ -1518,24 +1518,24 @@ namespace __parallel\n     }\n \n   // Sequential fallback\n-  template<typename _FIterator, typename Generator>\n+  template<typename _FIterator, typename _Generator>\n     inline void\n-    generate(_FIterator __begin, _FIterator __end, Generator __gen, \n+    generate(_FIterator __begin, _FIterator __end, _Generator __gen, \n              __gnu_parallel::sequential_tag)\n     { _GLIBCXX_STD_P::generate(__begin, __end, __gen); }\n \n   // Sequential fallback for input iterator case.\n-  template<typename _FIterator, typename Generator, typename _IteratorTag>\n+  template<typename _FIterator, typename _Generator, typename _IteratorTag>\n     inline void\n-    __generate_switch(_FIterator __begin, _FIterator __end, Generator __gen,\n+    __generate_switch(_FIterator __begin, _FIterator __end, _Generator __gen,\n                     _IteratorTag)\n     { generate(__begin, __end, __gen, __gnu_parallel::sequential_tag()); }\n \n   // Parallel algorithm for random access iterators.\n-  template<typename _RAIter, typename Generator>\n+  template<typename _RAIter, typename _Generator>\n     void\n     __generate_switch(_RAIter __begin, _RAIter __end,\n-                    Generator __gen, random_access_iterator_tag, \n+                    _Generator __gen, random_access_iterator_tag, \n                     __gnu_parallel::_Parallelism __parallelism_tag\n                     = __gnu_parallel::parallel_balanced)\n     {\n@@ -1558,20 +1558,20 @@ namespace __parallel\n     }\n \n   // Public interface.\n-  template<typename _FIterator, typename Generator>\n+  template<typename _FIterator, typename _Generator>\n     inline void\n     generate(_FIterator __begin, _FIterator __end,\n-             Generator __gen, __gnu_parallel::_Parallelism __parallelism_tag)\n+             _Generator __gen, __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       typedef std::iterator_traits<_FIterator> _IteratorTraits;\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n       __generate_switch(__begin, __end, __gen, _IteratorCategory(),\n                         __parallelism_tag);\n     }\n \n-  template<typename _FIterator, typename Generator>\n+  template<typename _FIterator, typename _Generator>\n     inline void\n-    generate(_FIterator __begin, _FIterator __end, Generator __gen)\n+    generate(_FIterator __begin, _FIterator __end, _Generator __gen)\n     {\n       typedef std::iterator_traits<_FIterator> _IteratorTraits;\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n@@ -1580,25 +1580,25 @@ namespace __parallel\n \n \n   // Sequential fallback.\n-  template<typename _OutputIterator, typename _Size, typename Generator>\n+  template<typename _OutputIterator, typename _Size, typename _Generator>\n     inline _OutputIterator\n-    generate_n(_OutputIterator __begin, _Size __n, Generator __gen, \n+    generate_n(_OutputIterator __begin, _Size __n, _Generator __gen, \n                __gnu_parallel::sequential_tag)\n     { return _GLIBCXX_STD_P::generate_n(__begin, __n, __gen); }\n \n   // Sequential fallback for input iterator case.\n-  template<typename _OutputIterator, typename _Size, typename Generator,\n+  template<typename _OutputIterator, typename _Size, typename _Generator,\n            typename _IteratorTag>\n     inline _OutputIterator\n-    __generate_n_switch(_OutputIterator __begin, _Size __n, Generator __gen,\n+    __generate_n_switch(_OutputIterator __begin, _Size __n, _Generator __gen,\n                         _IteratorTag)\n     { return generate_n(__begin, __n, __gen,\n                         __gnu_parallel::sequential_tag()); }\n \n   // Parallel algorithm for random access iterators.\n-  template<typename _RAIter, typename _Size, typename Generator>\n+  template<typename _RAIter, typename _Size, typename _Generator>\n     inline _RAIter\n-    __generate_n_switch(_RAIter __begin, _Size __n, Generator __gen, \n+    __generate_n_switch(_RAIter __begin, _Size __n, _Generator __gen, \n                       random_access_iterator_tag, \n                       __gnu_parallel::_Parallelism __parallelism_tag\n                       = __gnu_parallel::parallel_balanced)\n@@ -1608,9 +1608,9 @@ namespace __parallel\n     }\n \n   // Public interface.\n-  template<typename _OutputIterator, typename _Size, typename Generator>\n+  template<typename _OutputIterator, typename _Size, typename _Generator>\n     inline _OutputIterator\n-    generate_n(_OutputIterator __begin, _Size __n, Generator __gen, \n+    generate_n(_OutputIterator __begin, _Size __n, _Generator __gen, \n                __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       typedef std::iterator_traits<_OutputIterator> _IteratorTraits;\n@@ -1619,9 +1619,9 @@ namespace __parallel\n                                __parallelism_tag); \n     }\n \n-  template<typename _OutputIterator, typename _Size, typename Generator>\n+  template<typename _OutputIterator, typename _Size, typename _Generator>\n     inline _OutputIterator\n-    generate_n(_OutputIterator __begin, _Size __n, Generator __gen)\n+    generate_n(_OutputIterator __begin, _Size __n, _Generator __gen)\n     {\n       typedef std::iterator_traits<_OutputIterator> _IteratorTraits;\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n@@ -1637,10 +1637,10 @@ namespace __parallel\n     { _GLIBCXX_STD_P::random_shuffle(__begin, __end); }\n \n   // Sequential fallback.\n-  template<typename _RAIter, typename RandomNumberGenerator>\n+  template<typename _RAIter, typename _RandomNumberGenerator>\n     inline void\n     random_shuffle(_RAIter __begin, _RAIter __end, \n-                   RandomNumberGenerator& __rand,\n+                   _RandomNumberGenerator& __rand,\n                    __gnu_parallel::sequential_tag)\n     { _GLIBCXX_STD_P::random_shuffle(__begin, __end, __rand); }\n \n@@ -1665,10 +1665,10 @@ namespace __parallel\n     }\n \n   // Parallel algorithm for random access iterators.\n-  template<typename _RAIter, typename RandomNumberGenerator>\n+  template<typename _RAIter, typename _RandomNumberGenerator>\n     void\n     random_shuffle(_RAIter __begin, _RAIter __end, \n-                   RandomNumberGenerator& __rand)\n+                   _RandomNumberGenerator& __rand)\n     {\n       if (__begin == __end)\n         return;\n@@ -1759,7 +1759,7 @@ namespace __parallel\n         if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin) >=\n               __gnu_parallel::_Settings::get().sort_minimal_n))\n-          __gnu_parallel::parallel_sort<false>(\n+          __gnu_parallel::__parallel_sort<false>(\n                             __begin, __end, __comp, __parallelism);\n         else\n           sort(__begin, __end, __comp, __gnu_parallel::sequential_tag());\n@@ -1898,7 +1898,7 @@ namespace __parallel\n         if (_GLIBCXX_PARALLEL_CONDITION(\n               static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin) >=\n               __gnu_parallel::_Settings::get().sort_minimal_n))\n-          __gnu_parallel::parallel_sort<true>(\n+          __gnu_parallel::__parallel_sort<true>(\n                             __begin, __end, __comp, __parallelism);\n         else\n           stable_sort(__begin, __end, __comp,\n@@ -2071,10 +2071,10 @@ namespace __parallel\n     merge(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           _IIter2 __end2, _OutputIterator __result)\n     {\n-      typedef std::iterator_traits<_IIter1> iterator1_traits;\n-      typedef std::iterator_traits<_IIter2> iterator2_traits;\n-      typedef typename iterator1_traits::value_type _ValueType1;\n-      typedef typename iterator2_traits::value_type _ValueType2;\n+      typedef std::iterator_traits<_IIter1> _Iterator1Traits;\n+      typedef std::iterator_traits<_IIter2> _Iterator2Traits;\n+      typedef typename _Iterator1Traits::value_type _ValueType1;\n+      typedef typename _Iterator2Traits::value_type _ValueType2;\n \n       return merge(__begin1, __end1, __begin2, __end2, __result, \n                    __gnu_parallel::_Less<_ValueType1, _ValueType2>());\n@@ -2104,7 +2104,7 @@ namespace __parallel\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n             >= __gnu_parallel::_Settings::get().nth_element_minimal_n))\n-        __gnu_parallel::parallel_nth_element(__begin, __nth, __end, __comp);\n+        __gnu_parallel::__parallel_nth_element(__begin, __nth, __end, __comp);\n       else\n         nth_element(__begin, __nth, __end, __comp,\n                     __gnu_parallel::sequential_tag());\n@@ -2146,7 +2146,7 @@ namespace __parallel\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n             >= __gnu_parallel::_Settings::get().partial_sort_minimal_n))\n         __gnu_parallel::\n-          parallel_partial_sort(__begin, __middle, __end, __comp);\n+          __parallel_partial_sort(__begin, __middle, __end, __comp);\n       else\n         partial_sort(__begin, __middle, __end, __comp,\n                      __gnu_parallel::sequential_tag());"}, {"sha": "77578a569992f9f086e6cbc510de248952fd5ed4", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -95,16 +95,16 @@ namespace __parallel\n     inline pair<_IIter1, _IIter2>\n     mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2)\n     {\n-      typedef std::iterator_traits<_IIter1> iterator1_traits;\n-      typedef std::iterator_traits<_IIter2> iterator2_traits;\n-      typedef typename iterator1_traits::value_type _ValueType1;\n-      typedef typename iterator2_traits::value_type _ValueType2;\n-      typedef typename iterator1_traits::iterator_category _IteratorCategory1;\n-      typedef typename iterator2_traits::iterator_category _IteratorCategory2;\n+      typedef std::iterator_traits<_IIter1> _Iterator1Traits;\n+      typedef std::iterator_traits<_IIter2> _Iterator2Traits;\n+      typedef typename _Iterator1Traits::value_type _ValueType1;\n+      typedef typename _Iterator2Traits::value_type _ValueType2;\n+      typedef typename _Iterator1Traits::iterator_category _IteratorCategory1;\n+      typedef typename _Iterator2Traits::iterator_category _IteratorCategory2;\n \n-      typedef __gnu_parallel::equal_to<_ValueType1, _ValueType2> equal_to_type;\n+      typedef __gnu_parallel::_EqualTo<_ValueType1, _ValueType2> _EqualTo;\n \n-      return __mismatch_switch(__begin1, __end1, __begin2, equal_to_type(),\n+      return __mismatch_switch(__begin1, __end1, __begin2, _EqualTo(),\n                                _IteratorCategory1(), _IteratorCategory2());\n     }\n \n@@ -114,10 +114,10 @@ namespace __parallel\n     mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2,\n              _Predicate __pred)\n     {\n-      typedef std::iterator_traits<_IIter1> iterator1_traits;\n-      typedef std::iterator_traits<_IIter2> iterator2_traits;\n-      typedef typename iterator1_traits::iterator_category _IteratorCategory1;\n-      typedef typename iterator2_traits::iterator_category _IteratorCategory2;\n+      typedef std::iterator_traits<_IIter1> _Iterator1Traits;\n+      typedef std::iterator_traits<_IIter2> _Iterator2Traits;\n+      typedef typename _Iterator1Traits::iterator_category _IteratorCategory1;\n+      typedef typename _Iterator2Traits::iterator_category _IteratorCategory2;\n \n       return __mismatch_switch(__begin1, __end1, __begin2, __pred,\n                                _IteratorCategory1(), _IteratorCategory2());"}, {"sha": "70f85ba600f827f0f8479b0e852e83f0d9b4cdae", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -102,7 +102,7 @@ namespace __gnu_parallel\n   */\n template<typename _Size>\n   inline _Size\n-  __log2(_Size __n)\n+  __rd_log2(_Size __n)\n     {\n       _Size __k;\n       for (__k = 0; __n > 1; __n >>= 1)\n@@ -115,7 +115,7 @@ template<typename _Size>\n   *  _CASable_bits/2 bits.\n   *  @param __b Second integer, to be encoded in the least-significant\n   *  @__c _CASable_bits/2 bits.\n-  *  @return __gnu_parallel::_CASable _M_value encoding @__c __a and @__c __b.\n+  *  @return value encoding @__c __a and @__c __b.\n   *  @see decode2\n   */\n inline _CASable\n@@ -171,7 +171,7 @@ template<typename _Compare, typename _T1, typename _T2>\n   };\n \n \n-/** @brief Similar to std::__binder1st,\n+/** @brief Similar to std::binder1st,\n   *  but giving the argument types explicitly. */\n template<typename _Predicate, typename argument_type>\n   class __unary_negate\n@@ -189,7 +189,7 @@ template<typename _Predicate, typename argument_type>\n     { return !_M_pred(__x); }\n   };\n \n-/** @brief Similar to std::__binder1st,\n+/** @brief Similar to std::binder1st,\n   *  but giving the argument types explicitly. */\n template<typename _Operation, typename _FirstArgumentType,\n          typename _SecondArgumentType, typename _ResultType>\n@@ -247,7 +247,7 @@ template<typename _Operation, typename _FirstArgumentType,\n \n /** @brief Similar to std::equal_to, but allows two different types. */\n template<typename _T1, typename _T2>\n-  struct equal_to : std::binary_function<_T1, _T2, bool>\n+  struct _EqualTo : std::binary_function<_T1, _T2, bool>\n   {\n     bool operator()(const _T1& __t1, const _T2& __t2) const\n     { return __t1 == __t2; }"}, {"sha": "31ed87d16f325adc29a05d5ffdf02f6951caacf8", "filename": "libstdc++-v3/include/parallel/equally_split.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fequally_split.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fequally_split.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fequally_split.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -42,7 +42,7 @@ namespace __gnu_parallel\n  *  @param __n Number of elements\n  *  @param __num_threads Number of parts\n  *  @param __s Splitters\n- *  @returns End of splitter sequence, i.e. @__c __s+__num_threads+1 */\n+ *  @returns End of __splitter sequence, i.e. @__c __s+__num_threads+1 */\n template<typename _DifferenceType, typename _OutputIterator>\n   _OutputIterator\n   equally_split(_DifferenceType __n, _ThreadIndex __num_threads,"}, {"sha": "050a80d8af077fd1c62983c54aaa88329b2a3cea", "filename": "libstdc++-v3/include/parallel/find.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file parallel/find.h\n- *  @brief Parallel implementation __base for std::find(), std::equal()\n+ *  @brief Parallel implementation base for std::find(), std::equal()\n  *  and related functions.\n  *  This file is a GNU parallel extension to the Standard C++ Library.\n  */"}, {"sha": "0d385bc6c94bc985d4f89af5df133601c0357755", "filename": "libstdc++-v3/include/parallel/find_selectors.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind_selectors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind_selectors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind_selectors.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -107,11 +107,11 @@ namespace __gnu_parallel\n                            _RAIter2 __begin2, _Pred __pred)\n       {\n         // Passed end iterator is one short.\n-        _RAIter1 spot = adjacent_find(__begin1, __end1 + 1,\n+        _RAIter1 __spot = adjacent_find(__begin1, __end1 + 1,\n                                                    __pred, sequential_tag());\n-        if (spot == (__end1 + 1))\n-          spot = __end1;\n-        return std::make_pair(spot, __begin2);\n+        if (__spot == (__end1 + 1))\n+          __spot = __end1;\n+        return std::make_pair(__spot, __begin2);\n       }\n   };\n "}, {"sha": "c6c8a14920a6cb2ebf8a987f3fc9df47ea4200bb", "filename": "libstdc++-v3/include/parallel/for_each_selectors.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each_selectors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each_selectors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each_selectors.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -88,9 +88,9 @@ namespace __gnu_parallel\n       /** @brief Functor execution.\n        *  @param __v Current value.\n        *  @param __i iterator referencing object. */\n-      template<typename Val>\n+      template<typename _ValueType>\n         bool\n-        operator()(Val& __v, _It __i)\n+        operator()(_ValueType& __v, _It __i)\n         {\n           *__i = __v;\n           return true;\n@@ -185,9 +185,9 @@ namespace __gnu_parallel\n        *  @param __v Current value.\n        *  @param __i iterator referencing object.\n        *  @return 1 if count, 0 if does not count. */\n-      template<typename Val>\n+      template<typename _ValueType>\n         _Diff\n-        operator()(Val& __v, _It __i)\n+        operator()(_ValueType& __v, _It __i)\n         { return (__v == *__i) ? 1 : 0; }\n     };\n "}, {"sha": "9c4f48187f0e3a2a54a020a0c8f501d6e1c81c1f", "filename": "libstdc++-v3/include/parallel/list_partition.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -143,7 +143,7 @@ namespace __gnu_parallel\n         }\n \n       // Calculation of the parts (one must be extracted from __current\n-      // because the partition beginning at __end, consists only of\n+      // because the partition beginning at end, consists only of\n       // itself).\n       size_t __size_part = (__cur - 1) / __num_parts;\n       int __size_greater = static_cast<int>((__cur - 1) % __num_parts);"}, {"sha": "0da84abe4ab06c4212b81903c5b7a7f6d61db449", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -62,7 +62,7 @@ class _LoserTreeBase\n   {\n     /** @brief flag, true iff this is a \"maximum\" __sentinel. */\n     bool _M_sup;\n-    /** @brief __index of the _M_source __sequence. */\n+    /** @brief __index of the __source __sequence. */\n     int _M_source;\n     /** @brief _M_key of the element in the _LoserTree. */\n     _Tp _M_key;\n@@ -99,7 +99,7 @@ class _LoserTreeBase\n     _M_ik = __k;\n \n     // Compute log_2{_M_k} for the _Loser Tree\n-    _M_log_k = __log2(_M_ik - 1) + 1;\n+    _M_log_k = __rd_log2(_M_ik - 1) + 1;\n \n     // Next greater power of 2.\n     _M_k = 1 << _M_log_k;\n@@ -124,7 +124,7 @@ class _LoserTreeBase\n    * @brief Initializes the sequence \"_M_source\" with the element \"_M_key\".\n    *\n    * @param _M_key the element to insert\n-   * @param _M_source __index of the _M_source __sequence\n+   * @param _M_source __index of the __source __sequence\n    * @param _M_sup flag that determines whether the value to insert is an\n    *   explicit __supremum.\n    */\n@@ -265,7 +265,7 @@ class _LoserTree</* __stable == */false, _Tp, _Compare> :\n   {}\n \n   /**\n-   * Computes the winner of the competition at __position \"__root\".\n+   * Computes the winner of the competition at position \"__root\".\n    *\n    * Called recursively (starting at 0) to build the initial tree.\n    *\n@@ -365,7 +365,7 @@ class _LoserTreePointerBase\n     _M_ik = __k;\n \n     // Next greater power of 2.\n-    _M_k = 1 << (__log2(_M_ik - 1) + 1);\n+    _M_k = 1 << (__rd_log2(_M_ik - 1) + 1);\n     _M_offset = _M_k;\n     _M_losers = new _Loser[_M_k * 2];\n     for (unsigned int __i = _M_ik - 1; __i < _M_k; __i++)\n@@ -580,7 +580,7 @@ class _LoserTreeUnguardedBase\n     _M_ik = __k;\n \n     // Next greater power of 2.\n-    _M_k = 1 << (__log2(_M_ik - 1) + 1);\n+    _M_k = 1 << (__rd_log2(_M_ik - 1) + 1);\n     _M_offset = _M_k;\n     // Avoid default-constructing _M_losers[]._M_key\n     _M_losers\n@@ -789,7 +789,7 @@ class _LoserTreeUnguarded</* __stable == */false, _Tp, _Compare> :\n };\n \n /** @brief Unguarded loser tree, keeping only pointers to the\n-* __elements in the tree structure.\n+* elements in the tree structure.\n *\n *  No guarding is done, therefore not a single input sequence must\n *  run empty.  This is a very fast variant.\n@@ -818,7 +818,7 @@ class LoserTreePointerUnguardedBase\n     _M_ik = __k;\n \n     // Next greater power of 2.\n-    _M_k = 1 << (__log2(_M_ik - 1) + 1);\n+    _M_k = 1 << (__rd_log2(_M_ik - 1) + 1);\n     _M_offset = _M_k;\n     // Avoid default-constructing _M_losers[]._M_key\n     _M_losers = new _Loser[2 * _M_k];\n@@ -859,15 +859,15 @@ class LoserTreePointerUnguardedBase\n  * Unstable variant is implemented below using partial specialization.\n  */\n template<bool __stable/* default == true */, typename _Tp, typename _Compare>\n-class LoserTreePointerUnguarded :\n+class _LoserTreePointerUnguarded :\n     public LoserTreePointerUnguardedBase<_Tp, _Compare>\n {\n   typedef LoserTreePointerUnguardedBase<_Tp, _Compare> Base;\n   using Base::_M_k;\n   using Base::_M_losers;\n \n public:\n-  LoserTreePointerUnguarded(unsigned int __k, const _Tp& _sentinel,\n+  _LoserTreePointerUnguarded(unsigned int __k, const _Tp& _sentinel,\n       _Compare __comp = std::less<_Tp>())\n     : Base::LoserTreePointerUnguardedBase(__k, _sentinel, __comp)\n   {}\n@@ -943,15 +943,15 @@ class LoserTreePointerUnguarded :\n  * Stable variant is above.\n  */\n template<typename _Tp, typename _Compare>\n-class LoserTreePointerUnguarded</* __stable == */false, _Tp, _Compare> :\n+class _LoserTreePointerUnguarded</* __stable == */false, _Tp, _Compare> :\n     public LoserTreePointerUnguardedBase<_Tp, _Compare>\n {\n   typedef LoserTreePointerUnguardedBase<_Tp, _Compare> Base;\n   using Base::_M_k;\n   using Base::_M_losers;\n \n public:\n-  LoserTreePointerUnguarded(unsigned int __k, const _Tp& _sentinel,\n+  _LoserTreePointerUnguarded(unsigned int __k, const _Tp& _sentinel,\n       _Compare __comp = std::less<_Tp>())\n     : Base::LoserTreePointerUnguardedBase(__k, _sentinel, __comp)\n   {}"}, {"sha": "c323c6298937e2a9879b636ca61b006cf28dde90", "filename": "libstdc++-v3/include/parallel/merge.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -112,9 +112,9 @@ namespace __gnu_parallel\n     {\n       typedef _DifferenceTp _DifferenceType;\n       typedef typename std::iterator_traits<_RAIter1>::value_type\n-        value_type1;\n+        _ValueType1;\n       typedef typename std::iterator_traits<_RAIter2>::value_type\n-        value_type2;\n+        _ValueType2;\n \n #if _GLIBCXX_ASSERTIONS\n       _GLIBCXX_PARALLEL_ASSERT(__max_length >= 0);\n@@ -124,8 +124,8 @@ namespace __gnu_parallel\n         {\n           _RAIter1 __next1 = __begin1 + 1;\n           _RAIter2 __next2 = __begin2 + 1;\n-          value_type1 __element1 = *__begin1;\n-          value_type2 __element2 = *__begin2;\n+          _ValueType1 __element1 = *__begin1;\n+          _ValueType2 __element2 = *__begin2;\n \n           if (__comp(__element2, __element1))\n             {"}, {"sha": "221470cc16c74ccefe23b0431c0ea0e4cd36ac4a", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -103,15 +103,15 @@ namespace __gnu_parallel\n     };\n \n   /** \n-   *  @brief Splits several sorted sequences at __a certain global __rank,\n+   *  @brief Splits several sorted sequences at a certain global __rank,\n    *  resulting in a splitting point for each sequence.\n-   *  The sequences are passed via __a __sequence of random-access\n+   *  The sequences are passed via a sequence of random-access\n    *  iterator pairs, none of the sequences may be empty.  If there\n    *  are several equal elements across the split, the ones on the\n    *  __left side will be chosen from sequences with smaller number.\n    *  @param __begin_seqs Begin of the sequence of iterator pairs.\n    *  @param __end_seqs End of the sequence of iterator pairs.\n-   *  @param __rank The global __rank to partition at.\n+   *  @param __rank The global rank to partition at.\n    *  @param __begin_offsets A random-access __sequence __begin where the\n    *  __result will be stored in. Each element of the sequence is an\n    *  iterator that points to the first element on the greater part of\n@@ -181,7 +181,7 @@ namespace __gnu_parallel\n           __nmax = std::max(__nmax, __ns[__i]);\n         }\n \n-      __r = __log2(__nmax) + 1;\n+      __r = __rd_log2(__nmax) + 1;\n \n       // Pad all lists to this length, at least as long as any ns[__i],\n       // equality iff __nmax = 2^__k - 1.\n@@ -215,11 +215,12 @@ namespace __gnu_parallel\n           __sample.push_back(\n             std::make_pair(__S(__i)[0] /*__dummy element*/, __i));\n \n-      _DifferenceType localrank = __rank * __m / __N ;\n+      _DifferenceType __localrank = __rank * __m / __N ;\n \n       int __j;\n       for (__j = 0;\n-           __j < localrank && ((__n + 1) <= __ns[__sample[__j].second]); ++__j)\n+           __j < __localrank && ((__n + 1) <= __ns[__sample[__j].second]);\n+           ++__j)\n         __a[__sample[__j].second] += __n + 1;\n       for (; __j < __m; __j++)\n         __b[__sample[__j].second] -= __n + 1;\n@@ -288,15 +289,16 @@ namespace __gnu_parallel\n \n               for (; __skew != 0 && !__pq.empty(); --__skew)\n                 {\n-                  int source = __pq.top().second;\n+                  int __source = __pq.top().second;\n                   __pq.pop();\n \n-                  __a[source] = std::min(__a[source] + __n + 1, __ns[source]);\n-                  __b[source] += __n + 1;\n+                  __a[__source]\n+                      = std::min(__a[__source] + __n + 1, __ns[__source]);\n+                  __b[__source] += __n + 1;\n \n-                  if (__b[source] < __ns[source])\n+                  if (__b[__source] < __ns[__source])\n                     __pq.push(\n-                      std::make_pair(__S(source)[__b[source]], source));\n+                      std::make_pair(__S(__source)[__b[__source]], __source));\n                 }\n             }\n           else if (__skew < 0)\n@@ -312,15 +314,15 @@ namespace __gnu_parallel\n \n               for (; __skew != 0; ++__skew)\n                 {\n-                  int source = __pq.top().second;\n+                  int __source = __pq.top().second;\n                   __pq.pop();\n \n-                  __a[source] -= __n + 1;\n-                  __b[source] -= __n + 1;\n+                  __a[__source] -= __n + 1;\n+                  __b[__source] -= __n + 1;\n \n-                  if (__a[source] > 0)\n-                    __pq.push(\n-                      std::make_pair(__S(source)[__a[source] - 1], source));\n+                  if (__a[__source] > 0)\n+                    __pq.push(std::make_pair(\n+                        __S(__source)[__a[__source] - 1], __source));\n                 }\n             }\n         }\n@@ -373,14 +375,14 @@ namespace __gnu_parallel\n \n \n   /** \n-   *  @brief Selects the element at __a certain global __rank from several\n+   *  @brief Selects the element at a certain global __rank from several\n    *  sorted sequences.\n    *\n-   *  The sequences are passed via __a __sequence of random-access\n+   *  The sequences are passed via a sequence of random-access\n    *  iterator pairs, none of the sequences may be empty.\n    *  @param __begin_seqs Begin of the sequence of iterator pairs.\n    *  @param __end_seqs End of the sequence of iterator pairs.\n-   *  @param __rank The global __rank to partition at.\n+   *  @param __rank The global rank to partition at.\n    *  @param __offset The rank of the selected element in the global\n    *  subsequence of elements equal to the selected element. If the\n    *  selected element is unique, this number is 0.\n@@ -434,7 +436,7 @@ namespace __gnu_parallel\n           __nmax = std::max(__nmax, __ns[__i]);\n         }\n \n-      __r = __log2(__nmax) + 1;\n+      __r = __rd_log2(__nmax) + 1;\n \n       // Pad all lists to this length, at least as long as any ns[__i],\n       // equality iff __nmax = 2^__k - 1\n@@ -470,11 +472,12 @@ namespace __gnu_parallel\n           __sample.push_back(\n             std::make_pair(__S(__i)[0] /*__dummy element*/, __i));\n \n-      _DifferenceType localrank = __rank * __m / __N ;\n+      _DifferenceType __localrank = __rank * __m / __N ;\n \n       int __j;\n       for (__j = 0;\n-           __j < localrank && ((__n + 1) <= __ns[__sample[__j].second]); ++__j)\n+           __j < __localrank && ((__n + 1) <= __ns[__sample[__j].second]);\n+           ++__j)\n         __a[__sample[__j].second] += __n + 1;\n       for (; __j < __m; ++__j)\n         __b[__sample[__j].second] -= __n + 1;\n@@ -533,15 +536,16 @@ namespace __gnu_parallel\n \n               for (; __skew != 0 && !__pq.empty(); --__skew)\n                 {\n-                  int source = __pq.top().second;\n+                  int __source = __pq.top().second;\n                   __pq.pop();\n \n-                  __a[source] = std::min(__a[source] + __n + 1, __ns[source]);\n-                  __b[source] += __n + 1;\n+                  __a[__source]\n+                      = std::min(__a[__source] + __n + 1, __ns[__source]);\n+                  __b[__source] += __n + 1;\n \n-                  if (__b[source] < __ns[source])\n+                  if (__b[__source] < __ns[__source])\n                     __pq.push(\n-                      std::make_pair(__S(source)[__b[source]], source));\n+                      std::make_pair(__S(__source)[__b[__source]], __source));\n                 }\n             }\n           else if (__skew < 0)\n@@ -557,15 +561,15 @@ namespace __gnu_parallel\n \n               for (; __skew != 0; ++__skew)\n                 {\n-                  int source = __pq.top().second;\n+                  int __source = __pq.top().second;\n                   __pq.pop();\n \n-                  __a[source] -= __n + 1;\n-                  __b[source] -= __n + 1;\n+                  __a[__source] -= __n + 1;\n+                  __b[__source] -= __n + 1;\n \n-                  if (__a[source] > 0)\n-                    __pq.push(\n-                      std::make_pair(__S(source)[__a[source] - 1], source));\n+                  if (__a[__source] > 0)\n+                    __pq.push(std::make_pair(\n+                        __S(__source)[__a[__source] - 1], __source));\n                 }\n             }\n         }\n@@ -615,7 +619,7 @@ namespace __gnu_parallel\n             }\n       }\n \n-      // Minright is the splitter, in any case.\n+      // Minright is the __splitter, in any case.\n \n       if (!__maxleftset || __comp(__minright, __maxleft))\n         {"}, {"sha": "310a07a766cd837b1c5bf003dd03225519c5938b", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -75,7 +75,7 @@ template<typename _RAIter, typename _Compare>\n /** @brief _Iterator wrapper supporting an implicit supremum at the end\n  *         of the sequence, dominating all comparisons.\n  *\n- * The implicit supremum comes with __a performance cost.\n+ * The implicit supremum comes with a performance cost.\n  *\n  * Deriving from _RAIter is not possible since\n  * _RAIter need not be a class.\n@@ -168,20 +168,20 @@ template<typename _RAIter, typename _Compare>\n   }\n \n template<typename _RAIter, typename _Compare>\n-  class unguarded_iterator;\n+  class _UnguardedIterator;\n \n template<typename _RAIter, typename _Compare>\n   inline bool\n-  operator<(unguarded_iterator<_RAIter, _Compare>& __bi1,\n-            unguarded_iterator<_RAIter, _Compare>& __bi2);\n+  operator<(_UnguardedIterator<_RAIter, _Compare>& __bi1,\n+            _UnguardedIterator<_RAIter, _Compare>& __bi2);\n \n template<typename _RAIter, typename _Compare>\n   inline bool\n-  operator<=(unguarded_iterator<_RAIter, _Compare>& __bi1,\n-             unguarded_iterator<_RAIter, _Compare>& __bi2);\n+  operator<=(_UnguardedIterator<_RAIter, _Compare>& __bi1,\n+             _UnguardedIterator<_RAIter, _Compare>& __bi2);\n \n template<typename _RAIter, typename _Compare>\n-  class unguarded_iterator\n+  class _UnguardedIterator\n   {\n   private:\n     /** @brief Current iterator __position. */\n@@ -194,14 +194,14 @@ template<typename _RAIter, typename _Compare>\n     *  @param __begin Begin iterator of sequence.\n     *  @param _M_end Unused, only for compatibility.\n     *  @param __comp Unused, only for compatibility. */\n-    unguarded_iterator(_RAIter __begin,\n+    _UnguardedIterator(_RAIter __begin,\n                        _RAIter _M_end, _Compare& __comp)\n     : _M_current(__begin), __comp(__comp)\n     { }\n \n     /** @brief Pre-increment operator.\n     *  @return This. */\n-    unguarded_iterator<_RAIter, _Compare>&\n+    _UnguardedIterator<_RAIter, _Compare>&\n     operator++()\n     {\n       ++_M_current;\n@@ -221,13 +221,13 @@ template<typename _RAIter, typename _Compare>\n \n     friend bool\n     operator< <_RAIter, _Compare>(\n-      unguarded_iterator<_RAIter, _Compare>& __bi1,\n-      unguarded_iterator<_RAIter, _Compare>& __bi2);\n+      _UnguardedIterator<_RAIter, _Compare>& __bi1,\n+      _UnguardedIterator<_RAIter, _Compare>& __bi2);\n \n     friend bool\n     operator<= <_RAIter, _Compare>(\n-      unguarded_iterator<_RAIter, _Compare>& __bi1,\n-      unguarded_iterator<_RAIter, _Compare>& __bi2);\n+      _UnguardedIterator<_RAIter, _Compare>& __bi1,\n+      _UnguardedIterator<_RAIter, _Compare>& __bi2);\n   };\n \n /** @brief Compare two elements referenced by unguarded iterators.\n@@ -236,8 +236,8 @@ template<typename _RAIter, typename _Compare>\n  *  @return @__c true if less. */\n template<typename _RAIter, typename _Compare>\n   inline bool\n-  operator<(unguarded_iterator<_RAIter, _Compare>& __bi1,\n-            unguarded_iterator<_RAIter, _Compare>& __bi2)\n+  operator<(_UnguardedIterator<_RAIter, _Compare>& __bi1,\n+            _UnguardedIterator<_RAIter, _Compare>& __bi2)\n   {\n     // Normal compare.\n     return (__bi1.__comp)(*__bi1, *__bi2);\n@@ -249,8 +249,8 @@ template<typename _RAIter, typename _Compare>\n  *  @return @__c True if less equal. */\n template<typename _RAIter, typename _Compare>\n   inline bool\n-  operator<=(unguarded_iterator<_RAIter, _Compare>& __bi1,\n-            unguarded_iterator<_RAIter, _Compare>& __bi2)\n+  operator<=(_UnguardedIterator<_RAIter, _Compare>& __bi1,\n+            _UnguardedIterator<_RAIter, _Compare>& __bi2)\n   {\n     // Normal compare.\n     return !(__bi1.__comp)(*__bi2, *__bi1);\n@@ -266,15 +266,15 @@ template<typename _RAIter, typename _Compare>\n  *\n  * This works well for merging up to 4 sequences.\n  *\n- * Note that making the merging stable does <em>not</em> come at __a\n+ * Note that making the merging stable does <em>not</em> come at a\n  * performance hit.\n  *\n  * Whether the merging is done guarded or unguarded is selected by the\n  * used iterator class.\n  *\n  * @param __seqs_begin Begin iterator of iterator pair input sequence.\n  * @param __seqs_end End iterator of iterator pair input sequence.\n- * @param __target Begin iterator of __output sequence.\n+ * @param __target Begin iterator of output sequence.\n  * @param __comp Comparator.\n  * @param __length Maximum length to merge, less equal than the\n  * total number of elements available.\n@@ -386,15 +386,15 @@ template<template<typename RAI, typename C> class iterator,\n  *\n  * This works well for merging up to 4 sequences.\n  *\n- * Note that making the merging stable does <em>not</em> come at __a\n+ * Note that making the merging stable does <em>not</em> come at a\n  * performance hit.\n  *\n  * Whether the merging is done guarded or unguarded is selected by the\n  * used iterator class.\n  *\n  * @param __seqs_begin Begin iterator of iterator pair input sequence.\n  * @param __seqs_end End iterator of iterator pair input sequence.\n- * @param __target Begin iterator of __output sequence.\n+ * @param __target Begin iterator of output sequence.\n  * @param __comp Comparator.\n  * @param __length Maximum length to merge, less equal than the\n  * total number of elements available.\n@@ -510,15 +510,15 @@ template<template<typename RAI, typename C> class iterator,\n /** @brief Multi-way merging procedure for a high branching factor,\n  *         guarded case.\n  *\n- * This merging variant uses __a LoserTree class as selected by <tt>LT</tt>.\n+ * This merging variant uses a LoserTree class as selected by <tt>LT</tt>.\n  *\n  * Stability is selected through the used LoserTree class <tt>LT</tt>.\n  *\n- * At least one non-empty __sequence is required.\n+ * At least one non-empty sequence is required.\n  *\n  * @param __seqs_begin Begin iterator of iterator pair input sequence.\n  * @param __seqs_end End iterator of iterator pair input sequence.\n- * @param __target Begin iterator of __output sequence.\n+ * @param __target Begin iterator of output sequence.\n  * @param __comp Comparator.\n  * @param __length Maximum length to merge, less equal than the\n  * total number of elements available.\n@@ -569,21 +569,21 @@ template<typename LT,\n \n     __lt.__init();\n \n-    int source;\n+    int __source;\n \n     for (_DifferenceType __i = 0; __i < __length; ++__i)\n       {\n         //take out\n-        source = __lt.__get_min_source();\n+        __source = __lt.__get_min_source();\n \n-        *(__target++) = *(__seqs_begin[source].first++);\n+        *(__target++) = *(__seqs_begin[__source].first++);\n \n         // Feed.\n-        if (__seqs_begin[source].first == __seqs_begin[source].second)\n+        if (__seqs_begin[__source].first == __seqs_begin[__source].second)\n           __lt.__delete_min_insert(*__arbitrary_element, true);\n         else\n-          // Replace from same source.\n-          __lt.__delete_min_insert(*__seqs_begin[source].first, false);\n+          // Replace from same __source.\n+          __lt.__delete_min_insert(*__seqs_begin[__source].first, false);\n       }\n \n     return __target;\n@@ -600,7 +600,7 @@ template<typename LT,\n  *\n  * @param __seqs_begin Begin iterator of iterator pair input sequence.\n  * @param __seqs_end End iterator of iterator pair input sequence.\n- * @param __target Begin iterator of __output sequence.\n+ * @param __target Begin iterator of output sequence.\n  * @param __comp Comparator.\n  * @param __length Maximum length to merge, less equal than the\n  * total number of elements available.\n@@ -646,7 +646,7 @@ template<typename LT,\n \n     __lt.__init();\n \n-    int source;\n+    int __source;\n \n #if _GLIBCXX_ASSERTIONS\n     _DifferenceType __i = 0;\n@@ -656,22 +656,22 @@ template<typename LT,\n     while (__target < __target_end)\n       {\n         // Take out.\n-        source = __lt.__get_min_source();\n+        __source = __lt.__get_min_source();\n \n #if _GLIBCXX_ASSERTIONS\n-        _GLIBCXX_PARALLEL_ASSERT(0 <= source && source < __k);\n+        _GLIBCXX_PARALLEL_ASSERT(0 <= __source && __source < __k);\n         _GLIBCXX_PARALLEL_ASSERT(__i == 0\n-            || !__comp(*(__seqs_begin[source].first), *(__target - 1)));\n+            || !__comp(*(__seqs_begin[__source].first), *(__target - 1)));\n #endif\n \n         // Feed.\n-        *(__target++) = *(__seqs_begin[source].first++);\n+        *(__target++) = *(__seqs_begin[__source].first++);\n \n #if _GLIBCXX_ASSERTIONS\n         ++__i;\n #endif\n-        // Replace from same source.\n-        __lt.__delete_min_insert(*__seqs_begin[source].first, false);\n+        // Replace from same __source.\n+        __lt.__delete_min_insert(*__seqs_begin[__source].first, false);\n       }\n \n     return __target;\n@@ -689,7 +689,7 @@ template<typename LT,\n  *\n  * @param __seqs_begin Begin iterator of iterator pair input sequence.\n  * @param __seqs_end End iterator of iterator pair input sequence.\n- * @param __target Begin iterator of __output sequence.\n+ * @param __target Begin iterator of output sequence.\n  * @param __comp Comparator.\n  * @param __length Maximum length to merge, less equal than the\n  * total number of elements available.\n@@ -726,7 +726,7 @@ template<\n     _RAIter3 __target_end;\n \n     for (_RAIterIterator __s = __seqs_begin; __s != __seqs_end; ++__s)\n-      // Move the sequends _M_end behind the sentinel spots.  This has the\n+      // Move the sequence ends to the sentinel.  This has the\n       // effect that the sentinel appears to be within the sequence. Then,\n       // we can use the unguarded variant if we merge out as many\n       // non-sentinel elements as we have.\n@@ -829,7 +829,7 @@ struct __multiway_merge_3_variant_sentinel_switch\n       _RAIter3 __target,\n       _DifferenceTp __length, _Compare __comp)\n   {\n-    return multiway_merge_3_variant<unguarded_iterator>(\n+    return multiway_merge_3_variant<_UnguardedIterator>(\n         __seqs_begin, __seqs_end, __target, __length, __comp);\n   }\n };\n@@ -878,7 +878,7 @@ struct __multiway_merge_4_variant_sentinel_switch\n       _RAIter3 __target,\n       _DifferenceTp __length, _Compare __comp)\n   {\n-    return multiway_merge_4_variant<unguarded_iterator>(\n+    return multiway_merge_4_variant<_UnguardedIterator>(\n         __seqs_begin, __seqs_end, __target, __length, __comp);\n   }\n };\n@@ -913,7 +913,7 @@ struct __multiway_merge_k_variant_sentinel_switch\n     return multiway_merge_loser_tree_sentinel<\n         typename __gnu_cxx::__conditional_type<\n             _LoserTreeTraits<_ValueType>::_M_use_pointer\n-          , LoserTreePointerUnguarded<__stable, _ValueType, _Compare>\n+          , _LoserTreePointerUnguarded<__stable, _ValueType, _Compare>\n           , _LoserTreeUnguarded<__stable, _ValueType, _Compare>\n         >::__type>(\n             __seqs_begin, __seqs_end, __target, __sentinel, __length, __comp);\n@@ -963,11 +963,11 @@ struct __multiway_merge_k_variant_sentinel_switch\n  *  runtime settings.\n  *  @param __seqs_begin Begin iterator of iterator pair input sequence.\n  *  @param __seqs_end End iterator of iterator pair input sequence.\n- *  @param __target Begin iterator of __output sequence.\n+ *  @param __target Begin iterator of output sequence.\n  *  @param __comp Comparator.\n  *  @param __length Maximum length to merge, possibly larger than the\n  *  number of elements available.\n- *  @param __stable Stable merging incurs __a performance penalty.\n+ *  @param __stable Stable merging incurs a performance penalty.\n  *  @param __sentinel The sequences have __a __sentinel element.\n  *  @return End iterator of output sequence. */\n template<\n@@ -1267,15 +1267,15 @@ void multiway_merge_exact_splitting(\n  *\n  * Must not be called if the number of sequences is 1.\n  *\n- * @param Splitter functor to split input (either __exact or sampling based)\n+ * @param _Splitter functor to split input (either __exact or sampling based)\n  *\n  * @param __seqs_begin Begin iterator of iterator pair input sequence.\n  * @param __seqs_end End iterator of iterator pair input sequence.\n- * @param __target Begin iterator of __output sequence.\n+ * @param __target Begin iterator of output sequence.\n  * @param __comp Comparator.\n  * @param __length Maximum length to merge, possibly larger than the\n  * number of elements available.\n- * @param __stable Stable merging incurs __a performance penalty.\n+ * @param __stable Stable merging incurs a performance penalty.\n  * @param __sentinel Ignored.\n  * @return End iterator of output sequence.\n  */\n@@ -1285,14 +1285,14 @@ template<\n     typename _RAIterIterator,\n     typename _RAIter3,\n     typename _DifferenceTp,\n-    typename Splitter,\n+    typename _Splitter,\n     typename _Compare\n     >\n   _RAIter3\n   parallel_multiway_merge(_RAIterIterator __seqs_begin,\n                           _RAIterIterator __seqs_end,\n                           _RAIter3 __target,\n-                          Splitter splitter,\n+                          _Splitter __splitter,\n                           _DifferenceTp __length,\n                           _Compare __comp,\n                           _ThreadIndex __num_threads)\n@@ -1356,7 +1356,7 @@ template<\n                   __gnu_parallel::_Settings::get().merge_oversampling *\n                     __num_threads;\n \n-              splitter(__ne_seqs, __ne_seqs + __k, __length, __total_length,\n+              __splitter(__ne_seqs, __ne_seqs + __k, __length, __total_length,\n                        __comp, __pieces);\n             } //single\n "}, {"sha": "c7f10ae7511b16a723731daa1bd35c3e0f362bd0", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -373,8 +373,8 @@ template<bool __stable, bool __exact, typename _RAIter,\n \n     typedef std::vector<\n       std::pair<_SortingPlacesIterator, _SortingPlacesIterator> >\n-        seq_vector_type;\n-    seq_vector_type seqs(__sd->_M_num_threads);\n+        _SeqVector;\n+    _SeqVector seqs(__sd->_M_num_threads);\n \n     for (int __s = 0; __s < __sd->_M_num_threads; ++__s)\n       {\n@@ -386,7 +386,7 @@ template<bool __stable, bool __exact, typename _RAIter,\n \n     __possibly_stable_multiway_merge<\n         __stable,\n-        typename seq_vector_type::iterator,\n+        typename _SeqVector::iterator,\n         _RAIter,\n         _Compare, _DifferenceType>()\n           (seqs.begin(), seqs.end(),\n@@ -444,11 +444,11 @@ template<bool __stable, bool __exact, typename _RAIter,\n \n             if (!__exact)\n               {\n-                _DifferenceType size =\n+                _DifferenceType __size =\n                   (_Settings::get().sort_mwms_oversampling * __num_threads - 1)\n                         * __num_threads;\n                 __sd._M_samples = static_cast<_ValueType*>(\n-                              ::operator new(size * sizeof(_ValueType)));\n+                              ::operator new(__size * sizeof(_ValueType)));\n               }\n             else\n               __sd._M_samples = NULL;"}, {"sha": "de53f49e9f009427501aaf4910d36f6e80d1210f", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -174,23 +174,24 @@ __gnu_parallel::sequential_tag()); }\n                                __first1, __last1, __first2, __init); }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n-           typename BinaryFunction1, typename BinaryFunction2>\n+           typename _BinaryFunction1, typename _BinaryFunction2>\n     inline _Tp\n-    inner_product(_IIter1 __first1, _IIter1 __last1, \n-                  _IIter2 __first2, _Tp __init, BinaryFunction1 __binary_op1, \n-                  BinaryFunction2 __binary_op2, __gnu_parallel::sequential_tag)\n+    inner_product(_IIter1 __first1, _IIter1 __last1,\n+                  _IIter2 __first2, _Tp __init, _BinaryFunction1 __binary_op1, \n+                  _BinaryFunction2 __binary_op2,\n+                  __gnu_parallel::sequential_tag)\n     { return _GLIBCXX_STD_P::inner_product(__first1, __last1, __first2, __init,\n                                            __binary_op1, __binary_op2); }\n \n   // Parallel algorithm for random access iterators.\n   template<typename _RAIter1, typename _RAIter2,\n-           typename _Tp, typename BinaryFunction1, typename BinaryFunction2>\n+           typename _Tp, typename _BinaryFunction1, typename _BinaryFunction2>\n     _Tp\n     __inner_product_switch(_RAIter1 __first1,\n                          _RAIter1 __last1,\n                          _RAIter2 __first2, _Tp __init,\n-                         BinaryFunction1 __binary_op1,\n-                         BinaryFunction2 __binary_op2,\n+                         _BinaryFunction1 __binary_op1,\n+                         _BinaryFunction2 __binary_op2,\n                          random_access_iterator_tag,\n                          random_access_iterator_tag,\n                          __gnu_parallel::_Parallelism __parallelism_tag\n@@ -219,24 +220,24 @@ __gnu_parallel::sequential_tag()); }\n \n   // No parallelism for input iterators.\n   template<typename _IIter1, typename _IIter2, typename _Tp,\n-           typename BinaryFunction1, typename BinaryFunction2,\n+           typename _BinaryFunction1, typename _BinaryFunction2,\n            typename _IteratorTag1, typename _IteratorTag2>\n     inline _Tp\n     __inner_product_switch(_IIter1 __first1, _IIter1 __last1, \n                          _IIter2 __first2, _Tp __init, \n-                         BinaryFunction1 __binary_op1,\n-                         BinaryFunction2 __binary_op2, \n+                         _BinaryFunction1 __binary_op1,\n+                         _BinaryFunction2 __binary_op2, \n                          _IteratorTag1, _IteratorTag2)\n     { return inner_product(__first1, __last1, __first2, __init,\n                            __binary_op1, __binary_op2,\n                            __gnu_parallel::sequential_tag()); }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n-           typename BinaryFunction1, typename BinaryFunction2>\n+           typename _BinaryFunction1, typename _BinaryFunction2>\n     inline _Tp\n     inner_product(_IIter1 __first1, _IIter1 __last1, \n-                  _IIter2 __first2, _Tp __init, BinaryFunction1 __binary_op1, \n-                  BinaryFunction2 __binary_op2, \n+                  _IIter2 __first2, _Tp __init, _BinaryFunction1 __binary_op1, \n+                  _BinaryFunction2 __binary_op2, \n                   __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       typedef iterator_traits<_IIter1> _TraitsType1;\n@@ -252,11 +253,11 @@ __gnu_parallel::sequential_tag()); }\n     }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n-           typename BinaryFunction1, typename BinaryFunction2>\n+           typename _BinaryFunction1, typename _BinaryFunction2>\n     inline _Tp\n     inner_product(_IIter1 __first1, _IIter1 __last1, \n-                  _IIter2 __first2, _Tp __init, BinaryFunction1 __binary_op1, \n-                  BinaryFunction2 __binary_op2)\n+                  _IIter2 __first2, _Tp __init, _BinaryFunction1 __binary_op1, \n+                  _BinaryFunction2 __binary_op2)\n     {\n       typedef iterator_traits<_IIter1> _TraitsType1;\n       typedef typename _TraitsType1::iterator_category _IteratorCategory1;\n@@ -275,18 +276,18 @@ __gnu_parallel::sequential_tag()); }\n                   _IIter2 __first2, _Tp __init, \n                   __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n-      typedef iterator_traits<_IIter1> traits_type1;\n-      typedef typename traits_type1::value_type value_type1;\n-      typedef iterator_traits<_IIter2> traits_type2;\n-      typedef typename traits_type2::value_type value_type2;\n+      typedef iterator_traits<_IIter1> _TraitsType1;\n+      typedef typename _TraitsType1::value_type _ValueType1;\n+      typedef iterator_traits<_IIter2> _TraitsType2;\n+      typedef typename _TraitsType2::value_type _ValueType2;\n \n       typedef typename\n-        __gnu_parallel::_Multiplies<value_type1, value_type2>::__result\n+        __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::__result\n         _MultipliesResultType;\n       return inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n                            __gnu_parallel::\n-                           _Multiplies<value_type1, value_type2>(),\n+                           _Multiplies<_ValueType1, _ValueType2>(),\n                            __parallelism_tag);\n     }\n \n@@ -295,18 +296,18 @@ __gnu_parallel::sequential_tag()); }\n     inner_product(_IIter1 __first1, _IIter1 __last1, \n                   _IIter2 __first2, _Tp __init)\n     {\n-      typedef iterator_traits<_IIter1> traits_type1;\n-      typedef typename traits_type1::value_type value_type1;\n-      typedef iterator_traits<_IIter2> traits_type2;\n-      typedef typename traits_type2::value_type value_type2;\n+      typedef iterator_traits<_IIter1> _TraitsType1;\n+      typedef typename _TraitsType1::value_type _ValueType1;\n+      typedef iterator_traits<_IIter2> _TraitsType2;\n+      typedef typename _TraitsType2::value_type _ValueType2;\n \n       typedef typename\n-        __gnu_parallel::_Multiplies<value_type1, value_type2>::__result\n+        __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::__result\n         _MultipliesResultType;\n       return inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n                            __gnu_parallel::\n-                           _Multiplies<value_type1, value_type2>());\n+                           _Multiplies<_ValueType1, _ValueType2>());\n     }\n \n   // Sequential fallback.\n@@ -368,8 +369,8 @@ __gnu_parallel::sequential_tag()); }\n     partial_sum(_IIter __begin, _IIter __end, _OutputIterator __result,\n                 _BinaryOperation __binary_op)\n     {\n-      typedef iterator_traits<_IIter> traitsi_type;\n-      typedef typename traitsi_type::iterator_category _IIteratorCategory;\n+      typedef iterator_traits<_IIter> _ITraitsType;\n+      typedef typename _ITraitsType::iterator_category _IIteratorCategory;\n \n       typedef iterator_traits<_OutputIterator> _OTraitsType;\n       typedef typename _OTraitsType::iterator_category _OIterCategory;\n@@ -474,8 +475,8 @@ __gnu_parallel::sequential_tag()); }\n                         _OutputIterator __result, _BinaryOperation __binary_op,\n                         __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n-      typedef iterator_traits<_IIter> traitsi_type;\n-      typedef typename traitsi_type::iterator_category _IIteratorCategory;\n+      typedef iterator_traits<_IIter> _ITraitsType;\n+      typedef typename _ITraitsType::iterator_category _IIteratorCategory;\n \n       typedef iterator_traits<_OutputIterator> _OTraitsType;\n       typedef typename _OTraitsType::iterator_category _OIterCategory;\n@@ -491,8 +492,8 @@ __gnu_parallel::sequential_tag()); }\n     adjacent_difference(_IIter __begin, _IIter __end,\n                         _OutputIterator __result, _BinaryOperation __binary_op)\n     {\n-      typedef iterator_traits<_IIter> traitsi_type;\n-      typedef typename traitsi_type::iterator_category _IIteratorCategory;\n+      typedef iterator_traits<_IIter> _ITraitsType;\n+      typedef typename _ITraitsType::iterator_category _IIteratorCategory;\n \n       typedef iterator_traits<_OutputIterator> _OTraitsType;\n       typedef typename _OTraitsType::iterator_category _OIterCategory;"}, {"sha": "bb6a9bd06120dab095cdea281100d38a5167f013", "filename": "libstdc++-v3/include/parallel/numericfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -157,7 +157,7 @@ namespace __parallel\n   template<typename _RAIter1, typename _RAIter2, typename _Tp,\n            typename BinaryFunction1, typename BinaryFunction2>\n     _Tp\n-    __inner_product_switch(_RAIter1, _RAIter1, _RAIter2, _Tp, BinaryFunction1, \n+    __inner_product_switch(_RAIter1, _RAIter1, _RAIter2, _Tp, BinaryFunction1,\n                          BinaryFunction2, random_access_iterator_tag, \n                          random_access_iterator_tag, \n                          __gnu_parallel::_Parallelism"}, {"sha": "1c91be1ae4d038a3b73d4cec8a37707139b98aa8", "filename": "libstdc++-v3/include/parallel/omp_loop.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -44,14 +44,14 @@ namespace __gnu_parallel\n /** @brief Embarrassingly parallel algorithm for random access\n   * iterators, using an OpenMP for loop.\n   *\n-  *  @param __begin Begin iterator of element __sequence.\n-  *  @param __end End iterator of element __sequence.\n+  *  @param __begin Begin iterator of element sequence.\n+  *  @param __end End iterator of element sequence.\n   *  @param __o User-supplied functor (comparator, predicate, adding\n   *  functor, etc.).\n   *  @param __f Functor to \"process\" an element with __op (depends on\n   *  desired functionality, e. g. for std::for_each(), ...).\n   *  @param __r Functor to \"add\" a single __result to the already\n-  *  processed __elements (depends on functionality).\n+  *  processed elements (depends on functionality).\n   *  @param __base Base value for reduction.\n   *  @param __output Pointer to position where final result is written to\n   *  @param __bound Maximum number of elements processed (e. g. for"}, {"sha": "00516bfb1db852578d4edf9eefd3685948cff15d", "filename": "libstdc++-v3/include/parallel/omp_loop_static.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -44,8 +44,8 @@ namespace __gnu_parallel\n   /** @brief Embarrassingly parallel algorithm for random access\n    * iterators, using an OpenMP for loop with static scheduling.\n    *\n-   *  @param __begin Begin iterator of element __sequence.\n-   *  @param __end End iterator of element __sequence.\n+   *  @param __begin Begin iterator of element sequence.\n+   *  @param __end End iterator of element sequence.\n    *  @param __o User-supplied functor (comparator, predicate, adding\n    *  functor, ...).\n    *  @param __f Functor to \"process\" an element with __op (depends on"}, {"sha": "d5e00affbe9c4e35c0dbd60922d7a1dc92c33524", "filename": "libstdc++-v3/include/parallel/par_loop.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -45,14 +45,14 @@ namespace __gnu_parallel\n   * iterators, using hand-crafted parallelization by equal splitting\n   * the work.\n   *\n-  *  @param __begin Begin iterator of element __sequence.\n-  *  @param __end End iterator of element __sequence.\n+  *  @param __begin Begin iterator of element sequence.\n+  *  @param __end End iterator of element sequence.\n   *  @param __o User-supplied functor (comparator, predicate, adding\n   *  functor, ...)\n   *  @param __f Functor to \"process\" an element with __op (depends on\n   *  desired functionality, e. g. for std::for_each(), ...).\n   *  @param __r Functor to \"add\" a single __result to the already\n-  *  processed __elements (depends on functionality).\n+  *  processed elements (depends on functionality).\n   *  @param __base Base value for reduction.\n   *  @param __output Pointer to position where final result is written to\n   *  @param __bound Maximum number of elements processed (e. g. for"}, {"sha": "c8d2965dedb952b0451aa55e0d8e0287ea6ceb81", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -114,13 +114,13 @@ template<typename _RAIter, typename _Predicate>\n \n             // Private.\n             _DifferenceType __thread_left, __thread_left_border,\n-                            thread_right, __thread_right_border;\n+                            __thread_right, __thread_right_border;\n             __thread_left = __left + 1;\n \n             // Just to satisfy the condition below.\n             __thread_left_border = __thread_left - 1;\n-            thread_right = __n - 1;\n-            __thread_right_border = thread_right + 1;\n+            __thread_right = __n - 1;\n+            __thread_right_border = __thread_right + 1;\n \n             bool __iam_finished = false;\n             while (!__iam_finished)\n@@ -139,14 +139,14 @@ template<typename _RAIter, typename _Predicate>\n                     omp_unset_lock(&__result_lock);\n                   }\n \n-                if (thread_right < __thread_right_border)\n+                if (__thread_right < __thread_right_border)\n                   {\n                     omp_set_lock(&__result_lock);\n                     if (__left > __right - (__chunk_size - 1))\n                       __iam_finished = true;\n                     else\n                       {\n-                        thread_right = __right;\n+                        __thread_right = __right;\n                         __thread_right_border = __right - (__chunk_size - 1);\n                         __right -= __chunk_size;\n                       }\n@@ -157,31 +157,31 @@ template<typename _RAIter, typename _Predicate>\n                   break;\n \n                 // Swap as usual.\n-                while (__thread_left < thread_right)\n+                while (__thread_left < __thread_right)\n                   {\n                     while (__pred(__begin[__thread_left])\n                             && __thread_left <= __thread_left_border)\n                       ++__thread_left;\n-                    while (!__pred(__begin[thread_right])\n-                            && thread_right >= __thread_right_border)\n-                      --thread_right;\n+                    while (!__pred(__begin[__thread_right])\n+                            && __thread_right >= __thread_right_border)\n+                      --__thread_right;\n \n                     if (__thread_left > __thread_left_border\n-                        || thread_right < __thread_right_border)\n+                        || __thread_right < __thread_right_border)\n                       // Fetch new chunk(__s).\n                       break;\n \n-                    std::swap(__begin[__thread_left], __begin[thread_right]);\n+                    std::swap(__begin[__thread_left], __begin[__thread_right]);\n                     ++__thread_left;\n-                    --thread_right;\n+                    --__thread_right;\n                   }\n               }\n \n             // Now swap the leftover chunks to the right places.\n             if (__thread_left <= __thread_left_border)\n #             pragma omp atomic\n               ++__leftover_left;\n-            if (thread_right >= __thread_right_border)\n+            if (__thread_right >= __thread_right_border)\n #             pragma omp atomic\n               ++__leftover_right;\n \n@@ -206,7 +206,7 @@ template<typename _RAIter, typename _Predicate>\n               }\n \n             // <=> __thread_right_border - (__chunk_size - 1) <= __rightnew\n-            if (thread_right >= __thread_right_border\n+            if (__thread_right >= __thread_right_border\n                 && __thread_right_border <= __rightnew)\n               {\n                 // Chunk already in place, reserve spot.\n@@ -241,7 +241,7 @@ template<typename _RAIter, typename _Predicate>\n                                  __begin + __swapstart);\n               }\n \n-            if (thread_right >= __thread_right_border\n+            if (__thread_right >= __thread_right_border\n                 && __thread_right_border > __rightnew)\n               {\n                 // Find spot and swap\n@@ -331,7 +331,7 @@ template<typename _RAIter, typename _Predicate>\n   */\n template<typename _RAIter, typename _Compare>\n   void \n-  parallel_nth_element(_RAIter __begin, _RAIter __nth, \n+  __parallel_nth_element(_RAIter __begin, _RAIter __nth, \n                        _RAIter __end, _Compare __comp)\n   {\n     typedef std::iterator_traits<_RAIter> _TraitsType;\n@@ -343,11 +343,11 @@ template<typename _RAIter, typename _Compare>\n     _RAIter __split;\n     _RandomNumber __rng;\n \n-    _DifferenceType minimum_length =\n+    _DifferenceType __minimum_length =\n       std::max<_DifferenceType>(2, _Settings::get().partition_minimal_n);\n \n     // Break if input range to small.\n-    while (static_cast<_SequenceIndex>(__end - __begin) >= minimum_length)\n+    while (static_cast<_SequenceIndex>(__end - __begin) >= __minimum_length)\n       {\n         _DifferenceType __n = __end - __begin;\n \n@@ -419,11 +419,11 @@ template<typename _RAIter, typename _Compare>\n *  @param __comp Comparator. */\n template<typename _RAIter, typename _Compare>\n   void\n-  parallel_partial_sort(_RAIter __begin,\n+  __parallel_partial_sort(_RAIter __begin,\n                         _RAIter __middle,\n                         _RAIter __end, _Compare __comp)\n   {\n-    parallel_nth_element(__begin, __middle, __end, __comp);\n+    __parallel_nth_element(__begin, __middle, __end, __comp);\n     std::sort(__begin, __middle, __comp);\n   }\n "}, {"sha": "cb6d4278b85a422ca924788df8a6635c73128c68", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -55,7 +55,7 @@ template<typename _RAIter>\n     typedef typename _TraitsType::value_type _ValueType;\n     typedef typename _TraitsType::difference_type _DifferenceType;\n \n-    /** @brief Begin iterator of the _M_source. */\n+    /** @brief Begin iterator of the __source. */\n     _RAIter& _M_source;\n \n     /** @brief Temporary arrays for each thread. */\n@@ -80,14 +80,14 @@ template<typename _RAIter>\n     int _M_num_bits;\n \n     /** @brief Constructor. */\n-    _DRandomShufflingGlobalData(_RAIter& _source)\n-    : _M_source(_source) { }\n+    _DRandomShufflingGlobalData(_RAIter& __source)\n+    : _M_source(__source) { }\n   };\n \n /** @brief Local data for a thread participating in\n     __gnu_parallel::__parallel_random_shuffle().\n   */\n-template<typename _RAIter, typename RandomNumberGenerator>\n+template<typename _RAIter, typename _RandomNumberGenerator>\n   struct _DRSSorterPU\n   {\n     /** @brief Number of threads participating in total. */\n@@ -110,24 +110,24 @@ template<typename _RAIter, typename RandomNumberGenerator>\n   *  @param logp Logarithm (basis 2) of the upper range __bound.\n   *  @param __rng Random number generator to use.\n   */\n-template<typename RandomNumberGenerator>\n+template<typename _RandomNumberGenerator>\n   inline int\n-  __random_number_pow2(int logp, RandomNumberGenerator& __rng)\n+  __random_number_pow2(int logp, _RandomNumberGenerator& __rng)\n   { return __rng.__genrand_bits(logp); }\n \n /** @brief Random shuffle code executed by each thread.\n   *  @param __pus Array of thread-local data records. */\n-template<typename _RAIter, typename RandomNumberGenerator>\n+template<typename _RAIter, typename _RandomNumberGenerator>\n   void \n   __parallel_random_shuffle_drs_pu(_DRSSorterPU<_RAIter,\n-                                 RandomNumberGenerator>* __pus)\n+                                 _RandomNumberGenerator>* __pus)\n   {\n     typedef std::iterator_traits<_RAIter> _TraitsType;\n     typedef typename _TraitsType::value_type _ValueType;\n     typedef typename _TraitsType::difference_type _DifferenceType;\n \n     _ThreadIndex __iam = omp_get_thread_num();\n-    _DRSSorterPU<_RAIter, RandomNumberGenerator>* d = &__pus[__iam];\n+    _DRSSorterPU<_RAIter, _RandomNumberGenerator>* d = &__pus[__iam];\n     _DRandomShufflingGlobalData<_RAIter>* _M_sd = d->_M_sd;\n \n     // Indexing: _M_dist[bin][processor]\n@@ -248,7 +248,7 @@ template<typename _Tp>\n     if (__x <= 1)\n       return 1;\n     else\n-      return (_Tp)1 << (__log2(__x - 1) + 1);\n+      return (_Tp)1 << (__rd_log2(__x - 1) + 1);\n   }\n \n /** @brief Main parallel random shuffle step.\n@@ -258,14 +258,14 @@ template<typename _Tp>\n   *  @param __num_threads Number of threads to use.\n   *  @param __rng Random number generator to use.\n   */\n-template<typename _RAIter, typename RandomNumberGenerator>\n+template<typename _RAIter, typename _RandomNumberGenerator>\n   void\n   __parallel_random_shuffle_drs(_RAIter __begin,\n                               _RAIter __end,\n                               typename std::iterator_traits\n                               <_RAIter>::difference_type __n,\n                               _ThreadIndex __num_threads,\n-                              RandomNumberGenerator& __rng)\n+                              _RandomNumberGenerator& __rng)\n   {\n     typedef std::iterator_traits<_RAIter> _TraitsType;\n     typedef typename _TraitsType::value_type _ValueType;\n@@ -352,7 +352,7 @@ template<typename _RAIter, typename RandomNumberGenerator>\n               = new _DifferenceType[__num_threads + 1];\n             int bin_cursor = 0;\n             _M_sd._M_num_bins = _M_num_bins;\n-            _M_sd._M_num_bits = __log2(_M_num_bins);\n+            _M_sd._M_num_bits = __rd_log2(_M_num_bins);\n \n             _DifferenceType __chunk_length = __n / __num_threads,\n                             __split = __n % __num_threads, __start = 0;\n@@ -396,11 +396,11 @@ template<typename _RAIter, typename RandomNumberGenerator>\n  *  @param __end End iterator of sequence.\n  *  @param __rng Random number generator to use.\n  */\n-template<typename _RAIter, typename RandomNumberGenerator>\n+template<typename _RAIter, typename _RandomNumberGenerator>\n   void\n   __sequential_random_shuffle(_RAIter __begin, \n                             _RAIter __end,\n-                            RandomNumberGenerator& __rng)\n+                            _RandomNumberGenerator& __rng)\n   {\n     typedef std::iterator_traits<_RAIter> _TraitsType;\n     typedef typename _TraitsType::value_type _ValueType;\n@@ -451,7 +451,7 @@ template<typename _RAIter, typename RandomNumberGenerator>\n       }\n #endif\n \n-    int _M_num_bits = __log2(_M_num_bins);\n+    int _M_num_bits = __rd_log2(_M_num_bins);\n \n     if (_M_num_bins > 1)\n       {\n@@ -511,11 +511,11 @@ template<typename _RAIter, typename RandomNumberGenerator>\n  *  @param __end End iterator of sequence.\n  *  @param __rng Random number generator to use.\n  */\n-template<typename _RAIter, typename RandomNumberGenerator>\n+template<typename _RAIter, typename _RandomNumberGenerator>\n   inline void\n   __parallel_random_shuffle(_RAIter __begin,\n                           _RAIter __end,\n-                          RandomNumberGenerator __rng = _RandomNumber())\n+                          _RandomNumberGenerator __rng = _RandomNumber())\n   {\n     typedef std::iterator_traits<_RAIter> _TraitsType;\n     typedef typename _TraitsType::difference_type _DifferenceType;"}, {"sha": "1fc8ceaa5c87d8a842d90fdcd0e9682c0df4cf51", "filename": "libstdc++-v3/include/parallel/search.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsearch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsearch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsearch.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file parallel/search.h\n- *  @brief Parallel implementation __base for std::search() and\n+ *  @brief Parallel implementation base for std::search() and\n  *  std::search_n().\n  *  This file is a GNU parallel extension to the Standard C++ Library.\n  */"}, {"sha": "2d38cad4d96a4853bfde05accff24777a8071028", "filename": "libstdc++-v3/include/parallel/sort.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -58,7 +58,7 @@ namespace __gnu_parallel\n   template<bool __stable, typename _RAIter,\n            typename _Compare, typename _Parallelism>\n   void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n   _Compare __comp, _Parallelism __parallelism);\n         \n   /** \n@@ -71,7 +71,7 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n   inline void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n     _Compare __comp, multiway_mergesort_tag __parallelism)\n   {\n     _GLIBCXX_CALL(__end - __begin)\n@@ -94,7 +94,7 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n   inline void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n     _Compare __comp, multiway_mergesort_exact_tag __parallelism)\n   {\n     _GLIBCXX_CALL(__end - __begin)\n@@ -113,7 +113,7 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n   inline void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n     _Compare __comp, multiway_mergesort_sampling_tag __parallelism)\n   {\n     _GLIBCXX_CALL(__end - __begin)\n@@ -131,7 +131,7 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n   inline void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n     _Compare __comp, quicksort_tag __parallelism)\n   {\n     _GLIBCXX_CALL(__end - __begin)\n@@ -152,7 +152,7 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n   inline void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n     _Compare __comp, balanced_quicksort_tag __parallelism)\n   {\n     _GLIBCXX_CALL(__end - __begin)\n@@ -174,12 +174,12 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n   inline void\n-  parallel_sort(_RAIter __begin, _RAIter __end,\n+  __parallel_sort(_RAIter __begin, _RAIter __end,\n     _Compare __comp, default_parallel_tag __parallelism)\n   {\n     _GLIBCXX_CALL(__end - __begin)\n \n-    parallel_sort<__stable>\n+    __parallel_sort<__stable>\n       (__begin, __end, __comp,\n         multiway_mergesort_exact_tag(__parallelism.__get_num_threads()));\n   }\n@@ -195,7 +195,7 @@ namespace __gnu_parallel\n    */\n   template<bool __stable, typename _RAIter, typename _Compare>\n     inline void\n-    parallel_sort(_RAIter __begin, _RAIter __end,\n+    __parallel_sort(_RAIter __begin, _RAIter __end,\n                   _Compare __comp, parallel_tag __parallelism)\n     {\n       _GLIBCXX_CALL(__end - __begin)"}, {"sha": "66c2babf269c9f0833f0f5f00286f03a48599d5f", "filename": "libstdc++-v3/include/parallel/workstealing.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459d22ed1a62b3c91188ef5e673e9275db7d7a3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h?ref=4459d22ed1a62b3c91188ef5e673e9275db7d7a3", "patch": "@@ -74,16 +74,16 @@ template<typename _DifferenceTp>\n \n /** @brief Work stealing algorithm for random access iterators.\n   *\n-  *  Uses O(1) additional memory. Synchronization at __job lists is\n+  *  Uses O(1) additional memory. Synchronization at job lists is\n   *  done with atomic operations.\n-  *  @param __begin Begin iterator of element __sequence.\n-  *  @param __end End iterator of element __sequence.\n+  *  @param __begin Begin iterator of element sequence.\n+  *  @param __end End iterator of element sequence.\n   *  @param __op User-supplied functor (comparator, predicate, adding\n   *  functor, ...).\n   *  @param __f Functor to \"process\" an element with __op (depends on\n   *  desired functionality, e. g. for std::for_each(), ...).\n   *  @param __r Functor to \"add\" a single __result to the already\n-  *  processed __elements (depends on functionality).\n+  *  processed elements (depends on functionality).\n   *  @param __base Base value for reduction.\n   *  @param __output Pointer to position where final result is written to\n   *  @param __bound Maximum number of elements processed (e. g. for\n@@ -209,21 +209,21 @@ template<typename _RAIter,\n               {\n                 // fetch-and-add call\n                 // Reserve current job block (size __chunk_size) in my queue.\n-                _DifferenceType current_job =\n+                _DifferenceType __current_job =\n                   __fetch_and_add<_DifferenceType>(\n                     &(__my_job._M_first), __chunk_size);\n \n                 // Update _M_load, to make the three values consistent,\n                 // _M_first might have been changed in the meantime\n                 __my_job._M_load = __my_job._M_last - __my_job._M_first + 1;\n-                for (_DifferenceType job_counter = 0;\n-                     job_counter < __chunk_size\n-                       && current_job <= __my_job._M_last;\n-                     ++job_counter)\n+                for (_DifferenceType __job_counter = 0;\n+                     __job_counter < __chunk_size\n+                       && __current_job <= __my_job._M_last;\n+                     ++__job_counter)\n                   {\n                     // Yes: process it!\n-                    __current = __begin + current_job;\n-                    ++current_job;\n+                    __current = __begin + __current_job;\n+                    ++__current_job;\n \n                     // Do actual work.\n                     __result = __r(__result, __f(__op, __current));\n@@ -271,12 +271,12 @@ template<typename _RAIter,\n                 _DifferenceType __stolen_first =\n                     __fetch_and_add<_DifferenceType>(\n                         &(__job[__victim * __stride]._M_first), __steal);\n-                _DifferenceType stolen_try =\n+                _DifferenceType __stolen_try =\n                     __stolen_first + __steal - _DifferenceType(1);\n \n                 __my_job._M_first = __stolen_first;\n                 __my_job._M_last =\n-                  __gnu_parallel::min(stolen_try, __supposed_last);\n+                  __gnu_parallel::min(__stolen_try, __supposed_last);\n                 __my_job._M_load = __my_job._M_last - __my_job._M_first + 1;\n \n                 // Has potential work again."}]}