{"sha": "aee5ee35602e0098c2ae16fa2fc9c8845caf92ed", "node_id": "C_kwDOANBUbNoAKGFlZTVlZTM1NjAyZTAwOThjMmFlMTZmYTJmYzljODg0NWNhZjkyZWQ", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-02-22T10:42:43Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-02-22T14:54:55Z"}, "message": "Rust: In 'type_for_mode' langhook also consider all 'int_n' modes/types\n\nAs reported in \"Rust related issues\" at the end of\n<https://inbox.sourceware.org/gcc-patches/20221219212344.ewtuzd2jtztm77x2@lug-owl.de>\n\"Modula-2 / Rust: Many targets failing\",\n<https://github.com/Rust-GCC/gccrs/issues/1713>\n\"Test failure on msp430-elfbare target\", for '--target=msp430-elfbar' we ICE:\n\n    <built-in>: internal compiler error: Segmentation fault\n    0xf2efbf crash_signal\n          ../../gcc/gcc/toplev.cc:314\n    0x120c8c7 build_function_type(tree_node*, tree_node*, bool)\n          ../../gcc/gcc/tree.cc:7360\n    0x120cc20 build_function_type_list(tree_node*, ...)\n          ../../gcc/gcc/tree.cc:7442\n    0x120d16b build_common_builtin_nodes()\n          ../../gcc/gcc/tree.cc:9883\n    0x8449b4 grs_langhook_init\n          ../../gcc/gcc/rust/rust-lang.cc:132\n    [...]\n\nThis is due to 'tmp == NULL' for 'gcc/tree.cc:build_common_builtin_nodes':\n\n    tmp = lang_hooks.types.type_for_mode (targetm.eh_return_filter_mode (), 0);\n\n..., were 'targetm.eh_return_filter_mode' (that is,\n'gcc/targhooks.cc:default_eh_return_filter_mode',\nvia calling 'targetm.unwind_word_mode':\n'gcc/config/msp430/msp430.cc:msp430_unwind_word_mode') returns 'PSImode',\nand 'lang_hooks.types.type_for_mode' (that is,\n'gcc/rust/rust-lang.cc:grs_langhook_type_for_mode') returns 'NULL' for\n'PSImode'.\n\nAs, for example, discussed in <https://gcc.gnu.org/PR46805>\n\"ICE: SIGSEGV in optab_for_tree_code (optabs.c:407) with -O -fno-tree-scev-cprop -ftree-vectorize\",\nwe have to support \"random\" modes/types in the 'type_for_mode' langhook.\n\n\tgcc/rust/\n\t* rust-lang.cc (grs_langhook_type_for_mode): Also consider all\n\t'int_n' modes/types.", "tree": {"sha": "d2ff1fa14f3cdc0a224031bc8c172980a0cacde5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ff1fa14f3cdc0a224031bc8c172980a0cacde5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aee5ee35602e0098c2ae16fa2fc9c8845caf92ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee5ee35602e0098c2ae16fa2fc9c8845caf92ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee5ee35602e0098c2ae16fa2fc9c8845caf92ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee5ee35602e0098c2ae16fa2fc9c8845caf92ed/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da77f217c8b2089ecba3eb201e727c3fcdcd19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da77f217c8b2089ecba3eb201e727c3fcdcd19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3da77f217c8b2089ecba3eb201e727c3fcdcd19d"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "1fb1c25da7ac454f4805c8de6bfe1221fde33e12", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee5ee35602e0098c2ae16fa2fc9c8845caf92ed/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee5ee35602e0098c2ae16fa2fc9c8845caf92ed/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=aee5ee35602e0098c2ae16fa2fc9c8845caf92ed", "patch": "@@ -231,6 +231,21 @@ grs_langhook_type_for_mode (machine_mode mode, int unsignedp)\n       if (mode == TYPE_MODE (complex_integer_type_node) && !unsignedp)\n \treturn complex_integer_type_node;\n     }\n+\n+  /* See (a) <https://github.com/Rust-GCC/gccrs/issues/1713>\n+     \"Test failure on msp430-elfbare target\", and\n+     (b) <https://gcc.gnu.org/PR46805>\n+     \"ICE: SIGSEGV in optab_for_tree_code (optabs.c:407) with -O -fno-tree-scev-cprop -ftree-vectorize\"\n+     -- we have to support \"random\" modes/types here.\n+     TODO Clean all this up (either locally, or preferably per PR46805:\n+     \"Ideally we'd never use lang_hooks.types.type_for_mode (or _for_size) in the\n+     middle-end but had a pure middle-end based implementation\".  */\n+  for (size_t i = 0; i < NUM_INT_N_ENTS; i ++)\n+    if (int_n_enabled_p[i]\n+\t&& mode == int_n_data[i].m)\n+      return (unsignedp ? int_n_trees[i].unsigned_type\n+\t      : int_n_trees[i].signed_type);\n+\n   /* gcc_unreachable */\n   return NULL;\n }"}]}