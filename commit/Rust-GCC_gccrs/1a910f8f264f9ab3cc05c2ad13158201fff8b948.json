{"sha": "1a910f8f264f9ab3cc05c2ad13158201fff8b948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5MTBmOGYyNjRmOWFiM2NjMDVjMmFkMTMxNTgyMDFmZmY4Yjk0OA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-09-28T11:37:46Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-09-28T11:37:46Z"}, "message": "avr.md (adjust_len): Add lpm.\n\n\t* config/avr/avr.md (adjust_len): Add lpm.\n\t(reload_in<mode>): Use avr_out_lpm for output.  Use \"lpm\" for\n\tadjust_len.\n\t* config/avr/avr-protos.h (avr_out_lpm): New prototype.\n\t* config/avr/avr.c (avr_out_lpm): Make global.\n\t(adjust_insn_length): Handle ADJUST_LEN_LPM.\n\nFrom-SVN: r191825", "tree": {"sha": "133f18699820b6d126f491db5d7141bed55f488d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/133f18699820b6d126f491db5d7141bed55f488d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a910f8f264f9ab3cc05c2ad13158201fff8b948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a910f8f264f9ab3cc05c2ad13158201fff8b948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a910f8f264f9ab3cc05c2ad13158201fff8b948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a910f8f264f9ab3cc05c2ad13158201fff8b948/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aef8e955f7c306437d125a99607baaabadbb8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aef8e955f7c306437d125a99607baaabadbb8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aef8e955f7c306437d125a99607baaabadbb8d3"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "796f772633dd04a9274488c6ff4a9bd7a8400588", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a910f8f264f9ab3cc05c2ad13158201fff8b948", "patch": "@@ -1,3 +1,12 @@\n+2012-09-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md (adjust_len): Add lpm.\n+\t(reload_in<mode>): Use avr_out_lpm for output.  Use \"lpm\" for\n+\tadjust_len.\n+\t* config/avr/avr-protos.h (avr_out_lpm): New prototype.\n+\t* config/avr/avr.c (avr_out_lpm): Make global.\n+\t(adjust_insn_length): Handle ADJUST_LEN_LPM.\n+\n 2012-09-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/47799"}, {"sha": "46b96c2dd84ed751e659cafea1e0b62a239b4322", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=1a910f8f264f9ab3cc05c2ad13158201fff8b948", "patch": "@@ -102,6 +102,7 @@ extern int adjust_insn_length (rtx insn, int len);\n extern const char* output_reload_inhi (rtx*, rtx, int*);\n extern const char* output_reload_insisf (rtx*, rtx, int*);\n extern const char* avr_out_reload_inpsi (rtx*, rtx, int*);\n+extern const char* avr_out_lpm (rtx, rtx*, int*);\n extern void notice_update_cc (rtx body, rtx insn);\n extern int reg_unused_after (rtx insn, rtx reg);\n extern int _reg_unused_after (rtx insn, rtx reg);"}, {"sha": "1c5bab2baf0325764fa204644473712ebc62c495", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1a910f8f264f9ab3cc05c2ad13158201fff8b948", "patch": "@@ -2870,7 +2870,7 @@ avr_out_lpm_no_lpmx (rtx insn, rtx *xop, int *plen)\n    If PLEN != 0 set *PLEN to the length in words of the instruction sequence.\n    Return \"\".  */\n \n-static const char*\n+const char*\n avr_out_lpm (rtx insn, rtx *op, int *plen)\n {\n   rtx xop[7];\n@@ -7526,6 +7526,7 @@ adjust_insn_length (rtx insn, int len)\n     case ADJUST_LEN_MOV32: output_movsisf (insn, op, &len); break;\n     case ADJUST_LEN_MOVMEM: avr_out_movmem (insn, op, &len); break;\n     case ADJUST_LEN_XLOAD: avr_out_xload (insn, op, &len); break;\n+    case ADJUST_LEN_LPM: avr_out_lpm (insn, op, &len); break;\n \n     case ADJUST_LEN_SFRACT: avr_out_fract (insn, op, true, &len); break;\n     case ADJUST_LEN_UFRACT: avr_out_fract (insn, op, false, &len); break;"}, {"sha": "284860e9ec58e54ea6354b9ae63b949bc0a72598", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a910f8f264f9ab3cc05c2ad13158201fff8b948/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1a910f8f264f9ab3cc05c2ad13158201fff8b948", "patch": "@@ -141,7 +141,7 @@\n    tsthi, tstpsi, tstsi, compare, compare64, call,\n    mov8, mov16, mov24, mov32, reload_in16, reload_in24, reload_in32,\n    ufract, sfract,\n-   xload, movmem,\n+   xload, lpm, movmem,\n    ashlqi, ashrqi, lshrqi,\n    ashlhi, ashrhi, lshrhi,\n    ashlsi, ashrsi, lshrsi,\n@@ -397,12 +397,15 @@\n   [(set (match_operand:MOVMODE 0 \"register_operand\"   \"=r\")\n         (match_operand:MOVMODE 1 \"memory_operand\"      \"m\"))\n    (clobber (match_operand:QI 2 \"d_register_operand\"  \"=d\"))]\n-  \"MEM_P (operands[1])\n-   && !ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (operands[1]))\"\n+  ;; Fixme: The insn condition must not test the address space.\n+  ;;   Because the gen tools refuse to generate insns for address spaces\n+  ;;   and will generate insn-codes.h to look like:\n+  ;;   #define CODE_FOR_reload_inhi CODE_FOR_nothing\n+  \"reload_completed || reload_in_progress\"\n   {\n-    return output_movqi (insn, operands, NULL);\n+    return avr_out_lpm (insn, operands, NULL);\n   }\n-  [(set_attr \"adjust_len\" \"mov8\")\n+  [(set_attr \"adjust_len\" \"lpm\")\n    (set_attr \"cc\" \"clobber\")])\n \n "}]}