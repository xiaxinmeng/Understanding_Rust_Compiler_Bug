{"sha": "a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3YjViY2YxNWE2ODJmMjJhYzEwZDhiNzA2OWFhOGQxMTVjYWFlZg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-11-06T23:00:49Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-11-06T23:01:18Z"}, "message": "rs6000: Fix default alignment ABI break caused by MMA base support\n\nAs part of the MMA base support, we incremented BIGGEST_ALIGNMENT in\norder to align the __vector_pair and __vector_quad types to 256 and 512\nbytes respectively.  This had the unintended effect of changing the\ndefault alignment used by __attribute__ ((__aligned__)) which causes\nan ABI break because of some dodgy code in GLIBC's struct pthread.\nThe fix is to revert the BIGGEST_ALIGNMENT change and to force the\nalignment on the type itself rather than the mode used by the type.\n\n2020-11-06  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000.h (BIGGEST_ALIGNMENT): Revert previous commit\n\tso as not to break the ABI.\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Set the ABI\n\tmandated alignment for __vector_pair and __vector_quad types.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mma-alignment.c: New test.", "tree": {"sha": "1cd51135243b153c9e24ad2600f41c995c728f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cd51135243b153c9e24ad2600f41c995c728f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659ba632e440280e8d61e1ae870e917765db5ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659ba632e440280e8d61e1ae870e917765db5ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659ba632e440280e8d61e1ae870e917765db5ae5"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "3bd89a79bad49f8d75c787ed0274b1a8f9267642", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "patch": "@@ -13191,12 +13191,14 @@ rs6000_init_builtins (void)\n   if (TARGET_EXTRA_BUILTINS)\n     {\n       vector_pair_type_node = make_unsigned_type (256);\n+      SET_TYPE_ALIGN (vector_pair_type_node, 256);\n       SET_TYPE_MODE (vector_pair_type_node, POImode);\n       layout_type (vector_pair_type_node);\n       lang_hooks.types.register_builtin_type (vector_pair_type_node,\n \t\t\t\t\t      \"__vector_pair\");\n \n       vector_quad_type_node = make_unsigned_type (512);\n+      SET_TYPE_ALIGN (vector_quad_type_node, 512);\n       SET_TYPE_MODE (vector_quad_type_node, PXImode);\n       layout_type (vector_quad_type_node);\n       lang_hooks.types.register_builtin_type (vector_quad_type_node,"}, {"sha": "5a47aa14722a48cb4d89aeb1ad5be9f24b61cd21", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "patch": "@@ -776,8 +776,10 @@ extern unsigned rs6000_pointer_size;\n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 32\n \n-/* No data type wants to be aligned rounder than this.  */\n-#define BIGGEST_ALIGNMENT (TARGET_MMA ? 512 : 128)\n+/* No data type is required to be aligned rounder than this.  Warning, if\n+   BIGGEST_ALIGNMENT is changed, then this may be an ABI break.  An example\n+   of where this can break an ABI is in GLIBC's struct _Unwind_Exception.  */\n+#define BIGGEST_ALIGNMENT 128\n \n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 32"}, {"sha": "09818931b48307cfbf8bed47d0065f29a9b8f6cc", "filename": "gcc/testsuite/gcc.target/powerpc/mma-alignment.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-alignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37b5bcf15a682f22ac10d8b7069aa8d115caaef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-alignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-alignment.c?ref=a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-O2 -mhard-float\" } */\n+\n+#include <stdlib.h>\n+\n+/* The MMA types below are enabled for pre-power10 compiles, because the\n+   built-ins that use them must always be initialized in case the user has\n+   a target attribute or pragma on a function that uses the MMA built-ins.\n+   Since the test below doesn't need any other MMA support, we can enable\n+   this test case on basically any cpu that has hard floating point\n+   registers.  */\n+\n+struct\n+{\n+  int __attribute__ ((__aligned__)) ivar;\n+  __vector_pair pair;\n+  __vector_quad quad;\n+} s;\n+\n+int\n+main (void)\n+{\n+  /* Verify default alignment is 16-byte aligned (BIGGEST_ALIGNMENT).\n+     This may change in the future, but that is an ABI break, so this\n+     hardcoded test case is here to be a noisy FAIL as a warning, in\n+     case the ABI change was unintended and unwanted.  An example of where\n+     this can break an ABI is in glibc's struct _Unwind_Exception.  */\n+  if (__alignof__ (s.ivar) != 16)\n+    abort ();\n+\n+  /* Verify __vector_pair types are 32-byte aligned.  */\n+  if (__alignof__ (s.pair) != 32)\n+    abort ();\n+\n+  /* Verify __vector_quad types are 64-byte aligned.  */\n+  if (__alignof__ (s.quad) != 64)\n+    abort ();\n+\n+  return 0;\n+}"}]}