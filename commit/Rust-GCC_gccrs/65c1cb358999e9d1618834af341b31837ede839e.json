{"sha": "65c1cb358999e9d1618834af341b31837ede839e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjMWNiMzU4OTk5ZTlkMTYxODgzNGFmMzQxYjMxODM3ZWRlODM5ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-04T20:20:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-04T20:20:59Z"}, "message": "diagnostics: fix excessive range-printing involving macros [PR97932]\n\nPR c/97932 describes a bug in which diagnostic_show_locus prints most\nof a source file.\n\nThe issue is that it prints a range in which the start and end locations\nare part of the same macro map, but the start location is for a token in\nthe definition of the macro, whereas the end location is for a token in\nan argument of the macro.\n\nThis patch extends compatible_locations_p to require that range-printing\nof macro maps requires the location to either be both for the definition\nof the macro, or both for the arguments of the macro (not one of each),\nfixing the issue.\n\ngcc/ChangeLog:\n\tPR c/97932\n\t* diagnostic-show-locus.c (compatible_locations_p): Require\n\tlocations in the same macro map to be either both from the\n\tmacro definition, or both from the macro arguments.\n\ngcc/testsuite/ChangeLog:\n\tPR c/97932\n\t* gcc.dg/pr97932.c: New test.", "tree": {"sha": "c83648170ec95b34974a38570125e9d94736f203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c83648170ec95b34974a38570125e9d94736f203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c1cb358999e9d1618834af341b31837ede839e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c1cb358999e9d1618834af341b31837ede839e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c1cb358999e9d1618834af341b31837ede839e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c1cb358999e9d1618834af341b31837ede839e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26fd3bf75b52c743b2c94802957c4f7379da7258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fd3bf75b52c743b2c94802957c4f7379da7258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fd3bf75b52c743b2c94802957c4f7379da7258"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "458830aa2a9769b4b31b49e479ac9032a742b458", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c1cb358999e9d1618834af341b31837ede839e/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c1cb358999e9d1618834af341b31837ede839e/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=65c1cb358999e9d1618834af341b31837ede839e", "patch": "@@ -905,6 +905,15 @@ compatible_locations_p (location_t loc_a, location_t loc_b)\n       /* Are both within the same macro expansion?  */\n       if (linemap_macro_expansion_map_p (map_a))\n \t{\n+\t  /* If so, then they're only compatible if either both are\n+\t     from the macro definition, or both from the macro arguments.  */\n+\t  bool loc_a_from_defn\n+\t    = linemap_location_from_macro_definition_p (line_table, loc_a);\n+\t  bool loc_b_from_defn\n+\t    = linemap_location_from_macro_definition_p (line_table, loc_b);\n+\t  if (loc_a_from_defn != loc_b_from_defn)\n+\t    return false;\n+\n \t  /* Expand each location towards the spelling location, and\n \t     recurse.  */\n \t  const line_map_macro *macro_map = linemap_check_macro (map_a);"}, {"sha": "4a0b3041375d7a7f816d46a006656cff25a0877b", "filename": "gcc/testsuite/gcc.dg/pr97932.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c1cb358999e9d1618834af341b31837ede839e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97932.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c1cb358999e9d1618834af341b31837ede839e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97932.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97932.c?ref=65c1cb358999e9d1618834af341b31837ede839e", "patch": "@@ -0,0 +1,125 @@\n+/* Verify that we don't emit ranges that span both\n+   a macro definition location and a macro expansion location.  */\n+\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* Various cases involving the ranges of the LHS and RHS operands to \"-\".  */\n+\n+/* Case 1\n+   start token is in macro definition (\"&\"),\n+   end token is in macro invocation (\"a\" and \"b\").  */   \n+\n+#define M1(A, B) &A - &B /* { dg-error \"invalid operands\" } */\n+\n+/* Intervening\n+   material\n+   that\n+   ought\n+   not\n+   to\n+   be\n+   printed.  */\n+\n+int test_1 (float a, int b)\n+{\n+  return M1(a, b); /* { dg-message \"in expansion of macro 'M1'\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #define M1(A, B) &A - &B\n+                     ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return M1(a, b);\n+          ^~\n+   { dg-end-multiline-output \"\" } */\n+\n+/* Case 2:\n+   start and end tokens are both in macro invocation (\"&\", and \"a\"/\"b\").  */   \n+\n+#define M2(A, B) A - B /* { dg-error \"invalid operands\" } */\n+\n+/* Intervening\n+   material\n+   that\n+   ought\n+   not\n+   to\n+   be\n+   printed.  */\n+\n+int test_2 (float a, int b)\n+{\n+  return M2(&a, &b); /* { dg-message \"in expansion of macro 'M2'\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #define M2(A, B) A - B\n+                    ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return M2(&a, &b);\n+          ^~\n+   { dg-end-multiline-output \"\" } */\n+\n+/* Case 3:\n+   start token is in macro invocation (\"&\"),\n+   end token is in macro definition (\"a\").  */   \n+\n+#define M3(OP) OP a - OP b /* { dg-error \"invalid operands\" } */\n+\n+/* Intervening\n+   material\n+   that\n+   ought\n+   not\n+   to\n+   be\n+   printed.  */\n+\n+int test_3 (float a, int b)\n+{\n+  return M3(&); /* { dg-message \"in expansion of macro 'M3'\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #define M3(OP) OP a - OP b\n+                     ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return M3(&);\n+          ^~\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+/* Case 4:\n+   start and end tokens are both in macro definition (\"&a\").  */   \n+\n+#define M4 &a - &b /* { dg-error \"invalid operands\" } */\n+\n+/* Intervening\n+   material\n+   that\n+   ought\n+   not\n+   to\n+   be\n+   printed.  */\n+\n+int test_4 (float a, int b)\n+{\n+  return M4; /* { dg-message \"in expansion of macro 'M4'\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #define M4 &a - &b\n+            ~~ ^ ~~\n+            |    |\n+            |    int *\n+            float *\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return M4;\n+          ^~\n+   { dg-end-multiline-output \"\" } */\n+"}]}