{"sha": "5e7d199739f245eaceed1e74ffd48429e2401c86", "node_id": "C_kwDOANBUbNoAKDVlN2QxOTk3MzlmMjQ1ZWFjZWVkMWU3NGZmZDQ4NDI5ZTI0MDFjODY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:41:00Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:07Z"}, "message": "gccrs: Add lang.opt\n\nWe have some Rust-specific language options. Note that -fwrapv is\nenabled by default in the code. We are trying to respect options such as\n-Wunused-result which we get by porting over C++'s no-discard for Rust's\nmust-use attribute, so we have enabled these by default directly here.\n\n\tgcc/rust/\n\t* lang.opt: New.", "tree": {"sha": "0041615d2744d800c54e952c4d3c29f93fc2aab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0041615d2744d800c54e952c4d3c29f93fc2aab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e7d199739f245eaceed1e74ffd48429e2401c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7d199739f245eaceed1e74ffd48429e2401c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7d199739f245eaceed1e74ffd48429e2401c86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7d199739f245eaceed1e74ffd48429e2401c86/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab1e0db43c2faf5e6dd0526a41410c36d346b4a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1e0db43c2faf5e6dd0526a41410c36d346b4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1e0db43c2faf5e6dd0526a41410c36d346b4a6"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "6187fbf29352f176c467523174863067abe31f92", "filename": "gcc/rust/lang.opt", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7d199739f245eaceed1e74ffd48429e2401c86/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7d199739f245eaceed1e74ffd48429e2401c86/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=5e7d199739f245eaceed1e74ffd48429e2401c86", "patch": "@@ -0,0 +1,118 @@\n+; Options for the Rust front end.\n+; Copyright (C) 2003-2022 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+; See the GCC internals manual for a description of this file's format.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+; Describes command-line options used by this frontend\n+\n+Language\n+Rust\n+\n+I\n+Rust Joined Separate\n+; Documented in c.opt\n+\n+L\n+Rust Joined Separate\n+; Not documented\n+\n+Wall\n+Rust\n+; Documented in c.opt\n+\n+Wunused-variable\n+Rust Var(warn_unused_variable) Warning\n+; documented in common.opt\n+\n+Wunused-const-variable\n+Rust Warning Alias(Wunused-const-variable=, 2, 0)\n+Warn when a const variable is unused.\n+\n+Wunused-const-variable=\n+Rust Joined RejectNegative UInteger Var(warn_unused_const_variable) Warning LangEnabledBy(Rust,Wunused-variable, 1, 0) IntegerRange(0, 2)\n+Warn when a const variable is unused.\n+\n+Wunused-result\n+Rust Var(warn_unused_result) Warning\n+Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.\n+\n+frust-crate=\n+Rust Joined RejectNegative\n+-frust-crate=<name>             Set the crate name for the compilation\n+\n+frust-debug\n+Rust Var(flag_rust_debug)\n+Dump various Rust front end internals.\n+\n+frust-dump-\n+Rust Joined RejectNegative\n+-frust-dump-<type>\tDump Rust frontend internal information.\n+\n+frust-max-recursion-depth=\n+Rust RejectNegative Type(int) Var(rust_max_recursion_depth) Init(64)\n+-frust-max-recursion-depth=integer\n+\n+frust-mangling=\n+Rust Joined RejectNegative Enum(frust_mangling) Var(flag_rust_mangling)\n+-frust-mangling=[legacy|v0]     Choose which version to use for name mangling\n+\n+Enum\n+Name(frust_mangling) Type(int) UnknownError(unknown rust mangling option %qs)\n+\n+EnumValue\n+Enum(frust_mangling) String(legacy) Value(0)\n+\n+EnumValue\n+Enum(frust_mangling) String(v0) Value(1)\n+\n+frust-cfg=\n+Rust Joined RejectNegative\n+-frust-cfg=<name>             Set a config expansion option\n+\n+frust-edition=\n+Rust Joined RejectNegative Enum(frust_edition) Var(flag_rust_edition)\n+-frust-edition=[2015|2018|2021]             Choose which edition to use when compiling rust code\n+\n+Enum\n+Name(frust_edition) Type(int) UnknownError(unknown rust edition %qs)\n+\n+EnumValue\n+Enum(frust_edition) String(2015) Value(0)\n+\n+EnumValue\n+Enum(frust_edition) String(2018) Value(1)\n+\n+EnumValue\n+Enum(frust_edition) String(2021) Value(2)\n+\n+frust-embed-metadata\n+Rust Var(flag_rust_embed_metadata)\n+Flag to enable embeding metadata directly into object files\n+\n+frust-metadata-output=\n+Rust Joined RejectNegative\n+-frust-metadata-output=<path.rox>  Path to output crate metadata\n+\n+o\n+Rust Joined Separate\n+; Documented in common.opt\n+\n+; This comment is to ensure we retain the blank line above."}]}