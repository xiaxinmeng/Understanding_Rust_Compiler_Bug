{"sha": "349390672525fdd344ebe612185c44993c35b6a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ5MzkwNjcyNTI1ZmRkMzQ0ZWJlNjEyMTg1YzQ0OTkzYzM1YjZhNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1997-12-18T13:06:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1997-12-18T13:06:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r17129", "tree": {"sha": "6c3b0e58374ad758abaf7083f771d2ec0dc2cddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c3b0e58374ad758abaf7083f771d2ec0dc2cddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/349390672525fdd344ebe612185c44993c35b6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349390672525fdd344ebe612185c44993c35b6a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349390672525fdd344ebe612185c44993c35b6a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349390672525fdd344ebe612185c44993c35b6a5/comments", "author": null, "committer": null, "parents": [{"sha": "4f4da4e99bbb2464aa37b00ba12f734b7c86db06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4da4e99bbb2464aa37b00ba12f734b7c86db06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4da4e99bbb2464aa37b00ba12f734b7c86db06"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "be1df799082afd42c5705c322188198870b61655", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p13721.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/349390672525fdd344ebe612185c44993c35b6a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13721.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/349390672525fdd344ebe612185c44993c35b6a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13721.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13721.C?ref=349390672525fdd344ebe612185c44993c35b6a5", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link:\n+// prms-id: 13721\n+\n+class A\n+{\n+  public :\n+  int a;\n+};\n+class B : public A\n+{\n+  public :\n+  void cmp(int a, int b) {}\n+  B(int a = 0)\n+    {\n+      cmp(A::a, a); //should not give warning\n+    }\n+};\n+int main(void)\n+{\n+  return(1);\n+}"}, {"sha": "b8b546dc6fd947cf079a5bd5117a2f4ea4c1bc54", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/tem01.C", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/349390672525fdd344ebe612185c44993c35b6a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/349390672525fdd344ebe612185c44993c35b6a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem01.C?ref=349390672525fdd344ebe612185c44993c35b6a5", "patch": "@@ -0,0 +1,140 @@\n+// Build don't link: \n+// prms-id: 13911\n+\n+\n+ \n+\n+\n+template<unsigned int N>\n+class ref_counter {\n+public:\n+  ref_counter() : p_refcnt(new unsigned int(N)) {}\n+  ref_counter(const ref_counter<N>& x) : p_refcnt(x.p_refcnt) { \n+    ++*p_refcnt; \n+  }\n+  ref_counter& operator=(const ref_counter<N>& rhs) {\n+    ++*rhs.p_refcnt;\n+    decrement();\n+    p_refcnt = rhs.p_refcnt;\n+    return *this;\n+  }\n+  ~ref_counter() {decrement();}\n+  \n+  bool unique() const {return *p_refcnt == N;}\n+  \n+private:\n+  unsigned int* p_refcnt;\n+  void decrement() {\n+    if (unique()) delete p_refcnt;\n+    else --*p_refcnt;\n+  }\n+};\n+\n+template<class T, unsigned int N>\n+class ref_pointer {\n+public:\n+   \n+  ref_pointer() : the_p(0) {}  \n+  ref_pointer(T* just_newed) : the_p(just_newed) {}       \n+  virtual ~ref_pointer() {if (unique()) delete the_p;}\n+protected:\n+  ref_pointer::ref_pointer(T* the_p_arg, ref_counter<N>& ref_count_arg)\n+    : the_p(the_p_arg), ref_count(ref_count_arg) {}               \n+\n+public:\n+   \n+  ref_pointer& operator=(const ref_pointer<T, N>&); \n+  ref_pointer& operator=(T*);                         \n+  operator const T*() const {return the_p;}\n+  T* operator()() {return the_p;} \n+  T* operator()() const {return the_p;} \n+  T& operator*() const {return *the_p;}                       \n+  friend bool operator==(const ref_pointer<T, N>& lhs, \n+\t\t\t const ref_pointer<T, N>& rhs) {\n+    return lhs.the_p == rhs.the_p;\n+  }\n+  friend bool operator!=(const ref_pointer<T, N>& lhs, \n+\t\t\t const ref_pointer<T, N>& rhs) {\n+    return lhs.the_p != rhs.the_p;\n+  }\n+  \n+   \n+  bool unique() const {return ref_count.unique();}\n+  bool isNull() const {return the_p==0;}\n+\n+protected:\n+  ref_counter<N>& refCount() {return ref_count;}\n+\n+private:\n+   \n+  ref_counter<N> ref_count;\n+  T* the_p;\n+};\n+\n+template<class T, unsigned int N>\n+ref_pointer<T, N>& ref_pointer<T, N>::operator=(const ref_pointer<T, N>& rhs) {\n+  if (the_p != rhs.the_p) {\n+    if (unique()) delete the_p;\n+    the_p = rhs.the_p;\n+    ref_count = rhs.ref_count;\n+  }\n+  return *this;\n+}\n+\n+\n+template<class T, unsigned int N>\n+ref_pointer<T, N>& ref_pointer<T, N>::operator=(T* just_newed) { \n+  if (unique()) delete the_p;\n+  the_p = just_newed;\n+  ref_count = ref_counter<N>();\n+  return *this;\n+}\n+\n+\n+\n+template<class T>\n+class CountedObjPtr : public ref_pointer<T, 1> {\n+public:\n+  CountedObjPtr() {}\n+  CountedObjPtr(T* just_newed) : ref_pointer<T, 1>(just_newed) {}\n+  CountedObjPtr(T* the_p_arg, ref_counter<1>& ref_count_arg)\n+    : ref_pointer<T, 1>(the_p_arg, ref_count_arg) {}\n+  CountedObjPtr<T>& operator=(T* rhs) {\n+    ref_pointer<T, 1>::operator=(rhs); \n+    return *this; \n+  }\n+  CountedObjPtr<T>& operator=(const CountedObjPtr<T>& rhs) { \n+    ref_pointer<T, 1>::operator=(rhs); \n+    return *this; \n+  }\n+  T* operator->() const {return (*this)();}\n+\n+};\n+\n+\n+\n+\n+\n+//instantiating type\n+\n+class TSObservable;\n+\n+class TSObserver {\n+public:\n+   \n+  enum TSType { NormalTS, UpYldCrvTS, DownYldCrvTS, ZeroVolTS };\n+   \n+  virtual ~TSObserver() {}\n+   \n+  virtual void update(TSObservable* theChangedObservable) = 0;\n+  virtual TSType key() const { return myKey; }\n+  virtual TSType& key() { return myKey; }\n+protected:\n+  TSObserver(TSType myKeyArg) : myKey(myKeyArg) {}\n+  TSType myKey;\n+};\n+\n+\n+\n+//now try to instantiate\n+template class CountedObjPtr<TSObserver>;"}]}