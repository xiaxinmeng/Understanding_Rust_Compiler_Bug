{"sha": "745ff31ff7c3a21fca8b72e56a027e505c853e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1ZmYzMWZmN2MzYTIxZmNhOGI3MmU1NmEwMjdlNTA1Yzg1M2UyMQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-11-01T12:43:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-11-01T12:43:42Z"}, "message": "re PR fortran/41850 (Wrong-code with optional allocatable arrays)\n\n2009-11-01  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41850\n        * trans-expr.c (gfc_conv_procedure_call): Deallocate intent-out\n        variables only when present. Remove unneccessary present check.\n\n2009-11-01  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41850\n        * gfortran.dg/intent_out_6.f90: New testcase.\n\nFrom-SVN: r153793", "tree": {"sha": "a91db28bd70dde1ddc43d774fe7745b81308745a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a91db28bd70dde1ddc43d774fe7745b81308745a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/745ff31ff7c3a21fca8b72e56a027e505c853e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745ff31ff7c3a21fca8b72e56a027e505c853e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745ff31ff7c3a21fca8b72e56a027e505c853e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745ff31ff7c3a21fca8b72e56a027e505c853e21/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "164247b0e22af8e62b10596e74fe1778e46e18d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164247b0e22af8e62b10596e74fe1778e46e18d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164247b0e22af8e62b10596e74fe1778e46e18d0"}], "stats": {"total": 92, "additions": 79, "deletions": 13}, "files": [{"sha": "90df7a4aa87bfaeb12651e1b5c5035846f80ac2e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=745ff31ff7c3a21fca8b72e56a027e505c853e21", "patch": "@@ -1,3 +1,9 @@\n+2009-11-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41850\n+\t* trans-expr.c (gfc_conv_procedure_call): Deallocate intent-out\n+\tvariables only when present. Remove unneccessary present check.\n+\n 2009-10-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41777"}, {"sha": "8255bb1aea58ee75f294b23541f0b508d14a3f00", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=745ff31ff7c3a21fca8b72e56a027e505c853e21", "patch": "@@ -2935,17 +2935,22 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t        gfc_conv_array_parameter (&parmse, e, argss, f, fsym,\n \t\t\t\t\t  sym->name, NULL);\n \n-              /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is \n-                 allocated on entry, it must be deallocated.  */\n-              if (fsym && fsym->attr.allocatable\n-                  && fsym->attr.intent == INTENT_OUT)\n-                {\n-                  tmp = build_fold_indirect_ref_loc (input_location,\n-\t\t\t\t\t\t parmse.expr);\n-                  tmp = gfc_trans_dealloc_allocated (tmp);\n-                  gfc_add_expr_to_block (&se->pre, tmp);\n-                }\n-\n+\t      /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is \n+\t\t allocated on entry, it must be deallocated.  */\n+\t      if (fsym && fsym->attr.allocatable\n+\t\t  && fsym->attr.intent == INTENT_OUT)\n+\t\t{\n+\t\t  tmp = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t     parmse.expr);\n+\t\t  tmp = gfc_trans_dealloc_allocated (tmp);\n+\t\t  if (fsym->attr.optional\n+\t\t      && e->expr_type == EXPR_VARIABLE\n+\t\t      && e->symtree->n.sym->attr.optional)\n+\t\t    tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t\t\t     gfc_conv_expr_present (e->symtree->n.sym),\n+\t\t\t\t       tmp, build_empty_stmt (input_location));\n+\t\t  gfc_add_expr_to_block (&se->pre, tmp);\n+\t\t}\n \t    } \n \t}\n \n@@ -2957,9 +2962,20 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       if (e && (fsym == NULL || fsym->attr.optional))\n \t{\n \t  /* If an optional argument is itself an optional dummy argument,\n-\t     check its presence and substitute a null if absent.  */\n+\t     check its presence and substitute a null if absent.  This is\n+\t     only needed when passing an array to an elemental procedure\n+\t     as then array elements are accessed - or no NULL pointer is\n+\t     allowed and a \"1\" or \"0\" should be passed if not present.\n+\t     When passing a deferred array to a non-deferred array dummy,\n+\t     the array needs to be packed and a check needs thus to be\n+\t     inserted.  */\n \t  if (e->expr_type == EXPR_VARIABLE\n-\t      && e->symtree->n.sym->attr.optional)\n+\t      && e->symtree->n.sym->attr.optional\n+\t      && ((e->rank > 0 && sym->attr.elemental)\n+\t\t  || e->representation.length || e->ts.type == BT_CHARACTER\n+\t\t  || (e->rank > 0 && (fsym == NULL\n+\t\t\t\t      || (fsym->as->type != AS_ASSUMED_SHAPE\n+\t\t\t\t\t  && fsym->as->type != AS_DEFERRED)))))\n \t    gfc_conv_missing_dummy (&parmse, e, fsym ? fsym->ts : e->ts,\n \t\t\t\t    e->representation.length);\n \t}"}, {"sha": "363e9cba7d79fab07657a32a75e7f44d731c694a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=745ff31ff7c3a21fca8b72e56a027e505c853e21", "patch": "@@ -1,3 +1,8 @@\n+2009-11-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41850\n+\t* gfortran.dg/intent_out_6.f90: New testcase.\n+\n 2009-10-31  Richard Guenther  <rguenther@suse.de>\n \n \t* g++.dg/tree-ssa/restrict1.C: New."}, {"sha": "1a411072faa86ddaf2ee2331dfebe5a1e3cc729b", "filename": "gcc/testsuite/gfortran.dg/intent_out_6.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ff31ff7c3a21fca8b72e56a027e505c853e21/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_6.f90?ref=745ff31ff7c3a21fca8b72e56a027e505c853e21", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! PR fortran/41850\n+!\n+module test_module\n+  implicit none\n+contains\n+  subroutine sub2(a)\n+    implicit none\n+    real,allocatable,intent(out),optional :: a(:)\n+    if(present(a)) then\n+      if(allocated(a)) call abort()\n+      allocate(a(1))\n+      a(1) = 5\n+    end if\n+  end subroutine sub2\n+  subroutine sub1(a)\n+    implicit none\n+    real,allocatable,intent(out),optional :: a(:)\n+!    print *,'in sub1'\n+    call sub2(a)\n+    if(present(a)) then\n+      if(a(1) /= 5) call abort()\n+    end if\n+  end subroutine sub1\n+end module test_module\n+\n+program test\n+  use test_module\n+  implicit none\n+  real, allocatable :: x(:)\n+  allocate(x(1))\n+  call sub1()\n+  x = 8\n+  call sub1(x)\n+  if(x(1) /= 5) call abort()\n+end program\n+\n+! { dg-final { cleanup-modules \"test_module\" } }"}]}