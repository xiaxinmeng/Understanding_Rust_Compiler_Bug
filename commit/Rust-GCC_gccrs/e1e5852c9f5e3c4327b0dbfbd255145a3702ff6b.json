{"sha": "e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFlNTg1MmM5ZjVlM2M0MzI3YjBkYmZiZDI1NTE0NWEzNzAyZmY2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-26T20:45:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-26T20:45:09Z"}, "message": "decl.c (gnat_to_gnu_entity): Try to make a packable type for fields of union types as well.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: Try to\n\tmake a packable type for fields of union types as well.\n\t<is_type>: Use RECORD_OR_UNION_TYPE_P predicate.\n\t(gnat_to_gnu_component_type): Try to make a packable type for fields\n\tof union types as well.\n\t(make_packable_type): Use RECORD_OR_UNION_TYPE_P predicate.\n\t(maybe_pad_type): Try to make a packable type for fields of union types\n\tas well.\n\t(gnat_to_gnu_field): Likewise.\n\t(is_variable_size): Use RECORD_OR_UNION_TYPE_P predicate.\n\t(set_rm_size): Likewise.\n\t(rm_size): Likewise.\n\t* gcc-interface/misc.c (gnat_type_max_size): Likewise.\n\t* gcc-interface/trans.c (add_decl_expr): Likewise.\n\t* gcc-interface/utils.c (finish_record_type): Likewise.\n\t* gcc-interface/utils2.c (build_simple_component_ref): Likewise.\n\nFrom-SVN: r180540", "tree": {"sha": "2606ea3bdeadfef64ff3f764e8555b8d5436c052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2606ea3bdeadfef64ff3f764e8555b8d5436c052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/comments", "author": null, "committer": null, "parents": [{"sha": "0025cb638168df0f3d7a845fa9e11a308a719b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0025cb638168df0f3d7a845fa9e11a308a719b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0025cb638168df0f3d7a845fa9e11a308a719b05"}], "stats": {"total": 117, "additions": 77, "deletions": 40}, "files": [{"sha": "53ea8c575c6327256e1cc946f0cd3e8b95b346b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -1,3 +1,23 @@\n+\n+2011-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: Try to\n+\tmake a packable type for fields of union types as well.\n+\t<is_type>: Use RECORD_OR_UNION_TYPE_P predicate.\n+\t(gnat_to_gnu_component_type): Try to make a packable type for fields\n+\tof union types as well.\n+\t(make_packable_type): Use RECORD_OR_UNION_TYPE_P predicate.\n+\t(maybe_pad_type): Try to make a packable type for fields of union types\n+\tas well.\n+\t(gnat_to_gnu_field): Likewise.\n+\t(is_variable_size): Use RECORD_OR_UNION_TYPE_P predicate.\n+\t(set_rm_size): Likewise.\n+\t(rm_size): Likewise.\n+\t* gcc-interface/misc.c (gnat_type_max_size): Likewise.\n+\t* gcc-interface/trans.c (add_decl_expr): Likewise.\n+\t* gcc-interface/utils.c (finish_record_type): Likewise.\n+\t* gcc-interface/utils2.c (build_simple_component_ref): Likewise.\n+\n 2011-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_field): Always check components"}, {"sha": "9c7c318ced575dbdc28e063571bc6af98b5f767c", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -3302,7 +3302,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t        == INTEGER_CST)\n \t\t      {\n \t\t\tgnu_size = DECL_SIZE (gnu_old_field);\n-\t\t\tif (TREE_CODE (gnu_field_type) == RECORD_TYPE\n+\t\t\tif (RECORD_OR_UNION_TYPE_P (gnu_field_type)\n \t\t\t    && !TYPE_FAT_POINTER_P (gnu_field_type)\n \t\t\t    && host_integerp (TYPE_SIZE (gnu_field_type), 1))\n \t\t\t  gnu_field_type\n@@ -4645,13 +4645,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      tree size;\n \n \t      /* If a size was specified, take it into account.  Otherwise\n-\t\t use the RM size for records as the type size has already\n-\t\t been adjusted to the alignment.  */\n+\t\t use the RM size for records or unions as the type size has\n+\t\t already been adjusted to the alignment.  */\n \t      if (gnu_size)\n \t\tsize = gnu_size;\n-\t      else if ((TREE_CODE (gnu_type) == RECORD_TYPE\n-\t\t\t|| TREE_CODE (gnu_type) == UNION_TYPE\n-\t\t\t|| TREE_CODE (gnu_type) == QUAL_UNION_TYPE)\n+\t      else if (RECORD_OR_UNION_TYPE_P (gnu_type)\n \t\t       && !TYPE_FAT_POINTER_P (gnu_type))\n \t\tsize = rm_size (gnu_type);\n \t      else\n@@ -5300,7 +5298,7 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n       && !Is_Bit_Packed_Array (gnat_array)\n       && !Has_Aliased_Components (gnat_array)\n       && !Strict_Alignment (gnat_type)\n-      && TREE_CODE (gnu_type) == RECORD_TYPE\n+      && RECORD_OR_UNION_TYPE_P (gnu_type)\n       && !TYPE_FAT_POINTER_P (gnu_type)\n       && host_integerp (TYPE_SIZE (gnu_type), 1))\n     gnu_type = make_packable_type (gnu_type, false);\n@@ -6357,9 +6355,7 @@ make_packable_type (tree type, bool in_record)\n       tree new_field_type = TREE_TYPE (old_field);\n       tree new_field, new_size;\n \n-      if ((TREE_CODE (new_field_type) == RECORD_TYPE\n-\t   || TREE_CODE (new_field_type) == UNION_TYPE\n-\t   || TREE_CODE (new_field_type) == QUAL_UNION_TYPE)\n+      if (RECORD_OR_UNION_TYPE_P (new_field_type)\n \t  && !TYPE_FAT_POINTER_P (new_field_type)\n \t  && host_integerp (TYPE_SIZE (new_field_type), 1))\n \tnew_field_type = make_packable_type (new_field_type, true);\n@@ -6369,9 +6365,7 @@ make_packable_type (tree type, bool in_record)\n \t packable version of the record type, see finish_record_type.  */\n       if (!DECL_CHAIN (old_field)\n \t  && !TYPE_PACKED (type)\n-\t  && (TREE_CODE (new_field_type) == RECORD_TYPE\n-\t      || TREE_CODE (new_field_type) == UNION_TYPE\n-\t      || TREE_CODE (new_field_type) == QUAL_UNION_TYPE)\n+\t  && RECORD_OR_UNION_TYPE_P (new_field_type)\n \t  && !TYPE_FAT_POINTER_P (new_field_type)\n \t  && !TYPE_CONTAINS_TEMPLATE_P (new_field_type)\n \t  && TYPE_ADA_SIZE (new_field_type))\n@@ -6533,7 +6527,7 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n      between them and it might be hard to overcome afterwards, including\n      at the RTL level when the stand-alone object is accessed as a whole.  */\n   if (align != 0\n-      && TREE_CODE (type) == RECORD_TYPE\n+      && RECORD_OR_UNION_TYPE_P (type)\n       && TYPE_MODE (type) == BLKmode\n       && !TREE_ADDRESSABLE (type)\n       && TREE_CODE (orig_size) == INTEGER_CST\n@@ -6833,7 +6827,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n      effects on the outer record type.  A typical case is a field known to be\n      byte-aligned and not to share a byte with another field.  */\n   if (!needs_strict_alignment\n-      && TREE_CODE (gnu_field_type) == RECORD_TYPE\n+      && RECORD_OR_UNION_TYPE_P (gnu_field_type)\n       && !TYPE_FAT_POINTER_P (gnu_field_type)\n       && host_integerp (TYPE_SIZE (gnu_field_type), 1)\n       && (packed == 1\n@@ -7047,9 +7041,7 @@ is_variable_size (tree type)\n       && !TREE_CONSTANT (DECL_SIZE (TYPE_FIELDS (type))))\n     return true;\n \n-  if (TREE_CODE (type) != RECORD_TYPE\n-      && TREE_CODE (type) != UNION_TYPE\n-      && TREE_CODE (type) != QUAL_UNION_TYPE)\n+  if (!RECORD_OR_UNION_TYPE_P (type))\n     return false;\n \n   for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n@@ -8090,9 +8082,7 @@ set_rm_size (Uint uint_size, tree gnu_type, Entity_Id gnat_entity)\n     SET_TYPE_RM_SIZE (gnu_type, size);\n \n   /* ...or the Ada size for record and union types.  */\n-  else if ((TREE_CODE (gnu_type) == RECORD_TYPE\n-\t    || TREE_CODE (gnu_type) == UNION_TYPE\n-\t    || TREE_CODE (gnu_type) == QUAL_UNION_TYPE)\n+  else if (RECORD_OR_UNION_TYPE_P (gnu_type)\n \t   && !TYPE_FAT_POINTER_P (gnu_type))\n     SET_TYPE_ADA_SIZE (gnu_type, size);\n }\n@@ -8944,10 +8934,8 @@ rm_size (tree gnu_type)\n \t\t  rm_size (TREE_TYPE (DECL_CHAIN (TYPE_FIELDS (gnu_type)))),\n \t\t  DECL_SIZE (TYPE_FIELDS (gnu_type)));\n \n-  /* For record types, we store the size explicitly.  */\n-  if ((TREE_CODE (gnu_type) == RECORD_TYPE\n-       || TREE_CODE (gnu_type) == UNION_TYPE\n-       || TREE_CODE (gnu_type) == QUAL_UNION_TYPE)\n+  /* For record or union types, we store the size explicitly.  */\n+  if (RECORD_OR_UNION_TYPE_P (gnu_type)\n       && !TYPE_FAT_POINTER_P (gnu_type)\n       && TYPE_ADA_SIZE (gnu_type))\n     return TYPE_ADA_SIZE (gnu_type);"}, {"sha": "4b2fba0c191a1823ac7a0f58f272a4e3008f469a", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -556,9 +556,8 @@ gnat_type_max_size (const_tree gnu_type)\n   /* If we don't have a constant, see what we can get from TYPE_ADA_SIZE,\n      which should stay untouched.  */\n   if (!host_integerp (max_unitsize, 1)\n-      && (TREE_CODE (gnu_type) == RECORD_TYPE\n-\t  || TREE_CODE (gnu_type) == UNION_TYPE\n-\t  || TREE_CODE (gnu_type) == QUAL_UNION_TYPE)\n+      && RECORD_OR_UNION_TYPE_P (gnu_type)\n+      && !TYPE_FAT_POINTER_P (gnu_type)\n       && TYPE_ADA_SIZE (gnu_type))\n     {\n       tree max_adasize = max_size (TYPE_ADA_SIZE (gnu_type), true);"}, {"sha": "1f43f4dcc943e5e4fd951812ce27c62f22ff62ca", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -6754,10 +6754,8 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \t}\n       /* In any case, we have to deal with our own TYPE_ADA_SIZE field.  */\n       else if (TREE_CODE (gnu_decl) == TYPE_DECL\n-\t       && ((TREE_CODE (type) == RECORD_TYPE\n-\t\t    && !TYPE_FAT_POINTER_P (type))\n-\t\t   || TREE_CODE (type) == UNION_TYPE\n-\t\t   || TREE_CODE (type) == QUAL_UNION_TYPE))\n+\t       && RECORD_OR_UNION_TYPE_P (type)\n+\t       && !TYPE_FAT_POINTER_P (type))\n \tMARK_VISITED (TYPE_ADA_SIZE (type));\n     }\n   else if (!DECL_EXTERNAL (gnu_decl))"}, {"sha": "73657528a8a044d4fa9739b1e17277416e1fead0", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -726,9 +726,7 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n       tree this_size = DECL_SIZE (field);\n       tree this_ada_size;\n \n-      if ((TREE_CODE (type) == RECORD_TYPE\n-\t   || TREE_CODE (type) == UNION_TYPE\n-\t   || TREE_CODE (type) == QUAL_UNION_TYPE)\n+      if (RECORD_OR_UNION_TYPE_P (type)\n \t  && !TYPE_FAT_POINTER_P (type)\n \t  && !TYPE_CONTAINS_TEMPLATE_P (type)\n \t  && TYPE_ADA_SIZE (type))"}, {"sha": "4075a27014c1b122b8773b7b94442299317f848a", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -1748,9 +1748,7 @@ build_simple_component_ref (tree record_variable, tree component,\n   tree record_type = TYPE_MAIN_VARIANT (TREE_TYPE (record_variable));\n   tree ref, inner_variable;\n \n-  gcc_assert ((TREE_CODE (record_type) == RECORD_TYPE\n-\t       || TREE_CODE (record_type) == UNION_TYPE\n-\t       || TREE_CODE (record_type) == QUAL_UNION_TYPE)\n+  gcc_assert (RECORD_OR_UNION_TYPE_P (record_type)\n \t      && COMPLETE_TYPE_P (record_type)\n \t      && (component == NULL_TREE) != (field == NULL_TREE));\n "}, {"sha": "d8380fbb6342e7d7932b2598cdfd301cccc33a13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -1,3 +1,9 @@\n+2011-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/unchecked_union.ads: Rename to...\n+\t* gnat.dg/specs/unchecked_union1.ads: ...this.\n+\t* gnat.dg/specs/unchecked_union2.ads: New test.\n+\n 2011-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/atomic1.ads: New test."}, {"sha": "06313ef88c4ef56bde6d4434540d81399a07efcc", "filename": "gcc/testsuite/gnat.dg/specs/unchecked_union1.ads", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union1.ads?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -6,7 +6,7 @@\n \n with Interfaces; use Interfaces;\n \n-package Unchecked_Union is\n+package Unchecked_Union1 is\n    type Mode_Type is (Mode_B2);\n \n    type Value_Union (Mode : Mode_Type := Mode_B2) is record\n@@ -17,4 +17,4 @@ package Unchecked_Union is\n    end record;\n    pragma Unchecked_Union (Value_Union);\n \n-end Unchecked_Union;\n+end Unchecked_Union1;", "previous_filename": "gcc/testsuite/gnat.dg/specs/unchecked_union.ads"}, {"sha": "f13421cc47482e7de63c2ad577316998afd7a737", "filename": "gcc/testsuite/gnat.dg/specs/unchecked_union2.ads", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union2.ads?ref=e1e5852c9f5e3c4327b0dbfbd255145a3702ff6b", "patch": "@@ -0,0 +1,30 @@\n+-- { dg-do compile }\r\n+\r\n+package Unchecked_Union2 is\r\n+\r\n+   type Small_Int is range 0 .. 2**19 - 1;\r\n+\r\n+   type R1 (B : Boolean := True) is record\r\n+      case B is\r\n+         when True  => Data1 : Small_Int;\r\n+         when False => Data2 : Small_Int;\r\n+      end case;\r\n+   end record;\r\n+\r\n+   for R1 use record\r\n+      Data1 at 0 range 0 .. 18;\r\n+      Data2 at 0 range 0 .. 18;\r\n+   end record;\r\n+   for R1'Size use 24;\r\n+\r\n+   pragma Unchecked_Union (R1);\r\n+\r\n+   type R2 is record\r\n+     Data : R1;\r\n+   end record;\r\n+\r\n+   for R2 use record\r\n+     Data at 0 range 3 .. 26;\r\n+   end record;\r\n+\r\n+end Unchecked_Union2;\r"}]}