{"sha": "657184d086a57eb214dda530035563a1ecc3df10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3MTg0ZDA4NmE1N2ViMjE0ZGRhNTMwMDM1NTYzYTFlY2MzZGYxMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-11T15:28:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-11T15:28:18Z"}, "message": "re PR translation/90035 (Non-translatable C++ parser diagnostics)\n\n\tPR translation/90035\n\t* parser.h (struct cp_parser): Add\n\ttype_definition_forbidden_message_arg member.\n\t* parser.c (cp_debug_parser): Print it.\n\t(cp_parser_check_type_definition): Pass\n\tparser->type_definition_forbidden_message_arg as second argument to\n\terror.\n\t(cp_parser_has_attribute_expression, cp_parser_sizeof_operand): Set\n\tparser->type_definition_forbidden_message_arg and use G_() with\n\t%qs for parser->type_definition_forbidden_message instead of\n\tbuilding untranslatable message using concat.\n\nFrom-SVN: r270286", "tree": {"sha": "c0300bc78486da858fa3fc094ba9569b679abe8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0300bc78486da858fa3fc094ba9569b679abe8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/657184d086a57eb214dda530035563a1ecc3df10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657184d086a57eb214dda530035563a1ecc3df10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657184d086a57eb214dda530035563a1ecc3df10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657184d086a57eb214dda530035563a1ecc3df10/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f1d8deb29c6725d2c0f0d3fe13b19d52fffda38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1d8deb29c6725d2c0f0d3fe13b19d52fffda38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1d8deb29c6725d2c0f0d3fe13b19d52fffda38"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "1c0f7446c91f264390e958a03f4034e90a84b361", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657184d086a57eb214dda530035563a1ecc3df10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657184d086a57eb214dda530035563a1ecc3df10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=657184d086a57eb214dda530035563a1ecc3df10", "patch": "@@ -1,3 +1,17 @@\n+2019-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/90035\n+\t* parser.h (struct cp_parser): Add\n+\ttype_definition_forbidden_message_arg member.\n+\t* parser.c (cp_debug_parser): Print it.\n+\t(cp_parser_check_type_definition): Pass\n+\tparser->type_definition_forbidden_message_arg as second argument to\n+\terror.\n+\t(cp_parser_has_attribute_expression, cp_parser_sizeof_operand): Set\n+\tparser->type_definition_forbidden_message_arg and use G_() with\n+\t%qs for parser->type_definition_forbidden_message instead of\n+\tbuilding untranslatable message using concat.\n+\n 2019-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/90011"}, {"sha": "3ab371cfa6a814097aa8cb8da7eaa2b391f363d9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657184d086a57eb214dda530035563a1ecc3df10/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657184d086a57eb214dda530035563a1ecc3df10/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=657184d086a57eb214dda530035563a1ecc3df10", "patch": "@@ -570,8 +570,10 @@ cp_debug_parser (FILE *file, cp_parser *parser)\n   cp_debug_print_flag (file, \"Colon doesn't start a class definition\",\n \t\t\t      parser->colon_doesnt_start_class_def_p);\n   if (parser->type_definition_forbidden_message)\n-    fprintf (file, \"Error message for forbidden type definitions: %s\\n\",\n-\t     parser->type_definition_forbidden_message);\n+    fprintf (file, \"Error message for forbidden type definitions: %s %s\\n\",\n+\t     parser->type_definition_forbidden_message,\n+\t     parser->type_definition_forbidden_message_arg\n+\t     ? parser->type_definition_forbidden_message_arg : \"<none>\");\n   cp_debug_print_unparsed_queues (file, parser->unparsed_queues);\n   fprintf (file, \"Number of class definitions in progress: %u\\n\",\n \t   parser->num_classes_being_defined);\n@@ -3054,8 +3056,9 @@ cp_parser_check_type_definition (cp_parser* parser)\n   if (parser->type_definition_forbidden_message)\n     {\n       /* Don't use `%s' to print the string, because quotations (`%<', `%>')\n-\t in the message need to be interpreted.  */\n-      error (parser->type_definition_forbidden_message);\n+\t or %qs in the message need to be interpreted.  */\n+      error (parser->type_definition_forbidden_message,\n+\t     parser->type_definition_forbidden_message_arg);\n       return false;\n     }\n   return true;\n@@ -8518,12 +8521,12 @@ cp_parser_has_attribute_expression (cp_parser *parser)\n   /* Types cannot be defined in a `sizeof' expression.  Save away the\n      old message.  */\n   const char *saved_message = parser->type_definition_forbidden_message;\n-  /* And create the new one.  */\n-  const int kwd = RID_BUILTIN_HAS_ATTRIBUTE;\n-  char *tmp = concat (\"types may not be defined in %<\",\n-\t\t      IDENTIFIER_POINTER (ridpointers[kwd]),\n-\t\t      \"%> expressions\", NULL);\n-  parser->type_definition_forbidden_message = tmp;\n+  const char *saved_message_arg\n+    = parser->type_definition_forbidden_message_arg;\n+  parser->type_definition_forbidden_message\n+    = G_(\"types may not be defined in %qs expressions\");\n+  parser->type_definition_forbidden_message_arg\n+    = IDENTIFIER_POINTER (ridpointers[RID_BUILTIN_HAS_ATTRIBUTE]);\n \n   /* The restrictions on constant-expressions do not apply inside\n      sizeof expressions.  */\n@@ -8562,10 +8565,9 @@ cp_parser_has_attribute_expression (cp_parser *parser)\n   --cp_unevaluated_operand;\n   --c_inhibit_evaluation_warnings;\n \n-  /* Free the message we created.  */\n-  free (tmp);\n   /* And restore the old one.  */\n   parser->type_definition_forbidden_message = saved_message;\n+  parser->type_definition_forbidden_message_arg = saved_message_arg;\n   parser->integral_constant_expression_p\n     = saved_integral_constant_expression_p;\n   parser->non_integral_constant_expression_p\n@@ -28928,7 +28930,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n {\n   tree expr = NULL_TREE;\n   const char *saved_message;\n-  char *tmp;\n+  const char *saved_message_arg;\n   bool saved_integral_constant_expression_p;\n   bool saved_non_integral_constant_expression_p;\n \n@@ -28941,11 +28943,11 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   /* Types cannot be defined in a `sizeof' expression.  Save away the\n      old message.  */\n   saved_message = parser->type_definition_forbidden_message;\n-  /* And create the new one.  */\n-  tmp = concat (\"types may not be defined in %<\",\n-\t\tIDENTIFIER_POINTER (ridpointers[keyword]),\n-\t\t\"%> expressions\", NULL);\n-  parser->type_definition_forbidden_message = tmp;\n+  saved_message_arg = parser->type_definition_forbidden_message_arg;\n+  parser->type_definition_forbidden_message\n+    = G_(\"types may not be defined in %qs expressions\");\n+  parser->type_definition_forbidden_message_arg\n+    = IDENTIFIER_POINTER (ridpointers[keyword]);\n \n   /* The restrictions on constant-expressions do not apply inside\n      sizeof expressions.  */\n@@ -29002,10 +29004,9 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   --cp_unevaluated_operand;\n   --c_inhibit_evaluation_warnings;\n \n-  /* Free the message we created.  */\n-  free (tmp);\n   /* And restore the old one.  */\n   parser->type_definition_forbidden_message = saved_message;\n+  parser->type_definition_forbidden_message_arg = saved_message_arg;\n   parser->integral_constant_expression_p\n     = saved_integral_constant_expression_p;\n   parser->non_integral_constant_expression_p"}, {"sha": "c03a9d87af591c91b3b289e614605faf5f7c5673", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657184d086a57eb214dda530035563a1ecc3df10/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657184d086a57eb214dda530035563a1ecc3df10/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=657184d086a57eb214dda530035563a1ecc3df10", "patch": "@@ -350,6 +350,9 @@ struct GTY(()) cp_parser {\n      issued as an error message if a type is defined.  */\n   const char *type_definition_forbidden_message;\n \n+  /* Argument for type_definition_forbidden_message if needed.  */\n+  const char *type_definition_forbidden_message_arg;\n+\n   /* A stack used for member functions of local classes.  The lists\n      contained in an individual entry can only be processed once the\n      outermost class being defined is complete.  */"}]}