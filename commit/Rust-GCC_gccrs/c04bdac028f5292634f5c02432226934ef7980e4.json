{"sha": "c04bdac028f5292634f5c02432226934ef7980e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0YmRhYzAyOGY1MjkyNjM0ZjVjMDI0MzIyMjY5MzRlZjc5ODBlNA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-04-01T14:43:22Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-04-01T14:43:22Z"}, "message": "config.gcc (*-*-mingw*): Allow as option the posix threading model.\n\n2011-04-01  Kai Tietz  <ktietz@redhat.com>\n\n\t* config.gcc (*-*-mingw*): Allow as option the\n\tposix threading model.\n\t* config/i386/mingw32.h ( SPEC_PTHREAD1,  SPEC_PTHREAD2):\n\tNew macros defined dependent to TARGET_USE_PTHREAD_BY_DEFAULT\n\tdefinition.\n\t(CPP_SPEC): Add pthread/no-pthread handling.\n\t(LIB_SPEC): Likewise.\n\t* config/i386/mingw-w64.h (CPP_SPEC):Likewise.\n\t(LIB_SPEC): Likewise.\n\t* config/i386/t-cygming (SHLIB_PTHREAD_CFLAG): New\n\tflag to pass -pthread option for shared libgcc build.\n\t(SHLIB_PTHREAD_LDFLAG): New option to pass -lpthread\n\tfor shared libgcc build.\n\t* config/i386/t-mingw-pthread: New file.\n\t* config/i386/mingw-pthread.h (TARGET_USE_PTHREAD_BY_DEFAULT):\n\tNew define to enable use of library pthread by default.\n\t* config/i386/mingw.opt (pthread): New driver option.\n\t(no-pthread): New driver option.\n\t* config/i386/cygming.opt: Make sure trailing empty line\n\tis retained.\n\t* config/i386/mingw-w64.opt: Likewise.\n\nFrom-SVN: r171833", "tree": {"sha": "f4a47a001369eb5cf6ae62193100fdcf56e41ec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a47a001369eb5cf6ae62193100fdcf56e41ec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04bdac028f5292634f5c02432226934ef7980e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04bdac028f5292634f5c02432226934ef7980e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04bdac028f5292634f5c02432226934ef7980e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04bdac028f5292634f5c02432226934ef7980e4/comments", "author": null, "committer": null, "parents": [{"sha": "636b4106f693484fe21032b7acb2d0c3f43fe165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636b4106f693484fe21032b7acb2d0c3f43fe165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636b4106f693484fe21032b7acb2d0c3f43fe165"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "d40ad44d70fbcffb9920953071ff091948c4ffa0", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -1410,7 +1410,7 @@ i[34567]86-*-cygwin*)\n \tuse_gcc_stdint=wrap\n \t;;\n i[34567]86-*-mingw* | x86_64-*-mingw*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/mingw32.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h\"\n \txm_file=i386/xm-mingw32.h\n \tcase ${target} in\n \t\tx86_64-*-* | *-w64-*)\n@@ -1420,6 +1420,10 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t*)\n \t\t\t;;\n \tesac\n+\tif test x$enable_threads = xposix ; then\n+\t\ttm_file=\"${tm_file} i386/mingw-pthread.h\"\n+\tfi\n+\ttm_file=\"${tm_file} i386/mingw32.h\"\n \t# This makes the logic if mingw's or the w64 feature set has to be used\n \tcase ${target} in\n \t\t*-w64-*)\n@@ -1488,8 +1492,12 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \tuse_gcc_stdint=wrap\n \tcase ${enable_threads} in\n \t  \"\" | yes | win32)\t  thread_file='win32'\n-\t  tmake_file=\"${tmake_file} i386/t-gthr-win32\"\n-\t  ;;\n+\t    tmake_file=\"${tmake_file} i386/t-gthr-win32\"\n+\t    ;;\n+\t  posix)\n+\t    thread_file='posix'\n+\t    tmake_file=\"i386/t-mingw-pthread ${tmake_file}\"\n+\t    ;;\n \tesac\n \tcase ${target} in\n \t\tx86_64-*-mingw*)"}, {"sha": "2d2352370398cea7645a4a46d158ecdfe769c490", "filename": "gcc/config/i386/cygming.opt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -52,3 +52,5 @@ Compile code that relies on Cygwin DLL wrappers to support C++ operator new/dele\n \n posix\n Driver\n+\n+; Retain blank line above"}, {"sha": "62a72ef2b92752a994d1341f146f9d43b76cbe60", "filename": "gcc/config/i386/mingw-w64.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-w64.h?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -1,8 +1,8 @@\n /* Operating system specific defines to be used when targeting GCC for\n    hosting on Windows 32/64 via mingw-w64 runtime, using GNU tools and\n    the Windows API Library.\n-   Copyright (C) 2009,\n-   2010 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -20,11 +20,13 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Enable -municode feature.  */\n+/* Enable -municode feature and support optional pthread support.  */\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT} \\\n-  %{municode:-DUNICODE}\"\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT} \" \\\n+\t\t \"%{municode:-DUNICODE} \" \\\n+\t\t \"%{\" SPEC_PTHREAD1 \":-D_REENTRANCE} \" \\\n+\t\t \"%{\" SPEC_PTHREAD2 \":-U_REENTRANCE} \"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{shared|mdll:dllcrt2%O%s} \\\n@@ -38,6 +40,12 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_SPEC\n #define ASM_SPEC \"%{m32:--32} %{m64:--64}\"\n \n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-lgmon} %{\" SPEC_PTHREAD1 \":-lpthread} \" \\\n+\t\t \"%{\" SPEC_PTHREAD2 \": } \" \\\n+\t\t \"%{mwindows:-lgdi32 -lcomdlg32} \" \\\n+\t\t \"-ladvapi32 -lshell32 -luser32 -lkernel32\"\n+\n #undef SPEC_32\n #undef SPEC_64\n #if TARGET_64BIT_DEFAULT"}, {"sha": "4eebce64f6b8035c21657f992878eabe00a4c5ed", "filename": "gcc/config/i386/mingw-w64.opt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw-w64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw-w64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-w64.opt?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -21,3 +21,5 @@\n municode\n Target\n Use unicode startup and define UNICODE macro\n+\n+; Retain blank line above."}, {"sha": "f7ae1892ee71829e6d7b5af598c6b8b26d60e917", "filename": "gcc/config/i386/mingw.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw.opt?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -18,10 +18,18 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+pthread\n+Driver\n+\n+no-pthread\n+Driver\n+\n Wpedantic-ms-format\n C ObjC C++ ObjC++ Var(warn_pedantic_ms_format) Init(1) Warning\n Warn about none ISO msvcrt scanf/printf width extensions\n \n fset-stack-executable\n Common Report Var(flag_setstackexecutable) Init(1) Optimization\n For nested functions on stack executable permission is set.\n+\n+; Need to retain blank line above."}, {"sha": "fa55ce421cb38e1cb1cadf0293ed28fbefffe0d6", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -43,6 +43,14 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifndef TARGET_USE_PTHREAD_BY_DEFAULT\n+#define SPEC_PTHREAD1 \"pthread\"\n+#define SPEC_PTHREAD2 \"!no-pthread\"\n+#else\n+#define SPEC_PTHREAD1 \"!no-pthread\"\n+#define SPEC_PTHREAD2 \"pthread\"\n+#endif\n+\n #undef SUB_LINK_ENTRY32\n #undef SUB_LINK_ENTRY64\n #define SUB_LINK_ENTRY32 \"-e _DllMainCRTStartup@12\"\n@@ -67,13 +75,17 @@ along with GCC; see the file COPYING3.  If not see\n #define STANDARD_INCLUDE_COMPONENT \"MINGW\"\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT}\"\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT} \" \\\n+\t\t \"%{\" SPEC_PTHREAD1 \":-D_REENTRANCE} \" \\\n+\t\t \"%{\" SPEC_PTHREAD2 \": } \"\n \n /* For Windows applications, include more libraries, but always include\n    kernel32.  */\n #undef LIB_SPEC\n-#define LIB_SPEC \"%{pg:-lgmon} %{mwindows:-lgdi32 -lcomdlg32} \\\n-                  -ladvapi32 -lshell32 -luser32 -lkernel32\"\n+#define LIB_SPEC \"%{pg:-lgmon} %{\" SPEC_PTHREAD1 \":-lpthread} \" \\\n+\t\t \"%{\" SPEC_PTHREAD2 \": } \" \\\n+\t\t \"%{mwindows:-lgdi32 -lcomdlg32} \" \\\n+                 \"-ladvapi32 -lshell32 -luser32 -lkernel32\"\n \n /* Weak symbols do not get resolved if using a Windows dll import lib.\n    Make the unwind registration references strong undefs.  */"}, {"sha": "c4807a0a97b1fb5f5d850ebe6585042f4da221bc", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bdac028f5292634f5c02432226934ef7980e4/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=c04bdac028f5292634f5c02432226934ef7980e4", "patch": "@@ -77,16 +77,23 @@ SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n ifndef SHLIB_DLLDIR\n $(error SHLIB_DLLDIR must be defined)\n endif\n+ifndef SHLIB_PTHREAD_CFLAG\n+SHLIB_PTHREAD_CFLAG =\n+endif\n+ifndef SHLIB_PTHREAD_LDFLAG\n+SHLIB_PTHREAD_LDFLAG =\n+endif\n \n SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \\\n \tif [ ! -d $(SHLIB_DIR) ]; then \\\n \t\tmkdir $(SHLIB_DIR); \\\n \telse true; fi && \\\n-\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(SHLIB_PTHREAD_CFLAG) \\\n+\t-shared -nodefaultlibs \\\n \t$(SHLIB_MAP).def \\\n \t-Wl,--out-implib,$(SHLIB_DIR)/$(SHLIB_IMPLIB).tmp \\\n \t-o $(SHLIB_DIR)/$(SHLIB_SONAME).tmp @multilib_flags@ \\\n-\t$(SHLIB_OBJS) $(SHLIB_LC) && \\\n+\t$(SHLIB_OBJS) ${SHLIB_PTHREAD_LDFLAG} $(SHLIB_LC) && \\\n \tif [ -f $(SHLIB_DIR)/$(SHLIB_SONAME) ]; then \\\n \t  mv -f $(SHLIB_DIR)/$(SHLIB_SONAME) \\\n \t\t$(SHLIB_DIR)/$(SHLIB_SONAME).backup; \\"}]}