{"sha": "603b781be4c81c3943d7701860f38798132c5fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzYjc4MWJlNGM4MWMzOTQzZDc3MDE4NjBmMzg3OTgxMzJjNWZkZg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-10-20T10:07:29Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-10-20T10:07:29Z"}, "message": "regex.h: Remove virtual class _Automaton.\n\n2013-10-20  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex.h: Remove virtual class _Automaton.\n\t* include/bits/regex_automaton.h: Likewise.\n\t* include/bits/regex.tcc: Adjust comment for policy changing.\n\t* include/bits/regex_executor.h: Update comments of complexity.\n\t* include/bits/regex_executor.tcc: Adjust executor choosing\n\tpolicy. Now DFS executor is the default one.\n\t* testsuite/util/testsuite_regex.h (regex_match_debug,\n\tregex_search_debug): Adjust for policy changing.\n\nFrom-SVN: r203875", "tree": {"sha": "7769a5568df6939da675c46462f0680614d44d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7769a5568df6939da675c46462f0680614d44d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603b781be4c81c3943d7701860f38798132c5fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603b781be4c81c3943d7701860f38798132c5fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603b781be4c81c3943d7701860f38798132c5fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603b781be4c81c3943d7701860f38798132c5fdf/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5b9d5e877cff9d344645362dc57980a6c747e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b9d5e877cff9d344645362dc57980a6c747e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b9d5e877cff9d344645362dc57980a6c747e2c"}], "stats": {"total": 123, "additions": 66, "deletions": 57}, "files": [{"sha": "0957953de2fe5a33816520cc6ea13d1f08c9ea6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -1,3 +1,14 @@\n+2013-10-20  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex.h: Remove virtual class _Automaton.\n+\t* include/bits/regex_automaton.h: Likewise.\n+\t* include/bits/regex.tcc: Adjust comment for policy changing.\n+\t* include/bits/regex_executor.h: Update comments of complexity.\n+\t* include/bits/regex_executor.tcc: Adjust executor choosing\n+\tpolicy. Now DFS executor is the default one.\n+\t* testsuite/util/testsuite_regex.h (regex_match_debug,\n+\tregex_search_debug): Adjust for policy changing.\n+\n 2013-10-20  Chris Jefferson  <chris@bubblescope.net>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "32d38b491bd0691de1f5f29b2ef9cc9419fee7e4", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -727,7 +727,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #endif\n \n     protected:\n-      typedef std::shared_ptr<__detail::_Automaton<_Ch_type, _Rx_traits>>\n+      typedef std::shared_ptr<__detail::_NFA<_Ch_type, _Rx_traits>>\n \t_AutomatonPtr;\n \n       template<typename _BiIter, typename _Alloc,"}, {"sha": "7028480ed7750562c4aa77078f00b142a14faa0d", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -38,8 +38,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Result of merging regex_match and regex_search.\n   //\n-  // __policy now can be _S_auto(auto dispatch by checking back-references)\n-  // and _S_force_dfs(just use _DFSExecutor).\n+  // __policy now can be _S_auto (auto dispatch) and _S_alternate (use\n+  // the other one if possible, for test purpose).\n   //\n   // That __match_mode is true means regex_match, else regex_search.\n   template<typename _BiIter, typename _Alloc,"}, {"sha": "4fb555680ba784c71de02db1b450a8b284c79ce4", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -104,31 +104,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     };\n \n-  /// Base class for, um, automata.  Could be an NFA or a DFA.  Your choice.\n-  template<typename _CharT, typename _TraitsT>\n-    class _Automaton\n-    {\n-    public:\n-      typedef size_t _SizeT;\n-\n-    public:\n-      virtual\n-      ~_Automaton()\n-      { }\n-\n-      virtual _SizeT\n-      _M_sub_count() const = 0;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      virtual std::ostream&\n-      _M_dot(std::ostream& __ostr) const = 0;\n-#endif\n-    };\n-\n   template<typename _CharT, typename _TraitsT>\n     class _NFA\n-    : public _Automaton<_CharT, _TraitsT>,\n-      public std::vector<_State<_CharT, _TraitsT>>\n+    : public std::vector<_State<_CharT, _TraitsT>>\n     {\n     public:\n       typedef _State<_CharT, _TraitsT>            _StateT;"}, {"sha": "6d9a83e8c5c8f967410df0af32de32745a0b42f9", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -179,8 +179,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // TODO: This approach is exponentially slow for certain input.\n   //       Try to compile the NFA to a DFA.\n   //\n-  // Time complexity: exponential\n-  // Space complexity: O(__end - __begin)\n+  // Time complexity: o(match_length), O(2^(_M_nfa->size()))\n+  // Space complexity: \\theta(match_results.size() + match_length)\n   template<typename _BiIter, typename _Alloc,\n     typename _CharT, typename _TraitsT>\n     class _DFSExecutor\n@@ -200,16 +200,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const _RegexT&  __re,\n \t\t   _FlagT          __flags)\n       : _BaseT(__begin, __end, __results, __re, __flags),\n-      _M_nfa(*std::static_pointer_cast<_NFA<_CharT, _TraitsT>>\n-\t     (__re._M_automaton)),\n-      _M_start_state(_M_nfa._M_start())\n+      _M_nfa(__re._M_automaton), _M_start_state(_M_nfa->_M_start())\n       { }\n \n     private:\n       void\n       _M_init(_BiIter __cur)\n       {\n-\t_M_cur_results.resize(_M_nfa._M_sub_count() + 2);\n+\t_M_cur_results.resize(_M_nfa->_M_sub_count() + 2);\n \tthis->_M_current = __cur;\n       }\n \n@@ -235,9 +233,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // To record current solution.\n-      _ResultsVec     _M_cur_results;\n-      const _NFAT&    _M_nfa;\n-      _StateIdT       _M_start_state;\n+      std::shared_ptr<_NFAT> _M_nfa;\n+      _ResultsVec            _M_cur_results;\n+      _StateIdT              _M_start_state;\n     };\n \n   // Like the DFS approach, it try every possible state transition; Unlike DFS,\n@@ -251,8 +249,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // matching head. When states transit, solutions will be compared and\n   // deduplicated(based on which greedy mode we have).\n   //\n-  // Time complexity: O((__end - __begin) * _M_nfa.size())\n-  // Space complexity: O(_M_nfa.size() * _M_nfa.mark_count())\n+  // Time complexity: o(match_length * (quantifier_number\n+  //                                    + match_results.size())\n+  //                  O(match_length * _M_nfa->size()\n+  //                    * (quantifier_number + match_results.size())\n+  // Space complexity: o(quantifier_number + match_results.size())\n+  //                   O(_M_nfa->size()\n+  //                     * (quantifier_number + match_results.size())\n   template<typename _BiIter, typename _Alloc,\n     typename _CharT, typename _TraitsT>\n     class _BFSExecutor\n@@ -382,11 +385,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const _RegexT&  __re,\n \t\t   _FlagT          __flags)\n       : _BaseT(__begin, __end, __results, __re, __flags),\n-      _M_nfa(*std::static_pointer_cast<_NFA<_CharT, _TraitsT>>\n-\t     (__re._M_automaton)),\n-      _M_match_stack(_M_nfa.size()),\n-      _M_stack(_M_nfa.size()),\n-      _M_start_state(_M_nfa._M_start())\n+      _M_nfa(__re._M_automaton), _M_match_stack(_M_nfa->size()),\n+      _M_stack(_M_nfa->size()), _M_start_state(_M_nfa->_M_start())\n       { }\n \n     private:\n@@ -398,7 +398,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_ResultsVec& __res(this->_M_results);\n \t_M_covered[this->_M_start_state] =\n \t  _ResultsPtr(new _ResultsEntry(__res.size(),\n-\t\t\t\t\t_M_nfa._M_quant_count));\n+\t\t\t\t\t_M_nfa->_M_quant_count));\n \t_M_stack._M_push(this->_M_start_state);\n       }\n \n@@ -428,7 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\tthis->_M_flags));\n       }\n \n-      const _NFAT&                     _M_nfa;\n+      std::shared_ptr<_NFAT>           _M_nfa;\n       std::map<_StateIdT, _ResultsPtr> _M_covered;\n       _TodoList                        _M_match_stack;\n       _TodoList                        _M_stack;"}, {"sha": "7c084add03141662b26ff7e00f1eeda1507887c0", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -28,6 +28,13 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n+// See below __get_executor to get what this is talking about. The default\n+// value 1 indicated a conservative optimization without giving up worst case\n+// performance.\n+#ifndef _GLIBCXX_REGEX_DFS_QUANTIFIERS_LIMIT\n+#define _GLIBCXX_REGEX_DFS_QUANTIFIERS_LIMIT 1\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __detail\n@@ -60,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_dfs(_StateIdT __i)\n     {\n       auto& __current = this->_M_current;\n-      const auto& __state = _M_nfa[__i];\n+      const auto& __state = (*_M_nfa)[__i];\n       bool __ret = false;\n       switch (__state._M_opcode)\n \t{\n@@ -216,7 +223,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  auto __u = _M_stack._M_pop();\n \t  _GLIBCXX_DEBUG_ASSERT(_M_covered.count(__u));\n-\t  const auto& __state = _M_nfa[__u];\n+\t  const auto& __state = (*_M_nfa)[__u];\n \n \t  // Can be implemented using method, but there will be too many\n \t  // arguments. I would use macro function before C++11, but lambda is\n@@ -314,7 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       while (!_M_match_stack._M_empty())\n \t{\n \t  auto __u = _M_match_stack._M_pop();\n-\t  const auto& __state = _M_nfa[__u];\n+\t  const auto& __state = (*_M_nfa)[__u];\n \t  auto& __cu = _M_covered[__u];\n \t  if (__state._M_matches(*this->_M_current)\n \t      && (__next.count(__state._M_next) == 0\n@@ -333,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_includes_some()\n     {\n       bool __succ = false;\n-      for (auto __u : _M_nfa._M_final_states())\n+      for (auto __u : _M_nfa->_M_final_states())\n \tif (_M_covered.count(__u))\n \t  {\n \t    __succ = true;\n@@ -380,8 +387,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   enum class _RegexExecutorPolicy : int\n-    { _S_auto, _S_force_dfs };\n+    { _S_auto, _S_alternate };\n \n+  // This function decide which executor to use under given circumstances.\n+  // The _S_auto policy now is the following: if a NFA has no back-references\n+  // and has more than _GLIBCXX_REGEX_DFS_QUANTIFIERS_LIMIT quantifiers\n+  // (*, +, ?), the _BFSExecutor will be used, other wise _DFSExecutor. This is\n+  // because _DFSExecutor has a exponential upper bound, but better best-case\n+  // performace. Meanwhile, _BFSExecutor can effectively prevent from\n+  // exponential-long time matching (which must contains many quantifiers), but\n+  // it's slower in average.\n+  //\n+  // For simple regex, _BFSExecutor could be 2 or more times slower than\n+  // _DFSExecutor.\n+  //\n+  // Of course, _BFSExecutor cannot handle back-references.\n   template<typename _BiIter, typename _Alloc,\n     typename _CharT, typename _TraitsT,\n     _RegexExecutorPolicy __policy>\n@@ -396,12 +416,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_ExecutorPtr;\n       typedef _DFSExecutor<_BiIter, _Alloc, _CharT, _TraitsT> _DFSExecutorT;\n       typedef _BFSExecutor<_BiIter, _Alloc, _CharT, _TraitsT> _BFSExecutorT;\n-      auto __p = std::static_pointer_cast<_NFA<_CharT, _TraitsT>>\n-\t(__re._M_automaton);\n-      if (__policy == _RegexExecutorPolicy::_S_force_dfs\n-\t  || (__policy == _RegexExecutorPolicy::_S_auto && __p->_M_has_backref))\n-\treturn _ExecutorPtr(new _DFSExecutorT(__b, __e, __m, __re, __flags));\n-      return _ExecutorPtr(new _BFSExecutorT(__b, __e, __m, __re, __flags));\n+      if (!__re._M_automaton->_M_has_backref\n+\t  && (__policy == _RegexExecutorPolicy::_S_alternate\n+\t      || __re._M_automaton->_M_quant_count\n+\t\t> _GLIBCXX_REGEX_DFS_QUANTIFIERS_LIMIT))\n+\treturn _ExecutorPtr(new _BFSExecutorT(__b, __e, __m, __re, __flags));\n+      return _ExecutorPtr(new _DFSExecutorT(__b, __e, __m, __re, __flags));\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "bc0f3d5bfd950d4803a3c2cb5c52c66333d0aa48", "filename": "libstdc++-v3/testsuite/util/testsuite_regex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b781be4c81c3943d7701860f38798132c5fdf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h?ref=603b781be4c81c3943d7701860f38798132c5fdf", "patch": "@@ -148,7 +148,7 @@ namespace __gnu_test\n \t(__s, __e, __m, __re, __flags);\n       match_results<_Bi_iter, _Alloc> __mm;\n       auto __res2 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t   _RegexExecutorPolicy::_S_force_dfs, true>\n+\t   _RegexExecutorPolicy::_S_alternate, true>\n \t(__s, __e, __mm, __re, __flags);\n       if (__res1 == __res2 && __m == __mm)\n \treturn __res1;\n@@ -234,7 +234,7 @@ namespace __gnu_test\n         (__s, __e, __m, __re, __flags);\n       match_results<_Bi_iter, _Alloc> __mm;\n       auto __res2 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t   _RegexExecutorPolicy::_S_force_dfs, false>\n+\t   _RegexExecutorPolicy::_S_alternate, false>\n         (__s, __e, __mm, __re, __flags);\n       if (__res1 == __res2 && __m == __mm)\n         return __res1;"}]}