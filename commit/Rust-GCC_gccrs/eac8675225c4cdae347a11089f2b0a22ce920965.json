{"sha": "eac8675225c4cdae347a11089f2b0a22ce920965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFjODY3NTIyNWM0Y2RhZTM0N2ExMTA4OWYyYjBhMjJjZTkyMDk2NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-05T11:18:48Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-05T11:18:48Z"}, "message": "recog: Fix a constrain_operands corner case [PR97144]\n\naarch64's *add<mode>3_poly_1 has a pattern with the constraints:\n\n  \"=...,r,&r\"\n  \"...,0,rk\"\n  \"...,Uai,Uat\"\n\ni.e. the penultimate alternative requires operands 0 and 1 to match,\nbut the final alternative does not allow them to match.\n\nThe register allocators dealt with this correctly, and so used\ndifferent input and output registers for instructions with Uat\noperands.  However, constrain_operands carried the penultimate\nalternative's matching rule over to the final alternative,\nso it would essentially ignore the earlyclobber.  This in turn\nallowed postreload to convert a correct Uat pairing into an\nincorrect one.\n\nThe fix is simple: recompute the matching information for each\nalternative.\n\ngcc/\n\tPR rtl-optimization/97144\n\t* recog.c (constrain_operands): Initialize matching_operand\n\tfor each alternative, rather than only doing it once.\n\ngcc/testsuite/\n\tPR rtl-optimization/97144\n\t* gcc.c-torture/compile/pr97144.c: New test.\n\t* gcc.target/aarch64/sve/pr97144.c: Likewise.", "tree": {"sha": "73dd4a97de73f89ade9c9cf015fdfcabb4bbd1b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73dd4a97de73f89ade9c9cf015fdfcabb4bbd1b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eac8675225c4cdae347a11089f2b0a22ce920965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac8675225c4cdae347a11089f2b0a22ce920965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac8675225c4cdae347a11089f2b0a22ce920965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac8675225c4cdae347a11089f2b0a22ce920965/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a25be517f8de8c060705da13db283a268cf6d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a25be517f8de8c060705da13db283a268cf6d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a25be517f8de8c060705da13db283a268cf6d12"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "1f43237edad9fda645e3c5128535043e24d97be1", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac8675225c4cdae347a11089f2b0a22ce920965/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac8675225c4cdae347a11089f2b0a22ce920965/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=eac8675225c4cdae347a11089f2b0a22ce920965", "patch": "@@ -3022,10 +3022,7 @@ constrain_operands (int strict, alternative_mask alternatives)\n     return 1;\n \n   for (c = 0; c < recog_data.n_operands; c++)\n-    {\n-      constraints[c] = recog_data.constraints[c];\n-      matching_operands[c] = -1;\n-    }\n+    constraints[c] = recog_data.constraints[c];\n \n   do\n     {\n@@ -3045,6 +3042,9 @@ constrain_operands (int strict, alternative_mask alternatives)\n \t  continue;\n \t}\n \n+      for (opno = 0; opno < recog_data.n_operands; opno++)\n+\tmatching_operands[opno] = -1;\n+\n       for (opno = 0; opno < recog_data.n_operands; opno++)\n \t{\n \t  rtx op = recog_data.operand[opno];"}, {"sha": "380e5d4e88757ae525742975f67906ca178f91e5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr97144.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac8675225c4cdae347a11089f2b0a22ce920965/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac8675225c4cdae347a11089f2b0a22ce920965/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97144.c?ref=eac8675225c4cdae347a11089f2b0a22ce920965", "patch": "@@ -0,0 +1,24 @@\n+int a, b = 5, c = 3;\n+char d;\n+char e[1];\n+int f[] = {0, 0, 1};\n+short g;\n+char *h = e;\n+void i(void) { b = a; }\n+static void j(void) {\n+  h = e;\n+  if (f[2])\n+  k:\n+    for (;;) {\n+      for (c = 0; c <= 4; c++) {\n+        for (g = 0; g <= 4; g++)\n+          f[g + 4] &= 2;\n+      }\n+      if (d)\n+        goto k;\n+    }\n+}\n+void l(void) {\n+  j();\n+  c = 0;\n+}"}, {"sha": "75245e2350b01f238c811363ec38625b8c175b8d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr97144.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac8675225c4cdae347a11089f2b0a22ce920965/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr97144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac8675225c4cdae347a11089f2b0a22ce920965/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr97144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr97144.c?ref=eac8675225c4cdae347a11089f2b0a22ce920965", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+int a, b = 5, c = 3;\n+char d;\n+char e[1];\n+int f[] = {0, 0, 1};\n+short g;\n+char *h = e;\n+void i(void) { b = a; }\n+static void j(void) {\n+  h = e;\n+  if (f[2])\n+  k:\n+    for (;;) {\n+      for (c = 0; c <= 4; c++) {\n+        for (g = 0; g <= 4; g++)\n+          f[g + 4] &= 2;\n+      }\n+      if (d)\n+        goto k;\n+    }\n+}\n+void l(void) {\n+  j();\n+  c = 0;\n+}"}]}