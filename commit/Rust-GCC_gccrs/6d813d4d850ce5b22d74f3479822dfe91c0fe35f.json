{"sha": "6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4MTNkNGQ4NTBjZTViMjJkNzRmMzQ3OTgyMmRmZTkxYzBmZTM1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-05-20T12:21:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-05-20T12:21:53Z"}, "message": "class.c (finish_struct_1): Still check for ANON_AGGR_TYPE_P.\n\n\t* class.c (finish_struct_1): Still check for ANON_AGGR_TYPE_P.\n\t* class.c (finish_base_struct): Allow non-COM bases for COM classes\n\texcept at the leftmost position.\n\t(modify_one_vtable, fixup_vtable_deltas1, override_one_vtable):\n\tPass the binfo's class, not the most derived, to skip_rtti_stuff.\n\t* search.c (get_abstract_virtuals, expand_upcast_fixups): Likewise.\n\nFrom-SVN: r27065", "tree": {"sha": "7359b8ac7c2e149be051eb0b97f9c2510de36011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7359b8ac7c2e149be051eb0b97f9c2510de36011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/comments", "author": null, "committer": null, "parents": [{"sha": "75153fba81d4bb413428631ff087e430a604a667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75153fba81d4bb413428631ff087e430a604a667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75153fba81d4bb413428631ff087e430a604a667"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "5ac9e81f7360681b2585ab8d7f6a9d6771bc80e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "patch": "@@ -1,5 +1,13 @@\n 1999-05-20  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* class.c (finish_struct_1): Still check for ANON_AGGR_TYPE_P.\n+\n+\t* class.c (finish_base_struct): Allow non-COM bases for COM classes\n+\texcept at the leftmost position.\n+\t(modify_one_vtable, fixup_vtable_deltas1, override_one_vtable):\n+\tPass the binfo's class, not the most derived, to skip_rtti_stuff.\n+\t* search.c (get_abstract_virtuals, expand_upcast_fixups): Likewise.\n+\n \t* tree.c (lvalue_p_1): A NOP_EXPR can be an lvalue.\n \t(build_cplus_new): Make sure that what we return is of the right type.\n "}, {"sha": "fe56078644c6392f8a4260fa613cb4dd568955b5", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "patch": "@@ -1649,7 +1649,7 @@ finish_base_struct (t, b)\n \t      (\"COM interface type `%T' must be the leftmost base class\",\n \t       basetype);\n \t}\n-      else if (CLASSTYPE_COM_INTERFACE (t))\n+      else if (CLASSTYPE_COM_INTERFACE (t) && i == 0)\n \t{\n \t  cp_error (\"COM interface type `%T' with non-COM base class `%T'\",\n \t\t    t, basetype);\n@@ -2356,7 +2356,7 @@ modify_one_vtable (binfo, t, fndecl, pfn)\n   if (fndecl == NULL_TREE)\n     return;\n \n-  n = skip_rtti_stuff (&virtuals, t);\n+  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n \n   while (virtuals)\n     {\n@@ -2450,7 +2450,7 @@ fixup_vtable_deltas1 (binfo, t)\n   tree virtuals = BINFO_VIRTUALS (binfo);\n   unsigned HOST_WIDE_INT n;\n   \n-  n = skip_rtti_stuff (&virtuals, t);\n+  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n \n   while (virtuals)\n     {\n@@ -2623,8 +2623,8 @@ override_one_vtable (binfo, old, t)\n   if (BINFO_NEW_VTABLE_MARKED (binfo))\n     choose = NEITHER;\n \n-  skip_rtti_stuff (&virtuals, t);\n-  skip_rtti_stuff (&old_virtuals, t);\n+  skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n+  skip_rtti_stuff (&old_virtuals, BINFO_TYPE (binfo));\n \n   while (virtuals)\n     {\n@@ -3523,7 +3523,7 @@ finish_struct_1 (t, warn_anon)\n \t  while (TREE_CODE (type) == ARRAY_TYPE)\n \t    type = TREE_TYPE (type);\n \n-\t  if (CLASS_TYPE_P (type))\n+\t  if (CLASS_TYPE_P (type) && ! ANON_AGGR_TYPE_P (type))\n \t    {\n \t      /* Never let anything with uninheritable virtuals\n \t\t make it through without complaint.  */"}, {"sha": "63b733d3ad82e52ad58a4b5f8fe6e77f2f7c71ef", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d813d4d850ce5b22d74f3479822dfe91c0fe35f/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "patch": "@@ -2013,7 +2013,7 @@ get_abstract_virtuals (type)\n     {\n       tree virtuals = BINFO_VIRTUALS (vbases);\n \n-      skip_rtti_stuff (&virtuals, type);\n+      skip_rtti_stuff (&virtuals, BINFO_TYPE (vbases));\n \n       while (virtuals)\n \t{\n@@ -2476,7 +2476,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n       *vbase_offsets = delta;\n     }\n \n-  n = skip_rtti_stuff (&virtuals, t);\n+  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n \n   while (virtuals)\n     {"}]}