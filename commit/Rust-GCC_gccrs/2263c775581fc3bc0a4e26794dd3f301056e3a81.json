{"sha": "2263c775581fc3bc0a4e26794dd3f301056e3a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI2M2M3NzU1ODFmYzNiYzBhNGUyNjc5NGRkM2YzMDEwNTZlM2E4MQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-06T20:47:17Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-06T20:47:17Z"}, "message": "re PR fortran/29828 ([F2003] MIN and MAX with character variables)\n\n\tPR fortran/29828\n\n\t* trans.h (gfor_fndecl_string_minmax): New prototype.\n\t* trans-decl.c (gfor_fndecl_string_minmax): New variable.\n\t(gfc_build_intrinsic_function_decls): Create gfor_fndecl_string_minmax.\n\t* check.c (gfc_check_min_max): Allow for character arguments.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax_char): New function.\n\t(gfc_conv_intrinsic_function): Add special case for MIN and MAX\n\tintrinsics with character arguments.\n\t* simplify.c (simplify_min_max): Add simplification for character\n\targuments.\n\n\t* intrinsics/string_intrinsics.c (string_minmax): New function\n\tand prototype.\n\t* gfortran.map (GFORTRAN_1.0): Add _gfortran_string_minmax\n\n\t* gfortran.dg/minmax_char_1.f90: New test.\n\t* gfortran.dg/minmax_char_2.f90: New test.\n\t* gfortran.dg/min_max_optional_4.f90: New test.\n\nFrom-SVN: r127252", "tree": {"sha": "2abbc1521f7910f2a1dce1f5f9199ff847083230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abbc1521f7910f2a1dce1f5f9199ff847083230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2263c775581fc3bc0a4e26794dd3f301056e3a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2263c775581fc3bc0a4e26794dd3f301056e3a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2263c775581fc3bc0a4e26794dd3f301056e3a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2263c775581fc3bc0a4e26794dd3f301056e3a81/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ef67eaf39f1af64a1a1331c63ad60dd8c217cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ef67eaf39f1af64a1a1331c63ad60dd8c217cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ef67eaf39f1af64a1a1331c63ad60dd8c217cd"}], "stats": {"total": 285, "additions": 277, "deletions": 8}, "files": [{"sha": "2bd347e63382187be7c0b62710141b537a57202d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -1,3 +1,16 @@\n+2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/29828\n+\t* trans.h (gfor_fndecl_string_minmax): New prototype.\n+\t* trans-decl.c (gfor_fndecl_string_minmax): New variable.\n+\t(gfc_build_intrinsic_function_decls): Create gfor_fndecl_string_minmax.\n+\t* check.c (gfc_check_min_max): Allow for character arguments.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax_char): New function.\n+\t(gfc_conv_intrinsic_function): Add special case for MIN and MAX\n+\tintrinsics with character arguments.\n+\t* simplify.c (simplify_min_max): Add simplification for character\n+\targuments.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31612"}, {"sha": "ba72aaa862efc7ecad5ad0785a2821dd3d5ac344", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -1512,10 +1512,17 @@ gfc_check_min_max (gfc_actual_arglist *arg)\n \n   x = arg->expr;\n \n-  if (x->ts.type != BT_INTEGER && x->ts.type != BT_REAL)\n+  if (x->ts.type == BT_CHARACTER)\n+    {\n+      if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: '%s' intrinsic \"\n+\t\t\t  \"with CHARACTER argument at %L\",\n+\t\t\t  gfc_current_intrinsic, &x->where) == FAILURE)\n+\treturn FAILURE;\n+    }\n+  else if (x->ts.type != BT_INTEGER && x->ts.type != BT_REAL)\n     {\n-      gfc_error (\"'a1' argument of '%s' intrinsic at %L must be INTEGER \"\n-\t\t \"or REAL\", gfc_current_intrinsic, &x->where);\n+      gfc_error (\"'a1' argument of '%s' intrinsic at %L must be INTEGER, \"\n+\t\t \"REAL or CHARACTER\", gfc_current_intrinsic, &x->where);\n       return FAILURE;\n     }\n "}, {"sha": "88a146bd18feab1d8a8489c455fecf25126e527b", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -2361,19 +2361,47 @@ simplify_min_max (gfc_expr *expr, int sign)\n \t  if (mpz_cmp (arg->expr->value.integer,\n \t\t       extremum->expr->value.integer) * sign > 0)\n \t    mpz_set (extremum->expr->value.integer, arg->expr->value.integer);\n-\n \t  break;\n \n \tcase BT_REAL:\n \t  if (mpfr_cmp (arg->expr->value.real, extremum->expr->value.real)\n \t      * sign > 0)\n \t    mpfr_set (extremum->expr->value.real, arg->expr->value.real,\n \t\t      GFC_RND_MODE);\n+\t  break;\n+\n+\tcase BT_CHARACTER:\n+#define LENGTH(x) ((x)->expr->value.character.length)\n+#define STRING(x) ((x)->expr->value.character.string)\n+\t  if (LENGTH(extremum) < LENGTH(arg))\n+\t    {\n+\t      char * tmp = STRING(extremum);\n+\n+\t      STRING(extremum) = gfc_getmem (LENGTH(arg) + 1);\n+\t      memcpy (STRING(extremum), tmp, LENGTH(extremum));\n+\t      memset (&STRING(extremum)[LENGTH(extremum)], ' ',\n+\t\t      LENGTH(arg) - LENGTH(extremum));\n+\t      STRING(extremum)[LENGTH(arg)] = '\\0';  /* For debugger  */\n+\t      LENGTH(extremum) = LENGTH(arg);\n+\t      gfc_free (tmp);\n+\t    }\n \n+\t  if (gfc_compare_string (arg->expr, extremum->expr) * sign > 0)\n+\t    {\n+\t      gfc_free (STRING(extremum));\n+\t      STRING(extremum) = gfc_getmem (LENGTH(extremum) + 1);\n+\t      memcpy (STRING(extremum), STRING(arg), LENGTH(arg));\n+\t      memset (&STRING(extremum)[LENGTH(arg)], ' ',\n+\t\t      LENGTH(extremum) - LENGTH(arg));\n+\t      STRING(extremum)[LENGTH(extremum)] = '\\0';  /* For debugger  */\n+\t    }\n+#undef LENGTH\n+#undef STRING\n \t  break;\n+\t      \n \n \tdefault:\n-\t  gfc_internal_error (\"gfc_simplify_max(): Bad type in arglist\");\n+\t  gfc_internal_error (\"simplify_min_max(): Bad type in arglist\");\n \t}\n \n       /* Delete the extra constant argument.  */"}, {"sha": "c9a195fe7843882153c116ef4a4ae924b7acc348", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -125,6 +125,7 @@ tree gfor_fndecl_string_index;\n tree gfor_fndecl_string_scan;\n tree gfor_fndecl_string_verify;\n tree gfor_fndecl_string_trim;\n+tree gfor_fndecl_string_minmax;\n tree gfor_fndecl_adjustl;\n tree gfor_fndecl_adjustr;\n \n@@ -2047,6 +2048,13 @@ gfc_build_intrinsic_function_decls (void)\n                                      gfc_charlen_type_node,\n                                      pchar_type_node);\n \n+  gfor_fndecl_string_minmax = \n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"string_minmax\")),\n+                                     void_type_node, -4,\n+                                     build_pointer_type (gfc_charlen_type_node),\n+                                     ppvoid_type_node, integer_type_node,\n+                                     integer_type_node);\n+\n   gfor_fndecl_ttynam =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"ttynam\")),\n                                      void_type_node,"}, {"sha": "ce6b58528c08a24695e7982298ba62101ae97be8", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -1561,6 +1561,45 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, int op)\n }\n \n \n+/* Generate library calls for MIN and MAX intrinsics for character\n+   variables.  */\n+static void\n+gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n+{\n+  tree *args;\n+  tree var, len, fndecl, tmp, cond;\n+  unsigned int nargs;\n+\n+  nargs = gfc_intrinsic_argument_list_length (expr);\n+  args = alloca (sizeof (tree) * (nargs + 4));\n+  gfc_conv_intrinsic_function_args (se, expr, &args[4], nargs);\n+\n+  /* Create the result variables.  */\n+  len = gfc_create_var (gfc_charlen_type_node, \"len\");\n+  args[0] = build_fold_addr_expr (len);\n+  var = gfc_create_var (build_pointer_type (gfc_character1_type_node), \"pstr\");\n+  args[1] = gfc_build_addr_expr (ppvoid_type_node, var);\n+  args[2] = build_int_cst (NULL_TREE, op);\n+  args[3] = build_int_cst (NULL_TREE, nargs / 2);\n+\n+  /* Make the function call.  */\n+  fndecl = build_addr (gfor_fndecl_string_minmax, current_function_decl);\n+  tmp = build_call_array (TREE_TYPE (TREE_TYPE (gfor_fndecl_string_minmax)),\n+\t\t\t  fndecl, nargs + 4, args);\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+\n+  /* Free the temporary afterwards, if necessary.  */\n+  cond = build2 (GT_EXPR, boolean_type_node, len,\n+\t\t build_int_cst (TREE_TYPE (len), 0));\n+  tmp = gfc_call_free (var);\n+  tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+  gfc_add_expr_to_block (&se->post, tmp);\n+\n+  se->expr = var;\n+  se->string_length = len;\n+}\n+\n+\n /* Create a symbol node for this intrinsic.  The symbol from the frontend\n    has the generic name.  */\n \n@@ -4058,7 +4097,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_MAX:\n-      gfc_conv_intrinsic_minmax (se, expr, GT_EXPR);\n+      if (expr->ts.type == BT_CHARACTER)\n+\tgfc_conv_intrinsic_minmax_char (se, expr, 1);\n+      else\n+\tgfc_conv_intrinsic_minmax (se, expr, GT_EXPR);\n       break;\n \n     case GFC_ISYM_MAXLOC:\n@@ -4074,7 +4116,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_MIN:\n-      gfc_conv_intrinsic_minmax (se, expr, LT_EXPR);\n+      if (expr->ts.type == BT_CHARACTER)\n+\tgfc_conv_intrinsic_minmax_char (se, expr, -1);\n+      else\n+\tgfc_conv_intrinsic_minmax (se, expr, LT_EXPR);\n       break;\n \n     case GFC_ISYM_MINLOC:"}, {"sha": "8226187f78c6ac6f4a7567939b4fa2a8eace426e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -540,6 +540,7 @@ extern GTY(()) tree gfor_fndecl_string_index;\n extern GTY(()) tree gfor_fndecl_string_scan;\n extern GTY(()) tree gfor_fndecl_string_verify;\n extern GTY(()) tree gfor_fndecl_string_trim;\n+extern GTY(()) tree gfor_fndecl_string_minmax;\n extern GTY(()) tree gfor_fndecl_adjustl;\n extern GTY(()) tree gfor_fndecl_adjustr;\n "}, {"sha": "5d5654ee25fcafbc1283407652d1219e40e7473f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -1,3 +1,10 @@\n+2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/29828\n+\t* gfortran.dg/minmax_char_1.f90: New test.\n+\t* gfortran.dg/minmax_char_2.f90: New test.\n+\t* gfortran.dg/min_max_optional_4.f90: New test.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gfortran.dg/nan_1.f90: Rename module into aux2 to avoid cygwin"}, {"sha": "b749db0f8e369df2d645ce209a1f7902e9fa3339", "filename": "gcc/testsuite/gfortran.dg/min_max_optional_4.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_optional_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_optional_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_optional_4.f90?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! { dg-shouldfail \"\" }\n+program test\n+  call foo(\"foo\")\n+contains\n+  subroutine foo(a, b, c, d)\n+    character(len=*), optional :: a, b, c, d\n+    integer :: i\n+    i = len_trim(min(a,b,c,d)) ! { dg-output \"Second argument of 'MIN' intrinsic should be present\" }\n+    print *, i\n+  end subroutine foo\n+end"}, {"sha": "9e73e9850be47f66abf37c923c76bde247550e36", "filename": "gcc/testsuite/gfortran.dg/minmax_char_1.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_1.f90?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -0,0 +1,73 @@\n+! Tests for MIN and MAX intrinsics with character arguments\n+!\n+! { dg-do run }\n+program test\n+  character(len=3), parameter :: sp = \"gee\"\n+  character(len=6), parameter :: tp = \"crunch\", wp = \"flunch\"\n+  character(len=2), parameter :: up = \"az\", vp = \"da\"\n+\n+  character(len=3) :: s\n+  character(len=6) :: t, w\n+  character(len=2) :: u, v\n+  s = \"gee\"\n+  t = \"crunch\"\n+  u = \"az\"\n+  v = \"da\"\n+  w = \"flunch\"\n+\n+  if (.not. equal(min(\"foo\", \"bar\"), \"bar\")) call abort\n+  if (.not. equal(max(\"foo\", \"bar\"), \"foo\")) call abort\n+  if (.not. equal(min(\"bar\", \"foo\"), \"bar\")) call abort\n+  if (.not. equal(max(\"bar\", \"foo\"), \"foo\")) call abort\n+\n+  if (.not. equal(min(\"bar\", \"foo\", sp), \"bar\")) call abort\n+  if (.not. equal(max(\"bar\", \"foo\", sp), \"gee\")) call abort\n+  if (.not. equal(min(\"bar\", sp, \"foo\"), \"bar\")) call abort\n+  if (.not. equal(max(\"bar\", sp, \"foo\"), \"gee\")) call abort\n+  if (.not. equal(min(sp, \"bar\", \"foo\"), \"bar\")) call abort\n+  if (.not. equal(max(sp, \"bar\", \"foo\"), \"gee\")) call abort\n+\n+  if (.not. equal(min(\"foo\", \"bar\", s), \"bar\")) call abort\n+  if (.not. equal(max(\"foo\", \"bar\", s), \"gee\")) call abort\n+  if (.not. equal(min(\"foo\", s, \"bar\"), \"bar\")) call abort\n+  if (.not. equal(max(\"foo\", s, \"bar\"), \"gee\")) call abort\n+  if (.not. equal(min(s, \"foo\", \"bar\"), \"bar\")) call abort\n+  if (.not. equal(max(s, \"foo\", \"bar\"), \"gee\")) call abort\n+\n+  if (.not. equal(min(\"\", \"\"), \"\")) call abort\n+  if (.not. equal(max(\"\", \"\"), \"\")) call abort\n+  if (.not. equal(min(\"\", \" \"), \" \")) call abort\n+  if (.not. equal(max(\"\", \" \"), \" \")) call abort\n+\n+  if (.not. equal(min(u,v,w), \"az    \")) call abort\n+  if (.not. equal(max(u,v,w), \"flunch\")) call abort\n+  if (.not. equal(min(u,vp,w), \"az    \")) call abort\n+  if (.not. equal(max(u,vp,w), \"flunch\")) call abort\n+  if (.not. equal(min(u,v,wp), \"az    \")) call abort\n+  if (.not. equal(max(u,v,wp), \"flunch\")) call abort\n+  if (.not. equal(min(up,v,w), \"az    \")) call abort\n+  if (.not. equal(max(up,v,w), \"flunch\")) call abort\n+\n+  call foo(\"gee   \",\"az    \",s,t,u,v)\n+  call foo(\"gee   \",\"az    \",s,t,u,v)\n+  call foo(\"gee   \",\"az    \",s,t,u)\n+  call foo(\"gee   \",\"crunch\",s,t)\n+\n+contains\n+\n+  subroutine foo(res_max, res_min, a, b, c, d)\n+    character(len=*) :: res_min, res_max\n+    character(len=*), optional :: a, b, c, d\n+\n+    if (.not. equal(min(a,b,c,d), res_min)) call abort\n+    if (.not. equal(max(a,b,c,d), res_max)) call abort\n+  end subroutine foo\n+\n+  pure function equal(a,b)\n+    character(len=*), intent(in) :: a, b\n+    logical :: equal\n+\n+    equal = (len(a) == len(b)) .and. (a == b)\n+  end function equal\n+\n+end program test"}, {"sha": "b5f74eac93bc1e6360c04673c023521ce2f0c967", "filename": "gcc/testsuite/gfortran.dg/minmax_char_2.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_2.f90?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -0,0 +1,4 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+  print *, min(\"foo\", \"bar\") ! { dg-error \"Fortran 2003.* CHARACTER argument\" }\n+  end"}, {"sha": "e205466bb463726ec3a69c8dc4a6e02fab3998c9", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -1,3 +1,10 @@\n+2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/29828\n+\t* intrinsics/string_intrinsics.c (string_minmax): New function\n+\tand prototype.\n+\t* gfortran.map (GFORTRAN_1.0): Add _gfortran_string_minmax\n+\n 2007-08-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31202"}, {"sha": "ed881ebfbccc5a92d6fc2f09ecb66aa8f6d175fd", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -941,6 +941,7 @@ GFORTRAN_1.0 {\n     _gfortran_st_rewind;\n     _gfortran_string_index;\n     _gfortran_string_len_trim;\n+    _gfortran_string_minmax;\n     _gfortran_string_scan;\n     _gfortran_string_trim;\n     _gfortran_string_verify;"}, {"sha": "3e0940f59ee701079eb6eac57e116407ac719bb8", "filename": "libgfortran/intrinsics/string_intrinsics.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2263c775581fc3bc0a4e26794dd3f301056e3a81/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2263c775581fc3bc0a4e26794dd3f301056e3a81/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics.c?ref=2263c775581fc3bc0a4e26794dd3f301056e3a81", "patch": "@@ -1,5 +1,5 @@\n /* String intrinsics helper functions.\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2007 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -38,6 +38,7 @@ Boston, MA 02110-1301, USA.  */\n \n #include <stdlib.h>\n #include <string.h>\n+#include <stdarg.h>\n \n #include \"libgfortran.h\"\n \n@@ -73,6 +74,9 @@ export_proto(string_verify);\n extern void string_trim (GFC_INTEGER_4 *, void **, GFC_INTEGER_4, const char *);\n export_proto(string_trim);\n \n+extern void string_minmax (GFC_INTEGER_4 *, void **, int, int, ...);\n+export_proto(string_minmax);\n+\n /* Strings of unequal length are extended with pad characters.  */\n \n GFC_INTEGER_4\n@@ -351,3 +355,62 @@ string_verify (GFC_INTEGER_4 slen, const char * str, GFC_INTEGER_4 setlen,\n \n   return 0;\n }\n+\n+\n+/* MIN and MAX intrinsics for strings.  The front-end makes sure that\n+   nargs is at least 2.  */\n+\n+void\n+string_minmax (GFC_INTEGER_4 *rlen, void **dest, int op, int nargs, ...)\n+{\n+  va_list ap;\n+  int i;\n+  char * next, * res;\n+  GFC_INTEGER_4 nextlen, reslen;\n+\n+  va_start (ap, nargs);\n+  reslen = va_arg (ap, GFC_INTEGER_4);\n+  res = va_arg (ap, char *);\n+  *rlen = reslen;\n+\n+  if (res == NULL)\n+    runtime_error (\"First argument of '%s' intrinsic should be present\",\n+\t\t   op > 0 ? \"MAX\" : \"MIN\");\n+\n+  for (i = 1; i < nargs; i++)\n+    {\n+      nextlen = va_arg (ap, GFC_INTEGER_4);\n+      next = va_arg (ap, char *);\n+\n+\n+      if (next == NULL)\n+\t{\n+\t  if (i == 1)\n+\t    runtime_error (\"Second argument of '%s' intrinsic should be \"\n+\t\t\t   \"present\", op > 0 ? \"MAX\" : \"MIN\");\n+\t  else\n+\t    continue;\n+\t}\n+\n+      if (nextlen > *rlen)\n+\t*rlen = nextlen;\n+\n+      if (op * compare_string (reslen, res, nextlen, next) < 0)\n+\t{\n+\t  reslen = nextlen;\n+\t  res = next;\n+\t}\n+    }\n+  va_end (ap);\n+\n+  if (*rlen > 0)\n+    {\n+      char * tmp = internal_malloc_size (*rlen);\n+      memcpy (tmp, res, reslen);\n+      memset (&tmp[reslen], ' ', *rlen - reslen);\n+      *dest = tmp;\n+    }\n+  else\n+    *dest = NULL;\n+}\n+"}]}