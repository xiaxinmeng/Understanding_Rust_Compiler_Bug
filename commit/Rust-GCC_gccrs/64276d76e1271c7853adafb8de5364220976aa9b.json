{"sha": "64276d76e1271c7853adafb8de5364220976aa9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyNzZkNzZlMTI3MWM3ODUzYWRhZmI4ZGU1MzY0MjIwOTc2YWE5Yg==", "commit": {"author": {"name": "Chen Liqin", "email": "liqin@sunnorth.com.cn", "date": "2007-08-17T03:38:47Z"}, "committer": {"name": "Chen Liqin", "email": "liqin@gcc.gnu.org", "date": "2007-08-17T03:38:47Z"}, "message": "score.md: Update pattern tablejump.\n\n2007-08-17  Chen Liqin  <liqin@sunnorth.com.cn>\n        * config/score/score.md : Update pattern tablejump.\n        * config/score/score.c : Update score_initialize_trampoline \n        function.\n        * config/score/score.h (TRAMPOLINE_TEMPLATE): Added macro.\n        (TRAMPOLINE_INSNS, TRAMPOLINE_SIZE) Update macro.\n        * doc/contrib.texi: Add my entry.\n\nFrom-SVN: r127577", "tree": {"sha": "90172f2b31e4f2088bec34cc893961ea72bb088e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90172f2b31e4f2088bec34cc893961ea72bb088e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64276d76e1271c7853adafb8de5364220976aa9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64276d76e1271c7853adafb8de5364220976aa9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64276d76e1271c7853adafb8de5364220976aa9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64276d76e1271c7853adafb8de5364220976aa9b/comments", "author": null, "committer": null, "parents": [{"sha": "3a379d1b711bc29cc2e5438aa00184bd3bd1e0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a379d1b711bc29cc2e5438aa00184bd3bd1e0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a379d1b711bc29cc2e5438aa00184bd3bd1e0e1"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "c729337cdb1bd2028eac5b9e57da7accca6ef8f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64276d76e1271c7853adafb8de5364220976aa9b", "patch": "@@ -1,3 +1,11 @@\n+2007-08-17  Chen Liqin  <liqin@sunnorth.com.cn>\n+        * config/score/score.md : Update pattern tablejump.\n+        * config/score/score.c : Update score_initialize_trampoline \n+        function.\n+        * config/score/score.h (TRAMPOLINE_TEMPLATE): Added macro.\n+        (TRAMPOLINE_INSNS, TRAMPOLINE_SIZE) Update macro.\n+        * doc/contrib.texi: Add my entry.\n+\n 2007-08-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in (REVISION): New."}, {"sha": "1a3aee5412f9b0a28a389a01b1dfcd8c41c6cdfc", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=64276d76e1271c7853adafb8de5364220976aa9b", "patch": "@@ -182,6 +182,9 @@ th_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   /* Pretend to be a post-reload pass while generating rtl.  */\n   reload_completed = 1;\n \n+  /* Mark the end of the (empty) prologue.  */\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n+ \n   /* We need two temporary registers in some cases.  */\n   temp1 = gen_rtx_REG (Pmode, 8);\n   temp2 = gen_rtx_REG (Pmode, 9);\n@@ -747,30 +750,13 @@ score_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN)\n #define FFCACHE          \"_flush_cache\"\n #define CODE_SIZE        (TRAMPOLINE_INSNS * UNITS_PER_WORD)\n \n-  unsigned int tramp[TRAMPOLINE_INSNS] = {\n-    0x8103bc56,                         /* mv      r8, r3          */\n-    0x9000bc05,                         /* bl      0x0x8           */\n-    0xc1238000 | (CODE_SIZE - 8),       /* lw      r9, &func       */\n-    0xc0038000\n-    | (STATIC_CHAIN_REGNUM << 21)\n-    | (CODE_SIZE - 4),                  /* lw  static chain reg, &chain */\n-    0x8068bc56,                         /* mv      r3, r8          */\n-    0x8009bc08,                         /* br      r9              */\n-    0x0,\n-    0x0,\n-    };\n   rtx pfunc, pchain;\n-  int i;\n-\n-  for (i = 0; i < TRAMPOLINE_INSNS; i++)\n-    emit_move_insn (gen_rtx_MEM (ptr_mode, plus_constant (ADDR, i << 2)),\n-                    GEN_INT (tramp[i]));\n \n   pfunc = plus_constant (ADDR, CODE_SIZE);\n-  pchain = plus_constant (ADDR, CODE_SIZE + GET_MODE_SIZE (ptr_mode));\n+  pchain = plus_constant (ADDR, CODE_SIZE + GET_MODE_SIZE (SImode));\n \n-  emit_move_insn (gen_rtx_MEM (ptr_mode, pfunc), FUNC);\n-  emit_move_insn (gen_rtx_MEM (ptr_mode, pchain), CHAIN);\n+  emit_move_insn (gen_rtx_MEM (SImode, pfunc), FUNC);\n+  emit_move_insn (gen_rtx_MEM (SImode, pchain), CHAIN);\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, FFCACHE),\n                      0, VOIDmode, 2,\n                      ADDR, Pmode,\n@@ -1172,7 +1158,7 @@ score_print_operand (FILE *file, rtx op, int c)\n         {\n           rtx temp = gen_lowpart (SImode, op);\n           gcc_assert (GET_MODE (op) == SFmode);\n-          fprintf (file, HOST_WIDE_INT_PRINT_HEX, INTVAL (temp) & 0xffffffff); \n+          fprintf (file, HOST_WIDE_INT_PRINT_HEX, INTVAL (temp) & 0xffffffff);\n         }\n       else\n         output_addr_const (file, op);\n@@ -1297,8 +1283,11 @@ score_print_operand_address (FILE *file, rtx x)\n                          INTVAL (addr.offset));\n                 break;\n               default:\n-                fprintf (file, \"[%s,%ld]\", reg_names[REGNO (addr.reg)],\n-                         INTVAL (addr.offset));\n+                if (INTVAL(addr.offset) == 0)\n+                  fprintf(file, \"[%s]\", reg_names[REGNO (addr.reg)]);\n+                else \n+                  fprintf(file, \"[%s, %ld]\", reg_names[REGNO (addr.reg)], \n+                          INTVAL(addr.offset));\n                 break;\n               }\n           }"}, {"sha": "c0cc3040364e882525f6a36ca8b21076796122f7", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=64276d76e1271c7853adafb8de5364220976aa9b", "patch": "@@ -628,12 +628,25 @@ typedef struct score_args\n   fprintf (FILE, \" .set nor1 \\n\");                                 \\\n }\n \n+#define TRAMPOLINE_TEMPLATE(STREAM)                                \\\n+{                                                                  \\\n+  fprintf (STREAM, \"\\t.set r1\\n\");                                 \\\n+  fprintf (STREAM, \"\\tmv r31, r3\\n\");                              \\\n+  fprintf (STREAM, \"\\tbl nextinsn\\n\");                             \\\n+  fprintf (STREAM, \"nextinsn:\\n\");                                 \\\n+  fprintf (STREAM, \"\\tlw r1, [r3, 6*4-8]\\n\");                      \\\n+  fprintf (STREAM, \"\\tlw r23, [r3, 6*4-4]\\n\");                     \\\n+  fprintf (STREAM, \"\\tmv r3, r31\\n\");                              \\\n+  fprintf (STREAM, \"\\tbr! r1\\n\");                                  \\\n+  fprintf (STREAM, \"\\tnop!\\n\");                                    \\\n+  fprintf (STREAM, \"\\t.set nor1\\n\");                               \\\n+}\n+\n /* Trampolines for Nested Functions.  */\n-#define TRAMPOLINE_INSNS                8\n+#define TRAMPOLINE_INSNS                6\n \n /* A C expression for the size in bytes of the trampoline, as an integer.  */\n-#define TRAMPOLINE_SIZE \\\n-  (TRAMPOLINE_INSNS * GET_MODE_SIZE (SImode) + GET_MODE_SIZE (ptr_mode) * 2)\n+#define TRAMPOLINE_SIZE                (24 + GET_MODE_SIZE (ptr_mode) * 2)\n \n /* A C statement to initialize the variable parts of a trampoline.\n    ADDR is an RTX for the address of the trampoline; FNADDR is an"}, {"sha": "c2b94c4eb17ae3686f2b4f2ee1ecc2f91f0eb920", "filename": "gcc/config/score/score.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fconfig%2Fscore%2Fscore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fconfig%2Fscore%2Fscore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.md?ref=64276d76e1271c7853adafb8de5364220976aa9b", "patch": "@@ -1429,8 +1429,6 @@\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n {\n-  if (GET_MODE (operands[0]) != ptr_mode)\n-    gcc_unreachable ();\n   emit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));\n   DONE;\n })"}, {"sha": "929e355346b70b3292974f89e9bd0e5d991d5403", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64276d76e1271c7853adafb8de5364220976aa9b/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=64276d76e1271c7853adafb8de5364220976aa9b", "patch": "@@ -513,6 +513,10 @@ patches.\n @item\n Robert Lipe for OpenServer support, new testsuites, testing, etc.\n \n+@item\n+Chen Liqin for various S+core related fixes/improvement, and for\n+maintaining the S+core port.\n+\n @item\n Weiwen Liu for testing and various bug fixes.\n "}]}