{"sha": "dcffd51576e6d3c1f8059656b5853608534fa63d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmZmQ1MTU3NmU2ZDNjMWY4MDU5NjU2YjU4NTM2MDg1MzRmYTYzZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-07T12:59:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T12:59:00Z"}, "message": "gnat_rm.texi, [...]: Change spelling parametrize(d) => parameterize(d).\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi, exp_util.adb, sinfo.adb, sinfo.ads, sem_ch12.adb,\n\tsem.adb, gnat_ugn.texi, sem_util.ads, par-ch6.adb, targparm.ads,\n\trestrict.adb, sem_ch6.adb, sem_ch6.ads, sprint.adb, i-c.ads: Change\n\tspelling parametrize(d) => parameterize(d).\n\nFrom-SVN: r165103", "tree": {"sha": "2dcf46532ded436bffc1e32a401f8ee65cf2d280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dcf46532ded436bffc1e32a401f8ee65cf2d280"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcffd51576e6d3c1f8059656b5853608534fa63d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcffd51576e6d3c1f8059656b5853608534fa63d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcffd51576e6d3c1f8059656b5853608534fa63d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcffd51576e6d3c1f8059656b5853608534fa63d/comments", "author": null, "committer": null, "parents": [{"sha": "2bfb1b72beca469f8ef72ab0a62b5afef417c25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfb1b72beca469f8ef72ab0a62b5afef417c25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfb1b72beca469f8ef72ab0a62b5afef417c25d"}], "stats": {"total": 125, "additions": 66, "deletions": 59}, "files": [{"sha": "a5d6633317eaa259aed3c05c7adc0a041afc725e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -1,3 +1,10 @@\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, exp_util.adb, sinfo.adb, sinfo.ads, sem_ch12.adb,\n+\tsem.adb, gnat_ugn.texi, sem_util.ads, par-ch6.adb, targparm.ads,\n+\trestrict.adb, sem_ch6.adb, sem_ch6.ads, sprint.adb, i-c.ads: Change\n+\tspelling parametrize(d) => parameterize(d).\n+\n 2010-10-07  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch12.adb: Add comment."}, {"sha": "45913579be71e606ca1302fb3af30ab2240b2f5f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -2592,7 +2592,7 @@ package body Exp_Util is\n                N_Package_Declaration                    |\n                N_Package_Instantiation                  |\n                N_Package_Renaming_Declaration           |\n-               N_Parametrized_Expression                |\n+               N_Parameterized_Expression               |\n                N_Private_Extension_Declaration          |\n                N_Private_Type_Declaration               |\n                N_Procedure_Instantiation                |"}, {"sha": "c992dcda19bcdcd677792fc441b6a68fb780a91f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -1544,7 +1544,7 @@ pragma Convention_Identifier (Fortran77, Fortran);\n @noindent\n would allow the use of the convention identifier @code{Fortran77} in\n subsequent code, avoiding the need to modify the sources. As another\n-example, you could use this to parametrize convention requirements\n+example, you could use this to parameterize convention requirements\n according to systems. Suppose you needed to use @code{Stdcall} on\n windows systems, and @code{C} on some other system, then you could\n define a convention identifier @code{Library} and use a single"}, {"sha": "8241d9a8a619b9d9c1ae8796cc8c28d9c5663c37", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -2918,7 +2918,7 @@ should provide a stub body that raises @code{Program_Error}.\n \n @noindent\n GNAT additionally provides a useful pragma @code{Convention_Identifier}\n-that can be used to parametrize conventions and allow additional synonyms\n+that can be used to parameterize conventions and allow additional synonyms\n to be specified. For example if you have legacy code in which the convention\n identifier Fortran77 was used for Fortran, you can use the configuration\n pragma:"}, {"sha": "9e98b050a7df29c3adf064342b36d1653bd41eea", "filename": "gcc/ada/i-c.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fi-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fi-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-c.ads?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -47,7 +47,7 @@ package Interfaces.C is\n    type unsigned_char is mod (UCHAR_MAX + 1);\n    for unsigned_char'Size use CHAR_BIT;\n \n-   subtype plain_char is unsigned_char; -- ??? should be parametrized\n+   subtype plain_char is unsigned_char; -- ??? should be parameterized\n \n    --  Note: the Integer qualifications used in the declaration of ptrdiff_t\n    --  avoid ambiguities when compiling in the presence of s-auxdec.ads and"}, {"sha": "01513b0c8ee11a66c19fdd87dd27f142b6181bcc", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -82,7 +82,7 @@ package body Ch6 is\n \n    --  This routine scans out a subprogram declaration, subprogram body,\n    --  subprogram renaming declaration or subprogram generic instantiation.\n-   --  It also handles the new Ada 2012 parametrized expression form\n+   --  It also handles the new Ada 2012 parameterized expression form\n \n    --  SUBPROGRAM_DECLARATION ::= SUBPROGRAM_SPECIFICATION;\n \n@@ -123,7 +123,7 @@ package body Ch6 is\n    --  is classified as a basic declarative item, but it is parsed here, with\n    --  other subprogram constructs.\n \n-   --  PARAMETRIZED_EXPRESSION ::=\n+   --  PARAMETERIZED_EXPRESSION ::=\n    --    FUNCTION SPECIFICATION IS (EXPRESSION);\n \n    --  The value in Pf_Flags indicates which of these possible declarations\n@@ -134,7 +134,7 @@ package body Ch6 is\n    --    Pf_Flags.Pbod                 Set if proper body OK\n    --    Pf_Flags.Rnam                 Set if renaming declaration OK\n    --    Pf_Flags.Stub                 Set if body stub OK\n-   --    Pf_Flags.Pexp                 Set if parametrized expression OK\n+   --    Pf_Flags.Pexp                 Set if parameterized expression OK\n \n    --  If an inappropriate form is encountered, it is scanned out but an\n    --  error message indicating that it is appearing in an inappropriate\n@@ -584,7 +584,7 @@ package body Ch6 is\n          end if;\n       end if;\n \n-      --  Processing for stub or subprogram body or parametrized expression\n+      --  Processing for stub or subprogram body or parameterized expression\n \n       <<Subprogram_Body>>\n \n@@ -609,21 +609,21 @@ package body Ch6 is\n             TF_Semicolon;\n             return Stub_Node;\n \n-         --  Subprogram body or parametrized expression case\n+         --  Subprogram body or parameterized expression case\n \n          else\n-            Scan_Body_Or_Parametrized_Expression : declare\n+            Scan_Body_Or_Parameterized_Expression : declare\n \n-               function Likely_Parametrized_Expression return Boolean;\n-               --  Returns True if we have a probably case of a parametrized\n+               function Likely_Parameterized_Expression return Boolean;\n+               --  Returns True if we have a probably case of a parameterized\n                --  expression omitting the parentheses, if so, returns True\n                --  and emits an appropriate error message, else returns False.\n \n-               ------------------------------------\n-               -- Likely_Parametrized_Expression --\n-               ------------------------------------\n+               -------------------------------------\n+               -- Likely_Parameterized_Expression --\n+               -------------------------------------\n \n-               function Likely_Parametrized_Expression return Boolean is\n+               function Likely_Parameterized_Expression return Boolean is\n                begin\n                   --  If currently pointing to BEGIN or a declaration keyword\n                   --  or a pragma, then we definitely have a subprogram body.\n@@ -636,7 +636,7 @@ package body Ch6 is\n                      return False;\n \n                   --  Test for tokens which could only start an expression and\n-                  --  thus signal the case of a parametrized expression.\n+                  --  thus signal the case of a parameterized expression.\n \n                   elsif Token in Token_Class_Literal\n                     or else Token in Token_Class_Unary_Addop\n@@ -666,7 +666,7 @@ package body Ch6 is\n                      --  Otherwise we have to scan ahead. If the identifier is\n                      --  followed by a colon or a comma, it is a declaration\n                      --  and hence we have a subprogram body. Otherwise assume\n-                     --  a parametrized expression.\n+                     --  a parameterized expression.\n \n                      else\n                         declare\n@@ -685,43 +685,43 @@ package body Ch6 is\n                      end if;\n                   end if;\n \n-                  --  Fall through if we have a likely parametrized expression\n+                  --  Fall through if we have a likely parameterized expression\n \n                   Error_Msg_SC\n-                    (\"parametrized expression must be \"\n+                    (\"parameterized expression must be \"\n                      & \"enclosed in parentheses\");\n                   return True;\n-               end Likely_Parametrized_Expression;\n+               end Likely_Parameterized_Expression;\n \n-            --  Start of processing for Scan_Body_Or_Parametrized_Expression\n+            --  Start of processing for Scan_Body_Or_Parameterized_Expression\n \n             begin\n-               --  Parametrized_Expression case\n+               --  Parameterized_Expression case\n \n                if Token = Tok_Left_Paren\n-                 or else Likely_Parametrized_Expression\n+                 or else Likely_Parameterized_Expression\n                then\n-                  --  Check parametrized expression allowed here\n+                  --  Check parameterized expression allowed here\n \n                   if not Pf_Flags.Pexp then\n                      Error_Msg_SC\n-                       (\"parametrized expression not allowed here!\");\n+                       (\"parameterized expression not allowed here!\");\n                   end if;\n \n                   --  Check we are in Ada 2012 mode\n \n                   if Ada_Version < Ada_12 then\n                      Error_Msg_SC\n-                       (\"parametrized expression is an Ada 2012 feature!\");\n+                       (\"parameterized expression is an Ada 2012 feature!\");\n                      Error_Msg_SC\n                        (\"\\unit must be compiled with -gnat2012 switch!\");\n                   end if;\n \n-                  --  Parse out expression and build parametrized expression\n+                  --  Parse out expression and build parameterized expression\n \n                   Body_Node :=\n                     New_Node\n-                      (N_Parametrized_Expression, Sloc (Specification_Node));\n+                      (N_Parameterized_Expression, Sloc (Specification_Node));\n                   Set_Specification (Body_Node, Specification_Node);\n                   Set_Expression (Body_Node, P_Expression);\n                   T_Semicolon;\n@@ -761,7 +761,7 @@ package body Ch6 is\n                end if;\n \n                return Body_Node;\n-            end Scan_Body_Or_Parametrized_Expression;\n+            end Scan_Body_Or_Parameterized_Expression;\n          end if;\n \n       --  Processing for subprogram declaration"}, {"sha": "755aabc154d51e2bbd00a8d545ac6dcc3819688c", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -685,7 +685,7 @@ package body Restrict is\n          Error_Msg_Sloc := No_Location;\n       end if;\n \n-      --  Case of parametrized restriction\n+      --  Case of parameterized restriction\n \n       if R in All_Parameter_Restrictions then\n          Add_Char ('`');"}, {"sha": "5fb847ddc60942ab388b3ef1483fdc0c13fc776b", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -437,8 +437,8 @@ package body Sem is\n          when N_Parameter_Association =>\n             Analyze_Parameter_Association (N);\n \n-         when N_Parametrized_Expression =>\n-            Analyze_Parametrized_Expression (N);\n+         when N_Parameterized_Expression =>\n+            Analyze_Parameterized_Expression (N);\n \n          when N_Pragma =>\n             Analyze_Pragma (N);"}, {"sha": "f05ed6e9bab7f1fab5e7a89a34e6de2e84e72e15", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -608,11 +608,11 @@ package body Sem_Ch12 is\n    --  formals: the visible and private declarations themselves need not be\n    --  created.\n \n-   --  In Ada 2005, the formal package may be only partially parametrized. In\n-   --  that case the visibility step must make visible those actuals whose\n+   --  In Ada 2005, the formal package may be only partially parameterized.\n+   --  In that case the visibility step must make visible those actuals whose\n    --  corresponding formals were given with a box. A final complication\n-   --  involves inherited operations from formal derived types, which must be\n-   --  visible if the type is.\n+   --  involves inherited operations from formal derived types, which must\n+   --  be visible if the type is.\n \n    function Is_In_Main_Unit (N : Node_Id) return Boolean;\n    --  Test if given node is in the main unit\n@@ -4753,7 +4753,7 @@ package body Sem_Ch12 is\n             --  that are attributes are rewritten as subprograms. If the\n             --  subprogram in the formal package is defaulted, no check is\n             --  needed. Note that this can only happen in Ada 2005 when the\n-            --  formal package can be partially parametrized.\n+            --  formal package can be partially parameterized.\n \n             if Nkind (Unit_Declaration_Node (E1)) =\n                                            N_Subprogram_Renaming_Declaration"}, {"sha": "35bd1014ecabba934a7ca0781f49164f9b888381", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -1038,17 +1038,17 @@ package body Sem_Ch6 is\n       Analyze (Explicit_Actual_Parameter (N));\n    end Analyze_Parameter_Association;\n \n-   -------------------------------------\n-   -- Analyze_Parametrized_Expression --\n-   -------------------------------------\n+   --------------------------------------\n+   -- Analyze_Parameterized_Expression --\n+   --------------------------------------\n \n-   procedure Analyze_Parametrized_Expression (N : Node_Id) is\n+   procedure Analyze_Parameterized_Expression (N : Node_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n       LocX : constant Source_Ptr := Sloc (Expression (N));\n \n    begin\n       --  This is one of the occasions on which we write things during semantic\n-      --  analysis. We transform the parametrized expression into an equivalent\n+      --  analysis. Transform the parameterized expression into an equivalent\n       --  subprogram body, and then analyze that.\n \n       Rewrite (N,\n@@ -1061,7 +1061,7 @@ package body Sem_Ch6 is\n                 Make_Simple_Return_Statement (LocX,\n                   Expression => Expression (N))))));\n       Analyze (N);\n-   end Analyze_Parametrized_Expression;\n+   end Analyze_Parameterized_Expression;\n \n    ----------------------------\n    -- Analyze_Procedure_Call --"}, {"sha": "c25032184eec4adb28813ee39f1c5517f7f53c7e", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -39,7 +39,7 @@ package Sem_Ch6 is\n    procedure Analyze_Function_Call                   (N : Node_Id);\n    procedure Analyze_Operator_Symbol                 (N : Node_Id);\n    procedure Analyze_Parameter_Association           (N : Node_Id);\n-   procedure Analyze_Parametrized_Expression         (N : Node_Id);\n+   procedure Analyze_Parameterized_Expression        (N : Node_Id);\n    procedure Analyze_Procedure_Call                  (N : Node_Id);\n    procedure Analyze_Simple_Return_Statement         (N : Node_Id);\n    procedure Analyze_Subprogram_Declaration          (N : Node_Id);"}, {"sha": "aa044514c48ff1e10c80e7e65592becd08092b4b", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -84,7 +84,7 @@ package Sem_Util is\n    --  node that is built is normally Etype (N), but if the Typ parameter\n    --  is present, this is used instead. Warn is normally False. If it is\n    --  True then the message is treated as a warning even though it does\n-   --  not end with a ? (this is used when the caller wants to parametrize\n+   --  not end with a ? (this is used when the caller wants to parameterize\n    --  whether an error or warning is given.\n \n    function Build_Actual_Subtype"}, {"sha": "45659021e9b747f982e85e17b3050dbef1391f58", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -1191,7 +1191,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Number_Declaration\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n-        or else NT (N).Nkind = N_Parametrized_Expression\n+        or else NT (N).Nkind = N_Parameterized_Expression\n         or else NT (N).Nkind = N_Pragma_Argument_Association\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Raise_Statement\n@@ -2682,7 +2682,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Generic_Package_Declaration\n         or else NT (N).Nkind = N_Generic_Subprogram_Declaration\n         or else NT (N).Nkind = N_Package_Declaration\n-        or else NT (N).Nkind = N_Parametrized_Expression\n+        or else NT (N).Nkind = N_Parameterized_Expression\n         or else NT (N).Nkind = N_Subprogram_Body\n         or else NT (N).Nkind = N_Subprogram_Body_Stub\n         or else NT (N).Nkind = N_Subprogram_Declaration\n@@ -4096,7 +4096,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Number_Declaration\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n-        or else NT (N).Nkind = N_Parametrized_Expression\n+        or else NT (N).Nkind = N_Parameterized_Expression\n         or else NT (N).Nkind = N_Pragma_Argument_Association\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Raise_Statement\n@@ -5587,7 +5587,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Generic_Package_Declaration\n         or else NT (N).Nkind = N_Generic_Subprogram_Declaration\n         or else NT (N).Nkind = N_Package_Declaration\n-        or else NT (N).Nkind = N_Parametrized_Expression\n+        or else NT (N).Nkind = N_Parameterized_Expression\n         or else NT (N).Nkind = N_Subprogram_Body\n         or else NT (N).Nkind = N_Subprogram_Body_Stub\n         or else NT (N).Nkind = N_Subprogram_Declaration"}, {"sha": "3f4032256227655f11545124e2bcf600d4886a08", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -4427,17 +4427,17 @@ package Sinfo is\n       --  Was_Originally_Stub (Flag13-Sem)\n       --  Has_Relative_Deadline_Pragma (Flag9-Sem)\n \n-      -----------------------------\n-      -- Parametrized Expression --\n-      -----------------------------\n+      ------------------------------\n+      -- Parameterized Expression --\n+      ------------------------------\n \n       --  This is an Ada 2012 extension, we put it here for now, to be labeled\n       --  and put in its proper section when we know exactly where that is!\n \n-      --  PARAMETRIZED_EXPRESSION ::=\n+      --  PARAMETERIZED_EXPRESSION ::=\n       --    FUNCTION SPECIFICATION IS (EXPRESSION);\n \n-      --  N_Parametrized_Expression\n+      --  N_Parameterized_Expression\n       --  Sloc points to FUNCTION\n       --  Specification (Node1)\n       --  Expression (Node3)\n@@ -7329,7 +7329,7 @@ package Sinfo is\n       N_Incomplete_Type_Declaration,\n       N_Loop_Parameter_Specification,\n       N_Object_Declaration,\n-      N_Parametrized_Expression,\n+      N_Parameterized_Expression,\n       N_Protected_Type_Declaration,\n       N_Private_Extension_Declaration,\n       N_Private_Type_Declaration,\n@@ -10438,7 +10438,7 @@ package Sinfo is\n         4 => True,    --  Handled_Statement_Sequence (Node4)\n         5 => False),  --  Corresponding_Spec (Node5-Sem)\n \n-     N_Parametrized_Expression =>\n+     N_Parameterized_Expression =>\n        (1 => True,    --  Specification (Node1)\n         2 => False,   --  unused\n         3 => True,    --  Expression (Node3)"}, {"sha": "49906e54d138ad894636daf134b72aa6a8ccb7fe", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -2388,7 +2388,7 @@ package body Sprint is\n                Write_Str (\", \");\n             end if;\n \n-         when N_Parametrized_Expression =>\n+         when N_Parameterized_Expression =>\n             Write_Indent;\n             Sprint_Node_Sloc (Specification (Node));\n "}, {"sha": "726e30550e7d3b6004f24cd6f6879564e9142e05", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffd51576e6d3c1f8059656b5853608534fa63d/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=dcffd51576e6d3c1f8059656b5853608534fa63d", "patch": "@@ -157,7 +157,7 @@ package Targparm is\n    Run_Time_Name_On_Target : Name_Id := No_Name;\n    --  Set to appropriate names table entry Id value if a Run_Time_Name\n    --  string constant is defined in system.ads. This name is used only\n-   --  for the configurable run-time case, and is used to parametrize\n+   --  for the configurable run-time case, and is used to parameterize\n    --  messages that complain about non-supported run-time features.\n    --  The name should contain only letters A-Z, digits 1-9, spaces,\n    --  and underscores."}]}