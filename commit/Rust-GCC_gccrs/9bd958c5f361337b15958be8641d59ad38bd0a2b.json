{"sha": "9bd958c5f361337b15958be8641d59ad38bd0a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkOTU4YzVmMzYxMzM3YjE1OTU4YmU4NjQxZDU5YWQzOGJkMGEyYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-20T14:44:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-20T14:44:24Z"}, "message": "Fix incorrect TARGET_MEM_REF alignment (PR 84419)\n\nexpand_call_mem_ref checks for TARGET_MEM_REFs that have compatible\ntype, but it didn't then go on to install the specific type we need,\nwhich might have different alignment due to:\n\n  if (TYPE_ALIGN (type) != align)\n    type = build_aligned_type (type, align);\n\nThis was causing masked stores to be incorrectly marked as\naligned on AVX512.\n\n2018-02-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/84419\n\t* internal-fn.c (expand_call_mem_ref): Create a TARGET_MEM_REF\n\twith the required type if its current type is compatible but\n\tdifferent.\n\ngcc/testsuite/\n\tPR tree-optimization/84419\n\t* gcc.dg/vect/pr84419.c: New test.\n\nFrom-SVN: r257847", "tree": {"sha": "4876fe452ae7607c88e5357f95da7f998ac00588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4876fe452ae7607c88e5357f95da7f998ac00588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd958c5f361337b15958be8641d59ad38bd0a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd958c5f361337b15958be8641d59ad38bd0a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd958c5f361337b15958be8641d59ad38bd0a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd958c5f361337b15958be8641d59ad38bd0a2b/comments", "author": null, "committer": null, "parents": [{"sha": "ef7866a3f1395f16872a0d61e111660e302a674d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7866a3f1395f16872a0d61e111660e302a674d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7866a3f1395f16872a0d61e111660e302a674d"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "2c679c9436e20220c5003dd7979e29caebef9137", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bd958c5f361337b15958be8641d59ad38bd0a2b", "patch": "@@ -1,3 +1,10 @@\n+2018-02-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84419\n+\t* internal-fn.c (expand_call_mem_ref): Create a TARGET_MEM_REF\n+\twith the required type if its current type is compatible but\n+\tdifferent.\n+\n 2018-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/82004"}, {"sha": "da205c9d68a16217f9e8e575206fec5d3456934e", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=9bd958c5f361337b15958be8641d59ad38bd0a2b", "patch": "@@ -2444,11 +2444,14 @@ expand_call_mem_ref (tree type, gcall *stmt, int index)\n \t  && types_compatible_p (TREE_TYPE (mem), type))\n \t{\n \t  tree offset = TMR_OFFSET (mem);\n-\t  if (alias_ptr_type != TREE_TYPE (offset) || !integer_zerop (offset))\n+\t  if (type != TREE_TYPE (mem)\n+\t      || alias_ptr_type != TREE_TYPE (offset)\n+\t      || !integer_zerop (offset))\n \t    {\n \t      mem = copy_node (mem);\n \t      TMR_OFFSET (mem) = wide_int_to_tree (alias_ptr_type,\n \t\t\t\t\t\t   wi::to_poly_wide (offset));\n+\t      TREE_TYPE (mem) = type;\n \t    }\n \t  return mem;\n \t}"}, {"sha": "8eb50db74788ab2538429a641bb6d7425bb11e69", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bd958c5f361337b15958be8641d59ad38bd0a2b", "patch": "@@ -1,3 +1,8 @@\n+2018-02-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84419\n+\t* gcc.dg/vect/pr84419.c: New test.\n+\n 2018-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/82004"}, {"sha": "4864f8eb934dd5eaf78357d130c672f92f8b6d22", "filename": "gcc/testsuite/gcc.dg/vect/pr84419.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd958c5f361337b15958be8641d59ad38bd0a2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84419.c?ref=9bd958c5f361337b15958be8641d59ad38bd0a2b", "patch": "@@ -0,0 +1,21 @@\n+#include <string.h>\n+\n+#define SIZE 400\n+\n+int  foo[SIZE];\n+char bar[SIZE];\n+\n+void __attribute__ ((noinline)) foo_func(void)\n+{\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    if (bar[i])\n+      foo[i] = 1;\n+}\n+\n+int main()\n+{\n+  memset(bar, 1, sizeof(bar));\n+  foo_func();\n+  return 0;\n+}"}]}