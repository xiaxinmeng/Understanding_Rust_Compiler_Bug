{"sha": "85bbb21f8f810152bf51558180f7c6520aca6571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViYmIyMWY4ZjgxMDE1MmJmNTE1NTgxODBmN2M2NTIwYWNhNjU3MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-06-07T20:58:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-06-07T20:58:33Z"}, "message": "re PR target/15783 (ICE with union assignment in 64-bit mode)\n\n\tPR target/15783\n\t* config/sparc/sparc.c (function_arg_union_value): Add 'mode'\n\tparameter.  Enumerate the registers inside the PARALLEL.\n\t(function_arg): Adjust call to function_arg_union_value.\n\t(function_value): Likewise.\n\nFrom-SVN: r82722", "tree": {"sha": "206a94181ce7538b45e5c829003584f16aae7897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206a94181ce7538b45e5c829003584f16aae7897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85bbb21f8f810152bf51558180f7c6520aca6571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bbb21f8f810152bf51558180f7c6520aca6571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85bbb21f8f810152bf51558180f7c6520aca6571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bbb21f8f810152bf51558180f7c6520aca6571/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67057c537b7f1f895ff87f8616e8a122f886f1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67057c537b7f1f895ff87f8616e8a122f886f1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67057c537b7f1f895ff87f8616e8a122f886f1bf"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "0be308243f8ae16c05a99829c6994d610994c240", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85bbb21f8f810152bf51558180f7c6520aca6571", "patch": "@@ -1,3 +1,13 @@\n+2004-06-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/15783\n+\t* config/sparc/sparc.c (function_arg_union_value): Add 'mode'\n+\tparameter.  Enumerate the registers inside the PARALLEL.\n+\t(function_arg): Adjust call to function_arg_union_value.\n+\t(function_value): Likewise.\n+\n+\t* config/sparc/sparc.c (sparc_function_epilogue): Properly format.\n+\n 2004-06-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* real.c (real_copysign): New function to implement libm's copysign."}, {"sha": "0d19727145688a1f00846ef28d6b59ebeb5e4f2f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=85bbb21f8f810152bf51558180f7c6520aca6571", "patch": "@@ -4514,12 +4514,12 @@ sparc_function_epilogue (FILE *file,\n      This insn is used in the 32-bit ABI when calling a function that returns\n      a non zero-sized structure. The 64-bit ABI doesn't have it.  Be careful\n      to have this test be the same as that used on the call.  */\n-  sparc_skip_caller_unimp =\n-    ! TARGET_ARCH64\n-    && current_function_returns_struct\n-    && (TREE_CODE (DECL_SIZE (DECL_RESULT (current_function_decl)))\n-\t== INTEGER_CST)\n-    && ! integer_zerop (DECL_SIZE (DECL_RESULT (current_function_decl)));\n+  sparc_skip_caller_unimp\n+    = ! TARGET_ARCH64\n+      && current_function_returns_struct\n+      && (TREE_CODE (DECL_SIZE (DECL_RESULT (current_function_decl)))\n+\t  == INTEGER_CST)\n+      && ! integer_zerop (DECL_SIZE (DECL_RESULT (current_function_decl)));\n \n   if (current_function_epilogue_delay_list == 0)\n     {\n@@ -5129,7 +5129,7 @@ static void function_arg_record_value_2\n static void function_arg_record_value_1\n  (tree, HOST_WIDE_INT, struct function_arg_record_value_parms *, bool);\n static rtx function_arg_record_value (tree, enum machine_mode, int, int, int);\n-static rtx function_arg_union_value (int, int);\n+static rtx function_arg_union_value (int, enum machine_mode, int);\n \n /* A subroutine of function_arg_record_value.  Traverse the structure\n    recursively and determine how many registers will be required.  */\n@@ -5471,26 +5471,25 @@ function_arg_record_value (tree type, enum machine_mode mode,\n    FUNCTION_ARG and FUNCTION_VALUE.\n \n    SIZE is the size in bytes of the union.\n+   MODE is the argument's machine mode.\n    REGNO is the hard register the union will be passed in.  */\n \n static rtx\n-function_arg_union_value (int size, int regno)\n+function_arg_union_value (int size, enum machine_mode mode, int regno)\n {\n-  enum machine_mode mode;\n-  rtx reg;\n+  int nwords = ROUND_ADVANCE (size), i;\n+  rtx regs;\n \n-  if (size <= UNITS_PER_WORD)\n-    mode = word_mode;\n-  else\n-    mode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n+  /* Unions are passed left-justified.  */\n+  regs = gen_rtx_PARALLEL (mode, rtvec_alloc (nwords));\n \n-  reg = gen_rtx_REG (mode, regno);\n+  for (i = 0; i < nwords; i++)\n+    XVECEXP (regs, 0, i)\n+      = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t   gen_rtx_REG (word_mode, regno + i),\n+\t\t\t   GEN_INT (UNITS_PER_WORD * i));\n \n-  /* Unions are passed left-justified.  */\n-  return gen_rtx_PARALLEL (mode,\n-\t\t\t   gen_rtvec (1, gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t\t\t    reg,\n-\t\t\t\t\t\t\t    const0_rtx)));\n+  return regs;\n }\n \n /* Handle the FUNCTION_ARG macro.\n@@ -5547,7 +5546,7 @@ function_arg (const struct sparc_args *cum, enum machine_mode mode,\n       if (size > 16)\n \tabort (); /* shouldn't get here */\n \n-      return function_arg_union_value (size, regno);\n+      return function_arg_union_value (size, mode, regno);\n     }\n   /* v9 fp args in reg slots beyond the int reg slots get passed in regs\n      but also have the slot allocated for them.\n@@ -5872,7 +5871,7 @@ function_value (tree type, enum machine_mode mode, int incoming_p)\n \t  if (size > 32)\n \t    abort (); /* shouldn't get here */\n \n-\t  return function_arg_union_value (size, regbase);\n+\t  return function_arg_union_value (size, mode, regbase);\n \t}\n       else if (AGGREGATE_TYPE_P (type))\n \t{"}, {"sha": "055cd69bf8ed118396aefc87c5973f809a892606", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85bbb21f8f810152bf51558180f7c6520aca6571", "patch": "@@ -1,3 +1,7 @@\n+2004-06-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/union-1.c: New test.\n+\n 2004-06-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/builtins-41.c: New test case.\n@@ -22718,3 +22722,4 @@ rlsruhe.de>\n \tcorrespond to c-torture\t1.11.\n \n \t* New file.\n+"}, {"sha": "0dd2df9b064e0b3a195488e0b969d0aff43c32eb", "filename": "gcc/testsuite/gcc.dg/union-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2Ftestsuite%2Fgcc.dg%2Funion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bbb21f8f810152bf51558180f7c6520aca6571/gcc%2Ftestsuite%2Fgcc.dg%2Funion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funion-1.c?ref=85bbb21f8f810152bf51558180f7c6520aca6571", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/15783 */\n+/* Origin: Paul Pluzhnikov <ppluzhnikov@charter.net> */\n+\n+/* This used to ICE on SPARC 64-bit because the back-end was\n+   returning an invalid construct for the return value of fu2.  */\n+\n+/* { dg-do compile } */\n+\n+union u2 {\n+    struct\n+    {\n+        int u2s_a, u2s_b, u2s_c, u2s_d, u2s_e;\n+    } u2_s;\n+    double u2_d;\n+} u2a;\n+\n+union u2 fu2();\n+\n+void unions()\n+{\n+    u2a = fu2();\n+}"}]}