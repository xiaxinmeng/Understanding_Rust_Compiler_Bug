{"sha": "aa9b756937a80e557f1c983d37ce1423c3afc2b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5Yjc1NjkzN2E4MGU1NTdmMWM5ODNkMzdjZTE0MjNjM2FmYzJiMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-03T18:43:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-03T18:43:06Z"}, "message": "re PR c++/41927 ([C++0x] Spurious warning with enable_if and default function template argument)\n\n\tPR c++/41927\n\t* typeck.c (build_x_binary_op): Don't do warn_parentheses\n\tif we're in a SFINAE context.\n\nFrom-SVN: r153863", "tree": {"sha": "8a425ade42a069bc27caf86c3a2b7a4918ff3ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a425ade42a069bc27caf86c3a2b7a4918ff3ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9b756937a80e557f1c983d37ce1423c3afc2b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9b756937a80e557f1c983d37ce1423c3afc2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9b756937a80e557f1c983d37ce1423c3afc2b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9b756937a80e557f1c983d37ce1423c3afc2b2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a638b034245e39678a9f24b823df0bba0f1453d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a638b034245e39678a9f24b823df0bba0f1453d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a638b034245e39678a9f24b823df0bba0f1453d0"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "d7b3150e216ce88f332e67514120c6f75258846a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa9b756937a80e557f1c983d37ce1423c3afc2b2", "patch": "@@ -1,5 +1,9 @@\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/41927\n+\t* typeck.c (build_x_binary_op): Don't do warn_parentheses\n+\tif we're in a SFINAE context.\n+\n \tPR c++/41815\n \t* call.c (build_call_a): Strip cv-quals from rvalue result.\n "}, {"sha": "7cafc8ab2246057d7274d8907fe91778609495b7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=aa9b756937a80e557f1c983d37ce1423c3afc2b2", "patch": "@@ -3245,6 +3245,7 @@ build_x_binary_op (enum tree_code code, tree arg1, enum tree_code arg1_code,\n      misinterpret.  But don't warn about obj << x + y, since that is a\n      common idiom for I/O.  */\n   if (warn_parentheses\n+      && (complain & tf_warning)\n       && !processing_template_decl\n       && !error_operand_p (arg1)\n       && !error_operand_p (arg2)"}, {"sha": "dc49db078039a43229e5af731cb08cf946fb0e39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa9b756937a80e557f1c983d37ce1423c3afc2b2", "patch": "@@ -1,5 +1,8 @@\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/41927\n+\t* g++.dg/template/sfinae16.C: New.\n+\n \tPR c++/41815\n \t* g++.dg/cpp0x/rv-return.C: New.\n \t* g++.dg/cpp0x/deduce.C: Adjust."}, {"sha": "5ea564c9f86c1c93792db4d0d2b03c2acec55c45", "filename": "gcc/testsuite/g++.dg/template/sfinae16.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9b756937a80e557f1c983d37ce1423c3afc2b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae16.C?ref=aa9b756937a80e557f1c983d37ce1423c3afc2b2", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/41927\n+// { dg-options \"-std=c++0x -Wall\" }\n+\n+// We were getting a spurious ||/&& warning about the enable_if with the\n+// source position of d1.\n+\n+template<typename Tp>\n+  struct is_int\n+  { static const bool value = true; };\n+\n+template<bool, typename Tp = void>\n+  struct enable_if\n+  { };\n+\n+template<typename Tp>\n+  struct enable_if<true, Tp>\n+  { typedef Tp type; };\n+\n+template<typename Rep>\n+  struct duration\n+  {\n+    duration() { }\n+\n+    template<typename Rep2, typename = typename\n+             enable_if<false || (true && is_int<Rep2>::value)>::type>\n+    duration(const duration<Rep2>&) { }\n+  };\n+\n+int main()\n+{\n+  duration<int> d0;\n+  duration<int> d1 = d0;\n+}\n+"}]}