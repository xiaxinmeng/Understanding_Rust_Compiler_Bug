{"sha": "d87778ed097f24a0bf394c0255019547008c3479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg3Nzc4ZWQwOTdmMjRhMGJmMzk0YzAyNTUwMTk1NDcwMDhjMzQ3OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-20T13:57:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-21T10:17:29Z"}, "message": "aarch64: Bump AARCH64_APPROX_MODE to 64 bits\n\nWe now have more than 32 scalar and vector float modes, so the\n32-bit AARCH64_APPROX_MODE would invoke UB for some of them.\nBumping to a 64-bit mask fixes that... for now.\n\nIdeally we'd have a static assert to trap this, but logically\nit would go at file scope.  I think it would be better to wait\nuntil the switch to C++11, so that we can use static_assert\ndirectly.\n\n2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (AARCH64_APPROX_MODE): Operate\n\ton and produce uint64_ts rather than ints.\n\t(AARCH64_APPROX_NONE, AARCH64_APPROX_ALL): Change to uint64_ts.\n\t(cpu_approx_modes): Change the fields from unsigned int to uint64_t.", "tree": {"sha": "8d037b682523520780d794c48d1b107dd9494f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d037b682523520780d794c48d1b107dd9494f84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d87778ed097f24a0bf394c0255019547008c3479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87778ed097f24a0bf394c0255019547008c3479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87778ed097f24a0bf394c0255019547008c3479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87778ed097f24a0bf394c0255019547008c3479/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df28e68fd126d9c3356a3d314be383a877b74a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df28e68fd126d9c3356a3d314be383a877b74a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df28e68fd126d9c3356a3d314be383a877b74a7"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "b5eb87a0fc2b1aa07a94aa2692a17aaf7113945d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87778ed097f24a0bf394c0255019547008c3479/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87778ed097f24a0bf394c0255019547008c3479/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d87778ed097f24a0bf394c0255019547008c3479", "patch": "@@ -1,3 +1,10 @@\n+2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (AARCH64_APPROX_MODE): Operate\n+\ton and produce uint64_ts rather than ints.\n+\t(AARCH64_APPROX_NONE, AARCH64_APPROX_ALL): Change to uint64_ts.\n+\t(cpu_approx_modes): Change the fields from unsigned int to uint64_t.\n+\n 2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Don't create"}, {"sha": "d6d668ea920b3e9016b21ce26a2bc3108a0cc728", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87778ed097f24a0bf394c0255019547008c3479/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87778ed097f24a0bf394c0255019547008c3479/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=d87778ed097f24a0bf394c0255019547008c3479", "patch": "@@ -212,20 +212,20 @@ struct cpu_branch_cost\n /* Control approximate alternatives to certain FP operators.  */\n #define AARCH64_APPROX_MODE(MODE) \\\n   ((MIN_MODE_FLOAT <= (MODE) && (MODE) <= MAX_MODE_FLOAT) \\\n-   ? (1 << ((MODE) - MIN_MODE_FLOAT)) \\\n+   ? ((uint64_t) 1 << ((MODE) - MIN_MODE_FLOAT)) \\\n    : (MIN_MODE_VECTOR_FLOAT <= (MODE) && (MODE) <= MAX_MODE_VECTOR_FLOAT) \\\n-     ? (1 << ((MODE) - MIN_MODE_VECTOR_FLOAT \\\n-\t      + MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) \\\n+     ? ((uint64_t) 1 << ((MODE) - MIN_MODE_VECTOR_FLOAT \\\n+\t\t\t + MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) \\\n      : (0))\n-#define AARCH64_APPROX_NONE (0)\n-#define AARCH64_APPROX_ALL (-1)\n+#define AARCH64_APPROX_NONE ((uint64_t) 0)\n+#define AARCH64_APPROX_ALL (~(uint64_t) 0)\n \n /* Allowed modes for approximations.  */\n struct cpu_approx_modes\n {\n-  const unsigned int division;\t\t/* Division.  */\n-  const unsigned int sqrt;\t\t/* Square root.  */\n-  const unsigned int recip_sqrt;\t/* Reciprocal square root.  */\n+  const uint64_t division;\t/* Division.  */\n+  const uint64_t sqrt;\t\t/* Square root.  */\n+  const uint64_t recip_sqrt;\t/* Reciprocal square root.  */\n };\n \n /* Cache prefetch settings for prefetch-loop-arrays.  */"}]}