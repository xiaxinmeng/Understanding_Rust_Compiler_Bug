{"sha": "d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzMGFlMTE1NjU3YWE0ZTRjNGRhYjZlNTZmM2MwOGQ0NGJjZGZhOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-19T20:55:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-19T20:55:27Z"}, "message": "tree-cfg.c (gimple_redirect_edge_and_branch): Change ERROR_MARK to GIMPLE_ERROR_MARK.\n\n./:\t* tree-cfg.c (gimple_redirect_edge_and_branch): Change ERROR_MARK\n\tto GIMPLE_ERROR_MARK.\n\n\t* c-typeck.c (build_conditional_expr): Add op1_original_type and\n\top2_original_type parameters.  Warn about using different enum\n\ttypes.\n\t* c-parser.c (c_parser_conditional_expression): Pass original\n\ttypes to build_conditional_expr.\n\t* c-tree.h (build_conditional_expr): Update declaration.\ntestsuite/:\n\t* gcc.dg/Wcxx-compat-18.c: New testcase.\n\nFrom-SVN: r148727", "tree": {"sha": "1e0b709ce5a70aacdf2f57b1ae07b31bd68bf02e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e0b709ce5a70aacdf2f57b1ae07b31bd68bf02e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/comments", "author": null, "committer": null, "parents": [{"sha": "502c4bb950b3f5f0b1089800123acadf595e12b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502c4bb950b3f5f0b1089800123acadf595e12b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502c4bb950b3f5f0b1089800123acadf595e12b4"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "6b76ed3452bbb815112ed2e70bfdd80b624c547a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -1,3 +1,15 @@\n+2009-06-19  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* tree-cfg.c (gimple_redirect_edge_and_branch): Change ERROR_MARK\n+\tto GIMPLE_ERROR_MARK.\n+\n+\t* c-typeck.c (build_conditional_expr): Add op1_original_type and\n+\top2_original_type parameters.  Warn about using different enum\n+\ttypes.\n+\t* c-parser.c (c_parser_conditional_expression): Pass original\n+\ttypes to build_conditional_expr.\n+\t* c-tree.h (build_conditional_expr): Update declaration.\n+\n 2009-06-19  Ian Lance Taylor  <iant@google.com>\n \n \t* config/i386/i386.c (ix86_function_specific_save): Test that"}, {"sha": "29e399fcdc135b504e3b4ead964cd78932ca6037", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -4597,7 +4597,8 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n   c_inhibit_evaluation_warnings -= cond.value == truthvalue_true_node;\n   ret.value = build_conditional_expr (colon_loc, cond.value,\n \t\t\t\t      cond.original_code == C_MAYBE_CONST_EXPR,\n-\t\t\t\t      exp1.value, exp2.value);\n+\t\t\t\t      exp1.value, exp1.original_type,\n+\t\t\t\t      exp2.value, exp2.original_type);\n   ret.original_code = ERROR_MARK;\n   if (exp1.value == error_mark_node || exp2.value == error_mark_node)\n     ret.original_type = NULL;"}, {"sha": "c01cc664fe88aa0c358e7baae50c4a75853d02b6", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -556,7 +556,8 @@ extern struct c_expr parser_build_unary_op (location_t, enum tree_code,\n extern struct c_expr parser_build_binary_op (location_t, \n     \t\t\t\t\t     enum tree_code, struct c_expr,\n \t\t\t\t\t     struct c_expr);\n-extern tree build_conditional_expr (location_t, tree, bool, tree, tree);\n+extern tree build_conditional_expr (location_t, tree, bool, tree, tree,\n+\t\t\t\t    tree, tree);\n extern tree build_compound_expr (location_t, tree, tree);\n extern tree c_cast_expr (location_t, struct c_type_name *, tree);\n extern tree build_c_cast (location_t, tree, tree);"}, {"sha": "df1e1718405e160f63aab878094f6fb6355ddca0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -3770,7 +3770,8 @@ c_mark_addressable (tree exp)\n \n tree\n build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n-\t\t\ttree op1, tree op2)\n+\t\t\ttree op1, tree op1_original_type, tree op2,\n+\t\t\ttree op2_original_type)\n {\n   tree type1;\n   tree type2;\n@@ -3843,6 +3844,20 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t}\n     }\n \n+  if (warn_cxx_compat)\n+    {\n+      tree t1 = op1_original_type ? op1_original_type : TREE_TYPE (orig_op1);\n+      tree t2 = op2_original_type ? op2_original_type : TREE_TYPE (orig_op2);\n+\n+      if (TREE_CODE (t1) == ENUMERAL_TYPE\n+\t  && TREE_CODE (t2) == ENUMERAL_TYPE\n+\t  && TYPE_MAIN_VARIANT (t1) != TYPE_MAIN_VARIANT (t2))\n+\twarning_at (colon_loc, OPT_Wc___compat,\n+\t\t    (\"different enum types in conditional is \"\n+\t\t     \"invalid in C++: %qT vs %qT\"),\n+\t\t    t1, t2);\n+    }\n+\n   /* Quickly detect the usual case where op1 and op2 have the same type\n      after promotion.  */\n   if (TYPE_MAIN_VARIANT (type1) == TYPE_MAIN_VARIANT (type2))"}, {"sha": "4a1a8d3d11503582779cf1fa3e98b922cccc5193", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -1,3 +1,7 @@\n+2009-06-19  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-18.c: New testcase.\n+\n 2009-06-19  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/execute/20090618-1.c: New testcase."}, {"sha": "9ae2d770a4ce6dc07834e307ebf8b3e13b41bf87", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-18.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-18.c?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+enum E1 { A };\n+enum E2 { B };\n+int\n+f1 (int i)\n+{\n+  return (int) (i ? A : B);\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+}\n+extern enum E1 f2();\n+int\n+f3 (int i)\n+{\n+  return (int) (i ? f2 () : B);\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+}"}, {"sha": "4c7c0db12b6947e54c6c8a41e2d6a88ef7772965", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d130ae115657aa4e4c4dab6e56f3c08d44bcdfa8", "patch": "@@ -4947,7 +4947,7 @@ gimple_redirect_edge_and_branch (edge e, basic_block dest)\n   gsi = gsi_last_bb (bb);\n   stmt = gsi_end_p (gsi) ? NULL : gsi_stmt (gsi);\n \n-  switch (stmt ? gimple_code (stmt) : ERROR_MARK)\n+  switch (stmt ? gimple_code (stmt) : GIMPLE_ERROR_MARK)\n     {\n     case GIMPLE_COND:\n       /* For COND_EXPR, we only need to redirect the edge.  */"}]}