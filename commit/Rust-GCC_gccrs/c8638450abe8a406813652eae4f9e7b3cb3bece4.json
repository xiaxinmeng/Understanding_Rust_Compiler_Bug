{"sha": "c8638450abe8a406813652eae4f9e7b3cb3bece4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2Mzg0NTBhYmU4YTQwNjgxMzY1MmVhZTRmOWU3YjNjYjNiZWNlNA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2017-06-01T12:14:29Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2017-06-01T12:14:29Z"}, "message": "[PR 80898] Propagate grp_write from disqualified SRA candidates\n\n2017-06-01  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/80898\n\t* tree-sra.c (process_subtree_disqualification): Removed.\n\t(disqualify_candidate): Do not acll\n\tprocess_subtree_disqualification.\n\t(subtree_mark_written_and_enqueue): New function.\n\t(propagate_all_subaccesses): Set grp_write of LHS subtree if the\n\tRHS has been disqualified and re-queue LHS if necessary.  Apart\n\tfrom that, ignore disqualified RHS.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr80898.c: New test.\n\t* gcc.dg/tree-ssa/pr80898-2.c: Likewise.\n\nFrom-SVN: r248790", "tree": {"sha": "4fddb5aa4bc1185eb3bc05e4fc510a14a8d1b53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fddb5aa4bc1185eb3bc05e4fc510a14a8d1b53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8638450abe8a406813652eae4f9e7b3cb3bece4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8638450abe8a406813652eae4f9e7b3cb3bece4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8638450abe8a406813652eae4f9e7b3cb3bece4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8638450abe8a406813652eae4f9e7b3cb3bece4/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ba66aee9e94f1bfb82fbebac661ad60cbce1176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba66aee9e94f1bfb82fbebac661ad60cbce1176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba66aee9e94f1bfb82fbebac661ad60cbce1176"}], "stats": {"total": 164, "additions": 143, "deletions": 21}, "files": [{"sha": "81d8337e05040ce1bb93b4cd9f28945d918d5ed8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8638450abe8a406813652eae4f9e7b3cb3bece4", "patch": "@@ -1,3 +1,14 @@\n+2017-06-01  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/80898\n+\t* tree-sra.c (process_subtree_disqualification): Removed.\n+\t(disqualify_candidate): Do not acll\n+\tprocess_subtree_disqualification.\n+\t(subtree_mark_written_and_enqueue): New function.\n+\t(propagate_all_subaccesses): Set grp_write of LHS subtree if the\n+\tRHS has been disqualified and re-queue LHS if necessary.  Apart\n+\tfrom that, ignore disqualified RHS.\n+\n 2017-06-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_emit_epilogue): Disable early return"}, {"sha": "e398b31644a176b49fee1b83f9470c860e2f7a36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8638450abe8a406813652eae4f9e7b3cb3bece4", "patch": "@@ -1,3 +1,9 @@\n+2017-06-01  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/80898\n+\t* gcc.dg/tree-ssa/pr80898.c: New test.\n+\t* gcc.dg/tree-ssa/pr80898-2.c: Likewise.\n+\n 2017-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/80896"}, {"sha": "cb4799c5ced211b6b5089d0f29526fa4e9558ce6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr80898-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80898-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80898-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80898-2.c?ref=c8638450abe8a406813652eae4f9e7b3cb3bece4", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+struct S0\n+{\n+  unsigned a : 15;\n+  int b;\n+  int c;\n+};\n+\n+struct S1\n+{\n+  struct S0 s0;\n+  int e;\n+};\n+\n+struct Z\n+{\n+  char c;\n+  int z;\n+} __attribute__((packed));\n+\n+union U\n+{\n+  struct S1 s1;\n+  struct Z z;\n+};\n+\n+\n+int __attribute__((noinline, noclone))\n+return_zero (void)\n+{\n+  return 0;\n+}\n+\n+volatile union U gu;\n+struct S0 gs;\n+\n+int __attribute__((noinline, noclone))\n+check_outcome ()\n+{\n+  if (gs.a != 6\n+      || gs.b != 80000)\n+    __builtin_abort ();\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  union U u;\n+  struct S1 m;\n+  struct S0 l;\n+\n+  if (return_zero ())\n+    u.z.z = 20000;\n+  else\n+    {\n+      u.s1.s0.a = 6;\n+      u.s1.s0.b = 80000;\n+      u.s1.e = 2;\n+\n+      m = u.s1;\n+      m.s0.c = 0;\n+      l = m.s0;\n+      gs = l;\n+    }\n+\n+  gu = u;\n+  check_outcome ();\n+  return 0;\n+}"}, {"sha": "ed88f2cbd1a708a67ab635b90f7de4537fa530ff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr80898.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80898.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80898.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80898.c?ref=c8638450abe8a406813652eae4f9e7b3cb3bece4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+struct S0 {\n+  int f0 : 24;\n+  int f1;\n+  int f74;\n+} a, *c = &a;\n+struct S0 fn1() {\n+  struct S0 b = {4, 3};\n+  return b;\n+}\n+\n+int main() {\n+  *c = fn1();\n+\n+  if (a.f1 != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "f25818f44814f043e647a8c96372139fd0987588", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8638450abe8a406813652eae4f9e7b3cb3bece4/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c8638450abe8a406813652eae4f9e7b3cb3bece4", "patch": "@@ -694,21 +694,9 @@ static bool constant_decl_p (tree decl)\n   return VAR_P (decl) && DECL_IN_CONSTANT_POOL (decl);\n }\n \n-\n-/* Mark LHS of assign links out of ACCESS and its children as written to.  */\n-\n-static void\n-process_subtree_disqualification (struct access *access)\n-{\n-  struct access *child;\n-  for (struct assign_link *link = access->first_link; link; link = link->next)\n-    link->lacc->grp_write = true;\n-  for (child = access->first_child; child; child = child->next_sibling)\n-    process_subtree_disqualification (child);\n-}\n-\n /* Remove DECL from candidates for SRA and write REASON to the dump file if\n    there is one.  */\n+\n static void\n disqualify_candidate (tree decl, const char *reason)\n {\n@@ -723,13 +711,6 @@ disqualify_candidate (tree decl, const char *reason)\n       print_generic_expr (dump_file, decl);\n       fprintf (dump_file, \" - %s\\n\", reason);\n     }\n-\n-  struct access *access = get_first_repr_for_decl (decl);\n-  while (access)\n-    {\n-      process_subtree_disqualification (access);\n-      access = access->next_grp;\n-    }\n }\n \n /* Return true iff the type contains a field or an element which does not allow\n@@ -2679,6 +2660,26 @@ propagate_subaccesses_across_link (struct access *lacc, struct access *racc)\n   return ret;\n }\n \n+/* Beginning with ACCESS, traverse its whole access subtree and mark all\n+   sub-trees as written to.  If any of them has not been marked so previously\n+   and has assignment links leading from it, re-enqueue it.  */\n+\n+static void\n+subtree_mark_written_and_enqueue (struct access *access)\n+{\n+  if (access->grp_write)\n+    return;\n+  access->grp_write = true;\n+  if (access->first_link)\n+    add_access_to_work_queue (access);\n+\n+  struct access *child;\n+  for (child = access->first_child; child; child = child->next_sibling)\n+    subtree_mark_written_and_enqueue (child);\n+}\n+\n+\n+\n /* Propagate all subaccesses across assignment links.  */\n \n static void\n@@ -2698,7 +2699,20 @@ propagate_all_subaccesses (void)\n \t  if (!bitmap_bit_p (candidate_bitmap, DECL_UID (lacc->base)))\n \t    continue;\n \t  lacc = lacc->group_representative;\n-\t  if (propagate_subaccesses_across_link (lacc, racc))\n+\n+\t  bool reque_parents = false;\n+\t  if (!bitmap_bit_p (candidate_bitmap, DECL_UID (racc->base)))\n+\t    {\n+\t      if (!lacc->grp_write)\n+\t\t{\n+\t\t  subtree_mark_written_and_enqueue (lacc);\n+\t\t  reque_parents = true;\n+\t\t}\n+\t    }\n+\t  else if (propagate_subaccesses_across_link (lacc, racc))\n+\t    reque_parents = true;\n+\n+\t  if (reque_parents)\n \t    do\n \t      {\n \t\tif (lacc->first_link)"}]}