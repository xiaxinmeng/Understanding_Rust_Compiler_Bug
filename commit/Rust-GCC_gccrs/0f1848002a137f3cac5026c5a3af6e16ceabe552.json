{"sha": "0f1848002a137f3cac5026c5a3af6e16ceabe552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxODQ4MDAyYTEzN2YzY2FjNTAyNmM1YTNhZjZlMTZjZWFiZTU1Mg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-10-29T20:34:43Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-10-29T20:34:43Z"}, "message": "PR c++/91548 - fix detecting modifying const objects for ARRAY_REF.\n\nThis fixes a bogus \"modifying a const object\" error for an array that actually\nisn't declared const.  The problem was how I handled ARRAY_REFs here; we\nshouldn't look at the ARRAY_REF itself, but at the array its accessing.\n\n\t* constexpr.c (cxx_eval_store_expression): Don't call\n\tmodifying_const_object_p for ARRAY_REF.\n\n\t* g++.dg/cpp1y/constexpr-tracking-const15.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const16.C: New test.\n\t* g++.dg/cpp1z/constexpr-tracking-const1.C: New test.\n\nFrom-SVN: r277591", "tree": {"sha": "4af514ce33b47850b73ec43906ac4a386d66cae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4af514ce33b47850b73ec43906ac4a386d66cae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f1848002a137f3cac5026c5a3af6e16ceabe552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f1848002a137f3cac5026c5a3af6e16ceabe552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f1848002a137f3cac5026c5a3af6e16ceabe552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f1848002a137f3cac5026c5a3af6e16ceabe552/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cd96bad607c5d6a2302e97ab6f749edb85b82ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd96bad607c5d6a2302e97ab6f749edb85b82ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd96bad607c5d6a2302e97ab6f749edb85b82ed"}], "stats": {"total": 94, "additions": 90, "deletions": 4}, "files": [{"sha": "09d1c18e8083ed9777e04094badf953ade146829", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f1848002a137f3cac5026c5a3af6e16ceabe552", "patch": "@@ -1,3 +1,9 @@\n+2019-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91548 - fix detecting modifying const objects for ARRAY_REF.\n+\t* constexpr.c (cxx_eval_store_expression): Don't call\n+\tmodifying_const_object_p for ARRAY_REF.\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cp-objcp-common.h (cxx_simulate_enum_decl): Declare."}, {"sha": "6b4e854e35c31a94d4104edc62fa589799db3acb", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0f1848002a137f3cac5026c5a3af6e16ceabe552", "patch": "@@ -3910,17 +3910,22 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t    tree elt = TREE_OPERAND (probe, 1);\n \t    if (TREE_CODE (elt) == FIELD_DECL && DECL_MUTABLE_P (elt))\n \t      mutable_p = true;\n-\t    if (evaluated\n-\t\t&& modifying_const_object_p (TREE_CODE (t), probe, mutable_p)\n-\t\t&& const_object_being_modified == NULL_TREE)\n-\t      const_object_being_modified = probe;\n \t    if (TREE_CODE (probe) == ARRAY_REF)\n \t      {\n \t\telt = eval_and_check_array_index (ctx, probe, false,\n \t\t\t\t\t\t  non_constant_p, overflow_p);\n \t\tif (*non_constant_p)\n \t\t  return t;\n \t      }\n+\t    /* We don't check modifying_const_object_p for ARRAY_REFs.  Given\n+\t       \"int a[10]\", an ARRAY_REF \"a[2]\" can be \"const int\", even though\n+\t       the array isn't const.  Instead, check \"a\" in the next iteration;\n+\t       that will detect modifying \"const int a[10]\".  */\n+\t    else if (evaluated\n+\t\t     && modifying_const_object_p (TREE_CODE (t), probe,\n+\t\t\t\t\t\t  mutable_p)\n+\t\t     && const_object_being_modified == NULL_TREE)\n+\t      const_object_being_modified = probe;\n \t    vec_safe_push (refs, elt);\n \t    vec_safe_push (refs, TREE_TYPE (probe));\n \t    probe = ob;"}, {"sha": "cffd59217720bf96a26bcf5276bade8d558f2c0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f1848002a137f3cac5026c5a3af6e16ceabe552", "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91548 - fix detecting modifying const objects for ARRAY_REF.\n+\t* g++.dg/cpp1y/constexpr-tracking-const15.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const16.C: New test.\n+\t* g++.dg/cpp1z/constexpr-tracking-const1.C: New test.\n+\n 2019-10-29  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/92144"}, {"sha": "db1b2bb7ea675ed5cc4da01027228d640d0c00b6", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const15.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const15.C?ref=0f1848002a137f3cac5026c5a3af6e16ceabe552", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/91548 - fix detecting modifying const objects for ARRAY_REF.\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int& impl(const int (&array)[10], int index) {\n+  return const_cast<int&>(array[index]);\n+}\n+\n+struct A {\n+  constexpr int& operator[](int i) { return impl(elems, i); }\n+  int elems[10];\n+};\n+\n+constexpr bool\n+f()\n+{\n+  A arr = {};\n+  arr[2] = true;\n+  return false;\n+}\n+\n+constexpr bool b = f();"}, {"sha": "5a5b92bc8ccb0e359b18bfd5971b10ce496b8dfe", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const16.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const16.C?ref=0f1848002a137f3cac5026c5a3af6e16ceabe552", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/91548 - fix detecting modifying const objects for ARRAY_REF.\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int& impl(const int (&array)[10], int index) {\n+  return const_cast<int&>(array[index]);\n+}\n+\n+struct A {\n+  constexpr int& operator[](int i) { return impl(elems, i); }\n+  const int elems[10];\n+};\n+\n+constexpr bool\n+f()\n+{\n+  A arr = {};\n+  arr[2] = 1; // { dg-error \"modifying a const object\" }\n+  return false;\n+}\n+\n+constexpr bool b = f(); // { dg-message \"in .constexpr. expansion of \" }\n+// { dg-message \"originally declared\" \"\" { target *-*-* } .-1 }"}, {"sha": "a3856b8e7eca41eb2fde929970ad351f7b4b3a84", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-tracking-const1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-tracking-const1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1848002a137f3cac5026c5a3af6e16ceabe552/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-tracking-const1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-tracking-const1.C?ref=0f1848002a137f3cac5026c5a3af6e16ceabe552", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/91548 - fix detecting modifying const objects for ARRAY_REF.\n+// { dg-do compile { target c++17 } }\n+\n+using size_t = decltype(sizeof(0));\n+\n+template <typename T, size_t N>\n+constexpr T& impl(T const (&array)[N], size_t index) {\n+    return const_cast<T&>(array[index]);\n+}\n+\n+template <typename T, size_t N>\n+struct my_array {\n+    constexpr T& operator[](size_t i) { return impl(elems, i); }\n+    constexpr T const& operator[](size_t i) const { return elems[i]; }\n+    T elems[N];\n+};\n+\n+bool f(int i) {\n+    static constexpr auto table = []() {\n+        my_array<bool, 256> arr = {};\n+        arr[2] = true;\n+        return arr;\n+    }();\n+    return table[i];\n+}"}]}