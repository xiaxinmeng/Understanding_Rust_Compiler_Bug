{"sha": "9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwNGY1ZmI4YmMwOWRmNjNjNTFkMmUyZDBmYTRkNGFiZGRkNWYyYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-12T18:32:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-12T18:32:18Z"}, "message": "diagnostic.c (diagnostic_for_decl): Take a diagnostic_context argument.\n\n\t* diagnostic.c (diagnostic_for_decl): Take a\n\tdiagnostic_context argument.  Restructure to be consistent\n\twith diagnostic_report_diagnostic.\n\t(diagnostic_count_diagnostic): Now static.  Take a\n\tdiagnostic_info argument, not just a diagnostic_t.  Some code\n\tmoved here from internal_error.  Move a case label for\n\tclarity.\n\t(diagnostic_action_after_output): New function.  Code moved\n\there from internal_error and fatal_error.\n\t(bug_report_request): New #define so that this text appears in\n\tonly one place.\n\t(diagnostic_report_diagnostic): Update to match changes to\n\tdiagnostic_count_diagnostic.  Call diagnostic_action_after_output.\n\t(diagnostic_set_info): Call gettext here.\n\n\t(pedwarn): Update comment.  Don't call gettext here.\n\t(sorry): Use report_diagnostic.  Don't call gettext here.\n\t(fatal_error): Remove final fnotice and exit, but call\n\treal_abort to prevent warnings about noreturn function returning.\n\t(internal_error): Likewise.  Don't do ICE suppression here nor\n\tcall context->internal_error.\n\t(warning_with_decl): Suppress for decls in system headers.\n\tAdjust call to diagnostic_for_decl.\n\t(pedwarn_with_decl): Likewise.\n\t(error_with_decl): Adjust call to diagnostic_for_decl.\n\t(error_recursion): Use bug_report_request.\n\n\t* diagnostic.h: Remove prototype of diagnostic_count_diagnostic.\n\t* objc/objc-act.c (error_with_ivar, warn_with_method): Don't call\n\tdiagnostic_count_diagnostic.\nf:\n\t* bad.c: Don't call diagnostic_count_diagnostic.\n\nFrom-SVN: r66728", "tree": {"sha": "4dbeae77a93be9438a393a37aaff294b1a1f9abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dbeae77a93be9438a393a37aaff294b1a1f9abf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/comments", "author": null, "committer": null, "parents": [{"sha": "5560b019e4e1d6f86fe4ad1166e3a0c16fff699a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5560b019e4e1d6f86fe4ad1166e3a0c16fff699a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5560b019e4e1d6f86fe4ad1166e3a0c16fff699a"}], "stats": {"total": 274, "additions": 175, "deletions": 99}, "files": [{"sha": "3b612532ef51a069cd047390963a6fd6d6768ef8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "patch": "@@ -1,3 +1,36 @@\n+2003-05-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* diagnostic.c (diagnostic_for_decl): Take a\n+\tdiagnostic_context argument.  Restructure to be consistent\n+\twith diagnostic_report_diagnostic.\n+\t(diagnostic_count_diagnostic): Now static.  Take a\n+\tdiagnostic_info argument, not just a diagnostic_t.  Some code\n+\tmoved here from internal_error.  Move a case label for\n+\tclarity.\n+\t(diagnostic_action_after_output): New function.  Code moved\n+\there from internal_error and fatal_error.\n+\t(bug_report_request): New #define so that this text appears in\n+\tonly one place.\n+\t(diagnostic_report_diagnostic): Update to match changes to\n+\tdiagnostic_count_diagnostic.  Call diagnostic_action_after_output.\n+\t(diagnostic_set_info): Call gettext here.\n+\n+\t(pedwarn): Update comment.  Don't call gettext here.\n+\t(sorry): Use report_diagnostic.  Don't call gettext here.\n+\t(fatal_error): Remove final fnotice and exit, but call\n+\treal_abort to prevent warnings about noreturn function returning.\n+\t(internal_error): Likewise.  Don't do ICE suppression here nor\n+\tcall context->internal_error.\n+\t(warning_with_decl): Suppress for decls in system headers.\n+\tAdjust call to diagnostic_for_decl.\n+\t(pedwarn_with_decl): Likewise.\n+\t(error_with_decl): Adjust call to diagnostic_for_decl.\n+\t(error_recursion): Use bug_report_request.\n+\n+\t* diagnostic.h: Remove prototype of diagnostic_count_diagnostic.\n+\t* objc/objc-act.c (error_with_ivar, warn_with_method): Don't call\n+\tdiagnostic_count_diagnostic.\n+\n 2003-05-12  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa64-hpux.h (ASM_OUTPUT_ALIGNED_COMMON): Correct last patch.\n@@ -107,15 +140,15 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tasm_emit_uninitialized, assemble_zeros, assemble_static_space):\n \tHOST_WIDE_INT argument\n \n-2003-05-10  Steven Bosscher  <steven@gcc.gnu.org> \n+2003-05-10  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cgraphunit.c (cgraph_create_edges): Drop walk_tree in\n \tfavor of walk_tree_without_duplicates.  Add comments.\n \n 2003-05-12  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* alloc-pool.h (ALLOC_POOL_ID_TYPE): New type.\n-\t(struct alloc_pool_def): New element 'id'. \n+\t(struct alloc_pool_def): New element 'id'.\n \t* alloc-pool.c (fancy_abort): Extern function prototype.\n \t(abort): Macro which uses fancy_abort.\n \t(struct allocation_object_def): New structure.\n@@ -140,7 +173,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tcomponents, components_notype): Build list in reverse order.\n \t(enumlist): Clarify docs.  Use TREE_CHAIN not chainon.\n \n-\t* tree.c (chainon): Special case op2 null as well. \n+\t* tree.c (chainon): Special case op2 null as well.\n \tReorg for clarity.\n \n 2003-05-11  Roger Sayle  <roger@eyesopen.com>\n@@ -156,7 +189,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-05-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-\t* Makefile.in (out_object_file): Don't set -Wno-error for ${cpu}.o. \n+\t* Makefile.in (out_object_file): Don't set -Wno-error for ${cpu}.o.\n \n \t* sparc.c (print_operand): Fix uninitialized warning.\n \n@@ -214,7 +247,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* varasm.c (copy_constant, case VIEW_CONVERT_EXPR): New case.\n \n 2003-05-11  Bruno Haible  <bruno@clisp.org>\n-\t\n+\n \t* cppfiles.c (find_or_create_entry): Preserve errno.\n \n 2003-05-11  Neil Booth  <neil@cat.daikokuya.co.uk>"}, {"sha": "92e749f0b94ea52094d0617635f7238029c003bc", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 129, "deletions": 80, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "patch": "@@ -54,7 +54,8 @@ static void output_indent PARAMS ((output_buffer *));\n static char *build_message_string PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1;\n static void format_with_decl PARAMS ((output_buffer *, text_info *, tree));\n-static void diagnostic_for_decl PARAMS ((diagnostic_info *, tree));\n+static void diagnostic_for_decl PARAMS ((diagnostic_context *,\n+\t\t\t\t\t diagnostic_info *, tree));\n static void set_real_maximum_length PARAMS ((output_buffer *));\n \n static void output_unsigned_decimal PARAMS ((output_buffer *, unsigned int));\n@@ -79,6 +80,10 @@ static void default_diagnostic_finalizer PARAMS ((diagnostic_context *,\n \n static void error_recursion PARAMS ((diagnostic_context *)) ATTRIBUTE_NORETURN;\n static bool text_specifies_location PARAMS ((text_info *, location_t *));\n+static bool diagnostic_count_diagnostic PARAMS ((diagnostic_context *,\n+                                                 diagnostic_info *));\n+static void diagnostic_action_after_output PARAMS ((diagnostic_context *,\n+\t\t\t\t\t\t    diagnostic_info *));\n static void real_abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n extern int rtl_dump_and_exit;\n@@ -88,6 +93,12 @@ extern int warnings_are_errors;\n static diagnostic_context global_diagnostic_context;\n diagnostic_context *global_dc = &global_diagnostic_context;\n \n+/* Boilerplate text used in two locations.  */\n+#define bug_report_request \\\n+\"Please submit a full bug report,\\n\\\n+with preprocessed source if appropriate.\\n\\\n+See %s for instructions.\\n\"\n+\n \f\n /* Subroutine of output_set_maximum_length.  Set up BUFFER's\n    internal maximum characters per line.  */\n@@ -805,7 +816,7 @@ diagnostic_set_info (diagnostic, msgid, args, file, line, kind)\n      int line;\n      diagnostic_t kind;\n {\n-  diagnostic->message.format_spec = msgid;\n+  diagnostic->message.format_spec = _(msgid);\n   diagnostic->message.args_ptr = args;\n   /* If the diagnostic message doesn't specify a location,\n      use FILE and LINE.  */\n@@ -850,46 +861,108 @@ diagnostic_flush_buffer (context)\n }\n \n /* Count a diagnostic.  Return true if the message should be printed.  */\n-bool\n-diagnostic_count_diagnostic (context, kind)\n+static bool\n+diagnostic_count_diagnostic (context, diagnostic)\n     diagnostic_context *context;\n-    diagnostic_t kind;\n+    diagnostic_info *diagnostic;\n {\n+  diagnostic_t kind = diagnostic->kind;\n   switch (kind)\n     {\n     default:\n       abort();\n       break;\n \n-    case DK_FATAL: case DK_ICE: case DK_SORRY:\n+    case DK_ICE:\n+#ifndef ENABLE_CHECKING\n+      /* When not checking, ICEs are converted to fatal errors when an\n+\t error has already occurred.  This is counteracted by\n+\t abort_on_error.  */\n+      if ((diagnostic_kind_count (context, DK_ERROR) > 0\n+\t   || diagnostic_kind_count (context, DK_SORRY) > 0)\n+\t  && !context->abort_on_error)\n+\t{\n+\t  fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n+\t\t   diagnostic->location.file, diagnostic->location.line);\n+\t  exit (FATAL_EXIT_CODE);\n+\t}\n+#endif\n+      if (context->internal_error)\n+\t(*context->internal_error) (diagnostic->message.format_spec,\n+\t\t\t\t    diagnostic->message.args_ptr);\n+      /* fall through */\n+\n+    case DK_FATAL: case DK_SORRY:\n     case DK_ANACHRONISM: case DK_NOTE:\n       ++diagnostic_kind_count (context, kind);\n       break;\n \n     case DK_WARNING:\n       if (!diagnostic_report_warnings_p ())\n         return false;\n-      else if (!warnings_are_errors)\n+\n+      if (!warnings_are_errors)\n         {\n           ++diagnostic_kind_count (context, DK_WARNING);\n           break;\n         }\n-      /* else fall through.  */\n \n-    case DK_ERROR:\n-      if (kind == DK_WARNING && context->warnings_are_errors_message)\n+      if (context->warnings_are_errors_message)\n         {\n \t  output_verbatim (&context->buffer,\n                            \"%s: warnings being treated as errors\\n\", progname);\n           context->warnings_are_errors_message = false;\n         }\n+\n+      /* and fall through */\n+    case DK_ERROR:\n       ++diagnostic_kind_count (context, DK_ERROR);\n       break;\n     }\n \n   return true;\n }\n \n+/* Take any action which is expected to happen after the diagnostic\n+   is written out.  This function does not always return.  */\n+static void\n+diagnostic_action_after_output (context, diagnostic)\n+     diagnostic_context *context;\n+     diagnostic_info *diagnostic;\n+{\n+  switch (diagnostic->kind)\n+    {\n+    case DK_DEBUG:\n+    case DK_NOTE:\n+    case DK_ANACHRONISM:\n+    case DK_WARNING:\n+      break;\n+\n+    case DK_ERROR:\n+    case DK_SORRY:\n+      if (context->abort_on_error)\n+\treal_abort ();\n+      break;\n+\n+    case DK_ICE:\n+      if (context->abort_on_error)\n+\treal_abort ();\n+\n+      fnotice (stderr, bug_report_request, bug_report_url);\n+      exit (FATAL_EXIT_CODE);\n+\n+    case DK_FATAL:\n+      if (context->abort_on_error)\n+\treal_abort ();\n+\n+      fnotice (stderr, \"compilation terminated.\\n\");\n+      exit (FATAL_EXIT_CODE);\n+\n+    default:\n+      real_abort ();\n+    }\n+}\n+\n /* Called when the start of a function definition is parsed,\n    this function prints on stderr the name of the function.  */\n void\n@@ -1016,40 +1089,40 @@ diagnostic_report_diagnostic (context, diagnostic)\n   if (context->lock++)\n     error_recursion (context);\n \n-  if (diagnostic_count_diagnostic (context, diagnostic->kind))\n+  if (diagnostic_count_diagnostic (context, diagnostic))\n     {\n       (*diagnostic_starter (context)) (context, diagnostic);\n       output_format (&context->buffer, &diagnostic->message);\n       (*diagnostic_finalizer (context)) (context, diagnostic);\n       output_flush (&context->buffer);\n+      diagnostic_action_after_output (context, diagnostic);\n     }\n \n-  if (context->abort_on_error && diagnostic->kind <= DK_ERROR)\n-    real_abort();\n-  --context->lock;\n+  context->lock--;\n }\n \n /* Report a diagnostic MESSAGE at the declaration DECL.\n    MSG is a format string which uses %s to substitute the declaration\n    name; subsequent substitutions are a la output_format.  */\n static void\n-diagnostic_for_decl (diagnostic, decl)\n+diagnostic_for_decl (context, diagnostic, decl)\n+     diagnostic_context *context;\n      diagnostic_info *diagnostic;\n      tree decl;\n {\n-  if (global_dc->lock++)\n-    error_recursion (global_dc);\n+  if (context->lock++)\n+    error_recursion (context);\n \n-  if (diagnostic_count_diagnostic (global_dc, diagnostic->kind))\n+  if (diagnostic_count_diagnostic (context, diagnostic))\n     {\n-      diagnostic_report_current_function (global_dc);\n-      output_set_prefix\n-\t(&global_dc->buffer, diagnostic_build_prefix (diagnostic));\n-      format_with_decl (&global_dc->buffer, &diagnostic->message, decl);\n-      output_flush (&global_dc->buffer);\n-      output_destroy_prefix (&global_dc->buffer);\n+      (*diagnostic_starter (context)) (context, diagnostic);\n+      format_with_decl (&context->buffer, &diagnostic->message, decl);\n+      (*diagnostic_finalizer (context)) (context, diagnostic);\n+      output_flush (&context->buffer);\n+      diagnostic_action_after_output (context, diagnostic);\n     }\n-  global_dc->lock--;\n+\n+  context->lock--;\n }\n \n /* Given a partial pathname as input, return another pathname that\n@@ -1148,23 +1221,22 @@ warning VPARAMS ((const char *msgid, ...))\n   VA_CLOSE (ap);\n }\n \n-/* A \"pedantic\" warning.  Use this for code which triggers a\n-   diagnostic which is required by the relevant language\n-   specification, but which is considered unhelpful (i.e. there isn't\n-   anything *really* wrong with the construct in the language as she\n-   is spoke).  It is a normal warning unless -pedantic-errors is\n-   applied, which turns it into an error.  Note that pedwarn-s still\n-   happen if -pedantic is not given; you must write\n-   \"if (pedantic) pedwarn (...)\" to get a warning enabled only under\n-   -pedantic.  All such warnings should, however, use pedwarn.  */\n+/* A \"pedantic\" warning: issues a warning unless -pedantic-errors was\n+   given on the command line, in which case it issues an error.  Use\n+   this for diagnostics required by the relevant language standard,\n+   if you have chosen not to make them errors.\n+\n+   Note that these diagnostics are issued independent of the setting\n+   of the -pedantic command-line switch.  To get a warning enabled\n+   only with that switch, write \"if (pedantic) pedwarn (...);\"  */\n void\n pedwarn VPARAMS ((const char *msgid, ...))\n {\n   diagnostic_info diagnostic;\n   VA_OPEN (ap, msgid);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  diagnostic_set_info (&diagnostic, _(msgid), &ap, input_filename, input_line,\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        pedantic_error_kind ());\n   report_diagnostic (&diagnostic);\n   VA_CLOSE (ap);\n@@ -1197,14 +1269,9 @@ sorry VPARAMS ((const char *msgid, ...))\n   VA_OPEN (ap, msgid);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  ++sorrycount;\n-  diagnostic_set_info (&diagnostic, _(msgid), &ap,\n-                       input_filename, input_line, DK_SORRY);\n-\n-  output_set_prefix\n-    (&global_dc->buffer, diagnostic_build_prefix (&diagnostic));\n-  output_format (&global_dc->buffer, &diagnostic.message);\n-  output_flush (&global_dc->buffer);\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n+\t\t       DK_SORRY);\n+  report_diagnostic (&diagnostic);\n   VA_CLOSE (ap);\n }\n \n@@ -1224,8 +1291,8 @@ fatal_error VPARAMS ((const char *msgid, ...))\n   report_diagnostic (&diagnostic);\n   VA_CLOSE (ap);\n \n-  fnotice (stderr, \"compilation terminated.\\n\");\n-  exit (FATAL_EXIT_CODE);\n+  /* NOTREACHED */\n+  real_abort ();\n }\n \n /* An internal consistency check has failed.  We make no attempt to\n@@ -1240,31 +1307,13 @@ internal_error VPARAMS ((const char *msgid, ...))\n   VA_OPEN (ap, msgid);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  if (global_dc->lock)\n-    error_recursion (global_dc);\n-\n-#ifndef ENABLE_CHECKING\n-  if (errorcount > 0 || sorrycount > 0)\n-    {\n-      fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n-\t       input_filename, input_line);\n-      exit (FATAL_EXIT_CODE);\n-    }\n-#endif\n-\n-  if (global_dc->internal_error != 0)\n-    (*global_dc->internal_error) (_(msgid), &ap);\n-\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        DK_ICE);\n   report_diagnostic (&diagnostic);\n   VA_CLOSE (ap);\n \n-  fnotice (stderr,\n-\"Please submit a full bug report,\\n\\\n-with preprocessed source if appropriate.\\n\\\n-See %s for instructions.\\n\", bug_report_url);\n-  exit (FATAL_EXIT_CODE);\n+  /* NOTREACHED */\n+  real_abort ();\n }\n \f\n /* Variants of some of the above, which make reference to a particular\n@@ -1278,10 +1327,15 @@ warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   VA_FIXEDARG (ap, tree, decl);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n+  /* Do not issue a warning about a decl which came from a system header,\n+     unless -Wsystem-headers.  */\n+  if (DECL_IN_SYSTEM_HEADER (decl) && !warn_system_headers)\n+    return;\n+\n   diagnostic_set_info (&diagnostic, msgid, &ap,\n                        DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n                        DK_WARNING);\n-  diagnostic_for_decl (&diagnostic, decl);\n+  diagnostic_for_decl (global_dc, &diagnostic, decl);\n   VA_CLOSE (ap);\n }\n \n@@ -1293,18 +1347,16 @@ pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   VA_FIXEDARG (ap, tree, decl);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  diagnostic_set_info (&diagnostic, _(msgid), &ap,\n+  /* Do not issue a warning about a decl which came from a system header,\n+     unless -Wsystem-headers.  */\n+  if (DECL_IN_SYSTEM_HEADER (decl) && !warn_system_headers)\n+    return;\n+\n+  diagnostic_set_info (&diagnostic, msgid, &ap,\n                        DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n                        pedantic_error_kind ());\n+  diagnostic_for_decl (global_dc, &diagnostic, decl);\n \n-  /* We don't want -pedantic-errors to cause the compilation to fail from\n-     \"errors\" in system header files.  Sometimes fixincludes can't fix what's\n-     broken (eg: unsigned char bitfields - fixing it may change the alignment\n-     which will cause programs to mysteriously fail because the C library\n-     or kernel uses the original layout).  There's no point in issuing a\n-     warning either, it's just unnecessary noise.  */\n-  if (!DECL_IN_SYSTEM_HEADER (decl))\n-    diagnostic_for_decl (&diagnostic, decl);\n   VA_CLOSE (ap);\n }\n \n@@ -1319,7 +1371,7 @@ error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   diagnostic_set_info (&diagnostic, msgid, &ap,\n                        DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n                        DK_ERROR);\n-  diagnostic_for_decl (&diagnostic, decl);\n+  diagnostic_for_decl (global_dc, &diagnostic, decl);\n   VA_CLOSE (ap);\n }\n \f\n@@ -1410,10 +1462,7 @@ error_recursion (context)\n \n   fnotice (stderr,\n \t   \"Internal compiler error: Error reporting routines re-entered.\\n\");\n-  fnotice (stderr,\n-\"Please submit a full bug report,\\n\\\n-with preprocessed source if appropriate.\\n\\\n-See %s for instructions.\\n\", bug_report_url);\n+  fnotice (stderr, bug_report_request, bug_report_url);\n   exit (FATAL_EXIT_CODE);\n }\n "}, {"sha": "1d697f485bb8c890599be0c6b1c1b0f74bb8d856", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "patch": "@@ -294,8 +294,6 @@ extern void diagnostic_initialize\tPARAMS ((diagnostic_context *));\n extern void diagnostic_report_current_module PARAMS ((diagnostic_context *));\n extern void diagnostic_report_current_function PARAMS ((diagnostic_context *));\n extern void diagnostic_flush_buffer\tPARAMS ((diagnostic_context *));\n-extern bool diagnostic_count_diagnostic PARAMS ((diagnostic_context *,\n-                                                 diagnostic_t));\n extern void diagnostic_report_diagnostic PARAMS ((diagnostic_context *,\n                                                  diagnostic_info *));\n extern void diagnostic_set_info         PARAMS ((diagnostic_info *,"}, {"sha": "94d1eb107802c33b514d105e07465b632c4f7eae", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "patch": "@@ -1,3 +1,7 @@\n+2003-05-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* bad.c: Don't call diagnostic_count_diagnostic.\n+\n 2003-05-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* com.c (ffecom_init_0): Define built-in functions for atan2,\n@@ -78,7 +82,7 @@\n \n \t* lex.c (ffelex_file_pop_): Rename parameter from input_filename.\n \t(ffelex_file_push_): Likewise.\n-\t\n+\n \t* ste.c (struct gbe_block): Rename field from input_filename.\n \t(ffeste_start_block_, ffeste_start_stmt_): Likewise.\n "}, {"sha": "deed12433cdde6f3d93663271c735a038011a4ca", "filename": "gcc/f/bad.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "patch": "@@ -203,19 +203,20 @@ ffebad_start_ (bool lex_override, ffebad errnum, ffebadSeverity sev,\n       if ((ffebad_severity_ != FFEBAD_severityPEDANTIC)\n \t  || !flag_pedantic_errors)\n \t{\n-\t  if (!diagnostic_count_diagnostic (global_dc, DK_WARNING))\n+\t  if (!diagnostic_report_warnings_p ())\n \t    {\t\t\t/* User wants no warnings. */\n \t      ffebad_is_temp_inhibited_ = TRUE;\n \t      return FALSE;\n \t    }\n+\t  diagnostic_kind_count (global_dc, DK_WARNING)++;\n \t  break;\n \t}\n       /* Fall through (PEDANTIC && flag_pedantic_errors).  */\n     case FFEBAD_severityFATAL:\n     case FFEBAD_severityWEIRD:\n     case FFEBAD_severitySEVERE:\n     case FFEBAD_severityDISASTER:\n-      diagnostic_count_diagnostic (global_dc, DK_ERROR);\n+      diagnostic_kind_count (global_dc, DK_ERROR)++;\n       break;\n \n     default:"}, {"sha": "dd6b87e15b042e93b95ca553b85476a28464ee7a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9804f5fb8bc09df63c51d2e2d0fa4d4abddd5f2b", "patch": "@@ -3539,10 +3539,6 @@ error_with_ivar (message, decl, rawdecl)\n      tree decl;\n      tree rawdecl;\n {\n-  diagnostic_count_diagnostic (global_dc, DK_ERROR);\n-\n-  diagnostic_report_current_function (global_dc);\n-\n   error (\"%H%s `%s'\", &DECL_SOURCE_LOCATION (decl),\n          message, gen_declaration (rawdecl, errbuf));\n \n@@ -7108,11 +7104,6 @@ warn_with_method (message, mtype, method)\n      int mtype;\n      tree method;\n {\n-  if (!diagnostic_count_diagnostic (global_dc, DK_WARNING))\n-    return;\n-\n-  diagnostic_report_current_function (global_dc);\n-\n   /* Add a readable method name to the warning.  */\n   warning (\"%H%s `%c%s'\", &DECL_SOURCE_LOCATION (method),\n            message, mtype, gen_method_decl (method, errbuf));"}]}