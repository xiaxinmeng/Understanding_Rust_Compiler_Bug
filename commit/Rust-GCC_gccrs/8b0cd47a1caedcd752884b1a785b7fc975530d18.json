{"sha": "8b0cd47a1caedcd752884b1a785b7fc975530d18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwY2Q0N2ExY2FlZGNkNzUyODg0YjFhNzg1YjdmYzk3NTUzMGQxOA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-05-18T20:49:49Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-05-18T20:49:49Z"}, "message": "2018-05-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h\n\t(_Rb_tree_impl(_Rb_tree_impl&&, _Node_allocator&&)): New.\n\t(_Rb_tree(_Rb_tree&&, _Node_allocator&&, true_type)): New, use latter.\n\t(_Rb_tree(_Rb_tree&&, _Node_allocator&&, false_type)): New.\n\t(_Rb_tree(_Rb_tree&&, _Node_allocator&&)): Adapt, use latters.\n\t* include/debug/map.h\n\t(map(map&&, const_allocator_type&)): Add noexcept qualitication.\n\t* include/debug/multimap.h\n\t(multimap(multimap&&, const_allocator_type&)): Likewise.\n\t* include/debug/set.h\n\t(set(set&&, const_allocator_type&)): Likewise.\n\t* include/debug/multiset.h\n\t(multiset(multiset&&, const_allocator_type&)): Likewise.\n\t* testsuite/23_containers/map/cons/noexcept_default_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/map/cons/noexcept_move_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/multimap/cons/noexcept_default_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/multimap/cons/noexcept_move_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/multiset/cons/noexcept_default_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/multiset/cons/noexcept_move_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/set/cons/noexcept_default_construct.cc:\n\tAdd checks.\n\t* testsuite/23_containers/set/cons/noexcept_move_construct.cc:\n\tAdd checks.\n\nFrom-SVN: r260382", "tree": {"sha": "dccdc20181d0bddfcd6defe0be97fcf14d64da38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dccdc20181d0bddfcd6defe0be97fcf14d64da38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0cd47a1caedcd752884b1a785b7fc975530d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0cd47a1caedcd752884b1a785b7fc975530d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0cd47a1caedcd752884b1a785b7fc975530d18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0cd47a1caedcd752884b1a785b7fc975530d18/comments", "author": null, "committer": null, "parents": [{"sha": "b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46b715d5b838d9869f89d3594ebf7d0b7cb374c"}], "stats": {"total": 249, "additions": 224, "deletions": 25}, "files": [{"sha": "092fa755087108dfa31a92783823d9b93830b7dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -1,3 +1,35 @@\n+2018-05-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h\n+\t(_Rb_tree_impl(_Rb_tree_impl&&, _Node_allocator&&)): New.\n+\t(_Rb_tree(_Rb_tree&&, _Node_allocator&&, true_type)): New, use latter.\n+\t(_Rb_tree(_Rb_tree&&, _Node_allocator&&, false_type)): New.\n+\t(_Rb_tree(_Rb_tree&&, _Node_allocator&&)): Adapt, use latters.\n+\t* include/debug/map.h\n+\t(map(map&&, const_allocator_type&)): Add noexcept qualitication.\n+\t* include/debug/multimap.h\n+\t(multimap(multimap&&, const_allocator_type&)): Likewise.\n+\t* include/debug/set.h\n+\t(set(set&&, const_allocator_type&)): Likewise.\n+\t* include/debug/multiset.h\n+\t(multiset(multiset&&, const_allocator_type&)): Likewise.\n+\t* testsuite/23_containers/map/cons/noexcept_default_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/map/cons/noexcept_move_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/multimap/cons/noexcept_default_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/multimap/cons/noexcept_move_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/multiset/cons/noexcept_default_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/multiset/cons/noexcept_move_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/set/cons/noexcept_default_construct.cc:\n+\tAdd checks.\n+\t* testsuite/23_containers/set/cons/noexcept_move_construct.cc:\n+\tAdd checks.\n+\n 2018-05-18  Jason Merrill  <jason@redhat.com>\n \n \t* include/bits/stl_deque.h (_Deque_iterator): Constrain constructor"}, {"sha": "85f190acccfaba206748f7fbf476e9fbbe2966f1", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -471,7 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct _Reuse_or_alloc_node\n       {\n \t_Reuse_or_alloc_node(_Rb_tree& __t)\n-\t  : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)\n+\t: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)\n \t{\n \t  if (_M_root)\n \t    {\n@@ -555,7 +555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct _Alloc_node\n       {\n \t_Alloc_node(_Rb_tree& __t)\n-\t  : _M_t(__t) { }\n+\t: _M_t(__t) { }\n \n \ttemplate<typename _Arg>\n \t  _Link_type\n@@ -715,6 +715,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n \t  _Rb_tree_impl(_Rb_tree_impl&&) = default;\n \n+\t  _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)\n+\t  : _Node_allocator(std::move(__a)),\n+\t    _Base_key_compare(std::move(__x)),\n+\t    _Rb_tree_header(std::move(__x))\n+\t  { }\n+\n \t  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)\n \t  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)\n \t  { }\n@@ -958,7 +964,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Rb_tree(std::move(__x), _Node_allocator(__a))\n       { }\n \n-      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);\n+    private:\n+      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, true_type)\n+      noexcept(is_nothrow_default_constructible<_Compare>::value)\n+      : _M_impl(std::move(__x._M_impl), std::move(__a))\n+      { }\n+\n+      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, false_type)\n+      : _M_impl(__x._M_impl._M_key_compare, std::move(__a))\n+      {\n+\tif (__x._M_root() != nullptr)\n+\t  _M_move_data(__x, false_type{});\n+      }\n+\n+    public:\n+      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)\n+      noexcept( noexcept(\n+\t_Rb_tree(std::declval<_Rb_tree>(), std::declval<_Node_allocator>(),\n+\t\t std::declval<typename _Alloc_traits::is_always_equal>())) )\n+      : _Rb_tree(std::move(__x), std::move(__a),\n+\t\t typename _Alloc_traits::is_always_equal{})\n+      { }\n #endif\n \n       ~_Rb_tree() _GLIBCXX_NOEXCEPT\n@@ -1358,22 +1384,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       // Move elements from container with equal allocator.\n       void\n-      _M_move_data(_Rb_tree& __x, std::true_type)\n+      _M_move_data(_Rb_tree& __x, true_type)\n       { _M_impl._M_move_data(__x._M_impl); }\n \n       // Move elements from container with possibly non-equal allocator,\n       // which might result in a copy not a move.\n       void\n-      _M_move_data(_Rb_tree&, std::false_type);\n+      _M_move_data(_Rb_tree&, false_type);\n \n       // Move assignment from container with equal allocator.\n       void\n-      _M_move_assign(_Rb_tree&, std::true_type);\n+      _M_move_assign(_Rb_tree&, true_type);\n \n       // Move assignment from container with possibly non-equal allocator,\n       // which might result in a copy not a move.\n       void\n-      _M_move_assign(_Rb_tree&, std::false_type);\n+      _M_move_assign(_Rb_tree&, false_type);\n #endif\n \n #if __cplusplus > 201402L\n@@ -1599,25 +1625,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __x.swap(__y); }\n \n #if __cplusplus >= 201103L\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)\n-    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))\n-    {\n-      using __eq = typename _Alloc_traits::is_always_equal;\n-      if (__x._M_root() != nullptr)\n-\t_M_move_data(__x, __eq());\n-    }\n-\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    _M_move_data(_Rb_tree& __x, std::false_type)\n+    _M_move_data(_Rb_tree& __x, false_type)\n     {\n       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())\n-\t_M_move_data(__x, std::true_type());\n+\t_M_move_data(__x, true_type());\n       else\n \t{\n \t  _Alloc_node __an(*this);\n@@ -1639,7 +1654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       clear();\n       if (__x._M_root() != nullptr)\n-\t_M_move_data(__x, std::true_type());\n+\t_M_move_data(__x, true_type());\n       std::__alloc_on_move(_M_get_Node_allocator(),\n \t\t\t   __x._M_get_Node_allocator());\n     }"}, {"sha": "23966ba968d91b7ba614c49c5a5ec146939608ce", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -105,6 +105,7 @@ namespace __debug\n       : _Base(__m, __a) { }\n \n       map(map&& __m, const allocator_type& __a)\n+      noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n       : _Safe(std::move(__m._M_safe()), __a),\n \t_Base(std::move(__m._M_base()), __a) { }\n "}, {"sha": "80549848fcbb0c608b044ff85fafcc7602aacd93", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -105,6 +105,7 @@ namespace __debug\n       : _Base(__m, __a) { }\n \n       multimap(multimap&& __m, const allocator_type& __a)\n+      noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n       : _Safe(std::move(__m._M_safe()), __a),\n \t_Base(std::move(__m._M_base()), __a) { }\n "}, {"sha": "6e4c1b0e564f845e7d9cdc95bcde54b2c0d7543c", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -104,6 +104,7 @@ namespace __debug\n       : _Base(__m, __a) { }\n \n       multiset(multiset&& __m, const allocator_type& __a)\n+      noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n       : _Safe(std::move(__m._M_safe()), __a),\n \t_Base(std::move(__m._M_base()), __a) { }\n "}, {"sha": "571cc4749485eaaf7d541e09d7485f0ffc1acb17", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -104,6 +104,7 @@ namespace __debug\n       : _Base(__x, __a) { }\n \n       set(set&& __x, const allocator_type& __a)\n+      noexcept( noexcept(_Base(std::move(__x._M_base()), __a)) )\n       : _Safe(std::move(__x._M_safe()), __a),\n \t_Base(std::move(__x._M_base()), __a) { }\n "}, {"sha": "e5c924d25079dcfb6dbdddff0159f45ef0a86d6d", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/noexcept_default_construct.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_default_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -30,3 +30,19 @@ struct cmp\n \n using mtype2 = std::map<int, int, cmp>;\n static_assert( !std::is_nothrow_default_constructible<mtype2>::value, \"Error\");\n+\n+template<typename _Tp>\n+  struct not_noexcept_cons_alloc : std::allocator<_Tp>\n+  {\n+    not_noexcept_cons_alloc() /* noexcept */\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_cons_alloc<_Tp1> other; };\n+  };\n+\n+using mtype3 = std::map<int, int, std::less<int>,\n+\t\t\tnot_noexcept_cons_alloc<std::pair<const int, int>>>;\n+\n+static_assert(!std::is_nothrow_default_constructible<mtype3>::value, \"Error\");"}, {"sha": "723a63f7d626c64a2aac2fab9a686b2fde2adbcb", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/noexcept_move_construct.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -23,4 +23,25 @@\n \n typedef std::map<int, int> mtype;\n \n-static_assert(std::is_nothrow_move_constructible<mtype>::value, \"Error\");\n+static_assert( std::is_nothrow_move_constructible<mtype>::value,\n+\t       \"noexcept move constructor\" );\n+static_assert( std::is_nothrow_constructible<mtype,\n+\t       mtype&&, const typename mtype::allocator_type&>::value,\n+\t       \"noexcept move constructor with allocator\" );\n+\n+struct not_noexcept_less\n+{\n+  not_noexcept_less() = default;\n+  not_noexcept_less(const not_noexcept_less&) /* noexcept */\n+  { }\n+\n+  bool\n+  operator()(int l, int r) const\n+  { return l < r; }\n+};\n+\n+typedef std::map<int, int, not_noexcept_less> emtype;\n+\n+static_assert( !std::is_nothrow_constructible<emtype, emtype&&,\n+\t       const typename emtype::allocator_type&>::value,\n+\t       \"except move constructor with allocator\" );"}, {"sha": "62f5d60673b5b73a46ebd0a89ee87057600a0e61", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/noexcept_default_construct.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_default_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -30,3 +30,19 @@ struct cmp\n \n using mtype2 = std::multimap<int, int, cmp>;\n static_assert( !std::is_nothrow_default_constructible<mtype2>::value, \"Error\");\n+\n+template<typename _Tp>\n+  struct not_noexcept_cons_alloc : std::allocator<_Tp>\n+  {\n+    not_noexcept_cons_alloc() /* noexcept */\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_cons_alloc<_Tp1> other; };\n+  };\n+\n+using mtype3 = std::multimap<int, int, std::less<int>,\n+\t\t\tnot_noexcept_cons_alloc<std::pair<const int, int>>>;\n+\n+static_assert(!std::is_nothrow_default_constructible<mtype3>::value, \"Error\");"}, {"sha": "1612b0d59efdf79f80b2dda6af91e14e183cc28f", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/noexcept_move_construct.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -23,4 +23,25 @@\n \n typedef std::multimap<int, int> mmtype;\n \n-static_assert(std::is_nothrow_move_constructible<mmtype>::value, \"Error\");\n+static_assert( std::is_nothrow_move_constructible<mmtype>::value,\n+\t       \"noexcept move constructor\" );\n+static_assert( std::is_nothrow_constructible<mmtype,\n+\t       mmtype&&, const typename mmtype::allocator_type&>::value,\n+\t       \"noexcept move constructor with allocator\" );\n+\n+struct not_noexcept_less\n+{\n+  not_noexcept_less() = default;\n+  not_noexcept_less(const not_noexcept_less&) /* noexcept */\n+  { }\n+\n+  bool\n+  operator()(int l, int r) const\n+  { return l < r; }\n+};\n+\n+typedef std::multimap<int, int, not_noexcept_less> emmtype;\n+\n+static_assert( !std::is_nothrow_constructible<emmtype, emmtype&&,\n+\t       const typename emmtype::allocator_type&>::value,\n+\t       \"except move constructor with allocator\" );"}, {"sha": "8e491682102e5e3bdd1e4377d2dd029f5a2b0b32", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/noexcept_default_construct.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_default_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -30,3 +30,19 @@ struct cmp\n \n using stype2 = std::multiset<int, cmp>;\n static_assert( !std::is_nothrow_default_constructible<stype2>::value, \"Error\");\n+\n+template<typename _Tp>\n+  struct not_noexcept_cons_alloc : std::allocator<_Tp>\n+  {\n+    not_noexcept_cons_alloc() /* noexcept */\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_cons_alloc<_Tp1> other; };\n+  };\n+\n+using stype3 = std::multiset<int, std::less<int>,\n+\t\t\t     not_noexcept_cons_alloc<int>>;\n+\n+static_assert(!std::is_nothrow_default_constructible<stype3>::value, \"Error\");"}, {"sha": "4ef5127ec0ecefe9e7d53d76781f94f2f2858306", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/noexcept_move_construct.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -23,4 +23,25 @@\n \n typedef std::multiset<int> mstype;\n \n-static_assert(std::is_nothrow_move_constructible<mstype>::value, \"Error\");\n+static_assert( std::is_nothrow_move_constructible<mstype>::value,\n+\t       \"noexcept move constructor\" );\n+static_assert( std::is_nothrow_constructible<mstype,\n+\t       mstype&&, const typename mstype::allocator_type&>::value,\n+\t       \"noexcept move constructor with allocator\" );\n+\n+struct not_noexcept_less\n+{\n+  not_noexcept_less() = default;\n+  not_noexcept_less(const not_noexcept_less&) /* noexcept */\n+  { }\n+\n+  bool\n+  operator()(int l, int r) const\n+  { return l < r; }\n+};\n+\n+typedef std::multiset<int, not_noexcept_less> emstype;\n+\n+static_assert( !std::is_nothrow_constructible<emstype, emstype&&,\n+\t       const typename emstype::allocator_type&>::value,\n+\t       \"except move constructor with allocator\" );"}, {"sha": "d3dc98df44a13c024305a6d75205ffb5240cc3b0", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/noexcept_default_construct.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_default_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -30,3 +30,19 @@ struct cmp\n \n using stype2 = std::set<int, cmp>;\n static_assert( !std::is_nothrow_default_constructible<stype2>::value, \"Error\");\n+\n+template<typename _Tp>\n+  struct not_noexcept_cons_alloc : std::allocator<_Tp>\n+  {\n+    not_noexcept_cons_alloc() /* noexcept */\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_cons_alloc<_Tp1> other; };\n+  };\n+\n+using stype3 = std::set<int, std::less<int>,\n+\t\t\tnot_noexcept_cons_alloc<int>>;\n+\n+static_assert(!std::is_nothrow_default_constructible<stype3>::value, \"Error\");"}, {"sha": "942400ea2f387c29fad51ad80c7fe72d326d77d1", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/noexcept_move_construct.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0cd47a1caedcd752884b1a785b7fc975530d18/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc?ref=8b0cd47a1caedcd752884b1a785b7fc975530d18", "patch": "@@ -23,4 +23,25 @@\n \n typedef std::set<int> stype;\n \n-static_assert(std::is_nothrow_move_constructible<stype>::value, \"Error\");\n+static_assert( std::is_nothrow_move_constructible<stype>::value,\n+\t       \"noexcept move constructor\" );\n+static_assert( std::is_nothrow_constructible<stype,\n+\t       stype&&, const typename stype::allocator_type&>::value,\n+\t       \"noexcept move constructor with allocator\" );\n+\n+struct not_noexcept_less\n+{\n+  not_noexcept_less() = default;\n+  not_noexcept_less(const not_noexcept_less&) /* noexcept */\n+  { }\n+\n+  bool\n+  operator()(int l, int r) const\n+  { return l < r; }\n+};\n+\n+typedef std::set<int, not_noexcept_less> estype;\n+\n+static_assert( !std::is_nothrow_constructible<estype, estype&&,\n+\t       const typename estype::allocator_type&>::value,\n+\t       \"except move constructor with allocator\" );"}]}