{"sha": "f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4YWJmNGE1OWE5NmVlZWYxZDFkYjgyYjFkMGM1Y2MyNTUxYjQzOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-03-11T16:17:32Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-03-11T16:17:32Z"}, "message": "re PR fortran/30883 ([4.1/4.2 only] procedure with dummy procedure f1  rejected with implicit none)\n\n2007-03-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30883\n\t* parse.c (parse_interface): Use the default types from the\n\tformal namespace if a function or its result do not have a type\n\tafter parsing the specification statements.\n\n2007-03-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30883\n\t* gfortran.dg/interface_11.f90: New test.\n\nFrom-SVN: r122822", "tree": {"sha": "d7af43c9835e239334294a4cde209293436d69b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7af43c9835e239334294a4cde209293436d69b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/comments", "author": null, "committer": null, "parents": [{"sha": "13338552e20fc9327a4bf620715939db13c23ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13338552e20fc9327a4bf620715939db13c23ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13338552e20fc9327a4bf620715939db13c23ba6"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "debe01542ad55830da3fe8ec0e9c240e7e75ee0c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "patch": "@@ -1,3 +1,10 @@\n+2007-03-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30883\n+\t* parse.c (parse_interface): Use the default types from the\n+\tformal namespace if a function or its result do not have a type\n+\tafter parsing the specification statements.\n+\n 2007-03-08  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* intrinsic.texi: (ICHAR) Improve internal I/O note."}, {"sha": "2d171670df383f5bc06d324985d4777535430632", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "patch": "@@ -1782,6 +1782,20 @@ parse_interface (void)\n   /* Read data declaration statements.  */\n   st = parse_spec (ST_NONE);\n \n+  /* Since the interface block does not permit an IMPLICIT statement,\n+     the default type for the function or the result must be taken\n+     from the formal namespace.  */\n+  if (new_state == COMP_FUNCTION)\n+    {\n+\tif (prog_unit->result == prog_unit\n+\t      && prog_unit->ts.type == BT_UNKNOWN)\n+\t  gfc_set_default_type (prog_unit, 1, prog_unit->formal_ns);\n+\telse if (prog_unit->result != prog_unit\n+\t\t   && prog_unit->result->ts.type == BT_UNKNOWN)\n+\t  gfc_set_default_type (prog_unit->result, 1,\n+\t\t\t\tprog_unit->formal_ns);\n+    }\n+\n   if (st != ST_END_SUBROUTINE && st != ST_END_FUNCTION)\n     {\n       gfc_error (\"Unexpected %s statement at %C in INTERFACE body\","}, {"sha": "2276ea07135a5fe69330572619508f99a2e5f845", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "patch": "@@ -1,3 +1,8 @@\n+2007-03-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30883\n+\t* gfortran.dg/interface_11.f90: New test.\n+\n 2007-03-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/31115"}, {"sha": "a143bb374f2c4ba2b7ee509863874129adb38316", "filename": "gcc/testsuite/gfortran.dg/interface_11.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68abf4a59a96eeef1d1db82b1d0c5cc2551b438/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_11.f90?ref=f68abf4a59a96eeef1d1db82b1d0c5cc2551b438", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! Tests the fix for PR30883 in which interface functions and\n+! their results did not get an implicit type.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!\n+MODULE M1\n+  IMPLICIT NONE\n+CONTAINS\n+  SUBROUTINE S1(F1, F2, G1, G2)\n+    INTERFACE\n+      FUNCTION F1(i, a)\n+      END FUNCTION F1\n+      FUNCTION F2(i, a)\n+        implicit complex (a-z)\n+      END FUNCTION F2\n+    END INTERFACE\n+    INTERFACE\n+      FUNCTION g1(i, a) result(z)\n+      END FUNCTION g1\n+      FUNCTION g2(i, a) result(z)\n+        implicit complex (a-z)\n+      END FUNCTION g2\n+    END INTERFACE\n+  END SUBROUTINE S1\n+END MODULE\n+\n+END\n+! { dg-final { cleanup-modules \"m1\" } }"}]}