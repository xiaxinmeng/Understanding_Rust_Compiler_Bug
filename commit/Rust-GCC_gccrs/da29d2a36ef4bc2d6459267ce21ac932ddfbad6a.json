{"sha": "da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEyOWQyYTM2ZWY0YmMyZDY0NTkyNjdjZTIxYWM5MzJkZGZiYWQ2YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-27T23:25:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-27T23:25:56Z"}, "message": "PR libstdc++/67843 set shared_ptr lock policy at build-time\n\nThis resolves a longstanding issue where the lock policy for shared_ptr\nreference counting depends on compilation options when the header is\nincluded, so that different -march options can cause ABI changes. For\nexample, objects compiled with -march=armv7 will use atomics to\nsynchronize reference counts, and objects compiled with -march=armv5t\nwill use a mutex. That means the shared_ptr control block will have a\ndifferent layout in different objects, causing ODR violations and\nundefined behaviour. This was the root cause of PR libstdc++/42734 as\nwell as PR libstdc++/67843.\n\nThe solution is to decide on the lock policy at build time, when\nlibstdc++ is configured. The configure script checks for the\navailability of the necessary atomic built-ins for the target and fixes\nthat choice permanently. Different -march flags used to compile user\ncode will not cause changes to the lock policy. This results in an ABI\nchange for certain compilations, but only where there was already an ABI\nincompatibility between the libstdc++.so library and objects built with\nan incompatible -march option. In general, this means a more stable ABI\nthat isn't silently altered when -march flags make addition atomic ops\navailable.\n\nTo force a target to use \"atomic\" or \"mutex\" the new configure option\n--with-libstdcxx-lock-policy can be used.\n\nIn order to turn ODR violations into linker errors, the uses of\nshared_ptr in filesystem directory iterators have been replaced\nwith __shared_ptr, and explicit instantiations are declared. This\nensures that object files using those types cannot link to libstdc++\nlibs unless they use the same lock policy.\n\n\tPR libstdc++/67843\n\t* acinclude.m4 (GLIBCXX_ENABLE_LOCK_POLICY): Add new macro\n\tthat defines _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Use GLIBCXX_ENABLE_LOCK_POLICY.\n\t* doc/xml/manual/configure.xml: Document new configure option.\n\t* include/bits/fs_dir.h (directory_iterator): Use __shared_ptr\n\tinstead of shared_ptr.\n\t(recursive_directory_iterator): Likewise.\n\t(__shared_ptr<_Dir>): Add explicit instantiation declaration.\n\t(__shared_ptr<recursive_directory_iterator::_Dir_stack>): Likewise.\n\t* include/bits/shared_ptr_base.h (__allocate_shared, __make_shared):\n\tAdd default template argument for _Lock_policy template parameter.\n\t* include/ext/concurrence.h (__default_lock_policy): Check macro\n\t_GLIBCXX_HAVE_ATOMIC_LOCK_POLICY instead of checking if the current\n\ttarget supports the builtins for compare-and-swap.\n\t* src/filesystem/std-dir.cc (__shared_ptr<_Dir>): Add explicit\n\tinstantiation definition.\n\t(__shared_ptr<recursive_directory_iterator::_Dir_stack>): Likewise.\n\t(directory_iterator, recursive_directory_iterator): Use __make_shared\n\tinstead of make_shared.\n\nFrom-SVN: r266533", "tree": {"sha": "cbf62faa339ce7361ab360531fd9149183d82752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf62faa339ce7361ab360531fd9149183d82752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b07b06716375f6bff210a828eddba1a3fd784d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07b06716375f6bff210a828eddba1a3fd784d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07b06716375f6bff210a828eddba1a3fd784d25"}], "stats": {"total": 245, "additions": 224, "deletions": 21}, "files": [{"sha": "fd61db5c9ee6cc4bd29ce6ec6f37eb692d88d218", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -1,3 +1,28 @@\n+2018-11-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/67843\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LOCK_POLICY): Add new macro\n+\tthat defines _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Use GLIBCXX_ENABLE_LOCK_POLICY.\n+\t* doc/xml/manual/configure.xml: Document new configure option.\n+\t* include/bits/fs_dir.h (directory_iterator): Use __shared_ptr\n+\tinstead of shared_ptr.\n+\t(recursive_directory_iterator): Likewise.\n+\t(__shared_ptr<_Dir>): Add explicit instantiation declaration.\n+\t(__shared_ptr<recursive_directory_iterator::_Dir_stack>): Likewise.\n+\t* include/bits/shared_ptr_base.h (__allocate_shared, __make_shared):\n+\tAdd default template argument for _Lock_policy template parameter.\n+\t* include/ext/concurrence.h (__default_lock_policy): Check macro\n+\t_GLIBCXX_HAVE_ATOMIC_LOCK_POLICY instead of checking if the current\n+\ttarget supports the builtins for compare-and-swap.\n+\t* src/filesystem/std-dir.cc (__shared_ptr<_Dir>): Add explicit\n+\tinstantiation definition.\n+\t(__shared_ptr<recursive_directory_iterator::_Dir_stack>): Likewise.\n+\t(directory_iterator, recursive_directory_iterator): Use __make_shared\n+\tinstead of make_shared.\n+\n 2018-11-27  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/88199"}, {"sha": "6bcd29dc8c3f71b2df9da7e166c85bb571d0f9a5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -3562,6 +3562,72 @@ EOF\n \n ])\n \n+dnl\n+dnl Set default lock policy for synchronizing shared_ptr reference counting.\n+dnl\n+dnl --with-libstdcxx-lock-policy=auto\n+dnl\tUse atomic operations for shared_ptr reference counting only if\n+dnl\tthe default target supports atomic compare-and-swap.\n+dnl --with-libstdcxx-lock-policy=atomic\n+dnl\tUse atomic operations for shared_ptr reference counting.\n+dnl --with-libstdcxx-lock-policy=mutex\n+dnl\tUse a mutex to synchronize shared_ptr reference counting.\n+dnl\n+dnl This controls the value of __gnu_cxx::__default_lock_policy, which\n+dnl determines how shared_ptr reference counts are synchronized.\n+dnl The option \"atomic\" means that atomic operations should be used,\n+dnl \"mutex\" means that a mutex will be used. The default option, \"auto\",\n+dnl will check if the target supports the compiler-generated builtins\n+dnl for atomic compare-and-swap operations for 2-byte and 4-byte integers,\n+dnl and will use \"atomic\" if supported, \"mutex\" otherwise.\n+dnl This option is ignored if the thread model used by GCC is \"single\",\n+dnl as no synchronization is used at all in that case.\n+dnl This option affects the library ABI (except in the \"single\" thread model).\n+dnl\n+dnl Defines _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY to 1 if atomics should be used.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_LOCK_POLICY], [\n+\n+  AC_ARG_WITH([libstdcxx-lock-policy],\n+    AC_HELP_STRING([--with-libstdcxx-lock-policy={atomic,mutex,auto}],\n+      [synchronization policy for shared_ptr reference counting [default=auto]]),\n+              [libstdcxx_atomic_lock_policy=$withval],\n+              [libstdcxx_atomic_lock_policy=auto])\n+\n+  case \"$libstdcxx_atomic_lock_policy\" in\n+    atomic|mutex|auto) ;;\n+    *) AC_MSG_ERROR([Invalid argument for --with-libstdcxx-lock-policy]) ;;\n+  esac\n+  AC_MSG_CHECKING([for lock policy for shared_ptr reference counts])\n+\n+  if test x\"$libstdcxx_atomic_lock_policy\" = x\"auto\"; then\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+\n+    dnl Why do we care about 2-byte CAS on targets with 4-byte _Atomic_word?!\n+    AC_TRY_COMPILE([\n+    #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+    # error \"No 2-byte compare-and-swap\"\n+    #elif ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+    # error \"No 4-byte compare-and-swap\"\n+    #endif\n+    ],,\n+    [libstdcxx_atomic_lock_policy=atomic],\n+    [libstdcxx_atomic_lock_policy=mutex])\n+    AC_LANG_RESTORE\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  fi\n+\n+  if test x\"$libstdcxx_atomic_lock_policy\" = x\"atomic\"; then\n+    AC_MSG_RESULT(atomic)\n+    AC_DEFINE(HAVE_ATOMIC_LOCK_POLICY,1,\n+      [Defined if shared_ptr reference counting should use atomic operations.])\n+  else\n+    AC_MSG_RESULT(mutex)\n+  fi\n+\n+])\n \n dnl\n dnl Allow visibility attributes to be used on namespaces, objects, etc."}, {"sha": "9c45c8c66284235ca92230498331aeb9375af3dc", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -33,6 +33,9 @@\n /* Define to 1 if you have the `atanl' function. */\n #undef HAVE_ATANL\n \n+/* Defined if shared_ptr reference counting should use atomic operations. */\n+#undef HAVE_ATOMIC_LOCK_POLICY\n+\n /* Define to 1 if you have the `at_quick_exit' function. */\n #undef HAVE_AT_QUICK_EXIT\n "}, {"sha": "77805e8680fe97417d91f4e89f6908a37b6db4b2", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -907,6 +907,7 @@ enable_libtool_lock\n enable_hosted_libstdcxx\n enable_libstdcxx_verbose\n enable_libstdcxx_pch\n+with_libstdcxx_lock_policy\n enable_cstdio\n enable_clocale\n enable_nls\n@@ -1652,6 +1653,9 @@ Optional Packages:\n   --with-pic              try to use only PIC/non-PIC objects [default=use\n                           both]\n   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n+  --with-libstdcxx-lock-policy={atomic,mutex,auto}\n+                          synchronization policy for shared_ptr reference\n+                          counting [default=auto]\n   --with-python-dir       the location to install Python modules. This path is\n                           relative starting from the prefix.\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n@@ -11840,7 +11844,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11843 \"configure\"\n+#line 11847 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11946,7 +11950,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11949 \"configure\"\n+#line 11953 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15632,7 +15636,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15635 \"configure\"\n+#line 15639 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15667,7 +15671,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15670 \"configure\"\n+#line 15674 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15702,7 +15706,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15705 \"configure\"\n+#line 15709 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15738,7 +15742,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15741 \"configure\"\n+#line 15745 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15815,11 +15819,83 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n \n \n \n+\n+# Check whether --with-libstdcxx-lock-policy was given.\n+if test \"${with_libstdcxx_lock_policy+set}\" = set; then :\n+  withval=$with_libstdcxx_lock_policy; libstdcxx_atomic_lock_policy=$withval\n+else\n+  libstdcxx_atomic_lock_policy=auto\n+fi\n+\n+\n+  case \"$libstdcxx_atomic_lock_policy\" in\n+    atomic|mutex|auto) ;;\n+    *) as_fn_error $? \"Invalid argument for --with-libstdcxx-lock-policy\" \"$LINENO\" 5 ;;\n+  esac\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for lock policy for shared_ptr reference counts\" >&5\n+$as_echo_n \"checking for lock policy for shared_ptr reference counts... \" >&6; }\n+\n+  if test x\"$libstdcxx_atomic_lock_policy\" = x\"auto\"; then\n+\n+    ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+\n+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+    #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+    # error \"No 2-byte compare-and-swap\"\n+    #elif ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+    # error \"No 4-byte compare-and-swap\"\n+    #endif\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  libstdcxx_atomic_lock_policy=atomic\n+else\n+  libstdcxx_atomic_lock_policy=mutex\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+    ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  fi\n+\n+  if test x\"$libstdcxx_atomic_lock_policy\" = x\"atomic\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: atomic\" >&5\n+$as_echo \"atomic\" >&6; }\n+\n+$as_echo \"#define HAVE_ATOMIC_LOCK_POLICY 1\" >>confdefs.h\n+\n+  else\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: mutex\" >&5\n+$as_echo \"mutex\" >&6; }\n+  fi\n+\n+\n+\n+\n   # Fake what AC_TRY_COMPILE does, without linking as this is\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15822 \"configure\"\n+#line 15898 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15861,7 +15937,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15864 \"configure\"\n+#line 15940 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15895,7 +15971,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15898 \"configure\"\n+#line 15974 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "ad5b4117cfda8a989cce4503f34d9fcf6c570037", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -149,6 +149,7 @@ GLIBCXX_ENABLE_VERBOSE\n GLIBCXX_ENABLE_PCH($is_hosted)\n GLIBCXX_ENABLE_THREADS\n GLIBCXX_ENABLE_ATOMIC_BUILTINS\n+GLIBCXX_ENABLE_LOCK_POLICY\n GLIBCXX_ENABLE_DECIMAL_FLOAT\n GLIBCXX_ENABLE_INT128_FLOAT128\n if test \"$enable_float128\" = yes; then"}, {"sha": "d296c8d8a49e8efd5ea17fedb6e3ed9368110740", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -399,6 +399,28 @@\n    </para>\n  </listitem></varlistentry>\n \n+ <varlistentry><term><code>--with-libstdcxx-lock-policy=OPTION</code></term>\n+ <listitem><para>Sets the lock policy that controls how\n+        <classname>shared_ptr</classname> reference counting is\n+        synchronized.\n+        The choice OPTION=atomic enables use of atomics for updates to\n+        <classname>shared_ptr</classname> reference counts.\n+        The choice OPTION=mutex enables use of a mutex to synchronize updates\n+        to <classname>shared_ptr</classname> reference counts.\n+        If the compiler's thread model is \"single\" then this option has no\n+        effect, as no synchronization is used for the reference counts.\n+\tThe default is OPTION=auto, which checks for the availability of\n+        compiler built-ins for 2-byte and 4-byte atomic compare-and-swap,\n+        and uses OPTION=atomic if they're available, OPTION=mutex otherwise.\n+        This option can change the library ABI.\n+        If the library is configured to use atomics and user programs are\n+        compiled using a target that doesn't natively support the atomic\n+        operations (e.g. the library is configured for armv7 and then code\n+        is compiled with <option>-march=armv5t</option>) then the program\n+        might rely on support in libgcc to provide the atomics.\n+    </para>\n+ </listitem></varlistentry>\n+\n  <varlistentry><term><code>--enable-vtable-verify</code>[default]</term>\n  <listitem>\n     <para>Use <code>-fvtable-verify=std</code> to compile the C++"}, {"sha": "2f81a1709e445b3534e46c34984e519f2ccdc8d1", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -403,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     friend class recursive_directory_iterator;\n \n-    std::shared_ptr<_Dir> _M_dir;\n+    std::__shared_ptr<_Dir> _M_dir;\n   };\n \n   inline directory_iterator\n@@ -494,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n                const recursive_directory_iterator& __rhs);\n \n     struct _Dir_stack;\n-    std::shared_ptr<_Dir_stack> _M_dirs;\n+    std::__shared_ptr<_Dir_stack> _M_dirs;\n     directory_options _M_options = {};\n     bool _M_pending = false;\n   };\n@@ -525,6 +525,14 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   // @} group filesystem\n } // namespace filesystem\n \n+  // Use explicit instantiations of these types. Any inconsistency in the\n+  // value of __default_lock_policy between code including this header and\n+  // the library will cause a linker error.\n+  extern template class\n+    __shared_ptr<filesystem::_Dir>;\n+  extern template class\n+    __shared_ptr<filesystem::recursive_directory_iterator::_Dir_stack>;\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "21debf362aabf87069ec3ec54a9d844c9ec3a1a0", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -1803,15 +1803,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       mutable __weak_ptr<_Tp, _Lp>  _M_weak_this;\n     };\n \n-  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>\n+  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,\n+\t   typename _Alloc, typename... _Args>\n     inline __shared_ptr<_Tp, _Lp>\n     __allocate_shared(const _Alloc& __a, _Args&&... __args)\n     {\n       return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,\n \t\t\t\t    std::forward<_Args>(__args)...);\n     }\n \n-  template<typename _Tp, _Lock_policy _Lp, typename... _Args>\n+  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,\n+\t   typename... _Args>\n     inline __shared_ptr<_Tp, _Lp>\n     __make_shared(_Args&&... __args)\n     {"}, {"sha": "33ad9e06c9fc2b1605f08adbf156014e1d9e9d1a", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -51,16 +51,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Compile time constant that indicates prefered locking policy in\n   // the current configuration.\n   static const _Lock_policy __default_lock_policy = \n-#ifdef __GTHREADS\n-#if (defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2) \\\n-     && defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4))\n+#ifndef __GTHREADS\n+  _S_single;\n+#elif defined _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY\n   _S_atomic;\n #else\n   _S_mutex;\n #endif\n-#else\n-  _S_single;\n-#endif\n \n   // NB: As this is used in libsupc++, need to only depend on\n   // exception. No stdexception classes, no use of std::string."}, {"sha": "038f635a712adb9472b16112acba51ff64a049ff", "filename": "libstdc++-v3/src/filesystem/std-dir.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc?ref=da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "patch": "@@ -39,6 +39,9 @@\n namespace fs = std::filesystem;\n namespace posix = std::filesystem::__gnu_posix;\n \n+template class std::__shared_ptr<fs::_Dir>;\n+template class std::__shared_ptr<fs::recursive_directory_iterator::_Dir_stack>;\n+\n struct fs::_Dir : _Dir_base\n {\n   _Dir(const fs::path& p, bool skip_permission_denied, error_code& ec)\n@@ -125,7 +128,7 @@ directory_iterator(const path& p, directory_options options, error_code* ecptr)\n \n   if (dir.dirp)\n     {\n-      auto sp = std::make_shared<fs::_Dir>(std::move(dir));\n+      auto sp = std::__make_shared<fs::_Dir>(std::move(dir));\n       if (sp->advance(skip_permission_denied, ec))\n \t_M_dir.swap(sp);\n     }\n@@ -185,7 +188,7 @@ recursive_directory_iterator(const path& p, directory_options options,\n     {\n       if (ecptr)\n \tecptr->clear();\n-      auto sp = std::make_shared<_Dir_stack>();\n+      auto sp = std::__make_shared<_Dir_stack>();\n       sp->push(_Dir{ dirp, p });\n       if (ecptr ? sp->top().advance(*ecptr) : sp->top().advance())\n \t_M_dirs.swap(sp);"}]}