{"sha": "f0068278f7e75507c1f40e7c829d7a9d6ade269c", "node_id": "C_kwDOANBUbNoAKGYwMDY4Mjc4ZjdlNzU1MDdjMWY0MGU3YzgyOWQ3YTlkNmFkZTI2OWM", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-19T15:05:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-19T21:16:12Z"}, "message": "Always check result from build_<COND> in range-op-float.cc\n\nA result of false from build_<COND> in range-ops means the result is\nfinal and needs no further adjustments.  This patch documents this,\nand changes all uses to check the result.  There should be no change\nin functionality.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (build_le): Document result.\n\t(build_lt): Same.\n\t(build_ge): Same.\n\t(foperator_ge::op2_range): Check result of build_*.\n\t(foperator_unordered_le::op1_range): Same.\n\t(foperator_unordered_le::op2_range): Same.\n\t(foperator_unordered_gt::op1_range): Same.\n\t(foperator_unordered_gt::op2_range): Same.\n\t(foperator_unordered_ge::op1_range): Same.\n\t(foperator_unordered_ge::op2_range): Same.", "tree": {"sha": "398431e12f2d15c398043a90047a5d9c803b7b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/398431e12f2d15c398043a90047a5d9c803b7b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0068278f7e75507c1f40e7c829d7a9d6ade269c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0068278f7e75507c1f40e7c829d7a9d6ade269c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0068278f7e75507c1f40e7c829d7a9d6ade269c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0068278f7e75507c1f40e7c829d7a9d6ade269c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe87edadc4a3f15a6a0d0c1d4a198e0ea37d8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebe87edadc4a3f15a6a0d0c1d4a198e0ea37d8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebe87edadc4a3f15a6a0d0c1d4a198e0ea37d8b5"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "0605a9086840c3d72663912f53e7888e654b6945", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0068278f7e75507c1f40e7c829d7a9d6ade269c/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0068278f7e75507c1f40e7c829d7a9d6ade269c/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=f0068278f7e75507c1f40e7c829d7a9d6ade269c", "patch": "@@ -239,7 +239,9 @@ frange_add_zeros (frange &r, tree type)\n     }\n }\n \n-// Build a range that is <= VAL and store it in R.\n+// Build a range that is <= VAL and store it in R.  Return TRUE if\n+// further changes may be needed for R, or FALSE if R is in its final\n+// form.\n \n static bool\n build_le (frange &r, tree type, const frange &val)\n@@ -255,7 +257,9 @@ build_le (frange &r, tree type, const frange &val)\n   return true;\n }\n \n-// Build a range that is < VAL and store it in R.\n+// Build a range that is < VAL and store it in R.  Return TRUE if\n+// further changes may be needed for R, or FALSE if R is in its final\n+// form.\n \n static bool\n build_lt (frange &r, tree type, const frange &val)\n@@ -277,7 +281,9 @@ build_lt (frange &r, tree type, const frange &val)\n   return true;\n }\n \n-// Build a range that is >= VAL and store it in R.\n+// Build a range that is >= VAL and store it in R.  Return TRUE if\n+// further changes may be needed for R, or FALSE if R is in its final\n+// form.\n \n static bool\n build_ge (frange &r, tree type, const frange &val)\n@@ -293,7 +299,9 @@ build_ge (frange &r, tree type, const frange &val)\n   return true;\n }\n \n-// Build a range that is > VAL and store it in R.\n+// Build a range that is > VAL and store it in R.  Return TRUE if\n+// further changes may be needed for R, or FALSE if R is in its final\n+// form.\n \n static bool\n build_gt (frange &r, tree type, const frange &val)\n@@ -979,11 +987,8 @@ foperator_ge::op2_range (frange &r, tree type,\n       // The TRUE side of NAN >= x is unreachable.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n-      else\n-\t{\n-\t  build_le (r, type, op1);\n-\t  r.clear_nan ();\n-\t}\n+      else if (build_le (r, type, op1))\n+\tr.clear_nan ();\n       break;\n \n     case BRS_FALSE:\n@@ -1354,8 +1359,8 @@ foperator_unordered_le::op1_range (frange &r, tree type,\n       break;\n \n     case BRS_FALSE:\n-      build_gt (r, type, op2);\n-      r.clear_nan ();\n+      if (build_gt (r, type, op2))\n+\tr.clear_nan ();\n       break;\n \n     default:\n@@ -1378,8 +1383,8 @@ foperator_unordered_le::op2_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      build_lt (r, type, op1);\n-      r.clear_nan ();\n+      if (build_lt (r, type, op1))\n+\tr.clear_nan ();\n       break;\n \n     default:\n@@ -1437,8 +1442,8 @@ foperator_unordered_gt::op1_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      build_le (r, type, op2);\n-      r.clear_nan ();\n+      if (build_le (r, type, op2))\n+\tr.clear_nan ();\n       break;\n \n     default:\n@@ -1461,8 +1466,8 @@ foperator_unordered_gt::op2_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      build_ge (r, type, op1);\n-      r.clear_nan ();\n+      if (build_ge (r, type, op1))\n+\tr.clear_nan ();\n       break;\n \n     default:\n@@ -1520,8 +1525,8 @@ foperator_unordered_ge::op1_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      build_lt (r, type, op2);\n-      r.clear_nan ();\n+      if (build_lt (r, type, op2))\n+\tr.clear_nan ();\n       break;\n \n     default:\n@@ -1543,8 +1548,8 @@ foperator_unordered_ge::op2_range (frange &r, tree type,\n       break;\n \n     case BRS_FALSE:\n-      build_gt (r, type, op1);\n-      r.clear_nan ();\n+      if (build_gt (r, type, op1))\n+\tr.clear_nan ();\n       break;\n \n     default:"}]}