{"sha": "c051060ade8a4392bbd4604a551a8dcb8c937f45", "node_id": "C_kwDOANBUbNoAKGMwNTEwNjBhZGU4YTQzOTJiYmQ0NjA0YTU1MWE4ZGNiOGM5MzdmNDU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-01T16:21:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-01T16:21:36Z"}, "message": "c++: make some cp_trait_kind switch statements exhaustive\n\nThis replaces the unreachable default case in some cp_trait_kind\nswitches with an exhaustive listing of the trait codes that we don't\nexpect to see, so that when adding a new trait we'll get a helpful\n-Wswitch warning if we forget to handle the new trait in a relevant\nswitch.\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (trait_expr_value): Make cp_trait_kind switch\n\tstatement exhaustive.\n\t(finish_trait_expr): Likewise.\n\t(finish_trait_type): Likewise.", "tree": {"sha": "b940822e9556940ad865cbd828bc6ee07c127570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b940822e9556940ad865cbd828bc6ee07c127570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c051060ade8a4392bbd4604a551a8dcb8c937f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c051060ade8a4392bbd4604a551a8dcb8c937f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c051060ade8a4392bbd4604a551a8dcb8c937f45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c051060ade8a4392bbd4604a551a8dcb8c937f45/comments", "author": null, "committer": null, "parents": [{"sha": "ca01d2526917ec6e54b30472d3aedfd46d4ca585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca01d2526917ec6e54b30472d3aedfd46d4ca585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca01d2526917ec6e54b30472d3aedfd46d4ca585"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "4fb0675cca96985fe23b262576dd46f5888066e8", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c051060ade8a4392bbd4604a551a8dcb8c937f45/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c051060ade8a4392bbd4604a551a8dcb8c937f45/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=c051060ade8a4392bbd4604a551a8dcb8c937f45", "patch": "@@ -12052,10 +12052,15 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_REF_CONVERTS_FROM_TEMPORARY:\n       return ref_xes_from_temporary (type1, type2, /*direct_init=*/false);\n \n-    default:\n-      gcc_unreachable ();\n-      return false;\n+#define DEFTRAIT_TYPE(CODE, NAME, ARITY) \\\n+    case CPTK_##CODE:\n+#include \"cp-trait.def\"\n+#undef DEFTRAIT_TYPE\n+      /* Type-yielding traits are handled in finish_trait_type.  */\n+      break;\n     }\n+\n+  gcc_unreachable ();\n }\n \n /* Returns true if TYPE meets the requirements for the specified KIND,\n@@ -12204,7 +12209,11 @@ finish_trait_expr (location_t loc, cp_trait_kind kind, tree type1, tree type2)\n \treturn error_mark_node;\n       break;\n \n-    default:\n+#define DEFTRAIT_TYPE(CODE, NAME, ARITY) \\\n+    case CPTK_##CODE:\n+#include \"cp-trait.def\"\n+#undef DEFTRAIT_TYPE\n+      /* Type-yielding traits are handled in finish_trait_type.  */\n       gcc_unreachable ();\n     }\n \n@@ -12250,9 +12259,19 @@ finish_trait_type (cp_trait_kind kind, tree type1, tree type2)\n       if (TYPE_REF_P (type1))\n \ttype1 = TREE_TYPE (type1);\n       return cv_unqualified (type1);\n-    default:\n-      gcc_unreachable ();\n+\n+#define DEFTRAIT_EXPR(CODE, NAME, ARITY) \\\n+    case CPTK_##CODE:\n+#include \"cp-trait.def\"\n+#undef DEFTRAIT_EXPR\n+      /* Expression-yielding traits are handled in finish_trait_expr.  */\n+    case CPTK_BASES:\n+    case CPTK_DIRECT_BASES:\n+      /* BASES and DIRECT_BASES are handled in finish_bases.  */\n+      break;\n     }\n+\n+  gcc_unreachable ();\n }\n \n /* Do-nothing variants of functions to handle pragma FLOAT_CONST_DECIMAL64,"}]}