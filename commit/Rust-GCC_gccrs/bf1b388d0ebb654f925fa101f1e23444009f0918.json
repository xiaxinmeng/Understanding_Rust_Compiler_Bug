{"sha": "bf1b388d0ebb654f925fa101f1e23444009f0918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxYjM4OGQwZWJiNjU0ZjkyNWZhMTAxZjFlMjM0NDQwMDlmMDkxOA==", "commit": {"author": {"name": "Ralph Loader", "email": "rcl@ihug.co.nz", "date": "2003-10-16T21:19:53Z"}, "committer": {"name": "Ralph Loader", "email": "ralph@gcc.gnu.org", "date": "2003-10-16T21:19:53Z"}, "message": "prims.cc (_Jv_NewObjectArray): Make sure byte size doesn't overflow a jint.\n\n\t* prims.cc (_Jv_NewObjectArray): Make sure byte size doesn't\n\toverflow a jint.\n\t(_Jv_NewPrimArray): Check for overflowing a jint, replacing a\n\tcheck for overflowing size_t, since the lower level functions\n\ttake a jint.\n\t* testsuite/libjava.lang/newarray_overflow.java:  New file.\n\t* testsuite/libjava.lang/newarray_overflow.out:  New file.\n\nFrom-SVN: r72577", "tree": {"sha": "5eb019a86e608ffec1700a4faa313de2a574966e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eb019a86e608ffec1700a4faa313de2a574966e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1b388d0ebb654f925fa101f1e23444009f0918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b388d0ebb654f925fa101f1e23444009f0918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1b388d0ebb654f925fa101f1e23444009f0918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b388d0ebb654f925fa101f1e23444009f0918/comments", "author": null, "committer": null, "parents": [{"sha": "71fc2f0cf1f4c1ebb9c6d7fbe20a3a38f7a50562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71fc2f0cf1f4c1ebb9c6d7fbe20a3a38f7a50562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71fc2f0cf1f4c1ebb9c6d7fbe20a3a38f7a50562"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "b34b427c6d8c99b379457870b85de97a88bb6445", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bf1b388d0ebb654f925fa101f1e23444009f0918", "patch": "@@ -1,3 +1,13 @@\n+2003-10-17  Ralph Loader  <rcl@ihug.co.nz>\n+\n+\t* prims.cc (_Jv_NewObjectArray): Make sure byte size doesn't\n+\toverflow a jint.\n+\t(_Jv_NewPrimArray): Check for overflowing a jint, replacing a\n+\tcheck for overflowing size_t, since the lower level functions\n+\ttake a jint.\n+\t* testsuite/libjava.lang/newarray_overflow.java:  New file.\n+\t* testsuite/libjava.lang/newarray_overflow.out:  New file.\n+\t\n 2003-10-15  Michael Koch  <konqueror@gmx.de>\n \n \t* java/text/RuleBasedCollator.java"}, {"sha": "26e88329ed53d280412d8288c7e6985daa4b4b97", "filename": "libjava/prims.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=bf1b388d0ebb654f925fa101f1e23444009f0918", "patch": "@@ -70,8 +70,10 @@ details.  */\n // around for use if we run out of memory.\n static java::lang::OutOfMemoryError *no_memory;\n \n-// Largest representable size_t.\n-#define SIZE_T_MAX ((size_t) (~ (size_t) 0))\n+// Number of bytes in largest array object we create.  This could be\n+// increased to the largest size_t value, so long as the appropriate\n+// functions are changed to take a size_t argument instead of jint.\n+#define MAX_OBJECT_SIZE ((1<<31) - 1)\n \n static const char *no_properties[] = { NULL };\n \n@@ -481,6 +483,11 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n   // Ensure that elements pointer is properly aligned.\n   jobjectArray obj = NULL;\n   size_t size = (size_t) elements (obj);\n+  // Check for overflow.\n+  if (__builtin_expect ((size_t) count > \n+\t\t\t(MAX_OBJECT_SIZE - 1 - size) / sizeof (jobject), false))\n+    throw no_memory;\n+\n   size += count * sizeof (jobject);\n \n   jclass klass = _Jv_GetArrayClass (elementClass,\n@@ -516,7 +523,7 @@ _Jv_NewPrimArray (jclass eltype, jint count)\n \n   // Check for overflow.\n   if (__builtin_expect ((size_t) count > \n-\t\t\t(SIZE_T_MAX - size) / elsize, false))\n+\t\t\t(MAX_OBJECT_SIZE - size) / elsize, false))\n     throw no_memory;\n \n   jclass klass = _Jv_GetArrayClass (eltype, 0);"}, {"sha": "17370b5374e137ffc0afd995d8ed1808774d953f", "filename": "libjava/testsuite/libjava.lang/newarray_overflow.java", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2Ftestsuite%2Flibjava.lang%2Fnewarray_overflow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2Ftestsuite%2Flibjava.lang%2Fnewarray_overflow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fnewarray_overflow.java?ref=bf1b388d0ebb654f925fa101f1e23444009f0918", "patch": "@@ -0,0 +1,88 @@\n+/* This test checks for two slightly different overflow scenarios in\n+ * array allocation.\n+ *\n+ * The first is that the number of bytes needed for an array size\n+ * overflows on a 32 bit machine.\n+ *\n+ * The second is that on a 64 machine, the number of bytes silently\n+ * gets truncated, resulting in too small an object being\n+ * allocated.  */\n+\n+class newarray_overflow\n+{\n+  static boolean failed = false;\n+\n+  static void int_check()\n+  {\n+    int[] x;\n+    try\n+      {\n+\tx = new int [1 << 30];\n+      }\n+    catch (OutOfMemoryError e)\n+      {\n+\treturn;\n+      }\n+    /* If we really get away with it (64 bit machine), that's cool.  */\n+    if (x == null) {\n+      System.err.println (\"int check: new returned null.\");\n+      failed = true;\n+      return;\n+    }\n+    try\n+      {\n+\t// Only check a few places so we don't thrash too badly.\n+\tfor (int i = 0; i < x.length; i += (1 << 24))\n+\t  if (x[i] != 0)\n+\t    failed = true;\n+      }\n+    catch (Throwable e)\n+      {\n+\tSystem.err.print (\"int check: \");\n+\tSystem.err.println (e);\n+\tfailed = true;\n+      }\n+  }\n+\n+  static void object_check()\n+  {\n+    Object[] x;\n+    try\n+      {\n+\tx = new Object [1 << 30];\n+\tSystem.err.println (\"Alloc succeeded.\");\n+\tSystem.err.println (x);\n+      }\n+    catch (OutOfMemoryError e)\n+      {\n+\treturn;\n+      }\n+    /* If we really get away with it (64 bit machine), that's cool.  */\n+    if (x == null) {\n+      System.err.println (\"Object check: new returned null.\");\n+      failed = true;\n+      return;\n+    }\n+    try\n+      {\n+\tfor (int i = 0; i < x.length; i += (1 << 24))\n+\t  if (x[i] != null)\n+\t    failed = true;\n+      }\n+    catch (Throwable e)\n+      {\n+\tSystem.err.print (\"Object check: \");\n+\tSystem.err.println (e);\n+\tfailed = true;\n+      }\n+  }\n+\n+  public static void main (String[] ignore)\n+  {\n+    int_check();\n+    object_check();\n+\n+    if (!failed)\n+      System.out.println (\"ok\");\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/newarray_overflow.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2Ftestsuite%2Flibjava.lang%2Fnewarray_overflow.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b388d0ebb654f925fa101f1e23444009f0918/libjava%2Ftestsuite%2Flibjava.lang%2Fnewarray_overflow.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fnewarray_overflow.out?ref=bf1b388d0ebb654f925fa101f1e23444009f0918", "patch": "@@ -0,0 +1 @@\n+ok"}]}