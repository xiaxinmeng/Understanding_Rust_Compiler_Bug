{"sha": "69940d4d9e914bfda0650a0771e916754dceb573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5NDBkNGQ5ZTkxNGJmZGEwNjUwYTA3NzFlOTE2NzU0ZGNlYjU3Mw==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-05-30T07:15:31Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-05-30T07:15:31Z"}, "message": "re PR tree-optimization/49199 (ICE: in vect_create_epilog_for_reduction at tree-vect-loop.c:3445 with -O -fno-tree-scev-cprop -ftree-vectorize -funswitch-loops)\n\n\n        PR tree-optimization/49199\n        * tree-vect-loop.c (vect_is_slp_reduction): Check that the \n        non-reduction operands are either defined in the loop or\n        by induction.\n\nFrom-SVN: r174425", "tree": {"sha": "28e5571afa7c453a1a2e964f4fceb1f0c029ab5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28e5571afa7c453a1a2e964f4fceb1f0c029ab5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69940d4d9e914bfda0650a0771e916754dceb573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69940d4d9e914bfda0650a0771e916754dceb573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69940d4d9e914bfda0650a0771e916754dceb573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69940d4d9e914bfda0650a0771e916754dceb573/comments", "author": null, "committer": null, "parents": [{"sha": "efd02400d7fbe83178e55716735b4253d36b22fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd02400d7fbe83178e55716735b4253d36b22fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd02400d7fbe83178e55716735b4253d36b22fe"}], "stats": {"total": 138, "additions": 116, "deletions": 22}, "files": [{"sha": "c771214e6725e39557c0b4167d8d0f7c7bfa2678", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69940d4d9e914bfda0650a0771e916754dceb573", "patch": "@@ -1,3 +1,10 @@\n+2011-05-30  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/49199\n+\t* tree-vect-loop.c (vect_is_slp_reduction): Check that the\n+\tnon-reduction operands are either defined in the loop or\n+\tby induction.\n+\n 2011-05-29  Xinliang David Li  <davidxl@google.com>\n \n \t* opts-global.c (handle_common_deferred_options): Handle new options."}, {"sha": "60230d8623bba236c112dd1f5e8a63c3ba33346e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69940d4d9e914bfda0650a0771e916754dceb573", "patch": "@@ -1,3 +1,10 @@\n+2011-05-30  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/49199\n+\t* gcc.dg/vect/no-scevccp-pr49199.c: New test.\n+\t* gcc.dg/vect/vect.exp: Run no-scevccp-pr* tests with\n+\t-fno-tree-scev-cprop.\n+\n 2011-05-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47601"}, {"sha": "0f11142eb7517a80b1f45a2b704b1dd8b84a7481", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-pr49199.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr49199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr49199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr49199.c?ref=69940d4d9e914bfda0650a0771e916754dceb573", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int const_bar (void) __attribute__ ((__const__));\n+int pure_bar (void) __attribute__ ((__pure__));\n+\n+int foo (void)\n+{\n+  int i = 0, x = 0;\n+  for (; i < 100; i++)\n+    {\n+\tx += const_bar ();\n+\tx += pure_bar ();\n+    }\n+  return x;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e0821d0f514b754220ae074743a687349a9ef8ef", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=69940d4d9e914bfda0650a0771e916754dceb573", "patch": "@@ -173,6 +173,12 @@ lappend DEFAULT_VECTCFLAGS \"-fno-tree-scev-cprop\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-scevccp-vect-*.\\[cS\\]]]  \\\n         \"\" $DEFAULT_VECTCFLAGS\n \n+# -fno-tree-scev-cprop\n+set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n+lappend DEFAULT_VECTCFLAGS \"-fno-tree-scev-cprop\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-scevccp-pr*.\\[cS\\]]]  \\\n+        \"\" $DEFAULT_VECTCFLAGS\n+\n # -fno-tree-scev-cprop\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"-fno-tree-scev-cprop\""}, {"sha": "c9d0c460b624ea7d9c17898ed3818adda122222f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 78, "deletions": 22, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69940d4d9e914bfda0650a0771e916754dceb573/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=69940d4d9e914bfda0650a0771e916754dceb573", "patch": "@@ -1700,7 +1700,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n   enum tree_code code;\n-  gimple current_stmt = NULL, use_stmt = NULL, first;\n+  gimple current_stmt = NULL, use_stmt = NULL, first, next_stmt;\n   stmt_vec_info use_stmt_info, current_stmt_info;\n   tree lhs;\n   imm_use_iterator imm_iter;\n@@ -1778,36 +1778,92 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   if (!found || use_stmt != phi || size < 2)\n     return false;\n \n-  /* Save the chain for further analysis in SLP detection.  */\n-  first = GROUP_FIRST_ELEMENT (vinfo_for_stmt (current_stmt));\n-  VEC_safe_push (gimple, heap, LOOP_VINFO_REDUCTION_CHAINS (loop_info), first);\n-  GROUP_SIZE (vinfo_for_stmt (first)) = size;\n-\n   /* Swap the operands, if needed, to make the reduction operand be the second\n      operand.  */\n   lhs = PHI_RESULT (phi);\n-  current_stmt = first;\n-  while (current_stmt)\n+  next_stmt = GROUP_FIRST_ELEMENT (vinfo_for_stmt (current_stmt));\n+  while (next_stmt)\n     {\n-      if (get_gimple_rhs_class (code) == GIMPLE_BINARY_RHS\n-          && gimple_assign_rhs2 (current_stmt) != lhs)\n-        {\n-          if (vect_print_dump_info (REPORT_DETAILS))\n-            {\n-              fprintf (vect_dump, \"swapping oprnds: \");\n-              print_gimple_stmt (vect_dump, current_stmt, 0, TDF_SLIM);\n-            }\n+      if (get_gimple_rhs_class (code) == GIMPLE_BINARY_RHS)\n+\t{\n+          if (gimple_assign_rhs2 (next_stmt) == lhs)\n+\t    {\n+\t      tree op = gimple_assign_rhs1 (next_stmt);\n+              gimple def_stmt = NULL;\n+\n+              if (TREE_CODE (op) == SSA_NAME)\n+                def_stmt = SSA_NAME_DEF_STMT (op);\n+\n+\t      /* Check that the other def is either defined in the loop\n+\t\t (\"vect_internal_def\"), or it's an induction (defined by a\n+\t\t loop-header phi-node).  */\n+\t      if (code == COND_EXPR\n+                  || (def_stmt\n+\t\t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n+                      && (is_gimple_assign (def_stmt)\n+                          || is_gimple_call (def_stmt)\n+                          || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                              == vect_induction_def\n+                          || (gimple_code (def_stmt) == GIMPLE_PHI\n+                              && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                                  == vect_internal_def\n+                              && !is_loop_header_bb_p (gimple_bb (def_stmt))))))\n+\t\t{\n+\t\t  lhs = gimple_assign_lhs (next_stmt);\n+\t\t  next_stmt = GROUP_NEXT_ELEMENT (vinfo_for_stmt (next_stmt));\n+ \t\t  continue;\n+\t\t}\n+\n+\t      return false;\n+\t    }\n+\t  else\n+\t    {\n+              tree op = gimple_assign_rhs2 (next_stmt);\n+              gimple def_stmt = NULL;\n+\n+              if (TREE_CODE (op) == SSA_NAME)\n+                def_stmt = SSA_NAME_DEF_STMT (op);\n+\n+              /* Check that the other def is either defined in the loop\n+                 (\"vect_internal_def\"), or it's an induction (defined by a\n+                 loop-header phi-node).  */\n+              if (code == COND_EXPR\n+                  || (def_stmt\n+\t\t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n+                      && (is_gimple_assign (def_stmt)\n+                          || is_gimple_call (def_stmt)\n+                          || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                              == vect_induction_def\n+                          || (gimple_code (def_stmt) == GIMPLE_PHI\n+                              && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                                  == vect_internal_def\n+                              && !is_loop_header_bb_p (gimple_bb (def_stmt))))))\n+\t\t{\n+\t\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t\t    {\n+\t\t      fprintf (vect_dump, \"swapping oprnds: \");\n+\t\t      print_gimple_stmt (vect_dump, next_stmt, 0, TDF_SLIM);\n+\t\t    }\n \n-          swap_tree_operands (current_stmt,\n-\t\t\t      gimple_assign_rhs1_ptr (current_stmt),\n-                              gimple_assign_rhs2_ptr (current_stmt));\n-          mark_symbols_for_renaming (current_stmt);\n+\t\t  swap_tree_operands (next_stmt,\n+\t\t\t      gimple_assign_rhs1_ptr (next_stmt),\n+                              gimple_assign_rhs2_ptr (next_stmt));\n+\t\t  mark_symbols_for_renaming (next_stmt);\n+\t\t}\n+\t      else\n+\t\treturn false;\n+\t    }\n         }\n \n-      lhs = gimple_assign_lhs (current_stmt);\n-      current_stmt = GROUP_NEXT_ELEMENT (vinfo_for_stmt (current_stmt));\n+      lhs = gimple_assign_lhs (next_stmt);\n+      next_stmt = GROUP_NEXT_ELEMENT (vinfo_for_stmt (next_stmt));\n     }\n \n+  /* Save the chain for further analysis in SLP detection.  */\n+  first = GROUP_FIRST_ELEMENT (vinfo_for_stmt (current_stmt));\n+  VEC_safe_push (gimple, heap, LOOP_VINFO_REDUCTION_CHAINS (loop_info), first);\n+  GROUP_SIZE (vinfo_for_stmt (first)) = size;\n+\n   return true;\n }\n "}]}