{"sha": "a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiOTY5YTBkMjk0OTYzZTJlMjMxM2ZjMGI3MWQwYzIxYmJiMzE2Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-02T13:48:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-02T13:48:11Z"}, "message": "re PR tree-optimization/37327 (another ice in set_value_range, at tree-vrp.c:397)\n\n2008-09-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37327\n\t* tree-vrp.c (register_new_assert_for): Make sure to not have\n\tTREE_OVERFLOW set on the bound.\n\n\t* gcc.c-torture/compile/pr37327.c: New testcase.\n\nFrom-SVN: r139890", "tree": {"sha": "32d10dcbf13033544a6e54f90e9631d112fa804b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d10dcbf13033544a6e54f90e9631d112fa804b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ab5df48711b7763df629810fa754d65d1eebb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab5df48711b7763df629810fa754d65d1eebb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab5df48711b7763df629810fa754d65d1eebb7c"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "0766ec35d104964e7d27fd4f33b468e99d2dfd9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "patch": "@@ -1,3 +1,9 @@\n+2008-09-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37327\n+\t* tree-vrp.c (register_new_assert_for): Make sure to not have\n+\tTREE_OVERFLOW set on the bound.\n+\n 2008-09-02  Alexander Monakov  <amonakov@ispras.ru>\n \n \tFixed typo in date of the 2008-09-01 MOVE_RATIO commit."}, {"sha": "fa07075d089595ad4abebe828f2dd40b564da792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "patch": "@@ -1,3 +1,8 @@\n+2008-09-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37327\n+\t* gcc.c-torture/compile/pr37327.c: New testcase.\n+\n 2008-09-02  Victor Kaplansky  <victork@il.ibm.com>\n \n \t* gcc.dg/fastmath-2.c: New."}, {"sha": "7041d834ea2dc7b0349b9fc5773bb66bf71aa474", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37327.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37327.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37327.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37327.c?ref=a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "patch": "@@ -0,0 +1,48 @@\n+typedef signed char int8_t;\n+typedef short int int16_t;\n+typedef int int32_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+static inline uint32_t\n+safe_add_int8_t_s_s (int8_t si1, int16_t si2)\n+{\n+  if ((si1) && (si2) && (si1 > (1 - si2)) || (si1) && (si2 < 0)\n+      && (si1 < (-128 - si2)))\n+    return si1;\n+  return si1 + si2;\n+}\n+\n+uint32_t g_2;\n+uint32_t g_113;\n+uint32_t g_145;\n+int32_t\n+func_17 (int32_t p_18, uint32_t p_19, uint32_t p_21)\n+{\n+  uint32_t l_23 = -1L;\n+  return l_23;\n+}\n+\n+uint32_t\n+func_26 (uint16_t p_27)\n+{\n+  uint32_t l_424;\n+  if (func_93 (func_59 (safe_add_int8_t_s_s (p_27, 1))),\n+      func_124 (l_424, -7L, 1, g_145, 1, (safe_add_int8_t_s_s (1, 1)), 1), 1,\n+      1, 1)\n+    func_117 (1, 1,\n+              (safe_add_uint64_t_u_u\n+               (1, (safe_add_int8_t_s_s (1, 0xCDF4BE7A1B7E4629LL)))), 1);\n+  uint32_t l_210;\n+  if (func_17\n+      ((safe_add_int8_t_s_s (g_2, (0x6C79A83AL | func_17 (1, 1, 1)))),\n+       0x4C9FL, 1))\n+    {\n+      uint32_t l_212;\n+      if (safe_mul_int32_t_s_s\n+          ((1, 1, l_212, (1, (safe_add_int8_t_s_s (l_210, 1)), 1, 1)), 1))\n+        if (func_59 (1, (safe_add_int8_t_s_s (g_113, 1))))\n+          {\n+          }\n+    }\n+}\n+"}, {"sha": "8db35ca42d92f4689f3f4d7afdba16fa52d81b9d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b969a0d294963e2e2313fc0b71d0c21bbb316b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "patch": "@@ -3785,6 +3785,14 @@ register_new_assert_for (tree name, tree expr,\n \t\t&& gimple_code (gsi_stmt (si)) != GIMPLE_SWITCH);\n #endif\n \n+  /* Never build an assert comparing against an integer constant with\n+     TREE_OVERFLOW set.  This confuses our undefined overflow warning\n+     machinery.  */\n+  if (TREE_CODE (val) == INTEGER_CST\n+      && TREE_OVERFLOW (val))\n+    val = build_int_cst_wide (TREE_TYPE (val),\n+\t\t\t      TREE_INT_CST_LOW (val), TREE_INT_CST_HIGH (val));\n+\n   /* The new assertion A will be inserted at BB or E.  We need to\n      determine if the new location is dominated by a previously\n      registered location for A.  If we are doing an edge insertion,"}]}