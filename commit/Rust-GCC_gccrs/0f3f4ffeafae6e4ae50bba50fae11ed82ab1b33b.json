{"sha": "0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzZjRmZmVhZmFlNmU0YWU1MGJiYTUwZmFlMTFlZDgyYWIxYjMzYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-01T08:34:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-01T08:34:48Z"}, "message": "re PR tree-optimization/79734 (ICE: verify_gimple failed)\n\n\tPR tree-optimization/79734\n\t* tree-vect-generic.c (expand_vector_condition): Optimize\n\tAVX512 vector boolean VEC_COND_EXPRs into bitwise operations.\n\tHandle VEC_COND_EXPR where comparison has different inner width from\n\ttype's inner width.\n\n\t* g++.dg/opt/pr79734.C: New test.\n\nFrom-SVN: r245801", "tree": {"sha": "bf1b996fc080c3fcadcec432a2c5fdb661369a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1b996fc080c3fcadcec432a2c5fdb661369a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e287080d1cb1d53066778275b8b0f43a7548e804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e287080d1cb1d53066778275b8b0f43a7548e804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e287080d1cb1d53066778275b8b0f43a7548e804"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "12ee03af80006345f8ecdf70c820f8f8de56b4f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "patch": "@@ -1,3 +1,11 @@\n+2017-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79734\n+\t* tree-vect-generic.c (expand_vector_condition): Optimize\n+\tAVX512 vector boolean VEC_COND_EXPRs into bitwise operations.\n+\tHandle VEC_COND_EXPR where comparison has different inner width from\n+\ttype's inner width.\n+\n 2017-02-28  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (ARC Options): Copy-edit to fix punctuation,"}, {"sha": "369233795c5a95fb1461a30bbb2d943b4e4f5df0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "patch": "@@ -1,3 +1,8 @@\n+2017-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79734\n+\t* g++.dg/opt/pr79734.C: New test.\n+\n 2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79737"}, {"sha": "ec9d4616c0d1fc8dcd7d6e30e59889a6a5a49061", "filename": "gcc/testsuite/g++.dg/opt/pr79734.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79734.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79734.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79734.C?ref=0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "patch": "@@ -0,0 +1,12 @@\n+// PR tree-optimization/79734\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-mavx512vl\" { target i?86-*-* x86_64-*-* } }\n+\n+typedef float V __attribute__ ((vector_size (4 * sizeof (float))));\n+\n+void\n+foo (V *a, V *b)\n+{\n+  *a = (*a < 1 && !(*b > 2)) ? *a + *b : 3;\n+}"}, {"sha": "c1b3c24a0b4de526ae8c6752c30ccfd02e0619a3", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b", "patch": "@@ -865,6 +865,8 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   tree comp_inner_type = cond_type;\n   tree width = TYPE_SIZE (inner_type);\n   tree index = bitsize_int (0);\n+  tree comp_width = width;\n+  tree comp_index = index;\n   int nunits = TYPE_VECTOR_SUBPARTS (type);\n   int i;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n@@ -876,34 +878,72 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n       a1 = TREE_OPERAND (a, 0);\n       a2 = TREE_OPERAND (a, 1);\n       comp_inner_type = TREE_TYPE (TREE_TYPE (a1));\n+      comp_width = TYPE_SIZE (comp_inner_type);\n     }\n \n   if (expand_vec_cond_expr_p (type, TREE_TYPE (a1), TREE_CODE (a)))\n     return;\n \n+  /* Handle vector boolean types with bitmasks.  If there is a comparison\n+     and we can expand the comparison into the vector boolean bitmask,\n+     or otherwise if it is compatible with type, we can transform\n+      vbfld_1 = x_2 < y_3 ? vbfld_4 : vbfld_5;\n+     into\n+      tmp_6 = x_2 < y_3;\n+      tmp_7 = tmp_6 & vbfld_4;\n+      tmp_8 = ~tmp_6;\n+      tmp_9 = tmp_8 & vbfld_5;\n+      vbfld_1 = tmp_7 | tmp_9;\n+     Similarly for vbfld_10 instead of x_2 < y_3.  */\n+  if (VECTOR_BOOLEAN_TYPE_P (type)\n+      && SCALAR_INT_MODE_P (TYPE_MODE (type))\n+      && (GET_MODE_BITSIZE (TYPE_MODE (type))\n+\t  < (TYPE_VECTOR_SUBPARTS (type)\n+\t     * GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (type)))))\n+      && (a_is_comparison\n+\t  ? useless_type_conversion_p (type, TREE_TYPE (a))\n+\t  : expand_vec_cmp_expr_p (TREE_TYPE (a1), type, TREE_CODE (a))))\n+    {\n+      if (a_is_comparison)\n+\ta = gimplify_build2 (gsi, TREE_CODE (a), type, a1, a2);\n+      a1 = gimplify_build2 (gsi, BIT_AND_EXPR, type, a, b);\n+      a2 = gimplify_build1 (gsi, BIT_NOT_EXPR, type, a);\n+      a2 = gimplify_build2 (gsi, BIT_AND_EXPR, type, a2, c);\n+      a = gimplify_build2 (gsi, BIT_IOR_EXPR, type, a1, a2);\n+      gimple_assign_set_rhs_from_tree (gsi, a);\n+      update_stmt (gsi_stmt (*gsi));\n+      return;\n+    }\n+\n   /* TODO: try and find a smaller vector type.  */\n \n   warning_at (loc, OPT_Wvector_operation_performance,\n \t      \"vector condition will be expanded piecewise\");\n \n   vec_alloc (v, nunits);\n-  for (i = 0; i < nunits;\n-       i++, index = int_const_binop (PLUS_EXPR, index, width))\n+  for (i = 0; i < nunits; i++)\n     {\n       tree aa, result;\n       tree bb = tree_vec_extract (gsi, inner_type, b, width, index);\n       tree cc = tree_vec_extract (gsi, inner_type, c, width, index);\n       if (a_is_comparison)\n \t{\n-\t  tree aa1 = tree_vec_extract (gsi, comp_inner_type, a1, width, index);\n-\t  tree aa2 = tree_vec_extract (gsi, comp_inner_type, a2, width, index);\n+\t  tree aa1 = tree_vec_extract (gsi, comp_inner_type, a1,\n+\t\t\t\t       comp_width, comp_index);\n+\t  tree aa2 = tree_vec_extract (gsi, comp_inner_type, a2,\n+\t\t\t\t       comp_width, comp_index);\n \t  aa = fold_build2 (TREE_CODE (a), cond_type, aa1, aa2);\n \t}\n       else\n \taa = tree_vec_extract (gsi, cond_type, a, width, index);\n       result = gimplify_build3 (gsi, COND_EXPR, inner_type, aa, bb, cc);\n       constructor_elt ce = {NULL_TREE, result};\n       v->quick_push (ce);\n+      index = int_const_binop (PLUS_EXPR, index, width);\n+      if (width == comp_width)\n+\tcomp_index = index;\n+      else\n+\tcomp_index = int_const_binop (PLUS_EXPR, comp_index, comp_width);\n     }\n \n   constr = build_constructor (type, v);"}]}