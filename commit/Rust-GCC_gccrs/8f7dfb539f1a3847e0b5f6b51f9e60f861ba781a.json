{"sha": "8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3ZGZiNTM5ZjFhMzg0N2UwYjVmNmI1MWY5ZTYwZjg2MWJhNzgxYQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-06-17T19:15:22Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-17T19:15:22Z"}, "message": "ClassNotFoundException.java: New Classpath version.\n\n2002-06-17  Nathanael Nerode  <neroden@twcny.rr.com>\n\n\t* java/lang/ClassNotFoundException.java: New Classpath version.\n\nFrom-SVN: r54713", "tree": {"sha": "2713f00ca76a6a53a389e4b99c8abe1dec1959b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2713f00ca76a6a53a389e4b99c8abe1dec1959b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a/comments", "author": null, "committer": null, "parents": [{"sha": "7f11f1f9acf17ad128e1850d7dde09d4089bd49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f11f1f9acf17ad128e1850d7dde09d4089bd49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f11f1f9acf17ad128e1850d7dde09d4089bd49e"}], "stats": {"total": 174, "additions": 64, "deletions": 110}, "files": [{"sha": "508122709dfe6c0d7a461bc77731284f277587ce", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a", "patch": "@@ -1,3 +1,7 @@\n+2002-06-17  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* java/lang/ClassNotFoundException.java: New Classpath version.\n+\n 2002-06-17  Nathanael Nerode  <neroden@twcny.rr.com>\n \n \t* java/rmi/activation/ActivateFailedException.java: Remerge from"}, {"sha": "cb546602e56dc9bdeefc4f772f5e403d16f00e96", "filename": "libjava/java/lang/ClassNotFoundException.java", "status": "modified", "additions": 60, "deletions": 110, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a/libjava%2Fjava%2Flang%2FClassNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a/libjava%2Fjava%2Flang%2FClassNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassNotFoundException.java?ref=8f7dfb539f1a3847e0b5f6b51f9e60f861ba781a", "patch": "@@ -1,14 +1,13 @@\n-/* ClassNotFoundException.java -- exception thrown when attempting to load\n-   a class when no definition for the class can be found.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* ClassNotFoundException.java -- thrown when class definition cannot be found\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,137 +38,88 @@ a class when no definition for the class can be found.\n \n package java.lang;\n \n-import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  This \n- * exception can by thrown by specific methods of <code>ClassLoader</code>\n- * and <code>Class</code> when attempting to load a class when no definition\n- * for the specified class can be found.\n+ * Thrown when a class is requested by reflection, but the class definition\n+ * cannot be found. This exception is often chained from another Throwable.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Class#forName(String)\n+ * @see ClassLoader#findSystemClass(String)\n+ * @see ClassLoader#loadClass(String, boolean)\n+ * @status updated to 1.4\n  */\n public class ClassNotFoundException extends Exception\n {\n-  static final long serialVersionUID = 9176873029745254542L;\n-\n-  private Throwable ex = null;\n-  \n   /**\n-   * Create an exception without a message.\n+   * Compatible with JDK 1.0+.\n    */\n-  public ClassNotFoundException()\n-    {\n-      super();\n-    }\n+  private static final long serialVersionUID = 9176873029745254542L;\n \n   /**\n-   * Create an exception with a message.\n-   */\n-  public ClassNotFoundException(String s)\n-    {\n-      super(s);\n-    }\n-\n-  /**\n-   * Create an exception with a message and include the exception \n-   * which occurred while loading the class.\n-   *\n-   * @param ex the exception which occurred while loading the class\n+   * The cause of this exception (duplicates the one stored in Throwable).\n    *\n-   * @since JDK 1.2\n+   * @serial the exception cause\n+   * @since 1.2\n    */\n-  public ClassNotFoundException(String s, Throwable ex)\n-    {\n-      super(s);\n-      this.ex = ex;\n-    }\n+  private final Throwable ex;\n \n   /**\n-   * Returns the exception which occurred while loading the class, \n-   * otherwise returns null.\n-   * \n-   * @since JDK 1.2\n+   * Create an exception without a message. Note that this initializes the\n+   * cause to null.\n    */\n-  public Throwable getException()\n-    {\n-      return ex;\n-    }\n+  public ClassNotFoundException()\n+  {\n+    this(null, null);\n+  }\n \n   /**\n-   * Print a stack trace of the exception that occurred.\n+   * Create an exception with a message. Note that this initializes the\n+   * cause to null.\n+   *\n+   * @param s the message\n    */\n-  public void printStackTrace()\n-    {\n-      if (ex == null)\n-        {\n-          super.printStackTrace();\n-        }\n-      else\n-        {\n-          ex.printStackTrace();\n-        }\n-    }\n+  public ClassNotFoundException(String s)\n+  {\n+    this(s, null);\n+  }\n \n   /**\n-   * Print a stack trace of the exception that occurred to \n-   * the specified <code>PrintStream</code>.\n+   * Create an exception with a message and chain it to the exception\n+   * which occurred while loading the class.\n+   *\n+   * @param s the message\n+   * @param ex the chained exception\n+   * @since 1.2\n    */\n-  public void printStackTrace(PrintStream ps)\n-    {\n-      if (ex == null)\n-        {\n-          super.printStackTrace(ps);\n-        }\n-      else\n-        {\n-          ex.printStackTrace(ps);\n-        }\n-    }\n+  public ClassNotFoundException(String s, Throwable ex)\n+  {\n+    super(s, ex);\n+    this.ex = ex;\n+  }\n \n   /**\n-   * Print a stack trace of the exception that occurred to \n-   * the specified <code>PrintWriter</code>.\n+   * Returns the exception which occurred while loading the class,\n+   * otherwise returns null. This is a legacy method; the preferred choice\n+   * now is {@link Throwable#getCause()}.\n+   *\n+   * @return the cause of this exception\n+   * @since 1.2\n    */\n-  public void printStackTrace(PrintWriter pw)\n-    {\n-      if (ex == null)\n-        {\n-          super.printStackTrace(pw);\n-        }\n-      else\n-        {\n-          ex.printStackTrace(pw);\n-        }\n-    }\n+  public Throwable getException()\n+  {\n+    return ex;\n+  }\n \n   /**\n-   * Serialize the object in a manner binary compatible with the JDK 1.2\n+   * Returns the exception which occurred while loading the class,\n+   * otherwise returns null.\n+   *\n+   * @return the cause of this exception\n+   * @since 1.4\n    */\n-  private void writeObject(java.io.ObjectOutputStream s) \n-    throws IOException\n-    {\n-      ObjectOutputStream.PutField oFields;\n-      oFields = s.putFields();\n-      oFields.put(\"ex\", this.ex);\n-      s.writeFields(); \n-    }\n-\n-  /**\n-   * Deserialize the object in a manner binary compatible with the JDK 1.2\n-   */    \n-  private void readObject(java.io.ObjectInputStream s)\n-    throws IOException, ClassNotFoundException\n-    {\n-      ObjectInputStream.GetField oFields;\n-      oFields = s.readFields();\n-      ex = (Throwable)oFields.get(\"ex\", (Throwable)null);\n-    }\n+  public Throwable getCause()\n+  {\n+    return ex;\n+  }\n }"}]}