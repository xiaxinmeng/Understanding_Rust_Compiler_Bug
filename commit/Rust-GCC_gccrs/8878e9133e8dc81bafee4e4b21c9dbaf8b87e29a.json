{"sha": "8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3OGU5MTMzZThkYzgxYmFmZWU0ZTRiMjFjOWRiYWY4Yjg3ZTI5YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-12T14:18:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-12T14:18:56Z"}, "message": "builtins.c (expand_builtin_memcmp): Do expansion even with !HAVE_cmpstrsi, do libcall when gen_strcmpsi fails.\n\n\t* builtins.c (expand_builtin_memcmp): Do expansion even with\n\t!HAVE_cmpstrsi, do libcall when gen_strcmpsi fails.\n\nFrom-SVN: r33107", "tree": {"sha": "45c7057fb9d4c1fc610166788acd0e6469c79af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45c7057fb9d4c1fc610166788acd0e6469c79af9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a/comments", "author": null, "committer": null, "parents": [{"sha": "ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "b06b6472d0d5b950374c9f364e8a5e5178df9663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a", "patch": "@@ -1,5 +1,8 @@\n Wed Apr 12 15:54:11 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n+\t* builtins.c (expand_builtin_memcmp): Do expansion even with\n+\t!HAVE_cmpstrsi, do libcall when gen_strcmpsi fails.\n+\n \t* calls.c (expand_call): Do NO_DEFER_POP unconditionally once\n \tstack is propertly aligned; add sanity checking for aligned\n \tstack pointer."}, {"sha": "9159a1b2c8f51e7dfb0418b9383ade291586ab3e", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8878e9133e8dc81bafee4e4b21c9dbaf8b87e29a", "patch": "@@ -1628,15 +1628,15 @@ expand_builtin_memcmp (exp, arglist, target)\n       || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n       || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n     return 0;\n-  else if (!HAVE_cmpstrsi)\n-    return 0;\n \n   {\n     enum machine_mode mode;\n     tree arg1 = TREE_VALUE (arglist);\n     tree arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n     tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+    rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result;\n+    rtx insn;\n \n     int arg1_align\n       = get_pointer_alignment (arg1, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -1656,10 +1656,25 @@ expand_builtin_memcmp (exp, arglist, target)\n \t   && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n       result = gen_reg_rtx (insn_mode);\n \n-    emit_insn (gen_cmpstrsi (result, get_memory_rtx (arg1),\n-\t\t\t     get_memory_rtx (arg2),\n-\t\t\t     expand_expr (len, NULL_RTX, VOIDmode, 0),\n-\t\t\t     GEN_INT (MIN (arg1_align, arg2_align))));\n+    arg1_rtx = get_memory_rtx (arg1);\n+    arg2_rtx = get_memory_rtx (arg2);\n+    arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+    if (!HAVE_cmpstrsi)\n+      insn = NULL_RTX;\n+    else\n+      insn = gen_cmpstrsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n+\t\t\t   GEN_INT (MIN (arg1_align, arg2_align)));\n+\n+    if (insn)\n+      emit_insn (insn);\n+    else\n+      emit_library_call_value (memcmp_libfunc, result, 2,\n+\t\t\t       TYPE_MODE (integer_type_node), 3,\n+\t\t\t       XEXP (arg1_rtx, 0), Pmode,\n+\t\t\t       XEXP (arg2_rtx, 0), Pmode,\n+\t\t\t       convert_to_mode (TYPE_MODE (sizetype), arg3_rtx,\n+\t\t\t\t\t\tTREE_UNSIGNED (sizetype)),\n+\t\t\t       TYPE_MODE (sizetype));\n \n     /* Return the value in the proper mode for this function.  */\n     mode = TYPE_MODE (TREE_TYPE (exp));"}]}