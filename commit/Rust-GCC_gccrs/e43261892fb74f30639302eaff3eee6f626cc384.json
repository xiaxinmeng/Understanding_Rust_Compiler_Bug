{"sha": "e43261892fb74f30639302eaff3eee6f626cc384", "node_id": "C_kwDOANBUbNoAKGU0MzI2MTg5MmZiNzRmMzA2MzkzMDJlYWZmM2VlZTZmNjI2Y2MzODQ", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-06-12T15:07:13Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-13T08:46:22Z"}, "message": "gccrs: ensure assoicated types are setup for concrete trait impl blocks\n\nWe have been concentrating on generic impl blocks for so long that we have\nnot handled the simple concrete impl block case where associated types need\nto be setup when compling a function/method on a trait impl block which\nuses associated types.\n\nAddresses #2019\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-item.cc (CompileItem::visit): ensure assoicated types are setup\n\t* typecheck/rust-hir-trait-reference.h: new interface for concrete impl block\n\t* typecheck/rust-hir-trait-resolve.cc (AssociatedImplTrait::setup_raw_associated_types):\n\tensure we setup assoicated types for this impl block\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2019-1.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "836018b58c26e09b2bbbb9b71ab5b9b2604ca739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836018b58c26e09b2bbbb9b71ab5b9b2604ca739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e43261892fb74f30639302eaff3eee6f626cc384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43261892fb74f30639302eaff3eee6f626cc384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43261892fb74f30639302eaff3eee6f626cc384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43261892fb74f30639302eaff3eee6f626cc384/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e945f055f2d2dd972e20380c2df69a62912be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e945f055f2d2dd972e20380c2df69a62912be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e945f055f2d2dd972e20380c2df69a62912be7"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "4a01cf714fa2d26de407713a4d48d31dd28729cc", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=e43261892fb74f30639302eaff3eee6f626cc384", "patch": "@@ -133,6 +133,23 @@ CompileItem::visit (HIR::Function &function)\n \t  fntype->monomorphize ();\n \t}\n     }\n+  else\n+    {\n+      // if this is part of a trait impl block which is not generic we need to\n+      // ensure associated types are setup\n+      HirId parent_impl_block = UNKNOWN_HIRID;\n+      HirId id = function.get_mappings ().get_hirid ();\n+      HIR::ImplItem *impl_item\n+\t= ctx->get_mappings ()->lookup_hir_implitem (id, &parent_impl_block);\n+      if (impl_item != nullptr)\n+\t{\n+\t  Resolver::AssociatedImplTrait *impl = nullptr;\n+\t  bool found = ctx->get_tyctx ()->lookup_associated_trait_impl (\n+\t    parent_impl_block, &impl);\n+\t  if (found)\n+\t    impl->setup_raw_associated_types ();\n+\t}\n+    }\n \n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   bool ok = ctx->get_mappings ()->lookup_canonical_path ("}, {"sha": "91621a23bcc3ceadc2062bc0aff297164e0348bd", "filename": "gcc/rust/typecheck/rust-hir-trait-reference.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-reference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-reference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-reference.h?ref=e43261892fb74f30639302eaff3eee6f626cc384", "patch": "@@ -249,6 +249,8 @@ class AssociatedImplTrait\n   TyTy::BaseType *get_self ();\n   const TyTy::BaseType *get_self () const;\n \n+  void setup_raw_associated_types ();\n+\n   TyTy::BaseType *\n   setup_associated_types (const TyTy::BaseType *self,\n \t\t\t  const TyTy::TypeBoundPredicate &bound);"}, {"sha": "d7eb16dcb3442d68f674f3cb0f65bbacafd73741", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=e43261892fb74f30639302eaff3eee6f626cc384", "patch": "@@ -400,6 +400,36 @@ TraitItemReference::associated_type_reset (bool only_projections) const\n     }\n }\n \n+void\n+AssociatedImplTrait::setup_raw_associated_types ()\n+{\n+  auto &impl_items = impl->get_impl_items ();\n+  for (auto &impl_item : impl_items)\n+    {\n+      bool is_type_alias = impl_item->get_impl_item_type ()\n+\t\t\t   == HIR::ImplItem::ImplItemType::TYPE_ALIAS;\n+      if (!is_type_alias)\n+\tcontinue;\n+\n+      HIR::TypeAlias &type = *static_cast<HIR::TypeAlias *> (impl_item.get ());\n+\n+      TraitItemReference *resolved_trait_item = nullptr;\n+      bool ok = trait->lookup_trait_item (type.get_new_type_name (),\n+\t\t\t\t\t  &resolved_trait_item);\n+      if (!ok)\n+\tcontinue;\n+      if (resolved_trait_item->get_trait_item_type ()\n+\t  != TraitItemReference::TraitItemType::TYPE)\n+\tcontinue;\n+\n+      TyTy::BaseType *lookup;\n+      ok = context->lookup_type (type.get_mappings ().get_hirid (), &lookup);\n+      rust_assert (ok);\n+\n+      resolved_trait_item->associated_type_set (lookup);\n+    }\n+}\n+\n TyTy::BaseType *\n AssociatedImplTrait::setup_associated_types (\n   const TyTy::BaseType *self, const TyTy::TypeBoundPredicate &bound)"}, {"sha": "f359ea4fb15def1cc8e129c4d17537b08b8b102d", "filename": "gcc/testsuite/rust/compile/issue-2019-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2019-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43261892fb74f30639302eaff3eee6f626cc384/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2019-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2019-1.rs?ref=e43261892fb74f30639302eaff3eee6f626cc384", "patch": "@@ -0,0 +1,22 @@\n+#[lang = \"add\"]\n+pub trait Add<RHS = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl Add for u32 {\n+    type Output = u32;\n+\n+    fn add(self, other: u32) -> u32 {\n+        self + other\n+    }\n+}\n+\n+impl<'a> Add<u32> for &'a u32 {\n+    type Output = <u32 as Add<u32>>::Output;\n+\n+    fn add(self, other: u32) -> <u32 as Add<u32>>::Output {\n+        Add::add(*self, other)\n+    }\n+}"}]}