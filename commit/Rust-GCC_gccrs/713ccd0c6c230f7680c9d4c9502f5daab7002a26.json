{"sha": "713ccd0c6c230f7680c9d4c9502f5daab7002a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzY2NkMGM2YzIzMGY3NjgwYzlkNGM5NTAyZjVkYWFiNzAwMmEyNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-12-04T09:48:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-12-04T09:48:53Z"}, "message": "re PR c++/164 (bogus error throwing class with inaccessible base)\n\ncp:\n\tPR g++/164\n\t* init.c (sort_base_init): Allow binfos to be directly specified.\n\t* method.c (do_build_copy_constructor): Explicitly convert to the\n\tbase instance.\n\t(do_build_assign_ref): Likewise.\ntestsuite:\n\t* g++.dg/inherit/base1.C: New test.\n\nFrom-SVN: r47603", "tree": {"sha": "f877292b1f2f08518c8e2c8a040ed40556594a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f877292b1f2f08518c8e2c8a040ed40556594a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/713ccd0c6c230f7680c9d4c9502f5daab7002a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713ccd0c6c230f7680c9d4c9502f5daab7002a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713ccd0c6c230f7680c9d4c9502f5daab7002a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713ccd0c6c230f7680c9d4c9502f5daab7002a26/comments", "author": null, "committer": null, "parents": [{"sha": "b318748ff4b6a9256695a3e768d4a951dd4b8ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b318748ff4b6a9256695a3e768d4a951dd4b8ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b318748ff4b6a9256695a3e768d4a951dd4b8ca6"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "d869b0d51ba4e6980e684aca8ce73894c419ac14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=713ccd0c6c230f7680c9d4c9502f5daab7002a26", "patch": "@@ -1,3 +1,11 @@\n+2001-12-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR g++/164\n+\t* init.c (sort_base_init): Allow binfos to be directly specified.\n+\t* method.c (do_build_copy_constructor): Explicitly convert to the\n+\tbase instance.\n+\t(do_build_assign_ref): Likewise.\n+\n 2001-12-03  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* decl.c (xref_basetypes): Don't use C99 construct in tag_code"}, {"sha": "169bc8c07a0bdbcdba2577d7c0dd46bc7996f2d2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=713ccd0c6c230f7680c9d4c9502f5daab7002a26", "patch": "@@ -556,7 +556,8 @@ sort_base_init (t, base_init_list, rbase_ptr, vbase_ptr)\n   for (x = TREE_CHAIN (last); x; x = TREE_CHAIN (x))\n     {\n       tree basetype = TREE_PURPOSE (x);\n-      tree binfo = binfo_or_else (basetype, t);\n+      tree binfo = (TREE_CODE (basetype) == TREE_VEC\n+\t\t    ? basetype : binfo_or_else (basetype, t));\n       \n       if (binfo == NULL_TREE)\n \t/* BASETYPE might be an inaccessible direct base (because it"}, {"sha": "2424623a4b448ffc5c0e24a5cd39035212c68b15", "filename": "gcc/cp/method.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=713ccd0c6c230f7680c9d4c9502f5daab7002a26", "patch": "@@ -554,25 +554,31 @@ do_build_copy_constructor (fndecl)\n       int cvquals = cp_type_quals (TREE_TYPE (parm));\n       int i;\n \n-      /* Initialize all the base-classes with the parameter converted to\n-         their type so that we get their copy constructor and not another\n-         constructor that takes current_class_type.  */\n+      /* Initialize all the base-classes with the parameter converted\n+\t to their type so that we get their copy constructor and not\n+\t another constructor that takes current_class_type.  We must\n+\t deal with the binfo's directly as a direct base might be\n+\t inaccessible due to ambiguity.  */\n       for (t = CLASSTYPE_VBASECLASSES (current_class_type); t;\n \t   t = TREE_CHAIN (t))\n \t{\n-\t  tree type = BINFO_TYPE (TREE_VALUE (t));\n-\t  base_init_list = tree_cons (type, convert_lvalue (type, parm),\n+\t  tree binfo = TREE_VALUE (t);\n+\t  \n+\t  base_init_list = tree_cons (binfo,\n+\t\t\t\t      build_base_path (PLUS_EXPR, parm,\n+\t\t\t\t\t\t       binfo, 1),\n \t\t\t\t      base_init_list);\n \t}\n \n       for (i = 0; i < n_bases; ++i)\n \t{\n-\t  t = TREE_VEC_ELT (binfos, i);\n-\t  if (TREE_VIA_VIRTUAL (t))\n+\t  tree binfo = TREE_VEC_ELT (binfos, i);\n+\t  if (TREE_VIA_VIRTUAL (binfo))\n \t    continue; \n \n-\t  t = BINFO_TYPE (t);\n-\t  base_init_list = tree_cons (t, convert_lvalue (t, parm),\n+\t  base_init_list = tree_cons (binfo,\n+\t\t\t\t      build_base_path (PLUS_EXPR, parm,\n+\t\t\t\t\t\t       binfo, 1),\n \t\t\t\t      base_init_list);\n \t}\n \n@@ -645,11 +651,18 @@ do_build_assign_ref (fndecl)\n \n       for (i = 0; i < n_bases; ++i)\n \t{\n-\t  tree basetype = BINFO_TYPE (TREE_VEC_ELT (binfos, i));\n-\t  tree p = convert_lvalue (basetype, parm);\n-\t  p = build_member_call (basetype, ansi_assopname (NOP_EXPR),\n-\t\t\t\t build_tree_list (NULL_TREE, p));\n-\t  finish_expr_stmt (p);\n+\t  /* We must deal with the binfo's directly as a direct base\n+\t     might be inaccessible due to ambiguity.  */\n+\t  tree binfo = TREE_VEC_ELT (binfos, i);\n+\t  tree src = build_base_path (PLUS_EXPR, parm, binfo, 1);\n+\t  tree dst = build_base_path (PLUS_EXPR, current_class_ref, binfo, 1);\n+\n+\t  tree expr = build_method_call (dst,\n+\t\t\t\t\t ansi_assopname (NOP_EXPR),\n+\t\t\t\t\t build_tree_list (NULL_TREE, src),\n+\t\t\t\t\t NULL,\n+\t\t\t\t\t LOOKUP_NORMAL | LOOKUP_NONVIRTUAL);\n+\t  finish_expr_stmt (expr);\n \t}\n       for (; fields; fields = TREE_CHAIN (fields))\n \t{"}, {"sha": "795c502821b67637fb447921868ddafa71ecaa53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=713ccd0c6c230f7680c9d4c9502f5daab7002a26", "patch": "@@ -1,3 +1,7 @@\n+2001-12-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/inherit/base1.C: New test.\n+\n 2001-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/other/stdarg1.C: New test."}, {"sha": "952c6d20f3b0c28869f22b9a6c36b48f4f460dd2", "filename": "gcc/testsuite/g++.dg/inherit/base1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fbase1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ccd0c6c230f7680c9d4c9502f5daab7002a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fbase1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fbase1.C?ref=713ccd0c6c230f7680c9d4c9502f5daab7002a26", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+// { dg-options \"-pedantic-errors -w\" }\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 29 Nov 2001 <nathan@nathan@codesourcery.com>\n+\n+// PR 164\n+// Although a direct base can be inaccessible due to ambiguity, that\n+// should not blow up synthesized methods.\n+\n+struct A {int m;};\n+struct B : A {int m;};\n+struct C : virtual A, B {int m;};\n+struct D : B, C {int m;};\n+\n+void foo2 ()\n+{\n+  D d;\n+  D e (d);\n+\n+  e = d;\n+}"}]}