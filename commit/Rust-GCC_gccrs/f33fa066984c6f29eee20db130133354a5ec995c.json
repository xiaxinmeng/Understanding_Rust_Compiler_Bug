{"sha": "f33fa066984c6f29eee20db130133354a5ec995c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzZmEwNjY5ODRjNmYyOWVlZTIwZGIxMzAxMzMzNTRhNWVjOTk1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-19T22:08:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-19T22:08:21Z"}, "message": "i386.c (expand_vec_perm_vpshufb2_vpermq_even_odd): Use d->op1 instead of d->op0 for the second vpshufb.\n\n\t* config/i386/i386.c (expand_vec_perm_vpshufb2_vpermq_even_odd): Use\n\td->op1 instead of d->op0 for the second vpshufb.\n\t(expand_vec_perm_even_odd_1): For V8SImode fix vpshufd immediates.\n\t(ix86_expand_vec_perm_const): If mask indicates two operands are\n\tneeded, but both are the same and expanding them as d.op0 == d.op1\n\tfailed, retry with d.op0 != d.op1.\n\t(ix86_expand_vec_perm_builtin): Likewise.  Handle sorry printing\n\talso for d.nelt == 32.\n\n\t* gcc.dg/torture/vshuf-32.inc: Add interleave permutations.\n\t* gcc.dg/torture/vshuf-16.inc: Likewise.\n\t* gcc.dg/torture/vshuf-8.inc: Likewise.\n\t* gcc.dg/torture/vshuf-4.inc: Likewise.\n\nFrom-SVN: r180212", "tree": {"sha": "d8b9e0a54a1bf75a7bb04ff70bb70da7d6527ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b9e0a54a1bf75a7bb04ff70bb70da7d6527ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33fa066984c6f29eee20db130133354a5ec995c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33fa066984c6f29eee20db130133354a5ec995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33fa066984c6f29eee20db130133354a5ec995c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33fa066984c6f29eee20db130133354a5ec995c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24ef84f6c3041346d50c6a6ea2f54812e48963a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ef84f6c3041346d50c6a6ea2f54812e48963a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ef84f6c3041346d50c6a6ea2f54812e48963a7"}], "stats": {"total": 105, "additions": 97, "deletions": 8}, "files": [{"sha": "394634bc3dd7f19a8da4f92026ffc582b338dbb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -1,5 +1,14 @@\n 2011-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.c (expand_vec_perm_vpshufb2_vpermq_even_odd): Use\n+\td->op1 instead of d->op0 for the second vpshufb.\n+\t(expand_vec_perm_even_odd_1): For V8SImode fix vpshufd immediates.\n+\t(ix86_expand_vec_perm_const): If mask indicates two operands are\n+\tneeded, but both are the same and expanding them as d.op0 == d.op1\n+\tfailed, retry with d.op0 != d.op1.\n+\t(ix86_expand_vec_perm_builtin): Likewise.  Handle sorry printing\n+\talso for d.nelt == 32.\n+\n \tPR middle-end/50754\n \t* cfgexpand.c (expand_debug_expr): Handle WIDEN_LSHIFT_EXPR, ignore\n \tVEC_PERM_EXPR."}, {"sha": "4af4e5958b72fd9a74bbe45b3241dcad0977abd3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -35992,7 +35992,7 @@ expand_vec_perm_vpshufb2_vpermq_even_odd (struct expand_vec_perm_d *d)\n   vperm = force_reg (V32QImode, vperm);\n \n   h = gen_reg_rtx (V32QImode);\n-  op = gen_lowpart (V32QImode, d->op0);\n+  op = gen_lowpart (V32QImode, d->op1);\n   emit_insn (gen_avx2_pshufbv32qi3 (h, op, vperm));\n \n   ior = gen_reg_rtx (V32QImode);\n@@ -36154,9 +36154,9 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n       /* Swap the 2nd and 3rd position in each lane into\n \t { 0 2 1 3 8 a 9 b } and { 4 6 5 7 c e d f }.  */\n       emit_insn (gen_avx2_pshufdv3 (t1, t1,\n-\t\t\t\t    GEN_INT (2 * 2 + 1 * 16 + 3 * 64)));\n+\t\t\t\t    GEN_INT (2 * 4 + 1 * 16 + 3 * 64)));\n       emit_insn (gen_avx2_pshufdv3 (t2, t2,\n-\t\t\t\t    GEN_INT (2 * 2 + 1 * 16 + 3 * 64)));\n+\t\t\t\t    GEN_INT (2 * 4 + 1 * 16 + 3 * 64)));\n \n       /* Now an vpunpck[lh]qdq will produce\n \t { 0 2 4 6 8 a c e } resp. { 1 3 5 7 9 b d f }.  */\n@@ -36498,6 +36498,7 @@ ix86_expand_vec_perm_builtin (tree exp)\n {\n   struct expand_vec_perm_d d;\n   tree arg0, arg1, arg2;\n+  bool maybe_retry = false;\n \n   arg0 = CALL_EXPR_ARG (exp, 0);\n   arg1 = CALL_EXPR_ARG (exp, 1);\n@@ -36543,6 +36544,7 @@ ix86_expand_vec_perm_builtin (tree exp)\n \tfor (i = 0; i < nelt; ++i)\n \t  if (d.perm[i] >= nelt)\n \t    d.perm[i] -= nelt;\n+\tmaybe_retry = true;\n       }\n       /* FALLTHRU */\n \n@@ -36563,6 +36565,28 @@ ix86_expand_vec_perm_builtin (tree exp)\n   if (ix86_expand_vec_perm_builtin_1 (&d))\n     return d.target;\n \n+  /* If the mask says both arguments are needed, but they are the same,\n+     the above tried to expand with d.op0 == d.op1.  If that didn't work,\n+     retry with d.op0 != d.op1 as that is what testing has been done with.  */\n+  if (maybe_retry)\n+    {\n+      rtx seq;\n+      bool ok;\n+\n+      extract_vec_perm_cst (&d, arg2);\n+      d.op1 = gen_reg_rtx (d.vmode);\n+      start_sequence ();\n+      ok = ix86_expand_vec_perm_builtin_1 (&d);\n+      seq = get_insns ();\n+      end_sequence ();\n+      if (ok)\n+\t{\n+\t  emit_move_insn (d.op1, d.op0);\n+\t  emit_insn (seq);\n+\t  return d.target;\n+\t}\n+    }\n+\n   /* For compiler generated permutations, we should never got here, because\n      the compiler should also be checking the ok hook.  But since this is a\n      builtin the user has access too, so don't abort.  */\n@@ -36588,6 +36612,19 @@ ix86_expand_vec_perm_builtin (tree exp)\n \t     d.perm[8], d.perm[9], d.perm[10], d.perm[11],\n \t     d.perm[12], d.perm[13], d.perm[14], d.perm[15]);\n       break;\n+    case 32:\n+      sorry (\"vector permutation \"\n+\t     \"(%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d \"\n+\t     \"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)\",\n+\t     d.perm[0], d.perm[1], d.perm[2], d.perm[3],\n+\t     d.perm[4], d.perm[5], d.perm[6], d.perm[7],\n+\t     d.perm[8], d.perm[9], d.perm[10], d.perm[11],\n+\t     d.perm[12], d.perm[13], d.perm[14], d.perm[15],\n+\t     d.perm[16], d.perm[17], d.perm[18], d.perm[19],\n+\t     d.perm[20], d.perm[21], d.perm[22], d.perm[23],\n+\t     d.perm[24], d.perm[25], d.perm[26], d.perm[27],\n+\t     d.perm[28], d.perm[29], d.perm[30], d.perm[31]);\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -36599,6 +36636,7 @@ bool\n ix86_expand_vec_perm_const (rtx operands[4])\n {\n   struct expand_vec_perm_d d;\n+  unsigned char perm[MAX_VECT_LEN];\n   int i, nelt, which;\n   rtx sel;\n \n@@ -36614,6 +36652,7 @@ ix86_expand_vec_perm_const (rtx operands[4])\n \n   gcc_assert (GET_CODE (sel) == CONST_VECTOR);\n   gcc_assert (XVECLEN (sel, 0) == nelt);\n+  gcc_checking_assert (sizeof (d.perm) == sizeof (perm));\n \n   for (i = which = 0; i < nelt; ++i)\n     {\n@@ -36622,6 +36661,7 @@ ix86_expand_vec_perm_const (rtx operands[4])\n \n       which |= (ei < nelt ? 1 : 2);\n       d.perm[i] = ei;\n+      perm[i] = ei;\n     }\n \n   switch (which)\n@@ -36653,7 +36693,32 @@ ix86_expand_vec_perm_const (rtx operands[4])\n       break;\n     }\n \n-  return ix86_expand_vec_perm_builtin_1 (&d);\n+  if (ix86_expand_vec_perm_builtin_1 (&d))\n+    return true;\n+\n+  /* If the mask says both arguments are needed, but they are the same,\n+     the above tried to expand with d.op0 == d.op1.  If that didn't work,\n+     retry with d.op0 != d.op1 as that is what testing has been done with.  */\n+  if (which == 3 && d.op0 == d.op1)\n+    {\n+      rtx seq;\n+      bool ok;\n+\n+      memcpy (d.perm, perm, sizeof (perm));\n+      d.op1 = gen_reg_rtx (d.vmode);\n+      start_sequence ();\n+      ok = ix86_expand_vec_perm_builtin_1 (&d);\n+      seq = get_insns ();\n+      end_sequence ();\n+      if (ok)\n+\t{\n+\t  emit_move_insn (d.op1, d.op0);\n+\t  emit_insn (seq);\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n }\n \n /* Implement targetm.vectorize.builtin_vec_perm_ok.  */"}, {"sha": "12392074311c99868d59557792371ca9b5509833", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -1,3 +1,10 @@\n+2011-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/torture/vshuf-32.inc: Add interleave permutations.\n+\t* gcc.dg/torture/vshuf-16.inc: Likewise.\n+\t* gcc.dg/torture/vshuf-8.inc: Likewise.\n+\t* gcc.dg/torture/vshuf-4.inc: Likewise.\n+\n 2011-10-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47023"}, {"sha": "1464774c62fe4fe5cab04c850f197fa95f768d83", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-16.inc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-16.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-16.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-16.inc?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -15,7 +15,9 @@ T (11,\t15, 9, 14, 10, 8, 12, 13, 11, 7, 1, 2, 0, 4, 5, 6, 3) \\\n T (12,\t2, 5, 24, 23, 17, 22, 20, 21, 12, 14, 13, 8, 6, 20, 10, 18) \\\n T (13,\t23, 11, 15, 9, 0, 14, 8, 12, 10, 13, 19, 11, 2, 26, 24, 30) \\\n T (14,\t25, 5, 17, 1, 9, 15, 21, 7, 28, 2, 18, 13, 30, 14, 10, 4) \\\n-T (15,\t1, 30, 27, 31, 9, 18, 25, 12, 7, 4, 2, 16, 25, 20, 10, 3)\n+T (15,\t1, 30, 27, 31, 9, 18, 25, 12, 7, 4, 2, 16, 25, 20, 10, 3) \\\n+T (16,\t0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30) \\\n+T (17,\t1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31)\n #define EXPTESTS \\\n T (116,\t28, 13, 27, 11, 21, 1, 5, 22, 29, 14, 15, 6, 3, 10, 16, 30) \\\n T (117,\t22, 26, 1, 13, 29, 3, 18, 18, 11, 21, 12, 28, 19, 5, 7, 4) \\"}, {"sha": "8410e48310d194a170c3bf43547e6b1a6c198286", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-32.inc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-32.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-32.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-32.inc?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -15,7 +15,9 @@ T (11,\t13, 40, 7, 33, 51, 21, 59, 46, 47, 32, 9, 34, 63, 35, 41, 17, 24, 1, 8, 2\n T (12,\t39, 43, 54, 27, 53, 39, 27, 30, 2, 17, 13, 33, 7, 52, 40, 15, 36, 57, 10, 28, 22, 23, 25, 24, 41, 47, 8, 20, 5, 3, 4, 0) \\\n T (13,\t7, 51, 13, 61, 25, 4, 19, 58, 35, 33, 29, 15, 40, 2, 39, 16, 38, 3, 54, 63, 15, 6, 48, 21, 14, 52, 17, 50, 34, 55, 57, 50) \\\n T (14,\t22, 53, 28, 42, 45, 38, 49, 13, 54, 61, 21, 52, 7, 16, 34, 9, 1, 43, 62, 43, 35, 50, 47, 58, 20, 3, 30, 15, 37, 53, 43, 36) \\\n-T (15,\t2, 43, 49, 34, 28, 35, 29, 36, 51, 9, 17, 48, 10, 37, 45, 21, 52, 19, 25, 33, 60, 31, 30, 42, 12, 26, 27, 46, 5, 40, 14, 36)\n+T (15,\t2, 43, 49, 34, 28, 35, 29, 36, 51, 9, 17, 48, 10, 37, 45, 21, 52, 19, 25, 33, 60, 31, 30, 42, 12, 26, 27, 46, 5, 40, 14, 36) \\\n+T (16,\t0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62) \\\n+T (17,\t1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63)\n #define EXPTESTS \\\n T (116,\t13, 38, 47, 3, 17, 8, 38, 20, 59, 61, 39, 26, 7, 49, 63, 43, 57, 16, 40, 19, 4, 32, 27, 7, 52, 19, 46, 55, 36, 41, 48, 6) \\\n T (117,\t39, 35, 59, 20, 56, 18, 58, 63, 57, 14, 2, 16, 5, 61, 35, 4, 53, 9, 52, 51, 27, 33, 61, 12, 3, 35, 36, 40, 37, 7, 45, 42) \\"}, {"sha": "2044e365dec02b6b1792b37c0cf3ffce85497769", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-4.inc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-4.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-4.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-4.inc?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -15,7 +15,9 @@ T (11,\t1, 4, 0, 7) \\\n T (12,\t1, 5, 7, 2) \\\n T (13,\t2, 3, 0, 4) \\\n T (14,\t7, 6, 4, 2) \\\n-T (15,\t6, 1, 3, 4)\n+T (15,\t6, 1, 3, 4) \\\n+T (16,\t0, 2, 4, 6) \\\n+T (17,\t1, 3, 5, 7)\n #define EXPTESTS \\\n T (116,\t1, 2, 4, 3) \\\n T (117,\t7, 3, 3, 0) \\"}, {"sha": "24db545ef26a48c0715c5981fd45df906ff40945", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-8.inc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fa066984c6f29eee20db130133354a5ec995c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc?ref=f33fa066984c6f29eee20db130133354a5ec995c", "patch": "@@ -15,7 +15,9 @@ T (11,\t5, 11, 12, 6, 3, 2, 4, 15) \\\n T (12,\t5, 13, 14, 8, 4, 10, 4, 12) \\\n T (13,\t14, 8, 12, 3, 13, 9, 5, 4) \\\n T (14,\t15, 3, 13, 6, 14, 12, 10, 0) \\\n-T (15,\t0, 5, 11, 7, 4, 6, 14, 1)\n+T (15,\t0, 5, 11, 7, 4, 6, 14, 1) \\\n+T (16,\t0, 2, 4, 6, 8, 10, 12, 14) \\\n+T (17,\t1, 3, 5, 7, 9, 11, 13, 15)\n #define EXPTESTS \\\n T (116,\t9, 3, 9, 4, 7, 0, 0, 6) \\\n T (117,\t4, 14, 12, 8, 9, 6, 0, 10) \\"}]}