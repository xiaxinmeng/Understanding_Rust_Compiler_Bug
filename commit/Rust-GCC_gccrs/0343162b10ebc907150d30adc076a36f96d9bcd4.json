{"sha": "0343162b10ebc907150d30adc076a36f96d9bcd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0MzE2MmIxMGViYzkwNzE1MGQzMGFkYzA3NmEzNmY5NmQ5YmNkNA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-06-12T15:56:00Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-06-12T15:56:00Z"}, "message": "fold-vec-load-builtin_vec_xl-char.c: New.\n\n\n[testsuite]\n\n2018-05-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-char.c: New.\n\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-double.c: New.\n\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-float.c: New.\n\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-int.c: New.\n\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-short.c: New.\n\nFrom-SVN: r261504", "tree": {"sha": "80b9c850c71002edf605b89f666fedccc38c6be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80b9c850c71002edf605b89f666fedccc38c6be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0343162b10ebc907150d30adc076a36f96d9bcd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0343162b10ebc907150d30adc076a36f96d9bcd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0343162b10ebc907150d30adc076a36f96d9bcd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0343162b10ebc907150d30adc076a36f96d9bcd4/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4acdcafb999bc36b091a1df895eb2120cd781183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acdcafb999bc36b091a1df895eb2120cd781183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acdcafb999bc36b091a1df895eb2120cd781183"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "8023c7554faf4466f24f7de17d2fc4da4b7c8518", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -1,3 +1,12 @@\n+2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-short.c: New.\n+\n 2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-load-vec_xl-char.c: New testcase."}, {"sha": "9b199c219bf6b49cb535df6a15f3a1dd86f48b51", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-builtin_vec_xl-char.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-char.c?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for __builtin_vec_xl with char\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (offset, loadfrom);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (CST_OFFSET, loadfrom);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1, vector signed char,   signed long long, signed char);\n+BUILD_VAR_TEST( test2, vector signed char,   signed int, signed char);\n+BUILD_CST_TEST( test3, vector signed char,   2, signed char);\n+\n+BUILD_VAR_TEST( test4, vector unsigned char, signed long long, unsigned char);\n+BUILD_VAR_TEST( test5 ,vector unsigned char, signed int, unsigned char);\n+BUILD_CST_TEST( test6, vector unsigned char, 4, unsigned char);\n+\n+BUILD_VAR_TEST( test7, vector signed char,   signed long long, vector signed char);\n+BUILD_VAR_TEST( test8, vector signed char,   signed int, vector signed char);\n+BUILD_CST_TEST( test9, vector signed char,   6, vector signed char);\n+\n+BUILD_VAR_TEST( test10, vector unsigned char, signed long long, vector unsigned char);\n+BUILD_VAR_TEST( test11, vector unsigned char, signed int, vector unsigned char);\n+BUILD_CST_TEST( test12, vector unsigned char, 8, vector unsigned char);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}, {"sha": "c49dfe8d95b89430b41981ea6e4087267c9da1c1", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-builtin_vec_xl-double.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-double.c?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that overloaded built-ins for __builtin_vec_xl with double\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (offset, loadfrom);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (CST_OFFSET, loadfrom);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1, vector double, signed long long, double);\n+BUILD_VAR_TEST( test2, vector double, signed int, double);\n+BUILD_CST_TEST( test3, vector double, 12, double);\n+\n+BUILD_VAR_TEST( test4, vector double, signed long long, vector double);\n+BUILD_VAR_TEST( test5, vector double, signed int, vector double);\n+BUILD_CST_TEST( test6, vector double, 12, vector double);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 6 } } */"}, {"sha": "cdded361b128e32af630ab03ef489bcf92fe6d18", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-builtin_vec_xl-float.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-float.c?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that overloaded built-ins for __builtin_vec_xl with float\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (offset, loadfrom);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (CST_OFFSET, loadfrom);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1, vector float, signed long long, float);\n+BUILD_VAR_TEST( test2, vector float, signed int, float);\n+BUILD_CST_TEST( test3, vector float, 12, float);\n+\n+BUILD_VAR_TEST( test4, vector float, signed long long, vector float);\n+BUILD_VAR_TEST( test5, vector float, signed int, vector float);\n+BUILD_CST_TEST( test6, vector float, 12, vector float);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 6 } } */"}, {"sha": "bc18bebb1d6f0119db7745e34635b2a385da3636", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-builtin_vec_xl-int.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-int.c?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for __builtin_vec_xl with int\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (offset, loadfrom);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (CST_OFFSET, loadfrom);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1, vector signed int, signed long long, signed int);\n+BUILD_VAR_TEST( test2, vector signed int, signed int, signed int);\n+BUILD_CST_TEST( test3, vector signed int, 12, signed int);\n+\n+BUILD_VAR_TEST( test4, vector unsigned int, signed long long, unsigned int);\n+BUILD_VAR_TEST( test5, vector unsigned int, signed int, unsigned int);\n+BUILD_CST_TEST( test6, vector unsigned int, 12, unsigned int);\n+\n+BUILD_VAR_TEST( test7, vector signed int, signed long long, vector signed int);\n+BUILD_VAR_TEST( test8, vector signed int, signed int, vector signed int);\n+BUILD_CST_TEST( test9, vector signed int, 12, vector signed int);\n+\n+BUILD_VAR_TEST( test10, vector unsigned int, signed long long, vector unsigned int);\n+BUILD_VAR_TEST( test11, vector unsigned int, signed int, vector unsigned int);\n+BUILD_CST_TEST( test12, vector unsigned int, 12, vector unsigned int);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}, {"sha": "66e953a2fbc8cb484d7f144f612d8706ff3e0280", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-builtin_vec_xl-longlong.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-longlong.c?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for __builtin_vec_xl with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (offset, loadfrom);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (CST_OFFSET, loadfrom);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed long long, signed long long, signed long long);\n+BUILD_VAR_TEST( test2,  vector signed long long, signed int, signed long long);\n+BUILD_CST_TEST( test3,  vector signed long long, 12, signed long long);\n+\n+BUILD_VAR_TEST( test4,  vector unsigned long long, signed long long, unsigned long long);\n+BUILD_VAR_TEST( test5,  vector unsigned long long, signed int, unsigned long long);\n+BUILD_CST_TEST( test6,  vector unsigned long long, 12, unsigned long long);\n+\n+BUILD_VAR_TEST( test7,  vector signed long long, signed long long, vector signed long long);\n+BUILD_VAR_TEST( test8,  vector signed long long, signed int, vector signed long long);\n+BUILD_CST_TEST( test9,  vector signed long long, 12, vector signed long long);\n+\n+BUILD_VAR_TEST( test10,  vector unsigned long long, signed long long, vector unsigned long long);\n+BUILD_VAR_TEST( test11,  vector unsigned long long, signed int, vector unsigned long long);\n+BUILD_CST_TEST( test12,  vector unsigned long long, 12, vector unsigned long long);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}, {"sha": "0ef1c590d9439d422633a03e068dc01c20781db9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-builtin_vec_xl-short.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0343162b10ebc907150d30adc076a36f96d9bcd4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-builtin_vec_xl-short.c?ref=0343162b10ebc907150d30adc076a36f96d9bcd4", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for __builtin_vec_xl with short\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (offset, loadfrom);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+\treturn __builtin_vec_xl (CST_OFFSET, loadfrom);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed short, signed long long, signed short);\n+BUILD_VAR_TEST( test2,  vector signed short, signed int, signed short);\n+BUILD_CST_TEST( test3,  vector signed short, 12, signed short);\n+\n+BUILD_VAR_TEST( test4,  vector unsigned short, signed long long, unsigned short);\n+BUILD_VAR_TEST( test5,  vector unsigned short, signed int, unsigned short);\n+BUILD_CST_TEST( test6,  vector unsigned short, 12, unsigned short);\n+\n+BUILD_VAR_TEST( test7,  vector signed short, signed long long, vector signed short);\n+BUILD_VAR_TEST( test8,  vector signed short, signed int, vector signed short);\n+BUILD_CST_TEST( test9,  vector signed short, 12, vector signed short);\n+\n+BUILD_VAR_TEST( test10,  vector unsigned short, signed long long, vector unsigned short);\n+BUILD_VAR_TEST( test11,  vector unsigned short, signed int, vector unsigned short);\n+BUILD_CST_TEST( test12,  vector unsigned short, 12, vector unsigned short);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}]}