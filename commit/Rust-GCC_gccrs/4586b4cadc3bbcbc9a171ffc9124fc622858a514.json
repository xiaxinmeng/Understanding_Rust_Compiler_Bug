{"sha": "4586b4cadc3bbcbc9a171ffc9124fc622858a514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4NmI0Y2FkYzNiYmNiYzlhMTcxZmZjOTEyNGZjNjIyODU4YTUxNA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-07-29T07:37:16Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-07-29T07:37:16Z"}, "message": "rtl.c (currently_expanding_to_rtl): New.\n\n\t* rtl.c (currently_expanding_to_rtl): New.\n\t* rtl.h (currently_expanding_to_rtl): Export it.\n\t* cfgexpand.c (tree_cfg_expand): Set/clear it at entry/exit.\n\n\t* config/alpha/alpha.c (alpha_expand_mov): Remove old RTL\n\tinliner hack.\n\t* config/sh/sh.c: Replace rtx_equal_function_value_matters\n\twith currently_expanding_to_rtl.\n\t* config/sh/sh.md: Likewise.\n\t* config/ia64/ia64.c (got_symbolic_operand): Likewise.\n\nFrom-SVN: r85287", "tree": {"sha": "c0aa53887f8a11c6cc95d9255d436ab2f4e4b446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0aa53887f8a11c6cc95d9255d436ab2f4e4b446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4586b4cadc3bbcbc9a171ffc9124fc622858a514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4586b4cadc3bbcbc9a171ffc9124fc622858a514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4586b4cadc3bbcbc9a171ffc9124fc622858a514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4586b4cadc3bbcbc9a171ffc9124fc622858a514/comments", "author": null, "committer": null, "parents": [{"sha": "157371cf43544336eaca4ae81b6e2a95f69645ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157371cf43544336eaca4ae81b6e2a95f69645ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157371cf43544336eaca4ae81b6e2a95f69645ec"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "9c5b5237ad60a94e459b377a354a1afdac4820eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -1,3 +1,16 @@\n+2004-07-29  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* rtl.c (currently_expanding_to_rtl): New.\n+\t* rtl.h (currently_expanding_to_rtl): Export it.\n+\t* cfgexpand.c (tree_cfg_expand): Set/clear it at entry/exit.\n+\n+\t* config/alpha/alpha.c (alpha_expand_mov): Remove old RTL\n+\tinliner hack.\n+\t* config/sh/sh.c: Replace rtx_equal_function_value_matters\n+\twith currently_expanding_to_rtl.\n+\t* config/sh/sh.md: Likewise.\n+\t* config/ia64/ia64.c (got_symbolic_operand): Likewise.\n+\n 2004-07-29  Alexandre Oliva  <aoliva@redhat.com>\n \n \tIntroduce sh2a support."}, {"sha": "aa5911890eef231a04977f81c7c2162c517a3dac", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -433,6 +433,9 @@ tree_expand_cfg (void)\n \t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n     }\n \n+  /* Some backends want to know that we are expanding to RTL.  */\n+  currently_expanding_to_rtl = 1;\n+\n   /* Prepare the rtl middle end to start recording block changes.  */\n   reset_block_changes ();\n \n@@ -459,6 +462,9 @@ tree_expand_cfg (void)\n \n   construct_exit_block ();\n \n+  /* We're done expanding trees to RTL.  */\n+  currently_expanding_to_rtl = 0;\n+\n   /* Convert from NOTE_INSN_EH_REGION style notes, and do other\n      sorts of eh initialization.  Delay this until after the\n      initial rtl dump so that we can see the original nesting.  */"}, {"sha": "02bfb722b10d70f442930cabbcd08637b5a6d6e1", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -2796,23 +2796,6 @@ alpha_expand_mov (enum machine_mode mode, rtx *operands)\n     {\n       rtx tmp;\n \n-      /* With RTL inlining, at -O3, rtl is generated, stored, then actually\n-\t compiled at the end of compilation.  In the meantime, someone can\n-\t re-encode-section-info on some symbol changing it e.g. from global\n-\t to local-not-small.  If this happens, we'd have emitted a plain\n-\t load rather than a high+losum load and not recognize the insn.\n-\n-\t So if rtl inlining is in effect, we delay the global/not-global\n-\t decision until rest_of_compilation by wrapping it in an\n-\t UNSPEC_SYMBOL.  */\n-      if (TARGET_EXPLICIT_RELOCS && flag_inline_functions\n-\t  && rtx_equal_function_value_matters\n-\t  && global_symbolic_operand (operands[1], mode))\n-\t{\n-\t  emit_insn (gen_movdi_er_maybe_g (operands[0], operands[1]));\n-\t  return true;\n-\t}\n-\n       tmp = alpha_legitimize_address (operands[1], operands[0], mode);\n       if (tmp)\n \t{"}, {"sha": "aa0dc20c26808660155e41aec466ce880787a55f", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -489,7 +489,7 @@ got_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       /* \"Ok\" while emitting rtl, since otherwise we won't be provided\n \t with the entire offset during emission, which makes it very\n \t hard to split the offset into high and low parts.  */\n-      if (rtx_equal_function_value_matters)\n+      if (currently_expanding_to_rtl)\n \treturn 1;\n \n       /* Force the low 14 bits of the constant to zero so that we do not"}, {"sha": "7eef57ab2386af9d117bdd4e382a6b5250188fc0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -2286,9 +2286,6 @@ shl_and_scr_length (rtx insn)\n   return len + shift_insns[INTVAL (XEXP (op, 1))];\n }\n \n-/* Generating rtl? */\n-extern int rtx_equal_function_value_matters;\n-\n /* Generate rtl for instructions for which shl_and_kind advised a particular\n    method of generating them, i.e. returned zero.  */\n \n@@ -2359,7 +2356,7 @@ gen_shl_and (rtx dest, rtx left_rtx, rtx mask_rtx, rtx source)\n     case 2:\n       /* Don't expand fine-grained when combining, because that will\n          make the pattern fail.  */\n-      if (rtx_equal_function_value_matters\n+      if (currently_expanding_to_rtl\n \t  || reload_in_progress || reload_completed)\n \t{\n \t  rtx operands[3];\n@@ -2556,7 +2553,7 @@ gen_shl_sext (rtx dest, rtx left_rtx, rtx size_rtx, rtx source)\n \n \t/* Don't expand fine-grained when combining, because that will\n \t   make the pattern fail.  */\n-\tif (! rtx_equal_function_value_matters\n+\tif (! currently_expanding_to_rtl\n \t    && ! reload_in_progress && ! reload_completed)\n \t  {\n \t    emit_insn (gen_shl_sext_ext (dest, source, left_rtx, size_rtx));\n@@ -2611,7 +2608,7 @@ gen_shl_sext (rtx dest, rtx left_rtx, rtx size_rtx, rtx source)\n     case 5:\n       {\n \tint i = 16 - size;\n-\tif (! rtx_equal_function_value_matters\n+\tif (! currently_expanding_to_rtl\n \t    && ! reload_in_progress && ! reload_completed)\n \t  emit_insn (gen_shl_sext_ext (dest, source, left_rtx, size_rtx));\n \telse\n@@ -2630,7 +2627,7 @@ gen_shl_sext (rtx dest, rtx left_rtx, rtx size_rtx, rtx source)\n     case 7:\n       /* Don't expand fine-grained when combining, because that will\n \t make the pattern fail.  */\n-      if (! rtx_equal_function_value_matters\n+      if (! currently_expanding_to_rtl\n \t  && ! reload_in_progress && ! reload_completed)\n \t{\n \t  emit_insn (gen_shl_sext_ext (dest, source, left_rtx, size_rtx));"}, {"sha": "8b2c6f2bb96d6fc8ae314575cc9519481e4e4c56", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -3459,7 +3459,7 @@\n \t(unspec:SI [(match_operand 1 \"register_operand\" \"\")] UNSPEC_RA))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"&& ! rtx_equal_function_value_matters\"\n+  \"&& ! currently_expanding_to_rtl\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\n {\n@@ -7476,7 +7476,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n     }\n   if (sh_expand_t_scc (EQ, operands[0]))\n     DONE;\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (EQ);\n }\")\n@@ -7524,7 +7524,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t}\n       DONE;\n     }\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (LT);\n }\")\n@@ -7628,7 +7628,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t}\n       DONE;\n     }\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (GT);\n }\")\n@@ -7682,7 +7682,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n       DONE;\n     }\n \n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   if (GET_MODE_CLASS (GET_MODE (sh_compare_op0)) == MODE_FLOAT)\n     {\n@@ -7723,7 +7723,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t\t\t\t     sh_compare_op0, sh_compare_op1));\n       DONE;\n     }\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (GTU);\n }\")\n@@ -7749,7 +7749,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t\t\t\t     sh_compare_op1, sh_compare_op0));\n       DONE;\n     }\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (LTU);\n }\")\n@@ -7780,7 +7780,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n       DONE;\n     }\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (LEU);\n }\")\n@@ -7812,7 +7812,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n       DONE;\n     }\n \n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (GEU);\n }\")\n@@ -7863,7 +7863,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n   if (sh_expand_t_scc (NE, operands[0]))\n     DONE;\n-  if (! rtx_equal_function_value_matters)\n+  if (! currently_expanding_to_rtl)\n     FAIL;\n   operands[1] = prepare_scc_operands (EQ);\n   operands[2] = gen_reg_rtx (SImode);"}, {"sha": "7de4b90e671d2b20d882c78f2fdd74adcd502e06", "filename": "gcc/rtl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -320,6 +320,10 @@ shallow_copy_rtx_stat (rtx orig MEM_STAT_DECL)\n \f\n /* Nonzero when we are generating CONCATs.  */\n int generating_concat_p;\n+\n+/* Nonzero when we are expanding trees to RTL.  */\n+int currently_expanding_to_rtl;\n+\n \f\n /* Return 1 if X and Y are identical-looking rtx's.\n    This is the Lisp function EQUAL for rtx arguments.  */"}, {"sha": "06a553e555cf5b7ceddda605707a991102c3a2eb", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4586b4cadc3bbcbc9a171ffc9124fc622858a514/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4586b4cadc3bbcbc9a171ffc9124fc622858a514", "patch": "@@ -1543,6 +1543,9 @@ do {\t\t\t\t\t\t\\\n /* Nonzero when we are generating CONCATs.  */\n extern int generating_concat_p;\n \n+/* Nonzero when we are expanding trees to RTL.  */\n+extern int currently_expanding_to_rtl;\n+\n /* Generally useful functions.  */\n \n /* In expmed.c */"}]}