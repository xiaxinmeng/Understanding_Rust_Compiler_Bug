{"sha": "f933fd92862f3cfb8c5e35580ab201df50c0401b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzM2ZkOTI4NjJmM2NmYjhjNWUzNTU4MGFiMjAxZGY1MGMwNDAxYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2000-12-03T21:21:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-12-03T21:21:52Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added new file.\n\t* java/awt/geom/RoundRectangle2D.java: New file.\n\nFrom-SVN: r37980", "tree": {"sha": "b2a7d7cb5f0523df88fb745ce10aa0d6783b5544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a7d7cb5f0523df88fb745ce10aa0d6783b5544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f933fd92862f3cfb8c5e35580ab201df50c0401b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f933fd92862f3cfb8c5e35580ab201df50c0401b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f933fd92862f3cfb8c5e35580ab201df50c0401b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f933fd92862f3cfb8c5e35580ab201df50c0401b/comments", "author": null, "committer": null, "parents": [{"sha": "5c032c4d313a81edc57e95fc5b260fa4022d7f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c032c4d313a81edc57e95fc5b260fa4022d7f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c032c4d313a81edc57e95fc5b260fa4022d7f46"}], "stats": {"total": 352, "additions": 352, "deletions": 0}, "files": [{"sha": "d14463509bc48830faad1008a4e40e7fca36f909", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f933fd92862f3cfb8c5e35580ab201df50c0401b", "patch": "@@ -1,5 +1,9 @@\n 2000-12-03  Tom Tromey  <tromey@redhat.com>\n \n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Added new file.\n+\t* java/awt/geom/RoundRectangle2D.java: New file.\n+\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (awt_java_source_files): Added new file.\n \t* java/awt/FlowLayout.java: New file."}, {"sha": "c618f327a671f139b67ba5571419ef8d2f6d2952", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f933fd92862f3cfb8c5e35580ab201df50c0401b", "patch": "@@ -674,6 +674,7 @@ java/awt/geom/PathIterator.java\t\\\n java/awt/geom/Point2D.java \\\n java/awt/geom/Rectangle2D.java \\\n java/awt/geom/RectangularShape.java \\\n+java/awt/geom/RoundRectangle2D.java \\\n java/awt/image/BufferedImage.java \\\n java/awt/image/ColorModel.java \\\n java/awt/image/ComponentColorModel.java\t\\"}, {"sha": "f2426faee1925e50379cb596c972799d4897eaad", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f933fd92862f3cfb8c5e35580ab201df50c0401b", "patch": "@@ -445,6 +445,7 @@ java/awt/geom/PathIterator.java\t\\\n java/awt/geom/Point2D.java \\\n java/awt/geom/Rectangle2D.java \\\n java/awt/geom/RectangularShape.java \\\n+java/awt/geom/RoundRectangle2D.java \\\n java/awt/image/BufferedImage.java \\\n java/awt/image/ColorModel.java \\\n java/awt/image/ComponentColorModel.java\t\\\n@@ -1385,6 +1386,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/geom/PathIterator.P .deps/java/awt/geom/Point2D.P \\\n .deps/java/awt/geom/Rectangle2D.P \\\n .deps/java/awt/geom/RectangularShape.P \\\n+.deps/java/awt/geom/RoundRectangle2D.P \\\n .deps/java/awt/image/BufferedImage.P .deps/java/awt/image/ColorModel.P \\\n .deps/java/awt/image/ComponentColorModel.P \\\n .deps/java/awt/image/ComponentSampleModel.P \\"}, {"sha": "f90d342553613bbfa5d20d30dcaed118b5004a63", "filename": "libjava/java/awt/geom/RoundRectangle2D.java", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2Fjava%2Fawt%2Fgeom%2FRoundRectangle2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f933fd92862f3cfb8c5e35580ab201df50c0401b/libjava%2Fjava%2Fawt%2Fgeom%2FRoundRectangle2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FRoundRectangle2D.java?ref=f933fd92862f3cfb8c5e35580ab201df50c0401b", "patch": "@@ -0,0 +1,345 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+/** This class implements a rectangle with rounded corners.\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date December 3, 2000\n+ */\n+public abstract class RoundRectangle2D extends RectangularShape\n+{\n+  /** Return the arc height of this round rectangle.  */\n+  public abstract double getArcHeight ();\n+\n+  /** Return the arc width of this round rectangle.  */\n+  public abstract double getArcWidth ();\n+\n+  /** Set the values of this round rectangle\n+   * @param x The x coordinate\n+   * @param y The y coordinate\n+   * @param w The width\n+   * @param h The height\n+   * @param arcWidth The arc width\n+   * @param arcHeight The arc height\n+   */\n+  public abstract void setRoundRect (double x, double y, double w, double h,\n+\t\t\t\t     double arcWidth, double arcHeight);\n+\n+  /** Create a RoundRectangle2D.  This is protected because this class\n+   * is abstract and cannot be instantiated.\n+   */\n+  protected  RoundRectangle2D ()\n+  {\n+  }\n+\n+  /** Return true if this object contains the specified point.\n+   * @param x The x coordinate\n+   * @param y The y coordinate\n+   */\n+  public boolean contains (double x, double y)\n+  {\n+    double mx = getX ();\n+    double mw = getWidth ();\n+    if (x < mx || x >= mx + mw)\n+      return false;\n+    double my = getY ();\n+    double mh = getHeight ();\n+    if (y < my || y >= my + mh)\n+      return false;\n+\n+    // Now check to see if the point is in range of an arc.\n+    double dy = Math.min (Math.abs (my - y), Math.abs (my + mh - y));\n+    double dx = Math.min (Math.abs (mx - x), Math.abs (mx + mw - x));\n+    double aw = getArcWidth ();\n+    double ah = getArcHeight ();\n+    if (dx > aw || dy > ah)\n+      return true;\n+\n+    // At this point DX represents the distance from the nearest edge\n+    // of the rectangle.  But we want to transform it to represent the\n+    // scaled distance from the center of the ellipse that forms the\n+    // arc.  Hence this code:\n+    dy = (ah - dy) / ah;\n+    dx = (aw - dx) / aw;\n+\n+    return dx * dx + dy * dy <= 1.0;\n+  }\n+\n+  /** Return true if this object contains the specified rectangle\n+   * @param x The x coordinate\n+   * @param y The y coordinate\n+   * @param w The width\n+   * @param h The height\n+   */\n+  public boolean contains (double x, double y, double w, double h)\n+  {\n+    // We have to check all four points here (for ordinary rectangles\n+    // we can just check opposing corners).\n+    return (contains (x, y) && contains (x + w, h)\n+\t    && contains (x, y + h) && contains (x + w, y + h));\n+  }\n+\n+  /** Return a new path iterator which iterates over this rectangle.\n+   * @param at An affine transform to apply to the object\n+   */\n+  public PathIterator getPathIterator (AffineTransform at)\n+  {\n+    // FIXME.\n+    return null;\n+  }\n+\n+  /** Return true if the given rectangle intersects this shape.\n+   * @param x The x coordinate\n+   * @param y The y coordinate\n+   * @param w The width\n+   * @param h The height\n+   */\n+  public boolean intersects (double x, double y, double w, double h)\n+  {\n+    // Here we can use the same code we use for an ordinary rectangle.\n+    double mx = getX ();\n+    double mw = getWidth ();\n+    if (x < mx || x >= mx + mw || x + w < mx || x + w >= mx + mw)\n+      return false;\n+    double my = getY ();\n+    double mh = getHeight ();\n+    return y >= my && y < my + mh && y + h >= my && y + h < my + mh;\n+  }\n+\n+  /** Set the boundary of this round rectangle.\n+   * @param x The x coordinate\n+   * @param y The y coordinate\n+   * @param w The width\n+   * @param h The height\n+   */\n+  public void setFrame (double x, double y, double w, double h)\n+  {\n+    // This is a bit lame.\n+    setRoundRect (x, y, w, h, getArcWidth (), getArcHeight ());\n+  }\n+\n+  /** Set the values of this round rectangle to be the same as those\n+   * of the argument.\n+   * @param rr The round rectangle to copy\n+   */\n+  public void setRoundRect (RoundRectangle2D rr)\n+  {\n+    setRoundRect (rr.getX (), rr.getY (), rr.getWidth (), rr.getHeight (),\n+\t\t  rr.getArcWidth (), rr.getArcHeight ());\n+  }\n+\n+  /** A subclass of RoundRectangle which keeps its parameters as\n+   * floats.  */\n+  public static class Float extends RoundRectangle2D\n+  {\n+    /** The height of the corner arc.  */\n+    public float archeight;\n+\n+    /** The width of the corner arc.  */\n+    public float arcwidth;\n+\n+    /** The x coordinate of this object.  */\n+    public float x;\n+\n+    /** The y coordinate of this object.  */\n+    public float y;\n+\n+    /** The width of this object.  */\n+    public float width;\n+\n+    /** The height of this object.  */\n+    public float height;\n+\n+    /** Construct a new instance, with all parameters set to 0.  */\n+    public Float ()\n+    {\n+      this (0, 0, 0, 0, 0, 0);\n+    }\n+\n+    /** Construct a new instance with the given arguments.\n+     * @param x The x coordinate\n+     * @param y The y coordinate\n+     * @param w The width\n+     * @param h The height\n+     * @param arcWidth The arc width\n+     * @param arcHeight The arc height\n+     */\n+    public Float (float x, float y, float w, float h,\n+\t\t  float arcWidth, float arcHeight)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+      this.arcwidth = arcWidth;\n+      this.archeight = arcHeight;\n+    }\n+\n+    public double getArcHeight ()\n+    {\n+      return archeight;\n+    }\n+\n+    public double getArcWidth ()\n+    {\n+      return arcwidth;\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      return new Rectangle2D.Float (x, y, width, height);\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public double getWidth ()\n+    {\n+      return width;\n+    }\n+\n+    public double getHeight ()\n+    {\n+      return height;\n+    }\n+\n+    public boolean isEmpty ()\n+    {\n+      return width <= 0 || height <= 0;\n+    }\n+\n+    public void setRoundRect (float x, float y, float w, float h,\n+\t\t\t      float arcWidth, float arcHeight)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+      this.arcwidth = arcWidth;\n+      this.archeight = arcHeight;\n+    }\n+\n+    public void setRoundRect (double x, double y, double w, double h,\n+\t\t\t      double arcWidth, double arcHeight)\n+    {\n+      this.x = (float) x;\n+      this.y = (float) y;\n+      this.width = (float) w;\n+      this.height = (float) h;\n+      this.arcwidth = (float) arcWidth;\n+      this.archeight = (float) arcHeight;\n+    }\n+  }\n+\n+  /** A subclass of RoundRectangle which keeps its parameters as\n+   * doubles.  */\n+  public static class Double extends RoundRectangle2D\n+  {\n+    /** The height of the corner arc.  */\n+    public double archeight;\n+\n+    /** The width of the corner arc.  */\n+    public double arcwidth;\n+\n+    /** The x coordinate of this object.  */\n+    public double x;\n+\n+    /** The y coordinate of this object.  */\n+    public double y;\n+\n+    /** The width of this object.  */\n+    public double width;\n+\n+    /** The height of this object.  */\n+    public double height;\n+\n+    /** Construct a new instance, with all parameters set to 0.  */\n+    public Double ()\n+    {\n+      this (0, 0, 0, 0, 0, 0);\n+    }\n+\n+    /** Construct a new instance with the given arguments.\n+     * @param x The x coordinate\n+     * @param y The y coordinate\n+     * @param w The width\n+     * @param h The height\n+     * @param arcWidth The arc width\n+     * @param arcHeight The arc height\n+     */\n+    public Double (double x, double y, double w, double h,\n+\t\t   double arcWidth, double arcHeight)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+      this.arcwidth = arcWidth;\n+      this.archeight = arcHeight;\n+    }\n+\n+    public double getArcHeight ()\n+    {\n+      return archeight;\n+    }\n+\n+    public double getArcWidth ()\n+    {\n+      return arcwidth;\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      return new Rectangle2D.Double (x, y, width, height);\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public double getWidth ()\n+    {\n+      return width;\n+    }\n+\n+    public double getHeight ()\n+    {\n+      return height;\n+    }\n+\n+    public boolean isEmpty ()\n+    {\n+      return width <= 0 || height <= 0;\n+    }\n+\n+    public void setRoundRect (double x, double y, double w, double h,\n+\t\t\t      double arcWidth, double arcHeight)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+      this.arcwidth = arcWidth;\n+      this.archeight = arcHeight;\n+    }\n+  }\n+}"}]}