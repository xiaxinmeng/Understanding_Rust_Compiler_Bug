{"sha": "bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzZDA4MmViZTJjNWQ2ZWYzOGQwYzNiYjUzYWUwYmFlZmUxNjU0ZA==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2005-03-14T14:33:54Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2005-03-14T14:33:54Z"}, "message": "Friend class name lookup 5/n PR c++/1016\n\n\tFriend class name lookup 5/n\n\tPR c++/1016\n\t* cp-tree.h (pushtag): Adjust declaration.\n\t* decl.c (lookup_and_check_tag): Call lookup_type_scope if\n\tlookup_name fails.\n\t(xref_tag): Adjust call to pushtag.  Make hidden class visible.\n\t(start_enum): Adjust call to pushtag.\n\t* name-lookup.c (ambiguous_decl): Ignore hidden names.\n\t(qualify_lookup): Change return type to bool.\n\t(hidden_name_p): New function.\n\t(lookup_namespace_name, unqualified_namespace_lookup,\n\tlookup_name_real): Use it.\n\t(lookup_type_scope): Update comments.\n\t(maybe_process_template_type_declaration): Change parameter name\n\tfrom globalize to is_friend.\n\t(pushtag): Change globalize parameter of type int to tag_scope.\n\tHide name if introduced by friend declaration.\n\t* name-lookup.h (hidden_name_p): Add declaration.\n\t* parser.c (cp_parser_lookup_name): Don't deal with hidden name\n\there.\n\t* pt.c (push_template_decl_real): Make hidden class template\n\tvisible.\n\t(lookup_template_class, instantiate_class_template): Adjust call\n\tto pushtag.\n\t* semantics.c (begin_class_definition): Likewise.\n\t* rtti.c (init_rtti_processing, build_dynamic_cast_1,\n\ttinfo_base_init, emit_support_tinfos): Use ts_current instead of\n\tts_global.\n\n\t* g++.dg/lookup/hidden-class1.C: New test.\n\t* g++.dg/lookup/hidden-class2.C: Likewise.\n\t* g++.dg/lookup/hidden-class3.C: Likewise.\n\t* g++.dg/lookup/hidden-class4.C: Likewise.\n\t* g++.dg/lookup/hidden-class5.C: Likewise.\n\t* g++.dg/lookup/hidden-class6.C: Likewise.\n\t* g++.dg/lookup/hidden-class7.C: Likewise.\n\t* g++.dg/lookup/hidden-class8.C: Likewise.\n\t* g++.dg/lookup/hidden-class9.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class1.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class2.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class3.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class4.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class5.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class6.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class7.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class8.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class9.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class10.C: Likewise.\n\t* g++.dg/lookup/hidden-temp-class11.C: Likewise.\n\nFrom-SVN: r96430", "tree": {"sha": "3d599413959c98f204efab81966efde722599232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d599413959c98f204efab81966efde722599232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/comments", "author": null, "committer": null, "parents": [{"sha": "a21309013c3bf59f796c2d92a50a85bd0597243c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21309013c3bf59f796c2d92a50a85bd0597243c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21309013c3bf59f796c2d92a50a85bd0597243c"}], "stats": {"total": 422, "additions": 371, "deletions": 51}, "files": [{"sha": "e2a7de3b1b594f7e8ebd8957e360695331d0b238", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -1,3 +1,34 @@\n+2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tFriend class name lookup 5/n\n+\tPR c++/1016\n+\t* cp-tree.h (pushtag): Adjust declaration.\n+\t* decl.c (lookup_and_check_tag): Call lookup_type_scope if\n+\tlookup_name fails.\n+\t(xref_tag): Adjust call to pushtag.  Make hidden class visible.\n+\t(start_enum): Adjust call to pushtag.\n+\t* name-lookup.c (ambiguous_decl): Ignore hidden names.\n+\t(qualify_lookup): Change return type to bool.\n+\t(hidden_name_p): New function.\n+\t(lookup_namespace_name, unqualified_namespace_lookup,\n+\tlookup_name_real): Use it.\n+\t(lookup_type_scope): Update comments.\n+\t(maybe_process_template_type_declaration): Change parameter name\n+\tfrom globalize to is_friend.\n+\t(pushtag): Change globalize parameter of type int to tag_scope.\n+\tHide name if introduced by friend declaration.\n+\t* name-lookup.h (hidden_name_p): Add declaration.\n+\t* parser.c (cp_parser_lookup_name): Don't deal with hidden name\n+\there.\n+\t* pt.c (push_template_decl_real): Make hidden class template\n+\tvisible.\n+\t(lookup_template_class, instantiate_class_template): Adjust call\n+\tto pushtag.\n+\t* semantics.c (begin_class_definition): Likewise.\n+\t* rtti.c (init_rtti_processing, build_dynamic_cast_1, \n+\ttinfo_base_init, emit_support_tinfos): Use ts_current instead of\n+\tts_global.\n+\n 2005-03-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20157"}, {"sha": "640d4dd10a359bbfe20357c2f6b5e1eff752a841", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -3761,7 +3761,7 @@ extern void maybe_push_cleanup_level (tree);\n extern void finish_scope                        (void);\n extern void push_switch\t\t\t\t(tree);\n extern void pop_switch\t\t\t\t(void);\n-extern tree pushtag\t\t\t\t(tree, tree, int);\n+extern tree pushtag\t\t\t\t(tree, tree, tag_scope);\n extern tree make_anon_name\t\t\t(void);\n extern int decls_match\t\t\t\t(tree, tree);\n extern tree duplicate_decls\t\t\t(tree, tree);"}, {"sha": "4e350c348efff9698747bc5a09bb4ee8ce3d8c0f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -9082,7 +9082,6 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n \t   void f(class C);\t\t// No template header here\n \n \t then the required template argument is missing.  */\n-\n       error (\"template argument required for %<%s %T%>\",\n \t     tag_name (tag_code),\n \t     DECL_NAME (CLASSTYPE_TI_TEMPLATE (type)));\n@@ -9104,7 +9103,19 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n   tree t;\n   tree decl;\n   if (scope == ts_global)\n-    decl = lookup_name (name, 2);\n+    {\n+      /* First try ordinary name lookup, ignoring hidden class name\n+\t injected via friend declaration.  */\n+      decl = lookup_name (name, 2);\n+      /* If that fails, the name will be placed in the smallest\n+\t non-class, non-function-prototype scope according to 3.3.1/5.\n+\t We may already have a hidden name declared as friend in this\n+\t scope.  So lookup again but not ignoring hidden name.\n+\t If we find one, that name will be made visible rather than\n+\t creating a new tag.  */\n+      if (!decl)\n+\tdecl = lookup_type_scope (name, ts_within_enclosing_non_class);\n+    }\n   else\n     decl = lookup_type_scope (name, scope);\n \n@@ -9264,8 +9275,7 @@ xref_tag (enum tag_types tag_code, tree name,\n \t{\n \t  t = make_aggr_type (code);\n \t  TYPE_CONTEXT (t) = context;\n-\t  /* pushtag only cares whether SCOPE is zero or not.  */\n-\t  t = pushtag (name, t, scope != ts_current);\n+\t  t = pushtag (name, t, scope);\n \t}\n     }\n   else\n@@ -9279,6 +9289,20 @@ xref_tag (enum tag_types tag_code, tree name,\n \t  error (\"redeclaration of %qT as a non-template\", t);\n \t  t = error_mark_node;\n \t}\n+\n+      /* Make injected friend class visible.  */\n+      if (scope != ts_within_enclosing_non_class\n+\t  && hidden_name_p (TYPE_NAME (t)))\n+\t{\n+\t  DECL_ANTICIPATED (TYPE_NAME (t)) = 0;\n+\t  DECL_FRIEND_P (TYPE_NAME (t)) = 0;\n+\n+\t  if (TYPE_TEMPLATE_INFO (t))\n+\t    {\n+\t      DECL_ANTICIPATED (TYPE_TI_TEMPLATE (t)) = 0;\n+\t      DECL_FRIEND_P (TYPE_TI_TEMPLATE (t)) = 0;\n+\t    }\n+     \t}\n     }\n \n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, t);\n@@ -9520,7 +9544,7 @@ start_enum (tree name)\n \tname = make_anon_name ();\n \n       enumtype = make_node (ENUMERAL_TYPE);\n-      enumtype = pushtag (name, enumtype, 0);\n+      enumtype = pushtag (name, enumtype, /*tag_scope=*/ts_current);\n     }\n \n   return enumtype;"}, {"sha": "4a5429cd29d0e01e229e35c9fbe2b323a6a8d401", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 58, "deletions": 33, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -3296,12 +3296,13 @@ ambiguous_decl (tree name, struct scope_binding *old, cxx_binding *new,\n       case TEMPLATE_DECL:\n         /* If we expect types or namespaces, and not templates,\n            or this is not a template class.  */\n-        if (LOOKUP_QUALIFIERS_ONLY (flags)\n-            && !DECL_CLASS_TEMPLATE_P (val))\n+        if ((LOOKUP_QUALIFIERS_ONLY (flags)\n+\t     && !DECL_CLASS_TEMPLATE_P (val))\n+\t    || hidden_name_p (val))\n           val = NULL_TREE;\n         break;\n       case TYPE_DECL:\n-        if (LOOKUP_NAMESPACES_ONLY (flags))\n+        if (LOOKUP_NAMESPACES_ONLY (flags) || hidden_name_p (val))\n           val = NULL_TREE;\n         break;\n       case NAMESPACE_DECL:\n@@ -3310,7 +3311,7 @@ ambiguous_decl (tree name, struct scope_binding *old, cxx_binding *new,\n         break;\n       case FUNCTION_DECL:\n         /* Ignore built-in functions that are still anticipated.  */\n-        if (LOOKUP_QUALIFIERS_ONLY (flags) || DECL_ANTICIPATED (val))\n+        if (LOOKUP_QUALIFIERS_ONLY (flags) || hidden_name_p (val))\n           val = NULL_TREE;\n         break;\n       default:\n@@ -3382,21 +3383,35 @@ lookup_flags (int prefer_type, int namespaces_only)\n }\n \n /* Given a lookup that returned VAL, use FLAGS to decide if we want to\n-   ignore it or not.  Subroutine of lookup_name_real.  */\n+   ignore it or not.  Subroutine of lookup_name_real and\n+   lookup_type_scope.  */\n \n-static tree\n+static bool\n qualify_lookup (tree val, int flags)\n {\n   if (val == NULL_TREE)\n-    return val;\n+    return false;\n   if ((flags & LOOKUP_PREFER_NAMESPACES) && TREE_CODE (val) == NAMESPACE_DECL)\n-    return val;\n+    return true;\n   if ((flags & LOOKUP_PREFER_TYPES)\n       && (TREE_CODE (val) == TYPE_DECL || TREE_CODE (val) == TEMPLATE_DECL))\n-    return val;\n+    return true;\n   if (flags & (LOOKUP_PREFER_NAMESPACES | LOOKUP_PREFER_TYPES))\n-    return NULL_TREE;\n-  return val;\n+    return false;\n+  return true;\n+}\n+\n+/* Given a lookup that returned VAL, decide if we want to ignore it or \n+   not based on DECL_ANTICIPATED_P.  */\n+\n+bool\n+hidden_name_p (tree val)\n+{\n+  if (DECL_P (val)\n+      && DECL_LANG_SPECIFIC (val)\n+      && DECL_ANTICIPATED (val))\n+    return true;\n+  return false;\n }\n \n /* Look up NAME in the NAMESPACE.  */\n@@ -3467,10 +3482,9 @@ lookup_namespace_name (tree namespace, tree name)\n       if (TREE_CODE (val) == OVERLOAD && ! really_overloaded_fn (val))\n \tval = OVL_FUNCTION (val);\n \n-      /* Ignore built-in functions that haven't been prototyped yet.  */\n-      if (!val || !DECL_P(val)\n-          || !DECL_LANG_SPECIFIC(val)\n-          || !DECL_ANTICIPATED (val))\n+      /* Ignore built-in functions and friends that haven't been declared\n+\t yet.  */\n+      if (!val || !hidden_name_p (val))\n         POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, val);\n     }\n \n@@ -3529,10 +3543,8 @@ unqualified_namespace_lookup (tree name, int flags)\n \n       if (b)\n \t{\n-\t  if (b->value && DECL_P (b->value)\n-\t      && DECL_LANG_SPECIFIC (b->value) \n-\t      && DECL_ANTICIPATED (b->value))\n-\t    /* Ignore anticipated built-in functions.  */\n+\t  if (b->value && hidden_name_p (b->value))\n+\t    /* Ignore anticipated built-in functions and friends.  */\n \t    ;\n \t  else\n \t    binding.value = b->value;\n@@ -3773,6 +3785,8 @@ innermost_non_namespace_value (tree name)\n    node of some kind representing its definition if there is only one\n    such declaration, or return a TREE_LIST with all the overloaded\n    definitions if there are many, or return 0 if it is undefined.\n+   Hidden name, either friend declaration or built-in function, are\n+   not ignored.\n \n    If PREFER_TYPE is > 0, we prefer TYPE_DECLs or namespaces.\n    If PREFER_TYPE is > 1, we reject non-type decls (e.g. namespaces).\n@@ -3837,10 +3851,12 @@ lookup_name_real (tree name, int prefer_type, int nonclass, bool block_p,\n \t  continue;\n \t\n \t/* If this is the kind of thing we're looking for, we're done.  */\n-\tif (qualify_lookup (iter->value, flags))\n+\tif (qualify_lookup (iter->value, flags)\n+\t    && !hidden_name_p (iter->value))\n \t  binding = iter->value;\n \telse if ((flags & LOOKUP_PREFER_TYPES)\n-\t\t && qualify_lookup (iter->type, flags))\n+\t\t && qualify_lookup (iter->type, flags)\n+\t\t && !hidden_name_p (iter->type))\n \t  binding = iter->type;\n \telse\n \t  binding = NULL_TREE;\n@@ -3898,7 +3914,8 @@ lookup_name (tree name, int prefer_type)\n    Unlike lookup_name_real, we make sure that NAME is actually\n    declared in the desired scope, not from inheritance, nor using\n    directive.  For using declaration, there is DR138 still waiting\n-   to be resolved.\n+   to be resolved.  Hidden name coming from earlier an friend \n+   declaration is also returned.\n \n    A TYPE_DECL best matching the NAME is returned.  Catching error\n    and issuing diagnostics are caller's responsibility.  */\n@@ -3948,9 +3965,7 @@ lookup_type_scope (tree name, tag_scope scope)\n \n       if (iter)\n \t{\n-\t  /* If this is the kind of thing we're looking for, we're done.\n-\t     Ignore names found via using declaration.  See DR138 for\n-\t     current status.  */\n+\t  /* If this is the kind of thing we're looking for, we're done.  */\n \t  if (qualify_lookup (iter->type, LOOKUP_PREFER_TYPES))\n \t    val = iter->type;\n \t  else if (qualify_lookup (iter->value, LOOKUP_PREFER_TYPES))\n@@ -4500,7 +4515,7 @@ push_using_directive (tree used)\n    processing.  */\n \n static tree\n-maybe_process_template_type_declaration (tree type, int globalize,\n+maybe_process_template_type_declaration (tree type, int is_friend,\n                                          cxx_scope *b)\n {\n   tree decl = TYPE_NAME (type);\n@@ -4523,7 +4538,7 @@ maybe_process_template_type_declaration (tree type, int globalize,\n \t     push_template_decl_real, but we want the original value.  */\n \t  tree name = DECL_NAME (decl);\n \n-\t  decl = push_template_decl_real (decl, globalize);\n+\t  decl = push_template_decl_real (decl, is_friend);\n \t  /* If the current binding level is the binding level for the\n \t     template parameters (see the comment in\n \t     begin_template_parm_list) and the enclosing level is a class\n@@ -4532,7 +4547,7 @@ maybe_process_template_type_declaration (tree type, int globalize,\n \t     friend case, push_template_decl will already have put the\n \t     friend into global scope, if appropriate.  */\n \t  if (TREE_CODE (type) != ENUMERAL_TYPE\n-\t      && !globalize && b->kind == sk_template_parms\n+\t      && !is_friend && b->kind == sk_template_parms\n \t      && b->level_chain->kind == sk_class)\n \t    {\n \t      finish_member_declaration (CLASSTYPE_TI_TEMPLATE (type));\n@@ -4563,7 +4578,7 @@ maybe_process_template_type_declaration (tree type, int globalize,\n    Returns TYPE upon success and ERROR_MARK_NODE otherwise.  */\n \n tree\n-pushtag (tree name, tree type, int globalize)\n+pushtag (tree name, tree type, tag_scope scope)\n {\n   struct cp_binding_level *b;\n \n@@ -4580,7 +4595,7 @@ pushtag (tree name, tree type, int globalize)\n \t    template is instantiated.  */\n \t || (b->kind == sk_template_parms && b->explicit_spec_p)\n \t || (b->kind == sk_class\n-\t     && (globalize\n+\t     && (scope != ts_current\n \t\t /* We may be defining a new type in the initializer\n \t\t    of a static member variable. We allow this when\n \t\t    not pedantic, and it is particularly useful for\n@@ -4601,7 +4616,7 @@ pushtag (tree name, tree type, int globalize)\n \t    {\n \t      tree cs = current_scope ();\n \n-\t      if (! globalize)\n+\t      if (scope == ts_current)\n \t\tcontext = cs;\n \t      else if (cs != NULL_TREE && TYPE_P (cs))\n \t\t/* When declaring a friend class of a local class, we want\n@@ -4622,11 +4637,21 @@ pushtag (tree name, tree type, int globalize)\n \n \t  d = create_implicit_typedef (name, type);\n \t  DECL_CONTEXT (d) = FROB_CONTEXT (context);\n+\t  if (scope == ts_within_enclosing_non_class)\n+\t    {\n+\t      /* This is a friend.  Make this TYPE_DECL node hidden from\n+\t\t ordinary name lookup.  Its corresponding TEMPLATE_DECL\n+\t\t will be marked in push_template_decl_real.  */\n+\t      retrofit_lang_decl (d);\n+\t      DECL_ANTICIPATED (d) = 1;\n+\t      DECL_FRIEND_P (d) = 1;\n+\t    }\n+\n \t  if (! in_class)\n \t    set_identifier_type_value_with_scope (name, d, b);\n \n-\t  d = maybe_process_template_type_declaration (type,\n-\t\t\t\t\t\t       globalize, b);\n+\t  d = maybe_process_template_type_declaration\n+\t\t(type, scope == ts_within_enclosing_non_class, b);\n \t  if (d == error_mark_node)\n \t    POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n "}, {"sha": "451e6ecffa3589a68cb54f942b2686a5766731b6", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -315,6 +315,7 @@ extern tree lookup_name_real (tree, int, int, bool, int, int);\n extern tree lookup_type_scope (tree, tag_scope);\n extern tree namespace_binding (tree, tree);\n extern void set_namespace_binding (tree, tree, tree);\n+extern bool hidden_name_p (tree);\n extern tree lookup_namespace_name (tree, tree);\n extern tree lookup_qualified_name (tree, tree, bool, bool);\n extern tree lookup_name_nonclass (tree);"}, {"sha": "2b6c03ba4a9e780ea133029fde8f1d11cd05c914", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -14382,10 +14382,7 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n     }\n \n   /* If the lookup failed, let our caller know.  */\n-  if (!decl\n-      || decl == error_mark_node\n-      || (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && DECL_ANTICIPATED (decl)))\n+  if (!decl || decl == error_mark_node)\n     return error_mark_node;\n \n   /* If it's a TREE_LIST, the result of the lookup was ambiguous.  */"}, {"sha": "1147f7984e277b20faf2530099126307319755ef", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -3132,6 +3132,13 @@ push_template_decl_real (tree decl, int is_friend)\n       tmpl = pushdecl_namespace_level (tmpl);\n       if (tmpl == error_mark_node)\n \treturn error_mark_node;\n+\n+      /* Hide template friend classes that haven't been declared yet.  */\n+      if (is_friend && TREE_CODE (decl) == TYPE_DECL)\n+\t{\n+\t  DECL_ANTICIPATED (tmpl) = 1;\n+\t  DECL_FRIEND_P (tmpl) = 1;\n+\t}\n     }\n \n   if (primary)\n@@ -4629,7 +4636,7 @@ lookup_template_class (tree d1,\n \n \t  /* A local class.  Make sure the decl gets registered properly.  */\n \t  if (context == current_function_decl)\n-\t    pushtag (DECL_NAME (template), t, 0);\n+\t    pushtag (DECL_NAME (template), t, /*tag_scope=*/ts_current);\n \t}\n \n       /* If we called start_enum or pushtag above, this information\n@@ -5679,7 +5686,7 @@ instantiate_class_template (tree type)\n \t\t     tsubst_enum.  */\n \t\t  if (name)\n \t\t    SET_IDENTIFIER_TYPE_VALUE (name, newtag);\n-\t\t  pushtag (name, newtag, /*globalize=*/0);\n+\t\t  pushtag (name, newtag, /*tag_scope=*/ts_current);\n \t\t}\n \t    }\n \t  else if (TREE_CODE (t) == FUNCTION_DECL "}, {"sha": "45f0b087a87b60a688c392ee69ac357df32d2238", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -113,7 +113,7 @@ init_rtti_processing (void)\n   \n   push_namespace (std_identifier);\n   type_info_type = xref_tag (class_type, get_identifier (\"type_info\"),\n-\t\t\t     /*tag_scope=*/ts_global, false);\n+\t\t\t     /*tag_scope=*/ts_current, false);\n   pop_namespace ();\n   const_type_info_type_node\n     = build_qualified_type (type_info_type, TYPE_QUAL_CONST);\n@@ -624,7 +624,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t      push_nested_namespace (ns);\n \t      tinfo_ptr = xref_tag (class_type,\n \t\t\t\t    get_identifier (\"__class_type_info\"),\n-\t\t\t\t    /*tag_scope=*/ts_global, false);\n+\t\t\t\t    /*tag_scope=*/ts_current, false);\n \t      \n \t      tinfo_ptr = build_pointer_type\n \t\t(build_qualified_type\n@@ -805,7 +805,7 @@ tinfo_base_init (tree desc, tree target)\n   \n       push_nested_namespace (abi_node);\n       real_type = xref_tag (class_type, TINFO_REAL_NAME (desc),\n-\t\t\t    /*tag_scope=*/ts_global, false);\n+\t\t\t    /*tag_scope=*/ts_current, false);\n       pop_nested_namespace (abi_node);\n   \n       if (!COMPLETE_TYPE_P (real_type))\n@@ -1337,7 +1337,7 @@ emit_support_tinfos (void)\n   push_nested_namespace (abi_node);\n   bltn_type = xref_tag (class_type,\n \t\t\tget_identifier (\"__fundamental_type_info\"), \n-\t\t\t/*tag_scope=*/ts_global, false);\n+\t\t\t/*tag_scope=*/ts_current, false);\n   pop_nested_namespace (abi_node);\n   if (!COMPLETE_TYPE_P (bltn_type))\n     return;"}, {"sha": "15762cb78831e2ce603237cc01b8ec19a31ddd24", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -2122,7 +2122,7 @@ begin_class_definition (tree t)\n   if (t == error_mark_node || ! IS_AGGR_TYPE (t))\n     {\n       t = make_aggr_type (RECORD_TYPE);\n-      pushtag (make_anon_name (), t, 0);\n+      pushtag (make_anon_name (), t, /*tag_scope=*/ts_current);\n     }\n \n   /* Update the location of the decl.  */\n@@ -2131,7 +2131,7 @@ begin_class_definition (tree t)\n   if (TYPE_BEING_DEFINED (t))\n     {\n       t = make_aggr_type (TREE_CODE (t));\n-      pushtag (TYPE_IDENTIFIER (t), t, 0);\n+      pushtag (TYPE_IDENTIFIER (t), t, /*tag_scope=*/ts_current);\n     }\n   maybe_process_partial_specialization (t);\n   pushclass (t);"}, {"sha": "993b95b8ee9412d0ecbe347479c19843e2c4299a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -1,3 +1,28 @@\n+2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tFriend class name lookup 5/n\n+\tPR c++/1016\n+\t* g++.dg/lookup/hidden-class1.C: New test.\n+\t* g++.dg/lookup/hidden-class2.C: Likewise.\n+\t* g++.dg/lookup/hidden-class3.C: Likewise.\n+\t* g++.dg/lookup/hidden-class4.C: Likewise.\n+\t* g++.dg/lookup/hidden-class5.C: Likewise.\n+\t* g++.dg/lookup/hidden-class6.C: Likewise.\n+\t* g++.dg/lookup/hidden-class7.C: Likewise.\n+\t* g++.dg/lookup/hidden-class8.C: Likewise.\n+\t* g++.dg/lookup/hidden-class9.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class1.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class2.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class3.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class4.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class5.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class6.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class7.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class8.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class9.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class10.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class11.C: Likewise.\n+\n 2005-03-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20157"}, {"sha": "fc71e96fb7f1c0d73e21dd58c8749e0fb2c2beb5", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class1.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,8 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+  B *b;\t\t// { dg-error \"no type|expected\" }\n+};"}, {"sha": "19287a5fb21b499fd6613a5b9bcce694bf7308ab", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class2.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,9 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+};\n+\n+class B* b;"}, {"sha": "50a7e331cbbbeef1fd190b055b22d960c6bda3c1", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class3.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,10 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+\n+  class B;\n+  B *b;\n+};"}, {"sha": "c407692caf94a07519d740e214958ccabe11cb44", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class4.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,10 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+};\n+\n+class B *b;\n+B *c;"}, {"sha": "1cf06bcc39582a1c97b14520c8413acb7365e19b", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class5.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,9 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+};\n+\n+B* b;\t\t// { dg-error \"expected\" }"}, {"sha": "96425353911f27761dfb6d72c81efdc11f356358", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class6.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+// Origin: Jay Cox <jaycox@gimp.org>\n+\n+// PR c++/1016: Name lookup for injected friend class\n+\n+class B;\n+\n+namespace N {\n+  class A {\n+    friend class B;\n+    B* b;\n+  };\n+}"}, {"sha": "f681cd649f1e3cf07aedc74306cf9313654aa46f", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class7.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+};\n+\n+class C {\n+  friend class B;\n+};\n+\n+B *b;\t\t// { dg-error \"expected\" }"}, {"sha": "ea4e2f1bbdc9b7b4b1d4309df93da36873b5749b", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class8.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+namespace N {\n+  class A {\n+    friend class B;\n+  };\n+}\n+\n+class N::B {\t// { dg-error \"not name a class\" }\n+};"}, {"sha": "de86b12694e9437005ace033d8a086419d97c0cf", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class9.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+namespace N {\n+  class A {\n+    friend class B;\n+  };\n+}\n+\n+using N::B;\t// { dg-error \"declared\" }"}, {"sha": "c92b7f66a1aa97f64fc5d70adf17faa5e990064c", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class1.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,8 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+  B<int> *b;\t// { dg-error \"no type|expected\" }\n+};"}, {"sha": "2134635a263710d932e549307f79e16b06c9127b", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class10.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class10.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+namespace N {\n+  class A {\n+    template <class T> friend class B;\n+  };\n+}\n+\n+template <class T> class N::B {\t// { dg-error \"not name a class\" }\n+};"}, {"sha": "6e8cbdbb654b4607fc2b27146d72c3e92253ca4a", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class11.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+namespace N {\n+  class A {\n+    template <class T> friend class B;\n+  };\n+}\n+\n+using N::B;\t// { dg-error \"declared\" }"}, {"sha": "56ba76b3aede191dc08786466778bdd828a79e7a", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class2.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,9 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+};\n+\n+class B* b;\t// { dg-error \"argument required|invalid\" }"}, {"sha": "3f96622ea4aba2b9cd6b1347ec4a7ef8efd74203", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class3.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,9 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+  template <class T> class B;\n+  B<int> *b;\n+};"}, {"sha": "02dc9c3e50faebd7b57217835a209cce940627fc", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class4.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class4.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,9 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+};\n+\n+B<int> *b;\t// { dg-error \"expected\" }"}, {"sha": "e6b30b291f9f6e7ec517977ee6e8b775480b9f0c", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class5.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,10 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+};\n+\n+template <class T> class B;\n+B<int>* b;"}, {"sha": "2072695ba7debdb68c452f87808b7fd87904ef8b", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class6.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class B;\n+namespace N {\n+  class A {\n+    template <class T> friend class B;\n+    B* b;\n+  };\n+}"}, {"sha": "22804d782a0400adcc83dc246fb8a4f6e633bafe", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class7.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+};\n+\n+class C {\n+  template <class T> friend class B;\n+};\n+\n+B<int> *b;\t// { dg-error \"expected\" }"}, {"sha": "247c78cf37a2082cc1d00923203cb7debc80b105", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class8.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  template <class T> friend class B;\n+};\n+\n+class C {\n+  friend class B;\t// { dg-error \"argument required|friend\" }\n+};"}, {"sha": "783139b66ab1dae18ba1d834fdc332f9c516140d", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class9.C?ref=bd3d082ebe2c5d6ef38d0c3bb53ae0baefe1654d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright (C) 2005 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+class A {\n+  friend class B;\n+};\n+\n+class C {\n+  template <class T> friend class B;\t// { dg-error \"not a template\" }\n+};"}]}