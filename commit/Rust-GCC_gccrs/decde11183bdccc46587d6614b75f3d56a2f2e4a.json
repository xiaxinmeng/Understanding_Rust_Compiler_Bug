{"sha": "decde11183bdccc46587d6614b75f3d56a2f2e4a", "node_id": "C_kwDOANBUbNoAKGRlY2RlMTExODNiZGNjYzQ2NTg3ZDY2MTRiNzVmM2Q1NmEyZjJlNGE", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-04T07:53:52Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-08T12:55:23Z"}, "message": "[nvptx] Choose -mptx default based on -misa\n\nWhile testing with driver version 390.147 I ran into the problem that it\ndoesn't support ptx isa version 6.3 (the new default), only 6.1.\n\nFurthermore, using the -mptx option is a bit user-unfriendly.\n\nSay we want to compile for sm_80.  We can use -misa=sm_80 to specify that, but\nthen run into errors because the default ptx version is 6.3, which doesn't\nsupport sm_80 yet.\n\nAddress both these issues by:\n- picking a default -mptx based on the active -misa, and\n- ensuring that the default -mptx is at least 6.0 (instead\n  of 6.3).\n\nAlso add an error in case of incompatible options like\n\"-misa=sm_80 -mptx=6.3\":\n...\ncc1: error: PTX version (-mptx) needs to be at least 7.0 to support \\\n  selected -misa (sm_80)\n...\n\nTested on x86_64-linux with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2022-02-08  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104283\n\t* config/nvptx/nvptx-opts.h (enum ptx_version): Add PTX_VERSION_3_0\n\tand PTX_VERSION_4_2.\n\t* config/nvptx/nvptx.cc (first_ptx_version_supporting_sm)\n\t(default_ptx_version_option, ptx_version_to_string)\n\t(sm_version_to_string, handle_ptx_version_option): New function.\n\t(nvptx_option_override): Call handle_ptx_version_option.\n\t(nvptx_file_start): Use ptx_version_to_string and sm_version_to_string.\n\t* config/nvptx/nvptx.md (define_insn \"nvptx_shuffle<mode>\")\n\t(define_insn \"nvptx_vote_ballot\"): Use TARGET_PTX_6_0.\n\t* config/nvptx/nvptx.opt (mptx): Remove 'Init'.", "tree": {"sha": "305a97636fdcfd591107c75ea0c0e3fed5abfd32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305a97636fdcfd591107c75ea0c0e3fed5abfd32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/decde11183bdccc46587d6614b75f3d56a2f2e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decde11183bdccc46587d6614b75f3d56a2f2e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decde11183bdccc46587d6614b75f3d56a2f2e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decde11183bdccc46587d6614b75f3d56a2f2e4a/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de582dd62dfcb18f51e3dd01cf8519a74752530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de582dd62dfcb18f51e3dd01cf8519a74752530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de582dd62dfcb18f51e3dd01cf8519a74752530"}], "stats": {"total": 141, "additions": 122, "deletions": 19}, "files": [{"sha": "cc488b237205a79d302c733870fc63a89cce7860", "filename": "gcc/config/nvptx/nvptx-opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h?ref=decde11183bdccc46587d6614b75f3d56a2f2e4a", "patch": "@@ -31,7 +31,9 @@ enum ptx_isa\n \n enum ptx_version\n {\n+  PTX_VERSION_3_0,\n   PTX_VERSION_3_1,\n+  PTX_VERSION_4_2,\n   PTX_VERSION_6_0,\n   PTX_VERSION_6_3,\n   PTX_VERSION_7_0"}, {"sha": "1b0227a2c31bf660d274cb2a2eb7eafddd75ca25", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 117, "deletions": 16, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=decde11183bdccc46587d6614b75f3d56a2f2e4a", "patch": "@@ -205,13 +205,118 @@ diagnose_openacc_conflict (bool optval, const char *optname)\n     error (\"option %s is not supported together with %<-fopenacc%>\", optname);\n }\n \n+static enum ptx_version\n+first_ptx_version_supporting_sm (enum ptx_isa sm)\n+{\n+  switch (sm)\n+    {\n+    case PTX_ISA_SM30:\n+      return PTX_VERSION_3_0;\n+    case PTX_ISA_SM35:\n+      return PTX_VERSION_3_1;\n+    case PTX_ISA_SM53:\n+      return PTX_VERSION_4_2;\n+    case PTX_ISA_SM75:\n+      return PTX_VERSION_6_3;\n+    case PTX_ISA_SM80:\n+      return PTX_VERSION_7_0;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+static enum ptx_version\n+default_ptx_version_option (void)\n+{\n+  enum ptx_version first\n+    = first_ptx_version_supporting_sm ((enum ptx_isa) ptx_isa_option);\n+\n+  /* Pick a version that supports the sm.  */\n+  enum ptx_version res = first;\n+\n+  /* Pick at least 3.1.  This has been the smallest version historically.  */\n+  res = MAX (res, PTX_VERSION_3_1);\n+\n+  /* Pick at least 6.0, to enable using bar.warp.sync to have a way to force\n+     warp convergence.  */\n+  res = MAX (res, PTX_VERSION_6_0);\n+\n+  /* Verify that we pick a version that supports the sm.  */\n+  gcc_assert (first <= res);\n+  return res;\n+}\n+\n+static const char *\n+ptx_version_to_string (enum ptx_version v)\n+{\n+  switch (v)\n+    {\n+    case PTX_VERSION_3_0:\n+      return \"3.0\";\n+    case PTX_VERSION_3_1:\n+      return \"3.1\";\n+    case PTX_VERSION_4_2:\n+      return \"4.2\";\n+    case PTX_VERSION_6_0:\n+      return \"6.0\";\n+    case PTX_VERSION_6_3:\n+      return \"6.3\";\n+    case PTX_VERSION_7_0:\n+      return \"7.0\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+static const char *\n+sm_version_to_string (enum ptx_isa sm)\n+{\n+  switch (sm)\n+    {\n+    case PTX_ISA_SM30:\n+      return \"30\";\n+    case PTX_ISA_SM35:\n+      return \"35\";\n+    case PTX_ISA_SM53:\n+      return \"53\";\n+    case PTX_ISA_SM70:\n+      return \"70\";\n+    case PTX_ISA_SM75:\n+      return \"75\";\n+    case PTX_ISA_SM80:\n+      return \"80\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+static void\n+handle_ptx_version_option (void)\n+{\n+  if (!OPTION_SET_P (ptx_version_option))\n+    {\n+      ptx_version_option = default_ptx_version_option ();\n+      return;\n+    }\n+\n+  enum ptx_version first\n+    = first_ptx_version_supporting_sm ((enum ptx_isa) ptx_isa_option);\n+\n+  if (ptx_version_option < first)\n+    error (\"PTX version (-mptx) needs to be at least %s to support selected\"\n+\t   \" -misa (sm_%s)\", ptx_version_to_string (first),\n+\t   sm_version_to_string ((enum ptx_isa)ptx_isa_option));\n+}\n+\n /* Implement TARGET_OPTION_OVERRIDE.  */\n \n static void\n nvptx_option_override (void)\n {\n   init_machine_status = nvptx_init_machine_status;\n \n+  handle_ptx_version_option ();\n+\n   /* Set toplevel_reorder, unless explicitly disabled.  We need\n      reordering so that we emit necessary assembler decls of\n      undeclared variables. */\n@@ -5430,23 +5535,19 @@ static void\n nvptx_file_start (void)\n {\n   fputs (\"// BEGIN PREAMBLE\\n\", asm_out_file);\n-  if (TARGET_PTX_7_0)\n-    fputs (\"\\t.version\\t7.0\\n\", asm_out_file);\n-  else if (TARGET_PTX_6_3)\n-    fputs (\"\\t.version\\t6.3\\n\", asm_out_file);\n-  else\n-    fputs (\"\\t.version\\t3.1\\n\", asm_out_file);\n-  if (TARGET_SM80)\n-    fputs (\"\\t.target\\tsm_80\\n\", asm_out_file);\n-  else if (TARGET_SM75)\n-    fputs (\"\\t.target\\tsm_75\\n\", asm_out_file);\n-  else if (TARGET_SM53)\n-    fputs (\"\\t.target\\tsm_53\\n\", asm_out_file);\n-  else if (TARGET_SM35)\n-    fputs (\"\\t.target\\tsm_35\\n\", asm_out_file);\n-  else\n-    fputs (\"\\t.target\\tsm_30\\n\", asm_out_file);\n+\n+  fputs (\"\\t.version\\t\", asm_out_file);\n+  fputs (ptx_version_to_string ((enum ptx_version)ptx_version_option),\n+\t asm_out_file);\n+  fputs (\"\\n\", asm_out_file);\n+\n+  fputs (\"\\t.target\\tsm_\", asm_out_file);\n+  fputs (sm_version_to_string ((enum ptx_isa)ptx_isa_option),\n+\t asm_out_file);\n+  fputs (\"\\n\", asm_out_file);\n+\n   fprintf (asm_out_file, \"\\t.address_size %d\\n\", GET_MODE_BITSIZE (Pmode));\n+\n   fputs (\"// END PREAMBLE\\n\", asm_out_file);\n }\n "}, {"sha": "7463603a0b0316a109d6164dc3d05f4045223d0a", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=decde11183bdccc46587d6614b75f3d56a2f2e4a", "patch": "@@ -1603,7 +1603,7 @@\n \t\t  UNSPEC_SHUFFLE))]\n   \"\"\n   {\n-    if (TARGET_PTX_6_3)\n+    if (TARGET_PTX_6_0)\n       return \"%.\\\\tshfl.sync%S3.b32\\\\t%0, %1, %2, 31, 0xffffffff;\";\n     else\n       return \"%.\\\\tshfl%S3.b32\\\\t%0, %1, %2, 31;\";\n@@ -1615,7 +1615,7 @@\n \t\t   UNSPEC_VOTE_BALLOT))]\n   \"\"\n   {\n-    if (TARGET_PTX_6_3)\n+    if (TARGET_PTX_6_0)\n       return \"%.\\\\tvote.sync.ballot.b32\\\\t%0, %1, 0xffffffff;\";\n     else\n       return \"%.\\\\tvote.ballot.b32\\\\t%0, %1;\";"}, {"sha": "e3f65b2d0b187ce2f224130dd63ae69c2542a299", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decde11183bdccc46587d6614b75f3d56a2f2e4a/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=decde11183bdccc46587d6614b75f3d56a2f2e4a", "patch": "@@ -89,5 +89,5 @@ EnumValue\n Enum(ptx_version) String(7.0) Value(PTX_VERSION_7_0)\n \n mptx=\n-Target RejectNegative ToLower Joined Enum(ptx_version) Var(ptx_version_option) Init(PTX_VERSION_6_3)\n+Target RejectNegative ToLower Joined Enum(ptx_version) Var(ptx_version_option)\n Specify the version of the ptx version to use."}]}