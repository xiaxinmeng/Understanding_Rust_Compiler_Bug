{"sha": "5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjYjkzZjEzODcxMThkOTE5ODg3YzVmMjJjZmMzMmI1YWRmYzBlYQ==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-07-28T15:23:11Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-07-28T15:23:11Z"}, "message": "re PR fortran/32048 (max/min and NaN)\n\n\tPR fortran/32048\n\n\t* f95-lang.c (gfc_init_builtin_functions): Add declaration for\n\t__builtin_isnan.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Handled NaNs.\n\n\t* gfortran.dg/nan_1.f90: New test.\n\nFrom-SVN: r127019", "tree": {"sha": "9929c388cc73a98ff25ef599b9a7375c67cab0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9929c388cc73a98ff25ef599b9a7375c67cab0a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080"}], "stats": {"total": 144, "additions": 141, "deletions": 3}, "files": [{"sha": "3e03ef616c0b50d454fc6257d16382af6531f166", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "patch": "@@ -1004,6 +1004,11 @@ gfc_init_builtin_functions (void)\n \t\t      \"malloc\", false);\n   DECL_IS_MALLOC (built_in_decls[BUILT_IN_MALLOC]) = 1;\n \n+  tmp = tree_cons (NULL_TREE, void_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_isnan\", ftype, BUILT_IN_ISNAN,\n+\t\t      \"__builtin_isnan\", true);\n+\n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n   builtin_types[(int) ENUM] = VALUE;\n #define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\"}, {"sha": "8f57ae17ca7286dd5458cd3737c22802fd5aaa61", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "patch": "@@ -1407,11 +1407,11 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n /* Get the minimum/maximum value of all the parameters.\n     minmax (a1, a2, a3, ...)\n     {\n-      if (a2 .op. a1)\n+      if (a2 .op. a1 || isnan(a1))\n         mvar = a2;\n       else\n         mvar = a1;\n-      if (a3 .op. mvar)\n+      if (a3 .op. mvar || isnan(mvar))\n         mvar = a3;\n       ...\n       return mvar\n@@ -1487,7 +1487,7 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, int op)\n   elsecase = build2_v (MODIFY_EXPR, mvar, limit);\n   for (i = 1, argexpr = argexpr->next; i < nargs; i++)\n     {\n-      tree cond;\n+      tree cond, isnan;\n \n       val = args[i]; \n \n@@ -1509,6 +1509,15 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, int op)\n       thencase = build2_v (MODIFY_EXPR, mvar, convert (type, val));\n \n       tmp = build2 (op, boolean_type_node, convert (type, val), limit);\n+\n+      /* FIXME: When the IEEE_ARITHMETIC module is implemented, the call to\n+\t __builtin_isnan might be made dependent on that module being loaded,\n+\t to help performance of programs that don't rely on IEEE semantics.  */\n+      if (FLOAT_TYPE_P (TREE_TYPE (limit)))\n+\t{\n+\t  isnan = build_call_expr (built_in_decls[BUILT_IN_ISNAN], 1, limit);\n+\t  tmp = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, tmp, isnan);\n+\t}\n       tmp = build3_v (COND_EXPR, tmp, thencase, elsecase);\n \n       if (cond != NULL_TREE)"}, {"sha": "47cecbac8c82303a5664ea701fff3d0a5cf85311", "filename": "gcc/testsuite/gfortran.dg/nan_1.f90", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcb93f1387118d919887c5f22cfc32b5adfc0ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_1.f90?ref=5fcb93f1387118d919887c5f22cfc32b5adfc0ea", "patch": "@@ -0,0 +1,124 @@\n+! Test if MIN and MAX intrinsics behave correctly when passed NaNs\n+! as arguments\n+!\n+! { dg-do run }\n+!\n+module aux\n+  interface isnan\n+    module procedure isnan_r\n+    module procedure isnan_d\n+  end interface isnan\n+\n+  interface isinf\n+    module procedure isinf_r\n+    module procedure isinf_d\n+  end interface isinf\n+contains\n+\n+  pure function isnan_r(x) result (isnan)\n+    logical :: isnan\n+    real, intent(in) :: x\n+\n+    isnan = (.not.(x == x))\n+  end function isnan_r\n+\n+  pure function isnan_d(x) result (isnan)\n+    logical :: isnan\n+    double precision, intent(in) :: x\n+\n+    isnan = (.not.(x == x))\n+  end function isnan_d\n+\n+  pure function isinf_r(x) result (isinf)\n+    logical :: isinf\n+    real, intent(in) :: x\n+\n+    isinf = (x > huge(x)) .or. (x < -huge(x))\n+  end function isinf_r\n+\n+  pure function isinf_d(x) result (isinf)\n+    logical :: isinf\n+    double precision, intent(in) :: x\n+\n+    isinf = (x > huge(x)) .or. (x < -huge(x))\n+  end function isinf_d\n+end module aux\n+\n+program test\n+  use aux\n+  implicit none\n+  real :: nan, large, inf\n+\n+  ! Create a NaN and check it\n+  nan = 0\n+  nan = nan / nan\n+  if (nan == nan .or. nan > nan .or. nan < nan .or. nan >= nan &\n+      .or. nan <= nan) call abort\n+  if (isnan (2.d0) .or. (.not. isnan(nan)) .or. &\n+      (.not. isnan(real(nan,kind=kind(2.d0))))) call abort\n+\n+  ! Create an INF and check it\n+  large = huge(large)\n+  inf = 2 * large\n+  if (isinf(nan) .or. isinf(large) .or. .not. isinf(inf)) call abort\n+  if (isinf(-nan) .or. isinf(-large) .or. .not. isinf(-inf)) call abort\n+\n+  ! Check that MIN and MAX behave correctly\n+  if (max(2.0, nan) /= 2.0) call abort\n+  if (min(2.0, nan) /= 2.0) call abort\n+  if (max(nan, 2.0) /= 2.0) call abort\n+  if (min(nan, 2.0) /= 2.0) call abort\n+\n+  if (max(2.d0, nan) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (min(2.d0, nan) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (max(nan, 2.d0) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (min(nan, 2.d0) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+\n+  if (.not. isnan(min(nan,nan))) call abort\n+  if (.not. isnan(max(nan,nan))) call abort\n+\n+  ! Same thing, with more arguments\n+\n+  if (max(3.0, 2.0, nan) /= 3.0) call abort\n+  if (min(3.0, 2.0, nan) /= 2.0) call abort\n+  if (max(3.0, nan, 2.0) /= 3.0) call abort\n+  if (min(3.0, nan, 2.0) /= 2.0) call abort\n+  if (max(nan, 3.0, 2.0) /= 3.0) call abort\n+  if (min(nan, 3.0, 2.0) /= 2.0) call abort\n+\n+  if (max(3.d0, 2.d0, nan) /= 3.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (min(3.d0, 2.d0, nan) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (max(3.d0, nan, 2.d0) /= 3.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (min(3.d0, nan, 2.d0) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (max(nan, 3.d0, 2.d0) /= 3.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+  if (min(nan, 3.d0, 2.d0) /= 2.d0) call abort ! { dg-warning \"Extension: Different type kinds\" }\n+\n+  if (.not. isnan(min(nan,nan,nan))) call abort\n+  if (.not. isnan(max(nan,nan,nan))) call abort\n+  if (.not. isnan(min(nan,nan,nan,nan))) call abort\n+  if (.not. isnan(max(nan,nan,nan,nan))) call abort\n+  if (.not. isnan(min(nan,nan,nan,nan,nan))) call abort\n+  if (.not. isnan(max(nan,nan,nan,nan,nan))) call abort\n+\n+  ! Large values, INF and NaNs\n+  if (.not. isinf(max(large, inf))) call abort\n+  if (isinf(min(large, inf))) call abort\n+  if (.not. isinf(max(nan, large, inf))) call abort\n+  if (isinf(min(nan, large, inf))) call abort\n+  if (.not. isinf(max(large, nan, inf))) call abort\n+  if (isinf(min(large, nan, inf))) call abort\n+  if (.not. isinf(max(large, inf, nan))) call abort\n+  if (isinf(min(large, inf, nan))) call abort\n+\n+  if (.not. isinf(min(-large, -inf))) call abort\n+  if (isinf(max(-large, -inf))) call abort\n+  if (.not. isinf(min(nan, -large, -inf))) call abort\n+  if (isinf(max(nan, -large, -inf))) call abort\n+  if (.not. isinf(min(-large, nan, -inf))) call abort\n+  if (isinf(max(-large, nan, -inf))) call abort\n+  if (.not. isinf(min(-large, -inf, nan))) call abort\n+  if (isinf(max(-large, -inf, nan))) call abort\n+\n+end program test\n+\n+! { dg-final { cleanup-modules \"aux\" } }"}]}