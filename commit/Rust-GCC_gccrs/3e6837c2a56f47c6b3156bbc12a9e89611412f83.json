{"sha": "3e6837c2a56f47c6b3156bbc12a9e89611412f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2ODM3YzJhNTZmNDdjNmIzMTU2YmJjMTJhOWU4OTYxMTQxMmY4Mw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-12-14T22:38:08Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-12-14T22:38:08Z"}, "message": "PR tree-optimization/87096 - Optimised snprintf is not POSIX conformant\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/87096\n\t* gimple-ssa-sprintf.c (sprintf_dom_walker::handle_gimple_call): Avoid\n\tfolding calls whose bound may exceed INT_MAX.  Diagnose bound ranges\n\tthat exceed the limit.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/87096\n\t* gcc.dg/tree-ssa/builtin-snprintf-4.c: New test.\n\nFrom-SVN: r267157", "tree": {"sha": "1ebbcdd3b8bf5c101b8a55c558e45f3af4b6455a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ebbcdd3b8bf5c101b8a55c558e45f3af4b6455a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e6837c2a56f47c6b3156bbc12a9e89611412f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6837c2a56f47c6b3156bbc12a9e89611412f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6837c2a56f47c6b3156bbc12a9e89611412f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6837c2a56f47c6b3156bbc12a9e89611412f83/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92863013e5f487dc43d78228ad20757ee8f20d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92863013e5f487dc43d78228ad20757ee8f20d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92863013e5f487dc43d78228ad20757ee8f20d77"}], "stats": {"total": 212, "additions": 205, "deletions": 7}, "files": [{"sha": "6d0f1d50c11766585dcc936fdaa7d60f02b216ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e6837c2a56f47c6b3156bbc12a9e89611412f83", "patch": "@@ -1,3 +1,10 @@\n+2018-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR rtl-optimization/87096\n+\t* gimple-ssa-sprintf.c (sprintf_dom_walker::handle_gimple_call): Avoid\n+\tfolding calls whose bound may exceed INT_MAX.  Diagnose bound ranges\n+\tthat exceed the limit.\n+\n 2018-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR web/79738"}, {"sha": "52286a6da1cfe4f54bd319eb22f0f3e589d3fad8", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=3e6837c2a56f47c6b3156bbc12a9e89611412f83", "patch": "@@ -3990,6 +3990,7 @@ sprintf_dom_walker::handle_gimple_call (gimple_stmt_iterator *gsi)\n   /* True when the destination size is constant as opposed to the lower\n      or upper bound of a range.  */\n   bool dstsize_cst_p = true;\n+  bool posunder4k = true;\n \n   if (idx_dstsize == UINT_MAX)\n     {\n@@ -4022,11 +4023,20 @@ sprintf_dom_walker::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t\t\t    \"specified bound %wu exceeds maximum object size \"\n \t\t\t    \"%wu\",\n \t\t\t    dstsize, target_size_max () / 2);\n+\t      /* POSIX requires snprintf to fail if DSTSIZE is greater\n+\t\t than INT_MAX.  Even though not all POSIX implementations\n+\t\t conform to the requirement, avoid folding in this case.  */\n+\t      posunder4k = false;\n \t    }\n \t  else if (dstsize > target_int_max ())\n-\t    warning_at (gimple_location (info.callstmt), info.warnopt (),\n-\t\t\t\"specified bound %wu exceeds %<INT_MAX%>\",\n-\t\t\tdstsize);\n+\t    {\n+\t      warning_at (gimple_location (info.callstmt), info.warnopt (),\n+\t\t\t  \"specified bound %wu exceeds %<INT_MAX%>\",\n+\t\t\t  dstsize);\n+\t      /* POSIX requires snprintf to fail if DSTSIZE is greater\n+\t\t than INT_MAX.  Avoid folding in that case.  */\n+\t      posunder4k = false;\n+\t    }\n \t}\n       else if (TREE_CODE (size) == SSA_NAME)\n \t{\n@@ -4035,9 +4045,29 @@ sprintf_dom_walker::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t     of them at level 2.  */\n \t  value_range *vr = evrp_range_analyzer.get_value_range (size);\n \t  if (range_int_cst_p (vr))\n-\t    dstsize = (warn_level < 2\n-\t\t       ? TREE_INT_CST_LOW (vr->max ())\n-\t\t       : TREE_INT_CST_LOW (vr->min ()));\n+\t    {\n+\t      unsigned HOST_WIDE_INT minsize = TREE_INT_CST_LOW (vr->min ());\n+\t      unsigned HOST_WIDE_INT maxsize = TREE_INT_CST_LOW (vr->max ());\n+\t      dstsize = warn_level < 2 ? maxsize : minsize;\n+\n+\t      if (minsize > target_int_max ())\n+\t\twarning_at (gimple_location (info.callstmt), info.warnopt (),\n+\t\t\t    \"specified bound range [%wu, %wu] exceeds \"\n+\t\t\t    \"%<INT_MAX%>\",\n+\t\t\t    minsize, maxsize);\n+\n+\t      /* POSIX requires snprintf to fail if DSTSIZE is greater\n+\t\t than INT_MAX.  Avoid folding if that's possible.  */\n+\t      if (maxsize > target_int_max ())\n+\t\tposunder4k = false;\n+\t    }\n+\t  else if (vr->varying_p ())\n+\t    {\n+\t      /* POSIX requires snprintf to fail if DSTSIZE is greater\n+\t\t than INT_MAX.  Since SIZE's range is unknown, avoid\n+\t\t folding.  */\n+\t      posunder4k = false;\n+\t    }\n \n \t  /* The destination size is not constant.  If the function is\n \t     bounded (e.g., snprintf) a lower bound of zero doesn't\n@@ -4122,7 +4152,7 @@ sprintf_dom_walker::handle_gimple_call (gimple_stmt_iterator *gsi)\n      directive.  Clear POSUNDER4K for the former set of functions and set\n      it to true for the latter (it can only be cleared later, but it is\n      never set to true again).  */\n-  res.posunder4k = dstptr;\n+  res.posunder4k = posunder4k && dstptr;\n \n   bool success = compute_format_length (info, &res);\n   if (res.warned)"}, {"sha": "caa4f37db78b684e79cc44310d37c4410c3c6a08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e6837c2a56f47c6b3156bbc12a9e89611412f83", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/87096\n+\t* gcc.dg/tree-ssa/builtin-snprintf-4.c: New test.\n+\n 2018-12-14  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/87814"}, {"sha": "5a6160881e3cbe84670af765879e741ed004cc4a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-4.c", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6837c2a56f47c6b3156bbc12a9e89611412f83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-4.c?ref=3e6837c2a56f47c6b3156bbc12a9e89611412f83", "patch": "@@ -0,0 +1,156 @@\n+/* PR tree-optimization/87096 - \"Optimised\" snprintf is not POSIX conformant\n+   Verify that calls to snprintf with size in excess of INT_MAX are not\n+   treated as successful.\n+   It would be valid for GCC to fold some of these calls to a negative\n+   value provided it also arranged to set errno to EOVERFLOW.  If that\n+   is ever implemented this test will need to be adjusted.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized -ftrack-macro-expansion=0\" } */\n+\n+#include \"../range.h\"\n+\n+typedef __builtin_va_list va_list;\n+\n+extern int snprintf (char*, size_t, const char*, ...);\n+extern int vsnprintf (char*, size_t, const char*, va_list);\n+\n+#define CAT(x, y) x ## y\n+#define CONCAT(x, y) CAT (x, y)\n+#define FAILNAME(name) CONCAT (call_ ## name ##_on_line_, __LINE__)\n+\n+#define FAIL(name) do {\t\t\t\t\\\n+    extern void FAILNAME (name) (void);\t\t\\\n+    FAILNAME (name)();\t\t\t\t\\\n+  } while (0)\n+\n+/* Macro to emit a call to function named\n+     call_in_true_branch_not_eliminated_on_line_NNN()\n+   for each expression that's expected to fold to false but that\n+   GCC does not fold.  The dg-final scan-tree-dump-time directive\n+   at the bottom of the test verifies that no such call appears\n+   in output.  */\n+#define ELIM(expr)\t\t\t\t\t\t\t\\\n+  if ((expr)) FAIL (in_true_branch_not_eliminated); else (void)0\n+\n+/* Macro to emit a call to a function named\n+     call_made_in_{true,false}_branch_on_line_NNN()\n+   for each call that's expected to be retained.  The dg-final\n+   scan-tree-dump-time directive at the bottom of the test verifies\n+   that the expected number of both kinds of calls appears in output\n+   (a pair for each line with the invocation of the KEEP() macro.  */\n+#define KEEP(expr)\t\t\t\t\\\n+  if (expr)\t\t\t\t\t\\\n+    FAIL (made_in_true_branch);\t\t\t\\\n+  else\t\t\t\t\t\t\\\n+    FAIL (made_in_false_branch)\n+\n+extern void sink (int, ...);\n+#define sink(...) sink (0, __VA_ARGS__)\n+\n+#define WARN(N, expr)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    char a[N];\t\t\t\t\t\\\n+    expr;\t\t\t\t\t\\\n+    sink (a);\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+static const size_t imax = __INT_MAX__;\n+static const size_t imaxp1 = imax + 1;\n+\n+static const size_t dmax = __PTRDIFF_MAX__;\n+static const size_t dmaxp1 = dmax + 1;\n+\n+static const size_t szmax = __SIZE_MAX__;\n+static const size_t szmaxm1 = __SIZE_MAX__ - 1;\n+\n+\n+void test_size_cst (char **d)\n+{\n+  ELIM (0 > snprintf (*d++, imax, \"%s\", \"\"));\n+\n+  KEEP (0 > snprintf (*d++, imaxp1, \"%s\", \"\"));   /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+\n+  KEEP (0 > snprintf (*d++, dmax, \"%s\", \"\"));     /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+  KEEP (0 > snprintf (*d++, dmaxp1, \"%s\", \"\"));   /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+  KEEP (0 > snprintf (*d++, szmaxm1, \"%s\", \"\"));  /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+  KEEP (0 > snprintf (*d++, szmax, \"%s\", \"\"));    /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+}\n+\n+\n+void test_size_cst_va (char **d, va_list va)\n+{\n+  ELIM (0 > vsnprintf (*d++, imax, \" \", va));\n+\n+  KEEP (0 > vsnprintf (*d++, imaxp1, \" \", va));   /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+\n+  KEEP (0 > vsnprintf (*d++, dmax, \" \", va));     /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+  KEEP (0 > vsnprintf (*d++, dmaxp1, \" \", va));   /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+  KEEP (0 > vsnprintf (*d++, szmaxm1, \" \", va));  /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+  KEEP (0 > vsnprintf (*d++, szmax, \" \", va));    /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+}\n+\n+\n+void test_size_range (char **d)\n+{\n+  size_t r = UR (imax - 1, imax);\n+  ELIM (0 > snprintf (*d++, r, \"%s\", \"\"));\n+\n+  r = UR (imax, imax + 1);\n+  KEEP (0 > snprintf (*d++, r, \"%s\", \"\"));\n+\n+  r = UR (imaxp1, imaxp1 + 1);\n+  KEEP (0 > snprintf (*d++, r, \"%s\", \"\"));        /* { dg-warning \"specified bound range \\\\\\[\\[0-9\\]+, \\[0-9\\]+] exceeds .INT_MAX.\" } */\n+\n+  r = UR (dmax, dmaxp1);\n+  KEEP (0 > snprintf (*d++, r, \"%s\", \"\"));        /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+\n+  r = UR (dmaxp1, dmaxp1 + 1);\n+  KEEP (0 > snprintf (*d++, r, \"%s\", \"\"));        /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+\n+  r = UR (szmaxm1, szmax);\n+  KEEP (0 > snprintf (*d++, r, \"%s\", \"\"));        /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+}\n+\n+\n+void test_size_range_va (char **d, va_list va)\n+{\n+  size_t r = UR (imax - 1, imax);\n+  ELIM (0 > vsnprintf (*d++, r, \" \", va));\n+\n+  r = UR (imax, imax + 1);\n+  KEEP (0 > vsnprintf (*d++, r, \" \", va));\n+\n+  r = UR (imaxp1, imaxp1 + 1);\n+  KEEP (0 > vsnprintf (*d++, r, \" \", va));        /* { dg-warning \"specified bound range \\\\\\[\\[0-9\\]+, \\[0-9\\]+] exceeds .INT_MAX.\" } */\n+\n+  r = UR (dmax, dmaxp1);\n+  KEEP (0 > vsnprintf (*d++, r, \" \", va));        /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+\n+  r = UR (dmaxp1, dmaxp1 + 1);\n+  KEEP (0 > vsnprintf (*d++, r, \" \", va));        /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+\n+  r = UR (szmaxm1, szmax);\n+  KEEP (0 > vsnprintf (*d++, r, \" \", va));        /* { dg-warning \"\\\\\\[-Wformat-truncation=]\" } */\n+}\n+\n+\n+void test_size_varying (char **d, size_t n)\n+{\n+  KEEP (0 > snprintf (*d++, n, \"%s\", \"\"));\n+\n+  n += 1;\n+  KEEP (0 > snprintf (*d++, n, \"%s\", \"\"));\n+}\n+\n+\n+void test_size_varying_va (char **d, size_t n, va_list va)\n+{\n+  KEEP (0 > vsnprintf (*d++, n, \" \", va));\n+\n+  n += 1;\n+  KEEP (0 > vsnprintf (*d++, n, \" \", va));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" = snprintf\" 12 \"optimized\"} }\n+   { dg-final { scan-tree-dump-times \" = vsnprintf\" 12 \"optimized\"} } */"}]}