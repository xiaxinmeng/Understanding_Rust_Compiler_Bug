{"sha": "56adf813f4e23d95d92385dee9b31e5e0d476abd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhZGY4MTNmNGUyM2Q5NWQ5MjM4NWRlZTliMzFlNWUwZDQ3NmFiZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-12-22T15:02:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-03T09:28:21Z"}, "message": "[Ada] No_Implicit_Loops restriction and pragma Assert\n\ngcc/ada/\n\n\t* tbuild.adb (Make_Implicit_Loop_Statement): Disable restriction\n\tchecking on dead paths.", "tree": {"sha": "4b9c81db20e9e147a709e1f5dfe948d431112bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b9c81db20e9e147a709e1f5dfe948d431112bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56adf813f4e23d95d92385dee9b31e5e0d476abd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56adf813f4e23d95d92385dee9b31e5e0d476abd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56adf813f4e23d95d92385dee9b31e5e0d476abd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56adf813f4e23d95d92385dee9b31e5e0d476abd/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36ee1b4df7197b6e7542bb67004b1fcf09714ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36ee1b4df7197b6e7542bb67004b1fcf09714ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36ee1b4df7197b6e7542bb67004b1fcf09714ce"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "6febaa748fa8a7ffa5345ab797c3ed54915130c5", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56adf813f4e23d95d92385dee9b31e5e0d476abd/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56adf813f4e23d95d92385dee9b31e5e0d476abd/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=56adf813f4e23d95d92385dee9b31e5e0d476abd", "patch": "@@ -35,6 +35,7 @@ with Opt;      use Opt;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Sem_Aux;  use Sem_Aux;\n+with Sem_Util; use Sem_Util;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n@@ -348,14 +349,42 @@ package body Tbuild is\n       Has_Created_Identifier : Boolean := False;\n       End_Label              : Node_Id := Empty) return Node_Id\n    is\n-   begin\n-      Check_Restriction (No_Implicit_Loops, Node);\n+      P                  : Node_Id;\n+      Check_Restrictions : Boolean := True;\n+   begin\n+      --  Do not check restrictions if the implicit loop statement is part\n+      --  of a dead branch: False and then ...\n+      --  This will occur in particular as part of the expansion of pragma\n+      --  Assert when assertions are disabled.\n+\n+      P := Parent (Node);\n+      while Present (P) loop\n+         if Nkind (P) = N_And_Then then\n+            if Nkind (Left_Opnd (P)) = N_Identifier\n+              and then Entity (Left_Opnd (P)) = Standard_False\n+            then\n+               Check_Restrictions := False;\n+               exit;\n+            end if;\n \n-      if Present (Iteration_Scheme)\n-        and then Nkind (Iteration_Scheme) /= N_Iterator_Specification\n-        and then Present (Condition (Iteration_Scheme))\n-      then\n-         Check_Restriction (No_Implicit_Conditionals, Node);\n+         --  Prevent the search from going too far\n+\n+         elsif Is_Body_Or_Package_Declaration (P) then\n+            exit;\n+         end if;\n+\n+         P := Parent (P);\n+      end loop;\n+\n+      if Check_Restrictions then\n+         Check_Restriction (No_Implicit_Loops, Node);\n+\n+         if Present (Iteration_Scheme)\n+           and then Nkind (Iteration_Scheme) /= N_Iterator_Specification\n+           and then Present (Condition (Iteration_Scheme))\n+         then\n+            Check_Restriction (No_Implicit_Conditionals, Node);\n+         end if;\n       end if;\n \n       return Make_Loop_Statement (Sloc (Node),"}]}