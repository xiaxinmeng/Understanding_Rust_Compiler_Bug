{"sha": "440ed9f839a068948c72441eda2ef3da515f4656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwZWQ5ZjgzOWEwNjg5NDhjNzI0NDFlZGEyZWYzZGE1MTVmNDY1Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-22T12:25:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-22T12:25:44Z"}, "message": "Handle a null lhs in expand_direct_optab_fn (PR85862)\n\nThis PR showed that the normal function for expanding directly-mapped\ninternal functions didn't handle the case in which the call was only\nbeing kept for its side-effects.\n\n2018-05-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR middle-end/85862\n\t* internal-fn.c (expand_direct_optab_fn): Cope with a null lhs.\n\ngcc/testsuite/\n\tPR middle-end/85862\n\t* gcc.dg/torture/pr85862.c: New test.\n\nFrom-SVN: r260504", "tree": {"sha": "54e8716f0c7fc3013557e980c5c8beb7ed532381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e8716f0c7fc3013557e980c5c8beb7ed532381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/440ed9f839a068948c72441eda2ef3da515f4656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440ed9f839a068948c72441eda2ef3da515f4656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/440ed9f839a068948c72441eda2ef3da515f4656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440ed9f839a068948c72441eda2ef3da515f4656/comments", "author": null, "committer": null, "parents": [{"sha": "81d5198d0093ab144c8a13b85c56ef496192f930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d5198d0093ab144c8a13b85c56ef496192f930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d5198d0093ab144c8a13b85c56ef496192f930"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "5e09013ad6465c37b59ad2b7a5db721fa356515e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=440ed9f839a068948c72441eda2ef3da515f4656", "patch": "@@ -1,3 +1,8 @@\n+2018-05-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR middle-end/85862\n+\t* internal-fn.c (expand_direct_optab_fn): Cope with a null lhs.\n+\n 2018-05-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85834"}, {"sha": "bb4404ed2909499df502b696f68924d900f17e76", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=440ed9f839a068948c72441eda2ef3da515f4656", "patch": "@@ -2891,14 +2891,15 @@ expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n   insn_code icode = direct_optab_handler (optab, TYPE_MODE (types.first));\n \n   tree lhs = gimple_call_lhs (stmt);\n-  tree lhs_type = TREE_TYPE (lhs);\n-  rtx lhs_rtx = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n+  rtx lhs_rtx = NULL_RTX;\n+  if (lhs)\n+    lhs_rtx = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n   /* Do not assign directly to a promoted subreg, since there is no\n      guarantee that the instruction will leave the upper bits of the\n      register in the state required by SUBREG_PROMOTED_SIGN.  */\n   rtx dest = lhs_rtx;\n-  if (GET_CODE (dest) == SUBREG && SUBREG_PROMOTED_VAR_P (dest))\n+  if (dest && GET_CODE (dest) == SUBREG && SUBREG_PROMOTED_VAR_P (dest))\n     dest = NULL_RTX;\n \n   create_output_operand (&ops[0], dest, insn_data[icode].operand[0].mode);\n@@ -2917,7 +2918,7 @@ expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n     }\n \n   expand_insn (icode, nargs + 1, ops);\n-  if (!rtx_equal_p (lhs_rtx, ops[0].value))\n+  if (lhs_rtx && !rtx_equal_p (lhs_rtx, ops[0].value))\n     {\n       /* If the return value has an integral type, convert the instruction\n \t result to that type.  This is useful for things that return an\n@@ -2931,7 +2932,7 @@ expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n \t  /* If this is a scalar in a register that is stored in a wider\n \t     mode than the declared mode, compute the result into its\n \t     declared mode and then convert to the wider mode.  */\n-\t  gcc_checking_assert (INTEGRAL_TYPE_P (lhs_type));\n+\t  gcc_checking_assert (INTEGRAL_TYPE_P (TREE_TYPE (lhs)));\n \t  rtx tmp = convert_to_mode (GET_MODE (lhs_rtx), ops[0].value, 0);\n \t  convert_move (SUBREG_REG (lhs_rtx), tmp,\n \t\t\tSUBREG_PROMOTED_SIGN (lhs_rtx));\n@@ -2940,7 +2941,7 @@ expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n \temit_move_insn (lhs_rtx, ops[0].value);\n       else\n \t{\n-\t  gcc_checking_assert (INTEGRAL_TYPE_P (lhs_type));\n+\t  gcc_checking_assert (INTEGRAL_TYPE_P (TREE_TYPE (lhs)));\n \t  convert_move (lhs_rtx, ops[0].value, 0);\n \t}\n     }"}, {"sha": "489941c617b6c922d385e4b3b4248aa6fef186cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=440ed9f839a068948c72441eda2ef3da515f4656", "patch": "@@ -1,3 +1,8 @@\n+2018-05-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR middle-end/85862\n+\t* gcc.dg/torture/pr85862.c: New test.\n+\n 2018-05-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85834"}, {"sha": "39995bc3d189913e58be1e979d3bc62609e2e55c", "filename": "gcc/testsuite/gcc.dg/torture/pr85862.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85862.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440ed9f839a068948c72441eda2ef3da515f4656/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85862.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85862.c?ref=440ed9f839a068948c72441eda2ef3da515f4656", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fexceptions -fnon-call-exceptions\" } */\n+/* { dg-additional-options \"-fexceptions -fnon-call-exceptions -mfma\" { target i?86-*-* x86_64-*-* } } */\n+\n+void\n+ki (double nq)\n+{\n+  double no = 1.1 * nq - nq;\n+}"}]}