{"sha": "59d5d8cdb95479231e675a03e5baec955b7095c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkNWQ4Y2RiOTU0NzkyMzFlNjc1YTAzZTViYWVjOTU1YjcwOTVjMg==", "commit": {"author": {"name": "Vadim Godunko", "email": "godunko@adacore.com", "date": "2021-03-10T11:27:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-17T14:32:16Z"}, "message": "[Ada] Fix operations on Unbounded_String...\n\ngcc/ada/\n\n\t* libgnat/a-strunb__shared.ads (Allocate): Additional parameter\n\tto provide additional amount of space to be allocated.\n\t* libgnat/a-strunb__shared.adb (Aligned_Max_Length): Limit\n\tlength to Natural'Last when requested length is larger than it.\n\t(Allocate): Merge two slightly different implementations into\n\tone.", "tree": {"sha": "851eac4d677da91fc5c885d2c018b6604a374d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/851eac4d677da91fc5c885d2c018b6604a374d64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d5d8cdb95479231e675a03e5baec955b7095c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d5d8cdb95479231e675a03e5baec955b7095c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d5d8cdb95479231e675a03e5baec955b7095c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d5d8cdb95479231e675a03e5baec955b7095c2/comments", "author": {"login": "godunko", "id": 23206960, "node_id": "MDQ6VXNlcjIzMjA2OTYw", "avatar_url": "https://avatars.githubusercontent.com/u/23206960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godunko", "html_url": "https://github.com/godunko", "followers_url": "https://api.github.com/users/godunko/followers", "following_url": "https://api.github.com/users/godunko/following{/other_user}", "gists_url": "https://api.github.com/users/godunko/gists{/gist_id}", "starred_url": "https://api.github.com/users/godunko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godunko/subscriptions", "organizations_url": "https://api.github.com/users/godunko/orgs", "repos_url": "https://api.github.com/users/godunko/repos", "events_url": "https://api.github.com/users/godunko/events{/privacy}", "received_events_url": "https://api.github.com/users/godunko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32db3a763249a8b94c2e2e285fc6f400eadea4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32db3a763249a8b94c2e2e285fc6f400eadea4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32db3a763249a8b94c2e2e285fc6f400eadea4e"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "d2907f63ac775bcd14a22f1f0c674c95c52ca271", "filename": "gcc/ada/libgnat/a-strunb__shared.adb", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d5d8cdb95479231e675a03e5baec955b7095c2/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d5d8cdb95479231e675a03e5baec955b7095c2/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb?ref=59d5d8cdb95479231e675a03e5baec955b7095c2", "patch": "@@ -50,11 +50,13 @@ package body Ada.Strings.Unbounded is\n    --  align the returned memory on the maximum alignment as malloc does not\n    --  know the target alignment.\n \n-   function Aligned_Max_Length (Max_Length : Natural) return Natural;\n+   function Aligned_Max_Length\n+     (Required_Length : Natural;\n+      Reserved_Length : Natural) return Natural;\n    --  Returns recommended length of the shared string which is greater or\n-   --  equal to specified length. Calculation take in sense alignment of the\n-   --  allocated memory segments to use memory effectively by Append/Insert/etc\n-   --  operations.\n+   --  equal to specified required length and desired reserved length.\n+   --  Calculation takes into account alignment of the allocated memory\n+   --  segments to use memory effectively by Append/Insert/etc operations.\n \n    function Sum (Left : Natural; Right : Integer) return Natural with Inline;\n    --  Returns summary of Left and Right, raise Constraint_Error on overflow\n@@ -63,11 +65,6 @@ package body Ada.Strings.Unbounded is\n    --  Returns multiplication of Left and Right, raise Constraint_Error on\n    --  overflow\n \n-   function Allocate\n-     (Length, Growth : Natural) return not null Shared_String_Access;\n-   --  Allocates new Shared_String with at least specified Length plus optional\n-   --  Growth.\n-\n    ---------\n    -- \"&\" --\n    ---------\n@@ -490,17 +487,24 @@ package body Ada.Strings.Unbounded is\n    -- Aligned_Max_Length --\n    ------------------------\n \n-   function Aligned_Max_Length (Max_Length : Natural) return Natural is\n+   function Aligned_Max_Length\n+     (Required_Length : Natural;\n+      Reserved_Length : Natural) return Natural\n+   is\n       Static_Size : constant Natural :=\n                       Empty_Shared_String'Size / Standard'Storage_Unit;\n       --  Total size of all Shared_String static components\n    begin\n-      if Max_Length > Natural'Last - Static_Size then\n+      if Required_Length > Natural'Last - Static_Size - Reserved_Length then\n+         --  Total requested length is larger than maximum possible length.\n+         --  Use of Static_Size needed to avoid overflows in expression to\n+         --  compute aligned length.\n          return Natural'Last;\n+\n       else\n          return\n-           ((Static_Size + Max_Length - 1) / Min_Mul_Alloc + 2) * Min_Mul_Alloc\n-             - Static_Size;\n+           ((Static_Size + Required_Length + Reserved_Length - 1)\n+              / Min_Mul_Alloc + 2) * Min_Mul_Alloc - Static_Size;\n       end if;\n    end Aligned_Max_Length;\n \n@@ -509,35 +513,21 @@ package body Ada.Strings.Unbounded is\n    --------------\n \n    function Allocate\n-     (Max_Length : Natural) return not null Shared_String_Access\n+     (Required_Length : Natural;\n+      Reserved_Length : Natural := 0) return not null Shared_String_Access\n    is\n    begin\n       --  Empty string requested, return shared empty string\n \n-      if Max_Length = 0 then\n+      if Required_Length = 0 then\n          return Empty_Shared_String'Access;\n \n       --  Otherwise, allocate requested space (and probably some more room)\n \n       else\n-         return new Shared_String (Aligned_Max_Length (Max_Length));\n-      end if;\n-   end Allocate;\n-\n-   --------------\n-   -- Allocate --\n-   --------------\n-\n-   function Allocate\n-     (Length, Growth : Natural) return not null Shared_String_Access is\n-   begin\n-      if Natural'Last - Growth < Length then\n-         --  Then Length + Growth would be more than Natural'Last\n-\n-         return new Shared_String (Integer'Last);\n-\n-      else\n-         return Allocate (Length + Growth);\n+         return\n+           new Shared_String\n+                 (Aligned_Max_Length (Required_Length, Reserved_Length));\n       end if;\n    end Allocate;\n \n@@ -657,7 +647,7 @@ package body Ada.Strings.Unbounded is\n         System.Atomic_Counters.Is_One (Item.Counter)\n           and then Item.Max_Length >= Length\n           and then Item.Max_Length <=\n-                     Aligned_Max_Length (Length + Length / Growth_Factor);\n+                     Aligned_Max_Length (Length, Length / Growth_Factor);\n    end Can_Be_Reused;\n \n    -----------"}, {"sha": "094bf7e4d1c0236a3fd3912512b3b47d132e7afe", "filename": "gcc/ada/libgnat/a-strunb__shared.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d5d8cdb95479231e675a03e5baec955b7095c2/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d5d8cdb95479231e675a03e5baec955b7095c2/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads?ref=59d5d8cdb95479231e675a03e5baec955b7095c2", "patch": "@@ -725,10 +725,12 @@ private\n    --  store string with specified length effectively.\n \n    function Allocate\n-     (Max_Length : Natural) return not null Shared_String_Access;\n-   --  Allocates new Shared_String with at least specified maximum length.\n-   --  Actual maximum length of the allocated Shared_String can be slightly\n-   --  greater. Returns reference to Empty_Shared_String when requested length\n+     (Required_Length : Natural;\n+      Reserved_Length : Natural := 0) return not null Shared_String_Access;\n+   --  Allocates new Shared_String. Actual maximum length of allocated object\n+   --  is at least the specified required length. Additional storage is\n+   --  allocated to allow to store up to the specified reserved length when\n+   --  possible. Returns reference to Empty_Shared_String when requested length\n    --  is zero.\n \n    Empty_Shared_String : aliased Shared_String (0);"}]}