{"sha": "9ce921aba837a0775de9abb3ea97e57d30f25e1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlOTIxYWJhODM3YTA3NzVkZTlhYmIzZWE5N2U1N2QzMGYyNWUxZg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-03-21T14:30:51Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-03-21T14:30:51Z"}, "message": "rtl.h (struct rtx_hooks): Add gen_lowpart_no_emit.\n\n2005-03-21  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* rtl.h (struct rtx_hooks): Add gen_lowpart_no_emit.\n\t* rtlhooks.c (gen_lowpart_no_emit_general): New.\n\t* rtlhooks-def.h (gen_lowpart_no_emit_general): Declare.\n\t(RTL_HOOKS_GEN_LOWPART_NO_EMIT): New.\n\t* simplify-rtx.c (simplify_binary_operation_1): Use it.\n\nFrom-SVN: r96799", "tree": {"sha": "681954762b33192c42f1a60a5211b189369f90af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681954762b33192c42f1a60a5211b189369f90af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce921aba837a0775de9abb3ea97e57d30f25e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce921aba837a0775de9abb3ea97e57d30f25e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce921aba837a0775de9abb3ea97e57d30f25e1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce921aba837a0775de9abb3ea97e57d30f25e1f/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a04ccc5712075b82b95dec4f52b4e9dc3303cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a04ccc5712075b82b95dec4f52b4e9dc3303cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a04ccc5712075b82b95dec4f52b4e9dc3303cd1"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "0d36343d2fe4d48ef06e3e9a06ca9901e147d117", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce921aba837a0775de9abb3ea97e57d30f25e1f", "patch": "@@ -1,3 +1,11 @@\n+2005-03-21  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* rtl.h (struct rtx_hooks): Add gen_lowpart_no_emit.\n+\t* rtlhooks.c (gen_lowpart_no_emit_general): New.\n+\t* rtlhooks-def.h (gen_lowpart_no_emit_general): Declare.\n+\t(RTL_HOOKS_GEN_LOWPART_NO_EMIT): New.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Use it.\n+\n 2005-03-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c (fold_builtin_1): Take decomposed arguments of"}, {"sha": "ba3277f691798fd05dbcffb8b37078cefc8fcbc0", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9ce921aba837a0775de9abb3ea97e57d30f25e1f", "patch": "@@ -2190,6 +2190,7 @@ extern void sms_schedule (FILE *);\n struct rtl_hooks\n {\n   rtx (*gen_lowpart) (enum machine_mode, rtx);\n+  rtx (*gen_lowpart_no_emit) (enum machine_mode, rtx);\n   rtx (*reg_nonzero_bits) (rtx, enum machine_mode, rtx, enum machine_mode,\n \t\t\t   unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT *);\n   rtx (*reg_num_sign_bit_copies) (rtx, enum machine_mode, rtx, enum machine_mode,"}, {"sha": "cd9cd52d0f07f286cfd797d58bddfd1c4a9335a4", "filename": "gcc/rtlhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Frtlhooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Frtlhooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks-def.h?ref=9ce921aba837a0775de9abb3ea97e57d30f25e1f", "patch": "@@ -24,17 +24,20 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n \n #define RTL_HOOKS_GEN_LOWPART gen_lowpart_general\n+#define RTL_HOOKS_GEN_LOWPART_NO_EMIT gen_lowpart_no_emit_general\n #define RTL_HOOKS_REG_NONZERO_REG_BITS reg_nonzero_bits_general\n #define RTL_HOOKS_REG_NUM_SIGN_BIT_COPIES reg_num_sign_bit_copies_general\n \n /* The structure is defined in rtl.h.  */\n #define RTL_HOOKS_INITIALIZER {\t\t\t\\\n   RTL_HOOKS_GEN_LOWPART,\t\t\t\\\n+  RTL_HOOKS_GEN_LOWPART_NO_EMIT,\t\t\\\n   RTL_HOOKS_REG_NONZERO_REG_BITS,\t\t\\\n   RTL_HOOKS_REG_NUM_SIGN_BIT_COPIES,\t\t\\\n }\n \n extern rtx gen_lowpart_general (enum machine_mode, rtx);\n+extern rtx gen_lowpart_no_emit_general (enum machine_mode, rtx);\n extern rtx reg_nonzero_bits_general (rtx, enum machine_mode, rtx,\n \t\t\t\t     enum machine_mode,\n \t\t\t\t     unsigned HOST_WIDE_INT,"}, {"sha": "5303af5471609321278576f38716683209d5e70b", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=9ce921aba837a0775de9abb3ea97e57d30f25e1f", "patch": "@@ -79,6 +79,19 @@ gen_lowpart_general (enum machine_mode mode, rtx x)\n     }\n }\n \n+/* Similar to gen_lowpart, but cannot emit any instruction via\n+   copy_to_reg or force_reg.  Mainly used in simplify-rtx.c.  */\n+rtx\n+gen_lowpart_no_emit_general (enum machine_mode mode, rtx x)\n+{\n+  rtx result = gen_lowpart_common (mode, x);\n+  if (result)\n+    return result;\n+  if (mode != GET_MODE (x) && GET_MODE (x) != VOIDmode)\n+    return gen_lowpart_SUBREG (mode, x);\n+  return x;\n+}\n+\n rtx\n reg_num_sign_bit_copies_general (rtx x ATTRIBUTE_UNUSED,\n \t\t\t\t enum machine_mode mode ATTRIBUTE_UNUSED,"}, {"sha": "a7033315e98fedca52970558c7b3f8d54c2519e0", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce921aba837a0775de9abb3ea97e57d30f25e1f/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=9ce921aba837a0775de9abb3ea97e57d30f25e1f", "patch": "@@ -1704,15 +1704,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  : const0_rtx;\n \t  /* x/1 is x.  */\n \t  if (trueop1 == const1_rtx)\n-\t    {\n-\t      /* Handle narrowing UDIV.  */\n-\t      rtx x = gen_lowpart_common (mode, op0);\n-\t      if (x)\n-\t\treturn x;\n-\t      if (mode != GET_MODE (op0) && GET_MODE (op0) != VOIDmode)\n-\t\treturn gen_lowpart_SUBREG (mode, op0);\n-\t      return op0;\n-\t    }\n+\t    return rtl_hooks.gen_lowpart_no_emit (mode, op0);\n \t  /* Convert divide by power of two into shift.  */\n \t  if (GET_CODE (trueop1) == CONST_INT\n \t      && (val = exact_log2 (INTVAL (trueop1))) > 0)\n@@ -1768,22 +1760,11 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t      : const0_rtx;\n \t  /* x/1 is x.  */\n \t  if (trueop1 == const1_rtx)\n-\t    {\n-\t      /* Handle narrowing DIV.  */\n-\t      rtx x = gen_lowpart_common (mode, op0);\n-\t      if (x)\n-\t\treturn x;\n-\t      if (mode != GET_MODE (op0) && GET_MODE (op0) != VOIDmode)\n-\t\treturn gen_lowpart_SUBREG (mode, op0);\n-\t      return op0;\n-\t    }\n+\t    return rtl_hooks.gen_lowpart_no_emit (mode, op0);\n \t  /* x/-1 is -x.  */\n \t  if (trueop1 == constm1_rtx)\n \t    {\n-\t      rtx x = gen_lowpart_common (mode, op0);\n-\t      if (!x)\n-\t\tx = (mode != GET_MODE (op0) && GET_MODE (op0) != VOIDmode)\n-\t\t  ? gen_lowpart_SUBREG (mode, op0) : op0;\n+\t      rtx x = rtl_hooks.gen_lowpart_no_emit (mode, op0);\n \t      return simplify_gen_unary (NEG, mode, x, mode);\n \t    }\n \t}"}]}