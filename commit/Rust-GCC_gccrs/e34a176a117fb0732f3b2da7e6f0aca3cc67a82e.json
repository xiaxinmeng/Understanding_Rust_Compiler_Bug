{"sha": "e34a176a117fb0732f3b2da7e6f0aca3cc67a82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0YTE3NmExMTdmYjA3MzJmM2IyZGE3ZTZmMGFjYTNjYzY3YTgyZQ==", "commit": {"author": {"name": "Chen Gang", "email": "gang.chen.5i5j@gmail.com", "date": "2015-01-22T16:31:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-01-22T16:31:58Z"}, "message": "ubsan.c (ubsan_type_descriptor): Use 'pretty_print' for 'pretty_name' to avoid memory overflow.\n\n        * ubsan.c (ubsan_type_descriptor): Use 'pretty_print' for\n        'pretty_name' to avoid memory overflow.\n\nFrom-SVN: r220005", "tree": {"sha": "61dd5b15e8458d49635a7f421705d111bc2ac197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61dd5b15e8458d49635a7f421705d111bc2ac197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e/comments", "author": {"login": "Chen-Gang", "id": 4986314, "node_id": "MDQ6VXNlcjQ5ODYzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4986314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chen-Gang", "html_url": "https://github.com/Chen-Gang", "followers_url": "https://api.github.com/users/Chen-Gang/followers", "following_url": "https://api.github.com/users/Chen-Gang/following{/other_user}", "gists_url": "https://api.github.com/users/Chen-Gang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chen-Gang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chen-Gang/subscriptions", "organizations_url": "https://api.github.com/users/Chen-Gang/orgs", "repos_url": "https://api.github.com/users/Chen-Gang/repos", "events_url": "https://api.github.com/users/Chen-Gang/events{/privacy}", "received_events_url": "https://api.github.com/users/Chen-Gang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "324820f16203737eb2fd6e0eb742e461426b2b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324820f16203737eb2fd6e0eb742e461426b2b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324820f16203737eb2fd6e0eb742e461426b2b1a"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "b636b51d022274f7c3da3df5726459259a15b5ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e34a176a117fb0732f3b2da7e6f0aca3cc67a82e", "patch": "@@ -1,3 +1,8 @@\n+2015-01-23  Chen Gang  <gang.chen.5i5j@gmail.com>\n+\n+\t* ubsan.c (ubsan_type_descriptor): Use 'pretty_print' for\n+\t'pretty_name' to avoid memory overflow.\n+\n 2015-01-22  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/64728"}, {"sha": "a9df290a7295df156749fc0765d044f894933862", "filename": "gcc/ubsan.c", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34a176a117fb0732f3b2da7e6f0aca3cc67a82e/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=e34a176a117fb0732f3b2da7e6f0aca3cc67a82e", "patch": "@@ -388,7 +388,7 @@ ubsan_type_descriptor (tree type, enum ubsan_print_style pstyle)\n   tree dtype = ubsan_get_type_descriptor_type ();\n   tree type2 = type;\n   const char *tname = NULL;\n-  char *pretty_name;\n+  pretty_printer pretty_name;\n   unsigned char deref_depth = 0;\n   unsigned short tkind, tinfo;\n \n@@ -427,54 +427,58 @@ ubsan_type_descriptor (tree type, enum ubsan_print_style pstyle)\n     /* We weren't able to determine the type name.  */\n     tname = \"<unknown>\";\n \n-  /* Decorate the type name with '', '*', \"struct\", or \"union\".  */\n-  pretty_name = (char *) alloca (strlen (tname) + 16 + deref_depth);\n   if (pstyle == UBSAN_PRINT_POINTER)\n     {\n-      int pos = sprintf (pretty_name, \"'%s%s%s%s%s%s%s\",\n-\t\t\t TYPE_VOLATILE (type2) ? \"volatile \" : \"\",\n-\t\t\t TYPE_READONLY (type2) ? \"const \" : \"\",\n-\t\t\t TYPE_RESTRICT (type2) ? \"restrict \" : \"\",\n-\t\t\t TYPE_ATOMIC (type2) ? \"_Atomic \" : \"\",\n-\t\t\t TREE_CODE (type2) == RECORD_TYPE\n-\t\t\t ? \"struct \"\n-\t\t\t : TREE_CODE (type2) == UNION_TYPE\n-\t\t\t   ? \"union \" : \"\", tname,\n-\t\t\t deref_depth == 0 ? \"\" : \" \");\n+      pp_printf (&pretty_name, \"'%s%s%s%s%s%s%s\",\n+\t\t TYPE_VOLATILE (type2) ? \"volatile \" : \"\",\n+\t\t TYPE_READONLY (type2) ? \"const \" : \"\",\n+\t\t TYPE_RESTRICT (type2) ? \"restrict \" : \"\",\n+\t\t TYPE_ATOMIC (type2) ? \"_Atomic \" : \"\",\n+\t\t TREE_CODE (type2) == RECORD_TYPE\n+\t\t ? \"struct \"\n+\t\t : TREE_CODE (type2) == UNION_TYPE\n+\t\t   ? \"union \" : \"\", tname,\n+\t\t deref_depth == 0 ? \"\" : \" \");\n       while (deref_depth-- > 0)\n-        pretty_name[pos++] = '*';\n-      pretty_name[pos++] = '\\'';\n-      pretty_name[pos] = '\\0';\n+\tpp_star (&pretty_name);\n+      pp_quote (&pretty_name);\n     }\n   else if (pstyle == UBSAN_PRINT_ARRAY)\n     {\n       /* Pretty print the array dimensions.  */\n       gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n       tree t = type;\n-      int pos = sprintf (pretty_name, \"'%s \", tname);\n+      pp_printf (&pretty_name, \"'%s \", tname);\n       while (deref_depth-- > 0)\n-        pretty_name[pos++] = '*';\n+\tpp_star (&pretty_name);\n       while (TREE_CODE (t) == ARRAY_TYPE)\n \t{\n-\t  pretty_name[pos++] = '[';\n+\t  pp_left_bracket (&pretty_name);\n \t  tree dom = TYPE_DOMAIN (t);\n \t  if (dom && TREE_CODE (TYPE_MAX_VALUE (dom)) == INTEGER_CST)\n-\t    pos += sprintf (&pretty_name[pos], HOST_WIDE_INT_PRINT_DEC,\n+\t    {\n+\t      if (tree_fits_uhwi_p (TYPE_MAX_VALUE (dom))\n+\t\t  && tree_to_uhwi (TYPE_MAX_VALUE (dom)) + 1 != 0)\n+\t\tpp_printf (&pretty_name, HOST_WIDE_INT_PRINT_DEC,\n \t\t\t    tree_to_uhwi (TYPE_MAX_VALUE (dom)) + 1);\n+\t      else\n+\t\tpp_wide_int (&pretty_name,\n+\t\t\t     wi::add (wi::to_widest (TYPE_MAX_VALUE (dom)), 1),\n+\t\t\t     TYPE_SIGN (TREE_TYPE (dom)));\n+\t    }\n \t  else\n \t    /* ??? We can't determine the variable name; print VLA unspec.  */\n-\t    pretty_name[pos++] = '*';\n-\t  pretty_name[pos++] = ']';\n+\t    pp_star (&pretty_name);\n+\t  pp_right_bracket (&pretty_name);\n \t  t = TREE_TYPE (t);\n \t}\n-      pretty_name[pos++] = '\\'';\n-      pretty_name[pos] = '\\0';\n+      pp_quote (&pretty_name);\n \n-     /* Save the tree with stripped types.  */\n-     type = t;\n+      /* Save the tree with stripped types.  */\n+      type = t;\n     }\n   else\n-    sprintf (pretty_name, \"'%s'\", tname);\n+    pp_printf (&pretty_name, \"'%s'\", tname);\n \n   switch (TREE_CODE (type))\n     {\n@@ -511,8 +515,9 @@ ubsan_type_descriptor (tree type, enum ubsan_print_style pstyle)\n   DECL_IGNORED_P (decl) = 1;\n   DECL_EXTERNAL (decl) = 0;\n \n-  size_t len = strlen (pretty_name);\n-  tree str = build_string (len + 1, pretty_name);\n+  const char *tmp = pp_formatted_text (&pretty_name);\n+  size_t len = strlen (tmp);\n+  tree str = build_string (len + 1, tmp);\n   TREE_TYPE (str) = build_array_type (char_type_node,\n \t\t\t\t      build_index_type (size_int (len)));\n   TREE_READONLY (str) = 1;"}]}