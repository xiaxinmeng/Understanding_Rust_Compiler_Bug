{"sha": "7b11cab795af9c578a20c0909f3f6edbb31c0879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxMWNhYjc5NWFmOWM1NzhhMjBjMDkwOWYzZjZlZGJiMzFjMDg3OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-06T17:45:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-06T17:45:10Z"}, "message": "re PR target/61423 (Incorrect conversion from unsigned int to floating point)\n\n\tPR target/61423\n\t* config/i386/i386.md (*floatunssi<mode>2_i387_with_xmm): New\n\tdefine_insn_and_split pattern, merged from *floatunssi<mode>2_1\n\tand corresponding splitters.  Zero extend general register\n\tor memory input operand to XMM temporary.  Enable for\n\tTARGET_SSE2 and TARGET_INTER_UNIT_MOVES_TO_VEC only.\n\t(floatunssi<mode>2): Update expander predicate.\n\ntestsuite/ChangeLog:\n\n\tPR target/61423\n\t* gcc.target/i386/pr61423.c: New test.\n\nFrom-SVN: r211321", "tree": {"sha": "03870c66a2fb6dfd37fdb3bed1a073af54cb275f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03870c66a2fb6dfd37fdb3bed1a073af54cb275f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b11cab795af9c578a20c0909f3f6edbb31c0879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b11cab795af9c578a20c0909f3f6edbb31c0879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b11cab795af9c578a20c0909f3f6edbb31c0879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b11cab795af9c578a20c0909f3f6edbb31c0879/comments", "author": null, "committer": null, "parents": [{"sha": "5a770e0137b2dbfcf87978b6ec949114449ad1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a770e0137b2dbfcf87978b6ec949114449ad1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a770e0137b2dbfcf87978b6ec949114449ad1a9"}], "stats": {"total": 124, "additions": 74, "deletions": 50}, "files": [{"sha": "d2642bc39d9f6077f6448b4cc16acb9752a2355e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b11cab795af9c578a20c0909f3f6edbb31c0879", "patch": "@@ -1,3 +1,13 @@\n+2014-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61423\n+\t* config/i386/i386.md (*floatunssi<mode>2_i387_with_xmm): New\n+\tdefine_insn_and_split pattern, merged from *floatunssi<mode>2_1\n+\tand corresponding splitters.  Zero extend general register\n+\tor memory input operand to XMM temporary.  Enable for\n+\tTARGET_SSE2 and TARGET_INTER_UNIT_MOVES_TO_VEC only.\n+\t(floatunssi<mode>2): Update expander predicate.\n+\n 2014-06-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/61325\n@@ -608,7 +618,7 @@\n \tvrev64q_s16, vrev64q_s32, vrev64q_u8, vrev64q_u16, vrev64q_u32):\n \tReplace temporary __asm__ with __builtin_shuffle.\n \n-2014-06-03  Andrew Bennett  <andrew.bennett@imgtec.com> \n+2014-06-03  Andrew Bennett  <andrew.bennett@imgtec.com>\n \n \t* config/mips/mips-cpus.def: Add mips32r3, mips32r5, mips64r3 and\n \tmips64r5.\n@@ -619,8 +629,8 @@\n \t(ISA_MIPS32R5): New define.\n \t(ISA_MIPS64R3): New define.\n \t(ISA_MIPS64R5): New define.\n-\t(TARGET_CPU_CPP_BUILTINS): Added support for ISA_MIPS32R3, ISA_MIPS32R5,\n-\tISA_MIPS64R3 and ISA_MIPS64R5.\n+\t(TARGET_CPU_CPP_BUILTINS): Added support for ISA_MIPS32R3,\n+\tISA_MIPS32R5, ISA_MIPS64R3 and ISA_MIPS64R5.\n \t(MIPS_ISA_LEVEL_SPEC): Added support for mips32r3, mips32r5, mips64r3\n \tand mips64r5.\n \t(MIPS_ISA_SYNCI_SPEC): Likewise.\n@@ -639,7 +649,7 @@\n \t* doc/invoke.texi: Document -mxpa and -mno-xpa MIPS command line\n \toptions.\n \t* config/mips/mips.opt (mxpa): New option.\n-\t* config/mips/mips.h (ASM_SPEC): Pass mxpa and mno-xpa to the \n+\t* config/mips/mips.h (ASM_SPEC): Pass mxpa and mno-xpa to the\n \tassembler.\n \n 2014-06-03  Martin Jambor  <mjambor@suse.cz>\n@@ -688,7 +698,7 @@\n \t* config/sh/constraints.md: Likewise EXTRA_CONSTRAINT.\n \n 2014-06-02  Andrew Pinski  <apinski@cavium.com>\n-    \n+\n \t* config/aarch64/aarch64-linux.h (GLIBC_DYNAMIC_LINKER):\n \t/lib/ld-linux32-aarch64.so.1 is used for ILP32.\n \t(LINUX_TARGET_LINK_SPEC): Update linker script for ILP32."}, {"sha": "228e3e8ab7b5996ab8f97625b79db3cc7c538524", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 45, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7b11cab795af9c578a20c0909f3f6edbb31c0879", "patch": "@@ -4943,66 +4943,37 @@\n \n ;; Avoid store forwarding (partial memory) stall penalty by extending\n ;; SImode value to DImode through XMM register instead of pushing two\n-;; SImode values to stack. Note that even !TARGET_INTER_UNIT_MOVES_TO_VEC\n-;; targets benefit from this optimization. Also note that fild\n-;; loads from memory only.\n+;; SImode values to stack. Also note that fild loads from memory only.\n \n-(define_insn \"*floatunssi<mode>2_1\"\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n+(define_insn_and_split \"*floatunssi<mode>2_i387_with_xmm\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n \t(unsigned_float:X87MODEF\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"x,m\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"=m,m\"))\n-   (clobber (match_scratch:SI 3 \"=X,x\"))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (match_scratch:DI 3 \"=x\"))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m\"))]\n   \"!TARGET_64BIT\n    && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE\"\n+   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\"\n   \"#\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\")\n-\t(unsigned_float:X87MODEF\n-\t  (match_operand:SI 1 \"register_operand\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\"))\n-   (clobber (match_scratch:SI 3))]\n-  \"!TARGET_64BIT\n-   && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE\n-   && reload_completed\"\n-  [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0)\n-\t(float:X87MODEF (match_dup 2)))]\n-  \"operands[1] = simplify_gen_subreg (DImode, operands[1], SImode, 0);\")\n-\n-(define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\")\n-\t(unsigned_float:X87MODEF\n-\t  (match_operand:SI 1 \"memory_operand\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\"))\n-   (clobber (match_scratch:SI 3))]\n-  \"!TARGET_64BIT\n-   && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE\n-   && reload_completed\"\n-  [(set (match_dup 2) (match_dup 3))\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (zero_extend:DI (match_dup 1)))\n+   (set (match_dup 2) (match_dup 3))\n    (set (match_dup 0)\n \t(float:X87MODEF (match_dup 2)))]\n-{\n-  emit_move_insn (operands[3], operands[1]);\n-  operands[3] = simplify_gen_subreg (DImode, operands[3], SImode, 0);\n-})\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"floatunssi<mode>2\"\n   [(parallel\n      [(set (match_operand:X87MODEF 0 \"register_operand\")\n \t   (unsigned_float:X87MODEF\n \t     (match_operand:SI 1 \"nonimmediate_operand\")))\n-      (clobber (match_dup 2))\n-      (clobber (match_scratch:SI 3))])]\n+      (clobber (match_scratch:DI 3))\n+      (clobber (match_dup 2))])]\n   \"!TARGET_64BIT\n    && ((TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-\t&& TARGET_SSE)\n+\t&& TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC)\n        || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)"}, {"sha": "eba01f090aebbe7038981fe9bbe783f3a6fcfb82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b11cab795af9c578a20c0909f3f6edbb31c0879", "patch": "@@ -1,3 +1,8 @@\n+2014-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61423\n+\t* gcc.target/i386/pr61423.c: New test.\n+\n 2014-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60184"}, {"sha": "5b538a2650865b53b51ec8a8b100c9df08d27105", "filename": "gcc/testsuite/gcc.target/i386/pr61423.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61423.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b11cab795af9c578a20c0909f3f6edbb31c0879/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61423.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61423.c?ref=7b11cab795af9c578a20c0909f3f6edbb31c0879", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/61423 */\n+/* { dg-do run { target ia32 } } */\n+/* { dg-options \"-O1 -ftree-vectorize -msse2 -mfpmath=387 -mtune=core2\" } */\n+\n+#define N 1024\n+static unsigned int A[N];\n+\n+double\n+__attribute__((noinline))\n+func (void)\n+{\n+  unsigned int sum = 0;\n+  unsigned i;\n+  double t;\n+\n+  for (i = 0; i < N; i++)\n+    sum += A[i];\n+\n+  t = sum;\n+  return t;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned i;\n+  double d;\n+\n+  for(i = 0; i < N; i++)\n+    A[i] = 1;\n+\n+  d = func();\n+\n+  if (d != 1024.0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}