{"sha": "ad0c3dd296a1c177982cf56d1abfd044b3ea3f96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwYzNkZDI5NmExYzE3Nzk4MmNmNTZkMWFiZmQwNDRiM2VhM2Y5Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-11-19T09:47:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-11-19T09:47:36Z"}, "message": "* gcc-interface/cuintp.c (UI_From_gnu): Remove code for 32-bit hosts.\n\nFrom-SVN: r266265", "tree": {"sha": "da60225e771bb3ee822359a786fd4f4299fd52aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da60225e771bb3ee822359a786fd4f4299fd52aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96/comments", "author": null, "committer": null, "parents": [{"sha": "4ef3890074446d4ad7dcf60a538ca0c56e887804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef3890074446d4ad7dcf60a538ca0c56e887804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef3890074446d4ad7dcf60a538ca0c56e887804"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "082fe5aaa45a021e0047a0259de451cbd1b85651", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad0c3dd296a1c177982cf56d1abfd044b3ea3f96", "patch": "@@ -1,3 +1,12 @@\n+2018-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/cuintp.c (UI_From_gnu): Remove code for 32-bit hosts.\n+\n+2018-11-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_init_gcc_eh): Do not override the switch\n+\t-fnon-call-exceptions passed on the command line in -gnatp mode.\n+\n 2018-11-14  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_util.ads, exp_util.adb: Change the profile of\n@@ -7,11 +16,6 @@\n \t* exp_ch4.adb (Expand_Boolean_Operation): Use this new profile.\n \t* exp_pakd.adb (Expand_Packed_Boolean_Operator): Ditto.\n \n-2018-11-15  Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\t* gcc-interface/misc.c (gnat_init_gcc_eh): Do not override the switch\n-\t-fnon-call-exceptions passed on the command line in -gnatp mode.\n-\n 2018-11-14  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* libgnarl/a-intnam__linux.ads: Add SIGSYS."}, {"sha": "420686cf242e78200a3d0507475a22865a36e8c8", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0c3dd296a1c177982cf56d1abfd044b3ea3f96/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=ad0c3dd296a1c177982cf56d1abfd044b3ea3f96", "patch": "@@ -142,13 +142,16 @@ UI_From_gnu (tree Input)\n   /* UI_Base is defined so that 5 Uint digits is sufficient to hold the\n      largest possible signed 64-bit value.  */\n   const int Max_For_Dint = 5;\n-  int v[Max_For_Dint], i;\n+  int v[Max_For_Dint];\n   Vector_Template temp;\n   Int_Vector vec;\n \n-#if HOST_BITS_PER_WIDE_INT == 64\n-  /* On 64-bit hosts, tree_fits_shwi_p tells whether the input fits in a\n-     signed 64-bit integer.  Then a truncation tells whether it fits\n+#if HOST_BITS_PER_WIDE_INT < 64\n+#error unsupported HOST_BITS_PER_WIDE_INT setting\n+#endif\n+\n+  /* On 64-bit hosts, tree_fits_shwi_p tells whether the input fits in\n+     a signed 64-bit integer.  Then a truncation tells whether it fits\n      in a signed 32-bit integer.  */\n   if (tree_fits_shwi_p (Input))\n     {\n@@ -158,24 +161,11 @@ UI_From_gnu (tree Input)\n     }\n   else\n     return No_Uint;\n-#else\n-  /* On 32-bit hosts, tree_fits_shwi_p tells whether the input fits in a\n-     signed 32-bit integer.  Then a sign test tells whether it fits\n-     in a signed 64-bit integer.  */\n-  if (tree_fits_shwi_p (Input))\n-    return UI_From_Int (tree_to_shwi (Input));\n-\n-  gcc_assert (TYPE_PRECISION (gnu_type) <= 64);\n-  if (TYPE_UNSIGNED (gnu_type)\n-      && TYPE_PRECISION (gnu_type) == 64\n-      && wi::neg_p (Input, SIGNED))\n-    return No_Uint;\n-#endif\n \n   gnu_base = build_int_cst (gnu_type, UI_Base);\n   gnu_temp = Input;\n \n-  for (i = Max_For_Dint - 1; i >= 0; i--)\n+  for (int i = Max_For_Dint - 1; i >= 0; i--)\n     {\n       v[i] = tree_to_shwi (fold_build1 (ABS_EXPR, gnu_type,\n \t\t\t\t\tfold_build2 (TRUNC_MOD_EXPR, gnu_type,"}]}