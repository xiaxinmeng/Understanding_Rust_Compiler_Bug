{"sha": "2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3YTA3YzI5NDQzZmY2ZWI2MGY4MGY3MTNiOGUwZjE4YmVmNzdhYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-02-13T20:31:46Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-02-13T20:31:46Z"}, "message": "Rename files.\n\nFrom-SVN: r8935", "tree": {"sha": "7da8357f1a58cfae112ddee9d4b09cd4c7b01e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7da8357f1a58cfae112ddee9d4b09cd4c7b01e35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/comments", "author": null, "committer": null, "parents": [{"sha": "b69efa5b52a1807abc7df605156b9463ad8edbae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69efa5b52a1807abc7df605156b9463ad8edbae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69efa5b52a1807abc7df605156b9463ad8edbae"}], "stats": {"total": 252, "additions": 252, "deletions": 0}, "files": [{"sha": "c67c94079086c31d92ca0a3af8ac77fc3cbcd53c", "filename": "gcc/config/i386/netbsd.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "patch": "@@ -0,0 +1,79 @@\n+/* This goes away when the math-emulator is fixed */\n+#define TARGET_CPU_DEFAULT 0400\t\t/* TARGET_NO_FANCY_MATH_387 */\n+\n+/* This is tested by i386gas.h.  */\n+#define YES_UNDERSCORES\n+\n+#include \"i386/gstabs.h\"\n+\n+/* Get perform_* macros to build libgcc.a.  */\n+#include \"i386/perform.h\"\n+\n+/* Get generic NetBSD definitions.  */\n+#include \"netbsd.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Di386 -D__NetBSD__ -Asystem(unix) -Asystem(NetBSD) -Acpu(i386) -Amachine(i386)\"\n+\f\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+#define WCHAR_UNSIGNED 1\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+\n+#define HANDLE_SYSV_PRAGMA\n+\n+/* There are conflicting reports about whether this system uses\n+   a different assembler syntax.  wilson@cygnus.com says # is right.  */\n+#undef COMMENT_BEGIN\n+#define COMMENT_BEGIN \"#\"\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\f\n+/* The following macros are stolen from i386v4.h */\n+/* These have to be defined to get PIC code correct */\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   This is only used for PIC code.  See comments by the `casesi' insn in\n+   i386.md for an explanation of the expression this outputs. */\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+\n+/* Indicate that jump tables go in the text section.  This is\n+   necessary when compiling PIC code.  */\n+\n+#define JUMP_TABLES_IN_TEXT_SECTION\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n+   we want to retain compatibility with older gcc versions.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\f\n+/* Profiling routines, partially copied from i386/osfrose.h.  */\n+\n+/* Redefine this to use %eax instead of %edx.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tcall mcount@PLT\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}"}, {"sha": "78472cb4565f1c2ca54cd99ade628758d52a6858", "filename": "gcc/config/m68k/netbsd.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd.h?ref=2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "patch": "@@ -0,0 +1,63 @@\n+#include <machine/ansi.h>\n+#include \"m68k/m68k.h\"\n+\n+/* Get generic NetBSD definitions.  */\n+\n+#include \"netbsd.h\"\n+\n+\n+/* See m68k.h.  7 means 68020 with 68881.  */\n+\n+#define TARGET_DEFAULT 7\n+\n+/* Define __HAVE_68881__ in preprocessor, unless -msoft-float is specified.\n+   This will control the use of inline 68881 insns in certain macros.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{!msoft-float:-D__HAVE_68881__ -D__HAVE_FPU__} %{posix:-D_POSIX_SOURCE}\"\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dunix -Dm68k -Dmc68000 -Dmc68020 -D__NetBSD__ -Asystem(unix) -Asystem(NetBSD) -Acpu(m68k) -Amachine(m68k)\"\n+\f\n+/* Make gcc agree with <machine/ansi.h> */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+#define WCHAR_UNSIGNED 1\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+\n+/* Every structure or union's size must be a multiple of 2 bytes.  */\n+\n+#define STRUCTURE_SIZE_BOUNDARY 16\n+\n+/* This is BSD, so it wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Do not break .stabs pseudos into continuations.  */\n+\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* This is the char to use for continuation (in case we need to turn\n+   continuation back on).  */\n+\n+#define DBX_CONTIN_CHAR '?'\n+\n+/* Don't use the `xsfoo;' construct in DBX output; this system\n+   doesn't support it.  */\n+\n+#define DBX_NO_XREFS\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n+   we want to retain compatibility with older gcc versions.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0"}, {"sha": "279b6dda06d98ddefbe7c4601bcad1b06fea24d3", "filename": "gcc/config/ns32k/netbsd.h", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7a07c29443ff6eb60f80f713b8e0f18bef77aa/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=2f7a07c29443ff6eb60f80f713b8e0f18bef77aa", "patch": "@@ -0,0 +1,110 @@\n+/* Configuration for a ns32532 running NetBSD as the target machine.\n+   Copyright (C) 1988, 1994, 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+\n+*/\n+\n+#include \"ns32k/ns32k.h\"\n+\n+/* Compile for the floating point unit & 32532 by default;\n+   Don't assume SB is zero;\n+   Don't use bitfield instructions; */\n+\n+#define TARGET_DEFAULT (1 + 24 + 32 + 64)\n+\n+/* 32-bit alignment for efficiency */\n+\n+#undef POINTER_BOUNDARY\n+#define POINTER_BOUNDARY 32\n+\n+/* 32-bit alignment for efficiency */\n+\n+#undef FUNCTION_BOUNDARY\n+#define FUNCTION_BOUNDARY 32\n+\n+/* 32532 spec says it can handle any alignment.  Rumor from tm-ns32k.h\n+   tells this might not be actually true (but it's for 32032, perhaps\n+   National has fixed the bug for 32532).  You might have to change this\n+   if the bug still exists. */\n+\n+#undef STRICT_ALIGNMENT\n+#define STRICT_ALIGNMENT 0\n+\n+/* Use pc relative addressing whenever possible,\n+   it's more efficient than absolute (ns32k.c)\n+   You have to fix a bug in gas 1.38.1 to make this work with gas,\n+   patch available from jkp@cs.hut.fi.\n+   (NetBSD's gas version has this patch already applied) */\n+\n+#define PC_RELATIVE\n+\n+/* Operand of bsr or jsr should be just the address.  */\n+\n+#define CALL_MEMREF_IMPLICIT\n+\n+/* movd insns may have floating point constant operands.  */\n+\n+#define MOVD_FLOAT_OK\n+\n+/* Get generic NetBSD definitions. */\n+#include \"netbsd.h\"\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Dns32k -Dns32000 -Dns32532 -D__NetBSD__ -Dpc532 -D__ns32k__ -Asystem(unix) -Asystem(NetBSD) -Acpu(ns32k) -Amachine(ns32k)\"\n+\n+/* Make gcc agree with <machine/ansi.h> */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE\t\"int\"\n+\n+#define WCHAR_UNSIGNED\t0\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE\t32\n+\n+/* This is BSD, so it wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Do not break .stabs pseudos into continuations.  */\n+\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* This is the char to use for continuation (in case we need to turn\n+   continuation back on).  */\n+\n+#define DBX_CONTIN_CHAR '?'\n+\n+/* Don't use the `xsfoo;' construct in DBX output; this system\n+   doesn't support it.  */\n+\n+#define DBX_NO_XREFS\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n+   we want to retain compatibility with older gcc versions.  */\n+\n+#undef PCC_STATIC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0"}]}