{"sha": "9f1163b171df2a6f9faec0af92c7e651bf69db72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxMTYzYjE3MWRmMmE2ZjlmYWVjMGFmOTJjN2U2NTFiZjY5ZGI3Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-28T10:52:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-28T10:52:17Z"}, "message": "re PR libstdc++/48760 (std::complex constructor buggy in the face of NaN's)\n\n2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/48760\n\t* include/std/complex (complex<float>::complex(float, float),\n\tcomplex<double>::complex(double, double),\n\tcomplex<long double>::complex(long double, long double)): Use\n\tlist-initialization in C++0x mode, initialize in the body in\n\tC++03 mode.\n\t* testsuite/26_numerics/complex/cons/48760.cc: New.\n\t* testsuite/26_numerics/complex/cons/48760_c++0x.cc: Likewise.\n\n2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/bitset (_Base_bitset(unsigned long long)): Minor\n\ttweak, remove redundant round braces.\n\nFrom-SVN: r173065", "tree": {"sha": "7a986812cd4af8a3ab9e5994607328938b23d352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a986812cd4af8a3ab9e5994607328938b23d352"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f1163b171df2a6f9faec0af92c7e651bf69db72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1163b171df2a6f9faec0af92c7e651bf69db72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1163b171df2a6f9faec0af92c7e651bf69db72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1163b171df2a6f9faec0af92c7e651bf69db72/comments", "author": null, "committer": null, "parents": [{"sha": "6ecde111c12993f6aace9f151b30e1d9dbcfd8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecde111c12993f6aace9f151b30e1d9dbcfd8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ecde111c12993f6aace9f151b30e1d9dbcfd8be"}], "stats": {"total": 258, "additions": 223, "deletions": 35}, "files": [{"sha": "ffb034664018f6bc8ae8b5fecf782c359943e687", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -1,3 +1,19 @@\n+2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/48760\n+\t* include/std/complex (complex<float>::complex(float, float),\n+\tcomplex<double>::complex(double, double),\n+\tcomplex<long double>::complex(long double, long double)): Use\n+\tlist-initialization in C++0x mode, initialize in the body in\n+\tC++03 mode.\n+\t* testsuite/26_numerics/complex/cons/48760.cc: New.\n+\t* testsuite/26_numerics/complex/cons/48760_c++0x.cc: Likewise.\n+\n+2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/bitset (_Base_bitset(unsigned long long)): Minor\n+\ttweak, remove redundant round braces.\n+\n 2011-04-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/move.h (move_if_noexcept): Add."}, {"sha": "306fcd8856fa941252c5f374598e2a79e6657bd9", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -116,7 +116,11 @@ namespace __gnu_parallel\n        * @brief The destructor.\n        */\n       ~_LoserTreeBase()\n-      { ::operator delete(_M_losers); }\n+      {\n+\tfor (unsigned int __i = 0; __i < (2 * _M_k); ++__i)\n+\t  _M_losers[__i].~_Loser();\n+\t::operator delete(_M_losers);\n+      }\n \n       /**\n        * @brief Initializes the sequence \"_M_source\" with the element \"__key\".\n@@ -131,15 +135,15 @@ namespace __gnu_parallel\n       {\n \tunsigned int __pos = _M_k + __source;\n \n-\tif(_M_first_insert)\n+\tif (_M_first_insert)\n \t  {\n-\t    // Construct all keys, so we can easily deconstruct them.\n+\t    // Construct all keys, so we can easily destruct them.\n \t    for (unsigned int __i = 0; __i < (2 * _M_k); ++__i)\n \t      new(&(_M_losers[__i]._M_key)) _Tp(__key);\n \t    _M_first_insert = false;\n \t  }\n \telse\n-\t  new(&(_M_losers[__pos]._M_key)) _Tp(__key);\n+\t  _M_losers[__pos]._M_key = __key;\n \n \t_M_losers[__pos]._M_sup = __sup;\n \t_M_losers[__pos]._M_source = __source;\n@@ -379,7 +383,7 @@ namespace __gnu_parallel\n       }\n \n       ~_LoserTreePointerBase()\n-      { ::operator delete[](_M_losers); }\n+      { delete[] _M_losers; }\n \n       int __get_min_source()\n       { return _M_losers[0]._M_source; }\n@@ -592,13 +596,17 @@ namespace __gnu_parallel\n \n \tfor (unsigned int __i = _M_k + _M_ik - 1; __i < (2 * _M_k); ++__i)\n \t  {\n-\t    _M_losers[__i]._M_key = __sentinel;\n+\t    ::new(&(_M_losers[__i]._M_key)) _Tp(__sentinel);\n \t    _M_losers[__i]._M_source = -1;\n \t  }\n       }\n \n       ~_LoserTreeUnguardedBase()\n-      { ::operator delete(_M_losers); }\n+      {\n+\tfor (unsigned int __i = 0; __i < (2 * _M_k); ++__i)\n+\t  _M_losers[__i].~_Loser();\n+\t::operator delete(_M_losers);\n+      }\n \n       int\n       __get_min_source()\n@@ -615,7 +623,7 @@ namespace __gnu_parallel\n       {\n \tunsigned int __pos = _M_k + __source;\n \n-\tnew(&(_M_losers[__pos]._M_key)) _Tp(__key);\n+\t::new(&(_M_losers[__pos]._M_key)) _Tp(__key);\n \t_M_losers[__pos]._M_source = __source;\n       }\n     };"}, {"sha": "1c73ad0042db8b93acbc8c57483c9b25fad9bfa0", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -1045,11 +1045,12 @@ namespace __gnu_parallel\n \t_ValueType;\n \n       // __k sequences.\n-      _SeqNumber __k = static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n+      const _SeqNumber __k\n+\t= static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n \n-      _ThreadIndex __num_threads = omp_get_num_threads();\n+      const _ThreadIndex __num_threads = omp_get_num_threads();\n \n-      _DifferenceType __num_samples =\n+      const _DifferenceType __num_samples =\n \t__gnu_parallel::_Settings::get().merge_oversampling * __num_threads;\n \n       _ValueType* __samples = static_cast<_ValueType*>\n@@ -1096,6 +1097,10 @@ namespace __gnu_parallel\n \t      __pieces[__slab][__seq].second =\n \t\t_GLIBCXX_PARALLEL_LENGTH(__seqs_begin[__seq]);\n \t  }\n+\n+      for (_SeqNumber __s = 0; __s < __k; ++__s)\n+\tfor (_DifferenceType __i = 0; __i < __num_samples; ++__i)\n+\t  __samples[__s * __num_samples + __i].~_ValueType();\n       ::operator delete(__samples);\n     }\n \n@@ -1258,10 +1263,10 @@ namespace __gnu_parallel\n \t__length = std::min<_DifferenceTp>(__length, __total_length);\n \n \tif (__total_length == 0 || __k == 0)\n-\t{\n-          delete[] __ne_seqs;\n-          return __target;\n-\t}\n+\t  {\n+\t    delete[] __ne_seqs;\n+\t    return __target;\n+\t  }\n \n \tstd::vector<std::pair<_DifferenceType, _DifferenceType> >* __pieces;\n "}, {"sha": "80267f923b5554a4f54fae70c8fdd42a4f2060af", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -378,6 +378,8 @@ namespace __gnu_parallel\n \n #     pragma omp barrier\n \n+      for (_DifferenceType __i = 0; __i < __length_local; ++__i)\n+\t__sd->_M_temporary[__iam][__i].~_ValueType();\n       ::operator delete(__sd->_M_temporary[__iam]);\n     }\n \n@@ -413,6 +415,7 @@ namespace __gnu_parallel\n       // shared variables\n       _PMWMSSortingData<_RAIter> __sd;\n       _DifferenceType* __starts;\n+      _DifferenceType __size;\n \n #     pragma omp parallel num_threads(__num_threads)\n       {\n@@ -427,7 +430,7 @@ namespace __gnu_parallel\n \n \t  if (!__exact)\n \t    {\n-\t      _DifferenceType __size =\n+\t      __size =\n \t\t(_Settings::get().sort_mwms_oversampling * __num_threads - 1)\n \t\t* __num_threads;\n \t      __sd._M_samples = static_cast<_ValueType*>\n@@ -463,7 +466,11 @@ namespace __gnu_parallel\n       delete[] __sd._M_temporary;\n \n       if (!__exact)\n-\t::operator delete(__sd._M_samples);\n+\t{\n+\t  for (_DifferenceType __i = 0; __i < __size; ++__i)\n+\t    __sd._M_samples[__i].~_ValueType();\n+\t  ::operator delete(__sd._M_samples);\n+\t}\n \n       delete[] __sd._M_offsets;\n       delete[] __sd._M_pieces;"}, {"sha": "d9116908567b5d68b0b2596bdaad25ed89b475a2", "filename": "libstdc++-v3/include/parallel/par_loop.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -91,16 +91,15 @@ namespace __gnu_parallel\n \t_ThreadIndex __iam = omp_get_thread_num();\n \n \t// Neutral element.\n-\t_Result* __reduct = static_cast<_Result*>\n-\t  (::operator new(sizeof(_Result)));\n+\t_Result* __reduct;\n \n \t_DifferenceType\n \t  __start = __equally_split_point(__length, __num_threads, __iam),\n \t  __stop = __equally_split_point(__length, __num_threads, __iam + 1);\n \n \tif (__start < __stop)\n \t  {\n-\t    new(__reduct) _Result(__f(__o, __begin + __start));\n+\t    __reduct = new _Result(__f(__o, __begin + __start));\n \t    ++__start;\n \t    __constructed[__iam] = true;\n \t  }\n@@ -110,18 +109,26 @@ namespace __gnu_parallel\n \tfor (; __start < __stop; ++__start)\n \t  *__reduct = __r(*__reduct, __f(__o, __begin + __start));\n \n-\t__thread_results[__iam] = *__reduct;\n+\tif (__constructed[__iam])\n+\t  {\n+\t    ::new(&__thread_results[__iam]) _Result(*__reduct);\n+\t    delete __reduct;\n+\t  }\n       } //parallel\n \n       for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n \tif (__constructed[__i])\n-\t  __output = __r(__output, __thread_results[__i]);\n+\t  {\n+\t    __output = __r(__output, __thread_results[__i]);\n+\t    __thread_results[__i].~_Result();\n+\t  }\n \n       // Points to last element processed (needed as return value for\n       // some algorithms like transform).\n       __f._M_finish_iterator = __begin + __length;\n \n-      delete[] __thread_results;\n+      ::operator delete(__thread_results);\n+\n       delete[] __constructed;\n \n       return __o;"}, {"sha": "1a7697a6cefc83622c19157f63a9c1dbbb40f822", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -184,7 +184,10 @@ namespace __gnu_parallel\n \t\t\t\t\t__bin_op, __sums[__iam]);\n       } //parallel\n \n+      for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n+\t__sums[__i].~_ValueType();\n       ::operator delete(__sums);\n+\n       delete[] __borders;\n \n       return __result + __n;"}, {"sha": "1b4d5983d06c4e500196dab3622797474cb0449b", "filename": "libstdc++-v3/include/parallel/quicksort.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -82,6 +82,8 @@ namespace __gnu_parallel\n       _DifferenceType __split = __parallel_partition(__begin, __end,\n \t\t\t\t\t\t     __pred, __num_threads);\n \n+      for (_DifferenceType __s = 0; __s < __num_samples; ++__s)\n+\t__samples[__s].~_ValueType();\n       ::operator delete(__samples);\n \n       return __split;"}, {"sha": "c3967c22880b6552a91f2acd478f6f257532a437", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -209,7 +209,7 @@ namespace __gnu_parallel\n           _ThreadIndex __target_p = __bin_proc[__target_bin];\n \n           // Last column [__d->_M_num_threads] stays unchanged.\n-          ::new(&(__temporaries[__target_p][__dist[__target_bin + 1]++]))\n+\t  ::new(&(__temporaries[__target_p][__dist[__target_bin + 1]++]))\n               _ValueType(*(__source + __i + __start));\n \t}\n \n@@ -227,15 +227,17 @@ namespace __gnu_parallel\n \t    (__sd->_M_temporaries[__iam]\n \t     + (__b == __d->_M_bins_begin\n \t\t? 0 : __sd->_M_dist[__b][__d->_M_num_threads])),\n-\t  * __end = (__sd->_M_temporaries[__iam]\n-\t\t     + __sd->_M_dist[__b + 1][__d->_M_num_threads]);\n+\t    *__end = (__sd->_M_temporaries[__iam]\n+\t\t      + __sd->_M_dist[__b + 1][__d->_M_num_threads]);\n \n           __sequential_random_shuffle(__begin, __end, __rng);\n           std::copy(__begin, __end, __sd->_M_source + __global_offset\n \t\t    + (__b == __d->_M_bins_begin\n \t\t       ? 0 : __sd->_M_dist[__b][__d->_M_num_threads]));\n \t}\n \n+      for (_SequenceIndex __i = 0; __i < __offset; ++__i)\n+\t__sd->_M_temporaries[__iam][__i].~_ValueType();\n       ::operator delete(__sd->_M_temporaries[__iam]);\n     }\n \n@@ -501,6 +503,9 @@ namespace __gnu_parallel\n           delete[] __dist0;\n           delete[] __dist1;\n           delete[] __oracles;\n+\t  \n+\t  for (_DifferenceType __i = 0; __i < __n; ++__i)\n+\t    __target[__i].~_ValueType();\n           ::operator delete(__target);\n \t}\n       else"}, {"sha": "381a0421a54abe7e3edd357cb35f6564cc38216c", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -80,11 +80,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       constexpr _Base_bitset(unsigned long long __val)\n-      : _M_w({ _WordT(__val)\n+      : _M_w{ _WordT(__val)\n #if __SIZEOF_LONG_LONG__ > __SIZEOF_LONG__\n \t       , _WordT(__val >> _GLIBCXX_BITSET_BITS_PER_WORD)\n #endif\n-       }) { }\n+       } { }\n #else\n       _Base_bitset(unsigned long __val)\n       : _M_w()"}, {"sha": "0ce7e55343f93b6274d1612aaa41a47e8936a6b5", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1046,7 +1046,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }\n \n       _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)\n-      : _M_value(__r + __i * 1.0fi) { }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      : _M_value{ __r, __i } { }\n+#else\n+      {\n+\t__real__ _M_value = __r;\n+\t__imag__ _M_value = __i;\n+      }\n+#endif\n \n       explicit _GLIBCXX_CONSTEXPR complex(const complex<double>&);\n       explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\t\n@@ -1186,7 +1193,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }\n \n       _GLIBCXX_CONSTEXPR complex(double __r = 0.0, double __i = 0.0)\n-      : _M_value(__r + __i * 1.0i) { }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      : _M_value{ __r, __i } { }\n+#else\n+      {\n+\t__real__ _M_value = __r;\n+\t__imag__ _M_value = __i;\n+      }\n+#endif\n \n       _GLIBCXX_CONSTEXPR complex(const complex<float>& __z)\n       : _M_value(__z.__rep()) { }\n@@ -1328,7 +1342,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX_CONSTEXPR complex(long double __r = 0.0L, \n \t\t\t\t long double __i = 0.0L)\n-      : _M_value(__r + __i * 1.0Li) { }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      : _M_value{ __r, __i } { }\n+#else\n+      {\n+\t__real__ _M_value = __r;\n+\t__imag__ _M_value = __i;\n+      }\n+#endif\n \n       _GLIBCXX_CONSTEXPR complex(const complex<float>& __z)\n       : _M_value(__z.__rep()) { }"}, {"sha": "0201cc7dca0e4db0d933326a272f16f09a14a6d6", "filename": "libstdc++-v3/testsuite/26_numerics/complex/cons/48760.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2F48760.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2F48760.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2F48760.cc?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void do_test01()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    if (std::numeric_limits<T>::has_quiet_NaN)\n+      {\n+\tstd::complex<T> c1(T(0), std::numeric_limits<T>::quiet_NaN());\n+\tVERIFY( c1.real() == T(0) );\n+\tVERIFY( std::isnan(c1.imag()) );\n+\n+\tstd::complex<T> c2(std::numeric_limits<T>::quiet_NaN(), T(0));\n+\tVERIFY( std::isnan(c2.real()) );\n+\tVERIFY( c2.imag() == T(0) );\n+\n+\tstd::complex<T> c3(std::numeric_limits<T>::quiet_NaN(),\n+\t\t\t   std::numeric_limits<T>::quiet_NaN());\n+\tVERIFY( std::isnan(c3.real()) );\n+\tVERIFY( std::isnan(c3.imag()) );\n+      }\n+  }\n+\n+// libstdc++/48760\n+void test01()\n+{\n+  do_test01<float>();\n+  do_test01<double>();\n+  do_test01<long double>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f0017b113d0184bd26a42c590acaf64c1d8e420a", "filename": "libstdc++-v3/testsuite/26_numerics/complex/cons/48760_c++0x.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2F48760_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1163b171df2a6f9faec0af92c7e651bf69db72/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2F48760_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2F48760_c%2B%2B0x.cc?ref=9f1163b171df2a6f9faec0af92c7e651bf69db72", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void do_test01()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    if (std::numeric_limits<T>::has_quiet_NaN)\n+      {\n+\tstd::complex<T> c1(T(0), std::numeric_limits<T>::quiet_NaN());\n+\tVERIFY( c1.real() == T(0) );\n+\tVERIFY( std::isnan(c1.imag()) );\n+\n+\tstd::complex<T> c2(std::numeric_limits<T>::quiet_NaN(), T(0));\n+\tVERIFY( std::isnan(c2.real()) );\n+\tVERIFY( c2.imag() == T(0) );\n+\n+\tstd::complex<T> c3(std::numeric_limits<T>::quiet_NaN(),\n+\t\t\t   std::numeric_limits<T>::quiet_NaN());\n+\tVERIFY( std::isnan(c3.real()) );\n+\tVERIFY( std::isnan(c3.imag()) );\n+      }\n+  }\n+\n+// libstdc++/48760\n+void test01()\n+{\n+  do_test01<float>();\n+  do_test01<double>();\n+  do_test01<long double>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}