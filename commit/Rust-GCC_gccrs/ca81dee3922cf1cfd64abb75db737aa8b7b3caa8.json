{"sha": "ca81dee3922cf1cfd64abb75db737aa8b7b3caa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4MWRlZTM5MjJjZjFjZmQ2NGFiYjc1ZGI3MzdhYThiN2IzY2FhOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-03T18:23:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-03T18:23:42Z"}, "message": "libgo/testsuite: kill sleep process in gotest\n    \n    This change modifies the \"gotest\" shell script\n    to kill all processes, including \"sleep\", spawned\n    by the timeout subshell. This prevents the sleep\n    process from living beyond the gotest process.\n    \n    BACKGROUND\n    \n    The \"gotest\" shell script spawns \"sleep\" processes\n    in the background to kill off test cases that run\n    past their specified timeout. There are commands\n    included that appear to kill the sleep process,\n    but they only kill the parent shell, causing the\n    sleep process to reparent.\n    \n    The orphaned sleep process can cause issues when\n    gotest is run under some build systems, such as\n    Ninja [0]. The particular issue with Ninja is the\n    method it uses to identify terminated processes:\n    it creates a pipe, passes the write end to the\n    child process, and waits for EOF. In the case of\n    libgo/gotest, the orphaned sleep process inherits\n    the pipe FD and keeps it open for 4 minutes by\n    default.\n    \n    [0] https://github.com/martine/ninja\n    \n    Reviewed-on: https://go-review.googlesource.com/12227\n\nFrom-SVN: r226526", "tree": {"sha": "217bdda7b9a43a3b92b3abcc8ca2c7ac3dc08c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/217bdda7b9a43a3b92b3abcc8ca2c7ac3dc08c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8/comments", "author": null, "committer": null, "parents": [{"sha": "3d6d2a63b2457450d93cfaa9787a27359264b2c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6d2a63b2457450d93cfaa9787a27359264b2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6d2a63b2457450d93cfaa9787a27359264b2c3"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "5490d9f7fa9b0ba278ccff5c1c84b1601393e9e8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ca81dee3922cf1cfd64abb75db737aa8b7b3caa8", "patch": "@@ -1,4 +1,4 @@\n-d5aad2f400a0f21724e33e4ae48e1583ed8b1a87\n+33d59eff1bd5de29f1fbde3b7625db28595835fd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "7d5e99f49874528a70c15ded5f43fbcd47aeb407", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca81dee3922cf1cfd64abb75db737aa8b7b3caa8/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=ca81dee3922cf1cfd64abb75db737aa8b7b3caa8", "patch": "@@ -518,7 +518,7 @@ xno)\n \t\twait $pid\n \t\tstatus=$?\n \t\tif ! test -f gotest-timeout; then\n-\t\t    kill $alarmpid\n+\t\t    ps -o pid,ppid | grep \" $alarmpid\" | cut -f1 -d\" \" | xargs kill -9\n \t\tfi\n \telse\n \t\tif test \"$trace\" = \"true\"; then"}]}