{"sha": "846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "node_id": "C_kwDOANBUbNoAKDg0NmU1YzAwOWUzNjBmMGM0ZmU1OGZmMGQzYWVlMDNlYmUzY2ExYTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-24T07:57:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-24T07:57:09Z"}, "message": "i386: Fix up mode iterators that weren't expanded [PR106721]\n\nCurrently, when md file reader sees <something> and something is valid mode\n(or code) attribute but which doesn't include case for the current mode\n(or code), it just keeps the <something> untouched.\nI went through all cases matching <[a-zA-Z] in tmp-mddump.md after make mddump.\nMost of the cases were related to the recent V*BF mode additions, some\nto V*HF mode too, and there was one typo.\n\n2022-08-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/106721\n\t* config/i386/sse.md (shuffletype): Add V32BF, V16BF and V8BF entries.\n\tChange V32HF, V16HF and V8HF entries from \"f\" to \"i\".\n\t(iptr): Add V32BF, V16BF, V8BF and BF entries.\n\t(i128vldq): Add V16HF and V16BF entries.\n\t(avx512er_vmrcp28<mode><mask_name><round_saeonly_name>): Fix typo,\n\tmask_opernad3 -> mask_operand3.\n\n\t* gcc.target/i386/avx512vl-pr106721.c: New test.", "tree": {"sha": "9c52a15e11209273edf781c231e8fe00c2c5ef59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c52a15e11209273edf781c231e8fe00c2c5ef59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365202625d2f2d6694dba889ca67498fefb59c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365202625d2f2d6694dba889ca67498fefb59c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365202625d2f2d6694dba889ca67498fefb59c68"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "e6ab3c92dcf72831f0d07302a1633dd408209f4d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "patch": "@@ -747,7 +747,8 @@\n    (V8HI \"avx512vl\") (V16HI \"avx512vl\") (V32HI \"avx512bw\")])\n \n (define_mode_attr shuffletype\n-  [(V32HF \"f\") (V16HF \"f\") (V8HF \"f\")\n+  [(V32HF \"i\") (V16HF \"i\") (V8HF \"i\")\n+   (V32BF \"i\") (V16BF \"i\") (V8BF \"i\")\n    (V16SF \"f\") (V16SI \"i\") (V8DF \"f\") (V8DI \"i\")\n    (V8SF \"f\") (V8SI \"i\") (V4DF \"f\") (V4DI \"i\")\n    (V4SF \"f\") (V4SI \"i\") (V2DF \"f\") (V2DI \"i\")\n@@ -1136,10 +1137,10 @@\n   [(V64QI \"b\") (V32HI \"w\") (V16SI \"k\") (V8DI \"q\")\n    (V32QI \"b\") (V16HI \"w\") (V8SI \"k\") (V4DI \"q\")\n    (V16QI \"b\") (V8HI \"w\") (V4SI \"k\") (V2DI \"q\")\n-   (V32HF \"w\") (V16SF \"k\") (V8DF \"q\")\n-   (V16HF \"w\") (V8SF \"k\") (V4DF \"q\")\n-   (V8HF \"w\") (V4SF \"k\") (V2DF \"q\")\n-   (HF \"w\") (SF \"k\") (DF \"q\")])\n+   (V32HF \"w\") (V32BF \"w\") (V16SF \"k\") (V8DF \"q\")\n+   (V16HF \"w\") (V16BF \"w\") (V8SF \"k\") (V4DF \"q\")\n+   (V8HF \"w\") (V8BF \"w\") (V4SF \"k\") (V2DF \"q\")\n+   (HF \"w\") (BF \"w\") (SF \"k\") (DF \"q\")])\n \n ;; Mapping of vector modes to VPTERNLOG suffix\n (define_mode_attr ternlogsuffix\n@@ -1251,7 +1252,7 @@\n ;; For 256-bit modes for TARGET_AVX512VL && TARGET_AVX512DQ\n ;; i32x4, f32x4, i64x2 or f64x2 suffixes.\n (define_mode_attr i128vldq\n-  [(V8SF \"f32x4\") (V4DF \"f64x2\")\n+  [(V16HF \"i32x4\") (V16BF \"i32x4\") (V8SF \"f32x4\") (V4DF \"f64x2\")\n    (V32QI \"i32x4\") (V16HI \"i32x4\") (V8SI \"i32x4\") (V4DI \"i64x2\")])\n \n ;; Mix-n-match\n@@ -23897,7 +23898,7 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512ER\"\n-  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%1, %2, %0<mask_operand3>|<mask_opernad3>%0, %2, %<iptr>1<round_saeonly_mask_op3>}\"\n+  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%1, %2, %0<mask_operand3>|<mask_operand3>%0, %2, %<iptr>1<round_saeonly_mask_op3>}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"type\" \"sse\")"}, {"sha": "8248d1495eac1b5625934cef7529f883b03aada3", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr106721.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr106721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr106721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr106721.c?ref=846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/106721 */\n+/* { dg-do assemble { target avx512vl } } */\n+/* { dg-options \"-O3 -mavx512vl\" } */\n+\n+typedef __bf16 __m256bf16 __attribute__((__vector_size__(32)));\n+void (*bar) (__m256bf16, __m256bf16, __m256bf16);\n+__m256bf16 a;\n+volatile __bf16 b, c, d, e, f, g, h;\n+\n+void\n+foo (void)\n+{\n+  __m256bf16 x[8];\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    x[i] = (__m256bf16) { b, c, d, e, f, g, h };\n+  a = x[6];\n+  bar (x[0], x[6], x[7]);\n+}"}]}