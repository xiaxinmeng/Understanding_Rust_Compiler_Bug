{"sha": "9e531d3749daaedb2bf86f277d86977cd5ba3101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1MzFkMzc0OWRhYWVkYjJiZjg2ZjI3N2Q4Njk3N2NkNWJhMzEwMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-10-09T13:55:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-10-09T13:55:23Z"}, "message": "Testsuite: add dg-{begin|end}-multiline-output commands\n\nThis patch adds an easy way to write tests for expected multiline\noutput.  For example we can test carets and underlines for\na particular diagnostic with:\n\n/* { dg-begin-multiline-output \"\" }\n typedef struct _GMutex GMutex;\n                ^~~~~~~\n   { dg-end-multiline-output \"\" } */\n\nmultiline.exp is used by prune.exp; hence we need to load it before\nprune.exp via *load_gcc_lib* for the testsuites of the various\nnon-\"gcc\" support libraries (e.g. boehm-gc).\n\ngcc/testsuite/ChangeLog:\n\t* lib/multiline.exp: New file.\n\t* lib/prune.exp: Load multiline.exp.\n\t(prune_gcc_output): Call into multiline.exp to handle any\n\tmultiline output directives.\n\t* lib/libgo.exp: Load multiline.exp before prune.exp, using\n\tload_gcc_lib.\n\nboehm-gc/ChangeLog:\n\t* testsuite/lib/boehm-gc.exp: Load multiline.exp before\n\tprune.exp, using load_gcc_lib.\n\nlibatomic/ChangeLog:\n\t* testsuite/lib/libatomic.exp: Load multiline.exp before\n\tprune.exp, using load_gcc_lib.\n\nlibgomp/ChangeLog:\n\t* testsuite/lib/libgomp.exp: Load multiline.exp before prune.exp,\n\tusing load_gcc_lib.\n\nlibitm/ChangeLog:\n\t* testsuite/lib/libitm.exp: Load multiline.exp before prune.exp,\n\tusing load_gcc_lib.\n\nlibvtv/ChangeLog:\n\t* testsuite/lib/libvtv.exp: Load multiline.exp before prune.exp,\n\tusing load_gcc_lib.\n\nFrom-SVN: r228655", "tree": {"sha": "1e8317bb5729c9dcccd6c651cee228db99961764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8317bb5729c9dcccd6c651cee228db99961764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e531d3749daaedb2bf86f277d86977cd5ba3101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e531d3749daaedb2bf86f277d86977cd5ba3101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e531d3749daaedb2bf86f277d86977cd5ba3101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e531d3749daaedb2bf86f277d86977cd5ba3101/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d"}], "stats": {"total": 286, "additions": 286, "deletions": 0}, "files": [{"sha": "365038e4bfe26bd46c2a04a7b0bd7f3348359998", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/boehm-gc.exp: Load multiline.exp before\n+\tprune.exp, using load_gcc_lib.\n+\n 2015-08-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* os_dep.c [GC_SOLARIS_THREADS] (GC_dirty_init): Use"}, {"sha": "d162035b63b2a7a6e80374def2d2fed7cf8689d1", "filename": "boehm-gc/testsuite/lib/boehm-gc.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/boehm-gc%2Ftestsuite%2Flib%2Fboehm-gc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/boehm-gc%2Ftestsuite%2Flib%2Fboehm-gc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ftestsuite%2Flib%2Fboehm-gc.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -31,6 +31,7 @@ load_gcc_lib target-utils.exp\n # For ${tool}_exit.\n load_gcc_lib gcc-defs.exp\n # For prune_gcc_output.\n+load_gcc_lib multiline.exp\n load_gcc_lib prune.exp\n \n set dg-do-what-default run"}, {"sha": "09da4fdce10cd6c9c11ec6b06cf8a987f19d711a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -1,3 +1,12 @@\n+2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* lib/multiline.exp: New file.\n+\t* lib/prune.exp: Load multiline.exp.\n+\t(prune_gcc_output): Call into multiline.exp to handle any\n+\tmultiline output directives.\n+\t* lib/libgo.exp: Load multiline.exp before prune.exp, using\n+\tload_gcc_lib.\n+\n 2015-10-09  Martin Jambor  <mjambor@suse.cz>\n \n \ttree-optimization/67794"}, {"sha": "eb721438b8fe4f9408814216e680d80eb03862a5", "filename": "gcc/testsuite/lib/multiline.exp", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmultiline.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -0,0 +1,241 @@\n+#   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Testing of multiline output\n+\n+# We have pre-existing testcases like this:\n+#   |typedef struct _GMutex GMutex; // { dg-message \"previously declared here\"}\n+# (using \"|\" here to indicate the start of a line),\n+# generating output like this:\n+#   |gcc/testsuite/g++.dg/diagnostic/wrong-tag-1.C:4:16: note: 'struct _GMutex' was previously declared here\n+# where the location of the dg-message determines the expected line at\n+# which the error should be reported.\n+#\n+# To handle rich error-reporting, we want to be able to verify that we\n+# get output like this:\n+#   |gcc/testsuite/g++.dg/diagnostic/wrong-tag-1.C:4:16: note: 'struct _GMutex' was previously declared here\n+#   | typedef struct _GMutex GMutex; // { dg-message \"previously declared here\"}\n+#   |                ^~~~~~~\n+# where the compiler's first line of output is as before, but in\n+# which it then echoes the source lines, adding annotations.\n+#\n+# We want to be able to write testcases that verify that the\n+# emitted source-and-annotations are sane.\n+#\n+# A complication here is that the source lines contain comments\n+# containing DejaGnu directives (such as the \"dg-message\" above).\n+#\n+# We punt this somewhat by only matching the beginnings of lines.\n+# so that we can write e.g.\n+#   |/* { dg-begin-multiline-output \"\" }\n+#   | typedef struct _GMutex GMutex;\n+#   |                ^~~~~~~\n+#   |   { dg-end-multiline-output \"\" } */\n+# to have the testsuite verify the expected output.\n+\n+############################################################################\n+# Global variables.  Although global, these are intended to only be used from\n+# within multiline.exp.\n+############################################################################\n+\n+# The line number of the last dg-begin-multiline-output directive.\n+set _multiline_last_beginning_line -1\n+\n+# A list of lists of strings.\n+set _multiline_expected_outputs []\n+\n+############################################################################\n+# Exported functions.\n+############################################################################\n+\n+# Mark the beginning of an expected multiline output\n+# All lines between this and the next dg-end-multiline-output are\n+# expected to be seen.\n+\n+proc dg-begin-multiline-output { args } {\n+    global _multiline_last_beginning_line\n+    verbose \"dg-begin-multiline-output: args: $args\" 3\n+    set line [expr [lindex $args 0] + 1]\n+    set _multiline_last_beginning_line $line\n+}\n+\n+# Mark the end of an expected multiline output\n+# All lines up to here since the last dg-begin-multiline-output are\n+# expected to be seen.\n+\n+proc dg-end-multiline-output { args } {\n+    global _multiline_last_beginning_line\n+    verbose \"dg-end-multiline-output: args: $args\" 3\n+    set line [expr [lindex $args 0] - 1]\n+    verbose \"multiline output lines: $_multiline_last_beginning_line-$line\" 3\n+\n+    upvar 1 prog prog\n+    verbose \"prog: $prog\" 3\n+    # \"prog\" now contains the filename\n+    # Load it and split it into lines\n+\n+    set lines [_get_lines $prog $_multiline_last_beginning_line $line]\n+    set _multiline_last_beginning_line -1\n+\n+    verbose \"lines: $lines\" 3\n+    global _multiline_expected_outputs\n+    lappend _multiline_expected_outputs $lines\n+    verbose \"within dg-end-multiline-output: _multiline_expected_outputs: $_multiline_expected_outputs\" 3\n+}\n+\n+# Hook to be called by prune.exp's prune_gcc_output to\n+# look for the expected multiline outputs, pruning them,\n+# reporting PASS for those that are found, and FAIL for\n+# those that weren't found.\n+#\n+# It returns a pruned version of its output.\n+#\n+# It also clears the list of expected multiline outputs.\n+\n+proc handle-multiline-outputs { text } {\n+    global _multiline_expected_outputs\n+    set index 0\n+    foreach multiline $_multiline_expected_outputs {\n+\tverbose \"  multiline: $multiline\" 4\n+\tset rexp [_build_multiline_regex $multiline $index]\n+\tverbose \"rexp: ${rexp}\" 4\n+\t# Escape newlines in $rexp so that we can print them in\n+\t# pass/fail results.\n+\tset escaped_regex [string map {\"\\n\" \"\\\\n\"} $rexp]\n+\tverbose \"escaped_regex: ${escaped_regex}\" 4\n+\n+\t# Use \"regsub\" to attempt to prune the pattern from $text\n+\tif {[regsub -line $rexp $text \"\" text]} {\n+\t    # Success; the multiline pattern was pruned.\n+\t    pass \"expected multiline pattern $index was found: \\\"$escaped_regex\\\"\"\n+\t} else {\n+\t    fail \"expected multiline pattern $index not found: \\\"$escaped_regex\\\"\"\n+\t}\n+\n+\tset index [expr $index + 1]\n+    }\n+\n+    # Clear the list of expected multiline outputs\n+    set _multiline_expected_outputs []\n+\n+    return $text\n+}\n+\n+############################################################################\n+# Internal functions\n+############################################################################\n+\n+# Load FILENAME and extract the lines from FIRST_LINE\n+# to LAST_LINE (inclusive) as a list of strings.\n+\n+proc _get_lines { filename first_line last_line } {\n+    verbose \"_get_lines\" 3\n+    verbose \"  filename: $filename\" 3\n+    verbose \"  first_line: $first_line\" 3\n+    verbose \"  last_line: $last_line\" 3\n+\n+    set fp [open $filename r]\n+    set file_data [read $fp]\n+    close $fp\n+    set data [split $file_data \"\\n\"]\n+    set linenum 1\n+    set lines []\n+    foreach line $data {\n+\tverbose \"line $linenum: $line\" 4\n+\tif { $linenum >= $first_line && $linenum <= $last_line } {\n+\t    lappend lines $line\n+\t}\n+\tset linenum [expr $linenum + 1]\n+    }\n+\n+    return $lines\n+}\n+\n+# Convert $multiline from a list of strings to a multiline regex\n+# We need to support matching arbitrary followup text on each line,\n+# to deal with comments containing containing DejaGnu directives.\n+\n+proc _build_multiline_regex { multiline index } {\n+    verbose \"_build_multiline_regex: $multiline $index\" 4\n+\n+    set rexp \"\"\n+    foreach line $multiline {\n+\tverbose \"  line: $line\" 4\n+\n+\t# We need to escape \"^\" and other regexp metacharacters.\n+\tset line [string map {\"^\" \"\\\\^\"\n+\t                      \"(\" \"\\\\(\"\n+\t                      \")\" \"\\\\)\"\n+\t                      \"[\" \"\\\\[\"\n+\t                      \"]\" \"\\\\]\"\n+\t                      \".\" \"\\\\.\"\n+\t                      \"\\\\\" \"\\\\\\\\\"\n+\t                      \"?\" \"\\\\?\"\n+\t                      \"+\" \"\\\\+\"\n+\t                      \"*\" \"\\\\*\"\n+\t                      \"|\" \"\\\\|\"} $line]\n+\n+\tappend rexp $line\n+\tif {[string match \"*^\" $line] || [string match \"*~\" $line]} {\n+\t    # Assume a line containing a caret/range.  This must be\n+\t    # an exact match.\n+\t} elseif {[string match \"*\\\\|\" $line]} {\n+\t    # Assume a source line with a right-margin.  Support\n+\t    # arbitrary text in place of any whitespace before the\n+\t    # right-margin, to deal with comments containing containing\n+\t    # DejaGnu directives.\n+\n+\t    # Remove final \"\\|\":\n+\t    set rexp [string range $rexp 0 [expr [string length $rexp] - 3]]\n+\n+\t    # Trim off trailing whitespace:\n+\t    set old_length [string length $rexp]\n+\t    set rexp [string trimright $rexp]\n+\t    set new_length [string length $rexp]\n+\n+\t    # Replace the trimmed whitespace with \".\" chars to match anything:\n+\t    set ws [string repeat \".\" [expr $old_length - $new_length]]\n+\t    set rexp \"${rexp}${ws}\"\n+\n+\t    # Add back the trailing '\\|':\n+\t    set rexp \"${rexp}\\\\|\"\n+\t} else {\n+\t    # Assume that we have a quoted source line.\n+\t    # Support arbitrary followup text on each line,\n+\t    # to deal with comments containing containing DejaGnu\n+\t    # directives.\n+\t    append rexp \".*\"\n+\t}\n+\tappend rexp \"\\n\"\n+    }\n+\n+    # dg.exp's dg-test trims leading whitespace from the output\n+    # in this line:\n+    #   set comp_output [string trimleft $comp_output]\n+    # so we can't rely on the exact leading whitespace for the\n+    # first line in the *first* multiline regex.\n+    #\n+    # Trim leading whitespace from the regexp, replacing it with\n+    # a \"\\s*\", to match zero or more whitespace characters.\n+    if { $index == 0 } {\n+\tset rexp [string trimleft $rexp]\n+\tset rexp \"\\\\s*$rexp\"\n+    }\n+\n+    verbose \"rexp: $rexp\" 4\n+\n+    return $rexp\n+}"}, {"sha": "fa10043f6b203000862d6bb4c883956eed1a55dc", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -16,6 +16,8 @@\n \n # Prune messages from gcc that aren't useful.\n \n+load_lib multiline.exp\n+\n if ![info exists TEST_ALWAYS_FLAGS] {\n     set TEST_ALWAYS_FLAGS \"\"\n }\n@@ -68,6 +70,9 @@ proc prune_gcc_output { text } {\n     # Ignore harmless warnings from Xcode 4.0.\n     regsub -all \"(^|\\n)\\[^\\n\\]*ld: warning: could not create compact unwind for\\[^\\n\\]*\" $text \"\" text\n \n+    # Call into multiline.exp to handle any multiline output directives.\n+    set text [handle-multiline-outputs $text]\n+\n     #send_user \"After:$text\\n\"\n \n     return $text"}, {"sha": "9ca15c2cc653b903ab70bef3978ffbb59f644ef9", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libatomic.exp: Load multiline.exp before\n+\tprune.exp, using load_gcc_lib.\n+\n 2015-07-14  John Marino  <gnugcc@marino.st>\n \n \t* configure.tgt: Add *-*-dragonfly to supported targets."}, {"sha": "cafab5432b7512e4015a9f6c1ff5ce43805e327a", "filename": "libatomic/testsuite/lib/libatomic.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libatomic%2Ftestsuite%2Flib%2Flibatomic.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libatomic%2Ftestsuite%2Flib%2Flibatomic.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flib%2Flibatomic.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -37,6 +37,7 @@ load_gcc_lib scandump.exp\n load_gcc_lib scanrtl.exp\n load_gcc_lib scantree.exp\n load_gcc_lib scanipa.exp\n+load_gcc_lib multiline.exp\n load_gcc_lib prune.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp"}, {"sha": "1b0f26a68845169d27ba962a09235bd601f8029c", "filename": "libgo/testsuite/lib/libgo.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libgo%2Ftestsuite%2Flib%2Flibgo.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libgo%2Ftestsuite%2Flib%2Flibgo.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Flib%2Flibgo.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -39,6 +39,7 @@ proc load_gcc_lib { filename } {\n     set loaded_libs($filename) \"\"\n }\n \n+load_gcc_lib multiline.exp\n load_gcc_lib prune.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp"}, {"sha": "7440b3e7ba6ccd0ccde54798d6344d19e0ba09d5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libgomp.exp: Load multiline.exp before prune.exp,\n+\tusing load_gcc_lib.\n+\n 2015-10-02  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* oacc-ptx.h: Remove file, moving its content into..."}, {"sha": "1040c29e0ebabaf489e9b1d954cca9673b066a6e", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -14,6 +14,7 @@ load_lib dg.exp\n # loaded until ${tool}_target_compile is defined since it uses that\n # to determine default LTO options.\n \n+load_gcc_lib multiline.exp\n load_gcc_lib prune.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp"}, {"sha": "2ed540d440a656f06b8f6fa0f41e7e27d03c2e65", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libitm.exp: Load multiline.exp before prune.exp,\n+\tusing load_gcc_lib.\n+\n 2015-08-20  Gleb Fotengauer-Malinovskiy  <glebfm@altlinux.org>  (tiny change)\n \n \tPR libitm/61164"}, {"sha": "041629687f66ff21fd1c860585667cc8a50e80b5", "filename": "libitm/testsuite/lib/libitm.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libitm%2Ftestsuite%2Flib%2Flibitm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libitm%2Ftestsuite%2Flib%2Flibitm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flib%2Flibitm.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -28,6 +28,7 @@ load_lib dg.exp\n #\u00a0loaded until ${tool}_target_compile is defined since it uses that\n # to determine default LTO options.\n \n+load_gcc_lib multiline.exp\n load_gcc_lib prune.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp"}, {"sha": "6284e134ab2efc660ad01422b0cfda6429d1d287", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libvtv.exp: Load multiline.exp before prune.exp,\n+\tusing load_gcc_lib.\n+\n 2015-08-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tUpdate copyrights."}, {"sha": "edf5fddbad28271f4f211e54a98a05da7fe836f5", "filename": "libvtv/testsuite/lib/libvtv.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e531d3749daaedb2bf86f277d86977cd5ba3101/libvtv%2Ftestsuite%2Flib%2Flibvtv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e531d3749daaedb2bf86f277d86977cd5ba3101/libvtv%2Ftestsuite%2Flib%2Flibvtv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flib%2Flibvtv.exp?ref=9e531d3749daaedb2bf86f277d86977cd5ba3101", "patch": "@@ -28,6 +28,7 @@ load_lib dg.exp\n #\u00a0loaded until ${tool}_target_compile is defined since it uses that\n # to determine default LTO options.\n \n+load_gcc_lib multiline.exp\n load_gcc_lib prune.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp"}]}