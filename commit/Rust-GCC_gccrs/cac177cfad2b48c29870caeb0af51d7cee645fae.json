{"sha": "cac177cfad2b48c29870caeb0af51d7cee645fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjMTc3Y2ZhZDJiNDhjMjk4NzBjYWViMGFmNTFkN2NlZTY0NWZhZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-05-26T18:17:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-05-26T18:17:43Z"}, "message": "Fix PR c++/70822 (bogus error with parenthesized SCOPE_REF)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/70822\n\tPR c++/70106\n\t* cp-tree.h (REF_PARENTHESIZED_P): Make this flag apply to\n\tSCOPE_REFs too.\n\t* pt.c (tsubst_qualified_id): If REF_PARENTHESIZED_P is set\n\ton the qualified_id then propagate it to the resulting\n\texpression.\n\t(do_auto_deduction): Check REF_PARENTHESIZED_P on SCOPE_REFs\n\ttoo.\n\t* semantics.c (force_paren_expr): If given a SCOPE_REF, just set\n\tits REF_PARENTHESIZED_P flag.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/70822\n\tPR c++/70106\n\t* g++.dg/cpp1y/auto-fn32.C: New test.\n\t* g++.dg/cpp1y/paren4.C: New test.\n\nFrom-SVN: r236792", "tree": {"sha": "85dbf7b03ad63dbe5b99de2ccdca79de0dbfd08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85dbf7b03ad63dbe5b99de2ccdca79de0dbfd08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cac177cfad2b48c29870caeb0af51d7cee645fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac177cfad2b48c29870caeb0af51d7cee645fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac177cfad2b48c29870caeb0af51d7cee645fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac177cfad2b48c29870caeb0af51d7cee645fae/comments", "author": null, "committer": null, "parents": [{"sha": "c38c11a10aecab37d938dee5a22276e3304fdd53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38c11a10aecab37d938dee5a22276e3304fdd53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c38c11a10aecab37d938dee5a22276e3304fdd53"}], "stats": {"total": 106, "additions": 87, "deletions": 19}, "files": [{"sha": "ff5d8f4825c247551eb7957f3b109ed002811495", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -1,3 +1,17 @@\n+2016-05-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70822\n+\tPR c++/70106\n+\t* cp-tree.h (REF_PARENTHESIZED_P): Make this flag apply to\n+\tSCOPE_REFs too.\n+\t* pt.c (tsubst_qualified_id): If REF_PARENTHESIZED_P is set\n+\ton the qualified_id then propagate it to the resulting\n+\texpression.\n+\t(do_auto_deduction): Check REF_PARENTHESIZED_P on SCOPE_REFs\n+\ttoo.\n+\t* semantics.c (force_paren_expr): If given a SCOPE_REF, just set\n+\tits REF_PARENTHESIZED_P flag.\n+\n 2016-05-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/71173"}, {"sha": "f562a5255b1f44d90f8ee258903da4175ebe41f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -170,7 +170,7 @@ operator == (const cp_expr &lhs, tree rhs)\n       TARGET_EXPR_DIRECT_INIT_P (in TARGET_EXPR)\n       FNDECL_USED_AUTO (in FUNCTION_DECL)\n       DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n-      REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF)\n+      REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF, SCOPE_REF)\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n       CONSTRUCTOR_MUTABLE_POISON (in CONSTRUCTOR)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n@@ -3398,12 +3398,12 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define PAREN_STRING_LITERAL_P(NODE) \\\n   TREE_LANG_FLAG_0 (STRING_CST_CHECK (NODE))\n \n-/* Indicates whether a COMPONENT_REF has been parenthesized, or an\n-   INDIRECT_REF comes from parenthesizing a _DECL.  Currently only set\n-   some of the time in C++14 mode.  */\n+/* Indicates whether a COMPONENT_REF or a SCOPE_REF has been parenthesized, or\n+   an INDIRECT_REF comes from parenthesizing a _DECL.  Currently only set some\n+   of the time in C++14 mode.  */\n \n #define REF_PARENTHESIZED_P(NODE) \\\n-  TREE_LANG_FLAG_2 (TREE_CHECK2 ((NODE), COMPONENT_REF, INDIRECT_REF))\n+  TREE_LANG_FLAG_2 (TREE_CHECK3 ((NODE), COMPONENT_REF, INDIRECT_REF, SCOPE_REF))\n \n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */"}, {"sha": "4a24c9840fc2ea6fd8451328b217add61efe0455", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -13739,8 +13739,10 @@ tsubst_qualified_id (tree qualified_id, tree args,\n     {\n       if (is_template)\n \texpr = build_min_nt_loc (loc, TEMPLATE_ID_EXPR, expr, template_args);\n-      return build_qualified_name (NULL_TREE, scope, expr,\n-\t\t\t\t   QUALIFIED_NAME_IS_TEMPLATE (qualified_id));\n+      tree r = build_qualified_name (NULL_TREE, scope, expr,\n+\t\t\t\t     QUALIFIED_NAME_IS_TEMPLATE (qualified_id));\n+      REF_PARENTHESIZED_P (r) = REF_PARENTHESIZED_P (qualified_id);\n+      return r;\n     }\n \n   if (!BASELINK_P (name) && !DECL_P (expr))\n@@ -13820,6 +13822,9 @@ tsubst_qualified_id (tree qualified_id, tree args,\n       && TREE_CODE (expr) != OFFSET_REF)\n     expr = convert_from_reference (expr);\n \n+  if (REF_PARENTHESIZED_P (qualified_id))\n+    expr = force_paren_expr (expr);\n+\n   return expr;\n }\n \n@@ -24016,8 +24021,10 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \n   if (AUTO_IS_DECLTYPE (auto_node))\n     {\n-      bool id = (DECL_P (init) || (TREE_CODE (init) == COMPONENT_REF\n-\t\t\t\t   && !REF_PARENTHESIZED_P (init)));\n+      bool id = (DECL_P (init)\n+\t\t || ((TREE_CODE (init) == COMPONENT_REF\n+\t\t      || TREE_CODE (init) == SCOPE_REF)\n+\t\t     && !REF_PARENTHESIZED_P (init)));\n       targs = make_tree_vec (1);\n       TREE_VEC_ELT (targs, 0)\n \t= finish_decltype_type (init, id, tf_warning_or_error);"}, {"sha": "0cef86758f8b57156c2c4259f545a4a305857fd7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -1647,17 +1647,10 @@ force_paren_expr (tree expr)\n       && TREE_CODE (expr) != SCOPE_REF)\n     return expr;\n \n-  if (TREE_CODE (expr) == COMPONENT_REF)\n+  if (TREE_CODE (expr) == COMPONENT_REF\n+      || TREE_CODE (expr) == SCOPE_REF)\n     REF_PARENTHESIZED_P (expr) = true;\n-  else if (type_dependent_expression_p (expr)\n-\t   /* When processing_template_decl, a SCOPE_REF may actually be\n-\t      referring to a non-static data member of the current class, in\n-\t      which case its TREE_TYPE may not be properly cv-qualified (the\n-\t      cv-qualifiers of the implicit *this object haven't yet been taken\n-\t      into account) so we have to delay building a static_cast until\n-\t      instantiation.  */\n-\t   || (processing_template_decl\n-\t       && TREE_CODE (expr) == SCOPE_REF))\n+  else if (type_dependent_expression_p (expr))\n     expr = build1 (PAREN_EXPR, TREE_TYPE (expr), expr);\n   else if (VAR_P (expr) && DECL_HARD_REGISTER (expr))\n     /* We can't bind a hard register variable to a reference.  */;"}, {"sha": "962421200cdceef185381d8b9918f458c098553d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -1,3 +1,10 @@\n+2016-05-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70822\n+\tPR c++/70106\n+\t* g++.dg/cpp1y/auto-fn32.C: New test.\n+\t* g++.dg/cpp1y/paren4.C: New test.\n+\n 2016-05-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/20060410.c: Xfail on ptx."}, {"sha": "0a5dafce85874f9c518885d32bc51e9542256799", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn32.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn32.C?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile { target c++14 } }\n+\n+template<class,class> struct same_type;\n+template<class T> struct same_type<T,T> {};\n+\n+struct A\n+{\n+  static int b;\n+  int c;\n+\n+  template <int>\n+  decltype(auto) f() { return A::c; }\n+\n+  template <int>\n+  decltype(auto) g() { return (A::c); }\n+};\n+\n+A a;\n+\n+template <int>\n+decltype(auto) f() { return A::b; }\n+\n+template <int>\n+decltype(auto) g() { return (A::b); }\n+\n+int main()\n+{\n+  same_type<decltype(f<0>()), int>();\n+  same_type<decltype(g<0>()), int&>();\n+\n+  same_type<decltype(a.f<0>()), int>();\n+  same_type<decltype(a.g<0>()), int&>();\n+}"}, {"sha": "71abe846dbf5a221668f3629abe705c0ea121f63", "filename": "gcc/testsuite/g++.dg/cpp1y/paren4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac177cfad2b48c29870caeb0af51d7cee645fae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen4.C?ref=cac177cfad2b48c29870caeb0af51d7cee645fae", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/70822\n+// { dg-do compile { target c++14 } }\n+\n+struct a\n+{\n+  static int b;\n+};\n+\n+template <typename>\n+void\n+foo ()\n+{\n+  &(a::b);\n+}"}]}