{"sha": "619018d4b9c3458e2d4aadfa42d30f5cd429f155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5MDE4ZDRiOWMzNDU4ZTJkNGFhZGZhNDJkMzBmNWNkNDI5ZjE1NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-07-17T15:57:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-17T15:57:59Z"}, "message": "class.c (type_has_user_declared_move_constructor, [...]): Combine into ...\n\n\t* class.c (type_has_user_declared_move_constructor,\n\ttype_has_user_declared_move_assign): Combine into ...\n\t(classtype_has_user_move_assign_or_move_ctor_p): ... this new function.\n\t* cp-tree.h (type_has_user_declared_move_constructor,\n\ttype_has_user_declared_move_assign): Combine into ...\n\t(classtype_has_user_move_assign_or_move_ctor_p): ... this. Declare.\n\t* method.c (maybe_explain_implicit_delete): Use it.\n\t(lazily_declare_fn): Use it.\n\t* tree.c (type_has_nontrivial_copy_init): Use it.\n\nFrom-SVN: r250280", "tree": {"sha": "3c5ec1dc05587e8598c06b9f0124ce3a6f062e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c5ec1dc05587e8598c06b9f0124ce3a6f062e68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/619018d4b9c3458e2d4aadfa42d30f5cd429f155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619018d4b9c3458e2d4aadfa42d30f5cd429f155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619018d4b9c3458e2d4aadfa42d30f5cd429f155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619018d4b9c3458e2d4aadfa42d30f5cd429f155/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aac595770c4b008290640441fe51bb29e740d295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac595770c4b008290640441fe51bb29e740d295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac595770c4b008290640441fe51bb29e740d295"}], "stats": {"total": 76, "additions": 31, "deletions": 45}, "files": [{"sha": "acf179b0c8413398c19173490526569ed1be7716", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=619018d4b9c3458e2d4aadfa42d30f5cd429f155", "patch": "@@ -1,5 +1,15 @@\n 2017-07-17  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (type_has_user_declared_move_constructor,\n+\ttype_has_user_declared_move_assign): Combine into ...\n+\t(classtype_has_user_move_assign_or_move_ctor_p): ... this new function.\n+\t* cp-tree.h (type_has_user_declared_move_constructor,\n+\ttype_has_user_declared_move_assign): Combine into ...\n+\t(classtype_has_user_move_assign_or_move_ctor_p): ... this. Declare.\n+\t* method.c (maybe_explain_implicit_delete): Use it.\n+\t(lazily_declare_fn): Use it.\n+\t* tree.c (type_has_nontrivial_copy_init): Use it.\n+\n \t* semantics.c (classtype_has_nothrow_assign_or_copy_p): Clarify\n \tsemantics, simplify implementation.\n "}, {"sha": "b2175864e526622579e2a91a3ac6d0bb00c728dc", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=619018d4b9c3458e2d4aadfa42d30f5cd429f155", "patch": "@@ -5491,48 +5491,30 @@ type_has_move_assign (tree t)\n   return false;\n }\n \n-/* Returns true iff class T has a move constructor that was explicitly\n-   declared in the class body.  Note that this is different from\n-   \"user-provided\", which doesn't include functions that are defaulted in\n-   the class.  */\n+/* Returns true iff T, a class, has a user-declared move-assignment or\n+   move-constructor.  Note that this is different from\n+   \"user-provided\", which doesn't include functions that are defaulted\n+   in the class.  */\n \n bool\n-type_has_user_declared_move_constructor (tree t)\n+classtype_has_user_move_assign_or_move_ctor_p (tree t)\n {\n-  if (CLASSTYPE_LAZY_MOVE_CTOR (t))\n-    return false;\n-\n   if (!CLASSTYPE_METHOD_VEC (t))\n     return false;\n \n-  for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n-    {\n-      tree fn = *iter;\n-      if (move_fn_p (fn) && !DECL_ARTIFICIAL (fn))\n+  if (!CLASSTYPE_LAZY_MOVE_CTOR (t))\n+    for (ovl_iterator iter (lookup_fnfields_slot_nolazy (t, ctor_identifier));\n+\t iter; ++iter)\n+      if (!DECL_ARTIFICIAL (*iter) && move_fn_p (*iter))\n \treturn true;\n-    }\n-\n-  return false;\n-}\n-\n-/* Returns true iff class T has a move assignment operator that was\n-   explicitly declared in the class body.  */\n-\n-bool\n-type_has_user_declared_move_assign (tree t)\n-{\n-  if (CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n-    return false;\n \n-  for (ovl_iterator iter (lookup_fnfields_slot_nolazy\n-\t\t\t  (t, cp_assignment_operator_id (NOP_EXPR)));\n-       iter; ++iter)\n-    {\n-      tree fn = *iter;\n-      if (move_fn_p (fn) && !DECL_ARTIFICIAL (fn))\n+  if (!CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n+    for (ovl_iterator iter (lookup_fnfields_slot_nolazy\n+\t\t\t    (t, cp_assignment_operator_id (NOP_EXPR)));\n+\t iter; ++iter)\n+      if (!DECL_ARTIFICIAL (*iter) && move_fn_p (*iter))\n \treturn true;\n-    }\n-\n+  \n   return false;\n }\n "}, {"sha": "0da8a5c59b7a1fce405d3158b8af24db930550bb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=619018d4b9c3458e2d4aadfa42d30f5cd429f155", "patch": "@@ -6025,8 +6025,7 @@ extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n extern bool type_has_move_constructor\t\t(tree);\n extern bool type_has_move_assign\t\t(tree);\n-extern bool type_has_user_declared_move_constructor (tree);\n-extern bool type_has_user_declared_move_assign(tree);\n+extern bool classtype_has_user_move_assign_or_move_ctor_p (tree);\n extern bool type_build_ctor_call\t\t(tree);\n extern bool type_build_dtor_call\t\t(tree);\n extern void explain_non_literal_class\t\t(tree);"}, {"sha": "1dfa1867e71be0302e7ba7d0c569e18d0f14c029", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=619018d4b9c3458e2d4aadfa42d30f5cd429f155", "patch": "@@ -1808,10 +1808,8 @@ maybe_explain_implicit_delete (tree decl)\n \t    informed = false;\n \t}\n       else if (DECL_ARTIFICIAL (decl)\n-\t       && (sfk == sfk_copy_assignment\n-\t\t   || sfk == sfk_copy_constructor)\n-\t       && (type_has_user_declared_move_constructor (ctype)\n-\t\t   || type_has_user_declared_move_assign (ctype)))\n+\t       && (sfk == sfk_copy_assignment || sfk == sfk_copy_constructor)\n+\t       && classtype_has_user_move_assign_or_move_ctor_p (ctype))\n \t{\n \t  inform (DECL_SOURCE_LOCATION (decl),\n \t\t  \"%q#D is implicitly declared as deleted because %qT \"\n@@ -2372,10 +2370,8 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n   /* [class.copy]/8 If the class definition declares a move constructor or\n      move assignment operator, the implicitly declared copy constructor is\n      defined as deleted.... */\n-  if ((sfk == sfk_copy_assignment\n-       || sfk == sfk_copy_constructor)\n-      && (type_has_user_declared_move_constructor (type)\n-\t  || type_has_user_declared_move_assign (type)))\n+  if ((sfk == sfk_copy_assignment || sfk == sfk_copy_constructor)\n+      && classtype_has_user_move_assign_or_move_ctor_p (type))\n     DECL_DELETED_FN (fn) = true;\n \n   /* A destructor may be virtual.  */"}, {"sha": "64d4b286be683c1c61b1c4293caf5030e4667725", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619018d4b9c3458e2d4aadfa42d30f5cd429f155/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=619018d4b9c3458e2d4aadfa42d30f5cd429f155", "patch": "@@ -3976,8 +3976,7 @@ type_has_nontrivial_copy_init (const_tree type)\n       else if (CLASSTYPE_LAZY_COPY_CTOR (t))\n \t{\n \t  saw_copy = true;\n-\t  if (type_has_user_declared_move_constructor (t)\n-\t      || type_has_user_declared_move_assign (t))\n+\t  if (classtype_has_user_move_assign_or_move_ctor_p (t))\n \t    /* [class.copy]/8 If the class definition declares a move\n \t       constructor or move assignment operator, the implicitly declared\n \t       copy constructor is defined as deleted.... */;"}]}