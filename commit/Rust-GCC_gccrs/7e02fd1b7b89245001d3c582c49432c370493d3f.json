{"sha": "7e02fd1b7b89245001d3c582c49432c370493d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UwMmZkMWI3Yjg5MjQ1MDAxZDNjNTgyYzQ5NDMyYzM3MDQ5M2QzZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-09-21T12:53:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-09-21T12:53:20Z"}, "message": "configure.ac: Do not create links, only substitute the filenames.\n\n\t* configure.ac: Do not create links, only substitute the filenames.\n\t* configure: Regenerate.\n\t* Makefile.in: Assign the substitution results to variables.\n\t(LIBGCC_LINKS): Define.\n\t(enable-execute-stack.c): New rule.\n\t(unwind.h): Likewise.\n\t(md-unwind-support.h): Likewise.\n\t(sfp-machine.h): Likewise.\n\t(gthr-default.h): Likewise.\n\tAdd $(LIBGCC_LINKS) to the prerequisites of all object files and\n\tunwind.h as prerequisite of install-unwind_h-forbuild.\n\nFrom-SVN: r240312", "tree": {"sha": "48177a7e235918f42f7bc4915708998a2063d7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48177a7e235918f42f7bc4915708998a2063d7de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e02fd1b7b89245001d3c582c49432c370493d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e02fd1b7b89245001d3c582c49432c370493d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e02fd1b7b89245001d3c582c49432c370493d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e02fd1b7b89245001d3c582c49432c370493d3f/comments", "author": null, "committer": null, "parents": [{"sha": "26e7820fcc2ed5a4792b2b12ef94b7ee5341f703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e7820fcc2ed5a4792b2b12ef94b7ee5341f703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e7820fcc2ed5a4792b2b12ef94b7ee5341f703"}], "stats": {"total": 103, "additions": 45, "deletions": 58}, "files": [{"sha": "1627278679644a1fdbc8362fcace16deda4838b2", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7e02fd1b7b89245001d3c582c49432c370493d3f", "patch": "@@ -1,3 +1,17 @@\n+2016-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Do not create links, only substitute the filenames.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Assign the substitution results to variables.\n+\t(LIBGCC_LINKS): Define.\n+\t(enable-execute-stack.c): New rule.\n+\t(unwind.h): Likewise.\n+\t(md-unwind-support.h): Likewise.\n+\t(sfp-machine.h): Likewise.\n+\t(gthr-default.h): Likewise.\n+\tAdd $(LIBGCC_LINKS) to the prerequisites of all object files and\n+\tunwind.h as prerequisite of install-unwind_h-forbuild.\n+\n 2016-09-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgcc/71744"}, {"sha": "ff3c77fb6b7fad1a07cd2cb6c6028b8247035c72", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=7e02fd1b7b89245001d3c582c49432c370493d3f", "patch": "@@ -43,6 +43,11 @@ enable_vtable_verify = @enable_vtable_verify@\n enable_decimal_float = @enable_decimal_float@\n fixed_point = @fixed_point@\n with_aix_soname = @with_aix_soname@\n+enable_execute_stack = @enable_execute_stack@\n+unwind_header = @unwind_header@\n+md_unwind_header = @md_unwind_header@\n+sfp_machine_header = @sfp_machine_header@\n+thread_header = @thread_header@\n \n host_noncanonical = @host_noncanonical@\n real_host_noncanonical = @real_host_noncanonical@\n@@ -345,6 +350,21 @@ SHLIBUNWIND_INSTALL =\n tmake_file = @tmake_file@\n include $(srcdir)/empty.mk $(tmake_file)\n \n+# Create links to files specified in config.host.\n+LIBGCC_LINKS = enable-execute-stack.c unwind.h md-unwind-support.h \\\n+               sfp-machine.h gthr-default.h\n+\n+enable-execute-stack.c: $(srcdir)/$(enable_execute_stack)\n+\t-$(LN_S) $< $@\n+unwind.h: $(srcdir)/$(unwind_header)\n+\t-$(LN_S) $< $@\n+md-unwind-support.h: $(srcdir)/config/$(md_unwind_header)\n+\t-$(LN_S) $< $@\n+sfp-machine.h: $(srcdir)/config/$(sfp_machine_header)\n+\t-$(LN_S) $< $@\n+gthr-default.h: $(srcdir)/$(thread_header)\n+\t-$(LN_S) $< $@\n+\n # Collect target defines and headers from config.host.\n libgcc_tm_defines = @tm_defines@\n libgcc_tm_file = @tm_file@\n@@ -1069,10 +1089,10 @@ all: $(extra-parts)\n $(libgcc-objects) $(libgcc-s-objects) $(libgcc-eh-objects) \\\n \t$(libgcov-objects) \\\n \t$(libunwind-objects) $(libunwind-s-objects) \\\n-\t$(EXTRA_PARTS): libgcc_tm.h\n+\t$(EXTRA_PARTS): $(LIBGCC_LINKS) libgcc_tm.h\n \n # Copy unwind.h to the place where gcc will look for it at build-time\n-install-unwind_h-forbuild:\n+install-unwind_h-forbuild: unwind.h\n \tdest=$(gcc_objdir)/include/tmp$$$$-unwind.h; \\\n \tcp unwind.h $$dest; \\\n \tchmod a+r $$dest; \\"}, {"sha": "4fcdca6ec899a64cd3877feef81a4d0dc8728aaa", "filename": "libgcc/configure", "status": "modified", "additions": 4, "deletions": 51, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=7e02fd1b7b89245001d3c582c49432c370493d3f", "patch": "@@ -555,6 +555,9 @@ ac_unique_file=\"static-object.mk\"\n ac_includes_default='/* none */'\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n+md_unwind_header\n+unwind_header\n+enable_execute_stack\n asm_hidden_op\n extra_parts\n cpu_type\n@@ -2321,10 +2324,6 @@ case \"${host}\" in\n \t;;\n     i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[34567]86-*-interix[3-9]*)\n-\t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n-\t# Instead, we relocate shared libraries at runtime.\n-\t;;\n     i[34567]86-*-nto-qnx*)\n \t# QNX uses GNU C++, but need to define -shared option too, otherwise\n \t# it will coredump.\n@@ -5084,15 +5083,10 @@ esac\n \n \n \n-ac_config_links=\"$ac_config_links enable-execute-stack.c:$enable_execute_stack\"\n \n-ac_config_links=\"$ac_config_links unwind.h:$unwind_header\"\n \n-ac_config_links=\"$ac_config_links md-unwind-support.h:config/$md_unwind_header\"\n \n-ac_config_links=\"$ac_config_links sfp-machine.h:config/$sfp_machine_header\"\n \n-ac_config_links=\"$ac_config_links gthr-default.h:$thread_header\"\n \n \n # We need multilib support.\n@@ -5632,7 +5626,6 @@ cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n # Files that config.status was made for.\n config_files=\"$ac_config_files\"\n config_headers=\"$ac_config_headers\"\n-config_links=\"$ac_config_links\"\n config_commands=\"$ac_config_commands\"\n \n _ACEOF\n@@ -5662,9 +5655,6 @@ $config_files\n Configuration headers:\n $config_headers\n \n-Configuration links:\n-$config_links\n-\n Configuration commands:\n $config_commands\n \n@@ -5804,11 +5794,6 @@ for ac_config_target in $ac_config_targets\n do\n   case $ac_config_target in\n     \"auto-target.h\") CONFIG_HEADERS=\"$CONFIG_HEADERS auto-target.h:config.in\" ;;\n-    \"enable-execute-stack.c\") CONFIG_LINKS=\"$CONFIG_LINKS enable-execute-stack.c:$enable_execute_stack\" ;;\n-    \"unwind.h\") CONFIG_LINKS=\"$CONFIG_LINKS unwind.h:$unwind_header\" ;;\n-    \"md-unwind-support.h\") CONFIG_LINKS=\"$CONFIG_LINKS md-unwind-support.h:config/$md_unwind_header\" ;;\n-    \"sfp-machine.h\") CONFIG_LINKS=\"$CONFIG_LINKS sfp-machine.h:config/$sfp_machine_header\" ;;\n-    \"gthr-default.h\") CONFIG_LINKS=\"$CONFIG_LINKS gthr-default.h:$thread_header\" ;;\n     \"Makefile\") CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n     \"default\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS default\" ;;\n \n@@ -5824,7 +5809,6 @@ done\n if $ac_need_defaults; then\n   test \"${CONFIG_FILES+set}\" = set || CONFIG_FILES=$config_files\n   test \"${CONFIG_HEADERS+set}\" = set || CONFIG_HEADERS=$config_headers\n-  test \"${CONFIG_LINKS+set}\" = set || CONFIG_LINKS=$config_links\n   test \"${CONFIG_COMMANDS+set}\" = set || CONFIG_COMMANDS=$config_commands\n fi\n \n@@ -6112,7 +6096,7 @@ cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n fi # test -n \"$CONFIG_HEADERS\"\n \n \n-eval set X \"  :F $CONFIG_FILES  :H $CONFIG_HEADERS  :L $CONFIG_LINKS  :C $CONFIG_COMMANDS\"\n+eval set X \"  :F $CONFIG_FILES  :H $CONFIG_HEADERS    :C $CONFIG_COMMANDS\"\n shift\n for ac_tag\n do\n@@ -6348,38 +6332,7 @@ $as_echo \"$as_me: $ac_file is unchanged\" >&6;}\n       || as_fn_error \"could not create -\" \"$LINENO\" 5\n   fi\n  ;;\n-  :L)\n-  #\n-  # CONFIG_LINK\n-  #\n-\n-  if test \"$ac_source\" = \"$ac_file\" && test \"$srcdir\" = '.'; then\n-    :\n-  else\n-    # Prefer the file from the source tree if names are identical.\n-    if test \"$ac_source\" = \"$ac_file\" || test ! -r \"$ac_source\"; then\n-      ac_source=$srcdir/$ac_source\n-    fi\n \n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: linking $ac_source to $ac_file\" >&5\n-$as_echo \"$as_me: linking $ac_source to $ac_file\" >&6;}\n-\n-    if test ! -r \"$ac_source\"; then\n-      as_fn_error \"$ac_source: file not found\" \"$LINENO\" 5\n-    fi\n-    rm -f \"$ac_file\"\n-\n-    # Try a relative symlink, then a hard link, then a copy.\n-    case $srcdir in\n-    [\\\\/$]* | ?:[\\\\/]* ) ac_rel_source=$ac_source ;;\n-\t*) ac_rel_source=$ac_top_build_prefix$ac_source ;;\n-    esac\n-    ln -s \"$ac_rel_source\" \"$ac_file\" 2>/dev/null ||\n-      ln \"$ac_source\" \"$ac_file\" 2>/dev/null ||\n-      cp -p \"$ac_source\" \"$ac_file\" ||\n-      as_fn_error \"cannot link or copy $ac_source to $ac_file\" \"$LINENO\" 5\n-  fi\n- ;;\n   :C)  { $as_echo \"$as_me:${as_lineno-$LINENO}: executing $ac_file commands\" >&5\n $as_echo \"$as_me: executing $ac_file commands\" >&6;}\n  ;;"}, {"sha": "927507e34371cfa804328d990b968443cafcbbc2", "filename": "libgcc/configure.ac", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e02fd1b7b89245001d3c582c49432c370493d3f/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=7e02fd1b7b89245001d3c582c49432c370493d3f", "patch": "@@ -548,11 +548,11 @@ GCC_AC_THREAD_HEADER([$target_thread_file])\n AC_SUBST(cpu_type)\n AC_SUBST(extra_parts)\n AC_SUBST(asm_hidden_op)\n-AC_CONFIG_LINKS([enable-execute-stack.c:$enable_execute_stack])\n-AC_CONFIG_LINKS([unwind.h:$unwind_header])\n-AC_CONFIG_LINKS([md-unwind-support.h:config/$md_unwind_header])\n-AC_CONFIG_LINKS([sfp-machine.h:config/$sfp_machine_header])\n-AC_CONFIG_LINKS([gthr-default.h:$thread_header])\n+AC_SUBST(enable_execute_stack)\n+AC_SUBST(unwind_header)\n+AC_SUBST(md_unwind_header)\n+AC_SUBST(sfp_machine_header)\n+AC_SUBST(thread_header)\n \n # We need multilib support.\n AC_CONFIG_FILES([Makefile])"}]}