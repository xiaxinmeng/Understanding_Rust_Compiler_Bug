{"sha": "0b46224d2bb618a97a700e985cedb42d25039d96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NjIyNGQyYmI2MThhOTdhNzAwZTk4NWNlZGI0MmQyNTAzOWQ5Ng==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel@OARcorp.com", "date": "2002-02-14T18:57:38Z"}, "committer": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2002-02-14T18:57:38Z"}, "message": "atomicity.h: Corrected for RTEMS targets which do not have a CAS instruction.\n\n2001-02-14\tJoel Sherrill <joel@OARcorp.com>\n\n\t* config/cpu/m68k/bits/atomicity.h: Corrected for RTEMS targets which\n\tdo not have a CAS instruction.\n\nFrom-SVN: r49772", "tree": {"sha": "5d8abb29982ac95d8b4ee7418c77a4b40486f41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d8abb29982ac95d8b4ee7418c77a4b40486f41d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b46224d2bb618a97a700e985cedb42d25039d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b46224d2bb618a97a700e985cedb42d25039d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b46224d2bb618a97a700e985cedb42d25039d96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b46224d2bb618a97a700e985cedb42d25039d96/comments", "author": null, "committer": null, "parents": [{"sha": "e62d89a165def6705f935d449fe24b0b98266841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62d89a165def6705f935d449fe24b0b98266841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62d89a165def6705f935d449fe24b0b98266841"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "2015d5169095ed0f51511de34a693b09ee2b90a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b46224d2bb618a97a700e985cedb42d25039d96/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b46224d2bb618a97a700e985cedb42d25039d96/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b46224d2bb618a97a700e985cedb42d25039d96", "patch": "@@ -1,3 +1,8 @@\n+2001-02-14\tJoel Sherrill <joel@OARcorp.com>\n+\n+\t* config/cpu/m68k/bits/atomicity.h: Corrected for RTEMS targets which\n+\tdo not have a CAS instruction.\n+\n 2002-02-14  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_SYMVERS):  New macro, initial revision."}, {"sha": "c5d339469e380131e49fe50ac485f2e1bedb935a", "filename": "libstdc++-v3/config/cpu/m68k/bits/atomicity.h", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b46224d2bb618a97a700e985cedb42d25039d96/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b46224d2bb618a97a700e985cedb42d25039d96/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fatomicity.h?ref=0b46224d2bb618a97a700e985cedb42d25039d96", "patch": "@@ -52,6 +52,28 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n   return __result;\n }\n \n+#elif defined(__rtems__)\n+  /*\n+   * TAS/JBNE is unsafe on systems with strict priority-based scheduling.\n+   * Disable interrupts, which we can do only from supervisor mode.\n+   */\n+static inline _Atomic_word\n+__attribute__ ((__unused__))\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  _Atomic_word __result;\n+  short __level, __tmpsr;\n+  __asm__ __volatile__ (\"move%.w %%sr,%0\\n\\tor%.l %0,%1\\n\\tmove%.w %1,%%sr\"\n+                       : \"=d\"(__level), \"=d\"(__tmpsr) : \"1\"(0x700));\n+\n+  __result = *__mem;\n+  *__mem = __result + __val;\n+\n+  __asm__ __volatile__ (\"move%.w %0,%%sr\" : : \"d\"(__level));\n+\n+  return __result;\n+}\n+\n #elif !defined(__mcf5200__) && !defined(__mcf5300__)\n // 68000, 68010, cpu32 and 5400 support test-and-set.\n \n@@ -84,12 +106,10 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n   return __result;\n }\n \n-#else\n-// These variants do not support any atomic operations at all.\n+#elif defined(__vxWorks__) || defined(__embedded__)\n // The best we can hope for is to disable interrupts, which we\n // can only do from supervisor mode.\n \n-#if defined(__rtems__) || defined(__vxWorks__) || defined(__embedded__)\n static inline _Atomic_word \n __attribute__ ((__unused__))\n __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n@@ -106,7 +126,10 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n \n   return __result;\n }\n+\n #else\n+// These variants do not support any atomic operations at all.\n+\n #warning \"__exchange_and_add is not atomic for this target\"\n \n static inline _Atomic_word\n@@ -121,8 +144,7 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n   return __result;\n }\n \n-#endif /* embedded */\n-#endif /* CAS / TAS / IRQ */\n+#endif /* CAS / IRQ / TAS */\n \n static inline void\n __attribute__ ((__unused__))"}]}