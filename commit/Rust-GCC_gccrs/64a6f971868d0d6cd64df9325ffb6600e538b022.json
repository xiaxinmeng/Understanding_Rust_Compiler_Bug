{"sha": "64a6f971868d0d6cd64df9325ffb6600e538b022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNmY5NzE4NjhkMGQ2Y2Q2NGRmOTMyNWZmYjY2MDBlNTM4YjAyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jw@kayari.org", "date": "2002-09-05T15:47:54Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-09-05T15:47:54Z"}, "message": "Makefile: Use more portable shell wildcard.\n\n2002-09-05  Jonathan Wakely  <jw@kayari.org>\n\n\t* docs/html/Makefile:  Use more portable shell wildcard.\n\t* docs/html/makedoc.awk:  Nest elements correctly for XHTML conversion.\n\t* docs/html/configopts.html, docs/html/documentation.html,\n\tdocs/html/explanations.html, docs/html/install.html,\n\tdocs/html/17_intro/contribute.html, docs/html/17_intro/howto.html,\n\tdocs/html/17_intro/license.html, docs/html/18_support/howto.html,\n\tdocs/html/19_diagnostics/howto.html, docs/html/20_util/howto.html,\n\tdocs/html/21_strings/howto.html, docs/html/22_locale/codecvt.html,\n\tdocs/html/22_locale/ctype.html, docs/html/22_locale/howto.html,\n\tdocs/html/22_locale/locale.html, docs/html/22_locale/messages.html,\n\tdocs/html/23_containers/howto.html, docs/html/24_iterators/howto.html,\n\tdocs/html/25_algorithms/howto.html, docs/html/26_numerics/howto.html,\n\tdocs/html/27_io/howto.html, docs/html/ext/howto.html,\n\tdocs/html/ext/sgiexts.html, docs/html/faq/index.html:  Convert\n\tto XHTML.\n\t* docs/html/faq/index.txt:  Regenerate.\n\nFrom-SVN: r56845", "tree": {"sha": "79f6cbe2694b28cc16b07c4b8aeedff66ae659b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f6cbe2694b28cc16b07c4b8aeedff66ae659b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a6f971868d0d6cd64df9325ffb6600e538b022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a6f971868d0d6cd64df9325ffb6600e538b022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a6f971868d0d6cd64df9325ffb6600e538b022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a6f971868d0d6cd64df9325ffb6600e538b022/comments", "author": null, "committer": null, "parents": [{"sha": "3578cf634168eb8ff1dfc54f3b80988d00f93727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3578cf634168eb8ff1dfc54f3b80988d00f93727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3578cf634168eb8ff1dfc54f3b80988d00f93727"}], "stats": {"total": 2726, "additions": 1516, "deletions": 1210}, "files": [{"sha": "2bf00f670ad0b647e5cb8bb0a801ef269cb57b64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,3 +1,22 @@\n+2002-09-05  Jonathan Wakely  <jw@kayari.org>\n+\n+\t* docs/html/Makefile:  Use more portable shell wildcard.\n+\t* docs/html/makedoc.awk:  Nest elements correctly for XHTML conversion.\n+\t* docs/html/configopts.html, docs/html/documentation.html,\n+\tdocs/html/explanations.html, docs/html/install.html,\n+\tdocs/html/17_intro/contribute.html, docs/html/17_intro/howto.html,\n+\tdocs/html/17_intro/license.html, docs/html/18_support/howto.html,\n+\tdocs/html/19_diagnostics/howto.html, docs/html/20_util/howto.html,\n+\tdocs/html/21_strings/howto.html, docs/html/22_locale/codecvt.html,\n+\tdocs/html/22_locale/ctype.html, docs/html/22_locale/howto.html,\n+\tdocs/html/22_locale/locale.html, docs/html/22_locale/messages.html,\n+\tdocs/html/23_containers/howto.html, docs/html/24_iterators/howto.html,\n+\tdocs/html/25_algorithms/howto.html, docs/html/26_numerics/howto.html,\n+\tdocs/html/27_io/howto.html, docs/html/ext/howto.html,\n+\tdocs/html/ext/sgiexts.html, docs/html/faq/index.html:  Convert\n+\tto XHTML.\n+\t* docs/html/faq/index.txt:  Regenerate.\n+\n 2002-09-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/locale/gnu/ctype_members.cc (ctype<wchar_t>::do_widen(char)):"}, {"sha": "1ab24b92fb57d22dc77aa2c5ae9176b45afe0ec6", "filename": "libstdc++-v3/docs/html/17_intro/contribute.html", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fcontribute.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fcontribute.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fcontribute.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,19 +1,18 @@\n-<!--990301 slightly modified version of the GCC contribute.html file-->\n <html>\n <head>\n <title>How to contribute</title>\n </head>\n-<!--#include virtual=\"/include/header-subpages.html\"-->\n+<!--990301 slightly modified version of the GCC contribute.html file-->\n+<!-- #include virtual=\"/include/header-subpages.html\"-->\n+<body>\n <h2>How to contribute</h2>\n <p>   \n The Standard C++ Library v3, or libstc++-2.90.x, follows an open development model. Active contributors are assigned maintainer-ship responsibility, and given write access to the CVS repository. First time submitors and all other potential contributors should follow this procedure:\n+</p>\n \n-<p>\n-<hr>\n+<hr />\n <h4>ONE : read the documentation</h4> \n-<p>\n \n-<p>\n <ul>\n  <li> Get and read the relevant sections of the C++ language\n specification. Copies of the full ISO 14882 standard are available on\n@@ -27,25 +26,30 @@ <h4>ONE : read the documentation</h4>\n  <a href=\"http://www.ansi.org\">here.</a> \n (And if you've already registered with them, clicking this link will take you to directly to the place where you can \n <a href=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\">buy the standard on-line.)</a>\n+</li>\n \n <li> The library working group bugs, and known defects, can be obtained at these web sites:\n  <a href=\"http://www.dkuug.dk/jtc1/sc22/wg21/\">http://www.dkuug.dk/jtc1/sc22/wg21 </a>\n  and <a href=\"http://www.comeaucomputing.com/iso/\">http://www.comeaucomputing.com/iso/</a>\n+</li>\n \n <li> The newsgroup dedicated to standardization issues is comp.std.c++: this FAQ for this group is quite useful and can be found <a href=\"http://reality.sgi.com/austern_mti/std-c++/faq.html\"> here </a>.\n+</li>\n \n  <li> Peruse the <a href=\"http://www.gnu.ai.mit.edu/prep/standards_toc.html\">GNU Coding Standards</a>, and chuckle when you hit the part about \"Using Languages Other Than C.\" \n+</li>\n \n  <li> Be familiar with the extensions that preceded these general GNU rules. These style issues for libstdc++ can be found in the file C++STYLE, located in the root level of the distribution, or <a href=\"C++STYLE\"> here. </a>\n+</li>\n \n  <li> And last but certainly not least, read the library-specific information found <a href=\"../documentation.html\"> here.</a>\n+</li>\n \n </ul>\n \n \n \n-<p>\n-<hr>\n+<hr />\n <h4>TWO : copyright assignment</h4> \n <p>\n Small changes can be accepted without a copyright assignment form on\n@@ -56,40 +60,43 @@ <h4>TWO : copyright assignment</h4>\n Please contact <a href=\"mailto:benjamin@cygnus.com\">Benjamin\n Kosnik</a> if you are confused about the assignment or have general\n licensing questions.\n+</p>\n \n \n-<p>\n-<hr>\n+<hr />\n <h4>THREE : submitting patches</h4> \n-<p>\n \n+<p>\n Every patch must have several pieces of information before it can be\n properly evaluated. Ideally (and to ensure the fastest possible\n response from the maintainers) it would have all of these pieces:\n-<p>\n+</p>\n+\n <ul>\n \n  <li> A description of the bug and how your patch fixes this bug. For\n- new features a description of the feature and your implementation.\n+ new features a description of the feature and your implementation. </li>\n \n  <li> A ChangeLog entry as plaintext; see the various ChangeLog files\n  for format and content. If using you are using emacs as your editor,\n  simply position the insertion point at the beginning of your change\n  and hit CX-4a to bring up the appropriate ChangeLog\n- entry. See--magic! Similar functionality also exists for vi.\n+ entry. See--magic! Similar functionality also exists for vi.  </li>\n \n  <li> A testsuite submission or sample program that will easily and\n- simply show the existing error or test new functionality.\n+ simply show the existing error or test new functionality.  </li>\n \n  <li> The patch itself. If you are accessing the CVS repository at\n  Cygnus, use \"cvs update; cvs diff -c3p NEW\"; else, use \"diff -c3p OLD\n  NEW\" ... If your version of diff does not support these options, then\n- get the latest version of GNU diff.\n+ get the latest version of GNU diff. </li>\n \n  <li> When you have all these pieces, bundle them up in a mail message\n and send it to libstdc++@gcc.gnu.org. All patches and related\n-discussion should be sent to the libstdc++ mailinglist.\n+discussion should be sent to the libstdc++ mailinglist. </li>\n \n </ul>\n \n+</body>\n+</html>\n "}, {"sha": "c3b82f56b33c87eb462091663bdb08b0d745eed2", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, gcc, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for libstdc++ chapter 17.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, gcc, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for libstdc++ chapter 17.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 17</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -21,18 +20,18 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 17:  Library Introduction</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#2\">The Standard C++ header files</a>\n-   <li><a href=\"#3\">The Standard C++ library and multithreading</a>\n-   <li><a href=\"#4\"><code>&lt;foo&gt;</code> vs <code>&lt;foo.h&gt;</code></a>\n-   <li><a href=\"porting-howto.html\">Porting HOWTO</a>\n-   <li><a href=\"#5\">Behavior specific to libstdc++-v3</a>\n-   <li><a href=\"#6\">Preprocessor macros controlling the library</a>\n+   <li><a href=\"#2\">The Standard C++ header files</a></li>\n+   <li><a href=\"#3\">The Standard C++ library and multithreading</a></li>\n+   <li><a href=\"#4\"><code>&lt;foo&gt;</code> vs <code>&lt;foo.h&gt;</code></a></li>\n+   <li><a href=\"porting-howto.html\">Porting HOWTO</a></li>\n+   <li><a href=\"#5\">Behavior specific to libstdc++-v3</a></li>\n+   <li><a href=\"#6\">Preprocessor macros controlling the library</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -51,7 +50,7 @@ <h2><a name=\"2\">The Standard C++ header files</a></h2>\n       all compile and run.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n    <p>This section discusses issues surrounding the proper compilation\n       of multithreaded applications which use the Standard C++\n@@ -129,16 +128,17 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n       relevant message in the thread; from there you can use\n       &quot;Thread Next&quot; to move down the thread.  This farm is in\n       latest-to-oldest order.\n+   </p>\n       <ul>\n         <li>Our threading expert Loren gives a breakdown of\n         <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-10/msg00024.html\">the\n-        six situations involving threads</a> for the 3.0 release series.\n+        six situations involving threads</a> for the 3.0 release series.</li>\n         <li><a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\">\n         This message</a> inspired a recent updating of issues with threading\n         and the SGI STL library.  It also contains some example\n-        POSIX-multithreaded STL code.\n+        POSIX-multithreaded STL code.</li>\n       </ul>\n-      (A large selection of links to older messages has been removed; many\n+   <p> (A large selection of links to older messages has been removed; many\n       of the messages from 1999 were lost in a disk crash, and the few\n       people with access to the backup tapes have been too swamped with work\n       to restore them.  Many of the points have been superseded anyhow.)\n@@ -150,7 +150,7 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\"><code>&lt;foo&gt;</code> vs <code>&lt;foo.h&gt;</code></a></h2>\n    <p>The new-style headers are fully supported in libstdc++-v3.  The compiler\n       itself fully supports namespaces, including <code>std::</code>.\n@@ -164,16 +164,18 @@ <h2><a name=\"4\"><code>&lt;foo&gt;</code> vs <code>&lt;foo.h&gt;</code></a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n    <p>The ISO standard defines the following phrase:\n+   </p>\n      <blockquote><dl>\n-     <dt><code>[1.3.5] implementation-defined behavior</code>\n+     <dt><code>[1.3.5] implementation-defined behavior</code></dt>\n      <dd>behavior, for a well-formed program construct and correct data, that\n          depends on the implementation <strong>and that each implementation\n          shall document</strong>.\n+     </dd>\n      </dl></blockquote>\n-      We do so here, for the C++ library only.  Behavior of the compiler,\n+   <p>We do so here, for the C++ library only.  Behavior of the compiler,\n       linker, runtime loader, and other elements of &quot;the\n       implementation&quot; are documented elsewhere.  Everything listed in\n       Annex B, Implemenation Qualities, are also part of the compiler, not\n@@ -196,10 +198,10 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n       sections, libstdc++-v3 has zero control over what the cleanup code hands\n       back to the runtime loader.  Talk to the compiler people.  :-)\n    </p>\n-   <p><strong>[18.4.2.1]/5</strong> (bad_alloc),<br>\n-      <strong>[18.5.2]/5</strong> (bad_cast),<br>\n-      <strong>[18.5.3]/5</strong> (bad_typeid),<br>\n-      <strong>[18.6.1]/8</strong> (exception),<br>\n+   <p><strong>[18.4.2.1]/5</strong> (bad_alloc),<br />\n+      <strong>[18.5.2]/5</strong> (bad_cast),<br />\n+      <strong>[18.5.3]/5</strong> (bad_typeid),<br />\n+      <strong>[18.6.1]/8</strong> (exception),<br />\n       <strong>[18.6.2.1]/5</strong> (bad_exception):  The <code>what()</code>\n       member function of class <code>std::exception</code>, and these other\n       classes publicly derived from it, simply returns the name of the\n@@ -225,10 +227,10 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n       have any allocators which compare non-equal, so we can't describe how\n       they behave.\n    </p>\n-   <p><strong>[21.1.3.1]/3,4</strong>,<br>\n-      <strong>[21.1.3.2]/2</strong>,<br>\n-      <strong>[23.*]'s foo::iterator</strong>,<br>\n-      <strong>[27.*]'s foo::*_type</strong>,<br>\n+   <p><strong>[21.1.3.1]/3,4</strong>,<br />\n+      <strong>[21.1.3.2]/2</strong>,<br />\n+      <strong>[23.*]'s foo::iterator</strong>,<br />\n+      <strong>[27.*]'s foo::*_type</strong>,<br />\n       <strong>others...</strong>\n       Nope, these types are called implementation-defined because you\n       shouldn't be taking advantage of their underlying types.  Listing them\n@@ -257,7 +259,7 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n       than the minimum required.  I don't think we're currently taking\n       advantage of this yet.\n    </p>\n-   <p><strong>[27.7.1.3]/16</strong>,<br>\n+   <p><strong>[27.7.1.3]/16</strong>,<br />\n       <strong>[27.8.1.4]/10</strong>\n       The effects of <code>pubsetbuf/setbuf</code> are described\n       <a href=\"../27_io/howto.html#2\">in this chapter</a>.\n@@ -269,7 +271,7 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"6\">Preprocessor macros controlling the library</a></h2>\n    <p>Some of the semantics of the libstdc++-v3 implementation are\n       controlled by preprocessor macros, both during build/installation and\n@@ -297,6 +299,7 @@ <h2><a name=\"6\">Preprocessor macros controlling the library</a></h2>\n       The default state of the symbol is listed.  &quot;Configurable&quot;\n       (or &quot;Not configurable&quot;) means that the symbol is initially\n       chosen (or not) based on --enable/--disable options at configure time.\n+   </p>\n     <dl>\n     <dt><code>_GLIBCPP_DEPRECATED</code></dt>\n     <dd>Undefined by default.  Not configurable.  Turning this on enables\n@@ -329,7 +332,6 @@ <h2><a name=\"6\">Preprocessor macros controlling the library</a></h2>\n     </dd>\n     -->\n     </dl>\n-   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n@@ -338,7 +340,7 @@ <h2><a name=\"6\">Preprocessor macros controlling the library</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "7db8aa5f240e0913a8e28dbf1e4e0795e1daf89c", "filename": "libstdc++-v3/docs/html/17_intro/license.html", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, license, licence\">\n-   <meta name=\"DESCRIPTION\" content=\"Copying restrictions for libstdc++.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"libstdc++, license, licence\" />\n+   <meta name=\"DESCRIPTION\" content=\"Copying restrictions for libstdc++.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 copying</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -21,15 +20,16 @@ <h1 class=\"centered\"><a name=\"top\">Licenses for the Library</a></h1>\n    writing this page is a programmer, not a lawyer.\n </p>\n \n-<hr>\n+<hr />\n \n <h2>The Code:  Runtime GPL</h2>\n \n <p>The source code of libstdc++-v3 is distributed under version 2 of the\n    <a href=\"COPYING\">GNU General Public License</a>, with the so-called\n    &quot;runtime exception,&quot; as follows (or see any header or\n    implementation file):\n-   <pre>\n+</p>\n+<pre>\n    As a special exception, you may use this file as part of a free software\n    library without restriction.  Specifically, if other files instantiate\n    templates or use macros or inline functions from this file, or you compile\n@@ -38,8 +38,7 @@ <h2>The Code:  Runtime GPL</h2>\n    the GNU General Public License.  This exception does not however\n    invalidate any other reasons why the executable file might be covered by\n    the GNU General Public License.\n-   </pre>\n-</p>\n+</pre>\n \n <p>Hopefully that text is self-explanatory.  If it isn't, you need to speak\n    to your lawyer, or the Free Software Foundation.\n@@ -50,14 +49,14 @@ <h2>The Code:  Runtime GPL</h2>\n      http://gcc.gnu.org/ml/libstdc++/2000-q2/subjects.html#00050\n -->\n <p><strong>Q:  So any program which uses libstdc++ falls under the GPL?</strong>\n- <br>A:  <strong>No.</strong>  The special exception permits use of the\n+ <br />A:  <strong>No.</strong>  The special exception permits use of the\n      library in proprietary applications.\n </p>\n \n <p><strong>Q:  How is that different from the GNU {Lesser,Library}\n    GPL?</strong>\n  <!-- Quoting Jason Merrill from the thread above: -->\n- <br>A:  The LGPL requires that users be able to replace the LGPL code with a\n+ <br />A:  The LGPL requires that users be able to replace the LGPL code with a\n      modified version; this is trivial if the library in question is a C\n      shared library.  But there's no way to make that work with C++, where\n      much of the library consists of inline functions and templates, which\n@@ -68,11 +67,11 @@ <h2>The Code:  Runtime GPL</h2>\n \n <p><strong>Q:  I see.  So, what restrictions <em>are</em> there on\n    programs that use the library?</strong>\n- <br>A:  None.  We encourage such programs to be released as open source,\n+ <br />A:  None.  We encourage such programs to be released as open source,\n      but we won't punish you or sue you if you choose otherwise.\n </p>\n \n-<hr>\n+<hr />\n \n <h2>The Docs:  FDL</h2>\n \n@@ -92,7 +91,7 @@ <h2>The Docs:  FDL</h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n Comments and suggestions about this page are welcome, and may be sent to\n <a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>."}, {"sha": "c055f999bdcd3c4ce0e417d2309e17d0db0ee39d", "filename": "libstdc++-v3/docs/html/18_support/howto.html", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 18.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 18.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 18</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -24,17 +23,17 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 18:  Library Support</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Types</a>\n-   <li><a href=\"#2\">Implementation properties</a>\n-   <li><a href=\"#3\">Start and Termination</a>\n-   <li><a href=\"#4\">Dynamic memory management</a>\n-   <li><a href=\"#5\">RTTI, the ABI, and demangling</a>\n+   <li><a href=\"#1\">Types</a></li>\n+   <li><a href=\"#2\">Implementation properties</a></li>\n+   <li><a href=\"#3\">Start and Termination</a></li>\n+   <li><a href=\"#4\">Dynamic memory management</a></li>\n+   <li><a href=\"#5\">RTTI, the ABI, and demangling</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -55,12 +54,13 @@ <h2><a name=\"1\">Types</a></h2>\n       always a pointer.)\n    </p>\n    <p>In his book\n-      <a href=\"http://cseng.aw.com/bookdetail.qry?ISBN=0-201-92488-9&ptype=0\"><em>Effective C++</em></a>,\n+      <a href=\"http://cseng.aw.com/bookdetail.qry?ISBN=0-201-92488-9&amp;ptype=0\"><em>Effective C++</em></a>,\n       Scott Meyers points out that the best way to solve this problem is to\n       not overload on pointer-vs-integer types to begin with.  He also\n       offers a way to make your own magic NULL that will match pointers\n       before it matches integers:\n-      <pre>\n+   </p>\n+   <pre>\n    const                             // this is a const object...\n    class {\n    public:\n@@ -77,7 +77,8 @@ <h2><a name=\"1\">Types</a></h2>\n                                      // taken (see Item 27)...\n \n    } NULL;                           // and whose name is NULL\n-      </pre>(Cribbed from the published version of\n+   </pre>\n+   <p>(Cribbed from the published version of\n       <a href=\"http://www.awlonline.com/cseng/meyerscddemo/\">the\n       Effective C++ CD</a>, reproduced here with permission.)\n    </p>\n@@ -93,7 +94,7 @@ <h2><a name=\"1\">Types</a></h2>\n       print this stuff, it prompted him to run this code through current\n       compilers to see what the state of the art is with respect to member\n       template functions.  He posted\n-      <a href=\"http://www.deja.com/threadmsg_md.xp?AN=644660779.1&CONTEXT=964036823.871301239\">an\n+      <a href=\"http://www.deja.com/threadmsg_md.xp?AN=644660779.1&amp;CONTEXT=964036823.871301239\">an\n       article to Usenet</a> after discovering that the code above is not\n       valid!  Even though it has no data members, it still needs a\n       user-defined constructor (which means that the class needs a type name\n@@ -105,14 +106,14 @@ <h2><a name=\"1\">Types</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">Implementation properties</a></h2>\n-   <p>\n    <h3><code>&lt;limits&gt;</code></h3>\n-   This header mainly defines traits classes to give access to various\n+   <p>This header mainly defines traits classes to give access to various\n    implementation defined-aspects of the fundamental types.  The\n    traits classes -- fourteen in total -- are all specilizations of the \n    template class <code>numeric_limits</code> defined as follows:\n+   </p>\n    <pre>\n    template&lt;typename T&gt; struct class {\n       static const bool is_specialized;\n@@ -150,12 +151,11 @@ <h3><code>&lt;limits&gt;</code></h3>\n       static const bool tinyness_before;\n       static const float_round_style round_style;\n    };</pre>\n-   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Start and Termination</a></h2>\n    <p>Not many changes here to <code>&lt;cstdlib&gt;</code> (the old stdlib.h).\n       You should note that the <code>abort()</code> function does not call\n@@ -166,11 +166,14 @@ <h2><a name=\"3\">Start and Termination</a></h2>\n    </p>\n    <p>The good old <code>exit()</code> function can be a bit funky, too, until\n       you look closer.  Basically, three points to remember are:\n+   </p>\n       <ol>\n         <li>Static objects are destroyed in reverse order of their creation.\n+        </li>\n         <li>Functions registered with <code>atexit()</code> are called in\n             reverse order of registration, once per registration call.\n             (This isn't actually new.)\n+        </li>\n         <li>The previous two actions are &quot;interleaved,&quot; that is,\n             given this pseudocode:\n             <pre>\n@@ -181,12 +184,13 @@ <h2><a name=\"3\">Start and Termination</a></h2>\n               atexit(f1);\n               static Thing obj2;\n               atexit(f2);\n-            </pre>then at a call of <code>exit()</code>, f2 will be called, then\n+            </pre>\n+            then at a call of <code>exit()</code>, f2 will be called, then\n             obj2 will be destroyed, then f1 will be called, and finally obj1\n             will be destroyed.  If f1 or f2 allow an exception to propagate\n             out of them, Bad Things happen.\n+        </li>\n       </ol>\n-   </p>\n    <p>Note also that <code>atexit()</code> is only required to store 32\n       functions, and the compiler/library might already be using some of\n       those slots.  If you think you may run out, we recommend using\n@@ -196,21 +200,22 @@ <h2><a name=\"3\">Start and Termination</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">Dynamic memory management</a></h2>\n    <p>There are six flavors each of <code>new</code> and <code>delete</code>, so\n       make certain that you're using the right ones!  Here are quickie\n       descriptions of <code>new</code>:\n-      <ul>\n-        <li>single object form, throwing a <code>bad_alloc</code> on errors;\n-            this is what most people are used to using\n-        <li>single object &quot;nothrow&quot; form, returning NULL on errors\n-        <li>array new, throwing <code>bad_alloc</code> on errors\n-        <li>array nothrow new, returning NULL on errors\n-        <li>placement new, which does nothing (like it's supposed to)\n-        <li>placement array new, which also does nothing\n-      </ul>\n-      They are distinguished by the parameters that you pass to them, like\n+        </p>\n+   <ul>\n+      <li>single object form, throwing a <code>bad_alloc</code> on errors;\n+          this is what most people are used to using</li>\n+      <li>single object &quot;nothrow&quot; form, returning NULL on errors</li>\n+      <li>array new, throwing <code>bad_alloc</code> on errors</li>\n+      <li>array nothrow new, returning NULL on errors</li>\n+      <li>placement new, which does nothing (like it's supposed to)</li>\n+      <li>placement array new, which also does nothing</li>\n+   </ul>\n+   <p>They are distinguished by the parameters that you pass to them, like\n       any other overloaded function.  The six flavors of <code>delete</code>\n       are distinguished the same way, but none of them are allowed to throw\n       an exception under any circumstances anyhow.  (They match up for\n@@ -225,7 +230,8 @@ <h2><a name=\"4\">Dynamic memory management</a></h2>\n       <code>bad_alloc</code> exception (or, technically, some class derived\n       from it).  You can change this by writing your own function (called a\n       new-handler) and then registering it with <code>set_new_handler()</code>:\n-      <pre>\n+        </p>\n+   <pre>\n    typedef void (*PFV)(void);\n \n    static char*  safety;\n@@ -247,16 +253,15 @@ <h2><a name=\"4\">Dynamic memory management</a></h2>\n        old_handler = set_new_handler (&amp;my_new_handler);\n        ...\n    }\n-      </pre>\n-   </p>\n+   </pre>\n    <p><code>bad_alloc</code> is derived from the base <code>exception</code>\n       class defined in Chapter 19.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"5\">RTTI, the ABI, and demangling</a></h2>\n    <p>If you have read the <a href=\"../documentation.html#4\">source\n       documentation</a> for <code> namespace abi </code> then you are aware\n@@ -271,7 +276,8 @@ <h2><a name=\"5\">RTTI, the ABI, and demangling</a></h2>\n    <p>Probably the only times you'll be interested in demangling at runtime\n       are when you're seeing <code>typeid</code> strings in RTTI, or when\n       you're handling the runtime-support exception classes.  For example:\n-      <pre>\n+   </p>\n+   <pre>\n #include &lt;exception&gt;\n #include &lt;iostream&gt;\n #include &lt;cxxabi.h&gt;\n@@ -304,11 +310,12 @@ <h2><a name=\"5\">RTTI, the ABI, and demangling</a></h2>\n   free(realname);\n \n   return 0;\n-}</pre></p>\n-   <p>With GCC 3.1 and later, this prints<pre>\n-      St13bad_exception       =&gt; std::bad_exception   : 0\n-      3barI5emptyLi17EE       =&gt; bar&lt;empty, 17&gt;       : 0</pre>\n+}</pre>\n+   <p>With GCC 3.1 and later, this prints\n    </p>\n+   <pre>\n+      St13bad_exception       =&gt; std::bad_exception   : 0\n+      3barI5emptyLi17EE       =&gt; bar&lt;empty, 17&gt;       : 0 </pre>\n    <p>The demangler interface is described in the source documentation\n       linked to above.  It is actually written in C, so you don't need to\n       be writing C++ in order to demangle C++.  (That also means we have to\n@@ -322,7 +329,7 @@ <h2><a name=\"5\">RTTI, the ABI, and demangling</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "07585bb8347351023121fed3c20b471e4d7cffed", "filename": "libstdc++-v3/docs/html/19_diagnostics/howto.html", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 19.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 19.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 19</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -20,16 +19,16 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 19:  Diagnostics</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Adding data to exceptions</a>\n-   <li><a href=\"#2\">Exception class hierarchy diagram</a>\n-   <li><a href=\"#3\">Concept checkers -- <strong>new and improved!</strong></a>\n-   <li><a href=\"#4\">Verbose <code>terminate</code></a>\n+   <li><a href=\"#1\">Adding data to exceptions</a></li>\n+   <li><a href=\"#2\">Exception class hierarchy diagram</a></li>\n+   <li><a href=\"#3\">Concept checkers -- <strong>new and improved!</strong></a></li>\n+   <li><a href=\"#4\">Verbose <code>terminate</code></a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -56,7 +55,7 @@ <h2><a name=\"1\">Adding data to exceptions</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">Exception class hierarchy diagram</a></h2>\n    <p>At one point we were going to make up a PDF of the exceptions\n       hierarchy, akin to the one done for the I/O class hierarchy.\n@@ -72,7 +71,7 @@ <h2><a name=\"2\">Exception class hierarchy diagram</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Concept checkers -- <strong>new and improved!</strong></a></h2>\n    <p>Better taste!  Less fat!  Literally!</p>\n    <p>In 1999, SGI added <em>concept checkers</em> to their implementation\n@@ -89,7 +88,7 @@ <h2><a name=\"3\">Concept checkers -- <strong>new and improved!</strong></a></h2>\n       were found in it on more than one occasion.\n    </p>\n    <p>The primary author of the checking code, Jeremy Siek, had already\n-      started work on a replcement implementation.  The new code has been\n+      started work on a replacement implementation.  The new code has been\n       formally reviewed and accepted into\n       <a href=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n       Boost libraries</a>, and we are pleased to incorporate it into the\n@@ -109,12 +108,13 @@ <h2><a name=\"3\">Concept checkers -- <strong>new and improved!</strong></a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n    <p>If you are having difficulty with uncaught exceptions and want a\n       little bit of help debugging the causes of the core dumps, you can\n       make use of a GNU extension in GCC 3.1 and later:\n-      <pre>\n+   </p>\n+   <pre>\n    #include &lt;exception&gt;\n \n    int main()\n@@ -123,7 +123,6 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n        ...\n        throw <em>anything</em>;\n    }</pre>\n-   </p>\n    <p>The <code> __verbose_terminate_handler </code> function obtains the name\n       of the current exception, attempts to demangle it, and prints it to\n       stderr.  If the exception is derived from <code> std::exception </code>\n@@ -133,7 +132,8 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n       without returning; this one calls abort.\n    </p>\n    <p>For example:\n-      <pre>\n+   </p>\n+   <pre>\n    #include &lt;exception&gt;\n    #include &lt;stdexcept&gt;\n \n@@ -151,9 +151,9 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n        else\n            throw argc;\n    }</pre>\n-   </p>\n    <p>In GCC 3.1 and later, this gives\n-      <pre>\n+   </p>\n+   <pre>\n    % ./a.out\n    terminate called after throwing a `int'\n    Aborted\n@@ -162,7 +162,7 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n    what(): argc is greater than 5!\n    Aborted\n    %</pre>\n-      The 'Aborted' line comes from the call to abort(), of course.\n+   <p>The 'Aborted' line comes from the call to abort(), of course.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n@@ -171,7 +171,7 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "7b7485ed83749748062164610a707b1982ae7181", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 53, "deletions": 43, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 20.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 20.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 20</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -19,16 +18,16 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 20:  General Utilities</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\"><code>auto_ptr</code> is not omnipotent</a>\n-   <li><a href=\"#2\"><code>auto_ptr</code> inside container classes</a>\n-   <li><a href=\"#3\">Functors</a>\n-   <li><a href=\"#4\">Pairs</a>\n+   <li><a href=\"#1\"><code>auto_ptr</code> is not omnipotent</a></li>\n+   <li><a href=\"#2\"><code>auto_ptr</code> inside container classes</a></li>\n+   <li><a href=\"#3\">Functors</a></li>\n+   <li><a href=\"#4\">Pairs</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -47,7 +46,8 @@ <h2><a name=\"1\"><code>auto_ptr</code> is not omnipotent</a></h2>\n    </p>\n    <p>AP <em>is</em> meant to prevent nasty leaks in the presence of\n       exceptions.  That's <em>all</em>.  This code is AP-friendly:\n-      <pre>\n+   </p>\n+   <pre>\n     // not a recommend naming scheme, but good for web-based FAQs\n     typedef std::auto_ptr&lt;MyClass&gt;  APMC;\n \n@@ -62,21 +62,24 @@ <h2><a name=\"1\"><code>auto_ptr</code> is not omnipotent</a></h2>\n \n         function_taking_MyClass_pointer (ap.get());\n     }\n-      </pre>When an exception gets thrown, the instance of MyClass that's\n+   </pre>\n+   <p>When an exception gets thrown, the instance of MyClass that's\n       been created on the heap will be <code>delete</code>'d as the stack is\n       unwound past <code>func()</code>.\n    </p>\n    <p>Changing that code as follows is <em>not</em> AP-friendly:\n-      <pre>\n+   </p>\n+   <pre>\n         APMC  ap (new MyClass[22]);\n-      </pre>You will get the same problems as you would without the use\n+   </pre>\n+   <p>You will get the same problems as you would without the use\n       of AP:\n-      <pre>\n+   </p>\n+   <pre>\n         char*  array = new char[10];       // array new...\n         ...\n         delete array;                      // ...but single-object delete\n-      </pre>\n-   </p>\n+   </pre>\n    <p>AP cannot tell whether the pointer you've passed at creation points\n       to one or many things.  If it points to many things, you are about\n       to die.  AP is trivial to write, however, so you could write your\n@@ -87,18 +90,19 @@ <h2><a name=\"1\"><code>auto_ptr</code> is not omnipotent</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\"><code>auto_ptr</code> inside container classes</a></h2>\n    <p>All of the <a href=\"../23_containers/howto.html\">containers</a>\n       described in the standard library require their contained types\n       to have, among other things, a copy constructor like this:\n-      <pre>\n+   </p>\n+   <pre>\n     struct My_Type\n     {\n         My_Type (My_Type const&amp;);\n     };\n-      </pre>\n-      Note the const keyword; the object being copied shouldn't change.\n+   </pre>\n+   <p>Note the const keyword; the object being copied shouldn't change.\n       The template class <code>auto_ptr</code> (called AP here) does not\n       meet this requirement.  Creating a new AP by copying an existing\n       one transfers ownership of the pointed-to object, which means that\n@@ -113,22 +117,23 @@ <h2><a name=\"2\"><code>auto_ptr</code> inside container classes</a></h2>\n       <a href=\"../19_diagnostics/howto.html#3\">concept checks</a> built\n       in to this implementation will issue an error if you try to\n       compile code like this:\n-      <pre>\n+   </p>\n+   <pre>\n     #include &lt;vector&gt;\n     #include &lt;memory&gt;\n     \n     void f()\n     {\n         std::vector&lt; std::auto_ptr&lt;int&gt; &gt;   vec_ap_int;\n     }\n-      </pre>\n-      Should you try this with the checks enabled, you will see an error.\n+   </pre>\n+   <p>Should you try this with the checks enabled, you will see an error.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Functors</a></h2>\n    <p>If you don't know what functors are, you're not alone.  Many people\n       get slightly the wrong idea.  In the interest of not reinventing\n@@ -141,7 +146,7 @@ <h2><a name=\"3\">Functors</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">Pairs</a></h2>\n    <p>The <code>pair&lt;T1,T2&gt;</code> is a simple and handy way to\n       carry around a pair of objects.  One is of type T1, and another of\n@@ -151,16 +156,20 @@ <h2><a name=\"4\">Pairs</a></h2>\n    </p>\n    <p>Construction is simple.  The default ctor initializes each member\n       with its respective default ctor.  The other simple ctor,\n-      <pre>\n+   </p>\n+   <pre>\n     pair (const T1&amp; x, const T2&amp; y);\n-      </pre>does what you think it does, <code>first</code> getting <code>x</code>\n+   </pre>\n+   <p>does what you think it does, <code>first</code> getting <code>x</code>\n       and <code>second</code> getting <code>y</code>.\n    </p>\n    <p>There is a copy constructor, but it requires that your compiler\n       handle member function templates:\n-      <pre>\n+   </p>\n+   <pre>\n     template &lt;class U, class V&gt; pain (const pair&lt;U,V&gt;&amp; p);\n-      </pre>The compiler will convert as necessary from U to T1 and from\n+   </pre>\n+   <p>The compiler will convert as necessary from U to T1 and from\n       V to T2 in order to perform the respective initializations.\n    </p>\n    <p>The comparison operators are done for you.  Equality\n@@ -170,24 +179,25 @@ <h2><a name=\"4\">Pairs</a></h2>\n       <code>operator==</code> functions (for types like MyClass) or builtin\n       comparisons (for types like int, char, etc).\n    </p>\n-   <a name=\"pairlt\">\n-   <p>The less-than operator is a bit odd the first time you see it.  It\n+   <p><a name=\"pairlt\">\n+      The less-than operator is a bit odd the first time you see it.  It\n       is defined as evaluating to:\n-      <pre>\n+      </a>\n+   </p>\n+   <pre>\n     x.first  &lt;  y.first  ||\n         ( !(y.first  &lt;  x.first)  &amp;&amp;  x.second  &lt;  y.second )\n-      </pre>\n-      The other operators are not defined using the <code>rel_ops</code>\n+   </pre>\n+   <p>The other operators are not defined using the <code>rel_ops</code>\n       functions above, but their semantics are the same.\n    </p>\n-   </a>\n    <p>Finally, there is a template function called <code>make_pair</code>\n       that takes two references-to-const objects and returns an\n       instance of a pair instantiated on their respective types:\n-      <pre>\n-    pair&lt;int,MyClass&gt; p = make_pair(4,myobject);\n-      </pre>\n    </p>\n+   <pre>\n+    pair&lt;int,MyClass&gt; p = make_pair(4,myobject);\n+   </pre>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n@@ -197,7 +207,7 @@ <h2><a name=\"4\">Pairs</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "e49a166c0c5899eeebd92850eac540684fa4f13c", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 57, "deletions": 46, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 21.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 21.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 21</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -18,17 +17,17 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 21:  Strings</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">MFC's CString</a>\n-   <li><a href=\"#2\">A case-insensitive string class</a>\n-   <li><a href=\"#3\">Breaking a C++ string into tokens</a>\n-   <li><a href=\"#4\">Simple transformations</a>\n-   <li><a href=\"#5\">Making strings of arbitrary character types</a>\n+   <li><a href=\"#1\">MFC's CString</a></li>\n+   <li><a href=\"#2\">A case-insensitive string class</a></li>\n+   <li><a href=\"#3\">Breaking a C++ string into tokens</a></li>\n+   <li><a href=\"#4\">Simple transformations</a></li>\n+   <li><a href=\"#5\">Making strings of arbitrary character types</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -43,24 +42,29 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n    <p>Things are not as bad as they seem.  In\n       <a href=\"http://gcc.gnu.org/ml/gcc/1999-04n/msg00236.html\">this\n       message</a>, Joe Buck points out a few very important things:\n+   </p>\n       <ul>\n          <li>The Standard <code>string</code> supports all the operations\n              that CString does, with three exceptions.\n+         </li>\n          <li>Two of those exceptions (whitespace trimming and case \n              conversion) are trivial to implement.  In fact, we do so\n              on this page.\n+         </li>\n          <li>The third is <code>CString::Format</code>, which allows formatting\n              in the style of <code>sprintf</code>.  This deserves some mention:\n+         </li>\n       </ul>\n-   </p>\n-   <a name=\"1.1internal\"> <!-- Coming from Chapter 27 -->\n-   <p>The old libg++ library had a function called form(), which did much\n+   <p><a name=\"1.1internal\"> <!-- Coming from Chapter 27 -->\n+      The old libg++ library had a function called form(), which did much\n       the same thing.  But for a Standard solution, you should use the\n       stringstream classes.  These are the bridge between the iostream\n       hierarchy and the string class, and they operate with regular\n       streams seamlessly because they inherit from the iostream\n       hierarchy.  An quick example:\n-      <pre>\n+      </a>\n+   </p>\n+   <pre>\n    #include &lt;iostream&gt;\n    #include &lt;string&gt;\n    #include &lt;sstream&gt;\n@@ -80,10 +84,10 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n \n        return output_stream.str();\n    } </pre>\n-   </p></a>\n    <p>A serious problem with CString is a design bug in its memory\n       allocation.  Specifically, quoting from that same message:\n-      <pre>\n+   </p>\n+   <pre>\n    CString suffers from a common programming error that results in\n    poor performance.  Consider the following code:\n    \n@@ -104,22 +108,25 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n    \n    If you replace CString with string in the above function, the\n    performance is O(n).\n-      </pre>\n-   </p>\n+   </pre>\n    <p>Joe Buck also pointed out some other things to keep in mind when\n       comparing CString and the Standard string class:\n+   </p>\n       <ul>\n          <li>CString permits access to its internal representation; coders\n              who exploited that may have problems moving to <code>string</code>.\n+         </li>\n          <li>Microsoft ships the source to CString (in the files\n              MFC\\SRC\\Str{core,ex}.cpp), so you could fix the allocation\n              bug and rebuild your MFC libraries.\n-             <em><B>Note:</B>  It looks like the the CString shipped with\n-             VC++6.0 has fixed this, although it may in fact have been one\n-             of the VC++ SPs that did it.</em>\n+             <em><strong>Note:</strong> It looks like the the CString shipped\n+             with VC++6.0 has fixed this, although it may in fact have been\n+             one of the VC++ SPs that did it.</em>\n+         </li>\n          <li><code>string</code> operations like this have O(n) complexity\n              <em>if the implementors do it correctly</em>.  The libstdc++\n              implementors did it correctly.  Other vendors might not.\n+         </li>\n          <li>While parts of the SGI STL are used in libstdc++-v3, their\n              string class is not.  The SGI <code>string</code> is essentially\n              <code>vector&lt;char&gt;</code> and does not do any reference\n@@ -129,13 +136,13 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n              libstdc++ string, the SGI string, and the SGI rope, and this\n              is all before any allocator or traits customizations!  (More\n              choices than you can shake a stick at -- want fries with that?)\n+         </li>\n       </ul>\n-   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">A case-insensitive string class</a></h2>\n    <p>The well-known-and-if-it-isn't-well-known-it-ought-to-be\n       <a href=\"http://www.peerdirect.com/resources/\">Guru of the Week</a>\n@@ -144,7 +151,8 @@ <h2><a name=\"2\">A case-insensitive string class</a></h2>\n       is identical to the standard 'string' class, but is\n       case-insensitive in the same way as the (common but nonstandard)\n       C function stricmp():&quot;\n-      <pre>\n+   </p>\n+   <pre>\n    ci_string s( \"AbCdE\" );\n \n    // case insensitive\n@@ -154,7 +162,6 @@ <h2><a name=\"2\">A case-insensitive string class</a></h2>\n    // still case-preserving, of course\n    assert( strcmp( s.c_str(), \"AbCdE\" ) == 0 );\n    assert( strcmp( s.c_str(), \"abcde\" ) != 0 ); </pre>\n-   </p>\n \n    <p>The solution is surprisingly easy.  The original answer pages\n       on the GotW website were removed into cold storage, in\n@@ -189,7 +196,7 @@ <h2><a name=\"2\">A case-insensitive string class</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Breaking a C++ string into tokens</a></h2>\n    <p>The Standard C (and C++) function <code>strtok()</code> leaves a lot to\n       be desired in terms of user-friendliness.  It's unintuitive, it\n@@ -210,21 +217,23 @@ <h2><a name=\"3\">Breaking a C++ string into tokens</a></h2>\n       comments on what kind of string it will accept).  The author uses\n       a more general (but less readable) form of it for parsing command\n       strings and the like.  If you compiled and ran this code using it:\n-      <pre>\n+   </p>\n+   <pre>\n    std::list&lt;string&gt;  ls;\n    stringtok (ls, \" this  \\t is\\t\\n  a test  \");\n    for (std::list&lt;string&gt;const_iterator i = ls.begin();\n         i != ls.end(); ++i)\n    {\n        std::cerr &lt;&lt; ':' &lt;&lt; (*i) &lt;&lt; \":\\n\";\n-   }</pre>\n-      You would see this as output:\n-      <pre>\n+   } </pre>\n+   <p>You would see this as output:\n+   </p>\n+   <pre>\n    :this:\n    :is:\n    :a:\n-   :test:</pre>\n-      with all the whitespace removed.  The original <code>s</code> is still\n+   :test: </pre>\n+   <p>with all the whitespace removed.  The original <code>s</code> is still\n       available for use, <code>ls</code> will clean up after itself, and\n       <code>ls.size()</code> will return how many tokens there were.\n    </p>\n@@ -248,7 +257,7 @@ <h2><a name=\"3\">Breaking a C++ string into tokens</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">Simple transformations</a></h2>\n    <p>Here are Standard, simple, and portable ways to perform common\n       transformations on a <code>string</code> instance, such as &quot;convert\n@@ -258,7 +267,8 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n    </p>\n    <p>This code will go through some iterations (no pun).  Here's the\n       simplistic version usually seen on Usenet:\n-      <pre>\n+   </p>\n+   <pre>\n    #include &lt;string&gt;\n    #include &lt;algorithm&gt;\n    #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n@@ -276,7 +286,7 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n    std::string  capital_s;\n    capital_s.reserve(s.size());\n    std::transform (s.begin(), s.end(), capital_s.begin(), tolower); </pre>\n-      <span class=\"larger\"><strong>Note</strong></span> that these calls all\n+   <p><span class=\"larger\"><strong>Note</strong></span> that these calls all\n       involve the global C locale through the use of the C functions\n       <code>toupper/tolower</code>.  This is absolutely guaranteed to work --\n       but <em>only</em> if the string contains <em>only</em> characters\n@@ -287,12 +297,12 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n       characters (hahahahahaha), then you're done.\n    </p>\n    <p>At minimum, you can write short wrappers like\n-      <pre>\n+   </p>\n+   <pre>\n    char toLower (char c)\n    {\n       return tolower(static_cast&lt;unsigned char&gt;(c));\n-   }</pre>\n-   </p>\n+   } </pre>\n    <p>The correct method is to use a facet for a particular locale\n       and call its conversion functions.  These are discussed more in\n       Chapter 22; the specific part is\n@@ -304,7 +314,8 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n       like transformations, this task is trivial with the use of string's\n       <code>find</code> family.  These examples are broken into multiple\n       statements for readability:\n-      <pre>\n+   </p>\n+   <pre>\n    std::string  str (\" \\t blah blah blah    \\n \");\n \n    // trim leading whitespace\n@@ -314,15 +325,15 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n    // trim trailing whitespace\n    notwhite = str.find_last_not_of(\" \\t\\n\"); \n    str.erase(notwhite+1); </pre>\n-      Obviously, the calls to <code>find</code> could be inserted directly\n+   <p>Obviously, the calls to <code>find</code> could be inserted directly\n       into the calls to <code>erase</code>, in case your compiler does not\n       optimize named temporaries out of existence.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n    <p>how to work with char_traits -- in the archives, just need to\n       go through and pull the examples together\n@@ -335,7 +346,7 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "64f3856d479f553e4d82dd0c4b7f5d43e6c2c1ef", "filename": "libstdc++-v3/docs/html/22_locale/codecvt.html", "status": "modified", "additions": 148, "deletions": 91, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,18 +1,21 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head>\n-  <title>\n-  Notes on the codecvt implementation.\n-  </title>\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"Notes on the codecvt implementation.\" />\n+   <title>Notes on the codecvt implementation.</title>\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n   <h1>\n   Notes on the codecvt implementation.\n   </h1>\n <p>\n-<I>\n+<em>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 28, 2000\n-</I>\n+</em>\n+</p>\n \n <h2>\n 1. Abstract\n@@ -33,45 +36,44 @@ <h2>\n functionality are given.\n </p>\n \n-<p>\n <h2>\n 2. What the standard says\n </h2>\n Around page 425 of the C++ Standard, this charming heading comes into view:\n \n-<BLOCKQUOTE>\n+<blockquote>\n 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n-</BLOCKQUOTE>\n+</blockquote>\n \n The text around the codecvt definition gives some clues:\n \n-<BLOCKQUOTE>\n-<I>\n+<blockquote>\n+<em>\n -1- The class codecvt&lt;internT,externT,stateT&gt; is for use when\n converting from one codeset to another, such as from wide characters\n to multibyte characters, between wide character encodings such as\n Unicode and EUC. \n-</I>\n-</BLOCKQUOTE>\n+</em>\n+</blockquote>\n \n <p> \n Hmm. So, in some unspecified way, Unicode encodings and\n translations between other character sets should be handled by this\n class.  \n </p>\n \n-<BLOCKQUOTE>\n-<I>\n+<blockquote>\n+<em>\n -2- The stateT argument selects the pair of codesets being mapped between. \n-</I>\n-</BLOCKQUOTE>\n+</em>\n+</blockquote>\n \n <p>\n Ah ha! Another clue...\n </p>\n \n-<BLOCKQUOTE>\n-<I>\n+<blockquote>\n+<em>\n -3- The instantiations required in the Table ??\n (lib.locale.category), namely codecvt&lt;wchar_t,char,mbstate_t&gt; and\n codecvt&lt;char,char,mbstate_t&gt;, convert the implementation-defined\n@@ -83,11 +85,12 @@ <h2>\n implementor.  Other encodings can be converted by specializing on a\n user-defined stateT type. The stateT object can contain any state that\n is useful to communicate to or from the specialized do_convert member.\n-</I>\n-</BLOCKQUOTE>\n+</em>\n+</blockquote>\n \n <p>\n At this point, a couple points become clear:\n+</p>\n \n <p>\n One: The standard clearly implies that attempts to add non-required\n@@ -100,7 +103,6 @@ <h2>\n (or wholly) based on the underlying C library, and the functions\n mcsrtombs and wcsrtombs in particular.</p>\n \n-<p>\n <h2>\n 3. Some thoughts on what would be useful\n </h2>\n@@ -121,15 +123,19 @@ <h2>\n UCS4. (GNU/Linux systems using glibc, in particular.) The C\n programming language (and thus C++) does not specify a specific size\n for the type wchar_t.\n+</p>\n \n <p>\n Thus, portable C++ code cannot assume a byte size (or endianness) either.\n+</p>\n \n <p>\n Getting back to the frequently asked question: What about Unicode strings?\n+</p>\n \n <p>\n What magic spell will do this conversion?\n+</p>\n \n <p>\n A couple of comments:\n@@ -153,12 +159,14 @@ <h2>\n Specification (what used to be called X/Open) hosted on the GNU/Linux\n operating system allows bi-directional mapping between far more than\n the following tantalizing possibilities: \n+</p>\n \n <p>\n (An edited list taken from <code>`iconv --list`</code> on a Red Hat 6.2/Intel system:\n+</p>\n \n-<BLOCKQUOTE>\n-<PRE>\n+<blockquote>\n+<pre>\n 8859_1, 8859_9, 10646-1:1993, 10646-1:1993/UCS4, ARABIC, ARABIC7,\n ASCII, EUC-CN, EUC-JP, EUC-KR, EUC-TW, GREEK-CCIcode, GREEK, GREEK7-OLD,\n GREEK7, GREEK8, HEBREW, ISO-8859-1, ISO-8859-2, ISO-8859-3,\n@@ -168,50 +176,58 @@ <h2>\n ISO-10646/UTF-8, ISO-10646/UTF8, SHIFT-JIS, SHIFT_JIS, UCS-2, UCS-4,\n UCS2, UCS4, UNICODE, UNICODEBIG, UNICODELIcodeLE, US-ASCII, US, UTF-8,\n UTF-16, UTF8, UTF16).\n-</PRE>\n-</BLOCKQUOTE>\n+</pre>\n+</blockquote>\n \n <p>\n For iconv-based implementations, string literals for each of the\n encodings (ie. &quot;UCS-2&quot; and &quot;UTF-8&quot;) are necessary,\n although for other,\n non-iconv implementations a table of enumerated values or some other\n mechanism may be required.\n+</p>\n+</li>\n \n <li>\n  Maximum length of the identifying string literal.\n+</li>\n \n <li>\n  Some encodings are require explicit endian-ness. As such, some kind\n   of endian marker or other byte-order marker will be necessary. See\n   &quot;Footnotes for C/C++ developers&quot; in Haible for more information on\n   UCS-2/Unicode endian issues. (Summary: big endian seems most likely,\n   however implementations, most notably Microsoft, vary.)\n+</li>\n \n <li>\n  Types representing the conversion state, for conversions involving\n   the machinery in the &quot;C&quot; library, or the conversion descriptor, for\n   conversions using iconv (such as the type iconv_t.)  Note that the\n   conversion descriptor encodes more information than a simple encoding\n   state type.\n+</li>\n \n <li>\n  Conversion descriptors for both directions of encoding. (ie, both\n   UCS-2 to UTF-8 and UTF-8 to UCS-2.)\n+</li>\n \n <li>\n  Something to indicate if the conversion requested if valid.\n+</li>\n \n <li>\n  Something to represent if the conversion descriptors are valid.\n+</li>\n \n <li>\n  Some way to enforce strict type checking on the internal and\n   external types. As part of this, the size of the internal and\n   external types will need to be known.\n+</li>\n </ul>\n \n-<p>\n <h2>\n 4. Problems with &quot;C&quot; code conversions : thread safety, global\n locales, termination.\n@@ -224,18 +240,21 @@ <h2>\n \n <p>\n Three problems arise, one big, one of medium importance, and one small. \n+</p>\n \n <p>\n First, the small: mcsrtombs and wcsrtombs may not be multithread-safe\n on all systems required by the GNU tools. For GNU/Linux and glibc,\n this is not an issue.\n+</p>\n \n <p>\n Of medium concern, in the grand scope of things, is that the functions\n used to implement this specialization work on null-terminated\n strings. Buffers, especially file buffers, may not be null-terminated,\n thus giving conversions that end prematurely or are otherwise\n incorrect. Yikes!\n+</p>\n \n <p>\n The last, and fundamental problem, is the assumption of a global\n@@ -247,14 +266,15 @@ <h2>\n multiple locales and or simultaneous usage with computationally\n correct results. In short, libstdc++-v3 is trying to offer, as an\n option, a high-quality implementation, damn the additional complexity!\n+</p>\n \n <p>\n For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n conversions are made between the internal character set (always UCS4\n on GNU/Linux) and whatever the currently selected locale for the\n LC_CTYPE category implements.\n+</p>\n \n-<p>\n <h2>\n 5. Design\n </h2>\n@@ -264,25 +284,30 @@ <h2>\n <code>\n codecvt&lt;char, char, mbstate_t&gt;\n </code>\n+</p>\n <p>\n This is a degenerate (ie, does nothing) specialization. Implementing\n this was a piece of cake.\n+</p>\n \n <p>\n <code>\n codecvt&lt;char, wchar_t, mbstate_t&gt;\n </code>\n+</p>\n <p>\n This specialization, by specifying all the template parameters, pretty\n much ties the hands of implementors. As such, the implementation is\n straightforward, involving mcsrtombs for the conversions between char\n to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+</p>\n \n <p>\n Neither of these two required specializations deals with Unicode\n characters. As such, libstdc++-v3 implements a partial specialization\n of the codecvt class with and iconv wrapper class, __enc_traits as the\n third template parameter.\n+</p>\n \n <p>\n This implementation should be standards conformant. First of all, the\n@@ -293,33 +318,40 @@ <h2>\n of all, the requirements for the stateT type elsewhere in the standard\n (see 21.1.2 traits typedefs) only indicate that this type be copy\n constructible.\n+</p>\n \n <p>\n As such, the type __enc_traits is defined as a non-templatized, POD\n type to be used as the third type of a codecvt instantiation. This\n type is just a wrapper class for iconv, and provides an easy interface\n to iconv functionality.\n+</p>\n \n <p>\n There are two constructors for __enc_traits:\n+</p>\n \n <p>\n <code> \n __enc_traits() : __in_desc(0), __out_desc(0)\n </code>\n+</p>\n <p>\n This default constructor sets the internal encoding to some default\n (currently UCS4) and the external encoding to whatever is returned by\n nl_langinfo(CODESET).\n+</p>\n \n <p>\n <code> \n __enc_traits(const char* __int, const char* __ext)\n </code>\n+</p>\n <p>\n This constructor takes as parameters string literals that indicate the\n desired internal and external encoding. There are no defaults for\n either argument.\n+</p>\n \n <p>\n One of the issues with iconv is that the string literals identifying\n@@ -330,24 +362,28 @@ <h2>\n (subject to a pre-determined length qualifier, currently 32 bytes) for\n encodings. It is up to the user to make sure that these strings are\n valid on the target system.\n+</p>\n   \n <p>\n <code> \n void\n _M_init()\n </code>\n+</p>\n <p>\n Strangely enough, this member function attempts to open conversion\n descriptors for a given __enc_traits object. If the conversion\n descriptors are not valid, the conversion descriptors returned will\n not be valid and the resulting calls to the codecvt conversion\n functions will return error.\n+</p>\n \n <p>\n <code> \n bool\n _M_good()\n </code>\n+</p>\n <p>\n Provides a way to see if the given __enc_traits object has been\n properly initialized. If the string literals describing the desired\n@@ -356,136 +392,148 @@ <h2>\n encodings are valid, but iconv_open could not allocate conversion\n descriptors, this will also return false. Otherwise, the object is\n ready to convert and will return true.\n+</p>\n \n <p>\n <code> \n __enc_traits(const __enc_traits&amp;)\n </code>\n+</p>\n <p>\n As iconv allocates memory and sets up conversion descriptors, the copy\n constructor can only copy the member data pertaining to the internal\n and external code conversions, and not the conversion descriptors\n themselves.\n+</p>\n \n <p>\n Definitions for all the required codecvt member functions are provided\n for this specialization, and usage of codecvt&lt;internal character type,\n external character type, __enc_traits&gt; is consistent with other\n codecvt usage.\n+</p>\n \n-<p>\n <h2>\n 6.  Examples\n </h2>\n \n <ul>\n-\t<li>\n-\ta. conversions involving string literals\n+        <li>\n+        a. conversions involving string literals\n \n <pre>\n-  typedef codecvt_base::result\t\t\tresult;\n-  typedef unsigned short\t\t\tunicode_t;\n-  typedef unicode_t\t\t\t\tint_type;\n-  typedef char\t\t\t\t\text_type;\n-  typedef __enc_traits\t\t\t\tenc_type;\n-  typedef codecvt&lt;int_type, ext_type, enc_type&gt;\tunicode_codecvt;\n-\n-  const ext_type* \te_lit = \"black pearl jasmine tea\";\n-  int \t\t\tsize = strlen(e_lit);\n-  int_type \t\ti_lit_base[24] = \n+  typedef codecvt_base::result                  result;\n+  typedef unsigned short                        unicode_t;\n+  typedef unicode_t                             int_type;\n+  typedef char                                  ext_type;\n+  typedef __enc_traits                          enc_type;\n+  typedef codecvt&lt;int_type, ext_type, enc_type&gt; unicode_codecvt;\n+\n+  const ext_type*       e_lit = \"black pearl jasmine tea\";\n+  int                   size = strlen(e_lit);\n+  int_type              i_lit_base[24] = \n   { 25088, 27648, 24832, 25344, 27392, 8192, 28672, 25856, 24832, 29184, \n     27648, 8192, 27136, 24832, 29440, 27904, 26880, 28160, 25856, 8192, 29696,\n     25856, 24832, 2560\n   };\n-  const int_type* \ti_lit = i_lit_base;\n+  const int_type*       i_lit = i_lit_base;\n   const ext_type*       efrom_next;\n   const int_type*       ifrom_next;\n-  ext_type* \t\te_arr = new ext_type[size + 1];\n-  ext_type*\t\teto_next;\n-  int_type* \t\ti_arr = new int_type[size + 1];\n-  int_type*\t\tito_next;\n+  ext_type*             e_arr = new ext_type[size + 1];\n+  ext_type*             eto_next;\n+  int_type*             i_arr = new int_type[size + 1];\n+  int_type*             ito_next;\n \n   // construct a locale object with the specialized facet.\n-  locale \t\tloc(locale::classic(), new unicode_codecvt);\n+  locale                loc(locale::classic(), new unicode_codecvt);\n   // sanity check the constructed locale has the specialized facet.\n   VERIFY( has_facet&lt;unicode_codecvt&gt;(loc) );\n   const unicode_codecvt&amp; cvt = use_facet&lt;unicode_codecvt&gt;(loc); \n   // convert between const char* and unicode strings\n   unicode_codecvt::state_type state01(\"UNICODE\", \"ISO_8859-1\");\n   initialize_state(state01);\n   result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n-\t\t     i_arr, i_arr + size, ito_next);\n+                     i_arr, i_arr + size, ito_next);\n   VERIFY( r1 == codecvt_base::ok );\n   VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n   VERIFY( efrom_next == e_lit + size );\n   VERIFY( ito_next == i_arr + size );\n </pre>\n-\t<li>\n-\tb. conversions involving std::string\n-\t<li>\n-\tc. conversions involving std::filebuf and std::ostream\n+        </li>\n+        <li>\n+        b. conversions involving std::string\n+        </li>\n+        <li>\n+        c. conversions involving std::filebuf and std::ostream\n+        </li>\n </ul>\n \n More information can be found in the following testcases:\n <ul>\n-<li> testsuite/22_locale/codecvt_char_char.cc  \n-<li> testsuite/22_locale/codecvt_unicode_wchar_t.cc\n-<li> testsuite/22_locale/codecvt_unicode_char.cc  \n-<li> testsuite/22_locale/codecvt_wchar_t_char.cc\n+<li> testsuite/22_locale/codecvt_char_char.cc       </li>\n+<li> testsuite/22_locale/codecvt_unicode_wchar_t.cc </li>\n+<li> testsuite/22_locale/codecvt_unicode_char.cc    </li>\n+<li> testsuite/22_locale/codecvt_wchar_t_char.cc    </li>\n </ul>\n \n-<p>\n <h2>\n 7.  Unresolved Issues\n </h2>\n <ul>\n <li>\n-\ta. things that are sketchy, or remain unimplemented:\n-\t\tdo_encoding, max_length and length member functions\n-\t\tare only weakly implemented. I have no idea how to do\n-\t\tthis correctly, and in a generic manner.  Nathan?\n+   a. things that are sketchy, or remain unimplemented:\n+      do_encoding, max_length and length member functions\n+      are only weakly implemented. I have no idea how to do\n+      this correctly, and in a generic manner.  Nathan?\n+</li>\n \n <li>\n-\tb. conversions involving std::string\n-\n-\t<ul>\n-\t\t<li>\n-\t\thow should operators != and == work for string of\n-\t\tdifferent/same encoding?\n-\n-\t\t<li>\n-\t\twhat is equal? A byte by byte comparison or an\n-\t\tencoding then byte comparison?\n-\t\t\n-\t\t<li>\n-\t\tconversions between narrow, wide, and unicode strings\n-\t</ul>\n+   b. conversions involving std::string\n+\n+   <ul>\n+      <li>\n+      how should operators != and == work for string of\n+      different/same encoding?\n+      </li>\n+\n+      <li>\n+      what is equal? A byte by byte comparison or an\n+      encoding then byte comparison?\n+      </li>\n+      \n+      <li>\n+      conversions between narrow, wide, and unicode strings\n+      </li>\n+   </ul>\n+</li>\n <li>\n-\tc. conversions involving std::filebuf and std::ostream\n-\t<ul>\n-\t\t<li>\n-\t\thow to initialize the state object in a\n-\t\tstandards-conformant manner?\n-\n-\t\t<li>\n-\t\thow to synchronize the &quot;C&quot; and &quot;C++&quot;\n-        conversion information?\n-\n-\t\t<li>\n-\t\twchar_t/char internal buffers and conversions between\n-\t\tinternal/external buffers?\n-\t</ul>\n+   c. conversions involving std::filebuf and std::ostream\n+   <ul>\n+      <li>\n+      how to initialize the state object in a\n+      standards-conformant manner?\n+      </li>\n+\n+                <li>\n+      how to synchronize the &quot;C&quot; and &quot;C++&quot;\n+      conversion information?\n+      </li>\n+\n+                <li>\n+      wchar_t/char internal buffers and conversions between\n+      internal/external buffers?\n+      </li>\n+   </ul>\n+</li>\n </ul>\n \n-<p>\n <h2>\n 8. Acknowledgments\n </h2>\n Ulrich Drepper for the iconv suggestions and patient answering of\n late-night questions, Jason Merrill for the template partial\n specialization hints, language clarification, and wchar_t fixes.\n \n-<p>\n <h2>\n 9. Bibliography / Referenced Documents\n </h2>\n@@ -494,35 +542,44 @@ <h2>\n \n <p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n+</p>\n \n <p>\n Feather, Clive, &quot;A brief description of Normative Addendum 1,&quot; in particular the parts on Extended Character Sets\n http://www.lysator.liu.se/c/na1.html\n+</p>\n \n <p>\n Haible, Bruno, &quot;The Unicode HOWTO&quot; v0.18, 4 August 2000\n ftp://ftp.ilog.fr/pub/Users/haible/utf8/Unicode-HOWTO.html\n+</p>\n \n <p>\n ISO/IEC 14882:1998 Programming languages - C++\n+</p>\n \n <p>\n ISO/IEC 9899:1999 Programming languages - C\n+</p>\n \n <p>\n Khun, Markus, &quot;UTF-8 and Unicode FAQ for Unix/Linux&quot;\n http://www.cl.cam.ac.uk/~mgk25/unicode.html\n+</p>\n \n <p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n+</p>\n \n <p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n+</p>\n \n <p>\n System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n http://www.opennc.org/austin/docreg.html\n+</p>\n \n </body>\n </html>"}, {"sha": "886f83d0739db52eca80ca92bd7e977e8859ae3a", "filename": "libstdc++-v3/docs/html/22_locale/ctype.html", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fctype.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fctype.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fctype.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,33 +1,32 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head>\n-  <title>\n-  Notes on the ctype implementation.\n-  </title>\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"Notes on the ctype implementation.\" />\n+   <title>Notes on the ctype implementation.</title>\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n   <h1>\n   Notes on the ctype implementation.\n   </h1>\n-<I>\n+<em>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 30, 2000\n-</I>\n+</em>\n \n-<p>\n <h2>\n 1. Abstract\n </h2>\n <p>\n Woe is me.\n </p>\n \n-<p>\n <h2>\n 2. What the standard says\n </h2>\n \n \n-<p>\n <h2>\n 3. Problems with &quot;C&quot; ctype : global locales, termination.\n </h2>\n@@ -37,8 +36,8 @@ <h2>\n conversions are made between the internal character set (always UCS4\n on GNU/Linux) and whatever the currently selected locale for the\n LC_CTYPE category implements.\n+</p>\n \n-<p>\n <h2>\n 4. Design\n </h2>\n@@ -48,24 +47,28 @@ <h2>\n <code>\n ctype&lt;char&gt;\n </code>\n+</p>\n <p>\n This is simple specialization. Implementing this was a piece of cake.\n+</p>\n \n <p>\n <code>\n ctype&lt;wchar_t&gt;\n </code>\n+</p>\n <p>\n This specialization, by specifying all the template parameters, pretty\n much ties the hands of implementors. As such, the implementation is\n straightforward, involving mcsrtombs for the conversions between char\n to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+</p>\n \n <p>\n Neither of these two required specializations deals with Unicode\n characters. As such, libstdc++-v3 implements \n+</p>\n \n-<p>\n <h2>\n 5.  Examples\n </h2>\n@@ -76,50 +79,47 @@ <h2>\n \n More information can be found in the following testcases:\n <ul>\n-<li> testsuite/22_locale/ctype_char_members.cc \n-<li> testsuite/22_locale/ctype_wchar_t_members.cc \n+<li> testsuite/22_locale/ctype_char_members.cc    </li>\n+<li> testsuite/22_locale/ctype_wchar_t_members.cc </li>\n </ul>\n \n-<p>\n <h2>\n 6.  Unresolved Issues\n </h2>\n \n <ul>\n-\t<li> how to deal with the global locale issue?\n+   <li> how to deal with the global locale issue? </li>\n \n-\t<li> how to deal with different types than char, wchar_t?\n+   <li> how to deal with different types than char, wchar_t? </li>\n \n-\t<li> codecvt/ctype overlap: narrow/widen\n+   <li> codecvt/ctype overlap: narrow/widen </li>\n \n-\t<li> mask typedef in codecvt_base, argument types in codecvt.\n-\twhat is know about this type?\n+   <li> mask typedef in codecvt_base, argument types in codecvt.\n+   what is know about this type? </li>\n \n-\t<li> why mask* argument in codecvt?\n-\t\n-\t<li> can this be made (more) generic? is there a simple way to\n-\tstraighten out the configure-time mess that is a by-product of\n-\tthis class?\n+   <li> why mask* argument in codecvt? </li>\n+   \n+   <li> can this be made (more) generic? is there a simple way to\n+   straighten out the configure-time mess that is a by-product of\n+   this class? </li>\n \n-\t<li> get the ctype&lt;wchar_t&gt;::mask stuff under control. Need to\n-\tmake some kind of static table, and not do lookup evertime\n-\tsomebody hits the do_is... functions. Too bad we can't just\n-\tredefine mask for ctype&lt;wchar_t&gt;\n-\t\n-\t<li> rename abstract base class. See if just smash-overriding\n-\tis a better approach. Clarify, add sanity to naming.\n+   <li> get the ctype&lt;wchar_t&gt;::mask stuff under control. Need to\n+   make some kind of static table, and not do lookup evertime\n+   somebody hits the do_is... functions. Too bad we can't just\n+   redefine mask for ctype&lt;wchar_t&gt; </li>\n+   \n+   <li> rename abstract base class. See if just smash-overriding\n+   is a better approach. Clarify, add sanity to naming. </li>\n \n </ul>\n \n \n-<p>\n <h2>\n 7. Acknowledgments\n </h2>\n Ulrich Drepper for patient answering of late-night questions, skeletal\n examples, and C language expertise.\n \n-<p>\n <h2>\n 8. Bibliography / Referenced Documents\n </h2>\n@@ -128,23 +128,29 @@ <h2>\n \n <p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n+</p>\n \n <p>\n ISO/IEC 14882:1998 Programming languages - C++\n+</p>\n \n <p>\n ISO/IEC 9899:1999 Programming languages - C\n+</p>\n \n <p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n+</p>\n \n <p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n+</p>\n \n <p>\n System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n http://www.opennc.org/austin/docreg.html\n+</p>\n \n </body>\n </html>"}, {"sha": "106662753d9826e3b4bfab52be3296f12c0a2d95", "filename": "libstdc++-v3/docs/html/22_locale/howto.html", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 22.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 22.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 22</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -16,33 +15,33 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 22:  Localization</a></h1>\n <p>Chapter 22 deals with the C++ localization facilities.\n </p>\n <!-- I wanted to write that sentence in something requiring an exotic font,\n-     like Cryllic or Kanji.  Probably more work than such cuteness is worth,\n+     like Cyrllic or Kanji.  Probably more work than such cuteness is worth,\n      but I still think it'd be funny.\n  -->\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">class locale</a>\n-   <li><a href=\"#2\">class codecvt</a>\n-   <li><a href=\"#3\">class ctype</a>\n-   <li><a href=\"#4\">class messages</a>\n-   <li><a href=\"#5\">Bjarne Stroustrup on Locales</a>\n-   <li><a href=\"#6\">Nathan Myers on Locales</a>   \n-   <li><a href=\"#7\">Correct Transformations</a>\n+   <li><a href=\"#1\">class locale</a></li>\n+   <li><a href=\"#2\">class codecvt</a></li>\n+   <li><a href=\"#3\">class ctype</a></li>\n+   <li><a href=\"#4\">class messages</a></li>\n+   <li><a href=\"#5\">Bjarne Stroustrup on Locales</a></li>\n+   <li><a href=\"#6\">Nathan Myers on Locales</a></li>\n+   <li><a href=\"#7\">Correct Transformations</a></li>\n </ul>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <h2><a name=\"1\">class locale</a></h2>\n    <p>Notes made during the implementation of locales can be found \n       <a href=\"locale.html\">here</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">class codecvt</a></h2>\n    <p>Notes made during the implementation of codecvt can be found \n       <a href=\"codecvt.html\">here</a>.\n@@ -66,19 +65,19 @@ <h2><a name=\"2\">class codecvt</a></h2>\n    implementation-provided extended functionality are given.\n    </blockquote>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">class ctype</a></h2>\n    <p>Notes made during the implementation of ctype can be found \n       <a href=\"ctype.html\">here</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">class messages</a></h2>\n    <p>Notes made during the implementation of messages can be found \n       <a href=\"messages.html\">here</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"5\">Stroustrup on Locales</a></h2>\n    <p>Dr. Bjarne Stroustrup has released a\n       <a href=\"http://www.research.att.com/~bs/3rd_loc0.html\">pointer</a>\n@@ -96,14 +95,14 @@ <h2><a name=\"5\">Stroustrup on Locales</a></h2>\n       avoid it.\n       </em></blockquote>\n \n-<hr>\n+<hr />\n <h2><a name=\"6\">Nathan Myers on Locales</a></h2>\n    <p>An article entitled &quot;The Standard C++ Locale&quot; was\n       published in Dr. Dobb's Journal and can be found\n       <a href=\"http://www.cantrip.org/locale.html\">here</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"7\">Correct Transformations</a></h2>\n    <!-- Jumping directly to here from chapter 21. -->\n    <p>A very common question on newsgroups and mailing lists is, &quot;How\n@@ -207,7 +206,7 @@ <h2><a name=\"7\">Correct Transformations</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "999e82ed0bd72620bd9d452fe0eee0b2ba534dad", "filename": "libstdc++-v3/docs/html/22_locale/locale.html", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,19 +1,20 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head>\n-  <title>\n-  Notes on the locale implementation.\n-  </title>\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"Notes on the locale implementation.\" />\n+   <title>Notes on the locale implementation.</title>\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n   <h1>\n   Notes on the locale implementation.\n   </h1>\n-<I>\n+<em>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n-</I>\n+</em>\n \n-<p>\n <h2>\n 1. Abstract Describes the basic locale object, including nested\n classes id, facet, and the reference-counted implementation object,\n@@ -22,14 +23,12 @@ <h2>\n <p>\n </p>\n \n-<p>\n <h2>\n 2. What the standard says\n-See Chapter 22 of the standard.\n </h2>\n+See Chapter 22 of the standard.\n \n \n-<p>\n <h2>\n 3. Problems with &quot;C&quot; locales : global locales, termination.\n </h2>\n@@ -40,7 +39,7 @@ <h2>\n Single Unix (nee X/Open.)\n \n Because POSIX falls down so completely, portibility is an issue.\n-<p>\n+</p>\n \n <h2>\n 4. Design\n@@ -74,7 +73,6 @@ <h2>\n \n class _Impl\n \n-<p>\n <h2>\n 5.  Examples\n </h2>\n@@ -85,43 +83,40 @@ <h2>\n \n More information can be found in the following testcases:\n <ul>\n-<li> testsuite/22_locale/ctype_char_members.cc \n-<li> testsuite/22_locale/ctype_wchar_t_members.cc \n+<li> testsuite/22_locale/ctype_char_members.cc    </li>\n+<li> testsuite/22_locale/ctype_wchar_t_members.cc </li>\n </ul>\n \n-<p>\n <h2>\n 6.  Unresolved Issues\n </h2>\n \n <ul>\n-\t<li> locale -a displays available locales on linux\n+   <li> locale -a displays available locales on linux </li>\n \n-\t<li> locale initialization: at what point does _S_classic,\n-\t_S_global get initialized? Can named locales assume this\n-\tinitialization has already taken place?\n+   <li> locale initialization: at what point does _S_classic,\n+   _S_global get initialized? Can named locales assume this\n+   initialization has already taken place? </li>\n \n-\t<li> document how named locales error check when filling data\n-\tmembers. Ie, a fr_FR locale that doesn't have\n-\tnumpunct::truename(): does it use \"true\"? Or is it a blank\n-\tstring? What's the convention?\n+   <li> document how named locales error check when filling data\n+   members. Ie, a fr_FR locale that doesn't have\n+   numpunct::truename(): does it use \"true\"? Or is it a blank\n+   string? What's the convention? </li>\n \n-\t<li> explain how locale aliasing happens. When does \"de_DE\"\n-\tuse \"de\" information? What is the rule for locales composed of\n-\tjust an ISO language code (say, \"de\") and locales with both an\n-\tISO language code and ISO country code (say, \"de_DE\").\n+   <li> explain how locale aliasing happens. When does \"de_DE\"\n+   use \"de\" information? What is the rule for locales composed of\n+   just an ISO language code (say, \"de\") and locales with both an\n+   ISO language code and ISO country code (say, \"de_DE\"). </li>\n \n-\t<li> what should non-required facet instantiations do?  If the\n-\tgeneric implemenation is provided, then how to end-users\n-\tprovide specializations?\n+   <li> what should non-required facet instantiations do?  If the\n+   generic implemenation is provided, then how to end-users\n+   provide specializations? </li>\n </ul>\n \n-<p>\n <h2>\n 7. Acknowledgments\n </h2>\n \n-<p>\n <h2>\n 8. Bibliography / Referenced Documents\n </h2>\n@@ -130,20 +125,31 @@ <h2>\n \n <p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n+</p>\n \n <p>\n ISO/IEC 14882:1998 Programming languages - C++\n+</p>\n \n <p>\n ISO/IEC 9899:1999 Programming languages - C\n+</p>\n \n <p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n+</p>\n \n <p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n+</p>\n \n <p>\n System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n http://www.opennc.org/austin/docreg.html\n+</p>\n+\n+</body>\n+</html>\n+\n+"}, {"sha": "7497590bd884ece5d3c6acc950231b5b909a045b", "filename": "libstdc++-v3/docs/html/22_locale/messages.html", "status": "modified", "additions": 205, "deletions": 160, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,19 +1,20 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head>\n-  <title>\n-  Notes on the messages implementation.\n-  </title>\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"Notes on the messages implementation.\" />\n+   <title>Notes on the messages implementation.</title>\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n <h1>\n Notes on the messages implementation.\n </h1>\n-<I>\n+<em>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n-</I>\n+</em>\n \n-<p>\n <h2>\n 1. Abstract\n </h2>\n@@ -23,7 +24,6 @@ <h2>\n or IEEE 1003.1-200 functions.\n </p>\n \n-<p>\n <h2>\n 2. What the standard says\n </h2>\n@@ -34,9 +34,9 @@ <h2>\n <code>const char* c = \"please\"</code> to a German-localized <code>\"bitte\"</code>\n during program execution.\n \n-<BLOCKQUOTE>\n+<blockquote>\n 22.2.7.1 - Template class messages [lib.locale.messages]\n-</BLOCKQUOTE>\n+</blockquote>\n \n This class has three public member functions, which directly\n correspond to three protected virtual member functions. \n@@ -45,51 +45,57 @@ <h2>\n \n <p>\n <code>catalog open(const string&amp;, const locale&amp;) const</code>\n+</p>\n \n <p>\n <code>string_type get(catalog, int, int, const string_type&amp;) const</code>\n+</p>\n \n <p>\n <code>void close(catalog) const</code>\n+</p>\n \n <p>\n While the virtual functions are:\n+</p>\n \n <p>\n <code>catalog do_open(const string&amp;, const locale&amp;) const</code>\n-<BLOCKQUOTE>\n-<I>\n+</p>\n+<blockquote>\n+<em>\n -1- Returns: A value that may be passed to get() to retrieve a\n message, from the message catalog identified by the string name\n according to an implementation-defined mapping. The result can be used\n until it is passed to close().  Returns a value less than 0 if no such\n catalog can be opened.\n-</I>\n-</BLOCKQUOTE>\n+</em>\n+</blockquote>\n \n <p>\n <code>string_type do_get(catalog, int, int, const string_type&amp;) const</code>\n-<BLOCKQUOTE>\n-<I>\n+</p>\n+<blockquote>\n+<em>\n -3- Requires: A catalog cat obtained from open() and not yet closed. \n -4- Returns: A message identified by arguments set, msgid, and dfault,\n according to an implementation-defined mapping. If no such message can\n be found, returns dfault.\n-</I>\n-</BLOCKQUOTE>\n+</em>\n+</blockquote>\n \n <p>\n <code>void do_close(catalog) const</code>\n-<BLOCKQUOTE>\n-<I>\n+</p>\n+<blockquote>\n+<em>\n -5- Requires: A catalog cat obtained from open() and not yet closed. \n -6- Effects: Releases unspecified resources associated with cat. \n -7- Notes: The limit on such resources, if any, is implementation-defined. \n-</I>\n-</BLOCKQUOTE>\n+</em>\n+</blockquote>\n \n \n-<p>\n <h2>\n 3. Problems with &quot;C&quot; messages: thread safety,\n over-specification, and assumptions.\n@@ -101,12 +107,14 @@ <h2>\n to int? This makes sense for implementations that use\n <code>catopen</code>, but not for others. Fortunately, it's not heavily\n used and so only a minor irritant. \n+</p>\n \n <p>\n Second, by making the member functions <code>const</code>, it is\n impossible to save state in them. Thus, storing away information used\n in the 'open' member function for use in 'get' is impossible. This is\n unfortunate.\n+</p>\n \n <p>\n The 'open' member function in particular seems to be oddly\n@@ -118,20 +126,22 @@ <h2>\n argument was associated with a given default message string in the\n 'open' member function, for instance. Quite murky and unclear, on\n reflection.\n+</p>\n \n <p>\n Lastly, it seems odd that messages, which explicitly require code\n conversion, don't use the codecvt facet. Because the messages facet\n has only one template parameter, it is assumed that ctype, and not\n codecvt, is to be used to convert between character sets. \n+</p>\n \n <p>\n It is implicitly assumed that the locale for the default message\n string in 'get' is in the \"C\" locale. Thus, all source code is assumed\n to be written in English, so translations are always from \"en_US\" to\n other, explicitly named locales.\n+</p>\n \n-<p>\n <h2>\n 4. Design and Implementation Details\n </h2>\n@@ -145,45 +155,51 @@ <h2>\n <p>\n Three different mechanisms have been provided, selectable via\n configure flags:\n+</p>\n \n <ul>\n-\t<li> generic\n-\t<p>\n-\tThis model does very little, and is what is used by default.\t\n-\t</p>\n-\n-\t<li> gnu\n-\t<p>\n-\tThe gnu model is complete and fully tested. It's based on the\n-\tGNU gettext package, which is part of glibc. It uses the functions\n-\t<code>textdomain, bindtextdomain, gettext</code>\n-\tto implement full functionality. Creating message\n-\tcatalogs is a relatively straight-forward process and is\n-\tlightly documented below, and fully documented in gettext's\n-\tdistributed documentation.\n-\t</p>\n-\n-\t<li> ieee_1003.1-200x\n-\t<p>\n-\tThis is a complete, though untested, implementation based on\n-\tthe IEEE standard. The functions\n-\t<code>catopen, catgets, catclose</code>\n-\tare used to retrieve locale-specific messages given the\n-\tappropriate message catalogs that have been constructed for\n-\ttheir use. Note, the script <code> po2msg.sed</code> that is part\n-\tof the gettext distribution can convert gettext catalogs into\n-\tcatalogs that <code>catopen</code> can use.\n-\t</p>\n+   <li> generic\n+   <p>\n+   This model does very little, and is what is used by default.   \n+   </p>\n+   </li>\n+\n+   <li> gnu\n+   <p>\n+   The gnu model is complete and fully tested. It's based on the\n+   GNU gettext package, which is part of glibc. It uses the functions\n+   <code>textdomain, bindtextdomain, gettext</code>\n+   to implement full functionality. Creating message\n+   catalogs is a relatively straight-forward process and is\n+   lightly documented below, and fully documented in gettext's\n+   distributed documentation.\n+   </p>\n+   </li>\n+\n+   <li> ieee_1003.1-200x\n+   <p>\n+   This is a complete, though untested, implementation based on\n+   the IEEE standard. The functions\n+   <code>catopen, catgets, catclose</code>\n+   are used to retrieve locale-specific messages given the\n+   appropriate message catalogs that have been constructed for\n+   their use. Note, the script <code> po2msg.sed</code> that is part\n+   of the gettext distribution can convert gettext catalogs into\n+   catalogs that <code>catopen</code> can use.\n+   </p>\n+   </li>\n </ul>\n \n <p>\n A new, standards-conformant non-virtual member function signature was\n added for 'open' so that a directory could be specified with a given\n message catalog. This simplifies calling conventions for the gnu\n model.\n+</p>\n \n <p>\n The rest of this document discusses details of the GNU model.\n+</p>\n \n <p>\n The messages facet, because it is retrieving and converting between\n@@ -193,67 +209,79 @@ <h2>\n <code>LC_CTYPE</code> is also necessary. To avoid any unpleasantness, all\n bits of the \"C\" mask (ie <code>LC_ALL</code>) are set before retrieving\n messages.\n+</p>\n \n <p>\n Making the message catalogs can be initially tricky, but become quite\n simple with practice. For complete info, see the gettext\n documentation. Here's an idea of what is required:\n+</p>\n \n <ul>\n-\t<LI > Make a source file with the required string literals\n-\tthat need to be translated. See\n-\t<code>intl/string_literals.cc</code> for an example.\n-\n-\t<p>\n-\t<li> Make initial catalog (see \"4 Making the PO Template File\"\n-\tfrom the gettext docs).\n-\t<p>\n-\t<code> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </code>\n-\t\n-\t<p> \n-\t<li> Make language and country-specific locale catalogs.\n-\t<p>\n-\t<code>cp libstdc++.pot fr_FR.po</code>\n-\t<p>\n-\t<code>cp libstdc++.pot de_DE.po</code>\n-\n-\t<p> \n-\t<li> Edit localized catalogs in emacs so that strings are\n-\ttranslated.\n-\t<p>\n-\t<code>emacs fr_FR.po</code>\n-\t\n-\t<p>\n-\t<li> Make the binary mo files.\n-\t<p>\n-\t<code>msgfmt fr_FR.po -o fr_FR.mo</code>\n-\t<p>\n-\t<code>msgfmt de_DE.po -o de_DE.mo</code>\n-\n-\t<p>\n-\t<li> Copy the binary files into the correct directory structure.\n-\t<p>\n-\t<code>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++-v3.mo</code>\n-\t<p>\n-\t<code>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++-v3.mo</code>\n-\n-\t<p>\n-\t<li> Use the new message catalogs.\n-\t<p>\n-\t<code>locale loc_de(\"de_DE\");</code>\n-\t<p>\n-\t<code>\n-\tuse_facet&lt;messages&lt;char&gt; &gt;(loc_de).open(\"libstdc++\", locale(), dir);\n-\t</code>\n+   <li> Make a source file with the required string literals\n+   that need to be translated. See\n+   <code>intl/string_literals.cc</code> for an example.\n+   </li>\n+\n+   <li> Make initial catalog (see \"4 Making the PO Template File\"\n+   from the gettext docs).\n+   <p>\n+   <code> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </code>\n+   </p>\n+   </li>\n+   \n+   <li> Make language and country-specific locale catalogs.\n+   <p>\n+   <code>cp libstdc++.pot fr_FR.po</code>\n+   </p>\n+   <p>\n+   <code>cp libstdc++.pot de_DE.po</code>\n+   </p>\n+   </li>\n+\n+   <li> Edit localized catalogs in emacs so that strings are\n+   translated.\n+   <p>\n+   <code>emacs fr_FR.po</code>\n+   </p>\n+   </li>\n+   \n+   <li> Make the binary mo files.\n+   <p>\n+   <code>msgfmt fr_FR.po -o fr_FR.mo</code>\n+   </p>\n+   <p>\n+   <code>msgfmt de_DE.po -o de_DE.mo</code>\n+   </p>\n+   </li>\n+\n+   <li> Copy the binary files into the correct directory structure.\n+   <p>\n+   <code>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++-v3.mo</code>\n+   </p>\n+   <p>\n+   <code>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++-v3.mo</code>\n+   </p>\n+   </li>\n+\n+   <li> Use the new message catalogs.\n+   <p>\n+   <code>locale loc_de(\"de_DE\");</code>\n+   </p>\n+   <p>\n+   <code>\n+   use_facet&lt;messages&lt;char&gt; &gt;(loc_de).open(\"libstdc++\", locale(), dir);\n+   </code>\n+   </p>\n+   </li>\n </ul>\n \n-<p>\n <h2>\n 5.  Examples\n </h2>\n \n <ul>\n-\t<li> message converting, simple example using the GNU model.\n+   <li> message converting, simple example using the GNU model.\n \n <pre>\n #include &lt;iostream&gt;\n@@ -276,90 +304,94 @@ <h2>\n   mssg_de.close(cat_de);\n }\n </pre>\n+   </li>\n </ul>\n \n More information can be found in the following testcases:\n <ul>\n-<li> testsuite/22_locale/messages.cc  \n-<li> testsuite/22_locale/messages_byname.cc\n-<li> testsuite/22_locale/messages_char_members.cc\n+<li> testsuite/22_locale/messages.cc              </li>\n+<li> testsuite/22_locale/messages_byname.cc       </li>\n+<li> testsuite/22_locale/messages_char_members.cc </li>\n </ul>\n \n-<p>\n <h2>\n 6.  Unresolved Issues\n </h2>\n <ul>\n-<li>\tThings that are sketchy, or remain unimplemented:\n-\t<ul>\n-\t\t<li>_M_convert_from_char, _M_convert_to_char are in\n-\t\tflux, depending on how the library ends up doing\n-\t\tcharacter set conversions. It might not be possible to\n-\t\tdo a real character set based conversion, due to the\n-\t\tfact that the template parameter for messages is not\n-\t\tenough to instantiate the codecvt facet (1 supplied,\n-\t\tneed at least 2 but would prefer 3).\n-\n-\t\t<li> There are issues with gettext needing the global\n-\t\tlocale set to extract a message. This dependence on\n-\t\tthe global locale makes the current \"gnu\" model non\n-\t\tMT-safe. Future versions of glibc, ie glibc 2.3.x will\n-\t\tfix this, and the C++ library bits are already in\n-\t\tplace.\n-\t</ul>\n-\t\t\n-<p>\n-<li>\tDevelopment versions of the GNU \"C\" library, glibc 2.3 will allow\n-\ta more efficient, MT implementation of std::messages, and will\n-\tallow the removal of the _M_name_messages data member. If this\n-\tis done, it will change the library ABI. The C++ parts to\n-\tsupport glibc 2.3 have already been coded, but are not in use:\n-\tonce this version of the \"C\" library is released, the marked\n-\tparts of the messages implementation can be switched over to\n-\tthe new \"C\" library functionality. \n-<p>\t\t\n+<li>  Things that are sketchy, or remain unimplemented:\n+   <ul>\n+      <li>_M_convert_from_char, _M_convert_to_char are in\n+      flux, depending on how the library ends up doing\n+      character set conversions. It might not be possible to\n+      do a real character set based conversion, due to the\n+      fact that the template parameter for messages is not\n+      enough to instantiate the codecvt facet (1 supplied,\n+      need at least 2 but would prefer 3).\n+      </li>\n+\n+      <li> There are issues with gettext needing the global\n+      locale set to extract a message. This dependence on\n+      the global locale makes the current \"gnu\" model non\n+      MT-safe. Future versions of glibc, ie glibc 2.3.x will\n+      fix this, and the C++ library bits are already in\n+      place.\n+      </li>\n+   </ul>\n+</li>\n+\n+<li>  Development versions of the GNU \"C\" library, glibc 2.3 will allow\n+   a more efficient, MT implementation of std::messages, and will\n+   allow the removal of the _M_name_messages data member. If this\n+   is done, it will change the library ABI. The C++ parts to\n+   support glibc 2.3 have already been coded, but are not in use:\n+   once this version of the \"C\" library is released, the marked\n+   parts of the messages implementation can be switched over to\n+   the new \"C\" library functionality. \n+</li>\n <li>    At some point in the near future, std::numpunct will probably use\n-\tstd::messages facilities to implement truename/falename\n-\tcorrectly. This is currently not done, but entries in\n-\tlibstdc++.pot have already been made for \"true\" and \"false\"\n-\tstring literals, so all that remains is the std::numpunct\n-\tcoding and the configure/make hassles to make the installed\n-\tlibrary search its own catalog. Currently the libstdc++.mo\n-\tcatalog is only searched for the testsuite cases involving\n-\tmessages members.\n-\n-<p>\n-<li>\tThe following member functions:\n-\n-\t<p>\n-\t<code>\n+   std::messages facilities to implement truename/falename\n+   correctly. This is currently not done, but entries in\n+   libstdc++.pot have already been made for \"true\" and \"false\"\n+   string literals, so all that remains is the std::numpunct\n+   coding and the configure/make hassles to make the installed\n+   library search its own catalog. Currently the libstdc++.mo\n+   catalog is only searched for the testsuite cases involving\n+   messages members.\n+</li>\n+\n+<li>  The following member functions:\n+\n+   <p>\n+   <code>\n         catalog \n         open(const basic_string&lt;char&gt;&amp; __s, const locale&amp; __loc) const\n-\t</code>\n-\n-\t<p>\n-\t<code>\n-\tcatalog \n-\topen(const basic_string&lt;char&gt;&amp;, const locale&amp;, const char*) const;\n-\t</code>\n-\n-\t<p>\n-\tDon't actually return a \"value less than 0 if no such catalog\n-\tcan be opened\" as required by the standard in the \"gnu\"\n-\tmodel. As of this writing, it is unknown how to query to see\n-\tif a specified message catalog exists using the gettext\n-\tpackage.\n+   </code>\n+   </p>\n+\n+   <p>\n+   <code>\n+   catalog \n+   open(const basic_string&lt;char&gt;&amp;, const locale&amp;, const char*) const;\n+   </code>\n+   </p>\n+\n+   <p>\n+   Don't actually return a \"value less than 0 if no such catalog\n+   can be opened\" as required by the standard in the \"gnu\"\n+   model. As of this writing, it is unknown how to query to see\n+   if a specified message catalog exists using the gettext\n+   package.\n+   </p>\n+</li>\n </ul>\n \n-<p>\n <h2>\n 7. Acknowledgments\n </h2>\n Ulrich Drepper for the character set explanations, gettext details,\n and patient answering of late-night questions, Tom Tromey for the java details.\n \n \n-<p>\n <h2>\n 8. Bibliography / Referenced Documents\n </h2>\n@@ -371,36 +403,49 @@ <h2>\n Drepper, Ulrich, Thread-Aware Locale Model, A proposal. This is a\n draft document describing the design of glibc 2.3 MT locale\n functionality.\n+</p>\n \n <p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n+</p>\n \n <p>\n ISO/IEC 9899:1999 Programming languages - C\n+</p>\n \n <p>\n ISO/IEC 14882:1998 Programming languages - C++\n+</p>\n \n <p>\n Java 2 Platform, Standard Edition, v 1.3.1 API Specification. In\n particular, java.util.Properties, java.text.MessageFormat,\n java.util.Locale, java.util.ResourceBundle.\n http://java.sun.com/j2se/1.3/docs/api\n+</p>\n \n <p>\n System Interface Definitions, Issue 7 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n In particular see lines 5268-5427.\n http://www.opennc.org/austin/docreg.html\n+</p>\n \n <p> GNU gettext tools, version 0.10.38, Native Language Support\n Library and Tools. \n http://sources.redhat.com/gettext\n+</p>\n \n <p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales,\n Advanced Programmer's Guide and Reference, Addison Wesley Longman,\n Inc. 2000. See page 725, Internationalized Messages.\n+</p>\n \n <p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n+</p>\n+\n+</body>\n+</html>\n+"}, {"sha": "1c1e137b67c944003277a40deeff2ae512bef106", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 56, "deletions": 49, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 23.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 23.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 23</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -18,19 +17,19 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 23:  Containers</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Making code unaware of the container/array difference</a>\n-   <li><a href=\"#2\">Variable-sized bitmasks</a>\n-   <li><a href=\"#3\">Containers and multithreading</a>\n-   <li><a href=\"#4\">&quot;Hinting&quot; during insertion</a>\n-   <li><a href=\"#5\">Bitmasks and string arguments</a>\n-   <li><a href=\"#6\"><code>std::list::size()</code> is O(n)!</a>\n-   <li><a href=\"#7\">Space overhead management for vectors</a>\n+   <li><a href=\"#1\">Making code unaware of the container/array difference</a></li>\n+   <li><a href=\"#2\">Variable-sized bitmasks</a></li>\n+   <li><a href=\"#3\">Containers and multithreading</a></li>\n+   <li><a href=\"#4\">&quot;Hinting&quot; during insertion</a></li>\n+   <li><a href=\"#5\">Bitmasks and string arguments</a></li>\n+   <li><a href=\"#6\"><code>std::list::size()</code> is O(n)!</a></li>\n+   <li><a href=\"#7\">Space overhead management for vectors</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -65,9 +64,10 @@ <h2><a name=\"1\">Making code unaware of the container/array difference</a></h2>\n       code size or execution time.\n    </p>\n    <p>The result is that if all your algorithm calls look like\n-      <pre>\n+   </p>\n+   <pre>\n    std::transform(beginof(foo), endof(foo), beginof(foo), SomeFunction);</pre>\n-      then the type of foo can change from an array of ints to a vector\n+   <p>then the type of foo can change from an array of ints to a vector\n       of ints to a deque of ints and back again, without ever changing any\n       client code.\n    </p>\n@@ -86,39 +86,41 @@ <h2><a name=\"1\">Making code unaware of the container/array difference</a></h2>\n       give the extra three lines and avoid confusion.\n    </p>\n    <p>Second, the line\n-      <pre>\n+   </p>\n+   <pre>\n     inline unsigned int lengthof (T (&amp;)[sz]) { return sz; } </pre>\n-      looks just weird!  Hint:  unused parameters can be left nameless.\n+   <p>looks just weird!  Hint:  unused parameters can be left nameless.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n    <p>No, you cannot write code of the form\n+   </p>\n       <!-- Careful, the leading spaces in PRE show up directly. -->\n-      <pre>\n+   <pre>\n       #include &lt;bitset&gt;\n \n       void foo (size_t n)\n       {\n           std::bitset&lt;n&gt;   bits;\n           ....\n       } </pre>\n-      because <code>n</code> must be known at compile time.  Your compiler is\n+   <p>because <code>n</code> must be known at compile time.  Your compiler is\n       correct; it is not a bug.  That's the way templates work.  (Yes, it\n       <em>is</em> a feature.)\n    </p>\n    <p>There are a couple of ways to handle this kind of thing.  Please\n       consider all of them before passing judgement.  They include, in\n       no particular order:\n+   </p>\n       <ul>\n-        <li>A very large N in <code>bitset&lt;N&gt;</code>.\n-        <li>A container&lt;bool&gt;.\n-        <li>Extremely weird solutions.\n+        <li>A very large N in <code>bitset&lt;N&gt;</code>.</li>\n+        <li>A container&lt;bool&gt;.</li>\n+        <li>Extremely weird solutions.</li>\n       </ul>\n-   </p>\n    <p><strong>A very large N in\n       <code>bitset&lt;N&gt;</code>.&nbsp;&nbsp;</strong>  It has\n       been pointed out a few times in newsgroups that N bits only takes up\n@@ -192,7 +194,7 @@ <h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Containers and multithreading</a></h2>\n    <p>This section discusses issues surrounding the design of\n       multithreaded applications which use Standard C++ containers.\n@@ -204,14 +206,14 @@ <h2><a name=\"3\">Containers and multithreading</a></h2>\n       multithreading as it relates to libstdc++, including details on\n       the proper compilation of threaded code (and compatibility between\n       threaded and non-threaded code), see Chapter 17.\n-  </p>\n+   </p>\n    <p>Two excellent pages to read when working with the Standard C++\n       containers and threads are\n       <a href=\"http://www.sgi.com/tech/stl/thread_safety.html\">SGI's\n       http://www.sgi.com/tech/stl/thread_safety.html</a> and\n       <a href=\"http://www.sgi.com/tech/stl/Allocators.html\">SGI's\n       http://www.sgi.com/tech/stl/Allocators.html</a>.\n-  </p>\n+   </p>\n    <p><em>However, please ignore all discussions about the user-level\n       configuration of the lock implementation inside the STL\n       container-memory allocator on those pages.  For the sake of this\n@@ -223,7 +225,7 @@ <h2><a name=\"3\">Containers and multithreading</a></h2>\n       STL.  This is no longer required for any port and should no\n       longer be done unless you really know what you are doing and\n       assume all responsibility.</em>\n-  </p>\n+   </p>\n    <p>Since the container implementation of libstdc++-v3 uses the SGI\n       code, we use the same definition of thread safety as SGI when\n       discussing design.  A key point that beginners may miss is the\n@@ -235,7 +237,7 @@ <h2><a name=\"3\">Containers and multithreading</a></h2>\n       element is constructed uses an internal lock obtained and\n       released solely within libstdc++-v3 code (in fact, this is the\n       reason STL requires any knowledge of the thread configuration).\n-  </p>\n+   </p>\n    <p>For implementing a container which does its own locking, it is\n       trivial to provide a wrapper class which obtains the lock (as\n       SGI suggests), performs the container operation, and then\n@@ -249,7 +251,8 @@ <h2><a name=\"3\">Containers and multithreading</a></h2>\n       you must change this on a global basis for your platform to better\n       support multi-threading, then please consult all commentary in\n       include/bits/stl_alloc.h and the allocators link below.\n-      <blockquote>\n+   </p> \n+   <blockquote>\n       <p>(Explicit warning since so many people get confused while\n       attempting this:)\n       </p>\n@@ -271,8 +274,8 @@ <h2><a name=\"3\">Containers and multithreading</a></h2>\n       one-definition rule of C/C++ and you might cause yourself untold\n       problems.\n       </p>\n-      </blockquote>\n-      If you find any platform where gcc reports a\n+   </blockquote>\n+   <p>If you find any platform where gcc reports a\n       threading model other than single, and where libstdc++-v3 builds\n       a buggy container allocator when used with threads unless you\n       define __USE_MALLOC, we want to hear about it ASAP.  In the\n@@ -290,13 +293,14 @@ <h2><a name=\"3\">Containers and multithreading</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n    <p>Section [23.1.2], Table 69, of the C++ standard lists this function\n       for all of the associative containers (map, set, etc):\n-      <pre>\n+   </p>\n+   <pre>\n       a.insert(p,t);</pre>\n-      where 'p' is an iterator into the container 'a', and 't' is the item\n+   <p>where 'p' is an iterator into the container 'a', and 't' is the item\n       to insert.  The standard says that &quot;iterator p is a hint\n       pointing to where the insert should start to search,&quot; but\n       specifies nothing more.  (LWG Issue #233, currently in review,\n@@ -321,23 +325,26 @@ <h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n       their new meanings in the next paragraph.  *grin*\n    </p>\n    <p>If the <code>hint</code> parameter ('p' above) is equivalent to:\n+   </p>\n      <ul>\n       <li><code>begin()</code>, then the item being inserted should have a key\n           less than all the other keys in the container.  The item will\n           be inserted at the beginning of the container, becoming the new\n           entry at <code>begin()</code>.\n+      </li>\n       <li><code>end()</code>, then the item being inserted should have a key\n           greater than all the other keys in the container.  The item will\n           be inserted at the end of the container, becoming the new entry\n           at <code>end()</code>.\n+      </li>\n       <li>neither <code>begin()</code> nor <code>end()</code>, then:  Let <code>h</code>\n           be the entry in the container pointed to by <code>hint</code>, that\n           is, <code>h = *hint</code>.  Then the item being inserted should have\n           a key less than that of <code>h</code>, and greater than that of the\n           item preceding <code>h</code>.  The new item will be inserted\n           between <code>h</code> and <code>h</code>'s predecessor.\n+      </li>\n      </ul>\n-   </p>\n    <p>For <code>multimap</code> and <code>multiset</code>, the restrictions are\n       slightly looser:  &quot;greater than&quot; should be replaced by\n       &quot;not less than&quot; and &quot;less than&quot; should be replaced\n@@ -372,7 +379,7 @@ <h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"5\">Bitmasks and string arguments</a></h2>\n    <p>Bitmasks do not take char* nor const char* arguments in their\n       constructors.  This is something of an accident, but you can read\n@@ -383,24 +390,25 @@ <h2><a name=\"5\">Bitmasks and string arguments</a></h2>\n    </p>\n    <p>For now you can simply make a temporary string object using the\n       constructor expression:\n+   </p>\n       <pre>\n       std::bitset&lt;5&gt; b ( std::string(&quot;10110&quot;) );\n       </pre>\n       instead of\n       <pre>\n       std::bitset&lt;5&gt; b ( &quot;10110&quot; );    // invalid\n       </pre>\n-   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"6\"><code>std::list::size()</code> is O(n)!</a></h2>\n    <p>Yes it is, and that's okay.  This is a decision that we preserved when\n       we imported SGI's STL implementation.  The following is quoted from\n       <a href=\"http://www.sgi.com/tech/stl/FAQ.html\">their FAQ</a>:\n-      <blockquote>\n+   </p>\n+   <blockquote>\n       <p>The size() member function, for list and slist, takes time\n       proportional to the number of elements in the list.  This was a\n       deliberate tradeoff.  The only way to get a constant-time size() for\n@@ -419,22 +427,21 @@ <h2><a name=\"6\"><code>std::list::size()</code> is O(n)!</a></h2>\n       is supposed to do something unless there is a good reason not to.\n       </p>\n       <p>One implication of linear time size(): you should never write\n+      </p>\n          <pre>\n          if (L.size() == 0)\n              ...</pre>\n          Instead, you should write\n          <pre>\n          if (L.empty())\n              ...</pre>\n-      </p>\n-      </blockquote>\n-   </p>\n+   </blockquote>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n-<h2><a name=\"7\">Space overhead management for vectors</h2>\n+<hr />\n+<h2><a name=\"7\">Space overhead management for vectors</a></h2>\n    <p>In\n       <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-04/msg00105.html\">this\n       message to the list</a>, Daniel Kostecky announced work on an\n@@ -457,7 +464,7 @@ <h2><a name=\"7\">Space overhead management for vectors</h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "4d48cffdcbde9423ce420759781e90cac42e2289", "filename": "libstdc++-v3/docs/html/24_iterators/howto.html", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 24.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 24.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 24</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -19,14 +18,14 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 24:  Iterators</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">They ain't pointers!</a>\n-   <li><a href=\"#2\">It ends <em>where?</em></a>\n+   <li><a href=\"#1\">They ain't pointers!</a></li>\n+   <li><a href=\"#2\">It ends <em>where?</em></a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -67,41 +66,46 @@ <h2><a name=\"1\">They ain't pointers!</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">It ends <em>where?</em></a></h2>\n    <p>This starts off sounding complicated, but is actually very easy,\n       especially towards the end.  Trust me.\n-  </p>\n+   </p>\n    <p>Beginners usually have a little trouble understand the whole\n       'past-the-end' thing, until they remember their early algebra classes\n-      (see, they </em>told</em> you that stuff would come in handy!) and\n+      (see, they <em>told</em> you that stuff would come in handy!) and\n       the concept of half-open ranges.\n    </p>\n    <p>First, some history, and a reminder of some of the funkier rules in\n       C and C++ for builtin arrays.  The following rules have always been\n       true for both languages:\n-      <ol>\n-       <li>You can point anywhere in the array, <em>or to the first element\n-           past the end of the array</em>.  A pointer that points to one\n-           past the end of the array is guaranteed to be as unique as a\n-           pointer to somewhere inside the array, so that you can compare\n-           such pointers safely.\n-       <li>You can only dereference a pointer that points into an array.\n-           If your array pointer points outside the array -- even to just\n-           one past the end -- and you dereference it, Bad Things happen.\n-       <li>Strictly speaking, simply pointing anywhere else invokes\n-           undefined behavior.  Most programs won't puke until such a\n-           pointer is actually dereferenced, but the standards leave that\n-           up to the platform.\n-      </ol>\n-      The reason this past-the-end addressing was allowed is to make it\n+   </p>\n+   <ol>\n+      <li>You can point anywhere in the array, <em>or to the first element\n+          past the end of the array</em>.  A pointer that points to one\n+          past the end of the array is guaranteed to be as unique as a\n+          pointer to somewhere inside the array, so that you can compare\n+          such pointers safely.\n+      </li>\n+      <li>You can only dereference a pointer that points into an array.\n+          If your array pointer points outside the array -- even to just\n+          one past the end -- and you dereference it, Bad Things happen.\n+      </li>\n+      <li>Strictly speaking, simply pointing anywhere else invokes\n+          undefined behavior.  Most programs won't puke until such a\n+          pointer is actually dereferenced, but the standards leave that\n+          up to the platform.\n+      </li>\n+   </ol>\n+   <p>The reason this past-the-end addressing was allowed is to make it\n       easy to write a loop to go over an entire array, e.g.,\n       while (*d++ = *s++);.\n    </p>\n    <p>So, when you think of two pointers delimiting an array, don't think\n       of them as indexing 0 through n-1.  Think of them as <em>boundary\n       markers</em>:\n-      <pre>\n+   </p>\n+   <pre>\n \n    beginning            end\n      |                   |\n@@ -121,8 +125,8 @@ <h2><a name=\"2\">It ends <em>where?</em></a></h2>\n      |                       |           dereference 'end'.\n    beginning                end\n \n-      </pre>\n-      See?  Everything between the boundary markers is part of the array.\n+   </pre>\n+   <p>See?  Everything between the boundary markers is part of the array.\n       Simple.\n    </p>\n    <p>Now think back to your junior-high school algebra course, when you\n@@ -171,7 +175,7 @@ <h2><a name=\"2\">It ends <em>where?</em></a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "65403ca815945b12f50c2e1f87da1d0b78fa1865", "filename": "libstdc++-v3/docs/html/25_algorithms/howto.html", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 25.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 25.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 25</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -19,31 +18,33 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 25:  Algorithms</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Prerequisites</a>\n-   <li><a href=\"#2\">Special <code>swap</code>s</a>\n+   <li><a href=\"#1\">Prerequisites</a></li>\n+   <li><a href=\"#2\">Special <code>swap</code>s</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n <h2><a name=\"1\">Prerequisites</a></h2>\n    <p>The neatest accomplishment of the algorithms chapter is that all the\n       work is done via iterators, not containers directly.  This means two\n       important things:\n-      <ol>\n-        <li>Anything that behaves like an iterator can be used in one of\n-            these algorithms.  Raw pointers make great candidates, thus\n-            built-in arrays are fine containers, as well as your own iterators.\n-        <li>The algorithms do not (and cannot) affect the container as a\n-            whole; only the things between the two iterator endpoints.  If\n-            you pass a range of iterators only enclosing the middle third of\n-            a container, then anything outside that range is inviolate.\n-      </ol>\n    </p>\n+   <ol>\n+      <li>Anything that behaves like an iterator can be used in one of\n+          these algorithms.  Raw pointers make great candidates, thus\n+          built-in arrays are fine containers, as well as your own iterators.\n+      </li>\n+      <li>The algorithms do not (and cannot) affect the container as a\n+          whole; only the things between the two iterator endpoints.  If\n+          you pass a range of iterators only enclosing the middle third of\n+          a container, then anything outside that range is inviolate.\n+      </li>\n+   </ol>\n    <p>Even strings can be fed through the algorithms here, although the\n       string class has specialized versions of many of these functions (for\n       example, <code>string::find()</code>).  Most of the examples on this\n@@ -67,7 +68,7 @@ <h2><a name=\"1\">Prerequisites</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">Special <code>swap</code>s</a></h2>\n    <p>If you call <code> std::swap(x,y); </code> where x and y are standard\n       containers, then the call will automatically be replaced by a call to\n@@ -90,7 +91,7 @@ <h2><a name=\"2\">Special <code>swap</code>s</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "067f59dd0fd7c53b6ccb56f16557c909031f9048", "filename": "libstdc++-v3/docs/html/26_numerics/howto.html", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,43 +1,45 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 26.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 26.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 26</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n <h1 class=\"centered\"><a name=\"top\">Chapter 26:  Numerics</a></h1>\n \n <p>Chapter 26 deals with building block abstractions to aid in\n    numerical computing:\n-   <ul>\n-     <li>Template data structures such as <code>valarray&lt;&gt;</code>\n-         and <code>complex&lt;&gt;</code>.\n-     <li>Template numerical functions such as <code>accumulate</code>,\n-         <code>inner_product</code>, <code>partial_sum</code>, and\n-         <code>adjacent_difference</code>.\n-   </ul>\n-   All of the Standard C math functions are of course included in C++,\n+</p>\n+<ul>\n+   <li>Template data structures such as <code>valarray&lt;&gt;</code>\n+       and <code>complex&lt;&gt;</code>.\n+   </li>\n+   <li>Template numerical functions such as <code>accumulate</code>,\n+       <code>inner_product</code>, <code>partial_sum</code>, and\n+       <code>adjacent_difference</code>.\n+   </li>\n+</ul>\n+<p>All of the Standard C math functions are of course included in C++,\n    and overloaded versions for <code>long</code>, <code>float</code>, and\n    <code>long double</code> have been added for all of them.\n </p>\n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Complex Number Processing</a>\n-   <li><a href=\"#2\">Array Processing</a>\n-   <li><a href=\"#3\">Numerical Functions</a>\n-   <li><a href=\"#4\">C99</a>\n+   <li><a href=\"#1\">Complex Number Processing</a></li>\n+   <li><a href=\"#2\">Array Processing</a></li>\n+   <li><a href=\"#3\">Numerical Functions</a></li>\n+   <li><a href=\"#4\">C99</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -62,7 +64,7 @@ <h2><a name=\"1\">Complex Number Processing</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">Array Processing</a></h2>\n    <p>One of the major reasons why FORTRAN can chew through numbers so well\n       is that it is defined to be free of pointer aliasing, an assumption\n@@ -87,22 +89,23 @@ <h2><a name=\"2\">Array Processing</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Numerical Functions</a></h2>\n    <p>There are four generalized functions in the &lt;numeric&gt; header\n       that follow the same conventions as those in &lt;algorithm&gt;.  Each\n       of them is overloaded:  one signature for common default operations,\n       and a second for fully general operations.  Their names are\n       self-explanatory to anyone who works with numerics on a regular basis:\n-      <ul>\n-        <li><code>accumulate</code>\n-        <li><code>inner_product</code>\n-        <li><code>partial_sum</code>\n-        <li><code>adjacent_difference</code>\n-      </ul>\n    </p>\n+   <ul>\n+      <li><code>accumulate</code></li>\n+      <li><code>inner_product</code></li>\n+      <li><code>partial_sum</code></li>\n+      <li><code>adjacent_difference</code></li>\n+   </ul>\n    <p>Here is a simple example of the two forms of <code>accumulate</code>.\n-      <pre>\n+   </p>\n+   <pre>\n    int   ar[50];\n    int   someval = somefunction();\n \n@@ -111,8 +114,8 @@ <h2><a name=\"3\">Numerical Functions</a></h2>\n    int  sum       = std::accumulate(ar,ar+50,0);\n    int  sum_stuff = std::accumulate(ar,ar+50,someval);\n    int  product   = std::accumulate(ar,ar+50,1,std::multiplies&lt;int&gt;());\n-      </pre>\n-      The first call adds all the members of the array, using zero as an\n+   </pre>\n+   <p>The first call adds all the members of the array, using zero as an\n       initial value for <code>sum</code>.  The second does the same, but uses\n       <code>someval</code> as the starting value (thus, <code>sum_stuff == sum +\n       someval</code>).  The final call uses the second of the two signatures,\n@@ -125,7 +128,7 @@ <h2><a name=\"3\">Numerical Functions</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">C99</a></h2>\n    <p>In addition to the other topics on this page, we'll note here some\n       of the C99 features that appear in libstdc++-v3.\n@@ -151,7 +154,7 @@ <h2><a name=\"4\">C99</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "94b0e015fbad9b069d7efd094b1429930f5f657e", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 78, "deletions": 70, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 27.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 27.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Chapter 27</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -19,48 +18,50 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 27:  Input/Output</a></h1>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Copying a file</a>\n-   <li><a href=\"#2\">The buffering is screwing up my program!</a>\n-   <li><a href=\"#3\">Binary I/O</a>\n-   <li><a href=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</a>\n-   <li><a href=\"#6\">Deriving a stream buffer</a>\n-   <li><a href=\"#7\">More on binary I/O</a>\n-   <li><a href=\"#8\">Pathetic performance?  Ditch C.</a>\n-   <li><a href=\"#9\">Threads and I/O</a>\n+   <li><a href=\"#1\">Copying a file</a></li>\n+   <li><a href=\"#2\">The buffering is screwing up my program!</a></li>\n+   <li><a href=\"#3\">Binary I/O</a></li>\n+   <li><a href=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</a></li>\n+   <li><a href=\"#6\">Deriving a stream buffer</a></li>\n+   <li><a href=\"#7\">More on binary I/O</a></li>\n+   <li><a href=\"#8\">Pathetic performance?  Ditch C.</a></li>\n+   <li><a href=\"#9\">Threads and I/O</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n <h2><a name=\"1\">Copying a file</a></h2>\n    <p>So you want to copy a file quickly and easily, and most important,\n       completely portably.  And since this is C++, you have an open\n       ifstream (call it IN) and an open ofstream (call it OUT):\n-      <pre>\n+   </p>\n+   <pre>\n    #include &lt;fstream&gt;\n \n    std::ifstream  IN (\"input_file\");\n    std::ofstream  OUT (\"output_file\"); </pre>\n-   </p>\n    <p>Here's the easiest way to get it completely wrong:\n-      <pre>\n+   </p>\n+   <pre>\n    OUT &lt;&lt; IN;</pre>\n-      For those of you who don't already know why this doesn't work\n+   <p>For those of you who don't already know why this doesn't work\n       (probably from having done it before), I invite you to quickly\n       create a simple text file called &quot;input_file&quot; containing\n       the sentence\n+   </p>\n       <pre>\n-   The quick brown fox jumped over the lazy dog.</pre>\n-      surrounded by blank lines.  Code it up and try it.  The contents\n+      The quick brown fox jumped over the lazy dog.</pre>\n+   <p>surrounded by blank lines.  Code it up and try it.  The contents\n       of &quot;output_file&quot; may surprise you.\n    </p>\n    <p>Seriously, go do it.  Get surprised, then come back.  It's worth it.\n    </p>\n-   <hr width=\"60%\">\n+   <hr width=\"60%\" />\n    <p>The thing to remember is that the <code>basic_[io]stream</code> classes\n       handle formatting, nothing else.  In particular, they break up on\n       whitespace.  The actual reading, writing, and storing of data is\n@@ -76,9 +77,9 @@ <h2><a name=\"1\">Copying a file</a></h2>\n       as well as the streams themselves.  The pointer is easily retrieved\n       using the <code>rdbuf()</code> member function.  Therefore, the easiest\n       way to copy the file is:\n-      <pre>\n-   OUT &lt;&lt; IN.rdbuf();</pre>\n    </p>\n+   <pre>\n+   OUT &lt;&lt; IN.rdbuf();</pre>\n    <p>So what <em>was</em> happening with OUT&lt;&lt;IN?  Undefined\n       behavior, since that particular &lt;&lt; isn't defined by the Standard.\n       I have seen instances where it is implemented, but the character\n@@ -89,7 +90,7 @@ <h2><a name=\"1\">Copying a file</a></h2>\n       file then contains a perfect text representation of a hexidecimal\n       address (quite a big surprise).  Others don't compile at all.\n    </p>\n-   <p>Also note that none of this is specific to o<B>*f*</B>streams. \n+   <p>Also note that none of this is specific to o<b>*f*</b>streams. \n       The operators shown above are all defined in the parent \n       basic_ostream class and are therefore available with all possible\n       descendents.\n@@ -98,7 +99,7 @@ <h2><a name=\"1\">Copying a file</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n <!--\n   This is not written very well.  I need to redo this section.\n@@ -122,35 +123,38 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n       is the effect you want when writing to a screen -- get the text\n       out as soon as possible, etc -- but the buffering is largely\n       wasted when doing this to a file:\n-      <pre>\n+   </p>\n+   <pre>\n    output &lt;&lt; &quot;a line of text&quot; &lt;&lt; endl;\n    output &lt;&lt; some_data_variable &lt;&lt; endl;\n    output &lt;&lt; &quot;another line of text&quot; &lt;&lt; endl; </pre>\n-      The proper thing to do in this case to just write the data out\n+   <p>The proper thing to do in this case to just write the data out\n       and let the libraries and the system worry about the buffering.\n       If you need a newline, just write a newline:\n-      <pre>\n+   </p>\n+   <pre>\n    output &lt;&lt; &quot;a line of text\\n&quot;\n           &lt;&lt; some_data_variable &lt;&lt; '\\n'\n           &lt;&lt; &quot;another line of text\\n&quot;; </pre>\n-      I have also joined the output statements into a single statement.\n+   <p>I have also joined the output statements into a single statement.\n       You could make the code prettier by moving the single newline to\n       the start of the quoted text on the thing line, for example.\n    </p>\n    <p>If you do need to flush the buffer above, you can send an\n       <code>endl</code> if you also need a newline, or just flush the buffer\n       yourself:\n-      <pre>\n+   </p>\n+   <pre>\n    output &lt;&lt; ...... &lt;&lt; flush;    // can use std::flush manipulator\n    output.flush();               // or call a member fn </pre>\n-   </p>\n    <p>On the other hand, there are times when writing to a file should\n       be like writing to standard error; no buffering should be done \n       because the data needs to appear quickly (a prime example is a\n       log file for security-related information).  The way to do this is\n       just to turn off the buffering <em>before any I/O operations at\n       all</em> have been done, i.e., as soon as possible after opening:\n-      <pre>\n+   </p>\n+   <pre>\n    std::ofstream    os (&quot;/foo/bar/baz&quot;);\n    std::ifstream    is (&quot;/qux/quux/quuux&quot;);\n    int   i;\n@@ -160,7 +164,6 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n    ...\n    os &lt;&lt; &quot;this data is written immediately\\n&quot;;\n    is &gt;&gt; i;   // and this will probably cause a disk read </pre>\n-   </p>\n    <p>Since all aspects of buffering are handled by a streambuf-derived\n       member, it is necessary to get at that member with <code>rdbuf()</code>.\n       Then the public version of <code>setbuf</code> can be called.  The \n@@ -189,7 +192,7 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Binary I/O</a></h2>\n    <p>The first and most important thing to remember about binary I/O is\n       that opening a file with <code>ios::binary</code> is not, repeat\n@@ -234,25 +237,28 @@ <h2><a name=\"3\">Binary I/O</a></h2>\n       of <em>formatting</em> functions and classes to perform something\n       which <em>requires</em> that formatting not be done?  There are a\n       seemingly infinite number of solutions, and a few are listed here:\n-      <ul>\n-        <li>&quot;Derive your own fstream-type classes and write your own\n-            &lt;&lt;/&gt;&gt; operators to do binary I/O on whatever data\n-            types you're using.&quot;  This is a Bad Thing, because while\n-            the compiler would probably be just fine with it, other humans\n-            are going to be confused.  The overloaded bitshift operators\n-            have a well-defined meaning (formatting), and this breaks it.\n-        <li>&quot;Build the file structure in memory, then <code>mmap()</code>\n-            the file and copy the structure.&quot;  Well, this is easy to\n-            make work, and easy to break, and is pretty equivalent to\n-            using <code>::read()</code> and <code>::write()</code> directly, and\n-            makes no use of the iostream library at all...\n-        <li>&quot;Use streambufs, that's what they're there for.&quot;\n-            While not trivial for the beginner, this is the best of all\n-            solutions.  The streambuf/filebuf layer is the layer that is\n-            responsible for actual I/O.  If you want to use the C++\n-            library for binary I/O, this is where you start.\n-      </ul>\n    </p>\n+   <ul>\n+      <li>&quot;Derive your own fstream-type classes and write your own\n+          &lt;&lt;/&gt;&gt; operators to do binary I/O on whatever data\n+          types you're using.&quot;  This is a Bad Thing, because while\n+          the compiler would probably be just fine with it, other humans\n+          are going to be confused.  The overloaded bitshift operators\n+          have a well-defined meaning (formatting), and this breaks it.\n+      </li>\n+      <li>&quot;Build the file structure in memory, then <code>mmap()</code>\n+          the file and copy the structure.&quot;  Well, this is easy to\n+          make work, and easy to break, and is pretty equivalent to\n+          using <code>::read()</code> and <code>::write()</code> directly, and\n+          makes no use of the iostream library at all...\n+      </li>\n+      <li>&quot;Use streambufs, that's what they're there for.&quot;\n+          While not trivial for the beginner, this is the best of all\n+          solutions.  The streambuf/filebuf layer is the layer that is\n+          responsible for actual I/O.  If you want to use the C++\n+          library for binary I/O, this is where you start.\n+      </li>\n+   </ul>\n    <p>How to go about using streambufs is a bit beyond the scope of this\n       document (at least for now), but while streambufs go a long way,\n       they still leave a couple of things up to you, the programmer.\n@@ -287,7 +293,7 @@ <h2><a name=\"3\">Binary I/O</a></h2>\n       made are good ones.)\n    </p>\n  \n-<hr>\n+<hr />\n <h2><a name=\"5\">What is this &lt;sstream&gt;/stringstreams thing?</a></h2>\n    <p>Stringstreams (defined in the header <code>&lt;sstream&gt;</code>)\n       are in this author's opinion one of the coolest things since\n@@ -311,7 +317,7 @@ <h2><a name=\"5\">What is this &lt;sstream&gt;/stringstreams thing?</a></h2>\n    <p>This only works if you've written your\n       <code>&lt;&lt;</code>/<code>&gt;&gt;</code> functions correctly, though,\n       and correctly means that they take istreams and ostreams as\n-      parameters, not i<B>f</B>streams and o<B>f</B>streams.  If they\n+      parameters, not i<b>f</b>streams and o<b>f</b>streams.  If they\n       take the latter, then your I/O operators will work fine with\n       file streams, but with nothing else -- including stringstreams.\n    </p>\n@@ -324,7 +330,7 @@ <h2><a name=\"5\">What is this &lt;sstream&gt;/stringstreams thing?</a></h2>\n       support them, and 2) if you use them, people will laugh at you.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"6\">Deriving a stream buffer</a></h2>\n    <p>Creating your own stream buffers for I/O can be remarkably easy.\n       If you are interested in doing so, we highly recommend two very\n@@ -339,7 +345,8 @@ <h2><a name=\"6\">Deriving a stream buffer</a></h2>\n       transforms everything sent through it to uppercase.  This version\n       assumes many things about the nature of the character type being\n       used (for more information, read the books or the newsgroups):\n-      <pre>\n+   </p>\n+   <pre>\n     #include &lt;iostream&gt;\n     #include &lt;streambuf&gt;\n     #include &lt;locale&gt;\n@@ -377,11 +384,11 @@ <h2><a name=\"6\">Deriving a stream buffer</a></h2>\n \treturn 0;\n     }\n    </pre>\n-      Try it yourself!  More examples can be found in 3.1.x code, in\n+   <p>Try it yourself!  More examples can be found in 3.1.x code, in\n       <code>include/ext/*_filebuf.h</code>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"7\">More on binary I/O</a></h2>\n    <p>Towards the beginning of February 2001, the subject of\n       &quot;binary&quot; I/O was brought up in a couple of places at the\n@@ -406,22 +413,23 @@ <h2><a name=\"7\">More on binary I/O</a></h2>\n       a portable binary format.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"8\">Pathetic performance?  Ditch C.</a></h2>\n    <p>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n       I'm just saying it to get your attention.\n    </p>\n    <p>Because the C++ library includes the C library, both C-style and\n       C++-style I/O have to work at the same time.  For example:\n-      <pre>\n+   </p>\n+   <pre>\n      #include &lt;iostream&gt;\n      #include &lt;cstdio&gt;\n \n      std::cout &lt;&lt; &quot;Hel&quot;;\n      std::printf (&quot;lo, worl&quot;);\n      std::cout &lt;&lt; &quot;d!\\n&quot;;\n-      </pre>\n-      This must do what you think it does.\n+   </pre>\n+   <p>This must do what you think it does.\n    </p>\n    <p>Alert members of the audience will immediately notice that buffering\n       is going to make a hash of the output unless special steps are taken.\n@@ -440,12 +448,12 @@ <h2><a name=\"8\">Pathetic performance?  Ditch C.</a></h2>\n       when both libraries' facilities are in use.  If your program only uses\n       C++ I/O, then there's no need to sync with the C streams.  The right\n       thing to do in this case is to call\n-      <pre>\n+   </p>\n+   <pre>\n      #include <em>any of the I/O headers such as ios, iostream, etc</em>\n \n      std::ios::sync_with_stdio(false);\n-      </pre>\n-   </p>\n+   </pre>\n    <p>You must do this before performing any I/O via the C++ stream objects.\n       Once you call this, the C++ streams will operate independently of the\n       (unused) C streams.  For GCC 3.x, this means that <code>cout</code> and\n@@ -459,7 +467,7 @@ <h2><a name=\"8\">Pathetic performance?  Ditch C.</a></h2>\n       buffered.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"9\">Threads and I/O</a></h2>\n    <p>I'll assume that you have already read the\n       <a href=\"../17_intro/howto.html#3\">general notes on library threads</a>,\n@@ -548,7 +556,7 @@ <h3>Alternatives</h3>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "efc75bec86f0c2b2c2f5943fc9263e1de1d4479d", "filename": "libstdc++-v3/docs/html/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2FMakefile?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -13,7 +13,7 @@ documentation.html: $(wildcard */howto.html)\n \tsed -n '1,/beginlist/p' $@ > tmp.top\n \tsed -n '/endlist/,$$p' $@ > tmp.bottom\n \techo '  <ul>' > tmp.middle\n-\tfor i in [[:digit:]]*/howto.html; do \\\n+\tfor i in [0-9]*/howto.html; do \\\n \t  title=`grep 'h1 ' $$i |\\\n \t  sed 's=.*\\(Chapter [[:digit:]]*\\):[[:space:]]*\\(.*\\)</a>.*=\\2 (\\1)='` ;\\\n \t  awk -v file=$$i -v \"title=$$title\" -f makedoc.awk $$i >> tmp.middle ;\\"}, {"sha": "296c509758f382cba16a9d9f86dbe3bbd83af03b", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,12 +1,11 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++\">\n-   <meta name=\"DESCRIPTION\" content=\"Configuration options for libstdc++-v3.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++\" />\n+   <meta name=\"DESCRIPTION\" content=\"Configuration options for libstdc++-v3.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 configure options</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n </head>\n <body>\n \n@@ -19,10 +18,10 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n </p>\n \n <p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n-\n+</p>\n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <p>Here are some of the non-obvious options to libstdc++'s configure.\n    Keep in mind that\n    <!-- This SECnn should be the \"Choosing Package Options\" section. -->\n@@ -37,15 +36,16 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n </p>\n \n <dl>\n- <dt><code>--enable-multilib  </code>[default]\n+ <dt><code>--enable-multilib  </code>[default]</dt>\n  <dd><p>This is part of the generic multilib support for building cross\n         compilers.  As such, targets like &quot;powerpc-elf&quot; will have\n         libstdc++ built many different ways:  &quot;-msoft-float&quot;\n         and not, etc.  A different libstdc++ will be built for each of\n         the different multilib versions.  This option is on by default.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-debug  </code>\n+ <dt><code>--enable-debug  </code></dt>\n  <dd><p>The configure script will automatically detect the highest\n         level of optimization that the compiler in use can use.\n         This --enable flag will disable all optimizations and instruct\n@@ -55,13 +55,15 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         configuration difference:\n         <code>make CXXFLAGS='-g -O0' all</code>\n      </p>\n+ </dd>\n \n- <dt><code>--enable-cstdio  </code>\n+ <dt><code>--enable-cstdio  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-cstdio=stdio'</code>\n         (described next).\n      </p>\n+ </dd>\n \n- <dt><code>--enable-cstdio=LIB  </code>\n+ <dt><code>--enable-cstdio=LIB  </code></dt>\n  <dd><p>Select a target-specific I/O package.  As of libstdc++-v3\n         snapshot 3.0.96, the choices are 'libio' to specify the GNU\n         I/O package (from\n@@ -70,32 +72,36 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         abstraction.  The default is 'stdio'.  A longer explanation\n         is <a href=\"explanations.html#cstdio\">here</a>.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-sjlj-exceptions  </code>\n+ <dt><code>--enable-sjlj-exceptions  </code></dt>\n  <dd><p>Forces old, set-jump/long-jump exception handling model.  If\n         at all possible, the new, frame unwinding exception handling routines\n         should be used instead, as they significantly reduce both runtime\n         memory usage and executable size.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-clocale  </code>\n+ <dt><code>--enable-clocale  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-clocale=generic'</code>\n         (described next).\n      </p>\n+ </dd>\n \n- <dt><code>--enable-clocale=MODEL  </code>\n+ <dt><code>--enable-clocale=MODEL  </code></dt>\n  <dd><p>Select a target-specific underlying locale package.  The\n         choices are 'ieee_1003.1-2001' to specify an X/Open, Standard Unix\n         (IEEE Std. 1003.1-2001) model based on langinfo/iconv/catgets,\n         'gnu' to specify a model based on functionality from the GNU C\n-        library (langinfo/iconv/gettext) (from <A\n+        library (langinfo/iconv/gettext) (from <a\n         href=\"http://sources.redhat.com/glibc/\">glibc</a>, the GNU C\n         library), or 'generic' to use a generic &quot;C&quot;\n         abstraction which consists of &quot;C&quot; locale info.  The\n         default is 'generic'.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-c99  </code>\n+ <dt><code>--enable-c99  </code></dt>\n  <dd><p>The &quot;long long&quot; type was introduced in C99, along\n         with many other functions for wide characters, and math\n         classification macros, etc.  If enabled, all C99 functions not\n@@ -108,8 +114,9 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         configure probes find all the necessary functions and bits\n         necessary.\n     </p>\n+ </dd>\n \n- <dt><code>--enable-long-long  </code>\n+ <dt><code>--enable-long-long  </code></dt>\n  <dd><p>The &quot;long long&quot; type was introduced in C99.  It is\n         provided as a GNU extension to C++98 in g++.  This flag builds\n         support for &quot;long long&quot; into the library (specialized\n@@ -121,26 +128,30 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         the flag is -D_ISOC99_SOURCE, which is added automatically via\n         CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n      </p>\n+ </dd>\n \n- <dt><code>--enable-cheaders=OPTION  </code>\n+ <dt><code>--enable-cheaders=OPTION  </code></dt>\n  <dd><p>This allows the user to define what kind of C headers are\n         used.  Options are: c, c_std, and c_shadow. These correspond\n         to the source directory's include/c, include/c_std, and\n         include/c_shadow directories.  The default is c_std.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-threads  </code>\n+ <dt><code>--enable-threads  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-threads=yes'</code>\n         (described next).\n      </p>\n+ </dd>\n \n- <dt><code>--enable-threads=LIB  </code>\n+ <dt><code>--enable-threads=LIB  </code></dt>\n  <dd><p>Select a threading library.  A full description is given in the\n         general <a href=\"http://gcc.gnu.org/install/configure.html\">compiler\n         configuration instructions</a>.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-version-specific-runtime-libs  </code>\n+ <dt><code>--enable-version-specific-runtime-libs  </code></dt>\n  <dd><p>Specify that run-time libraries should be installed in the\n         compiler-specific subdirectory (i.e.,\n         <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n@@ -151,17 +162,18 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         unless you also specify\n        <code>--with-gxx-include-dir=<em>dirname</em></code> during configuration.\n      </p>\n+ </dd>\n \n- <dt><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code>\n+ <dt><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code></dt>\n  <dd><p>Adds support for named libstdc++ include directory.  For instance,\n         the following puts all the libstdc++ headers into a directory\n         called &quot;2.97-20001008&quot; instead of the usual\n         &quot;g++-v3&quot;.\n      </p>\n         <pre>\n-   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre>\n+   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre> </dd>\n \n- <dt><code>--enable-cxx-flags=FLAGS</code>\n+ <dt><code>--enable-cxx-flags=FLAGS</code></dt>\n  <dd><p>With this option, you can pass a string of -f (functionality)\n         flags to the compiler to use when building libstdc++.  FLAGS\n         is a quoted string of options, like\n@@ -188,32 +200,36 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      <p>and opposite forms (-fno-) of the same.  Tell us (the libstdc++\n         mailing list) if you discover more!\n      </p>\n+ </dd>\n \n- <dt><code>--enable-c-mbchar  </code>[default]\n+ <dt><code>--enable-c-mbchar  </code>[default]</dt>\n  <dd><p>Certain template specializations are required for wide\n         character conversion support.  This is tricky and currently\n         changing rapidly, and can cause problems on new platforms.\n         Disabling wide character specializations is useful for initial\n         porting steps, but builds only a subset of what is required by\n         ISO.  By default, this option is on.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-concept-checks  </code>\n+ <dt><code>--enable-concept-checks  </code></dt>\n  <dd><p>This turns on additional compile-time checks for instantiated\n         library templates, in the form of specialized templates,\n         <a href=\"19_diagnostics/howto.html#3\">described here</a>.  They\n         can help users discover when they break the rules of the STL, before\n         their programs run.\n      </p>\n+ </dd>\n \n- <dt><code>--enable-symvers[=style]  </code>\n+ <dt><code>--enable-symvers[=style]  </code></dt>\n  <dd><p>In 3.1, tries to turn on symbol versioning in the shared library (if a\n         shared library has been requested).  The only 'style' currently\n         supported is 'gnu' which requires that a recent version of the GNU\n         linker be in use.  With no style given, the configure script will\n         try to guess if the 'gnu' style can be used, and if so, will turn it\n         on.  Hopefully people will volunteer to do other 'style' options.\n      </p>\n+ </dd>\n </dl>\n <p>Return <a href=\"#top\">to the top of the page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.\n@@ -222,7 +238,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "aba387237472d0d715384307cad12ae9fc4eaf01", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 65, "deletions": 51, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,10 +1,9 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head>\n  <meta name=\"KEYWORDS\" \n-  content=\"libstdc++, homepage, home, C++, library, c++, std, g++, ABI, STL\">\n+  content=\"libstdc++, homepage, home, C++, library, c++, std, g++, ABI, STL\" />\n  <title>GNU C++ Standard Library</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n </head>\n <body>\n \n@@ -15,40 +14,40 @@\n    automatically-generated source documentation, available separately.\n </p>\n \n-\n <hr />\n-<br>\n+<br />\n <h2><a name=\"1\">Introduction</a></h2>\n    <p>This is a short list of text files pertaining to this implementation of\n       ISO 14882.  A brief description may follow the name of the file.\n+   </p>\n       <ul>\n          <li><a href=\"17_intro/COPYING\">License</a>\n-         - GPL v2 license terms\n-         <li><a href=\"abi.txt\">ABI Policy and Guidelines</a> \n-         <li><a href=\"17_intro/BUGS\">BUGS</a>\n+         - GPL v2 license terms</li>\n+         <li><a href=\"abi.txt\">ABI Policy and Guidelines</a></li>\n+         <li><a href=\"17_intro/BUGS\">BUGS</a></li>\n          <li><a href=\"17_intro/PROBLEMS\">PROBLEMS</a>\n-         - target-specific known issues\n+         - target-specific known issues</li>\n          <!-- Linking to \"../README\" doesn't work; we are at the top level\n               of the web pages.  Punt.  -->\n-         <li>README - directory structure\n+         <li>README - directory structure</li>\n          <li><a href=\"17_intro/RELEASE-NOTES\">RELEASE-NOTES</a>\n-         - latest version info, recent changes and news\n+         - latest version info, recent changes and news</li>\n          <li><a href=\"17_intro/TODO\">TODO</a>\n-         - tasks yet undone\n+         - tasks yet undone</li>\n       </ul>\n \n-\n <hr />\n-<br>\n+<br />\n <h2><a name=\"2\">Configuring, Building, Installing</a></h2>\n-  <ul>\n-   <li><a href=\"configopts.html\">Configure options</a>\n-   <li><a href=\"install.html\">Getting started:  configure, build, install</a>\n-  </ul>\n+<ul>\n+   <li><a href=\"configopts.html\">Configure options</a></li>\n+   <li><a href=\"install.html\">Getting started: configure, build, install</a>\n+   </li>\n+</ul>\n \n \n <hr />\n-<br>\n+<br />\n <h2><a name=\"4\">Source-Level Documentation</a></h2>\n <p>The library sources have been specially formatted so that with the\n    proper invocation of another tool (Doxygen), a set of HTML pages\n@@ -58,13 +57,16 @@ <h2><a name=\"4\">Source-Level Documentation</a></h2>\n    the library classes, finding out what is in a particular include\n    file, looking at inheritance diagrams, etc.\n </p>\n-<p>The Source-Level documentation can be viewed online:\n-   <ul>\n+<p>The Source-Level documentation can be viewed online:</p>\n+<ul>\n    <li><a href=\"libstdc++-html-USERS-3.1/index.html\">for the 3.1 release</a>\n+   </li>\n    <li><a href=\"libstdc++-html-USERS-3.2/index.html\">for the 3.2 release</a>\n+   </li>\n    <li><a href=\"latest-doxygen/index.html\">&quot;the latest collection&quot;</a>\n        (for the snapshot or later; see the date on the first page)\n-   </ul>\n+   </li>\n+</ul>\n <p>This generated HTML collection, as above, is also available for download in\n    the libstdc++ snapshots directory at\n    <code>&lt;URL:ftp://gcc.gnu.org/pub/gcc/libstdc++/doxygen/&gt;</code>.\n@@ -81,7 +83,7 @@ <h2><a name=\"4\">Source-Level Documentation</a></h2>\n \n \n <hr />\n-<br>\n+<br />\n <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n <p>Information, extensions, notes and advice on specific implementation \n    capabilites and/or liabilities broken down into chapter names based on the \n@@ -95,7 +97,7 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n -->\n <!-- beginlist -->\n   <ul>\n-   <li>Library Introduction (Chapter 17)</li>\n+   <li>Library Introduction (Chapter 17)\n    <ul>\n      <li><a href=\"17_intro/howto.html#2\">The Standard C++ header files</a></li>\n      <li><a href=\"17_intro/howto.html#3\">The Standard C++ library and multithreading</a></li>\n@@ -104,53 +106,59 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"17_intro/howto.html#5\">Behavior specific to libstdc++-v3</a></li>\n      <li><a href=\"17_intro/howto.html#6\">Preprocessor macros controlling the library</a></li>\n    </ul>\n+   </li>\n \n-   <li>Library Support (Chapter 18)</li>\n+   <li>Library Support (Chapter 18)\n    <ul>\n      <li><a href=\"18_support/howto.html#1\">Types</a></li>\n      <li><a href=\"18_support/howto.html#2\">Implementation properties</a></li>\n      <li><a href=\"18_support/howto.html#3\">Start and Termination</a></li>\n      <li><a href=\"18_support/howto.html#4\">Dynamic memory management</a></li>\n      <li><a href=\"18_support/howto.html#5\">RTTI, the ABI, and demangling</a></li>\n    </ul>\n+   </li>\n \n-   <li>Diagnostics (Chapter 19)</li>\n+   <li>Diagnostics (Chapter 19)\n    <ul>\n      <li><a href=\"19_diagnostics/howto.html#1\">Adding data to exceptions</a></li>\n      <li><a href=\"19_diagnostics/howto.html#2\">Exception class hierarchy diagram</a></li>\n      <li><a href=\"19_diagnostics/howto.html#3\">Concept checkers -- <strong>new and improved!</strong></a></li>\n      <li><a href=\"19_diagnostics/howto.html#4\">Verbose <code>terminate</code></a></li>\n    </ul>\n+   </li>\n \n-   <li>General Utilities (Chapter 20)</li>\n+   <li>General Utilities (Chapter 20)\n    <ul>\n      <li><a href=\"20_util/howto.html#1\"><code>auto_ptr</code> is not omnipotent</a></li>\n      <li><a href=\"20_util/howto.html#2\"><code>auto_ptr</code> inside container classes</a></li>\n      <li><a href=\"20_util/howto.html#3\">Functors</a></li>\n      <li><a href=\"20_util/howto.html#4\">Pairs</a></li>\n    </ul>\n+   </li>\n \n-   <li>Strings (Chapter 21)</li>\n+   <li>Strings (Chapter 21)\n    <ul>\n      <li><a href=\"21_strings/howto.html#1\">MFC's CString</a></li>\n      <li><a href=\"21_strings/howto.html#2\">A case-insensitive string class</a></li>\n      <li><a href=\"21_strings/howto.html#3\">Breaking a C++ string into tokens</a></li>\n      <li><a href=\"21_strings/howto.html#4\">Simple transformations</a></li>\n      <li><a href=\"21_strings/howto.html#5\">Making strings of arbitrary character types</a></li>\n    </ul>\n+   </li>\n \n-   <li>Localization (Chapter 22)</li>\n+   <li>Localization (Chapter 22)\n    <ul>\n      <li><a href=\"22_locale/howto.html#1\">class locale</a></li>\n      <li><a href=\"22_locale/howto.html#2\">class codecvt</a></li>\n      <li><a href=\"22_locale/howto.html#3\">class ctype</a></li>\n      <li><a href=\"22_locale/howto.html#4\">class messages</a></li>\n      <li><a href=\"22_locale/howto.html#5\">Bjarne Stroustrup on Locales</a></li>\n-     <li><a href=\"22_locale/howto.html#6\">Nathan Myers on Locales   </a></li>\n+     <li><a href=\"22_locale/howto.html#6\">Nathan Myers on Locales</a></li>\n      <li><a href=\"22_locale/howto.html#7\">Correct Transformations</a></li>\n    </ul>\n+   </li>\n \n-   <li>Containers (Chapter 23)</li>\n+   <li>Containers (Chapter 23)\n    <ul>\n      <li><a href=\"23_containers/howto.html#1\">Making code unaware of the container/array difference</a></li>\n      <li><a href=\"23_containers/howto.html#2\">Variable-sized bitmasks</a></li>\n@@ -160,28 +168,32 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"23_containers/howto.html#6\"><code>std::list::size()</code> is O(n)!</a></li>\n      <li><a href=\"23_containers/howto.html#7\">Space overhead management for vectors</a></li>\n    </ul>\n+   </li>\n \n-   <li>Iterators (Chapter 24)</li>\n+   <li>Iterators (Chapter 24)\n    <ul>\n      <li><a href=\"24_iterators/howto.html#1\">They ain't pointers!</a></li>\n      <li><a href=\"24_iterators/howto.html#2\">It ends <em>where?</em></a></li>\n    </ul>\n+   </li>\n \n-   <li>Algorithms (Chapter 25)</li>\n+   <li>Algorithms (Chapter 25)\n    <ul>\n      <li><a href=\"25_algorithms/howto.html#1\">Prerequisites</a></li>\n      <li><a href=\"25_algorithms/howto.html#2\">Special <code>swap</code>s</a></li>\n    </ul>\n+   </li>\n \n-   <li>Numerics (Chapter 26)</li>\n+   <li>Numerics (Chapter 26)\n    <ul>\n      <li><a href=\"26_numerics/howto.html#1\">Complex Number Processing</a></li>\n      <li><a href=\"26_numerics/howto.html#2\">Array Processing</a></li>\n      <li><a href=\"26_numerics/howto.html#3\">Numerical Functions</a></li>\n      <li><a href=\"26_numerics/howto.html#4\">C99</a></li>\n    </ul>\n+   </li>\n \n-   <li>Input/Output (Chapter 27)</li>\n+   <li>Input/Output (Chapter 27)\n    <ul>\n      <li><a href=\"27_io/howto.html#1\">Copying a file</a></li>\n      <li><a href=\"27_io/howto.html#2\">The buffering is screwing up my program!</a></li>\n@@ -192,8 +204,9 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"27_io/howto.html#8\">Pathetic performance?  Ditch C.</a></li>\n      <li><a href=\"27_io/howto.html#9\">Threads and I/O</a></li>\n    </ul>\n+   </li>\n \n-   <li>Extensions to the Standard Library</li>\n+   <li>Extensions to the Standard Library\n    <ul>\n      <li><a href=\"ext/howto.html#1\">Ropes and trees and hashes, oh my!</a></li>\n      <li><a href=\"ext/howto.html#2\">Added members and types</a></li>\n@@ -202,27 +215,28 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"ext/howto.html#4\">Compile-time checks</a></li>\n      <li><a href=\"ext/howto.html#5\">LWG Issues</a></li>\n    </ul>\n+   </li>\n \n   </ul>\n <!-- endlist -->\n \n <hr />\n-<br>\n+<br />\n <h2><a name=\"5\">Contributor-Specific Information</a></h2>\n-      <ul>\n-         <li><a href=\"17_intro/contribute.html\">Contributor checklist</a>\n-         <li><a href=\"17_intro/libstdc++-assign.txt\">Copyright assignment form for libstdc++-v3</a>\n-         <li><a href=\"17_intro/BADNAMES\">BADNAMES</a>\n-         - names to avoid because of potential collisions\n-         <li><a href=\"17_intro/C++STYLE\">C++STYLE</a>\n-         - coding style by example\n-         <li><a href=\"17_intro/CHECKLIST\">CHECKLIST</a>\n-         - a list of required features and their status.\n-         <li><a href=\"17_intro/DESIGN\">DESIGN</a>\n-         - overview of the implementation plan\n-         <li><a href=\"17_intro/HEADER_POLICY\">HEADER_POLICY</a>\n-         - header naming and sub-include structure\n-      </ul>\n+<ul>\n+   <li><a href=\"17_intro/contribute.html\">Contributor checklist</a></li>\n+   <li><a href=\"17_intro/libstdc++-assign.txt\">Copyright assignment form for libstdc++-v3</a></li>\n+   <li><a href=\"17_intro/BADNAMES\">BADNAMES</a>\n+       - names to avoid because of potential collisions</li>\n+   <li><a href=\"17_intro/C++STYLE\">C++STYLE</a>\n+       - coding style by example</li>\n+   <li><a href=\"17_intro/CHECKLIST\">CHECKLIST</a>\n+       - a list of required features and their status.</li>\n+   <li><a href=\"17_intro/DESIGN\">DESIGN</a>\n+       - overview of the implementation plan</li>\n+   <li><a href=\"17_intro/HEADER_POLICY\">HEADER_POLICY</a>\n+       - header naming and sub-include structure</li>\n+</ul>\n \n <!-- ####################################################### -->\n "}, {"sha": "7d8196ff84a00178c0239209111d254f103c7010", "filename": "libstdc++-v3/docs/html/explanations.html", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,12 +1,11 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++\">\n-   <meta name=\"DESCRIPTION\" content=\"Explanatory notes about libstdc++-v3.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++\" />\n+   <meta name=\"DESCRIPTION\" content=\"Explanatory notes about libstdc++-v3.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>Explanatory notes about libstdc++-v3 design</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n </head>\n <body>\n \n@@ -19,11 +18,12 @@ <h1 class=\"centered\"><a name=\"top\">Explanatory notes about libstdc++-v3\n </p>\n \n <p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n+</p>\n \n \n <!-- ####################################################### -->\n-<hr>\n-<a name=\"cstdio\"><h3>&quot;I/O packages&quot;, <code>--enable-cstdio</code></h3></a>\n+<hr />\n+<h3><a name=\"cstdio\">&quot;I/O packages&quot;, <code>--enable-cstdio</code></a></h3>\n <p>In addition to all the nifty things which C++ can do for I/O, its library\n    also includes all of the I/O capabilites of C.  Making them work together\n    can be a challenge, not only\n@@ -61,8 +61,8 @@ <h1 class=\"centered\"><a name=\"top\">Explanatory notes about libstdc++-v3\n </p>\n \n \n-<hr>\n-<a name=\"alloc\"><h3>Internal Allocators</h3></a>\n+<hr />\n+<h3><a name=\"alloc\">Internal Allocators</a></h3>\n <p>\n </p>\n <p>Return <a href=\"#top\">to the top of the page</a> or\n@@ -72,7 +72,7 @@ <h1 class=\"centered\"><a name=\"top\">Explanatory notes about libstdc++-v3\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "b4f6dae6f146e0063d292ef14a4947ae781b1992", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 139, "deletions": 70, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,13 +1,12 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"Notes for the libstdc++ extensions.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"Notes for the libstdc++ extensions.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 HOWTO:  Extensions</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n </head>\n <body>\n \n@@ -18,45 +17,46 @@ <h1 class=\"centered\"><a name=\"top\">Extensions</a></h1>\n    and some just seemed to appear on the doorstep.\n </p>\n <p><strong>Before you leap in and use these</strong>, be aware of two things:\n-   <ol>\n-    <li>Non-Standard means exactly that.  The behavior, and the very\n-        existence, of these extensions may change with little or no\n-        warning.  (Ideally, the really good ones will appear in the next\n-        revision of C++.)  Also, other platforms, other compilers, other\n-        versions of g++ or libstdc++-v3 may not recognize these names, or\n-        treat them differently, or...\n-    <li>You should know how to <a href=\"../faq/index.html#5_4\">access\n-        these headers properly</a>.\n-   </ol>\n </p>\n+<ol>\n+   <li>Non-Standard means exactly that.  The behavior, and the very\n+       existence, of these extensions may change with little or no\n+       warning.  (Ideally, the really good ones will appear in the next\n+       revision of C++.)  Also, other platforms, other compilers, other\n+       versions of g++ or libstdc++-v3 may not recognize these names, or\n+       treat them differently, or... </li>\n+   <li>You should know how to <a href=\"../faq/index.html#5_4\">access\n+       these headers properly</a>. </li>\n+</ol>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#1\">Ropes and trees and hashes, oh my!</a>\n-   <li><a href=\"#2\">Added members and types</a>\n-   <li><a href=\"#3\">Allocators (versions 3.0, 3.1, 3.2)</a>\n-   <li><a href=\"#6\">Allocators (version 3.3)</a>\n-   <li><a href=\"#4\">Compile-time checks</a>\n-   <li><a href=\"#5\">LWG Issues</a>\n+   <li><a href=\"#1\">Ropes and trees and hashes, oh my!</a></li>\n+   <li><a href=\"#2\">Added members and types</a></li>\n+   <li><a href=\"#3\">Allocators (versions 3.0, 3.1, 3.2)</a></li>\n+   <li><a href=\"#6\">Allocators (version 3.3)</a></li>\n+   <li><a href=\"#4\">Compile-time checks</a></li>\n+   <li><a href=\"#5\">LWG Issues</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n <h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n-   <p>The SGI headers\n-     <pre>\n+   <p>The SGI headers</p>\n+   <pre>\n      &lt;bvector&gt;\n      &lt;hash_map&gt;\n      &lt;hash_set&gt;\n      &lt;rope&gt;\n      &lt;slist&gt;\n      &lt;tree&gt;\n-     </pre> are all here; <code>&lt;bvector&gt;</code> exposes the old bit_vector\n+   </pre>\n+   <p>are all here; <code>&lt;bvector&gt;</code> exposes the old bit_vector\n       class that was used before specialization of vector&lt;bool&gt; was\n       available (it's actually a typedef for the specialization now).\n       <code>&lt;hash_map&gt;</code> and <code>&lt;hash_set&gt;</code>\n@@ -88,87 +88,94 @@ <h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n    </p>\n    <p>Why would you want to use a hashing class instead of the\n       &quot;normal&quot; implementations?  Matt Austern writes:\n-      <blockquote><em>[W]ith a well chosen hash function, hash tables\n-      generally provide much better average-case performance than binary\n-      search trees, and much worse worst-case performance.  So if your\n-      implementation has hash_map, if you don't mind using nonstandard\n-      components, and if you aren't scared about the possibility of\n-      pathological cases, you'll probably get better performance from\n-      hash_map.</em></blockquote>\n    </p>\n+   <blockquote><em>[W]ith a well chosen hash function, hash tables\n+   generally provide much better average-case performance than binary\n+   search trees, and much worse worst-case performance.  So if your\n+   implementation has hash_map, if you don't mind using nonstandard\n+   components, and if you aren't scared about the possibility of\n+   pathological cases, you'll probably get better performance from\n+   hash_map.</em></blockquote>\n    <p>(Side note:  for those of you wondering, <strong>&quot;Why wasn't a hash\n       table included in the Standard in the first #!$@ place?&quot;</strong>\n       I'll give a quick answer:  it was proposed, but too late and in too\n       unorganized a fashion.  Some sort of hashing will undoubtedly be\n-      included in a future Standard.\n+      included in a future Standard.)\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"2\">Added members and types</a></h2>\n    <p>Some of the classes in the Standard Library have additional\n       publicly-available members, and some classes are themselves not in\n       the standard.  Of those, some are intended purely for the implementors,\n       for example, additional typedefs.  Those won't be described here\n       (or anywhere else).\n    </p>\n-   <p>\n-    <ul>\n+   <ul>\n      <li>The extensions added by SGI are so numerous that they have\n          <a href=\"sgiexts.html\">their own page</a>.  Since the SGI STL is no\n          longer actively maintained, we will try and keep this code working\n          ourselves.</li>\n-     <li>3.0.x <code>filebuf</code>s have another ctor with this signature:<br>\n-<code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n-         <br>This comes in very handy in a number of places, such as\n+     <li>3.0.x <code>filebuf</code>s have another ctor with this signature:\n+         <br />\n+        <code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n+         <br />This comes in very handy in a number of places, such as\n          attaching Unix sockets, pipes, and anything else which uses file\n          descriptors, into the IOStream buffering classes.  The three\n          arguments are as follows:\n          <ul>\n           <li><code>__c_file_type*      F   </code>\n               // the __c_file_type typedef usually boils down to stdio's FILE\n+          </li>\n           <li><code>ios_base::openmode  M   </code>\n               // same as all the other uses of openmode\n+          </li>\n           <li><code>int_type            B   </code>\n               // buffer size, defaults to BUFSIZ if not specified\n+          </li>\n          </ul>\n          For those wanting to use file descriptors instead of FILE*'s, I\n          invite you to contemplate the mysteries of C's <code>fdopen()</code>.\n-         </li>\n+     </li>\n      <li>In library snapshot 3.0.95 and later, <code>filebuf</code>s bring\n          back an old extension:  the <code>fd()</code> member function.  The\n          integer returned from this function can be used for whatever file\n          descriptors can be used for on your platform.  Naturally, the\n          library cannot track what you do on your own with a file descriptor,\n          so if you perform any I/O directly, don't expect the library to be\n          aware of it.\n+     </li>\n      <li>Beginning with 3.1, the extra <code>filebuf</code> constructor and\n          the <code>fd()</code> function were removed from the standard\n          filebuf.  Instead, <code>&lt;ext/stdio_filebuf.h&gt;</code> contains\n          a derived class called <code>__gnu_cxx::stdio_filebuf</code>.\n-    </ul>\n-   </p>\n+     </li>\n+   </ul>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"3\">Allocators (versions 3.0, 3.1, 3.2)</a></h2>\n    <p>Thread-safety, space efficiency, high speed, portability... this is a\n       mess.  Where to begin?\n    </p>\n    <h3>The Rules</h3>\n    <p>The C++ standard only gives a few directives in this area:\n-     <ul>\n+   </p>\n+   <ul>\n      <li>When you add elements to a container, and the container must allocate\n          more memory to hold them, the container makes the request via its\n          <code>Allocator</code> template parameter.  This includes adding\n          char's to the string class, which acts as a regular STL container\n          in this respect.\n+     </li>\n      <li>The default <code>Allocator</code> of every container-of-T is\n          <code>std::allocator&lt;T&gt;</code>.\n+     </li>\n      <li>The interface of the <code>allocator&lt;T&gt;</code> class is\n          extremely simple.  It has about 20 public declarations (nested\n          typedefs, member functions, etc), but the two which concern us most\n@@ -180,13 +187,14 @@ <h3>The Rules</h3>\n          The <code>&quot;n&quot;</code> arguments in both those functions is a\n          <em>count</em> of the number of T's to allocate space for,\n          <em>not their total size</em>.\n+     </li>\n      <li>&quot;The storage is obtained by calling\n          <code>::operator new(size_t)</code>, but it is unspecified when or\n          how often this function is called.  The use of <code>hint</code>\n          is unspecified, but intended as an aid to locality if an\n          implementation so desires.&quot; [20.4.1.1]/6\n-     </ul>\n-   </p>\n+      </li>\n+   </ul>\n    <h3>Problems and Possibilities</h3>\n    <p>The easiest way of fulfilling the requirements is to call operator new\n       each time a container needs memory, and to call operator delete each\n@@ -235,33 +243,39 @@ <h3>Available allocators in namespace std</h3>\n       information for maintainers and contributors in addition to users.\n    </p>\n    <p>These classes are always available:\n-     <ul>\n+   </p>\n+   <ul>\n      <li><code>__new_alloc</code> simply wraps <code>::operator new</code>\n          and <code>::operator delete</code>.\n+     </li>\n      <li><code>__malloc_alloc_template&lt;int inst&gt;</code> simply wraps\n          <code>malloc</code> and <code>free</code>.  There is also a hook\n          for an out-of-memory handler (for new/delete this is taken care of\n          elsewhere).  The <code>inst</code> parameter is described below.\n          This class was called <code>malloc_alloc</code> in earlier versions.\n+     </li>\n      <li><code>allocator&lt;T&gt;</code> has already been described; it is\n          The Standard Allocator for instances of T.  It uses the internal\n          <code>__alloc</code> typedef (see below) to satisy its requests.\n+     </li>\n      <li><code>__simple_alloc&lt;T,A&gt;</code> is a wrapper around another\n          allocator, A, which itself is an allocator for instances of T.\n          This is primarily used in an internal &quot;allocator traits&quot;\n          class which helps encapsulate the different styles of allocators.\n+     </li>\n      <li><code>__debug_alloc&lt;A&gt;</code> is also a wrapper around an\n          arbitrary allocator A.  It passes on slightly increased size\n          requests to A, and uses the extra memory to store size information.\n          When a pointer is passed to <code>deallocate()</code>, the stored\n          size is checked, and assert() is used to guarantee they match.\n+     </li>\n      <li><code>__allocator&lt;T,A&gt;</code> is an adaptor.  Many of these\n          allocator classes have a consistent yet non-standard interface.\n          Such classes can be changed to a conforming interface with this\n          wrapper:  <code>__allocator&lt;T, __alloc&gt;</code> is thus the\n          same as <code>allocator&lt;T&gt;</code>.\n-     </ul>\n-   </p>\n+     </li>\n+   </ul>\n    <p>An internal typedef, <code> __mem_interface </code>, is defined to be\n       <code>__new_alloc</code> by default.\n    </p>\n@@ -297,15 +311,15 @@ <h3>A cannon to swat a fly:<code>  __USE_MALLOC</code></h3>\n    <p>If you've already read <a href=\"../23_containers/howto.html#3\">this\n       advice</a> and decided to define this macro, then the situation changes\n       thusly:\n-     <ol>\n-     <li><code>__mem_interface</code>, and\n-     <li><code>__alloc</code>, and\n+   </p>\n+   <ol>\n+     <li><code>__mem_interface</code>, and</li>\n+     <li><code>__alloc</code>, and</li>\n      <li><code>__single_client_alloc</code> are all typedef'd to\n-         <code>__malloc_alloc_template</code>.\n+         <code>__malloc_alloc_template</code>.</li>\n      <li><code>__default_alloc_template</code> is no longer available.\n-         At all.  Anywhere.\n-     </ol>\n-   </p>\n+         At all.  Anywhere.</li>\n+   </ol>\n    <h3>Writing your own allocators</h3>\n    <p>Depending on your application (a specific program, a generic library,\n       etc), allocator classes tend to be one of two styles:  &quot;SGI&quot;\n@@ -326,24 +340,25 @@ <h3>Using non-default allocators</h3>\n       (but nonportable)\n       method of specifying that only malloc/free should be used instead of\n       the default node allocator is:\n-      <pre>\n+   </p>\n+   <pre>\n     std::list &lt;my_type, std::__malloc_alloc_template&lt;0&gt; &gt;  my_malloc_based_list;</pre>\n       Likewise, a debugging form of whichever allocator is currently in use:\n       <pre>\n     std::deque &lt;my_type, std::__debug_alloc&lt;std::__alloc&gt; &gt;  debug_deque;</pre>\n-   </p>\n    <h3><code>inst</code></h3>\n    <p>The <code>__malloc_alloc_template</code> and\n       <code>__default_alloc_template</code> classes take an integer parameter,\n       called inst here.  This number is completely unused.\n    </p>\n    <p>The point of the number is to allow multiple instantiations of the\n       classes without changing the semantics at all.  All three of\n-      <pre>\n+   </p>\n+   <pre>\n     typedef  __default_alloc_template&lt;true,0&gt;    normal;\n     typedef  __default_alloc_template&lt;true,1&gt;    private;\n     typedef  __default_alloc_template&lt;true,42&gt;   also_private;</pre>\n-      behave exactly the same way.  However, the memory pool for each type\n+   <p>behave exactly the same way.  However, the memory pool for each type\n       (and remember that different instantiations result in different types)\n       remains separate.\n    </p>\n@@ -365,15 +380,15 @@ <h3>3.0.x</h3>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"6\">Allocators (version 3.3)</a></h2>\n    <p>Changes are coming...\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"4\">Compile-time checks</a></h2>\n    <p>Currently libstdc++-v3 uses the concept checkers from the Boost\n       library to perform <a href=\"../19_diagnostics/howto.html#3\">optional\n@@ -384,7 +399,7 @@ <h2><a name=\"4\">Compile-time checks</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr>\n+<hr />\n <h2><a name=\"5\">LWG Issues</a></h2>\n    <p>Everybody's got issues.  Even the C++ Standard Library.\n    </p>\n@@ -418,142 +433,196 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n       examples of style.  Note that we usually do not make changes to the code\n       until an issue has reached <a href=\"lwg-active.html#DR\">DR</a> status.\n    </p>\n-   <p><dl>\n+   <dl>\n     <dt><a href=\"lwg-defects.html#5\">5</a>:\n         <em>string::compare specification questionable</em>\n+    </dt>\n     <dd>This should be two overloaded functions rather than a single function.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#17\">17</a>:\n         <em>Bad bool parsing</em>\n+    </dt>\n     <dd>Apparently extracting Boolean values was messed up...\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#22\">22</a>:\n         <em>Member open vs flags</em>\n+    </dt>\n     <dd>Re-opening a file stream does <em>not</em> clear the state flags.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#25\">25</a>:\n         <em>String operator&lt;&lt; uses width() value wrong</em>\n+    </dt>\n     <dd>Padding issues.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#48\">48</a>:\n         <em>Use of non-existent exception constructor</em>\n+    </dt>\n     <dd>An instance of <code>ios_base::failure</code> is constructed instead.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#49\">49</a>:\n         <em>Underspecification of ios_base::sync_with_stdio</em>\n+    </dt>\n     <dd>The return type is the <em>previous</em> state of synchronization.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#50\">50</a>:\n         <em>Copy constructor and assignment operator of ios_base</em>\n+    </dt>\n     <dd>These members functions are declared <code>private</code> and are\n         thus inaccessible.  Specifying the correct semantics of\n         &quot;copying stream state&quot; was deemed too complicated.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#68\">68</a>:\n         <em>Extractors for char* should store null at end</em>\n+    </dt>\n     <dd>And they do now.  An editing glitch in the last item in the list of\n         [27.6.1.2.3]/7.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#74\">74</a>:\n         <em>Garbled text for codecvt::do_max_length</em>\n+    </dt>\n     <dd>The text of the standard was gibberish.  Typos gone rampant.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#83\">83</a>:\n         <em>string::npos vs. string::max_size()</em>\n+    </dt>\n     <dd>Safety checks on the size of the string should test against\n         <code>max_size()</code> rather than <code>npos</code>.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#109\">109</a>:\n         <em>Missing binders for non-const sequence elements</em>\n+    </dt>\n     <dd>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n         <code>operator()</code> taking a non-const parameter.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#110\">110</a>:\n         <em>istreambuf_iterator::equal not const</em>\n+    </dt>\n     <dd>This was not a const member function.  Note that the DR says to\n         replace the function with a const one; we have instead provided an\n         overloaded version with identical contents.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#117\">117</a>:\n         <em>basic_ostream uses nonexistent num_put member functions</em>\n+    </dt>\n     <dd><code>num_put::put()</code> was overloaded on the wrong types.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#118\">118</a>:\n         <em>basic_istream uses nonexistent num_get member functions</em>\n+    </dt>\n     <dd>Same as 117, but for <code>num_get::get()</code>.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#129\">129</a>:\n         <em>Need error indication from seekp() and seekg()</em>\n+    </dt>\n     <dd>These functions set <code>failbit</code> on error now.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#136\">136</a>:\n         <em>seekp, seekg setting wrong streams?</em>\n+    </dt>\n     <dd><code>seekp</code> should only set the output stream, and\n         <code>seekg</code> should only set the input stream.\n+    </dd>\n \n <!--<dt><a href=\"lwg-defects.html#159\">159</a>:\n         <em>Strange use of underflow()</em>\n+    </dt>\n     <dd>In fstream.tcc, the basic_filebuf&lt;&gt;::showmanyc() function\n-        should probably not be calling <code>underflow()</code>.-->\n+        should probably not be calling <code>underflow()</code>.\n+    </dd> -->\n \n     <dt><a href=\"lwg-active.html#167\">167</a>:\n         <em>Improper use of traits_type::length()</em>\n+    </dt>\n     <dd><code>op&lt;&lt;</code> with a <code>const char*</code> was\n         calculating an incorrect number of characters to write.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#181\">181</a>:\n         <em>make_pair() unintended behavior</em>\n+    </dt>\n     <dd>This function used to take its arguments as reference-to-const, now\n         it copies them (pass by value).\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#195\">195</a>:\n         <em>Should basic_istream::sentry's constructor ever set eofbit?</em>\n+    </dt>\n     <dd>Yes, it can, specifically if EOF is reached while skipping whitespace.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#211\">211</a>:\n         <em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em>\n+    </dt>\n     <dd>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n         sets <code>failbit</code> (which can cause an exception, etc, etc).\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#214\">214</a>:\n         <em>set::find() missing const overload</em>\n+    </dt>\n     <dd>Both <code>set</code> and <code>multiset</code> were missing\n         overloaded find, lower_bound, upper_bound, and equal_range functions\n         for const instances.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#251\">251</a>:\n         <em>basic_stringbuf missing allocator_type</em>\n+    </dt>\n     <dd>This nested typdef was originally not specified.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#265\">265</a>:\n         <em>std::pair::pair() effects overly restrictive</em>\n+    </dt>\n     <dd>The default ctor would build its members from copies of temporaries;\n         now it simply uses their respective default ctors.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#266\">266</a>:\n         <em>bad_exception::~bad_exception() missing Effects clause</em>\n+    </dt>\n     <dd>The <code>bad_</code>* classes no longer have destructors (they\n         are trivial), since no description of them was ever given.\n+    </dd>\n \n     <dt><a href=\"lwg-defects.html#275\">275</a>:\n         <em>Wrong type in num_get::get() overloads</em>\n+    </dt>\n     <dd>Similar to 118.\n+    </dd>\n \n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>\n+    </dt>\n     <dd>\n+    </dd>\n \n -->\n-   </dl></p>\n+   </dl>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "eed0a16d6947195a895dee6db07b769b37126a98", "filename": "libstdc++-v3/docs/html/ext/sgiexts.html", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,12 +1,11 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++, STL, SGI\">\n-   <meta name=\"DESCRIPTION\" content=\"SGI extensions preserved in libstdc++-v3.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++, STL, SGI\" />\n+   <meta name=\"DESCRIPTION\" content=\"SGI extensions preserved in libstdc++-v3.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>SGI extensions to the library in libstdc++-v3</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n </head>\n <body>\n \n@@ -25,7 +24,7 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n    for a description).  Not every chapter may have extensions, and the\n    extensions may come and go.  Also, this page is incomplete because the\n    author is pressed for time.  Check back often; the latest change was on\n-   $Date: 2001/11/23 16:29:01 $ (UTC).\n+   $Date: 2001/11/28 00:02:04 $ (UTC).\n </p>\n \n <p>Descriptions range from the scanty to the verbose.  You should also check\n@@ -36,30 +35,33 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n </p>\n \n <p>Back to the <a href=\"howto.html\">libstdc++-v3 extensions</a>.\n+</p>\n \n \n <!-- ####################################################### -->\n-<hr>\n-<a name=\"ch20\"><h3>Chapter 20</h3></a>\n+<hr />\n+<h3><a name=\"ch20\">Chapter 20</a></h3>\n <p>The &lt;functional&gt; header contains many additional functors and\n    helper functions, extending section 20.3.  They are implemented in the\n    file stl_function.h:\n- <ul>\n-  <li><code>identity_element</code> for addition and multiplication. *\n-  <li>The functor <code>identity</code>, whose op() returns the argument\n-      unchanged. *\n+</p>\n+<ul>\n+  <li><code>identity_element</code> for addition and multiplication. * </li>\n+  <li>The functor <code>identity</code>, whose <code>operator()</code>\n+      returns the argument unchanged. * </li>\n   <li>Composition functors <code>unary_function</code> and\n       <code>binary_function</code>, and their helpers <code>compose1</code>\n-      and <code>compose2</code>. *\n-  <li><code>select1st</code> and <code>select2nd</code>, to strip pairs. *\n-  <li><code>project1st</code> and <code>project2nd</code>. *\n+      and <code>compose2</code>. * </li>\n+  <li><code>select1st</code> and <code>select2nd</code>, to strip pairs. * </li>\n+  <li><code>project1st</code> and <code>project2nd</code>. * </li>\n   <li>A set of functors/functions which always return the same result.  They\n-      are <code>constant_void_fun, constant_binary_fun, constant_unary_fun,\n-      constant0, constant1, and constant2. *\n-  <li>The class <code>subtractive_rng</code>. *\n-  <li>mem_fun adaptor helpers mem_fun1 and mem_fun1_ref are provided for\n-      backwards compatibility.\n-</ul></p>\n+      are <code>constant_void_fun</code>, <code>constant_binary_fun</code>,\n+      <code>constant_unary_fun</code>, <code>constant0</code>,\n+      <code>constant1</code>, and <code>constant2</code>. * </li>\n+  <li>The class <code>subtractive_rng</code>. * </li>\n+  <li>mem_fun adaptor helpers <code>mem_fun1</code> and\n+      <code>mem_fun1_ref</code> are provided for backwards compatibility. </li>\n+</ul>\n <p>20.4.1 can use several different allocators; they are described on the\n    main extensions page.\n </p>\n@@ -68,12 +70,12 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n    is a pointer, which is ignored, but can be used to specify the template\n    type (instead of using explicit function template arguments like the\n    standard version does).  That is, in addition to\n+</p>\n    <pre>\n    get_temporary_buffer&lt;int&gt;(5);</pre>\n    you can also use\n    <pre>\n    get_temporary_buffer(5, (int*)0);</pre>\n-</p>\n <p>A class <code>temporary_buffer</code> is given in stl_tempbuf.h. *\n </p>\n <p>The specialized algorithms of section 20.4.4 are extended with\n@@ -84,8 +86,8 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n </p>\n \n \n-<hr>\n-<a name=\"ch23\"><h3>Chapter 23</h3></a>\n+<hr />\n+<h3><a name=\"ch23\">Chapter 23</a></h3>\n <p>A few extensions and nods to backwards-compatibility have been made with\n    containers.  Those dealing with older SGI-style allocators are dealt with\n    elsewhere.  The remaining ones all deal with bits:\n@@ -105,18 +107,18 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n    versions of single-bit test, set, reset, and flip member functions which\n    do no range-checking.  If we call them member functions of an instantiation\n    of &quot;bitset&lt;N&gt;,&quot; then their names and signatures are:\n+</p>\n    <pre>\n    bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos);\n    bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos, int val);\n    bitset&lt;N&gt;&amp;   _Unchecked_reset (size_t pos);\n    bitset&lt;N&gt;&amp;   _Unchecked_flip  (size_t pos);\n    bool         _Unchecked_test  (size_t pos);</pre>\n-   Note that these may in fact be removed in the future, although we have\n+<p>Note that these may in fact be removed in the future, although we have\n    no present plans to do so (and there doesn't seem to be any immediate\n    reason to).\n </p>\n-<p>\n-   The semantics of member function <code>operator[]</code> are not specified \n+<p>The semantics of member function <code>operator[]</code> are not specified \n    in the C++ standard.  A long-standing defect report calls for sensible\n    obvious semantics, which are already implemented here:  <code>op[]</code>\n    on a const bitset returns a bool, and for a non-const bitset returns a\n@@ -128,30 +130,31 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n <p>Finally, two additional searching functions have been added.  They return\n    the index of the first &quot;on&quot; bit, and the index of the first\n    &quot;on&quot; bit that is after <code>prev</code>, respectively:\n+</p>\n    <pre>\n    size_t _Find_first() const;\n    size_t _Find_next (size_t prev) const;</pre>\n-   The same caveat given for the _Unchecked_* functions applies here also.\n+<p>The same caveat given for the _Unchecked_* functions applies here also.\n </p>\n <p>Return <a href=\"howto.html\">to the main extensions page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n </p>\n \n \n-<hr>\n-<a name=\"ch24\"><h3>Chapter 24</h3></a>\n+<hr />\n+<h3><a name=\"ch24\">Chapter 24</a></h3>\n <p>24.3.2 describes <code>struct iterator</code>, which didn't exist in the\n    original HP STL implementation (the language wasn't rich enough at the\n    time).  For backwards compatibility, base classes are provided which\n    declare the same nested typedefs:\n+</p>\n    <ul>\n-    <li>input_iterator\n-    <li>output_iterator\n-    <li>forward_iterator\n-    <li>bidirectional_iterator\n-    <li>random_access_iterator\n+    <li>input_iterator</li>\n+    <li>output_iterator</li>\n+    <li>forward_iterator</li>\n+    <li>bidirectional_iterator</li>\n+    <li>random_access_iterator</li>\n    </ul>\n-</p>\n <p>24.3.4 describes iterator operation <code>distance</code>, which takes\n    two iterators and returns a result.  It is extended by another signature\n    which takes two iterators and a reference to a result.  The result is\n@@ -162,50 +165,53 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n </p>\n \n \n-<hr>\n-<a name=\"ch25\"><h3>Chapter 25</h3></a>\n+<hr />\n+<h3><a name=\"ch25\">Chapter 25</a></h3>\n <p>25.1.6 (count, count_if) is extended with two more versions of count\n    and count_if.  The standard versions return their results.  The\n    additional signatures return void, but take a final parameter by\n    reference to which they assign their results, e.g.,\n+</p>\n    <pre>\n    void count (first, last, value, n);</pre>\n-</p>\n <p>25.2 (mutating algorithms) is extended with two families of signatures,\n    random_sample and random_sample_n.\n </p>\n <p>25.2.1 (copy) is extended with\n+</p>\n    <pre>\n    copy_n (_InputIter first, _Size count, _OutputIter result);</pre>\n-   which copies the first 'count' elements at 'first' into 'result'.\n+<p>which copies the first 'count' elements at 'first' into 'result'.\n </p>\n <p>25.3 (sorting 'n' heaps 'n' stuff) is extended with some helper\n    predicates.  Look in the doxygen-generated pages for notes on these.\n+</p>\n    <ul>\n-    <li><code>is_heap</code> tests whether or not a range is a heap.\n+    <li><code>is_heap</code> tests whether or not a range is a heap.</li>\n     <li><code>is_sorted</code> tests whether or not a range is sorted in\n-        nondescending order.\n+        nondescending order.</li>\n    </ul>\n-</p>\n <p>25.3.8 (lexigraphical_compare) is extended with\n+</p>\n    <pre>\n    lexicographical_compare_3way(_InputIter1 first1, _InputIter1 last1,\n                                  _InputIter2 first2, _InputIter2 last2)</pre>\n-   which does... what?\n+<p>which does... what?\n </p>\n <p>Return <a href=\"howto.html\">to the main extensions page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n </p>\n \n \n-<hr>\n-<a name=\"ch26\"><h3>Chapter 26</h3></a>\n+<hr />\n+<h3><a name=\"ch26\">Chapter 26</a></h3>\n <p>26.4, the generalized numeric operations such as accumulate, are extended\n    with the following functions:\n+</p>\n    <pre>\n    power (x, n);\n    power (x, n, moniod_operation);</pre>\n-   Returns, in FORTRAN syntax, &quot;x ** n&quot; where n&gt;=0.  In the\n+<p>Returns, in FORTRAN syntax, &quot;x ** n&quot; where n&gt;=0.  In the\n    case of n == 0, returns the <a href=\"#ch20\">identity element</a> for the\n    monoid operation.  The two-argument signature uses multiplication (for\n    a true &quot;power&quot; implementation), but addition is supported as well.\n@@ -215,17 +221,17 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n    Coolest Name.  It &quot;assigns sequentially increasing values to a range.\n    That is, it assigns value to *first, value + 1 to *(first + 1) and so\n    on.&quot;  Quoted from SGI documentation.\n+</p>\n    <pre>\n    void iota(_ForwardIter first, _ForwardIter last, _Tp value);</pre>\n-</p>\n <p>Return <a href=\"howto.html\">to the main extensions page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n </p>\n \n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "7494334a7eb05d6deb1c4114fec88beeb7042ae0", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 189, "deletions": 188, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,10 +1,10 @@\n <html>\n <head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++, libg++, STL\">\n-   <meta name=\"DESCRIPTION\" content=\"FAQ for the GNU libstdc++ effort.\">\n+   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n+   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++, libg++, STL\" />\n+   <meta name=\"DESCRIPTION\" content=\"FAQ for the GNU libstdc++ effort.\" />\n    <title>libstdc++-v3 FAQ</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n <!-- \n   ** Locations of \"the most recent snapshot is the Nth\" text are \n   ** answers 1_1, 1_4, 4_1.\n@@ -23,84 +23,92 @@ <h1 class=\"centered\">libstdc++ Frequently Asked Questions</h1>\n </p>\n \n <p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n+</p>\n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h1>Questions</h1>\n <ol>\n    <li><a href=\"#1_0\">General Information</a>\n    <!-- I suspect these will mostly be links to/into existing documents. -->\n    <ol>\n-      <li><a href=\"#1_1\">What is libstdc++-v3?</a>\n-      <li><a href=\"#1_2\">Why should I use libstdc++?</a>\n-      <li><a href=\"#1_3\">Who's in charge of it?</a>\n-      <li><a href=\"#1_4\">How do I get libstdc++?</a>\n-      <li><a href=\"#1_5\">When is libstdc++ going to be finished?</a>\n-      <li><a href=\"#1_6\">How do I contribute to the effort?</a>\n-      <li><a href=\"#1_7\">What happened to libg++?  I need that!</a>\n-      <li><a href=\"#1_8\">What if I have more questions?</a>\n-      <li><a href=\"#1_9\">What are the license terms for libstdc++-v3?</a>\n+      <li><a href=\"#1_1\">What is libstdc++-v3?</a> </li>\n+      <li><a href=\"#1_2\">Why should I use libstdc++?</a> </li>\n+      <li><a href=\"#1_3\">Who's in charge of it?</a> </li>\n+      <li><a href=\"#1_4\">How do I get libstdc++?</a> </li>\n+      <li><a href=\"#1_5\">When is libstdc++ going to be finished?</a> </li>\n+      <li><a href=\"#1_6\">How do I contribute to the effort?</a> </li>\n+      <li><a href=\"#1_7\">What happened to libg++?  I need that!</a> </li>\n+      <li><a href=\"#1_8\">What if I have more questions?</a> </li>\n+      <li><a href=\"#1_9\">What are the license terms for libstdc++-v3?</a> </li>\n    </ol>\n+   </li>\n \n    <li><a href=\"#2_0\">Installation</a>\n       <ol>\n-         <li><a href=\"#2_1\">How do I install libstdc++-v3?</a>\n-         <li><a href=\"#2_2\">[removed]</a>\n+         <li><a href=\"#2_1\">How do I install libstdc++-v3?</a> </li>\n+         <li><a href=\"#2_2\">[removed]</a> </li>\n          <li><a href=\"#2_3\">What is this CVS thing that you keep \n-                            mentioning?</a>\n-         <li><a href=\"#2_4\">How do I know if it works?</a>\n-         <li><a href=\"#2_5\">This library is HUGE!  And what's libsupc++?</a>\n+                            mentioning?</a> </li>\n+         <li><a href=\"#2_4\">How do I know if it works?</a> </li>\n+         <li><a href=\"#2_5\">This library is HUGE!  And what's libsupc++?</a> </li>\n       </ol>\n+   </li>\n \n    <li><a href=\"#3_0\">Platform-Specific Issues</a>\n       <ol>\n          <li><a href=\"#3_1\">Can libstdc++-v3 be used with &lt;my\n-                            favorite compiler&gt;?</a>\n-         <li><a href=\"#3_2\">[removed]</a>\n-         <li><a href=\"#3_3\">[removed]</a>\n-         <li><a href=\"#3_4\">I can't use 'long long' on Solaris</a>\n+                            favorite compiler&gt;?</a> </li>\n+         <li><a href=\"#3_2\">[removed]</a> </li>\n+         <li><a href=\"#3_3\">[removed]</a> </li>\n+         <li><a href=\"#3_4\">I can't use 'long long' on Solaris</a> </li>\n          <li><a href=\"#3_5\"><code>_XOPEN_SOURCE</code> /\n                             <code>_GNU_SOURCE</code> / etc is always defined</a>\n-         <li><a href=\"#3_6\">OS X ctype.h is broken!  How can I hack it?</a>\n+         </li>\n+         <li><a href=\"#3_6\">OS X ctype.h is broken!  How can I hack it?</a> </li>\n       </ol>\n+   </li>\n \n    <li><a href=\"#4_0\">Known Bugs and Non-Bugs</a>\n       <ol>\n-         <li><a href=\"#4_1\">What works already?</a>\n-         <li><a href=\"#4_2\">Bugs in gcc/g++ (not libstdc++-v3)</a>\n-         <li><a href=\"#4_3\">Bugs in the C++ language/lib specification</a>\n+         <li><a href=\"#4_1\">What works already?</a> </li>\n+         <li><a href=\"#4_2\">Bugs in gcc/g++ (not libstdc++-v3)</a> </li>\n+         <li><a href=\"#4_3\">Bugs in the C++ language/lib specification</a> </li>\n          <li><a href=\"#4_4\">Things in libstdc++ that only look like bugs</a><ul>\n-           <li><a href=\"#4_4_iostreamclear\">reopening a stream fails</a>\n-           <li><a href=\"#4_4_Weff\">-Weffc++ complains too much</a>\n+           <li><a href=\"#4_4_iostreamclear\">reopening a stream fails</a> </li>\n+           <li><a href=\"#4_4_Weff\">-Weffc++ complains too much</a> </li>\n            <li><a href=\"#4_4_rel_ops\">&quot;ambiguous overloads&quot;\n-                               after including an old-style header</a>\n+                               after including an old-style header</a> </li>\n            <li><a href=\"#4_4_interface\">The g++-3 headers are\n-                               <strong>not ours</strong></a>\n-           <li><a href=\"#4_4_glibc\">compilation errors from streambuf.h</a>\n+                               <strong>not ours</strong></a> </li>\n+           <li><a href=\"#4_4_glibc\">compilation errors from streambuf.h</a> </li>\n            <li><a href=\"#4_4_checks\">errors about <em>*Concept</em> and\n-                               <em>constraints</em> in the STL...</a>\n+                               <em>constraints</em> in the STL...</a> </li>\n            <li><a href=\"#4_4_dlsym\">program crashes when using library code\n-                               in a dynamically-loaded library</a>\n+                               in a dynamically-loaded library</a> </li>\n          </ul>\n-         <li><a href=\"#4_5\">Aw, that's easy to fix!</a>\n+         </li>\n+         <li><a href=\"#4_5\">Aw, that's easy to fix!</a> </li>\n       </ol>\n+   </li>\n \n    <li><a href=\"#5_0\">Miscellaneous</a>\n       <ol>\n          <li><a href=\"#5_1\">string::iterator is not char*;\n-                            vector&lt;T&gt;::iterator is not T*</a>\n-         <li><a href=\"#5_2\">What's next after libstdc++-v3?</a>\n-         <li><a href=\"#5_3\">What about the STL from SGI?</a>\n-         <li><a href=\"#5_4\">Extensions and Backward Compatibility</a>\n-         <li><a href=\"#5_5\">[removed]</a>\n-         <li><a href=\"#5_6\">Is libstdc++-v3 thread-safe?</a>\n-         <li><a href=\"#5_7\">How do I get a copy of the ISO C++ Standard?</a>\n-         <li><a href=\"#5_8\">What's an ABI and why is it so messy?</a>\n+                            vector&lt;T&gt;::iterator is not T*</a> </li>\n+         <li><a href=\"#5_2\">What's next after libstdc++-v3?</a> </li>\n+         <li><a href=\"#5_3\">What about the STL from SGI?</a> </li>\n+         <li><a href=\"#5_4\">Extensions and Backward Compatibility</a> </li>\n+         <li><a href=\"#5_5\">[removed]</a> </li>\n+         <li><a href=\"#5_6\">Is libstdc++-v3 thread-safe?</a> </li>\n+         <li><a href=\"#5_7\">How do I get a copy of the ISO C++ Standard?</a> </li>\n+         <li><a href=\"#5_8\">What's an ABI and why is it so messy?</a> </li>\n       </ol>\n+   </li>\n \n </ol>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -127,7 +135,7 @@ <h2><a name=\"1_1\">1.1 What is libstdc++-v3?</a></h2>\n          official <a href=\"../17_intro/DESIGN\">design document</a>. \n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"1_2\">1.2 Why should I use libstdc++?</a></h2>\n       <p>The completion of the ISO C++ standardization gave the\n          C++ community a powerful set of reuseable tools in the form\n@@ -153,7 +161,7 @@ <h2><a name=\"1_2\">1.2 Why should I use libstdc++?</a></h2>\n          nor be worried about platform-specific incompatibilities.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"1_3\">1.3 Who's in charge of it?</a></h2>\n       <p>The libstdc++ project is contributed to by several developers\n          all over the world, in the same way as GCC or Linux.\n@@ -168,7 +176,7 @@ <h2><a name=\"1_3\">1.3 Who's in charge of it?</a></h2>\n          If you have questions, ideas, code, or are just curious, sign up!\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"1_4\">1.4 How do I get libstdc++?</a></h2>\n       <p>The fourteenth (and latest) snapshot of libstdc++-v3 is\n          <a href=\"http://gcc.gnu.org/libstdc++/index.html#download\">available\n@@ -183,17 +191,17 @@ <h2><a name=\"1_4\">1.4 How do I get libstdc++?</a></h2>\n          of the SGI STL.\n       </p> \n \n-<hr>\n+<hr />\n    <h2><a name=\"1_5\">1.5 When is libstdc++ going to be finished?</a></h2>\n-<!--      <p>Nathan Myers gave the best of all possible answers in <A \n+<!--      <p>Nathan Myers gave the best of all possible answers in <a \n          href=\"http://www.deja.com/getdoc.xp?AN=469581698&fmt=text\">a \n          Usenet article</a>.</p>\n which is no longer available, thanks deja...-->\n       <p>Nathan Myers gave the best of all possible answers, responding to a\n          Usenet article asking this question:  <em>Sooner, if you help.</em>\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"1_6\">1.6 How do I contribute to the effort?</a></h2>\n       <p>Here is <a href=\"../17_intro/contribute.html\">a\n          page devoted to this topic</a>.  Subscribing to the mailing\n@@ -205,7 +213,7 @@ <h2><a name=\"1_6\">1.6 How do I contribute to the effort?</a></h2>\n          we all thought was working, is more than welcome!\n       </p> \n \n-<hr>\n+<hr />\n    <h2><a name=\"1_7\">1.7 What happened to libg++?  I need that!</a></h2>\n       <p>The most recent libg++ README states that libg++ is no longer\n          being actively maintained.  It should not be used for new\n@@ -244,7 +252,7 @@ <h2><a name=\"1_7\">1.7 What happened to libg++?  I need that!</a></h2>\n          describes where to find the last libg++ source.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"1_8\">1.8 What if I have more questions?</a></h2>\n       <p>If you have read the README and RELEASE-NOTES files, and your\n          question remains unanswered, then just ask the mailing list.\n@@ -260,13 +268,13 @@ <h2><a name=\"1_8\">1.8 What if I have more questions?</a></h2>\n          or <a href=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</a>.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"1_9\">1.9 What are the license terms for libstdc++-v3?</a></h2>\n       <p>See <a href=\"../17_intro/license.html\">our license description</a>\n          for these and related questions.\n       </p>\n \n-<hr>\n+<hr />\n <h1><a name=\"2_0\">2.0 Installation</a></h1>\n    <h2><a name=\"2_1\">2.1 How do I install libstdc++-v3?</a></h2>\n       <p>Complete instructions are not given here (this is a FAQ, not\n@@ -277,9 +285,12 @@ <h2><a name=\"2_1\">2.1 How do I install libstdc++-v3?</a></h2>\n                  easier and more automated than building the GCC 2.[78]\n                  series was.  If you are using GCC 2.95, you can still\n                  build earlier snapshots of libstdc++.\n+            </li>\n             <li> GNU Make is recommended, but should not be required.\n+            </li>\n             <li> The GNU Autotools are needed if you are messing with\n                  the configury or makefiles.\n+            </li>\n          </ul>\n       <p>The file <a href=\"../documentation.html\">documentation.html</a>\n          provides a good overview of the steps necessary to build, install,\n@@ -295,18 +306,18 @@ <h2><a name=\"2_1\">2.1 How do I install libstdc++-v3?</a></h2>\n          &quot;.../docs/17_intro/&quot; directory of the distribution.\n       </p> \n \n-<hr>\n+<hr />\n    <h2><a name=\"2_2\">2.2 [removed]</a></h2>\n       <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"2_3\">2.3 What is this CVS thing that you\n                          keep mentioning?</a></h2>\n       <p>The <em>Concurrent Versions System</em> is one of several revision\n          control packages.  It was selected for GNU projects because it's\n-         free (speech), free (beer), and very high quality.  The <A\n+         free (speech), free (beer), and very high quality.  The <a\n          href=\"http://www.gnu.org/software/cvs/cvs.html\">CVS entry in\n          the GNU software catalogue</a> has a better description as \n          well as a\n@@ -321,7 +332,7 @@ <h2><a name=\"2_3\">2.3 What is this CVS thing that you\n          <!-- wonder how long that'll live -->\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"2_4\">2.4 How do I know if it works?</a></h2>\n       <p>libstdc++-v3 comes with its own testsuite.  You do not need\n          to actually install the library (&quot;<code>make\n@@ -337,7 +348,7 @@ <h2><a name=\"2_4\">2.4 How do I know if it works?</a></h2>\n          <strong>please</strong> write up your idea and send it to the list!\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"2_5\">2.4 This library is HUGE!  And what's libsupc++?</a></h2>\n       <p>Usually the size of libraries on disk isn't noticeable.  When a\n          link editor (or simply &quot;linker&quot;) pulls things from a\n@@ -387,7 +398,7 @@ <h2><a name=\"2_5\">2.4 This library is HUGE!  And what's libsupc++?</a></h2>\n          when building the library.\n       </p>\n \n-<hr>\n+<hr />\n <h1><a name=\"3_0\">3.0 Platform-Specific Issues</a></h1>\n    <h2><a name=\"3_1\">3.1 Can libstdc++-v3 be used with &lt;my\n                          favorite compiler&gt;?</a></h2>\n@@ -409,19 +420,19 @@ <h2><a name=\"3_1\">3.1 Can libstdc++-v3 be used with &lt;my\n          GCC/g++, however.\n       </p> \n \n-<hr>\n+<hr />\n    <h2><a name=\"3_2\">3.2 [removed]</a></h2>\n       <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"3_3\">3.3 [removed]</a></h2>\n       <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"3_4\">3.4 I can't use 'long long' on Solaris</a></h2>\n       <p>By default we try to support the C99 <code>long long</code> type.\n          This requires that certain functions from your C library be present.\n@@ -433,7 +444,7 @@ <h2><a name=\"3_4\">3.4 I can't use 'long long' on Solaris</a></h2>\n       <p>This has been fixed for 3.0.3 and onwards.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"3_5\">3.5 <code>_XOPEN_SOURCE</code> / <code>_GNU_SOURCE</code>\n                          / etc is always defined</a></h2>\n       <p>On Solaris, g++ (but not gcc) always defines the preprocessor\n@@ -465,21 +476,21 @@ <h2><a name=\"3_5\">3.5 <code>_XOPEN_SOURCE</code> / <code>_GNU_SOURCE</code>\n          a list of predefined macros for any particular installation.\n       </p>\n       <p>This has been discussed on the mailing lists\n-         <a href=\"http://gcc.gnu.org/cgi-bin/htsearch?method=and&format=builtin-long&sort=score&words=_XOPEN_SOURCE+Solaris\">quite a bit</a>.\n+         <a href=\"http://gcc.gnu.org/cgi-bin/htsearch?method=and&amp;format=builtin-long&amp;sort=score&amp;words=_XOPEN_SOURCE+Solaris\">quite a bit</a>.\n       </p>\n       <p>This method is something of a wart.  We'd like to find a cleaner\n          solution, but nobody yet has contributed the time.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"3_6\">3.6 OS X ctype.h is broken!  How can I hack it?</a></h2>\n       <p>This is a long-standing bug in the OS X support.  Fortunately,\n          the patch is quite simple, and well-known.\n          <a href=\"http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\"> Here's a\n          link to the solution.</a>\n       </p>\n \n-<hr>\n+<hr />\n <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n    <em>Note that this section can get rapdily outdated -- such is the\n    nature of an open-source project.  For the latest information, join\n@@ -571,7 +582,7 @@ <h2><a name=\"4_1\">4.1 What works already?</a></h2>\n </pre>\n \n \n-<hr>\n+<hr />\n    <h2><a name=\"4_2\">4.2 Bugs in gcc/g++ (not libstdc++-v3)</a></h2>\n       <p>This is by no means meant to be complete nor exhaustive, but\n          mentions some problems that users may encounter when building\n@@ -596,7 +607,7 @@ <h2><a name=\"4_2\">4.2 Bugs in gcc/g++ (not libstdc++-v3)</a></h2>\n              experiences.  :-)</li>\n       </ul>\n \n-<hr>\n+<hr />\n    <h2><a name=\"4_3\">4.3 Bugs in the C++ language/lib specification</a></h2>\n       <p>Yes, unfortunately, there are some.  In a\n          <a href=\"http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\">message\n@@ -615,28 +626,26 @@ <h2><a name=\"4_3\">4.3 Bugs in the C++ language/lib specification</a></h2>\n          Some of these have resulted in <a href=\"#5_2\">code changes</a>.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"4_4\">4.4 Things in libstdc++ that only look like bugs</a></h2>\n       <p>There are things which are not bugs in the compiler (4.2) nor\n          the language specification (4.3), but aren't really bugs in\n          libstdc++, either.  Really!  Please do not report these as bugs.\n       </p>\n-      <a name=\"4_4_Weff\">\n-        <p><strong>-Weffc++</strong>\n-           The biggest of these is the quadzillions of warnings about the\n-           library headers emitted when <code>-Weffc++</code> is used.  Making\n-           libstdc++ &quot;-Weffc++-clean&quot; is not a goal of the project,\n-           for a few reasons.  Mainly, that option tries to enforce\n-           object-oriented programming, while the Standard Library isn't\n-           necessarily trying to be OO.\n-        </p>\n-      </a>\n-      <a name=\"4_4_iostreamclear\">\n-        <p><strong>reopening a stream fails</strong>\n-           Did I just say that -Weffc++ was our biggest false-bug report?  I\n-           lied.  (It used to be.)  Today it seems to be reports that after\n-           executing a sequence like\n-           <pre>\n+      <p><a name=\"4_4_Weff\"><strong>-Weffc++</strong></a>\n+         The biggest of these is the quadzillions of warnings about the\n+         library headers emitted when <code>-Weffc++</code> is used.  Making\n+         libstdc++ &quot;-Weffc++-clean&quot; is not a goal of the project,\n+         for a few reasons.  Mainly, that option tries to enforce\n+         object-oriented programming, while the Standard Library isn't\n+         necessarily trying to be OO.\n+      </p>\n+      <p><a name=\"4_4_iostreamclear\"><strong>reopening a stream fails</strong>\n+         </a> Did I just say that -Weffc++ was our biggest false-bug report?\n+\t I lied.  (It used to be.)  Today it seems to be reports that after\n+\t executing a sequence like\n+      </p>\n+      <pre>\n     #include &lt;fstream&gt;\n     ...\n     std::fstream  fs(&quot;a_file&quot;);\n@@ -645,94 +654,86 @@ <h2><a name=\"4_4\">4.4 Things in libstdc++ that only look like bugs</a></h2>\n     // .\n     fs.close();\n     fs.open(&quot;a_new_file&quot;);</pre>\n-           all operations on the re-opened <code>fs</code> will fail, or at\n-           least act very strangely.  Yes, they often will, especially if\n-           <code>fs</code> reached the EOF state on the previous file.  The\n-           reason is that the state flags are <strong>not</strong> cleared\n-           on a successful call to open().  The standard unfortunately did\n-           not specify behavior in this case, and to everybody's great sorrow,\n-           the <a href=\"../ext/howto.html#5\">proposed LWG resolution</a> (see\n-           DR #22) is to leave the flags unchanged.  You must insert a call\n-           to <code>fs.clear()</code> between the calls to close() and open(),\n-           and then everything will work like we all expect it to work.\n-        </p>\n-      </a>\n-      <a name=\"4_4_rel_ops\">\n-        <p><strong>rel_ops</strong>\n-           Another is the <code>rel_ops</code> namespace and the template\n-           comparison operator functions contained therein.  If they become\n-           visible in the same namespace as other comparison functions\n-           (e.g., '<code>using</code>' them and the &lt;iterator&gt; header),\n-           then you will suddenly be faced with huge numbers of ambiguity\n-           errors.  This was discussed on the -v3 list; Nathan Myers\n-           <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n-           things up here</a>.  The collisions with vector/string iterator\n-           types have been fixed for 3.1.  <!-- more links to email here -->\n-        </p>\n-      </a>\n-      <a name=\"4_4_interface\"><h3>The g++-3 headers are\n-                                      <em>not ours</em></h3>\n-        <p>If you have found an extremely broken header file which is\n-           causing problems for you, look carefully before submitting a\n-           &quot;high&quot; priority bug report (which you probably shouldn't\n-           do anyhow; see the last paragraph of the page describing\n+      <p>all operations on the re-opened <code>fs</code> will fail, or at\n+         least act very strangely.  Yes, they often will, especially if\n+         <code>fs</code> reached the EOF state on the previous file.  The\n+         reason is that the state flags are <strong>not</strong> cleared\n+         on a successful call to open().  The standard unfortunately did\n+         not specify behavior in this case, and to everybody's great sorrow,\n+         the <a href=\"../ext/howto.html#5\">proposed LWG resolution</a> (see\n+         DR #22) is to leave the flags unchanged.  You must insert a call\n+         to <code>fs.clear()</code> between the calls to close() and open(),\n+         and then everything will work like we all expect it to work.\n+      </p>\n+      <p><a name=\"4_4_rel_ops\"><strong>rel_ops</strong></a>\n+         Another is the <code>rel_ops</code> namespace and the template\n+         comparison operator functions contained therein.  If they become\n+         visible in the same namespace as other comparison functions\n+         (e.g., '<code>using</code>' them and the &lt;iterator&gt; header),\n+         then you will suddenly be faced with huge numbers of ambiguity\n+         errors.  This was discussed on the -v3 list; Nathan Myers\n+         <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n+         things up here</a>.  The collisions with vector/string iterator\n+         types have been fixed for 3.1.  <!-- more links to email here -->\n+      </p>\n+      <h3><a name=\"4_4_interface\">The g++-3 headers are <em>not ours</em></a></h3>\n+      <p>If you have found an extremely broken header file which is\n+         causing problems for you, look carefully before submitting a\n+         &quot;high&quot; priority bug report (which you probably shouldn't\n+         do anyhow; see the last paragraph of the page describing\n          <a href=\"http://gcc.gnu.org/gnatswrite.html\">the GCC bug database</a>).\n-        </p>\n-        <p>If the headers are in <code>${prefix}/include/g++-3</code>, or if\n-           the installed library's name looks like <code>libstdc++-2.10.a</code>\n-           or <code>libstdc++-libc6-2.10.so</code>,\n-           then you are using the old libstdc++-v2 library, which is nonstandard\n-           and unmaintained.  Do not report problems with -v2 to the -v3\n-           mailing list.\n-        </p>\n-        <p>Currently our header files are installed in\n-           <code>${prefix}/include/g++-v3</code> (see the 'v'?).  This may\n-           change with the next release of GCC, as it may be too confusing,\n-           but <a href=\"http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\">the\n-           question has not yet been decided</a>.\n-        </p>\n-      </a>\n-      <a name=\"4_4_glibc\">\n-        <p><strong>glibc</strong>\n-           If you're on a GNU/Linux system and have just upgraded to\n-           glibc 2.2, but are still using gcc 2.95.2, then you should have\n-           read the glibc FAQ, specifically 2.34:\n-   <pre>\n+      </p>\n+      <p>If the headers are in <code>${prefix}/include/g++-3</code>, or if\n+         the installed library's name looks like <code>libstdc++-2.10.a</code>\n+         or <code>libstdc++-libc6-2.10.so</code>,\n+         then you are using the old libstdc++-v2 library, which is nonstandard\n+         and unmaintained.  Do not report problems with -v2 to the -v3\n+         mailing list.\n+      </p>\n+      <p>Currently our header files are installed in\n+         <code>${prefix}/include/g++-v3</code> (see the 'v'?).  This may\n+         change with the next release of GCC, as it may be too confusing,\n+         but <a href=\"http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\">the\n+         question has not yet been decided</a>.\n+      </p>\n+      <p><a name=\"4_4_glibc\"><strong>glibc</strong></a>\n+         If you're on a GNU/Linux system and have just upgraded to\n+         glibc 2.2, but are still using gcc 2.95.2, then you should have\n+         read the glibc FAQ, specifically 2.34:\n+      </p>\n+      <pre>\n 2.34.   When compiling C++ programs, I get a compilation error in streambuf.h.\n \n {BH} You are using g++ 2.95.2? After upgrading to glibc 2.2, you need to\n apply a patch to the include files in /usr/include/g++, because the fpos_t\n type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    </pre>\n-           Note that 2.95.x shipped with the\n-           <a href=\"#4_4_interface\">old v2 library</a> which is no longer\n-           maintained.  Also note that gcc 2.95.3 fixes this problem, but\n-           requires a separate patch for libstdc++-v3.\n-        </p>\n-      </a>\n-      <a name=\"4_4_checks\">\n-        <p><strong>concept checks</strong>\n-           If you see compilation errors containing messages about\n-           <code> <em>foo</em>Concept </code>and a<code> constraints </code>\n-           member function, then most likely you have violated one of the\n-           requirements for types used during instantiation of template\n-           containers and functions.  For example, EqualityComparableConcept\n-           appears if your types must be comparable with == and you have not\n-           provided this capability (a typo, or wrong visibility, or you\n-           just plain forgot, etc).\n-        </p>\n-        <p>More information, including how to optionally enable/disable the\n-           checks, is available\n-           <a href=\"../19_diagnostics/howto.html#3\">here</a>.\n-        </p>\n-      </a>\n-      <a name=\"4_4_dlsym\">\n-        <p><strong>dlopen/dlsym</strong>\n-           If you are using the C++ library across dynamically-loaded\n-           objects, make certain that you are passing the correct options\n-           when compiling and linking:\n-           <pre>\n+      <p>Note that 2.95.x shipped with the\n+         <a href=\"#4_4_interface\">old v2 library</a> which is no longer\n+         maintained.  Also note that gcc 2.95.3 fixes this problem, but\n+         requires a separate patch for libstdc++-v3.\n+      </p>\n+      <p><a name=\"4_4_checks\"><strong>concept checks</strong></a>\n+\t If you see compilation errors containing messages about\n+\t <code> <em>foo</em>Concept </code>and a<code> constraints </code>\n+\t member function, then most likely you have violated one of the\n+\t requirements for types used during instantiation of template\n+\t containers and functions.  For example, EqualityComparableConcept\n+\t appears if your types must be comparable with == and you have not\n+\t provided this capability (a typo, or wrong visibility, or you\n+\t just plain forgot, etc).\n+      </p>\n+      <p>More information, including how to optionally enable/disable the\n+\t checks, is available\n+\t <a href=\"../19_diagnostics/howto.html#3\">here</a>.\n+      </p>\n+      <p><a name=\"4_4_dlsym\"><strong>dlopen/dlsym</strong></a>\n+\t If you are using the C++ library across dynamically-loaded\n+\t objects, make certain that you are passing the correct options\n+\t when compiling and linking:\n+      </p>\n+      <pre>\n     // compile the library components\n     g++ -fPIC -c a.cc\n     g++ -fPIC -c b.cc\n@@ -743,10 +744,9 @@ <h2><a name=\"4_4\">4.4 Things in libstdc++ that only look like bugs</a></h2>\n     g++ -fPIC -shared -rdynamic -o libfoo.so a.o b.o ... z.o\n \n     // link the executable\n-    g++ -fPIC -rdynamic -o foo ... -L. -lfoo -ldl</pre></p>\n-      </a>\n+    g++ -fPIC -rdynamic -o foo ... -L. -lfoo -ldl</pre>\n \n-<hr>\n+<hr />\n    <h2><a name=\"4_5\">4.5 Aw, that's easy to fix!</a></h2>\n       <p>If you have found a bug in the library and you think you have\n          a working fix, then send it in!  The main GCC site has a page\n@@ -765,7 +765,7 @@ <h2><a name=\"4_5\">4.5 Aw, that's easy to fix!</a></h2>\n          <a href=\"#2_4\">testsuite</a> -- but only if such a test exists.\n       </p>\n \n-<hr>\n+<hr />\n <h1><a name=\"5_0\">5.0 Miscellaneous</a></h1>\n    <h2><a name=\"5_1\">5.1 string::iterator is not char*;\n                      vector&lt;T&gt;::iterator is not T*</a></h2>\n@@ -786,7 +786,7 @@ <h2><a name=\"5_1\">5.1 string::iterator is not char*;\n          vector&lt;&gt; (but not for basic_string&lt;&gt;).\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_2\">5.2 What's next after libstdc++-v3?</a></h2>\n       <p>Hopefully, not much.  The goal of libstdc++-v3 is to produce\n          a fully-compliant, fully-portable Standard Library.  After that,\n@@ -802,32 +802,32 @@ <h2><a name=\"5_2\">5.2 What's next after libstdc++-v3?</a></h2>\n          we add code to the library based on what the current proposed\n          resolution specifies.  Those additions are listed in\n          <a href=\"../ext/howto.html#5\">the extensions page</a>.\n-      </p>\n+      </p></li>\n       <li><p>Performance tuning.  Lots of performance tuning.  This too is\n          already underway for post-3.0 releases, starting with memory\n          expansion in container classes and buffer usage in synchronized\n          stream objects.\n-      </p>\n+      </p></li>\n       <li><p>An ABI for libstdc++ is being developed, so that\n          multiple binary-incompatible copies of the library can be replaced\n          with a single backwards-compatible library, like libgcc_s.so is.\n-      </p>\n+      </p></li>\n       <li><p>The current libstdc++ contains extensions to the Library which\n          must be explicitly requested by client code (for example, the\n          hash tables from SGI).  Other extensions may be added to\n          libstdc++-v3 if they seem to be &quot;standard&quot; enough.\n          (For example, the &quot;long long&quot; type from C99.)\n          Bugfixes and rewrites (to improve or fix thread safety, for\n          instance) will of course be a continuing task.\n-      </p>\n+      </p></li>\n       </ol>\n       <p><a href=\"http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\">This\n          question</a> about the next libstdc++ prompted some brief but\n          interesting\n          <a href=\"http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\">speculation</a>.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_3\">5.3 What about the STL from SGI?</a></h2>\n       <p>The <a href=\"http://www.sgi.com/Technology/STL/\">STL from SGI</a>,\n          version 3.3, was the most recent merge of the STL codebase.  The\n@@ -844,14 +844,15 @@ <h2><a name=\"5_3\">5.3 What about the STL from SGI?</a></h2>\n          recommended reading.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_4\">5.4 Extensions and Backward Compatibility</a></h2>\n       <p>Headers in the <code>ext</code> and <code>backward</code>\n          subdirectories should be referred to by their relative paths:\n          <!-- Careful, the leading spaces in PRE show up directly. -->\n-         <pre>\n+      </p>\n+      <pre>\n       #include &lt;ext/hash_map&gt; </pre>\n-         rather than using <code>-I</code> or other options.  This is more\n+      <p>rather than using <code>-I</code> or other options.  This is more\n          portable and forward-compatible.  (The situation is the same as\n          that of other headers whose directories are not searched directly,\n          e.g., <code>&lt;sys/stat.h&gt;</code>, <code>&lt;X11/Xlib.h&gt;</code>.\n@@ -860,13 +861,13 @@ <h2><a name=\"5_4\">5.4 Extensions and Backward Compatibility</a></h2>\n          <a href=\"../ext/howto.html\">their own page</a>.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_5\">5.5 [removed]</a></h2>\n       <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n       <p>When the system's libc is itself thread-safe, a non-generic\n          implementation of atomicity.h exists for the architecture, and gcc\n@@ -877,7 +878,8 @@ <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n          what object locks must be held based on the objects referenced in\n          a method call.  Without getting into great detail, here is an\n          example which requires user-level locks:\n-         <pre>\n+      </p>\n+      <pre>\n      library_class_a shared_object_a;\n \n      thread_main () {\n@@ -887,18 +889,17 @@ <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n      }\n \n      // Multiple copies of thread_main() are started in independent threads.</pre>\n-      </p>\n       <p>Under the assumption that object_a and object_b are never exposed to\n          another thread, here is an example that should not require any\n          user-level locks:\n-         <pre>\n+      </p>\n+      <pre>\n      thread_main () {\n        library_class_a object_a;\n        library_class_b *object_b = new library_class_b;\n        object_a.add_b (object_b);\n        object_a.mutate ();\n      } </pre>\n-      </p>\n       <p>All library objects are safe to use in a multithreaded program as\n          long as each thread carefully locks out access by any other thread\n          while it uses any object visible to another thread.  In general,\n@@ -913,7 +914,7 @@ <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n          more information.\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</a></h2>\n       <p>Copies of the full ISO 14882 standard are available on line via the\n          ISO mirror site for committee members.  Non-members, or those who\n@@ -931,7 +932,7 @@ <h2><a name=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</a></h2>\n          <a href=\"http://www.iso.ch/\">ISO homepage</a> and find out!\n       </p>\n \n-<hr>\n+<hr />\n    <h2><a name=\"5_8\">5.8 What's an ABI and why is it so messy?</a></h2>\n       <p>&quot;ABI&quot; stands for &quot;Application Binary Interface.&quot;\n          Conventionally, it refers to a great mass of details about how\n@@ -980,7 +981,7 @@ <h2><a name=\"5_8\">5.8 What's an ABI and why is it so messy?</a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "59632af35d47ab50b87fef08a961b8be0f63cc00", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -106,8 +106,8 @@\n \n    The libstdc++ project is contributed to by several developers all over\n    the world, in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n-   Dos Reis, Phil Edwards, Ulrich Drepper, Loren James Rittle, and\n-   Paolo Carlini are the lead maintainers of the CVS archive.\n+   Dos Reis, Phil Edwards, Ulrich Drepper, Loren James Rittle, and Paolo\n+   Carlini are the lead maintainers of the CVS archive.\n \n    Development and discussion is held on the libstdc++ mailing list.\n    Subscribing to the list, or searching the list archives, is open to"}, {"sha": "7c631086c27b6fd274a9603ac1adbb8f141414dd", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -1,12 +1,11 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n <html>\n <head>\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\">\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++\">\n-   <meta name=\"DESCRIPTION\" content=\"README for the GNU libstdc++ effort.\">\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\">\n+   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n+   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++-v3, GCC, g++\" />\n+   <meta name=\"DESCRIPTION\" content=\"README for the GNU libstdc++ effort.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n    <title>libstdc++-v3 Installation Instructions</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\">\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n </head>\n <body>\n \n@@ -18,21 +17,22 @@ <h1 class=\"centered\"><a name=\"top\">libstdc++-v3 INSTALL</a></h1>\n </p>\n \n <p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n+</p>\n \n \n <!-- ####################################################### -->\n-<hr>\n+<hr />\n <h2>Contents</h2>\n <ul>\n-   <li><a href=\"#prereqs\">Tools you will need beforehand</a>\n-   <li><a href=\"#srcsetup\">Setting up the source directories</a>\n-   <li><a href=\"#config\">Configuring</a>\n-   <li><a href=\"#install\">Building and installing the library</a>\n-   <li><a href=\"#postinstall\">Post-installation</a>\n-   <li><a href=\"#usage\">Using the library</a>\n+   <li><a href=\"#prereqs\">Tools you will need beforehand</a></li>\n+   <li><a href=\"#srcsetup\">Setting up the source directories</a></li>\n+   <li><a href=\"#config\">Configuring</a></li>\n+   <li><a href=\"#install\">Building and installing the library</a></li>\n+   <li><a href=\"#postinstall\">Post-installation</a></li>\n+   <li><a href=\"#usage\">Using the library</a></li>\n </ul>\n \n-<hr>\n+<hr />\n \n <!-- ####################################################### -->\n \n@@ -88,8 +88,8 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n       features if the underlying support is present.\n    </p>\n \n-    <p>Finally, a few system-specific requirements: </p>\n-    <dl>\n+   <p>Finally, a few system-specific requirements: </p>\n+   <dl>\n       <dt> linux </dt>\n \n       <dd>If you are using gcc 3.1 or later on linux, and are using\n@@ -119,9 +119,9 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n         </li>\n       </ul>\n       </dd>\n-    </dl>\n+   </dl>\n \n-<hr>\n+<hr />\n \n <h2><a name=\"srcsetup\">Setting up the source directories</a></h2>\n    <p>The following definitions will be used throughout the rest of this\n@@ -131,26 +131,33 @@ <h2><a name=\"srcsetup\">Setting up the source directories</a></h2>\n          <li><em>gccsrcdir</em>:  The directory holding the source of the\n                  compiler.  It should have several subdirectories like\n                  <em>gccsrcdir</em>/libiberty and <em>gccsrcdir</em>/gcc.\n+         </li>\n          <li><em>libsrcdir</em>:  The directory holding the source of the\n                  C++ library.\n+         </li>\n          <li><em>gccbuilddir</em>:  The build directory for the compiler\n                  in <em>gccsrcdir</em>.  GCC requires that it be built in\n                  a different directory than its sources.\n+         </li>\n          <li><em>libbuilddir</em>:  The build directory for libstdc++.\n+         </li>\n          <li><em>destdir</em>:  The eventual installation directory for\n                  the compiler/libraries, set with the --prefix option to\n                  the configure script.\n+         </li>\n       </ul>\n       <p> Note: </p>\n       <ol>\n          <li>The 3.0 version and following are intended to replace the\n              library that comes with the compiler, so <em>libsrcdir</em>\n              and <em>libbuilddir</em> must be contained under\n              <em>gccsrcdir</em> and <em>gccbuilddir</em>, respectively.\n+         </li>\n          <li>The source, build, and installation directories should\n              not be parents of one another; i.e., these should all be\n              separate directories. Please don't build out of the\n              source directory.\n+         </li>\n       </ol>\n \n    <p>Check out or download the GCC sources: the resulting source directory\n@@ -175,7 +182,7 @@ <h2><a name=\"srcsetup\">Setting up the source directories</a></h2>\n    mv <em>libsrcdir</em> libstdc++-v3</pre>\n \n \n-<hr>\n+<hr />\n <h2><a name=\"config\">Configuring</a></h2>\n    <p>If you have never done this before, you should read the basic\n       <a href=\"http://gcc.gnu.org/install/\">GCC Installation\n@@ -196,7 +203,7 @@ <h2><a name=\"config\">Configuring</a></h2>\n    <em>gccsrcdir</em>/configure --prefix=<em>destdir</em> --other-opts...</pre>\n \n \n-<hr>\n+<hr />\n <h2><a name=\"install\">Building and installing the library</a></h2>\n    <p>Now you have a few options:</p>\n    <h3>[re]building <em>everything</em></h3>\n@@ -236,7 +243,7 @@ <h3>[re]building only libstdc++</h3>\n    make install-target-libstdc++-v3</pre>\n \n \n-<hr>\n+<hr />\n <h2><a name=\"postinstall\">Post-installation</a></h2>\n    <p>Installation will create the <em>destdir</em> directory and\n       populate it with subdirectories:\n@@ -266,7 +273,7 @@ <h2><a name=\"postinstall\">Post-installation</a></h2>\n    </p>\n \n \n-<hr>\n+<hr />\n <h2><a name=\"usage\">Using the library</a></h2>\n    <h3>Find the new library at runtime (shared linking only)</h3>\n        <p>If you only built a static library (libstdc++.a), or if you\n@@ -279,23 +286,25 @@ <h3>Find the new library at runtime (shared linking only)</h3>\n           the usual ones are printed to the screen during installation.\n           They include:\n        </p>\n-          <ul>\n+       <ul>\n           <li>At runtime set LD_LIBRARY_PATH in your environment correctly,\n               so that the shared library for libstdc++ can be found and\n               loaded.  Be certain that you understand all of the other\n               implications and behavior of LD_LIBRARY_PATH first (few\n               people do, and they get into trouble).\n+          </li>\n           <li>Compile the path to find the library at runtime into the\n               program.  This can be done by passing certain options to g++,\n               which will in turn pass them on to the linker.  The exact\n               format of the options is dependent on which linker you use:\n               <ul>\n-  <li>GNU ld (default on Linux):<code>  -Wl,--rpath,<em>destdir</em>/lib</code>\n-  <li>IRIX ld:<code>  -Wl,-rpath,<em>destdir</em>/lib</code>\n-  <li>Solaris ld:<code>  -Wl,-R<em>destdir</em>/lib</code>\n-  <li>More...?  Let us know!\n+  <li>GNU ld (default on Linux):<code>  -Wl,--rpath,<em>destdir</em>/lib</code></li>\n+  <li>IRIX ld:<code>  -Wl,-rpath,<em>destdir</em>/lib</code></li>\n+  <li>Solaris ld:<code>  -Wl,-R<em>destdir</em>/lib</code></li>\n+  <li>More...?  Let us know!</li>\n               </ul>\n-          </ul>\n+          </li>\n+       </ul>\n        <p>Use the <code>ldd(1)</code> utility to show which library the system\n           thinks it will get at runtime.\n        </p>\n@@ -306,7 +315,7 @@ <h3>Find the new library at runtime (shared linking only)</h3>\n \n \n <!--\n-<hr>\n+<hr />\n <h2><a name=\"\"></a></h2>\n    <p>\n    </p>\n@@ -315,7 +324,7 @@ <h2><a name=\"\"></a></h2>\n \n <!-- ####################################################### -->\n \n-<hr>\n+<hr />\n <p class=\"fineprint\"><em>\n See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n Comments and suggestions are welcome, and may be sent to"}, {"sha": "9da77d9c1a1f33e1501f8511a584e63630e1b430", "filename": "libstdc++-v3/docs/html/makedoc.awk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fmakedoc.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a6f971868d0d6cd64df9325ffb6600e538b022/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fmakedoc.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fmakedoc.awk?ref=64a6f971868d0d6cd64df9325ffb6600e538b022", "patch": "@@ -9,7 +9,7 @@\n BEGIN {\n   state = \"looking\";\n   entries = 0;\n-  printf (\"   <li>%s</li>\\n\", title);\n+  printf (\"   <li>%s\\n\", title);\n   printf (\"   <ul>\\n\");\n }\n \n@@ -39,7 +39,7 @@ state == \"entries\" && /^<\\/ul>/ {\n END {\n   for (i = 0; i < entries; i++)\n     printf (\"     %s\\n\", entry[i]);\n-  printf (\"   </ul>\\n\\n\");\n+  printf (\"   </ul>\\n   </li>\\n\\n\");\n }\n \n function extract_info(line) {\n@@ -58,7 +58,7 @@ function extract_info(line) {\n   }\n \n   # visible text\n-  gsub(\"</a>\",\"\",line);\n+  gsub(\"</a></li>\",\"\",line);\n   start = index(line,\"\\\">\") + 2;\n   thistext = substr(line,start);\n "}]}