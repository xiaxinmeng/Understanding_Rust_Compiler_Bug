{"sha": "3a0d06c19544018e70102695443cea594433d0b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwZDA2YzE5NTQ0MDE4ZTcwMTAyNjk1NDQzY2VhNTk0NDMzZDBiMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-27T23:03:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-27T23:03:02Z"}, "message": "gimplify.c (mark_addressable): Export.\n\n2009-03-27  Richard Guenther  <rguenther@suse.de>\n\n\t* gimplify.c (mark_addressable): Export.\n\t* tree-flow.h (mark_addressable): Declare.\n\t* tree-ssa-loop-manip.c (create_iv): Mark the base addressable.\n\t* tree-ssa.c (verify_phi_args): Verify that address taken\n\tvariables have TREE_ADDRESSABLE set.\n\n2009-03-27  Richard Guenther  <rguenther@suse.de>\n\n\t* fold-const.c (build_fold_addr_expr_with_type_1): Rename back to ...\n\t(build_fold_addr_expr_with_type): ... this.  Remove in_fold handling.\n\tDo not mark decls TREE_ADDRESSABLE.\n\t(build_fold_addr_expr): Adjust.\n\t(fold_addr_expr): Remove.\n\t(fold_unary): Use build_fold_addr_expr.\n\t(fold_comparison): Likewise.\n\t(split_address_to_core_and_offset): Likewise.\n\t* coverage.c (tree_coverage_counter_addr): Mark the array decl\n\tTREE_ADDRESSABLE.\n\t* gimplify.c (mark_addressable): Do not exclude RESULT_DECLs.\n\t(gimplify_modify_expr_to_memcpy): Mark source and destination\n\taddressable.\n\t* omp-low.c (create_omp_child_function): Mark the object decl\n\tTREE_ADDRESSABLE.\n\t(lower_rec_input_clauses): Mark the var we take the address of\n\tTREE_ADDRESSABLE.\n\t(lower_omp_taskreg): Mark the sender decl TREE_ADDRESSABLE.\n\n\tfortran/\n\t* trans-array.c (gfc_conv_descriptor_data_addr): Use\n\tgfc_build_addr_expr instead of build_fold_addr_expr.\n\t(gfc_trans_allocate_array_storage, gfc_trans_array_constructor_value,\n\tgfc_trans_constant_array_constructor, gfc_conv_array_data,\n\tgfc_conv_expr_descriptor, gfc_conv_array_parameter): Likewise.\n\t* trans-expr.c (gfc_conv_missing_dummy, gfc_conv_variable,\n\tgfc_conv_function_val, gfc_conv_operator_assign,\n\tgfc_conv_subref_array_arg, gfc_conv_function_call,\n\tgfc_conv_expr_reference, gfc_trans_scalar_assign): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_exponent,\n\tgfc_conv_intrinsic_ctime, gfc_conv_intrinsic_fdate,\n\tgfc_conv_intrinsic_ttynam, gfc_conv_intrinsic_minmax_char,\n\tgfc_conv_intrinsic_fraction, gfc_conv_intrinsic_spacing,\n\tgfc_conv_intrinsic_rrspacing, gfc_conv_intrinsic_set_exponent,\n\tgfc_conv_intrinsic_array_transfer, gfc_conv_intrinsic_transfer,\n\tgfc_conv_intrinsic_si_kind, gfc_conv_intrinsic_trim): Likewise.\n\t* trans-io.c (gfc_trans_io_runtime_check, set_parameter_ref,\n\tgfc_convert_array_to_string, gfc_trans_open, gfc_trans_close,\n\tbuild_filepos, gfc_trans_inquire, gfc_trans_wait,\n\tnml_get_addr_expr, transfer_namelist_element, build_dt,\n\tgfc_trans_dt_end, transfer_array_component, transfer_expr,\n\ttransfer_array_desc, gfc_trans_transfer): Likewise.\n\t* trans-stmt.c (gfc_trans_allocate, gfc_trans_deallocate): Likewise.\n\t* trans.c (gfc_build_addr_expr): Mark the base of the address\n\tTREE_ADDRESSABLE.\n\nFrom-SVN: r145143", "tree": {"sha": "ed6e4a70896d37a240f0fe882effa7f0f42d4dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6e4a70896d37a240f0fe882effa7f0f42d4dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0d06c19544018e70102695443cea594433d0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0d06c19544018e70102695443cea594433d0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0d06c19544018e70102695443cea594433d0b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0d06c19544018e70102695443cea594433d0b0/comments", "author": null, "committer": null, "parents": [{"sha": "628c189edb5aae6b4e1d416a92cbd0cb9f68586f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c189edb5aae6b4e1d416a92cbd0cb9f68586f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628c189edb5aae6b4e1d416a92cbd0cb9f68586f"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "d91006b149f130187effe6bfc53412b62c7b6e81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d06c19544018e70102695443cea594433d0b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d06c19544018e70102695443cea594433d0b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a0d06c19544018e70102695443cea594433d0b0", "patch": "@@ -1,3 +1,32 @@\n+2009-03-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimplify.c (mark_addressable): Export.\n+\t* tree-flow.h (mark_addressable): Declare.\n+\t* tree-ssa-loop-manip.c (create_iv): Mark the base addressable.\n+\t* tree-ssa.c (verify_phi_args): Verify that address taken\n+\tvariables have TREE_ADDRESSABLE set.\n+\n+2009-03-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* fold-const.c (build_fold_addr_expr_with_type_1): Rename back to ...\n+\t(build_fold_addr_expr_with_type): ... this.  Remove in_fold handling.\n+\tDo not mark decls TREE_ADDRESSABLE.\n+\t(build_fold_addr_expr): Adjust.\n+\t(fold_addr_expr): Remove.\n+\t(fold_unary): Use build_fold_addr_expr.\n+\t(fold_comparison): Likewise.\n+\t(split_address_to_core_and_offset): Likewise.\n+\t* coverage.c (tree_coverage_counter_addr): Mark the array decl\n+\tTREE_ADDRESSABLE.\n+\t* gimplify.c (mark_addressable): Do not exclude RESULT_DECLs.\n+\t(gimplify_modify_expr_to_memcpy): Mark source and destination\n+\taddressable.\n+\t* omp-low.c (create_omp_child_function): Mark the object decl\n+\tTREE_ADDRESSABLE.\n+\t(lower_rec_input_clauses): Mark the var we take the address of\n+\tTREE_ADDRESSABLE.\n+\t(lower_omp_taskreg): Mark the sender decl TREE_ADDRESSABLE.\n+\n 2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/39315"}]}