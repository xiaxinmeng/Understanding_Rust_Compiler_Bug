{"sha": "6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4ZWQzOGU3ZGE5M2QxYzE0MmI1ZTFkYTFjODY3OTJlNDgwZDFiOA==", "commit": {"author": {"name": "Keith Besaw", "email": "kbesaw@us.ibm.com", "date": "2005-09-06T11:09:01Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2005-09-06T11:09:01Z"}, "message": "Os-vect-95.c: New test.\n\n        * gcc.dg/vect/Os-vect-95.c: New test.\n        * gcc.dg/vect/vect-95.c: Same.\n\nFrom-SVN: r103942", "tree": {"sha": "e3bd2ce388e30685da4c374d3c88a9b08be1367d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3bd2ce388e30685da4c374d3c88a9b08be1367d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/comments", "author": null, "committer": null, "parents": [{"sha": "c12cc93047bf59f210231a102df277dad6ad2ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12cc93047bf59f210231a102df277dad6ad2ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12cc93047bf59f210231a102df277dad6ad2ab1"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "2d8c0ffc9e5b12e1a7f6f4f8156b58982268c10b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "patch": "@@ -1,3 +1,8 @@\n+2005-09-06  Keith Besaw  <kbesaw@us.ibm.com>\n+\n+\t* gcc.dg/vect/Os-vect-95.c: New test.\n+\t* gcc.dg/vect/vect-95.c: Same.\n+\n 2005-09-06  Keith Besaw  <kbesaw@us.ibm.com>\n \n \t* gcc.dg/vect/vect-29.c: Update xfail testing."}, {"sha": "7b57d0d915379097465748b2458359f261717640", "filename": "gcc/testsuite/gcc.dg/vect/Os-vect-95.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FOs-vect-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FOs-vect-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FOs-vect-95.c?ref=6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (float *pd, float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+      if (pd[i] != 5.0)\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n, float * __restrict__ pd, float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+      pd[i] = 5.0;\n+    }\n+\n+  bar (pd,pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat d[N+1];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (N,&d[1],a,b,c);\n+  main1 (N-2,&d[1],a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "149a350507639d8a0514cb9ba9cdf140f3e13630", "filename": "gcc/testsuite/gcc.dg/vect/vect-95.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8ed38e7da93d1c142b5e1da1c86792e480d1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c?ref=6e8ed38e7da93d1c142b5e1da1c86792e480d1b8", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (float *pd, float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+      if (pd[i] != 5.0)\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n, float * __restrict__ pd, float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+      pd[i] = 5.0;\n+    }\n+\n+  bar (pd,pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat d[N+1];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (N,&d[1],a,b,c);\n+  main1 (N-2,&d[1],a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+\n+/* For targets that support unaligned loads we version for the two unaligned stores and\n+   generate misaligned accesses for the loads. For targets that don't support unaligned\n+   loads we version for all four accesses.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { xfail vect_no_align } } } */\n+/*  { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target vect_no_align } } }\n+/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 4 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}