{"sha": "ba3ba492cd3434b1b05035d569d3ec5fc893b746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEzYmE0OTJjZDM0MzRiMWIwNTAzNWQ1NjlkM2VjNWZjODkzYjc0Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-08-20T06:11:15Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-08-20T06:11:15Z"}, "message": "match.c (intrinsic_operators): Make static.\n\n\n\t* match.c (intrinsic_operators): Make static.\n\t(gfc_op2string): New function for converting a gfc_intrinsic_op to\n\tto a \"const char*\", replacing the macro of the same name.\n\t* gfortran.h (intrinsic_operators): Delete prototype.\n\t(gfc_op2string): Replace macro with function prototype.\n\nFrom-SVN: r127636", "tree": {"sha": "c1ec8e45db267e27239c81f128d9ecdc098c74c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ec8e45db267e27239c81f128d9ecdc098c74c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba3ba492cd3434b1b05035d569d3ec5fc893b746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3ba492cd3434b1b05035d569d3ec5fc893b746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3ba492cd3434b1b05035d569d3ec5fc893b746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3ba492cd3434b1b05035d569d3ec5fc893b746/comments", "author": null, "committer": null, "parents": [{"sha": "0e7f61313e3f7194e4e516efa96d731618527a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7f61313e3f7194e4e516efa96d731618527a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7f61313e3f7194e4e516efa96d731618527a86"}], "stats": {"total": 93, "additions": 84, "deletions": 9}, "files": [{"sha": "9866466d7081e1b88546d83ef8e152098d3720a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ba492cd3434b1b05035d569d3ec5fc893b746/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ba492cd3434b1b05035d569d3ec5fc893b746/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ba3ba492cd3434b1b05035d569d3ec5fc893b746", "patch": "@@ -1,3 +1,11 @@\n+2007-08-19  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* match.c (intrinsic_operators): Make static.\n+\t(gfc_op2string): New function for converting a gfc_intrinsic_op to\n+\tto a \"const char*\", replacing the macro of the same name.\n+\t* gfortran.h (intrinsic_operators): Delete prototype.\n+\t(gfc_op2string): Replace macro with function prototype.\n+\n 2007-08-18  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.h (gfc_is_intrinsic_typename): Add declaration."}, {"sha": "11d7adce8f72c09271f21c9bda7731ac1aba05df", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ba492cd3434b1b05035d569d3ec5fc893b746/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ba492cd3434b1b05035d569d3ec5fc893b746/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ba3ba492cd3434b1b05035d569d3ec5fc893b746", "patch": "@@ -209,10 +209,6 @@ typedef enum\n gfc_intrinsic_op;\n \n \n-/* Strings for all intrinsic operators.  */\n-extern mstring intrinsic_operators[];\n-\n-\n /* This macro is the number of intrinsic operators that exist.\n    Assumptions are made about the numbering of the interface_op enums.  */\n #define GFC_INTRINSIC_OPS GFC_INTRINSIC_END\n@@ -1962,10 +1958,7 @@ void gfc_clear_ts (gfc_typespec *);\n FILE *gfc_open_file (const char *);\n const char *gfc_basic_typename (bt);\n const char *gfc_typename (gfc_typespec *);\n-\n-#define gfc_op2string(OP) (OP == INTRINSIC_ASSIGN ? \\\n-\t\t\t   \"=\" : gfc_code2string (intrinsic_operators, OP))\n-\n+const char *gfc_op2string (gfc_intrinsic_op);\n const char *gfc_code2string (const mstring *, int);\n int gfc_string2code (const mstring *, const char *);\n const char *gfc_intent_string (sym_intent);"}, {"sha": "67fbd4fc503df91646f96cfe9ec4926db555d033", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ba492cd3434b1b05035d569d3ec5fc893b746/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ba492cd3434b1b05035d569d3ec5fc893b746/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=ba3ba492cd3434b1b05035d569d3ec5fc893b746", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n    unary operators /must/ precede the binary plus and minus, or\n    the expression parser breaks.  */\n \n-mstring intrinsic_operators[] = {\n+static mstring intrinsic_operators[] = {\n     minit (\"+\", INTRINSIC_UPLUS),\n     minit (\"-\", INTRINSIC_UMINUS),\n     minit (\"+\", INTRINSIC_PLUS),\n@@ -60,6 +60,80 @@ mstring intrinsic_operators[] = {\n     minit (NULL, INTRINSIC_NONE)\n };\n \n+/* For debugging and diagnostic purposes.  Return the textual representation\n+   of the intrinsic operator OP.  */\n+const char *\n+gfc_op2string (gfc_intrinsic_op op)\n+{\n+  switch (op)\n+    {\n+    case INTRINSIC_UPLUS:\n+    case INTRINSIC_PLUS:\n+      return \"+\";\n+\n+    case INTRINSIC_UMINUS:\n+    case INTRINSIC_MINUS:\n+      return \"-\";\n+\n+    case INTRINSIC_POWER:\n+      return \"**\";\n+    case INTRINSIC_CONCAT:\n+      return \"//\";\n+    case INTRINSIC_TIMES:\n+      return \"*\";\n+    case INTRINSIC_DIVIDE:\n+      return \"/\";\n+\n+    case INTRINSIC_AND:\n+      return \".and.\";\n+    case INTRINSIC_OR:\n+      return \".or.\";\n+    case INTRINSIC_EQV:\n+      return \".eqv.\";\n+    case INTRINSIC_NEQV:\n+      return \".neqv.\";\n+\n+    case INTRINSIC_EQ_OS:\n+      return \".eq.\";\n+    case INTRINSIC_EQ:\n+      return \"==\";\n+    case INTRINSIC_NE_OS:\n+      return \".ne.\";\n+    case INTRINSIC_NE:\n+      return \"/=\";\n+    case INTRINSIC_GE_OS:\n+      return \".ge.\";\n+    case INTRINSIC_GE:\n+      return \">=\";\n+    case INTRINSIC_LE_OS:\n+      return \".le.\";\n+    case INTRINSIC_LE:\n+      return \"<=\";\n+    case INTRINSIC_LT_OS:\n+      return \".lt.\";\n+    case INTRINSIC_LT:\n+      return \"<\";\n+    case INTRINSIC_GT_OS:\n+      return \".gt.\";\n+    case INTRINSIC_GT:\n+      return \">\";\n+    case INTRINSIC_NOT:\n+      return \".not.\";\n+\n+    case INTRINSIC_ASSIGN:\n+      return \"=\";\n+\n+    case INTRINSIC_PARENTHESES:\n+      return \"parens\";\n+\n+    default:\n+      break;\n+    }\n+\n+  gfc_internal_error (\"gfc_op2string(): Bad code\");\n+  /* Not reached.  */\n+}\n+\n \n /******************** Generic matching subroutines ************************/\n "}]}