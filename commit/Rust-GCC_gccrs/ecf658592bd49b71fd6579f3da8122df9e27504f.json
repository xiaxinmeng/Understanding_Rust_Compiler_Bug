{"sha": "ecf658592bd49b71fd6579f3da8122df9e27504f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNmNjU4NTkyYmQ0OWI3MWZkNjU3OWYzZGE4MTIyZGY5ZTI3NTA0Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-09T17:53:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-09T17:53:12Z"}, "message": "pt.c (convert_nontype_argument): Only integral arguments get early folding.\n\n\t* pt.c (convert_nontype_argument): Only integral arguments\n\tget early folding.\n\nFrom-SVN: r181219", "tree": {"sha": "568b2c3490f6b046a964b6ced5a820cdcb4888f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568b2c3490f6b046a964b6ced5a820cdcb4888f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecf658592bd49b71fd6579f3da8122df9e27504f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf658592bd49b71fd6579f3da8122df9e27504f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf658592bd49b71fd6579f3da8122df9e27504f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf658592bd49b71fd6579f3da8122df9e27504f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78d16361e1d3052e65d18229d6919d15d7bd21ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d16361e1d3052e65d18229d6919d15d7bd21ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d16361e1d3052e65d18229d6919d15d7bd21ff"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "095f671f51e9e84fbcb7ab023200dd87d7a7b617", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf658592bd49b71fd6579f3da8122df9e27504f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf658592bd49b71fd6579f3da8122df9e27504f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ecf658592bd49b71fd6579f3da8122df9e27504f", "patch": "@@ -1,5 +1,8 @@\n 2011-11-09  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (convert_nontype_argument): Only integral arguments\n+\tget early folding.\n+\n \t* parser.c (cp_parser_alias_declaration): Don't do semantic\n \tprocessing if parsing failed.\n "}, {"sha": "a804fda494ac23bac8441c1cfd5ddea89c1a98f4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf658592bd49b71fd6579f3da8122df9e27504f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf658592bd49b71fd6579f3da8122df9e27504f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ecf658592bd49b71fd6579f3da8122df9e27504f", "patch": "@@ -5681,10 +5681,24 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n       && (TYPE_PTR_P (type) || TYPE_PTR_TO_MEMBER_P (type)))\n     expr = convert (type, expr);\n \n-  /* In C++11, non-type template arguments can be arbitrary constant\n-     expressions.  But don't fold a PTRMEM_CST to a CONSTRUCTOR yet.  */\n-  if (cxx_dialect >= cxx0x && TREE_CODE (expr) != PTRMEM_CST)\n-    expr = maybe_constant_value (expr);\n+  /* In C++11, integral or enumeration non-type template arguments can be\n+     arbitrary constant expressions.  Pointer and pointer to\n+     member arguments can be general constant expressions that evaluate\n+     to a null value, but otherwise still need to be of a specific form.  */\n+  if (cxx_dialect >= cxx0x)\n+    {\n+      if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+\texpr = maybe_constant_value (expr);\n+      else if (TYPE_PTR_P (type)\n+\t       || (TYPE_PTR_TO_MEMBER_P (type)\n+\t\t   && TREE_CODE (expr) != PTRMEM_CST))\n+\t{\n+\t  tree folded = maybe_constant_value (expr);\n+\t  if (TYPE_PTR_P (type) ? integer_zerop (folded)\n+\t      : null_member_pointer_value_p (folded))\n+\t    expr = folded;\n+\t}\n+    }\n \n   /* HACK: Due to double coercion, we can get a\n      NOP_EXPR<REFERENCE_TYPE>(ADDR_EXPR<POINTER_TYPE> (arg)) here,"}]}