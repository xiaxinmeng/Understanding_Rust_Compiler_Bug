{"sha": "727efd27da90fe09ed393c7bb44bba071ae0e0d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3ZWZkMjdkYTkwZmUwOWVkMzkzYzdiYjQ0YmJhMDcxYWUwZTBkMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-12T12:44:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-26T22:17:49Z"}, "message": "Linux/i386: Remove SUBTARGET_FRAME_POINTER_REQUIRED\n\nconfig/i386/gnu-user.h has\n\n #define SUBTARGET_FRAME_POINTER_REQUIRED crtl->profile\n\nix86_frame_pointer_required() has\n\n  /* Several x86 os'es need a frame pointer for other reasons,\n     usually pertaining to setjmp.  */\n  if (SUBTARGET_FRAME_POINTER_REQUIRED)\n    return true;\n...\n\n  if (crtl->profile && !flag_fentry)\n    return true;\n\nA frame pointer is needed only for -pg, not for -mfentry -pg.  Remove\nSUBTARGET_FRAME_POINTER_REQUIRED from gnu-user.h to make i386 GCC behave\nthe same as x86-64 GCC.  This fixes\n\nFAIL: gcc.target/i386/pr93492-3.c scan-assembler \\t.cfi_startproc\\n\\tendbr(32|64)\\n.*.LPFE1:\\n\\tnop\\n1:\\tcall\\t__fentry__\\n\\tret\\n\nFAIL: gcc.target/i386/pr93492-5.c scan-assembler \\t.cfi_startproc\\n.*.LPFE1:\\n\\tnop\\n1:\\tcall\\t__fentry__\\n\\tret\\n\n\non Linux/i386.\n\n\tPR target/95655\n\t* config/i386/gnu-user.h (SUBTARGET_FRAME_POINTER_REQUIRED):\n\tRemoved.\n\t* config/i386/i386.c (ix86_frame_pointer_required): Update\n\tcomments.", "tree": {"sha": "87ff43981c07e1902048cdd0d14878d32dc39fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ff43981c07e1902048cdd0d14878d32dc39fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/727efd27da90fe09ed393c7bb44bba071ae0e0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727efd27da90fe09ed393c7bb44bba071ae0e0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727efd27da90fe09ed393c7bb44bba071ae0e0d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727efd27da90fe09ed393c7bb44bba071ae0e0d3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e90d3d4cb51fd0fae7b2dbd4bab1db26d6676e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e90d3d4cb51fd0fae7b2dbd4bab1db26d6676e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e90d3d4cb51fd0fae7b2dbd4bab1db26d6676e"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "6ec5a114270c1b67b77f512142df02ddd3eadc25", "filename": "gcc/config/i386/gnu-user.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727efd27da90fe09ed393c7bb44bba071ae0e0d3/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727efd27da90fe09ed393c7bb44bba071ae0e0d3/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user.h?ref=727efd27da90fe09ed393c7bb44bba071ae0e0d3", "patch": "@@ -39,12 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef MCOUNT_NAME\n #define MCOUNT_NAME \"mcount\"\n \n-/* The GLIBC version of mcount for the x86 assumes that there is a\n-   frame, so we cannot allow profiling without a frame pointer.  */\n-\n-#undef SUBTARGET_FRAME_POINTER_REQUIRED\n-#define SUBTARGET_FRAME_POINTER_REQUIRED crtl->profile\n-\n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n  "}, {"sha": "5c373c091ce82d6563de0834e90f0b760286af7a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727efd27da90fe09ed393c7bb44bba071ae0e0d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727efd27da90fe09ed393c7bb44bba071ae0e0d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=727efd27da90fe09ed393c7bb44bba071ae0e0d3", "patch": "@@ -5267,6 +5267,8 @@ ix86_frame_pointer_required (void)\n \t  || ix86_current_function_calls_tls_descriptor))\n     return true;\n \n+  /* Several versions of mcount for the x86 assumes that there is a\n+     frame, so we cannot allow profiling without a frame pointer.  */\n   if (crtl->profile && !flag_fentry)\n     return true;\n "}]}