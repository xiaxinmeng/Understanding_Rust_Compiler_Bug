{"sha": "fccab17eadb0b80031502a66403aa9541d531ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjYWIxN2VhZGIwYjgwMDMxNTAyYTY2NDAzYWE5NTQxZDUzMWNlOQ==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2003-12-01T17:53:10Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2003-12-01T17:53:10Z"}, "message": "re PR rtl-optimization/13024 (gcj can't build current rhug)\n\nPR optimization/13024\n* toplev.c (rest_of_handle_new_regalloc): Remove rebuild_notes\nparameter.\n(rest_of_handle_old_regalloc): Likewise.  Add rebuild_notes\ndeclaration.  Rebuild jump labels following local_alloc if necessary.\n(rest_of_compilation): Remove rebuild_label_notes_after_reload\ndeclaration.  Don't pass rebuild_notes parameter to\nrest_of_handle_new_regalloc and rest_of_handle_old_regalloc.\nDon't rebuild jump labels.\n\nFrom-SVN: r74113", "tree": {"sha": "005d5e86d024919a81e7b140971c58373890eb19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005d5e86d024919a81e7b140971c58373890eb19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fccab17eadb0b80031502a66403aa9541d531ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccab17eadb0b80031502a66403aa9541d531ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccab17eadb0b80031502a66403aa9541d531ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccab17eadb0b80031502a66403aa9541d531ce9/comments", "author": null, "committer": null, "parents": [{"sha": "095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "fbfad2b250cb9e3ddf5b28f1b751217b1b6fd859", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccab17eadb0b80031502a66403aa9541d531ce9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccab17eadb0b80031502a66403aa9541d531ce9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fccab17eadb0b80031502a66403aa9541d531ce9", "patch": "@@ -1,3 +1,15 @@\n+2003-12-01  Jeff Sturm  <jsturm@one-point.com>\n+\n+\tPR optimization/13024\n+\t* toplev.c (rest_of_handle_new_regalloc): Remove rebuild_notes\n+\tparameter.\n+\t(rest_of_handle_old_regalloc): Likewise.  Add rebuild_notes\n+\tdeclaration.  Rebuild jump labels following local_alloc if necessary.\n+\t(rest_of_compilation): Remove rebuild_label_notes_after_reload\n+\tdeclaration.  Don't pass rebuild_notes parameter to\n+\trest_of_handle_new_regalloc and rest_of_handle_old_regalloc.\n+\tDon't rebuild jump labels.\n+\n 2003-12-01  Jeff Law  <law@redhat.com>\n \n \t* flow.c (count_or_remove_death_notes_bb): New.  Extracted from"}, {"sha": "2956ac6a8364cb3f82ca94d28b5a248ede6adcd2", "filename": "gcc/toplev.c", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccab17eadb0b80031502a66403aa9541d531ce9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccab17eadb0b80031502a66403aa9541d531ce9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fccab17eadb0b80031502a66403aa9541d531ce9", "patch": "@@ -146,8 +146,8 @@ static void rest_of_handle_regmove (tree, rtx);\n static void rest_of_handle_sched (tree, rtx);\n static void rest_of_handle_sched2 (tree, rtx);\n #endif\n-static bool rest_of_handle_new_regalloc (tree, rtx, int *);\n-static bool rest_of_handle_old_regalloc (tree, rtx, int *);\n+static bool rest_of_handle_new_regalloc (tree, rtx);\n+static bool rest_of_handle_old_regalloc (tree, rtx);\n static void rest_of_handle_regrename (tree, rtx);\n static void rest_of_handle_reorder_blocks (tree, rtx);\n #ifdef STACK_REGS\n@@ -2166,7 +2166,7 @@ rest_of_handle_machine_reorg (tree decl, rtx insns)\n /* Run new register allocator.  Return TRUE if we must exit\n    rest_of_compilation upon return.  */\n static bool\n-rest_of_handle_new_regalloc (tree decl, rtx insns, int *rebuild_notes)\n+rest_of_handle_new_regalloc (tree decl, rtx insns)\n {\n   int failure;\n \n@@ -2205,17 +2205,17 @@ rest_of_handle_new_regalloc (tree decl, rtx insns, int *rebuild_notes)\n     return true;\n \n   reload_completed = 1;\n-  *rebuild_notes = 0;\n \n   return false;\n }\n \n /* Run old register allocator.  Return TRUE if we must exit\n    rest_of_compilation upon return.  */\n static bool\n-rest_of_handle_old_regalloc (tree decl, rtx insns, int *rebuild_notes)\n+rest_of_handle_old_regalloc (tree decl, rtx insns)\n {\n   int failure;\n+  int rebuild_notes;\n \n   /* Allocate the reg_renumber array.  */\n   allocate_reg_info (max_regno, FALSE, TRUE);\n@@ -2226,10 +2226,23 @@ rest_of_handle_old_regalloc (tree decl, rtx insns, int *rebuild_notes)\n   allocate_initial_values (reg_equiv_memory_loc);\n \n   regclass (insns, max_reg_num (), rtl_dump_file);\n-  *rebuild_notes = local_alloc ();\n+  rebuild_notes = local_alloc ();\n \n   timevar_pop (TV_LOCAL_ALLOC);\n \n+  /* Local allocation may have turned an indirect jump into a direct\n+     jump.  If so, we must rebuild the JUMP_LABEL fields of jumping\n+     instructions.  */\n+  if (rebuild_notes)\n+    {\n+      timevar_push (TV_JUMP);\n+\n+      rebuild_jump_labels (insns);\n+      purge_all_dead_edges (0);\n+\n+      timevar_pop (TV_JUMP);\n+    }\n+\n   if (dump_file[DFI_lreg].enabled)\n     {\n       timevar_push (TV_DUMP);\n@@ -3056,7 +3069,6 @@ void\n rest_of_compilation (tree decl)\n {\n   rtx insns;\n-  int rebuild_label_notes_after_reload;\n \n   timevar_push (TV_REST_OF_COMPILATION);\n \n@@ -3360,14 +3372,12 @@ rest_of_compilation (tree decl)\n \n   if (flag_new_regalloc)\n     {\n-      if (rest_of_handle_new_regalloc (decl, insns,\n-\t\t\t\t       &rebuild_label_notes_after_reload))\n+      if (rest_of_handle_new_regalloc (decl, insns))\n \tgoto exit_rest_of_compilation;\n     }\n   else\n     {\n-      if (rest_of_handle_old_regalloc (decl, insns,\n-\t\t\t\t       &rebuild_label_notes_after_reload))\n+      if (rest_of_handle_old_regalloc (decl, insns))\n \tgoto exit_rest_of_compilation;\n     }\n \n@@ -3383,19 +3393,6 @@ rest_of_compilation (tree decl)\n       timevar_pop (TV_RELOAD_CSE_REGS);\n     }\n \n-  /* Register allocation and reloading may have turned an indirect jump into\n-     a direct jump.  If so, we must rebuild the JUMP_LABEL fields of\n-     jumping instructions.  */\n-  if (rebuild_label_notes_after_reload)\n-    {\n-      timevar_push (TV_JUMP);\n-\n-      rebuild_jump_labels (insns);\n-      purge_all_dead_edges (0);\n-\n-      timevar_pop (TV_JUMP);\n-    }\n-\n   close_dump_file (DFI_postreload, print_rtl_with_bb, insns);\n \n   /* Re-create the death notes which were deleted during reload.  */"}]}