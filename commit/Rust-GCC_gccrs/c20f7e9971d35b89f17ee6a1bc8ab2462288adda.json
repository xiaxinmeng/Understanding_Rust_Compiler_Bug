{"sha": "c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIwZjdlOTk3MWQzNWI4OWYxN2VlNmExYmM4YWIyNDYyMjg4YWRkYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-12-11T18:40:55Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-12-11T18:40:55Z"}, "message": "PR c++/92878 - Parenthesized init of aggregates in new-expression.\n\nVille pointed out that our paren init of aggregates doesn't work for\n\n  auto a = new A(1, 2, 3);\n\nand I think it should:\n\nA new-expression that creates an object of type T initializes that object\nas follows:\n...\n-- Otherwise, the new-initializer is interpreted according to the\n   initialization rules of [dcl.init] for direct-initialization.\n\nso I think it follows that we should perform dcl.init#17.6.2.2.\n\nThis doesn't work with new[]; we have:\n  error (\"parenthesized initializer in array new\");\n\n\t* init.c (build_new_1): Handle parenthesized initialization of\n\taggregates in new-expression.\n\n\t* g++.dg/cpp2a/paren-init20.C: New test.\n\nFrom-SVN: r279240", "tree": {"sha": "eb39bd0f839f4939287f6b18c8f54fcb813f932f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb39bd0f839f4939287f6b18c8f54fcb813f932f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc3b6728a21185a418f81bed6142fcdec565cd89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3b6728a21185a418f81bed6142fcdec565cd89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3b6728a21185a418f81bed6142fcdec565cd89"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "5a2ba31a6e037f2a633629f65c343b3994451bb2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "patch": "@@ -1,3 +1,9 @@\n+2019-12-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92878 - Parenthesized init of aggregates in new-expression.\n+\t* init.c (build_new_1): Handle parenthesized initialization of\n+\taggregates in new-expression.\n+\n 2019-12-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92105 - decltype(decltype) error cascade."}, {"sha": "6f4c918d5604e3311f33a435c4e2cb8ed4d87b99", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "patch": "@@ -3608,10 +3608,22 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t      tree ie;\n \n \t      /* We are processing something like `new int (10)', which\n-\t\t means allocate an int, and initialize it with 10.  */\n+\t\t means allocate an int, and initialize it with 10.\n \n-\t      ie = build_x_compound_expr_from_vec (*init, \"new initializer\",\n-\t\t\t\t\t\t   complain);\n+\t\t In C++20, also handle `new A(1, 2)'.  */\n+\t      if (cxx_dialect >= cxx2a\n+\t\t  && AGGREGATE_TYPE_P (type)\n+\t\t  && (*init)->length () > 1)\n+\t\t{\n+\t\t  ie = build_tree_list_vec (*init);\n+\t\t  ie = build_constructor_from_list (init_list_type_node, ie);\n+\t\t  CONSTRUCTOR_IS_DIRECT_INIT (ie) = true;\n+\t\t  CONSTRUCTOR_IS_PAREN_INIT (ie) = true;\n+\t\t  ie = digest_init (type, ie, complain);\n+\t\t}\n+\t      else\n+\t\tie = build_x_compound_expr_from_vec (*init, \"new initializer\",\n+\t\t\t\t\t\t     complain);\n \t      init_expr = cp_build_modify_expr (input_location, init_expr,\n \t\t\t\t\t\tINIT_EXPR, ie, complain);\n \t    }"}, {"sha": "aac5a76823c489b8f8e611fd55b04f42c2df79d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "patch": "@@ -1,3 +1,8 @@\n+2019-12-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92878 - Parenthesized init of aggregates in new-expression.\n+\t* g++.dg/cpp2a/paren-init20.C: New test.\n+\n 2019-12-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/79221"}, {"sha": "05da7604686a87c31f2a0620b4bca6646606d123", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init20.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c20f7e9971d35b89f17ee6a1bc8ab2462288adda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init20.C?ref=c20f7e9971d35b89f17ee6a1bc8ab2462288adda", "patch": "@@ -0,0 +1,54 @@\n+// PR c++/92878 - Parenthesized init of aggregates in new-expression.\n+// { dg-do compile { target c++2a } }\n+// Test new TYPE(...).\n+\n+int f ();\n+\n+struct A\n+{\n+  int a;\n+  int b;\n+};\n+\n+void\n+fn_A ()\n+{\n+  int i = 0;\n+  auto y = new A(1, 2);\n+  auto x = new A(++i, ++i);\n+  auto z = new A(1, { ++i });\n+  auto u = new A(1, f());\n+}\n+\n+struct B\n+{\n+  int a;\n+  int b;\n+  int c = 42;\n+};\n+\n+void\n+fn_B ()\n+{\n+  int i = 0;\n+  auto y = new B(1, 2);\n+  auto x = new B(++i, ++i);\n+  auto z = new B(1, { ++i });\n+  auto u = new B(1, f());\n+}\n+\n+struct C\n+{\n+  int a;\n+  int b = 10;\n+};\n+\n+void\n+fn_C ()\n+{\n+  int i = 0;\n+  auto y = new C(1);\n+  auto x = new C(++i);\n+  auto z = new C({ ++i });\n+  auto u = new C(f());\n+}"}]}