{"sha": "4431102bf04d1b55354ce0543e852e0bc5d8970d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzMTEwMmJmMDRkMWI1NTM1NGNlMDU0M2U4NTJlMGJjNWQ4OTcwZA==", "commit": {"author": {"name": "Andreas Simbuerger", "email": "simbuerg@fim.uni-passau.de", "date": "2010-08-11T20:30:34Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:30:34Z"}, "message": "Adapt to new CLAST structure within upstream CLooG version and retain compatibility to CLooG Legacy.\n\n2010-07-27  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n\n\t* graphite-clast-to-gimple.c (clast_name_to_gcc): Parameter\n\ttype of NAME now depends on used CLooG version.\n\t(clast_to_gcc_expression): Replace expr_* with clast_expr_*.\n\t(gcc_type_for_clast_expr): Same.\n\t(print_clast_stmt): Replace pprint with clast_pprint.\n\t* graphite-cloog-compat.h: Provide compatibility macros for\n\tCLooG Legacy.\n\t(clast_name_p): New.\n\t(clast_expr_term): New.\n\t(clast_expr_red): New.\n\t(clast_expr_bin): New.\n\t(clast_pprint): New.\n\nFrom-SVN: r163163", "tree": {"sha": "c6a0121bfdeac2cfa03dfa292211e51e123d86d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6a0121bfdeac2cfa03dfa292211e51e123d86d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4431102bf04d1b55354ce0543e852e0bc5d8970d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4431102bf04d1b55354ce0543e852e0bc5d8970d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4431102bf04d1b55354ce0543e852e0bc5d8970d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4431102bf04d1b55354ce0543e852e0bc5d8970d/comments", "author": {"login": "simbuerg", "id": 598281, "node_id": "MDQ6VXNlcjU5ODI4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/598281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simbuerg", "html_url": "https://github.com/simbuerg", "followers_url": "https://api.github.com/users/simbuerg/followers", "following_url": "https://api.github.com/users/simbuerg/following{/other_user}", "gists_url": "https://api.github.com/users/simbuerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/simbuerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simbuerg/subscriptions", "organizations_url": "https://api.github.com/users/simbuerg/orgs", "repos_url": "https://api.github.com/users/simbuerg/repos", "events_url": "https://api.github.com/users/simbuerg/events{/privacy}", "received_events_url": "https://api.github.com/users/simbuerg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac3b070a2f7c806f1fdd99c409af0e687949ad27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3b070a2f7c806f1fdd99c409af0e687949ad27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3b070a2f7c806f1fdd99c409af0e687949ad27"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "2a89f4739f323b2bd062127444029276ffe9c681", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4431102bf04d1b55354ce0543e852e0bc5d8970d", "patch": "@@ -1,3 +1,18 @@\n+2010-08-02  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* graphite-clast-to-gimple.c (clast_name_to_gcc): Parameter\n+\ttype of NAME now depends on used CLooG version.\n+\t(clast_to_gcc_expression): Replace expr_* with clast_expr_*.\n+\t(gcc_type_for_clast_expr): Same.\n+\t(print_clast_stmt): Replace pprint with clast_pprint.\n+\t* graphite-cloog-compat.h: Provide compatibility macros for\n+\tCLooG Legacy.\n+\t(clast_name_p): New.\n+\t(clast_expr_term): New.\n+\t(clast_expr_red): New.\n+\t(clast_expr_bin): New.\n+\t(clast_pprint): New.\n+\n 2010-08-02  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-clast-to-gimple.c (set_cloog_options): Make CLooG options"}, {"sha": "7e12177c2bca351232265f37e60a26fbee322b20", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=4431102bf04d1b55354ce0543e852e0bc5d8970d", "patch": "@@ -1,3 +1,18 @@\n+2010-07-27  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* graphite-clast-to-gimple.c (clast_name_to_gcc): Parameter\n+\ttype of NAME now depends on used CLooG version.\n+\t(clast_to_gcc_expression): Replace expr_* with clast_expr_*.\n+\t(gcc_type_for_clast_expr): Same.\n+\t(print_clast_stmt): Replace pprint with clast_pprint.\n+\t* graphite-cloog-compat.h: Provide compatibility macros for\n+\tCLooG Legacy.\n+\t(clast_name_p): New.\n+\t(clast_expr_term): New.\n+\t(clast_expr_red): New.\n+\t(clast_expr_bin): New.\n+\t(clast_pprint): New.\n+\n 2010-07-27  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-clast-to-gimple.c (set_cloog_options): Make CLooG options"}, {"sha": "29c8ffb5169d1b1321c236c48b001a279120c2a4", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=4431102bf04d1b55354ce0543e852e0bc5d8970d", "patch": "@@ -97,12 +97,18 @@ new_clast_name_index (const char *name, int index)\n    SCATTERING_DIMENSIONS vector.  */\n \n static inline int\n-clast_name_to_index (const char *name, htab_t index_table)\n+clast_name_to_index (clast_name_p name, htab_t index_table)\n {\n   struct clast_name_index tmp;\n   PTR *slot;\n \n+#ifdef CLOOG_ORG\n+  gcc_assert (name->type == clast_expr_name);\n+  tmp.name = ((const struct clast_name*) name)->name;\n+#else\n   tmp.name = name;\n+#endif\n+\n   slot = htab_find_slot (index_table, &tmp, NO_INSERT);\n \n   if (slot && *slot)\n@@ -165,7 +171,7 @@ newivs_to_depth_to_newiv (VEC (tree, heap) *newivs, int depth)\n    Cloog representation.  */\n \n static tree\n-clast_name_to_gcc (const char *name, sese region, VEC (tree, heap) *newivs,\n+clast_name_to_gcc (clast_name_p name, sese region, VEC (tree, heap) *newivs,\n \t\t   htab_t newivs_index, htab_t params_index)\n {\n   int index;\n@@ -267,7 +273,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n {\n   switch (e->type)\n     {\n-    case expr_term:\n+    case clast_expr_term:\n       {\n \tstruct clast_term *t = (struct clast_term *) e;\n \n@@ -319,7 +325,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n \t  return gmp_cst_to_tree (type, t->val);\n       }\n \n-    case expr_red:\n+    case clast_expr_red:\n       {\n         struct clast_reduction *r = (struct clast_reduction *) e;\n \n@@ -346,7 +352,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n         break;\n       }\n \n-    case expr_bin:\n+    case clast_expr_bin:\n       {\n \tstruct clast_binary *b = (struct clast_binary *) e;\n \tstruct clast_expr *lhs = (struct clast_expr *) b->LHS;\n@@ -485,7 +491,7 @@ gcc_type_for_clast_term (struct clast_term *t,\n \t\t\t sese region, VEC (tree, heap) *newivs,\n \t\t\t htab_t newivs_index, htab_t params_index)\n {\n-  gcc_assert (t->expr.type == expr_term);\n+  gcc_assert (t->expr.type == clast_expr_term);\n \n   if (!t->var)\n     return gcc_type_for_value (t->val);\n@@ -557,15 +563,15 @@ gcc_type_for_clast_expr (struct clast_expr *e,\n {\n   switch (e->type)\n     {\n-    case expr_term:\n+    case clast_expr_term:\n       return gcc_type_for_clast_term ((struct clast_term *) e, region,\n \t\t\t\t      newivs, newivs_index, params_index);\n \n-    case expr_red:\n+    case clast_expr_red:\n       return gcc_type_for_clast_red ((struct clast_reduction *) e, region,\n \t\t\t\t     newivs, newivs_index, params_index);\n \n-    case expr_bin:\n+    case clast_expr_bin:\n       return gcc_type_for_clast_bin ((struct clast_binary *) e, region,\n \t\t\t\t     newivs, newivs_index, params_index);\n \n@@ -1359,7 +1365,7 @@ print_clast_stmt (FILE *file, struct clast_stmt *stmt)\n {\n   CloogOptions *options = set_cloog_options ();\n \n-  pprint (file, stmt, 0, options);\n+  clast_pprint (file, stmt, 0, options);\n   cloog_options_free (options);\n }\n \n@@ -1404,7 +1410,7 @@ print_generated_program (FILE *file, scop_p scop)\n   fprintf (file, \"       )\\n\");\n \n   fprintf (file, \"       (clast: \\n\");\n-  pprint (file, pc.stmt, 0, options);\n+  clast_pprint (file, pc.stmt, 0, options);\n   fprintf (file, \"       )\\n\");\n \n   cloog_options_free (options);"}, {"sha": "8ff0e43f3d0639c21b701c9ce3465fcc6e3c70e0", "filename": "gcc/graphite-cloog-compat.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2Fgraphite-cloog-compat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4431102bf04d1b55354ce0543e852e0bc5d8970d/gcc%2Fgraphite-cloog-compat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-compat.h?ref=4431102bf04d1b55354ce0543e852e0bc5d8970d", "patch": "@@ -23,6 +23,12 @@ along with GCC; see the file COPYING3.  If not see\n #define GRAPHITE_CLOOG_COMPAT_H\n \n /* Restore compatibility to CLooG Legacy.  */\n+#ifdef CLOOG_ORG\n+typedef const struct clast_expr *clast_name_p;\n+#else\n+typedef const char *clast_name_p;\n+#endif\n+\n #ifndef CLOOG_ORG\n \n /* CloogOptions compatibility.  */\n@@ -32,6 +38,12 @@ along with GCC; see the file COPYING3.  If not see\n #define cloog_program_scatter(PROG, SCATT, OPT)\\\n   cloog_program_scatter (PROG, SCATT)\n \n+/* CLAST compatibility.  */\n+#define clast_expr_term expr_term\n+#define clast_expr_red expr_red\n+#define clast_expr_bin expr_bin\n+#define clast_pprint pprint\n+\n #endif\n \n /* Adapt CLooG accessors from CLooG legacy to"}]}