{"sha": "8866d62c0aa18090b479a2bf7495eb73b01d50d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2NmQ2MmMwYWExODA5MGI0NzlhMmJmNzQ5NWViNzNiMDFkNTBkOA==", "commit": {"author": {"name": "Alexander Fomin", "email": "alexander.fomin@intel.com", "date": "2016-01-13T14:31:13Z"}, "committer": {"name": "Alexander Fomin", "email": "afomin@gcc.gnu.org", "date": "2016-01-13T14:31:13Z"}, "message": "AVX512: Restrict default masks for prefetch gather/scatter\ninstructions.\n\ngcc/\n\n\tPR target/69228\n\t* config/i386/sse.md (define_expand \"avx512pf_gatherpf<mode>sf\"):\n\tChange first operand predicate from register_or_constm1_operand\n\tto register_operand.\n\t(define_expand \"avx512pf_gatherpf<mode>df\"): Likewise.\n\t(define_expand \"avx512pf_scatterpf<mode>sf\"): Likewise.\n\t(define_expand \"avx512pf_scatterpf<mode>df\"): Likewise.\n\t(define_insn \"*avx512pf_gatherpf<mode>sf\"): Remove.\n\t(define_insn \"*avx512pf_gatherpf<mode>df\"): Likewise.\n\t(define_insn \"*avx512pf_scatterpf<mode>sf\"): Likewise.\n\t(define_insn \"*avx512pf_scatterpf<mode>df\"): Likewise.\n\t* config/i386/i386.c (ix86_expand_builtin): Remove first operand\n\tcomparison with constm1_rtx from vec_prefetch_gen part.\n\ngcc/testsuite\n\n\tPR target/69228\n\t* gcc.target/i386/avx512pf-vscatterpf0dpd-1.c: Adjust.\n\t* gcc.target/i386/avx512pf-vscatterpf0dps-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vscatterpf0qpd-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vscatterpf0qps-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vscatterpf1dpd-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vscatterpf1dps-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vscatterpf1qpd-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vscatterpf1qps-1.c: Likewise.\n\nFrom-SVN: r232324", "tree": {"sha": "ec971f192e3a36112212ef0f421f61ba2f70265e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec971f192e3a36112212ef0f421f61ba2f70265e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8866d62c0aa18090b479a2bf7495eb73b01d50d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8866d62c0aa18090b479a2bf7495eb73b01d50d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8866d62c0aa18090b479a2bf7495eb73b01d50d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8866d62c0aa18090b479a2bf7495eb73b01d50d8/comments", "author": null, "committer": null, "parents": [{"sha": "629e47295b44d9adf01b66061dd891a25e567474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629e47295b44d9adf01b66061dd891a25e567474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629e47295b44d9adf01b66061dd891a25e567474"}], "stats": {"total": 177, "additions": 42, "deletions": 135}, "files": [{"sha": "73365bfab151761ca98060ab2728f90826839085", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,3 +1,19 @@\n+2016-01-13  Alexander Fomin <alexander.fomin@intel.com>\n+\n+\tPR target/69228\n+\t* config/i386/sse.md (define_expand \"avx512pf_gatherpf<mode>sf\"):\n+\tChange first operand predicate from register_or_constm1_operand\n+\tto register_operand.\n+\t(define_expand \"avx512pf_gatherpf<mode>df\"): Likewise.\n+\t(define_expand \"avx512pf_scatterpf<mode>sf\"): Likewise.\n+\t(define_expand \"avx512pf_scatterpf<mode>df\"): Likewise.\n+\t(define_insn \"*avx512pf_gatherpf<mode>sf\"): Remove.\n+\t(define_insn \"*avx512pf_gatherpf<mode>df\"): Likewise.\n+\t(define_insn \"*avx512pf_scatterpf<mode>sf\"): Likewise.\n+\t(define_insn \"*avx512pf_scatterpf<mode>df\"): Likewise.\n+\t* config/i386/i386.c (ix86_expand_builtin): Remove first operand\n+\tcomparison with constm1_rtx from vec_prefetch_gen part.\n+\n 2016-01-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69013"}, {"sha": "8df73b1b513d277a76ac422882a3a7752d10a99e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -41828,13 +41828,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n       op0 = fixup_modeless_constant (op0, mode0);\n \n-      if (GET_MODE (op0) == mode0\n-\t  || (GET_MODE (op0) == VOIDmode && op0 != constm1_rtx))\n+      if (GET_MODE (op0) == mode0 || GET_MODE (op0) == VOIDmode)\n \t{\n \t  if (!insn_data[icode].operand[0].predicate (op0, mode0))\n \t    op0 = copy_to_mode_reg (mode0, op0);\n \t}\n-      else if (op0 != constm1_rtx)\n+      else\n \t{\n \t  op0 = copy_to_reg (op0);\n \t  op0 = simplify_gen_subreg (mode0, op0, GET_MODE (op0), 0);"}, {"sha": "84d2b7af59b143990bfe1d6b06ab91ebd8878e38", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 116, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -15654,7 +15654,7 @@\n \n (define_expand \"avx512pf_gatherpf<mode>sf\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\")\n       (mem:<GATHER_SCATTER_SF_MEM_MODE>\n \t(match_par_dup 5\n \t  [(match_operand 2 \"vsib_address_operand\")\n@@ -15696,37 +15696,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"*avx512pf_gatherpf<mode>sf\"\n-  [(unspec\n-     [(const_int -1)\n-      (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 4 \"vsib_mem_operator\"\n-\t[(unspec:P\n-\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n-\t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n-\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n-\t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const_2_to_3_operand\" \"n\")]\n-     UNSPEC_GATHER_PREFETCH)]\n-  \"TARGET_AVX512PF\"\n-{\n-  switch (INTVAL (operands[3]))\n-    {\n-    case 3:\n-      return \"vgatherpf0<ssemodesuffix>ps\\t{%4|%4}\";\n-    case 2:\n-      return \"vgatherpf1<ssemodesuffix>ps\\t{%4|%4}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"XI\")])\n-\n ;; Packed double variants\n (define_expand \"avx512pf_gatherpf<mode>df\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\")\n       (mem:V8DF\n \t(match_par_dup 5\n \t  [(match_operand 2 \"vsib_address_operand\")\n@@ -15768,37 +15741,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"*avx512pf_gatherpf<mode>df\"\n-  [(unspec\n-     [(const_int -1)\n-      (match_operator:V8DF 4 \"vsib_mem_operator\"\n-\t[(unspec:P\n-\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n-\t    (match_operand:VI4_256_8_512 0 \"register_operand\" \"v\")\n-\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n-\t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const_2_to_3_operand\" \"n\")]\n-     UNSPEC_GATHER_PREFETCH)]\n-  \"TARGET_AVX512PF\"\n-{\n-  switch (INTVAL (operands[3]))\n-    {\n-    case 3:\n-      return \"vgatherpf0<ssemodesuffix>pd\\t{%4|%4}\";\n-    case 2:\n-      return \"vgatherpf1<ssemodesuffix>pd\\t{%4|%4}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"XI\")])\n-\n ;; Packed float variants\n (define_expand \"avx512pf_scatterpf<mode>sf\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\")\n       (mem:<GATHER_SCATTER_SF_MEM_MODE>\n \t(match_par_dup 5\n \t  [(match_operand 2 \"vsib_address_operand\")\n@@ -15842,39 +15788,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"*avx512pf_scatterpf<mode>sf\"\n-  [(unspec\n-     [(const_int -1)\n-      (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 4 \"vsib_mem_operator\"\n-\t[(unspec:P\n-\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n-\t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n-\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n-\t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const2367_operand\" \"n\")]\n-     UNSPEC_SCATTER_PREFETCH)]\n-  \"TARGET_AVX512PF\"\n-{\n-  switch (INTVAL (operands[3]))\n-    {\n-    case 3:\n-    case 7:\n-      return \"vscatterpf0<ssemodesuffix>ps\\t{%4|%4}\";\n-    case 2:\n-    case 6:\n-      return \"vscatterpf1<ssemodesuffix>ps\\t{%4|%4}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"XI\")])\n-\n ;; Packed double variants\n (define_expand \"avx512pf_scatterpf<mode>df\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\")\n       (mem:V8DF\n \t(match_par_dup 5\n \t  [(match_operand 2 \"vsib_address_operand\")\n@@ -15918,35 +15835,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"*avx512pf_scatterpf<mode>df\"\n-  [(unspec\n-     [(const_int -1)\n-      (match_operator:V8DF 4 \"vsib_mem_operator\"\n-\t[(unspec:P\n-\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n-\t    (match_operand:VI4_256_8_512 0 \"register_operand\" \"v\")\n-\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n-\t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const2367_operand\" \"n\")]\n-     UNSPEC_SCATTER_PREFETCH)]\n-  \"TARGET_AVX512PF\"\n-{\n-  switch (INTVAL (operands[3]))\n-    {\n-    case 3:\n-    case 7:\n-      return \"vscatterpf0<ssemodesuffix>pd\\t{%4|%4}\";\n-    case 2:\n-    case 6:\n-      return \"vscatterpf1<ssemodesuffix>pd\\t{%4|%4}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"XI\")])\n-\n (define_insn \"avx512er_exp2<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512"}, {"sha": "da984649aa98ae2d6e1b35945bc028a0d665ebbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,3 +1,15 @@\n+2016-01-13  Alexander Fomin <alexander.fomin@intel.com>\n+\n+\tPR target/69228\n+\t* gcc.target/i386/avx512pf-vscatterpf0dpd-1.c: Adjust.\n+\t* gcc.target/i386/avx512pf-vscatterpf0dps-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vscatterpf0qpd-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vscatterpf0qps-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vscatterpf1dpd-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vscatterpf1dps-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vscatterpf1qpd-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vscatterpf1qps-1.c: Likewise.\n+\n 2016-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/69247"}, {"sha": "5a153ea3d4cdf340512110048e0813a14479f215", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0dpd-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n #include <immintrin.h>\n \n volatile __m256i idx;"}, {"sha": "d1173a2b7f37aba9e549b51bc187a6a6402ccbf1", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0dps-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dps-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0dps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0dps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0dps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "67529e7be83e814813b17bbdce412f79b7db8812", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0qpd-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "9ff580fea4d9e5941b8729deef7f56089739e229", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0qps-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qps-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0qps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf0qps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0qps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "73a029d10a1d499feac7825c209d2c5f1eace8d5", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1dpd-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "439bc85348504de7afed9393211843689771e2eb", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1dps-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dps-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1dps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1dps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1dps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "3ae16cd2e1971de0b2f350bc2d7ac5737370761a", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1qpd-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "35cd7d3b5d38bd2c33dccb97bf00d524fd81e52b", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1qps-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8866d62c0aa18090b479a2bf7495eb73b01d50d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qps-1.c?ref=8866d62c0aa18090b479a2bf7495eb73b01d50d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1qps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vscatterpf1qps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1qps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}]}