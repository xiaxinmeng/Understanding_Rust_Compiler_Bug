{"sha": "1b83d20963c6db039c6530949db4da9581f86ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4M2QyMDk2M2M2ZGIwMzljNjUzMDk0OWRiNGRhOTU4MWY4NmNlOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-09-10T02:32:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-09-10T02:32:19Z"}, "message": "i386.c (ix86_expand_ashlsi3_const): New function to expand a left shift by an immediate constant as either an ashl...\n\n\n\t* config/i386/i386.c (ix86_expand_ashlsi3_const): New function to\n\texpand a left shift by an immediate constant as either an ashl or\n\ta sequence of additions.\n\t(ix86_split_ashldi): Use new ix86_expand_ashlsi3_const function\n\tinstead of calling gen_ashlsi3 with a constant directly.\n\nFrom-SVN: r87271", "tree": {"sha": "128d865fb09e434370de0a3bdcbdeb884d7c332d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128d865fb09e434370de0a3bdcbdeb884d7c332d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b83d20963c6db039c6530949db4da9581f86ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b83d20963c6db039c6530949db4da9581f86ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b83d20963c6db039c6530949db4da9581f86ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b83d20963c6db039c6530949db4da9581f86ce9/comments", "author": null, "committer": null, "parents": [{"sha": "903a5059b66d154ec6d064b832d896daf11aacff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a5059b66d154ec6d064b832d896daf11aacff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903a5059b66d154ec6d064b832d896daf11aacff"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "90ca63fd3ca5f9bfa98733c421539bd8ee850263", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b83d20963c6db039c6530949db4da9581f86ce9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b83d20963c6db039c6530949db4da9581f86ce9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b83d20963c6db039c6530949db4da9581f86ce9", "patch": "@@ -1,3 +1,11 @@\n+2004-09-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (ix86_expand_ashlsi3_const): New function to\n+\texpand a left shift by an immediate constant as either an ashl or\n+\ta sequence of additions.\n+\t(ix86_split_ashldi): Use new ix86_expand_ashlsi3_const function\n+\tinstead of calling gen_ashlsi3 with a constant directly.\n+\n 2004-09-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/i386/i386.c (ix86_split_long_move): When optimizing for"}, {"sha": "e034fa9ef4e148bd16f82e61a897b81b80353ad2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b83d20963c6db039c6530949db4da9581f86ce9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b83d20963c6db039c6530949db4da9581f86ce9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1b83d20963c6db039c6530949db4da9581f86ce9", "patch": "@@ -9973,6 +9973,26 @@ ix86_split_long_move (rtx operands[])\n   return;\n }\n \n+/* Helper function of ix86_split_ashldi used to generate an SImode\n+   left shift by a constant, either using a single shift or\n+   a sequence of add instructions.  */\n+\n+static void\n+ix86_expand_ashlsi3_const (rtx operand, int count)\n+{\n+  if (count == 1)\n+    emit_insn (gen_addsi3 (operand, operand, operand));\n+  else if (!optimize_size\n+\t   && count * ix86_cost->add <= ix86_cost->shift_const)\n+    {\n+      int i;\n+      for (i=0; i<count; i++)\n+\temit_insn (gen_addsi3 (operand, operand, operand));\n+    }\n+  else\n+    emit_insn (gen_ashlsi3 (operand, operand, GEN_INT (count)));\n+}\n+\n void\n ix86_split_ashldi (rtx *operands, rtx scratch)\n {\n@@ -9990,14 +10010,14 @@ ix86_split_ashldi (rtx *operands, rtx scratch)\n \t  emit_move_insn (low[0], const0_rtx);\n \n \t  if (count > 32)\n-\t    emit_insn (gen_ashlsi3 (high[0], high[0], GEN_INT (count - 32)));\n+\t    ix86_expand_ashlsi3_const (high[0], count - 32);\n \t}\n       else\n \t{\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n \t  emit_insn (gen_x86_shld_1 (high[0], low[0], GEN_INT (count)));\n-\t  emit_insn (gen_ashlsi3 (low[0], low[0], GEN_INT (count)));\n+\t  ix86_expand_ashlsi3_const (low[0], count);\n \t}\n     }\n   else"}]}