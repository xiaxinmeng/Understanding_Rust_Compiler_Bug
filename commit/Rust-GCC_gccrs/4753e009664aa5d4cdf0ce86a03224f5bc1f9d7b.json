{"sha": "4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1M2UwMDk2NjRhYTVkNGNkZjBjZTg2YTAzMjI0ZjViYzFmOWQ3Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-06-03T17:08:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-06-03T17:08:39Z"}, "message": "decl.c (check_tag_decl): Use declspecs->locations as locations in error_at and warning_at calls.\n\n/cp\n2015-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (check_tag_decl): Use declspecs->locations as locations in\n\terror_at and warning_at calls.\n\n/testsuite\n2015-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/decl-loc1.C: New.\n\t* g++.dg/cpp0x/constexpr-neg1.C: Adjust.\n\t* g++.dg/cpp0x/constexpr-object1.C: Likewise.\n\t* g++.dg/init/ctor8.C: Likewise.\n\t* g++.dg/parse/semicolon4.C: Likewise.\n\nFrom-SVN: r224097", "tree": {"sha": "c70bd393f3d77030375d7cc62d8dc9913e9116a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c70bd393f3d77030375d7cc62d8dc9913e9116a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/comments", "author": null, "committer": null, "parents": [{"sha": "7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3a9795438b33a0137b47f422a9542c5e2d7ccc"}], "stats": {"total": 88, "additions": 65, "deletions": 23}, "files": [{"sha": "2c61d5577162801f8227b55eba1ace317a450924", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -1,3 +1,8 @@\n+2015-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (check_tag_decl): Use declspecs->locations as locations in\n+\terror_at and warning_at calls.\n+\n 2015-06-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/66190"}, {"sha": "9d20b9487d253dafa4d0d2a4834b527842fd66df", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -4488,30 +4488,46 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n \n   else\n     {\n-      if (decl_spec_seq_has_spec_p (declspecs, ds_inline)\n-\t  || decl_spec_seq_has_spec_p (declspecs, ds_virtual))\n-\terror (\"%qs can only be specified for functions\",\n-\t       decl_spec_seq_has_spec_p (declspecs, ds_inline)\n-\t       ? \"inline\" : \"virtual\");\n+      if (decl_spec_seq_has_spec_p (declspecs, ds_inline))\n+\terror_at (declspecs->locations[ds_inline],\n+\t\t  \"%<inline%> can only be specified for functions\");\n+      else if (decl_spec_seq_has_spec_p (declspecs, ds_virtual))\n+\terror_at (declspecs->locations[ds_virtual],\n+\t\t  \"%<virtual%> can only be specified for functions\");\n       else if (saw_friend\n \t       && (!current_class_type\n \t\t   || current_scope () != current_class_type))\n-\terror (\"%<friend%> can only be specified inside a class\");\n+\terror_at (declspecs->locations[ds_friend],\n+\t\t  \"%<friend%> can only be specified inside a class\");\n       else if (decl_spec_seq_has_spec_p (declspecs, ds_explicit))\n-\terror (\"%<explicit%> can only be specified for constructors\");\n+\terror_at (declspecs->locations[ds_explicit],\n+\t\t  \"%<explicit%> can only be specified for constructors\");\n       else if (declspecs->storage_class)\n-\terror (\"a storage class can only be specified for objects \"\n-\t       \"and functions\");\n-      else if (decl_spec_seq_has_spec_p (declspecs, ds_const)\n-\t       || decl_spec_seq_has_spec_p (declspecs, ds_volatile)\n-\t       || decl_spec_seq_has_spec_p (declspecs, ds_restrict)\n-\t       || decl_spec_seq_has_spec_p (declspecs, ds_thread))\n-\terror (\"qualifiers can only be specified for objects \"\n-\t       \"and functions\");\n+\terror_at (declspecs->locations[ds_storage_class],\n+\t\t  \"a storage class can only be specified for objects \"\n+\t\t  \"and functions\");\n+      else if (decl_spec_seq_has_spec_p (declspecs, ds_const))\n+\terror_at (declspecs->locations[ds_const],\n+\t\t  \"%<const%> can only be specified for objects and \"\n+\t\t  \"functions\");\n+      else if (decl_spec_seq_has_spec_p (declspecs, ds_volatile))\n+\terror_at (declspecs->locations[ds_volatile],\n+\t\t  \"%<volatile%> can only be specified for objects and \"\n+\t\t  \"functions\");\n+      else if (decl_spec_seq_has_spec_p (declspecs, ds_restrict))\n+\terror_at (declspecs->locations[ds_restrict],\n+\t\t  \"%<__restrict%> can only be specified for objects and \"\n+\t\t  \"functions\");\n+      else if (decl_spec_seq_has_spec_p (declspecs, ds_thread))\n+\terror_at (declspecs->locations[ds_thread],\n+\t\t  \"%<__thread%> can only be specified for objects \"\n+\t\t  \"and functions\");\n       else if (saw_typedef)\n-\twarning (0, \"%<typedef%> was ignored in this declaration\");\n+\twarning_at (declspecs->locations[ds_typedef], 0,\n+\t\t    \"%<typedef%> was ignored in this declaration\");\n       else if (decl_spec_seq_has_spec_p (declspecs,  ds_constexpr))\n-        error (\"%<constexpr%> cannot be used for type declarations\");\n+        error_at (declspecs->locations[ds_constexpr],\n+\t\t  \"%<constexpr%> cannot be used for type declarations\");\n     }\n \n   if (declspecs->attributes && warn_attributes && declared_type)"}, {"sha": "53c7018f3e078da2c12be56be77dfde8c5496d41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -1,3 +1,11 @@\n+2015-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/decl-loc1.C: New.\n+\t* g++.dg/cpp0x/constexpr-neg1.C: Adjust.\n+\t* g++.dg/cpp0x/constexpr-object1.C: Likewise.\n+\t* g++.dg/init/ctor8.C: Likewise.\n+\t* g++.dg/parse/semicolon4.C: Likewise.\n+\n 2015-06-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/66190"}, {"sha": "58b5d32c37c404be350c3d2efc34b8e8c11b3ad3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -5,12 +5,12 @@\n constexpr int square(int x);\t// { dg-message \"never defined\" }\n \n // error: pixel is a type\n-constexpr struct pixel {\n+constexpr struct pixel {        // { dg-error \"constexpr\" }\n   int x;\n   int y;\n   // OK: declaration\n   constexpr pixel(int);\n-};\t\t\t\t// { dg-error \"constexpr\" }\n+};\n constexpr pixel::pixel(int a)\n // OK: definition\n   : x(square(a)), y(square(a))\t// { dg-error \"square\" }"}, {"sha": "1861d404782624181ab25edc741be802c7089285", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-object1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -22,8 +22,8 @@ const constexpr A1 a3 = A1();\n volatile constexpr A1 a4 = A1(); // { dg-bogus \"both .volatile. and .constexpr. cannot\" }\n \n // error: on type declaration\n-constexpr struct pixel\n+constexpr struct pixel // { dg-error \"cannot be used for type declarations\" }\n {\n   int x;\n   int y;\n-};\t\t     // { dg-error \"cannot be used for type declarations\" }\n+};"}, {"sha": "072ca7d65046599b2f39f8c79293458322e2243d", "filename": "gcc/testsuite/g++.dg/cpp0x/decl-loc1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecl-loc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecl-loc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecl-loc1.C?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target c++11 } }\n+\n+inline struct A;      // { dg-error \"1:'inline'\" }\n+virtual struct B;     // { dg-error \"1:'virtual'\" }\n+friend struct C;      // { dg-error \"1:'friend'\" }\n+explicit struct D;    // { dg-error \"1:'explicit'\" }\n+mutable struct E;     // { dg-error \"1:a storage class\" }\n+const struct F;       // { dg-error \"1:'const'\" }\n+volatile struct G;    // { dg-error \"1:'volatile'\" }\n+__restrict struct H;  // { dg-error \"1:'__restrict'\" }\n+__thread struct I;    // { dg-error \"1:'__thread'\" }\n+typedef struct J;     // { dg-warning \"1:'typedef'\" }\n+constexpr struct K;   // { dg-error \"1:'constexpr'\" }"}, {"sha": "ce403a6bb612efee51cf287712de04fd587fb9ce", "filename": "gcc/testsuite/g++.dg/init/ctor8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -2,7 +2,7 @@\n \n typedef struct S { // { dg-error \"reference\" \"\" { target c++11 } }\n   int &r; \n-}; // { dg-warning \"'typedef' was ignored\" }\n+}; // { dg-warning \"1:'typedef' was ignored\" \"\" { target *-*-* } 3 }\n \n \n S f () {"}, {"sha": "5135ec14b1f80a97401ee17c8f31ed468a0df5c2", "filename": "gcc/testsuite/g++.dg/parse/semicolon4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C?ref=4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "patch": "@@ -22,7 +22,7 @@ struct OK3\n struct E1\n {\n   int i;\n-} const;\t\t\t// { dg-error \"qualifiers can only be specified for objects and functions\" }\n+} const;\t\t\t// { dg-error \"'const' can only be specified for objects and functions\" }\n \n void foo (\n struct E2"}]}