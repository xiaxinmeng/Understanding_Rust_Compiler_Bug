{"sha": "52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjZDFjZDFiNjdiMTBhNmQ1ODYxMmJhZmFkZWQ2ZThlM2EzMDNhMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-13T12:14:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-14T08:36:19Z"}, "message": "aarch64: reimplement vqmovn_high* intrinsics using builtins\n\nThis patch reimplements the saturating-truncate-and-insert-into-high\nintrinsics using the appropriate RTL codes and builtins.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>qxtn2<mode>_le):\n\tDefine.\n\t(aarch64_<su>qxtn2<mode>_be): Likewise.\n\t(aarch64_<su>qxtn2<mode>): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def (sqxtn2, uqxtn2):\n\tDefine builtins.\n\t* config/aarch64/iterators.md (SAT_TRUNC): Define code_iterator.\n\t(su): Handle ss_truncate and us_truncate.\n\t* config/aarch64/arm_neon.h (vqmovn_high_s16): Reimplement using\n\tbuiltin.\n\t(vqmovn_high_s32): Likewise.\n\t(vqmovn_high_s64): Likewise.\n\t(vqmovn_high_u16): Likewise.\n\t(vqmovn_high_u32): Likewise.\n\t(vqmovn_high_u64): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/narrow_high-intrinsics.c: Update uqxtn2 and\n\tsqxtn2 scan-assembler-times.", "tree": {"sha": "8ee9d8057edc63b3d5f3cd82183370e9dfed5d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ee9d8057edc63b3d5f3cd82183370e9dfed5d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7f1ff01a2342ffd2873528018e5c3650b791d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f1ff01a2342ffd2873528018e5c3650b791d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f1ff01a2342ffd2873528018e5c3650b791d7e"}], "stats": {"total": 96, "additions": 57, "deletions": 39}, "files": [{"sha": "27e9026d9e8b7ff980c5b8d9ff1b00490e3a18cb", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "patch": "@@ -175,6 +175,11 @@\n   /* Implemented by aarch64_<sur>qmovn<mode>.  */\n   BUILTIN_VSQN_HSDI (UNOP, sqmovn, 0, ALL)\n   BUILTIN_VSQN_HSDI (UNOP, uqmovn, 0, ALL)\n+\n+  /* Implemented by aarch64_<su>qxtn2<mode>.  */\n+  BUILTIN_VQN (BINOP, sqxtn2, 0, ALL)\n+  BUILTIN_VQN (BINOPU, uqxtn2, 0, ALL)\n+\n   /* Implemented by aarch64_s<optab><mode>.  */\n   BUILTIN_VSDQ_I (UNOP, sqabs, 0, ALL)\n   BUILTIN_VSDQ_I (UNOP, sqneg, 0, ALL)"}, {"sha": "0827f0eb579cd706c9e18550652c0916fc18230c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "patch": "@@ -3878,6 +3878,45 @@\n    [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"aarch64_<su>qxtn2<mode>_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (SAT_TRUNC:<VNARROWQ>\n+\t    (match_operand:VQN 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"<su>qxtn2\\\\t%0.<V2ntype>, %2.<Vtype>\"\n+   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_<su>qxtn2<mode>_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (SAT_TRUNC:<VNARROWQ>\n+\t    (match_operand:VQN 2 \"register_operand\" \"w\"))\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"<su>qxtn2\\\\t%0.<V2ntype>, %2.<Vtype>\"\n+   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_<su>qxtn2<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (SAT_TRUNC:<VNARROWQ>\n+     (match_operand:VQN 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+  {\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_<su>qxtn2<mode>_be (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n+    else\n+      emit_insn (gen_aarch64_<su>qxtn2<mode>_le (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n+    DONE;\n+  }\n+)\n+\n ;; <su>q<absneg>\n \n (define_insn \"aarch64_s<optab><mode>\""}, {"sha": "6095c0dcbfa51ddbbdb4c1e659d9cad6ce7e4c7a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "patch": "@@ -9584,72 +9584,42 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovn_high_s16 (int8x8_t __a, int16x8_t __b)\n {\n-  int8x16_t __result = vcombine_s8 (__a, vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"sqxtn2 %0.16b, %1.8h\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqxtn2v8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovn_high_s32 (int16x4_t __a, int32x4_t __b)\n {\n-  int16x8_t __result = vcombine_s16 (__a, vcreate_s16 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"sqxtn2 %0.8h, %1.4s\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqxtn2v4si (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovn_high_s64 (int32x2_t __a, int64x2_t __b)\n {\n-  int32x4_t __result = vcombine_s32 (__a, vcreate_s32 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"sqxtn2 %0.4s, %1.2d\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqxtn2v2di (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovn_high_u16 (uint8x8_t __a, uint16x8_t __b)\n {\n-  uint8x16_t __result = vcombine_u8 (__a, vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"uqxtn2 %0.16b, %1.8h\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uqxtn2v8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovn_high_u32 (uint16x4_t __a, uint32x4_t __b)\n {\n-  uint16x8_t __result = vcombine_u16 (__a, vcreate_u16 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"uqxtn2 %0.8h, %1.4s\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uqxtn2v4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovn_high_u64 (uint32x2_t __a, uint64x2_t __b)\n {\n-  uint32x4_t __result = vcombine_u32 (__a, vcreate_u32 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"uqxtn2 %0.4s, %1.2d\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uqxtn2v2di_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t"}, {"sha": "d42a70653edb266f2b76924b75a814db25f08f23", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "patch": "@@ -1834,6 +1834,9 @@\n ;; Unsigned comparison operators.\n (define_code_iterator FAC_COMPARISONS [lt le ge gt])\n \n+;; Signed and unsigned saturating truncations.\n+(define_code_iterator SAT_TRUNC [ss_truncate us_truncate])\n+\n ;; SVE integer unary operations.\n (define_code_iterator SVE_INT_UNARY [abs neg not clrsb clz popcount\n \t\t\t\t     (ss_abs \"TARGET_SVE2\")\n@@ -1987,7 +1990,8 @@\n \t\t      (fix \"s\") (unsigned_fix \"u\")\n \t\t      (div \"s\") (udiv \"u\")\n \t\t      (smax \"s\") (umax \"u\")\n-\t\t      (smin \"s\") (umin \"u\")])\n+\t\t      (smin \"s\") (umin \"u\")\n+\t\t      (ss_truncate \"s\") (us_truncate \"u\")])\n \n ;; \"s\" for signed ops, empty for unsigned ones.\n (define_code_attr s [(sign_extend \"s\") (zero_extend \"\")])"}, {"sha": "b22aecaa9cf2efe35d0a7ae330dd214e198f4ad1", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high-intrinsics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c?ref=52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "patch": "@@ -119,7 +119,7 @@ ONE (vmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n /* { dg-final { scan-assembler-times \"uqshrn2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqrshrn2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"uqrshrn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"uqxtn2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"sqxtn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"uqxtn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqxtn2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqxtun2 v\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\txtn2\\\\tv\" 6} }  */"}]}