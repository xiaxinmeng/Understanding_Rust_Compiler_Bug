{"sha": "7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjNDRjM2QxMGM0MWRhYmNiNjRlZmM0YjMyMjVkNWExYmI0ZDdmOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-26T09:43:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-26T09:43:39Z"}, "message": "re PR tree-optimization/62238 (ICE with LTO on valid code on x86_64-linux-gnu in verify_ssa (in 64-bit mode))\n\n2014-11-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62238\n\t* tree-predcom.c (ref_at_iteration): Unshare the expression\n\tbefore gimplifying it.\n\t(prepare_initializers_chain): Discard unused seq.\n\n\t* gcc.dg/torture/pr62238.c: New testcase.\n\nFrom-SVN: r218074", "tree": {"sha": "56c00025da81ba40c588fdfff0666786d39f413c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c00025da81ba40c588fdfff0666786d39f413c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8592c207050c21252a030f31908ade306507a231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8592c207050c21252a030f31908ade306507a231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8592c207050c21252a030f31908ade306507a231"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "14fc5b90f1c26e114c092c460279f775a6374317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "patch": "@@ -1,3 +1,10 @@\n+2014-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62238\n+\t* tree-predcom.c (ref_at_iteration): Unshare the expression\n+\tbefore gimplifying it.\n+\t(prepare_initializers_chain): Discard unused seq.\n+\n 2014-11-25  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-lives.c (process_bb_node_lives): Make code with conditional"}, {"sha": "adc868ff2335988cece9db4dc51ff6a751aec0a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "patch": "@@ -1,3 +1,8 @@\n+2014-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62238\n+\t* gcc.dg/torture/pr62238.c: New testcase.\n+\n 2014-11-25  Andrew Pinski <apinski@cavium.com>\n \n \t* gcc.c-torture/execute/20141125-1.c: New testcase."}, {"sha": "de8951aae902b65dcda45e714ba643cc151a57a7", "filename": "gcc/testsuite/gcc.dg/torture/pr62238.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr62238.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr62238.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr62238.c?ref=7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+\n+int a[4], b, c, d; \n+\n+int\n+fn1 (int p)\n+{\n+  for (; d; d++)\n+    {\n+      unsigned int h;\n+      for (h = 0; h < 3; h++)\n+\t{\n+\t  if (a[c+c+h])\n+\t    {\n+\t      if (p)\n+\t\tbreak;\n+\t      return 0;\n+\t    }\n+\t  b = 0;\n+\t}\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  fn1 (0);\n+  return 0;\n+}"}, {"sha": "230c5c08fe6039493b4d1e2f5dd071b16cd1533b", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=7ec44c3d10c41dabcb64efc4b3225d5a1bb4d7f9", "patch": "@@ -1402,8 +1402,8 @@ ref_at_iteration (data_reference_p dr, int iter, gimple_seq *stmts)\n     off = size_binop (PLUS_EXPR, off,\n \t\t      size_binop (MULT_EXPR, DR_STEP (dr), ssize_int (iter)));\n   tree addr = fold_build_pointer_plus (DR_BASE_ADDRESS (dr), off);\n-  addr = force_gimple_operand_1 (addr, stmts, is_gimple_mem_ref_addr,\n-\t\t\t\t NULL_TREE);\n+  addr = force_gimple_operand_1 (unshare_expr (addr), stmts,\n+\t\t\t\t is_gimple_mem_ref_addr, NULL_TREE);\n   tree alias_ptr = fold_convert (reference_alias_ptr_type (DR_REF (dr)), coff);\n   /* While data-ref analysis punts on bit offsets it still handles\n      bitfield accesses at byte boundaries.  Cope with that.  Note that\n@@ -2354,7 +2354,6 @@ prepare_initializers_chain (struct loop *loop, chain_p chain)\n   unsigned i, n = (chain->type == CT_INVARIANT) ? 1 : chain->length;\n   struct data_reference *dr = get_chain_root (chain)->ref;\n   tree init;\n-  gimple_seq stmts;\n   dref laref;\n   edge entry = loop_preheader_edge (loop);\n \n@@ -2378,12 +2377,17 @@ prepare_initializers_chain (struct loop *loop, chain_p chain)\n \n   for (i = 0; i < n; i++)\n     {\n+      gimple_seq stmts = NULL;\n+\n       if (chain->inits[i] != NULL_TREE)\n \tcontinue;\n \n       init = ref_at_iteration (dr, (int) i - n, &stmts);\n       if (!chain->all_always_accessed && tree_could_trap_p (init))\n-\treturn false;\n+\t{\n+\t  gimple_seq_discard (stmts);\n+\t  return false;\n+\t}\n \n       if (stmts)\n \tgsi_insert_seq_on_edge_immediate (entry, stmts);"}]}