{"sha": "cb29234501cd27d2d78a4a3040cc6a0890c96b32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyOTIzNDUwMWNkMjdkMmQ3OGE0YTMwNDBjYzZhMDg5MGM5NmIzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-12-23T09:43:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-12-23T09:43:36Z"}, "message": "re PR target/25005 (ICE in extract_constrain_insn_cached, at recog.c:2002)\n\n\tPR target/25005\n\t* regrename.c (replace_oldest_value_reg): Use validate_change with\n\tIN_GROUP set to 1 instead of doing direct modifications.\n\t(copyprop_hardreg_forward_1): Likewise.  If any replace_oldest_*\n\treplacements have been performed on an instruction, use\n\tapply_change_group ().\n\n\t* g++.dg/opt/pr25005.C: New test.\n\nFrom-SVN: r109013", "tree": {"sha": "df4e9bbf3472530f8b153c1b519009b9a1e5a557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df4e9bbf3472530f8b153c1b519009b9a1e5a557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb29234501cd27d2d78a4a3040cc6a0890c96b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb29234501cd27d2d78a4a3040cc6a0890c96b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb29234501cd27d2d78a4a3040cc6a0890c96b32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb29234501cd27d2d78a4a3040cc6a0890c96b32/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84"}], "stats": {"total": 97, "additions": 84, "deletions": 13}, "files": [{"sha": "524b84ae66807b4550da44a8fa1b1d5059c6292e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb29234501cd27d2d78a4a3040cc6a0890c96b32", "patch": "@@ -1,3 +1,12 @@\n+2005-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/25005\n+\t* regrename.c (replace_oldest_value_reg): Use validate_change with\n+\tIN_GROUP set to 1 instead of doing direct modifications.\n+\t(copyprop_hardreg_forward_1): Likewise.  If any replace_oldest_*\n+\treplacements have been performed on an instruction, use\n+\tapply_change_group ().\n+\n 2005-12-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/arit.c (do_31div): Clarify what \"31\" refers to."}, {"sha": "a73e5f7d3166c25e2e267a489f5a1fddf4a00ccf", "filename": "gcc/regrename.c", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=cb29234501cd27d2d78a4a3040cc6a0890c96b32", "patch": "@@ -1408,7 +1408,7 @@ replace_oldest_value_reg (rtx *loc, enum reg_class cl, rtx insn,\n \tfprintf (dump_file, \"insn %u: replaced reg %u with %u\\n\",\n \t\t INSN_UID (insn), REGNO (*loc), REGNO (new));\n \n-      *loc = new;\n+      validate_change (insn, loc, new, 1);\n       return true;\n     }\n   return false;\n@@ -1574,8 +1574,9 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n   for (insn = BB_HEAD (bb); ; insn = NEXT_INSN (insn))\n     {\n       int n_ops, i, alt, predicated;\n-      bool is_asm;\n+      bool is_asm, any_replacements;\n       rtx set;\n+      bool replaced[MAX_RECOG_OPERANDS];\n \n       if (! INSN_P (insn))\n \t{\n@@ -1687,11 +1688,13 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t}\n       no_move_special_case:\n \n+      any_replacements = false;\n+\n       /* For each input operand, replace a hard register with the\n \t eldest live copy that's in an appropriate register class.  */\n       for (i = 0; i < n_ops; i++)\n \t{\n-\t  bool replaced = false;\n+\t  replaced[i] = false;\n \n \t  /* Don't scan match_operand here, since we've no reg class\n \t     information to pass down.  Any operands that we could\n@@ -1708,37 +1711,57 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t  if (recog_data.operand_type[i] == OP_IN)\n \t    {\n \t      if (recog_op_alt[i][alt].is_address)\n-\t\treplaced\n+\t\treplaced[i]\n \t\t  = replace_oldest_value_addr (recog_data.operand_loc[i],\n \t\t\t\t\t       recog_op_alt[i][alt].cl,\n \t\t\t\t\t       VOIDmode, insn, vd);\n \t      else if (REG_P (recog_data.operand[i]))\n-\t\treplaced\n+\t\treplaced[i]\n \t\t  = replace_oldest_value_reg (recog_data.operand_loc[i],\n \t\t\t\t\t      recog_op_alt[i][alt].cl,\n \t\t\t\t\t      insn, vd);\n \t      else if (MEM_P (recog_data.operand[i]))\n-\t\treplaced = replace_oldest_value_mem (recog_data.operand[i],\n-\t\t\t\t\t\t     insn, vd);\n+\t\treplaced[i] = replace_oldest_value_mem (recog_data.operand[i],\n+\t\t\t\t\t\t\tinsn, vd);\n \t    }\n \t  else if (MEM_P (recog_data.operand[i]))\n-\t    replaced = replace_oldest_value_mem (recog_data.operand[i],\n-\t\t\t\t\t\t insn, vd);\n+\t    replaced[i] = replace_oldest_value_mem (recog_data.operand[i],\n+\t\t\t\t\t\t    insn, vd);\n \n \t  /* If we performed any replacement, update match_dups.  */\n-\t  if (replaced)\n+\t  if (replaced[i])\n \t    {\n \t      int j;\n \t      rtx new;\n \n-\t      changed = true;\n-\n \t      new = *recog_data.operand_loc[i];\n \t      recog_data.operand[i] = new;\n \t      for (j = 0; j < recog_data.n_dups; j++)\n \t\tif (recog_data.dup_num[j] == i)\n-\t\t  *recog_data.dup_loc[j] = new;\n+\t\t  validate_change (insn, recog_data.dup_loc[j], new, 1);\n+\n+\t      any_replacements = true;\n+\t    }\n+\t}\n+\n+      if (any_replacements)\n+\t{\n+\t  if (! apply_change_group ())\n+\t    {\n+\t      for (i = 0; i < n_ops; i++)\n+\t\tif (replaced[i])\n+\t\t  {\n+\t\t    rtx old = *recog_data.operand_loc[i];\n+\t\t    recog_data.operand[i] = old;\n+\t\t  }\n+\n+\t      if (dump_file)\n+\t\tfprintf (dump_file,\n+\t\t\t \"insn %u: reg replacements not verified\\n\",\n+\t\t\t INSN_UID (insn));\n \t    }\n+\t  else\n+\t    changed = true;\n \t}\n \n     did_replacement:"}, {"sha": "a61ab6f185db346b64f76d4a406d90090be4f7a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb29234501cd27d2d78a4a3040cc6a0890c96b32", "patch": "@@ -1,3 +1,8 @@\n+2005-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/25005\n+\t* g++.dg/opt/pr25005.C: New test.\n+\n 2005-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/25369"}, {"sha": "f62f8a2bcee59a7e28a8470c5cbbc8a1420ab898", "filename": "gcc/testsuite/g++.dg/opt/pr25005.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr25005.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb29234501cd27d2d78a4a3040cc6a0890c96b32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr25005.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr25005.C?ref=cb29234501cd27d2d78a4a3040cc6a0890c96b32", "patch": "@@ -0,0 +1,34 @@\n+// PR target/25005\n+// { dg-options \"-O2 -funroll-loops\" }\n+// { dg-do compile }\n+\n+inline void *operator new (__SIZE_TYPE__, void *__p) throw() { return __p; }\n+\n+struct M { ~M() { } };\n+\n+struct P\n+{\n+  P () { v[0] = 0; v[1] = 0; v[2] = 0; }\n+  P (const P &x) { for (int i = 0; i < 3; ++i) v[i] = x.v[i]; }\n+  double v[3];\n+};\n+\n+struct V : public M\n+{\n+  V (const P *x, const P *y)\n+  {\n+    P *b = this->a = ::new P[2];\n+    for (; x != y; ++x, ++b)\n+      ::new (b) P(*x);\n+  }\n+  P *a;\n+};\n+\n+void bar (const V &);\n+\n+void\n+foo ()\n+{\n+  const P d[2] = { P(), P() };\n+  bar (V (&d[0], &d[2]));\n+}"}]}