{"sha": "e649d346e789ca15524872c11a40288113c27d50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0OWQzNDZlNzg5Y2ExNTUyNDg3MmMxMWE0MDI4ODExM2MyN2Q1MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-27T09:11:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-27T09:11:18Z"}, "message": "re PR lto/54709 (r191713 breaks Firefox build)\n\n2012-09-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/54709\n\t* lto-symtab.c (resolution_guessed_p): Remove.\n\t(set_resolution_guessed): Likewise.\n\t(lto_symtab_register_decl): Remove assert.\n\t(lto_symtab_resolve_symbols): Do not alter symbol resolutions\n\tand return the prevailing symbol, checking for multiple prevailing\n\tsymbols here.\n\t(lto_symtab_merge_decls_1): Use the result from\n\tlto_symtab_resolve_symbols.  Do not alter symbol resolutions.\n\n\t* gcc.dg/lto/pr54709_0.c: New testcase.\n\t* gcc.dg/lto/pr54709_1.c: Likewise.\n\nFrom-SVN: r191798", "tree": {"sha": "ff86bf776914366000628c9bf9dc4c0d6d38f8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff86bf776914366000628c9bf9dc4c0d6d38f8c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e649d346e789ca15524872c11a40288113c27d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e649d346e789ca15524872c11a40288113c27d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e649d346e789ca15524872c11a40288113c27d50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e649d346e789ca15524872c11a40288113c27d50/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a80f7a710e9bb7f5873b197d127aa30630ce6e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80f7a710e9bb7f5873b197d127aa30630ce6e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80f7a710e9bb7f5873b197d127aa30630ce6e4f"}], "stats": {"total": 139, "additions": 54, "deletions": 85}, "files": [{"sha": "cb66af6b446d7f3a60ee384870c744492785bdb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e649d346e789ca15524872c11a40288113c27d50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e649d346e789ca15524872c11a40288113c27d50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e649d346e789ca15524872c11a40288113c27d50", "patch": "@@ -1,3 +1,15 @@\n+2012-09-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/54709\n+\t* lto-symtab.c (resolution_guessed_p): Remove.\n+\t(set_resolution_guessed): Likewise.\n+\t(lto_symtab_register_decl): Remove assert.\n+\t(lto_symtab_resolve_symbols): Do not alter symbol resolutions\n+\tand return the prevailing symbol, checking for multiple prevailing\n+\tsymbols here.\n+\t(lto_symtab_merge_decls_1): Use the result from\n+\tlto_symtab_resolve_symbols.  Do not alter symbol resolutions.\n+\n 2012-09-26  Steve Ellcey  <sellcey@mips.com>\n \n \tPR web/54711"}, {"sha": "cd8ca67b0c0a549c614f545c5b11a3a1a946d05d", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 22, "deletions": 85, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e649d346e789ca15524872c11a40288113c27d50/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e649d346e789ca15524872c11a40288113c27d50/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=e649d346e789ca15524872c11a40288113c27d50", "patch": "@@ -32,21 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Vector to keep track of external variables we've seen so far.  */\n VEC(tree,gc) *lto_global_var_decls;\n \n-/* Return true if the resolution was guessed and not obtained from\n-   the file.  */\n-static inline bool\n-resolution_guessed_p (symtab_node node)\n-{\n-  return node->symbol.aux != NULL;\n-}\n-\n-/* Set guessed flag for NODE.  */\n-static inline void\n-set_resolution_guessed (symtab_node node, bool value)\n-{\n-  node->symbol.aux = (void *)(size_t)value;\n-}\n-\n /* Registers DECL with the LTO symbol table as having resolution RESOLUTION\n    and read from FILE_DATA. */\n \n@@ -78,7 +63,6 @@ lto_symtab_register_decl (tree decl,\n     {\n       node->symbol.resolution = resolution;\n       gcc_assert (node->symbol.lto_file_data == file_data);\n-      gcc_assert (!resolution_guessed_p (node));\n     }\n }\n \n@@ -303,7 +287,7 @@ lto_symtab_resolve_can_prevail_p (symtab_node e)\n /* Resolve the symbol with the candidates in the chain *SLOT and store\n    their resolutions.  */\n \n-static void\n+static symtab_node\n lto_symtab_resolve_symbols (symtab_node first)\n {\n   symtab_node e;\n@@ -315,27 +299,33 @@ lto_symtab_resolve_symbols (symtab_node first)\n \t&& (e->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY\n \t    || e->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n \t    || e->symbol.resolution == LDPR_PREVAILING_DEF))\n-      prevailing = e;\n+      {\n+\tprevailing = e;\n+\tbreak;\n+      }\n \n   /* If the chain is already resolved there is nothing else to do.  */\n   if (prevailing)\n-    return;\n+    {\n+      /* Assert it's the only one.  */\n+      for (e = prevailing->symbol.next_sharing_asm_name; e; e = e->symbol.next_sharing_asm_name)\n+\tif (symtab_real_symbol_p (e)\n+\t    && (e->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t|| e->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n+\t\t|| e->symbol.resolution == LDPR_PREVAILING_DEF))\n+\t  fatal_error (\"multiple prevailing defs for %qE\",\n+\t\t       DECL_NAME (prevailing->symbol.decl));\n+      return prevailing;\n+    }\n \n   /* Find the single non-replaceable prevailing symbol and\n      diagnose ODR violations.  */\n   for (e = first; e; e = e->symbol.next_sharing_asm_name)\n     {\n       if (!lto_symtab_resolve_can_prevail_p (e))\n-\t{\n-\t  e->symbol.resolution = LDPR_RESOLVED_IR;\n-          set_resolution_guessed (e, true);\n-\t  continue;\n-\t}\n+\tcontinue;\n \n-      /* Set a default resolution - the final prevailing one will get\n-         adjusted later.  */\n-      e->symbol.resolution = LDPR_PREEMPTED_IR;\n-      set_resolution_guessed (e, true);\n+      /* If we have a non-replaceable definition it prevails.  */\n       if (!lto_symtab_resolve_replaceable_p (e))\n \t{\n \t  if (prevailing)\n@@ -349,12 +339,12 @@ lto_symtab_resolve_symbols (symtab_node first)\n \t}\n     }\n   if (prevailing)\n-    goto found;\n+    return prevailing;\n \n   /* Do a second round choosing one from the replaceable prevailing decls.  */\n   for (e = first; e; e = e->symbol.next_sharing_asm_name)\n     {\n-      if (e->symbol.resolution != LDPR_PREEMPTED_IR\n+      if (!lto_symtab_resolve_can_prevail_p (e)\n \t  || !symtab_real_symbol_p (e))\n \tcontinue;\n \n@@ -386,25 +376,7 @@ lto_symtab_resolve_symbols (symtab_node first)\n \tprevailing = e;\n     }\n \n-  if (!prevailing)\n-    return;\n-\n-found:\n-  /* If current lto files represent the whole program,\n-    it is correct to use LDPR_PREVALING_DEF_IRONLY.\n-    If current lto files are part of whole program, internal\n-    resolver doesn't know if it is LDPR_PREVAILING_DEF\n-    or LDPR_PREVAILING_DEF_IRONLY.  Use IRONLY conforms to\n-    using -fwhole-program.  Otherwise, it doesn't\n-    matter using either LDPR_PREVAILING_DEF or\n-    LDPR_PREVAILING_DEF_IRONLY\n-    \n-    FIXME: above workaround due to gold plugin makes some\n-    variables IRONLY, which are indeed PREVAILING_DEF in\n-    resolution file.  These variables still need manual\n-    externally_visible attribute.  */\n-    prevailing->symbol.resolution = LDPR_PREVAILING_DEF_IRONLY;\n-    set_resolution_guessed (prevailing, true);\n+  return prevailing;\n }\n \n /* Merge all decls in the symbol table chain to the prevailing decl and\n@@ -478,27 +450,7 @@ lto_symtab_merge_decls_1 (symtab_node first)\n \n   /* Compute the symbol resolutions.  This is a no-op when using the\n      linker plugin and resolution was decided by the linker.  */\n-  lto_symtab_resolve_symbols (first);\n-\n-  /* Find the prevailing decl.  */\n-  for (prevailing = first;\n-       prevailing\n-       && (!symtab_real_symbol_p (prevailing)\n-\t   || (prevailing->symbol.resolution != LDPR_PREVAILING_DEF_IRONLY\n-\t       && prevailing->symbol.resolution != LDPR_PREVAILING_DEF_IRONLY_EXP\n-\t       && prevailing->symbol.resolution != LDPR_PREVAILING_DEF));\n-       prevailing = prevailing->symbol.next_sharing_asm_name)\n-    ;\n-\n-  /* Assert it's the only one.  */\n-  if (prevailing)\n-    for (e = prevailing->symbol.next_sharing_asm_name; e; e = e->symbol.next_sharing_asm_name)\n-      if (symtab_real_symbol_p (e)\n-\t  && (e->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY\n-\t      || e->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n-\t      || e->symbol.resolution == LDPR_PREVAILING_DEF))\n-\tfatal_error (\"multiple prevailing defs for %qE\",\n-\t\t     DECL_NAME (prevailing->symbol.decl));\n+  prevailing = lto_symtab_resolve_symbols (first);\n \n   /* If there's not a prevailing symbol yet it's an external reference.\n      Happens a lot during ltrans.  Choose the first symbol with a\n@@ -574,21 +526,6 @@ lto_symtab_merge_decls_1 (symtab_node first)\n       for (e = prevailing; e; e = e->symbol.next_sharing_asm_name)\n \tdump_symtab_node (cgraph_dump_file, e);\n     }\n-\n-  /* Store resolution decision into the callgraph.  \n-     In LTRANS don't overwrite information we stored into callgraph at\n-     WPA stage.\n-\n-     Do not bother to store guessed decisions.  Generic code knows how\n-     to handle UNKNOWN relocation well.\n-\n-     The problem with storing guessed decision is whether to use\n-     PREVAILING_DEF, PREVAILING_DEF_IRONLY, PREVAILING_DEF_IRONLY_EXP.\n-     First one would disable some whole program optimizations, while\n-     ther second would imply to many whole program assumptions.  */\n-  if (resolution_guessed_p (prevailing))\n-    prevailing->symbol.resolution = LDPR_UNKNOWN;\n-  return;\n }\n \n /* Resolve and merge all symbol table chains to a prevailing decl.  */"}, {"sha": "ac9e619db75c8fc9817dfc294c79b8e1c7379580", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e649d346e789ca15524872c11a40288113c27d50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e649d346e789ca15524872c11a40288113c27d50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e649d346e789ca15524872c11a40288113c27d50", "patch": "@@ -1,3 +1,9 @@\n+2012-09-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/54709\n+\t* gcc.dg/lto/pr54709_0.c: New testcase.\n+\t* gcc.dg/lto/pr54709_1.c: Likewise.\n+\n 2012-09-26  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.target/arm/div64-unwinding.c: XFAIL for GNU/Linux."}, {"sha": "7e38bd46de82edd4c988320af3ee55aedc95ce00", "filename": "gcc/testsuite/gcc.dg/lto/pr54709_0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e649d346e789ca15524872c11a40288113c27d50/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e649d346e789ca15524872c11a40288113c27d50/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_0.c?ref=e649d346e789ca15524872c11a40288113c27d50", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-lto-do link } */\n+/* { dg-require-visibility \"hidden\" } */\n+/* { dg-extra-ld-options { -shared } } */\n+/* { dg-lto-options { { -fPIC -fvisibility=hidden -flto } } } */\n+\n+void foo (void *p, void *q, unsigned s)\n+{\n+  __builtin_memcpy (p, q, s);\n+}"}, {"sha": "59c137d6f9ec1d8b6b7b2325e74972ac945388ca", "filename": "gcc/testsuite/gcc.dg/lto/pr54709_1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e649d346e789ca15524872c11a40288113c27d50/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e649d346e789ca15524872c11a40288113c27d50/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_1.c?ref=e649d346e789ca15524872c11a40288113c27d50", "patch": "@@ -0,0 +1,5 @@\n+void * memcpy (void *, void *, long);\n+void bar (void *p, void *q, unsigned s)\n+{\n+  memcpy (p, q, s);\n+}"}]}