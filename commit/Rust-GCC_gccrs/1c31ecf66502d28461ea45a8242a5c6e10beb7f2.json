{"sha": "1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzMWVjZjY2NTAyZDI4NDYxZWE0NWE4MjQyYTVjNmUxMGJlYjdmMg==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-05-15T03:02:23Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-05-15T03:02:23Z"}, "message": "pa.c (override_options): Override TARGET_JUMP_IN_DELAY when scheduling for PA8000 or generating dwarf2...\n\n\t* pa.c (override_options): Override TARGET_JUMP_IN_DELAY when scheduling\n\tfor PA8000 or generating dwarf2 call frame information.\n\t(output_call): Remove DO_FRAME_NOTES check from return pointer\n\toptimization.\n\t(following_call): Return 0 when scheduling for PA8000 or generating\n\tdwarf2 call frame information.  Revise comment.\n\nFrom-SVN: r53470", "tree": {"sha": "f07073c587d16c8455d176e9ffc12a9e617c7531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f07073c587d16c8455d176e9ffc12a9e617c7531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31ecf66502d28461ea45a8242a5c6e10beb7f2/comments", "author": null, "committer": null, "parents": [{"sha": "ac9cfadabbb2d3ac3cb9582a88dba555c8009e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9cfadabbb2d3ac3cb9582a88dba555c8009e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9cfadabbb2d3ac3cb9582a88dba555c8009e87"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "c7c0dccc9452dec934e40c909a51717495ee215d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31ecf66502d28461ea45a8242a5c6e10beb7f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31ecf66502d28461ea45a8242a5c6e10beb7f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "patch": "@@ -1,3 +1,12 @@\n+2002-05-14  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.c (override_options): Override TARGET_JUMP_IN_DELAY when scheduling\n+\tfor PA8000 or generating dwarf2 call frame information.\n+\t(output_call): Remove DO_FRAME_NOTES check from return pointer\n+\toptimization.\n+\t(following_call): Return 0 when scheduling for PA8000 or generating\n+\tdwarf2 call frame information.  Revise comment.\n+\n 2002-05-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n config/alpha:"}, {"sha": "8e93194f65398ee54c46911b1552a3493ef8366e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31ecf66502d28461ea45a8242a5c6e10beb7f2/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31ecf66502d28461ea45a8242a5c6e10beb7f2/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "patch": "@@ -250,6 +250,14 @@ override_options ()\n       warning (\"unknown -march= option (%s).\\nValid options are 1.0, 1.1, and 2.0\\n\", pa_arch_string);\n     }\n \n+  /* Unconditional branches in the delay slot are not compatible with dwarf2\n+     call frame information.  There is no benefit in using this optimization\n+     on PA8000 and later processors.  */\n+  if (pa_cpu >= PROCESSOR_8000\n+      || (! USING_SJLJ_EXCEPTIONS && flag_exceptions)\n+      || flag_unwind_tables)\n+    target_flags &= ~MASK_JUMP_IN_DELAY;\n+\n   if (flag_pic && TARGET_PORTABLE_RUNTIME)\n     {\n       warning (\"PIC code generation is not supported in the portable runtime model\\n\");\n@@ -6377,17 +6385,13 @@ output_call (insn, call_dest, sibcall)\n   distance = INSN_ADDRESSES (INSN_UID (JUMP_LABEL (NEXT_INSN (insn))))\n \t       - INSN_ADDRESSES (INSN_UID (seq_insn)) - 8;\n \n-  /* If the branch was too far away, emit a normal call followed\n-     by a nop, followed by the unconditional branch.  We also don't\n-     adjust %r2 when generating dwarf2 frame or unwind info since\n-     the adjustment confuses the dwarf2 output.\n-\n-     If the branch is close, then adjust %r2 from within the\n-     call's delay slot.  */\n+  /* If the branch is too far away, emit a normal call followed\n+     by a nop, followed by the unconditional branch.  If the branch\n+     is close, then adjust %r2 in the call's delay slot.  */\n \n   xoperands[0] = call_dest;\n   xoperands[1] = XEXP (PATTERN (NEXT_INSN (insn)), 1);\n-  if (DO_FRAME_NOTES || ! VAL_14_BITS_P (distance))\n+  if (! VAL_14_BITS_P (distance))\n     output_asm_insn (\"{bl|b,l} %0,%%r2\\n\\tnop\\n\\tb,n %1\", xoperands);\n   else\n     {\n@@ -6763,22 +6767,20 @@ output_parallel_addb (operands, length)\n     }\n }\n \n-/* Return nonzero if INSN (a jump insn) immediately follows a call to\n-   a named function.  This is used to discourage creating parallel movb/addb\n-   insns since a jump which immediately follows a call can execute in the\n-   delay slot of the call.\n-\n-   It is also used to avoid filling the delay slot of a jump which\n-   immediately follows a call since the jump can usually be eliminated\n-   completely by modifying RP in the delay slot of the call.  */\n+/* Return nonzero if INSN (a jump insn) immediately follows a call\n+   to a named function.  This is used to avoid filling the delay slot\n+   of the jump since it can usually be eliminated by modifying RP in\n+   the delay slot of the call.  */\n \n int\n following_call (insn)\n      rtx insn;\n {\n-  /* We do not parallel movb,addb or place jumps into call delay slots when\n-     optimizing for the PA8000.  */\n-  if (pa_cpu != PROCESSOR_8000)\n+  /* We do not place jumps into call delay slots when optimizing for the\n+     PA8000 processor or when generating dwarf2 call frame information.  */\n+  if (pa_cpu >= PROCESSOR_8000\n+      || (! USING_SJLJ_EXCEPTIONS && flag_exceptions)\n+      || flag_unwind_tables)\n     return 0;\n \n   /* Find the previous real insn, skipping NOTEs.  */"}]}