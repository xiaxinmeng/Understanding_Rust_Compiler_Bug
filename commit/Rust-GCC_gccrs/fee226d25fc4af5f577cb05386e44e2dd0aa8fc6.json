{"sha": "fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlMjI2ZDI1ZmM0YWY1ZjU3N2NiMDUzODZlNDRlMmRkMGFhOGZjNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-07-11T14:09:29Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-07-11T14:09:29Z"}, "message": "regclass.c (choose_hard_reg_mode): Add third argument.\n\n\t* regclass.c (choose_hard_reg_mode): Add third argument.\n\tChanged all callers.\n\t* rtl.h (choose_hard_reg_mode): Update declaration.\n\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes):\n\tTake HARD_REGNO_CALL_PART_CLOBBERED into account.\n\nFrom-SVN: r69234", "tree": {"sha": "8b1d45a97235af5156928b537957c4c0a404a581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b1d45a97235af5156928b537957c4c0a404a581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/comments", "author": null, "committer": null, "parents": [{"sha": "7efa3e22e56fdd56b73deb940c47a5beac0b866e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efa3e22e56fdd56b73deb940c47a5beac0b866e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efa3e22e56fdd56b73deb940c47a5beac0b866e"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "67ac6cb21086136d916d3b7bd2dd3eeb22369f3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "patch": "@@ -1,3 +1,11 @@\n+2003-07-11  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* regclass.c (choose_hard_reg_mode): Add third argument.\n+\tChanged all callers.\n+\t* rtl.h (choose_hard_reg_mode): Update declaration.\n+\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes):\n+\tTake HARD_REGNO_CALL_PART_CLOBBERED into account.\n+\n 2003-07-11  Geoffrey Keating  <geoffk@apple.com>\n \n \t* c-decl.c (finish_decl): Handle 'used' here..."}, {"sha": "86efe3541b4fe4bc8152abcb1b0927b689b65ac0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "patch": "@@ -1135,7 +1135,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE)\t\t\t\\\n   (CC_REGNO_P (REGNO) ? VOIDmode\t\t\t\t\t\\\n    : (MODE) == VOIDmode && (NREGS) != 1 ? VOIDmode\t\t\t\\\n-   : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS))\t\\\n+   : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), false)\\\n    : (MODE) == HImode && !TARGET_PARTIAL_REG_STALL ? SImode\t\t\\\n    : (MODE) == QImode && (REGNO) >= 4 && !TARGET_64BIT ? SImode \t\\\n    : (MODE))"}, {"sha": "5ad605db8dd708492852bf14c98a5f14f9cb63a8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "patch": "@@ -448,8 +448,12 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n     if (DWARF_FRAME_REGNUM (i) < DWARF_FRAME_REGISTERS)\n       {\n \tHOST_WIDE_INT offset = DWARF_FRAME_REGNUM (i) * GET_MODE_SIZE (mode);\n-\tHOST_WIDE_INT size = GET_MODE_SIZE (reg_raw_mode[i]);\n+\tenum machine_mode save_mode = reg_raw_mode[i];\n+\tHOST_WIDE_INT size;\n \n+\tif (HARD_REGNO_CALL_PART_CLOBBERED (i, save_mode))\n+\t  save_mode = choose_hard_reg_mode (i, 1, true);\n+\tsize = GET_MODE_SIZE (save_mode);\n \tif (offset < 0)\n \t  continue;\n "}, {"sha": "46f8cb1a6368ee6ae96178451f7dda5ca7e4fb8a", "filename": "gcc/regclass.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "patch": "@@ -553,7 +553,7 @@ init_reg_modes (void)\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      reg_raw_mode[i] = choose_hard_reg_mode (i, 1);\n+      reg_raw_mode[i] = choose_hard_reg_mode (i, 1, false);\n \n       /* If we couldn't find a valid mode, just use the previous mode.\n          ??? One situation in which we need to do this is on the mips where\n@@ -653,11 +653,12 @@ memory_move_secondary_cost (enum machine_mode mode, enum reg_class class, int in\n #endif\n \n /* Return a machine mode that is legitimate for hard reg REGNO and large\n-   enough to save nregs.  If we can't find one, return VOIDmode.  */\n+   enough to save nregs.  If we can't find one, return VOIDmode.\n+   If CALL_SAVED is true, only consider modes that are call saved.  */\n \n enum machine_mode\n choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n-\t\t      unsigned int nregs)\n+\t\t      unsigned int nregs, bool call_saved)\n {\n   unsigned int /* enum machine_mode */ m;\n   enum machine_mode found_mode = VOIDmode, mode;\n@@ -670,7 +671,8 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n-\t&& HARD_REGNO_MODE_OK (regno, mode))\n+\t&& HARD_REGNO_MODE_OK (regno, mode)\n+\t&& (! call_saved || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n       found_mode = mode;\n \n   if (found_mode != VOIDmode)\n@@ -680,7 +682,8 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n-\t&& HARD_REGNO_MODE_OK (regno, mode))\n+\t&& HARD_REGNO_MODE_OK (regno, mode)\n+\t&& (! call_saved || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n       found_mode = mode;\n \n   if (found_mode != VOIDmode)\n@@ -690,7 +693,8 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n-\t&& HARD_REGNO_MODE_OK (regno, mode))\n+\t&& HARD_REGNO_MODE_OK (regno, mode)\n+\t&& (! call_saved || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n       found_mode = mode;\n \n   if (found_mode != VOIDmode)\n@@ -700,7 +704,8 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n-\t&& HARD_REGNO_MODE_OK (regno, mode))\n+\t&& HARD_REGNO_MODE_OK (regno, mode)\n+\t&& (! call_saved || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n       found_mode = mode;\n \n   if (found_mode != VOIDmode)\n@@ -711,7 +716,8 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n     {\n       mode = (enum machine_mode) m;\n       if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n-\t  && HARD_REGNO_MODE_OK (regno, mode))\n+\t  && HARD_REGNO_MODE_OK (regno, mode)\n+\t  && (! call_saved || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n \treturn mode;\n     }\n "}, {"sha": "b2aeb5fb02c1970b2339975152e79dbd0f5b404e", "filename": "gcc/regs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "patch": "@@ -210,7 +210,7 @@ extern int caller_save_needed;\n /* Select a register mode required for caller save of hard regno REGNO.  */\n #ifndef HARD_REGNO_CALLER_SAVE_MODE\n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \\\n-  choose_hard_reg_mode (REGNO, NREGS)\n+  choose_hard_reg_mode (REGNO, NREGS, false)\n #endif\n \n /* Registers that get partially clobbered by a call in a given mode."}, {"sha": "bc9d5ee2691fed4fd2894b7fb7c9d925c1365a69", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "patch": "@@ -1602,7 +1602,8 @@ extern rtx avoid_constant_pool_reference (rtx);\n extern rtx gen_mem_addressof (rtx, tree, int);\n \n /* In regclass.c  */\n-extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int);\n+extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,\n+\t\t\t\t\t       bool);\n \n /* In emit-rtl.c  */\n extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);"}]}