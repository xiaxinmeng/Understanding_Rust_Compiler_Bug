{"sha": "32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiOGY1ZGY5ZjA1NDI2YzgyYzZkZTFhY2FmOWNhNGFlYzY4MDM5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-24T01:52:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-24T13:58:31Z"}, "message": "c++: Fix C++20 variadic lambda init-capture grammar.\n\nThe grammar for variadic init-capture was fixed at the Prague C++ meeting\nwhere we finalized C++20.\n\ngcc/cp/ChangeLog\n2020-02-24  Jason Merrill  <jason@redhat.com>\n\n\tP0780R2: Resolve lambda init-capture pack grammar.\n\t* parser.c (cp_parser_lambda_introducer): Expect &...x=y rather than\n\t...&x=y.", "tree": {"sha": "0fa257608ecfde18b590513c1f9d5f514f70d63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fa257608ecfde18b590513c1f9d5f514f70d63e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120e873484f20d9a0b8400e2e464ac5b2088a747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120e873484f20d9a0b8400e2e464ac5b2088a747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120e873484f20d9a0b8400e2e464ac5b2088a747"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "cc0f42dfda5b97e2c1fc5fbf0c1a5a37fc00e8a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "patch": "@@ -1,3 +1,9 @@\n+2020-02-24  Jason Merrill  <jason@redhat.com>\n+\n+\tP0780R2: Resolve lambda init-capture pack grammar.\n+\t* parser.c (cp_parser_lambda_introducer): Expect &...x=y rather than\n+\t...&x=y.\n+\n 2020-02-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93882"}, {"sha": "87ed2a3a6482ba3c28de077c67598d800a286bad", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "patch": "@@ -10620,6 +10620,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \n   /* Record default capture mode.  \"[&\" \"[=\" \"[&,\" \"[=,\"  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_AND)\n+      && !cp_lexer_nth_token_is (parser->lexer, 2, CPP_ELLIPSIS)\n       && !cp_lexer_nth_token_is (parser->lexer, 2, CPP_NAME)\n       && !cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_THIS))\n     LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) = CPLD_REFERENCE;\n@@ -10715,6 +10716,13 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  continue;\n \t}\n \n+      /* Remember whether we want to capture as a reference or not.  */\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_AND))\n+\t{\n+\t  capture_kind = BY_REFERENCE;\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t}\n+\n       bool init_pack_expansion = false;\n       location_t ellipsis_loc = UNKNOWN_LOCATION;\n       if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n@@ -10727,9 +10735,12 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  init_pack_expansion = true;\n \t}\n \n-      /* Remember whether we want to capture as a reference or not.  */\n-      if (cp_lexer_next_token_is (parser->lexer, CPP_AND))\n+      /* Early C++20 drafts had ...& instead of &...; be forgiving.  */\n+      if (init_pack_expansion && capture_kind != BY_REFERENCE\n+\t  && cp_lexer_next_token_is (parser->lexer, CPP_AND))\n \t{\n+\t  pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t   0, \"%<&%> should come before %<...%>\");\n \t  capture_kind = BY_REFERENCE;\n \t  cp_lexer_consume_token (parser->lexer);\n \t}"}, {"sha": "e7c815b92d45b33e71499ca1524a86c891149017", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b8f5df9f05426c82c6de1acaf9ca4aec68039d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init4.C?ref=32b8f5df9f05426c82c6de1acaf9ca4aec68039d", "patch": "@@ -0,0 +1,10 @@\n+// P2095R0\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"\" }\n+\n+template <class... T>\n+void f(T... t)\n+{\n+  [&...x=t]{};\n+  [...&x=t]{};\t\t\t// { dg-warning \"7:&\" }\n+}"}]}