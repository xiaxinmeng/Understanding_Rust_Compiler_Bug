{"sha": "d4b7742db2e94140e2556fbd44fc819ef5c912e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiNzc0MmRiMmU5NDE0MGUyNTU2ZmJkNDRmYzgxOWVmNWM5MTJlMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2014-12-11T19:13:57Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2014-12-11T19:13:57Z"}, "message": "dwarf2out.c (gen_lexical_block_die): Remove unused `depth' parameter.\n\n\t* dwarf2out.c (gen_lexical_block_die): Remove unused `depth'\n\tparameter.\n\t(gen_inlined_subroutine_die): Same.\n\t(gen_block_die): Same.\n\t(decls_for_scope): Same.\n\nFrom-SVN: r218639", "tree": {"sha": "2253db50478798509cc4d856ada997b3f8675e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2253db50478798509cc4d856ada997b3f8675e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b7742db2e94140e2556fbd44fc819ef5c912e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b7742db2e94140e2556fbd44fc819ef5c912e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b7742db2e94140e2556fbd44fc819ef5c912e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b7742db2e94140e2556fbd44fc819ef5c912e1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8c555ac7c30f83f0e81aa6207757059beef1890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c555ac7c30f83f0e81aa6207757059beef1890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c555ac7c30f83f0e81aa6207757059beef1890"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "7f233e8626ea7c8375f63e8d4d35b3b95bfd09b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7742db2e94140e2556fbd44fc819ef5c912e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7742db2e94140e2556fbd44fc819ef5c912e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4b7742db2e94140e2556fbd44fc819ef5c912e1", "patch": "@@ -1,3 +1,11 @@\n+2014-12-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* dwarf2out.c (gen_lexical_block_die): Remove unused `depth'\n+\tparameter.\n+\t(gen_inlined_subroutine_die): Same.\n+\t(gen_block_die): Same.\n+\t(decls_for_scope): Same.\n+\n 2014-12-11  Renlin Li  <renlin.li@arm.com>\n \n \t* config/aarch64/aarch64-cores.def: Change all AARCH64_FL_FPSIMD to"}, {"sha": "4c2ff8dd03b9a64d544c71e8f376db017f7cd332", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7742db2e94140e2556fbd44fc819ef5c912e1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7742db2e94140e2556fbd44fc819ef5c912e1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d4b7742db2e94140e2556fbd44fc819ef5c912e1", "patch": "@@ -3263,8 +3263,8 @@ static void gen_subprogram_die (tree, dw_die_ref);\n static void gen_variable_die (tree, tree, dw_die_ref);\n static void gen_const_die (tree, dw_die_ref);\n static void gen_label_die (tree, dw_die_ref);\n-static void gen_lexical_block_die (tree, dw_die_ref, int);\n-static void gen_inlined_subroutine_die (tree, dw_die_ref, int);\n+static void gen_lexical_block_die (tree, dw_die_ref);\n+static void gen_inlined_subroutine_die (tree, dw_die_ref);\n static void gen_field_die (tree, dw_die_ref);\n static void gen_ptr_to_mbr_type_die (tree, dw_die_ref);\n static dw_die_ref gen_compile_unit_die (const char *);\n@@ -3275,8 +3275,8 @@ static void gen_struct_or_union_type_die (tree, dw_die_ref,\n static void gen_subroutine_type_die (tree, dw_die_ref);\n static void gen_typedef_die (tree, dw_die_ref);\n static void gen_type_die (tree, dw_die_ref);\n-static void gen_block_die (tree, dw_die_ref, int);\n-static void decls_for_scope (tree, dw_die_ref, int);\n+static void gen_block_die (tree, dw_die_ref);\n+static void decls_for_scope (tree, dw_die_ref);\n static inline int is_redundant_typedef (const_tree);\n static bool is_naming_typedef_decl (const_tree);\n static inline dw_die_ref get_context_die (tree);\n@@ -18696,7 +18696,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       if (DECL_NAME (DECL_RESULT (decl)))\n \tgen_decl_die (DECL_RESULT (decl), NULL, subr_die);\n \n-      decls_for_scope (outer_scope, subr_die, 0);\n+      decls_for_scope (outer_scope, subr_die);\n \n       if (call_arg_locations && !dwarf_strict)\n \t{\n@@ -19294,7 +19294,7 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n /* Generate a DIE for a lexical block.  */\n \n static void\n-gen_lexical_block_die (tree stmt, dw_die_ref context_die, int depth)\n+gen_lexical_block_die (tree stmt, dw_die_ref context_die)\n {\n   dw_die_ref stmt_die = new_die (DW_TAG_lexical_block, context_die, stmt);\n \n@@ -19308,13 +19308,13 @@ gen_lexical_block_die (tree stmt, dw_die_ref context_die, int depth)\n   if (! BLOCK_ABSTRACT (stmt) && TREE_ASM_WRITTEN (stmt))\n     add_high_low_attributes (stmt, stmt_die);\n \n-  decls_for_scope (stmt, stmt_die, depth);\n+  decls_for_scope (stmt, stmt_die);\n }\n \n /* Generate a DIE for an inlined subprogram.  */\n \n static void\n-gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die, int depth)\n+gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die)\n {\n   tree decl;\n \n@@ -19346,7 +19346,7 @@ gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die, int depth)\n         add_high_low_attributes (stmt, subr_die);\n       add_call_src_coords_attributes (stmt, subr_die);\n \n-      decls_for_scope (stmt, subr_die, depth);\n+      decls_for_scope (stmt, subr_die);\n     }\n }\n \n@@ -20240,7 +20240,7 @@ gen_type_die (tree type, dw_die_ref context_die)\n    things which are local to the given block.  */\n \n static void\n-gen_block_die (tree stmt, dw_die_ref context_die, int depth)\n+gen_block_die (tree stmt, dw_die_ref context_die)\n {\n   int must_output_die = 0;\n   bool inlined_func;\n@@ -20259,7 +20259,7 @@ gen_block_die (tree stmt, dw_die_ref context_die, int depth)\n       tree sub;\n \n       for (sub = BLOCK_SUBBLOCKS (stmt); sub; sub = BLOCK_CHAIN (sub))\n-\tgen_block_die (sub, context_die, depth + 1);\n+\tgen_block_die (sub, context_die);\n \n       return;\n     }\n@@ -20314,13 +20314,13 @@ gen_block_die (tree stmt, dw_die_ref context_die, int depth)\n \t     the concrete instance of STMT got inlined, the later will lead\n \t     to the generation of a DW_TAG_inlined_subroutine DIE.  */\n \t  if (! BLOCK_ABSTRACT (stmt))\n-\t    gen_inlined_subroutine_die (stmt, context_die, depth);\n+\t    gen_inlined_subroutine_die (stmt, context_die);\n \t}\n       else\n-\tgen_lexical_block_die (stmt, context_die, depth);\n+\tgen_lexical_block_die (stmt, context_die);\n     }\n   else\n-    decls_for_scope (stmt, context_die, depth);\n+    decls_for_scope (stmt, context_die);\n }\n \n /* Process variable DECL (or variable with origin ORIGIN) within\n@@ -20352,7 +20352,7 @@ process_scope_var (tree stmt, tree decl, tree origin, dw_die_ref context_die)\n    all of its sub-blocks.  */\n \n static void\n-decls_for_scope (tree stmt, dw_die_ref context_die, int depth)\n+decls_for_scope (tree stmt, dw_die_ref context_die)\n {\n   tree decl;\n   unsigned int i;\n@@ -20384,7 +20384,7 @@ decls_for_scope (tree stmt, dw_die_ref context_die, int depth)\n   for (subblocks = BLOCK_SUBBLOCKS (stmt);\n        subblocks != NULL;\n        subblocks = BLOCK_CHAIN (subblocks))\n-    gen_block_die (subblocks, context_die, depth + 1);\n+    gen_block_die (subblocks, context_die);\n }\n \n /* Is this a typedef we can avoid emitting?  */"}]}