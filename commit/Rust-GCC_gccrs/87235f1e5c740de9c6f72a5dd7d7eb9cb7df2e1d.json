{"sha": "87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "node_id": "C_kwDOANBUbNoAKDg3MjM1ZjFlNWM3NDBkZTljNmY3MmE1ZGQ3ZDdlYjljYjdkZjJlMWQ", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-10-31T06:04:08Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-10-31T06:04:12Z"}, "message": "i386:: using __bf16 for AVX512BF16 intrinsics\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512bf16intrin.h (__attribute__): Change short to bf16.\n\t(_mm_cvtsbh_ss): Ditto.\n\t(_mm512_cvtne2ps_pbh): Ditto.\n\t(_mm512_mask_cvtne2ps_pbh): Ditto.\n\t(_mm512_maskz_cvtne2ps_pbh): Ditto.\n\t* config/i386/avx512bf16vlintrin.h (__attribute__): Ditto.\n\t(_mm256_cvtne2ps_pbh): Ditto.\n\t(_mm256_mask_cvtne2ps_pbh): Ditto.\n\t(_mm256_maskz_cvtne2ps_pbh): Ditto.\n\t(_mm_cvtne2ps_pbh): Ditto.\n\t(_mm_mask_cvtne2ps_pbh): Ditto.\n\t(_mm_maskz_cvtne2ps_pbh): Ditto.\n\t(_mm_cvtness_sbh): Ditto.\n\t* config/i386/i386-builtin-types.def (V8BF): Add new\n\tDEF_VECTOR_TYPE for BFmode.\n\t(V16BF): Ditto.\n\t(V32BF): Ditto.\n\t* config/i386/i386-builtin.def (BDESC): Fixed builtins.\n\t* config/i386/i386-expand.cc (ix86_expand_args_builtin): Changed\n\tavx512bf16 ix86_builtin_func_type included HI to BF.\n\t* config/i386/immintrin.h: Add SSE2 depend for avx512bf16.\n\t* config/i386/sse.md (TARGET_AVX512VL): Changed HI vector to BF\n\tvector.\n\t(avx512f_cvtneps2bf16_v4sf): New define_expand.\n\t(*avx512f_cvtneps2bf16_v4sf): New define_insn.\n\t(avx512f_cvtneps2bf16_v4sf_maskz):Ditto.\n\t(avx512f_cvtneps2bf16_v4sf_mask): Ditto.\n\t(avx512f_cvtneps2bf16_v4sf_mask_1): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bf16-cvtsbh2ss-1.c: Add fpmath option.\n\t* gcc.target/i386/avx512bf16-vdpbf16ps-2.c: Fixed\n\tscan-assembler.\n\t* gcc.target/i386/avx512bf16vl-cvtness2sbh-1.c: Add x/y suffix\n\tfor vcvtneps2bf16.\n\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c: Ditto.", "tree": {"sha": "04704741c19b5506500c901c12f632e64107c37b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04704741c19b5506500c901c12f632e64107c37b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6913cad2a38bc406b137b06d579b650f6fe9a2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6913cad2a38bc406b137b06d579b650f6fe9a2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6913cad2a38bc406b137b06d579b650f6fe9a2e6"}], "stats": {"total": 315, "additions": 189, "deletions": 126}, "files": [{"sha": "ea1d0125b3fb704338ccac5755a6b678cd8469d4", "filename": "gcc/config/i386/avx512bf16intrin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -35,16 +35,16 @@\n #endif /* __AVX512BF16__ */\n \n /* Internal data types for implementing the intrinsics.  */\n-typedef short __v32bh __attribute__ ((__vector_size__ (64)));\n+typedef __bf16 __v32bf __attribute__ ((__vector_size__ (64)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n-typedef short __m512bh __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef __bf16 __m512bh __attribute__ ((__vector_size__ (64), __may_alias__));\n \n /* Convert One BF16 Data to One Single Float Data.  */\n extern __inline float\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cvtsbh_ss (__bfloat16 __A)\n+_mm_cvtsbh_ss (__bf16 __A)\n {\n   union{ float a; unsigned int b;} __tmp;\n   __tmp.b = ((unsigned int)(__A)) << 16;\n@@ -57,21 +57,21 @@ extern __inline __m512bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cvtne2ps_pbh (__m512 __A, __m512 __B)\n {\n-  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi(__A, __B);\n+  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32bf(__A, __B);\n }\n \n extern __inline __m512bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtne2ps_pbh (__m512bh __A, __mmask32 __B, __m512 __C, __m512 __D)\n {\n-  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi_mask(__C, __D, __A, __B);\n+  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32bf_mask(__C, __D, __A, __B);\n }\n \n extern __inline __m512bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_cvtne2ps_pbh (__mmask32 __A, __m512 __B, __m512 __C)\n {\n-  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi_maskz(__B, __C, __A);\n+  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32bf_maskz(__B, __C, __A);\n }\n \n /* vcvtneps2bf16 */"}, {"sha": "56c28f14cf6d4056056bf5564aa5146aff4789f6", "filename": "gcc/config/i386/avx512bf16vlintrin.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -35,57 +35,58 @@\n #endif /* __AVX512BF16__ */\n \n /* Internal data types for implementing the intrinsics.  */\n-typedef short __v16bh __attribute__ ((__vector_size__ (32)));\n-typedef short __v8bh __attribute__ ((__vector_size__ (16)));\n+typedef __bf16 __v16bf __attribute__ ((__vector_size__ (32)));\n+typedef __bf16 __v8bf __attribute__ ((__vector_size__ (16)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n-typedef short __m256bh __attribute__ ((__vector_size__ (32), __may_alias__));\n-typedef short __m128bh __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef __bf16 __m256bh __attribute__ ((__vector_size__ (32), __may_alias__));\n+typedef __bf16 __m128bh __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+typedef __bf16 __bfloat16;\n \n-typedef unsigned short __bfloat16;\n /* vcvtne2ps2bf16 */\n \n extern __inline __m256bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cvtne2ps_pbh (__m256 __A, __m256 __B)\n {\n-  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi(__A, __B);\n+  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16bf(__A, __B);\n }\n \n extern __inline __m256bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtne2ps_pbh (__m256bh __A, __mmask16 __B, __m256 __C, __m256 __D)\n {\n-  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi_mask(__C, __D, __A, __B);\n+  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16bf_mask(__C, __D, __A, __B);\n }\n \n extern __inline __m256bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_cvtne2ps_pbh (__mmask16 __A, __m256 __B, __m256 __C)\n {\n-  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi_maskz(__B, __C, __A);\n+  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16bf_maskz(__B, __C, __A);\n }\n \n extern __inline __m128bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtne2ps_pbh (__m128 __A, __m128 __B)\n {\n-  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi(__A, __B);\n+  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8bf(__A, __B);\n }\n \n extern __inline __m128bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtne2ps_pbh (__m128bh __A, __mmask8 __B, __m128 __C, __m128 __D)\n {\n-  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi_mask(__C, __D, __A, __B);\n+  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8bf_mask(__C, __D, __A, __B);\n }\n \n extern __inline __m128bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_cvtne2ps_pbh (__mmask8 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi_maskz(__B, __C, __A);\n+  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8bf_maskz(__B, __C, __A);\n }\n \n /* vcvtneps2bf16 */\n@@ -176,13 +177,13 @@ _mm_maskz_dpbf16_ps (__mmask8 __A, __m128 __B, __m128bh __C, __m128bh __D)\n   return (__m128)__builtin_ia32_dpbf16ps_v4sf_maskz(__B, __C, __D, __A);\n }\n \n-extern __inline __bfloat16\n+extern __inline __bf16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtness_sbh (float __A)\n {\n   __v4sf __V = {__A, 0, 0, 0};\n-  __v8hi __R = __builtin_ia32_cvtneps2bf16_v4sf_mask ((__v4sf)__V,\n-\t       (__v8hi)_mm_undefined_si128 (), (__mmask8)-1);\n+  __v8bf __R = __builtin_ia32_cvtneps2bf16_v4sf_mask ((__v4sf)__V,\n+\t       (__v8bf)_mm_undefined_si128 (), (__mmask8)-1);\n   return __R[0];\n }\n "}, {"sha": "aedae2d7750fcad5e4e5587bff85cd7c74a9bc86", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -87,6 +87,7 @@ DEF_VECTOR_TYPE (V8QI, QI)\n DEF_VECTOR_TYPE (V2DF, DOUBLE)\n DEF_VECTOR_TYPE (V4SF, FLOAT)\n DEF_VECTOR_TYPE (V8HF, FLOAT16)\n+DEF_VECTOR_TYPE (V8BF, BFLOAT16)\n DEF_VECTOR_TYPE (V2DI, DI)\n DEF_VECTOR_TYPE (V4SI, SI)\n DEF_VECTOR_TYPE (V8HI, HI)\n@@ -100,6 +101,7 @@ DEF_VECTOR_TYPE (V16UQI, UQI, V16QI)\n DEF_VECTOR_TYPE (V4DF, DOUBLE)\n DEF_VECTOR_TYPE (V8SF, FLOAT)\n DEF_VECTOR_TYPE (V16HF, FLOAT16)\n+DEF_VECTOR_TYPE (V16BF, BFLOAT16)\n DEF_VECTOR_TYPE (V4DI, DI)\n DEF_VECTOR_TYPE (V8SI, SI)\n DEF_VECTOR_TYPE (V16HI, HI)\n@@ -111,6 +113,7 @@ DEF_VECTOR_TYPE (V16UHI, UHI, V16HI)\n # AVX512F vectors\n DEF_VECTOR_TYPE (V32SF, FLOAT)\n DEF_VECTOR_TYPE (V32HF, FLOAT16)\n+DEF_VECTOR_TYPE (V32BF, BFLOAT16)\n DEF_VECTOR_TYPE (V16SF, FLOAT)\n DEF_VECTOR_TYPE (V8DF, DOUBLE)\n DEF_VECTOR_TYPE (V8DI, DI)\n@@ -1273,30 +1276,30 @@ DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, UHI)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, UHI)\n \n # BF16 builtins\n-DEF_FUNCTION_TYPE (V32HI, V16SF, V16SF)\n-DEF_FUNCTION_TYPE (V32HI, V16SF, V16SF, V32HI, USI)\n-DEF_FUNCTION_TYPE (V32HI, V16SF, V16SF, USI)\n-DEF_FUNCTION_TYPE (V16HI, V8SF, V8SF)\n-DEF_FUNCTION_TYPE (V16HI, V8SF, V8SF, V16HI, UHI)\n-DEF_FUNCTION_TYPE (V16HI, V8SF, V8SF, UHI)\n-DEF_FUNCTION_TYPE (V8HI, V4SF, V4SF)\n-DEF_FUNCTION_TYPE (V8HI, V4SF, V4SF, V8HI, UQI)\n-DEF_FUNCTION_TYPE (V8HI, V4SF, V4SF, UQI)\n-DEF_FUNCTION_TYPE (V16HI, V16SF)\n-DEF_FUNCTION_TYPE (V16HI, V16SF, V16HI, UHI)\n-DEF_FUNCTION_TYPE (V16HI, V16SF, UHI)\n-DEF_FUNCTION_TYPE (V8HI, V8SF)\n-DEF_FUNCTION_TYPE (V8HI, V8SF, V8HI, UQI)\n-DEF_FUNCTION_TYPE (V8HI, V8SF, UQI)\n-DEF_FUNCTION_TYPE (V8HI, V4SF)\n-DEF_FUNCTION_TYPE (V8HI, V4SF, V8HI, UQI)\n-DEF_FUNCTION_TYPE (V8HI, V4SF, UQI)\n-DEF_FUNCTION_TYPE (V16SF, V16SF, V32HI, V32HI)\n-DEF_FUNCTION_TYPE (V16SF, V16SF, V32HI, V32HI, UHI)\n-DEF_FUNCTION_TYPE (V8SF, V8SF, V16HI, V16HI)\n-DEF_FUNCTION_TYPE (V8SF, V8SF, V16HI, V16HI, UQI)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, V8HI, V8HI)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, V8HI, V8HI, UQI)\n+DEF_FUNCTION_TYPE (V32BF, V16SF, V16SF)\n+DEF_FUNCTION_TYPE (V32BF, V16SF, V16SF, V32BF, USI)\n+DEF_FUNCTION_TYPE (V32BF, V16SF, V16SF, USI)\n+DEF_FUNCTION_TYPE (V16BF, V8SF, V8SF)\n+DEF_FUNCTION_TYPE (V16BF, V8SF, V8SF, V16BF, UHI)\n+DEF_FUNCTION_TYPE (V16BF, V8SF, V8SF, UHI)\n+DEF_FUNCTION_TYPE (V8BF, V4SF, V4SF)\n+DEF_FUNCTION_TYPE (V8BF, V4SF, V4SF, V8BF, UQI)\n+DEF_FUNCTION_TYPE (V8BF, V4SF, V4SF, UQI)\n+DEF_FUNCTION_TYPE (V16BF, V16SF)\n+DEF_FUNCTION_TYPE (V16BF, V16SF, V16BF, UHI)\n+DEF_FUNCTION_TYPE (V16BF, V16SF, UHI)\n+DEF_FUNCTION_TYPE (V8BF, V8SF)\n+DEF_FUNCTION_TYPE (V8BF, V8SF, V8BF, UQI)\n+DEF_FUNCTION_TYPE (V8BF, V8SF, UQI)\n+DEF_FUNCTION_TYPE (V8BF, V4SF)\n+DEF_FUNCTION_TYPE (V8BF, V4SF, V8BF, UQI)\n+DEF_FUNCTION_TYPE (V8BF, V4SF, UQI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V32BF, V32BF)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V32BF, V32BF, UHI)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V16BF, V16BF)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V16BF, V16BF, UQI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V8BF, V8BF)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V8BF, V8BF, UQI)\n \n # KEYLOCKER builtins\n DEF_FUNCTION_TYPE (UINT, UINT, V2DI, V2DI, PVOID)"}, {"sha": "5802e2049a850b81fca1bbf517ee841a04f7488a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -2779,33 +2779,33 @@ BDESC (0, OPTION_MASK_ISA2_VAES, CODE_FOR_vaesenclast_v32qi, \"__builtin_ia32_vae\n BDESC (0, OPTION_MASK_ISA2_VAES, CODE_FOR_vaesenclast_v64qi, \"__builtin_ia32_vaesenclast_v64qi\", IX86_BUILTIN_VAESENCLAST64, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n \n /* BF16 */\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32hi, \"__builtin_ia32_cvtne2ps2bf16_v32hi\", IX86_BUILTIN_CVTNE2PS2HI16_V32HI, UNKNOWN, (int) V32HI_FTYPE_V16SF_V16SF)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32hi_mask, \"__builtin_ia32_cvtne2ps2bf16_v32hi_mask\", IX86_BUILTIN_CVTNE2PS2HI16_V32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V16SF_V16SF_V32HI_USI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32hi_maskz, \"__builtin_ia32_cvtne2ps2bf16_v32hi_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V16SF_V16SF_USI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16hi, \"__builtin_ia32_cvtne2ps2bf16_v16hi\", IX86_BUILTIN_CVTNE2PS2HI16_V16HI, UNKNOWN, (int) V16HI_FTYPE_V8SF_V8SF)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16hi_mask, \"__builtin_ia32_cvtne2ps2bf16_v16hi_mask\", IX86_BUILTIN_CVTNE2PS2HI16_V16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V8SF_V8SF_V16HI_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16hi_maskz, \"__builtin_ia32_cvtne2ps2bf16_v16hi_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V8SF_V8SF_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8hi, \"__builtin_ia32_cvtne2ps2bf16_v8hi\", IX86_BUILTIN_CVTNE2PS2HI16_V8HI, UNKNOWN, (int) V8HI_FTYPE_V4SF_V4SF)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8hi_mask, \"__builtin_ia32_cvtne2ps2bf16_v8hi_mask\", IX86_BUILTIN_CVTNE2PS2HI16_V8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V4SF_V4SF_V8HI_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8hi_maskz, \"__builtin_ia32_cvtne2ps2bf16_v8hi_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V4SF_V4SF_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf, \"__builtin_ia32_cvtneps2bf16_v16sf\", IX86_BUILTIN_CVTNEPS2HI16_V16SF, UNKNOWN, (int) V16HI_FTYPE_V16SF)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_mask, \"__builtin_ia32_cvtneps2bf16_v16sf_mask\", IX86_BUILTIN_CVTNEPS2HI16_V16SF_MASK, UNKNOWN, (int) V16HI_FTYPE_V16SF_V16HI_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_maskz, \"__builtin_ia32_cvtneps2bf16_v16sf_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V16SF_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16SF_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf, \"__builtin_ia32_cvtneps2bf16_v8sf\", IX86_BUILTIN_CVTNEPS2HI16_V8SF, UNKNOWN, (int) V8HI_FTYPE_V8SF)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_mask, \"__builtin_ia32_cvtneps2bf16_v8sf_mask\", IX86_BUILTIN_CVTNEPS2HI16_V8SF_MASK, UNKNOWN, (int) V8HI_FTYPE_V8SF_V8HI_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_maskz, \"__builtin_ia32_cvtneps2bf16_v8sf_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V8SF_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8SF_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf, \"__builtin_ia32_cvtneps2bf16_v4sf\", IX86_BUILTIN_CVTNEPS2HI16_V4SF, UNKNOWN, (int) V8HI_FTYPE_V4SF)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_mask, \"__builtin_ia32_cvtneps2bf16_v4sf_mask\", IX86_BUILTIN_CVTNEPS2HI16_V4SF_MASK, UNKNOWN, (int) V8HI_FTYPE_V4SF_V8HI_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_maskz, \"__builtin_ia32_cvtneps2bf16_v4sf_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V4SF_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V4SF_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf, \"__builtin_ia32_dpbf16ps_v16sf\", IX86_BUILTIN_DPHI16PS_V16SF, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32HI_V32HI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf_mask, \"__builtin_ia32_dpbf16ps_v16sf_mask\", IX86_BUILTIN_DPHI16PS_V16SF_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32HI_V32HI_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf_maskz, \"__builtin_ia32_dpbf16ps_v16sf_maskz\", IX86_BUILTIN_DPHI16PS_V16SF_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32HI_V32HI_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf, \"__builtin_ia32_dpbf16ps_v8sf\", IX86_BUILTIN_DPHI16PS_V8SF, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16HI_V16HI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_mask, \"__builtin_ia32_dpbf16ps_v8sf_mask\", IX86_BUILTIN_DPHI16PS_V8SF_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16HI_V16HI_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_maskz, \"__builtin_ia32_dpbf16ps_v8sf_maskz\", IX86_BUILTIN_DPHI16PS_V8SF_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16HI_V16HI_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf, \"__builtin_ia32_dpbf16ps_v4sf\", IX86_BUILTIN_DPHI16PS_V4SF, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_mask, \"__builtin_ia32_dpbf16ps_v4sf_mask\", IX86_BUILTIN_DPHI16PS_V4SF_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_maskz, \"__builtin_ia32_dpbf16ps_v4sf_maskz\", IX86_BUILTIN_DPHI16PS_V4SF_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32bf, \"__builtin_ia32_cvtne2ps2bf16_v32bf\", IX86_BUILTIN_CVTNE2PS2BF16_V32BF, UNKNOWN, (int) V32BF_FTYPE_V16SF_V16SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32bf_mask, \"__builtin_ia32_cvtne2ps2bf16_v32bf_mask\", IX86_BUILTIN_CVTNE2PS2BF16_V32BF_MASK, UNKNOWN, (int) V32BF_FTYPE_V16SF_V16SF_V32BF_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32bf_maskz, \"__builtin_ia32_cvtne2ps2bf16_v32bf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V32BF_MASKZ, UNKNOWN, (int) V32BF_FTYPE_V16SF_V16SF_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16bf, \"__builtin_ia32_cvtne2ps2bf16_v16bf\", IX86_BUILTIN_CVTNE2PS2BF16_V16BF, UNKNOWN, (int) V16BF_FTYPE_V8SF_V8SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16bf_mask, \"__builtin_ia32_cvtne2ps2bf16_v16bf_mask\", IX86_BUILTIN_CVTNE2PS2BF16_V16BF_MASK, UNKNOWN, (int) V16BF_FTYPE_V8SF_V8SF_V16BF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16bf_maskz, \"__builtin_ia32_cvtne2ps2bf16_v16bf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V16BF_MASKZ, UNKNOWN, (int) V16BF_FTYPE_V8SF_V8SF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8bf, \"__builtin_ia32_cvtne2ps2bf16_v8bf\", IX86_BUILTIN_CVTNE2PS2BF16_V8BF, UNKNOWN, (int) V8BF_FTYPE_V4SF_V4SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8bf_mask, \"__builtin_ia32_cvtne2ps2bf16_v8bf_mask\", IX86_BUILTIN_CVTNE2PS2BF16_V8BF_MASK, UNKNOWN, (int) V8BF_FTYPE_V4SF_V4SF_V8BF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8bf_maskz, \"__builtin_ia32_cvtne2ps2bf16_v8bf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V8BF_MASKZ, UNKNOWN, (int) V8BF_FTYPE_V4SF_V4SF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf, \"__builtin_ia32_cvtneps2bf16_v16sf\", IX86_BUILTIN_CVTNEPS2BF16_V16SF, UNKNOWN, (int) V16BF_FTYPE_V16SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_mask, \"__builtin_ia32_cvtneps2bf16_v16sf_mask\", IX86_BUILTIN_CVTNEPS2BF16_V16SF_MASK, UNKNOWN, (int) V16BF_FTYPE_V16SF_V16BF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_maskz, \"__builtin_ia32_cvtneps2bf16_v16sf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V16SF_MASKZ, UNKNOWN, (int) V16BF_FTYPE_V16SF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf, \"__builtin_ia32_cvtneps2bf16_v8sf\", IX86_BUILTIN_CVTNEPS2BF16_V8SF, UNKNOWN, (int) V8BF_FTYPE_V8SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_mask, \"__builtin_ia32_cvtneps2bf16_v8sf_mask\", IX86_BUILTIN_CVTNEPS2BF16_V8SF_MASK, UNKNOWN, (int) V8BF_FTYPE_V8SF_V8BF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_maskz, \"__builtin_ia32_cvtneps2bf16_v8sf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V8SF_MASKZ, UNKNOWN, (int) V8BF_FTYPE_V8SF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf, \"__builtin_ia32_cvtneps2bf16_v4sf\", IX86_BUILTIN_CVTNEPS2BF16_V4SF, UNKNOWN, (int) V8BF_FTYPE_V4SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_mask, \"__builtin_ia32_cvtneps2bf16_v4sf_mask\", IX86_BUILTIN_CVTNEPS2BF16_V4SF_MASK, UNKNOWN, (int) V8BF_FTYPE_V4SF_V8BF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_maskz, \"__builtin_ia32_cvtneps2bf16_v4sf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V4SF_MASKZ, UNKNOWN, (int) V8BF_FTYPE_V4SF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf, \"__builtin_ia32_dpbf16ps_v16sf\", IX86_BUILTIN_DPBF16PS_V16SF, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32BF_V32BF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf_mask, \"__builtin_ia32_dpbf16ps_v16sf_mask\", IX86_BUILTIN_DPBF16PS_V16SF_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32BF_V32BF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf_maskz, \"__builtin_ia32_dpbf16ps_v16sf_maskz\", IX86_BUILTIN_DPBF16PS_V16SF_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32BF_V32BF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf, \"__builtin_ia32_dpbf16ps_v8sf\", IX86_BUILTIN_DPBF16PS_V8SF, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16BF_V16BF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_mask, \"__builtin_ia32_dpbf16ps_v8sf_mask\", IX86_BUILTIN_DPBF16PS_V8SF_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16BF_V16BF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_maskz, \"__builtin_ia32_dpbf16ps_v8sf_maskz\", IX86_BUILTIN_DPBF16PS_V8SF_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16BF_V16BF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf, \"__builtin_ia32_dpbf16ps_v4sf\", IX86_BUILTIN_DPBF16PS_V4SF, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8BF_V8BF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_mask, \"__builtin_ia32_dpbf16ps_v4sf_mask\", IX86_BUILTIN_DPBF16PS_V4SF_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8BF_V8BF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_maskz, \"__builtin_ia32_dpbf16ps_v4sf_maskz\", IX86_BUILTIN_DPBF16PS_V4SF_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8BF_V8BF_UQI)\n \n /* AVX512FP16.  */\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv8hf3_mask, \"__builtin_ia32_addph128_mask\", IX86_BUILTIN_ADDPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)"}, {"sha": "8e1ef0b4c4a38863a2282044d6eaa6bffa9a1023", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -10462,9 +10462,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8DF_FTYPE_V2DF:\n     case V8DF_FTYPE_V8DF:\n     case V4DI_FTYPE_V4DI:\n-    case V16HI_FTYPE_V16SF:\n-    case V8HI_FTYPE_V8SF:\n-    case V8HI_FTYPE_V4SF:\n+    case V16BF_FTYPE_V16SF:\n+    case V8BF_FTYPE_V8SF:\n+    case V8BF_FTYPE_V4SF:\n       nargs = 1;\n       break;\n     case V4SF_FTYPE_V4SF_VEC_MERGE:\n@@ -10592,12 +10592,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case USI_FTYPE_USI_USI:\n     case UDI_FTYPE_UDI_UDI:\n     case V16SI_FTYPE_V8DF_V8DF:\n-    case V32HI_FTYPE_V16SF_V16SF:\n-    case V16HI_FTYPE_V8SF_V8SF:\n-    case V8HI_FTYPE_V4SF_V4SF:\n-    case V16HI_FTYPE_V16SF_UHI:\n-    case V8HI_FTYPE_V8SF_UQI:\n-    case V8HI_FTYPE_V4SF_UQI:\n+    case V32BF_FTYPE_V16SF_V16SF:\n+    case V16BF_FTYPE_V8SF_V8SF:\n+    case V8BF_FTYPE_V4SF_V4SF:\n+    case V16BF_FTYPE_V16SF_UHI:\n+    case V8BF_FTYPE_V8SF_UQI:\n+    case V8BF_FTYPE_V4SF_UQI:\n       nargs = 2;\n       break;\n     case V2DI_FTYPE_V2DI_INT_CONVERT:\n@@ -10803,15 +10803,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_V16HI_V16HI_V16HI:\n     case V8SI_FTYPE_V8SI_V8SI_V8SI:\n     case V8HI_FTYPE_V8HI_V8HI_V8HI:\n-    case V32HI_FTYPE_V16SF_V16SF_USI:\n-    case V16HI_FTYPE_V8SF_V8SF_UHI:\n-    case V8HI_FTYPE_V4SF_V4SF_UQI:\n-    case V16HI_FTYPE_V16SF_V16HI_UHI:\n-    case V8HI_FTYPE_V8SF_V8HI_UQI:\n-    case V8HI_FTYPE_V4SF_V8HI_UQI:\n-    case V16SF_FTYPE_V16SF_V32HI_V32HI:\n-    case V8SF_FTYPE_V8SF_V16HI_V16HI:\n-    case V4SF_FTYPE_V4SF_V8HI_V8HI:\n+    case V32BF_FTYPE_V16SF_V16SF_USI:\n+    case V16BF_FTYPE_V8SF_V8SF_UHI:\n+    case V8BF_FTYPE_V4SF_V4SF_UQI:\n+    case V16BF_FTYPE_V16SF_V16BF_UHI:\n+    case V8BF_FTYPE_V8SF_V8BF_UQI:\n+    case V8BF_FTYPE_V4SF_V8BF_UQI:\n+    case V16SF_FTYPE_V16SF_V32BF_V32BF:\n+    case V8SF_FTYPE_V8SF_V16BF_V16BF:\n+    case V4SF_FTYPE_V4SF_V8BF_V8BF:\n       nargs = 3;\n       break;\n     case V32QI_FTYPE_V32QI_V32QI_INT:\n@@ -10958,9 +10958,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_V32QI_V32QI_V16HI_UHI:\n     case V8SI_FTYPE_V16HI_V16HI_V8SI_UQI:\n     case V4SI_FTYPE_V8HI_V8HI_V4SI_UQI:\n-    case V32HI_FTYPE_V16SF_V16SF_V32HI_USI:\n-    case V16HI_FTYPE_V8SF_V8SF_V16HI_UHI:\n-    case V8HI_FTYPE_V4SF_V4SF_V8HI_UQI:\n+    case V32BF_FTYPE_V16SF_V16SF_V32BF_USI:\n+    case V16BF_FTYPE_V8SF_V8SF_V16BF_UHI:\n+    case V8BF_FTYPE_V4SF_V4SF_V8BF_UQI:\n       nargs = 4;\n       break;\n     case V2DF_FTYPE_V2DF_V2DF_V2DI_INT:\n@@ -10998,9 +10998,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       break;\n     case UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED:\n     case UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG:\n-    case V16SF_FTYPE_V16SF_V32HI_V32HI_UHI:\n-    case V8SF_FTYPE_V8SF_V16HI_V16HI_UQI:\n-    case V4SF_FTYPE_V4SF_V8HI_V8HI_UQI:\n+    case V16SF_FTYPE_V16SF_V32BF_V32BF_UHI:\n+    case V8SF_FTYPE_V8SF_V16BF_V16BF_UQI:\n+    case V4SF_FTYPE_V4SF_V8BF_V8BF_UQI:\n       nargs = 4;\n       break;\n     case UQI_FTYPE_V8DI_V8DI_INT_UQI:"}, {"sha": "c62d50f195112f73a87e195d6f599ed6a03fb05d", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -118,9 +118,11 @@\n \n #include <vpclmulqdqintrin.h>\n \n+#ifdef __SSE2__\n #include <avx512bf16vlintrin.h>\n \n #include <avx512bf16intrin.h>\n+#endif\n \n #include <amxtileintrin.h>\n "}, {"sha": "fba81a93c1a1298506454ac1e5e46102c6b1914a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 79, "deletions": 22, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -187,8 +187,6 @@\n   UNSPEC_VP2INTERSECT\n \n   ;; For AVX512BF16 support\n-  UNSPEC_VCVTNE2PS2BF16\n-  UNSPEC_VCVTNEPS2BF16\n   UNSPEC_VDPBF16PS\n \n   ;; For AVX512FP16 suppport\n@@ -28918,41 +28916,101 @@\n   \"vp2intersectd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr (\"prefix\") (\"evex\"))])\n \n-(define_mode_iterator BF16 [V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n+(define_mode_iterator VF_AVX512BF16VL\n+  [V32BF (V16BF \"TARGET_AVX512VL\") (V8BF \"TARGET_AVX512VL\")])\n ;; Converting from BF to SF\n (define_mode_attr bf16_cvt_2sf\n-  [(V32HI  \"V16SF\") (V16HI  \"V8SF\") (V8HI  \"V4SF\")])\n+  [(V32BF  \"V16SF\") (V16BF  \"V8SF\") (V8BF  \"V4SF\")])\n ;; Converting from SF to BF\n (define_mode_attr sf_cvt_bf16\n-  [(V4SF  \"V8HI\") (V8SF  \"V8HI\") (V16SF  \"V16HI\")])\n+  [(V8SF  \"V8BF\") (V16SF  \"V16BF\")])\n ;; Mapping from BF to SF\n (define_mode_attr sf_bf16\n-  [(V4SF  \"V8HI\") (V8SF  \"V16HI\") (V16SF  \"V32HI\")])\n+  [(V4SF  \"V8BF\") (V8SF  \"V16BF\") (V16SF  \"V32BF\")])\n \n (define_expand \"avx512f_cvtne2ps2bf16_<mode>_maskz\"\n-  [(match_operand:BF16 0 \"register_operand\")\n+  [(match_operand:VF_AVX512BF16VL 0 \"register_operand\")\n    (match_operand:<bf16_cvt_2sf> 1 \"register_operand\")\n-   (match_operand:<bf16_cvt_2sf> 2 \"register_operand\")\n+   (match_operand:<bf16_cvt_2sf> 2 \"nonimmediate_operand\")\n    (match_operand:<avx512fmaskmode> 3 \"register_operand\")]\n   \"TARGET_AVX512BF16\"\n {\n-  emit_insn (gen_avx512f_cvtne2ps2bf16_<mode>_mask(operands[0], operands[1],\n-    operands[2], CONST0_RTX(<MODE>mode), operands[3]));\n+  emit_insn (gen_avx512f_cvtne2ps2bf16_<mode>_mask(operands[0], operands[2],\n+    operands[1], CONST0_RTX(<MODE>mode), operands[3]));\n   DONE;\n })\n \n (define_insn \"avx512f_cvtne2ps2bf16_<mode><mask_name>\"\n-  [(set (match_operand:BF16 0 \"register_operand\" \"=v\")\n-\t(unspec:BF16\n-\t  [(match_operand:<bf16_cvt_2sf> 1 \"register_operand\" \"v\")\n-\t   (match_operand:<bf16_cvt_2sf> 2 \"register_operand\" \"v\")]\n-        UNSPEC_VCVTNE2PS2BF16))]\n+  [(set (match_operand:VF_AVX512BF16VL 0 \"register_operand\" \"=v\")\n+\t(vec_concat:VF_AVX512BF16VL\n+\t  (float_truncate:<ssehalfvecmode>\n+\t    (match_operand:<bf16_cvt_2sf> 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (float_truncate:<ssehalfvecmode>\n+\t    (match_operand:<bf16_cvt_2sf> 1 \"register_operand\" \"v\"))))]\n   \"TARGET_AVX512BF16\"\n   \"vcvtne2ps2bf16\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\")\n \n+(define_expand \"avx512f_cvtneps2bf16_v4sf\"\n+  [(set (match_operand:V8BF 0 \"register_operand\")\n+\t(vec_concat:V8BF\n+\t  (float_truncate:V4BF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\"))\n+\t  (match_dup 2)))]\n+  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n+  \"operands[2] = CONST0_RTX (V4BFmode);\")\n+\n+(define_insn \"*avx512f_cvtneps2bf16_v4sf\"\n+  [(set (match_operand:V8BF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8BF\n+\t  (float_truncate:V4BF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:V4BF 2 \"const0_operand\")))]\n+  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n+  \"vcvtneps2bf16{x}\\t{%1, %0|%0, %1}\")\n+\n+(define_expand \"avx512f_cvtneps2bf16_v4sf_maskz\"\n+  [(match_operand:V8BF 0 \"register_operand\")\n+   (match_operand:V4SF 1 \"nonimmediate_operand\")\n+   (match_operand:QI 2 \"register_operand\")]\n+  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n+{\n+  emit_insn (gen_avx512f_cvtneps2bf16_v4sf_mask_1(operands[0], operands[1],\n+    CONST0_RTX(V8BFmode), operands[2], CONST0_RTX(V4BFmode)));\n+  DONE;\n+})\n+\n+(define_expand \"avx512f_cvtneps2bf16_v4sf_mask\"\n+  [(match_operand:V8BF 0 \"register_operand\")\n+   (match_operand:V4SF 1 \"nonimmediate_operand\")\n+   (match_operand:V8BF 2 \"nonimm_or_0_operand\")\n+   (match_operand:QI 3 \"register_operand\")]\n+  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n+{\n+  emit_insn (gen_avx512f_cvtneps2bf16_v4sf_mask_1(operands[0], operands[1],\n+    operands[2], operands[3], CONST0_RTX(V4BFmode)));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_cvtneps2bf16_v4sf_mask_1\"\n+  [(set (match_operand:V8BF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8BF\n+\t  (vec_merge:V4BF\n+\t    (float_truncate:V4BF\n+\t      (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\"))\n+\t    (vec_select:V4BF\n+\t      (match_operand:V8BF 2 \"nonimm_or_0_operand\" \"0C\")\n+\t      (parallel [(const_int 0) (const_int 1)\n+\t\t\t (const_int 2) (const_int 3)]))\n+\t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t  (match_operand:V4BF 4 \"const0_operand\")))]\n+  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n+  \"vcvtneps2bf16{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\")\n+\n+(define_mode_iterator VF1_AVX512_256 [V16SF (V8SF \"TARGET_AVX512VL\")])\n+\n (define_expand \"avx512f_cvtneps2bf16_<mode>_maskz\"\n   [(match_operand:<sf_cvt_bf16> 0 \"register_operand\")\n-   (match_operand:VF1_AVX512VL 1 \"register_operand\")\n+   (match_operand:VF1_AVX512_256 1 \"nonimmediate_operand\")\n    (match_operand:<avx512fmaskmode> 2 \"register_operand\")]\n   \"TARGET_AVX512BF16\"\n {\n@@ -28963,11 +29021,10 @@\n \n (define_insn \"avx512f_cvtneps2bf16_<mode><mask_name>\"\n   [(set (match_operand:<sf_cvt_bf16> 0 \"register_operand\" \"=v\")\n-\t(unspec:<sf_cvt_bf16>\n-\t  [(match_operand:VF1_AVX512VL 1 \"register_operand\" \"v\")]\n-        UNSPEC_VCVTNEPS2BF16))]\n+\t(float_truncate:<sf_cvt_bf16>\n+\t  (match_operand:VF1_AVX512_256 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512BF16\"\n-  \"vcvtneps2bf16\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")\n+  \"vcvtneps2bf16<qq2phsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")\n \n (define_expand \"avx512f_dpbf16ps_<mode>_maskz\"\n   [(match_operand:VF1_AVX512VL 0 \"register_operand\")\n@@ -28987,7 +29044,7 @@\n \t(unspec:VF1_AVX512VL\n \t  [(match_operand:VF1_AVX512VL 1 \"register_operand\" \"0\")\n \t   (match_operand:<sf_bf16> 2 \"register_operand\" \"v\")\n-\t   (match_operand:<sf_bf16> 3 \"register_operand\" \"v\")]\n+\t   (match_operand:<sf_bf16> 3 \"nonimmediate_operand\" \"vm\")]\n         UNSPEC_VDPBF16PS))]\n   \"TARGET_AVX512BF16\"\n   \"vdpbf16ps\\t{%3, %2, %0<maskz_half_operand4>|%0<maskz_half_operand4>, %2, %3}\")\n@@ -28998,7 +29055,7 @@\n \t  (unspec:VF1_AVX512VL\n \t    [(match_operand:VF1_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:<sf_bf16> 2 \"register_operand\" \"v\")\n-\t     (match_operand:<sf_bf16> 3 \"register_operand\" \"v\")]\n+\t     (match_operand:<sf_bf16> 3 \"nonimmediate_operand\" \"vm\")]\n              UNSPEC_VDPBF16PS)\n           (match_dup 1)\n           (match_operand:<avx512fmaskhalfmode> 4 \"register_operand\" \"Yk\")))]"}, {"sha": "8e929e6f159c95d01d102ae3bca962389e7a5c50", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-cvtsbh2ss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bf16 -O2\" } */\n-/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n+/* { dg-additional-options \"-fno-PIE -mfpmath=sse\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"sall\\[ \\\\t\\]+\\[^\\{\\n\\]*16\" 1 } } */\n /* { dg-final { scan-assembler-times \"movl\" 1 } } */\n "}, {"sha": "02ebdd8cf5b507ca03e1340db95335f202f18f2e", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-vdpbf16ps-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-2.c?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bf16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "b71addd6301c3aa65b081f1e437590333c21fc04", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-cvtness2sbh-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-cvtness2sbh-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-cvtness2sbh-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-cvtness2sbh-1.c?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "d3a9bdf8c347ca8769b04073fcca1bdf41b4c692", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1.c?ref=87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}]}