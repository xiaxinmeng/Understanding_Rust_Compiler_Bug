{"sha": "9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwOGY3NzY0Y2VjZDE2Y2JhODQ5NDRmMmE4YjY3YTdmNzNhN2NlNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-08-22T18:57:19Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-08-22T18:57:19Z"}, "message": "Clear EAF_NOCLOBBER for indirect calls\n\ngcc/ChangeLog:\n\n2021-08-22  Jan Hubicka  <hubicka@ucw.cz>\n\t    Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/101949\n\t* ipa-modref.c (analyze_ssa_name_flags): Indirect call implies\n\t~EAF_NOCLOBBER.\n\ngcc/testsuite/ChangeLog:\n\n2021-08-22  Jan Hubicka  <hubicka@ucw.cz>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/lto/pr101949_0.c: New test.\n\t* gcc.dg/lto/pr101949_1.c: New test.", "tree": {"sha": "641724b6b8b6b377cf84f6d977e014fbdbf98b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/641724b6b8b6b377cf84f6d977e014fbdbf98b13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/comments", "author": null, "committer": null, "parents": [{"sha": "a5416bf369419428fb139c432bcd88f6f8ee4910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5416bf369419428fb139c432bcd88f6f8ee4910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5416bf369419428fb139c432bcd88f6f8ee4910"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "549153865b80f501a5521ddb4ac5bee9236c0cb1", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "patch": "@@ -1700,6 +1700,15 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n       else if (gcall *call = dyn_cast <gcall *> (use_stmt))\n \t{\n \t  tree callee = gimple_call_fndecl (call);\n+\n+\t  /* IPA PTA internally it treats calling a function as \"writing\" to\n+\t     the argument space of all functions the function pointer points to\n+\t     (PR101949).  We can not drop EAF_NOCLOBBER only when ipa-pta\n+\t     is on since that would allow propagation of this from -fno-ipa-pta\n+\t     to -fipa-pta functions.  */\n+\t  if (gimple_call_fn (use_stmt) == name)\n+\t    lattice[index].merge (~EAF_NOCLOBBER);\n+\n \t  /* Return slot optimization would require bit of propagation;\n \t     give up for now.  */\n \t  if (gimple_call_return_slot_opt_p (call)"}, {"sha": "142dffe8780620fb3a16cd7f93e80989233cc642", "filename": "gcc/testsuite/gcc.dg/lto/pr101949_0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr101949_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr101949_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr101949_0.c?ref=9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-lto-do run } */\n+/* { dg-lto-options { \"-O2 -fipa-pta -flto -flto-partition=1to1\" } } */\n+\n+extern int bar (int (*)(int *), int *);\n+\n+static int x;\n+\n+static int __attribute__ ((noinline)) foo (int *p)\n+{\n+  *p = 1;\n+  x = 0;\n+  return *p;\n+}\n+\n+int main ()\n+{\n+  if (bar (foo, &x) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "871d15c9bfb509de3df8dab29af413f48a2701b9", "filename": "gcc/testsuite/gcc.dg/lto/pr101949_1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr101949_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b08f7764cecd16cba84944f2a8b67a7f73a7ce7/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr101949_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr101949_1.c?ref=9b08f7764cecd16cba84944f2a8b67a7f73a7ce7", "patch": "@@ -0,0 +1,4 @@\n+int __attribute__((noinline,noclone)) bar (int (*fn)(int *), int *p)\n+{\n+  return fn (p);\n+}"}]}