{"sha": "2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlNWM3YTgzNjFjOGQzZmQ3NzVkZjlhNGJiNWZmY2I1NTY4OTYwYg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-01-25T04:11:29Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-01-25T04:11:29Z"}, "message": "(movsicc): New named pattern.\n\n(movdicc, movsfcc, movdfcc): Likewise.\n(SImode conditional move): New matcher.\n\nFrom-SVN: r8796", "tree": {"sha": "957f911448308d76fea3a8beaf499e9db4ec56fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/957f911448308d76fea3a8beaf499e9db4ec56fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b/comments", "author": null, "committer": null, "parents": [{"sha": "ea414472af2c6c6266ce7acde63f7adc1eabc2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea414472af2c6c6266ce7acde63f7adc1eabc2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea414472af2c6c6266ce7acde63f7adc1eabc2a2"}], "stats": {"total": 184, "additions": 184, "deletions": 0}, "files": [{"sha": "510ad3fdd5eecb8cd1071ae3fd4247049f9133b3", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=2ee5c7a8361c8d3fd775df9a4bb5ffcb5568960b", "patch": "@@ -1304,6 +1304,24 @@\n   \"cmple $31,%1,%0\"\n   [(set_attr \"type\" \"icmp\")])\n \n+;; This pattern exists so conditional moves of SImode values are handled.\n+;; Comparisons are still done in DImode though.\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:DI\n+\t (match_operator 2 \"signed_comparison_operator\"\n+\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n+\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n+\t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI,0,rI,0\")\n+\t (match_operand:SI 5 \"reg_or_8bit_operand\" \"0,rI,0,rI\")))]\n+  \"operands[3] == const0_rtx || operands[4] == const0_rtx\"\n+  \"@\n+   cmov%C2 %r3,%1,%0\n+   cmov%D2 %r3,%5,%0\n+   cmov%c2 %r4,%1,%0\n+   cmov%d2 %r4,%5,%0\")\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:DI\n@@ -2204,6 +2222,172 @@\n \t\t\t alpha_compare_op0);\n }\")\n \f\n+;; These are the main define_expand's used to make conditional moves.\n+\n+(define_expand \"movsicc\"\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(if_then_else:DI (match_dup 5)\n+\t\t\t (match_operand:SI 2 \"reg_or_8bit_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  rtx op0,op1;\n+  enum rtx_code code = GET_CODE (operands[1]);\n+\n+  if (alpha_compare_fp_p)\n+    FAIL;\n+  switch (code)\n+    {\n+    case EQ: case NE: case LE: case LT:\n+      op0 = alpha_compare_op0;\n+      op1 = alpha_compare_op1;\n+      break;\n+    case GE:\n+      code = LE;\n+      op0 = force_reg (DImode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    case GT:\n+      code = LT;\n+      op0 = force_reg (DImode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    default:\n+      FAIL;\n+    }\n+  operands[1] = gen_rtx (code, DImode, op0, op1);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_rtx (NE, VOIDmode, operands[4], CONST0_RTX (DImode));\n+}\")\n+\n+(define_expand \"movdicc\"\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(if_then_else:DI (match_dup 5)\n+\t\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")\n+\t\t\t (match_operand:DI 3 \"reg_or_8bit_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  rtx op0,op1;\n+  enum rtx_code code = GET_CODE (operands[1]);\n+\n+  if (alpha_compare_fp_p)\n+    FAIL;\n+  switch (code)\n+    {\n+    case EQ: case NE: case LE: case LT:\n+      op0 = alpha_compare_op0;\n+      op1 = alpha_compare_op1;\n+      break;\n+    case GE:\n+      code = LE;\n+      op0 = force_reg (DImode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    case GT:\n+      code = LT;\n+      op0 = force_reg (DImode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    default:\n+      FAIL;\n+    }\n+  operands[1] = gen_rtx (code, DImode, op0, op1);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_rtx (NE, VOIDmode, operands[4], CONST0_RTX (DImode));\n+}\")\n+\n+(define_expand \"movsfcc\"\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(if_then_else:SF (match_dup 5)\n+\t\t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"\")\n+\t\t\t (match_operand:SF 3 \"reg_or_fp0_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  rtx op0,op1;\n+  enum rtx_code code = GET_CODE (operands[1]), code2 = NE;\n+\n+  if (!alpha_compare_fp_p)\n+    FAIL;\n+  switch (code)\n+    {\n+    case EQ: case LE: case LT:\n+      op0 = alpha_compare_op0;\n+      op1 = alpha_compare_op1;\n+      break;\n+    case NE:\n+      /* There isn't a cmptne insn.  */\n+      code = code2 = EQ;\n+      op0 = alpha_compare_op0;\n+      op1 = alpha_compare_op1;\n+      break;\n+    case GE:\n+      code = LE;\n+      op0 = force_reg (DFmode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    case GT:\n+      code = LT;\n+      op0 = force_reg (DFmode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    default:\n+      FAIL;\n+    }\n+  operands[1] = gen_rtx (code, DFmode, op0, op1);\n+  operands[4] = gen_reg_rtx (DFmode);\n+  operands[5] = gen_rtx (code2, VOIDmode, operands[4], CONST0_RTX (DFmode));\n+}\")\n+\n+(define_expand \"movdfcc\"\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(if_then_else:DF (match_dup 5)\n+\t\t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"\")\n+\t\t\t (match_operand:DF 3 \"reg_or_fp0_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  rtx op0,op1;\n+  enum rtx_code code = GET_CODE (operands[1]), code2 = NE;\n+\n+  if (!alpha_compare_fp_p)\n+    FAIL;\n+  switch (code)\n+    {\n+    case EQ: case LE: case LT:\n+      op0 = alpha_compare_op0;\n+      op1 = alpha_compare_op1;\n+      break;\n+    case NE:\n+      /* There isn't a cmptne insn.  */\n+      code = code2 = EQ;\n+      op0 = alpha_compare_op0;\n+      op1 = alpha_compare_op1;\n+      break;\n+    case GE:\n+      code = LE;\n+      op0 = force_reg (DFmode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    case GT:\n+      code = LT;\n+      op0 = force_reg (DFmode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    default:\n+      FAIL;\n+    }\n+  operands[1] = gen_rtx (code, DFmode, op0, op1);\n+  operands[4] = gen_reg_rtx (DFmode);\n+  operands[5] = gen_rtx (code2, VOIDmode, operands[4], CONST0_RTX (DFmode));\n+}\")\n+\f\n ;; These define_split definitions are used in cases when comparisons have\n ;; not be stated in the correct way and we need to reverse the second\n ;; comparison.  For example, x >= 7 has to be done as x < 6 with the"}]}