{"sha": "b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiM2FmYjJmMzQ0OTJlMmJmODJiMGJjYWQ4ZDg0ZDVjM2EzYTdmNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.co.uk", "date": "2000-11-01T17:02:45Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-11-01T17:02:45Z"}, "message": "Constant folding for builtins\n\nFrom-SVN: r37191", "tree": {"sha": "134205e79f38779f813ba6a5e2125ad69cafdd53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/134205e79f38779f813ba6a5e2125ad69cafdd53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/comments", "author": null, "committer": null, "parents": [{"sha": "f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5"}], "stats": {"total": 156, "additions": 116, "deletions": 40}, "files": [{"sha": "13a6999054f057dbf2cd90bfa2a80ca7d7cb7e86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -1,3 +1,14 @@\n+2000-11-01  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+\t* builtins.c (fold_builtin_constant_p, fold_builtin): New functions.\n+\t(expand_builtin_constant_p): Move parts of the code into\n+\tfold_builtin_constant_p.\n+\t(expand_builtin_strlen): Move parts of the code into fold_builtin.\n+\t* expr.h (fold_builtin): Declare.\n+\t* fold-const.c (fold): Handle builtin calls.\n+\n+\t* c-typeck.c (build_function_call): Call fold on the CALL_EXPR.\n+\n 2000-11-01  Richard Henderson  <rth@redhat.com>\n \n \t* stmt.c (expand_start_null_loop): New."}, {"sha": "7b080134d7504fb62e30cec8decee526b64dd4b9", "filename": "gcc/builtins.c", "status": "modified", "additions": 84, "deletions": 38, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -116,6 +116,7 @@ static rtx expand_builtin_frame_address\tPARAMS ((tree));\n static rtx expand_builtin_fputs\t\tPARAMS ((tree, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n+static tree fold_builtin_constant_p\tPARAMS ((tree));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -1161,44 +1162,19 @@ expand_builtin_constant_p (exp)\n {\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode value_mode = TYPE_MODE (TREE_TYPE (exp));\n+  rtx tmp;\n \n   if (arglist == 0)\n     return const0_rtx;\n-  else\n-    {\n-      tree arg = TREE_VALUE (arglist);\n-      rtx tmp;\n-\n-      /* We return 1 for a numeric type that's known to be a constant\n-\t value at compile-time or for an aggregate type that's a\n-\t literal constant.  */\n-      STRIP_NOPS (arg);\n-\n-      /* If we know this is a constant, emit the constant of one.  */\n-      if (TREE_CODE_CLASS (TREE_CODE (arg)) == 'c'\n-\t  || (TREE_CODE (arg) == CONSTRUCTOR\n-\t      && TREE_CONSTANT (arg))\n-\t  || (TREE_CODE (arg) == ADDR_EXPR\n-\t      && TREE_CODE (TREE_OPERAND (arg, 0)) == STRING_CST))\n-\treturn const1_rtx;\n-\n-      /* If we aren't going to be running CSE or this expression\n-\t has side effects, show we don't know it to be a constant.\n-\t Likewise if it's a pointer or aggregate type since in those\n-\t case we only want literals, since those are only optimized\n-\t when generating RTL, not later.  */\n-      if (TREE_SIDE_EFFECTS (arg) || cse_not_expected\n-\t  || AGGREGATE_TYPE_P (TREE_TYPE (arg))\n-\t  || POINTER_TYPE_P (TREE_TYPE (arg)))\n-\treturn const0_rtx;\n+  arglist = TREE_VALUE (arglist);\n \n-      /* Otherwise, emit (constant_p_rtx (ARG)) and let CSE get a\n-\t chance to see if it can deduce whether ARG is constant.  */\n+  /* We have taken care of the easy cases during constant folding.  This\n+     case is not obvious, so emit (constant_p_rtx (ARGLIST)) and let CSE get a\n+     chance to see if it can deduce whether ARGLIST is constant.  */\n \n-      tmp = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n-      tmp = gen_rtx_CONSTANT_P_RTX (value_mode, tmp);\n-      return tmp;\n-    }\n+  tmp = expand_expr (arglist, NULL_RTX, VOIDmode, 0);\n+  tmp = gen_rtx_CONSTANT_P_RTX (value_mode, tmp);\n+  return tmp;\n }\n \n /* Expand a call to one of the builtin math functions (sin, cos, or sqrt).\n@@ -1342,7 +1318,6 @@ expand_builtin_strlen (exp, target, mode)\n     {\n       rtx pat;\n       tree src = TREE_VALUE (arglist);\n-      tree len = c_strlen (src);\n \n       int align\n \t= get_pointer_alignment (src, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -1351,10 +1326,6 @@ expand_builtin_strlen (exp, target, mode)\n       enum machine_mode insn_mode = value_mode, char_mode;\n       enum insn_code icode = CODE_FOR_nothing;\n \n-      /* If the length is known, just return it.  */\n-      if (len != 0)\n-\treturn expand_expr (len, target, mode, EXPAND_MEMORY_USE_BAD);\n-\n       /* If SRC is not a pointer type, don't do this operation inline.  */\n       if (align == 0)\n \treturn 0;\n@@ -2814,3 +2785,78 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n      to be called normally.  */\n   return expand_call (exp, target, ignore);\n }\n+\n+/* Fold a call to __builtin_constant_p, if we know it will evaluate to a\n+   constant.  ARGLIST is the argument list of the call.  */\n+\n+static tree\n+fold_builtin_constant_p (arglist)\n+     tree arglist;\n+{\n+  if (arglist == 0)\n+    return 0;\n+\n+  arglist = TREE_VALUE (arglist);\n+\n+  /* We return 1 for a numeric type that's known to be a constant\n+     value at compile-time or for an aggregate type that's a\n+     literal constant.  */\n+  STRIP_NOPS (arglist);\n+\n+  /* If we know this is a constant, emit the constant of one.  */\n+  if (TREE_CODE_CLASS (TREE_CODE (arglist)) == 'c'\n+      || (TREE_CODE (arglist) == CONSTRUCTOR\n+\t  && TREE_CONSTANT (arglist))\n+      || (TREE_CODE (arglist) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arglist, 0)) == STRING_CST))\n+    return integer_one_node;\n+\n+  /* If we aren't going to be running CSE or this expression\n+     has side effects, show we don't know it to be a constant.\n+     Likewise if it's a pointer or aggregate type since in those\n+     case we only want literals, since those are only optimized\n+     when generating RTL, not later.  */\n+  if (TREE_SIDE_EFFECTS (arglist) || cse_not_expected\n+      || AGGREGATE_TYPE_P (TREE_TYPE (arglist))\n+      || POINTER_TYPE_P (TREE_TYPE (arglist)))\n+    return integer_zero_node;\n+\n+  return 0;\n+}\n+\n+/* Used by constant folding to eliminate some builtin calls early.  EXP is\n+   the CALL_EXPR of a call to a builtin function.  */\n+\n+tree\n+fold_builtin (exp)\n+     tree exp;\n+{\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+    return 0;\n+\n+  switch (fcode)\n+    {\n+    case BUILT_IN_CONSTANT_P:\n+      return fold_builtin_constant_p (arglist);\n+\n+    case BUILT_IN_STRLEN:\n+      if (arglist != 0\n+\t  /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+\t  && TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) == POINTER_TYPE)\n+\t{\n+\t  tree len = c_strlen (TREE_VALUE (arglist));\n+\t  if (len != 0)\n+\t    return len;\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "16dbc34363b314c17c9aa6a7e32c2d6d435ee100", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -1567,8 +1567,9 @@ build_function_call (function, params)\n \n   result = build (CALL_EXPR, TREE_TYPE (fntype),\n \t\t  function, coerced_params, NULL_TREE);\n-\n   TREE_SIDE_EFFECTS (result) = 1;\n+  result = fold (result);\n+\n   if (VOID_TYPE_P (TREE_TYPE (result)))\n     return result;\n   return require_complete_type (result);"}, {"sha": "9846778eff8526cc8387a3fe24b50478dd9c7a0a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -1,3 +1,7 @@\n+2000-11-01  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+\t* call.c (build_over_call): Call fold on the CALL_EXPR.\n+\n 2000-11-01  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* error.c (dump_template_decl): Separate template hearders with"}, {"sha": "4d2e7a14bbc7c64d16149b8c612e7c402502fdf6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -4188,7 +4188,7 @@ build_over_call (cand, args, flags)\n \treturn exp;\n     }\n \n-  fn = build_call (fn, converted_args);\n+  fn = fold (build_call (fn, converted_args));\n   if (TREE_CODE (TREE_TYPE (fn)) == VOID_TYPE)\n     return fn;\n   fn = require_complete_type (fn);"}, {"sha": "d4256c2b63f22b93b1f010b14a13f02d8fe6095f", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -918,6 +918,7 @@ extern rtx gen_cond_trap PARAMS ((enum rtx_code, rtx, rtx, rtx));\n /* Functions from builtins.c:  */\n #ifdef TREE_CODE\n extern rtx expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n+extern tree fold_builtin PARAMS ((tree));\n extern tree expand_tree_builtin PARAMS ((tree, tree, tree));\n extern void std_expand_builtin_va_start PARAMS ((int, tree, rtx));\n extern rtx std_expand_builtin_va_arg PARAMS ((tree, tree));"}, {"sha": "25fd4964519cee68d5b3820ce1e42cd567e72cb3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b0b3afb2f34492e2bf82b0bcad8d84d5c3a3a7f7", "patch": "@@ -7168,6 +7168,19 @@ fold (expr)\n \treturn t;\n       }\n \n+    case CALL_EXPR:\n+      /* Check for a built-in function.  */\n+      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR\n+\t  && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (expr, 0), 0))\n+\t      == FUNCTION_DECL)\n+\t  && DECL_BUILT_IN (TREE_OPERAND (TREE_OPERAND (expr, 0), 0)))\n+\t{\n+\t  tree tmp = fold_builtin (expr);\n+\t  if (tmp)\n+\t    return tmp;\n+\t}\n+      return t;\n+\n     default:\n       return t;\n     } /* switch (code) */"}]}