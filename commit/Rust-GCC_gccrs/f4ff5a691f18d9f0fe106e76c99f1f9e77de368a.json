{"sha": "f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRmZjVhNjkxZjE4ZDlmMGZlMTA2ZTc2Yzk5ZjFmOWU3N2RlMzY4YQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-12T22:44:30Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-12T22:44:30Z"}, "message": "c-opts.c (deps_seen, [...]): New.\n\n\t* c-opts.c (deps_seen, deps_file, deferred_count, deferred_size,\n\thandle_deferred_opts, sanitize_cpp_opts, defer_opt,\n\tstruct deferred_opt): New.\n\t(COMMAND_LINE_OPTIONS): Add -M*.\n\t(missing_arg): Update.\n\t(c_common_decode_option): Handle -M*.\n\t(c_common_post_options): Handle -M*.  Use sanitize_cpp_opts;\n\tdon't call cpp_post_options.\n\t(c_common_finish, check_deps_environment_vars): Update.\n\t* cppfiles.c (stack_include_file, handle_missing_header): Update.\n\t* cpphash.h (CPP_PRINT_DEPS): Remove.\n\t* cppinit.c: Don't include version.h.\n\t(cpp_create_reader): Don't call deps_init.  Initialize\n\twarn_long_long.\n\t(cpp_read_main_file): Init deps if necessary.\n\t(cpp_destroy): Conditionally free deps.\n\t(cpp_finish): Update.\n\t(no_tgt): Remove.\n\t(COMMAND_LINE_OPTIONS, cpp_handle_option): Remove -M*.\n\t(cpp_post_options): Rename post_options.\n\t* cpplib.h (struct cpp_options): Remove some dependency options;\n\tmove others to a new structure.\n\t(cpp_post_options): Remove.\n\t(cpp_finish): Comment.\n\t* fix-header.c (read_scan_file): Don't call cpp_post_options.\ntreelang:\n\t* treelang.c: Remove cpp_post_options.\n\nFrom-SVN: r56239", "tree": {"sha": "964d0b5f695c2048f02200e7dfda82d8e3cbbaae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/964d0b5f695c2048f02200e7dfda82d8e3cbbaae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34116c2a895051529a5cf160d6cb8b82f42bd70b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34116c2a895051529a5cf160d6cb8b82f42bd70b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34116c2a895051529a5cf160d6cb8b82f42bd70b"}], "stats": {"total": 461, "additions": 281, "deletions": 180}, "files": [{"sha": "143cef948c86da5637084f42d23b04bf95589d7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -1,3 +1,31 @@\n+2002-08-13  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c (deps_seen, deps_file, deferred_count, deferred_size,\n+\thandle_deferred_opts, sanitize_cpp_opts, defer_opt,\n+\tstruct deferred_opt): New.\n+\t(COMMAND_LINE_OPTIONS): Add -M*.\n+\t(missing_arg): Update.\n+\t(c_common_decode_option): Handle -M*.\n+\t(c_common_post_options): Handle -M*.  Use sanitize_cpp_opts;\n+\tdon't call cpp_post_options.\n+\t(c_common_finish, check_deps_environment_vars): Update.\n+\t* cppfiles.c (stack_include_file, handle_missing_header): Update.\n+\t* cpphash.h (CPP_PRINT_DEPS): Remove.\n+\t* cppinit.c: Don't include version.h.\n+\t(cpp_create_reader): Don't call deps_init.  Initialize\n+\twarn_long_long.\n+\t(cpp_read_main_file): Init deps if necessary.\n+\t(cpp_destroy): Conditionally free deps.\n+\t(cpp_finish): Update.\n+\t(no_tgt): Remove.\n+\t(COMMAND_LINE_OPTIONS, cpp_handle_option): Remove -M*.\n+\t(cpp_post_options): Rename post_options.\n+\t* cpplib.h (struct cpp_options): Remove some dependency options;\n+\tmove others to a new structure.\n+\t(cpp_post_options): Remove.\n+\t(cpp_finish): Comment.\n+\t* fix-header.c (read_scan_file): Don't call cpp_post_options.\n+\n 2002-08-12  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.md (define_constants): Add MMIX_rR_REGNUM."}, {"sha": "28f1638e97a12af55cc586d67e0aa1dbf23dee5d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -2211,7 +2211,7 @@ cpphash.o:  cpphash.c  $(CONFIG_H) $(LIBCPP_DEPS)\n cpptrad.o:  cpptrad.c  $(CONFIG_H) $(LIBCPP_DEPS)\n cppfiles.o: cppfiles.c $(CONFIG_H) $(LIBCPP_DEPS) $(SPLAY_TREE_H) mkdeps.h\n cppinit.o:  cppinit.c  $(CONFIG_H) $(LIBCPP_DEPS) cppdefault.h \\\n-\t\tmkdeps.h prefix.h version.h\n+\t\tmkdeps.h prefix.h\n \n cppdefault.o: cppdefault.c $(CONFIG_H) $(SYSTEM_H) cppdefault.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "189cb1ba9e1fca2242eab6a43e897fe0cd8de402", "filename": "gcc/c-opts.c", "status": "modified", "additions": 196, "deletions": 51, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"intl.h\"\n \n+/* CPP's options.  */\n static cpp_options *cpp_opts;\n \n /* Input filename.  */\n@@ -43,6 +44,15 @@ static FILE *out_stream;\n /* Append dependencies to deps_file.  */\n static bool deps_append;\n \n+/* If dependency switches (-MF etc.) have been given.  */\n+static bool deps_seen;\n+\n+/* Dependency output file.  */\n+static const char *deps_file;\n+\n+/* Number of deferred options, deferred options array size.  */\n+static size_t deferred_count, deferred_size;\n+\n static void missing_arg PARAMS ((size_t));\n static size_t find_opt PARAMS ((const char *, int));\n static void set_Wimplicit PARAMS ((int));\n@@ -55,6 +65,8 @@ static void set_std_c89 PARAMS ((int, int));\n static void set_std_c99 PARAMS ((int));\n static void check_deps_environment_vars PARAMS ((void));\n static void preprocess_file PARAMS ((void));\n+static void handle_deferred_opts PARAMS ((void));\n+static void sanitize_cpp_opts PARAMS ((void));\n \n #ifndef STDC_0_IN_SYSTEM_HEADERS\n #define STDC_0_IN_SYSTEM_HEADERS 0\n@@ -102,6 +114,15 @@ static void preprocess_file PARAMS ((void));\n   OPT(\"CC\",                     CL_ALL,   OPT_CC)\t\t\t     \\\n   OPT(\"E\",\t\t\tCL_ALL,   OPT_E)\t\t\t     \\\n   OPT(\"H\",                      CL_ALL,   OPT_H)\t\t\t     \\\n+  OPT(\"M\",                      CL_ALL,   OPT_M)\t\t\t     \\\n+  OPT(\"MD\",                     CL_ALL | CL_SEPARATE, OPT_MD)\t\t     \\\n+  OPT(\"MF\",                     CL_ALL | CL_ARG, OPT_MF)\t\t     \\\n+  OPT(\"MG\",                     CL_ALL,   OPT_MG)\t\t\t     \\\n+  OPT(\"MM\",                     CL_ALL,   OPT_MM)\t\t\t     \\\n+  OPT(\"MMD\",                    CL_ALL | CL_SEPARATE, OPT_MMD)\t\t     \\\n+  OPT(\"MP\",                     CL_ALL,   OPT_MP)\t\t\t     \\\n+  OPT(\"MQ\",                     CL_ALL | CL_ARG, OPT_MQ)\t\t     \\\n+  OPT(\"MT\",                     CL_ALL | CL_ARG, OPT_MT)\t\t     \\\n   OPT(\"P\",                      CL_ALL,   OPT_P)\t\t\t     \\\n   OPT(\"Wall\",\t\t\tCL_ALL,   OPT_Wall)\t\t\t     \\\n   OPT(\"Wbad-function-cast\",\tCL_C,     OPT_Wbad_function_cast)\t     \\\n@@ -284,6 +305,16 @@ static const struct cl_option cl_options[] =\n #undef OPT\n #undef COMMAND_LINE_OPTIONS\n \n+/* Holds switches parsed by c_common_decode_option (), but whose\n+   handling is deffered to c_common_post_options ().  */\n+static void defer_opt PARAMS ((enum opt_code, const char *));\n+static struct deferred_opt\n+{\n+  enum opt_code code;\n+  const char *arg;\n+} *deferred_opts;\n+\n+\n #ifdef HOST_EBCDIC\n static int opt_comp PARAMS ((const void *, const void *));\n \n@@ -303,6 +334,8 @@ static void\n missing_arg (opt_index)\n      size_t opt_index;\n {\n+  const char *opt_text = cl_options[opt_index].opt_text;\n+\n   switch (opt_index)\n     {\n     case OPT_Wformat_eq:\n@@ -313,15 +346,23 @@ missing_arg (opt_index)\n     case OPT_ftabstop:\n     case OPT_ftemplate_depth:\n     default:\n-      error (\"missing argument to \\\"-%s\\\"\", cl_options[opt_index].opt_text);\n+      error (\"missing argument to \\\"-%s\\\"\", opt_text);\n       break;\n \n     case OPT_fconstant_string_class:\n-      error (\"no class name specified with -fconstant-string-class=\");\n+      error (\"no class name specified with \\\"-%s\\\"\", opt_text);\n       break;\n \n+    case OPT_MF:\n+    case OPT_MD:\n+    case OPT_MMD:\n     case OPT_o:\n-      error (\"missing filename after \\\"-%s\\\"\", cl_options[opt_index].opt_text);\n+      error (\"missing filename after \\\"-%s\\\"\", opt_text);\n+      break;\n+\n+    case OPT_MQ:\n+    case OPT_MT:\n+      error (\"missing target after \\\"-%s\\\"\", opt_text);\n       break;\n     }\n }\n@@ -420,6 +461,30 @@ find_opt (input, lang_flag)\n   return N_OPTS;\n }\n \n+/* Defer option CODE with argument ARG.  */\n+static void\n+defer_opt (code, arg)\n+     enum opt_code code;\n+     const char *arg;\n+{\n+  /* FIXME: this should be in c_common_init_options, which should take\n+     argc and argv.  */\n+  if (!deferred_opts)\n+    {\n+      extern int save_argc;\n+      deferred_size = save_argc;\n+      deferred_opts = (struct deferred_opt *)\n+\txmalloc (deferred_size * sizeof (struct deferred_opt));\n+    }\n+\n+  if (deferred_count == deferred_size)\n+    abort ();\n+\n+  deferred_opts[deferred_count].code = code;\n+  deferred_opts[deferred_count].arg = arg;\n+  deferred_count++;\n+}\n+\n /* Common initialization before parsing options.  */\n void\n c_common_init_options (lang)\n@@ -432,10 +497,8 @@ c_common_init_options (lang)\n #endif\n \n   c_language = lang;\n-  parse_in = cpp_create_reader (lang == clk_c\n-\t\t\t\t? CLK_GNUC89 : CLK_GNUCXX);\n+  parse_in = cpp_create_reader (lang == clk_c ? CLK_GNUC89 : CLK_GNUCXX);\n   cpp_opts = cpp_get_options (parse_in);\n-\n   if (flag_objc)\n     cpp_opts->objc = 1;\n \n@@ -563,6 +626,44 @@ c_common_decode_option (argc, argv)\n       cpp_opts->print_include_names = 1;\n       break;\n \n+    case OPT_M:\n+    case OPT_MM:\n+      /* When doing dependencies with -M or -MM, suppress normal\n+\t preprocessed output, but still do -dM etc. as software\n+\t depends on this.  Preprocessed output does occur if -MD, -MMD\n+\t or environment var dependency generation is used.  */\n+      cpp_opts->deps.style = (code == OPT_M ? DEPS_SYSTEM: DEPS_USER);\n+      cpp_opts->no_output = 1;\n+      cpp_opts->inhibit_warnings = 1;\n+      break;\n+\n+    case OPT_MD:\n+    case OPT_MMD:\n+      cpp_opts->deps.style = (code == OPT_MD ? DEPS_SYSTEM: DEPS_USER);\n+      deps_file = arg;\n+      break;\n+\n+    case OPT_MF:\n+      deps_seen = true;\n+      deps_file = arg;\n+      break;\n+\n+    case OPT_MG:\n+      deps_seen = true;\n+      cpp_opts->deps.missing_files = true;\n+      break;\n+\n+    case OPT_MP:\n+      deps_seen = true;\n+      cpp_opts->deps.phony_targets = true;\n+      break;\n+\n+    case OPT_MQ:\n+    case OPT_MT:\n+      deps_seen = true;\n+      defer_opt (code, arg);\n+      break;\n+\n     case OPT_P:\n       cpp_opts->no_line_commands = 1;\n       break;\n@@ -1219,26 +1320,12 @@ c_common_post_options ()\n   if (out_fname == NULL || !strcmp (out_fname, \"-\"))\n     out_fname = \"\";\n \n-  if (cpp_opts->print_deps == 0)\n+  if (cpp_opts->deps.style != DEPS_NONE)\n     check_deps_environment_vars ();\n \n-  /* If we're not outputting dependencies, complain if other -M\n-     options have been given.  */\n-  if (!cpp_opts->print_deps\n-      && (cpp_opts->print_deps_missing_files\n-\t  || cpp_opts->deps_file\n-\t  || cpp_opts->deps_phony_targets))\n-      error (\"you must additionally specify either -M or -MM\");\n+  handle_deferred_opts ();\n \n-  cpp_post_options (parse_in);\n-\n-  cpp_opts->unsigned_char = !flag_signed_char;\n-  cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n-\n-  /* We want -Wno-long-long to override -pedantic -std=non-c99\n-     and/or -Wtraditional, whatever the ordering.  */\n-  cpp_opts->warn_long_long\n-    = warn_long_long && ((!flag_isoc99 && pedantic) || warn_traditional);\n+  sanitize_cpp_opts ();\n \n   flag_inline_trees = 1;\n \n@@ -1339,17 +1426,17 @@ c_common_finish ()\n {\n   FILE *deps_stream = NULL;\n \n-  if (cpp_opts->print_deps)\n+  if (cpp_opts->deps.style != DEPS_NONE)\n     {\n       /* If -M or -MM was seen without -MF, default output to the\n \t output stream.  */\n-      if (!cpp_opts->deps_file)\n+      if (!deps_file)\n \tdeps_stream = out_stream;\n       else\n \t{\n-\t  deps_stream = fopen (cpp_opts->deps_file, deps_append ? \"a\": \"w\");\n+\t  deps_stream = fopen (deps_file, deps_append ? \"a\": \"w\");\n \t  if (!deps_stream)\n-\t    fatal_io_error (\"opening dependency file %s\", cpp_opts->deps_file);\n+\t    fatal_io_error (\"opening dependency file %s\", deps_file);\n \t}\n     }\n \n@@ -1359,29 +1446,12 @@ c_common_finish ()\n \n   if (deps_stream && deps_stream != out_stream\n       && (ferror (deps_stream) || fclose (deps_stream)))\n-    fatal_io_error (\"closing dependency file %s\", cpp_opts->deps_file);\n+    fatal_io_error (\"closing dependency file %s\", deps_file);\n \n   if (out_stream && (ferror (out_stream) || fclose (out_stream)))\n     fatal_io_error (\"when writing output to %s\", out_fname);\n }\n \n-/* Set the C 89 standard (with 1994 amendments if C94, without GNU\n-   extensions if ISO).  There is no concept of gnu94.  */\n-static void\n-set_std_c89 (c94, iso)\n-     int c94, iso;\n-{\n-  cpp_set_lang (parse_in, c94 ? CLK_STDC94: iso ? CLK_STDC89: CLK_GNUC89);\n-  flag_iso = iso;\n-  flag_no_asm = iso;\n-  flag_no_gnu_keywords = iso;\n-  flag_no_nonansi_builtin = iso;\n-  flag_noniso_default_format_attributes = !iso;\n-  flag_isoc94 = c94;\n-  flag_isoc99 = 0;\n-  flag_writable_strings = 0;\n-}\n-\n /* Either of two environment variables can specify output of\n    dependencies.  Their value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE\n    DEPS_TARGET\", where OUTPUT_FILE is the file to write deps info to\n@@ -1395,12 +1465,12 @@ check_deps_environment_vars ()\n \n   GET_ENVIRONMENT (spec, \"DEPENDENCIES_OUTPUT\");\n   if (spec)\n-    cpp_opts->print_deps = 1;\n+    cpp_opts->deps.style = DEPS_USER;\n   else\n     {\n       GET_ENVIRONMENT (spec, \"SUNPRO_DEPENDENCIES\");\n       if (spec)\n-\tcpp_opts->print_deps = 2;\n+\tcpp_opts->deps.style = DEPS_SYSTEM;\n     }\n \n   if (spec)\n@@ -1410,16 +1480,91 @@ check_deps_environment_vars ()\n       if (s)\n \t{\n \t  /* Let the caller perform MAKE quoting.  */\n-\t  cpp_add_dependency_target (parse_in, s + 1, 0);\n+\t  defer_opt (OPT_MT, s + 1);\n \t  *s = '\\0';\n \t}\n \n       /* Command line -MF overrides environment variables and default.  */\n-      if (!cpp_opts->deps_file)\n-\tcpp_opts->deps_file = spec;\n+      if (!deps_file)\n+\tdeps_file = spec;\n+\n+      deps_append = 1;\n+    }\n+}\n+\n+/* Handle deferred command line switches.  */\n+static void\n+handle_deferred_opts ()\n+{\n+  size_t i;\n \n-      cpp_opts->print_deps_append = 1;\n+  for (i = 0; i < deferred_count; i++)\n+    {\n+      struct deferred_opt *opt = &deferred_opts[i];\n+\n+      switch (opt->code)\n+\t{\n+\tcase OPT_MT:\n+\tcase OPT_MQ:\n+\t  cpp_add_dependency_target (parse_in, opt->arg, opt->code == OPT_MQ);\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+\n+  free (deferred_opts);\n+}\n+\n+/* These settings are appropriate for GCC, but not necessarily so for\n+   cpplib as a library.  */\n+static void\n+sanitize_cpp_opts ()\n+{\n+  /* If we don't know what style of dependencies to output, complain\n+     if any other dependency switches have been given.  */\n+  if (deps_seen && cpp_opts->deps.style == DEPS_NONE)\n+    error (\"to generate dependencies you must specify either -M or -MM\");\n+\n+  /* -dM and dependencies suppress normal output; do it here so that\n+     the last -d[MDN] switch overrides earlier ones.  */\n+  if (cpp_opts->dump_macros == dump_only)\n+    cpp_opts->no_output = 1;\n+\n+  /* Disable -dD, -dN and -dI if normal output is suppressed.  Allow\n+     -dM since at least glibc relies on -M -dM to work.  */\n+  if (cpp_opts->no_output)\n+    {\n+      if (cpp_opts->dump_macros != dump_only)\n+\tcpp_opts->dump_macros = dump_none;\n+      cpp_opts->dump_includes = 0;\n     }\n+\n+  cpp_opts->unsigned_char = !flag_signed_char;\n+  cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n+\n+  /* We want -Wno-long-long to override -pedantic -std=non-c99\n+     and/or -Wtraditional, whatever the ordering.  */\n+  cpp_opts->warn_long_long\n+    = warn_long_long && ((!flag_isoc99 && pedantic) || warn_traditional);\n+}\n+\n+/* Set the C 89 standard (with 1994 amendments if C94, without GNU\n+   extensions if ISO).  There is no concept of gnu94.  */\n+static void\n+set_std_c89 (c94, iso)\n+     int c94, iso;\n+{\n+  cpp_set_lang (parse_in, c94 ? CLK_STDC94: iso ? CLK_STDC89: CLK_GNUC89);\n+  flag_iso = iso;\n+  flag_no_asm = iso;\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_noniso_default_format_attributes = !iso;\n+  flag_isoc94 = c94;\n+  flag_isoc99 = 0;\n+  flag_writable_strings = 0;\n }\n \n /* Set the C 99 standard (without GNU extensions if ISO).  */"}, {"sha": "63e6f750ecb1daac003f49854a078970a9c51ed1", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -319,7 +319,7 @@ stack_include_file (pfile, inc)\n \t      (inc->foundhere ? inc->foundhere->sysp : 0));\n \n   /* For -M, add the file to the dependencies on its first inclusion.  */\n-  if (CPP_OPTION (pfile, print_deps) > !!sysp && !inc->include_count)\n+  if (CPP_OPTION (pfile, deps.style) > !!sysp && !inc->include_count)\n     deps_add_dep (pfile->deps, inc->name);\n \n   /* Not in cache?  */\n@@ -663,17 +663,18 @@ handle_missing_header (pfile, fname, angle_brackets)\n      const char *fname;\n      int angle_brackets;\n {\n-  int print_dep = CPP_PRINT_DEPS(pfile) > (angle_brackets || pfile->map->sysp);\n-\n-  if (CPP_OPTION (pfile, print_deps_missing_files) && print_dep)\n+  bool print_dep\n+    = CPP_OPTION (pfile, deps.style) > (angle_brackets || pfile->map->sysp);\n+ \n+  if (CPP_OPTION (pfile, deps.missing_files) && print_dep)\n     deps_add_dep (pfile->deps, fname);\n   /* If -M was specified, then don't count this as an error, because\n      we can still produce correct output.  Otherwise, we can't produce\n      correct output, because there may be dependencies we need inside\n      the missing file, and we don't know what directory this missing\n      file exists in.  */\n   else\n-    cpp_errno (pfile, CPP_PRINT_DEPS (pfile) && ! print_dep\n+    cpp_errno (pfile, CPP_OPTION (pfile, deps.style) && ! print_dep\n \t       ? DL_WARNING: DL_ERROR, fname);\n }\n "}, {"sha": "5b0f0e8326796713827980c117b7db0eabc30b25", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -400,7 +400,7 @@ struct cpp_reader\n   cpp_token avoid_paste;\n   cpp_token eof;\n \n-  /* Opaque handle to the dependencies of mkdeps.c.  Used by -M etc.  */\n+  /* Opaque handle to the dependencies of mkdeps.c.  */\n   struct deps *deps;\n \n   /* Obstack holding all macro hash nodes.  This never shrinks.\n@@ -480,7 +480,6 @@ extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n \n /* Macros.  */\n \n-#define CPP_PRINT_DEPS(PFILE) CPP_OPTION (PFILE, print_deps)\n #define CPP_IN_SYSTEM_HEADER(PFILE) ((PFILE)->map && (PFILE)->map->sysp)\n #define CPP_PEDANTIC(PF) CPP_OPTION (PF, pedantic)\n #define CPP_WTRADITIONAL(PF) CPP_OPTION (PF, warn_traditional)"}, {"sha": "5b3aab2ac0dfd6138a4e2011c1a600238e77b975", "filename": "gcc/cppinit.c", "status": "modified", "additions": 22, "deletions": 86, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -25,7 +25,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpphash.h\"\n #include \"prefix.h\"\n #include \"intl.h\"\n-#include \"version.h\"\n #include \"mkdeps.h\"\n #include \"cppdefault.h\"\n \n@@ -108,6 +107,7 @@ static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t cl_directive_handler));\n static int parse_option\t\t\tPARAMS ((const char *));\n+static void post_options\t\tPARAMS ((cpp_reader *));\n \n /* Fourth argument to append_include_chain: chain to use.\n    Note it's never asked to append to the quote chain.  */\n@@ -477,6 +477,7 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, tabstop) = 8;\n   CPP_OPTION (pfile, operator_names) = 1;\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n+  CPP_OPTION (pfile, warn_long_long) = !CPP_OPTION (pfile, c99);\n \n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n@@ -490,10 +491,6 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, unsigned_char) = 0;\n   CPP_OPTION (pfile, unsigned_wchar) = 1;\n \n-  /* It's simplest to just create this struct whether or not it will\n-     be needed.  */\n-  pfile->deps = deps_init ();\n-\n   /* Initialise the line map.  Start at logical line 1, so we can use\n      a line number of zero for special states.  */\n   init_line_maps (&pfile->line_maps);\n@@ -560,7 +557,8 @@ cpp_destroy (pfile)\n       pfile->macro_buffer_len = 0;\n     }\n \n-  deps_free (pfile->deps);\n+  if (pfile->deps)\n+    deps_free (pfile->deps);\n   obstack_free (&pfile->buffer_ob, 0);\n \n   _cpp_destroy_hashtable (pfile);\n@@ -902,6 +900,8 @@ cpp_read_main_file (pfile, fname, table)\n {\n   sanity_checks (pfile);\n \n+  post_options (pfile);\n+\n   /* The front ends don't set up the hash table until they have\n      finished processing the command line options, so initializing the\n      hashtable is deferred until now.  */\n@@ -927,17 +927,22 @@ cpp_read_main_file (pfile, fname, table)\n       fprintf (stderr, _(\"End of search list.\\n\"));\n     }\n \n-  if (CPP_OPTION (pfile, print_deps))\n-    /* Set the default target (if there is none already).  */\n-    deps_add_default_target (pfile->deps, fname);\n+  if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n+    {\n+      if (!pfile->deps)\n+\tpfile->deps = deps_init ();\n+\n+      /* Set the default target (if there is none already).  */\n+      deps_add_default_target (pfile->deps, fname);\n+    }\n \n   /* Open the main input file.  */\n   if (!_cpp_read_file (pfile, fname))\n     return NULL;\n \n-  /* Set this after cpp_post_options so the client can change the\n-     option if it wishes, and after stacking the main file so we don't\n-     trace the main file.  */\n+  /* Set this here so the client can change the option if it wishes,\n+     and after stacking the main file so we don't trace the main\n+     file.  */\n   pfile->line_maps.trace_includes = CPP_OPTION (pfile, print_include_names);\n \n   /* For foo.i, read the original filename foo.c now, for the benefit\n@@ -1067,11 +1072,12 @@ cpp_finish (pfile, deps_stream)\n     _cpp_pop_buffer (pfile);\n \n   /* Don't write the deps file if there are errors.  */\n-  if (deps_stream && CPP_OPTION (pfile, print_deps) && !pfile->errors)\n+  if (CPP_OPTION (pfile, deps.style) != DEPS_NONE\n+      && deps_stream && pfile->errors == 0)\n     {\n       deps_write (pfile->deps, deps_stream, 72);\n \n-      if (CPP_OPTION (pfile, deps_phony_targets))\n+      if (CPP_OPTION (pfile, deps.phony_targets))\n \tdeps_phony_targets (pfile->deps, deps_stream);\n     }\n \n@@ -1106,23 +1112,13 @@ new_pending_directive (pend, text, handler)\n #define no_fil N_(\"file name missing after %s\")\n #define no_mac N_(\"macro name missing after %s\")\n #define no_pth N_(\"path name missing after %s\")\n-#define no_tgt N_(\"target missing after %s\")\n \n /* This is the list of all command line options, with the leading\n    \"-\" removed.  It must be sorted in ASCII collating order.  */\n #define COMMAND_LINE_OPTIONS                                                  \\\n   DEF_OPT(\"A\",                        no_ass, OPT_A)                          \\\n   DEF_OPT(\"D\",                        no_mac, OPT_D)                          \\\n   DEF_OPT(\"I\",                        no_dir, OPT_I)                          \\\n-  DEF_OPT(\"M\",                        0,      OPT_M)                          \\\n-  DEF_OPT(\"MD\",                       no_fil, OPT_MD)                         \\\n-  DEF_OPT(\"MF\",                       no_fil, OPT_MF)                         \\\n-  DEF_OPT(\"MG\",                       0,      OPT_MG)                         \\\n-  DEF_OPT(\"MM\",                       0,      OPT_MM)                         \\\n-  DEF_OPT(\"MMD\",                      no_fil, OPT_MMD)                        \\\n-  DEF_OPT(\"MP\",                       0,      OPT_MP)                         \\\n-  DEF_OPT(\"MQ\",                       no_tgt, OPT_MQ)                         \\\n-  DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n   DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter)                  \\\n   DEF_OPT(\"imacros\",                  no_fil, OPT_imacros)                    \\\n@@ -1272,44 +1268,6 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, include_prefix_len) = strlen (arg);\n \t  break;\n \n-\tcase OPT_MG:\n-\t  CPP_OPTION (pfile, print_deps_missing_files) = 1;\n-\t  break;\n-\tcase OPT_M:\n-\t  /* When doing dependencies with -M or -MM, suppress normal\n-\t     preprocessed output, but still do -dM etc. as software\n-\t     depends on this.  Preprocessed output occurs if -MD, -MMD\n-\t     or environment var dependency generation is used.  */\n-\t  CPP_OPTION (pfile, print_deps) = 2;\n-\t  CPP_OPTION (pfile, no_output) = 1;\n-\t  CPP_OPTION (pfile, inhibit_warnings) = 1;\n-\t  break;\n-\tcase OPT_MM:\n-\t  CPP_OPTION (pfile, print_deps) = 1;\n-\t  CPP_OPTION (pfile, no_output) = 1;\n-\t  CPP_OPTION (pfile, inhibit_warnings) = 1;\n-\t  break;\n-\tcase OPT_MF:\n-\t  CPP_OPTION (pfile, deps_file) = arg;\n-\t  break;\n-\tcase OPT_MP:\n-\t  CPP_OPTION (pfile, deps_phony_targets) = 1;\n-\t  break;\n-\tcase OPT_MQ:\n-\tcase OPT_MT:\n-\t  /* Add a target.  -MQ quotes for Make.  */\n-\t  deps_add_target (pfile->deps, arg, opt_code == OPT_MQ);\n-\t  break;\n-\n-\tcase OPT_MD:\n-\t  CPP_OPTION (pfile, print_deps) = 2;\n-\t  CPP_OPTION (pfile, deps_file) = arg;\n-\t  break;\n-\tcase OPT_MMD:\n-\t  CPP_OPTION (pfile, print_deps) = 1;\n-\t  CPP_OPTION (pfile, deps_file) = arg;\n-\t  break;\n-\n \tcase OPT_A:\n \t  if (arg[0] == '-')\n \t    {\n@@ -1446,22 +1404,14 @@ cpp_handle_options (pfile, argc, argv)\n   return i;\n }\n \n-/* Extra processing when all options are parsed, after all calls to\n-   cpp_handle_option[s].  Consistency checks etc.  */\n-void\n-cpp_post_options (pfile)\n+static void\n+post_options (pfile)\n      cpp_reader *pfile;\n {\n   /* -Wtraditional is not useful in C++ mode.  */\n   if (CPP_OPTION (pfile, cplusplus))\n     CPP_OPTION (pfile, warn_traditional) = 0;\n \n-  /* The compiler front ends override this, but I think this is the\n-     appropriate setting for the library.  */\n-  CPP_OPTION (pfile, warn_long_long)\n-     = ((CPP_OPTION (pfile, pedantic) && !CPP_OPTION (pfile, c99))\n-\t|| CPP_OPTION (pfile, warn_traditional));\n-\n   /* Permanently disable macro expansion if we are rescanning\n      preprocessed text.  Read preprocesed source in ISO mode.  */\n   if (CPP_OPTION (pfile, preprocessed))\n@@ -1473,18 +1423,4 @@ cpp_post_options (pfile)\n   /* Traditional CPP does not accurately track column information.  */\n   if (CPP_OPTION (pfile, traditional))\n     CPP_OPTION (pfile, show_column) = 0;\n-\n-  /* -dM and dependencies suppress normal output; do it here so that\n-     the last -d[MDN] switch overrides earlier ones.  */\n-  if (CPP_OPTION (pfile, dump_macros) == dump_only)\n-    CPP_OPTION (pfile, no_output) = 1;\n-\n-  /* Disable -dD, -dN and -dI if normal output is suppressed.  Allow\n-     -dM since at least glibc relies on -M -dM to work.  */\n-  if (CPP_OPTION (pfile, no_output))\n-    {\n-      if (CPP_OPTION (pfile, dump_macros) != dump_only)\n-\tCPP_OPTION (pfile, dump_macros) = dump_none;\n-      CPP_OPTION (pfile, dump_includes) = 0;\n-    }\n }"}, {"sha": "3640d44605a1fbeb9f0a75628a2f3647f88f68d1", "filename": "gcc/cpplib.h", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -227,10 +227,6 @@ struct cpp_options\n   /* Pending options - -D, -U, -A, -I, -ixxx.  */\n   struct cpp_pending *pending;\n \n-  /* File name which deps are being written to.  This is 0 if deps are\n-     being written to stdout.  */\n-  const char *deps_file;\n-\n   /* Search paths for include files.  */\n   struct search_path *quote_include;\t/* \"\" */\n   struct search_path *bracket_include;  /* <> */\n@@ -276,21 +272,6 @@ struct cpp_options\n   /* Nonzero means to allow hexadecimal floats and LL suffixes.  */\n   unsigned char extended_numbers;\n \n-  /* Nonzero means print the names of included files rather than the\n-     preprocessed output.  1 means just the #include \"...\", 2 means\n-     #include <...> as well.  */\n-  unsigned char print_deps;\n-\n-  /* Nonzero if phony targets are created for each header.  */\n-  unsigned char deps_phony_targets;\n-\n-  /* Nonzero if missing .h files in -M output are assumed to be\n-     generated files and not errors.  */\n-  unsigned char print_deps_missing_files;\n-\n-  /* If true, fopen (deps_file, \"a\") else fopen (deps_file, \"w\").  */\n-  unsigned char print_deps_append;\n-\n   /* Nonzero means print names of header files (-H).  */\n   unsigned char print_include_names;\n \n@@ -394,6 +375,20 @@ struct cpp_options\n   /* True for traditional preprocessing.  */\n   unsigned char traditional;\n \n+  /* Dependency generation.  */\n+  struct\n+  {\n+    /* Style of header dependencies to generate.  */\n+    enum {DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM } style;\n+\n+    /* Assume missing files are generated files.  */\n+    bool missing_files;\n+\n+    /* Generate phony targets for each dependency apart from the first\n+       one.  */\n+    bool phony_targets;\n+  } deps;\n+\n   /* Target-specific features set by the front end or client.  */\n \n   /* Precision for target CPP arithmetic, target characters, target\n@@ -522,14 +517,10 @@ extern void cpp_set_callbacks PARAMS ((cpp_reader *, cpp_callbacks *));\n /* Now call cpp_handle_option[s] to handle 1[or more] switches.  The\n    return value is the number of arguments used.  If\n    cpp_handle_options returns without using all arguments, it couldn't\n-   understand the next switch.  When there are no switches left, you\n-   must call cpp_post_options before calling cpp_read_main_file.  Only\n-   after cpp_post_options are the contents of the cpp_options\n-   structure reliable.  Options processing is not completed until you\n-   call cpp_finish_options.  */\n+   understand the next switch.  Options processing is not completed\n+   until you call cpp_finish_options.  */\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n-extern void cpp_post_options PARAMS ((cpp_reader *));\n \n /* This function reads the file, but does not start preprocessing.  It\n    returns the name of the original file; this is the same as the\n@@ -551,6 +542,13 @@ extern const char *cpp_read_main_file PARAMS ((cpp_reader *, const char *,\n    from cpp_read_main_file, before they get debug callbacks.  */\n extern void cpp_finish_options PARAMS ((cpp_reader *));\n \n+/* Call this to finish preprocessing.  If you requested dependency\n+   generation, pass an open stream to write the information to,\n+   otherwise NULL.  It is your responsibility to close the stream.\n+\n+   Returns cpp_errors (pfile).  */\n+extern int cpp_finish PARAMS ((cpp_reader *, FILE *deps_stream));\n+\n /* Call this to release the handle at the end of preprocessing.  Any\n    use of the handle after this function returns is invalid.  Returns\n    cpp_errors (pfile).  */\n@@ -568,7 +566,6 @@ extern void cpp_register_pragma PARAMS ((cpp_reader *,\n \t\t\t\t\t const char *, const char *,\n \t\t\t\t\t void (*) PARAMS ((cpp_reader *))));\n \n-extern int cpp_finish PARAMS ((cpp_reader *, FILE *));\n extern int cpp_avoid_paste PARAMS ((cpp_reader *, const cpp_token *,\n \t\t\t\t    const cpp_token *));\n extern const cpp_token *cpp_get_token PARAMS ((cpp_reader *));"}, {"sha": "bce334dee038067d780df2fc0bfefb4a414e9798", "filename": "gcc/fix-header.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -632,7 +632,6 @@ read_scan_file (in_fname, argc, argv)\n   i = cpp_handle_options (scan_in, argc, argv);\n   if (i < argc)\n     cpp_error (scan_in, DL_ERROR, \"invalid option `%s'\", argv[i]);\n-  cpp_post_options (scan_in);\n   if (cpp_errors (scan_in))\n     exit (FATAL_EXIT_CODE);\n "}, {"sha": "ab7d5804e102a2e9b507a6e33e165749cb94237e", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -1,3 +1,7 @@\n+2002-08-13  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* treelang.c: Remove cpp_post_options.\n+\n 2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* treelang/Make-lang.in (treelang.mostlyclean): Remove coverage files."}, {"sha": "573c273481b1b59b1ba4066bc9679853e9ca6c53", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "patch": "@@ -954,14 +954,6 @@ cpp_create_reader (enum c_lang lang ATTRIBUTE_UNUSED)\n \n /* Should not be called for treelang.   */\n \n-void\n-cpp_post_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n-{\n-  abort ();\n-}\n-\n-/* Should not be called for treelang.   */\n-\n void\n cpp_preprocess_file (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {"}]}