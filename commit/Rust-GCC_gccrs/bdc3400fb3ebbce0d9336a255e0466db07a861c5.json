{"sha": "bdc3400fb3ebbce0d9336a255e0466db07a861c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjMzQwMGZiM2ViYmNlMGQ5MzM2YTI1NWUwNDY2ZGIwN2E4NjFjNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-07-01T22:02:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-07-01T22:02:56Z"}, "message": "revert accidental checkin\n\nFrom-SVN: r115119", "tree": {"sha": "878fe52d7f9fdbc8a81fbe2e1143a13ba48a6a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/878fe52d7f9fdbc8a81fbe2e1143a13ba48a6a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc3400fb3ebbce0d9336a255e0466db07a861c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc3400fb3ebbce0d9336a255e0466db07a861c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc3400fb3ebbce0d9336a255e0466db07a861c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc3400fb3ebbce0d9336a255e0466db07a861c5/comments", "author": null, "committer": null, "parents": [{"sha": "cf5131b464422f1f34195dbcd91f5a0a05abc09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5131b464422f1f34195dbcd91f5a0a05abc09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5131b464422f1f34195dbcd91f5a0a05abc09b"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "21d1b7762465cc44b0ffa4b9bbe38599abb67506", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc3400fb3ebbce0d9336a255e0466db07a861c5/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc3400fb3ebbce0d9336a255e0466db07a861c5/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=bdc3400fb3ebbce0d9336a255e0466db07a861c5", "patch": "@@ -792,12 +792,11 @@ friend_accessible_p (tree scope, tree decl, tree binfo)\n     if (protected_accessible_p (decl, TREE_VALUE (t), binfo))\n       return 1;\n \n-  /* Nested classes have the same access as their enclosing types, as\n+  /* Nested classes are implicitly friends of their enclosing types, as\n      per core issue 45 (this is a change from the standard).  */\n   if (TYPE_P (scope))\n     for (t = TYPE_CONTEXT (scope); t && TYPE_P (t); t = TYPE_CONTEXT (t))\n-      if (protected_accessible_p (decl, t, binfo)\n-\t  || friend_accessible_p (t, decl, binfo))\n+      if (protected_accessible_p (decl, t, binfo))\n \treturn 1;\n \n   if (TREE_CODE (scope) == FUNCTION_DECL"}]}