{"sha": "2371d100b946ec96384e4541235fb87e0659d87b", "node_id": "C_kwDOANBUbNoAKDIzNzFkMTAwYjk0NmVjOTYzODRlNDU0MTIzNWZiODdlMDY1OWQ4N2I", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-27T00:17:53Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-27T00:17:53Z"}, "message": "Daily bump.", "tree": {"sha": "179db70dc8a4588bc986cb7fe7dd88ae7fe3ed46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179db70dc8a4588bc986cb7fe7dd88ae7fe3ed46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2371d100b946ec96384e4541235fb87e0659d87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2371d100b946ec96384e4541235fb87e0659d87b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2371d100b946ec96384e4541235fb87e0659d87b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2371d100b946ec96384e4541235fb87e0659d87b/comments", "author": null, "committer": null, "parents": [{"sha": "94673a121cfc7f9d51c9d05e31795477f4dc8dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94673a121cfc7f9d51c9d05e31795477f4dc8dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94673a121cfc7f9d51c9d05e31795477f4dc8dc7"}], "stats": {"total": 611, "additions": 610, "deletions": 1}, "files": [{"sha": "efffac49e03cd54597d7ff4ec5929b262cf084f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,204 @@\n+2023-01-26  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv-vector-builtins.cc (register_builtin_types):\n+\tUse get_typenode_from_name to get fixed-width integer type\n+\tnodes.\n+\t* config/riscv/riscv-vector-builtins.def: Update define with\n+\tfixed-width integer type nodes.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (same_bb_and_before_p): Remove it.\n+\t(real_insn_and_same_bb_p): New function.\n+\t(same_bb_and_after_or_equal_p): Remove it.\n+\t(before_p): New function.\n+\t(reg_killed_by_bb_p): Ditto.\n+\t(has_vsetvl_killed_avl_p): Ditto.\n+\t(get_vl): Move location so that we can call it.\n+\t(anticipatable_occurrence_p): Fix issue of AVL=REG support.\n+\t(available_occurrence_p): Ditto.\n+\t(dominate_probability_p): Remove it.\n+\t(can_backward_propagate_p): Remove it.\n+\t(get_all_nonphi_defs): New function.\n+\t(get_all_predecessors): Ditto.\n+\t(any_insn_in_bb_p): Ditto.\n+\t(insert_vsetvl): Adjust AVL REG.\n+\t(source_equal_p): New function.\n+\t(extract_single_source): Ditto.\n+\t(avl_info::single_source_equal_p): Ditto.\n+\t(avl_info::operator==): Adjust for AVL=REG.\n+\t(vl_vtype_info::same_avl_p): Ditto.\n+\t(vector_insn_info::set_demand_info): Remove it.\n+\t(vector_insn_info::compatible_p): Adjust for AVL=REG.\n+\t(vector_insn_info::compatible_avl_p): New function.\n+\t(vector_insn_info::merge): Adjust AVL=REG.\n+\t(vector_insn_info::dump): Ditto.\n+\t(pass_vsetvl::merge_successors): Remove it.\n+\t(enum fusion_type): New enum.\n+\t(pass_vsetvl::get_backward_fusion_type): New function.\n+\t(pass_vsetvl::backward_demand_fusion): Adjust for AVL=REG.\n+\t(pass_vsetvl::forward_demand_fusion): Ditto.\n+\t(pass_vsetvl::demand_fusion): Ditto.\n+\t(pass_vsetvl::prune_expressions): Ditto.\n+\t(pass_vsetvl::compute_local_properties): Ditto.\n+\t(pass_vsetvl::cleanup_vsetvls): Ditto.\n+\t(pass_vsetvl::commit_vsetvls): Ditto.\n+\t(pass_vsetvl::init): Ditto.\n+\t* config/riscv/riscv-vsetvl.h (enum fusion_type): New enum.\n+\t(enum merge_type): New enum.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc\n+\t(vector_infos_manager::vector_infos_manager): Add probability.\n+\t(vector_infos_manager::dump): Ditto.\n+\t(pass_vsetvl::compute_probabilities): Ditto.\n+\t* config/riscv/riscv-vsetvl.h (struct vector_block_info): Ditto.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (vector_insn_info::operator==): Remove dirty_pat.\n+\t(vector_insn_info::merge): Ditto.\n+\t(vector_insn_info::dump): Ditto.\n+\t(pass_vsetvl::merge_successors): Ditto.\n+\t(pass_vsetvl::backward_demand_fusion): Ditto.\n+\t(pass_vsetvl::forward_demand_fusion): Ditto.\n+\t(pass_vsetvl::commit_vsetvls): Ditto.\n+\t* config/riscv/riscv-vsetvl.h: Ditto.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (add_label_notes): Rename insn to\n+\trinsn.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (pass_vsetvl::backward_demand_fusion): Refine codes.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (pass_vsetvl::forward_demand_fusion):\n+\tAdd pre-check for redundant flow.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (vector_infos_manager::create_bitmap_vectors): New function.\n+\t(vector_infos_manager::free_bitmap_vectors): Ditto.\n+\t(pass_vsetvl::pre_vsetvl): Adjust codes.\n+\t* config/riscv/riscv-vsetvl.h: New function declaration.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (can_backward_propagate_p): Fix for null iter_bb.\n+\t(vector_insn_info::set_demand_info): New function.\n+\t(pass_vsetvl::emit_local_forward_vsetvls): Adjust for refinement of Phase 3.\n+\t(pass_vsetvl::merge_successors): Ditto.\n+\t(pass_vsetvl::compute_global_backward_infos): Ditto.\n+\t(pass_vsetvl::backward_demand_fusion): Ditto.\n+\t(pass_vsetvl::forward_demand_fusion): Ditto.\n+\t(pass_vsetvl::demand_fusion): New function.\n+\t(pass_vsetvl::lazy_vsetvl): Adjust for refinement of phase 3.\n+\t* config/riscv/riscv-vsetvl.h: New function declaration.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (vector_insn_info::operator>=): Fix available condition.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (change_vsetvl_insn): New function.\n+\t(pass_vsetvl::compute_global_backward_infos): Simplify codes.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (loop_basic_block_p): Adjust function.\n+\t(backward_propagate_worthwhile_p): Fix non-worthwhile.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (change_insn): Adjust in_group in validate_change.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (vector_infos_manager::all_same_avl_p): New function.\n+\t(pass_vsetvl::can_refine_vsetvl_p): Add AVL check.\n+\t(pass_vsetvl::commit_vsetvls): Ditto.\n+\t* config/riscv/riscv-vsetvl.h: New function declaration.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector.md:\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class loadstore): use\n+\tpred_store for vse.\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(function_expander::add_mem_operand): Refine function.\n+\t(function_expander::use_contiguous_load_insn): Adjust new\n+\timplementation.\n+\t(function_expander::use_contiguous_store_insn): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h: Refine function.\n+\t* config/riscv/vector.md (@pred_store<mode>): New pattern.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins.cc: Change to scalar pointer.\n+\n+2023-01-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/108543\n+\t* opts.cc (parse_sanitizer_options): Don't always clear SANITIZE_ADDRESS\n+\tif it was previously set.\n+\n+2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108540\n+\t* range-op-float.cc (foperator_equal::fold_range): If both op1 and op2\n+\tare singletons, use range_true even if op1 != op2\n+\twhen one range is [-0.0, -0.0] and another [0.0, 0.0].  Similarly,\n+\teven if intersection of the ranges is empty and one has\n+\tzero low bound and another zero high bound, use range_true_and_false\n+\trather than range_false.\n+\t(foperator_not_equal::fold_range): If both op1 and op2\n+\tare singletons, use range_false even if op1 != op2\n+\twhen one range is [-0.0, -0.0] and another [0.0, 0.0].  Similarly,\n+\teven if intersection of the ranges is empty and one has\n+\tzero low bound and another zero high bound, use range_true_and_false\n+\trather than range_true.\n+\n+2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* value-relation.cc (kind_string): Add const.\n+\t(rr_negate_table, rr_swap_table, rr_intersect_table,\n+\trr_union_table, rr_transitive_table): Add static const, change\n+\telement type from relation_kind to unsigned char.\n+\t(relation_negate, relation_swap, relation_intersect, relation_union,\n+\trelation_transitive): Cast rr_*_table element to relation_kind.\n+\t(relation_to_code): Add static const.\n+\t(relation_tests): Assert VREL_LAST is smaller than UCHAR_MAX.\n+\n+2023-01-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108547\n+\t* gimple-predicate-analysis.cc (value_sat_pred_p):\n+\tUse widest_int.\n+\n+2023-01-26  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR tree-optimization/108522\n+\t* tree-object-size.cc (compute_object_offset): Make EXPR\n+\targument non-const.  Call component_ref_field_offset.\n+\n+2023-01-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def (cssc): Specify\n+\tFEATURE_STRING field.\n+\n+2023-01-26  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/sourcebuild.texi: Refer to projects as GCC and GDB.\n+\n 2023-01-25  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR modula2/102343"}, {"sha": "af4c41feca136e782b526f6fab6bfcf986814fd4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1 +1 @@\n-20230126\n+20230127"}, {"sha": "f8b439ed3ee39bdcab9a07d8ab06b3163002adc9", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,23 @@\n+2023-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108524\n+\t* analyzer.h (class feasible_node): New forward decl.\n+\t* diagnostic-manager.cc (epath_finder::get_best_epath): Add \"pd\"\n+\tparam.\n+\t(epath_finder::explore_feasible_paths): Likewise.\n+\t(epath_finder::process_worklist_item): Likewise.  Use it to call\n+\tpending_diagnostic::check_valid_fpath_p on the final fpath to\n+\tgive pending_diagnostic a way to add additional restrictions on\n+\tfeasibility.\n+\t(saved_diagnostic::calc_best_epath): Pass pending_diagnostic to\n+\tepath_finder::get_best_epath.\n+\t* infinite-recursion.cc: Include \"analyzer/feasible-graph.h\".\n+\t(infinite_recursion_diagnostic::check_valid_fpath_p): New.\n+\t(infinite_recursion_diagnostic::fedge_uses_conjured_svalue_p): New.\n+\t(infinite_recursion_diagnostic::expr_uses_conjured_svalue_p): New.\n+\t* pending-diagnostic.h (pending_diagnostic::check_valid_fpath_p):\n+\tNew vfunc.\n+\n 2023-01-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108455"}, {"sha": "76b750325284bf51c8daad377d7f0585c0260975", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,8 @@\n+2023-01-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105300\n+\t* c-pragma.cc (handle_pragma_message): Warn for CPP_STRING_USERDEF.\n+\n 2023-01-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/108424"}, {"sha": "bb6ddc0f3283de6927b2aaab6003fcd20d07b66d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,36 @@\n+2023-01-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105300\n+\t* parser.cc: Remove unnecessary forward declarations.\n+\t(cp_parser_string_literal): New wrapper.\n+\t(cp_parser_string_literal_common): Renamed from\n+\tcp_parser_string_literal.  Add a bool parameter.  Give an error when\n+\tUDLs are not permitted.\n+\t(cp_parser_userdef_string_literal): New wrapper.\n+\t(finish_userdef_string_literal): Renamed from\n+\tcp_parser_userdef_string_literal.\n+\t(cp_parser_primary_expression): Call cp_parser_userdef_string_literal\n+\tinstead of cp_parser_string_literal.\n+\t(cp_parser_linkage_specification): Move a variable declaration closer\n+\tto its first use.\n+\t(cp_parser_static_assert): Likewise.\n+\t(cp_parser_operator): Call cp_parser_userdef_string_literal instead of\n+\tcp_parser_string_literal.\n+\t(cp_parser_asm_definition): Move a variable declaration closer to its\n+\tfirst use.\n+\t(cp_parser_asm_specification_opt): Move variable declarations closer to\n+\ttheir first use.\n+\t(cp_parser_asm_operand_list): Likewise.\n+\t(cp_parser_asm_clobber_list): Likewise.\n+\n+2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108503\n+\t* parser.cc (cp_convert_omp_range_for): If cp_finish_decomp has been\n+\tcalled in !processing_template_decl with processing_template_decl\n+\ttemporarily set, clear DECL_HAS_VALUE_EXPR_P on the vars temporarily.\n+\t(cp_finish_omp_range_for): And set it back again here.\n+\n 2023-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/108525"}, {"sha": "2257c870dd93a8a381c9712982ecf18e3e62fff3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,10 @@\n+2023-01-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108544\n+\t* resolve.cc (check_host_association): Extend host association check\n+\tso that it is not restricted to functions.  Also prevent NULL pointer\n+\tdereference.\n+\n 2023-01-25  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/108528"}, {"sha": "b8e2a3783a5bd39e83a9cfad543cd39a647ddcf3", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,71 @@\n+2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2-compiler/M2GCCDeclare.mod: Import IsProcedureNoReturn.\n+\t(DeclareProcedureToGccWholeProgram): New variable declared and set\n+\treturnType.  Pass returnType to BuildEndFunctionDeclaration.\n+\tExtra parameter IsProcedureNoReturn passed to\n+\tBuildEndFunctionDeclaration.\n+\t* gm2-compiler/M2Quads.mod (BuildM2MainFunction): Correct\n+\tscaffold comment and add extra return 0.\n+\t* gm2-compiler/P2Build.bnf: Import BuildNoReturnAttribute.\n+\t(ProcedureHeading): Process EndBuildFormalParameters before\n+\tparsing AttributeNoReturn.\n+\t(DefProcedureHeading): Process EndBuildFormalParameters before\n+\tparsing AttributeNoReturn.\n+\t(AttributeNoReturn): Call BuildNoReturnAttribute.\n+\t* gm2-compiler/P2SymBuild.def (BuildNoReturnAttribute): New\n+\tprocedure.\n+\t* gm2-compiler/P2SymBuild.mod (BuildNoReturnAttribute): New\n+\tprocedure.\n+\t* gm2-compiler/SymbolTable.def (PutProcedureInline): Corrected\n+\tcomment.\n+\t(PutProcedureNoReturn): New procedure.\n+\t(IsProcedureNoReturn): New procedure function.\n+\t* gm2-compiler/SymbolTable.mod (SymProcedure): IsNoReturn\n+\tnew field.\n+\t(MakeProcedure): Initialize IsNoReturn to FALSE.\n+\t(PutProcedureNoReturn): New procedure.\n+\t(IsProcedureNoReturn): New procedure function.\n+\t* gm2-gcc/m2decl.cc (m2decl_BuildEndFunctionDeclaration):\n+\tAdd extra parameter isnoreturn.  Set TREE_THIS_VOLATILE\n+\tto isnoreturn.\n+\t* gm2-gcc/m2decl.def (BuildEndFunctionDeclaration): Add\n+\textra parameter isnoreturn.\n+\t* gm2-gcc/m2decl.h (m2decl_BuildEndFunctionDeclaration): Add\n+\textra parameter isnoreturn.\n+\t* gm2-gcc/m2except.cc (m2except_InitExceptions): Change all\n+\tfunction decl to pass an extra parameter isnoreturn.\n+\n+2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* m2.flex (splitSlashStar): Fix comment so that /* does not\n+\tappear inside the comment.\n+\n+2023-01-26  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/108553\n+\t* gm2-lang.cc (gm2_langhook_init_options): Remove debug code.\n+\n+2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* Make-lang.in (m2/gm2config.h): Rewrite rule to be\n+\tdependent upon m2/gm2config.aci.\n+\t(m2/gm2config.aci): Newrule.\n+\t* configure.ac (AC_CONFIG_HEADERS): Change destination\n+\tto gm2config.aci.\n+\t* configure: Regenerate.\n+\t* gm2-libs/config-host: Regenerate.\n+\t* gm2-compiler/M2GCCDeclare.mod (AddSymToWatch): Comment\n+\tout.\n+\t* gm2-compiler/M2Quads.mod (BuildConstHighFromSym): Remove\n+\tDim.\n+\t(StartBuildWith): Call BuildStmtNoteTok.\n+\t(BuildStmtNoteTok): New procedure.\n+\t(BuildStmtNote): Re-implement re-factor into two\n+\tprocedures and call BuildStmtNoteTok.\n+\t* gm2config.h.in: Remove.\n+\t* gm2config.aci.in: New file.\n+\n 2023-01-25  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR modula2/102343"}, {"sha": "c54295c1074f3ba574323a9571cbbbf2d2ef430c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,248 @@\n+2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2/warnings/returntype/fail/badreturn.mod: New test.\n+\t* gm2/warnings/returntype/fail/warnings-returntype-fail.exp:\n+\tNew test.\n+\t* gm2/warnings/returntype/pass/Termbase.mod: New test.\n+\t* gm2/warnings/returntype/pass/goodreturn.mod: New test.\n+\t* gm2/warnings/returntype/pass/keypressedsimple.mod: New test.\n+\t* gm2/warnings/returntype/pass/warnings-returntype-pass.exp:\n+\tNew test.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-20.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-21.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-22.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-23.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-24.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-25.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-26.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-27.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-28.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-29.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-30.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-31.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-32.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-33.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-34.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-35.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-36.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-37.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-38.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-39.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-40.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-41.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-42.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-43.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-44.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-45.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-46.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-47.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-48.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-49.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-50.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-51.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-52.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-53.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-54.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-55.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-56.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-57.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-58.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-59.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-60.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-61.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-62.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-63.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-64.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-65.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-66.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-67.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-68.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-69.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-10.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-11.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-12.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-13.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-14.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-15.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-16.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-17.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-18.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-19.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-70.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-71.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-9.c: New test.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-10.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-11.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-12.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-13.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-9.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-10.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-11.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-12.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-13.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-14.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-15.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-16.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-17.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-9.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_switch-9.c: New test.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-27.c: Update\n+\ttestcase.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-28.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-45.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-25.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-26.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-27.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-28.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-3.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-7.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-12.c: Ditto.\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vle-constraint-1.c:\n+\n+2023-01-26  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vse-constraint-1.c: New test.\n+\n+2023-01-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108544\n+\t* gfortran.dg/pr108544.f90: New test.\n+\t* gfortran.dg/pr96102b.f90: New test.\n+\n+2023-01-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/108543\n+\t* c-c++-common/asan/pointer-subtract-5.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-6.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-7.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-8.c: New test.\n+\n+2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108540\n+\t* gcc.c-torture/execute/ieee/pr108540-1.c: New test.\n+\t* gcc.c-torture/execute/ieee/pr108540-2.c: New test.\n+\n+2023-01-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-c++-common/hwasan/arguments-3.c: Remove extraneous .*s.\n+\n+2023-01-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/bfloat16_scalar_typecheck.c: Accept empty\n+\tcompound literals.\n+\n+2023-01-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/guality/pr36728-2.c: Update XFAILs for aarch64*-*-*.\n+\t* gcc.dg/guality/pr54519-1.c: Likewise.\n+\t* gcc.dg/guality/pr54519-3.c: Likewise.\n+\t* gcc.dg/guality/pr54693-2.c: Likewise.\n+\t* gcc.dg/guality/sra-1.c: Likewise.\n+\n+2023-01-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/pr99766.C: Disable warnings.\n+\n+2023-01-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/slp_13.c: Remove XFAILs.\n+\n+2023-01-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105300\n+\t* g++.dg/cpp0x/udlit-error1.C: New test.\n+\n+2023-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108507\n+\t* gcc.dg/analyzer/SARD-tc841-basic-00182-min.c: Add\n+\t-Wno-stringop-overflow.\n+\n+2023-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108524\n+\t* gcc.dg/analyzer/infinite-recursion-pr108524-1.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-pr108524-2.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-pr108524-qobject-json-parser.c:\n+\tNew test.\n+\n+2023-01-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108547\n+\t* gcc.dg/uninit-pr108547.c: New testcase.\n+\n+2023-01-26  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR tree-optimization/108522\n+\t* gcc.dg/builtin-dynamic-object-size-0.c (DEFSTRUCT): New\n+\tmacro.\n+\t(test_dynarray_struct_member_b, test_dynarray_struct_member_c,\n+\ttest_dynarray_struct_member_d,\n+\ttest_dynarray_struct_member_subobj_b,\n+\ttest_dynarray_struct_member_subobj_c,\n+\ttest_dynarray_struct_member_subobj_d): New tests.\n+\t(main): Call them.\n+\n+2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108503\n+\t* g++.dg/gomp/pr108503.C: New test.\n+\n+2023-01-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108523\n+\t* gcc.dg/torture/pr108523.c: New testcase.\n+\n 2023-01-25  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/108528"}, {"sha": "56e22132126f011dc5e1e845fa42610c9e8df9b7", "filename": "libgm2/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/libgm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/libgm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,7 @@\n+2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* configure.ac (AM_INIT_AUTOMAKE): Specify 1.15.1.\n+\n 2023-01-24  Co-Authored by: Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* libm2cor/Makefile.am (SYSTEM.def): Split path into"}, {"sha": "6169054a8d4454bbed2f6d0083be9eff84eec087", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2371d100b946ec96384e4541235fb87e0659d87b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2371d100b946ec96384e4541235fb87e0659d87b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2371d100b946ec96384e4541235fb87e0659d87b", "patch": "@@ -1,3 +1,29 @@\n+2023-01-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc (operator>>(istream&, ZoneInfo&)): Allow\n+\trules named \"+\" for compatibility with older tzdata.zi files.\n+\n+2023-01-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108554\n+\t* include/bits/stl_tree.h (_Rb_tree_insert_and_rebalance): Add\n+\tnonnull attribute.\n+\t(_Rb_tree_rebalance_for_erase): Add nonnull and returns_nonnull\n+\tattributes.\n+\t* testsuite/23_containers/map/modifiers/108554.cc: New test.\n+\n+2023-01-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108530\n+\t* src/c++20/tzdb.cc (current_zone): Look for TIMEZONE or ZONE in\n+\t/etc/sysconfig/clock, not DEFAULT_TIMEZONE.\n+\n+2023-01-26  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/intro.xml: Update links to www.open-std.org to\n+\tuse https.\n+\t* doc/html/manual/bugs.html: Regenerate.\n+\n 2023-01-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/108530"}]}