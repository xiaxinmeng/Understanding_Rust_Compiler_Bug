{"sha": "49adc066729bda093b0658e3926bbf64cd4628b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlhZGMwNjY3MjliZGEwOTNiMDY1OGUzOTI2YmJmNjRjZDQ2MjhiMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-26T20:16:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-26T20:16:20Z"}, "message": "libstdc++: Simplify definition of net::ip::resolver_base constants\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (resolver_base::flags): Remove\n\tenumerators. Initialize constants directly with desired values.\n\tMake all operators constexpr and noexcept.\n\t* testsuite/experimental/net/internet/resolver/base.cc: Use\n\t__gnu_test::test_bitmask_values for bitmask type. Check\n\tconstruction and destruction is protected.", "tree": {"sha": "bcc03c657fcb4523707bd91b65d15b457421963a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc03c657fcb4523707bd91b65d15b457421963a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49adc066729bda093b0658e3926bbf64cd4628b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49adc066729bda093b0658e3926bbf64cd4628b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49adc066729bda093b0658e3926bbf64cd4628b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49adc066729bda093b0658e3926bbf64cd4628b3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a26ba75de623f75fb44cddc2a9c982d31c96213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a26ba75de623f75fb44cddc2a9c982d31c96213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a26ba75de623f75fb44cddc2a9c982d31c96213"}], "stats": {"total": 105, "additions": 37, "deletions": 68}, "files": [{"sha": "d3321afb9c6d90f6b3a82b0e719ca606bb4be1eb", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49adc066729bda093b0658e3926bbf64cd4628b3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49adc066729bda093b0658e3926bbf64cd4628b3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=49adc066729bda093b0658e3926bbf64cd4628b3", "patch": "@@ -1649,62 +1649,51 @@ namespace ip\n   class resolver_base\n   {\n   public:\n-    enum flags : int\n-    {\n-      __flags_passive\t\t\t= AI_PASSIVE,\n-      __flags_canonical_name\t\t= AI_CANONNAME,\n-      __flags_numeric_host\t\t= AI_NUMERICHOST,\n-#ifdef AI_NUMERICSERV\n-      __flags_numeric_service\t\t= AI_NUMERICSERV,\n-#endif\n-      __flags_v4_mapped\t\t\t= AI_V4MAPPED,\n-      __flags_all_matching\t\t= AI_ALL,\n-      __flags_address_configured\t= AI_ADDRCONFIG\n-    };\n-    static constexpr flags passive\t\t= __flags_passive;\n-    static constexpr flags canonical_name\t= __flags_canonical_name;\n-    static constexpr flags numeric_host\t\t= __flags_numeric_host;\n+    enum flags : int { };\n+    static constexpr flags passive\t\t= (flags)AI_PASSIVE;\n+    static constexpr flags canonical_name\t= (flags)AI_CANONNAME;\n+    static constexpr flags numeric_host\t\t= (flags)AI_NUMERICHOST;\n #ifdef AI_NUMERICSERV\n-    static constexpr flags numeric_service\t= __flags_numeric_service;\n+    static constexpr flags numeric_service\t= (flags)AI_NUMERICSERV;\n #endif\n-    static constexpr flags v4_mapped\t\t= __flags_v4_mapped;\n-    static constexpr flags all_matching\t\t= __flags_all_matching;\n-    static constexpr flags address_configured\t= __flags_address_configured;\n+    static constexpr flags v4_mapped\t\t= (flags)AI_V4MAPPED;\n+    static constexpr flags all_matching\t\t= (flags)AI_ALL;\n+    static constexpr flags address_configured\t= (flags)AI_ADDRCONFIG;\n \n   protected:\n     resolver_base() = default;\n     ~resolver_base() = default;\n   };\n \n   constexpr resolver_base::flags\n-  operator&(resolver_base::flags __f1, resolver_base::flags __f2)\n+  operator&(resolver_base::flags __f1, resolver_base::flags __f2) noexcept\n   { return resolver_base::flags( int(__f1) & int(__f2) ); }\n \n   constexpr resolver_base::flags\n-  operator|(resolver_base::flags __f1, resolver_base::flags __f2)\n+  operator|(resolver_base::flags __f1, resolver_base::flags __f2) noexcept\n   { return resolver_base::flags( int(__f1) | int(__f2) ); }\n \n   constexpr resolver_base::flags\n-  operator^(resolver_base::flags __f1, resolver_base::flags __f2)\n+  operator^(resolver_base::flags __f1, resolver_base::flags __f2) noexcept\n   { return resolver_base::flags( int(__f1) ^ int(__f2) ); }\n \n   constexpr resolver_base::flags\n-  operator~(resolver_base::flags __f)\n+  operator~(resolver_base::flags __f) noexcept\n   { return resolver_base::flags( ~int(__f) ); }\n \n-  inline resolver_base::flags&\n-  operator&=(resolver_base::flags& __f1, resolver_base::flags __f2)\n+  constexpr resolver_base::flags&\n+  operator&=(resolver_base::flags& __f1, resolver_base::flags __f2) noexcept\n   { return __f1 = (__f1 & __f2); }\n \n-  inline resolver_base::flags&\n-  operator|=(resolver_base::flags& __f1, resolver_base::flags __f2)\n+  constexpr resolver_base::flags&\n+  operator|=(resolver_base::flags& __f1, resolver_base::flags __f2) noexcept\n   { return __f1 = (__f1 | __f2); }\n \n-  inline resolver_base::flags&\n-  operator^=(resolver_base::flags& __f1, resolver_base::flags __f2)\n+  constexpr resolver_base::flags&\n+  operator^=(resolver_base::flags& __f1, resolver_base::flags __f2) noexcept\n   { return __f1 = (__f1 ^ __f2); }\n \n-  // TODO define resolver_base::flags static constants for C++14 mode\n+  // TODO define resolver_base::flags static constants in .so for C++14 mode\n \n   /// @}\n "}, {"sha": "23af4464b7230da789a1fc31bb216b869942588a", "filename": "libstdc++-v3/testsuite/experimental/net/internet/resolver/base.cc", "status": "modified", "additions": 18, "deletions": 38, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49adc066729bda093b0658e3926bbf64cd4628b3/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49adc066729bda093b0658e3926bbf64cd4628b3/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc?ref=49adc066729bda093b0658e3926bbf64cd4628b3", "patch": "@@ -15,50 +15,30 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target c++14 } }\n+// { dg-do compile { target c++14 } }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>\n+#include <testsuite_common_types.h>\n #include <testsuite_hooks.h>\n \n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = false;\n+using std::experimental::net::ip::resolver_base;\n \n-  using resolver = std::experimental::net::ip::resolver_base;\n-\n-  resolver::flags f = resolver::passive;\n-\n-  VERIFY( (f & resolver::numeric_host) == 0);\n-  f &= resolver::numeric_host;\n-  VERIFY( f == 0 );\n-\n-  VERIFY( (f | resolver::numeric_host) == resolver::numeric_host);\n-  f |= resolver::numeric_host;\n-  VERIFY( f == resolver::numeric_host );\n-\n-  VERIFY( (f ^ resolver::numeric_host) == 0 );\n-  f ^= resolver::numeric_host;\n-  VERIFY( f == 0 );\n-\n-  f = ~resolver::numeric_host;\n-  VERIFY( (f & resolver::numeric_host) == 0);\n-  VERIFY( (f | resolver::numeric_host) == ~resolver::flags{} );\n-\n-  (void) resolver::passive;\n-  (void) resolver::canonical_name;\n-  (void) resolver::numeric_host;\n+static_assert( __gnu_test::test_bitmask_values({\n+  resolver_base::passive,\n+  resolver_base::canonical_name,\n+  resolver_base::numeric_host,\n #ifdef AI_NUMERICSERV\n-  (void) resolver::numeric_service;\n+  resolver_base::numeric_service,\n #endif\n-  (void) resolver::v4_mapped;\n-  (void) resolver::all_matching;\n-  (void) resolver::address_configured;\n-}\n+  resolver_base::v4_mapped,\n+  resolver_base::all_matching,\n+  resolver_base::address_configured\n+}), \"each bitmask element is distinct\" );\n+\n+static_assert( ! std::is_default_constructible<resolver_base>(), \"protected\" );\n+static_assert( ! std::is_destructible<resolver_base>(), \"protected\" );\n \n-int\n-main()\n-{\n-  test01();\n-}\n+struct Res : resolver_base { };\n+static_assert( std::is_default_constructible<Res>(), \"\" );\n+static_assert( std::is_destructible<Res>(), \"\" );"}]}