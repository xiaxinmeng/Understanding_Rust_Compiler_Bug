{"sha": "2161a445d1c129bf2faa031bd862fa4fe3a4121b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2MWE0NDVkMWMxMjliZjJmYWEwMzFiZDg2MmZhNGZlM2E0MTIxYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-10-07T20:14:26Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-10-07T20:14:26Z"}, "message": "[Darwin, machopic 0/n] Initial tidy of Mach-O symbol handling.\n\nWe want to improve the detection and caching of symbol-properties\nso that (a) we can make the compiler's output match the platform\nnorms (b) we can improve efficiency by checking flags instead of\ninspecting strings. (c) The fix for PR71767 was a largish hammer\nand we want to reduce the number of symbols that are made linker-\nvisible.\n\nThis first patch is largely typographical changes with no functional\ndifference intended:\n\n- Tries to ensure that there's no overlap between the symbols used in\nthe Mach-O case and those declared in the i386 or rs6000 port trees.\n\n - Some improvement to comments.\n\n- Makes the naming of the symbol flags consistent with other uses.\n \n - Provides a predicate macro for each use.\n \ngcc/ChangeLog:\n\n2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/darwin.c (machopic_symbol_defined_p): Use symbol flag\n\tpredicates instead of accessing bits directly.\n\t(machopic_indirect_call_target): Likewise.\n\t(machopic_output_indirection): Likewise.\n\t(darwin_encode_section_info): Improve description.  Use renamed\n\tsymbol flags.  Use predicate macros for variables and functions.\n\t* config/darwin.h:\n\tRename MACHO_SYMBOL_VARIABLE to MACHO_SYMBOL_FLAG_VARIABLE.\n\tRename MACHO_SYMBOL_DEFINED to MACHO_SYMBOL_FLAG_DEFINED.\n\tRename MACHO_SYMBOL_STATIC to MACHO_SYMBOL_FLAG_STATIC.\n\t(MACHO_SYMBOL_VARIABLE_P): New.\n\t(MACHO_SYMBOL_DEFINED_P):New.\n\t(MACHO_SYMBOL_STATIC_P): New.\n\t* config/i386/darwin.h (MACHO_SYMBOL_FLAG_VARIABLE): Delete.\n\t(SYMBOL_FLAG_SUBT_DEP): New.\n\t* config/rs6000/darwin.h (SYMBOL_FLAG_SUBT_DEP): New.\n\nFrom-SVN: r276674", "tree": {"sha": "77c3c0f3baa914515e1bbe50035a456e446c0d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c3c0f3baa914515e1bbe50035a456e446c0d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2161a445d1c129bf2faa031bd862fa4fe3a4121b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2161a445d1c129bf2faa031bd862fa4fe3a4121b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2161a445d1c129bf2faa031bd862fa4fe3a4121b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2161a445d1c129bf2faa031bd862fa4fe3a4121b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a8969957a86d1832434a07169976c0b1b9e837c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8969957a86d1832434a07169976c0b1b9e837c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8969957a86d1832434a07169976c0b1b9e837c"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "021d406039792f9ba1bd1e877fdd084ddc0d03db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2161a445d1c129bf2faa031bd862fa4fe3a4121b", "patch": "@@ -1,3 +1,22 @@\n+2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (machopic_symbol_defined_p): Use symbol flag\n+\tpredicates instead of accessing bits directly.\n+\t(machopic_indirect_call_target): Likewise.\n+\t(machopic_output_indirection): Likewise.\n+\t(darwin_encode_section_info): Improve description.  Use renamed\n+\tsymbol flags.  Use predicate macros for variables and functions.\n+\t* config/darwin.h:\n+\tRename MACHO_SYMBOL_VARIABLE to MACHO_SYMBOL_FLAG_VARIABLE.\n+\tRename MACHO_SYMBOL_DEFINED to MACHO_SYMBOL_FLAG_DEFINED.\n+\tRename MACHO_SYMBOL_STATIC to MACHO_SYMBOL_FLAG_STATIC.\n+\t(MACHO_SYMBOL_VARIABLE_P): New.\n+\t(MACHO_SYMBOL_DEFINED_P):New.\n+\t(MACHO_SYMBOL_STATIC_P): New.\n+\t* config/i386/darwin.h (MACHO_SYMBOL_FLAG_VARIABLE): Delete.\n+\t(SYMBOL_FLAG_SUBT_DEP): New.\n+\t* config/rs6000/darwin.h (SYMBOL_FLAG_SUBT_DEP): New.\n+\n 2019-10-07  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_file_end): s/msp_/msp430_/"}, {"sha": "45e0d744adb4137a64d4274635dcab0c6ff2e9c3", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=2161a445d1c129bf2faa031bd862fa4fe3a4121b", "patch": "@@ -76,7 +76,7 @@ along with GCC; see the file COPYING3.  If not see\n    setting the second word in the .non_lazy_symbol_pointer data\n    structure to symbol.  See indirect_data for the code that handles\n    the extra indirection, and machopic_output_indirection and its use\n-   of MACHO_SYMBOL_STATIC for the code that handles @code{static}\n+   of MACHO_SYMBOL_FLAG_STATIC for the code that handles @code{static}\n    symbol indirection.  */\n \n typedef struct GTY(()) cdtor_record {\n@@ -249,7 +249,7 @@ name_needs_quotes (const char *name)\n int\n machopic_symbol_defined_p (rtx sym_ref)\n {\n-  if (SYMBOL_REF_FLAGS (sym_ref) & MACHO_SYMBOL_FLAG_DEFINED)\n+  if (MACHO_SYMBOL_DEFINED_P (sym_ref))\n     return true;\n \n   /* If a symbol references local and is not an extern to this\n@@ -258,7 +258,7 @@ machopic_symbol_defined_p (rtx sym_ref)\n     {\n       /* If the symbol references a variable and the variable is a\n \t common symbol, then this symbol is not defined.  */\n-      if (SYMBOL_REF_FLAGS (sym_ref) & MACHO_SYMBOL_FLAG_VARIABLE)\n+      if (MACHO_SYMBOL_VARIABLE_P (sym_ref))\n \t{\n \t  tree decl = SYMBOL_REF_DECL (sym_ref);\n \t  if (!decl)\n@@ -797,8 +797,7 @@ machopic_indirect_call_target (rtx target)\n \n   if (MACHOPIC_INDIRECT\n       && GET_CODE (XEXP (target, 0)) == SYMBOL_REF\n-      && !(SYMBOL_REF_FLAGS (XEXP (target, 0))\n-\t   & MACHO_SYMBOL_FLAG_DEFINED))\n+      && ! MACHO_SYMBOL_DEFINED_P (XEXP (target, 0)))\n     {\n       rtx sym_ref = XEXP (target, 0);\n       const char *stub_name = machopic_indirection_name (sym_ref,\n@@ -1167,14 +1166,14 @@ machopic_output_indirection (machopic_indirection **slot, FILE *asm_out_file)\n       assemble_name (asm_out_file, sym_name);\n       fprintf (asm_out_file, \"\\n\");\n \n-      /* Variables that are marked with MACHO_SYMBOL_STATIC need to\n+      /* Variables that are marked with MACHO_SYMBOL_FLAG_STATIC need to\n \t have their symbol name instead of 0 in the second entry of\n \t the non-lazy symbol pointer data structure when they are\n \t defined.  This allows the runtime to rebind newer instances\n \t of the translation unit with the original instance of the\n \t symbol.  */\n \n-      if ((SYMBOL_REF_FLAGS (symbol) & MACHO_SYMBOL_STATIC)\n+      if (MACHO_SYMBOL_STATIC_P (symbol)\n \t  && machopic_symbol_defined_p (symbol))\n \tinit = gen_rtx_SYMBOL_REF (Pmode, sym_name);\n \n@@ -1205,23 +1204,37 @@ machopic_operand_p (rtx op)\n \t    && XINT (XEXP (op, 0), 1) == UNSPEC_MACHOPIC_OFFSET);\n }\n \n-/* This function records whether a given name corresponds to a defined\n-   or undefined function or variable, for machopic_classify_ident to\n-   use later.  */\n+/* This function:\n+   computes and caches a series of flags that characterise the symbol's\n+   properties that affect Mach-O code gen (including accidental cases\n+   from older toolchains).\n+\n+   TODO:\n+   Here we also need to do enough analysis to determine if a symbol's\n+   name needs to be made linker-visible.  This is more tricky - since\n+   it depends on whether we've previously seen a global weak definition\n+   in the same section.\n+   */\n \n void\n-darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n+darwin_encode_section_info (tree decl, rtx rtl, int first)\n {\n-  rtx sym_ref;\n+  /* Careful not to prod global register variables.  */\n+  if (!MEM_P (rtl))\n+    return;\n \n-  /* Do the standard encoding things first.  */\n+  /* Do the standard encoding things first; this sets:\n+     SYMBOL_FLAG_FUNCTION,\n+     SYMBOL_FLAG_LOCAL, (binds_local_p)\n+     TLS_MODEL, SYMBOL_FLAG_SMALL\n+     SYMBOL_FLAG_EXTERNAL.  */\n   default_encode_section_info (decl, rtl, first);\n \n-  if (TREE_CODE (decl) != FUNCTION_DECL && TREE_CODE (decl) != VAR_DECL)\n+  if (! VAR_OR_FUNCTION_DECL_P (decl))\n     return;\n \n-  sym_ref = XEXP (rtl, 0);\n-  if (TREE_CODE (decl) == VAR_DECL)\n+  rtx sym_ref = XEXP (rtl, 0);\n+  if (VAR_P (decl))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_VARIABLE;\n \n   if (!DECL_EXTERNAL (decl)\n@@ -1234,7 +1247,7 @@ darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_DEFINED;\n \n   if (! TREE_PUBLIC (decl))\n-    SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_STATIC;\n+    SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_STATIC;\n }\n \n void"}, {"sha": "39c54cc7208a27d4a745ffb68cf66cac7eaafb5d", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=2161a445d1c129bf2faa031bd862fa4fe3a4121b", "patch": "@@ -812,21 +812,30 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #undef TARGET_ASM_MARK_DECL_PRESERVED\n #define TARGET_ASM_MARK_DECL_PRESERVED darwin_mark_decl_preserved\n \n-/* Set on a symbol with SYMBOL_FLAG_FUNCTION or\n-   MACHO_SYMBOL_FLAG_VARIABLE to indicate that the function or\n-   variable has been defined in this translation unit.\n-   When porting Mach-O to new architectures you need to make\n-   sure these aren't clobbered by the backend.  */\n+/* Any port using this header needs to define the first available\n+   subtarget symbol bit: SYMBOL_FLAG_SUBT_DEP.  */\n \n-#define MACHO_SYMBOL_FLAG_VARIABLE (SYMBOL_FLAG_MACH_DEP)\n-#define MACHO_SYMBOL_FLAG_DEFINED ((SYMBOL_FLAG_MACH_DEP) << 1)\n+/* Is a variable. */\n+#define MACHO_SYMBOL_FLAG_VARIABLE (SYMBOL_FLAG_SUBT_DEP)\n+#define MACHO_SYMBOL_VARIABLE_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & MACHO_SYMBOL_FLAG_VARIABLE) != 0)\n+\n+/* Set on a symbol with SYMBOL_FLAG_FUNCTION or MACHO_SYMBOL_FLAG_VARIABLE\n+   to indicate that the function or variable is considered defined in this\n+   translation unit.  */\n+\n+#define MACHO_SYMBOL_FLAG_DEFINED ((SYMBOL_FLAG_SUBT_DEP) << 2)\n+#define MACHO_SYMBOL_DEFINED_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & MACHO_SYMBOL_FLAG_DEFINED) != 0)\n \n /* Set on a symbol to indicate when fix-and-continue style code\n    generation is being used and the symbol refers to a static symbol\n    that should be rebound from new instances of a translation unit to\n    the original instance of the data.  */\n \n-#define MACHO_SYMBOL_STATIC ((SYMBOL_FLAG_MACH_DEP) << 2)\n+#define MACHO_SYMBOL_FLAG_STATIC ((SYMBOL_FLAG_SUBT_DEP) << 5)\n+#define MACHO_SYMBOL_STATIC_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & MACHO_SYMBOL_FLAG_STATIC) != 0)\n \n /* Symbolic names for various things we might know about a symbol.  */\n "}, {"sha": "bdb36f0095961a44672b8b9e3305e9629bca24f9", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=2161a445d1c129bf2faa031bd862fa4fe3a4121b", "patch": "@@ -324,10 +324,8 @@ along with GCC; see the file COPYING3.  If not see\n         }\t\t\t\t\t\t\t\t\\\n     }\n \n-/* This needs to move since i386 uses the first flag and other flags are\n-   used in Mach-O.  */\n-#undef MACHO_SYMBOL_FLAG_VARIABLE\n-#define MACHO_SYMBOL_FLAG_VARIABLE ((SYMBOL_FLAG_MACH_DEP) << 3)\n+/* First available SYMBOL flag bit for use by subtargets.  */\n+#define SYMBOL_FLAG_SUBT_DEP (SYMBOL_FLAG_MACH_DEP << 5)\n \n #undef MACHOPIC_NL_SYMBOL_PTR_SECTION\n #define MACHOPIC_NL_SYMBOL_PTR_SECTION \\"}, {"sha": "1081967bd61fdc2730aadb1e88296b5cf36cafd3", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2161a445d1c129bf2faa031bd862fa4fe3a4121b/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=2161a445d1c129bf2faa031bd862fa4fe3a4121b", "patch": "@@ -506,6 +506,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    this will need to be modified similar to the x86 case.  */\n #define TARGET_FOLD_BUILTIN SUBTARGET_FOLD_BUILTIN\n \n+/* First available SYMBOL flag bit for use by subtargets.  */\n+#define SYMBOL_FLAG_SUBT_DEP (SYMBOL_FLAG_MACH_DEP)\n+\n /* Use standard DWARF numbering for DWARF debugging information.  */\n #define RS6000_USE_DWARF_NUMBERING\n "}]}