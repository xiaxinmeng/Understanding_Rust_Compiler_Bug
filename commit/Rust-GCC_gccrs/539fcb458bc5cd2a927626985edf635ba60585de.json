{"sha": "539fcb458bc5cd2a927626985edf635ba60585de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5ZmNiNDU4YmM1Y2QyYTkyNzYyNjk4NWVkZjYzNWJhNjA1ODVkZQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2011-12-21T13:54:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-21T13:54:55Z"}, "message": "sem_ch3.ads, [...] (Check_CPP_Type): New subprogram.\n\n2011-12-21  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.ads, sem_ch3.adb (Check_CPP_Type): New subprogram.\n\t(Process_Full_View): Invoke Check_CPP_Type if processing the\n\tfull-view of a CPP type.\n\t* sem_prag.adb (Process_Import_Or_Interface): Add missing support\n\tfor importing a CPP type that has an incomplete declaration. Move\n\tto new routine Check_CPP_Type the code that verifies that\n\tcomponents of imported CPP types do not have default expressions.\n\nFrom-SVN: r182587", "tree": {"sha": "f973268ca7fb94b0e3deb8e6f4f6136c72e29db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f973268ca7fb94b0e3deb8e6f4f6136c72e29db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/539fcb458bc5cd2a927626985edf635ba60585de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539fcb458bc5cd2a927626985edf635ba60585de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/539fcb458bc5cd2a927626985edf635ba60585de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539fcb458bc5cd2a927626985edf635ba60585de/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4172a8e33873fc9c93121fccfa97d5d22aff1537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4172a8e33873fc9c93121fccfa97d5d22aff1537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4172a8e33873fc9c93121fccfa97d5d22aff1537"}], "stats": {"total": 115, "additions": 79, "deletions": 36}, "files": [{"sha": "b8f30a9bc2248edb5c70748596a8687fd8792980", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=539fcb458bc5cd2a927626985edf635ba60585de", "patch": "@@ -1,3 +1,13 @@\n+2011-12-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Check_CPP_Type): New subprogram.\n+\t(Process_Full_View): Invoke Check_CPP_Type if processing the\n+\tfull-view of a CPP type.\n+\t* sem_prag.adb (Process_Import_Or_Interface): Add missing support\n+\tfor importing a CPP type that has an incomplete declaration. Move\n+\tto new routine Check_CPP_Type the code that verifies that\n+\tcomponents of imported CPP types do not have default expressions.\n+\n 2011-12-21  Vincent Celier  <celier@adacore.com>\n \n \t* prj-nmsc.adb (Report_No_Sources): Remove argument Lang. Report"}, {"sha": "7de6f863e8508178fc2d028b20c559a0b6b52e1a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=539fcb458bc5cd2a927626985edf635ba60585de", "patch": "@@ -9640,6 +9640,38 @@ package body Sem_Ch3 is\n       end loop;\n    end Check_Completion;\n \n+   --------------------\n+   -- Check_CPP_Type --\n+   --------------------\n+\n+   procedure Check_CPP_Type (T : Entity_Id) is\n+      Tdef  : constant Node_Id := Type_Definition (Declaration_Node (T));\n+      Clist : Node_Id;\n+      Comp  : Node_Id;\n+\n+   begin\n+      if Nkind (Tdef) = N_Record_Definition then\n+         Clist := Component_List (Tdef);\n+\n+      else\n+         pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n+         Clist := Component_List (Record_Extension_Part (Tdef));\n+      end if;\n+\n+      if Present (Clist) then\n+         Comp := First (Component_Items (Clist));\n+         while Present (Comp) loop\n+            if Present (Expression (Comp)) then\n+               Error_Msg_N\n+                 (\"component of imported 'C'P'P type cannot have\" &\n+                    \" default expression\", Expression (Comp));\n+            end if;\n+\n+            Next (Comp);\n+         end loop;\n+      end if;\n+   end Check_CPP_Type;\n+\n    ----------------------------\n    -- Check_Delta_Expression --\n    ----------------------------\n@@ -18094,6 +18126,11 @@ package body Sem_Ch3 is\n       if Is_CPP_Class (Priv_T) then\n          Set_Is_CPP_Class (Full_T);\n          Set_Convention   (Full_T, Convention_CPP);\n+\n+         --  Check that components of imported CPP types do not have default\n+         --  expressions.\n+\n+         Check_CPP_Type (Full_T);\n       end if;\n \n       --  If the private view has user specified stream attributes, then so has"}, {"sha": "7b4d2a90a4ba84d9c32a2705b32fee9575fde3e2", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=539fcb458bc5cd2a927626985edf635ba60585de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -115,6 +115,10 @@ package Sem_Ch3 is\n    --  and errors are posted on that node, rather than on the declarations that\n    --  require completion in the package declaration.\n \n+   procedure Check_CPP_Type (T : Entity_Id);\n+   --  Check that components of imported CPP type T do not have default\n+   --  expressions because the constructor (if any) is on the C++ side.\n+\n    procedure Derive_Subprogram\n      (New_Subp     : in out Entity_Id;\n       Parent_Subp  : Entity_Id;"}, {"sha": "adde2d63e72e04b51996699502c9a9266cb72b04", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539fcb458bc5cd2a927626985edf635ba60585de/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=539fcb458bc5cd2a927626985edf635ba60585de", "patch": "@@ -4602,9 +4602,26 @@ package body Sem_Prag is\n \n          --  Import a CPP class\n \n-         elsif Is_Record_Type (Def_Id)\n-           and then C = Convention_CPP\n+         elsif C = Convention_CPP\n+           and then (Is_Record_Type (Def_Id)\n+                       or else Ekind (Def_Id) = E_Incomplete_Type)\n          then\n+            if Ekind (Def_Id) = E_Incomplete_Type then\n+               if Present (Full_View (Def_Id)) then\n+                  Def_Id := Full_View (Def_Id);\n+               else\n+                  Error_Msg_N\n+                    (\"cannot import 'C'P'P type before full declaration seen\",\n+                     Get_Pragma_Arg (Arg2));\n+\n+                  --  Although we have reported the error we decorate it as\n+                  --  CPP_Class to avoid reporting spurious errors\n+\n+                  Set_Is_CPP_Class (Def_Id);\n+                  return;\n+               end if;\n+            end if;\n+\n             --  Types treated as CPP classes must be declared limited (note:\n             --  this used to be a warning but there is no real benefit to it\n             --  since we did effectively intend to treat the type as limited\n@@ -4628,38 +4645,13 @@ package body Sem_Prag is\n                           (Declaration_Node (Def_Id))));\n             end if;\n \n-            --  Components of imported CPP types must not have default\n-            --  expressions because the constructor (if any) is on the\n-            --  C++ side.\n-\n-            declare\n-               Tdef  : constant Node_Id :=\n-                         Type_Definition (Declaration_Node (Def_Id));\n-               Clist : Node_Id;\n-               Comp  : Node_Id;\n-\n-            begin\n-               if Nkind (Tdef) = N_Record_Definition then\n-                  Clist := Component_List (Tdef);\n-\n-               else\n-                  pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n-                  Clist := Component_List (Record_Extension_Part (Tdef));\n-               end if;\n-\n-               if Present (Clist) then\n-                  Comp := First (Component_Items (Clist));\n-                  while Present (Comp) loop\n-                     if Present (Expression (Comp)) then\n-                        Error_Msg_N\n-                          (\"component of imported 'C'P'P type cannot have\" &\n-                           \" default expression\", Expression (Comp));\n-                     end if;\n+            --  Check that components of imported CPP types do not have default\n+            --  expressions. For private types this check is performed when the\n+            --  full view is analyzed (see Process_Full_View).\n \n-                     Next (Comp);\n-                  end loop;\n-               end if;\n-            end;\n+            if not Is_Private_Type (Def_Id) then\n+               Check_CPP_Type (Def_Id);\n+            end if;\n \n          elsif Nkind (Parent (Def_Id)) = N_Incomplete_Type_Declaration then\n             Check_No_Link_Name;\n@@ -7629,8 +7621,8 @@ package body Sem_Prag is\n                   Get_Pragma_Arg (Arg1));\n             end if;\n \n-            Set_Is_CPP_Class      (Typ);\n-            Set_Convention        (Typ, Convention_CPP);\n+            Set_Is_CPP_Class (Typ);\n+            Set_Convention (Typ, Convention_CPP);\n \n             --  Imported CPP types must not have discriminants (because C++\n             --  classes do not have discriminants)."}]}