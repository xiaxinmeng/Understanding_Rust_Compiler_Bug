{"sha": "f118468ab665a749c16e65f53057ca1278b3ceec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExODQ2OGFiNjY1YTc0OWMxNmU2NWY1MzA1N2NhMTI3OGIzY2VlYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-04-12T07:41:50Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-04-12T07:41:50Z"}, "message": "re PR fortran/56845 ([OOP] _vptr not set to declared type for CLASS + SAVE)\n\n2013-04-12  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/56845\n        * trans-decl.c (gfc_trans_deferred_vars): Set _vptr for\n        allocatable static BT_CLASS.\n        * trans-expr.c (gfc_class_set_static_fields): New function.\n        * trans.h (gfc_class_set_static_fields): New prototype.\n\n2013-04-12  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/56845\n        * gfortran.dg/class_allocate_14.f90: New.\n        * gfortran.dg/coarray_lib_alloc_2.f90: Update\n        * scan-tree-dump-times.\n        * gfortran.dg/coarray_lib_alloc_3.f90: New.\n\nFrom-SVN: r197844", "tree": {"sha": "41fd411a215082874b62193b735de66401499a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41fd411a215082874b62193b735de66401499a64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f118468ab665a749c16e65f53057ca1278b3ceec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f118468ab665a749c16e65f53057ca1278b3ceec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f118468ab665a749c16e65f53057ca1278b3ceec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f118468ab665a749c16e65f53057ca1278b3ceec/comments", "author": null, "committer": null, "parents": [{"sha": "bb50698284eaaf849182f78779af4b3fde7503e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb50698284eaaf849182f78779af4b3fde7503e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb50698284eaaf849182f78779af4b3fde7503e1"}], "stats": {"total": 189, "additions": 154, "deletions": 35}, "files": [{"sha": "d3c8b58dd5ac379f67ef70171bdaf3e5732095d6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -1,37 +1,45 @@\n+2013-04-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56845\n+\t* trans-decl.c (gfc_trans_deferred_vars): Set _vptr for\n+\tallocatable static BT_CLASS.\n+\t* trans-expr.c (gfc_class_set_static_fields): New function.\n+\t* trans.h (gfc_class_set_static_fields): New prototype.\n+\n 2013-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        * gfortran.h: Remove enum gfc_try, replace gfc_try with bool type.\n-        * arith.c: Replace gfc_try with bool type.\n-        * array.c: Likewise.\n-        * check.c: Likewise.\n-        * class.c: Likewise.\n-        * cpp.c: Likewise.\n-        * cpp.h: Likewise.\n-        * data.c: Likewise.\n-        * data.h: Likewise.\n-        * decl.c: Likewise.\n-        * error.c: Likewise.\n-        * expr.c: Likewise.\n-        * f95-lang.c: Likewise.\n-        * interface.c: Likewise.\n-        * intrinsic.c: Likewise.\n-        * intrinsic.h: Likewise.\n-        * io.c: Likewise.\n-        * match.c: Likewise.\n-        * match.h: Likewise.\n-        * module.c: Likewise.\n-        * openmp.c: Likewise.\n-        * parse.c: Likewise.\n-        * parse.h: Likewise.\n-        * primary.c: Likewise.\n-        * resolve.c: Likewise.\n-        * scanner.c: Likewise.\n-        * simplify.c: Likewise.\n-        * symbol.c: Likewise.\n-        * trans-intrinsic.c: Likewise.\n-        * trans-openmp.c: Likewise.\n-        * trans-stmt.c: Likewise.\n-        * trans-types.c: Likewise.\n+\t* gfortran.h: Remove enum gfc_try, replace gfc_try with bool type.\n+\t* arith.c: Replace gfc_try with bool type.\n+\t* array.c: Likewise.\n+\t* check.c: Likewise.\n+\t* class.c: Likewise.\n+\t* cpp.c: Likewise.\n+\t* cpp.h: Likewise.\n+\t* data.c: Likewise.\n+\t* data.h: Likewise.\n+\t* decl.c: Likewise.\n+\t* error.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* f95-lang.c: Likewise.\n+\t* interface.c: Likewise.\n+\t* intrinsic.c: Likewise.\n+\t* intrinsic.h: Likewise.\n+\t* io.c: Likewise.\n+\t* match.c: Likewise.\n+\t* match.h: Likewise.\n+\t* module.c: Likewise.\n+\t* openmp.c: Likewise.\n+\t* parse.c: Likewise.\n+\t* parse.h: Likewise.\n+\t* primary.c: Likewise.\n+\t* resolve.c: Likewise.\n+\t* scanner.c: Likewise.\n+\t* simplify.c: Likewise.\n+\t* symbol.c: Likewise.\n+\t* trans-intrinsic.c: Likewise.\n+\t* trans-openmp.c: Likewise.\n+\t* trans-stmt.c: Likewise.\n+\t* trans-types.c: Likewise.\n \n 2013-04-09  Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "779df164731abc58b0b9e69dd4ccaa82ae7c3505", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -3649,7 +3649,36 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t\t\tNULL_TREE);\n \t}\n \n-      if (sym->attr.dimension || sym->attr.codimension)\n+      if (sym->ts.type == BT_CLASS && TREE_STATIC (sym->backend_decl)\n+\t  && CLASS_DATA (sym)->attr.allocatable)\n+\t{\n+\t  tree vptr;\n+\n+          if (UNLIMITED_POLY (sym))\n+\t    vptr = null_pointer_node;\n+\t  else\n+\t    {\n+\t      gfc_symbol *vsym;\n+\t      vsym = gfc_find_derived_vtab (sym->ts.u.derived);\n+\t      vptr = gfc_get_symbol_decl (vsym);\n+\t      vptr = gfc_build_addr_expr (NULL, vptr);\n+\t    }\n+\n+\t  if (CLASS_DATA (sym)->attr.dimension\n+\t      || (CLASS_DATA (sym)->attr.codimension\n+\t\t  && gfc_option.coarray != GFC_FCOARRAY_LIB))\n+\t    {\n+\t      tmp = gfc_class_data_get (sym->backend_decl);\n+\t      tmp = gfc_build_null_descriptor (TREE_TYPE (tmp));\n+\t    }\n+\t  else\n+\t    tmp = null_pointer_node;\n+\n+\t  DECL_INITIAL (sym->backend_decl)\n+\t\t= gfc_class_set_static_fields (sym->backend_decl, vptr, tmp);\n+\t  TREE_CONSTANT (DECL_INITIAL (sym->backend_decl)) = 1;\n+\t}\n+      else if (sym->attr.dimension || sym->attr.codimension)\n \t{\n           /* Assumed-size Cray pointees need to be treated as AS_EXPLICIT.  */\n           array_type tmp = sym->as->type;"}, {"sha": "de851a26c03ecce643f263e6574a843c1eb473d1", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -96,6 +96,24 @@ gfc_conv_scalar_to_descriptor (gfc_se *se, tree scalar, symbol_attribute attr)\n #define VTABLE_FINAL_FIELD 5\n \n \n+tree\n+gfc_class_set_static_fields (tree decl, tree vptr, tree data)\n+{\n+  tree tmp;\n+  tree field;\n+  vec<constructor_elt, va_gc> *init = NULL;\n+\n+  field = TYPE_FIELDS (TREE_TYPE (decl));\n+  tmp = gfc_advance_chain (field, CLASS_DATA_FIELD);\n+  CONSTRUCTOR_APPEND_ELT (init, tmp, data);\n+\n+  tmp = gfc_advance_chain (field, CLASS_VPTR_FIELD);\n+  CONSTRUCTOR_APPEND_ELT (init, tmp, vptr);\n+\n+  return build_constructor (TREE_TYPE (decl), init);\n+}\n+\n+\n tree\n gfc_class_data_get (tree decl)\n {"}, {"sha": "ad6a1053a423944c5a669128bab3787013421953", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -341,6 +341,7 @@ gfc_wrapped_block;\n /* Class API functions.  */\n tree gfc_class_data_get (tree);\n tree gfc_class_vptr_get (tree);\n+tree gfc_class_set_static_fields (tree, tree, tree);\n tree gfc_vtable_hash_get (tree);\n tree gfc_vtable_size_get (tree);\n tree gfc_vtable_extends_get (tree);"}, {"sha": "bbf27e6bb232cd9c82b42244b5a9d6a12a9c637f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -1,3 +1,10 @@\n+2013-04-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56845\n+\t* gfortran.dg/class_allocate_14.f90: New.\n+\t* gfortran.dg/coarray_lib_alloc_2.f90: Update scan-tree-dump-times.\n+\t* gfortran.dg/coarray_lib_alloc_3.f90: New.\n+\n 2013-04-12  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/fold-cstvecshift.c: New testcase."}, {"sha": "0c7aeb432d310bac631ec5150dc115972a782c24", "filename": "gcc/testsuite/gfortran.dg/class_allocate_14.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_14.f90?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/56845\n+!\n+module m\n+type t\n+integer ::a\n+end type t\n+contains\n+subroutine sub\n+  type(t), save, allocatable :: x\n+  class(t), save,allocatable :: y\n+  if (.not. same_type_as(x,y)) call abort()\n+end subroutine sub\n+subroutine sub2\n+  type(t), save, allocatable :: a(:)\n+  class(t), save,allocatable :: b(:)\n+  if (.not. same_type_as(a,b)) call abort()\n+end subroutine sub2\n+end module m\n+\n+use m\n+call sub()\n+call sub2()\n+end\n+\n+! { dg-final { scan-tree-dump-times \"static struct __class_m_T_1_0a b = {._data={.data=0B}, ._vptr=&__vtab_m_T};\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"static struct __class_m_T_a y = {._data=0B, ._vptr=&__vtab_m_T};\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+"}, {"sha": "a41be79d91a33ba3144664d54d4651f37624a05e", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_alloc_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_2.f90?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -18,6 +18,6 @@\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_register .1, 1, &yy._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&xx._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&yy._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&yy._data.token, 0B, 0B, 0.;\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&xx._data.token, 0B, 0B, 0.;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&yy._data.token, 0B, 0B, 0.;\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&xx._data.token, 0B, 0B, 0.;\" 0 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "bec7ee225fe72d9843a66416f041aea15960f3b4", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_alloc_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f118468ab665a749c16e65f53057ca1278b3ceec/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_3.f90?ref=f118468ab665a749c16e65f53057ca1278b3ceec", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+! Allocate/deallocate with libcaf.\n+!\n+! As coarray_lib_alloc_2.f90 but for a subroutine instead of the PROGRAM\n+!\n+subroutine test\n+ type t\n+ end type t\n+ class(t), allocatable :: xx[:], yy(:)[:]\n+ integer :: stat\n+ character(len=200) :: errmsg\n+ allocate(xx[*], stat=stat, errmsg=errmsg)\n+ allocate(yy(2)[*], stat=stat, errmsg=errmsg)\n+ deallocate(xx,yy,stat=stat, errmsg=errmsg)\n+ end\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_register .1, 1, &xx._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_register .1, 1, &yy._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&xx._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&yy._data.token, &stat.., &errmsg, 200.;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&yy._data.token, 0B, 0B, 0.;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister .&xx._data.token, 0B, 0B, 0.;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}