{"sha": "1c08a6770c2bcd42657f537594116797d0d2daa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwOGE2NzcwYzJiY2Q0MjY1N2Y1Mzc1OTQxMTY3OTdkMGQyZGFhNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-05-13T18:01:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-13T18:01:27Z"}, "message": "i386.md (*mul<mode>3_1): Merge with *mulhi3_1 using SWIM248 mode iterator.\n\n\t* config/i386/i386.md (*mul<mode>3_1): Merge with *mulhi3_1\n\tusing SWIM248 mode iterator.\n\t(*mulv<mode>4): Use x86_64_sext_operand for operand[2] constraint.\n\t(*mulvhi4): mark operand[1] as commutative.  Use nonimmediate_operand\n\tfor operand[2] constraint.\n\t(*mulv<mode>4_1): Merge with *mulvhi4_1 using SWI248 mode iterator.\n\nFrom-SVN: r223173", "tree": {"sha": "27a04e32a463dc42fee7287a14bcdc9f52039b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27a04e32a463dc42fee7287a14bcdc9f52039b89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c08a6770c2bcd42657f537594116797d0d2daa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c08a6770c2bcd42657f537594116797d0d2daa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c08a6770c2bcd42657f537594116797d0d2daa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c08a6770c2bcd42657f537594116797d0d2daa7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b37dddbc771d55d42c25edb0ef4dad663dff21e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37dddbc771d55d42c25edb0ef4dad663dff21e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37dddbc771d55d42c25edb0ef4dad663dff21e8"}], "stats": {"total": 168, "additions": 67, "deletions": 101}, "files": [{"sha": "d34287c77817f63da8ea72994e3a2ec77319877c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c08a6770c2bcd42657f537594116797d0d2daa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c08a6770c2bcd42657f537594116797d0d2daa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c08a6770c2bcd42657f537594116797d0d2daa7", "patch": "@@ -1,3 +1,12 @@\n+2015-05-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*mul<mode>3_1): Merge with *mulhi3_1\n+\tusing SWIM248 mode iterator.\n+\t(*mulv<mode>4): Use x86_64_sext_operand for operand[2] constraint.\n+\t(*mulvhi4): mark operand[1] as commutative.  Use nonimmediate_operand\n+\tfor operand[2] constraint.\n+\t(*mulv<mode>4_1): Merge with *mulvhi4_1 using SWI248 mode iterator.\n+\n 2015-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/66133"}, {"sha": "7bec509f48ca10518b2025bf4fba6724cf2b5616", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 58, "deletions": 101, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c08a6770c2bcd42657f537594116797d0d2daa7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c08a6770c2bcd42657f537594116797d0d2daa7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1c08a6770c2bcd42657f537594116797d0d2daa7", "patch": "@@ -6477,12 +6477,22 @@\n ;; IMUL reg32/64, mem32/64 \t\tDirect\n ;;\n ;; On BDVER1, all above IMULs use DirectPath\n+;;\n+;; On AMDFAM10\n+;; IMUL reg16, reg16, imm8 \tVectorPath\n+;; IMUL reg16, mem16, imm8 \tVectorPath\n+;; IMUL reg16, reg16, imm16 \tVectorPath\n+;; IMUL reg16, mem16, imm16 \tVectorPath\n+;; IMUL reg16, reg16 \t\tDirect\n+;; IMUL reg16, mem16 \t\tDirect\n+;;\n+;; On BDVER1, all HI MULs use DoublePath\n \n (define_insn \"*mul<mode>3_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r,r\")\n-\t(mult:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n-\t  (match_operand:SWI48 2 \"<general_operand>\" \"K,<i>,mr\")))\n+  [(set (match_operand:SWIM248 0 \"register_operand\" \"=r,r,r\")\n+\t(mult:SWIM248\n+\t  (match_operand:SWIM248 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n+\t  (match_operand:SWIM248 2 \"<general_operand>\" \"K,<i>,mr\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -6497,15 +6507,21 @@\n \t       (eq_attr \"alternative\" \"1\")\n \t\t  (const_string \"vector\")\n \t       (and (eq_attr \"alternative\" \"2\")\n-\t\t    (match_operand 1 \"memory_operand\"))\n+\t       \t    (ior (match_test \"<MODE>mode == HImode\")\n+\t\t         (match_operand 1 \"memory_operand\")))\n \t\t  (const_string \"vector\")]\n \t      (const_string \"direct\")))\n    (set (attr \"amdfam10_decode\")\n \t(cond [(and (eq_attr \"alternative\" \"0,1\")\n-\t\t    (match_operand 1 \"memory_operand\"))\n+\t      \t    (ior (match_test \"<MODE>mode == HImode\")\n+\t\t         (match_operand 1 \"memory_operand\")))\n \t\t  (const_string \"vector\")]\n \t      (const_string \"direct\")))\n-   (set_attr \"bdver1_decode\" \"direct\")\n+   (set (attr \"bdver1_decode\")\n+   \t(if_then_else\n+\t  (match_test \"<MODE>mode == HImode\")\n+\t    (const_string \"double\")\n+\t    (const_string \"direct\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*mulsi3_1_zext\"\n@@ -6539,42 +6555,6 @@\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"SI\")])\n \n-;; On AMDFAM10\n-;; IMUL reg16, reg16, imm8 \tVectorPath\n-;; IMUL reg16, mem16, imm8 \tVectorPath\n-;; IMUL reg16, reg16, imm16 \tVectorPath\n-;; IMUL reg16, mem16, imm16 \tVectorPath\n-;; IMUL reg16, reg16 \t\tDirect\n-;; IMUL reg16, mem16 \t\tDirect\n-;;\n-;; On BDVER1, all HI MULs use DoublePath\n-\n-(define_insn \"*mulhi3_1\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n-\t(mult:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"K,n,mr\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_HIMODE_MATH\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"@\n-   imul{w}\\t{%2, %1, %0|%0, %1, %2}\n-   imul{w}\\t{%2, %1, %0|%0, %1, %2}\n-   imul{w}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"prefix_0f\" \"0,0,1\")\n-   (set (attr \"athlon_decode\")\n-\t(cond [(eq_attr \"cpu\" \"athlon\")\n-\t\t  (const_string \"vector\")\n-\t       (eq_attr \"alternative\" \"1,2\")\n-\t\t  (const_string \"vector\")]\n-\t      (const_string \"direct\")))\n-   (set (attr \"amdfam10_decode\")\n-\t(cond [(eq_attr \"alternative\" \"0,1\")\n-\t\t  (const_string \"vector\")]\n-\t      (const_string \"direct\")))\n-   (set_attr \"bdver1_decode\" \"double\")\n-   (set_attr \"mode\" \"HI\")])\n-\n ;;On AMDFAM10 and BDVER1\n ;; MUL reg8 \tDirect\n ;; MUL mem8 \tDirect\n@@ -6628,8 +6608,7 @@\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"%rm,0\"))\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI48 2 \"<general_sext_operand>\"\n-\t\t\t\t\t     \"We,mr\")))\n+\t\t      (match_operand:SWI48 2 \"x86_64_sext_operand\" \"We,mr\")))\n \t\t(sign_extend:<DWI>\n \t\t   (mult:SWI48 (match_dup 1) (match_dup 2)))))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n@@ -6657,49 +6636,13 @@\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*mulv<mode>4_1\"\n-  [(set (reg:CCO FLAGS_REG)\n-\t(eq:CCO (mult:<DWI>\n-\t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm,rm\"))\n-\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"K,i\"))\n-\t\t(sign_extend:<DWI>\n-\t\t   (mult:SWI48 (match_dup 1)\n-\t\t\t       (match_operand:SWI48 2\n-\t\t\t\t  \"x86_64_immediate_operand\" \"K,<i>\")))))\n-   (set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n-\t(mult:SWI48 (match_dup 1) (match_dup 2)))]\n-  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\n-   && CONST_INT_P (operands[2])\n-   && INTVAL (operands[2]) == INTVAL (operands[3])\"\n-  \"imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"imul\")\n-   (set (attr \"athlon_decode\")\n-\t(cond [(eq_attr \"cpu\" \"athlon\")\n-\t\t  (const_string \"vector\")\n-\t       (eq_attr \"alternative\" \"1\")\n-\t\t  (const_string \"vector\")]\n-\t      (const_string \"direct\")))\n-   (set (attr \"amdfam10_decode\")\n-\t(cond [(match_operand 1 \"memory_operand\")\n-\t\t  (const_string \"vector\")]\n-\t      (const_string \"direct\")))\n-   (set_attr \"bdver1_decode\" \"direct\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set (attr \"length_immediate\")\n-\t(cond [(eq_attr \"alternative\" \"0\")\n-\t\t  (const_string \"1\")\n-\t       (match_test \"<MODE_SIZE> == 8\")\n-\t\t  (const_string \"4\")]\n-\t      (const_string \"<MODE_SIZE>\")))])\n-\n (define_insn \"*mulvhi4\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (mult:SI\n \t\t   (sign_extend:SI\n-\t\t      (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t      (match_operand:HI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t   (sign_extend:SI\n-\t\t      (match_operand:HI 2 \"general_operand\" \"mr\")))\n+\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"mr\")))\n \t\t(sign_extend:SI\n \t\t   (mult:HI (match_dup 1) (match_dup 2)))))\n    (set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -6713,37 +6656,51 @@\n    (set_attr \"bdver1_decode\" \"double\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"*mulvhi4_1\"\n+(define_insn \"*mulv<mode>4_1\"\n   [(set (reg:CCO FLAGS_REG)\n-\t(eq:CCO (mult:SI\n-\t\t   (sign_extend:SI\n-\t\t      (match_operand:HI 1 \"nonimmediate_operand\" \"rm,rm\"))\n-\t\t   (match_operand:SI 3 \"const_int_operand\" \"K,i\"))\n-\t\t(sign_extend:SI\n-\t\t   (mult:HI (match_dup 1)\n-\t\t\t       (match_operand:HI 2\n-\t\t\t\t  \"x86_64_immediate_operand\" \"K,n\")))))\n-   (set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(mult:HI (match_dup 1) (match_dup 2)))]\n+\t(eq:CCO (mult:<DWI>\n+\t\t   (sign_extend:<DWI>\n+\t\t      (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm,rm\"))\n+\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"K,i\"))\n+\t\t(sign_extend:<DWI>\n+\t\t   (mult:SWI248 (match_dup 1)\n+\t\t\t\t(match_operand:SWI248 2\n+\t\t\t\t   \"<immediate_operand>\" \"K,<i>\")))))\n+   (set (match_operand:SWI248 0 \"register_operand\" \"=r,r\")\n+\t(mult:SWI248 (match_dup 1) (match_dup 2)))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\n    && CONST_INT_P (operands[2])\n    && INTVAL (operands[2]) == INTVAL (operands[3])\"\n-  \"imul{w}\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"imul\")\n-   (set_attr \"prefix_0f\" \"0\")\n+   (set (attr \"prefix_0f\")\n+   \t(if_then_else\n+\t  (match_test \"<MODE>mode == HImode\")\n+\t    (const_string \"0\")\n+\t    (const_string \"*\")))\n    (set (attr \"athlon_decode\")\n \t(cond [(eq_attr \"cpu\" \"athlon\")\n \t\t  (const_string \"vector\")\n \t       (eq_attr \"alternative\" \"1\")\n \t\t  (const_string \"vector\")]\n \t      (const_string \"direct\")))\n-   (set_attr \"amdfam10_decode\" \"vector\")\n-   (set_attr \"bdver1_decode\" \"double\")\n-   (set_attr \"mode\" \"HI\")\n+   (set (attr \"amdfam10_decode\")\n+\t(cond [(ior (match_test \"<MODE>mode == HImode\")\n+\t\t    (match_operand 1 \"memory_operand\"))\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n+   (set (attr \"bdver1_decode\")\n+   \t(if_then_else\n+\t  (match_test \"<MODE>mode == HImode\")\n+\t    (const_string \"double\")\n+\t    (const_string \"direct\")))\n+   (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"length_immediate\")\n \t(cond [(eq_attr \"alternative\" \"0\")\n-\t\t  (const_string \"1\")]\n-\t      (const_string \"2\")))])\n+\t\t  (const_string \"1\")\n+\t       (match_test \"<MODE_SIZE> == 8\")\n+\t\t  (const_string \"4\")]\n+\t      (const_string \"<MODE_SIZE>\")))])\n \n (define_expand \"umulv<mode>4\"\n   [(parallel [(set (reg:CCO FLAGS_REG)"}]}