{"sha": "3e0cb4ff7cb5eaf12df6f3a54694743820603f14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwY2I0ZmY3Y2I1ZWFmMTJkZjZmM2E1NDY5NDc0MzgyMDYwM2YxNA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2003-01-03T00:49:31Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2003-01-03T00:49:31Z"}, "message": "HttpURLConnection.java (HTTP_NOT_IMPLEMENTED): Must be public.\n\n\t* java/net/HttpURLConnection.java (HTTP_NOT_IMPLEMENTED): Must be\n\tpublic.\n\t(HTTP_USE_PROXY): Add field.\n\t(getResponseVals): Only set responseCode when not yet explicitly\n\tset by subclass.\n\nFrom-SVN: r60809", "tree": {"sha": "abd4cbbbb64cffbf85eb0fa6f878b5d8e1184951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abd4cbbbb64cffbf85eb0fa6f878b5d8e1184951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0cb4ff7cb5eaf12df6f3a54694743820603f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0cb4ff7cb5eaf12df6f3a54694743820603f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0cb4ff7cb5eaf12df6f3a54694743820603f14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0cb4ff7cb5eaf12df6f3a54694743820603f14/comments", "author": null, "committer": null, "parents": [{"sha": "e55393db343affe9c0e0b46094bf21229c4bf9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55393db343affe9c0e0b46094bf21229c4bf9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55393db343affe9c0e0b46094bf21229c4bf9a3"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "b6e84ca2bb52b5d98cba4179160cdeeff4d964b1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0cb4ff7cb5eaf12df6f3a54694743820603f14/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0cb4ff7cb5eaf12df6f3a54694743820603f14/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3e0cb4ff7cb5eaf12df6f3a54694743820603f14", "patch": "@@ -1,3 +1,11 @@\n+2003-01-02  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/HttpURLConnection.java (HTTP_NOT_IMPLEMENTED): Must be\n+\tpublic.\n+\t(HTTP_USE_PROXY): Add field.\n+\t(getResponseVals): Only set responseCode when not yet explicitly\n+\tset by subclass.\n+\n 2003-01-02  Artur Biesiadowski  <abies@pg.gda.pl>\n \t    Mark Wielaard  <mark@klomp.org>\n "}, {"sha": "ebc0f8175f46325f703cd73fc5e185dbfb29dc6b", "filename": "libjava/java/net/HttpURLConnection.java", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0cb4ff7cb5eaf12df6f3a54694743820603f14/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0cb4ff7cb5eaf12df6f3a54694743820603f14/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FHttpURLConnection.java?ref=3e0cb4ff7cb5eaf12df6f3a54694743820603f14", "patch": "@@ -142,6 +142,11 @@ public abstract class HttpURLConnection extends URLConnection\n    * a conditional GET.\n    */\n   public static final int HTTP_NOT_MODIFIED = 304;\n+\n+  /**\n+   * The requested resource needs to be accessed through a proxy.\n+   */\n+  public static final int HTTP_USE_PROXY = 305;\n   \n   \n   /* HTTP Client Error Response Codes */\n@@ -250,7 +255,7 @@ public abstract class HttpURLConnection extends URLConnection\n    * The server does not support the requested functionality.  \n    * @since 1.3\n    */\n-  static final int HTTP_NOT_IMPLEMENTED = 501;\n+  public static final int HTTP_NOT_IMPLEMENTED = 501;\n \n   /**\n    * The proxy encountered a bad response from the server it was proxy-ing for\n@@ -459,31 +464,36 @@ private void getResponseVals() throws IOException\n       connect();\n       \n     gotResponseVals = true;\n-    // Response is the first header received from the connection.\n-    String respField = getHeaderField(0);\n-    \n-    if (respField == null || ! respField.startsWith(\"HTTP/\"))\n-      {\n-\t// Set to default values on failure.\n-        responseCode = -1;\n-\tresponseMessage = null;\n-\treturn;\n-      }\n \n-    int firstSpc, nextSpc;\n-    firstSpc = respField.indexOf(' ');\n-    nextSpc = respField.indexOf(' ', firstSpc + 1);\n-    responseMessage = respField.substring(nextSpc + 1);\n-    String codeStr = respField.substring(firstSpc + 1, nextSpc);\n-    try\n+    // If responseCode not yet explicitly set by subclass\n+    if (responseCode == -1)\n       {\n-\tresponseCode = Integer.parseInt(codeStr);\n-      }\n-    catch (NumberFormatException e)\n-      {\n-\t// Set to default values on failure.\n-        responseCode = -1;\n-\tresponseMessage = null;\n+\t// Response is the first header received from the connection.\n+\tString respField = getHeaderField(0);\n+\t\n+\tif (respField == null || ! respField.startsWith(\"HTTP/\"))\n+\t  {\n+\t    // Set to default values on failure.\n+\t    responseCode = -1;\n+\t    responseMessage = null;\n+\t    return;\n+\t  }\n+\n+\tint firstSpc, nextSpc;\n+\tfirstSpc = respField.indexOf(' ');\n+\tnextSpc = respField.indexOf(' ', firstSpc + 1);\n+\tresponseMessage = respField.substring(nextSpc + 1);\n+\tString codeStr = respField.substring(firstSpc + 1, nextSpc);\n+\ttry\n+\t  {\n+\t    responseCode = Integer.parseInt(codeStr);\n+\t  }\n+\tcatch (NumberFormatException e)\n+\t  {\n+\t    // Set to default values on failure.\n+\t    responseCode = -1;\n+\t    responseMessage = null;\n+\t  }\n       }\n   }\n "}]}