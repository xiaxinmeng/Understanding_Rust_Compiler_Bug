{"sha": "3511415dafa8e57895092748cdb9ce5b39aaf9f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxMTQxNWRhZmE4ZTU3ODk1MDkyNzQ4Y2RiOWNlNWIzOWFhZjlmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-19T21:06:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-19T21:06:44Z"}, "message": "(STATIC_CHAIN_REGNUM): Use r3.\n\n(REGISTER_NAMES): Print r7 as sp.\n(ADDITIONAL_REGISTER_NAMES): Recognize r7.\n(ASM_OUTPUT_ALIGN): Alignment is power of 2.\n\nFrom-SVN: r10248", "tree": {"sha": "37bfdae7685a47d81f115410d77c890ccad0c5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37bfdae7685a47d81f115410d77c890ccad0c5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3511415dafa8e57895092748cdb9ce5b39aaf9f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3511415dafa8e57895092748cdb9ce5b39aaf9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3511415dafa8e57895092748cdb9ce5b39aaf9f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3511415dafa8e57895092748cdb9ce5b39aaf9f0/comments", "author": null, "committer": null, "parents": [{"sha": "19ac27705c77dd5e2a02a7dd04abda133b0003fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ac27705c77dd5e2a02a7dd04abda133b0003fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ac27705c77dd5e2a02a7dd04abda133b0003fd"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "dfe04d1252ba800c4ab2d61b2a1c2327eb82373c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3511415dafa8e57895092748cdb9ce5b39aaf9f0/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3511415dafa8e57895092748cdb9ce5b39aaf9f0/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=3511415dafa8e57895092748cdb9ce5b39aaf9f0", "patch": "@@ -99,8 +99,15 @@ extern int target_flags;\n     {\"exp\",8192},\t\t\\\n     { \"\", TARGET_DEFAULT}}\n \n+/* Merge the meaning of -mdouble64 and -fshort-double.\n+   ??? Unfortunately, there's no way to detect -fno-short-double\n+   (our default is the opposite of theirs).\n+   Also do other things that must be done once at start up.  */\n+\n #define OVERRIDE_OPTIONS \\\n {\t\t\t\t\\\n+  /*extern int flag_short_double; \\\n+  flag_short_double = TARGET_DOUBLE32;*/ \\\n   h8300_init_once ();\t\t\\\n }\n \n@@ -246,7 +253,7 @@ extern int target_flags;\n    MODE.\n \n    H8/300: If an even reg, then anything goes. Otherwise the mode must be QI\n-   or HI.\n+           or HI.\n    H8/300H: Anything goes.  */\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n@@ -282,7 +289,7 @@ extern int target_flags;\n #define ARG_POINTER_REGNUM 8\n \n /* Register in which static-chain is passed to a function.  */\n-#define STATIC_CHAIN_REGNUM 4\n+#define STATIC_CHAIN_REGNUM 3\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -659,27 +666,27 @@ extern int current_function_anonymous_args;\n \n    H8/300\n \t      vvvv context\n-   1 0000 79001234 \t\tmov.w\t#0x1234,r4\n-   2 0004 5A000000 \t\tjmp\t@0x1234\n+   1 0000 7900xxxx \t\tmov.w\t#0x1234,r3\n+   2 0004 5A00xxxx \t\tjmp\t@0x1234\n \t      ^^^^ function\n \n    H8/300H\n \t      vvvvvvvv context\n-   2 0000 7A0012345678 \t\tmov.l\t#0x12345678,er4\n-   3 0006 5A000000 \t\tjmp\t@0x12345678\n+   2 0000 7A00xxxxxxxx \t\tmov.l\t#0x12345678,er3\n+   3 0006 5Axxxxxx \t\tjmp\t@0x123456\n \t    ^^^^^^ function\n */\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n     if (TARGET_H8300)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tmov.w\t#0x1234,r4\\n\");\t\t\\\n+\tfprintf (FILE, \"\\tmov.w\t#0x1234,r3\\n\");\t\t\\\n \tfprintf (FILE, \"\\tjmp\t@0x1234\\n\");\t\t\\\n       }\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tmov.l\t#0x12345678,er4\\n\");\t\\\n+\tfprintf (FILE, \"\\tmov.l\t#0x12345678,er3\\n\");\t\\\n \tfprintf (FILE, \"\\tjmp\t@0x123456\\n\");\t\\\n       }\t\t\t\t\t\t\t\\\n   } while (0)\n@@ -1062,17 +1069,15 @@ dtors_section() \t\t\t\t\t\t\\\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n #define REGISTER_NAMES \\\n-{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"ap\"}\n+{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"ap\"}\n+\n+#define ADDITIONAL_REGISTER_NAMES { { \"r7\", 7 } }\n \n /* How to renumber registers for dbx and gdb.\n    H8/300 needs no change in the numeration.  */\n \n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n-/* Vax specific: which type character is used for type double?  */\n-\n-#define ASM_DOUBLE_CHAR ('g')\n-\n #define SDB_DEBUGGING_INFO\n #define SDB_DELIM\t\"\\n\"\n \n@@ -1197,7 +1202,7 @@ do { char dstr[30];\t\t\t\t\t\\\n \n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG))\n+    fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n \n /* This is how to output an assembler line\n    that says to advance the location counter by SIZE bytes.  */"}]}