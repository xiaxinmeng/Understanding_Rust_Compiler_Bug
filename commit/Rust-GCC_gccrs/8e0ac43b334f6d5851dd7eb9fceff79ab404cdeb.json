{"sha": "8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUwYWM0M2IzMzRmNmQ1ODUxZGQ3ZWI5ZmNlZmY3OWFiNDA0Y2RlYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-02T23:06:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-02T23:06:41Z"}, "message": "(simplify_unary_operation): Clean up some mode and size checks with\nCONST_DOUBLEs; TRUNCATE should do nothing.\n\nFrom-SVN: r7853", "tree": {"sha": "783d850a683a6c66d4f1dd027b607ea9cf9f7a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783d850a683a6c66d4f1dd027b607ea9cf9f7a7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb/comments", "author": null, "committer": null, "parents": [{"sha": "3adde2a5c66dc7ff1509057a3dbddf112c56268f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adde2a5c66dc7ff1509057a3dbddf112c56268f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adde2a5c66dc7ff1509057a3dbddf112c56268f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "ae9ffdf8ac821678bcefe31a1497e5edb8655156", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=8e0ac43b334f6d5851dd7eb9fceff79ab404cdeb", "patch": "@@ -3086,7 +3086,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n \n   /* We can do some operations on integer CONST_DOUBLEs.  Also allow\n      for a DImode operation on a CONST_INT. */\n-  else if (GET_MODE (op) == VOIDmode && width == HOST_BITS_PER_INT * 2\n+  else if (GET_MODE (op) == VOIDmode && width <= HOST_BITS_PER_INT * 2\n \t   && (GET_CODE (op) == CONST_DOUBLE || GET_CODE (op) == CONST_INT))\n     {\n       HOST_WIDE_INT l1, h1, lv, hv;\n@@ -3123,10 +3123,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t  break;\n \n \tcase TRUNCATE:\n-\t  if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n-\t    return GEN_INT (l1 & GET_MODE_MASK (mode));\n-\t  else\n-\t    return 0;\n+\t  /* This is just a change-of-mode, so do nothing.  */\n \t  break;\n \n \tcase ZERO_EXTEND:\n@@ -3220,7 +3217,10 @@ simplify_unary_operation (code, mode, op, op_mode)\n       set_float_handler (NULL_PTR);\n       return x;\n     }\n-  else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE_CLASS (mode) == MODE_INT\n+\n+  else if (GET_CODE (op) == CONST_DOUBLE\n+\t   && GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n+\t   && GET_MODE_CLASS (mode) == MODE_INT\n \t   && width <= HOST_BITS_PER_WIDE_INT && width > 0)\n     {\n       REAL_VALUE_TYPE d;"}]}