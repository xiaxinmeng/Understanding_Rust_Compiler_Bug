{"sha": "be18831b8d07371579b37a8468f58a38e3dee25f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxODgzMWI4ZDA3MzcxNTc5YjM3YTg0NjhmNThhMzhlM2RlZTI1Zg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-12-04T00:56:33Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-12-04T00:56:33Z"}, "message": "New test for __builtin_prefetch.\n\nFrom-SVN: r47585", "tree": {"sha": "c64eff25fb72b7b40bc5d904a111ac84c91e2f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c64eff25fb72b7b40bc5d904a111ac84c91e2f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be18831b8d07371579b37a8468f58a38e3dee25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be18831b8d07371579b37a8468f58a38e3dee25f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be18831b8d07371579b37a8468f58a38e3dee25f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be18831b8d07371579b37a8468f58a38e3dee25f/comments", "author": null, "committer": null, "parents": [{"sha": "2511b9c42ea969e71b3496b27321788546c3fdc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2511b9c42ea969e71b3496b27321788546c3fdc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2511b9c42ea969e71b3496b27321788546c3fdc8"}], "stats": {"total": 685, "additions": 685, "deletions": 0}, "files": [{"sha": "530a1b0ef0d9909a8f0e1f71e02be2f17c5eecaf", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-prefetch-2.c", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-2.c?ref=be18831b8d07371579b37a8468f58a38e3dee25f", "patch": "@@ -0,0 +1,152 @@\n+/* Test that __builtin_prefetch does no harm.\n+\n+   Prefetch data using a variety of storage classes and address\n+   expressions.  */\n+\n+int glob_int_arr[100];\n+int *glob_ptr_int = glob_int_arr;\n+int glob_int = 4;\n+\n+static stat_int_arr[100];\n+static int *stat_ptr_int = stat_int_arr;\n+static int stat_int;\n+\n+struct S {\n+  int a;\n+  short b, c;\n+  char d[8];\n+  struct S *next;\n+};\n+\n+struct S str;\n+struct S *ptr_str = &str;\n+\n+/* Prefetch global variables using the address of the variable.  */\n+\n+void\n+simple_global ()\n+{\n+  __builtin_prefetch (glob_int_arr, 0, 0);\n+  __builtin_prefetch (glob_ptr_int, 0, 0);\n+  __builtin_prefetch (&glob_int, 0, 0);\n+}\n+\n+/* Prefetch file-level static variables using the address of the variable.  */\n+\n+void\n+simple_file ()\n+{\n+  __builtin_prefetch (stat_int_arr, 0, 0);\n+  __builtin_prefetch (stat_ptr_int, 0, 0);\n+  __builtin_prefetch (&stat_int, 0, 0);\n+}\n+\n+/* Prefetch local static variables using the address of the variable.  */\n+\n+void\n+simple_static_local ()\n+{\n+  static int gx[100];\n+  static int *hx = gx;\n+  static int ix;\n+  __builtin_prefetch (gx, 0, 0);\n+  __builtin_prefetch (hx, 0, 0);\n+  __builtin_prefetch (&ix, 0, 0);\n+}\n+\n+/* Prefetch local stack variables using the address of the variable.  */\n+\n+void\n+simple_local ()\n+{\n+  int gx[100];\n+  int *hx = gx;\n+  int ix;\n+  __builtin_prefetch (gx, 0, 0);\n+  __builtin_prefetch (hx, 0, 0);\n+  __builtin_prefetch (&ix, 0, 0);\n+}\n+\n+/* Prefetch arguments using the address of the variable.  */\n+\n+void\n+simple_arg (int g[100], int *h, int i)\n+{\n+  __builtin_prefetch (g, 0, 0);\n+  __builtin_prefetch (h, 0, 0);\n+  __builtin_prefetch (&i, 0, 0);\n+}\n+\n+/* Prefetch using address expressions involving global variables.  */\n+\n+void\n+expr_global (void)\n+{\n+  __builtin_prefetch (&str, 0, 0);\n+  __builtin_prefetch (ptr_str, 0, 0);\n+  __builtin_prefetch (&str.b, 0, 0);\n+  __builtin_prefetch (&ptr_str->b, 0, 0);\n+  __builtin_prefetch (&str.d, 0, 0);\n+  __builtin_prefetch (&ptr_str->d, 0, 0);\n+  __builtin_prefetch (str.next, 0, 0);\n+  __builtin_prefetch (ptr_str->next, 0, 0);\n+  __builtin_prefetch (str.next->d, 0, 0);\n+  __builtin_prefetch (ptr_str->next->d, 0, 0);\n+\n+  __builtin_prefetch (&glob_int_arr, 0, 0);\n+  __builtin_prefetch (glob_ptr_int, 0, 0);\n+  __builtin_prefetch (&glob_int_arr[2], 0, 0);\n+  __builtin_prefetch (&glob_ptr_int[3], 0, 0);\n+  __builtin_prefetch (glob_int_arr+3, 0, 0);\n+  __builtin_prefetch (glob_int_arr+glob_int, 0, 0);\n+  __builtin_prefetch (glob_ptr_int+5, 0, 0);\n+  __builtin_prefetch (glob_ptr_int+glob_int, 0, 0);\n+}\n+\n+/* Prefetch using address expressions involving local variables.  */\n+\n+void\n+expr_local (void)\n+{\n+  int b[10];\n+  int *pb = b;\n+  struct S t;\n+  struct S *pt = &t;\n+  int j = 4;\n+\n+  __builtin_prefetch (&t, 0, 0);\n+  __builtin_prefetch (pt, 0, 0);\n+  __builtin_prefetch (&t.b, 0, 0);\n+  __builtin_prefetch (&pt->b, 0, 0);\n+  __builtin_prefetch (&t.d, 0, 0);\n+  __builtin_prefetch (&pt->d, 0, 0);\n+  __builtin_prefetch (t.next, 0, 0);\n+  __builtin_prefetch (pt->next, 0, 0);\n+  __builtin_prefetch (t.next->d, 0, 0);\n+  __builtin_prefetch (pt->next->d, 0, 0);\n+\n+  __builtin_prefetch (&b, 0, 0);\n+  __builtin_prefetch (pb, 0, 0);\n+  __builtin_prefetch (&b[2], 0, 0);\n+  __builtin_prefetch (&pb[3], 0, 0);\n+  __builtin_prefetch (b+3, 0, 0);\n+  __builtin_prefetch (b+j, 0, 0);\n+  __builtin_prefetch (pb+5, 0, 0);\n+  __builtin_prefetch (pb+j, 0, 0);\n+}\n+\n+int\n+main ()\n+{\n+  simple_global ();\n+  simple_file ();\n+  simple_static_local ();\n+  simple_local ();\n+  simple_arg (glob_int_arr, glob_ptr_int, glob_int);\n+\n+  str.next = &str;\n+  expr_global ();\n+  expr_local ();\n+\n+  exit (0);\n+}"}, {"sha": "2e2e808c17206cacdc6fd969ab96370465395ac1", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-prefetch-3.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-3.c?ref=be18831b8d07371579b37a8468f58a38e3dee25f", "patch": "@@ -0,0 +1,113 @@\n+/* Test that __builtin_prefetch does no harm.\n+\n+   Prefetch data using a variety of storage classes and address\n+   expressions with volatile variables and pointers.  */\n+\n+int glob_int_arr[100];\n+int glob_int = 4;\n+volatile int glob_vol_int_arr[100];\n+int * volatile glob_vol_ptr_int = glob_int_arr;\n+volatile int *glob_ptr_vol_int = glob_vol_int_arr;\n+volatile int * volatile glob_vol_ptr_vol_int = glob_vol_int_arr;\n+volatile int glob_vol_int;\n+\n+static stat_int_arr[100];\n+static volatile int stat_vol_int_arr[100];\n+static int * volatile stat_vol_ptr_int = stat_int_arr;\n+static volatile int *stat_ptr_vol_int = stat_vol_int_arr;\n+static volatile int * volatile stat_vol_ptr_vol_int = stat_vol_int_arr;\n+static volatile int stat_vol_int;\n+\n+struct S {\n+  int a;\n+  short b, c;\n+  char d[8];\n+  struct S *next;\n+};\n+\n+struct S str;\n+volatile struct S vol_str;\n+struct S * volatile vol_ptr_str = &str;\n+volatile struct S *ptr_vol_str = &vol_str;\n+volatile struct S * volatile vol_ptr_vol_str = &vol_str;\n+\n+/* Prefetch volatile global variables using the address of the variable.  */\n+\n+void\n+simple_vol_global ()\n+{\n+  __builtin_prefetch (glob_vol_int_arr, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_int, 0, 0);\n+  __builtin_prefetch (glob_ptr_vol_int, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_vol_int, 0, 0);\n+  __builtin_prefetch (&glob_vol_int, 0, 0);\n+}\n+\n+/* Prefetch volatile static variables using the address of the variable.  */\n+\n+void\n+simple_vol_file ()\n+{\n+  __builtin_prefetch (stat_vol_int_arr, 0, 0);\n+  __builtin_prefetch (stat_vol_ptr_int, 0, 0);\n+  __builtin_prefetch (stat_ptr_vol_int, 0, 0);\n+  __builtin_prefetch (stat_vol_ptr_vol_int, 0, 0);\n+  __builtin_prefetch (&stat_vol_int, 0, 0);\n+}\n+\n+/* Prefetch using address expressions involving volatile global variables.  */\n+\n+void\n+expr_vol_global (void)\n+{\n+  __builtin_prefetch (&vol_str, 0, 0);\n+  __builtin_prefetch (ptr_vol_str, 0, 0);\n+  __builtin_prefetch (vol_ptr_str, 0, 0);\n+  __builtin_prefetch (vol_ptr_vol_str, 0, 0);\n+  __builtin_prefetch (&vol_str.b, 0, 0);\n+  __builtin_prefetch (&ptr_vol_str->b, 0, 0);\n+  __builtin_prefetch (&vol_ptr_str->b, 0, 0);\n+  __builtin_prefetch (&vol_ptr_vol_str->b, 0, 0);\n+  __builtin_prefetch (&vol_str.d, 0, 0);\n+  __builtin_prefetch (&vol_ptr_str->d, 0, 0);\n+  __builtin_prefetch (&ptr_vol_str->d, 0, 0);\n+  __builtin_prefetch (&vol_ptr_vol_str->d, 0, 0);\n+  __builtin_prefetch (vol_str.next, 0, 0);\n+  __builtin_prefetch (vol_ptr_str->next, 0, 0);\n+  __builtin_prefetch (ptr_vol_str->next, 0, 0);\n+  __builtin_prefetch (vol_ptr_vol_str->next, 0, 0);\n+  __builtin_prefetch (vol_str.next->d, 0, 0);\n+  __builtin_prefetch (vol_ptr_str->next->d, 0, 0);\n+  __builtin_prefetch (ptr_vol_str->next->d, 0, 0);\n+  __builtin_prefetch (vol_ptr_vol_str->next->d, 0, 0);\n+\n+  __builtin_prefetch (&glob_vol_int_arr, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_int, 0, 0);\n+  __builtin_prefetch (glob_ptr_vol_int, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_vol_int, 0, 0);\n+  __builtin_prefetch (&glob_vol_int_arr[2], 0, 0);\n+  __builtin_prefetch (&glob_vol_ptr_int[3], 0, 0);\n+  __builtin_prefetch (&glob_ptr_vol_int[3], 0, 0);\n+  __builtin_prefetch (&glob_vol_ptr_vol_int[3], 0, 0);\n+  __builtin_prefetch (glob_vol_int_arr+3, 0, 0);\n+  __builtin_prefetch (glob_vol_int_arr+glob_vol_int, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_int+5, 0, 0);\n+  __builtin_prefetch (glob_ptr_vol_int+5, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_vol_int+5, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_int+glob_vol_int, 0, 0);\n+  __builtin_prefetch (glob_ptr_vol_int+glob_vol_int, 0, 0);\n+  __builtin_prefetch (glob_vol_ptr_vol_int+glob_vol_int, 0, 0);\n+}\n+\n+int\n+main ()\n+{\n+  simple_vol_global ();\n+  simple_vol_file ();\n+\n+  str.next = &str;\n+  vol_str.next = &str;\n+  expr_vol_global ();\n+\n+  exit (0);\n+}"}, {"sha": "ade892b21a79b24432222a90810ab713063c0219", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-prefetch-4.c", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-4.c?ref=be18831b8d07371579b37a8468f58a38e3dee25f", "patch": "@@ -0,0 +1,271 @@\n+/* Test that __builtin_prefetch does no harm.\n+\n+   Check that the expression containing the address to prefetch is\n+   evaluated if it has side effects, even if the target does not support\n+   data prefetch.  Check changes to pointers and to array indices that are\n+   either global variables or arguments.  */\n+\n+#define ARRSIZE 100\n+\n+int arr[ARRSIZE];\n+int *ptr = &arr[20]; \n+int arrindex = 4;\n+\n+/* Check that assignment within a prefetch argument is evaluated.  */\n+\n+int\n+assign_arg_ptr (int *p)\n+{\n+  int *q;\n+  __builtin_prefetch ((q = p), 0, 0);\n+  return q == p;\n+}\n+\n+int\n+assign_glob_ptr (void)\n+{\n+  int *q;\n+  __builtin_prefetch ((q = ptr), 0, 0);\n+  return q == ptr;\n+}\n+\n+int\n+assign_arg_idx (int *p, int i)\n+{\n+  int j;\n+  __builtin_prefetch (&p[j = i], 0, 0);\n+  return j == i;\n+}\n+\n+int\n+assign_glob_idx (void)\n+{\n+  int j;\n+  __builtin_prefetch (&ptr[j = arrindex], 0, 0);\n+  return j == arrindex;\n+}\n+\n+/* Check that pre/post increment/decrement within a prefetch argument are\n+   evaluated.  */\n+\n+int\n+preinc_arg_ptr (int *p)\n+{\n+  int *q;\n+  q = p + 1;\n+  __builtin_prefetch (++p, 0, 0);\n+  return p == q;\n+}\n+\n+int\n+preinc_glob_ptr (void)\n+{\n+  int *q;\n+  q = ptr + 1;\n+  __builtin_prefetch (++ptr, 0, 0);\n+  return ptr == q;\n+}\n+\n+int\n+postinc_arg_ptr (int *p)\n+{\n+  int *q;\n+  q = p + 1;\n+  __builtin_prefetch (p++, 0, 0);\n+  return p == q;\n+}\n+\n+int\n+postinc_glob_ptr (void)\n+{\n+  int *q;\n+  q = ptr + 1;\n+  __builtin_prefetch (ptr++, 0, 0);\n+  return ptr == q;\n+}\n+\n+int\n+predec_arg_ptr (int *p)\n+{\n+  int *q;\n+  q = p - 1;\n+  __builtin_prefetch (--p, 0, 0);\n+  return p == q;\n+}\n+\n+int\n+predec_glob_ptr (void)\n+{\n+  int *q;\n+  q = ptr - 1;\n+  __builtin_prefetch (--ptr, 0, 0);\n+  return ptr == q;\n+}\n+\n+int\n+postdec_arg_ptr (int *p)\n+{\n+  int *q;\n+  q = p - 1;\n+  __builtin_prefetch (p--, 0, 0);\n+  return p == q;\n+}\n+\n+int\n+postdec_glob_ptr (void)\n+{\n+  int *q;\n+  q = ptr - 1;\n+  __builtin_prefetch (ptr--, 0, 0);\n+  return ptr == q;\n+}\n+\n+int\n+preinc_arg_idx (int *p, int i)\n+{\n+  int j = i + 1;\n+  __builtin_prefetch (&p[++i], 0, 0);\n+  return i == j;\n+}\n+\n+\n+int\n+preinc_glob_idx (void)\n+{\n+  int j = arrindex + 1;\n+  __builtin_prefetch (&ptr[++arrindex], 0, 0);\n+  return arrindex == j;\n+}\n+\n+int\n+postinc_arg_idx (int *p, int i)\n+{\n+  int j = i + 1;\n+  __builtin_prefetch (&p[i++], 0, 0);\n+  return i == j;\n+}\n+\n+int\n+postinc_glob_idx (void)\n+{\n+  int j = arrindex + 1;\n+  __builtin_prefetch (&ptr[arrindex++], 0, 0);\n+  return arrindex == j;\n+}\n+\n+int\n+predec_arg_idx (int *p, int i)\n+{\n+  int j = i - 1;\n+  __builtin_prefetch (&p[--i], 0, 0);\n+  return i == j;\n+}\n+\n+int\n+predec_glob_idx (void)\n+{\n+  int j = arrindex - 1;\n+  __builtin_prefetch (&ptr[--arrindex], 0, 0);\n+  return arrindex == j;\n+}\n+\n+int\n+postdec_arg_idx (int *p, int i)\n+{\n+  int j = i - 1;\n+  __builtin_prefetch (&p[i--], 0, 0);\n+  return i == j;\n+}\n+\n+int\n+postdec_glob_idx (void)\n+{\n+  int j = arrindex - 1;\n+  __builtin_prefetch (&ptr[arrindex--], 0, 0);\n+  return arrindex == j;\n+}\n+\n+/* Check that function calls within the first prefetch argument are\n+   evaluated.  */\n+\n+int getptrcnt = 0;\n+\n+int *\n+getptr (int *p)\n+{\n+  getptrcnt++;\n+  return p + 1;\n+}\n+\n+int\n+funccall_arg_ptr (int *p)\n+{\n+  __builtin_prefetch (getptr (p), 0, 0);\n+  return getptrcnt == 1;\n+}\n+\n+int getintcnt = 0;\n+\n+int\n+getint (int i)\n+{\n+  getintcnt++;\n+  return i + 1;\n+}\n+\n+int\n+funccall_arg_idx (int *p, int i)\n+{\n+  __builtin_prefetch (&p[getint (i)], 0, 0);\n+  return getintcnt == 1;\n+}\n+\n+int\n+main ()\n+{\n+  if (!assign_arg_ptr (ptr))\n+    abort ();\n+  if (!assign_glob_ptr ())\n+    abort ();\n+  if (!assign_arg_idx (ptr, 4))\n+    abort ();\n+  if (!assign_glob_idx ())\n+    abort ();\n+  if (!preinc_arg_ptr (ptr))\n+    abort ();\n+  if (!preinc_glob_ptr ())\n+    abort ();\n+  if (!postinc_arg_ptr (ptr))\n+    abort ();\n+  if (!postinc_glob_ptr ())\n+    abort ();\n+  if (!predec_arg_ptr (ptr))\n+    abort ();\n+  if (!predec_glob_ptr ())\n+    abort ();\n+  if (!postdec_arg_ptr (ptr))\n+    abort ();\n+  if (!postdec_glob_ptr ())\n+    abort ();\n+  if (!preinc_arg_idx (ptr, 3))\n+    abort ();\n+  if (!preinc_glob_idx ())\n+    abort ();\n+  if (!postinc_arg_idx (ptr, 3))\n+    abort ();\n+  if (!postinc_glob_idx ())\n+    abort ();\n+  if (!predec_arg_idx (ptr, 3))\n+    abort ();\n+  if (!predec_glob_idx ())\n+    abort ();\n+  if (!postdec_arg_idx (ptr, 3))\n+    abort ();\n+  if (!postdec_glob_idx ())\n+    abort ();\n+  if (!funccall_arg_ptr (ptr))\n+    abort ();\n+  if (!funccall_arg_idx (ptr, 3))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "f42a2c0ca87e3f54770d8dcb04b2f041c605753c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-prefetch-5.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-5.c?ref=be18831b8d07371579b37a8468f58a38e3dee25f", "patch": "@@ -0,0 +1,60 @@\n+/* Test that __builtin_prefetch does no harm.\n+\n+   Use addresses that are unlikely to be word-aligned.  Some targets\n+   have alignment requirements for prefetch addresses, so make sure the\n+   compiler takes care of that.  This fails if it aborts, anything else\n+   is OK.  */\n+\n+struct S {\n+  short a;\n+  short b;\n+  char c[8];\n+} s;\n+\n+char arr[100];\n+char *ptr = arr;\n+int idx = 3;\n+\n+void\n+arg_ptr (char *p)\n+{\n+  __builtin_prefetch (p, 0, 0);\n+}\n+\n+void\n+arg_idx (char *p, int i)\n+{\n+  __builtin_prefetch (&p[i], 0, 0);\n+}\n+\n+void\n+glob_ptr (void)\n+{\n+  __builtin_prefetch (ptr, 0, 0);\n+}\n+\n+void\n+glob_idx (void)\n+{\n+  __builtin_prefetch (&ptr[idx], 0, 0);\n+}\n+\n+int\n+main ()\n+{\n+  __builtin_prefetch (&s.b, 0, 0);\n+  __builtin_prefetch (&s.c[1], 0, 0);\n+\n+  arg_ptr (&s.c[1]);\n+  arg_ptr (ptr+3);\n+  arg_idx (ptr, 3);\n+  arg_idx (ptr+1, 2);\n+  idx = 3;\n+  glob_ptr ();\n+  glob_idx ();\n+  ptr++;\n+  idx = 2;\n+  glob_ptr ();\n+  glob_idx ();\n+  exit (0);\n+}"}, {"sha": "f643c5c7286349b6a394da6a76612c2908cc04e1", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-prefetch-6.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-prefetch-6.c?ref=be18831b8d07371579b37a8468f58a38e3dee25f", "patch": "@@ -0,0 +1,46 @@\n+/* Test that __builtin_prefetch does no harm.\n+\n+   Data prefetch should not fault if used with an invalid address.  */\n+\n+#include <limits.h>\n+\n+#define ARRSIZE 65\n+int *bad_addr[ARRSIZE];\n+int arr_used;\n+\n+/* Fill bad_addr with a range of values in the hopes that on any target\n+   some will be invalid addresses.  */\n+void\n+init_addrs (void)\n+{\n+  int i;\n+  int bits_per_ptr = sizeof (void *) * 8;\n+  for (i = 0; i < bits_per_ptr; i++)\n+    bad_addr[i] = (void *)(1UL << i);\n+  arr_used = bits_per_ptr + 1;  /* The last element used is zero.  */\n+}\n+\n+void\n+prefetch_for_read (void)\n+{\n+  int i;\n+  for (i = 0; i < ARRSIZE; i++)\n+    __builtin_prefetch (bad_addr[i], 0, 0);\n+}\n+\n+void\n+prefetch_for_write (void)\n+{\n+  int i;\n+  for (i = 0; i < ARRSIZE; i++)\n+    __builtin_prefetch (bad_addr[i], 1, 0);\n+}\n+\n+int\n+main ()\n+{\n+  init_addrs ();\n+  prefetch_for_read ();\n+  prefetch_for_write ();\n+  exit (0);\n+}"}, {"sha": "d547cfcd9e2b82044dbc0c82608ef08d12308b10", "filename": "gcc/testsuite/gcc.dg/builtin-prefetch-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be18831b8d07371579b37a8468f58a38e3dee25f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c?ref=be18831b8d07371579b37a8468f58a38e3dee25f", "patch": "@@ -0,0 +1,43 @@\n+/* Test that __builtin_prefetch does no harm.\n+\n+   Prefetch using some invalid rw and locality values.  These must be\n+   compile-time constants.  */\n+\n+/* { dg-do run } */\n+\n+enum locality { none, low, moderate, high, bogus };\n+enum rw { read, write };\n+\n+int arr[10];\n+\n+void\n+good (int *p)\n+{\n+  __builtin_prefetch (p, 0, 0);\n+  __builtin_prefetch (p, 0, 1);\n+  __builtin_prefetch (p, 0, 2);\n+  __builtin_prefetch (p, 0, 3);\n+  __builtin_prefetch (p, 1, 0);\n+  __builtin_prefetch (p, 1, 1);\n+  __builtin_prefetch (p, 1, 2);\n+  __builtin_prefetch (p, 1, 3);\n+}\n+\n+void\n+bad (int *p)\n+{\n+  __builtin_prefetch (p, -1, 0);  /* { dg-warning \"invalid second arg to __builtin_prefetch; using zero\" } */\n+  __builtin_prefetch (p, 2, 0);   /* { dg-warning \"invalid second arg to __builtin_prefetch; using zero\" } */\n+  __builtin_prefetch (p, bogus, 0);   /* { dg-warning \"invalid second arg to __builtin_prefetch; using zero\" } */\n+  __builtin_prefetch (p, 0, -1);  /* { dg-warning \"invalid third arg to __builtin_prefetch; using zero\" } */\n+  __builtin_prefetch (p, 0, 4);   /* { dg-warning \"invalid third arg to __builtin_prefetch; using zero\" } */\n+  __builtin_prefetch (p, 0, bogus);   /* { dg-warning \"invalid third arg to __builtin_prefetch; using zero\" } */\n+}\n+\n+int\n+main ()\n+{\n+  good (arr);\n+  bad (arr);\n+  exit (0);\n+}"}]}