{"sha": "d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhNjZmOThjMWNkOTRjOWNiYTRiYTU0YmYwN2UzOWRmOTI2MTRmYg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-01-29T23:01:35Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-01-29T23:01:35Z"}, "message": "decExcept.c: New.\n\nlibdecnumber/\n\t* decExcept.c: New.\n\t* decExcept.h: New.\nlibgcc/\n\t* Makefile.in (dec-filenames): Add decExcept.\ngcc/\n\t* config/dfp-bit.c: Add parameterized support for fp exceptions.\n\t* config/dfp-bit.h: Ditto.\ngcc/testsuite/\n\t* gcc.dg/dfp/dfp-except.h: New file.\n\t* gcc.dg/dfp/fe-check.h: New file.\n\t* gcc.dg/dfp/fe-binop.c: New test.\n\t* gcc.dg/dfp/fe-convert-1.c: New test.\n\t* gcc.dg/dfp/fe-convert-2.c: New test.\n\t* gcc.dg/dfp/fe-convert-3.c: New test.\n\nFrom-SVN: r121317", "tree": {"sha": "674d66090dc46dc021568756756f9d8190db5663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/674d66090dc46dc021568756756f9d8190db5663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/comments", "author": null, "committer": null, "parents": [{"sha": "5b18f33782b9b7989dd35f793d68d660575e17e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b18f33782b9b7989dd35f793d68d660575e17e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b18f33782b9b7989dd35f793d68d660575e17e0"}], "stats": {"total": 524, "additions": 523, "deletions": 1}, "files": [{"sha": "de00ed61d740eb06d0e32c0f52e0a0b5d3d89c8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -1,3 +1,8 @@\n+2007-01-29  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* config/dfp-bit.c: Add parameterized support for fp exceptions.\n+\t* config/dfp-bit.h: Ditto.\n+\n 007-01-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* c-decl.c (pop_scope): Replace warnings with call to"}, {"sha": "927804c1def803ddbf52124b70d7338250bce394", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -88,6 +88,19 @@ dfp_unary_op (dfp_unary_func op, DFP_C_TYPE arg)\n   /* Perform the operation.  */\n   op (&res, &arg1, &context);\n \n+  if (DFP_EXCEPTIONS_ENABLED && context.status != 0)\n+    {\n+      /* decNumber exception flags we care about here.  */\n+      int ieee_flags;\n+      int dec_flags = DEC_IEEE_854_Division_by_zero | DEC_IEEE_854_Inexact\n+\t\t      | DEC_IEEE_854_Invalid_operation | DEC_IEEE_854_Overflow\n+\t\t      | DEC_IEEE_854_Underflow;\n+      dec_flags &= context.status;\n+      ieee_flags = DFP_IEEE_FLAGS (dec_flags);\n+      if (ieee_flags != 0)\n+        DFP_HANDLE_EXCEPTIONS (ieee_flags);\n+    }\n+\n   TO_ENCODED (&encoded_result, &res, &context);\n   IEEE_TO_HOST (encoded_result, &result);\n   return result;\n@@ -115,6 +128,19 @@ dfp_binary_op (dfp_binary_func op, DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n   /* Perform the operation.  */\n   op (&res, &arg1, &arg2, &context);\n \n+  if (DFP_EXCEPTIONS_ENABLED && context.status != 0)\n+    {\n+      /* decNumber exception flags we care about here.  */\n+      int ieee_flags;\n+      int dec_flags = DEC_IEEE_854_Division_by_zero | DEC_IEEE_854_Inexact\n+\t\t      | DEC_IEEE_854_Invalid_operation | DEC_IEEE_854_Overflow\n+\t\t      | DEC_IEEE_854_Underflow;\n+      dec_flags &= context.status;\n+      ieee_flags = DFP_IEEE_FLAGS (dec_flags);\n+      if (ieee_flags != 0)\n+        DFP_HANDLE_EXCEPTIONS (ieee_flags);\n+    }\n+\n   TO_ENCODED (&encoded_result, &res, &context);\n   IEEE_TO_HOST (encoded_result, &result);\n   return result;\n@@ -379,6 +405,17 @@ DFP_TO_DFP (DFP_C_TYPE f_from)\n   TO_INTERNAL (&s_from, &d);\n   TO_ENCODED_TO (&s_to, &d, &context);\n \n+  if (DFP_EXCEPTIONS_ENABLED && context.status != 0)\n+    {\n+      /* decNumber exception flags we care about here.  */\n+      int ieee_flags;\n+      int dec_flags = DEC_IEEE_854_Inexact | DEC_IEEE_854_Invalid_operation;\n+      dec_flags &= context.status;\n+      ieee_flags = DFP_IEEE_FLAGS (dec_flags);\n+      if (ieee_flags != 0)\n+        DFP_HANDLE_EXCEPTIONS (ieee_flags);\n+    }\n+\n   IEEE_TO_HOST_TO (s_to, &f_to);\n   return f_to;\n }\n@@ -394,6 +431,9 @@ DFP_TO_INT (DFP_C_TYPE x)\n   /* decNumber's decimal* types have the same format as C's _Decimal*\n      types, but they have different calling conventions.  */\n \n+  /* TODO: Decimal float to integer conversions should raise FE_INVALID\n+     if the result value does not fit into the result type.  */\n+\n   IEEE_TYPE s;\n   char buf[BUFMAX];\n   char *pos;\n@@ -444,6 +484,19 @@ INT_TO_DFP (INT_TYPE i)\n   /* Convert from the floating point string to a decimal* type.  */\n   FROM_STRING (&s, buf, &context);\n   IEEE_TO_HOST (s, &f);\n+\n+  if (DFP_EXCEPTIONS_ENABLED && context.status != 0)\n+    {\n+      /* decNumber exception flags we care about here.  */\n+      int ieee_flags;\n+      int dec_flags = DEC_IEEE_854_Inexact | DEC_IEEE_854_Invalid_operation\n+\t\t      | DEC_IEEE_854_Overflow;\n+      dec_flags &= context.status;\n+      ieee_flags = DFP_IEEE_FLAGS (dec_flags);\n+      if (ieee_flags != 0)\n+        DFP_HANDLE_EXCEPTIONS (ieee_flags);\n+    }\n+\n   return f;\n }\n #endif\n@@ -492,6 +545,19 @@ BFP_TO_DFP (BFP_TYPE x)\n   /* Convert from the floating point string to a decimal* type.  */\n   FROM_STRING (&s, buf, &context);\n   IEEE_TO_HOST (s, &f);\n+\n+  if (DFP_EXCEPTIONS_ENABLED && context.status != 0)\n+    {\n+      /* decNumber exception flags we care about here.  */\n+      int ieee_flags;\n+      int dec_flags = DEC_IEEE_854_Inexact | DEC_IEEE_854_Invalid_operation\n+\t\t      | DEC_IEEE_854_Overflow | DEC_IEEE_854_Underflow;\n+      dec_flags &= context.status;\n+      ieee_flags = DFP_IEEE_FLAGS (dec_flags);\n+      if (ieee_flags != 0)\n+        DFP_HANDLE_EXCEPTIONS (ieee_flags);\n+    }\n+\n   return f;\n }\n #endif"}, {"sha": "1bbe1563a425a35ca0a1ca045380ed50690c8023", "filename": "gcc/config/dfp-bit.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Fconfig%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Fconfig%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.h?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -32,6 +32,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n #include <fenv.h>\n #include <decRound.h>\n+#include <decExcept.h>\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n@@ -120,6 +121,27 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define DFP_INIT_ROUNDMODE(A) A = DEC_ROUND_HALF_EVEN\n #endif\n \n+#ifdef DFP_EXCEPTIONS_ENABLED\n+/* Return IEEE exception flags based on decNumber status flags.  */\n+#define DFP_IEEE_FLAGS(DEC_FLAGS) __extension__\t\t\t\\\n+({int _fe_flags = 0;\t\t\t\t\t\t\\\n+  if ((dec_flags & DEC_IEEE_854_Division_by_zero) != 0)\t\t\\\n+    _fe_flags |= FE_DIVBYZERO;\t\t\t\t\t\\\n+  if ((dec_flags & DEC_IEEE_854_Inexact) != 0)\t\t\t\\\n+    _fe_flags |= FE_INEXACT;\t\t\t\t\t\\\n+  if ((dec_flags & DEC_IEEE_854_Invalid_operation) != 0)\t\\\n+    _fe_flags |= FE_INVALID;\t\t\t\t\t\\\n+  if ((dec_flags & DEC_IEEE_854_Overflow) != 0)\t\t\t\\\n+    _fe_flags |= FE_OVERFLOW;\t\t\t\t\t\\\n+  if ((dec_flags & DEC_IEEE_854_Underflow) != 0)\t\t\\\n+    _fe_flags |= FE_UNDERFLOW;\t\t\t\t\t\\\n+  _fe_flags; })\n+#else\n+#define DFP_EXCEPTIONS_ENABLED 0\n+#define DFP_IEEE_FLAGS(A) 0\n+#define DFP_HANDLE_EXCEPTIONS(A) do {} while (0)\n+#endif\n+\n /* Conversions between different decimal float types use WIDTH_TO to\n    determine additional macros to define.  */\n "}, {"sha": "205b74dc1428dbdb6ae7dee6cdf797be298efd7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -1,5 +1,12 @@\n 2007-01-29  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* gcc.dg/dfp/dfp-except.h: New file.\n+\t* gcc.dg/dfp/fe-check.h: New file.\n+\t* gcc.dg/dfp/fe-binop.c: New test.\n+\t* gcc.dg/dfp/fe-convert-1.c: New test.\n+\t* gcc.dg/dfp/fe-convert-2.c: New test.\n+\t* gcc.dg/dfp/fe-convert-3.c: New test.\n+\n \t* gcc.dg/dfp/dec-eval-method.c: Replace decfloat.h with float.h.\n \t* gcc.dg/dfp/decfloat-constants.c: Ditto.\n \t* gcc.dg/dfp/convert-dfp.c: Ditto."}, {"sha": "3ef97ff6be5af492456867804a8197c41a91fb50", "filename": "gcc/testsuite/gcc.dg/dfp/dfp-except.h", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-except.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-except.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-except.h?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,13 @@\n+/* Use undocumented functions in libgcc to clear and test dummy floating\n+   point exception flags.  That functionality is in libgcc just for\n+   testing purposes.\n+\n+   If fesetexcept and feclearexcept are available, use those instead.  */\n+\n+/* Get names of exception flags.  */\n+#include <fenv.h>\n+\n+extern void __dfp_clear_except (int);\n+#define DFP_CLEAR_EXCEPT(M) __dfp_clear_except(M)\n+extern int __dfp_test_except (int);\n+#define DFP_TEST_EXCEPT(M) __dfp_test_except(M)"}, {"sha": "007bc6e44ddfabce934d7d542c2805a5b1e2232b", "filename": "gcc/testsuite/gcc.dg/dfp/fe-binop.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-binop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-binop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-binop.c?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Touch tests that check for raising appropriate exceptions for binary\n+   arithmetic operations on decimal float values.  */\n+\n+#include \"fe-check.h\"\n+\n+volatile _Decimal32 a32, b32, c32;\n+volatile _Decimal64 a64, b64, c64;\n+volatile _Decimal128 a128, b128, c128;\n+_Decimal32 inf32;\n+_Decimal64 inf64;\n+_Decimal128 inf128;\n+\n+BINOP (100, /, a32, 2.0df, b32, 0.df, c32, FE_DIVBYZERO)\n+BINOP (101, /, a64, 2.0dd, b64, 0.dd, c64, FE_DIVBYZERO)\n+BINOP (102, /, a128, 2.0dl, b128, 0.dl, c128, FE_DIVBYZERO)\n+\n+BINOP (200, /, a32, 0.df, b32, 0.df, c32, FE_INVALID)\n+BINOP (201, /, a64, 0.dd, b64, 0.dd, c64, FE_INVALID)\n+BINOP (202, /, a128, 0.dl, b128, 0.dl, c128, FE_INVALID)\n+BINOP (203, /, a32, inf32, b32, inf32, c32, FE_INVALID)\n+BINOP (204, /, a64, inf64, b64, inf64, c64, FE_INVALID)\n+BINOP (205, /, a128, inf128, b128, inf128, c128, FE_INVALID)\n+BINOP (206, *, a32, 0.df, b32, __builtin_infd32(), c32, FE_INVALID)\n+BINOP (207, *, a32, __builtin_infd32(), b32, 0.df, c32, FE_INVALID)\n+BINOP (208, *, a64, 0.df, b64, __builtin_infd64(), c64, FE_INVALID)\n+BINOP (209, *, a64, __builtin_infd64(), b64, 0.df, c64, FE_INVALID)\n+BINOP (210, *, a128, 0.df, b128, __builtin_infd128(), c128, FE_INVALID)\n+BINOP (211, *, a128, __builtin_infd128(), b128, 0.df, c128, FE_INVALID)\n+BINOP (212, +, a32, inf32, b32, -inf32, c32, FE_INVALID)\n+BINOP (213, +, a64, inf64, b64, -inf64, c64, FE_INVALID)\n+BINOP (214, +, a128, inf128, b128, -inf128, c128, FE_INVALID)\n+BINOP (215, -, a32, inf32, b32, inf32, c32, FE_INVALID)\n+BINOP (216, -, a64, inf64, b64, inf64, c64, FE_INVALID)\n+BINOP (217, -, a128, inf128, b128, inf128, c128, FE_INVALID)\n+\n+BINOP (300, /, a32, 9.9e94df, b32, 1.e-3df, c32, FE_OVERFLOW|FE_INEXACT)\n+BINOP (301, /, a64, 9.9e382dd, b64, 1.e-3dd, c64, FE_OVERFLOW|FE_INEXACT)\n+BINOP (302, /, a128, 9.9e6142dl, b128, 1.e-3dl, c128, FE_OVERFLOW|FE_INEXACT)\n+BINOP (303, +, a32, 9.9e96df, b32, 1.e96df, c32, FE_OVERFLOW|FE_INEXACT)\n+BINOP (304, +, a64, 9.9e384dd, b64, 1.e384dd, c64, FE_OVERFLOW|FE_INEXACT)\n+BINOP (305, +, a128, 9.9e6144dl, b128, 1.e6144dl, c128, FE_OVERFLOW|FE_INEXACT)\n+\n+BINOP (400, /, a32, 1.e-3df, b32, 9.9e94df, c32, FE_UNDERFLOW|FE_INEXACT)\n+BINOP (401, /, a64, 1.e-3dd, b64, 9.9e382dd, c64, FE_UNDERFLOW|FE_INEXACT)\n+BINOP (402, /, a128, 1.e-3dl, b128, 9.9e6142dl, c128, FE_UNDERFLOW|FE_INEXACT)\n+BINOP (403, *, a32, 1.e-95df, b32, 1.e-7df, c32, FE_UNDERFLOW|FE_INEXACT)\n+BINOP (404, *, a64, 1.e-383dd, b64, 1.e-16dd, c64, FE_UNDERFLOW|FE_INEXACT)\n+BINOP (405, *, a128, 1.e-6143dl, b128, 1.e-34dl, c128, FE_UNDERFLOW|FE_INEXACT)\n+\n+BINOP (500, /, a32, 1.df, b32, 3.df, c32, FE_INEXACT)\n+BINOP (501, /, a64, 1.dd, b64, 3.dd, c64, FE_INEXACT)\n+BINOP (502, /, a128, 1.dl, b128, 3.dl, c128, FE_INEXACT)\n+\n+int\n+main ()\n+{\n+  inf32 = __builtin_infd32();\n+  inf64 = __builtin_infd64();\n+  inf128 = __builtin_infd128();\n+\n+  binop_100 ();\n+  binop_101 ();\n+  binop_102 ();\n+\n+  binop_200 ();\n+  binop_201 ();\n+  binop_202 ();\n+  binop_203 ();\n+  binop_204 ();\n+  binop_205 ();\n+  binop_206 ();\n+  binop_207 ();\n+  binop_208 ();\n+  binop_209 ();\n+  binop_210 ();\n+  binop_211 ();\n+  binop_212 ();\n+  binop_213 ();\n+  binop_214 ();\n+  binop_215 ();\n+  binop_216 ();\n+  binop_217 ();\n+\n+  binop_300 ();\n+  binop_301 ();\n+  binop_302 ();\n+  binop_303 ();\n+  binop_304 ();\n+  binop_305 ();\n+\n+  binop_400 ();\n+  binop_401 ();\n+  binop_402 ();\n+  binop_403 ();\n+  binop_404 ();\n+  binop_405 ();\n+\n+  binop_500 ();\n+  binop_501 ();\n+  binop_502 ();\n+\n+  if (failcnt != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "0e072aa9fa1ac480d46e071dd9960df52fff6789", "filename": "gcc/testsuite/gcc.dg/dfp/fe-check.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-check.h?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,70 @@\n+/* Common support for checking that appropriate floating point exceptions\n+   are raised for decimal float operations.  These tests are here to test\n+   the software decimal float support in libgcc.  */\n+\n+#include \"dfp-except.h\"\n+\n+extern void abort (void);\n+static int failcnt = 0;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#if defined(DBG) || defined(DBG2)\n+#include <stdio.h>\n+#define FAILURE(NUM,KIND,EXCEPT) \\\n+  { printf (\"failed for test %d: %s %s\\n\", NUM, KIND, EXCEPT); failcnt++; }\n+#else\n+#define FAILURE(N,K,E) abort ();\n+#endif\n+\n+/* This is useful when modifying the test to make sure that tests are\n+   actually run.  */\n+#if defined(DBG2)\n+#define SUCCESS(NUM,EXCEPT) \\\n+  { printf (\"passed for test %d: %s\\n\", NUM, EXCEPT); }\n+#else\n+#define SUCCESS(N,E) ;\n+#endif\n+\n+#define CHECKFLAG(NUM,EXCEPT,GOT,WANT)\t\t\t\t\\\n+  if ((WANT & EXCEPT) != (GOT & EXCEPT))\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if ((WANT & EXCEPT) != 0)\t\t\t\t\t\\\n+        FAILURE (NUM, \"missing\", #EXCEPT)\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+        FAILURE (NUM, \"unexpected\", #EXCEPT)\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    SUCCESS (NUM, #EXCEPT)\n+\n+void\n+checkflags (int num, int want)\n+{\n+  int got = DFP_TEST_EXCEPT (FE_ALL_EXCEPT);\n+  CHECKFLAG (num, FE_INVALID, got, want)\n+  CHECKFLAG (num, FE_OVERFLOW, got, want)\n+  CHECKFLAG (num, FE_UNDERFLOW, got, want)\n+  CHECKFLAG (num, FE_DIVBYZERO, got, want)\n+  CHECKFLAG (num, FE_INEXACT, got, want)\n+}\n+\n+#define BINOP(NUM,OP,VAR1,VAL1,VAR2,VAL2,VAR3,EXCEPT)\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+binop_##NUM (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  VAR1 = VAL1;\t\t\t\t\t\t\t\\\n+  VAR2 = VAL2;\t\t\t\t\t\t\t\\\n+  DFP_CLEAR_EXCEPT (FE_ALL_EXCEPT);\t\t\t\t\\\n+  VAR3 = VAR1 OP VAR2;\t\t\t\t\t\t\\\n+  checkflags (NUM, EXCEPT);\t\t\t\t\t\\\n+}\n+\n+#define CONVERT(NUM,FROM,TO,VALUE,EXCEPT)\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+convert_##NUM (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  FROM = VALUE;\t\t\t\t\t\t\t\\\n+  DFP_CLEAR_EXCEPT (FE_ALL_EXCEPT);\t\t\t\t\\\n+  TO = FROM;\t\t\t\t\t\t\t\\\n+  checkflags (NUM, EXCEPT);\t\t\t\t\t\\\n+}"}, {"sha": "b308546effe25a6d0642d8dbfe5a9cf93ebfdc6e", "filename": "gcc/testsuite/gcc.dg/dfp/fe-convert-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-1.c?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check that appropriate exceptions are raised for conversions involving\n+   decimal float values.  */\n+\n+#include \"fe-check.h\"\n+\n+volatile _Decimal32 d32;\n+volatile _Decimal64 d64;\n+volatile _Decimal128 d128;\n+\n+/* Conversions between decimal float types should raise an invalid\n+   exception if the values doesn't fit, either because the value\n+   is too large or the result can't hold the full precision.  */\n+\n+CONVERT (100, d64, d32, 9.999999e96DD, 0)\n+CONVERT (101, d64, d32, 10.000000e96DD, FE_INEXACT)\n+CONVERT (102, d64, d32, 1.1111111DD, FE_INEXACT)\n+CONVERT (110, d128, d32, 9.999999e96DL, 0)\n+CONVERT (111, d128, d32, 10.000000e96DL, FE_INEXACT)\n+CONVERT (112, d128, d32, 1.1111111DL, FE_INEXACT)\n+CONVERT (120, d128, d64, 9.999999999999999E384DL, 0)\n+CONVERT (121, d128, d64, 10.00000000000000E384DL, FE_INEXACT)\n+CONVERT (122, d128, d64, 1.1111111111111111DL, FE_INEXACT)\n+\n+int\n+main ()\n+{\n+  convert_100 ();\n+  convert_101 ();\n+  convert_102 ();\n+  convert_110 ();\n+  convert_111 ();\n+  convert_112 ();\n+  convert_120 ();\n+  convert_121 ();\n+  convert_122 ();\n+\n+  if (failcnt != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "ca55023a579911fc8f5ff0eb0cfca33bae6d2ec7", "filename": "gcc/testsuite/gcc.dg/dfp/fe-convert-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-2.c?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check that appropriate exceptions are raised for BFP to DFP conversions.\n+   The test only uses double and _Decimal32; tests for conversions to\n+   _Decimal64 would need 128-bit long double.  */\n+\n+#include \"fe-check.h\"\n+\n+volatile _Decimal32 d32;\n+volatile double d;\n+\n+CONVERT (100, d, d32, 1.0e96, 0)\n+CONVERT (101, d, d32, 1.0e97, FE_OVERFLOW|FE_INEXACT) \n+CONVERT (102, d, d32, -1.0e96, 0)\n+CONVERT (103, d, d32, -1.0e97, FE_OVERFLOW|FE_INEXACT) \n+\n+#if 0\n+/* These should result in fp exceptions but don't.  */\n+CONVERT (xxx, d, d32, 1.0e-96, FE_UNDERFLOW|FE_INEXACT)\n+CONVERT (xxx, d, d32, 0.00048828125, FE_INEXACT)  /* exact power of 2 */\n+#endif\n+\n+int\n+main ()\n+{\n+  convert_100 ();\n+  convert_101 ();\n+  convert_102 ();\n+  convert_103 ();\n+\n+  if (failcnt != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e3fe30eeb11484b0a9e860fede49000dbccc3b94", "filename": "gcc/testsuite/gcc.dg/dfp/fe-convert-3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-3.c?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check that appropriate exceptions are raised for int to DFP conversions.  */\n+\n+#include \"fe-check.h\"\n+\n+volatile _Decimal32 d32;\n+volatile _Decimal64 d64;\n+volatile signed int si;\n+volatile unsigned int ui;\n+volatile signed long long sll;\n+volatile unsigned long long ull;\n+\n+CONVERT (100, si, d32, 9999999, 0)\n+CONVERT (101, si, d32, 11111111, FE_INEXACT)\n+CONVERT (102, si, d32, -9999999, 0)\n+CONVERT (103, si, d32, -10000001, FE_INEXACT)\n+CONVERT (110, ui, d32, 9999999, 0)\n+CONVERT (111, ui, d32, 10000001, FE_INEXACT)\n+CONVERT (200, sll, d64, 9999999999999999, 0)\n+CONVERT (201, sll, d64, 10000000000000001, FE_INEXACT)\n+CONVERT (202, sll, d64, -9999999999999999, 0)\n+CONVERT (203, sll, d64, -10000000000000001, FE_INEXACT)\n+CONVERT (210, ull, d64, 9999999999999999, 0)\n+CONVERT (211, ull, d64, 10000000000000001, FE_INEXACT)\n+\n+int\n+main ()\n+{\n+  if (sizeof (long long) != 16)\n+    return 0;\n+\n+  convert_100 ();\n+  convert_101 ();\n+  convert_102 ();\n+  convert_103 ();\n+  convert_110 ();\n+  convert_111 ();\n+  convert_200 ();\n+  convert_201 ();\n+  convert_202 ();\n+  convert_203 ();\n+  convert_210 ();\n+  convert_211 ();\n+\n+  if (failcnt != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "3579b7c610b4ce75677e679af83b6c37dfe0243d", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -1,3 +1,8 @@\n+2007-01-29  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* decExcept.c: New.\n+\t* decExcept.h: New.\n+\n 2006-11-29  Janis Johnson  <janis187@us.ibm.com>\n \n \t* decRound.c: Move declarations to new file, update comments."}, {"sha": "6821702420655dde51b6aff8e2a96acb1592f8d7", "filename": "libdecnumber/decExcept.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libdecnumber%2FdecExcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libdecnumber%2FdecExcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecExcept.c?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,59 @@\n+/* Temporary library support for decimal floating point.\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+   02110-1301, USA.  */\n+\n+#include <fenv.h>\n+#include \"config.h\"\n+#include \"decContext.h\"\n+#include \"decExcept.h\"\n+\n+/* Internal, non-documented functions for testing libgcc functions.\n+   This support is not sufficient for real use.  */\n+\n+static int __dfp_except_flags = 0;\n+\n+/* Clear the dummy exception flags.  */\n+void\n+__dfp_clear_except (void)\n+{\n+  __dfp_except_flags = 0;\n+}\n+\n+/* Return the dummy exception flags corresponding to the mask.  */\n+int\n+__dfp_test_except (int mask)\n+{\n+  return __dfp_except_flags & mask;\n+}\n+\n+/* Set dummy exception flags.  */\n+void\n+__dfp_raise_except (int flags)\n+{\n+  __dfp_except_flags |= flags;\n+}"}, {"sha": "12ba87d01fbff88a9ffd297b64fba033c45c4db6", "filename": "libdecnumber/decExcept.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libdecnumber%2FdecExcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libdecnumber%2FdecExcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecExcept.h?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -0,0 +1,39 @@\n+/* Temporary library support for decimal floating point.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+   02110-1301, USA.  */\n+\n+#include <fenv.h>\n+#include \"config.h\"\n+#include \"decContext.h\"\n+\n+#define DFP_EXCEPTIONS_ENABLED 1\n+#define DFP_HANDLE_EXCEPTIONS(A) __dfp_raise_except(A)\n+\n+void __dfp_clear_except (void);\n+int __dfp_test_except (int);\n+void __dfp_raise_except (int);"}, {"sha": "7023d8048a66c663f6e17732e7e36978b784edaa", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -1,3 +1,7 @@\n+2007-01-29  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* Makefile.in (dec-filenames): Add decExcept.\n+\n 2007-01-28  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \tPR bootstrap/30469"}, {"sha": "cb91cdaf756f36ab283eccb5a64f9a9938a64aed", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a66f98c1cd94c9cba4ba54bf07e39df92614fb/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=d9a66f98c1cd94c9cba4ba54bf07e39df92614fb", "patch": "@@ -464,7 +464,7 @@ endif\n \n dec-filenames =\n ifneq ($(D32PBIT)$(D64PBIT)$(D128PBIT),)\n-dec-filenames += decContext decNumber decRound decLibrary decUtility\n+dec-filenames += decContext decNumber decExcept decRound decLibrary decUtility\n endif\n \n ifneq ($(D32PBIT),)"}]}