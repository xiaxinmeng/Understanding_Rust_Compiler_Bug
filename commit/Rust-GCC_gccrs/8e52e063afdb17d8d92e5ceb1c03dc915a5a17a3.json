{"sha": "8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1MmUwNjNhZmRiMTdkOGQ5MmU1Y2ViMWMwM2RjOTE1YTVhMTdhMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-16T18:40:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-16T18:40:36Z"}, "message": "decl.c (lookup_name_real): Handle template parameters for member temlates where said parameters have the...\n\n\t* decl.c (lookup_name_real): Handle template parameters for member\n\ttemlates where said parameters have the same name as the\n\tsurrounding class.\n\nFrom-SVN: r23141", "tree": {"sha": "151b95f314a2e4005fa963c4858801aac63ccb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151b95f314a2e4005fa963c4858801aac63ccb57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/comments", "author": null, "committer": null, "parents": [{"sha": "96b106e5c960e9aad26ee54caa0a9f1688e55b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b106e5c960e9aad26ee54caa0a9f1688e55b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b106e5c960e9aad26ee54caa0a9f1688e55b6b"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "11159fa2f2e6e3cb7440929660c3bf1a5750e341", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "patch": "@@ -1,5 +1,9 @@\n 1998-10-16  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* decl.c (lookup_name_real): Handle template parameters for member\n+\ttemlates where said parameters have the same name as the\n+\tsurrounding class.\n+\t\n \t* decl.c (expand_static_init): Build cleanups before entering the\n \tanonymous function used to do them to avoid access-checking\n \tconfusion."}, {"sha": "1c4f12c7fa8b78356d242a34e3ad2c3ffdb4fe4d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "patch": "@@ -5166,7 +5166,29 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \n   if (locval && classval)\n     {\n-      if (current_scope () == current_function_decl\n+      /* We have both a local binding and a class-level binding.  This\n+\t can happen in two ways:\n+\n+\t   o We are in a member function of a class.\n+           o We are in a local class within a function.\n+\n+\t We need to determine which one of these situations is\n+\t occuring, and give the innermost binding.  One tricky bit is\n+\t that with member templates we can be in the first case\n+\t without CURRENT_FUNCTION_DECL being set.  Consider\n+\t  \n+\t   struct A { template <class A> void f(A); };\n+\n+\t Here, when we look at the `A' in the parameter declaration\n+\t for `f' we have a local binding (the template parameter) and\n+\t a class-level binding (the TYPE_DECL for the class).\n+\t Fortunately, if LOCVAL is a template parameter it is safe to\n+\t take it; nothing within the scope of the template parameter\n+\t is allowed to have the same name.  */\n+\n+      if (decl_template_parm_p (locval))\n+\tval = locval;\n+      else if (current_scope () == current_function_decl\n \t  && ! hack_decl_function_context (current_function_decl))\n \t/* Not in a nested function.  */\n \tval = locval;"}, {"sha": "0b65e1ec9571431f4f6d04adcfd37766d8c05f81", "filename": "gcc/testsuite/g++.old-deja/g++.pt/redecl2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fredecl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fredecl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fredecl2.C?ref=8e52e063afdb17d8d92e5ceb1c03dc915a5a17a3", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+\n+struct A \n+{\n+  template <class A>\n+  void f(A) {}\n+};\n+\n+void g()\n+{\n+  A a;\n+  a.f(3);\n+}\n+"}]}