{"sha": "79bd1948049e44e2bef8ea00187fee391421b0cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliZDE5NDgwNDllNDRlMmJlZjhlYTAwMTg3ZmVlMzkxNDIxYjBjZg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2009-05-13T16:17:59Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2009-05-13T16:17:59Z"}, "message": "gfortran.h (gfc_code): Rename struct member label to label1.\n\n2009-05-12  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* gfortran.h (gfc_code): Rename struct member label to label1.\n\t* dump-parse-tree.c (show_code_node): Update symbol.\n\t* trans-stmt.c (gfc_trans_label_assign, gfc_trans_goto,\n\tgfc_trans_arithmetic_if)\": Ditto.\n\t* resolve.c (gfc_resolve_blocks, resolve_code): Ditto.\n\t* match.c (match_arithmetic_if, gfc_match_if, gfc_reference_st_label,\n\tgfc_match_assign, gfc_match_goto): Ditto.\n\t* parse.c (parse_do_block): Ditto.\n\nFrom-SVN: r147489", "tree": {"sha": "e49b4a8743040e93a8b492edc72c69521fa7a99c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e49b4a8743040e93a8b492edc72c69521fa7a99c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79bd1948049e44e2bef8ea00187fee391421b0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bd1948049e44e2bef8ea00187fee391421b0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bd1948049e44e2bef8ea00187fee391421b0cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bd1948049e44e2bef8ea00187fee391421b0cf/comments", "author": null, "committer": null, "parents": [{"sha": "286c4fcbc8953338d4d00d93d8239ad305324209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286c4fcbc8953338d4d00d93d8239ad305324209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286c4fcbc8953338d4d00d93d8239ad305324209"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "51cfdbb52c48e50432c142973d56a6cfc27cd247", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -1,3 +1,14 @@\n+2009-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_code): Rename struct member label to label1.\n+\t* dump-parse-tree.c (show_code_node): Update symbol.\n+\t* trans-stmt.c (gfc_trans_label_assign, gfc_trans_goto,\n+\tgfc_trans_arithmetic_if)\": Ditto.\n+\t* resolve.c (gfc_resolve_blocks, resolve_code): Ditto.\n+\t* match.c (match_arithmetic_if, gfc_match_if, gfc_reference_st_label,\n+\tgfc_match_assign, gfc_match_goto): Ditto.\n+\t* parse.c (parse_do_block): Ditto.\n+\n 2009-05-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34153"}, {"sha": "8c8ad8d32decdf58134751cd2254a25efe2736f8", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -1174,7 +1174,7 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_LABEL_ASSIGN:\n       fputs (\"LABEL ASSIGN \", dumpfile);\n       show_expr (c->expr);\n-      fprintf (dumpfile, \" %d\", c->label->value);\n+      fprintf (dumpfile, \" %d\", c->label1->value);\n       break;\n \n     case EXEC_POINTER_ASSIGN:\n@@ -1186,8 +1186,8 @@ show_code_node (int level, gfc_code *c)\n \n     case EXEC_GOTO:\n       fputs (\"GOTO \", dumpfile);\n-      if (c->label)\n-\tfprintf (dumpfile, \"%d\", c->label->value);\n+      if (c->label1)\n+\tfprintf (dumpfile, \"%d\", c->label1->value);\n       else\n \t{\n \t  show_expr (c->expr);\n@@ -1197,7 +1197,7 @@ show_code_node (int level, gfc_code *c)\n \t      fputs (\", (\", dumpfile);\n \t      for (; d; d = d ->block)\n \t\t{\n-\t\t  code_indent (level, d->label);\n+\t\t  code_indent (level, d->label1);\n \t\t  if (d->block != NULL)\n \t\t    fputc (',', dumpfile);\n \t\t  else\n@@ -1260,7 +1260,7 @@ show_code_node (int level, gfc_code *c)\n       fputs (\"IF \", dumpfile);\n       show_expr (c->expr);\n       fprintf (dumpfile, \" %d, %d, %d\",\n-\t\t  c->label->value, c->label2->value, c->label3->value);\n+\t\t  c->label1->value, c->label2->value, c->label3->value);\n       break;\n \n     case EXEC_IF:\n@@ -1287,7 +1287,7 @@ show_code_node (int level, gfc_code *c)\n \t  show_code (level + 1, d->next);\n \t}\n \n-      code_indent (level, c->label);\n+      code_indent (level, c->label1);\n \n       fputs (\"ENDIF\", dumpfile);\n       break;\n@@ -1317,7 +1317,7 @@ show_code_node (int level, gfc_code *c)\n \t  show_code (level + 1, d->next);\n \t}\n \n-      code_indent (level, c->label);\n+      code_indent (level, c->label1);\n       fputs (\"END SELECT\", dumpfile);\n       break;\n \n@@ -1398,7 +1398,7 @@ show_code_node (int level, gfc_code *c)\n \n       show_code (level + 1, c->block->next);\n \n-      code_indent (level, c->label);\n+      code_indent (level, c->label1);\n       fputs (\"END DO\", dumpfile);\n       break;\n "}, {"sha": "97c9c1f9ec931b6185175bf89832e4b68eb837e4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -1913,7 +1913,7 @@ typedef struct gfc_code\n   struct gfc_code *block, *next;\n   locus loc;\n \n-  gfc_st_label *here, *label, *label2, *label3;\n+  gfc_st_label *here, *label1, *label2, *label3;\n   gfc_symtree *symtree;\n   gfc_expr *expr, *expr2;\n   /* A name isn't sufficient to identify a subroutine, we need the actual"}, {"sha": "3a49ca19ea3406d967eb16a267492187249fcbb8", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -1389,7 +1389,7 @@ match_arithmetic_if (void)\n \n   new_st.op = EXEC_ARITHMETIC_IF;\n   new_st.expr = expr;\n-  new_st.label = l1;\n+  new_st.label1 = l1;\n   new_st.label2 = l2;\n   new_st.label3 = l3;\n \n@@ -1470,7 +1470,7 @@ gfc_match_if (gfc_statement *if_type)\n \n       new_st.op = EXEC_ARITHMETIC_IF;\n       new_st.expr = expr;\n-      new_st.label = l1;\n+      new_st.label1 = l1;\n       new_st.label2 = l2;\n       new_st.label3 = l3;\n \n@@ -1789,7 +1789,7 @@ gfc_match_do (void)\n       && gfc_reference_st_label (label, ST_LABEL_TARGET) == FAILURE)\n     goto cleanup;\n \n-  new_st.label = label;\n+  new_st.label1 = label;\n \n   if (new_st.op == EXEC_DO_WHILE)\n     new_st.expr = iter.end;\n@@ -2033,7 +2033,7 @@ gfc_match_assign (void)\n \t  expr->symtree->n.sym->attr.assign = 1;\n \n \t  new_st.op = EXEC_LABEL_ASSIGN;\n-\t  new_st.label = label;\n+\t  new_st.label1 = label;\n \t  new_st.expr = expr;\n \t  return MATCH_YES;\n \t}\n@@ -2063,7 +2063,7 @@ gfc_match_goto (void)\n \treturn MATCH_ERROR;\n \n       new_st.op = EXEC_GOTO;\n-      new_st.label = label;\n+      new_st.label1 = label;\n       return MATCH_YES;\n     }\n \n@@ -2108,7 +2108,7 @@ gfc_match_goto (void)\n \t      tail = tail->block;\n \t    }\n \n-\t  tail->label = label;\n+\t  tail->label1 = label;\n \t  tail->op = EXEC_GOTO;\n \t}\n       while (gfc_match_char (',') == MATCH_YES);\n@@ -2161,7 +2161,7 @@ gfc_match_goto (void)\n \n       tail->next = gfc_get_code ();\n       tail->next->op = EXEC_GOTO;\n-      tail->next->label = label;\n+      tail->next->label1 = label;\n     }\n   while (gfc_match_char (',') == MATCH_YES);\n \n@@ -2782,7 +2782,7 @@ gfc_match_call (void)\n \n \t  c->next = gfc_get_code ();\n \t  c->next->op = EXEC_GOTO;\n-\t  c->next->label = a->label;\n+\t  c->next->label1 = a->label;\n \t}\n     }\n "}, {"sha": "3dec1735b2394ca956ad2b4efbd5ef924e749f80", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -2867,7 +2867,7 @@ parse_do_block (void)\n   gfc_state_data s;\n   gfc_symtree *stree;\n \n-  s.ext.end_do_label = new_st.label;\n+  s.ext.end_do_label = new_st.label1;\n \n   if (new_st.ext.iterator != NULL)\n     stree = new_st.ext.iterator->var->symtree;"}, {"sha": "028235b8794817249b2fbb1249ac2786a272edc2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -6645,7 +6645,7 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \t  break;\n \n \tcase EXEC_GOTO:\n-\t  resolve_branch (b->label, b);\n+\t  resolve_branch (b->label1, b);\n \t  break;\n \n \tcase EXEC_SELECT:\n@@ -6927,7 +6927,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t\t\t   &code->expr->where);\n \t    }\n \t  else\n-\t    resolve_branch (code->label, code);\n+\t    resolve_branch (code->label1, code);\n \t  break;\n \n \tcase EXEC_RETURN:\n@@ -6951,9 +6951,9 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t  break;\n \n \tcase EXEC_LABEL_ASSIGN:\n-\t  if (code->label->defined == ST_LABEL_UNKNOWN)\n+\t  if (code->label1->defined == ST_LABEL_UNKNOWN)\n \t    gfc_error (\"Label %d referenced at %L is never defined\",\n-\t\t       code->label->value, &code->label->where);\n+\t\t       code->label1->value, &code->label1->where);\n \t  if (t == SUCCESS\n \t      && (code->expr->expr_type != EXPR_VARIABLE\n \t\t  || code->expr->symtree->n.sym->ts.type != BT_INTEGER\n@@ -6978,7 +6978,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t    gfc_error (\"Arithmetic IF statement at %L requires a numeric \"\n \t\t       \"expression\", &code->expr->where);\n \n-\t  resolve_branch (code->label, code);\n+\t  resolve_branch (code->label1, code);\n \t  resolve_branch (code->label2, code);\n \t  resolve_branch (code->label3, code);\n \t  break;"}, {"sha": "1f05738dac5923b7c2c14164b1cf55b0f6c79400", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bd1948049e44e2bef8ea00187fee391421b0cf/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=79bd1948049e44e2bef8ea00187fee391421b0cf", "patch": "@@ -109,16 +109,16 @@ gfc_trans_label_assign (gfc_code * code)\n   len = GFC_DECL_STRING_LEN (se.expr);\n   addr = GFC_DECL_ASSIGN_ADDR (se.expr);\n \n-  label_tree = gfc_get_label_decl (code->label);\n+  label_tree = gfc_get_label_decl (code->label1);\n \n-  if (code->label->defined == ST_LABEL_TARGET)\n+  if (code->label1->defined == ST_LABEL_TARGET)\n     {\n       label_tree = gfc_build_addr_expr (pvoid_type_node, label_tree);\n       len_tree = integer_minus_one_node;\n     }\n   else\n     {\n-      gfc_expr *format = code->label->format;\n+      gfc_expr *format = code->label1->format;\n \n       label_len = format->value.character.length;\n       len_tree = build_int_cst (NULL_TREE, label_len);\n@@ -144,8 +144,8 @@ gfc_trans_goto (gfc_code * code)\n   tree tmp;\n   gfc_se se;\n \n-  if (code->label != NULL)\n-    return build1_v (GOTO_EXPR, gfc_get_label_decl (code->label));\n+  if (code->label1 != NULL)\n+    return build1_v (GOTO_EXPR, gfc_get_label_decl (code->label1));\n \n   /* ASSIGNED GOTO.  */\n   gfc_init_se (&se, NULL);\n@@ -170,7 +170,7 @@ gfc_trans_goto (gfc_code * code)\n   /* Check the label list.  */\n   do\n     {\n-      target = gfc_get_label_decl (code->label);\n+      target = gfc_get_label_decl (code->label1);\n       tmp = gfc_build_addr_expr (pvoid_type_node, target);\n       tmp = fold_build2 (EQ_EXPR, boolean_type_node, tmp, assigned_goto);\n       tmp = build3_v (COND_EXPR, tmp,\n@@ -719,24 +719,24 @@ gfc_trans_arithmetic_if (gfc_code * code)\n   /* Build something to compare with.  */\n   zero = gfc_build_const (TREE_TYPE (se.expr), integer_zero_node);\n \n-  if (code->label->value != code->label2->value)\n+  if (code->label1->value != code->label2->value)\n     {\n       /* If (cond < 0) take branch1 else take branch2.\n          First build jumps to the COND .LT. 0 and the COND .EQ. 0 cases.  */\n-      branch1 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label));\n+      branch1 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label1));\n       branch2 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label2));\n \n-      if (code->label->value != code->label3->value)\n+      if (code->label1->value != code->label3->value)\n         tmp = fold_build2 (LT_EXPR, boolean_type_node, se.expr, zero);\n       else\n         tmp = fold_build2 (NE_EXPR, boolean_type_node, se.expr, zero);\n \n       branch1 = fold_build3 (COND_EXPR, void_type_node, tmp, branch1, branch2);\n     }\n   else\n-    branch1 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label));\n+    branch1 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label1));\n \n-  if (code->label->value != code->label3->value\n+  if (code->label1->value != code->label3->value\n       && code->label2->value != code->label3->value)\n     {\n       /* if (cond <= 0) take branch1 else take branch2.  */"}]}