{"sha": "e366d7d807f8d06dc35570871ba2b723b78975af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2NmQ3ZDgwN2Y4ZDA2ZGMzNTU3MDg3MWJhMmI3MjNiNzg5NzVhZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2016-08-12T07:11:50Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2016-08-12T07:11:50Z"}, "message": "[PR63240] generate debug info for defaulted member functions\n\nThis implements <http://dwarfstd.org/ShowIssue.php?issue=141215.3>, a\nproposal already accepted for inclusion in DWARF-5, but using\nDW_AT_GNU_defaulted instead of DW_AT_defaulted as the attribute name,\nbecause the attribute id for DW_AT_defaulted is not yet publicly\navailable.\n\nfor  include/ChangeLog\n\n\tPR debug/63240\n\t* dwarf2.def (DW_AT_deleted, DW_AT_defaulted): New.\n\t* dwarf2.h (enu dwarf_defaulted_attribute): New.\n\nfor  gcc/ChangeLog\n\n\tPR debug/63240\n\t* langhooks-def.h\n\t(LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P): Const_tree-ify.\n\t(LANG_HOOKS_FUNCTION_DECL_DELETED_P): Likewise.\n\t(LANG_HOOKS_FUNCTION_DECL_DEFAULTED): Set default.\n\t(LANG_HOOKS_DECLS): Add it.\n\t* langhooks.h (struct lang_hooks_for_decls): Add\n\tfunction_decl_defaulted.  Const_tree-ify\n\tfunction_decl_explicit_p and function_decl_deleted_p.\n\t* dwarf2out.c (gen_subprogram_die): Add DW_AT_defaulted\n\tattribute.  Add DW_AT_deleted instead of DW_AT_GNU_deleted,\n\talso at strict DWARF v5.\n\nfor  gcc/cp/ChangeLog\n\n\tPR debug/63240\n\t* cp-objcp-common.c (cp_function_decl_defaulted): New.\n\t(cp_function_decl_explicit_p): Const_tree-ify.\n\t(cp_function_decl_deleted_p): Likewise.\n\t* cp-objcp-common.h (cp_function_decl_defaulted): Declare.\n\t(cp_function_decl_explicit_p): Const_tree-ify.\n\t(cp_function_decl_deleted_p): Likewise.\n\t(LANG_HOOKS_FUNCTION_DECL_DEFAULTED): Redefine.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/63240\n\t* g++.dg/debug/dwarf2/defaulted-member-function-1.C: New.\n\t* g++.dg/debug/dwarf2/defaulted-member-function-2.C: New.\n\t* g++.dg/debug/dwarf2/defaulted-member-function-3.C: New.\n\t* g++.dg/debug/dwarf2/deleted-member-function.C: Expect\n\tDW_AT_deleted.\n\nFrom-SVN: r239403", "tree": {"sha": "471d9088fd063b9813bc17c068db09d41e6775d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/471d9088fd063b9813bc17c068db09d41e6775d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e366d7d807f8d06dc35570871ba2b723b78975af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e366d7d807f8d06dc35570871ba2b723b78975af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e366d7d807f8d06dc35570871ba2b723b78975af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e366d7d807f8d06dc35570871ba2b723b78975af/comments", "author": null, "committer": null, "parents": [{"sha": "71e1a6a4c799e27be77f593c82b1575e094ea548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e1a6a4c799e27be77f593c82b1575e094ea548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e1a6a4c799e27be77f593c82b1575e094ea548"}], "stats": {"total": 188, "additions": 176, "deletions": 12}, "files": [{"sha": "11d6e548dba22bd2e1eebbc86d49ef4bf11fb6fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -1,5 +1,18 @@\n 2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR debug/63240\n+\t* langhooks-def.h\n+\t(LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P): Const_tree-ify.\n+\t(LANG_HOOKS_FUNCTION_DECL_DELETED_P): Likewise.\n+\t(LANG_HOOKS_FUNCTION_DECL_DEFAULTED): Set default.\n+\t(LANG_HOOKS_DECLS): Add it.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add\n+\tfunction_decl_defaulted.  Const_tree-ify\n+\tfunction_decl_explicit_p and function_decl_deleted_p.\n+\t* dwarf2out.c (gen_subprogram_die): Add DW_AT_defaulted\n+\tattribute.  Add DW_AT_deleted instead of DW_AT_GNU_deleted,\n+\talso at strict DWARF v5.\n+\n \tPR debug/55641\n \t* dwarf2out.c (decl_quals): Don't map TREE_READONLY to\n \tTYPE_QUAL_CONST in reference-typed decls."}, {"sha": "4049c76bfebeeb77027d8386dff8db031b4dc7d8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -1,3 +1,14 @@\n+2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/63240\n+\t* cp-objcp-common.c (cp_function_decl_defaulted): New.\n+\t(cp_function_decl_explicit_p): Const_tree-ify.\n+\t(cp_function_decl_deleted_p): Likewise.\n+\t* cp-objcp-common.h (cp_function_decl_defaulted): Declare.\n+\t(cp_function_decl_explicit_p): Const_tree-ify.\n+\t(cp_function_decl_deleted_p): Likewise.\n+\t(LANG_HOOKS_FUNCTION_DECL_DEFAULTED): Redefine.\n+\n 2016-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/72868"}, {"sha": "9cb9dd780fb2e2b879d29315baf94a3220593c3c", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -133,7 +133,7 @@ cxx_types_compatible_p (tree x, tree y)\n /* Return true if DECL is explicit member function.  */\n \n bool\n-cp_function_decl_explicit_p (tree decl)\n+cp_function_decl_explicit_p (const_tree decl)\n {\n   return (decl\n \t  && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n@@ -143,13 +143,34 @@ cp_function_decl_explicit_p (tree decl)\n /* Return true if DECL is deleted special member function.  */\n \n bool\n-cp_function_decl_deleted_p (tree decl)\n+cp_function_decl_deleted_p (const_tree decl)\n {\n   return (decl\n \t  && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n \t  && DECL_DELETED_FN (decl));\n }\n \n+/* Returns 0 if DECL is NOT a C++11 defaulted special member function,\n+   1 if it is explicitly defaulted within the class body, or 2 if it\n+   is explicitly defaulted outside the class body.  */\n+\n+int\n+cp_function_decl_defaulted (const_tree decl)\n+{\n+  if (decl\n+      && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n+      && DECL_DEFAULTED_FN (decl))\n+    {\n+      if (DECL_DEFAULTED_IN_CLASS_P (decl))\n+\treturn 1;\n+\n+      if (DECL_DEFAULTED_OUTSIDE_CLASS_P (decl))\n+\treturn 2;\n+    }\n+\n+  return 0;\n+}\n+\n /* Stubs to keep c-opts.c happy.  */\n void\n push_file_scope (void)"}, {"sha": "3ad3eb64c0b4ff9b9893e21edb1d19c46a9c515c", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -26,8 +26,9 @@ along with GCC; see the file COPYING3.  If not see\n extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n \t\t\t\t\t tree, bool);\n \n-extern bool cp_function_decl_explicit_p (tree decl);\n-extern bool cp_function_decl_deleted_p (tree decl);\n+extern bool cp_function_decl_explicit_p (const_tree decl);\n+extern bool cp_function_decl_deleted_p (const_tree decl);\n+extern int cp_function_decl_defaulted (const_tree decl);\n extern void cp_common_init_ts (void);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n@@ -134,6 +135,8 @@ extern void cp_common_init_ts (void);\n #define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P cp_function_decl_explicit_p\n #undef LANG_HOOKS_FUNCTION_DECL_DELETED_P\n #define LANG_HOOKS_FUNCTION_DECL_DELETED_P cp_function_decl_deleted_p\n+#undef LANG_HOOKS_FUNCTION_DECL_DEFAULTED\n+#define LANG_HOOKS_FUNCTION_DECL_DEFAULTED cp_function_decl_defaulted\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING cxx_omp_predetermined_sharing\n #undef LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR"}, {"sha": "3b25358459dd93664f36649500a0436c385d0880", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -20477,6 +20477,24 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\tadd_type_attribute (subr_die, TREE_TYPE (TREE_TYPE (decl)),\n \t\t\t\t    TYPE_UNQUALIFIED, false, context_die);\n \t    }\n+\n+\t  /* When we process the method declaration, we haven't seen\n+\t     the out-of-class defaulted definition yet, so we have to\n+\t     recheck now.  */\n+\t  int defaulted = lang_hooks.decls.function_decl_defaulted (decl);\n+\t  if (defaulted && (dwarf_version >= 5 || ! dwarf_strict)\n+\t      && !get_AT (subr_die, DW_AT_defaulted))\n+\t    switch (defaulted)\n+\t      {\n+\t      case 2:\n+\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted,\n+\t\t\t\t DW_DEFAULTED_out_of_class);\n+\t\tbreak;\n+\n+\t      case 1: /* This must have been handled before.  */\n+\t      default:\n+\t\tgcc_unreachable ();\n+\t      }\n \t}\n     }\n   /* Create a fresh DIE for anything else.  */\n@@ -20524,10 +20542,35 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t    add_AT_flag (subr_die, DW_AT_explicit, 1);\n \n \t  /* If this is a C++11 deleted special function member then generate\n-\t     a DW_AT_GNU_deleted attribute.  */\n+\t     a DW_AT_deleted attribute.  */\n \t  if (lang_hooks.decls.function_decl_deleted_p (decl)\n-\t      && (! dwarf_strict))\n-\t    add_AT_flag (subr_die, DW_AT_GNU_deleted, 1);\n+\t      && (dwarf_version >= 5 || ! dwarf_strict))\n+\t    add_AT_flag (subr_die, DW_AT_deleted, 1);\n+\n+\t  /* If this is a C++11 defaulted special function member then\n+\t     generate a DW_AT_GNU_defaulted attribute.  */\n+\t  int defaulted = lang_hooks.decls.function_decl_defaulted (decl);\n+\t  if (defaulted && (dwarf_version >= 5 || ! dwarf_strict))\n+\t    switch (defaulted)\n+\t      {\n+\t      case 1:\n+\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted,\n+\t\t\t\t DW_DEFAULTED_in_class);\n+\t\tbreak;\n+\n+\t\t/* It is likely that this will never hit, since we\n+\t\t   don't have the out-of-class definition yet when we\n+\t\t   process the class definition and the method\n+\t\t   declaration.  We recheck elsewhere, but leave it\n+\t\t   here just in case.  */\n+\t      case 2:\n+\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted,\n+\t\t\t\t DW_DEFAULTED_out_of_class);\n+\t\tbreak;\n+\n+\t      default:\n+\t\tgcc_unreachable ();\n+\t      }\n \t}\n     }\n   /* Tag abstract instances with DW_AT_inline.  */"}, {"sha": "10d910c960d4cf12af4dc2654c7d4f4c73b9415a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -209,8 +209,9 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_GLOBAL_BINDINGS_P global_bindings_p\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n-#define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P hook_bool_tree_false\n-#define LANG_HOOKS_FUNCTION_DECL_DELETED_P hook_bool_tree_false\n+#define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P hook_bool_const_tree_false\n+#define LANG_HOOKS_FUNCTION_DECL_DELETED_P hook_bool_const_tree_false\n+#define LANG_HOOKS_FUNCTION_DECL_DEFAULTED hook_int_const_tree_0\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_POST_COMPILATION_PARSING_CLEANUPS NULL\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n@@ -233,6 +234,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GETDECLS, \\\n   LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P, \\\n   LANG_HOOKS_FUNCTION_DECL_DELETED_P, \\\n+  LANG_HOOKS_FUNCTION_DECL_DEFAULTED, \\\n   LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P, \\\n   LANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P, \\\n   LANG_HOOKS_GET_GENERIC_FUNCTION_DECL, \\"}, {"sha": "44c258e963808c59a999a796b47c70f1672e2397", "filename": "gcc/langhooks.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -181,10 +181,15 @@ struct lang_hooks_for_decls\n   tree (*getdecls) (void);\n \n   /* Returns true if DECL is explicit member function.  */\n-  bool (*function_decl_explicit_p) (tree);\n+  bool (*function_decl_explicit_p) (const_tree);\n \n   /* Returns true if DECL is C++11 deleted special member function.  */\n-  bool (*function_decl_deleted_p) (tree);\n+  bool (*function_decl_deleted_p) (const_tree);\n+\n+  /* Returns 0 if DECL is NOT a C++11 defaulted special member\n+     function, 1 if it is explicitly defaulted within the class body,\n+     or 2 if it is explicitly defaulted outside the class body.  */\n+  int (*function_decl_defaulted) (const_tree);\n \n   /* Returns True if the parameter is a generic parameter decl\n      of a generic type, e.g a template template parameter for the C++ FE.  */"}, {"sha": "b2d0e64ec589741cf9cb3b8fe02ba05b726a76b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -1,5 +1,12 @@\n 2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR debug/63240\n+\t* g++.dg/debug/dwarf2/defaulted-member-function-1.C: New.\n+\t* g++.dg/debug/dwarf2/defaulted-member-function-2.C: New.\n+\t* g++.dg/debug/dwarf2/defaulted-member-function-3.C: New.\n+\t* g++.dg/debug/dwarf2/deleted-member-function.C: Expect\n+\tDW_AT_deleted.\n+\n \tPR debug/55641\n \t* g++.dg/debug/dwarf2/ref-1.C: New.\n "}, {"sha": "e798b490367c15c9c051d8028fb8fc770c29d257", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/defaulted-member-function-1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-1.C?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++11 -g -dA -gno-strict-dwarf\" }\n+// { dg-final { scan-assembler-times \"0x1\\[ \\t\\]\\[^\\n\\]* DW_AT_defaulted\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct Foo\n+{\n+  Foo () = default;\n+};\n+\n+void\n+bar ()\n+{\n+  Foo foo;\n+}"}, {"sha": "5b5694949525e5416ef684aeac0d8c10f24e22f1", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/defaulted-member-function-2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-2.C?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++11 -g -dA -gno-strict-dwarf\" }\n+// { dg-final { scan-assembler-times \"0x2\\[ \\t\\]\\[^\\n\\]* DW_AT_defaulted\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct Foo\n+{\n+  Foo ();\n+};\n+\n+Foo::Foo () = default;\n+\n+void\n+bar ()\n+{\n+  Foo foo;\n+}"}, {"sha": "190fe50845d772c4c62fecfe1e7a0fafe5bfc66c", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/defaulted-member-function-3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdefaulted-member-function-3.C?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++11 -g -dA -gno-strict-dwarf\" }\n+// { dg-final { scan-assembler-not \" DW_AT_defaulted\" { xfail { powerpc-ibm-aix* } } } }\n+\n+struct Foo\n+{\n+};\n+\n+void\n+bar ()\n+{\n+  Foo foo;\n+}"}, {"sha": "7f42719d669c8c648eddd9a5052e76f398775a03", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/deleted-member-function.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdeleted-member-function.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdeleted-member-function.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdeleted-member-function.C?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-O -std=c++11 -g -dA -gno-strict-dwarf\" }\n-// { dg-final { scan-assembler-times \" DW_AT_GNU_deleted\" 2 { xfail { powerpc-ibm-aix* } } } }\n+// { dg-final { scan-assembler-times \" DW_AT_deleted\" 2 { xfail { powerpc-ibm-aix* } } } }\n \n struct Foo\n {"}, {"sha": "5a3843bde1c6f30d718ecbb1e748a102939c7741", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -1,3 +1,9 @@\n+2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/63240\n+\t* dwarf2.def (DW_AT_deleted, DW_AT_defaulted): New.\n+\t* dwarf2.h (enu dwarf_defaulted_attribute): New.\n+\n 2016-07-29  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* libiberty.h (MAX_ALLOCA_SIZE): New macro."}, {"sha": "67b2a5bd39d610995a1f8b24e757e8e86c6d81c7", "filename": "include/dwarf2.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/include%2Fdwarf2.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/include%2Fdwarf2.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.def?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -310,6 +310,8 @@ DW_AT (DW_AT_enum_class, 0x6d)\n DW_AT (DW_AT_linkage_name, 0x6e)\n /* DWARF 5.  */\n DW_AT (DW_AT_noreturn, 0x87)\n+DW_AT (DW_AT_deleted, 0x8a)\n+DW_AT (DW_AT_defaulted, 0x8b)\n \n DW_AT_DUP (DW_AT_lo_user, 0x2000) /* Implementation-defined range start.  */\n DW_AT_DUP (DW_AT_hi_user, 0x3fff) /* Implementation-defined range end.  */"}, {"sha": "d166a965db5cdd706f23aa6e7c5a65d511719fad", "filename": "include/dwarf2.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e366d7d807f8d06dc35570871ba2b723b78975af/include%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e366d7d807f8d06dc35570871ba2b723b78975af/include%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.h?ref=e366d7d807f8d06dc35570871ba2b723b78975af", "patch": "@@ -342,6 +342,14 @@ enum dwarf_macinfo_record_type\n     DW_MACINFO_vendor_ext = 255\n   };\n \n+/* DW_TAG_GNU_defaulted/DW_TAG_defaulted attributes.  */\n+enum dwarf_defaulted_attribute\n+  {\n+    DW_DEFAULTED_no = 0x00,\n+    DW_DEFAULTED_in_class = 0x01,\n+    DW_DEFAULTED_out_of_class = 0x02\n+  };\n+\n /* Names and codes for new style macro information.  */\n enum dwarf_macro_record_type\n   {"}]}