{"sha": "06a9b53f08369e3d1a88af7461685fca40519514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhOWI1M2YwODM2OWUzZDFhODhhZjc0NjE2ODVmY2E0MDUxOTUxNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-04T18:41:05Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-04T18:41:05Z"}, "message": "tree-ssa-ccp.c (set_rhs): Change function to return a bool.\n\n\n\t* tree-ssa-ccp.c (set_rhs): Change function to return a bool.\n\tEnsure the replacement rhs is valid gimple before performing\n\tthe substitution.  Return false if these sanity checks fail.\n\t(fold_stmt): Only set changed to true, if set_rhs returns true.\n\t(execute_fold_all_builtins): Only call modify_stmt if set_rhs\n\tsucceeds.\n\nFrom-SVN: r84091", "tree": {"sha": "b09498ce8cf001c12d71dcc6b23c6d3c16bf3ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09498ce8cf001c12d71dcc6b23c6d3c16bf3ca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a9b53f08369e3d1a88af7461685fca40519514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a9b53f08369e3d1a88af7461685fca40519514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a9b53f08369e3d1a88af7461685fca40519514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a9b53f08369e3d1a88af7461685fca40519514/comments", "author": null, "committer": null, "parents": [{"sha": "43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "a4d210ce78914074882f92e7b8d8ee6ef4b0700f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9b53f08369e3d1a88af7461685fca40519514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9b53f08369e3d1a88af7461685fca40519514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06a9b53f08369e3d1a88af7461685fca40519514", "patch": "@@ -1,3 +1,12 @@\n+2004-07-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree-ssa-ccp.c (set_rhs): Change function to return a bool.\n+\tEnsure the replacement rhs is valid gimple before performing\n+\tthe substitution.  Return false if these sanity checks fail.\n+\t(fold_stmt): Only set changed to true, if set_rhs returns true.\n+\t(execute_fold_all_builtins): Only call modify_stmt if set_rhs\n+\tsucceeds.\n+\n 2004-07-04  Richard Henderson  <rth@redhat.com>\n \n \tPR c/16348"}, {"sha": "70b91f26520179f36eba86e1e6fa34c75ce09741", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9b53f08369e3d1a88af7461685fca40519514/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9b53f08369e3d1a88af7461685fca40519514/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=06a9b53f08369e3d1a88af7461685fca40519514", "patch": "@@ -1,5 +1,5 @@\n /* Conditional constant propagation pass for the GNU compiler.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Adapted from original RTL SSA-CCP by Daniel Berlin <dberlin@dberlin.org>\n    Adapted to GIMPLE trees by Diego Novillo <dnovillo@redhat.com>\n \n@@ -141,7 +141,7 @@ static void dump_lattice_value (FILE *, const char *, value);\n static bool replace_uses_in (tree, bool *);\n static latticevalue likely_value (tree);\n static tree get_rhs (tree);\n-static void set_rhs (tree *, tree);\n+static bool set_rhs (tree *, tree);\n static value *get_value (tree);\n static value get_default_value (tree);\n static tree ccp_fold_builtin (tree, tree);\n@@ -2089,10 +2089,7 @@ fold_stmt (tree *stmt_p)\n   STRIP_USELESS_TYPE_CONVERSION (result);\n \n   if (result != rhs)\n-    {\n-      changed = true;\n-      set_rhs (stmt_p, result);\n-    }\n+    changed |= set_rhs (stmt_p, result);\n \n   return changed;\n }\n@@ -2130,12 +2127,26 @@ get_rhs (tree stmt)\n \n /* Set the main expression of *STMT_P to EXPR.  */\n \n-static void\n+static bool\n set_rhs (tree *stmt_p, tree expr)\n {\n   tree stmt = *stmt_p;\n-  enum tree_code code = TREE_CODE (stmt);\n+  enum tree_code code = TREE_CODE (expr);\n \n+  /* Verify the constant folded result is valid gimple.  */\n+  if (TREE_CODE_CLASS (code) == '2')\n+    {\n+      if (!is_gimple_val (TREE_OPERAND (expr, 0))\n+\t  || !is_gimple_val (TREE_OPERAND (expr, 1)))\n+\treturn false;\n+    }\n+  else if (TREE_CODE_CLASS (code) == '1')\n+    {\n+      if (!is_gimple_val (TREE_OPERAND (expr, 0)))\n+\treturn false;\n+    }\n+\n+  code = TREE_CODE (stmt);\n   if (code == MODIFY_EXPR)\n     TREE_OPERAND (stmt, 1) = expr;\n   else if (code == COND_EXPR)\n@@ -2196,6 +2207,8 @@ set_rhs (tree *stmt_p, tree expr)\n \t    }\n \t}\n     }\n+\n+  return true;\n }\n \n \n@@ -2510,8 +2523,8 @@ execute_fold_all_builtins (void)\n \t      print_generic_stmt (dump_file, *stmtp, dump_flags);\n \t    }\n \n-\t  set_rhs (stmtp, result);\n-\t  modify_stmt (*stmtp);\n+\t  if (set_rhs (stmtp, result))\n+\t    modify_stmt (*stmtp);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {"}]}