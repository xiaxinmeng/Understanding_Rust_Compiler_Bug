{"sha": "ef4c5e7855ea00a62487c0d34915d66946032172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0YzVlNzg1NWVhMDBhNjI0ODdjMGQzNDkxNWQ2Njk0NjAzMjE3Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-24T11:28:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-24T11:28:54Z"}, "message": "cp-tree.h (OVL_HIDDEN_P): New.\n\n\tgcc/cp/\n\t* cp-tree.h (OVL_HIDDEN_P): New.\n\t(ovl_iterator::hidden_p, ovl_iterator::reveal_node): New.\n\t(ovl_iterator::reveal_node): Declare.\n\t* tree.c (ovl_copy): Copy OVL_HIDDEN_P.\n\t(ovl_insert): Order on hiddenness.\n\t(ovl_iterator::reveal_node): New.\n\t* name-lookup.c (anticipated_builtin_p): New.\n\t(supplement_binding_1): Use it.\n\t(set_local_extern_decl_linkage): Use hidden_p.\n\t(do_pushdecl): Deal with unhiding a hidden decl, use\n\tanticipated_builtin_p.\n\t(do_nonmember_using_decl): Use anticipated_decl_p.\n\t(lookup_name_real_1): Use DECL_HIDDEN_P.\n\n\tgcc/testsuite/\n\t* g++.dg/lookup/extern-c-hidden.C: New.\n\t* g++.dg/lookup/extern-redecl1.C: New.\n\nFrom-SVN: r248406", "tree": {"sha": "de86db645e445af4e19f288d8422859e96b4e191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de86db645e445af4e19f288d8422859e96b4e191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4c5e7855ea00a62487c0d34915d66946032172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4c5e7855ea00a62487c0d34915d66946032172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4c5e7855ea00a62487c0d34915d66946032172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4c5e7855ea00a62487c0d34915d66946032172/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7fc9ae0aabaf8c95c524031659b0a17bf597c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc9ae0aabaf8c95c524031659b0a17bf597c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc9ae0aabaf8c95c524031659b0a17bf597c9e"}], "stats": {"total": 165, "additions": 144, "deletions": 21}, "files": [{"sha": "16e30fa43d796bd3565415fea1468a8f23a8f6c9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -1,3 +1,19 @@\n+2017-05-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (OVL_HIDDEN_P): New.\n+\t(ovl_iterator::hidden_p, ovl_iterator::reveal_node): New.\n+\t(ovl_iterator::reveal_node): Declare.\n+\t* tree.c (ovl_copy): Copy OVL_HIDDEN_P.\n+\t(ovl_insert): Order on hiddenness.\n+\t(ovl_iterator::reveal_node): New.\n+\t* name-lookup.c (anticipated_builtin_p): New.\n+\t(supplement_binding_1): Use it.\n+\t(set_local_extern_decl_linkage): Use hidden_p.\n+\t(do_pushdecl): Deal with unhiding a hidden decl, use\n+\tanticipated_builtin_p.\n+\t(do_nonmember_using_decl): Use anticipated_decl_p.\n+\t(lookup_name_real_1): Use DECL_HIDDEN_P.\n+\n 2017-05-23  Jason Merrill  <jason@redhat.com>\n \n \t-Wunused and C++17 structured bindings"}, {"sha": "7f1c632da1d0077c706b710340ed1494633de377", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -378,6 +378,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF, SCOPE_REF)\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n       CONSTRUCTOR_MUTABLE_POISON (in CONSTRUCTOR)\n+      OVL_HIDDEN_P (in OVERLOAD)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -659,6 +660,8 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n \n /* If set, this was imported in a using declaration.   */\n #define OVL_USING_P(NODE)\tTREE_LANG_FLAG_1 (OVERLOAD_CHECK (NODE))\n+/* If set, this overload is a hidden decl.  */\n+#define OVL_HIDDEN_P(NODE)\tTREE_LANG_FLAG_2 (OVERLOAD_CHECK (NODE))\n /* If set, this overload contains a nested overload.  */\n #define OVL_NESTED_P(NODE)\tTREE_LANG_FLAG_3 (OVERLOAD_CHECK (NODE))\n /* If set, this overload was constructed during lookup.  */\n@@ -729,15 +732,26 @@ class ovl_iterator\n   {\n     return TREE_CODE (ovl) == OVERLOAD && OVL_USING_P (ovl);\n   }\n+  bool hidden_p () const\n+  {\n+    return TREE_CODE (ovl) == OVERLOAD && OVL_HIDDEN_P (ovl);\n+  }\n+\n+ public:\n   tree remove_node (tree head)\n   {\n     return remove_node (head, ovl);\n   }\n+  tree reveal_node (tree head)\n+  {\n+    return reveal_node (head, ovl);\n+  }\n \n  private:\n-  /* We make this a static function to avoid the address of the\n+  /* We make these static functions to avoid the address of the\n      iterator escaping the local context.  */\n   static tree remove_node (tree head, tree node);\n+  static tree reveal_node (tree ovl, tree node);\n };\n \n /* Iterator over a (potentially) 2 dimensional overload, which is"}, {"sha": "57d85a5a017f7cca3b8489224c559088c3ddb9ec", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -1077,6 +1077,26 @@ strip_using_decl (tree decl)\n   return decl;\n }\n \n+/* Return true if OVL is an overload for an anticipated builtin.  */\n+\n+static bool\n+anticipated_builtin_p (tree ovl)\n+{\n+  if (TREE_CODE (ovl) != OVERLOAD)\n+    return false;\n+\n+  if (!OVL_HIDDEN_P (ovl))\n+    return false;\n+\n+  tree fn = OVL_FUNCTION (ovl);\n+  gcc_checking_assert (DECL_ANTICIPATED (fn));\n+\n+  if (DECL_HIDDEN_FRIEND_P (fn))\n+    return false;\n+\n+  return true;\n+}\n+\n /* BINDING records an existing declaration for a name in the current scope.\n    But, DECL is another declaration for that same identifier in the\n    same scope.  This is the `struct stat' hack whereby a non-typedef\n@@ -1131,9 +1151,7 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n \t   || target_bval == error_mark_node\n \t   /* If TARGET_BVAL is anticipated but has not yet been\n \t      declared, pretend it is not there at all.  */\n-\t   || (TREE_CODE (target_bval) == FUNCTION_DECL\n-\t       && DECL_ANTICIPATED (target_bval)\n-\t       && !DECL_HIDDEN_FRIEND_P (target_bval)))\n+\t   || anticipated_builtin_p (target_bval))\n     binding->value = decl;\n   else if (TREE_CODE (target_bval) == TYPE_DECL\n \t   && DECL_ARTIFICIAL (target_bval)\n@@ -1803,7 +1821,7 @@ set_local_extern_decl_linkage (tree decl, bool shadowed)\n \tloc_value = NULL_TREE;\n \n       for (ovl_iterator iter (loc_value); iter; ++iter)\n-\tif (!DECL_HIDDEN_P (*iter)\n+\tif (!iter.hidden_p ()\n \t    && (TREE_STATIC (*iter) || DECL_EXTERNAL (*iter))\n \t    && decls_match (*iter, decl))\n \t  {\n@@ -1931,15 +1949,34 @@ do_pushdecl (tree decl, bool is_friend)\n \tif (iter.using_p ())\n \t  ; /* Ignore using decls here.  */\n \telse if (tree match = duplicate_decls (decl, *iter, is_friend))\n-\t  return match;\n+\t  {\n+\t    if (iter.hidden_p ()\n+\t\t&& match != error_mark_node\n+\t\t&& !DECL_HIDDEN_P (match))\n+\t      {\n+\t\t/* Unhiding a previously hidden decl.  */\n+\t\ttree head = iter.reveal_node (old);\n+\t\tif (head != old)\n+\t\t  {\n+\t\t    if (!ns)\n+\t\t      update_local_overload (binding, head);\n+\t\t    binding->value = head;\n+\t\t  }\n+\n+\t\tif (TREE_CODE (match) == FUNCTION_DECL\n+\t\t    && DECL_EXTERN_C_P (match))\n+\t\t  /* We need to check and register the fn now.  */\n+\t\t  check_extern_c_conflict (match);\n+\t      }\n+\t    return match;\n+\t  }\n \n       /* We are pushing a new decl.  */\n \n-      /* Skip a hidden builtin we failed to match already.  */\n-      if (old && TREE_CODE (old) == FUNCTION_DECL\n-\t  && DECL_ANTICIPATED (old)\n-\t  && !DECL_HIDDEN_FRIEND_P (old))\n-\told = NULL_TREE;\n+      /* Skip a hidden builtin we failed to match already.  There can\n+\t only be one.  */\n+      if (old && anticipated_builtin_p (old))\n+\told = OVL_CHAIN (old);\n \n       check_template_shadow (decl);\n \n@@ -3045,8 +3082,7 @@ do_nonmember_using_decl (tree scope, tree name, tree *value_p, tree *type_p)\n \t\t    found = true;\n \t\t  else if (old.using_p ())\n \t\t    continue; /* This is a using decl. */\n-\t\t  else if (DECL_ANTICIPATED (old_fn)\n-\t\t\t   && !DECL_HIDDEN_FRIEND_P (old_fn))\n+\t\t  else if (old.hidden_p () && !DECL_HIDDEN_FRIEND_P (old_fn))\n \t\t    continue; /* This is an anticipated builtin.  */\n \t\t  else if (!matching_fn_p (new_fn, old_fn))\n \t\t    continue; /* Parameters do not match.  */\n@@ -3069,9 +3105,7 @@ do_nonmember_using_decl (tree scope, tree name, tree *value_p, tree *type_p)\n \t}\n       else if (value\n \t       /* Ignore anticipated builtins.  */\n-\t       && !(TREE_CODE (value) == FUNCTION_DECL\n-\t\t    && DECL_ANTICIPATED (value)\n-\t\t    && !DECL_HIDDEN_FRIEND_P (value))\n+\t       && !anticipated_builtin_p (value)\n \t       && !decls_match (lookup.value, value))\n \tdiagnose_name_conflict (lookup.value, value);\n       else\n@@ -5244,7 +5278,7 @@ lookup_name_real_1 (tree name, int prefer_type, int nonclass, bool block_p,\n \n \tif (binding)\n \t  {\n-\t    if (hidden_name_p (binding))\n+\t    if (TREE_CODE (binding) == TYPE_DECL && DECL_HIDDEN_P (binding))\n \t      {\n \t\t/* A non namespace-scope binding can only be hidden in the\n \t\t   presence of a local class, due to friend declarations."}, {"sha": "5ae9601aaef784b2205c423be146dd32bded1e5d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -2143,7 +2143,8 @@ ovl_copy (tree ovl)\n   TREE_TYPE (result) = TREE_TYPE (ovl);\n   OVL_FUNCTION (result) = OVL_FUNCTION (ovl);\n   OVL_CHAIN (result) = OVL_CHAIN (ovl);\n-  OVL_USING_P (ovl) = OVL_USING_P (ovl);\n+  OVL_HIDDEN_P (result) = OVL_HIDDEN_P (ovl);\n+  OVL_USING_P (result) = OVL_USING_P (ovl);\n \n   return result;\n }\n@@ -2156,14 +2157,16 @@ tree\n ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n {\n   bool copying = false; /* Checking use only.  */\n-  int weight = using_p;\n+  bool hidden_p = DECL_HIDDEN_P (fn);\n+  int weight = (hidden_p << 1) | (using_p << 0);\n \n   tree result = NULL_TREE;\n   tree insert_after = NULL_TREE;\n \n   /* Find insertion point.  */\n   while (maybe_ovl && TREE_CODE (maybe_ovl) == OVERLOAD\n-\t && (weight < OVL_USING_P (maybe_ovl)))\n+\t && (weight < ((OVL_HIDDEN_P (maybe_ovl) << 1)\n+\t\t       | (OVL_USING_P (maybe_ovl) << 0))))\n     {\n       gcc_checking_assert (!OVL_LOOKUP_P (maybe_ovl)\n \t\t\t   && (!OVL_USED_P (maybe_ovl) || !copying));\n@@ -2181,9 +2184,11 @@ ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n     }\n \n   tree trail = fn;\n-  if (maybe_ovl || using_p || TREE_CODE (fn) == TEMPLATE_DECL)\n+  if (maybe_ovl || using_p || hidden_p || TREE_CODE (fn) == TEMPLATE_DECL)\n     {\n       trail = ovl_make (fn, maybe_ovl);\n+      if (hidden_p)\n+\tOVL_HIDDEN_P (trail) = true;\n       if (using_p)\n \tOVL_USING_P (trail) = true;\n     }\n@@ -2199,6 +2204,28 @@ ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n   return result;\n }\n \n+/* NODE is an OVL_HIDDEN_P node which is now revealed.  */\n+\n+tree\n+ovl_iterator::reveal_node (tree overload, tree node)\n+{\n+  /* We cannot have returned NODE as part of a lookup overload, so it\n+     cannot be USED.  */\n+  gcc_checking_assert (!OVL_USED_P (node));\n+\n+  OVL_HIDDEN_P (node) = false;\n+  if (tree chain = OVL_CHAIN (node))\n+    if (TREE_CODE (chain) == OVERLOAD\n+\t&& (OVL_USING_P (chain) || OVL_HIDDEN_P (chain)))\n+      {\n+\t/* The node needs moving, and the simplest way is to remove it\n+\t   and reinsert.  */\n+\toverload = remove_node (overload, node);\n+\toverload = ovl_insert (OVL_FUNCTION (node), overload);\n+      }\n+  return overload;\n+}\n+\n /* NODE is on the overloads of OVL.  Remove it.  If a predecessor is\n    OVL_USED_P we must copy OVL nodes, because those are immutable.\n    The removed node is unaltered and may continue to be iterated"}, {"sha": "d8d16eebb8bf9f83c81a0732dc74083faf2ea666", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -1,5 +1,8 @@\n 2017-05-23  Nathan Sidwell  <nathan@acm.org>\n \n+\t* g++.dg/lookup/extern-c-hidden.C: New.\n+\t* g++.dg/lookup/extern-redecl1.C: New.\n+\n \tPR c++/80866\n \t* g++.dg/parse/pr80866.C: New.\n "}, {"sha": "a03dea0237625162408e078ab5c9b5e57110c57b", "filename": "gcc/testsuite/g++.dg/lookup/extern-c-hidden.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-hidden.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-hidden.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-hidden.C?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -0,0 +1,11 @@\n+// Make sure unhidding an extern-c still checks it is compatible\n+\n+extern \"C\" float fabsf (float);  // { dg-error \"conflicts with previous declaration\" }\n+\n+namespace Bob \n+{\n+  extern \"C\" float fabsf (float, float); // { dg-error \"C language\" }\n+  extern \"C\" double fabs (double, double); // { dg-error \"conflicts with previous declaration\" }\n+}\n+\n+extern \"C\" double fabs (double); // { dg-error \"C language\" }"}, {"sha": "18e675b4f3da15ee2b0a19ae80224f67680bf3fb", "filename": "gcc/testsuite/g++.dg/lookup/extern-redecl1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-redecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4c5e7855ea00a62487c0d34915d66946032172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-redecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-redecl1.C?ref=ef4c5e7855ea00a62487c0d34915d66946032172", "patch": "@@ -0,0 +1,18 @@\n+extern int X; // { dg-message \"previous declaration\" }\n+extern int Y (int);  // { dg-message \"previous declaration\" }\n+extern int Y (float);\n+\n+static int Z (int s)\n+{\n+  return s;\n+}\n+\n+void Foo ()\n+{\n+  extern char X; // { dg-error \"local external declaration\" }\n+  extern char Y (int); // { dg-error \"local external declaration\" }\n+  extern int Y (float);\n+  extern void Y (double);\n+  extern char Z (int);\n+}\n+"}]}