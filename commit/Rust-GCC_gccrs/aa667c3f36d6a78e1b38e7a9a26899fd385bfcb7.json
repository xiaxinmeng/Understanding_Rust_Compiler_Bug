{"sha": "aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2NjdjM2YzNmQ2YTc4ZTFiMzhlN2E5YTI2ODk5ZmQzODViZmNiNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-17T21:13:28Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-18T16:06:50Z"}, "message": "libstdc++: P2106R0 Alternative wording for GB315 and GB316\n\nlibstdc++-v3/ChangeLog:\n\n\tP2106R0 Alternative wording for GB315 and GB316\n\t* include/bits/ranges_algo.h (in_fun_result): New.\n\t(for_each_result, for_each_n_result): Change into an alias of\n\tin_fun_result.\n\t(in_in_result): New.\n\t(mismatch_result): Change into an alias of in_in_result.\n\t(copy_if_result): Change into an alias of in_out_result.\n\t(swap_ranges_result): Change into an alias of in_in_result.\n\t(unary_transform_result): Change into an alias of in_out_result.\n\t(in_in_out_result): New.\n\t(binary_transform_result): Change into an alias of in_in_out_result.\n\t(replace_copy_result, replace_copy_if_result, remove_copy_if_result,\n\tremove_copy_result, unique_copy_result, reverse_copy_result,\n\trotate_copy_result, partial_sort_copy_result): Change into an alias of\n\tin_out_result.\n\t(in_out_out_result): New.\n\t(partition_copy_result, merge_result): Change into an alias of\n\tin_out_out_result.\n\t(set_union_result, set_intersection_result): Change into an alias of\n\tin_in_out_result.\n\t(set_difference_result): Change into an alias of in_out_result.\n\t(set_symmetric_difference): Change into an alias of in_in_out_result.\n\t(min_max_result): New.\n\t(minmax_result, minmax_element_result): Change into an alias of\n\tmin_max_result.\n\t(in_found_result): New.\n\t(next_permutation_result, prev_permutation_result): Change into an alias\n\tof in_found_result.\n\t(__next_permutation_fn::operator(), __prev_permutation_fn::operator()):\n\tAdjust following changes to next_permutation_result and\n\tprev_permutation_result.\n\t* include/bits/ranges_algobase.h (in_out_result): New.\n\t(copy_result, move_result, move_backward_result, copy_backward_result,\n\tcopy_n_result): Change into an alias of in_out_result.\n\t* include/bits/ranges_uninitialized.h (uninitialized_copy_result,\n\tuninitialized_copy_n_result, uninitialized_move_result,\n\tuninitialized_move_n_result): Likewise.\n\t* testsuite/25_algorithms/next_permutation/constrained.cc: Adjust uses of\n\tstructured bindings.\n\t* testsuite/25_algorithms/prev_permutation/constrained.cc: Likewise.", "tree": {"sha": "fc2f0670bbd0c2cb3c7ea972722884b0c5e17252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2f0670bbd0c2cb3c7ea972722884b0c5e17252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/comments", "author": null, "committer": null, "parents": [{"sha": "f3169941996c76ecbfae9c37709d2b57652be555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3169941996c76ecbfae9c37709d2b57652be555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3169941996c76ecbfae9c37709d2b57652be555"}], "stats": {"total": 213, "additions": 149, "deletions": 64}, "files": [{"sha": "ea53bb7269fddfbc379c34d48f2891213308e76c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "patch": "@@ -1,5 +1,46 @@\n 2020-02-17  Patrick Palka  <ppalka@redhat.com>\n \n+\tP2106R0 Alternative wording for GB315 and GB316\n+\t* include/bits/ranges_algo.h (in_fun_result): New.\n+\t(for_each_result, for_each_n_result): Change into an alias of\n+\tin_fun_result.\n+\t(in_in_result): New.\n+\t(mismatch_result): Change into an alias of in_in_result.\n+\t(copy_if_result): Change into an alias of in_out_result.\n+\t(swap_ranges_result): Change into an alias of in_in_result.\n+\t(unary_transform_result): Change into an alias of in_out_result.\n+\t(in_in_out_result): New.\n+\t(binary_transform_result): Change into an alias of in_in_out_result.\n+\t(replace_copy_result, replace_copy_if_result, remove_copy_if_result,\n+\tremove_copy_result, unique_copy_result, reverse_copy_result,\n+\trotate_copy_result, partial_sort_copy_result): Change into an alias of\n+\tin_out_result.\n+\t(in_out_out_result): New.\n+\t(partition_copy_result, merge_result): Change into an alias of\n+\tin_out_out_result.\n+\t(set_union_result, set_intersection_result): Change into an alias of\n+\tin_in_out_result.\n+\t(set_difference_result): Change into an alias of in_out_result.\n+\t(set_symmetric_difference): Change into an alias of in_in_out_result.\n+\t(min_max_result): New.\n+\t(minmax_result, minmax_element_result): Change into an alias of\n+\tmin_max_result.\n+\t(in_found_result): New.\n+\t(next_permutation_result, prev_permutation_result): Change into an alias\n+\tof in_found_result.\n+\t(__next_permutation_fn::operator(), __prev_permutation_fn::operator()):\n+\tAdjust following changes to next_permutation_result and\n+\tprev_permutation_result.\n+\t* include/bits/ranges_algobase.h (in_out_result): New.\n+\t(copy_result, move_result, move_backward_result, copy_backward_result,\n+\tcopy_n_result): Change into an alias of in_out_result.\n+\t* include/bits/ranges_uninitialized.h (uninitialized_copy_result,\n+\tuninitialized_copy_n_result, uninitialized_move_result,\n+\tuninitialized_move_n_result): Likewise.\n+\t* testsuite/25_algorithms/next_permutation/constrained.cc: Adjust uses of\n+\tstructured bindings.\n+\t* testsuite/25_algorithms/prev_permutation/constrained.cc: Likewise.\n+\n \tP1243R4 Rangify new algorithms\n \t* include/bits/ranges_algo.h (for_each_n_result, __for_each_n_fn,\n \tfor_each_n, __sample_fn, sample, __clamp_fn, clamp): New."}, {"sha": "31b1bf0d448ab5af0d6ff61ca3c271d3ffa94529", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 88, "deletions": 49, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "patch": "@@ -152,23 +152,28 @@ namespace ranges\n   inline constexpr __none_of_fn none_of{};\n \n   template<typename _Iter, typename _Fp>\n-    struct for_each_result\n+    struct in_fun_result\n     {\n       [[no_unique_address]] _Iter in;\n       [[no_unique_address]] _Fp fun;\n \n       template<typename _Iter2, typename _F2p>\n \trequires convertible_to<const _Iter&, _Iter2>\n \t  && convertible_to<const _Fp&, _F2p>\n-\toperator for_each_result<_Iter2, _F2p>() const &\n+\tconstexpr\n+\toperator in_fun_result<_Iter2, _F2p>() const &\n \t{ return {in, fun}; }\n \n       template<typename _Iter2, typename _F2p>\n \trequires convertible_to<_Iter, _Iter2> && convertible_to<_Fp, _F2p>\n-\toperator for_each_result<_Iter2, _F2p>() &&\n+\tconstexpr\n+\toperator in_fun_result<_Iter2, _F2p>() &&\n \t{ return {std::move(in), std::move(fun)}; }\n     };\n \n+  template<typename _Iter, typename _Fp>\n+    using for_each_result = in_fun_result<_Iter, _Fp>;\n+\n   struct __for_each_fn\n   {\n     template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n@@ -196,7 +201,7 @@ namespace ranges\n   inline constexpr __for_each_fn for_each{};\n \n   template<typename _Iter, typename _Fp>\n-    using for_each_n_result = for_each_result<_Iter, _Fp>;\n+    using for_each_n_result = in_fun_result<_Iter, _Fp>;\n \n   struct __for_each_n_fn\n   {\n@@ -416,24 +421,29 @@ namespace ranges\n   inline constexpr __count_if_fn count_if{};\n \n   template<typename _Iter1, typename _Iter2>\n-    struct mismatch_result\n+    struct in_in_result\n     {\n       [[no_unique_address]] _Iter1 in1;\n       [[no_unique_address]] _Iter2 in2;\n \n       template<typename _IIter1, typename _IIter2>\n \trequires convertible_to<const _Iter1&, _IIter1>\n \t  && convertible_to<const _Iter2&, _IIter2>\n-\toperator mismatch_result<_IIter1, _IIter2>() const &\n+\tconstexpr\n+\toperator in_in_result<_IIter1, _IIter2>() const &\n \t{ return {in1, in2}; }\n \n       template<typename _IIter1, typename _IIter2>\n \trequires convertible_to<_Iter1, _IIter1>\n \t  && convertible_to<_Iter2, _IIter2>\n-\toperator mismatch_result<_IIter1, _IIter2>() &&\n+\tconstexpr\n+\toperator in_in_result<_IIter1, _IIter2>() &&\n \t{ return {std::move(in1), std::move(in2)}; }\n     };\n \n+  template<typename _Iter1, typename _Iter2>\n+    using mismatch_result = in_in_result<_Iter1, _Iter2>;\n+\n   struct __mismatch_fn\n   {\n     template<input_iterator _Iter1, sentinel_for<_Iter1> _Sent1,\n@@ -830,7 +840,7 @@ namespace ranges\n   inline constexpr __is_permutation_fn is_permutation{};\n \n   template<typename _Iter, typename _Out>\n-    using copy_if_result = copy_result<_Iter, _Out>;\n+    using copy_if_result = in_out_result<_Iter, _Out>;\n \n   struct __copy_if_fn\n   {\n@@ -869,7 +879,7 @@ namespace ranges\n   inline constexpr __copy_if_fn copy_if{};\n \n   template<typename _Iter1, typename _Iter2>\n-    using swap_ranges_result = mismatch_result<_Iter1, _Iter2>;\n+    using swap_ranges_result = in_in_result<_Iter1, _Iter2>;\n \n   struct __swap_ranges_fn\n   {\n@@ -900,10 +910,10 @@ namespace ranges\n   inline constexpr __swap_ranges_fn swap_ranges{};\n \n   template<typename _Iter, typename _Out>\n-    using unary_transform_result = copy_result<_Iter, _Out>;\n+    using unary_transform_result = in_out_result<_Iter, _Out>;\n \n   template<typename _Iter1, typename _Iter2, typename _Out>\n-    struct binary_transform_result\n+    struct in_in_out_result\n     {\n       [[no_unique_address]] _Iter1 in1;\n       [[no_unique_address]] _Iter2 in2;\n@@ -913,17 +923,22 @@ namespace ranges\n \trequires convertible_to<const _Iter1&, _IIter1>\n \t  && convertible_to<const _Iter2&, _IIter2>\n \t  && convertible_to<const _Out&, _OOut>\n-\toperator binary_transform_result<_IIter1, _IIter2, _OOut>() const &\n+\tconstexpr\n+\toperator in_in_out_result<_IIter1, _IIter2, _OOut>() const &\n \t{ return {in1, in2, out}; }\n \n       template<typename _IIter1, typename _IIter2, typename _OOut>\n \trequires convertible_to<_Iter1, _IIter1>\n \t  && convertible_to<_Iter2, _IIter2>\n \t  && convertible_to<_Out, _OOut>\n-\toperator binary_transform_result<_IIter1, _IIter2, _OOut>() &&\n+\tconstexpr\n+\toperator in_in_out_result<_IIter1, _IIter2, _OOut>() &&\n \t{ return {std::move(in1), std::move(in2), std::move(out)}; }\n     };\n \n+  template<typename _Iter1, typename _Iter2, typename _Out>\n+    using binary_transform_result = in_in_out_result<_Iter1, _Iter2, _Out>;\n+\n   struct __transform_fn\n   {\n     template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n@@ -1065,7 +1080,7 @@ namespace ranges\n   inline constexpr __replace_if_fn replace_if{};\n \n   template<typename _Iter, typename _Out>\n-    using replace_copy_result = copy_result<_Iter, _Out>;\n+    using replace_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __replace_copy_fn\n   {\n@@ -1108,7 +1123,7 @@ namespace ranges\n   inline constexpr __replace_copy_fn replace_copy{};\n \n   template<typename _Iter, typename _Out>\n-    using replace_copy_if_result = copy_result<_Iter, _Out>;\n+    using replace_copy_if_result = in_out_result<_Iter, _Out>;\n \n   struct __replace_copy_if_fn\n   {\n@@ -1261,7 +1276,7 @@ namespace ranges\n   inline constexpr __remove_fn remove{};\n \n   template<typename _Iter, typename _Out>\n-    using remove_copy_if_result = copy_result<_Iter, _Out>;\n+    using remove_copy_if_result = in_out_result<_Iter, _Out>;\n \n   struct __remove_copy_if_fn\n   {\n@@ -1300,7 +1315,7 @@ namespace ranges\n   inline constexpr __remove_copy_if_fn remove_copy_if{};\n \n   template<typename _Iter, typename _Out>\n-    using remove_copy_result = copy_result<_Iter, _Out>;\n+    using remove_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __remove_copy_fn\n   {\n@@ -1379,7 +1394,7 @@ namespace ranges\n   inline constexpr __unique_fn unique{};\n \n   template<typename _Iter, typename _Out>\n-    using unique_copy_result = copy_result<_Iter, _Out>;\n+    using unique_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __unique_copy_fn\n   {\n@@ -1514,7 +1529,7 @@ namespace ranges\n   inline constexpr __reverse_fn reverse{};\n \n   template<typename _Iter, typename _Out>\n-    using reverse_copy_result = copy_result<_Iter, _Out>;\n+    using reverse_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __reverse_copy_fn\n   {\n@@ -1695,7 +1710,7 @@ namespace ranges\n   inline constexpr __rotate_fn rotate{};\n \n   template<typename _Iter, typename _Out>\n-    using rotate_copy_result = copy_result<_Iter, _Out>;\n+    using rotate_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __rotate_copy_fn\n   {\n@@ -2093,7 +2108,7 @@ namespace ranges\n   inline constexpr __partial_sort_fn partial_sort{};\n \n   template<typename _Iter, typename _Out>\n-    using partial_sort_copy_result = copy_result<_Iter, _Out>;\n+    using partial_sort_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __partial_sort_copy_fn\n   {\n@@ -2580,28 +2595,33 @@ namespace ranges\n \n   inline constexpr __stable_partition_fn stable_partition{};\n \n-  template<typename _Iter, typename _Out1, typename _O2>\n-    struct partition_copy_result\n+  template<typename _Iter, typename _Out1, typename _Out2>\n+    struct in_out_out_result\n     {\n       [[no_unique_address]] _Iter  in;\n       [[no_unique_address]] _Out1 out1;\n-      [[no_unique_address]] _O2 out2;\n+      [[no_unique_address]] _Out2 out2;\n \n       template<typename _IIter, typename _OOut1, typename _OOut2>\n \trequires convertible_to<const _Iter&, _IIter>\n \t  && convertible_to<const _Out1&, _OOut1>\n-\t  && convertible_to<const _O2&, _OOut2>\n-\toperator partition_copy_result<_IIter, _OOut1, _OOut2>() const &\n+\t  && convertible_to<const _Out2&, _OOut2>\n+\tconstexpr\n+\toperator in_out_out_result<_IIter, _OOut1, _OOut2>() const &\n \t{ return {in, out1, out2}; }\n \n       template<typename _IIter, typename _OOut1, typename _OOut2>\n \trequires convertible_to<_Iter, _IIter>\n \t  && convertible_to<_Out1, _OOut1>\n-\t  && convertible_to<_O2, _OOut2>\n-\toperator partition_copy_result<_IIter, _OOut1, _OOut2>() &&\n+\t  && convertible_to<_Out2, _OOut2>\n+\tconstexpr\n+\toperator in_out_out_result<_IIter, _OOut1, _OOut2>() &&\n \t{ return {std::move(in), std::move(out1), std::move(out2)}; }\n     };\n \n+  template<typename _Iter, typename _Out1, typename _Out2>\n+    using partition_copy_result = in_out_out_result<_Iter, _Out1, _Out2>;\n+\n   struct __partition_copy_fn\n   {\n     template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n@@ -2692,7 +2712,7 @@ namespace ranges\n   inline constexpr __partition_point_fn partition_point{};\n \n   template<typename _Iter1, typename _Iter2, typename _Out>\n-    using merge_result = binary_transform_result<_Iter1, _Iter2, _Out>;\n+    using merge_result = in_in_out_result<_Iter1, _Iter2, _Out>;\n \n   struct __merge_fn\n   {\n@@ -2834,7 +2854,7 @@ namespace ranges\n   inline constexpr __includes_fn includes{};\n \n   template<typename _Iter1, typename _Iter2, typename _Out>\n-    using set_union_result = binary_transform_result<_Iter1, _Iter2, _Out>;\n+    using set_union_result = in_in_out_result<_Iter1, _Iter2, _Out>;\n \n   struct __set_union_fn\n   {\n@@ -2902,8 +2922,7 @@ namespace ranges\n   inline constexpr __set_union_fn set_union{};\n \n   template<typename _Iter1, typename _Iter2, typename _Out>\n-    using set_intersection_result\n-      = binary_transform_result<_Iter1, _Iter2, _Out>;\n+    using set_intersection_result = in_in_out_result<_Iter1, _Iter2, _Out>;\n \n   struct __set_intersection_fn\n   {\n@@ -2961,7 +2980,7 @@ namespace ranges\n   inline constexpr __set_intersection_fn set_intersection{};\n \n   template<typename _Iter, typename _Out>\n-    using set_difference_result = copy_result<_Iter, _Out>;\n+    using set_difference_result = in_out_result<_Iter, _Out>;\n \n   struct __set_difference_fn\n   {\n@@ -3019,7 +3038,7 @@ namespace ranges\n \n   template<typename _Iter1, typename _Iter2, typename _Out>\n     using set_symmetric_difference_result\n-      = binary_transform_result<_Iter1, _Iter2, _Out>;\n+      = in_in_out_result<_Iter1, _Iter2, _Out>;\n \n   struct __set_symmetric_difference_fn\n   {\n@@ -3218,22 +3237,27 @@ namespace ranges\n   inline constexpr __clamp_fn clamp{};\n \n   template<typename _Tp>\n-    struct minmax_result\n+    struct min_max_result\n     {\n       [[no_unique_address]] _Tp min;\n       [[no_unique_address]] _Tp max;\n \n       template<typename _Tp2>\n \trequires convertible_to<const _Tp&, _Tp2>\n-\toperator minmax_result<_Tp2>() const &\n+\tconstexpr\n+\toperator min_max_result<_Tp2>() const &\n \t{ return {min, max}; }\n \n       template<typename _Tp2>\n \trequires convertible_to<_Tp, _Tp2>\n-\toperator minmax_result<_Tp2>() &&\n+\tconstexpr\n+\toperator min_max_result<_Tp2>() &&\n \t{ return {std::move(min), std::move(max)}; }\n     };\n \n+  template<typename _Tp>\n+    using minmax_result = min_max_result<_Tp>;\n+\n   struct __minmax_fn\n   {\n     template<typename _Tp, typename _Proj = identity,\n@@ -3367,7 +3391,7 @@ namespace ranges\n   inline constexpr __max_element_fn max_element{};\n \n   template<typename _Iter>\n-    using minmax_element_result = minmax_result<_Iter>;\n+    using minmax_element_result = min_max_result<_Iter>;\n \n   struct __minmax_element_fn\n   {\n@@ -3516,12 +3540,27 @@ namespace ranges\n   inline constexpr __lexicographical_compare_fn lexicographical_compare;\n \n   template<typename _Iter>\n-    struct next_permutation_result\n+    struct in_found_result\n     {\n+      [[no_unique_address]] _Iter in;\n       bool found;\n-      _Iter in;\n+\n+      template<typename _Iter2>\n+\trequires convertible_to<const _Iter&, _Iter2>\n+\tconstexpr\n+\toperator in_found_result<_Iter2>() const &\n+\t{ return {in, found}; }\n+\n+      template<typename _Iter2>\n+\trequires convertible_to<_Iter, _Iter2>\n+\tconstexpr\n+\toperator in_found_result<_Iter2>() &&\n+\t{ return {std::move(in), found}; }\n     };\n \n+  template<typename _Iter>\n+    using next_permutation_result = in_found_result<_Iter>;\n+\n   struct __next_permutation_fn\n   {\n     template<bidirectional_iterator _Iter, sentinel_for<_Iter> _Sent,\n@@ -3532,12 +3571,12 @@ namespace ranges\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n-\t  return {false, std::move(__first)};\n+\t  return {std::move(__first), false};\n \n \tauto __i = __first;\n \t++__i;\n \tif (__i == __last)\n-\t  return {false, std::move(__i)};\n+\t  return {std::move(__i), false};\n \n \tauto __lasti = ranges::next(__first, __last);\n \t__i = __lasti;\n@@ -3558,12 +3597,12 @@ namespace ranges\n \t\t  ;\n \t\tranges::iter_swap(__i, __j);\n \t\tranges::reverse(__ii, __last);\n-\t\treturn {true, std::move(__lasti)};\n+\t\treturn {std::move(__lasti), true};\n \t      }\n \t    if (__i == __first)\n \t      {\n \t\tranges::reverse(__first, __last);\n-\t\treturn {false, std::move(__lasti)};\n+\t\treturn {std::move(__lasti), false};\n \t      }\n \t  }\n       }\n@@ -3582,7 +3621,7 @@ namespace ranges\n   inline constexpr __next_permutation_fn next_permutation{};\n \n   template<typename _Iter>\n-    using prev_permutation_result = next_permutation_result<_Iter>;\n+    using prev_permutation_result = in_found_result<_Iter>;\n \n   struct __prev_permutation_fn\n   {\n@@ -3594,12 +3633,12 @@ namespace ranges\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n-\t  return {false, std::move(__first)};\n+\t  return {std::move(__first), false};\n \n \tauto __i = __first;\n \t++__i;\n \tif (__i == __last)\n-\t  return {false, std::move(__i)};\n+\t  return {std::move(__i), false};\n \n \tauto __lasti = ranges::next(__first, __last);\n \t__i = __lasti;\n@@ -3620,12 +3659,12 @@ namespace ranges\n \t\t  ;\n \t\tranges::iter_swap(__i, __j);\n \t\tranges::reverse(__ii, __last);\n-\t\treturn {true, std::move(__lasti)};\n+\t\treturn {std::move(__lasti), true};\n \t      }\n \t    if (__i == __first)\n \t      {\n \t\tranges::reverse(__first, __last);\n-\t\treturn {false, std::move(__lasti)};\n+\t\treturn {std::move(__lasti), false};\n \t      }\n \t  }\n       }"}, {"sha": "7424766f053923a227c0173e0317f631e66c2c45", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "patch": "@@ -157,32 +157,37 @@ namespace ranges\n   inline constexpr __equal_fn equal{};\n \n   template<typename _Iter, typename _Out>\n-    struct copy_result\n+    struct in_out_result\n     {\n       [[no_unique_address]] _Iter in;\n       [[no_unique_address]] _Out out;\n \n       template<typename _Iter2, typename _Out2>\n \trequires convertible_to<const _Iter&, _Iter2>\n \t  && convertible_to<const _Out&, _Out2>\n-\toperator copy_result<_Iter2, _Out2>() const &\n+\tconstexpr\n+\toperator in_out_result<_Iter2, _Out2>() const &\n \t{ return {in, out}; }\n \n       template<typename _Iter2, typename _Out2>\n \trequires convertible_to<_Iter, _Iter2>\n \t  && convertible_to<_Out, _Out2>\n-\toperator copy_result<_Iter2, _Out2>() &&\n+\tconstexpr\n+\toperator in_out_result<_Iter2, _Out2>() &&\n \t{ return {std::move(in), std::move(out)}; }\n     };\n \n   template<typename _Iter, typename _Out>\n-    using move_result = copy_result<_Iter, _Out>;\n+    using copy_result = in_out_result<_Iter, _Out>;\n+\n+  template<typename _Iter, typename _Out>\n+    using move_result = in_out_result<_Iter, _Out>;\n \n   template<typename _Iter1, typename _Iter2>\n-    using move_backward_result = copy_result<_Iter1, _Iter2>;\n+    using move_backward_result = in_out_result<_Iter1, _Iter2>;\n \n   template<typename _Iter1, typename _Iter2>\n-    using copy_backward_result = copy_result<_Iter1, _Iter2>;\n+    using copy_backward_result = in_out_result<_Iter1, _Iter2>;\n \n   template<bool _IsMove,\n \t   bidirectional_iterator _Iter, sentinel_for<_Iter> _Sent,\n@@ -483,7 +488,7 @@ namespace ranges\n   inline constexpr __move_backward_fn move_backward{};\n \n   template<typename _Iter, typename _Out>\n-    using copy_n_result = copy_result<_Iter, _Out>;\n+    using copy_n_result = in_out_result<_Iter, _Out>;\n \n   struct __copy_n_fn\n   {"}, {"sha": "881bf39d5f859fc40d81ae28536b3842bc3db4a2", "filename": "libstdc++-v3/include/bits/ranges_uninitialized.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h?ref=aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "patch": "@@ -253,7 +253,7 @@ namespace ranges\n     uninitialized_value_construct_n;\n \n   template<typename _Iter, typename _Out>\n-    using uninitialized_copy_result = copy_result<_Iter, _Out>;\n+    using uninitialized_copy_result = in_out_result<_Iter, _Out>;\n \n   struct __uninitialized_copy_fn\n   {\n@@ -302,7 +302,7 @@ namespace ranges\n   inline constexpr __uninitialized_copy_fn uninitialized_copy{};\n \n   template<typename _Iter, typename _Out>\n-    using uninitialized_copy_n_result = uninitialized_copy_result<_Iter, _Out>;\n+    using uninitialized_copy_n_result = in_out_result<_Iter, _Out>;\n \n   struct __uninitialized_copy_n_fn\n   {\n@@ -337,7 +337,7 @@ namespace ranges\n   inline constexpr __uninitialized_copy_n_fn uninitialized_copy_n{};\n \n   template<typename _Iter, typename _Out>\n-    using uninitialized_move_result = uninitialized_copy_result<_Iter, _Out>;\n+    using uninitialized_move_result = in_out_result<_Iter, _Out>;\n \n   struct __uninitialized_move_fn\n   {\n@@ -389,7 +389,7 @@ namespace ranges\n   inline constexpr __uninitialized_move_fn uninitialized_move{};\n \n   template<typename _Iter, typename _Out>\n-    using uninitialized_move_n_result = uninitialized_copy_result<_Iter, _Out>;\n+    using uninitialized_move_n_result = in_out_result<_Iter, _Out>;\n \n   struct __uninitialized_move_n_fn\n   {"}, {"sha": "b397a4e8ed79ea89c27212cf0de668218cbc0811", "filename": "libstdc++-v3/testsuite/25_algorithms/next_permutation/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fconstrained.cc?ref=aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "patch": "@@ -41,7 +41,7 @@ test01()\n       for (int j = 0; ; j++)\n \t{\n \t  auto found1 = std::next_permutation(cx.begin(), cx.end());\n-\t  auto [found2,last] = ranges::next_permutation(cy.begin(), cy.end());\n+\t  auto [last,found2] = ranges::next_permutation(cy.begin(), cy.end());\n \t  VERIFY( found1 == found2 );\n \t  VERIFY( ranges::equal(cx, cy) );\n \t  if (!found2)\n@@ -55,7 +55,7 @@ test02()\n {\n   int x[] = {5, 4, 3, 2, 1};\n   test_range<int, bidirectional_iterator_wrapper> rx(x);\n-  auto [found,last] = ranges::next_permutation(rx, ranges::greater{});\n+  auto [last,found] = ranges::next_permutation(rx, ranges::greater{});\n   VERIFY( found && last == rx.end() );\n   VERIFY( last == rx.end() );\n   VERIFY( ranges::equal(rx, (int[]){5,4,3,1,2}) );"}, {"sha": "22f1329b4c7f2fe550750e1e738d29bbc3261e11", "filename": "libstdc++-v3/testsuite/25_algorithms/prev_permutation/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fconstrained.cc?ref=aa667c3f36d6a78e1b38e7a9a26899fd385bfcb7", "patch": "@@ -41,7 +41,7 @@ test01()\n       for (int j = 0; ; j++)\n \t{\n \t  auto found1 = std::prev_permutation(cx.begin(), cx.end());\n-\t  auto [found2,last] = ranges::prev_permutation(cy.begin(), cy.end());\n+\t  auto [last,found2] = ranges::prev_permutation(cy.begin(), cy.end());\n \t  VERIFY( found1 == found2 );\n \t  VERIFY( ranges::equal(cx, cy) );\n \t  if (!found2)\n@@ -55,7 +55,7 @@ test02()\n {\n   int x[] = {1, 2, 3, 4, 5};\n   test_range<int, bidirectional_iterator_wrapper> rx(x);\n-  auto [found,last] = ranges::prev_permutation(rx, ranges::greater{});\n+  auto [last,found] = ranges::prev_permutation(rx, ranges::greater{});\n   VERIFY( found && last == rx.end() );\n   VERIFY( last == rx.end() );\n   VERIFY( ranges::equal(rx, (int[]){1,2,3,5,4}) );"}]}