{"sha": "20ad60516cd61a30bda51a99f26d69752a727ad1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhZDYwNTE2Y2Q2MWEzMGJkYTUxYTk5ZjI2ZDY5NzUyYTcyN2FkMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-07T01:00:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-07T01:00:26Z"}, "message": "Makefile.am: Remove OPTIMIZE_CXXFLAGS, WARN_CXXFLAGS, CONFIG_CXXFLAGS from here, and move to...\n\n\n2000-10-06  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/Makefile.am: Remove OPTIMIZE_CXXFLAGS, WARN_CXXFLAGS,\n\tCONFIG_CXXFLAGS from here, and move to...\n\t* src/Makefile.in: Regenerate.\n\t* Makefile.am: ... here. Clean.\n\t(OPTIMIZE_CXXFLAGS): Move up Makefile hierarchy to here.\n\t(WARN_CXXFLAGS): Same.\n\t(CONFIG_CXXFLAGS): Same.\n\t* Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Use top-level OPTIMIZE_CXXFLAGS,\n\tWARN_CXXFLAGS, CONFIG_CXXFLAGS as part of local AM_CXXFLAGS.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\tChange math to libmath.\n\t* math: Move to libmath, delete.\n\t* libmath: New directory.\n\t* libmath/*: Populate.\n\t* src/Makefile.am (LIBMATH_INCLUDES): Change to libmath.\n\t(libstdc___la_LIBADD): Same.\n\t* src/Makefile.in: Regenerate.\n\t* configure.in: Add AC_OUTPUT for libmath/Makefile.\n\t* configure: Regenerate.\n\t* Makefile.am (SUBDIRS): Add libmath.\n\t* Makefile.in: Regenerate.\n\t* README (file): Change name.\n\nFrom-SVN: r36765", "tree": {"sha": "6d5121fe7fd28611cd7e9ac76754b4a405b8a4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d5121fe7fd28611cd7e9ac76754b4a405b8a4a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20ad60516cd61a30bda51a99f26d69752a727ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ad60516cd61a30bda51a99f26d69752a727ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ad60516cd61a30bda51a99f26d69752a727ad1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ad60516cd61a30bda51a99f26d69752a727ad1/comments", "author": null, "committer": null, "parents": [{"sha": "cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6"}], "stats": {"total": 4287, "additions": 0, "deletions": 4287}, "files": [{"sha": "605f42f548a4d3a2896cd7f3783e94d263f48ebd", "filename": "libstdc++-v3/math/Makefile.am", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.am?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,59 +0,0 @@\n-## Makefile for the math subdirectory of the GNU C++ Standard library.\n-##\n-## Copyright (C) 1997, 1998, 1999, 2000 Cygnus Solutions\n-##\n-## This file is part of the libstdc++ version 3 distribution.\n-## Process this file with automake to produce Makefile.in.\n-\n-## This file is part of the GNU ISO C++ Library.  This library is free\n-## software; you can redistribute it and/or modify it under the\n-## terms of the GNU General Public License as published by the\n-## Free Software Foundation; either version 2, or (at your option)\n-## any later version.\n-\n-## This library is distributed in the hope that it will be useful,\n-## but WITHOUT ANY WARRANTY; without even the implied warranty of\n-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-## GNU General Public License for more details.\n-\n-## You should have received a copy of the GNU General Public License along\n-## with this library; see the file COPYING.  If not, write to the Free\n-## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-## USA.\n-\n-AUTOMAKE_OPTIONS = 1.3 cygnus\n-\n-noinst_LTLIBRARIES = libmath.la\n-\n-EXTRA_LONG_DOUBLE_yes = \\\n-\tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \\\n-\tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \\\n-\tsignbitl.c cabsl.c \n-\n-EXTRA_DIST = \\\n-\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n-\tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n-\tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\\n-\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n-\tctanhf.c  carg.c cargf.c hypot.c hypotf.c\\\n-\tatan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n-\n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n-\n-libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n-\n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c cabs.c cabsf.c \n-\n-LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n-\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-INCLUDES = -I../include  $(TOPLEVEL_INCLUDES)\n-\n-\n-\n-\n-"}, {"sha": "4aab9ff93d582c742b5c903fffb967ea3f7db02d", "filename": "libstdc++-v3/math/Makefile.in", "status": "removed", "additions": 0, "deletions": 350, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,350 +0,0 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n-\n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n-# This Makefile.in is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n-\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n-# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n-# PARTICULAR PURPOSE.\n-\n-\n-SHELL = @SHELL@\n-\n-srcdir = @srcdir@\n-top_srcdir = @top_srcdir@\n-VPATH = @srcdir@\n-prefix = @prefix@\n-exec_prefix = @exec_prefix@\n-\n-bindir = @bindir@\n-sbindir = @sbindir@\n-libexecdir = @libexecdir@\n-datadir = @datadir@\n-sysconfdir = @sysconfdir@\n-sharedstatedir = @sharedstatedir@\n-localstatedir = @localstatedir@\n-libdir = @libdir@\n-infodir = @infodir@\n-mandir = @mandir@\n-includedir = @includedir@\n-oldincludedir = /usr/include\n-\n-DESTDIR =\n-\n-pkgdatadir = $(datadir)/@PACKAGE@\n-pkglibdir = $(libdir)/@PACKAGE@\n-pkgincludedir = $(includedir)/@PACKAGE@\n-\n-top_builddir = ..\n-\n-ACLOCAL = @ACLOCAL@\n-AUTOCONF = @AUTOCONF@\n-AUTOMAKE = @AUTOMAKE@\n-AUTOHEADER = @AUTOHEADER@\n-\n-INSTALL = @INSTALL@\n-INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n-INSTALL_DATA = @INSTALL_DATA@\n-INSTALL_SCRIPT = @INSTALL_SCRIPT@\n-transform = @program_transform_name@\n-\n-NORMAL_INSTALL = :\n-PRE_INSTALL = :\n-POST_INSTALL = :\n-NORMAL_UNINSTALL = :\n-PRE_UNINSTALL = :\n-POST_UNINSTALL = :\n-build_alias = @build_alias@\n-build_triplet = @build@\n-host_alias = @host_alias@\n-host_triplet = @host@\n-target_alias = @target_alias@\n-target_triplet = @target@\n-AR = @AR@\n-AS = @AS@\n-CC = @CC@\n-CPP = @CPP@\n-CPU_FLAGS = @CPU_FLAGS@\n-CSHADOWFLAGS = @CSHADOWFLAGS@\n-CXX = @CXX@\n-CXXCPP = @CXXCPP@\n-DEBUG_FLAGS = @DEBUG_FLAGS@\n-DLLTOOL = @DLLTOOL@\n-EXEEXT = @EXEEXT@\n-EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-GCC_OBJDIR = @GCC_OBJDIR@\n-GCJ = @GCJ@\n-GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n-GLIBCPP_CXXFLAGS = @GLIBCPP_CXXFLAGS@\n-LIBMATHOBJS = @LIBMATHOBJS@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n-LIBTOOL = @LIBTOOL@\n-LN_S = @LN_S@\n-MAINT = @MAINT@\n-MAKEINFO = @MAKEINFO@\n-OBJDUMP = @OBJDUMP@\n-OBJEXT = @OBJEXT@\n-OPT_LDFLAGS = @OPT_LDFLAGS@\n-PACKAGE = @PACKAGE@\n-RANLIB = @RANLIB@\n-SECTION_FLAGS = @SECTION_FLAGS@\n-SECTION_LDFLAGS = @SECTION_LDFLAGS@\n-STRIP = @STRIP@\n-THREADDEPS = @THREADDEPS@\n-THREADINCS = @THREADINCS@\n-THREADLIBS = @THREADLIBS@\n-THREADOBJS = @THREADOBJS@\n-THREADSPEC = @THREADSPEC@\n-USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n-VERSION = @VERSION@\n-WERROR = @WERROR@\n-WFMT_FLAGS = @WFMT_FLAGS@\n-cpu_include_dir = @cpu_include_dir@\n-ctype_include_dir = @ctype_include_dir@\n-glibcpp_basedir = @glibcpp_basedir@\n-ifGNUmake = @ifGNUmake@\n-libinst_wstring_la = @libinst_wstring_la@\n-\n-AUTOMAKE_OPTIONS = 1.3 cygnus\n-\n-noinst_LTLIBRARIES = libmath.la\n-\n-EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \tsignbitl.c cabsl.c \n-\n-\n-EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c  carg.c cargf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n-\n-\n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n-\n-\n-libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n-\n-libmath_la_SOURCES =  \tsignbit.c signbitf.c cabs.c cabsf.c \n-\n-\n-LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n-\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-INCLUDES = -I../include  $(TOPLEVEL_INCLUDES)\n-mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n-CONFIG_HEADER = ../config.h\n-CONFIG_CLEAN_FILES = \n-LTLIBRARIES =  $(noinst_LTLIBRARIES)\n-\n-\n-DEFS = @DEFS@ -I. -I$(srcdir) -I..\n-CPPFLAGS = @CPPFLAGS@\n-LDFLAGS = @LDFLAGS@\n-LIBS = @LIBS@\n-libmath_la_LDFLAGS = \n-libmath_la_OBJECTS =  signbit.lo signbitf.lo cabs.lo cabsf.lo\n-CFLAGS = @CFLAGS@\n-COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-CCLD = $(CC)\n-DIST_COMMON =  Makefile.am Makefile.in\n-\n-\n-DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n-\n-TAR = gtar\n-GZIP_ENV = --best\n-SOURCES = $(libmath_la_SOURCES)\n-OBJECTS = $(libmath_la_OBJECTS)\n-\n-all: all-redirect\n-.SUFFIXES:\n-.SUFFIXES: .S .c .lo .o .obj .s\n-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n-\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus math/Makefile\n-\n-Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n-\n-\n-mostlyclean-noinstLTLIBRARIES:\n-\n-clean-noinstLTLIBRARIES:\n-\t-test -z \"$(noinst_LTLIBRARIES)\" || rm -f $(noinst_LTLIBRARIES)\n-\n-distclean-noinstLTLIBRARIES:\n-\n-maintainer-clean-noinstLTLIBRARIES:\n-\n-.c.o:\n-\t$(COMPILE) -c $<\n-\n-# FIXME: We should only use cygpath when building on Windows,\n-# and only if it is available.\n-.c.obj:\n-\t$(COMPILE) -c `cygpath -w $<`\n-\n-.s.o:\n-\t$(COMPILE) -c $<\n-\n-.S.o:\n-\t$(COMPILE) -c $<\n-\n-mostlyclean-compile:\n-\t-rm -f *.o core *.core\n-\t-rm -f *.$(OBJEXT)\n-\n-clean-compile:\n-\n-distclean-compile:\n-\t-rm -f *.tab.c\n-\n-maintainer-clean-compile:\n-\n-.c.lo:\n-\t$(LIBTOOL) --mode=compile $(COMPILE) -c $<\n-\n-.s.lo:\n-\t$(LIBTOOL) --mode=compile $(COMPILE) -c $<\n-\n-.S.lo:\n-\t$(LIBTOOL) --mode=compile $(COMPILE) -c $<\n-\n-mostlyclean-libtool:\n-\t-rm -f *.lo\n-\n-clean-libtool:\n-\t-rm -rf .libs _libs\n-\n-distclean-libtool:\n-\n-maintainer-clean-libtool:\n-\n-libmath.la: $(libmath_la_OBJECTS) $(libmath_la_DEPENDENCIES)\n-\t$(LINK)  $(libmath_la_LDFLAGS) $(libmath_la_OBJECTS) $(libmath_la_LIBADD) $(LIBS)\n-\n-tags: TAGS\n-\n-ID: $(HEADERS) $(SOURCES) $(LISP)\n-\tlist='$(SOURCES) $(HEADERS)'; \\\n-\tunique=`for i in $$list; do echo $$i; done | \\\n-\t  awk '    { files[$$0] = 1; } \\\n-\t       END { for (i in files) print i; }'`; \\\n-\there=`pwd` && cd $(srcdir) \\\n-\t  && mkid -f$$here/ID $$unique $(LISP)\n-\n-TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n-\ttags=; \\\n-\there=`pwd`; \\\n-\tlist='$(SOURCES) $(HEADERS)'; \\\n-\tunique=`for i in $$list; do echo $$i; done | \\\n-\t  awk '    { files[$$0] = 1; } \\\n-\t       END { for (i in files) print i; }'`; \\\n-\ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n-\n-mostlyclean-tags:\n-\n-clean-tags:\n-\n-distclean-tags:\n-\t-rm -f TAGS ID\n-\n-maintainer-clean-tags:\n-\n-distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n-\n-subdir = math\n-\n-distdir: $(DISTFILES)\n-\t@for file in $(DISTFILES); do \\\n-\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n-\t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n-\t  else \\\n-\t    test -f $(distdir)/$$file \\\n-\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n-\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n-\t  fi; \\\n-\tdone\n-info-am:\n-info: info-am\n-dvi-am:\n-dvi: dvi-am\n-check-am:\n-check: check-am\n-installcheck-am:\n-installcheck: installcheck-am\n-install-info-am: \n-install-info: install-info-am\n-install-exec-am:\n-install-exec: install-exec-am\n-\n-install-data-am:\n-install-data: install-data-am\n-\n-install-am: all-am\n-\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n-install: install-am\n-uninstall-am:\n-uninstall: uninstall-am\n-all-am: Makefile $(LTLIBRARIES)\n-all-redirect: all-am\n-install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n-installdirs:\n-\n-\n-mostlyclean-generic:\n-\n-clean-generic:\n-\n-distclean-generic:\n-\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n-\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n-\n-maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-noinstLTLIBRARIES mostlyclean-compile \\\n-\t\tmostlyclean-libtool mostlyclean-tags \\\n-\t\tmostlyclean-generic\n-\n-mostlyclean: mostlyclean-am\n-\n-clean-am:  clean-noinstLTLIBRARIES clean-compile clean-libtool \\\n-\t\tclean-tags clean-generic mostlyclean-am\n-\n-clean: clean-am\n-\n-distclean-am:  distclean-noinstLTLIBRARIES distclean-compile \\\n-\t\tdistclean-libtool distclean-tags distclean-generic \\\n-\t\tclean-am\n-\t-rm -f libtool\n-\n-distclean: distclean-am\n-\n-maintainer-clean-am:  maintainer-clean-noinstLTLIBRARIES \\\n-\t\tmaintainer-clean-compile maintainer-clean-libtool \\\n-\t\tmaintainer-clean-tags maintainer-clean-generic \\\n-\t\tdistclean-am\n-\t@echo \"This command is intended for maintainers to use;\"\n-\t@echo \"it deletes files that may require special tools to rebuild.\"\n-\n-maintainer-clean: maintainer-clean-am\n-\n-.PHONY: mostlyclean-noinstLTLIBRARIES distclean-noinstLTLIBRARIES \\\n-clean-noinstLTLIBRARIES maintainer-clean-noinstLTLIBRARIES \\\n-mostlyclean-compile distclean-compile clean-compile \\\n-maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n-clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n-distclean-tags clean-tags maintainer-clean-tags distdir info-am info \\\n-dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n-install-info install-exec-am install-exec install-data-am install-data \\\n-install-am install uninstall-am uninstall all-redirect all-am all \\\n-installdirs mostlyclean-generic distclean-generic clean-generic \\\n-maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n-\n-\n-# Tell versions [3.59,3.63) of GNU make to not export all variables.\n-# Otherwise a system limit (for SysV at least) may be exceeded.\n-.NOEXPORT:"}, {"sha": "1c59dae7a9aa6300f936b48599c741bdda6e925f", "filename": "libstdc++-v3/math/atan2f.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fatan2f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fatan2f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fatan2f.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,39 +0,0 @@\n-/* Compute arc tangent.  */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-atan2f (float x, float y)\n-{\n-  /* We use the double version.  */\n-  return atan2 (x, y);\n-}"}, {"sha": "c3b8c558858275bfaaea33a3532926d42d39dc05", "filename": "libstdc++-v3/math/c_log.c", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fc_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fc_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fc_log.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,63 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ double\n-c_log (__complex__ double x)\n-{\n-  __complex__ double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysign (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabs (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log (hypot (__real__ x, __imag__ x));\n-      __imag__ result = atan2 (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITE_P (__real__ x) || INFINITE_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VAL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "aff2111391cdd8fecec14728133a0553093b60d4", "filename": "libstdc++-v3/math/c_logf.c", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fc_logf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fc_logf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fc_logf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,64 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-c_logf (__complex__ float x)\n-{\n-  __complex__ float result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysignf (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsf (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = logf (hypotf (__real__ x, __imag__ x));\n-      __imag__ result = atan2f (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEF_P (__real__ x) || INFINITEF_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALF;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "d4075f75992b9a43199521c097aaf3edcb4e360c", "filename": "libstdc++-v3/math/c_logl.c", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fc_logl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fc_logl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fc_logl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,75 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#ifndef _GNU_SOURCE\n-#define _GNU_SOURCE\n-#endif\n-#include <math.h>\n-#include \"mathconf.h\"\n-#ifndef M_PIl\n-#define M_PIl M_PI\n-#endif\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-__complex__ long double\n-c_logl (__complex__ long double x)\n-{\n-  __complex__ long double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PIl : 0.0;\n-      __imag__ result = copysignl (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsl (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = logl (local_hypotl (__real__ x, __imag__ x));\n-      __imag__ result = atan2l (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEL_P (__real__ x) || INFINITEL_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "f2f41e2bd1bad1172c49e9ddc85a91f5713e265e", "filename": "libstdc++-v3/math/cabs.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcabs.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,38 +0,0 @@\n-/* Return the complex absolute value of double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-double\n-cabs (__complex__ double z)\n-{\n-  return hypot (__real__ z, __imag__ z);\n-}"}, {"sha": "53358cfc568dbc6327ddcf018f6a36dafa13e61d", "filename": "libstdc++-v3/math/cabsf.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcabsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcabsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcabsf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,38 +0,0 @@\n-/* Return the complex absolute value of double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-cabsf (__complex__ float z)\n-{\n-  return hypotf (__real__ z, __imag__ z);\n-}"}, {"sha": "4b36a3afcbb1be2d19d705129eb16dcadb98f890", "filename": "libstdc++-v3/math/cabsl.c", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcabsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcabsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcabsl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,42 +0,0 @@\n-/* Return the complex absolute value of double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-long double\n-__mycabsl (__complex__ long double z)\n-{\n-  return local_hypotl (__real__ z, __imag__ z);\n-}"}, {"sha": "dff4a197836fc36a6b73f62e9518e7770e287cd0", "filename": "libstdc++-v3/math/carg.c", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcarg.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,37 +0,0 @@\n-/* Compute argument of complex double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-double\n-carg (__complex__ double x)\n-{\n-  return atan2 (__imag__ x, __real__ x);\n-}"}, {"sha": "90a2f417cccbc0513f0cb00de59f70e7186446d2", "filename": "libstdc++-v3/math/cargf.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcargf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcargf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcargf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,38 +0,0 @@\n-/* Compute argument of complex float value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-cargf (__complex__ float x)\n-{\n-  return atan2f (__imag__ x, __real__ x);\n-}"}, {"sha": "ede84a1c854b0d0b5492da47691d9824d386f756", "filename": "libstdc++-v3/math/cargl.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcargl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcargl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcargl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,38 +0,0 @@\n-/* Compute argument of complex long double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-long double\n-cargl (__complex__ long double x)\n-{\n-  return atan2l (__imag__ x, __real__ x);\n-}"}, {"sha": "208c6e6abc37cbef6dd22efaa0e273260caff217", "filename": "libstdc++-v3/math/ccos.c", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fccos.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,68 +0,0 @@\n-/* Return cosine of complex double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ double\n-ccos (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || __imag__ x != __imag__ x)\n-    {\n-      if (__real__ x == 0.0 || __imag__ x == 0.0)\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = 0.0;\n-\t}\n-      else if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VAL;\n-\t  __imag__ res = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __complex__ double y;\n-\n-      __real__ y = -__imag__ x;\n-      __imag__ y = __real__ x;\n-\n-      res = ccosh (y);\n-    }\n-\n-  return res;\n-}"}, {"sha": "0cbf4a040fea9b99a4ae8c7c681debe6be8f98ae", "filename": "libstdc++-v3/math/ccosf.c", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fccosf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,68 +0,0 @@\n-/* Return cosine of complex float value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ float\n-ccosf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || __imag__ x != __imag__ x)\n-    {\n-      if (__real__ x == 0.0 || __imag__ x == 0.0)\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = 0.0;\n-\t}\n-      else if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALF;\n-\t  __imag__ res = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __complex__ float y;\n-\n-      __real__ y = -__imag__ x;\n-      __imag__ y = __real__ x;\n-\n-      res = ccoshf (y);\n-    }\n-\n-  return res;\n-}"}, {"sha": "79fe94e45cb02b7bc9b2b4cb1d711bd5fe9946d9", "filename": "libstdc++-v3/math/ccosh.c", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccosh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccosh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fccosh.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,93 +0,0 @@\n-/* Complex cosine hyperbole function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-ccosh (__complex__ double x)\n-{\n-  __complex__ double retval;\n-\n-  if (FINITE_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinh_val = sinh (__real__ x);\n-\t  double cosh_val = cosh (__real__ x);\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = cosh_val * cosix;\n-\t  __imag__ retval = sinh_val * sinix;\n-\t}\n-      else\n-\t{\n-\t  __imag__ retval = __real__ x == 0.0 ? 0.0 : NAN;\n-\t  __real__ retval = NAN + NAN;\n-\t}\n-    }\n-  else if (INFINITE_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = __imag__ x * copysign (1.0, __real__ x);\n-\t}\n-      else if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = copysign (HUGE_VAL, cosix);\n-\t  __imag__ retval = (copysign (HUGE_VAL, sinix)\n-\t\t\t     * copysign (1.0, __real__ x));\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "51c5890e2a7ba15aee629124d72525b69b2768fb", "filename": "libstdc++-v3/math/ccoshf.c", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccoshf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccoshf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fccoshf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,92 +0,0 @@\n-/* Complex cosine hyperbole function for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-ccoshf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-\n-  if (FINITEF_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinh_val = sinhf (__real__ x);\n-\t  float cosh_val = coshf (__real__ x);\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  __real__ retval = cosh_val * cosix;\n-\t  __imag__ retval = sinh_val * sinix;\n-\t}\n-      else\n-\t{\n-\t  __imag__ retval = __real__ x == 0.0 ? 0.0 : NAN;\n-\t  __real__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITEF_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = __imag__ x * copysignf (1.0, __real__ x);\n-\t}\n-      else if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  __real__ retval = copysignf (HUGE_VALF, cosix);\n-\t  __imag__ retval = (copysignf (HUGE_VALF, sinix)\n-\t\t\t     * copysignf (1.0, __real__ x));\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "7bb2dacf3b881b645e87ee398ef78f1fbc90c861", "filename": "libstdc++-v3/math/ccoshl.c", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccoshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccoshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fccoshl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,92 +0,0 @@\n-/* Complex cosine hyperbole function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ccoshl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-\n-  if (FINITEL_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinh_val = sinhl (__real__ x);\n-\t  long double cosh_val = coshl (__real__ x);\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = cosh_val * cosix;\n-\t  __imag__ retval = sinh_val * sinix;\n-\t}\n-      else\n-\t{\n-\t  __imag__ retval = __real__ x == 0.0 ? 0.0 : NAN;\n-\t  __real__ retval = NAN + NAN;\n-\t}\n-    }\n-  else if (INFINITEL_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = __imag__ x * copysignl (1.0, __real__ x);\n-\t}\n-      else if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = copysignl (HUGE_VALL, cosix);\n-\t  __imag__ retval = (copysignl (HUGE_VALL, sinix)\n-\t\t\t     * copysignl (1.0, __real__ x));\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "6531476488c4d9740545b907d9fae6ce1cd4bf12", "filename": "libstdc++-v3/math/ccosl.c", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccosl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fccosl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fccosl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,69 +0,0 @@\n-/* Return cosine of complex long double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ccosl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || __imag__ x != __imag__ x)\n-    {\n-      if (__real__ x == 0.0 || __imag__ x == 0.0)\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = 0.0;\n-\t}\n-      else if (INFINITEL_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALL;\n-\t  __imag__ res = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __complex__ long double y;\n-\n-      __real__ y = -__imag__ x;\n-      __imag__ y = __real__ x;\n-\n-      res = ccoshl (y);\n-    }\n-\n-  return res;\n-}"}, {"sha": "210220bc58c709660a2436905df49d5afbe7b473", "filename": "libstdc++-v3/math/cexp.c", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcexp.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,111 +0,0 @@\n-/* Return value of complex exponential function for double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-cexp (__complex__ double x)\n-{\n-  __complex__ double retval;\n-\n-  if (FINITE_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double exp_val = exp (__real__ x);\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  if (FINITE_P (exp_val))\n-\t    {\n-\t      __real__ retval = exp_val * cosix;\n-\t      __imag__ retval = exp_val * sinix;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = copysign (exp_val, cosix);\n-\t      __imag__ retval = copysign (exp_val, sinix);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If the imaginary part is +-inf or NaN and the real part\n-\t     is not +-inf the result is NaN + iNaN.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITE_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double value = signbit (__real__ x) ? 0.0 : HUGE_VAL;\n-\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = value;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      double sinix = sin (__imag__ x);\n-\t      double cosix = cos (__imag__ x);\n-\n-\t      __real__ retval = copysign (value, cosix);\n-\t      __imag__ retval = copysign (value, sinix);\n-\t    }\n-\t}\n-      else if (signbit (__real__ x) == 0)\n-\t{\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ retval = 0.0;\n-\t  __imag__ retval = copysign (0.0, __imag__ x);\n-\t}\n-    }\n-  else\n-    {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n-      __real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "0888cb70fa4f3e16273d6f53a495819e56101961", "filename": "libstdc++-v3/math/cexpf.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcexpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcexpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcexpf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,110 +0,0 @@\n-/* Return value of complex exponential function for float complex value. */\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-cexpf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-\n-  if (FINITEF_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float exp_val = expf (__real__ x);\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  if (FINITEF_P (exp_val))\n-\t    {\n-\t      __real__ retval = exp_val * cosix;\n-\t      __imag__ retval = exp_val * sinix;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = copysignf (exp_val, cosix);\n-\t      __imag__ retval = copysignf (exp_val, sinix);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If the imaginary part is +-inf or NaN and the real part\n-\t     is not +-inf the result is NaN + iNaN.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITEF_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float value = signbit (__real__ x) ? 0.0 : HUGE_VALF;\n-\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = value;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      float sinix = sinf (__imag__ x);\n-\t      float cosix = cosf (__imag__ x);\n-\n-\t      __real__ retval = copysignf (value, cosix);\n-\t      __imag__ retval = copysignf (value, sinix);\n-\t    }\n-\t}\n-      else if (signbit (__real__ x) == 0)\n-\t{\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ retval = 0.0;\n-\t  __imag__ retval = copysignf (0.0, __imag__ x);\n-\t}\n-    }\n-  else\n-    {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n-      __real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "83cb4db5e584acaaed1201251a9fb4898396be11", "filename": "libstdc++-v3/math/cexpl.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcexpl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcexpl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcexpl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,110 +0,0 @@\n-/* Return value of complex exp function for long double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-cexpl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-\n-  if (FINITEL_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double exp_val = expl (__real__ x);\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  if (FINITEL_P (exp_val))\n-\t    {\n-\t      __real__ retval = exp_val * cosix;\n-\t      __imag__ retval = exp_val * sinix;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = copysignl (exp_val, cosix);\n-\t      __imag__ retval = copysignl (exp_val, sinix);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If the imaginary part is +-inf or NaN and the real part\n-\t     is not +-inf the result is NaN + iNaN.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITEL_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double value = signbit (__real__ x) ? 0.0 : HUGE_VALL;\n-\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = value;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      long double sinix = sinl (__imag__ x);\n-\t      long double cosix = cosl (__imag__ x);\n-\n-\t      __real__ retval = copysignl (value, cosix);\n-\t      __imag__ retval = copysignl (value, sinix);\n-\t    }\n-\t}\n-      else if (signbit (__real__ x) == 0)\n-\t{\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ retval = 0.0;\n-\t  __imag__ retval = copysignl (0.0, __imag__ x);\n-\t}\n-    }\n-  else\n-    {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n-      __real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "e158a9900e38dc5cb9822423816c4bcbb39b227a", "filename": "libstdc++-v3/math/clog10.c", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fclog10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fclog10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fclog10.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,65 +0,0 @@\n-/* Compute complex base 10 logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-clog10 (__complex__ double x)\n-{\n-  __complex__ double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysign (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabs (__real__ x);\n-    }\n-  else if (__real__ x != __real__ x && __imag__ x != __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log10 (hypot (__real__ x, __imag__ x));\n-      __imag__ result = atan2 (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITE_P (__real__ x) || INFINITE_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VAL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "b241cec994a26b97b2023ad64a52b6a23010e9de", "filename": "libstdc++-v3/math/clog10f.c", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fclog10f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fclog10f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fclog10f.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,64 +0,0 @@\n-/* Compute complex base 10 logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-clog10f (__complex__ float x)\n-{\n-  __complex__ float result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysignf (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsf (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log10f (hypotf (__real__ x, __imag__ x));\n-      __imag__ result = atan2f (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEF_P (__real__ x) || INFINITEF_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALF;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "9cec8f88ffe8997d806a426bd131fab8a4b15f9e", "filename": "libstdc++-v3/math/clog10l.c", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fclog10l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fclog10l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fclog10l.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,74 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#ifndef _GNU_SOURCE\n-#define _GNU_SOURCE\n-#endif\n-#include <math.h>\n-#include \"mathconf.h\"\n-#ifndef M_PIl\n-#define M_PIl M_PI\n-#endif\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-__complex__ long double\n-clog10l (__complex__ long double x)\n-{\n-  __complex__ long double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PIl : 0.0;\n-      __imag__ result = copysignl (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsl (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log10l (local_hypotl (__real__ x, __imag__ x));\n-      __imag__ result = atan2l (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEL_P (__real__ x) || INFINITEL_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "5028b2a6cd5e7916046d656c0273f68526affca6", "filename": "libstdc++-v3/math/complex-stub.h", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcomplex-stub.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcomplex-stub.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcomplex-stub.h?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,86 +0,0 @@\n-\n-/* Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-/* This is no header meant to be used in general.  It's simply here to\n-   get libstdc++ compiled.  It should never be installed in an official\n-   directory.  */\n-\n-#ifndef _COMPLEX_H\n-#define _COMPLEX_H\t1\n-\n-__complex__ double ccos (__complex__ double x);\n-__complex__ float ccosf (__complex__ float x);\n-__complex__ long double ccosl (__complex__ long double x);\n-\n-__complex__ double ccosh (__complex__ double x);\n-__complex__ float ccoshf (__complex__ float x);\n-__complex__ long double ccoshl (__complex__ long double x);\n-\n-__complex__ double cexp (__complex__ double x);\n-__complex__ float cexpf (__complex__ float x);\n-__complex__ long double cexpl (__complex__ long double x);\n-\n-__complex__ double clog10 (__complex__ double x);\n-__complex__ float clog10f (__complex__ float x);\n-__complex__ long double clog10l (__complex__ long double x);\n-\n-__complex__ double cpow (__complex__ double x, __complex__ double c);\n-__complex__ float cpowf (__complex__ float x, __complex__ float c);\n-__complex__ long double cpowl (__complex__ long double x, __complex__ long double c);\n-\n-__complex__ double csin (__complex__ double x);\n-__complex__ float csinf (__complex__ float x);\n-__complex__ long double csinl (__complex__ long double x);\n-\n-__complex__ double csinh (__complex__ double x);\n-__complex__ float csinhf (__complex__ float x);\n-__complex__ long double csinhl (__complex__ long double x);\n-\n-__complex__ double csqrt (__complex__ double x);\n-__complex__ float csqrtf (__complex__ float x);\n-__complex__ long double csqrtl (__complex__ long double x);\n-\n-__complex__ double ctan (__complex__ double x);\n-__complex__ float ctanf (__complex__ float x);\n-__complex__ long double ctanl (__complex__ long double x);\n-\n-__complex__ double ctanh (__complex__ double x);\n-__complex__ float ctanhf (__complex__ float x);\n-__complex__ long double ctanhl (__complex__ long double x);\n-\n-double carg (__complex__ double x);\n-float cargf (__complex__ float x);\n-long double cargl (__complex__ long double x);\n-\n-double cabs (__complex__ double x);\n-float cabsf (__complex__ float x);\n-long double cabsl (__complex__ long double x);\n-\n-#endif\n-"}, {"sha": "968c1472b60a3a5414e7a78293140066ec718e2f", "filename": "libstdc++-v3/math/copysignf.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcopysignf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcopysignf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcopysignf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,39 +0,0 @@\n-/* Copy sign of one number to another.  */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-copysignf (float x, float y)\n-{\n-  /* We use the double version.  */\n-  return copysign (x, y);\n-}"}, {"sha": "5d816a1d0d64f15f548cc836070c06136977b27a", "filename": "libstdc++-v3/math/cpow.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcpow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcpow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcpow.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,39 +0,0 @@\n-/* Complex power of double values. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-cpow (__complex__ double x, __complex__ double c)\n-{\n-  return cexp (c * c_log (x));\n-}"}, {"sha": "d4aa5904f86faa85084d31006d13731a0f14cee7", "filename": "libstdc++-v3/math/cpowf.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcpowf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcpowf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcpowf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,38 +0,0 @@\n-/* Complex power of float values. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-cpowf (__complex__ float x, __complex__ float c)\n-{\n-  return cexpf (c * c_logf (x));\n-}"}, {"sha": "65856d48ec4b105ef5aa84888f375444900feead", "filename": "libstdc++-v3/math/cpowl.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcpowl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcpowl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcpowl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,40 +0,0 @@\n-/* Complex power of long double values. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ long double\n-cpowl (__complex__ long double x, __complex__ long double c)\n-{\n-  return cexpl (c * c_logl (x));\n-}\n-\n-\n-"}, {"sha": "bde60196e1b182857882add9bb3a3d45d4b279c8", "filename": "libstdc++-v3/math/csin.c", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsin.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,115 +0,0 @@\n-/* Complex sine function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-csin (__complex__ double x)\n-{\n-  __complex__ double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabs (__real__ x);\n-\n-  if (FINITE_P (__imag__ x))\n-    {\n-      /* Imaginary part is finite.  */\n-      if (FINITE_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  double sinh_val = sinh (__imag__ x);\n-\t  double cosh_val = cosh (__imag__ x);\n-\t  double sinix = sin (__real__ x);\n-\t  double cosix = cos (__real__ x);\n-\n-\t  __real__ retval = cosh_val * sinix;\n-\t  __imag__ retval = sinh_val * cosix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITE_P (__imag__ x))\n-    {\n-      /* Imaginary part is infinite.  */\n-      if (__real__ x == 0.0)\n-\t{\n-\t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysign (0.0, negate ? -1.0 : 1.0);\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITE_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  double sinix = sin (__real__ x);\n-\t  double cosix = cos (__real__ x);\n-\n-\t  __real__ retval = copysign (HUGE_VAL, sinix);\n-\t  __imag__ retval = copysign (HUGE_VAL, cosix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t  if (signbit (__imag__ x))\n-\t    __imag__ retval = -__imag__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = HUGE_VAL;\n-\t}\n-    }\n-  else\n-    {\n-      if (__real__ x == 0.0)\n-\t__real__ retval = copysign (0.0, negate ? -1.0 : 1.0);\n-      else\n-\t__real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "8c66865380a4a8ee026e42b6a2b1a15ab69fdb26", "filename": "libstdc++-v3/math/csinf.c", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsinf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,115 +0,0 @@\n-/* Complex sine function for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-csinf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsf (__real__ x);\n-\n-  if (FINITEF_P (__imag__ x))\n-    {\n-      /* Imaginary part is finite.  */\n-      if (FINITEF_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  float sinh_val = sinhf (__imag__ x);\n-\t  float cosh_val = coshf (__imag__ x);\n-\t  float sinix = sinf (__real__ x);\n-\t  float cosix = cosf (__real__ x);\n-\n-\t  __real__ retval = cosh_val * sinix;\n-\t  __imag__ retval = sinh_val * cosix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEF_P (__imag__ x))\n-    {\n-      /* Imaginary part is infinite.  */\n-      if (__real__ x == 0.0)\n-\t{\n-\t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysignf (0.0, negate ? -1.0 : 1.0);\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEF_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  float sinix = sinf (__real__ x);\n-\t  float cosix = cosf (__real__ x);\n-\n-\t  __real__ retval = copysignf (HUGE_VALF, sinix);\n-\t  __imag__ retval = copysignf (HUGE_VALF, cosix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t  if (signbit (__imag__ x))\n-\t    __imag__ retval = -__imag__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = HUGE_VALF;\n-\t}\n-    }\n-  else\n-    {\n-      if (__real__ x == 0.0)\n-\t__real__ retval = copysignf (0.0, negate ? -1.0 : 1.0);\n-      else\n-\t__real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "9da924b1c66ba0a95e1c0400f2de92d64cc4daa7", "filename": "libstdc++-v3/math/csinh.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsinh.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,110 +0,0 @@\n-/* Complex sine hyperbole function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-csinh (__complex__ double x)\n-{\n-  __complex__ double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabs (__real__ x);\n-\n-  if (FINITE_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinh_val = sinh (__real__ x);\n-\t  double cosh_val = cosh (__real__ x);\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = sinh_val * cosix;\n-\t  __imag__ retval = cosh_val * sinix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__real__ x == 0.0)\n-\t    {\n-\t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysign (0.0, negate ? -1.0 : 1.0);\n-\t      __imag__ retval = NAN + NAN;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITE_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = negate ? -HUGE_VAL : HUGE_VAL;\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = copysign (HUGE_VAL, cosix);\n-\t  __imag__ retval = copysign (HUGE_VAL, sinix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "3aaf49aa208393e0b03e3d7b250ce34b5ab8fa88", "filename": "libstdc++-v3/math/csinhf.c", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsinhf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,89 +0,0 @@\n-/* Complex sine hyperbole function for float.\n-   Copyright (C) 1997,1998 Free Software Foundation, Inc.\n-\n-   This file is part of the libstdc++ version 3 distribution.\n-\n-   This software is a copyrighted work licensed under the terms of the\n-   Cygnus libstdc++ license. Please consult the file LICENSE.STD for\n-   details.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-csinhf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsf (__real__ x);\n-\n-  if (FINITEF_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinh_val = sinhf (__real__ x);\n-\t  float cosh_val = coshf (__real__ x);\n-\t  float sinix = sin (__imag__ x);\n-\t  float cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = sinh_val * cosix;\n-\t  __imag__ retval = cosh_val * sinix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__real__ x == 0.0)\n-\t    {\n-\t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysignf (0.0, negate ? -1.0 : 1.0);\n-\t      __imag__ retval = NAN + NAN;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEF_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = negate ? -HUGE_VALF : HUGE_VALF;\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  __real__ retval = copysignf (HUGE_VALF, cosix);\n-\t  __imag__ retval = copysignf (HUGE_VALF, sinix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "efd45a24323dfe47d110c7a0abdc42a5ec1faacc", "filename": "libstdc++-v3/math/csinhl.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinhl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinhl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsinhl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,110 +0,0 @@\n-/* Complex sine hyperbole function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-csinhl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsl (__real__ x);\n-\n-  if (FINITEL_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinh_val = sinhl (__real__ x);\n-\t  long double cosh_val = coshl (__real__ x);\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = sinh_val * cosix;\n-\t  __imag__ retval = cosh_val * sinix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__real__ x == 0.0)\n-\t    {\n-\t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysignl (0.0, negate ? -1.0 : 1.0);\n-\t      __imag__ retval = NAN + NAN;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEL_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = negate ? -HUGE_VALL : HUGE_VALL;\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = copysignl (HUGE_VALL, cosix);\n-\t  __imag__ retval = copysignl (HUGE_VALL, sinix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "423b459d667aae76f1e820a04a85b0e563848fe4", "filename": "libstdc++-v3/math/csinl.c", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsinl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsinl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,115 +0,0 @@\n-/* Complex sine function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-csinl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsl (__real__ x);\n-\n-  if (FINITEL_P (__imag__ x))\n-    {\n-      /* Imaginary part is finite.  */\n-      if (FINITEL_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  long double sinh_val = sinhl (__imag__ x);\n-\t  long double cosh_val = coshl (__imag__ x);\n-\t  long double sinix = sinl (__real__ x);\n-\t  long double cosix = cosl (__real__ x);\n-\n-\t  __real__ retval = cosh_val * sinix;\n-\t  __imag__ retval = sinh_val * cosix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEL_P (__imag__ x))\n-    {\n-      /* Imaginary part is infinite.  */\n-      if (__real__ x == 0.0)\n-\t{\n-\t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysignl (0.0, negate ? -1.0 : 1.0);\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEL_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  long double sinix = sinl (__real__ x);\n-\t  long double cosix = cosl (__real__ x);\n-\n-\t  __real__ retval = copysignl (HUGE_VALL, sinix);\n-\t  __imag__ retval = copysignl (HUGE_VALL, cosix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t  if (signbit (__imag__ x))\n-\t    __imag__ retval = -__imag__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = HUGE_VALL;\n-\t}\n-    }\n-  else\n-    {\n-      if (__real__ x == 0.0)\n-\t__real__ retval = copysignl (0.0, negate ? -1.0 : 1.0);\n-      else\n-\t__real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "53551653ae0db36b99932db9e7758d6b7dd5b528", "filename": "libstdc++-v3/math/csqrt.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsqrt.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,110 +0,0 @@\n-/* Complex square root of double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-csqrt (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || !FINITE_P (__imag__ x))\n-    {\n-      if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VAL;\n-\t  __imag__ res = __imag__ x;\n-\t}\n-      else if (INFINITE_P (__real__ x))\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = __imag__ x != __imag__ x ? NAN : 0;\n-\t      __imag__ res = copysign (HUGE_VAL, __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = __real__ x;\n-\t      __imag__ res = (__imag__ x != __imag__ x\n-\t\t\t      ? NAN : copysign (0.0, __imag__ x));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = 0.0;\n-\t      __imag__ res = copysign (sqrt (-__real__ x), __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = fabs (sqrt (__real__ x));\n-\t      __imag__ res = copysign (0.0, __imag__ x);\n-\t    }\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  double r = sqrt (0.5 * fabs (__imag__ x));\n-\n-\t  __real__ res = copysign (r, __imag__ x);\n-\t  __imag__ res = r;\n-\t}\n-      else\n-\t{\n-\t  __complex__ double q;\n-\t  double t, r;\n-\n-\t  if (fabs (__imag__ x) < 2.0e-4 * fabs (__real__ x))\n-\t    t = 0.25 * __imag__ x * (__imag__ x / __real__ x);\n-\t  else\n-\t    t = 0.5 * (hypot (__real__ x, __imag__ x) - __real__ x);\n-\n-\t  r = sqrt (t);\n-\n-\t  __real__ q = __imag__ x / (2.0 * r);\n-\t  __imag__ q = r;\n-\n-\t  /* Heron iteration in complex arithmetic.  */\n-\t  res = 0.5 * (q + q / x);\n-\t}\n-    }\n-\n-  return res;\n-}"}, {"sha": "a239588a646de841f8f5087e5946d544943b3350", "filename": "libstdc++-v3/math/csqrtf.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsqrtf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsqrtf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsqrtf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,110 +0,0 @@\n-/* Complex square root of float value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-csqrtf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || !FINITEF_P (__imag__ x))\n-    {\n-      if (INFINITEF_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALF;\n-\t  __imag__ res = __imag__ x;\n-\t}\n-      else if (INFINITEF_P (__real__ x))\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = __imag__ x != __imag__ x ? NAN : 0;\n-\t      __imag__ res = copysignf (HUGE_VALF, __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = __real__ x;\n-\t      __imag__ res = (__imag__ x != __imag__ x\n-\t\t\t      ? NAN : copysignf (0.0, __imag__ x));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = 0.0;\n-\t      __imag__ res = copysignf (sqrtf (-__real__ x), __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = fabsf (sqrtf (__real__ x));\n-\t      __imag__ res = copysignf (0.0, __imag__ x);\n-\t    }\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  float r = sqrtf (0.5 * fabsf (__imag__ x));\n-\n-\t  __real__ res = copysignf (r, __imag__ x);\n-\t  __imag__ res = r;\n-\t}\n-      else\n-\t{\n-\t  __complex__ float q;\n-\t  float t, r;\n-\n-\t  if (fabsf (__imag__ x) < 2.0e-4 * fabsf (__real__ x))\n-\t    t = 0.25 * __imag__ x * (__imag__ x / __real__ x);\n-\t  else\n-\t    t = 0.5 * (hypotf (__real__ x, __imag__ x) - __real__ x);\n-\n-\t  r = sqrtf (t);\n-\n-\t  __real__ q = __imag__ x / (2.0 * r);\n-\t  __imag__ q = r;\n-\n-\t  /* Heron iteration in complex arithmetic.  */\n-\t  res = 0.5 * (q + q / x);\n-\t}\n-    }\n-\n-  return res;\n-}"}, {"sha": "d871a69afb01643f2fd878c1f025c27201f1ac4a", "filename": "libstdc++-v3/math/csqrtl.c", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsqrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fcsqrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fcsqrtl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,114 +0,0 @@\n-/* Complex square root of long double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-__complex__ long double\n-csqrtl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || !FINITEL_P (__imag__ x))\n-    {\n-      if (INFINITEL_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALL;\n-\t  __imag__ res = __imag__ x;\n-\t}\n-      else if (INFINITEL_P (__real__ x))\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = __imag__ x != __imag__ x ? NAN : 0;\n-\t      __imag__ res = copysignl (HUGE_VALL, __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = __real__ x;\n-\t      __imag__ res = (__imag__ x != __imag__ x\n-\t\t\t      ? NAN : copysignl (0.0, __imag__ x));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = 0.0;\n-\t      __imag__ res = copysignl (sqrtl (-__real__ x), __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = fabsl (sqrtl (__real__ x));\n-\t      __imag__ res = copysignl (0.0, __imag__ x);\n-\t    }\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  long double r = sqrtl (0.5 * fabsl (__imag__ x));\n-\n-\t  __real__ res = copysignl (r, __imag__ x);\n-\t  __imag__ res = r;\n-\t}\n-      else\n-\t{\n-\t  __complex__ long double q;\n-\t  long double t, r;\n-\n-\t  if (fabsl (__imag__ x) < 2.0e-4 * fabsl (__real__ x))\n-\t    t = 0.25 * __imag__ x * (__imag__ x / __real__ x);\n-\t  else\n-\t    t = 0.5 * (local_hypotl (__real__ x, __imag__ x) - __real__ x);\n-\n-\t  r = sqrtl (t);\n-\n-\t  __real__ q = __imag__ x / (2.0 * r);\n-\t  __imag__ q = r;\n-\n-\t  /* Heron iteration in complex arithmetic.  */\n-\t  res = 0.5 * (q + q / x);\n-\t}\n-    }\n-\n-  return res;\n-}"}, {"sha": "2a35c1822c3c4bea403fa45305cd10668955ed08", "filename": "libstdc++-v3/math/ctan.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fctan.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,70 +0,0 @@\n-/* Complex tangent function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-ctan (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || !FINITE_P (__imag__ x))\n-    {\n-      if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = copysign (0.0, __real__ x);\n-\t  __imag__ res = copysign (1.0, __imag__ x);\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      double sin2rx = sin (2.0 * __real__ x);\n-      double cos2rx = cos (2.0 * __real__ x);\n-      double den;\n-\n-      den = cos2rx + cosh (2.0 * __imag__ x);\n-\n-      __real__ res = sin2rx / den;\n-      __imag__ res = sinh (2.0 * __imag__ x) / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "ebd8cfa3eb0b37e85abb5443ecc4e38db3477fb3", "filename": "libstdc++-v3/math/ctanf.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fctanf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,70 +0,0 @@\n-/* Complex tangent function for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-ctanf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || !FINITEF_P (__imag__ x))\n-    {\n-      if (INFINITEF_P (__imag__ x))\n-\t{\n-\t  __real__ res = copysignf (0.0, __real__ x);\n-\t  __imag__ res = copysignf (1.0, __imag__ x);\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      float sin2rx = sinf (2.0f * __real__ x);\n-      float cos2rx = cosf (2.0f * __real__ x);\n-      float den;\n-\n-      den = cos2rx + coshf (2.0 * __imag__ x);\n-\n-      __real__ res = sin2rx / den;\n-      __imag__ res = sinhf (2.0 * __imag__ x) / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "5db5cd65a8a8e7e58b7f2fc3441a3bf6224002a8", "filename": "libstdc++-v3/math/ctanh.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fctanh.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,70 +0,0 @@\n-/* Complex hyperbole tangent for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-ctanh (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || !FINITE_P (__imag__ x))\n-    {\n-      if (INFINITE_P (__real__ x))\n-\t{\n-\t  __real__ res = copysign (1.0, __real__ x);\n-\t  __imag__ res = copysign (0.0, __imag__ x);\n-\t}\n-      else if (__imag__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      double sin2ix = sin (2.0 * __imag__ x);\n-      double cos2ix = cos (2.0 * __imag__ x);\n-      double den;\n-\n-      den = (cosh (2.0 * __real__ x) + cos2ix);\n-\n-      __real__ res = sinh (2.0 * __real__ x) / den;\n-      __imag__ res = sin2ix / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "b5f1ccea94ab9a129706c0f2c43d41f9105eb616", "filename": "libstdc++-v3/math/ctanhf.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fctanhf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,70 +0,0 @@\n-/* Complex hyperbole tangent for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-ctanhf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || !FINITEF_P (__imag__ x))\n-    {\n-      if (INFINITEF_P (__real__ x))\n-\t{\n-\t  __real__ res = copysignf (1.0, __real__ x);\n-\t  __imag__ res = copysignf (0.0, __imag__ x);\n-\t}\n-      else if (__imag__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      float sin2ix = sinf (2.0f * __imag__ x);\n-      float cos2ix = cosf (2.0f * __imag__ x);\n-      float den;\n-\n-      den = (coshf (2.0 * __real__ x) + cos2ix);\n-\n-      __real__ res = sinhf (2.0 * __real__ x) / den;\n-      __imag__ res = sin2ix / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "3fdf1fcb6c818d15bbd5f3225ca961bd89213732", "filename": "libstdc++-v3/math/ctanhl.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanhl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanhl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fctanhl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,70 +0,0 @@\n-/* Complex hyperbole tangent for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ctanhl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || !FINITEL_P (__imag__ x))\n-    {\n-      if (INFINITEL_P (__real__ x))\n-\t{\n-\t  __real__ res = copysignl (1.0, __real__ x);\n-\t  __imag__ res = copysignl (0.0, __imag__ x);\n-\t}\n-      else if (__imag__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      long double sin2ix = sinl (2.0 * __imag__ x);\n-      long double cos2ix = cosl (2.0 * __imag__ x);\n-      long double den;\n-\n-      den = (coshl (2.0 * __real__ x) + cos2ix);\n-\n-      __real__ res = sinhl (2.0 * __real__ x) / den;\n-      __imag__ res = sin2ix / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "0af4cecf6e238d646801203fa77162e6279c010f", "filename": "libstdc++-v3/math/ctanl.c", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fctanl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fctanl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,69 +0,0 @@\n-/* Complex tangent function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ctanl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || !FINITEL_P (__imag__ x))\n-    {\n-      if (INFINITEL_P (__imag__ x))\n-\t{\n-\t  __real__ res = copysignl (0.0, __real__ x);\n-\t  __imag__ res = copysignl (1.0, __imag__ x);\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      long double sin2rx = sinl (2.0 * __real__ x);\n-      long double cos2rx = cosl (2.0 * __real__ x);\n-      long double den;\n-\n-      den = cos2rx + coshl (2.0 * __imag__ x);\n-\n-      __real__ res = sin2rx / den;\n-      __imag__ res = sinhl (2.0 * __imag__ x) / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "a597502f8a019840e97a18c88bc8257bfc5e244f", "filename": "libstdc++-v3/math/expf.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fexpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fexpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fexpf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,39 +0,0 @@\n-/* Compute exponential function.  */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-expf (float x)\n-{\n-  /* We use the double version.  */\n-  return exp (x);\n-}"}, {"sha": "9e3c07b022224730fbf79935ccc78e51d66e55fa", "filename": "libstdc++-v3/math/hypot.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fhypot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fhypot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fhypot.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,38 +0,0 @@\n-/* Compute hypothenuse. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-/* If the platform is so pathetic that is has no hypot function it does\n-   not deserve it better than getting this version.  */\n-extern double sqrt (double);\n-\n-double\n-hypot (double x, double y)\n-{\n-  return sqrt (x * x + y * y);\n-}"}, {"sha": "29d1681f5cc5aef716e0f98136abc3cf47d87eb5", "filename": "libstdc++-v3/math/hypotf.c", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fhypotf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fhypotf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fhypotf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,48 +0,0 @@\n-/* Compute hypothenuse. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <config.h>\n-\n-/* If there is a `double' version use it.  Otherwise make it simply and\n-   stupid.  */\n-extern double hypot (double, double);\n-extern double sqrt (double);\n-extern float sqrtf (float);\n-\n-float\n-hypotf (float x, float y)\n-{\n-#ifdef HAVE_HYPOT\n-  return hypot (x, y);\n-#elif HAVE_SQRTF\n-  return sqrtf (x * x + y * y);\n-#else\n-  return sqrt (x * x + y * y);\n-#endif\n-}"}, {"sha": "1ec8a9ce7eec0b1f090024ac2dfa5bf138d7ae86", "filename": "libstdc++-v3/math/hypotl.c", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fhypotl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fhypotl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fhypotl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,37 +0,0 @@\n-/* Compute hypothenuse. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-/* The platform supports some long double functions but not hypotl.  Blarg.  */\n-extern long double sqrtl (long double);\n-\n-long double\n-hypotl (long double x, long double y)\n-{\n-  return sqrtl (x * x + y * y);\n-}"}, {"sha": "3f4503cc16217412e8340cd6f65d44f19d835241", "filename": "libstdc++-v3/math/mathconf.h", "status": "removed", "additions": 0, "deletions": 413, "changes": 413, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,413 +0,0 @@\n-/* Configuration data for libmath subpart of libstdc++. */\n-\n-/* Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <bits/c++config.h>\n-\n-#ifdef _GLIBCPP_HAVE_ENDIAN_H\n-# include <endian.h>\n-#else\n-# ifdef _GLIBCPP_HAVE_MACHINE_ENDIAN_H\n-#  include <machine/endian.h>\n-# else\n-#  ifdef _GLIBCPP_HAVE_SYS_MACHINE_H\n-#   include <sys/machine.h>\n-#  else\n-#   if defined _GLIBCPP_HAVE_SYS_ISA_DEFS_H || defined _GLIBCPP_HAVE_MACHINE_PARAM_H\n-/* This is on Solaris.  */\n-#    ifdef _GLIBCPP_HAVE_SYS_ISA_DEFS_H\n-#     include <sys/isa_defs.h>\n-#    endif\n-#    ifdef _GLIBCPP_HAVE_MACHINE_PARAM_H\n-#     include <machine/param.h>\n-#    endif\n-#    ifdef _LITTLE_ENDIAN\n-#     define LITTLE_ENDIAN 1\n-#    endif\n-#    ifdef _BIG_ENDIAN\n-#     define BIG_ENDIAN 1\n-#    endif\n-#    define BYTE_ORDER 1\n-#   else\n-/* We have to rely on the AC_C_BIGENDIAN test.  */\n-#    ifdef WORDS_BIGENDIAN\n-#     define BIG_ENDIAN 1\n-#    else\n-#     define LITTLE_ENDIAN 1\n-#    endif\n-#    define BYTE_ORDER 1\n-#   endif\n-#  endif\n-# endif\n-#endif\n-\n-typedef unsigned int U_int32_t __attribute ((mode (SI)));\n-typedef int Int32_t __attribute ((mode (SI)));\n-typedef unsigned int U_int64_t __attribute ((mode (DI)));\n-typedef int Uint64_t __attribute ((mode (DI)));\n-\n-#ifdef _GLIBCPP_HAVE_NAN_H\n-# include <nan.h>\n-#endif\n-\n-#ifndef NAN\n-# define NAN (nan())\n-double nan (void);\n-#endif\n-\n-#ifdef _GLIBCPP_HAVE_IEEEFP_H\n-# include <ieeefp.h>\n-#endif\n-\n-#ifdef _GLIBCPP_HAVE_FP_H\n-# include <fp.h>\n-#endif\n-\n-#ifdef _GLIBCPP_HAVE_FLOAT_H\n-# include <float.h>\n-#endif\n-\n-/* `float' variant of HUGE_VAL.  */\n-#ifndef HUGE_VALF\n-# ifdef HUGE_VALf\n-#  define HUGE_VALF HUGE_VALf\n-# else\n-#  define HUGE_VALF HUGE_VAL\n-# endif\n-#endif\n-\n-/* `long double' variant of HUGE_VAL.  */\n-#ifndef HUGE_VALL\n-# ifdef HUGE_VALl\n-#  define HUGE_VALL HUGE_VALl\n-# else\n-#  define HUGE_VALL HUGE_VAL\n-# endif\n-#endif\n-\n-/* Make sure that at least HUGE_VAL is defined.  */\n-#ifndef HUGE_VAL\n-# ifdef HUGE\n-#  define HUGE_VAL HUGE\n-# else\n-#  ifdef MAXFLOAT\n-#   define HUGE_VAL MAXFLOAT\n-#  else\n-#   error \"We need HUGE_VAL!\"\n-#  endif\n-# endif\n-#endif\n-\n-#ifndef M_PI\n-# define M_PI 3.14159265358979323846\n-#endif\n-\n-/* Test whether number is finite.  */\n-#ifdef isfinite\n-/* This is an ISO C 9x function.  */\n-# define FINITE_P(X) isfinite (X)\n-# define FINITEF_P(X) isfinite (X)\n-# define FINITEL_P(X) isfinite (X)\n-#else\n-# ifdef IsNANorINF\n-/* This is for Solaris, which does not have special macros for other\n-   types.  */\n-#  define FINITE_P(X) (!IsNANorINF (X))\n-#  define FINITEF_P(X) (!IsNANorINF (X))\n-#  define FINITEL_P(X) (!IsNANorINF (X))\n-# else\n-#  if defined _GLIBCPP_HAVE_ISINF && defined _GLIBCPP_HAVE_ISNAN\n-#   define FINITE_P(X) ({ double __x = (X); !isinf (__x) && !isnan (__x); })\n-#  else\n-#   ifdef _GLIBCPP_HAVE_FINITE\n-#    define FINITE_P(X) finite (X)\n-#   else\n-#    error \"We need FINITE_P\"\n-#   endif\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFF && defined _GLIBCPP_HAVE_ISNANF\n-#   define FINITEF_P(X) ({ float __x = (X); !isinff (__x) && !isnanf (__x); })\n-#  else\n-#   ifdef _GLIBCPP_HAVE_FINITE\n-#    define FINITEF_P(X) finite (X)\n-#   else\n-#    define FINITEF_P(X) FINITE_P (X)\n-#   endif\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFL && defined _GLIBCPP_HAVE_ISNANL\n-#   define FINITEL_P(X) ({ long double __x = (X); \\\n-\t\t\t   !isinfl (__x) && !isnanl (__x); })\n-#  else\n-#   ifdef _GLIBCPP_HAVE_QFINITE\n-#    define FINITEL_P(X) qfinite (X)\n-#   else\n-#    define FINITEL_P(X) FINITE_P (X)\n-#   endif\n-#  endif\n-# endif\n-#endif\n-\n-/* Test whether number is infinite.  */\n-#ifdef isinf\n-/* This is an ISO C 9x macro.  */\n-# define INFINITE_P(X) isinf (X)\n-# define INFINITEF_P(X) isinf (X)\n-# define INFINITEL_P(X) isinf (X)\n-#else\n-# ifdef IsINF\n-/* This is for Solaris, which does not have special macros for other\n-   types.  */\n-#  define INFINITE_P(X) IsINF (X)\n-#  define INFINITEF_P(X) IsINF (X)\n-#  define INFINITEL_P(X) IsINF (X)\n-# else\n-#  if defined _GLIBCPP_HAVE_ISINF\n-#   define INFINITE_P(X) isinf (X)\n-#  else\n-#   ifdef _GLIBCPP_HAVE_FPCLASS\n-#    ifdef _FPCLASS_PINF\n-/* Mingw defines _FPCLASS_PINF.  */\n-#     define FP_PINF _FPCLASS_PINF\n-#    endif\n-/* This is for Irix and Mingw.  */\n-#    define INFINITE_P(X) (fpclass (fabs (X)) == FP_PINF)\n-#   else\n-#    ifdef IS_INF\n-/* This is for AIX.  */\n-#     define INFINITE_P(X) ({ double __d = (X); IS_INF (__d); })\n-#    else\n-#     error \"We need INFINITE_P\"\n-#    endif\n-#   endif\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFF\n-#   define INFINITEF_P(X) isinff (X)\n-#  else\n-#   define INFINITEF_P(X) INFINITE_P (X)\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFL\n-#   define INFINITEL_P(X) isinfl (X)\n-#  else\n-#   ifdef _GLIBCPP_HAVE_QFPCLASS\n-#    define INFINITEL_P(X) (qfpclass (fabsl (X)) == FP_PINF)\n-#   else\n-#    define INFINITEL_P(X) INFINITE_P (X)\n-#   endif\n-#  endif\n-# endif\n-#endif\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-#ifdef _GLIBCPP_HAVE_COMPLEX_H\n-# include <complex.h>\n-#else\n-# include \"complex-stub.h\"\n-#endif\n-__complex__ double c_log (__complex__ double x);\n-__complex__ float c_logf (__complex__ float x);\n-__complex__ long double c_logl (__complex__ long double x);\n-\n-/* signbit is a macro in ISO C 9x.  */\n-#ifndef signbit\n-extern int __signbitf (float);\n-extern int __signbit (double);\n-extern int __signbitl (long double);\n-\n-# define signbit(x) \\\n-     (sizeof (x) == sizeof (float) ?                                          \\\n-        __signbitf (x)                                                        \\\n-      : sizeof (x) == sizeof (double) ?                                       \\\n-        __signbit (x) : __signbitl (x))\n-#endif\n-\n-#if BYTE_ORDER == BIG_ENDIAN\n-typedef union\n-{\n-  double value;\n-  struct\n-  {\n-    U_int32_t msw;\n-    U_int32_t lsw;\n-  } parts;\n-} ieee_double_shape_type;\n-#endif\n-#if BYTE_ORDER == LITTLE_ENDIAN\n-typedef union\n-{\n-  double value;\n-  struct\n-  {\n-    U_int32_t lsw;\n-    U_int32_t msw;\n-  } parts;\n-} ieee_double_shape_type;\n-#endif\n-/* Get the more significant 32 bit int from a double.  */\n-#define GET_HIGH_WORD(i,d)                                      \\\n-do {                                                            \\\n-  ieee_double_shape_type gh_u;                                  \\\n-  gh_u.value = (d);                                             \\\n-  (i) = gh_u.parts.msw;                                         \\\n-} while (0)\n-\n-\n-typedef union\n-{\n-  float value;\n-  U_int32_t word;\n-} ieee_float_shape_type;\n-/* Get a 32 bit int from a float.  */\n-#define GET_FLOAT_WORD(i,d)                                     \\\n-do {                                                            \\\n-  ieee_float_shape_type gf_u;                                   \\\n-  gf_u.value = (d);                                             \\\n-  (i) = gf_u.word;                                              \\\n-} while (0)\n-\n-\n-#if BYTE_ORDER == BIG_ENDIAN\n-typedef union\n-{\n-  long double value;\n-  struct\n-  {\n-    unsigned int sign_exponent:16;\n-    unsigned int empty:16;\n-    U_int32_t msw;\n-    U_int32_t lsw;\n-  } parts;\n-} ieee_long_double_shape_type;\n-#endif\n-#if BYTE_ORDER == LITTLE_ENDIAN\n-typedef union\n-{\n-  long double value;\n-  struct\n-  {\n-    U_int32_t lsw;\n-    U_int32_t msw;\n-    unsigned int sign_exponent:16;\n-    unsigned int empty:16;\n-  } parts;\n-} ieee_long_double_shape_type;\n-#endif\n-/* Get int from the exponent of a long double.  */\n-#define GET_LDOUBLE_EXP(exp,d)                                  \\\n-do {                                                            \\\n-  ieee_long_double_shape_type ge_u;                             \\\n-  ge_u.value = (d);                                             \\\n-  (exp) = ge_u.parts.sign_exponent;                             \\\n-} while (0)\n-\n-#if BYTE_ORDER == BIG_ENDIAN\n-typedef union\n-{\n-  long double value;\n-  struct\n-  {\n-    U_int64_t msw;\n-    U_int64_t lsw;\n-  } parts64;\n-  struct\n-  {\n-    U_int32_t w0, w1, w2, w3;\n-  } parts32;\n-} ieee_quad_double_shape_type;\n-#endif\n-#if BYTE_ORDER == LITTLE_ENDIAN\n-typedef union\n-{\n-  long double value;\n-  struct\n-  {\n-    U_int64_t lsw;\n-    U_int64_t msw;\n-  } parts64;\n-  struct\n-  {\n-    U_int32_t w3, w2, w1, w0;\n-  } parts32;\n-} ieee_quad_double_shape_type;\n-#endif\n-/* Get most significant 64 bit int from a quad long double.  */\n-#define GET_LDOUBLE_MSW64(msw,d)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  ieee_quad_double_shape_type qw_u;\t\t\t\t\\\n-  qw_u.value = (d);\t\t\t\t\t\t\\\n-  (ix0) = qw_u.parts64.msw;\t\t\t\t\t\\\n-} while (0)\n-        \n-\n-/* Replacement for non-existing float functions.  */\n-#if !defined(_GLIBCPP_HAVE_FABSF) && !defined(_GLIBCPP_HAVE___BUILTIN_FABSF)\n-# define fabsf(x) fabs (x)\n-#endif\n-#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAVE___BUILTIN_COSF)\n-# define cosf(x) cos (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_COSHF\n-# define coshf(x) cosh (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_EXPF\n-# define expf(x) expf (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_LOGF\n-# define logf(x) log(x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_LOG10F\n-# define log10f(x) log10 (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_POWF\n-# define powf(x, y) pow (x, y)\n-#endif\n-#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAVE___BUILTIN_SINF)\n-# define sinf(x) sin (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_SINHF\n-# define sinhf(x) sinh (x)\n-#endif\n-#if !defined(_GLIBCPP_HAVE_SQRTF) && !defined(_GLIBCPP_HAVE___BUILTIN_SQRTF)\n-# define sqrtf(x) sqrt (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_TANF\n-# define tanf(x) tan (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_TANHF\n-# define tanhf(x) tanh (x)\n-#endif\n-#ifndef _GLIBCPP_HAVE_STRTOF\n-# define strtof(s, e) strtod (s, e)\n-#endif\n-\n-#ifdef __cplusplus\n-}\n-#endif"}, {"sha": "779173adb1605e707a84db2155e60eb968d4b38b", "filename": "libstdc++-v3/math/nan.c", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fnan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fnan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fnan.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,36 +0,0 @@\n-/* Return quiet nan. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <stdlib.h>\n-#include <string.h>\n-\n-double\n-nan ()\n-{ return strtod (\"nan\", NULL); }"}, {"sha": "0d58ed88880ca2886d03421ab0e867370231ed1e", "filename": "libstdc++-v3/math/signbit.c", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fsignbit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fsignbit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fsignbit.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,41 +0,0 @@\n-/* Return nonzero value if number is negative. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-int\n-__signbit (double x)\n-{\n-  Int32_t hx;\n-\n-  GET_HIGH_WORD (hx, x);\n-  return hx & 0x80000000;\n-}"}, {"sha": "5e2eee133a48a2eb00a528089fd9862f96b2bc0f", "filename": "libstdc++-v3/math/signbitf.c", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fsignbitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fsignbitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fsignbitf.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,41 +0,0 @@\n-/* Return nonzero value if number is negative. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-int\n-__signbitf (float x)\n-{\n-  Int32_t hx;\n-\n-  GET_FLOAT_WORD (hx, x);\n-  return hx & 0x80000000;\n-}"}, {"sha": "3516f07339a025af0501f7e3ec84afbe8eb808c2", "filename": "libstdc++-v3/math/signbitl.c", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fsignbitl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6/libstdc%2B%2B-v3%2Fmath%2Fsignbitl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fsignbitl.c?ref=cc9711a36a24cd5efbd64bbd4ac6858fb3262fc6", "patch": "@@ -1,48 +0,0 @@\n-/* Return nonzero value if number is negative. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <float.h>\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-int\n-__signbitl (long double x)\n-{\n-#if LDBL_MANT_DIG == 113\n-  Int64_t msw;\n-\n-  GET_LDOUBLE_MSW64 (msw, x);\n-  return msw < 0;\n-#else\n-  Int32_t e;\n-\n-  GET_LDOUBLE_EXP (e, x);\n-  return e & 0x8000;\n-#endif\n-}"}]}