{"sha": "8d1349cc37b40b735236edebb3354e9ccc4663c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxMzQ5Y2MzN2I0MGI3MzUyMzZlZGViYjMzNTRlOWNjYzQ2NjNjNQ==", "commit": {"author": {"name": "Dave Pitts", "email": "dpitts@cozx.com", "date": "2000-07-27T01:55:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-07-27T01:55:55Z"}, "message": "i370.c: Remove LONGEXTERNAL ifdef from alias_number.\n\n        * i370.c: Remove LONGEXTERNAL ifdef from alias_number. Added hash\n        routine constants.\n        (mvs_hash_alias): New function.\n        (mvs_add_alias): Change argument spacing.\n        (mvs_need_alias): Change aliasing criteria. Added documentation.\n        (mvs_get_alias): Change to use hashed name. The hashed name prevents\n        CSECT name collisions.\n        (mvs_check_alias): Likewise.\n        (handle_pragma): Change documentation.\n        * i370.md (mulsi3, divsi3, udivsi3, modsi3, umodsi3): Changed gen_rtx\n        mode from SImode to DImode.\n        (iorhi3): Changed LTORG size for insn.\n\nFrom-SVN: r35282", "tree": {"sha": "1478b1ac5768dfa066f4c94d6bb3283aa01a2ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1478b1ac5768dfa066f4c94d6bb3283aa01a2ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1349cc37b40b735236edebb3354e9ccc4663c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1349cc37b40b735236edebb3354e9ccc4663c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1349cc37b40b735236edebb3354e9ccc4663c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1349cc37b40b735236edebb3354e9ccc4663c5/comments", "author": {"login": "pittsdave", "id": 36642981, "node_id": "MDQ6VXNlcjM2NjQyOTgx", "avatar_url": "https://avatars.githubusercontent.com/u/36642981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pittsdave", "html_url": "https://github.com/pittsdave", "followers_url": "https://api.github.com/users/pittsdave/followers", "following_url": "https://api.github.com/users/pittsdave/following{/other_user}", "gists_url": "https://api.github.com/users/pittsdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/pittsdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pittsdave/subscriptions", "organizations_url": "https://api.github.com/users/pittsdave/orgs", "repos_url": "https://api.github.com/users/pittsdave/repos", "events_url": "https://api.github.com/users/pittsdave/events{/privacy}", "received_events_url": "https://api.github.com/users/pittsdave/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0aab2795b32a3e71960d103938c211e6ccca6f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aab2795b32a3e71960d103938c211e6ccca6f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aab2795b32a3e71960d103938c211e6ccca6f4f"}], "stats": {"total": 121, "additions": 101, "deletions": 20}, "files": [{"sha": "e9323dafd598896ec68cc8fb10189841a7d4b581", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1349cc37b40b735236edebb3354e9ccc4663c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1349cc37b40b735236edebb3354e9ccc4663c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d1349cc37b40b735236edebb3354e9ccc4663c5", "patch": "@@ -1,3 +1,18 @@\n+2000-07-26  Dave Pitts  <dpitts@cozx.com>\t\n+\n+\t* i370.c: Remove LONGEXTERNAL ifdef from alias_number. Added hash \n+\troutine constants.\n+\t(mvs_hash_alias): New function.\n+\t(mvs_add_alias): Change argument spacing.\n+\t(mvs_need_alias): Change aliasing criteria. Added documentation.\n+\t(mvs_get_alias): Change to use hashed name. The hashed name prevents\n+\tCSECT name collisions.\n+\t(mvs_check_alias): Likewise.\n+\t(handle_pragma): Change documentation.\n+\t* i370.md (mulsi3, divsi3, udivsi3, modsi3, umodsi3): Changed gen_rtx\n+\tmode from SImode to DImode.\n+\t(iorhi3): Changed LTORG size for insn.\n+\n Wed Jul 26 19:44:05 2000   Hans-Peter Nilsson  <hp@axis.com>\n \n \t* reload.c (find_reloads_toplev): Reload a paradoxical subreg of a"}, {"sha": "ce13fe76b7e9f2b4d42181ae003a034f7d618101", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 77, "deletions": 9, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1349cc37b40b735236edebb3354e9ccc4663c5/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1349cc37b40b735236edebb3354e9ccc4663c5/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=8d1349cc37b40b735236edebb3354e9ccc4663c5", "patch": "@@ -101,6 +101,13 @@ static void i370_label_scan PARAMS ((void));\n /* defines and functions specific to the HLASM assembler */\n #ifdef TARGET_HLASM\n \n+#define MVS_HASH_PRIME 999983\n+#if defined(HOST_EBCDIC)\n+#define MVS_SET_SIZE 256\n+#else\n+#define MVS_SET_SIZE 128\n+#endif\n+\n #ifndef MAX_MVS_LABEL_SIZE\n #define MAX_MVS_LABEL_SIZE 8\n #endif\n@@ -124,9 +131,7 @@ alias_node_t;\n static alias_node_t *alias_anchor = 0;\n \n /* Alias number */\n-#ifdef LONGEXTERNAL\n static int alias_number = 0;\n-#endif\n \n /* Define the length of the internal MVS function table.  */\n #define MVS_FUNCTION_TABLE_LENGTH 32\n@@ -829,14 +834,30 @@ mvs_function_check (name)\n   return 0;\n }\n \n+/* Generate a hash for a given key. */\n+\n+static int\n+mvs_hash_alias (key)\n+     char *key;\n+{\n+  int h;\n+  int i;\n+  int l = strlen (key);\n+\n+  h = key[0];\n+  for (i = 1; i < l; i++)\n+    h = ((h * MVS_SET_SIZE) + key[i]) % MVS_HASH_PRIME;\n+  return (h);\n+}\n+\n \n /* Add the alias to the current alias list.  */\n \n void\n mvs_add_alias (realname, aliasname, emitted)\n      const char *realname;\n      const char *aliasname;\n-     int emitted;\n+     int   emitted;\n {\n   alias_node_t *ap;\n \n@@ -848,18 +869,46 @@ mvs_add_alias (realname, aliasname, emitted)\n   alias_anchor = ap;\n }\n \n-/* Check to see if the name needs aliasing */\n+/* Check to see if the name needs aliasing. ie. the name is either:\n+     1. Longer than 8 characters\n+     2. Contains an underscore\n+     3. Is mixed case */\n \n int\n mvs_need_alias (realname)\n       const char *realname;\n {\n+   int i, j = strlen (realname);\n+\n    if (mvs_function_check (realname))\n      return 0;\n-   if (strlen (realname) > MAX_MVS_LABEL_SIZE)\n+#if 0\n+   if (!strcmp (realname, \"gccmain\"))\n+     return 0;\n+   if (!strcmp (realname, \"main\"))\n+     return 0;\n+#endif\n+   if (j > MAX_MVS_LABEL_SIZE)\n      return 1;\n    if (strchr (realname, '_') != 0)\n      return 1;\n+   if (isupper (realname[0]))\n+     {\n+       for (i = 1; i < j; i++)\n+\t {\n+\t   if (islower (realname[i]))\n+\t     return 1;\n+\t }\n+     }\n+   else\n+     {\n+       for (i = 1; i < j; i++)\n+         {\n+\t   if (isupper (realname[i]))\n+\t     return 1;\n+\t }\n+     }\n+\n    return 0;\n }\n \n@@ -884,7 +933,16 @@ mvs_get_alias (realname, aliasname)\n     }\n   if (mvs_need_alias (realname))\n     {\n-      sprintf (aliasname, \"ALS%05d\", alias_number++);\n+      char c1, c2;\n+\n+      c1 = realname[0];\n+      c2 = realname[1];\n+      if (islower (c1)) c1 = toupper (c1);\n+      else if (c1 == '_') c1 = 'A';\n+      if (islower (c2)) c2 = toupper (c2);\n+      else if (c2 == '_' || c2 == '\\0') c2 = '#';\n+\n+      sprintf (aliasname, \"%c%c%06d\", c1, c2, mvs_hash_alias (realname));\n       mvs_add_alias (realname, aliasname, 0);\n       return 1;\n     }\n@@ -922,7 +980,16 @@ mvs_check_alias (realname, aliasname)\n     }\n   if (mvs_need_alias (realname))\n     {\n-      sprintf (aliasname, \"ALS%05d\", alias_number++);\n+      char c1, c2;\n+\n+      c1 = realname[0];\n+      c2 = realname[1];\n+      if (islower (c1)) c1 = toupper (c1);\n+      else if (c1 == '_') c1 = 'A';\n+      if (islower (c2)) c2 = toupper (c2);\n+      else if (c2 == '_' || c2 == '\\0') c2 = '#';\n+\n+      sprintf (aliasname, \"%c%c%06d\", c1, c2, mvs_hash_alias (realname));\n       mvs_add_alias (realname, aliasname, 0);\n       alias_anchor->alias_emitted = 1;\n       return 2;\n@@ -939,8 +1006,9 @@ mvs_check_alias (realname, aliasname)\n }\n \n /* Called from check_newline via the macro HANDLE_PRAGMA.\n-   FINPUT is the source file input stream.\n-   NODE is the tree node for the token after the \"pragma\".\n+   p_getc is a pointer to get character routine.\n+   p_ungetc is a pointer to un-get character routine.\n+   pname is the pointer to the name of the pragma to process.\n    The result is 1 if the pragma was handled.  */\n \n int"}, {"sha": "3bdb025c2aa64c0f886d332505a04f6dd2ebf26e", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1349cc37b40b735236edebb3354e9ccc4663c5/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1349cc37b40b735236edebb3354e9ccc4663c5/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=8d1349cc37b40b735236edebb3354e9ccc4663c5", "patch": "@@ -2427,7 +2427,7 @@ check_label_emit ();\n       emit_insn (gen_rtx_SET (VOIDmode,\n \t\t\t  gen_rtx_SUBREG (SImode, r, 1), operands[1]));\n       emit_insn (gen_rtx_SET (VOIDmode, r,\n-\t\t\t  gen_rtx_MULT (SImode, r, operands[2])));\n+\t\t\t  gen_rtx_MULT (DImode, r, operands[2])));\n       emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n \t\t\t  gen_rtx_SUBREG (SImode, r, 1)));\n     }\n@@ -2448,11 +2448,9 @@ check_label_emit ();\n    [(set_attr \"length\" \"4\")]\n )\n \n-;; XXX see comments in mulsi above.\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(mult:DI (match_operand:DI 1 \"general_operand\" \"%0\")\n-;; XXX see above (match_operand:SI 2 \"general_operand\" \"g\")))]\n \t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n   \"\"\n   \"*\n@@ -2534,7 +2532,7 @@ check_label_emit ();\n \n   emit_insn (gen_extendsidi2 (r, operands[1]));\n   emit_insn (gen_rtx_SET (VOIDmode, r,\n-\t\t\tgen_rtx_DIV (SImode, r, operands[2])));\n+\t\t\tgen_rtx_DIV (DImode, r, operands[2])));\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n \t\t\tgen_rtx_SUBREG (SImode, r, 1)));\n   DONE;\n@@ -2563,7 +2561,7 @@ check_label_emit ();\n \t{\n \t  emit_insn (gen_zero_extendsidi2 (dr, operands[1]));\n \t  emit_insn (gen_rtx_SET (VOIDmode, dr,\n-\t\t\tgen_rtx_DIV (SImode, dr, operands[2])));\n+\t\t\tgen_rtx_DIV (DImode, dr, operands[2])));\n \t}\n       else\n \t{\n@@ -2597,7 +2595,7 @@ check_label_emit ();\n \t\t\t  gen_rtx_LSHIFTRT (DImode, dr,\n \t\t\t\t    gen_rtx_CONST_INT (SImode, 32))));\n       emit_insn (gen_rtx_SET (VOIDmode, dr,\n-\t\t    gen_rtx_DIV (SImode, dr, sr)));\n+\t\t    gen_rtx_DIV (DImode, dr, sr)));\n       emit_jump_insn (gen_jump (label3));\n       emit_label (label1);\n       emit_insn (gen_rtx_SET (VOIDmode, dr_1, dr_0));\n@@ -2697,7 +2695,7 @@ check_label_emit ();\n \n   emit_insn (gen_extendsidi2 (r, operands[1]));\n   emit_insn (gen_rtx_SET (VOIDmode, r,\n-\t\t\tgen_rtx_MOD (SImode, r, operands[2])));\n+\t\t\tgen_rtx_MOD (DImode, r, operands[2])));\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n \t\t\tgen_rtx_SUBREG (SImode, r, 0)));\n   DONE;\n@@ -2716,6 +2714,7 @@ check_label_emit ();\n {\n   rtx dr = gen_reg_rtx (DImode);\n   rtx dr_0 = gen_rtx_SUBREG (SImode, dr, 0);\n+  rtx dr_1 = gen_rtx_SUBREG (SImode, dr, 1);\n \n   emit_insn (gen_rtx_SET (VOIDmode, dr_0, operands[1]));\n \n@@ -2727,7 +2726,7 @@ check_label_emit ();\n \t\t\t      gen_rtx_LSHIFTRT (DImode, dr,\n \t\t\t\t\tgen_rtx_CONST_INT (SImode, 32))));\n \t  emit_insn (gen_rtx_SET (VOIDmode, dr,\n-\t\t\tgen_rtx_MOD (SImode, dr, operands[2])));\n+\t\t\tgen_rtx_MOD (DImode, dr, operands[2])));\n \t}\n       else\n \t{\n@@ -2756,12 +2755,11 @@ check_label_emit ();\n       emit_jump_insn (gen_bgtu (label3));\n       emit_insn (gen_cmpsi (sr, const1_rtx));\n       emit_jump_insn (gen_blt (label2));\n-      emit_insn (gen_cmpsi (sr, const1_rtx));\n       emit_jump_insn (gen_beq (label1));\n       emit_insn (gen_rtx_SET (VOIDmode, dr,\n \t\t\t  gen_rtx_LSHIFTRT (DImode, dr,\n \t\t\t\t    gen_rtx_CONST_INT (SImode, 32))));\n-      emit_insn (gen_rtx_SET (VOIDmode, dr, gen_rtx_MOD (SImode, dr, sr)));\n+      emit_insn (gen_rtx_SET (VOIDmode, dr, gen_rtx_MOD (DImode, dr, sr)));\n       emit_jump_insn (gen_jump (label3));\n       emit_label (label1);\n       emit_insn (gen_rtx_SET (VOIDmode, dr_0, const0_rtx));\n@@ -3085,7 +3083,7 @@ check_label_emit ();\n     }\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      mvs_check_page (0, 6, 0);\n+      mvs_check_page (0, 6, 2);\n       return \\\"OC\t%O0(2,%R0),%H2\\\";\n     }\n   mvs_check_page (0, 6, 0);"}]}