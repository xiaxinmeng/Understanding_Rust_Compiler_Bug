{"sha": "fd335985582cbb9de3a08e071e652bb38960b493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzMzU5ODU1ODJjYmI5ZGUzYTA4ZTA3MWU2NTJiYjM4OTYwYjQ5Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-25T19:40:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-26T15:23:17Z"}, "message": "libstdc++: P1645R1 constexpr for <numeric> algorithms\n\nThis adds constexpr to 11 algorithms defined in <numeric> as per P1645R1.\n\nlibstdc++-v3/ChangeLog:\n\n\tP1645R1 constexpr for <numeric> algorithms\n\t* include/bits/stl_numeric.h (iota, accumulate, inner_product,\n\tpartial_sum, adjacent_difference): Make conditionally constexpr for\n\tC++20.\n\t* include/std/numeric (__cpp_lib_constexpr_numeric): Define this feature\n\ttest macro.\n\t(reduce, transform_reduce, exclusive_scan, inclusive_scan,\n\ttransform_exclusive_scan, transform_inclusive_scan): Make conditionally\n\tconstexpr for C++20.\n\t* include/std/version (__cpp_lib_constexpr_numeric): Define.\n\t* testsuite/26_numerics/accumulate/constexpr.cc: New test.\n\t* testsuite/26_numerics/adjacent_difference/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/exclusive_scan/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/inclusive_scan/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/inner_product/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/iota/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/partial_sum/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/reduce/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/transform_exclusive_scan/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/transform_inclusive_scan/constexpr.cc: Likewise.\n\t* testsuite/26_numerics/transform_reduce/constexpr.cc: Likewise.", "tree": {"sha": "fc771c2e5fd26b2de28ddcecfdf120e8eb6077b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc771c2e5fd26b2de28ddcecfdf120e8eb6077b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd335985582cbb9de3a08e071e652bb38960b493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd335985582cbb9de3a08e071e652bb38960b493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd335985582cbb9de3a08e071e652bb38960b493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd335985582cbb9de3a08e071e652bb38960b493/comments", "author": null, "committer": null, "parents": [{"sha": "113f0a639dbdd78048373a253ec64145ead7d29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113f0a639dbdd78048373a253ec64145ead7d29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113f0a639dbdd78048373a253ec64145ead7d29d"}], "stats": {"total": 541, "additions": 541, "deletions": 0}, "files": [{"sha": "8af27d4cc52195a825a377312fc6a460fcbaa77e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -1,3 +1,27 @@\n+2020-02-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tP1645R1 constexpr for <numeric> algorithms\n+\t* include/bits/stl_numeric.h (iota, accumulate, inner_product,\n+\tpartial_sum, adjacent_difference): Make conditionally constexpr for\n+\tC++20.\n+\t* include/std/numeric (__cpp_lib_constexpr_numeric): Define this feature\n+\ttest macro.\n+\t(reduce, transform_reduce, exclusive_scan, inclusive_scan,\n+\ttransform_exclusive_scan, transform_inclusive_scan): Make conditionally\n+\tconstexpr for C++20.\n+\t* include/std/version (__cpp_lib_constexpr_numeric): Define.\n+\t* testsuite/26_numerics/accumulate/constexpr.cc: New test.\n+\t* testsuite/26_numerics/adjacent_difference/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/exclusive_scan/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/inclusive_scan/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/inner_product/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/iota/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/partial_sum/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/reduce/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/transform_exclusive_scan/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/transform_inclusive_scan/constexpr.cc: Likewise.\n+\t* testsuite/26_numerics/transform_reduce/constexpr.cc: Likewise.\n+\n 2020-02-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ranges_algo.h (__lexicographical_compare_fn): Declare"}, {"sha": "f95c86a0d4869c9ba4ea0201bdf791c17cd223bf", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -83,6 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup numeric_ops\n    */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)\n     {\n@@ -128,6 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  The final sum.\n    */\n   template<typename _InputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)\n     {\n@@ -154,6 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  The final sum.\n    */\n   template<typename _InputIterator, typename _Tp, typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,\n \t       _BinaryOperation __binary_op)\n@@ -182,6 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  The final inner product.\n    */\n   template<typename _InputIterator1, typename _InputIterator2, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     inner_product(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t  _InputIterator2 __first2, _Tp __init)\n@@ -214,6 +218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    */\n   template<typename _InputIterator1, typename _InputIterator2, typename _Tp,\n \t   typename _BinaryOperation1, typename _BinaryOperation2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     inner_product(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t  _InputIterator2 __first2, _Tp __init,\n@@ -246,6 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  Iterator pointing just beyond the values written to __result.\n    */\n   template<typename _InputIterator, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     partial_sum(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result)\n@@ -287,6 +293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     partial_sum(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, _BinaryOperation __binary_op)\n@@ -326,6 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  DR 539. partial_sum and adjacent_difference should mention requirements\n    */\n   template<typename _InputIterator, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     adjacent_difference(_InputIterator __first,\n \t\t\t_InputIterator __last, _OutputIterator __result)\n@@ -369,6 +377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     adjacent_difference(_InputIterator __first, _InputIterator __last,\n \t\t\t_OutputIterator __result, _BinaryOperation __binary_op)"}, {"sha": "57dcac6d2156c9985b40a19b32c3fe6603515578", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -226,6 +226,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if __cplusplus > 201703L\n+#define __cpp_lib_constexpr_numeric 201911L\n+#endif\n+\n   /// @addtogroup numeric_ops\n   /// @{\n \n@@ -249,6 +253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  arithmetic) the result can be different.\n    */\n   template<typename _InputIterator, typename _Tp, typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _Tp\n     reduce(_InputIterator __first, _InputIterator __last, _Tp __init,\n \t   _BinaryOperation __binary_op)\n@@ -284,6 +289,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Equivalent to calling `std::reduce(first, last, init, std::plus<>())`.\n    */\n   template<typename _InputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     reduce(_InputIterator __first, _InputIterator __last, _Tp __init)\n     { return std::reduce(__first, __last, std::move(__init), plus<>()); }\n@@ -300,6 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Equivalent to calling `std::reduce(first, last, T{}, std::plus<>())`.\n    */\n   template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename iterator_traits<_InputIterator>::value_type\n     reduce(_InputIterator __first, _InputIterator __last)\n     {\n@@ -327,6 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator1, typename _InputIterator2, typename _Tp,\n \t   typename _BinaryOperation1, typename _BinaryOperation2>\n+    _GLIBCXX20_CONSTEXPR\n     _Tp\n     transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _Tp __init,\n@@ -369,6 +377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  elements.\n    */\n   template<typename _InputIterator1, typename _InputIterator2, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _Tp __init)\n@@ -394,6 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _Tp,\n \t   typename _BinaryOperation, typename _UnaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _Tp\n     transform_reduce(_InputIterator __first, _InputIterator __last, _Tp __init,\n \t\t     _BinaryOperation __binary_op, _UnaryOperation __unary_op)\n@@ -436,6 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp,\n \t   typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     exclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result, _Tp __init,\n@@ -469,6 +480,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  so the Nth input element is not included.\n    */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     exclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result, _Tp __init)\n@@ -497,6 +509,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryOperation, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     inclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result, _BinaryOperation __binary_op,\n@@ -525,6 +538,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     inclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result, _BinaryOperation __binary_op)\n@@ -557,6 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  so the Nth input element is included.\n    */\n   template<typename _InputIterator, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     inclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result)\n@@ -584,6 +599,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp,\n \t   typename _BinaryOperation, typename _UnaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     transform_exclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t\t     _OutputIterator __result, _Tp __init,\n@@ -622,6 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryOperation, typename _UnaryOperation, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     transform_inclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t\t     _OutputIterator __result,\n@@ -655,6 +672,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _InputIterator, typename _OutputIterator,\n \t  typename _BinaryOperation, typename _UnaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     transform_inclusive_scan(_InputIterator __first, _InputIterator __last,\n \t\t\t     _OutputIterator __result,"}, {"sha": "c6a202e250d14cbd726a485504bdaee0df94bea5", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -187,6 +187,7 @@\n #define __cpp_lib_constexpr_complex 201711L\n #define __cpp_lib_constexpr_dynamic_alloc 201907L\n #define __cpp_lib_constexpr_invoke 201907L\n+#define __cpp_lib_constexpr_numeric 201911L\n #define __cpp_lib_erase_if 202002L\n #define __cpp_lib_interpolate 201902L\n #ifdef _GLIBCXX_HAS_GTHREADS"}, {"sha": "6fefd5a3f98243502a102ab734d160114111d4a4", "filename": "libstdc++-v3/testsuite/26_numerics/accumulate/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  auto sum = std::accumulate(x, x+5, 0);\n+  return sum == 15;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  auto prod = std::accumulate(x, x+5, 1, std::multiplies{});\n+  return prod == 120;\n+}\n+\n+static_assert(test02());"}, {"sha": "5f79284e2687ec8da8463bb379ab5d71f0a417e6", "filename": "libstdc++-v3/testsuite/26_numerics/adjacent_difference/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  int y[5];\n+  std::adjacent_difference(x, x+5, y);\n+  return y[0] == 1 && y[1] == 1 && y[2] == 1 && y[3] == 1 && y[4] == 1;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  int y[5];\n+  std::adjacent_difference(x, x+5, y, std::multiplies{});\n+  return y[0] == 1 && y[1] == 2 && y[2] == 6 && y[3] == 12 && y[4] == 20;\n+}\n+\n+static_assert(test02());"}, {"sha": "c885ba5dbd1bd0ca3ef3aef25629a56aa871bfb4", "filename": "libstdc++-v3/testsuite/26_numerics/exclusive_scan/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fexclusive_scan%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fexclusive_scan%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fexclusive_scan%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::exclusive_scan(x, x+3, y, 0);\n+  return y[0] == 0 && y[1] == 1 && y[2] == 3;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::exclusive_scan(x, x+3, y, 1, std::multiplies{});\n+  return y[0] == 1 && y[1] == 1 && y[2] == 2;\n+}\n+\n+static_assert(test02());"}, {"sha": "a50a70e9fc2c384857b4a1d61954690b267d0444", "filename": "libstdc++-v3/testsuite/26_numerics/inclusive_scan/constexpr.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finclusive_scan%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finclusive_scan%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finclusive_scan%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::inclusive_scan(x, x+3, y);\n+  return y[0] == 1 && y[1] == 3 && y[2] == 6;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::inclusive_scan(x, x+3, y, std::multiplies{});\n+  return y[0] == 1 && y[1] == 2 && y[2] == 6;\n+}\n+\n+static_assert(test02());\n+\n+constexpr bool\n+test03()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::inclusive_scan(x, x+3, y, std::multiplies{}, 2);\n+  return y[0] == 2 && y[1] == 4 && y[2] == 12;\n+}\n+\n+static_assert(test03());"}, {"sha": "a6aaf351560c7a8fdd4364ca237340e4c279cdb6", "filename": "libstdc++-v3/testsuite/26_numerics/inner_product/constexpr.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  int y[5] = {2,4,6,8,10};\n+  auto ret = std::inner_product(x, x+5, y, 0);\n+  return ret == 110;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  int y[5] = {2,4,6,8,10};\n+  auto ret = std::inner_product(x, x+5, y, 1,\n+\t\t\t\tstd::multiplies{}, std::plus{});\n+  return ret == 3*6*9*12*15;\n+}\n+\n+static_assert(test02());"}, {"sha": "50eecf8b60528114feede3a12f8fe913e9655f58", "filename": "libstdc++-v3/testsuite/26_numerics/iota/constexpr.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[3] = {0};\n+  std::iota(x, x+3, 0);\n+  return x[0] == 0 && x[1] == 1 && x[2] == 2;\n+}\n+\n+static_assert(test01());"}, {"sha": "c2e758492e44d58b27c098ca8bab1205e7e19fcc", "filename": "libstdc++-v3/testsuite/26_numerics/partial_sum/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::partial_sum(x, x+3, y);\n+  return y[0] == 1 && y[1] == 3 && y[2] == 6;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::partial_sum(x, x+3, y, std::multiplies{});\n+  return y[0] == 1 && y[1] == 2 && y[2] == 6;\n+}\n+\n+static_assert(test02());"}, {"sha": "5ed48892df2e4e2c475de5aa9a5e1677974e0ef5", "filename": "libstdc++-v3/testsuite/26_numerics/reduce/constexpr.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Freduce%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Freduce%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Freduce%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  auto sum = std::reduce(x, x+5);\n+  return sum == 15;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  auto sum = std::reduce(x, x+5, 0);\n+  return sum == 15;\n+}\n+\n+static_assert(test02());\n+\n+constexpr bool\n+test03()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  auto prod = std::reduce(x, x+5, 1, std::multiplies{});\n+  return prod == 120;\n+}\n+\n+static_assert(test03());"}, {"sha": "f01fd241a8ad3c1c4ae369e43701dbb254863c6c", "filename": "libstdc++-v3/testsuite/26_numerics/transform_exclusive_scan/constexpr.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_exclusive_scan%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_exclusive_scan%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_exclusive_scan%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::transform_exclusive_scan(x, x+3, y, 0, std::plus{}, std::negate{});\n+  return y[0] == 0 && y[1] == -1 && y[2] == -3;\n+}\n+\n+static_assert(test01());"}, {"sha": "6f072b74569b10d4abafd52fc1d8972a3d2e03bf", "filename": "libstdc++-v3/testsuite/26_numerics/transform_inclusive_scan/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_inclusive_scan%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_inclusive_scan%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_inclusive_scan%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::transform_inclusive_scan(x, x+3, y, std::plus{}, std::negate{}, 0);\n+  return y[0] == -1 && y[1] == -3 && y[2] == -6;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[3] = {1,2,3};\n+  int y[3];\n+  std::transform_inclusive_scan(x, x+3, y, std::plus{}, std::negate{});\n+  return y[0] == -1 && y[1] == -3 && y[2] == -6;\n+}\n+\n+static_assert(test02());"}, {"sha": "eb054c1f8af55375f5e9a8d388c4a75e351be854", "filename": "libstdc++-v3/testsuite/26_numerics/transform_reduce/constexpr.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_reduce%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd335985582cbb9de3a08e071e652bb38960b493/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_reduce%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ftransform_reduce%2Fconstexpr.cc?ref=fd335985582cbb9de3a08e071e652bb38960b493", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+#include <numeric>\n+\n+constexpr bool\n+test01()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  int y[5] = {2,4,6,8,10};\n+  auto ret = std::transform_reduce(x, x+5, y, 0);\n+  return ret == 110;\n+}\n+\n+static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  int y[5] = {2,4,6,8,10};\n+  auto ret = std::transform_reduce(x, x+5, y, 1,\n+\t\t\t\t   std::multiplies{}, std::plus{});\n+  return ret == 3*6*9*12*15;\n+}\n+\n+static_assert(test02());\n+\n+constexpr bool\n+test03()\n+{\n+  int x[5] = {1,2,3,4,5};\n+  auto ret = std::transform_reduce(x, x+5, 0, std::plus{}, std::negate{});\n+  return ret == -15;\n+}\n+\n+static_assert(test03());"}]}