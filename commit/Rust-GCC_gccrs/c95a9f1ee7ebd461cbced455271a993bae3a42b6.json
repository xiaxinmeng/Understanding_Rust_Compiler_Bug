{"sha": "c95a9f1ee7ebd461cbced455271a993bae3a42b6", "node_id": "C_kwDOANBUbNoAKGM5NWE5ZjFlZTdlYmQ0NjFjYmNlZDQ1NTI3MWE5OTNiYWUzYTQyYjY", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-12-15T05:22:33Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-12-15T05:22:33Z"}, "message": "[PR100843] store by mult pieces: punt on max_len < min_len\n\nThe testcase confuses the code that detects min and max len for the\nmemset, so max_len ends up less than min_len.  That shouldn't be\npossible, but the testcase requires us to handle this case.\n\nThe store-by-mult-pieces algorithm actually relies on min and max\nlengths, so if we find them to be inconsistent, the best we can do is\npunting.\n\n\nfor  gcc/ChangeLog\n\n\tPR middle-end/100843\n\t* builtins.c (try_store_by_multiple_pieces): Fail if min_len\n\tis greater than max_len.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR middle-end/100843\n\t* gcc.dg/pr100843.c: New.", "tree": {"sha": "524fbd66d186521103aa50ca54adf346236f2e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/524fbd66d186521103aa50ca54adf346236f2e26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95a9f1ee7ebd461cbced455271a993bae3a42b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95a9f1ee7ebd461cbced455271a993bae3a42b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95a9f1ee7ebd461cbced455271a993bae3a42b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95a9f1ee7ebd461cbced455271a993bae3a42b6/comments", "author": null, "committer": null, "parents": [{"sha": "9c6586bc20ba49d6f42b889936cee0f7563a0966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6586bc20ba49d6f42b889936cee0f7563a0966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6586bc20ba49d6f42b889936cee0f7563a0966"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "304d87dafb750b5dc36af21cec9e53439a01cefb", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95a9f1ee7ebd461cbced455271a993bae3a42b6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95a9f1ee7ebd461cbced455271a993bae3a42b6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c95a9f1ee7ebd461cbced455271a993bae3a42b6", "patch": "@@ -3963,7 +3963,8 @@ try_store_by_multiple_pieces (rtx to, rtx len, unsigned int ctz_len,\n   else if (max_len == min_len)\n     blksize = max_len;\n   else\n-    gcc_unreachable ();\n+    /* Huh, max_len < min_len?  Punt.  See pr100843.c.  */\n+    return false;\n   if (min_len >= blksize)\n     {\n       min_len -= blksize;"}, {"sha": "695a2ec3f68185bb988b62bd3e0a724b67167975", "filename": "gcc/testsuite/gcc.dg/pr100843.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95a9f1ee7ebd461cbced455271a993bae3a42b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100843.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95a9f1ee7ebd461cbced455271a993bae3a42b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100843.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100843.c?ref=c95a9f1ee7ebd461cbced455271a993bae3a42b6", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -w\" } */\n+\n+char c;\n+void *memset();\n+void test_integer_conversion_memset(void *d) {\n+  memset(d, '\\0', c);\n+}"}]}