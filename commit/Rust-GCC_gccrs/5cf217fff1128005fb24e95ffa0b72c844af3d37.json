{"sha": "5cf217fff1128005fb24e95ffa0b72c844af3d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmMjE3ZmZmMTEyODAwNWZiMjRlOTVmZmEwYjcyYzg0NGFmM2QzNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-18T22:18:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-18T22:18:21Z"}, "message": "* eh_type.cc (__cxa_current_exception_type) Mark throw().\n\n\t* unwind-cxx.h (__cxa_get_globals, __cxa_get_globals_fast): Mark const.\n\t(__cxa_get_exception_ptr): Mark pure.\n\t(__cxa_bad_cast, __cxa_bad_typeid): Mark noreturn\n\t(__terminate): Makr throw ().\n\t* exception (terminate): Mark throw().\n\t(uncaught_exception): Mark pure.\n\t* eh_ptr.cc (_M_safe_bool_dummy): Mark throw().\n\t* guard.cc (__cxa_guard_abort, __cxa_guard_release): Mark throw().\n\t* eh_terminate.cc (__terminate, terminate): Mark throw().\n\t* vec.cc (__cxa_vec_cleanup): Mark throw().\n\t* cxxabi.h (__cxa_vec_cleanup, __cxa_guard_release, __cxa_guard_abort): Mark throw ().\n\t(__cxa_pure_virtual): Mark noreturn.\n\t(__cxa_current_exception_type): Mark throw and pure.\n\t* exception_ptr.h (operator ==, !=, _M_get, !, ==,\n\t__cxa_exception_type): Mark pure.\n\t(_M_safe_bool_dummy): Mark pure and const.\n\nFrom-SVN: r146331", "tree": {"sha": "bbad215524bee16dc90ee4efb9a8fbee20c6358d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbad215524bee16dc90ee4efb9a8fbee20c6358d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cf217fff1128005fb24e95ffa0b72c844af3d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf217fff1128005fb24e95ffa0b72c844af3d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf217fff1128005fb24e95ffa0b72c844af3d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf217fff1128005fb24e95ffa0b72c844af3d37/comments", "author": null, "committer": null, "parents": [{"sha": "5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "1e8966131837f48fc2baac642cd0de022e967eaf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -1,3 +1,23 @@\n+2009-04-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* eh_type.cc (__cxa_current_exception_type) Mark throw().\n+\t* unwind-cxx.h (__cxa_get_globals, __cxa_get_globals_fast): Mark const.\n+\t(__cxa_get_exception_ptr): Mark pure.\n+\t(__cxa_bad_cast, __cxa_bad_typeid): Mark noreturn\n+\t(__terminate): Makr throw ().\n+\t* exception (terminate): Mark throw().\n+\t(uncaught_exception): Mark pure.\n+\t* eh_ptr.cc (_M_safe_bool_dummy): Mark throw().\n+\t* guard.cc (__cxa_guard_abort, __cxa_guard_release): Mark throw().\n+\t* eh_terminate.cc (__terminate, terminate): Mark throw().\n+\t* vec.cc (__cxa_vec_cleanup): Mark throw().\n+\t* cxxabi.h (__cxa_vec_cleanup, __cxa_guard_release, __cxa_guard_abort): Mark throw ().\n+\t(__cxa_pure_virtual): Mark noreturn.\n+\t(__cxa_current_exception_type): Mark throw and pure.\n+\t* exception_ptr.h (operator ==, !=, _M_get, !, ==,\n+\t__cxa_exception_type): Mark pure.\n+\t(_M_safe_bool_dummy): Mark pure and const.\n+\n 2009-04-18  Jan Hubicka  <jh@suse.cz>\n \n \t* src/pool_allocator.cc (_M_get_free_list, _M_get_mutex): Mark throw ()"}, {"sha": "834e434e1e15fd74650744bef6a4c2b05f00ea75", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -100,7 +100,7 @@ namespace __cxxabiv1\n   \n   void \n   __cxa_vec_cleanup(void* __array_address, size_t __element_count,\n-\t\t    size_t __element_size, __cxa_cdtor_type destructor);\n+\t\t    size_t __element_size, __cxa_cdtor_type destructor) _GLIBCXX_NOTHROW;\n   \n   // Destruct and release array.\n   void \n@@ -121,14 +121,14 @@ namespace __cxxabiv1\n   __cxa_guard_acquire(__guard*);\n \n   void \n-  __cxa_guard_release(__guard*);\n+  __cxa_guard_release(__guard*) _GLIBCXX_NOTHROW;\n \n   void \n-  __cxa_guard_abort(__guard*);\n+  __cxa_guard_abort(__guard*) _GLIBCXX_NOTHROW;\n \n   // Pure virtual functions.\n   void\n-  __cxa_pure_virtual(void);\n+  __cxa_pure_virtual(void) __attribute__ ((__noreturn__));\n \n   // Exception handling.\n   void\n@@ -567,13 +567,13 @@ namespace __cxxabiv1\n   // Returns the type_info for the currently handled exception [15.3/8], or\n   // null if there is none.\n   extern \"C\" std::type_info*\n-  __cxa_current_exception_type();\n+  __cxa_current_exception_type() _GLIBCXX_NOTHROW __attribute__ ((__pure__));\n \n   // A magic placeholder class that can be caught by reference\n   // to recognize foreign exceptions.\n   class __foreign_exception\n   {\n-    virtual ~__foreign_exception() throw();\n+    virtual ~__foreign_exception() _GLIBCXX_NOTHROW;\n     virtual void __pure_dummy() = 0; // prevent catch by value\n   };\n "}, {"sha": "bbe5f8f13f98490f1f817fe1da6b20a052c813fb", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -113,7 +113,7 @@ std::__exception_ptr::exception_ptr::_M_get() const throw()\n \n \n void\n-std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()\n+std::__exception_ptr::exception_ptr::_M_safe_bool_dummy() throw ()\n {\n }\n "}, {"sha": "e03c037412a0804bf6a766d6ff6e6af6d00d6c26", "filename": "libstdc++-v3/libsupc++/eh_terminate.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -32,7 +32,7 @@\n using namespace __cxxabiv1;\n \n void\n-__cxxabiv1::__terminate (std::terminate_handler handler)\n+__cxxabiv1::__terminate (std::terminate_handler handler) throw ()\n {\n   try {\n     handler ();\n@@ -43,7 +43,7 @@ __cxxabiv1::__terminate (std::terminate_handler handler)\n }\n \n void\n-std::terminate ()\n+std::terminate () throw()\n {\n   __terminate (__terminate_handler);\n }"}, {"sha": "bb8be0b752e1d53f294d79842f3785fa8598f34f", "filename": "libstdc++-v3/libsupc++/eh_type.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -33,7 +33,7 @@ namespace __cxxabiv1\n // Returns the type_info for the currently handled exception [15.3/8], or\n // null if there is none.\n extern \"C\"\n-std::type_info *__cxa_current_exception_type ()\n+std::type_info *__cxa_current_exception_type () throw()\n {\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   __cxa_exception *header = globals->caughtExceptions;"}, {"sha": "c8b334fe94573024211b2896f0d02404b45edb05", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -93,7 +93,7 @@ namespace std\n \n   /** The runtime will call this function if %exception handling must be\n    *  abandoned for any reason.  It can also be called by the user.  */\n-  void terminate() __attribute__ ((__noreturn__));\n+  void terminate() throw() __attribute__ ((__noreturn__));\n \n   /// Takes a new handler function as an argument, returns the old function.\n   unexpected_handler set_unexpected(unexpected_handler) throw();\n@@ -112,7 +112,7 @@ namespace std\n    *  2:  \"When @c uncaught_exception() is true, throwing an %exception can\n    *  result in a call of @c terminate() (15.5.1).\"\n    */\n-  bool uncaught_exception() throw();\n+  bool uncaught_exception() throw() __attribute__ ((__pure__));\n \n   // @} group exceptions\n } // namespace std"}, {"sha": "56997221f257b263722f58641cadc761ae01c665", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -77,10 +77,10 @@ namespace std\n   namespace __exception_ptr\n   {\n     bool \n-    operator==(const exception_ptr&, const exception_ptr&) throw();\n+    operator==(const exception_ptr&, const exception_ptr&) throw() __attribute__ ((__pure__));\n \n     bool \n-    operator!=(const exception_ptr&, const exception_ptr&) throw();\n+    operator!=(const exception_ptr&, const exception_ptr&) throw() __attribute__ ((__pure__));\n \n     class exception_ptr\n     {\n@@ -91,9 +91,9 @@ namespace std\n       void _M_addref() throw();\n       void _M_release() throw();\n \n-      void *_M_get() const throw();\n+      void *_M_get() const throw() __attribute__ ((__pure__));\n \n-      void _M_safe_bool_dummy();\n+      void _M_safe_bool_dummy() throw() __attribute__ ((__const__));\n \n       friend exception_ptr std::current_exception() throw();\n       friend void std::rethrow_exception(exception_ptr);\n@@ -141,14 +141,14 @@ namespace std\n       }\n #endif\n \n-      bool operator!() const throw();\n+      bool operator!() const throw() __attribute__ ((__pure__));\n       operator __safe_bool() const throw();\n \n       friend bool \n-      operator==(const exception_ptr&, const exception_ptr&) throw();\n+      operator==(const exception_ptr&, const exception_ptr&) throw() __attribute__ ((__pure__));\n \n       const type_info*\n-      __cxa_exception_type() const throw();\n+      __cxa_exception_type() const throw() __attribute__ ((__pure__));\n     };\n \n   } // namespace __exception_ptr"}, {"sha": "dace046e5442906f29721045ac4a62433f4daf92", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -330,7 +330,7 @@ namespace __cxxabiv1\n   }\n \n   extern \"C\"\n-  void __cxa_guard_abort (__guard *g)\n+  void __cxa_guard_abort (__guard *g) throw ()\n   {\n #ifdef _GLIBCXX_USE_FUTEX\n     // If __sync_* and futex syscall are supported, don't use any global\n@@ -369,7 +369,7 @@ namespace __cxxabiv1\n   }\n \n   extern \"C\"\n-  void __cxa_guard_release (__guard *g)\n+  void __cxa_guard_release (__guard *g) throw ()\n   {\n #ifdef _GLIBCXX_USE_FUTEX\n     // If __sync_* and futex syscall are supported, don't use any global"}, {"sha": "e4918b211bfbf76019cb02e5fc0da7b24c245aa7", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -148,8 +148,8 @@ struct __cxa_eh_globals\n // either of the following functions.  The \"fast\" version assumes at least\n // one prior call of __cxa_get_globals has been made from the current\n // thread, so no initialization is necessary.\n-extern \"C\" __cxa_eh_globals *__cxa_get_globals () throw();\n-extern \"C\" __cxa_eh_globals *__cxa_get_globals_fast () throw();\n+extern \"C\" __cxa_eh_globals *__cxa_get_globals () throw() __attribute__ ((__const__));\n+extern \"C\" __cxa_eh_globals *__cxa_get_globals_fast () throw() __attribute__ ((__const__));\n \n // Allocate memory for the primary exception plus the thrown object.\n extern \"C\" void *__cxa_allocate_exception(std::size_t thrown_size) throw();\n@@ -172,14 +172,14 @@ extern \"C\" void __cxa_throw (void *thrown_exception,\n      __attribute__((noreturn));\n \n // Used to implement exception handlers.\n-extern \"C\" void *__cxa_get_exception_ptr (void *) throw();\n+extern \"C\" void *__cxa_get_exception_ptr (void *) throw() __attribute__ ((__pure__));\n extern \"C\" void *__cxa_begin_catch (void *) throw();\n extern \"C\" void __cxa_end_catch ();\n extern \"C\" void __cxa_rethrow () __attribute__((noreturn));\n \n // These facilitate code generation for recurring situations.\n-extern \"C\" void __cxa_bad_cast ();\n-extern \"C\" void __cxa_bad_typeid ();\n+extern \"C\" void __cxa_bad_cast () __attribute__((__noreturn__));\n+extern \"C\" void __cxa_bad_typeid () __attribute__((__noreturn__));\n \n // @@@ These are not directly specified by the IA-64 C++ ABI.\n \n@@ -204,7 +204,7 @@ extern \"C\" void __cxa_end_cleanup (void);\n \n // Invokes given handler, dying appropriately if the user handler was\n // so inconsiderate as to return.\n-extern void __terminate(std::terminate_handler) __attribute__((noreturn));\n+extern void __terminate(std::terminate_handler) throw () __attribute__((__noreturn__));\n extern void __unexpected(std::unexpected_handler) __attribute__((noreturn));\n \n // The current installed user handlers."}, {"sha": "f1322896d0be55b44b8c9c2b9667799c1f48e0d9", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf217fff1128005fb24e95ffa0b72c844af3d37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=5cf217fff1128005fb24e95ffa0b72c844af3d37", "patch": "@@ -248,7 +248,7 @@ namespace __cxxabiv1\n   __cxa_vec_cleanup(void *array_address,\n \t\t    std::size_t element_count,\n \t\t    std::size_t element_size,\n-\t\t    __cxa_cdtor_type destructor)\n+\t\t    __cxa_cdtor_type destructor) throw()\n   {\n     if (destructor)\n       {"}]}