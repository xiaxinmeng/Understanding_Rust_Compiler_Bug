{"sha": "1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMxYWQ3YmJiY2Q1ZGM2OTlhMzdhOTVkMGU4OThjNWQyYWQwNzJkMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-17T21:04:41Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-17T21:04:41Z"}, "message": "cfgloop.h: Do not include rtl.h.\n\n\t* cfgloop.h: Do not include rtl.h.\n\t(enum iv_extend_code): New.\n\t(struct rtx_iv): Use iv_extend_code instead of rtx_code.\n\t* Makefile.in (CFGLOOP_H): Do not depend on RTL_H.\n\t* loop-iv.c (iv_extend_to_rtx_code): New function to translate\n\tan IV_EXTEND_CODE to an RTX_CODE.\n\t(dump_iv_info): Update for rtx_iv field type change.\n\t(iv_constant): Likewise.\n\t(iv_subreg): Likewise.\n\t(iv_extend): Likewise.\n\t(iv_neg): Likewise.\n\t(iv_add): Likewise.\n\t(iv_mult): Likewise.\n\t(iv_shift): Likewise.\n\t(get_biv_step_1): Likewise.\n\t(get_biv_step): Likewise.\n\t(iv_analyze_biv): Likewise.\n\t(get_iv_value): Likewise.\n\t(shorten_into_mode): Likewise.\n\t(canonicalize_iv_subregs): Likewise.\n\t* sese.c (sese_build_liveouts): Use MAY_HAVE_DEBUG_STMTS instead\n\tof MAY_HAVE_DEBUG_INSNS.\n\t* tree-ssa-loop-ivopts.c: Include recog.h after expr.h.\n\t* tree-ssa-loop-prefetch.c: Likewise.\n\nFrom-SVN: r188711", "tree": {"sha": "fb623bea7d991ba556e0f910d949067cce0700b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb623bea7d991ba556e0f910d949067cce0700b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/comments", "author": null, "committer": null, "parents": [{"sha": "46d33ae927892aa2fbec97dfa90f7bd9a055a1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d33ae927892aa2fbec97dfa90f7bd9a055a1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46d33ae927892aa2fbec97dfa90f7bd9a055a1bb"}], "stats": {"total": 150, "additions": 103, "deletions": 47}, "files": [{"sha": "105e2cda0cb2d7b205b8797993793bdf817eae52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -1,3 +1,30 @@\n+2012-06-17  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cfgloop.h: Do not include rtl.h.\n+\t(enum iv_extend_code): New.\n+\t(struct rtx_iv): Use iv_extend_code instead of rtx_code.\n+\t* Makefile.in (CFGLOOP_H): Do not depend on RTL_H.\n+\t* loop-iv.c (iv_extend_to_rtx_code): New function to translate\n+\tan IV_EXTEND_CODE to an RTX_CODE.\n+\t(dump_iv_info): Update for rtx_iv field type change.\n+\t(iv_constant): Likewise.\n+\t(iv_subreg): Likewise.\n+\t(iv_extend): Likewise.\n+\t(iv_neg): Likewise.\n+\t(iv_add): Likewise.\n+\t(iv_mult): Likewise.\n+\t(iv_shift): Likewise.\n+\t(get_biv_step_1): Likewise.\n+\t(get_biv_step): Likewise.\n+\t(iv_analyze_biv): Likewise.\n+\t(get_iv_value): Likewise.\n+\t(shorten_into_mode): Likewise.\n+\t(canonicalize_iv_subregs): Likewise.\n+\t* sese.c (sese_build_liveouts): Use MAY_HAVE_DEBUG_STMTS instead\n+\tof MAY_HAVE_DEBUG_INSNS.\n+\t* tree-ssa-loop-ivopts.c: Include recog.h after expr.h.\n+\t* tree-ssa-loop-prefetch.c: Likewise.\n+\n 2012-06-17  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* expmed.c (ceil_log2): Move from here..."}, {"sha": "0a0e8f1c249e1ef92d279782e2e76d342b3d934d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -897,7 +897,7 @@ SEL_SCHED_IR_H = sel-sched-ir.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H) \\\n \t$(GGC_H) $(BITMAP_H) vecprim.h $(SCHED_INT_H) $(CFGLOOP_H) $(REGSET_H)\n SEL_SCHED_DUMP_H = sel-sched-dump.h $(SEL_SCHED_IR_H)\n CFGLAYOUT_H = cfglayout.h $(BASIC_BLOCK_H)\n-CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) $(RTL_H) vecprim.h double-int.h \\\n+CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) vecprim.h double-int.h \\\n \t$(BITMAP_H) sbitmap.h\n IPA_UTILS_H = ipa-utils.h $(TREE_H) $(CGRAPH_H)\n IPA_REFERENCE_H = ipa-reference.h $(BITMAP_H) $(TREE_H)"}, {"sha": "a731354f6bc282ac28037a414f8a55b7c8e1ad28", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -22,8 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_CFGLOOP_H\n \n #include \"basic-block.h\"\n-/* For rtx_code.  */\n-#include \"rtl.h\"\n #include \"vecprim.h\"\n #include \"double-int.h\"\n \n@@ -46,6 +44,14 @@ struct GTY (()) lpt_decision {\n   unsigned times;\n };\n \n+/* The type of extend applied to an IV.  */\n+enum iv_extend_code\n+{\n+  IV_SIGN_EXTEND,\n+  IV_ZERO_EXTEND,\n+  IV_UNKNOWN_EXTEND\n+};\n+\n /* The structure describing a bound on number of iterations of a loop.  */\n \n struct GTY ((chain_next (\"%h.next\"))) nb_iter_bound {\n@@ -342,8 +348,9 @@ struct rtx_iv\n      see the description above).  */\n   rtx base, step;\n \n-  /* The type of extend applied to it (SIGN_EXTEND, ZERO_EXTEND or UNKNOWN).  */\n-  enum rtx_code extend;\n+  /* The type of extend applied to it (IV_SIGN_EXTEND, IV_ZERO_EXTEND,\n+     or IV_UNKNOWN_EXTEND).  */\n+  enum iv_extend_code extend;\n \n   /* Operations applied in the extended mode.  */\n   rtx delta, mult;"}, {"sha": "cdcd303d4fdbb42d320cf871cd934191e28739b3", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 61, "deletions": 39, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -112,6 +112,22 @@ static htab_t bivs;\n \n static bool iv_analyze_op (rtx, rtx, struct rtx_iv *);\n \n+/* Return the RTX code corresponding to the IV extend code EXTEND.  */\n+static inline enum rtx_code\n+iv_extend_to_rtx_code (enum iv_extend_code extend)\n+{\n+  switch (extend)\n+    {\n+    case IV_SIGN_EXTEND:\n+      return SIGN_EXTEND;\n+    case IV_ZERO_EXTEND:\n+      return ZERO_EXTEND;\n+    case IV_UNKNOWN_EXTEND:\n+      return UNKNOWN;\n+    }\n+  gcc_unreachable ();\n+}\n+\n /* Dumps information about IV to FILE.  */\n \n extern void dump_iv_info (FILE *, struct rtx_iv *);\n@@ -139,7 +155,7 @@ dump_iv_info (FILE *file, struct rtx_iv *iv)\n \n   if (iv->mode != iv->extend_mode)\n     fprintf (file, \" %s to %s\",\n-\t     rtx_name[iv->extend],\n+\t     rtx_name[iv_extend_to_rtx_code (iv->extend)],\n \t     GET_MODE_NAME (iv->extend_mode));\n \n   if (iv->mult != const1_rtx)\n@@ -390,7 +406,7 @@ iv_constant (struct rtx_iv *iv, rtx cst, enum machine_mode mode)\n   iv->base = cst;\n   iv->step = const0_rtx;\n   iv->first_special = false;\n-  iv->extend = UNKNOWN;\n+  iv->extend = IV_UNKNOWN_EXTEND;\n   iv->extend_mode = iv->mode;\n   iv->delta = const0_rtx;\n   iv->mult = const1_rtx;\n@@ -411,7 +427,7 @@ iv_subreg (struct rtx_iv *iv, enum machine_mode mode)\n       val = lowpart_subreg (mode, val, iv->extend_mode);\n \n       iv->base = val;\n-      iv->extend = UNKNOWN;\n+      iv->extend = IV_UNKNOWN_EXTEND;\n       iv->mode = iv->extend_mode = mode;\n       iv->delta = const0_rtx;\n       iv->mult = const1_rtx;\n@@ -424,7 +440,7 @@ iv_subreg (struct rtx_iv *iv, enum machine_mode mode)\n   if (GET_MODE_BITSIZE (mode) > GET_MODE_BITSIZE (iv->mode))\n     return false;\n \n-  iv->extend = UNKNOWN;\n+  iv->extend = IV_UNKNOWN_EXTEND;\n   iv->mode = mode;\n \n   iv->base = simplify_gen_binary (PLUS, iv->extend_mode, iv->delta,\n@@ -441,17 +457,17 @@ iv_subreg (struct rtx_iv *iv, enum machine_mode mode)\n /* Evaluates application of EXTEND to MODE on IV.  */\n \n static bool\n-iv_extend (struct rtx_iv *iv, enum rtx_code extend, enum machine_mode mode)\n+iv_extend (struct rtx_iv *iv, enum iv_extend_code extend, enum machine_mode mode)\n {\n   /* If iv is invariant, just calculate the new value.  */\n   if (iv->step == const0_rtx\n       && !iv->first_special)\n     {\n       rtx val = get_iv_value (iv, const0_rtx);\n-      val = simplify_gen_unary (extend, mode, val, iv->extend_mode);\n-\n+      val = simplify_gen_unary (iv_extend_to_rtx_code (extend), mode,\n+\t\t\t\tval, iv->extend_mode);\n       iv->base = val;\n-      iv->extend = UNKNOWN;\n+      iv->extend = IV_UNKNOWN_EXTEND;\n       iv->mode = iv->extend_mode = mode;\n       iv->delta = const0_rtx;\n       iv->mult = const1_rtx;\n@@ -461,7 +477,7 @@ iv_extend (struct rtx_iv *iv, enum rtx_code extend, enum machine_mode mode)\n   if (mode != iv->extend_mode)\n     return false;\n \n-  if (iv->extend != UNKNOWN\n+  if (iv->extend != IV_UNKNOWN_EXTEND\n       && iv->extend != extend)\n     return false;\n \n@@ -475,7 +491,7 @@ iv_extend (struct rtx_iv *iv, enum rtx_code extend, enum machine_mode mode)\n static bool\n iv_neg (struct rtx_iv *iv)\n {\n-  if (iv->extend == UNKNOWN)\n+  if (iv->extend == IV_UNKNOWN_EXTEND)\n     {\n       iv->base = simplify_gen_unary (NEG, iv->extend_mode,\n \t\t\t\t     iv->base, iv->extend_mode);\n@@ -502,7 +518,7 @@ iv_add (struct rtx_iv *iv0, struct rtx_iv *iv1, enum rtx_code op)\n   rtx arg;\n \n   /* Extend the constant to extend_mode of the other operand if necessary.  */\n-  if (iv0->extend == UNKNOWN\n+  if (iv0->extend == IV_UNKNOWN_EXTEND\n       && iv0->mode == iv0->extend_mode\n       && iv0->step == const0_rtx\n       && GET_MODE_SIZE (iv0->extend_mode) < GET_MODE_SIZE (iv1->extend_mode))\n@@ -511,7 +527,7 @@ iv_add (struct rtx_iv *iv0, struct rtx_iv *iv1, enum rtx_code op)\n       iv0->base = simplify_gen_unary (ZERO_EXTEND, iv0->extend_mode,\n \t\t\t\t      iv0->base, iv0->mode);\n     }\n-  if (iv1->extend == UNKNOWN\n+  if (iv1->extend == IV_UNKNOWN_EXTEND\n       && iv1->mode == iv1->extend_mode\n       && iv1->step == const0_rtx\n       && GET_MODE_SIZE (iv1->extend_mode) < GET_MODE_SIZE (iv0->extend_mode))\n@@ -525,7 +541,8 @@ iv_add (struct rtx_iv *iv0, struct rtx_iv *iv1, enum rtx_code op)\n   if (mode != iv1->extend_mode)\n     return false;\n \n-  if (iv0->extend == UNKNOWN && iv1->extend == UNKNOWN)\n+  if (iv0->extend == IV_UNKNOWN_EXTEND\n+      && iv1->extend == IV_UNKNOWN_EXTEND)\n     {\n       if (iv0->mode != iv1->mode)\n \treturn false;\n@@ -537,15 +554,15 @@ iv_add (struct rtx_iv *iv0, struct rtx_iv *iv1, enum rtx_code op)\n     }\n \n   /* Handle addition of constant.  */\n-  if (iv1->extend == UNKNOWN\n+  if (iv1->extend == IV_UNKNOWN_EXTEND\n       && iv1->mode == mode\n       && iv1->step == const0_rtx)\n     {\n       iv0->delta = simplify_gen_binary (op, mode, iv0->delta, iv1->base);\n       return true;\n     }\n \n-  if (iv0->extend == UNKNOWN\n+  if (iv0->extend == IV_UNKNOWN_EXTEND\n       && iv0->mode == mode\n       && iv0->step == const0_rtx)\n     {\n@@ -573,7 +590,7 @@ iv_mult (struct rtx_iv *iv, rtx mby)\n       && GET_MODE (mby) != mode)\n     return false;\n \n-  if (iv->extend == UNKNOWN)\n+  if (iv->extend == IV_UNKNOWN_EXTEND)\n     {\n       iv->base = simplify_gen_binary (MULT, mode, iv->base, mby);\n       iv->step = simplify_gen_binary (MULT, mode, iv->step, mby);\n@@ -598,7 +615,7 @@ iv_shift (struct rtx_iv *iv, rtx mby)\n       && GET_MODE (mby) != mode)\n     return false;\n \n-  if (iv->extend == UNKNOWN)\n+  if (iv->extend == IV_UNKNOWN_EXTEND)\n     {\n       iv->base = simplify_gen_binary (ASHIFT, mode, iv->base, mby);\n       iv->step = simplify_gen_binary (ASHIFT, mode, iv->step, mby);\n@@ -619,7 +636,7 @@ iv_shift (struct rtx_iv *iv, rtx mby)\n static bool\n get_biv_step_1 (df_ref def, rtx reg,\n \t\trtx *inner_step, enum machine_mode *inner_mode,\n-\t\tenum rtx_code *extend, enum machine_mode outer_mode,\n+\t\tenum iv_extend_code *extend, enum machine_mode outer_mode,\n \t\trtx *outer_step)\n {\n   rtx set, rhs, op0 = NULL_RTX, op1 = NULL_RTX;\n@@ -719,7 +736,7 @@ get_biv_step_1 (df_ref def, rtx reg,\n \treturn false;\n \n       *inner_step = const0_rtx;\n-      *extend = UNKNOWN;\n+      *extend = IV_UNKNOWN_EXTEND;\n       *inner_mode = outer_mode;\n       *outer_step = const0_rtx;\n     }\n@@ -739,7 +756,7 @@ get_biv_step_1 (df_ref def, rtx reg,\n       *inner_step = simplify_gen_binary (PLUS, outer_mode,\n \t\t\t\t\t *inner_step, *outer_step);\n       *outer_step = const0_rtx;\n-      *extend = UNKNOWN;\n+      *extend = IV_UNKNOWN_EXTEND;\n     }\n \n   switch (code)\n@@ -763,10 +780,10 @@ get_biv_step_1 (df_ref def, rtx reg,\n     case SIGN_EXTEND:\n     case ZERO_EXTEND:\n       gcc_assert (GET_MODE (op0) == *inner_mode\n-\t\t  && *extend == UNKNOWN\n+\t\t  && *extend == IV_UNKNOWN_EXTEND\n \t\t  && *outer_step == const0_rtx);\n \n-      *extend = code;\n+      *extend = (code == SIGN_EXTEND) ? IV_SIGN_EXTEND : IV_ZERO_EXTEND;\n       break;\n \n     default:\n@@ -785,7 +802,7 @@ get_biv_step_1 (df_ref def, rtx reg,\n \n static bool\n get_biv_step (df_ref last_def, rtx reg, rtx *inner_step,\n-\t      enum machine_mode *inner_mode, enum rtx_code *extend,\n+\t      enum machine_mode *inner_mode, enum iv_extend_code *extend,\n \t      enum machine_mode *outer_mode, rtx *outer_step)\n {\n   *outer_mode = GET_MODE (reg);\n@@ -795,7 +812,7 @@ get_biv_step (df_ref last_def, rtx reg, rtx *inner_step,\n \t\t       outer_step))\n     return false;\n \n-  gcc_assert ((*inner_mode == *outer_mode) != (*extend != UNKNOWN));\n+  gcc_assert ((*inner_mode == *outer_mode) != (*extend != IV_UNKNOWN_EXTEND));\n   gcc_assert (*inner_mode != *outer_mode || *outer_step == const0_rtx);\n \n   return true;\n@@ -849,7 +866,7 @@ iv_analyze_biv (rtx def, struct rtx_iv *iv)\n {\n   rtx inner_step, outer_step;\n   enum machine_mode inner_mode, outer_mode;\n-  enum rtx_code extend;\n+  enum iv_extend_code extend;\n   df_ref last_def;\n \n   if (dump_file)\n@@ -1006,8 +1023,12 @@ iv_analyze_expr (rtx insn, rtx rhs, enum machine_mode mode, struct rtx_iv *iv)\n   switch (code)\n     {\n     case SIGN_EXTEND:\n+      if (!iv_extend (&iv0, IV_SIGN_EXTEND, mode))\n+\treturn false;\n+      break;\n+\n     case ZERO_EXTEND:\n-      if (!iv_extend (&iv0, code, mode))\n+      if (!iv_extend (&iv0, IV_ZERO_EXTEND, mode))\n \treturn false;\n       break;\n \n@@ -1249,10 +1270,11 @@ get_iv_value (struct rtx_iv *iv, rtx iteration)\n \n   val = lowpart_subreg (iv->mode, val, iv->extend_mode);\n \n-  if (iv->extend == UNKNOWN)\n+  if (iv->extend == IV_UNKNOWN_EXTEND)\n     return val;\n \n-  val = simplify_gen_unary (iv->extend, iv->extend_mode, val, iv->mode);\n+  val = simplify_gen_unary (iv_extend_to_rtx_code (iv->extend),\n+\t\t\t    iv->extend_mode, val, iv->mode);\n   val = simplify_gen_binary (PLUS, iv->extend_mode, iv->delta,\n \t\t\t     simplify_gen_binary (MULT, iv->extend_mode,\n \t\t\t\t\t\t  iv->mult, val));\n@@ -2071,7 +2093,7 @@ shorten_into_mode (struct rtx_iv *iv, enum machine_mode mode,\n     }\n \n   iv->mode = mode;\n-  iv->extend = signed_p ? SIGN_EXTEND : ZERO_EXTEND;\n+  iv->extend = signed_p ? IV_SIGN_EXTEND : IV_ZERO_EXTEND;\n }\n \n /* Transforms IV0 and IV1 compared by COND so that they are both compared as\n@@ -2097,31 +2119,31 @@ canonicalize_iv_subregs (struct rtx_iv *iv0, struct rtx_iv *iv1,\n     {\n       case LE:\n       case LT:\n-\tif (iv0->extend == ZERO_EXTEND\n-\t    || iv1->extend == ZERO_EXTEND)\n+\tif (iv0->extend == IV_ZERO_EXTEND\n+\t    || iv1->extend == IV_ZERO_EXTEND)\n \t  return false;\n \tsigned_p = true;\n \tbreak;\n \n       case LEU:\n       case LTU:\n-\tif (iv0->extend == SIGN_EXTEND\n-\t    || iv1->extend == SIGN_EXTEND)\n+\tif (iv0->extend == IV_SIGN_EXTEND\n+\t    || iv1->extend == IV_SIGN_EXTEND)\n \t  return false;\n \tsigned_p = false;\n \tbreak;\n \n       case NE:\n-\tif (iv0->extend != UNKNOWN\n-\t    && iv1->extend != UNKNOWN\n+\tif (iv0->extend != IV_UNKNOWN_EXTEND\n+\t    && iv1->extend != IV_UNKNOWN_EXTEND\n \t    && iv0->extend != iv1->extend)\n \t  return false;\n \n \tsigned_p = false;\n-\tif (iv0->extend != UNKNOWN)\n-\t  signed_p = iv0->extend == SIGN_EXTEND;\n-\tif (iv1->extend != UNKNOWN)\n-\t  signed_p = iv1->extend == SIGN_EXTEND;\n+\tif (iv0->extend != IV_UNKNOWN_EXTEND)\n+\t  signed_p = iv0->extend == IV_SIGN_EXTEND;\n+\tif (iv1->extend != IV_UNKNOWN_EXTEND)\n+\t  signed_p = iv1->extend == IV_SIGN_EXTEND;\n \tbreak;\n \n       default:"}, {"sha": "03b9f3d62aa50afc0d20e0c6f3cda8721ee8c5d4", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -304,7 +304,7 @@ sese_build_liveouts (sese region, bitmap liveouts)\n \n   FOR_EACH_BB (bb)\n     sese_build_liveouts_bb (region, liveouts, bb);\n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_STMTS)\n     FOR_EACH_BB (bb)\n       sese_reset_debug_liveouts_bb (region, liveouts, bb);\n }"}, {"sha": "e5b1d0a105553ce62d27790292951bf943bc0f44", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -78,7 +78,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"ggc.h\"\n #include \"insn-config.h\"\n-#include \"recog.h\"\n #include \"pointer-set.h\"\n #include \"hashtab.h\"\n #include \"tree-chrec.h\"\n@@ -101,6 +100,7 @@ along with GCC; see the file COPYING3.  If not see\n    cost of different addressing modes.  This should be moved to a TBD\n    interface between the GIMPLE and RTL worlds.  */\n #include \"expr.h\"\n+#include \"recog.h\"\n \n /* The infinite cost.  */\n #define INFTY 10000000"}, {"sha": "bc2c81ec4207a65da743ea27c1e3e468cea3494c", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=1c1ad7bbbcd5dc699a37a95d0e898c5d2ad072d1", "patch": "@@ -32,7 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"insn-config.h\"\n-#include \"recog.h\"\n #include \"hashtab.h\"\n #include \"tree-chrec.h\"\n #include \"tree-scalar-evolution.h\"\n@@ -47,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n    between the GIMPLE and RTL worlds.  */\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"recog.h\"\n \n /* This pass inserts prefetch instructions to optimize cache usage during\n    accesses to arrays in loops.  It processes loops sequentially and:"}]}