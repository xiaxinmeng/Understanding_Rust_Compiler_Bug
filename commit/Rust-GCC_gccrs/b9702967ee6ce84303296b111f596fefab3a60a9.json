{"sha": "b9702967ee6ce84303296b111f596fefab3a60a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3MDI5NjdlZTZjZTg0MzAzMjk2YjExMWY1OTZmZWZhYjNhNjBhOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-31T15:23:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-31T15:23:52Z"}, "message": "libgo: Update from Go 1.5 to Go 1.5.1.\n\n    \n    Reviewed-on: https://go-review.googlesource.com/16527\n\nFrom-SVN: r229624", "tree": {"sha": "1d06e8295c2545767c9506ed39fd1c6ac8829167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d06e8295c2545767c9506ed39fd1c6ac8829167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9702967ee6ce84303296b111f596fefab3a60a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9702967ee6ce84303296b111f596fefab3a60a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9702967ee6ce84303296b111f596fefab3a60a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9702967ee6ce84303296b111f596fefab3a60a9/comments", "author": null, "committer": null, "parents": [{"sha": "67376cd2a504c8357d4433f8262b819a8f5af0d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67376cd2a504c8357d4433f8262b819a8f5af0d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67376cd2a504c8357d4433f8262b819a8f5af0d9"}], "stats": {"total": 107, "additions": 90, "deletions": 17}, "files": [{"sha": "8eae1f4c9e7a422bbdf3c488533986d821d90ec5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -1,4 +1,4 @@\n-4b6b496579225cdd897130f6d6fd18ecb100bf99\n+17cc10f7fb07e3f37448feaeb416b52618ae8bbb\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ea32fc1cfb08ef7a4a16b9d3b90b750eb823ab2d", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -1,4 +1,4 @@\n-bb03defe933c89fee44be675d7aa0fbd893ced30\n+f2e4c8b5fb3660d793b2c545ef207153db0a34b1\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "77af434f110af853a21db3f2317bc0586ecb4bb8", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -1 +1 @@\n-go1.5\n\\ No newline at end of file\n+go1.5.1\n\\ No newline at end of file"}, {"sha": "1134997eaaa277f0b0f6592a23c615438b97b327", "filename": "libgo/go/cmd/go/alldocs.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -81,7 +81,6 @@ and test commands:\n \n \t-a\n \t\tforce rebuilding of packages that are already up-to-date.\n-\t\tIn Go releases, does not apply to the standard library.\n \t-n\n \t\tprint the commands but do not run them.\n \t-p n"}, {"sha": "3afac2ee062b9a2c9c2a08b72326fff087d63643", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -60,7 +60,6 @@ and test commands:\n \n \t-a\n \t\tforce rebuilding of packages that are already up-to-date.\n-\t\tIn Go releases, does not apply to the standard library.\n \t-n\n \t\tprint the commands but do not run them.\n \t-p n"}, {"sha": "ff5236e90abd0b0cd08817c55419baded43cb095", "filename": "libgo/go/cmd/go/pkg.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -372,7 +372,8 @@ func loadImport(path, srcDir string, parent *Package, stk *importStack, importPo\n \tif gobin != \"\" {\n \t\tbp.BinDir = gobin\n \t}\n-\tif err == nil && !isLocal && bp.ImportComment != \"\" && bp.ImportComment != path && (!go15VendorExperiment || !strings.Contains(path, \"/vendor/\")) {\n+\tif err == nil && !isLocal && bp.ImportComment != \"\" && bp.ImportComment != path &&\n+\t\t(!go15VendorExperiment || (!strings.Contains(path, \"/vendor/\") && !strings.HasPrefix(path, \"vendor/\"))) {\n \t\terr = fmt.Errorf(\"code in directory %s expects import %q\", bp.Dir, bp.ImportComment)\n \t}\n \tp.load(stk, bp, err)"}, {"sha": "e3e0fd0b5858d79d84a8888159aa567da7c594ee", "filename": "libgo/go/fmt/scan.go", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Ffmt%2Fscan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Ffmt%2Fscan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fscan.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -83,6 +83,8 @@ func Scanln(a ...interface{}) (n int, err error) {\n // the format.  It returns the number of items successfully scanned.\n // If that is less than the number of arguments, err will report why.\n // Newlines in the input must match newlines in the format.\n+// The one exception: the verb %c always scans the next rune in the\n+// input, even if it is a space (or tab etc.) or newline.\n func Scanf(format string, a ...interface{}) (n int, err error) {\n \treturn Fscanf(os.Stdin, format, a...)\n }\n@@ -1164,15 +1166,18 @@ func (s *ss) doScanf(format string, a []interface{}) (numProcessed int, err erro\n \t\tif !widPresent {\n \t\t\ts.maxWid = hugeWid\n \t\t}\n-\t\ts.SkipSpace()\n+\n+\t\tc, w := utf8.DecodeRuneInString(format[i:])\n+\t\ti += w\n+\n+\t\tif c != 'c' {\n+\t\t\ts.SkipSpace()\n+\t\t}\n \t\ts.argLimit = s.limit\n \t\tif f := s.count + s.maxWid; f < s.argLimit {\n \t\t\ts.argLimit = f\n \t\t}\n \n-\t\tc, w := utf8.DecodeRuneInString(format[i:])\n-\t\ti += w\n-\n \t\tif numProcessed >= len(a) { // out of operands\n \t\t\ts.errorString(\"too few operands for format %\" + format[i-w:])\n \t\t\tbreak"}, {"sha": "334c4a6b2428b944f9c71b9904067862f0a72b89", "filename": "libgo/go/fmt/scan_test.go", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Ffmt%2Fscan_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Ffmt%2Fscan_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fscan_test.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -300,10 +300,13 @@ var scanfTests = []ScanfTest{\n \t{\"%2s\", \"sssss\", &xVal, Xs(\"ss\")},\n \n \t// Fixed bugs\n-\t{\"%d\\n\", \"27\\n\", &intVal, 27},  // ok\n-\t{\"%d\\n\", \"28 \\n\", &intVal, 28}, // was: \"unexpected newline\"\n-\t{\"%v\", \"0\", &intVal, 0},        // was: \"EOF\"; 0 was taken as base prefix and not counted.\n-\t{\"%v\", \"0\", &uintVal, uint(0)}, // was: \"EOF\"; 0 was taken as base prefix and not counted.\n+\t{\"%d\\n\", \"27\\n\", &intVal, 27},      // ok\n+\t{\"%d\\n\", \"28 \\n\", &intVal, 28},     // was: \"unexpected newline\"\n+\t{\"%v\", \"0\", &intVal, 0},            // was: \"EOF\"; 0 was taken as base prefix and not counted.\n+\t{\"%v\", \"0\", &uintVal, uint(0)},     // was: \"EOF\"; 0 was taken as base prefix and not counted.\n+\t{\"%c\", \" \", &uintVal, uint(' ')},   // %c must accept a blank.\n+\t{\"%c\", \"\\t\", &uintVal, uint('\\t')}, // %c must accept any space.\n+\t{\"%c\", \"\\n\", &uintVal, uint('\\n')}, // %c must accept any space.\n }\n \n var overflowTests = []ScanTest{"}, {"sha": "f4bb1b35a542d3979d7028cf70fbba3dbc253e9c", "filename": "libgo/go/internal/syscall/windows/registry/value.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fvalue.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -310,7 +310,6 @@ loopItems:\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tif err == syscall.ERROR_MORE_DATA {\n-\t\t\t\tprintln(len(buf), l)\n \t\t\t\t// Double buffer size and try again.\n \t\t\t\tl = uint32(2 * len(buf))\n \t\t\t\tbuf = make([]uint16, l)"}, {"sha": "05811c6c2523cfb54b005c330f15276f1dc9e9a4", "filename": "libgo/go/net/cgo_solaris.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fcgo_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fcgo_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fcgo_solaris.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -7,7 +7,7 @@\n package net\n \n /*\n-#cgo LDFLAGS: -lsocket -lnsl\n+#cgo LDFLAGS: -lsocket -lnsl -lsendfile\n #include <netdb.h>\n */\n "}, {"sha": "c8e113221c45dfa1fca62effc4189c7a3983450c", "filename": "libgo/go/net/http/httputil/reverseproxy.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -105,7 +105,7 @@ type requestCanceler interface {\n }\n \n type runOnFirstRead struct {\n-\tio.Reader\n+\tio.Reader // optional; nil means empty body\n \n \tfn func() // Run before first Read, then set to nil\n }\n@@ -115,6 +115,9 @@ func (c *runOnFirstRead) Read(bs []byte) (int, error) {\n \t\tc.fn()\n \t\tc.fn = nil\n \t}\n+\tif c.Reader == nil {\n+\t\treturn 0, io.EOF\n+\t}\n \treturn c.Reader.Read(bs)\n }\n "}, {"sha": "80a26abe414f1b1252234839ba0f67259a3ac3dc", "filename": "libgo/go/net/http/httputil/reverseproxy_test.go", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy_test.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -7,6 +7,7 @@\n package httputil\n \n import (\n+\t\"bufio\"\n \t\"io/ioutil\"\n \t\"log\"\n \t\"net/http\"\n@@ -281,3 +282,41 @@ func TestReverseProxyCancellation(t *testing.T) {\n \t\tt.Fatal(\"DefaultClient.Do() returned nil error\")\n \t}\n }\n+\n+func req(t *testing.T, v string) *http.Request {\n+\treq, err := http.ReadRequest(bufio.NewReader(strings.NewReader(v)))\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\treturn req\n+}\n+\n+// Issue 12344\n+func TestNilBody(t *testing.T) {\n+\tbackend := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tw.Write([]byte(\"hi\"))\n+\t}))\n+\tdefer backend.Close()\n+\n+\tfrontend := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {\n+\t\tbackURL, _ := url.Parse(backend.URL)\n+\t\trp := NewSingleHostReverseProxy(backURL)\n+\t\tr := req(t, \"GET / HTTP/1.0\\r\\n\\r\\n\")\n+\t\tr.Body = nil // this accidentally worked in Go 1.4 and below, so keep it working\n+\t\trp.ServeHTTP(w, r)\n+\t}))\n+\tdefer frontend.Close()\n+\n+\tres, err := http.Get(frontend.URL)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer res.Body.Close()\n+\tslurp, err := ioutil.ReadAll(res.Body)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif string(slurp) != \"hi\" {\n+\t\tt.Errorf(\"Got %q; want %q\", slurp, \"hi\")\n+\t}\n+}"}, {"sha": "9008322dc5a76fd9a401e6e08fb181b8a9d4a99a", "filename": "libgo/go/net/lookup.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Flookup.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Flookup.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Flookup.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -123,6 +123,9 @@ func lookupIPDeadline(host string, deadline time.Time) (addrs []IPAddr, err erro\n \n // LookupPort looks up the port for the given network and service.\n func LookupPort(network, service string) (port int, err error) {\n+\tif n, i, ok := dtoi(service, 0); ok && i == len(service) {\n+\t\treturn n, nil\n+\t}\n \treturn lookupPort(network, service)\n }\n "}, {"sha": "258a5bda48f263fbf8b27c3747e0826420a6b261", "filename": "libgo/go/net/port_test.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fnet%2Fport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fport_test.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -27,6 +27,7 @@ var portTests = []struct {\n \t{\"tcp\", \"time\", 37, true},\n \t{\"tcp\", \"domain\", 53, true},\n \t{\"tcp\", \"finger\", 79, true},\n+\t{\"tcp\", \"42\", 42, true},\n \n \t{\"udp\", \"echo\", 7, true},\n \t{\"udp\", \"tftp\", 69, true},\n@@ -36,6 +37,7 @@ var portTests = []struct {\n \t{\"udp\", \"ntp\", 123, true},\n \t{\"udp\", \"snmp\", 161, true},\n \t{\"udp\", \"syslog\", 514, true},\n+\t{\"udp\", \"42\", 42, true},\n \n \t{\"--badnet--\", \"zzz\", 0, false},\n \t{\"tcp\", \"--badport--\", 0, false},"}, {"sha": "6301d0173b26c03b32c81a1e91f1cd53ace8c9e9", "filename": "libgo/go/runtime/extern.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fruntime%2Fextern.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fruntime%2Fextern.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fextern.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -47,6 +47,9 @@ It is a comma-separated list of name=val pairs setting these named variables:\n \tthat allow the garbage collector to avoid repeating a stack scan during the\n \tmark termination phase.\n \n+\tgcstackbarrierall: setting gcstackbarrierall=1 installs stack barriers\n+\tin every stack frame, rather than in exponentially-spaced frames.\n+\n \tgcstoptheworld: setting gcstoptheworld=1 disables concurrent garbage collection,\n \tmaking every garbage collection a stop-the-world event. Setting gcstoptheworld=2\n \talso disables concurrent sweeping after the garbage collection finishes."}, {"sha": "2a95cc70e84865da9d60200d6557b6bb4e206018", "filename": "libgo/go/runtime/gc_test.go", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fruntime%2Fgc_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9702967ee6ce84303296b111f596fefab3a60a9/libgo%2Fgo%2Fruntime%2Fgc_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fgc_test.go?ref=b9702967ee6ce84303296b111f596fefab3a60a9", "patch": "@@ -471,4 +471,21 @@ func testAssertVar(x interface{}) error {\n \treturn nil\n }\n \n+func TestAssertE2T2Liveness(t *testing.T) {\n+\t*runtime.TestingAssertE2T2GC = true\n+\tdefer func() {\n+\t\t*runtime.TestingAssertE2T2GC = false\n+\t}()\n+\n+\tpoisonStack()\n+\ttestIfaceEqual(io.EOF)\n+}\n+\n+func testIfaceEqual(x interface{}) {\n+\tif x == \"abc\" {\n+\t\t// Prevent inlining\n+\t\tpanic(\"\")\n+\t}\n+}\n+\n */"}]}