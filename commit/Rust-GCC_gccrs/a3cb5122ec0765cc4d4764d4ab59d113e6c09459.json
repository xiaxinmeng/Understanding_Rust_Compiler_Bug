{"sha": "a3cb5122ec0765cc4d4764d4ab59d113e6c09459", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjYjUxMjJlYzA3NjVjYzRkNDc2NGQ0YWI1OWQxMTNlNmMwOTQ1OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-07-12T17:06:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-07-12T17:06:40Z"}, "message": "expr.c (expand_load_internal): New function.\n\n\t* expr.c (expand_load_internal): New function.\n\t(LOAD_INTERNAL): Use it.\n\nFrom-SVN: r43969", "tree": {"sha": "64e18cbc4658d24afea6fb22c62c5c3b3747a653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64e18cbc4658d24afea6fb22c62c5c3b3747a653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3cb5122ec0765cc4d4764d4ab59d113e6c09459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cb5122ec0765cc4d4764d4ab59d113e6c09459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3cb5122ec0765cc4d4764d4ab59d113e6c09459", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cb5122ec0765cc4d4764d4ab59d113e6c09459/comments", "author": null, "committer": null, "parents": [{"sha": "b9aaec62b7c3838fc80744a99a98792870a1e204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9aaec62b7c3838fc80744a99a98792870a1e204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9aaec62b7c3838fc80744a99a98792870a1e204"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "6e23ae4c1f087ad67fdfe596cced87afd1effb5b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cb5122ec0765cc4d4764d4ab59d113e6c09459/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cb5122ec0765cc4d4764d4ab59d113e6c09459/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a3cb5122ec0765cc4d4764d4ab59d113e6c09459", "patch": "@@ -1,3 +1,8 @@\n+2001-07-12  Tom Tromey  <tromey@redhat.com>\n+\n+\t* expr.c (expand_load_internal): New function.\n+\t(LOAD_INTERNAL): Use it.\n+\n 2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* lang-specs.h: Forbit the use if `-femit-class-file{s}' without"}, {"sha": "c9b4a3cd833343f28414ca0215d74531de917558", "filename": "gcc/java/expr.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cb5122ec0765cc4d4764d4ab59d113e6c09459/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cb5122ec0765cc4d4764d4ab59d113e6c09459/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=a3cb5122ec0765cc4d4764d4ab59d113e6c09459", "patch": "@@ -57,6 +57,7 @@ static void expand_java_array_length PARAMS ((void));\n static tree build_java_monitor PARAMS ((tree, tree));\n static void expand_java_pushc PARAMS ((int, tree));\n static void expand_java_return PARAMS ((tree));\n+static void expand_load_internal PARAMS ((int, tree, int));\n static void expand_java_NEW PARAMS ((tree));\n static void expand_java_INSTANCEOF PARAMS ((tree));\n static void expand_java_CHECKCAST PARAMS ((tree));\n@@ -1086,6 +1087,32 @@ expand_java_return (type)\n     }\n }\n \n+static void\n+expand_load_internal (index, type, pc)\n+     int index;\n+     tree type;\n+     int pc;\n+{\n+  tree copy;\n+  tree var = find_local_variable (index, type, pc);\n+\n+  /* Now VAR is the VAR_DECL (or PARM_DECL) that we are going to push\n+     on the stack.  If there is an assignment to this VAR_DECL between\n+     the stack push and the use, then the wrong code could be\n+     generated.  To avoid this we create a new local and copy our\n+     value into it.  Then we push this new local on the stack.\n+     Hopefully this all gets optimized out.  */\n+  copy = build_decl (VAR_DECL, NULL_TREE, type);\n+  DECL_CONTEXT (copy) = current_function_decl;\n+  layout_decl (copy, 0);\n+  DECL_REGISTER (copy) = 1;\n+  expand_decl (copy);\n+  MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (copy);\n+  DECL_INITIAL (copy) = var;\n+  expand_decl_init (copy);\n+  push_value (copy);\n+}\n+\n tree\n build_address_of (value)\n      tree value;\n@@ -2841,7 +2868,7 @@ process_jvm_instruction (PC, byte_ops, length)\n \n /* internal macro added for use by the WIDE case */\n #define LOAD_INTERNAL(OPTYPE, OPVALUE) \\\n-  push_value (find_local_variable (OPVALUE, type_map[OPVALUE], oldpc));\n+  expand_load_internal (OPVALUE, type_map[OPVALUE], oldpc);\n \n /* Push local variable onto the opcode stack. */\n #define LOAD(OPERAND_TYPE, OPERAND_VALUE) \\"}]}