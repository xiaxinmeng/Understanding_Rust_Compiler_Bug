{"sha": "1f00c1b9cda9e377e278314a6e3b50bc45157e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwMGMxYjljZGE5ZTM3N2UyNzgzMTRhNmUzYjUwYmM0NTE1N2UyMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-10T08:58:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-10T08:58:24Z"}, "message": "match.pd: Move rest of the conversion combining patterns from tree-ssa-forwprop.c.\n\n2014-11-10  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Move rest of the conversion combining patterns\n\tfrom tree-ssa-forwprop.c.\n\t* tree-ssa-forwprop.c (combine_conversions): Remove.\n\t(pass_forwprop::execute): Do not call it.\n\nFrom-SVN: r217279", "tree": {"sha": "d96d086a6a9e3361fe4586a0d66eeb948219f77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96d086a6a9e3361fe4586a0d66eeb948219f77f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f00c1b9cda9e377e278314a6e3b50bc45157e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f00c1b9cda9e377e278314a6e3b50bc45157e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f00c1b9cda9e377e278314a6e3b50bc45157e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f00c1b9cda9e377e278314a6e3b50bc45157e22/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67b6981474ce883a419c89fd13d7ae85abf67934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b6981474ce883a419c89fd13d7ae85abf67934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b6981474ce883a419c89fd13d7ae85abf67934"}], "stats": {"total": 161, "additions": 35, "deletions": 126}, "files": [{"sha": "0e01ec7412a2fd7e52b76df93ccc91325dcf3239", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f00c1b9cda9e377e278314a6e3b50bc45157e22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f00c1b9cda9e377e278314a6e3b50bc45157e22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f00c1b9cda9e377e278314a6e3b50bc45157e22", "patch": "@@ -1,3 +1,10 @@\n+2014-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Move rest of the conversion combining patterns\n+\tfrom tree-ssa-forwprop.c.\n+\t* tree-ssa-forwprop.c (combine_conversions): Remove.\n+\t(pass_forwprop::execute): Do not call it.\n+\n 2014-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple-low.c (lower_function_body): Clear the location of the first"}, {"sha": "04c657608bb34c5f916e0d2809938dbc2c022d71", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f00c1b9cda9e377e278314a6e3b50bc45157e22/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f00c1b9cda9e377e278314a6e3b50bc45157e22/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1f00c1b9cda9e377e278314a6e3b50bc45157e22", "patch": "@@ -411,4 +411,23 @@ along with GCC; see the file COPYING3.  If not see\n \t&& ! (final_ptr && inside_prec != inter_prec)\n \t&& ! (final_prec != GET_MODE_PRECISION (TYPE_MODE (type))\n \t      && TYPE_MODE (type) == TYPE_MODE (inter_type)))\n-    (ocvt @0))))))\n+    (ocvt @0))\n+\n+   /* A truncation to an unsigned type (a zero-extension) should be\n+      canonicalized as bitwise and of a mask.  */\n+   (if (final_int && inter_int && inside_int\n+\t&& final_prec == inside_prec\n+\t&& final_prec > inter_prec\n+\t&& inter_unsignedp)\n+    (convert (bit_and @0 { wide_int_to_tree\n+\t                     (inside_type,\n+\t\t\t      wi::mask (inter_prec, false,\n+\t\t\t\t\tTYPE_PRECISION (inside_type))); })))\n+\n+   /* If we are converting an integer to a floating-point that can\n+      represent it exactly and back to an integer, we can skip the\n+      floating-point conversion.  */\n+   (if (inside_int && inter_float && final_int &&\n+\t(unsigned) significand_size (TYPE_MODE (inter_type))\n+\t>= inside_prec - !inside_unsignedp)\n+    (convert @0))))))"}, {"sha": "358dc4cf43a2d95b162b2cbe503bc1b6001f127f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 8, "deletions": 125, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f00c1b9cda9e377e278314a6e3b50bc45157e22/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f00c1b9cda9e377e278314a6e3b50bc45157e22/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=1f00c1b9cda9e377e278314a6e3b50bc45157e22", "patch": "@@ -2345,114 +2345,6 @@ associate_plusminus (gimple_stmt_iterator *gsi)\n   return false;\n }\n \n-/* Combine two conversions in a row for the second conversion at *GSI.\n-   Returns 1 if there were any changes made, 2 if cfg-cleanup needs to\n-   run.  Else it returns 0.  */\n- \n-static int\n-combine_conversions (gimple_stmt_iterator *gsi)\n-{\n-  gimple stmt = gsi_stmt (*gsi);\n-  gimple def_stmt;\n-  tree op0, lhs;\n-  enum tree_code code = gimple_assign_rhs_code (stmt);\n-  enum tree_code code2;\n-\n-  gcc_checking_assert (CONVERT_EXPR_CODE_P (code)\n-\t\t       || code == FLOAT_EXPR\n-\t\t       || code == FIX_TRUNC_EXPR);\n-\n-  lhs = gimple_assign_lhs (stmt);\n-  op0 = gimple_assign_rhs1 (stmt);\n-  if (useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (op0)))\n-    {\n-      gimple_assign_set_rhs_code (stmt, TREE_CODE (op0));\n-      return 1;\n-    }\n-\n-  if (TREE_CODE (op0) != SSA_NAME)\n-    return 0;\n-\n-  def_stmt = SSA_NAME_DEF_STMT (op0);\n-  if (!is_gimple_assign (def_stmt))\n-    return 0;\n-\n-  code2 = gimple_assign_rhs_code (def_stmt);\n-\n-  if (CONVERT_EXPR_CODE_P (code2) || code2 == FLOAT_EXPR)\n-    {\n-      tree defop0 = gimple_assign_rhs1 (def_stmt);\n-      tree type = TREE_TYPE (lhs);\n-      tree inside_type = TREE_TYPE (defop0);\n-      tree inter_type = TREE_TYPE (op0);\n-      int inside_int = INTEGRAL_TYPE_P (inside_type);\n-      unsigned int inside_prec = TYPE_PRECISION (inside_type);\n-      int inside_unsignedp = TYPE_UNSIGNED (inside_type);\n-      int inter_int = INTEGRAL_TYPE_P (inter_type);\n-      int inter_float = FLOAT_TYPE_P (inter_type);\n-      unsigned int inter_prec = TYPE_PRECISION (inter_type);\n-      int inter_unsignedp = TYPE_UNSIGNED (inter_type);\n-      int final_int = INTEGRAL_TYPE_P (type);\n-      unsigned int final_prec = TYPE_PRECISION (type);\n-\n-      /* Don't propagate ssa names that occur in abnormal phis.  */\n-      if (TREE_CODE (defop0) == SSA_NAME\n-\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (defop0))\n-\treturn 0;\n-\n-      /* A truncation to an unsigned type should be canonicalized as\n-\t bitwise and of a mask.  */\n-      if (final_int && inter_int && inside_int\n-\t  && final_prec == inside_prec\n-\t  && final_prec > inter_prec\n-\t  && inter_unsignedp)\n-\t{\n-\t  tree tem;\n-\t  tem = fold_build2 (BIT_AND_EXPR, inside_type,\n-\t\t\t     defop0,\n-\t\t\t     wide_int_to_tree\n-\t\t\t     (inside_type,\n-\t\t\t      wi::mask (inter_prec, false,\n-\t\t\t\t\tTYPE_PRECISION (inside_type))));\n-\t  if (!useless_type_conversion_p (type, inside_type))\n-\t    {\n-\t      tem = force_gimple_operand_gsi (gsi, tem, true, NULL_TREE, true,\n-\t\t\t\t\t      GSI_SAME_STMT);\n-\t      gimple_assign_set_rhs1 (stmt, tem);\n-\t    }\n-\t  else\n-\t    gimple_assign_set_rhs_from_tree (gsi, tem);\n-\t  update_stmt (gsi_stmt (*gsi));\n-\t  return 1;\n-\t}\n-\n-      /* If we are converting an integer to a floating-point that can\n-\t represent it exactly and back to an integer, we can skip the\n-\t floating-point conversion.  */\n-      if (inside_int && inter_float && final_int &&\n-          (unsigned) significand_size (TYPE_MODE (inter_type))\n-          >= inside_prec - !inside_unsignedp)\n-        {\n-\t  if (useless_type_conversion_p (type, inside_type))\n-\t    {\n-\t      gimple_assign_set_rhs1 (stmt, unshare_expr (defop0));\n-\t      gimple_assign_set_rhs_code (stmt, TREE_CODE (defop0));\n-\t      update_stmt (stmt);\n-\t      return remove_prop_source_from_use (op0) ? 2 : 1;\n-\t    }\n-\t  else\n-\t    {\n-\t      gimple_assign_set_rhs1 (stmt, defop0);\n-\t      gimple_assign_set_rhs_code (stmt, CONVERT_EXPR);\n-\t      update_stmt (stmt);\n-\t      return remove_prop_source_from_use (op0) ? 2 : 1;\n-\t    }\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n /* Combine an element access with a shuffle.  Returns true if there were\n    any changes made, else it returns false.  */\n  \n@@ -3052,28 +2944,19 @@ pass_forwprop::execute (function *fun)\n \t\t\t || code == FLOAT_EXPR\n \t\t\t || code == FIX_TRUNC_EXPR)\n \t\t  {\n-\t\t    int did_something = combine_conversions (&gsi);\n-\t\t    if (did_something == 2)\n-\t\t      cfg_changed = true;\n-\n \t\t    /* If we have a narrowing conversion to an integral\n \t\t       type that is fed by a BIT_AND_EXPR, we might be\n \t\t       able to remove the BIT_AND_EXPR if it merely\n \t\t       masks off bits outside the final type (and nothing\n \t\t       else.  */\n-\t\t    if (! did_something)\n-\t\t      {\n-\t\t\ttree outer_type = TREE_TYPE (gimple_assign_lhs (stmt));\n-\t\t\ttree inner_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-\t\t\tif (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n-\t\t\t    && INTEGRAL_TYPE_P (outer_type)\n-\t\t\t    && INTEGRAL_TYPE_P (inner_type)\n-\t\t\t    && (TYPE_PRECISION (outer_type)\n-\t\t\t\t<= TYPE_PRECISION (inner_type)))\n-\t\t\t  did_something = simplify_conversion_from_bitmask (&gsi);\n-\t\t      }\n-\t\t      \n-\t\t    changed = did_something != 0;\n+\t\t    tree outer_type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\t\t    tree inner_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+\t\t    if (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n+\t\t\t&& INTEGRAL_TYPE_P (outer_type)\n+\t\t\t&& INTEGRAL_TYPE_P (inner_type)\n+\t\t\t&& (TYPE_PRECISION (outer_type)\n+\t\t\t    <= TYPE_PRECISION (inner_type)))\n+\t\t      changed = simplify_conversion_from_bitmask (&gsi);\n \t\t  }\n \t\telse if (code == VEC_PERM_EXPR)\n \t\t  {"}]}