{"sha": "29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0NTRmZjUyNTdhM2EwNzRlODY4NzkwZGM0ZjZiY2RmYjFiMGIwMw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-09-15T02:03:20Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-09-15T02:03:20Z"}, "message": "tm.texi.in (Stack Arguments): Update obsolete references to current_function_outgoing_args_size.\n\n2012-09-14  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\n\t* doc/tm.texi.in (Stack Arguments): Update obsolete references\n\tto current_function_outgoing_args_size.\n\t(Function Entry): Likewise for current_function_pops_args,\n\tcurrent_function_pretend_args_size,\n\tcurrent_function_outgoing_args_size, and\n\tcurrent_function_epilogue_delay_list.\n\t(Misc): Fix garbled sentence referencing nonexistent\n\tcurrent_function_leaf_function.\n\t* doc/tm.texi: Regenerated.\n\nFrom-SVN: r191339", "tree": {"sha": "46b164a03137c976df2847b2d13389ff93c4848e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46b164a03137c976df2847b2d13389ff93c4848e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "820055a0ac3fcd19230eedacd223d5970d359023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820055a0ac3fcd19230eedacd223d5970d359023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820055a0ac3fcd19230eedacd223d5970d359023"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "e4330b39bc60ab112f438481224ae238a756d7e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "patch": "@@ -1,3 +1,15 @@\n+2012-09-14  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/tm.texi.in (Stack Arguments): Update obsolete references\n+\tto current_function_outgoing_args_size.\n+\t(Function Entry): Likewise for current_function_pops_args,\n+\tcurrent_function_pretend_args_size,\n+\tcurrent_function_outgoing_args_size, and\n+\tcurrent_function_epilogue_delay_list.\n+\t(Misc): Fix garbled sentence referencing nonexistent\n+\tcurrent_function_leaf_function.\n+\t* doc/tm.texi: Regenerated.\n+\n 2012-09-14  Dehao Chen  <dehao@google.com>\n \n \t * tree-eh.c (goto_queue_node): New field."}, {"sha": "d268fd8e3b677308a822546646199e83b2459ed7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "patch": "@@ -3887,11 +3887,12 @@ alignment.  Then the definition should be\n If the value of this macro has a type, it should be an unsigned type.\n @end defmac\n \n-@findex current_function_outgoing_args_size\n+@findex outgoing_args_size\n+@findex crtl->outgoing_args_size\n @defmac ACCUMULATE_OUTGOING_ARGS\n A C expression.  If nonzero, the maximum amount of space required for outgoing arguments\n-will be computed and placed into the variable\n-@code{current_function_outgoing_args_size}.  No space will be pushed\n+will be computed and placed into\n+@code{crtl->outgoing_args_size}.  No space will be pushed\n onto the stack for each call; instead, the function prologue should\n increase the stack frame size by this amount.\n \n@@ -3925,7 +3926,7 @@ if the function called is a library function.\n \n If @code{ACCUMULATE_OUTGOING_ARGS} is defined, this macro controls\n whether the space for these arguments counts in the value of\n-@code{current_function_outgoing_args_size}.\n+@code{crtl->outgoing_args_size}.\n @end defmac\n \n @defmac STACK_PARMS_IN_REG_PARM_AREA\n@@ -4763,7 +4764,8 @@ others leave that for the caller to do.  For example, the 68020 when\n given @option{-mrtd} pops arguments in functions that take a fixed\n number of arguments.\n \n-@findex current_function_pops_args\n+@findex pops_args\n+@findex crtl->args.pops_args\n Your definition of the macro @code{RETURN_POPS_ARGS} decides which\n functions pop their own arguments.  @code{TARGET_ASM_FUNCTION_EPILOGUE}\n needs to know what was decided.  The number of bytes of the current\n@@ -4773,8 +4775,9 @@ function's arguments that this function should pop is available in\n \n @itemize @bullet\n @item\n-@findex current_function_pretend_args_size\n-A region of @code{current_function_pretend_args_size} bytes of\n+@findex pretend_args_size\n+@findex crtl->args.pretend_args_size\n+A region of @code{crtl->args.pretend_args_size} bytes of\n uninitialized space just underneath the first argument arriving on the\n stack.  (This may not be at the very start of the allocated stack region\n if the calling sequence has pushed anything else since pushing the stack\n@@ -4801,7 +4804,7 @@ save area closer to the top of the stack.\n @item\n @cindex @code{ACCUMULATE_OUTGOING_ARGS} and stack frames\n Optionally, when @code{ACCUMULATE_OUTGOING_ARGS} is defined, a region of\n-@code{current_function_outgoing_args_size} bytes to be used for outgoing\n+@code{crtl->outgoing_args_size} bytes to be used for outgoing\n argument lists of the function.  @xref{Stack Arguments}.\n @end itemize\n \n@@ -4850,11 +4853,12 @@ may be reconsidered for a subsequent delay slot.  Also, other insns may\n (at least in principle) be considered for the so far unfilled delay\n slot.\n \n-@findex current_function_epilogue_delay_list\n+@findex epilogue_delay_list\n+@findex crtl->epilogue_delay_list\n @findex final_scan_insn\n The insns accepted to fill the epilogue delay slots are put in an RTL\n-list made with @code{insn_list} objects, stored in the variable\n-@code{current_function_epilogue_delay_list}.  The insn for the first\n+list made with @code{insn_list} objects, stored in\n+@code{crtl->epilogue_delay_list}.  The insn for the first\n delay slot comes first in the list.  Your definition of the macro\n @code{TARGET_ASM_FUNCTION_EPILOGUE} should fill the delay slots by\n outputting the insns in this list, usually by calling\n@@ -10975,8 +10979,8 @@ the hard register itself, if it is known not to be clobbered---or a\n @code{MEM}.\n If you are returning a @code{MEM}, this is only a hint for the allocator;\n it might decide to use another register anyways.\n-You may use @code{current_function_leaf_function} in the hook, functions\n-that use @code{REG_N_SETS}, to determine if the hard\n+You may use @code{current_function_is_leaf} or \n+@code{REG_N_SETS} in the hook to determine if the hard\n register in question will not be clobbered.\n The default value of this hook is @code{NULL}, which disables any special\n allocation."}, {"sha": "86c7f5d218c68679fe2f39f02e5af5ad59538653", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29454ff5257a3a074e868790dc4f6bcdfb1b0b03/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "patch": "@@ -3863,11 +3863,12 @@ alignment.  Then the definition should be\n If the value of this macro has a type, it should be an unsigned type.\n @end defmac\n \n-@findex current_function_outgoing_args_size\n+@findex outgoing_args_size\n+@findex crtl->outgoing_args_size\n @defmac ACCUMULATE_OUTGOING_ARGS\n A C expression.  If nonzero, the maximum amount of space required for outgoing arguments\n-will be computed and placed into the variable\n-@code{current_function_outgoing_args_size}.  No space will be pushed\n+will be computed and placed into\n+@code{crtl->outgoing_args_size}.  No space will be pushed\n onto the stack for each call; instead, the function prologue should\n increase the stack frame size by this amount.\n \n@@ -3901,7 +3902,7 @@ if the function called is a library function.\n \n If @code{ACCUMULATE_OUTGOING_ARGS} is defined, this macro controls\n whether the space for these arguments counts in the value of\n-@code{current_function_outgoing_args_size}.\n+@code{crtl->outgoing_args_size}.\n @end defmac\n \n @defmac STACK_PARMS_IN_REG_PARM_AREA\n@@ -4700,7 +4701,8 @@ others leave that for the caller to do.  For example, the 68020 when\n given @option{-mrtd} pops arguments in functions that take a fixed\n number of arguments.\n \n-@findex current_function_pops_args\n+@findex pops_args\n+@findex crtl->args.pops_args\n Your definition of the macro @code{RETURN_POPS_ARGS} decides which\n functions pop their own arguments.  @code{TARGET_ASM_FUNCTION_EPILOGUE}\n needs to know what was decided.  The number of bytes of the current\n@@ -4710,8 +4712,9 @@ function's arguments that this function should pop is available in\n \n @itemize @bullet\n @item\n-@findex current_function_pretend_args_size\n-A region of @code{current_function_pretend_args_size} bytes of\n+@findex pretend_args_size\n+@findex crtl->args.pretend_args_size\n+A region of @code{crtl->args.pretend_args_size} bytes of\n uninitialized space just underneath the first argument arriving on the\n stack.  (This may not be at the very start of the allocated stack region\n if the calling sequence has pushed anything else since pushing the stack\n@@ -4738,7 +4741,7 @@ save area closer to the top of the stack.\n @item\n @cindex @code{ACCUMULATE_OUTGOING_ARGS} and stack frames\n Optionally, when @code{ACCUMULATE_OUTGOING_ARGS} is defined, a region of\n-@code{current_function_outgoing_args_size} bytes to be used for outgoing\n+@code{crtl->outgoing_args_size} bytes to be used for outgoing\n argument lists of the function.  @xref{Stack Arguments}.\n @end itemize\n \n@@ -4787,11 +4790,12 @@ may be reconsidered for a subsequent delay slot.  Also, other insns may\n (at least in principle) be considered for the so far unfilled delay\n slot.\n \n-@findex current_function_epilogue_delay_list\n+@findex epilogue_delay_list\n+@findex crtl->epilogue_delay_list\n @findex final_scan_insn\n The insns accepted to fill the epilogue delay slots are put in an RTL\n-list made with @code{insn_list} objects, stored in the variable\n-@code{current_function_epilogue_delay_list}.  The insn for the first\n+list made with @code{insn_list} objects, stored in\n+@code{crtl->epilogue_delay_list}.  The insn for the first\n delay slot comes first in the list.  Your definition of the macro\n @code{TARGET_ASM_FUNCTION_EPILOGUE} should fill the delay slots by\n outputting the insns in this list, usually by calling\n@@ -10831,8 +10835,8 @@ the hard register itself, if it is known not to be clobbered---or a\n @code{MEM}.\n If you are returning a @code{MEM}, this is only a hint for the allocator;\n it might decide to use another register anyways.\n-You may use @code{current_function_leaf_function} in the hook, functions\n-that use @code{REG_N_SETS}, to determine if the hard\n+You may use @code{current_function_is_leaf} or \n+@code{REG_N_SETS} in the hook to determine if the hard\n register in question will not be clobbered.\n The default value of this hook is @code{NULL}, which disables any special\n allocation."}]}