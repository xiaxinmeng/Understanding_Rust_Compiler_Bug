{"sha": "5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwNGNkZGJjOGI1Njk0N2ExMGRiNmE4NDU2NGE5ZDlmOWYwZWIwYQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-10-08T14:57:37Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-10-08T14:57:37Z"}, "message": "configure.host [s390*-*]: Enable Java interpreter.\n\n\t* configure.host [s390*-*]: Enable Java interpreter.\n\tEnable hash synchronization.  Add sysdeps dir.\n\t* sysdep/s390/locks.h: New file.\n\nFrom-SVN: r57927", "tree": {"sha": "01a969f7941125d950b95d18c89e92acbbffc0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01a969f7941125d950b95d18c89e92acbbffc0ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/comments", "author": null, "committer": null, "parents": [{"sha": "8177895b7177c070c22879df051bd881910444e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8177895b7177c070c22879df051bd881910444e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8177895b7177c070c22879df051bd881910444e3"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "f28c513a8bb3dd20579955f2862edccdc1777d01", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "patch": "@@ -1,3 +1,9 @@\n+2002-10-08  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* configure.host [s390*-*]: Enable Java interpreter.\n+\tEnable hash synchronization.  Add sysdeps dir.\n+\t* sysdep/s390/locks.h: New file.\n+\n 2002-10-06  Mark Wielaard  <mark@klomp.org>\n \n \t* java/lang/Thread.java (setDaemon): Check startable_flag,"}, {"sha": "f5d1ef07cdaf22f764c361c80f079acce7efb718", "filename": "libjava/configure.host", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "patch": "@@ -127,6 +127,11 @@ case \"${host}\" in\n \tenable_hash_synchronization_default=yes\n \tslow_pthread_self=yes\n \t;;\n+  s390*-*)\n+\tsysdeps_dir=s390\n+\tlibgcj_interpreter=yes\n+\tenable_hash_synchronization_default=yes\n+\t;;\n   sparc-*)\n         ;;\n   ia64-*)"}, {"sha": "b0f3185254fc7f6252f850b6f4c63e2ef1140dd2", "filename": "libjava/sysdep/s390/locks.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/libjava%2Fsysdep%2Fs390%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5404cddbc8b56947a10db6a84564a9d9f9f0eb0a/libjava%2Fsysdep%2Fs390%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fs390%2Flocks.h?ref=5404cddbc8b56947a10db6a84564a9d9f9f0eb0a", "patch": "@@ -0,0 +1,77 @@\n+// locks.h - Thread synchronization primitives. S/390 implementation.\n+\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __SYSDEP_LOCKS_H__\n+#define __SYSDEP_LOCKS_H__\n+\n+typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n+\t\t\t\t/* address.\t\t\t\t*/\n+\n+// Atomically replace *addr by new_val if it was initially equal to old.\n+// Return true if the comparison succeeded.\n+// Assumed to have acquire semantics, i.e. later memory operations\n+// cannot execute before the compare_and_swap finishes.\n+inline static bool\n+compare_and_swap(volatile obj_addr_t *addr,\n+\t\t obj_addr_t old, obj_addr_t new_val) \n+{\n+  int result;\n+\n+  __asm__ __volatile__ (\n+#ifndef __s390x__\n+    \"       cs  %1,%2,0(%3)\\n\"\n+#else\n+    \"       csg %1,%2,0(%3)\\n\"\n+#endif\n+    \"       ipm %0\\n\"\n+    \"       srl %0,28\\n\"\n+    : \"=&d\" (result), \"+d\" (old)\n+    : \"d\" (new_val), \"a\" (addr)\n+    : \"cc\", \"memory\");\n+\n+  return result == 0;\n+}\n+\n+// Set *addr to new_val with release semantics, i.e. making sure\n+// that prior loads and stores complete before this\n+// assignment.\n+inline static void\n+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __asm__ __volatile__(\"bcr 15,0\" : : : \"memory\");\n+  *(addr) = new_val;\n+}\n+\n+// Compare_and_swap with release semantics instead of acquire semantics.\n+// On many architecture, the operation makes both guarantees, so the\n+// implementation can be the same.\n+inline static bool\n+compare_and_swap_release(volatile obj_addr_t *addr,\n+\t\t  \t obj_addr_t old, obj_addr_t new_val)\n+{\n+  return compare_and_swap(addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+inline static void\n+read_barrier()\n+{\n+  __asm__ __volatile__(\"bcr 15,0\" : : : \"memory\");\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+inline static void\n+write_barrier()\n+{\n+  __asm__ __volatile__(\"bcr 15,0\" : : : \"memory\");\n+}\n+#endif"}]}