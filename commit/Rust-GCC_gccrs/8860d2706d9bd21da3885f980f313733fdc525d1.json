{"sha": "8860d2706d9bd21da3885f980f313733fdc525d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2MGQyNzA2ZDliZDIxZGEzODg1Zjk4MGYzMTM3MzNmZGM1MjVkMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-08T06:39:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-08T06:39:02Z"}, "message": "gimplify.c (omp_add_variable): Use GOVD_PRIVATE | GOVD_EXPLICIT for VLA helper variables on target data even if...\n\n\t* gimplify.c (omp_add_variable): Use GOVD_PRIVATE | GOVD_EXPLICIT\n\tfor VLA helper variables on target data even if not GOVD_FIRSTPRIVATE.\n\t(gimplify_scan_omp_clauses): For OMP_CLAUSE_USE_DEVICE_* use just\n\tGOVD_EXPLICIT flags.\n\t(gimplify_omp_workshare): For OMP_TARGET_DATA move all\n\tOMP_CLAUSE_USE_DEVICE_* clauses to the end of clauses chain.\n\t* omp-low.c (scan_sharing_clauses): For OMP_CLAUSE_USE_DEVICE_*\n\tcall install_var_field with mask 11 instead of 3.\n\t(lower_omp_target): For OMP_CLAUSE_USE_DEVICE_* use pass\n\t(splay_tree_key) &DECL_UID (var) to build_sender_ref instead of var.\ngcc/c/\n\t* c-typeck.c (c_finish_omp_clauses): For C_ORT_OMP\n\tOMP_CLAUSE_USE_DEVICE_* clauses use oacc_reduction_head bitmap\n\tinstead of generic_head to track duplicates.\ngcc/cp/\n\t* semantics.c (finish_omp_clauses): For C_ORT_OMP\n\tOMP_CLAUSE_USE_DEVICE_* clauses use oacc_reduction_head bitmap\n\tinstead of generic_head to track duplicates.\nlibgomp/\n\t* target.c (gomp_map_vars_internal): For GOMP_MAP_USE_DEVICE_PTR\n\tperform the lookup in the first loop only if !not_found_cnt, otherwise\n\tperform lookups for it in the second loop guarded with\n\tif (not_found_cnt || has_firstprivate).\n\t* testsuite/libgomp.c/target-37.c: New test.\n\t* testsuite/libgomp.c++/target-22.C: New test.\n\nFrom-SVN: r274206", "tree": {"sha": "2420aa40b9b451dd4e3b7251149b6c8a5f7ce9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2420aa40b9b451dd4e3b7251149b6c8a5f7ce9c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8860d2706d9bd21da3885f980f313733fdc525d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8860d2706d9bd21da3885f980f313733fdc525d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8860d2706d9bd21da3885f980f313733fdc525d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8860d2706d9bd21da3885f980f313733fdc525d1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34f3ec07575f80964c9885874cb186ae3a913fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f3ec07575f80964c9885874cb186ae3a913fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f3ec07575f80964c9885874cb186ae3a913fcb"}], "stats": {"total": 318, "additions": 287, "deletions": 31}, "files": [{"sha": "00d8030d043a142000ee77ab489fe1b9b1a97aa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -1,3 +1,16 @@\n+2019-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (omp_add_variable): Use GOVD_PRIVATE | GOVD_EXPLICIT\n+\tfor VLA helper variables on target data even if not GOVD_FIRSTPRIVATE.\n+\t(gimplify_scan_omp_clauses): For OMP_CLAUSE_USE_DEVICE_* use just\n+\tGOVD_EXPLICIT flags.\n+\t(gimplify_omp_workshare): For OMP_TARGET_DATA move all\n+\tOMP_CLAUSE_USE_DEVICE_* clauses to the end of clauses chain.\n+\t* omp-low.c (scan_sharing_clauses): For OMP_CLAUSE_USE_DEVICE_*\n+\tcall install_var_field with mask 11 instead of 3.\n+\t(lower_omp_target): For OMP_CLAUSE_USE_DEVICE_* use pass\n+\t(splay_tree_key) &DECL_UID (var) to build_sender_ref instead of var.\n+\n 2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/constraints.md (Z): Handle floating-point zeros too."}, {"sha": "4944696a1d6750f80864bce7800da47be9b0a03f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -1,3 +1,9 @@\n+2019-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): For C_ORT_OMP\n+\tOMP_CLAUSE_USE_DEVICE_* clauses use oacc_reduction_head bitmap\n+\tinstead of generic_head to track duplicates.\n+\n 2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_name): Parse use_device_addr clause."}, {"sha": "1d865aa7719df29fcf1484371e015d89fed94dfe", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -13680,7 +13680,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   /* If ort == C_ORT_OMP_DECLARE_SIMD used as uniform_head instead.  */\n   bitmap_initialize (&map_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n-  /* If ort == C_ORT_OMP used as nontemporal_head instead.  */\n+  /* If ort == C_ORT_OMP used as nontemporal_head or use_device_xxx_head\n+     instead.  */\n   bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n   if (ort & C_ORT_ACC)\n@@ -14072,13 +14073,19 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n-\t  else if (ort == C_ORT_ACC\n-\t\t   && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t  else if ((ort == C_ORT_ACC\n+\t\t    && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t\t   || (ort == C_ORT_OMP\n+\t\t       && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t\t\t   || (OMP_CLAUSE_CODE (c)\n+\t\t\t       == OMP_CLAUSE_USE_DEVICE_ADDR))))\n \t    {\n \t      if (bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t    \"%qD appears more than once in reduction clauses\",\n+\t\t\t    ort == C_ORT_ACC\n+\t\t\t    ? \"%qD appears more than once in reduction clauses\"\n+\t\t\t    : \"%qD appears more than once in data clauses\",\n \t\t\t    t);\n \t\t  remove = true;\n \t\t}"}, {"sha": "f937bf5eb32f5e8ef7a2e21487d86f2e0ea8a0ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -1,3 +1,9 @@\n+2019-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* semantics.c (finish_omp_clauses): For C_ORT_OMP\n+\tOMP_CLAUSE_USE_DEVICE_* clauses use oacc_reduction_head bitmap\n+\tinstead of generic_head to track duplicates.\n+\n 2019-08-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/81429 - wrong parsing of constructor with C++11 attribute."}, {"sha": "9fd759c22c974b3f8cd14097d812b94d3ee90ad6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -6148,7 +6148,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   /* If ort == C_ORT_OMP_DECLARE_SIMD used as uniform_head instead.  */\n   bitmap_initialize (&map_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n-  /* If ort == C_ORT_OMP used as nontemporal_head instead.  */\n+  /* If ort == C_ORT_OMP used as nontemporal_head or use_device_xxx_head\n+     instead.  */\n   bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n   if (ort & C_ORT_ACC)\n@@ -6406,13 +6407,19 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n-\t  else if (ort == C_ORT_ACC\n-\t\t   && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t  else if ((ort == C_ORT_ACC\n+\t\t    && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t\t   || (ort == C_ORT_OMP\n+\t\t       && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t\t\t   || (OMP_CLAUSE_CODE (c)\n+\t\t\t       == OMP_CLAUSE_USE_DEVICE_ADDR))))\n \t    {\n \t      if (bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t    \"%qD appears more than once in reduction clauses\",\n+\t\t\t    ort == C_ORT_ACC\n+\t\t\t    ? \"%qD appears more than once in reduction clauses\"\n+\t\t\t    : \"%qD appears more than once in data clauses\",\n \t\t\t    t);\n \t\t  remove = true;\n \t\t}"}, {"sha": "daa0b71c191e6d92387180e927b818517b8b58a7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -6932,8 +6932,10 @@ omp_add_variable (struct gimplify_omp_ctx *ctx, tree decl, unsigned int flags)\n \t    nflags = GOVD_MAP | GOVD_MAP_TO_ONLY | GOVD_EXPLICIT;\n \t  else if (flags & GOVD_PRIVATE)\n \t    nflags = GOVD_PRIVATE;\n-\t  else if ((ctx->region_type & (ORT_TARGET | ORT_TARGET_DATA)) != 0\n-\t\t   && (flags & GOVD_FIRSTPRIVATE))\n+\t  else if (((ctx->region_type & (ORT_TARGET | ORT_TARGET_DATA)) != 0\n+\t\t    && (flags & GOVD_FIRSTPRIVATE))\n+\t\t   || (ctx->region_type == ORT_TARGET_DATA\n+\t\t       && (flags & GOVD_DATA_SHARE_CLASS) == 0))\n \t    nflags = GOVD_PRIVATE | GOVD_EXPLICIT;\n \t  else\n \t    nflags = GOVD_FIRSTPRIVATE;\n@@ -9016,6 +9018,9 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n+\t  flags = GOVD_EXPLICIT;\n+\t  goto do_add;\n+\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \t  flags = GOVD_FIRSTPRIVATE | GOVD_EXPLICIT;\n \t  goto do_add;\n@@ -12404,8 +12409,27 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n \t\t\t\t      OMP_CLAUSES (expr));\n       break;\n     case OMP_TARGET_DATA:\n-      stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_DATA,\n-\t\t\t\t      OMP_CLAUSES (expr));\n+      /* Put use_device_{ptr,addr} clauses last, as map clauses are supposed\n+\t to be evaluated before the use_device_{ptr,addr} clauses if they\n+\t refer to the same variables.  */\n+      {\n+\ttree use_device_clauses;\n+\ttree *pc, *uc = &use_device_clauses;\n+\tfor (pc = &OMP_CLAUSES (expr); *pc; )\n+\t  if (OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t      || OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_ADDR)\n+\t    {\n+\t      *uc = *pc;\n+\t      *pc = OMP_CLAUSE_CHAIN (*pc);\n+\t      uc = &OMP_CLAUSE_CHAIN (*uc);\n+\t    }\n+\t  else\n+\t    pc = &OMP_CLAUSE_CHAIN (*pc);\n+\t*uc = NULL_TREE;\n+\t*pc = use_device_clauses;\n+\tstmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_DATA,\n+\t\t\t\t\tOMP_CLAUSES (expr));\n+      }\n       break;\n     case OMP_TEAMS:\n       stmt = gimple_build_omp_teams (body, OMP_CLAUSES (expr));"}, {"sha": "444610b0096a807a52f2032e86d39cb6702d7e69", "filename": "gcc/omp-low.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -1243,9 +1243,9 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n \t       && !omp_is_reference (decl))\n \t      || TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n-\t    install_var_field (decl, true, 3, ctx);\n+\t    install_var_field (decl, true, 11, ctx);\n \t  else\n-\t    install_var_field (decl, false, 3, ctx);\n+\t    install_var_field (decl, false, 11, ctx);\n \t  if (DECL_SIZE (decl)\n \t      && TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n \t    {\n@@ -11857,11 +11857,16 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    var = lookup_decl_in_outer_ctx (ovar, ctx);\n-\t    x = build_sender_ref (ovar, ctx);\n \t    if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_IS_DEVICE_PTR)\n-\t      tkind = GOMP_MAP_USE_DEVICE_PTR;\n+\t      {\n+\t\ttkind = GOMP_MAP_USE_DEVICE_PTR;\n+\t\tx = build_sender_ref ((splay_tree_key) &DECL_UID (ovar), ctx);\n+\t      }\n \t    else\n-\t      tkind = GOMP_MAP_FIRSTPRIVATE_INT;\n+\t      {\n+\t\ttkind = GOMP_MAP_FIRSTPRIVATE_INT;\n+\t\tx = build_sender_ref (ovar, ctx);\n+\t      }\n \t    type = TREE_TYPE (ovar);\n \t    if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n \t\t && !omp_is_reference (ovar))\n@@ -12032,7 +12037,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t    var = OMP_CLAUSE_DECL (c);\n \t    if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_IS_DEVICE_PTR)\n-\t      x = build_sender_ref (var, ctx);\n+\t      x = build_sender_ref ((splay_tree_key) &DECL_UID (var), ctx);\n \t    else\n \t      x = build_receiver_ref (var, false, ctx);\n \t    if (is_variable_sized (var))"}, {"sha": "5356d005ff75eab08d4a3207928d5107d6f61162", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -1,3 +1,12 @@\n+2019-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* target.c (gomp_map_vars_internal): For GOMP_MAP_USE_DEVICE_PTR\n+\tperform the lookup in the first loop only if !not_found_cnt, otherwise\n+\tperform lookups for it in the second loop guarded with\n+\tif (not_found_cnt || has_firstprivate).\n+\t* testsuite/libgomp.c/target-37.c: New test.\n+\t* testsuite/libgomp.c++/target-22.C: New test.\n+\n 2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/target-18.c (struct S): New type."}, {"sha": "1c9ca68ba104c39461f0d603ec375e3e90252dd6", "filename": "libgomp/target.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -580,20 +580,12 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t}\n       else if ((kind & typemask) == GOMP_MAP_USE_DEVICE_PTR)\n \t{\n-\t  cur_node.host_start = (uintptr_t) hostaddrs[i];\n-\t  cur_node.host_end = cur_node.host_start;\n-\t  splay_tree_key n = gomp_map_lookup (mem_map, &cur_node);\n-\t  if (n == NULL)\n+\t  tgt->list[i].key = NULL;\n+\t  if (!not_found_cnt)\n \t    {\n-\t      gomp_mutex_unlock (&devicep->lock);\n-\t      gomp_fatal (\"use_device_ptr pointer wasn't mapped\");\n \t    }\n-\t  cur_node.host_start -= n->host_start;\n-\t  hostaddrs[i]\n-\t    = (void *) (n->tgt->tgt_start + n->tgt_offset\n-\t\t\t+ cur_node.host_start);\n-\t  tgt->list[i].key = NULL;\n-\t  tgt->list[i].offset = ~(uintptr_t) 0;\n+\t  else\n+\t    tgt->list[i].offset = 0;\n \t  continue;\n \t}\n       else if ((kind & typemask) == GOMP_MAP_STRUCT)\n@@ -791,9 +783,26 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t\ttgt_size += len;\n \t\tcontinue;\n \t      case GOMP_MAP_FIRSTPRIVATE_INT:\n-\t      case GOMP_MAP_USE_DEVICE_PTR:\n \t      case GOMP_MAP_ZERO_LEN_ARRAY_SECTION:\n \t\tcontinue;\n+\t      case GOMP_MAP_USE_DEVICE_PTR:\n+\t\tif (tgt->list[i].offset == 0)\n+\t\t  {\n+\t\t    cur_node.host_start = (uintptr_t) hostaddrs[i];\n+\t\t    cur_node.host_end = cur_node.host_start;\n+\t\t    n = gomp_map_lookup (mem_map, &cur_node);\n+\t\t    if (n == NULL)\n+\t\t      {\n+\t\t\tgomp_mutex_unlock (&devicep->lock);\n+\t\t\tgomp_fatal (\"use_device_ptr pointer wasn't mapped\");\n+\t\t      }\n+\t\t    cur_node.host_start -= n->host_start;\n+\t\t    hostaddrs[i]\n+\t\t      = (void *) (n->tgt->tgt_start + n->tgt_offset\n+\t\t\t\t  + cur_node.host_start);\n+\t\t    tgt->list[i].offset = ~(uintptr_t) 0;\n+\t\t  }\n+\t\tcontinue;\n \t      case GOMP_MAP_STRUCT:\n \t\tfirst = i + 1;\n \t\tlast = i + sizes[i];"}, {"sha": "9d9dea01c757f255660cd1ff111528e4299413dc", "filename": "libgomp/testsuite/libgomp.c++/target-22.C", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-22.C?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -0,0 +1,99 @@\n+extern \"C\" void abort (void);\n+struct S { int e, f; };\n+\n+void\n+foo (int *&p, int (&s)[5], int &t, S &u, int n)\n+{\n+  int a[4] = { 7, 8, 9, 10 }, b[n], c[3] = { 20, 21, 22 };\n+  int *r = a + 1, *q = p - 1, i, err;\n+  int v = 27;\n+  S w = { 28, 29 };\n+  for (i = 0; i < n; i++)\n+    b[i] = 9 + i;\n+  #pragma omp target data map(to:a) use_device_ptr(r) map(from:err)\n+  #pragma omp target is_device_ptr(r) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 4; i++)\n+      if (r[i - 1] != 7 + i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data use_device_ptr(p) map(from:err) map(to:q[:4])\n+  #pragma omp target is_device_ptr(p) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 4; i++)\n+      if (p[i - 1] != i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data map(to:b) use_device_addr(b) map(from:err)\n+  #pragma omp target is_device_ptr(b) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < n; i++)\n+      if (b[i] != 9 + i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data use_device_addr(c) map(to:c) map(from:err)\n+  #pragma omp target is_device_ptr(c) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 3; i++)\n+      if (c[i] != 20 + i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data map(to:s[:5]) use_device_addr(s) map(from:err)\n+  #pragma omp target is_device_ptr(s) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 5; i++)\n+      if (s[i] != 17 + i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data use_device_addr (v) map(to: v) map(to:u) use_device_addr (u) map(from:err)\n+  {\n+    int *z = &v;\n+    S *x = &u;\n+    #pragma omp target is_device_ptr (z, x) map(from:err)\n+    {\n+      err = 0;\n+      if (*z != 27 || x->e != 25 || x->f != 26)\n+\terr = 1;\n+    }\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data map(to: t) use_device_addr (t, w) map (to: w) map(from:err)\n+  {\n+    int *z = &t;\n+    S *x = &w;\n+    #pragma omp target is_device_ptr (z) is_device_ptr (x) map(from:err)\n+    {\n+      err = 0;\n+      if (*z != 24 || x->e != 28 || x->f != 29)\n+\terr = 1;\n+    }\n+  }\n+  if (err)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int a[4] = { 0, 1, 2, 3 }, b[5] = { 17, 18, 19, 20, 21 };\n+  int *p = a + 1;\n+  int t = 24;\n+  S u = { 25, 26 };\n+  foo (p, b, t, u, 9);\n+}"}, {"sha": "b3cc6a25215119ef0be518b08c8a1d29a2dd83f5", "filename": "libgomp/testsuite/libgomp.c/target-37.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8860d2706d9bd21da3885f980f313733fdc525d1/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-37.c?ref=8860d2706d9bd21da3885f980f313733fdc525d1", "patch": "@@ -0,0 +1,71 @@\n+extern void abort (void);\n+struct S { int e, f; };\n+\n+void\n+foo (int n)\n+{\n+  int a[4] = { 0, 1, 2, 3 }, b[n], c = 4;\n+  struct S d = { 5, 6 };\n+  int *p = a + 1, i, err;\n+  for (i = 0; i < n; i++)\n+    b[i] = 9 + i;\n+  #pragma omp target data use_device_ptr(p) map(from:err) map(to:a)\n+  #pragma omp target is_device_ptr(p) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 4; i++)\n+      if (p[i - 1] != i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  for (i = 0; i < 4; i++)\n+    a[i] = 23 + i;\n+  #pragma omp target data map(to:a) use_device_addr(a) map(from:err)\n+  #pragma omp target is_device_ptr(a) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 4; i++)\n+      if (a[i] != 23 + i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data use_device_addr(b) map(from:err) map(to:b)\n+  #pragma omp target is_device_ptr(b) private(i) map(from:err)\n+  {\n+    err = 0;\n+    for (i = 0; i < 4; i++)\n+      if (b[i] != 9 + i)\n+\terr = 1;\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data map(to:c) use_device_addr(c) map(from:err)\n+  {\n+    int *q = &c;\n+    #pragma omp target is_device_ptr(q) map(from:err)\n+    {\n+      err = *q != 4;\n+    }\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data use_device_addr(d) map(to:d) map(from:err)\n+  {\n+    struct S *r = &d;\n+    #pragma omp target is_device_ptr(r) map(from:err)\n+    {\n+      err = r->e != 5 || r->f != 6;\n+    }\n+  }\n+  if (err)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (9);\n+  return 0;\n+}"}]}