{"sha": "e3d97bde61135c9962234fdb1eed22a059709ca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkOTdiZGU2MTEzNWM5OTYyMjM0ZmRiMWVlZDIyYTA1OTcwOWNhMA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-05-09T21:57:47Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-05-09T21:57:47Z"}, "message": "Revert previous (not the patch described).\n\nFrom-SVN: r99473", "tree": {"sha": "4b2e0f1f35528780bd52b010317e1adcacf16da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b2e0f1f35528780bd52b010317e1adcacf16da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3d97bde61135c9962234fdb1eed22a059709ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d97bde61135c9962234fdb1eed22a059709ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d97bde61135c9962234fdb1eed22a059709ca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d97bde61135c9962234fdb1eed22a059709ca0/comments", "author": null, "committer": null, "parents": [{"sha": "71a4f307bd76b74e824acd45c6579932325da6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a4f307bd76b74e824acd45c6579932325da6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a4f307bd76b74e824acd45c6579932325da6c6"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "1743980b1cf809d79e9a60c82775d2b3ccf1b2db", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d97bde61135c9962234fdb1eed22a059709ca0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d97bde61135c9962234fdb1eed22a059709ca0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e3d97bde61135c9962234fdb1eed22a059709ca0", "patch": "@@ -1531,8 +1531,8 @@ use_return_insn (int iscond, rtx sibling)\n int\n const_ok_for_arm (HOST_WIDE_INT i)\n {\n-  int lowbit;\n-  \n+  unsigned HOST_WIDE_INT mask = ~(unsigned HOST_WIDE_INT)0xFF;\n+\n   /* For machines with >32 bit HOST_WIDE_INT, the bits above bit 31 must\n      be all zero, or all one.  */\n   if ((i & ~(unsigned HOST_WIDE_INT) 0xffffffff) != 0\n@@ -1541,24 +1541,19 @@ const_ok_for_arm (HOST_WIDE_INT i)\n \t      & ~(unsigned HOST_WIDE_INT) 0xffffffff)))\n     return FALSE;\n \n-  i &= (unsigned HOST_WIDE_INT) 0xffffffff;\n-  \n-  /* Fast return for 0 and small values.  We must do this for zero, since\n-     the code below can't handle that one case.  */\n-  if ((i & ~(unsigned HOST_WIDE_INT) 0xff) == 0)\n+  /* Fast return for 0 and powers of 2 */\n+  if ((i & (i - 1)) == 0)\n     return TRUE;\n \n-  /* Get the number of trailing zeros, rounded down to the nearest even\n-     number.  */\n-  lowbit = (ffs ((int) i) - 1) & ~1;\n-\n-  if ((i & ~(((unsigned HOST_WIDE_INT) 0xff) << lowbit)) == 0)\n-    return TRUE;\n-  else if (lowbit <= 4\n-\t   && ((i & ~0xc000003f) == 0\n-\t       || (i & ~0xf000000f) == 0\n-\t       || (i & ~0xfc000003) == 0))\n-    return TRUE;\n+  do\n+    {\n+      if ((i & mask & (unsigned HOST_WIDE_INT) 0xffffffff) == 0)\n+        return TRUE;\n+      mask =\n+\t  (mask << 2) | ((mask & (unsigned HOST_WIDE_INT) 0xffffffff)\n+\t\t\t  >> (32 - 2)) | ~(unsigned HOST_WIDE_INT) 0xffffffff;\n+    }\n+  while (mask != ~(unsigned HOST_WIDE_INT) 0xFF);\n \n   return FALSE;\n }"}]}