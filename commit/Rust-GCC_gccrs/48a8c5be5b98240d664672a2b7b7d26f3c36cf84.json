{"sha": "48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "node_id": "C_kwDOANBUbNoAKDQ4YThjNWJlNWI5ODI0MGQ2NjQ2NzJhMmI3YjdkMjZmM2MzNmNmODQ", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2021-11-07T13:40:36Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2021-11-16T18:07:51Z"}, "message": "fortran: Identify arguments by their names\n\nThis provides a new function to get the name of a dummy argument,\nso that identifying an argument can be made using just its name\ninstead of a mix of name matching (for keyword actual arguments)\nand argument counting (for other actual arguments).\n\ngcc/fortran/ChangeLog:\n\t* interface.c (gfc_dummy_arg_get_name): New function.\n\t* gfortran.h (gfc_dummy_arg_get_name): Declare it.\n\t* trans-array.c (arg_evaluated_for_scalarization): Pass a dummy\n\targument wrapper as argument instead of an actual argument\n\tand an index number.  Check it\u2019s non-NULL.  Use its name\n\tto identify it.\n\t(gfc_walk_elemental_function_args): Update call to\n\targ_evaluated for scalarization.  Remove argument counting.", "tree": {"sha": "d66c34ac472a51bfbd9c4795b67c68f307882a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66c34ac472a51bfbd9c4795b67c68f307882a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/comments", "author": null, "committer": null, "parents": [{"sha": "e94e2cf9f9b31167cfaa6e33f731c3735515662d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94e2cf9f9b31167cfaa6e33f731c3735515662d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94e2cf9f9b31167cfaa6e33f731c3735515662d"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "1846ee4fd3cd8be7eca266627bb7e71dd7a22fa7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "patch": "@@ -2329,6 +2329,7 @@ struct gfc_dummy_arg\n #define gfc_get_dummy_arg() XCNEW (gfc_dummy_arg)\n \n \n+const char * gfc_dummy_arg_get_name (gfc_dummy_arg &);\n const gfc_typespec & gfc_dummy_arg_get_typespec (gfc_dummy_arg &);\n bool gfc_dummy_arg_is_optional (gfc_dummy_arg &);\n "}, {"sha": "85717096103ce3d5e8a3544adde6d22417a50cb7", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "patch": "@@ -5534,6 +5534,23 @@ gfc_get_formal_from_actual_arglist (gfc_symbol *sym,\n }\n \n \n+const char *\n+gfc_dummy_arg_get_name (gfc_dummy_arg & dummy_arg)\n+{\n+  switch (dummy_arg.intrinsicness)\n+    {\n+    case GFC_INTRINSIC_DUMMY_ARG:\n+      return dummy_arg.u.intrinsic->name;\n+\n+    case GFC_NON_INTRINSIC_DUMMY_ARG:\n+      return dummy_arg.u.non_intrinsic->sym->name;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+\n const gfc_typespec &\n gfc_dummy_arg_get_typespec (gfc_dummy_arg & dummy_arg)\n {"}, {"sha": "2090adf01e7cf71fac68e9844392806f1f09d5e8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a8c5be5b98240d664672a2b7b7d26f3c36cf84/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "patch": "@@ -11492,16 +11492,14 @@ gfc_get_intrinsic_for_expr (gfc_expr *call)\n \n static bool\n arg_evaluated_for_scalarization (gfc_intrinsic_sym *function,\n-\t\t\t\t gfc_actual_arglist &actual_arg, int arg_num)\n+\t\t\t\t gfc_dummy_arg *dummy_arg)\n {\n-  if (function != NULL)\n+  if (function != NULL && dummy_arg != NULL)\n     {\n       switch (function->id)\n \t{\n \t  case GFC_ISYM_INDEX:\n-\t    if ((actual_arg.name == NULL && arg_num == 3)\n-\t\t|| (actual_arg.name != NULL\n-\t\t    && strcmp (\"kind\", actual_arg.name) == 0))\n+\t    if (strcmp (\"kind\", gfc_dummy_arg_get_name (*dummy_arg)) == 0)\n \t      return false;\n \t  /* Fallthrough.  */\n \n@@ -11532,15 +11530,14 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n   head = gfc_ss_terminator;\n   tail = NULL;\n \n-  int arg_num = 0;\n   scalar = 1;\n   for (; arg; arg = arg->next)\n     {\n       gfc_dummy_arg * const dummy_arg = arg->associated_dummy;\n       if (!arg->expr\n \t  || arg->expr->expr_type == EXPR_NULL\n-\t  || !arg_evaluated_for_scalarization (intrinsic_sym, *arg, arg_num))\n-\tgoto loop_continue;\n+\t  || !arg_evaluated_for_scalarization (intrinsic_sym, dummy_arg))\n+\tcontinue;\n \n       newss = gfc_walk_subexpr (head, arg->expr);\n       if (newss == head)\n@@ -11570,9 +11567,6 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n           while (tail->next != gfc_ss_terminator)\n             tail = tail->next;\n         }\n-\n-loop_continue:\n-      arg_num++;\n     }\n \n   if (scalar)"}]}