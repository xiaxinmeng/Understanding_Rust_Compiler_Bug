{"sha": "2d2b02c4da9e66531c8e56703273f447fb8d49a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyYjAyYzRkYTllNjY1MzFjOGU1NjcwMzI3M2Y0NDdmYjhkNDlhOQ==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2011-09-23T21:39:10Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2011-09-23T21:39:10Z"}, "message": "re PR c++/40831 (g++ generated symbols for cloned function that be demangled.)\n\ninclude/ChangeLog:\n\n\tPR 40831\n\t* demangle.h (enum demangle_component_type): Add\n\tDEMANGLE_COMPONENT_CLONE.\n\nlibiberty/ChangeLog:\n\n\tPR 40831\n\t* cp-demangle.c (d_make_comp): Add new component type.\n\t(cplus_demangle_mangled_name): Check for clone suffixes.\n\t(d_parmlist): Don't error out if we see '.'.\n\t(d_clone_suffix): New function.\n\t(d_print_comp): Print info for clone suffixes.\n\t* testsuite/demangle-expected: Add new testcases.\n\nFrom-SVN: r179132", "tree": {"sha": "15a51ac15e7ce0086a84bdc115817b9d9fa14b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15a51ac15e7ce0086a84bdc115817b9d9fa14b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d2b02c4da9e66531c8e56703273f447fb8d49a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2b02c4da9e66531c8e56703273f447fb8d49a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2b02c4da9e66531c8e56703273f447fb8d49a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2b02c4da9e66531c8e56703273f447fb8d49a9/comments", "author": null, "committer": null, "parents": [{"sha": "d220e00d6b94811b290189c25454bdf07f0a994c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d220e00d6b94811b290189c25454bdf07f0a994c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d220e00d6b94811b290189c25454bdf07f0a994c"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "63feb8356ce27702ea5a640c36e26132fdf43a5a", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2b02c4da9e66531c8e56703273f447fb8d49a9/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2b02c4da9e66531c8e56703273f447fb8d49a9/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=2d2b02c4da9e66531c8e56703273f447fb8d49a9", "patch": "@@ -1,3 +1,9 @@\n+2011-09-23  Cary Coutant  <ccoutant@google.com>\n+\n+\tPR 40831\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_CLONE.\n+\n 2011-07-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* xregex.h (regoff_t): Define."}, {"sha": "960e88e0f2acd4aa3685291b8290dc1fc33ba7ac", "filename": "include/demangle.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2b02c4da9e66531c8e56703273f447fb8d49a9/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2b02c4da9e66531c8e56703273f447fb8d49a9/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=2d2b02c4da9e66531c8e56703273f447fb8d49a9", "patch": "@@ -402,7 +402,9 @@ enum demangle_component_type\n   /* An unnamed type.  */\n   DEMANGLE_COMPONENT_UNNAMED_TYPE,\n   /* A pack expansion.  */\n-  DEMANGLE_COMPONENT_PACK_EXPANSION\n+  DEMANGLE_COMPONENT_PACK_EXPANSION,\n+  /* A cloned function.  */\n+  DEMANGLE_COMPONENT_CLONE\n };\n \n /* Types which are only used internally.  */"}, {"sha": "917a2f8086d1cc0683d3d4dd7c825c67d0a08ff5", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2b02c4da9e66531c8e56703273f447fb8d49a9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2b02c4da9e66531c8e56703273f447fb8d49a9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2d2b02c4da9e66531c8e56703273f447fb8d49a9", "patch": "@@ -1,3 +1,13 @@\n+2011-09-23  Cary Coutant  <ccoutant@google.com>\n+\n+\tPR 40831\n+\t* cp-demangle.c (d_make_comp): Add new component type.\n+\t(cplus_demangle_mangled_name): Check for clone suffixes.\n+\t(d_parmlist): Don't error out if we see '.'.\n+\t(d_clone_suffix): New function.\n+\t(d_print_comp): Print info for clone suffixes.\n+\t* testsuite/demangle-expected: Add new testcases.\n+\n 2011-09-23  Ian Lance Taylor  <iant@google.com>\n \n \t* md5.c (md5_process_bytes): Correct handling of unaligned"}, {"sha": "32318e89fd845a3739211ccbb251c27dcae1455d", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2b02c4da9e66531c8e56703273f447fb8d49a9/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2b02c4da9e66531c8e56703273f447fb8d49a9/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=2d2b02c4da9e66531c8e56703273f447fb8d49a9", "patch": "@@ -417,6 +417,9 @@ static struct demangle_component *d_lambda (struct d_info *);\n \n static struct demangle_component *d_unnamed_type (struct d_info *);\n \n+static struct demangle_component *\n+d_clone_suffix (struct d_info *, struct demangle_component *);\n+\n static int\n d_add_substitution (struct d_info *, struct demangle_component *);\n \n@@ -802,6 +805,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n     case DEMANGLE_COMPONENT_VECTOR_TYPE:\n+    case DEMANGLE_COMPONENT_CLONE:\n       if (left == NULL || right == NULL)\n \treturn NULL;\n       break;\n@@ -1034,14 +1038,16 @@ d_make_sub (struct d_info *di, const char *name, int len)\n   return p;\n }\n \n-/* <mangled-name> ::= _Z <encoding>\n+/* <mangled-name> ::= _Z <encoding> [<clone-suffix>]*\n \n    TOP_LEVEL is non-zero when called at the top level.  */\n \n CP_STATIC_IF_GLIBCPP_V3\n struct demangle_component *\n cplus_demangle_mangled_name (struct d_info *di, int top_level)\n {\n+  struct demangle_component *p;\n+\n   if (! d_check_char (di, '_')\n       /* Allow missing _ if not at toplevel to work around a\n \t bug in G++ abi-version=2 mangling; see the comment in\n@@ -1050,7 +1056,18 @@ cplus_demangle_mangled_name (struct d_info *di, int top_level)\n     return NULL;\n   if (! d_check_char (di, 'Z'))\n     return NULL;\n-  return d_encoding (di, top_level);\n+  p = d_encoding (di, top_level);\n+\n+  /* If at top level and parsing parameters, check for a clone\n+     suffix.  */\n+  if (top_level && (di->options & DMGL_PARAMS) != 0)\n+    while (d_peek_char (di) == '.'\n+\t   && (IS_LOWER (d_peek_next_char (di))\n+\t       || d_peek_next_char (di) == '_'\n+\t       || IS_DIGIT (d_peek_next_char (di))))\n+      p = d_clone_suffix (di, p);\n+\n+  return p;\n }\n \n /* Return whether a function should have a return type.  The argument\n@@ -2354,7 +2371,7 @@ d_parmlist (struct d_info *di)\n       struct demangle_component *type;\n \n       char peek = d_peek_char (di);\n-      if (peek == '\\0' || peek == 'E')\n+      if (peek == '\\0' || peek == 'E' || peek == '.')\n \tbreak;\n       type = cplus_demangle_type (di);\n       if (type == NULL)\n@@ -3082,6 +3099,33 @@ d_unnamed_type (struct d_info *di)\n   return ret;\n }\n \n+/* <clone-suffix> ::= [ . <clone-type-identifier> ] [ . <nonnegative number> ]*\n+*/\n+\n+static struct demangle_component *\n+d_clone_suffix (struct d_info *di, struct demangle_component *encoding)\n+{\n+  const char *suffix = d_str (di);\n+  const char *pend = suffix;\n+  struct demangle_component *n;\n+\n+  if (*pend == '.' && (IS_LOWER (pend[1]) || pend[1] == '_'))\n+    {\n+      pend += 2;\n+      while (IS_LOWER (*pend) || *pend == '_')\n+\t++pend;\n+    }\n+  while (*pend == '.' && IS_DIGIT (pend[1]))\n+    {\n+      pend += 2;\n+      while (IS_DIGIT (*pend))\n+\t++pend;\n+    }\n+  d_advance (di, pend - suffix);\n+  n = d_make_name (di, suffix, pend - suffix);\n+  return d_make_comp (di, DEMANGLE_COMPONENT_CLONE, encoding, n);\n+}\n+\n /* Add a new substitution.  */\n \n static int\n@@ -4463,6 +4507,13 @@ d_print_comp (struct d_print_info *dpi, int options,\n       d_append_char (dpi, '}');\n       return;\n \n+    case DEMANGLE_COMPONENT_CLONE:\n+      d_print_comp (dpi, options, d_left (dc));\n+      d_append_string (dpi, \" [clone \");\n+      d_print_comp (dpi, options, d_right (dc));\n+      d_append_char (dpi, ']');\n+      return;\n+\n     default:\n       d_print_error (dpi);\n       return;"}, {"sha": "64ccb929680faf108c74a7edcbd0049bd337f1cc", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2b02c4da9e66531c8e56703273f447fb8d49a9/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2b02c4da9e66531c8e56703273f447fb8d49a9/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=2d2b02c4da9e66531c8e56703273f447fb8d49a9", "patch": "@@ -4151,3 +4151,50 @@ DFA\n --format=auto\n _ZN3Psi7VariantIIcPKcEE5visitIIRZN11VariantTest9TestVisit11test_methodEvEUlS2_E0_RZNS6_11test_methodEvEUlcE1_RZNS6_11test_methodEvEUlNS_4NoneEE_EEENS_13VariantDetail19SelectVisitorResultIIDpT_EE4typeEDpOSG_\n Psi::VariantDetail::SelectVisitorResult<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>::type Psi::Variant<char, char const*>::visit<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>((VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&)...)\n+#\n+# Clone suffix tests\n+#\n+--format=gnu-v3 --no-params\n+_Z3fo5n.clone.1\n+fo5(__int128) [clone .clone.1]\n+fo5\n+#\n+--format=gnu-v3 --no-params\n+_Z3fo5n.constprop.2\n+fo5(__int128) [clone .constprop.2]\n+fo5\n+#\n+--format=gnu-v3 --no-params\n+_Z3fo5n.isra.3\n+fo5(__int128) [clone .isra.3]\n+fo5\n+#\n+--format=gnu-v3 --no-params\n+_Z3fo5n.part.4\n+fo5(__int128) [clone .part.4]\n+fo5\n+#\n+--format=gnu-v3 --no-params\n+_Z12to_be_clonediPv.clone.0\n+to_be_cloned(int, void*) [clone .clone.0]\n+to_be_cloned\n+#\n+--format=gnu-v3 --no-params\n+_Z3fooi.1988\n+foo(int) [clone .1988]\n+foo\n+#\n+--format=gnu-v3 --no-params\n+_Z3fooi.part.9.165493.constprop.775.31805\n+foo(int) [clone .part.9.165493] [clone .constprop.775.31805]\n+foo\n+#\n+--format=gnu-v3 --no-params\n+_Z2f1IiEvT_S0_S0_._omp_fn.2\n+void f1<int>(int, int, int) [clone ._omp_fn.2]\n+f1<int>\n+#\n+--format=gnu-v3 --no-params\n+_Z3fooi._omp_cpyfn.6\n+foo(int) [clone ._omp_cpyfn.6]\n+foo"}]}