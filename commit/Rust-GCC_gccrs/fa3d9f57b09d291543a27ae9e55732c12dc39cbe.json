{"sha": "fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEzZDlmNTdiMDlkMjkxNTQzYTI3YWU5ZTU1NzMyYzEyZGMzOWNiZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-11-05T19:17:37Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-11-05T19:17:37Z"}, "message": "os_defines.h (_GLIBCPP_INST_ATOMICITY_LOCK): Define.\n\n\t* config/os/hpux/os_defines.h (_GLIBCPP_INST_ATOMICITY_LOCK): Define.\n\t* src/misc-inst.cc (std): Instantiate atomicity lock when\n\t_GLIBCPP_INST_ATOMICITY_LOCK is defined.\n\t* config/cpu/hppa/atomicity.h: New file.\n\nFrom-SVN: r58831", "tree": {"sha": "951abaef5b170fb73ebd43f7f61ebdd780d1fa85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/951abaef5b170fb73ebd43f7f61ebdd780d1fa85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/comments", "author": null, "committer": null, "parents": [{"sha": "a9b11d44518c80c56087ad17e51fb399d7270f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b11d44518c80c56087ad17e51fb399d7270f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b11d44518c80c56087ad17e51fb399d7270f15"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "5d53a7bb9a4e7a92931880e6b5f25deda674a183", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "patch": "@@ -1,3 +1,10 @@\n+2002-11-05  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* config/os/hpux/os_defines.h (_GLIBCPP_INST_ATOMICITY_LOCK): Define.\n+\t* src/misc-inst.cc (std): Instantiate atomicity lock when\n+\t_GLIBCPP_INST_ATOMICITY_LOCK is defined.\n+\t* config/cpu/hppa/atomicity.h: New file.\n+\n 2002-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/8463"}, {"sha": "eefb32d4a8eb363717ff4a0d3877cf41d50e766f", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "patch": "@@ -0,0 +1,87 @@\n+/* Low-level functions for atomic operations.  PA-RISC version. -*- C++ -*-\n+   Copyright 2002 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Library General Public License as\n+   published by the Free Software Foundation; either version 2 of the\n+   License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Library General Public\n+   License along with the GNU C Library; see the file COPYING.LIB.  If not,\n+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n+\n+typedef int _Atomic_word;\n+\n+template <int __inst>\n+struct __Atomicity_lock\n+{\n+  static volatile int __attribute__ ((aligned (16))) _S_atomicity_lock;\n+};\n+\n+template <int __inst>\n+volatile int __Atomicity_lock<__inst>::_S_atomicity_lock = 1;\n+\n+/* Because of the lack of weak support when using the hpux\n+   som linker, we explicitly instantiate the atomicity lock\n+   in src/misc-inst.cc when _GLIBCPP_INST_ATOMICITY_LOCK\n+   is defined.  */\n+#ifndef _GLIBCPP_INST_ATOMICITY_LOCK\n+template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n+#endif\n+\n+static inline int\n+__attribute__ ((__unused__))\n+__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n+{\n+  _Atomic_word result;\n+  int tmp;\n+  volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n+\n+  __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n+\t\t\t\"cmpib,<>,n 0,%0,.+20\\n\\t\"\n+\t\t\t\"ldw 0(%1),%0\\n\\t\"\n+\t\t\t\"cmpib,= 0,%0,.-4\\n\\t\"\n+\t\t\t\"nop\\n\\t\"\n+\t\t\t\"b,n .-20\"\n+\t\t\t: \"=&r\" (tmp)\n+\t\t\t: \"r\" (&lock));\n+\n+  result = *__mem;\n+  *__mem = result + __val;\n+  __asm__ __volatile__(\"\");\n+  lock = tmp;\n+  return result;\n+}\n+\n+static inline void\n+__attribute__ ((__unused__))\n+__atomic_add (_Atomic_word* __mem, int __val)\n+{\n+  int tmp;\n+  volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n+\n+  __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n+\t\t\t\"cmpib,<>,n 0,%0,.+20\\n\\t\"\n+\t\t\t\"ldw 0(%1),%0\\n\\t\"\n+\t\t\t\"cmpib,= 0,%0,.-4\\n\\t\"\n+\t\t\t\"nop\\n\\t\"\n+\t\t\t\"b,n .-20\"\n+\t\t\t: \"=&r\" (tmp)\n+\t\t\t: \"r\" (&lock));\n+\n+  *__mem += __val;\n+  __asm__ __volatile__(\"\");\n+  lock = tmp;\n+}\n+\n+#endif"}, {"sha": "aae9998c552ecf7caa26fe0e6a80202c86432345", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "patch": "@@ -84,4 +84,8 @@ namespace std\n typedef long int __padding_type;\n #endif\n \n+/* We need explicit instantiation of the atomicity lock on 32-bit HPUX.  */\n+#ifndef __LP64__\n+#define _GLIBCPP_INST_ATOMICITY_LOCK 1\n+#endif\n #endif"}, {"sha": "74224b1d983bd6420cadb7aa5c34723e1e20d0da", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa3d9f57b09d291543a27ae9e55732c12dc39cbe/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=fa3d9f57b09d291543a27ae9e55732c12dc39cbe", "patch": "@@ -37,6 +37,7 @@\n #include <ostream>\n #include <algorithm>\n #include <vector>\n+#include <bits/atomicity.h>\n \n namespace std\n {\n@@ -67,6 +68,9 @@ namespace std\n     basic_istream<wchar_t>& \n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n+#ifdef _GLIBCPP_INST_ATOMICITY_LOCK\n+  template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n+#endif\n \n #if 1\n   // XXX"}]}