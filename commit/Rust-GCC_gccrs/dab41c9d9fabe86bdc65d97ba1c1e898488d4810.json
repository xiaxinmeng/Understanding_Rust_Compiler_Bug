{"sha": "dab41c9d9fabe86bdc65d97ba1c1e898488d4810", "node_id": "C_kwDOANBUbNoAKGRhYjQxYzlkOWZhYmU4NmJkYzY1ZDk3YmExYzFlODk4NDg4ZDQ4MTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-05T11:20:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-05T11:20:47Z"}, "message": "waccess: Remove visited bitmap and stop on EDGE_ABNORMAL\n\nOn Fri, Mar 04, 2022 at 02:58:37PM +0100, Jakub Jelinek via Gcc-patches wrote:\n> On Thu, Mar 03, 2022 at 05:08:30PM -0700, Martin Sebor wrote:\n> > > 1) shouldn't it give up for EDGE_ABNORMAL too?  I mean, e.g.\n> > >     following a non-local goto forced edge from a noreturn call\n> > >     to a non-local label (if there is just one) doesn't seem\n> > >     right to me\n> >\n> > Possibly yes.  I can add it but I don't have a lot of experience with\n> > these bits so if you can suggest a test case to exercise this that\n> > would be helpful.\n>\n> Something like:\n> void\n> foo (void)\n> {\n>   __label__ l;\n>   __attribute__((noreturn)) void bar (int x) { if (x) goto l; __builtin_trap (); }\n>   bar (0);\n> l:;\n> }\n> shows a single EDGE_ABNORMAL from the bar call.\n> But it would need tweaking for the ptr use and clobber.\n>\n> > > 2) if EDGE_DFS_BACK is computed and 1) is done, is there any\n> > >     reason why you need 2 levels of protection, i.e. the EDGE_DFS_BACK\n> > >     check as well as the visited bitmap (and having them use\n> > >     very different answers, if EDGE_DFS_BACK is seen, the function\n> > >     will return false, if visited bitmap has a bb, it will return true)?\n> > >     Can't the visited bitmap go away?\n> >\n> > Possibly.  As I said above, I don't have enough experience with these\n> > bits to make (and test) the changes quickly, or enough bandwidth to\n> > come up to speed on them.  Please feel free to make these improvements.\n>\n> I'll change that if it passes testing.\n\nHere is a patch to do both.  I don't think we really need to have a testcase\nfor the EDGE_ABNORMAL case (Martin, feel free to add it later), abnormal\nedges simply aren't normal control flow and what exactly it means varies.\n\n2022-03-05  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gimple-ssa-warn-access.cc (pass_waccess::use_after_inval_p): Remove\n\tvisited bitmap and its use.  Also punt on EDGE_ABNORMAL edges.", "tree": {"sha": "8b0b058c8b2cfbfcfc3b01f44f3055b28d9c22da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b0b058c8b2cfbfcfc3b01f44f3055b28d9c22da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dab41c9d9fabe86bdc65d97ba1c1e898488d4810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab41c9d9fabe86bdc65d97ba1c1e898488d4810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab41c9d9fabe86bdc65d97ba1c1e898488d4810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab41c9d9fabe86bdc65d97ba1c1e898488d4810/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea4a34bd0b0a46277b5e077c89cbd86dfb09c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea4a34bd0b0a46277b5e077c89cbd86dfb09c48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea4a34bd0b0a46277b5e077c89cbd86dfb09c48"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "b5f9e4c2f9e5f3330b9301a7fe50dab6977a233c", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab41c9d9fabe86bdc65d97ba1c1e898488d4810/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab41c9d9fabe86bdc65d97ba1c1e898488d4810/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=dab41c9d9fabe86bdc65d97ba1c1e898488d4810", "patch": "@@ -3812,20 +3812,15 @@ pass_waccess::use_after_inval_p (gimple *inval_stmt, gimple *use_stmt,\n       /* Proceed only when looking for uses of dangling pointers.  */\n       auto gsi = gsi_for_stmt (use_stmt);\n \n-      auto_bitmap visited;\n-\n       /* A use statement in the last basic block in a function or one that\n \t falls through to it is after any other prior clobber of the used\n \t variable unless it's followed by a clobber of the same variable. */\n       basic_block bb = use_bb;\n       while (bb != inval_bb\n \t     && single_succ_p (bb)\n-\t     && !(single_succ_edge (bb)->flags & (EDGE_EH|EDGE_DFS_BACK)))\n+\t     && !(single_succ_edge (bb)->flags\n+\t\t  & (EDGE_EH | EDGE_ABNORMAL | EDGE_DFS_BACK)))\n \t{\n-\t  if (!bitmap_set_bit (visited, bb->index))\n-\t    /* Avoid cycles. */\n-\t    return true;\n-\n \t  for (; !gsi_end_p (gsi); gsi_next_nondebug (&gsi))\n \t    {\n \t      gimple *stmt = gsi_stmt (gsi);"}]}