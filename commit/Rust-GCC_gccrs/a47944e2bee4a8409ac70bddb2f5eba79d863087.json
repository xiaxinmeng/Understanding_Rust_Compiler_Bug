{"sha": "a47944e2bee4a8409ac70bddb2f5eba79d863087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3OTQ0ZTJiZWU0YTg0MDlhYzcwYmRkYjJmNWViYTc5ZDg2MzA4Nw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@cygnus.com", "date": "2000-04-29T15:28:42Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-04-29T15:28:42Z"}, "message": "mn10300.h (FIRST_DATA_REGNUM, [...]): New macros.\n\n* config/mn10300/mn10300.h (FIRST_DATA_REGNUM,\nLAST_DATA_REGNUM, FIRST_ADDRESS_REGNUM, LAST_ADDRESS_REGNUM,\nFIRST_EXTENDED_REGNUM, LAST_EXTENDED_REGNUM): New macros.\n(REGNO_SP_P): Redefine in terms of STACK_POINTER_REGNUM.\n(REGNO_DATA_P, REGNO_ADDRESS_P, REGNO_EXTENDED_P,\nREGNO_AM33_P): Redefine in terms of the new macros.\n(CONDITIONAL_REGISTER_USAGE, REGNO_REG_CLASS): Likewise.\n(FUNCTION_VALUE, LIBCALL_VALUE, FUNCTION_VALUE_REGNO_P,\nSTRUCT_VALUE): Likewise.\n(STACK_POINTER_REGNUM, FRAME_POINTER_REGNUM,\nARG_POINTER_REGNUM, STATIC_CHAIN_REGNUM): Likewise.  Moved.\n\nFrom-SVN: r33534", "tree": {"sha": "3683b429eed9717bdfa5296faa4d4481586da5b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3683b429eed9717bdfa5296faa4d4481586da5b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a47944e2bee4a8409ac70bddb2f5eba79d863087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47944e2bee4a8409ac70bddb2f5eba79d863087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a47944e2bee4a8409ac70bddb2f5eba79d863087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47944e2bee4a8409ac70bddb2f5eba79d863087/comments", "author": null, "committer": null, "parents": [{"sha": "3b94497c2038ecf899d22902cecc0ada92614fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b94497c2038ecf899d22902cecc0ada92614fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b94497c2038ecf899d22902cecc0ada92614fd2"}], "stats": {"total": 89, "additions": 59, "deletions": 30}, "files": [{"sha": "c99c2f26cbe7f87140bf5912b997d8de7ff1da11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47944e2bee4a8409ac70bddb2f5eba79d863087/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47944e2bee4a8409ac70bddb2f5eba79d863087/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a47944e2bee4a8409ac70bddb2f5eba79d863087", "patch": "@@ -1,3 +1,17 @@\n+Sat Apr 29 12:25:17 2000  Alexandre Oliva  <aoliva@cygnus.com>\n+\n+\t* config/mn10300/mn10300.h (FIRST_DATA_REGNUM,\n+\tLAST_DATA_REGNUM, FIRST_ADDRESS_REGNUM, LAST_ADDRESS_REGNUM,\n+\tFIRST_EXTENDED_REGNUM, LAST_EXTENDED_REGNUM): New macros.\n+\t(REGNO_SP_P): Redefine in terms of STACK_POINTER_REGNUM.\n+\t(REGNO_DATA_P, REGNO_ADDRESS_P, REGNO_EXTENDED_P,\n+\tREGNO_AM33_P): Redefine in terms of the new macros.\n+\t(CONDITIONAL_REGISTER_USAGE, REGNO_REG_CLASS): Likewise.\n+\t(FUNCTION_VALUE, LIBCALL_VALUE, FUNCTION_VALUE_REGNO_P,\n+\tSTRUCT_VALUE): Likewise.\n+\t(STACK_POINTER_REGNUM, FRAME_POINTER_REGNUM,\n+\tARG_POINTER_REGNUM, STATIC_CHAIN_REGNUM): Likewise.  Moved.\n+\n Sat Apr 29 01:18:45 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* regmove.c (struct record_stack_memrefs_data): New."}, {"sha": "5bc14520d83c957e6d4f8283ee2962383373dd9d", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47944e2bee4a8409ac70bddb2f5eba79d863087/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47944e2bee4a8409ac70bddb2f5eba79d863087/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=a47944e2bee4a8409ac70bddb2f5eba79d863087", "patch": "@@ -145,6 +145,31 @@ extern int target_flags;\n \n #define FIRST_PSEUDO_REGISTER 18\n \n+/* Specify machine-specific register numbers.  */\n+#define FIRST_DATA_REGNUM 0\n+#define LAST_DATA_REGNUM 3\n+#define FIRST_ADDRESS_REGNUM 4\n+#define LAST_ADDRESS_REGNUM 8\n+#define FIRST_EXTENDED_REGNUM 10\n+#define LAST_EXTENDED_REGNUM 17\n+\n+/* Specify the registers used for certain standard purposes.\n+   The values of these macros are register numbers.  */\n+\n+/* Register to use for pushing function arguments.  */\n+#define STACK_POINTER_REGNUM (LAST_ADDRESS_REGNUM+1)\n+\n+/* Base register for access to local variables of the function.  */\n+#define FRAME_POINTER_REGNUM (LAST_ADDRESS_REGNUM-1)\n+\n+/* Base register for access to arguments of the function.  This\n+   is a fake register and will be eliminated into either the frame\n+   pointer or stack pointer.  */\n+#define ARG_POINTER_REGNUM LAST_ADDRESS_REGNUM\n+\n+/* Register in which static-chain is passed to a function.  */\n+#define STATIC_CHAIN_REGNUM (FIRST_ADDRESS_REGNUM+1)\n+\n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n \n@@ -169,7 +194,8 @@ extern int target_flags;\n {\t\t\t\t\t\t\\\n   if (!TARGET_AM33)\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      for (i = 10; i < 18; i++) \t\t\\\n+      for (i = FIRST_EXTENDED_REGNUM; \t\t\\\n+\t   i <= LAST_EXTENDED_REGNUM; i++) \t\\\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n     }\t\t\t\t\t\t\\\n }\n@@ -272,10 +298,10 @@ enum reg_class {\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO) \\\n-  ((REGNO) < 4 ? DATA_REGS : \\\n-   (REGNO) < 9 ? ADDRESS_REGS : \\\n-   (REGNO) == 9 ? SP_REGS : \\\n-   (REGNO) < 18 ? EXTENDED_REGS : \\\n+  ((REGNO) <= LAST_DATA_REGNUM ? DATA_REGS : \\\n+   (REGNO) <= LAST_ADDRESS_REGNUM ? ADDRESS_REGS : \\\n+   (REGNO) == STACK_POINTER_REGNUM ? SP_REGS : \\\n+   (REGNO) <= LAST_EXTENDED_REGNUM ? EXTENDED_REGS : \\\n    NO_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n@@ -323,10 +349,14 @@ enum reg_class {\n        && reg_renumber[(regno)] >= (min) && reg_renumber[(regno)] <= (max)))\n #endif\n \n-#define REGNO_DATA_P(regno) REGNO_IN_RANGE_P ((regno), 0, 3)\n-#define REGNO_ADDRESS_P(regno) REGNO_IN_RANGE_P ((regno), 4, 8)\n-#define REGNO_SP_P(regno) REGNO_IN_RANGE_P ((regno), 9, 9)\n-#define REGNO_EXTENDED_P(regno) REGNO_IN_RANGE_P ((regno), 10, 17)\n+#define REGNO_DATA_P(regno) \\\n+  REGNO_IN_RANGE_P ((regno), FIRST_DATA_REGNUM, LAST_DATA_REGNUM)\n+#define REGNO_ADDRESS_P(regno) \\\n+  REGNO_IN_RANGE_P ((regno), FIRST_ADDRESS_REGNUM, LAST_ADDRESS_REGNUM)\n+#define REGNO_SP_P(regno) \\\n+  REGNO_IN_RANGE_P ((regno), STACK_POINTER_REGNUM, STACK_POINTER_REGNUM)\n+#define REGNO_EXTENDED_P(regno) \\\n+  REGNO_IN_RANGE_P ((regno), FIRST_EXTENDED_REGNUM, LAST_EXTENDED_REGNUM)\n #define REGNO_AM33_P(regno) \\\n   (REGNO_DATA_P ((regno)) || REGNO_ADDRESS_P ((regno)) \\\n    || REGNO_EXTENDED_P ((regno)))\n@@ -431,23 +461,6 @@ enum reg_class {\n \n #define FIRST_PARM_OFFSET(FNDECL) 4\n \n-/* Specify the registers used for certain standard purposes.\n-   The values of these macros are register numbers.  */\n-\n-/* Register to use for pushing function arguments.  */\n-#define STACK_POINTER_REGNUM 9\n-\n-/* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM 7\n-\n-/* Base register for access to arguments of the function.  This\n-   is a fake register and will be eliminated into either the frame\n-   pointer or stack pointer.  */\n-#define ARG_POINTER_REGNUM 8\n-\n-/* Register in which static-chain is passed to a function.  */\n-#define STATIC_CHAIN_REGNUM 5\n-\n #define ELIMINABLE_REGS\t\t\t\t\\\n {{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n  { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n@@ -554,16 +567,18 @@ struct cum_arg {int nbytes; };\n    otherwise, FUNC is 0.   */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), POINTER_TYPE_P (VALTYPE) ? 4 : 0)\n+  gen_rtx_REG (TYPE_MODE (VALTYPE), POINTER_TYPE_P (VALTYPE) \\\n+\t       ? FIRST_ADDRESS_REGNUM : FIRST_DATA_REGNUM)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, 0)\n+#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, FIRST_DATA_REGNUM)\n \n /* 1 if N is a possible register number for a function value.  */\n \n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (N) == 4)\n+#define FUNCTION_VALUE_REGNO_P(N) \\\n+  ((N) == FIRST_DATA_REGNUM || (N) == FIRST_ADDRESS_REGNUM)\n \n /* Return values > 8 bytes in length in memory.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n@@ -574,7 +589,7 @@ struct cum_arg {int nbytes; };\n    is passed to a function.  On the MN10300 it's passed as\n    the first parameter.  */\n \n-#define STRUCT_VALUE 0\n+#define STRUCT_VALUE FIRST_DATA_REGNUM\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}]}