{"sha": "4a3864984cd9d020a65cd2956ed032e3cc254a98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzODY0OTg0Y2Q5ZDAyMGE2NWNkMjk1NmVkMDMyZTNjYzI1NGE5OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-10T16:47:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-10T16:47:52Z"}, "message": "re PR c++/10032 (-pedantic converts some errors to warnings)\n\n\tPR c++/10032\n\t* doc/invoke.texi (C++ Dialect Options): Change documentation of\n\t-fpermissive.\n\n\tPR c++/10032\n\t* decl.c (cxx_init_decl_processing): With -pedantic, pedwarns are\n\tstill errors.\n\n\tPR c++/10527\n\t* error.c (decl_to_string): Do not print default argument\n\texpressions.\n\n\t* cp-tree.h (break_out_calls): Remove declaration.\n\t* tree.c (break_out_calls): Remove.\n\t* typeck.c (build_modify_expr): Avoid invalid sharing of trees.\n\n\tPR c++/10032\n\t* g++.dg/warn/pedantic1.C: New test.\n\nFrom-SVN: r69191", "tree": {"sha": "ed0e7bf4cb3957e067e0ff6072e1192fdded5502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed0e7bf4cb3957e067e0ff6072e1192fdded5502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a3864984cd9d020a65cd2956ed032e3cc254a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3864984cd9d020a65cd2956ed032e3cc254a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3864984cd9d020a65cd2956ed032e3cc254a98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3864984cd9d020a65cd2956ed032e3cc254a98/comments", "author": null, "committer": null, "parents": [{"sha": "1e60c0577d2a835744f39c9b82a5564ea9fe11d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e60c0577d2a835744f39c9b82a5564ea9fe11d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e60c0577d2a835744f39c9b82a5564ea9fe11d7"}], "stats": {"total": 168, "additions": 43, "deletions": 125}, "files": [{"sha": "be28a684dfd0cc69d1723f3f3cc4b643a2adad06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -1,3 +1,9 @@\n+2003-07-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10032\n+\t* doc/invoke.texi (C++ Dialect Options): Change documentation of\n+\t-fpermissive.\n+\n 2003-07-10  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* tm.texi (RETURN_ADDR_OFFSET): Document."}, {"sha": "e91e535c18b164fedfdb8e16a5776f801e398dbe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -1,3 +1,17 @@\n+2003-07-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10032\n+\t* decl.c (cxx_init_decl_processing): With -pedantic, pedwarns are\n+\tstill errors.\n+\n+\tPR c++/10527\n+\t* error.c (decl_to_string): Do not print default argument\n+\texpressions.\n+\n+\t* cp-tree.h (break_out_calls): Remove declaration.\n+\t* tree.c (break_out_calls): Remove.\n+\t* typeck.c (build_modify_expr): Avoid invalid sharing of trees.\n+\t\n 2003-07-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++ 9483"}, {"sha": "052c12ab09e0b7527b7e2e24d565ea9628712402", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -4174,7 +4174,6 @@ extern tree build_min\t\t\t\t(enum tree_code, tree,\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_cplus_new\t\t\t(tree, tree);\n extern tree get_target_expr\t\t\t(tree);\n-extern tree break_out_calls\t\t\t(tree);\n extern tree build_cplus_method_type\t\t(tree, tree, tree);\n extern tree build_cplus_staticfn_type\t\t(tree, tree, tree);\n extern tree build_cplus_array_type\t\t(tree, tree);"}, {"sha": "966da3ca704acea35bdd9d3980ffa7f5f3217936", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -6213,7 +6213,7 @@ cxx_init_decl_processing (void)\n   current_lang_name = NULL_TREE;\n \n   /* Adjust various flags based on command-line settings.  */\n-  if (! flag_permissive && ! pedantic)\n+  if (!flag_permissive)\n     flag_pedantic_errors = 1;\n   if (!flag_no_inline)\n     {"}, {"sha": "9edf118eee985a5cc12291936a148881f0abb750", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -2169,7 +2169,7 @@ decl_to_string (tree decl, int verbose)\n       || TREE_CODE (decl) == UNION_TYPE || TREE_CODE (decl) == ENUMERAL_TYPE)\n     flags = TFF_CLASS_KEY_OR_ENUM;\n   if (verbose)\n-    flags |= TFF_DECL_SPECIFIERS | TFF_FUNCTION_DEFAULT_ARGUMENTS;\n+    flags |= TFF_DECL_SPECIFIERS;\n   else if (TREE_CODE (decl) == FUNCTION_DECL)\n     flags |= TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE;\n   flags |= TFF_TEMPLATE_HEADER;"}, {"sha": "7f137343686bcec96f4db6a9d57d10a01822c60d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -368,86 +368,6 @@ get_target_expr (tree init)\n   return build_target_expr_with_type (init, TREE_TYPE (init));\n }\n \n-/* Recursively perform a preorder search EXP for CALL_EXPRs, making\n-   copies where they are found.  Returns a deep copy all nodes transitively\n-   containing CALL_EXPRs.  */\n-\n-tree\n-break_out_calls (tree exp)\n-{\n-  register tree t1, t2 = NULL_TREE;\n-  register enum tree_code code;\n-  register int changed = 0;\n-  register int i;\n-\n-  if (exp == NULL_TREE)\n-    return exp;\n-\n-  code = TREE_CODE (exp);\n-\n-  if (code == CALL_EXPR)\n-    return copy_node (exp);\n-\n-  /* Don't try and defeat a save_expr, as it should only be done once.  */\n-    if (code == SAVE_EXPR)\n-       return exp;\n-\n-  switch (TREE_CODE_CLASS (code))\n-    {\n-    default:\n-      abort ();\n-\n-    case 'c':  /* a constant */\n-    case 't':  /* a type node */\n-    case 'x':  /* something random, like an identifier or an ERROR_MARK.  */\n-      return exp;\n-\n-    case 'd':  /* A decl node */\n-      return exp;\n-\n-    case 'b':  /* A block node */\n-      {\n-\t/* Don't know how to handle these correctly yet.   Must do a\n-\t   break_out_calls on all DECL_INITIAL values for local variables,\n-\t   and also break_out_calls on all sub-blocks and sub-statements.  */\n-\tabort ();\n-      }\n-      return exp;\n-\n-    case 'e':  /* an expression */\n-    case 'r':  /* a reference */\n-    case 's':  /* an expression with side effects */\n-      for (i = TREE_CODE_LENGTH (code) - 1; i >= 0; i--)\n-\t{\n-\t  t1 = break_out_calls (TREE_OPERAND (exp, i));\n-\t  if (t1 != TREE_OPERAND (exp, i))\n-\t    {\n-\t      exp = copy_node (exp);\n-\t      TREE_OPERAND (exp, i) = t1;\n-\t    }\n-\t}\n-      return exp;\n-\n-    case '<':  /* a comparison expression */\n-    case '2':  /* a binary arithmetic expression */\n-      t2 = break_out_calls (TREE_OPERAND (exp, 1));\n-      if (t2 != TREE_OPERAND (exp, 1))\n-\tchanged = 1;\n-    case '1':  /* a unary arithmetic expression */\n-      t1 = break_out_calls (TREE_OPERAND (exp, 0));\n-      if (t1 != TREE_OPERAND (exp, 0))\n-\tchanged = 1;\n-      if (changed)\n-\t{\n-\t  if (TREE_CODE_LENGTH (code) == 1)\n-\t    return build1 (code, TREE_TYPE (exp), t1);\n-\t  else\n-\t    return build (code, TREE_TYPE (exp), t1, t2);\n-\t}\n-      return exp;\n-    }\n-\n-}\n \f\n /* Construct, lay out and return the type of methods belonging to class\n    BASETYPE and whose arguments are described by ARGTYPES and whose values"}, {"sha": "58055eca08b5155dd593e42fa9dae014af99e435", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -5399,44 +5399,8 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n   if (newrhs == error_mark_node)\n     return error_mark_node;\n \n-  if (TREE_CODE (newrhs) == COND_EXPR)\n-    {\n-      tree lhs1;\n-      tree cond = TREE_OPERAND (newrhs, 0);\n-\n-      if (TREE_SIDE_EFFECTS (lhs))\n-\tcond = build_compound_expr (tree_cons\n-\t\t\t\t    (NULL_TREE, lhs,\n-\t\t\t\t     build_tree_list (NULL_TREE, cond)));\n-\n-      /* Cannot have two identical lhs on this one tree (result) as preexpand\n-\t calls will rip them out and fill in RTL for them, but when the\n-\t rtl is generated, the calls will only be in the first side of the\n-\t condition, not on both, or before the conditional jump! (mrs) */\n-      lhs1 = break_out_calls (lhs);\n-\n-      if (lhs == lhs1)\n-\t/* If there's no change, the COND_EXPR behaves like any other rhs.  */\n-\tresult = build (modifycode == NOP_EXPR ? MODIFY_EXPR : INIT_EXPR,\n-\t\t\tlhstype, lhs, newrhs);\n-      else\n-\t{\n-\t  tree result_type = TREE_TYPE (newrhs);\n-\t  /* We have to convert each arm to the proper type because the\n-\t     types may have been munged by constant folding.  */\n-\t  result\n-\t    = build (COND_EXPR, result_type, cond,\n-\t\t     build_modify_expr (lhs, modifycode,\n-\t\t\t\t\tcp_convert (result_type,\n-\t\t\t\t\t\t    TREE_OPERAND (newrhs, 1))),\n-\t\t     build_modify_expr (lhs1, modifycode,\n-\t\t\t\t\tcp_convert (result_type,\n-\t\t\t\t\t\t    TREE_OPERAND (newrhs, 2))));\n-\t}\n-    }\n-  else\n-    result = build (modifycode == NOP_EXPR ? MODIFY_EXPR : INIT_EXPR,\n-\t\t    lhstype, lhs, newrhs);\n+  result = build (modifycode == NOP_EXPR ? MODIFY_EXPR : INIT_EXPR,\n+\t\t  lhstype, lhs, newrhs);\n \n   TREE_SIDE_EFFECTS (result) = 1;\n "}, {"sha": "83c2354d151cc7c9a74ab302f0afd830ed2ba8b6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -1414,10 +1414,9 @@ a name having multiple meanings within a class.\n \n @item -fpermissive\n @opindex fpermissive\n-Downgrade messages about nonconformant code from errors to warnings.  By\n-default, G++ effectively sets @option{-pedantic-errors} without\n-@option{-pedantic}; this option reverses that.  This behavior and this\n-option are superseded by @option{-pedantic}, which works as it does for GNU C@.\n+Downgrade some diagnostics about nonconformant code from errors to\n+warnings.  Thus, using @option{-fpermissive} will allow some\n+nonconforming code to compile.\n \n @item -frepo\n @opindex frepo"}, {"sha": "100c0edf7c9d21833cfdd023a672a74a444a09c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -1,3 +1,8 @@\n+2003-07-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10032\n+\t* g++.dg/warn/pedantic1.C: New test.\n+\n 2003-07-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++ 9483"}, {"sha": "2a4d05536c50126200f2e5c4448ca3eb5b0fd151", "filename": "gcc/testsuite/g++.dg/warn/pedantic1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpedantic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3864984cd9d020a65cd2956ed032e3cc254a98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpedantic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpedantic1.C?ref=4a3864984cd9d020a65cd2956ed032e3cc254a98", "patch": "@@ -0,0 +1,11 @@\n+// PR10032\n+// { dg-options \"-pedantic\" }\n+\n+int main() {\n+  goto label;   // { dg-error \"\" }\n+  \n+  int temp = 1; // { dg-error \"\" } \n+  \n+  label:        // { dg-error \"\" } \n+    return 1;\n+}"}]}