{"sha": "0d807c8050c2329936d4a76d3eac5f3ee800f6a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4MDdjODA1MGMyMzI5OTM2ZDRhNzZkM2VhYzVmM2VlODAwZjZhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-23T19:03:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-23T19:03:07Z"}, "message": "sanitizer_common_interceptors.inc: Cherry pick upstream r211008.\n\n2014-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* sanitizer_common/sanitizer_common_interceptors.inc:\n\tCherry pick upstream r211008.\n\nFrom-SVN: r211912", "tree": {"sha": "bd34f786df913109d1db18a70f3583775c03fbb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd34f786df913109d1db18a70f3583775c03fbb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d807c8050c2329936d4a76d3eac5f3ee800f6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d807c8050c2329936d4a76d3eac5f3ee800f6a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d807c8050c2329936d4a76d3eac5f3ee800f6a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d807c8050c2329936d4a76d3eac5f3ee800f6a2/comments", "author": null, "committer": null, "parents": [{"sha": "82ec4406846c52b08dd5d73ae24c4b6e1b62a326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ec4406846c52b08dd5d73ae24c4b6e1b62a326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ec4406846c52b08dd5d73ae24c4b6e1b62a326"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "4d5b71af4b92fc7b7a0ad61db9031b3691bf4d52", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d807c8050c2329936d4a76d3eac5f3ee800f6a2/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d807c8050c2329936d4a76d3eac5f3ee800f6a2/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=0d807c8050c2329936d4a76d3eac5f3ee800f6a2", "patch": "@@ -1,3 +1,8 @@\n+2014-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* sanitizer_common/sanitizer_common_interceptors.inc:\n+\tCherry pick upstream r211008.\n+\n 2014-06-11  Richard Biener  <rguenther@suse.de>\n \n \t* asan/asan_linux.cc: Cherry pick upstream r210012.\n@@ -24,7 +29,8 @@\n \t* asan/Makefile.in: Regenerate.\n \t* tsan/Makefile.am (tsan_files): Added new files.\n \t* tsan/Makefile.in: Regenerate.\n-\t* sanitizer_common/Makefile.am (sanitizer_common_files): Added new files.\n+\t* sanitizer_common/Makefile.am (sanitizer_common_files): Added new\n+\tfiles.\n \t* sanitizer_common/Makefile.in: Regenerate.\n \n 2014-05-14  Yury Gribov  <y.gribov@samsung.com>"}, {"sha": "6cbe03ae34ab5bca2460e31e884c31daee786d08", "filename": "libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d807c8050c2329936d4a76d3eac5f3ee800f6a2/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d807c8050c2329936d4a76d3eac5f3ee800f6a2/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc?ref=0d807c8050c2329936d4a76d3eac5f3ee800f6a2", "patch": "@@ -1796,7 +1796,7 @@ INTERCEPTOR(int, getsockopt, int sockfd, int level, int optname, void *optval,\n INTERCEPTOR(int, accept, int fd, void *addr, unsigned *addrlen) {\n   void *ctx;\n   COMMON_INTERCEPTOR_ENTER(ctx, accept, fd, addr, addrlen);\n-  unsigned addrlen0;\n+  unsigned addrlen0 = 0;\n   if (addrlen) {\n     COMMON_INTERCEPTOR_READ_RANGE(ctx, addrlen, sizeof(*addrlen));\n     addrlen0 = *addrlen;\n@@ -1818,7 +1818,7 @@ INTERCEPTOR(int, accept, int fd, void *addr, unsigned *addrlen) {\n INTERCEPTOR(int, accept4, int fd, void *addr, unsigned *addrlen, int f) {\n   void *ctx;\n   COMMON_INTERCEPTOR_ENTER(ctx, accept4, fd, addr, addrlen, f);\n-  unsigned addrlen0;\n+  unsigned addrlen0 = 0;\n   if (addrlen) {\n     COMMON_INTERCEPTOR_READ_RANGE(ctx, addrlen, sizeof(*addrlen));\n     addrlen0 = *addrlen;"}]}