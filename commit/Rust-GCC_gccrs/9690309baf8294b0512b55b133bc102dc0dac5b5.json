{"sha": "9690309baf8294b0512b55b133bc102dc0dac5b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5MDMwOWJhZjgyOTRiMDUxMmI1NWIxMzNiYzEwMmRjMGRhYzViNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-03T12:00:48Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-03T12:00:48Z"}, "message": "aarch64: Restrict issue heuristics to inner vector loop\n\nThe AArch64 vector costs try to take issue rates into account.\nHowever, when vectorising an outer loop, we lumped the inner\nand outer operations together, which is somewhat meaningless.\nThis patch restricts the heuristic to the inner loop.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Only\n\trecord issue information for operations that occur in the\n\tinnermost loop.", "tree": {"sha": "cbe02646cd0cf59247755934e76c88d775378630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe02646cd0cf59247755934e76c88d775378630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9690309baf8294b0512b55b133bc102dc0dac5b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690309baf8294b0512b55b133bc102dc0dac5b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9690309baf8294b0512b55b133bc102dc0dac5b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690309baf8294b0512b55b133bc102dc0dac5b5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028059b46ec9aef7dd447792c579f35396751068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028059b46ec9aef7dd447792c579f35396751068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/028059b46ec9aef7dd447792c579f35396751068"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "19625eb048d963b3a79aee46bc48bc9933f18c9c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690309baf8294b0512b55b133bc102dc0dac5b5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690309baf8294b0512b55b133bc102dc0dac5b5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9690309baf8294b0512b55b133bc102dc0dac5b5", "patch": "@@ -15392,6 +15392,10 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n       fractional_cost stmt_cost\n \t= aarch64_builtin_vectorization_cost (kind, vectype, misalign);\n \n+      bool in_inner_loop_p = (where == vect_body\n+\t\t\t      && stmt_info\n+\t\t\t      && stmt_in_inner_loop_p (vinfo, stmt_info));\n+\n       /* Do one-time initialization based on the vinfo.  */\n       loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo);\n       bb_vec_info bb_vinfo = dyn_cast<bb_vec_info> (vinfo);\n@@ -15438,14 +15442,15 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t  stmt_cost = aarch64_adjust_stmt_cost (kind, stmt_info, vectype,\n \t\t\t\t\t\tstmt_cost);\n \n-\t  /* If we're recording a nonzero vector loop body cost, also estimate\n-\t     the operations that would need to be issued by all relevant\n-\t     implementations of the loop.  */\n+\t  /* If we're recording a nonzero vector loop body cost for the\n+\t     innermost loop, also estimate the operations that would need\n+\t     to be issued by all relevant implementations of the loop.  */\n \t  auto *issue_info = aarch64_tune_params.vec_costs->issue_info;\n \t  if (loop_vinfo\n \t      && issue_info\n \t      && costs->vec_flags\n \t      && where == vect_body\n+\t      && (!LOOP_VINFO_LOOP (loop_vinfo)->inner || in_inner_loop_p)\n \t      && vectype\n \t      && stmt_cost != 0)\n \t    {\n@@ -15489,8 +15494,7 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n       /* Statements in an inner loop relative to the loop being\n \t vectorized are weighted more heavily.  The value here is\n \t arbitrary and could potentially be improved with analysis.  */\n-      if (where == vect_body && stmt_info\n-\t  && stmt_in_inner_loop_p (vinfo, stmt_info))\n+      if (in_inner_loop_p)\n \t{\n \t  gcc_assert (loop_vinfo);\n \t  count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo); /*  FIXME  */"}]}