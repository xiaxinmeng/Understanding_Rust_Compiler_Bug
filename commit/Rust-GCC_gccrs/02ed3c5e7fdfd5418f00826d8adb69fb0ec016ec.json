{"sha": "02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlZDNjNWU3ZmRmZDU0MThmMDA4MjZkOGFkYjY5ZmIwZWMwMTZlYw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-08-23T19:41:47Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-08-23T19:41:47Z"}, "message": "s390.h (LOAD_EXTEND_OP): Remove.\n\n\t* config/s390/s390.h (LOAD_EXTEND_OP): Remove.\n\t* config/s390/s390.md (\"movhi\"): New expander; old insn renamed to ...\n\t(\"*movhi\"): ... this.\n\t(\"movqi\", \"*movqi\"): Likewise.\n\t(\"movqi_64\"): Remove.\n\t(\"*zero_extendhisi2_31\"): Change predicate to s_operand.\n\nFrom-SVN: r70745", "tree": {"sha": "1d70dc1a91fc754082ed345ddd7384f783d6f436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d70dc1a91fc754082ed345ddd7384f783d6f436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/comments", "author": null, "committer": null, "parents": [{"sha": "f346cc376f862afefa40c3b8396896e8f314e3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f346cc376f862afefa40c3b8396896e8f314e3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f346cc376f862afefa40c3b8396896e8f314e3db"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "75bb6424bee76ea9d1950b0fdd4b86f7b64525e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "patch": "@@ -1,3 +1,12 @@\n+2003-08-23  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.h (LOAD_EXTEND_OP): Remove.\n+\t* config/s390/s390.md (\"movhi\"): New expander; old insn renamed to ...\n+\t(\"*movhi\"): ... this.\n+\t(\"movqi\", \"*movqi\"): Likewise.\n+\t(\"movqi_64\"): Remove.\n+\t(\"*zero_extendhisi2_31\"): Change predicate to s_operand.\n+\n 2003-08-23  Dale Johannesen  <dalej@apple.com>\n \t* calls.c (emit_library_call_value_1): Fix obvious errors in\n \targuments to emit_group_store."}, {"sha": "1e8cfa9aaaba481398f3192f74c31fbcf821a42b", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "patch": "@@ -1090,14 +1090,6 @@ extern int s390_nr_constants;\n    tablejump instruction.  */\n #define CASE_VECTOR_MODE (TARGET_64BIT ? DImode : SImode)\n \n-/* Load from integral MODE < SI from memory into register makes sign_extend\n-   or zero_extend\n-   In our case sign_extension happens for Halfwords, other no extension.  */\n-#define LOAD_EXTEND_OP(MODE) \t\t\t\t\t\\\n-(TARGET_64BIT ? ((MODE) == QImode ? ZERO_EXTEND :               \\\n-                 (MODE) == HImode ? SIGN_EXTEND : NIL)          \\\n-              : ((MODE) == HImode ? SIGN_EXTEND : NIL))\n-\n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)  1"}, {"sha": "a190bad72b8f3b5483eb968d63389abda600a609", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=02ed3c5e7fdfd5418f00826d8adb69fb0ec016ec", "patch": "@@ -1295,7 +1295,25 @@\n ; movhi instruction pattern(s).\n ;\n \n-(define_insn \"movhi\"\n+(define_expand \"movhi\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:HI 1 \"general_operand\" \"\"))]\n+  \"\"\n+{\n+  /* Make it explicit that loading a register from memory \n+     always sign-extends (at least) to SImode.  */\n+  if (optimize && !no_new_pseudos\n+      && register_operand (operands[0], VOIDmode)\n+      && memory_operand (operands[1], VOIDmode))\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      rtx ext = gen_rtx_SIGN_EXTEND (SImode, operands[1]);\n+      emit_insn (gen_rtx_SET (VOIDmode, tmp, ext));\n+      operands[1] = gen_lowpart (HImode, tmp);\n+    }\n+})\n+\n+(define_insn \"*movhi\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,T,?Q\")\n         (match_operand:HI 1 \"general_operand\" \"d,n,R,T,d,d,?Q\"))]\n   \"\"\n@@ -1324,23 +1342,25 @@\n ; movqi instruction pattern(s).\n ;\n \n-(define_insn \"movqi_64\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,R,T,Q,S,?Q\")\n-        (match_operand:QI 1 \"general_operand\" \"d,n,m,d,d,n,n,?Q\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   lr\\t%0,%1\n-   lhi\\t%0,%b1\n-   llgc\\t%0,%1\n-   stc\\t%1,%0\n-   stcy\\t%1,%0\n-   mvi\\t%0,%b1\n-   mviy\\t%0,%b1\n-   mvc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\" \"RR,RI,RXY,RX,RXY,SI,SIY,SS\")\n-   (set_attr \"type\" \"lr,*,*,store,store,store,store,cs\")])\n+(define_expand \"movqi\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:QI 1 \"general_operand\" \"\"))]\n+  \"\"\n+{\n+  /* On 64-bit, zero-extending from memory to register\n+     is just as fast as a QImode load.  */\n+  if (TARGET_64BIT && optimize && !no_new_pseudos\n+      && register_operand (operands[0], VOIDmode)\n+      && memory_operand (operands[1], VOIDmode))\n+    {\n+      rtx tmp = gen_reg_rtx (DImode);\n+      rtx ext = gen_rtx_ZERO_EXTEND (DImode, operands[1]);\n+      emit_insn (gen_rtx_SET (VOIDmode, tmp, ext));\n+      operands[1] = gen_lowpart (QImode, tmp);\n+    }\n+})\n \n-(define_insn \"movqi\"\n+(define_insn \"*movqi\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,T,Q,S,?Q\")\n         (match_operand:QI 1 \"general_operand\" \"d,n,R,T,d,d,n,n,?Q\"))]\n   \"\"\n@@ -2478,7 +2498,7 @@\n \n (define_insn_and_split \"*zero_extendhisi2_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-        (zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"QS\")))\n+        (zero_extend:SI (match_operand:HI 1 \"s_operand\" \"QS\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n   \"#\""}]}