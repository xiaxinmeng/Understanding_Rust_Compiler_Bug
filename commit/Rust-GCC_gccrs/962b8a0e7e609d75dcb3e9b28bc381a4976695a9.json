{"sha": "962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyYjhhMGU3ZTYwOWQ3NWRjYjNlOWIyOGJjMzgxYTQ5NzY2OTVhOQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-23T19:37:48Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-23T19:37:48Z"}, "message": "re PR fortran/45744 (ICE with -O1 in gfc_conv_expr_op, at fortran/trans-expr.c:1366)\n\n2010-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45744\n\t* frontend-passes.c (optimize_binop_array_assignment):\n\tOnly re-use lhs as intermediate storage if kind and type\n\tparameters match.\n\n2010-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45744\n\t* gfortran.dg/dependency_36.f90:  New test.\n\nFrom-SVN: r164570", "tree": {"sha": "f8f7c145a1029518e56592b7e60f7b1e09fcfabe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8f7c145a1029518e56592b7e60f7b1e09fcfabe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/comments", "author": null, "committer": null, "parents": [{"sha": "5109c83f9a7fbf224ff7c6a9b0c054dbe86da8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5109c83f9a7fbf224ff7c6a9b0c054dbe86da8f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5109c83f9a7fbf224ff7c6a9b0c054dbe86da8f2"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "02ab36d06b119906f1ca88e3347421e9cc672199", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "patch": "@@ -1,9 +1,16 @@\n+2010-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45744\n+\t* frontend-passes.c (optimize_binop_array_assignment):\n+\tOnly re-use lhs as intermediate storage if kind and type\n+\tparameters match.\n+\n 2010-09-23  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/45745\n \tPR fortran/45648\n-\t* trans-array.c (gfc_conv_expr_descriptor): Handle \n-\tss->type == GFC_SS_INTRINSIC (for {l,u}bound intrinsics) case. \n+\t* trans-array.c (gfc_conv_expr_descriptor): Handle\n+\tss->type == GFC_SS_INTRINSIC (for {l,u}bound intrinsics) case.\n \n 2010-09-23  Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "aefee62808b62dcd8f5163314d8e6c7cd6e45bff", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "patch": "@@ -122,8 +122,13 @@ optimize_binop_array_assignment (gfc_code *c, gfc_expr **rhs, bool seen_op)\n   else if (seen_op && e->expr_type == EXPR_FUNCTION && e->rank > 0\n \t   && ! (e->value.function.esym \n \t\t && (e->value.function.esym->attr.elemental \n-\t\t     || e->value.function.esym->attr.allocatable))\n-\t   && ! (e->value.function.isym && e->value.function.isym->elemental))\n+\t\t     || e->value.function.esym->attr.allocatable\n+\t\t     || e->value.function.esym->ts.type != c->expr1->ts.type\n+\t\t     || e->value.function.esym->ts.kind != c->expr1->ts.kind))\n+\t   && ! (e->value.function.isym\n+\t\t && (e->value.function.isym->elemental\n+\t\t     || e->ts.type != c->expr1->ts.type\n+\t\t     || e->ts.kind != c->expr1->ts.kind)))\n     {\n \n       gfc_code *n;"}, {"sha": "3773f07bc2873f786855cf264f97ada2c28312e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "patch": "@@ -1,3 +1,8 @@\n+2010-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45744\n+\t* gfortran.dg/dependency_36.f90:  New test.\n+\n 2010-09-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pad-1.c: Remove -S from dg-options."}, {"sha": "f3c0ef760f4ba85749bd5d5db03e8346d8781ac8", "filename": "gcc/testsuite/gfortran.dg/dependency_36.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b8a0e7e609d75dcb3e9b28bc381a4976695a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_36.f90?ref=962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-O -Warray-temporaries\" }\n+! PR 45744 - this used to ICE because of type mismatch\n+!            in the generated temporary.\n+MODULE m\n+CONTAINS\n+  FUNCTION rnd(n)\n+    INTEGER, INTENT(in) :: n\n+    REAL(8), DIMENSION(n) :: rnd\n+    CALL RANDOM_NUMBER(rnd)\n+  END FUNCTION rnd\n+\n+  SUBROUTINE GeneticOptimize(n)\n+    INTEGER :: n\n+    LOGICAL :: mask(n)\n+    REAL(8) :: popcross=0\n+    REAL(4) :: foo(n)\n+    real(4) :: a(n,n), b(n,n)\n+    real(8) :: c(n,n)\n+    integer(4) :: x(n,n)\n+    integer(8) :: bar(n)\n+    mask = (rnd(n) < popcross)  ! { dg-warning \"Creating array temporary\" }\n+    foo = rnd(n)                ! { dg-warning \"Creating array temporary\" }\n+    bar = rnd(n)                ! { dg-warning \"Creating array temporary\" }\n+    c = matmul(a,b)             ! { dg-warning \"Creating array temporary\" }\n+    x = matmul(a,b)             ! { dg-warning \"Creating array temporary\" }\n+  END SUBROUTINE GeneticOptimize\n+END MODULE m"}]}