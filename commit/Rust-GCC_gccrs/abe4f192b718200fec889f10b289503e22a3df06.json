{"sha": "abe4f192b718200fec889f10b289503e22a3df06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlNGYxOTJiNzE4MjAwZmVjODg5ZjEwYjI4OTUwM2UyMmEzZGYwNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-08-24T22:37:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-24T22:37:34Z"}, "message": "fold-const.c (fold): Reassociate (+ (+ (* a b) c) (* d e)) as (+ (+ (* a b) (* d e)) c).\n\n        * fold-const.c (fold): Reassociate (+ (+ (* a b) c) (* d e))\n        as (+ (+ (* a b) (* d e)) c).  Factor a common power-of-two\n        multiplicand out of (+ (* a b) (* c d)).\n\nFrom-SVN: r28829", "tree": {"sha": "ba72a7fe3c6c5380b0f55be08ce8de1aaba58b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba72a7fe3c6c5380b0f55be08ce8de1aaba58b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abe4f192b718200fec889f10b289503e22a3df06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe4f192b718200fec889f10b289503e22a3df06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe4f192b718200fec889f10b289503e22a3df06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe4f192b718200fec889f10b289503e22a3df06/comments", "author": null, "committer": null, "parents": [{"sha": "f2a1bc02679df06d8461df03f48ebaafe5e4307e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a1bc02679df06d8461df03f48ebaafe5e4307e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a1bc02679df06d8461df03f48ebaafe5e4307e"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "b6817cfb501717df64ca5e1b931759fc3371cfa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe4f192b718200fec889f10b289503e22a3df06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe4f192b718200fec889f10b289503e22a3df06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abe4f192b718200fec889f10b289503e22a3df06", "patch": "@@ -1,3 +1,9 @@\n+Tue Aug 24 15:37:03 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* fold-const.c (fold): Reassociate (+ (+ (* a b) c) (* d e))\n+\tas (+ (+ (* a b) (* d e)) c).  Factor a common power-of-two\n+\tmultiplicand out of (+ (* a b) (* c d)).\n+\n Tue Aug 24 11:46:10 1999  Bob Manson <manson@cygnus.com>\n \t\t\t  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "327ebd36a79ffd24b194e61f7f57341a0fc671bb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe4f192b718200fec889f10b289503e22a3df06/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe4f192b718200fec889f10b289503e22a3df06/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=abe4f192b718200fec889f10b289503e22a3df06", "patch": "@@ -4757,6 +4757,37 @@ fold (expr)\n \t      goto bit_ior;\n \t    }\n \n+\t  /* Reassociate (plus (plus (mult) (foo)) (mult)) as\n+\t     (plus (plus (mult) (mult)) (foo)) so that we can \n+\t     take advantage of the factoring cases below.  */\n+\t  if ((TREE_CODE (arg0) == PLUS_EXPR\n+\t       && TREE_CODE (arg1) == MULT_EXPR)\n+\t      || (TREE_CODE (arg1) == PLUS_EXPR\n+\t          && TREE_CODE (arg0) == MULT_EXPR))\n+\t    {\n+\t      tree parg0, parg1, parg, marg;\n+\n+\t      if (TREE_CODE (arg0) == PLUS_EXPR)\n+\t\tparg = arg0, marg = arg1;\n+\t      else\n+\t\tparg = arg1, marg = arg0;\n+\t      parg0 = TREE_OPERAND (parg, 0);\n+\t      parg1 = TREE_OPERAND (parg, 1);\n+\t      STRIP_NOPS (parg0);\n+\t      STRIP_NOPS (parg1);\n+\n+\t      if (TREE_CODE (parg0) == MULT_EXPR\n+\t\t  && TREE_CODE (parg1) != MULT_EXPR)\n+\t\treturn fold (build (PLUS_EXPR, type,\n+\t\t\t\t    fold (build (PLUS_EXPR, type, parg0, marg)),\n+\t\t\t\t    parg1));\n+\t      if (TREE_CODE (parg0) != MULT_EXPR\n+\t\t  && TREE_CODE (parg1) == MULT_EXPR)\n+\t\treturn fold (build (PLUS_EXPR, type,\n+\t\t\t\t    fold (build (PLUS_EXPR, type, parg1, marg)),\n+\t\t\t\t    parg0));\n+\t    }\n+\n \t  if (TREE_CODE (arg0) == MULT_EXPR && TREE_CODE (arg1) == MULT_EXPR)\n \t    {\n \t      tree arg00, arg01, arg10, arg11;\n@@ -4782,6 +4813,36 @@ fold (expr)\n \t      else if (operand_equal_p (arg01, arg10, 0))\n \t\tsame = arg01, alt0 = arg00, alt1 = arg11;\n \n+\t      /* No identical multiplicands; see if we can find a common\n+\t\t power-of-two factor in non-power-of-two multiplies.  This\n+\t\t can help in multi-dimensional array access.  */\n+\t      else if (TREE_CODE (arg01) == INTEGER_CST\n+\t\t       && TREE_CODE (arg11) == INTEGER_CST\n+\t\t       && TREE_INT_CST_HIGH (arg01) == 0\n+\t\t       && TREE_INT_CST_HIGH (arg11) == 0)\n+\t\t{\n+\t\t  HOST_WIDE_INT int01, int11, tmp;\n+\t\t  int01 = TREE_INT_CST_LOW (arg01);\n+\t\t  int11 = TREE_INT_CST_LOW (arg11);\n+\n+\t\t  /* Move min of absolute values to int11.  */\n+\t\t  if ((int01 >= 0 ? int01 : -int01)\n+\t\t      < (int11 >= 0 ? int11 : -int11))\n+\t\t    {\n+\t\t      tmp = int01, int01 = int11, int11 = tmp;\n+\t\t      alt0 = arg00, arg00 = arg10, arg10 = alt0;\n+\t\t      alt0 = arg01, arg01 = arg11, arg11 = alt0;\n+\t\t    }\n+\n+\t\t  if (exact_log2 (int11) > 0 && int01 % int11 == 0)\n+\t\t    {\n+\t\t      alt0 = fold (build (MULT_EXPR, type, arg00,\n+\t\t\t\t\t  build_int_2 (int01 / int11, 0)));\n+\t\t      alt1 = arg10;\n+\t\t      same = arg11;\n+\t\t    }\n+\t\t}\n+\n \t      if (same)\n \t        return fold (build (MULT_EXPR, type,\n \t\t\t\t    fold (build (PLUS_EXPR, type, alt0, alt1)),"}]}