{"sha": "92637e93ed8cc9c607a6b544ed5944530ee99b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2MzdlOTNlZDhjYzljNjA3YTZiNTQ0ZWQ1OTQ0NTMwZWU5OWIwMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-12-15T22:15:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-12-15T22:15:21Z"}, "message": "re PR libstdc++/51558 (Declaration of unspecialized std::hash<_Tp>::operator()(_Tp) turns compile-time errors into link-time errors)\n\n2011-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/51558\n\t* include/bits/functional_hash.h (struct hash): Add static_assert.\n\t* src/compatibility-c++0x.cc: Adjust compatibility definitions.\n\t* testsuite/23_containers/unordered_map/erase/51142.cc: Adjust.\n\t* testsuite/23_containers/unordered_set/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/erase/51142.cc: Likewise.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r182392", "tree": {"sha": "e4fdba9c406221d03d29a59d8b97dba4ecb88f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4fdba9c406221d03d29a59d8b97dba4ecb88f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92637e93ed8cc9c607a6b544ed5944530ee99b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92637e93ed8cc9c607a6b544ed5944530ee99b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92637e93ed8cc9c607a6b544ed5944530ee99b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92637e93ed8cc9c607a6b544ed5944530ee99b03/comments", "author": null, "committer": null, "parents": [{"sha": "5058651d6382e0f307f9c96c356cca2d41cbddba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5058651d6382e0f307f9c96c356cca2d41cbddba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5058651d6382e0f307f9c96c356cca2d41cbddba"}], "stats": {"total": 102, "additions": 75, "deletions": 27}, "files": [{"sha": "f050ad903c09214a96d65e5bf8cbf953d74a97c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -1,3 +1,14 @@\n+2011-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51558\n+\t* include/bits/functional_hash.h (struct hash): Add static_assert.\n+\t* src/compatibility-c++0x.cc: Adjust compatibility definitions.\n+\t* testsuite/23_containers/unordered_map/erase/51142.cc: Adjust.\n+\t* testsuite/23_containers/unordered_set/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/51142.cc: Likewise.\n+\n 2011-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/num_put/put/char/9780-2.cc: Add test for \"C\""}, {"sha": "e892159d4499cfc3bdc0e1502b2d2ba374ca21e3", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -57,8 +57,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct hash : public __hash_base<size_t, _Tp>\n     {\n-      size_t\n-      operator()(_Tp __val) const;\n+      static_assert(sizeof(_Tp) < 0,\n+\t\t    \"std::hash is not specialized for this type\");\n+      size_t operator()(const _Tp&) const noexcept;\n     };\n \n   /// Partial specializations for pointer types."}, {"sha": "03c58d244f2c560e0ab33b03f661bd2febf79662", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -52,36 +52,60 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n #ifndef _GLIBCXX_LONG_DOUBLE_COMPAT_IMPL\n   template<>\n-    size_t\n-    hash<string>::operator()(string __s) const\n-    { return _Hash_impl::hash(__s.data(), __s.length()); }\n+    struct hash<string>\n+    {\n+      size_t operator()(string) const;\n+    };\n+\n+  size_t\n+  hash<string>::operator()(string __s) const\n+  { return _Hash_impl::hash(__s.data(), __s.length()); }\n \n   template<>\n-    size_t\n-    hash<const string&>::operator()(const string& __s) const\n-    { return _Hash_impl::hash(__s.data(), __s.length()); }\n+    struct hash<const string&>\n+    {\n+      size_t operator()(const string&) const;\n+    };\n+\n+  size_t\n+  hash<const string&>::operator()(const string& __s) const\n+  { return _Hash_impl::hash(__s.data(), __s.length()); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n-    size_t\n-    hash<wstring>::operator()(wstring __s) const\n-    { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n+    struct hash<wstring>\n+    { \n+      size_t operator()(wstring) const;\n+    };\n+\n+  size_t\n+  hash<wstring>::operator()(wstring __s) const\n+  { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n \n   template<>\n-    size_t\n-    hash<const wstring&>::operator()(const wstring& __s) const\n-    { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n+    struct hash<const wstring&>\n+    {\n+      size_t operator()(const wstring&) const;\n+    };\n+\n+  size_t\n+  hash<const wstring&>::operator()(const wstring& __s) const\n+  { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n #endif\n #endif\n \n   template<>\n-    size_t\n-    hash<error_code>::operator()(error_code __e) const\n+    struct hash<error_code>\n     {\n-      const size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n-      return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n-    }\n+      size_t operator()(error_code) const;\n+    };\n \n+  size_t\n+  hash<error_code>::operator()(error_code __e) const\n+  {\n+    const size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n+    return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n+  }\n \n   // gcc-4.7.0\n   // <chrono> changes is_monotonic to is_steady."}, {"sha": "7986fb23a369c579efb894389ba2126ea60d3286", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/51142.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F51142.cc?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -27,12 +27,15 @@ struct X\n   X(T&) {}\n };\n \n+struct X_hash\n+{ std::size_t operator()(const X&) const { return 0; } };\n+\n bool operator==(const X&, const X&) { return false; }\n \n // LWG 2059.\n-void erasor(std::unordered_map<X, int>& s, X x)\n+void erasor(std::unordered_map<X, int, X_hash>& s, X x)\n {\n-  std::unordered_map<X, int>::iterator it = s.find(x);\n+  std::unordered_map<X, int, X_hash>::iterator it = s.find(x);\n   if (it != s.end())\n     s.erase(it);\n }"}, {"sha": "0d434ac8a683b0e668f07c93e08d5525f42fbb60", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/51142.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F51142.cc?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -27,12 +27,15 @@ struct X\n   X(T&) {}\n };\n \n+struct X_hash\n+{ std::size_t operator()(const X&) const { return 0; } };\n+\n bool operator==(const X&, const X&) { return false; }\n \n // LWG 2059.\n-void erasor(std::unordered_multimap<X, int>& s, X x)\n+void erasor(std::unordered_multimap<X, int, X_hash>& s, X x)\n {\n-  std::unordered_multimap<X, int>::iterator it = s.find(x);\n+  std::unordered_multimap<X, int, X_hash>::iterator it = s.find(x);\n   if (it != s.end())\n     s.erase(it);\n }"}, {"sha": "7a0a18352447650ce72f607f75a2d2211f94bec6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/51142.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F51142.cc?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -27,12 +27,15 @@ struct X\n   X(T&) {}\n };\n \n+struct X_hash\n+{ std::size_t operator()(const X&) const { return 0; } };\n+\n bool operator==(const X&, const X&) { return false; }\n \n // LWG 2059.\n-void erasor(std::unordered_multiset<X>& s, X x)\n+void erasor(std::unordered_multiset<X, X_hash>& s, X x)\n {\n-  std::unordered_multiset<X>::iterator it = s.find(x);\n+  std::unordered_multiset<X, X_hash>::iterator it = s.find(x);\n   if (it != s.end())\n     s.erase(it);\n }"}, {"sha": "ec5aeb1a234ad057cc24dfbc6f92b3f4ba0d9db8", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/51142.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92637e93ed8cc9c607a6b544ed5944530ee99b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F51142.cc?ref=92637e93ed8cc9c607a6b544ed5944530ee99b03", "patch": "@@ -27,12 +27,15 @@ struct X\n   X(T&) {}\n };\n \n+struct X_hash\n+{ std::size_t operator()(const X&) const { return 0; } };\n+\n bool operator==(const X&, const X&) { return false; }\n \n // LWG 2059.\n-void erasor(std::unordered_set<X>& s, X x)\n+void erasor(std::unordered_set<X, X_hash>& s, X x)\n {\n-  std::unordered_set<X>::iterator it = s.find(x);\n+  std::unordered_set<X, X_hash>::iterator it = s.find(x);\n   if (it != s.end())\n     s.erase(it);\n }"}]}