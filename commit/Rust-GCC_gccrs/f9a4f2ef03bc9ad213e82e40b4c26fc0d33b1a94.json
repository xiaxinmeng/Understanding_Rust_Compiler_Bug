{"sha": "f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhNGYyZWYwM2JjOWFkMjEzZTgyZTQwYjRjMjZmYzBkMzNiMWE5NA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2008-04-08T06:46:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:46:04Z"}, "message": "re PR target/10768 (ICEs on compilation of ada support library for avr)\n\n2008-04-08  Tristan Gingold  <gingold@adacore.com>\n\nPR ada/10768\n\n\t* cuintp.c: Fix 16 bits issue for AVR.\n\tOn AVR, integer is 16 bits, so it can't be used to do math with\n\tBase (=32768).\n\tSo use long_integer instead.\n\nFrom-SVN: r134013", "tree": {"sha": "1b1ef712806bd0b0506e27898f6b8a70596ba394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b1ef712806bd0b0506e27898f6b8a70596ba394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "682bca235fc640470bfadbf75d93f10d0ccdeb77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682bca235fc640470bfadbf75d93f10d0ccdeb77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682bca235fc640470bfadbf75d93f10d0ccdeb77"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "90ea342f6b5fd7e1c5c6a22833a85142ca2c50aa", "filename": "gcc/ada/cuintp.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94/gcc%2Fada%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94/gcc%2Fada%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcuintp.c?ref=f9a4f2ef03bc9ad213e82e40b4c26fc0d33b1a94", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -101,11 +101,15 @@ UI_To_gnu (Uint Input, tree type)\n \t large as an integer not to overflow.  REAL types are always fine, but\n \t INTEGER or ENUMERAL types we are handed may be too short.  We use a\n \t base integer type node for the computations in this case and will\n-\t convert the final result back to the incoming type later on.  */\n+\t convert the final result back to the incoming type later on.\n+\t The base integer precision must be superior than 16.  */\n \n       if (TREE_CODE (comp_type) != REAL_TYPE\n-\t  && TYPE_PRECISION (comp_type) < TYPE_PRECISION (integer_type_node))\n-\tcomp_type = integer_type_node;\n+\t  && TYPE_PRECISION (comp_type) < TYPE_PRECISION (long_integer_type_node))\n+\t{\n+\t  comp_type = long_integer_type_node;\n+\t  gcc_assert (TYPE_PRECISION (comp_type) > 16);\n+\t}\n \n       gnu_base = build_cst_from_int (comp_type, Base);\n "}]}