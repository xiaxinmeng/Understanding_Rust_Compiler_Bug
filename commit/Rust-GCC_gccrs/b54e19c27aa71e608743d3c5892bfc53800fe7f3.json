{"sha": "b54e19c27aa71e608743d3c5892bfc53800fe7f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0ZTE5YzI3YWE3MWU2MDg3NDNkM2M1ODkyYmZjNTM4MDBmZTdmMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-19T14:59:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-19T14:59:39Z"}, "message": "tree-vrp.c (union_ranges): New function.\n\n2012-06-19  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (union_ranges): New function.\n\t(vrp_meet_1): Use union_ranges.\n\t(vrp_meet): Dump what we union and call vrp_meet_1.\n\nFrom-SVN: r188780", "tree": {"sha": "11e11b2e5760cc48a0907af797031859ef7a2ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11e11b2e5760cc48a0907af797031859ef7a2ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54e19c27aa71e608743d3c5892bfc53800fe7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54e19c27aa71e608743d3c5892bfc53800fe7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54e19c27aa71e608743d3c5892bfc53800fe7f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54e19c27aa71e608743d3c5892bfc53800fe7f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82981dc4cdcb7d34e41b5095b517e66bc808c9d6"}], "stats": {"total": 488, "additions": 314, "deletions": 174}, "files": [{"sha": "94e7b21f0e3abe769482f0376f4590b088117bcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54e19c27aa71e608743d3c5892bfc53800fe7f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54e19c27aa71e608743d3c5892bfc53800fe7f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b54e19c27aa71e608743d3c5892bfc53800fe7f3", "patch": "@@ -1,3 +1,9 @@\n+2012-06-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (union_ranges): New function.\n+\t(vrp_meet_1): Use union_ranges.\n+\t(vrp_meet): Dump what we union and call vrp_meet_1.\n+\n 2012-06-19  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (enum unspec): Delete UNSPEC_SIN and UNSPEC_COS."}, {"sha": "421c08e8e4de9d7f51071d6620c1463b69aeb11c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 308, "deletions": 174, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54e19c27aa71e608743d3c5892bfc53800fe7f3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54e19c27aa71e608743d3c5892bfc53800fe7f3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b54e19c27aa71e608743d3c5892bfc53800fe7f3", "patch": "@@ -6770,6 +6770,263 @@ vrp_visit_stmt (gimple stmt, edge *taken_edge_p, tree *output_p)\n   return SSA_PROP_VARYING;\n }\n \n+/* Union the two value-ranges { *VR0TYPE, *VR0MIN, *VR0MAX } and\n+   { VR1TYPE, VR0MIN, VR0MAX } and store the result\n+   in { *VR0TYPE, *VR0MIN, *VR0MAX }.  This may not be the smallest\n+   possible such range.  The resulting range is not canonicalized.  */\n+\n+static void\n+union_ranges (enum value_range_type *vr0type,\n+\t      tree *vr0min, tree *vr0max,\n+\t      enum value_range_type vr1type,\n+\t      tree vr1min, tree vr1max)\n+{\n+  bool mineq = operand_equal_p (*vr0min, vr1min, 0);\n+  bool maxeq = operand_equal_p (*vr0max, vr1max, 0);\n+\n+  /* [] is vr0, () is vr1 in the following classification comments.  */\n+  if (mineq && maxeq)\n+    {\n+      /* [(  )] */\n+      if (*vr0type == vr1type)\n+\t/* Nothing to do for equal ranges.  */\n+\t;\n+      else if ((*vr0type == VR_RANGE\n+\t\t&& vr1type == VR_ANTI_RANGE)\n+\t       || (*vr0type == VR_ANTI_RANGE\n+\t\t   && vr1type == VR_RANGE))\n+\t{\n+\t  /* For anti-range with range union the result is varying.  */\n+\t  goto give_up;\n+\t}\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else if (operand_less_p (*vr0max, vr1min) == 1\n+\t   || operand_less_p (vr1max, *vr0min) == 1)\n+    {\n+      /* [ ] ( ) or ( ) [ ]\n+\t If the ranges have an empty intersection, result of the union\n+\t operation is the anti-range or if both are anti-ranges\n+\t it covers all.  */\n+      if (*vr0type == VR_ANTI_RANGE\n+\t  && vr1type == VR_ANTI_RANGE)\n+\tgoto give_up;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t;\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t{\n+\t  *vr0type = vr1type;\n+\t  *vr0min = vr1min;\n+\t  *vr0max = vr1max;\n+\t}\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t{\n+\t  /* The result is the convex hull of both ranges.  */\n+\t  if (operand_less_p (*vr0max, vr1min) == 1)\n+\t    {\n+\t      /* If the result can be an anti-range, create one.  */\n+\t      if (TREE_CODE (*vr0max) == INTEGER_CST\n+\t\t  && TREE_CODE (vr1min) == INTEGER_CST\n+\t\t  && vrp_val_is_min (*vr0min)\n+\t\t  && vrp_val_is_max (vr1max))\n+\t\t{\n+\t\t  tree min = int_const_binop (PLUS_EXPR,\n+\t\t\t\t\t      *vr0max, integer_one_node);\n+\t\t  tree max = int_const_binop (MINUS_EXPR,\n+\t\t\t\t\t      vr1min, integer_one_node);\n+\t\t  if (!operand_less_p (max, min))\n+\t\t    {\n+\t\t      *vr0type = VR_ANTI_RANGE;\n+\t\t      *vr0min = min;\n+\t\t      *vr0max = max;\n+\t\t    }\n+\t\t  else\n+\t\t    *vr0max = vr1max;\n+\t\t}\n+\t      else\n+\t\t*vr0max = vr1max;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* If the result can be an anti-range, create one.  */\n+\t      if (TREE_CODE (vr1max) == INTEGER_CST\n+\t\t  && TREE_CODE (*vr0min) == INTEGER_CST\n+\t\t  && vrp_val_is_min (vr1min)\n+\t\t  && vrp_val_is_max (*vr0max))\n+\t\t{\n+\t\t  tree min = int_const_binop (PLUS_EXPR,\n+\t\t\t\t\t      vr1max, integer_one_node);\n+\t\t  tree max = int_const_binop (MINUS_EXPR,\n+\t\t\t\t\t      *vr0min, integer_one_node);\n+\t\t  if (!operand_less_p (max, min))\n+\t\t    {\n+\t\t      *vr0type = VR_ANTI_RANGE;\n+\t\t      *vr0min = min;\n+\t\t      *vr0max = max;\n+\t\t    }\n+\t\t  else\n+\t\t    *vr0min = vr1min;\n+\t\t}\n+\t      else\n+\t\t*vr0min = vr1min;\n+\t    }\n+\t}\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else if ((maxeq || operand_less_p (vr1max, *vr0max) == 1)\n+\t   && (mineq || operand_less_p (*vr0min, vr1min) == 1))\n+    {\n+      /* [ (  ) ] or [(  ) ] or [ (  )] */\n+      if (*vr0type == VR_RANGE\n+\t  && vr1type == VR_RANGE)\n+\t;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t{\n+\t  *vr0type = vr1type;\n+\t  *vr0min = vr1min;\n+\t  *vr0max = vr1max;\n+\t}\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t{\n+\t  /* Arbitrarily choose the right or left gap.  */\n+\t  if (!mineq && TREE_CODE (vr1min) == INTEGER_CST)\n+\t    *vr0max = int_const_binop (MINUS_EXPR, vr1min, integer_one_node);\n+\t  else if (!maxeq && TREE_CODE (vr1max) == INTEGER_CST)\n+\t    *vr0min = int_const_binop (PLUS_EXPR, vr1max, integer_one_node);\n+\t  else\n+\t    goto give_up;\n+\t}\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t/* The result covers everything.  */\n+\tgoto give_up;\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else if ((maxeq || operand_less_p (*vr0max, vr1max) == 1)\n+\t   && (mineq || operand_less_p (vr1min, *vr0min) == 1))\n+    {\n+      /* ( [  ] ) or ([  ] ) or ( [  ]) */\n+      if (*vr0type == VR_RANGE\n+\t  && vr1type == VR_RANGE)\n+\t{\n+\t  *vr0type = vr1type;\n+\t  *vr0min = vr1min;\n+\t  *vr0max = vr1max;\n+\t}\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t;\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t{\n+\t  *vr0type = VR_ANTI_RANGE;\n+\t  if (!mineq && TREE_CODE (*vr0min) == INTEGER_CST)\n+\t    {\n+\t      *vr0max = int_const_binop (MINUS_EXPR, *vr0min, integer_one_node);\n+\t      *vr0min = vr1min;\n+\t    }\n+\t  else if (!maxeq && TREE_CODE (*vr0max) == INTEGER_CST)\n+\t    {\n+\t      *vr0min = int_const_binop (PLUS_EXPR, *vr0max, integer_one_node);\n+\t      *vr0max = vr1max;\n+\t    }\n+\t  else\n+\t    goto give_up;\n+\t}\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t/* The result covers everything.  */\n+\tgoto give_up;\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else if ((operand_less_p (vr1min, *vr0max) == 1\n+\t    || operand_equal_p (vr1min, *vr0max, 0))\n+\t   && operand_less_p (*vr0min, vr1min) == 1)\n+    {\n+      /* [  (  ]  ) or [   ](   ) */\n+      if (*vr0type == VR_RANGE\n+\t  && vr1type == VR_RANGE)\n+\t*vr0max = vr1max;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t*vr0min = vr1min;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t{\n+\t  if (TREE_CODE (vr1min) == INTEGER_CST)\n+\t    *vr0max = int_const_binop (MINUS_EXPR, vr1min, integer_one_node);\n+\t  else\n+\t    goto give_up;\n+\t}\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t{\n+\t  if (TREE_CODE (*vr0max) == INTEGER_CST)\n+\t    {\n+\t      *vr0type = vr1type;\n+\t      *vr0min = int_const_binop (PLUS_EXPR, *vr0max, integer_one_node);\n+\t      *vr0max = vr1max;\n+\t    }\n+\t  else\n+\t    goto give_up;\n+\t}\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else if ((operand_less_p (*vr0min, vr1max) == 1\n+\t    || operand_equal_p (*vr0min, vr1max, 0))\n+\t   && operand_less_p (vr1min, *vr0min) == 1)\n+    {\n+      /* (  [  )  ] or (   )[   ] */\n+      if (*vr0type == VR_RANGE\n+\t  && vr1type == VR_RANGE)\n+\t*vr0min = vr1min;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t*vr0max = vr1max;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t{\n+\t  if (TREE_CODE (vr1max) == INTEGER_CST)\n+\t    *vr0min = int_const_binop (PLUS_EXPR, vr1max, integer_one_node);\n+\t  else\n+\t    goto give_up;\n+\t}\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t{\n+\t  if (TREE_CODE (*vr0min) == INTEGER_CST)\n+\t    {\n+\t      *vr0type = vr1type;\n+\t      *vr0min = vr1min;\n+\t      *vr0max = int_const_binop (MINUS_EXPR, *vr0min, integer_one_node);\n+\t    }\n+\t  else\n+\t    goto give_up;\n+\t}\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else\n+    goto give_up;\n+\n+  return;\n+\n+give_up:\n+  *vr0type = VR_VARYING;\n+  *vr0min = NULL_TREE;\n+  *vr0max = NULL_TREE;\n+}\n+\n /* Intersect the two value-ranges { *VR0TYPE, *VR0MIN, *VR0MAX } and\n    { VR1TYPE, VR0MIN, VR0MAX } and store the result\n    in { *VR0TYPE, *VR0MIN, *VR0MAX }.  This may not be the smallest\n@@ -7113,8 +7370,10 @@ vrp_intersect_ranges (value_range_t *vr0, value_range_t *vr1)\n    may not be the smallest possible such range.  */\n \n static void\n-vrp_meet (value_range_t *vr0, value_range_t *vr1)\n+vrp_meet_1 (value_range_t *vr0, value_range_t *vr1)\n {\n+  value_range_t saved;\n+\n   if (vr0->type == VR_UNDEFINED)\n     {\n       /* Drop equivalences.  See PR53465.  */\n@@ -7143,191 +7402,66 @@ vrp_meet (value_range_t *vr0, value_range_t *vr1)\n       return;\n     }\n \n-  if (vr0->type == vr1->type\n-      && compare_values (vr0->min, vr1->min) == 0\n-      && compare_values (vr0->max, vr1->max) == 0)\n-    {\n-      /* If the value-ranges are identical just insersect\n-\t their equivalencies.  */\n-    }\n-  else if (vr0->type == VR_RANGE && vr1->type == VR_RANGE)\n+  saved = *vr0;\n+  union_ranges (&vr0->type, &vr0->min, &vr0->max,\n+\t\tvr1->type, vr1->min, vr1->max);\n+  if (vr0->type == VR_VARYING)\n     {\n-      int cmp;\n-      tree min, max;\n-\n-      /* If the two ranges represent an anti-range produce a\n-\t VR_RANGE with swapped min/max and let the range canonicalization\n-\t fix things up.  */\n-      if (vrp_val_is_min (vr0->min) && !is_overflow_infinity (vr0->min)\n-\t  && vrp_val_is_max (vr1->max) && !is_overflow_infinity (vr1->max)\n-\t  && TREE_CODE (vr1->min) == INTEGER_CST\n-\t  && TREE_CODE (vr0->max) == INTEGER_CST\n-\t  && compare_values (vr0->max, vr1->min) == -1)\n-\t{\n-\t  min = vr1->min;\n-\t  max = vr0->max;\n-\t}\n-      else if (vrp_val_is_min (vr1->min) && !is_overflow_infinity (vr1->min)\n-\t       && vrp_val_is_max (vr0->max) && !is_overflow_infinity (vr0->max)\n-\t       && TREE_CODE (vr1->max) == INTEGER_CST\n-\t       && TREE_CODE (vr0->min) == INTEGER_CST\n-\t       && compare_values (vr1->max, vr0->min) == -1)\n-\t{\n-\t  max = vr1->max;\n-\t  min = vr0->min;\n-\t}\n-      /* Otherwise compute the convex hull of the ranges.  The lower limit of\n-\t the new range is the minimum of the two ranges.  If they\n-\t cannot be compared, then give up.  */\n-      else\n-\t{\n-\t  cmp = compare_values (vr0->min, vr1->min);\n-\t  if (cmp == 0 || cmp == 1)\n-\t    min = vr1->min;\n-\t  else if (cmp == -1)\n-\t    min = vr0->min;\n-\t  else\n-\t    goto give_up;\n-\n-\t  /* Similarly, the upper limit of the new range is the maximum\n-\t     of the two ranges.  If they cannot be compared, then\n-\t     give up.  */\n-\t  cmp = compare_values (vr0->max, vr1->max);\n-\t  if (cmp == 0 || cmp == -1)\n-\t    max = vr1->max;\n-\t  else if (cmp == 1)\n-\t    max = vr0->max;\n-\t  else\n-\t    goto give_up;\n-\n-\t  /* Check for useless ranges.  */\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (min))\n-\t      && ((vrp_val_is_min (min) || is_overflow_infinity (min))\n-\t\t  && (vrp_val_is_max (max) || is_overflow_infinity (max))))\n-\t    goto give_up;\n+      /* Failed to find an efficient meet.  Before giving up and setting\n+\t the result to VARYING, see if we can at least derive a useful\n+\t anti-range.  FIXME, all this nonsense about distinguishing\n+\t anti-ranges from ranges is necessary because of the odd\n+\t semantics of range_includes_zero_p and friends.  */\n+      if (!symbolic_range_p (&saved)\n+\t  && ((saved.type == VR_RANGE && !range_includes_zero_p (&saved))\n+\t      || (saved.type == VR_ANTI_RANGE && range_includes_zero_p (&saved)))\n+\t  && !symbolic_range_p (vr1)\n+\t  && ((vr1->type == VR_RANGE && !range_includes_zero_p (vr1))\n+\t      || (vr1->type == VR_ANTI_RANGE && range_includes_zero_p (vr1))))\n+\t{\n+\t  set_value_range_to_nonnull (vr0, TREE_TYPE (saved.min));\n+\n+\t  /* Since this meet operation did not result from the meeting of\n+\t     two equivalent names, VR0 cannot have any equivalences.  */\n+\t  if (vr0->equiv)\n+\t    bitmap_clear (vr0->equiv);\n+\t  return;\n \t}\n \n-      set_and_canonicalize_value_range (vr0, vr0->type, min, max, vr0->equiv);\n-    }\n-  else if (vr0->type == VR_ANTI_RANGE || vr1->type == VR_ANTI_RANGE)\n-    {\n-      if (symbolic_range_p (vr0)\n-\t  || symbolic_range_p (vr1))\n-\tgoto give_up;\n-\n-      /* [] is vr0, () is vr1 in the following classification comments.  */\n-      if (operand_less_p (vr0->max, vr1->min) == 1\n-\t  || operand_less_p (vr1->max, vr0->min) == 1)\n-\t{\n-\t  /* [ ] ( ) or ( ) [ ]\n-\t     If the ranges have an empty intersection, result of the meet\n-\t     operation is the anti-range or if both are anti-ranges\n-\t     it covers all.  */\n-\t  if (vr0->type == VR_ANTI_RANGE\n-\t      && vr1->type == VR_ANTI_RANGE)\n-\t    goto give_up;\n-\t  else if (vr1->type == VR_ANTI_RANGE)\n-\t    set_value_range (vr0, vr1->type, vr1->min, vr1->max, vr0->equiv);\n-\t}\n-      else if (operand_less_p (vr1->max, vr0->max) == 1\n-\t       && operand_less_p (vr0->min, vr1->min) == 1)\n-\t{\n-\t  /* [ (  ) ]\n-\t     Arbitrarily choose the left or inner gap.  */\n-\t  if (vr0->type == VR_ANTI_RANGE\n-\t      && vr1->type == VR_ANTI_RANGE)\n-\t    set_value_range (vr0, vr1->type, vr1->min, vr1->max, vr0->equiv);\n-\t  else if (vr0->type == VR_ANTI_RANGE)\n-\t    set_and_canonicalize_value_range (vr0, vr0->type, vr0->min,\n-\t\t      int_const_binop (MINUS_EXPR, vr1->min, integer_one_node),\n-\t\t\t\t\t      vr0->equiv);\n-\t  else\n-\t    goto give_up;\n-\t}\n-      else if (operand_less_p (vr0->max, vr1->max) == 1\n-\t       && operand_less_p (vr1->min, vr0->min) == 1)\n-\t{\n-\t  /* ( [  ] )\n-\t     Arbitrarily choose the left or inner gap.  */\n-\t  if (vr0->type == VR_ANTI_RANGE\n-\t      && vr1->type == VR_ANTI_RANGE)\n-\t    /* Nothing to do.  */;\n-\t  else if (vr1->type == VR_ANTI_RANGE)\n-\t    set_and_canonicalize_value_range (vr0, vr1->type, vr1->min,\n-\t\t      int_const_binop (MINUS_EXPR, vr0->min, integer_one_node),\n-\t\t\t\t\t      vr0->equiv);\n-\t  else\n-\t    goto give_up;\n-\t}\n-      else if (operand_less_p (vr1->min, vr0->max) == 1\n-\t       && operand_less_p (vr0->max, vr1->max) == 1)\n-\t{\n-\t  /* [  ( ]  ) */\n-\t  if (vr0->type == VR_ANTI_RANGE\n-\t      && vr1->type == VR_ANTI_RANGE)\n-\t    set_value_range (vr0, vr0->type, vr1->min, vr0->max, vr0->equiv);\n-\t  else if (vr0->type == VR_ANTI_RANGE)\n-\t    set_and_canonicalize_value_range (vr0, vr0->type, vr0->min,\n-\t\t      int_const_binop (MINUS_EXPR, vr1->min, integer_one_node),\n-\t\t\t\t\t      vr0->equiv);\n-\t  else\n-\t    set_and_canonicalize_value_range (vr0, vr1->type,\n-\t\t      int_const_binop (PLUS_EXPR, vr0->max, integer_one_node),\n-\t\t\t\t\t      vr1->max, vr0->equiv);\n-\t}\n-      else if (operand_less_p (vr0->min, vr1->max) == 1\n-\t       && operand_less_p (vr1->max, vr0->max) == 1)\n-\t{\n-\t  /* (  [ )  ] */\n-\t  if (vr0->type == VR_ANTI_RANGE\n-\t      && vr1->type == VR_ANTI_RANGE)\n-\t    set_value_range (vr0, vr1->type, vr0->min, vr1->max, vr0->equiv);\n-\t  else if (vr0->type == VR_ANTI_RANGE)\n-\t    set_and_canonicalize_value_range (vr0, vr0->type,\n-\t\t      int_const_binop (PLUS_EXPR, vr1->max, integer_one_node),\n-\t\t\t\t\t      vr0->max, vr0->equiv);\n-\t  else\n-\t    set_and_canonicalize_value_range (vr0, vr1->type, vr1->min,\n-\t\t      int_const_binop (MINUS_EXPR, vr0->min, integer_one_node),\n-\t\t\t\t\t      vr0->equiv);\n-\t}\n-      else\n-\tgoto give_up;\n+      set_value_range_to_varying (vr0);\n+      return;\n     }\n-  else\n-    gcc_unreachable ();\n+  set_and_canonicalize_value_range (vr0, vr0->type, vr0->min, vr0->max,\n+\t\t\t\t    vr0->equiv);\n+  if (vr0->type == VR_VARYING)\n+    return;\n \n   /* The resulting set of equivalences is always the intersection of\n-     the two sets.  Above we always left the equivalency set of vr0 as-is.  */\n+     the two sets.  */\n   if (vr0->equiv && vr1->equiv && vr0->equiv != vr1->equiv)\n     bitmap_and_into (vr0->equiv, vr1->equiv);\n   else if (vr0->equiv && !vr1->equiv)\n     bitmap_clear (vr0->equiv);\n+}\n \n-  return;\n-\n-give_up:\n-  /* Failed to find an efficient meet.  Before giving up and setting\n-     the result to VARYING, see if we can at least derive a useful\n-     anti-range.  FIXME, all this nonsense about distinguishing\n-     anti-ranges from ranges is necessary because of the odd\n-     semantics of range_includes_zero_p and friends.  */\n-  if (!symbolic_range_p (vr0)\n-      && ((vr0->type == VR_RANGE && !range_includes_zero_p (vr0))\n-\t  || (vr0->type == VR_ANTI_RANGE && range_includes_zero_p (vr0)))\n-      && !symbolic_range_p (vr1)\n-      && ((vr1->type == VR_RANGE && !range_includes_zero_p (vr1))\n-\t  || (vr1->type == VR_ANTI_RANGE && range_includes_zero_p (vr1))))\n-    {\n-      set_value_range_to_nonnull (vr0, TREE_TYPE (vr0->min));\n-\n-      /* Since this meet operation did not result from the meeting of\n-\t two equivalent names, VR0 cannot have any equivalences.  */\n-      if (vr0->equiv)\n-\tbitmap_clear (vr0->equiv);\n+static void\n+vrp_meet (value_range_t *vr0, value_range_t *vr1)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Meeting\\n  \");\n+      dump_value_range (dump_file, vr0);\n+      fprintf (dump_file, \"\\nand\\n  \");\n+      dump_value_range (dump_file, vr1);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+  vrp_meet_1 (vr0, vr1);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"to\\n  \");\n+      dump_value_range (dump_file, vr0);\n+      fprintf (dump_file, \"\\n\");\n     }\n-  else\n-    set_value_range_to_varying (vr0);\n }\n \n "}]}