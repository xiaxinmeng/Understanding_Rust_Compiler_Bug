{"sha": "d75f90f1923454ae3dac50d69b90d907ac2607c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1ZjkwZjE5MjM0NTRhZTNkYWM1MGQ2OWI5MGQ5MDdhYzI2MDdjNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-08-19T22:10:52Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-08-19T22:10:52Z"}, "message": "2004-08-18  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.md (s390_warn_framesize_string)\n\t(s390_warn_dynamic_string, s390_stack_size_string)\n\t(s390_stack_guard_string): New global string variables.\n\t(s390_warn_framesize, s390_warn_dynamicstack_p, s390_stack_size)\n\t(s390_stack_guard): New global variables.\n\t(override_options): Added checks for the new options.\n\t(s390_emit_prologue): Emit stack check and trap code and perform\n\tcompile time stack size checking.\n\n\t* config/s390/s390.h (TARGET_OPTIONS): Added new options\n\t\"warn-framesize\", \"warn-dynamicstack\", \"stack-size\" and\n\t\"stack-guard\".\n\n\t* doc/invoke.texi: Added documentation for the new options.\n\nFrom-SVN: r86284", "tree": {"sha": "eeea6222ac8bd32c272f58807907ed68b7268736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeea6222ac8bd32c272f58807907ed68b7268736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d75f90f1923454ae3dac50d69b90d907ac2607c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75f90f1923454ae3dac50d69b90d907ac2607c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75f90f1923454ae3dac50d69b90d907ac2607c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75f90f1923454ae3dac50d69b90d907ac2607c6/comments", "author": null, "committer": null, "parents": [{"sha": "ca29916b48a25dcc7a422032b63be032a1f9b6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca29916b48a25dcc7a422032b63be032a1f9b6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca29916b48a25dcc7a422032b63be032a1f9b6ac"}], "stats": {"total": 162, "additions": 150, "deletions": 12}, "files": [{"sha": "025d70e9642abc75564fa907d4e9bad624a196c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d75f90f1923454ae3dac50d69b90d907ac2607c6", "patch": "@@ -1,3 +1,20 @@\n+2004-08-18  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.md (s390_warn_framesize_string)\n+\t(s390_warn_dynamic_string, s390_stack_size_string)\n+\t(s390_stack_guard_string): New global string variables.\n+\t(s390_warn_framesize, s390_warn_dynamicstack_p, s390_stack_size)\n+\t(s390_stack_guard): New global variables.\n+\t(override_options): Added checks for the new options.\n+\t(s390_emit_prologue): Emit stack check and trap code and perform\n+\tcompile time stack size checking.\n+\t\n+\t* config/s390/s390.h (TARGET_OPTIONS): Added new options \n+\t\"warn-framesize\", \"warn-dynamicstack\", \"stack-size\" and\n+\t\"stack-guard\".\n+\n+\t* doc/invoke.texi: Added documentation for the new options.\n+\n 2004-08-19  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* unwind-dw2-fde.c (get_cie_encoding): Cast argument to strlen"}, {"sha": "f68879c59963448954cd19301ba90e665029cb01", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d75f90f1923454ae3dac50d69b90d907ac2607c6", "patch": "@@ -204,6 +204,16 @@ const char *s390_arch_string;\t\t/* for -march=<xxx> */\n const char *s390_backchain_string = \"\"; /* \"\" no-backchain ,\"1\" backchain,\n \t\t\t\t\t   \"2\" kernel-backchain */\n \n+const char *s390_warn_framesize_string;\n+const char *s390_warn_dynamicstack_string;\n+const char *s390_stack_size_string;\n+const char *s390_stack_guard_string;\n+\n+HOST_WIDE_INT s390_warn_framesize = 0;\n+bool s390_warn_dynamicstack_p = 0;\n+HOST_WIDE_INT s390_stack_size = 0;\n+HOST_WIDE_INT s390_stack_guard = 0;\n+\n /* The following structure is embedded in the machine \n    specific part of struct function.  */\n \n@@ -1147,6 +1157,44 @@ override_options (void)\n     error (\"z/Architecture mode not supported on %s.\", s390_arch_string);\n   if (TARGET_64BIT && !TARGET_ZARCH)\n     error (\"64-bit ABI not supported in ESA/390 mode.\");\n+\n+  if (s390_warn_framesize_string)\n+    {\n+      if (sscanf (s390_warn_framesize_string, HOST_WIDE_INT_PRINT_DEC,\n+\t\t  &s390_warn_framesize) != 1)\n+\terror (\"invalid value for -mwarn-framesize\");\n+    }\n+\n+  if (s390_warn_dynamicstack_string)\n+    s390_warn_dynamicstack_p = 1;\n+  \n+  if (s390_stack_size_string)\n+    {\n+      if (sscanf (s390_stack_size_string, HOST_WIDE_INT_PRINT_DEC, \n+\t\t  &s390_stack_size) != 1)\n+\terror (\"invalid value for -mstack-size\");\n+      \n+      if (exact_log2 (s390_stack_size) == -1)\n+\terror (\"stack size must be an exact power of 2\");\n+      \n+      if (s390_stack_guard_string)\n+\t{\n+\t  if (sscanf (s390_stack_guard_string, HOST_WIDE_INT_PRINT_DEC, \n+\t\t      &s390_stack_guard) != 1)\n+\t    error (\"invalid value for -mstack-guard\");\n+\t  \n+\t  if (s390_stack_guard >= s390_stack_size)\n+\t    error (\"stack size must be greater than the stack guard value\");\n+ \n+\t  if (exact_log2 (s390_stack_guard) == -1)\n+\t    error (\"stack guard value must be an exact power of 2\");\n+\t}\n+      else\n+\terror (\"-mstack-size implies use of -mstack-guard\");\n+    }\n+  \n+  if (s390_stack_guard_string && !s390_stack_size_string)\n+    error (\"-mstack-guard implies use of -mstack-size\"); \n }\n \n /* Map for smallest class containing reg regno.  */\n@@ -6269,6 +6317,33 @@ s390_emit_prologue (void)\n     {\n       rtx frame_off = GEN_INT (-cfun_frame_layout.frame_size);\n \n+      if (s390_stack_size)\n+  \t{\n+\t  HOST_WIDE_INT stack_check_mask = ((s390_stack_size - 1)\n+\t\t\t\t\t    & ~(s390_stack_guard - 1));\n+\t  rtx t = gen_rtx_AND (Pmode, stack_pointer_rtx,\n+\t\t\t       GEN_INT (stack_check_mask));\n+\n+\t  if (TARGET_64BIT)\n+\t    gen_cmpdi (t, const0_rtx);\n+\t  else\n+\t    gen_cmpsi (t, const0_rtx);\n+\n+\t  emit_insn (gen_conditional_trap (gen_rtx_EQ (CCmode, \n+\t\t\t\t\t\t       gen_rtx_REG (CCmode, \n+\t\t\t\t\t\t\t\t    CC_REGNUM),\n+\t\t\t\t\t\t       const0_rtx),\n+\t\t\t\t\t   const0_rtx));\n+  \t}\n+\n+      if (s390_warn_framesize > 0 \n+\t  && cfun_frame_layout.frame_size >= s390_warn_framesize)\n+\twarning (\"frame size of `%s' is \" HOST_WIDE_INT_PRINT_DEC \" bytes\", \n+\t\t current_function_name (), cfun_frame_layout.frame_size);\n+\n+      if (s390_warn_dynamicstack_p && cfun->calls_alloca)\n+\twarning (\"`%s' uses dynamic stack allocation\", current_function_name ());\n+\n       /* Save incoming stack pointer into temp reg.  */\n       if (cfun_frame_layout.save_backchain_p || next_fpr)\n \tinsn = emit_insn (gen_move_insn (temp_reg, stack_pointer_rtx));"}, {"sha": "7dec84f454fad85b0f9eafade51391fdf67589bc", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d75f90f1923454ae3dac50d69b90d907ac2607c6", "patch": "@@ -62,6 +62,11 @@ extern const char *s390_arch_string;\n \n extern const char *s390_backchain_string;\n \n+extern const char *s390_warn_framesize_string;\n+extern const char *s390_warn_dynamicstack_string;\n+extern const char *s390_stack_size_string;\n+extern const char *s390_stack_guard_string;\n+\n #define TARGET_CPU_IEEE_FLOAT \\\n \t(s390_arch_flags & PF_IEEE_FLOAT)\n #define TARGET_CPU_ZARCH \\\n@@ -142,17 +147,29 @@ extern int target_flags;\n   { \"fused-madd\",   -256, N_(\"enable fused multiply/add instructions\")}, \\\n   { \"\", TARGET_DEFAULT, 0 } }\n \n-#define TARGET_OPTIONS                                          \\\n-{ { \"tune=\",            &s390_tune_string,                      \\\n-    N_(\"Schedule code for given CPU\"), 0},                      \\\n-  { \"arch=\",            &s390_arch_string,                      \\\n-    N_(\"Generate code for given CPU\"), 0},                      \\\n-  { \"backchain\",        &s390_backchain_string,                 \\\n-    N_(\"Set backchain\"), \"1\"},                                  \\\n-  { \"no-backchain\",     &s390_backchain_string,                 \\\n-    N_(\"Do not set backchain\"), \"\"},                            \\\n-  { \"kernel-backchain\", &s390_backchain_string,                 \\\n-    N_(\"Set backchain appropriate for the linux kernel\"), \"2\"}, \\\n+#define TARGET_OPTIONS                                                         \\\n+{ { \"tune=\",            &s390_tune_string,                                     \\\n+    N_(\"Schedule code for given CPU\"), 0},                                     \\\n+  { \"arch=\",            &s390_arch_string,                                     \\\n+    N_(\"Generate code for given CPU\"), 0},                                     \\\n+  { \"backchain\",        &s390_backchain_string,                                \\\n+    N_(\"Set backchain\"), \"1\"},                                                 \\\n+  { \"no-backchain\",     &s390_backchain_string,                                \\\n+    N_(\"Do not set backchain\"), \"\"},                                           \\\n+  { \"kernel-backchain\", &s390_backchain_string,                                \\\n+    N_(\"Set backchain appropriate for the linux kernel\"), \"2\"},                \\\n+  { \"warn-framesize=\",   &s390_warn_framesize_string,                          \\\n+    N_(\"Warn if a single function's framesize exceeds the given framesize\"),   \\\n+       0},                                                                     \\\n+  { \"warn-dynamicstack\", &s390_warn_dynamicstack_string,                       \\\n+    N_(\"Warn if a function uses alloca or creates an array with dynamic size\"),\\\n+       0},                                                                     \\\n+  { \"stack-size=\",       &s390_stack_size_string,                              \\\n+    N_(\"Emit extra code in the function prologue in order to trap if the stack\"\\\n+       \"size exceeds the given limit\"), 0},                                    \\\n+  { \"stack-guard=\",      &s390_stack_guard_string,                             \\\n+    N_(\"Set the max. number of bytes which has to be left to stack size \"      \\\n+       \"before a trap instruction is triggered\"), 0},                          \\\n }\n \n /* Support for configure-time defaults.  */"}, {"sha": "eadf22a3591f147bb8d5efcaa94753f6403d0824", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75f90f1923454ae3dac50d69b90d907ac2607c6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d75f90f1923454ae3dac50d69b90d907ac2607c6", "patch": "@@ -620,7 +620,8 @@ See RS/6000 and PowerPC Options.\n -mhard-float  -msoft-float  -mbackchain  -mno-backchain -mkernel-backchain @gol\n -msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle @gol\n -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch @gol\n--mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd}\n+-mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd @gol\n+-mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard}\n \n @emph{SH Options}\n @gccoptlist{-m1  -m2  -m2e  -m3  -m3e @gol\n@@ -10593,6 +10594,34 @@ when compiling for the TPF OS.\n Generate code that uses (does not use) the floating point multiply and\n accumulate instructions.  These instructions are generated by default if\n hardware floating point is used.\n+\n+@item -mwarn-framesize=@var{framesize}\n+@opindex mwarn-framesize\n+Emit a warning if the current function exceeds the given frame size.  Because\n+this is a compile time check it doesn't need to be a real problem when the program\n+runs.  It is intended to identify functions which most probably cause \n+a stack overflow.  It is useful to be used in an environment with limited stack \n+size e.g. the linux kernel.\n+\n+@item -mwarn-dynamicstack\n+@opindex mwarn-dynamicstack\n+Emit a warning if the function calls alloca or uses dynamically\n+sized arrays.  This is generally a bad idea with a limited stack size.\n+\n+@item -mstack-guard=@var{stack-guard}\n+@item -mstack-size=@var{stack-size}\n+@opindex mstack-guard\n+@opindex mstack-size\n+These arguments always have to be used in conjunction.  If they are present the s390\n+back end emits additional instructions in the function prologue which trigger a trap\n+if the stack size is @var{stack-guard} bytes above the @var{stack-size} \n+(remember that the stack on s390 grows downward).  These options are intended to \n+be used to help debugging stack overflow problems.  The additionally emitted code \n+cause only little overhead and hence can also be used in production like systems \n+without greater performance degradation.  The given values have to be exact \n+powers of 2 and @var{stack-size} has to be greater than @var{stack-guard}.\n+In order to be efficient the extra code makes the assumption that the stack starts\n+at an address aligned to the value given by @var{stack-size}.\n @end table\n \n @node SH Options"}]}