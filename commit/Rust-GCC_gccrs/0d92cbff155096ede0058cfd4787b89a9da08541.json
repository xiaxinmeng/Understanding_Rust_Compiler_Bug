{"sha": "0d92cbff155096ede0058cfd4787b89a9da08541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5MmNiZmYxNTUwOTZlZGUwMDU4Y2ZkNDc4N2I4OWE5ZGEwODU0MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-06T20:01:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-06T20:01:45Z"}, "message": "entered into RCS\n\nFrom-SVN: r1469", "tree": {"sha": "47dcf02b5f7b706adf07112e284adf95069db90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47dcf02b5f7b706adf07112e284adf95069db90e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d92cbff155096ede0058cfd4787b89a9da08541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d92cbff155096ede0058cfd4787b89a9da08541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d92cbff155096ede0058cfd4787b89a9da08541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d92cbff155096ede0058cfd4787b89a9da08541/comments", "author": null, "committer": null, "parents": [{"sha": "1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "3f8eb6534d99d71591c61ba62d03bbfbe430a717", "filename": "gcc/dbxout.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d92cbff155096ede0058cfd4787b89a9da08541/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d92cbff155096ede0058cfd4787b89a9da08541/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=0d92cbff155096ede0058cfd4787b89a9da08541", "patch": "@@ -520,7 +520,7 @@ dbxout_continue ()\n #else\n   fprintf (asmfile, \"\\\\\\\\\");\n #endif\n-  dbxout_finish_symbol (0);\n+  dbxout_finish_symbol (NULL_TREE);\n   fprintf (asmfile, \"%s \\\"\", ASM_STABS_OP);\n   current_sym_nchars = 0;\n }\n@@ -1207,32 +1207,33 @@ static void\n print_int_cst_octal (c)\n      tree c;\n {\n-  unsigned int high = TREE_INT_CST_HIGH (c);\n-  unsigned int low = TREE_INT_CST_LOW (c);\n-  int excess = (3 - (HOST_BITS_PER_INT % 3));\n+  unsigned HOST_WIDE_INT high = TREE_INT_CST_HIGH (c);\n+  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (c);\n+  int excess = (3 - (HOST_BITS_PER_WIDE_INT % 3));\n \n   fprintf (asmfile, \"0\");\n \n   if (excess == 3)\n     {\n-      print_octal (high, HOST_BITS_PER_INT / 3);\n-      print_octal (low, HOST_BITS_PER_INT / 3);\n+      print_octal (high, HOST_BITS_PER_WIDE_INT / 3);\n+      print_octal (low, HOST_BITS_PER_WIDE_INT / 3);\n     }\n   else\n     {\n-      unsigned int beg = high >> excess;\n-      unsigned int middle\n-\t= ((high & ((1 << excess) - 1)) << (3 - excess)\n-\t   | (low >> (HOST_BITS_PER_INT / 3 * 3)));\n-      unsigned int end = low & ((1 << (HOST_BITS_PER_INT / 3 * 3)) - 1);\n+      unsigned HOST_WIDE_INT beg = high >> excess;\n+      unsigned HOST_WIDE_INT middle\n+\t= ((high & (((HOST_WIDE_INT) 1 << excess) - 1)) << (3 - excess)\n+\t   | (low >> (HOST_BITS_PER_WIDE_INT / 3 * 3)));\n+      unsigned HOST_WIDE_INT end\n+\t= low & (((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 3 * 3)) - 1);\n       fprintf (asmfile, \"%o%01o\", beg, middle);\n-      print_octal (end, HOST_BITS_PER_INT / 3);\n+      print_octal (end, HOST_BITS_PER_WIDE_INT / 3);\n     }\n }\n \n static void\n print_octal (value, digits)\n-     unsigned int value;\n+     unsigned HOST_WIDE_INT value;\n      int digits;\n {\n   int i;\n@@ -1396,7 +1397,7 @@ dbxout_symbol (decl, local)\n \t\tfprintf (asmfile, \"%s \\\"%s:T\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (name));\n \t\tdbxout_type (type, 1, 0);\n-\t\tdbxout_finish_symbol (0);\n+\t\tdbxout_finish_symbol (NULL_TREE);\n \t      }\n \n \t    /* Output typedef name.  */\n@@ -1446,7 +1447,7 @@ dbxout_symbol (decl, local)\n \t    fprintf (asmfile, \"%s \\\"%s:T\", ASM_STABS_OP,\n \t\t     IDENTIFIER_POINTER (name));\n \t    dbxout_type (type, 1, 0);\n-\t    dbxout_finish_symbol (0);\n+\t    dbxout_finish_symbol (NULL_TREE);\n \t  }\n \n \t/* Prevent duplicate output of a typedef.  */\n@@ -1484,7 +1485,7 @@ dbxout_symbol (decl, local)\n \t      if (TREE_CODE (TREE_TYPE (decl)) == INTEGER_TYPE\n \t\t  || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n \t\t{\n-\t\t  int ival = TREE_INT_CST_LOW (DECL_INITIAL (decl));\n+\t\t  HOST_WIDE_INT ival = TREE_INT_CST_LOW (DECL_INITIAL (decl));\n #ifdef DBX_OUTPUT_CONSTANT_SYMBOL\n \t\t  DBX_OUTPUT_CONSTANT_SYMBOL (asmfile, name, ival);\n #else\n@@ -1762,8 +1763,8 @@ dbxout_parms (parms)\n \t/* Perform any necessary register eliminations on the parameter's rtl,\n \t   so that the debugging output will be accurate.  */\n \tDECL_INCOMING_RTL (parms)\n-\t  = eliminate_regs (DECL_INCOMING_RTL (parms), 0, 0);\n-\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, 0);\n+\t  = eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX);\n+\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX);\n #ifdef LEAF_REG_REMAP\n \tif (leaf_function)\n \t  {\n@@ -2170,7 +2171,7 @@ dbxout_block (block, depth, args)\n #endif\n \n \t  /* Output the subblocks.  */\n-\t  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, 0);\n+\t  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, NULL_TREE);\n \n \t  /* Refer to the marker for the end of the block.  */\n \t  if (depth > 0 && debug_info_level != DINFO_LEVEL_TERSE)"}]}