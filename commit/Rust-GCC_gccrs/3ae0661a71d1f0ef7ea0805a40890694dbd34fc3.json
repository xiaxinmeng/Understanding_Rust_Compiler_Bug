{"sha": "3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlMDY2MWE3MWQxZjBlZjdlYTA4MDVhNDA4OTA2OTRkYmQzNGZjMw==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2016-03-01T11:17:44Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-03-01T11:17:44Z"}, "message": "re PR tree-optimization/69956 (Wrong vector type @ fold-const)\n\ngcc/\n\n\tPR tree-optimization/69956\n\t* tree-vect-stmts.c (supportable_widening_operation): Support\n\tmulti-step conversion of boolean vectors.\n\t(supportable_narrowing_operation): Likewise.\n\ngcc/testsuite/\n\n\tPR tree-optimization/69956\n\t* gcc.dg/pr69956.c: New test.\n\nFrom-SVN: r233850", "tree": {"sha": "3b2283229258f1c290258abe59a51b72a48d8a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b2283229258f1c290258abe59a51b72a48d8a7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/comments", "author": null, "committer": null, "parents": [{"sha": "c64181a8c8e342a82b1edddacca7688e39042d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64181a8c8e342a82b1edddacca7688e39042d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64181a8c8e342a82b1edddacca7688e39042d03"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "f6ee6dc3af914b87d6d7a76f8bfb5cbf01542035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "patch": "@@ -1,3 +1,10 @@\n+2016-03-01  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/69956\n+\t* tree-vect-stmts.c (supportable_widening_operation): Support\n+\tmulti-step conversion of boolean vectors.\n+\t(supportable_narrowing_operation): Likewise.\n+\n 2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_decompose_address): Don't accept SImode"}, {"sha": "c0eaa55926b0307438f06ee1ba0d580f1dc5ae00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "patch": "@@ -1,3 +1,8 @@\n+2016-03-01  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/69956\n+\t* gcc.dg/pr69956.c: New test.\n+\n 2016-02-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/70011"}, {"sha": "37d24d4a94bd1d3195bf5b0e6226a611ea0fbf00", "filename": "gcc/testsuite/gcc.dg/pr69956.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69956.c?ref=3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-additional-options \"-march=skylake-avx512\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+void\n+fn1 (char *b, char *d, int *c, int i)\n+{\n+  for (; i; i++, d++)\n+    if (b[i])\n+      *d = c[i];\n+}"}, {"sha": "182b277973ecfb7dbfafe8053e34a83a65cf71dd", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae0661a71d1f0ef7ea0805a40890694dbd34fc3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=3ae0661a71d1f0ef7ea0805a40890694dbd34fc3", "patch": "@@ -9000,9 +9000,19 @@ supportable_widening_operation (enum tree_code code, gimple *stmt,\n   for (i = 0; i < MAX_INTERM_CVT_STEPS; i++)\n     {\n       intermediate_mode = insn_data[icode1].operand[0].mode;\n-      intermediate_type\n-\t= lang_hooks.types.type_for_mode (intermediate_mode,\n-\t\t\t\t\t  TYPE_UNSIGNED (prev_type));\n+      if (VECTOR_BOOLEAN_TYPE_P (prev_type))\n+\t{\n+\t  intermediate_type\n+\t    = build_truth_vector_type (TYPE_VECTOR_SUBPARTS (prev_type) / 2,\n+\t\t\t\t       current_vector_size);\n+\t  if (intermediate_mode != TYPE_MODE (intermediate_type))\n+\t    return false;\n+\t}\n+      else\n+\tintermediate_type\n+\t  = lang_hooks.types.type_for_mode (intermediate_mode,\n+\t\t\t\t\t    TYPE_UNSIGNED (prev_type));\n+\n       optab3 = optab_for_tree_code (c1, intermediate_type, optab_default);\n       optab4 = optab_for_tree_code (c2, intermediate_type, optab_default);\n \n@@ -9065,7 +9075,7 @@ supportable_narrowing_operation (enum tree_code code,\n   tree vectype = vectype_in;\n   tree narrow_vectype = vectype_out;\n   enum tree_code c1;\n-  tree intermediate_type;\n+  tree intermediate_type, prev_type;\n   machine_mode intermediate_mode, prev_mode;\n   int i;\n   bool uns;\n@@ -9111,6 +9121,7 @@ supportable_narrowing_operation (enum tree_code code,\n   /* Check if it's a multi-step conversion that can be done using intermediate\n      types.  */\n   prev_mode = vec_mode;\n+  prev_type = vectype;\n   if (code == FIX_TRUNC_EXPR)\n     uns = TYPE_UNSIGNED (vectype_out);\n   else\n@@ -9145,8 +9156,17 @@ supportable_narrowing_operation (enum tree_code code,\n   for (i = 0; i < MAX_INTERM_CVT_STEPS; i++)\n     {\n       intermediate_mode = insn_data[icode1].operand[0].mode;\n-      intermediate_type\n-\t= lang_hooks.types.type_for_mode (intermediate_mode, uns);\n+      if (VECTOR_BOOLEAN_TYPE_P (prev_type))\n+\t{\n+\t  intermediate_type\n+\t    = build_truth_vector_type (TYPE_VECTOR_SUBPARTS (prev_type) * 2,\n+\t\t\t\t       current_vector_size);\n+\t  if (intermediate_mode != TYPE_MODE (intermediate_type))\n+\t      return false;\n+\t}\n+      else\n+\tintermediate_type\n+\t  = lang_hooks.types.type_for_mode (intermediate_mode, uns);\n       interm_optab\n \t= optab_for_tree_code (VEC_PACK_TRUNC_EXPR, intermediate_type,\n \t\t\t       optab_default);\n@@ -9164,6 +9184,7 @@ supportable_narrowing_operation (enum tree_code code,\n \treturn true;\n \n       prev_mode = intermediate_mode;\n+      prev_type = intermediate_type;\n       optab1 = interm_optab;\n     }\n "}]}