{"sha": "4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzNDBiNWRmYTczNjEwMmYxZmM1MGYzYTRmMmJhNjg1NzA4YzdmZg==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2012-07-30T13:40:25Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-07-30T13:40:25Z"}, "message": "i386-common.c (OPTION_MASK_ISA_RDSEED_SET): New.\n\n/\n        * common/config/i386/i386-common.c (OPTION_MASK_ISA_RDSEED_SET): New.\n        (OPTION_MASK_ISA_RDSEED_UNSET): Likewise.\n        (ix86_handle_option): Handle mrdseed option.\n        * config.gcc (i[34567]86-*-*): Add rdseedintrin.h.\n        (x86_64-*-*): Likewise.\n        * config/i386/prfchwintrin.h: New header.\n        * config/i386/cpuid.h (bit_RDSEED): New.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect\n        RDSEED support.\n        * config/i386/i386-c.c: Define __RDSEED__ if needed.\n        * config/i386/i386.c (ix86_target_string): Define\n        -mrdseed option.\n        (PTA_RDSEED): New.\n        (ix86_option_override_internal): Handle new option.\n        (ix86_valid_target_attribute_inner_p): Add OPT_mrdseed.\n        (ix86_builtins): Add enum entries for RDSEED* builtins.\n        (ix86_init_mmx_sse_builtins): Define new builtins.\n        (ix86_expand_builtin): Expand RDSEED* builtins.\n        * config/i386/i386.h (TARGET_RDSEED): New.\n        * config/i386/i386.md (rdseed<mode>_1): New.\n        * config/i386/i386.opt (mrdseed): New.\n        * config/i386/x86intrin.h: Include rdseedintrin.h.\n\ntestsuite/\n        * gcc.target/i386/rdseed16-1.c: New.\n        * gcc.target/i386/rdseed32-1.c: Ditto\n        * gcc.target/i386/rdseed64-1.c: Ditto\n        * gcc.target/i386/sse-12.c: Add -mrdseed.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * g++.dg/other/i386-2.C: Ditto.\n        * g++.dg/other/i386-3.C: Ditto.\n\n\n\n\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r189973", "tree": {"sha": "04e7ea9f770791813a992b8c189720b259018848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e7ea9f770791813a992b8c189720b259018848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/comments", "author": null, "committer": null, "parents": [{"sha": "39c58b3afac8967ed1ff8022a6fc25e2585b6966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c58b3afac8967ed1ff8022a6fc25e2585b6966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c58b3afac8967ed1ff8022a6fc25e2585b6966"}], "stats": {"total": 260, "additions": 248, "deletions": 12}, "files": [{"sha": "f73410d12d5a4eac42b92d5443daade5b62372bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -1,3 +1,29 @@\n+2012-07-30  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_RDSEED_SET): New.\n+\t(OPTION_MASK_ISA_RDSEED_UNSET): Likewise.\n+\t(ix86_handle_option): Handle mrdseed option.\n+\t* config.gcc (i[34567]86-*-*): Add rdseedintrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/prfchwintrin.h: New header.\n+\t* config/i386/cpuid.h (bit_RDSEED): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tRDSEED support.\n+\t* config/i386/i386-c.c: Define __RDSEED__ if needed.\n+\t* config/i386/i386.c (ix86_target_string): Define\n+\t-mrdseed option.\n+\t(PTA_RDSEED): New.\n+\t(ix86_option_override_internal): Handle new option.\n+\t(ix86_valid_target_attribute_inner_p): Add OPT_mrdseed.\n+\t(ix86_builtins): Add enum entries for RDSEED* builtins.\n+\t(ix86_init_mmx_sse_builtins): Define new builtins.\n+\t(ix86_expand_builtin): Expand RDSEED* builtins.\n+\t* config/i386/i386.h (TARGET_RDSEED): New.\n+\t* config/i386/i386.md (rdseed<mode>_1): New.\n+\t* config/i386/i386.opt (mrdseed): New.\n+\t* config/i386/x86intrin.h: Include rdseedintrin.h.\n+\n 2012-07-30  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-into-ssa.c (mark_def_sites): Also process virtual operands."}, {"sha": "70dcae07a33edbcbd3005a866dcf10c409bfb89e", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n+#define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -125,6 +126,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX2_UNSET OPTION_MASK_ISA_AVX2\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n+#define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -570,6 +572,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mrdseed:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RDSEED_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDSEED_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_RDSEED_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDSEED_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mprfchw:\n       if (value)\n \t{"}, {"sha": "dad4c3aa8ed58dc7ea9690747907b702e0468d7c", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -361,7 +361,7 @@ i[34567]86-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h prfchwintrin.h\"\n+\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -375,7 +375,7 @@ x86_64-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h prfchwintrin.h\"\n+\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "46161087e906dbd3b99e054191b9fb8b29e5f9d9", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -399,7 +399,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n   unsigned int has_hle = 0, has_rtm = 0;\n   unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n-  unsigned int has_prfchw = 0;\n+  unsigned int has_rdseed = 0, has_prfchw = 0;\n \n   bool arch;\n \n@@ -466,6 +466,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx2 = ebx & bit_AVX2;\n       has_bmi2 = ebx & bit_BMI2;\n       has_fsgsbase = ebx & bit_FSGSBASE;\n+      has_rdseed = ebx & bit_RDSEED;\n       has_prfchw = ecx & bit_PRFCHW;\n     }\n \n@@ -747,12 +748,13 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *rdrnd = has_rdrnd ? \" -mrdrnd\" : \" -mno-rdrnd\";\n       const char *f16c = has_f16c ? \" -mf16c\" : \" -mno-f16c\";\n       const char *fsgsbase = has_fsgsbase ? \" -mfsgsbase\" : \" -mno-fsgsbase\";\n+      const char *rdseed = has_rdseed ? \" -mrdseed\" : \" -mno-rdseed\";\n       const char *prfchw = has_prfchw ? \" -mprfchw\" : \" -mno-prfchw\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n-\t\t\thle, rdrnd, f16c, fsgsbase, prfchw, NULL);\n+\t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, NULL);\n     }\n \n done:"}, {"sha": "a4c947ace26cdc3f862754fdb41ca99b9edb48fb", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -296,6 +296,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__RDRND__\");\n   if (isa_flag & OPTION_MASK_ISA_F16C)\n     def_or_undef (parse_in, \"__F16C__\");\n+  if (isa_flag & OPTION_MASK_ISA_RDSEED)\n+    def_or_undef (parse_in, \"__RDSEED__\");\n   if (isa_flag & OPTION_MASK_ISA_PRFCHW)\n     def_or_undef (parse_in, \"__PRFCHW__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))"}, {"sha": "f7a927edaf11755881924fc6cc19aa31bfced84a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -2767,6 +2767,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mbmi2\",\tOPTION_MASK_ISA_BMI2 },\n     { \"-mlzcnt\",\tOPTION_MASK_ISA_LZCNT },\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n+    { \"-mrdseed\",\tOPTION_MASK_ISA_RDSEED },\n     { \"-mprfchw\",\tOPTION_MASK_ISA_PRFCHW },\n     { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n@@ -3045,6 +3046,7 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_RTM\t\t \t(HOST_WIDE_INT_1 << 32)\n #define PTA_HLE\t\t\t(HOST_WIDE_INT_1 << 33)\n #define PTA_PRFCHW\t\t(HOST_WIDE_INT_1 << 34)\n+#define PTA_RDSEED\t\t(HOST_WIDE_INT_1 << 35)\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -3533,6 +3535,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_PRFCHW\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_PRFCHW))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_PRFCHW;\n+\tif (processor_alias_table[i].flags & PTA_RDSEED\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_RDSEED))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_RDSEED;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4355,6 +4360,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"rtm\",\tOPT_mrtm),\n     IX86_ATTR_ISA (\"hle\",\tOPT_mhle),\n     IX86_ATTR_ISA (\"prfchw\",\tOPT_mprfchw),\n+    IX86_ATTR_ISA (\"rdseed\",\tOPT_mrdseed),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -26110,6 +26116,11 @@ enum ix86_builtins\n   IX86_BUILTIN_RDRAND32_STEP,\n   IX86_BUILTIN_RDRAND64_STEP,\n \n+  /* RDSEED instructions.  */\n+  IX86_BUILTIN_RDSEED16_STEP,\n+  IX86_BUILTIN_RDSEED32_STEP,\n+  IX86_BUILTIN_RDSEED64_STEP,\n+\n   /* F16C instructions.  */\n   IX86_BUILTIN_CVTPH2PS,\n   IX86_BUILTIN_CVTPH2PS256,\n@@ -27931,6 +27942,15 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin_const (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_vec_set_v16qi\",\n \t\t     V16QI_FTYPE_V16QI_QI_INT, IX86_BUILTIN_VEC_SET_V16QI);\n \n+  /* RDSEED */\n+  def_builtin (OPTION_MASK_ISA_RDSEED, \"__builtin_ia32_rdseed_hi_step\",\n+\t       INT_FTYPE_PUSHORT, IX86_BUILTIN_RDSEED16_STEP);\n+  def_builtin (OPTION_MASK_ISA_RDSEED, \"__builtin_ia32_rdseed_si_step\",\n+\t       INT_FTYPE_PUNSIGNED, IX86_BUILTIN_RDSEED32_STEP);\n+  def_builtin (OPTION_MASK_ISA_RDSEED && OPTION_MASK_ISA_64BIT,\n+\t       \"__builtin_ia32_rdseed_di_step\",\n+\t       INT_FTYPE_PULONGLONG, IX86_BUILTIN_RDSEED64_STEP);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -30255,6 +30275,46 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t\t      gen_rtx_IF_THEN_ELSE (SImode, pat, op2, op1)));\n       return target;\n \n+    case IX86_BUILTIN_RDSEED16_STEP:\n+      icode = CODE_FOR_rdseedhi_1;\n+      mode0 = HImode;\n+      goto rdseed_step;\n+\n+    case IX86_BUILTIN_RDSEED32_STEP:\n+      icode = CODE_FOR_rdseedsi_1;\n+      mode0 = SImode;\n+      goto rdseed_step;\n+\n+    case IX86_BUILTIN_RDSEED64_STEP:\n+      icode = CODE_FOR_rdseeddi_1;\n+      mode0 = DImode;\n+\n+rdseed_step:\n+      op0 = gen_reg_rtx (mode0);\n+      emit_insn (GEN_FCN (icode) (op0));\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op1 = expand_normal (arg0);\n+      if (!address_operand (op1, VOIDmode))\n+\t{\n+\t  op1 = convert_memory_address (Pmode, op1);\n+\t  op1 = copy_addr_to_reg (op1);\n+\t}\n+      emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n+\n+      op2 = gen_reg_rtx (QImode);\n+\n+      pat = gen_rtx_LTU (QImode, gen_rtx_REG (CCCmode, FLAGS_REG),\n+                         const0_rtx);\n+      emit_insn (gen_rtx_SET (VOIDmode, op2, pat));\n+\n+      if (target == 0)\n+        target = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_zero_extendqisi2 (target, op2));\n+\n+      return target;\n+\n     case IX86_BUILTIN_GATHERSIV2DF:\n       icode = CODE_FOR_avx2_gathersiv2df;\n       goto gather_gen;"}, {"sha": "a6ce0ceb31233985848968943e90e1466f65d0e4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -76,6 +76,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_F16C\tOPTION_ISA_F16C\n #define TARGET_RTM      OPTION_ISA_RTM\n #define TARGET_HLE\tOPTION_ISA_HLE\n+#define TARGET_RDSEED\tOPTION_ISA_RDSEED\n #define TARGET_PRFCHW\tOPTION_ISA_PRFCHW\n \n #define TARGET_LP64\tOPTION_ABI_64"}, {"sha": "ace3b6e250db3284ef03664ac566122c859eb38a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -206,6 +206,9 @@\n   ;; For RDRAND support\n   UNSPECV_RDRAND\n \n+  ;; For RDSEED support\n+  UNSPECV_RDSEED\n+\n   ;; For RTM support\n   UNSPECV_XBEGIN\n   UNSPECV_XEND\n@@ -18137,6 +18140,16 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"prefix_extra\" \"1\")])\n \n+(define_insn \"rdseed<mode>_1\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDSEED))\n+   (set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(const_int 0)] UNSPECV_RDSEED))]\n+  \"TARGET_RDSEED\"\n+  \"rdseed\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"1\")])\n+\n (define_expand \"pause\"\n   [(set (match_dup 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_PAUSE))]"}, {"sha": "ccada37e543d767327d84bfda17bd5c41bc36a21", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -532,6 +532,10 @@ mhle\n Target Report Mask(ISA_HLE) Var(ix86_isa_flags) Save\n Support Hardware Lock Elision prefixes\n \n+mrdseed\n+Target Report Mask(ISA_RDSEED) Var(ix86_isa_flags) Save\n+Support RDSEED instruction\n+\n mprfchw\n Target Report Mask(ISA_PRFCHW) Var(ix86_isa_flags) Save\n Support PREFETCHW instruction"}, {"sha": "afd6ce8a50eebbc7b8f0db7dd2131cc0e7e36a83", "filename": "gcc/config/i386/rdseedintrin.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frdseedintrin.h?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -0,0 +1,58 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <rdseedintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef __RDSEED__\n+# error \"RDSEED instruction not enabled\"\n+#endif /* __RDSEED__ */\n+\n+#ifndef _RDSEEDINTRIN_H_INCLUDED\n+#define _RDSEEDINTRIN_H_INCLUDED\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdseed16_step (unsigned short *p)\n+{\n+    return __builtin_ia32_rdseed_hi_step (p);\n+}\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdseed32_step (unsigned int *p)\n+{\n+    return __builtin_ia32_rdseed_si_step (p);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdseed64_step (unsigned long long *p)\n+{\n+    return __builtin_ia32_rdseed_di_step (p);\n+}\n+#endif\n+\n+#endif /* _RDSEEDINTRIN_H_INCLUDED */"}, {"sha": "9dee9ef64ec0acb346a713a14cd7679dc9b8c411", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -97,6 +97,10 @@\n #include <popcntintrin.h>\n #endif\n \n+#ifdef __RDSEED__\n+#include <rdseedintrin.h>\n+#endif\n+\n #ifdef __PRFCHW__\n #include <prfchwintrin.h>\n #endif"}, {"sha": "f593cf066d7e41c476ec2c7fbc4e0ba2cfcc3839", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -1,3 +1,15 @@\n+2012-07-30  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/rdseed16-1.c: New.\n+\t* gcc.target/i386/rdseed32-1.c: Ditto\n+\t* gcc.target/i386/rdseed64-1.c: Ditto\n+\t* gcc.target/i386/sse-12.c: Add -mrdseed.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244"}, {"sha": "47fda70bc90345951403266ad6882102a7dbfcd6", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "ad477fa7ec35fc67a9100e49ac3671da780c3581", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "fe637f1ac571cba79a495dfca5ae2d7ddb1a7a48", "filename": "gcc/testsuite/gcc.target/i386/rdseed16-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed16-1.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mrdseed -O2\" } */\n+/* { dg-final { scan-assembler \"rdseed\\[ \\\\t\\]+\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+rdseed_test (unsigned short *p)\n+{\n+    volatile int r;\n+    r = _rdseed16_step (p);\n+}\n+"}, {"sha": "646dff26daff50e4d58b7e9820927373fe7e3fea", "filename": "gcc/testsuite/gcc.target/i386/rdseed32-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed32-1.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mrdseed -O2\" } */\n+/* { dg-final { scan-assembler \"rdseed\\[ \\\\t\\]+\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+rdseed_test (unsigned int *p)\n+{\n+    volatile int r;\n+    r = _rdseed32_step (p);\n+}\n+"}, {"sha": "bdacd7ad64b248ab9e1fccedc10d9ad311688b1b", "filename": "gcc/testsuite/gcc.target/i386/rdseed64-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdseed64-1.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mrdseed -O2\" } */\n+/* { dg-final { scan-assembler \"rdseed\\[ \\\\t\\]+\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+rdseed_test (unsigned long long *p)\n+{\n+    volatile int r;\n+    r = _rdseed64_step (p);\n+}\n+"}, {"sha": "cb3ab18d5eb7de43eb9a6b690bad43c30047f98f", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "fe2bf46042fcc2c21da17c2a767670299962c101", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "8877e312d753d212a19fbdc53a5c7958234a886d", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "ec5ccb894591ced9057963193be6903d9f55ced1", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -50,7 +50,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,prfchw\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -264,7 +264,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,prfchw\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "3b26d99b0198931a6fdcf08ddd795fdfda428fee", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c340b5dfa736102f1fc50f3a4f2ba685708c7ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=4c340b5dfa736102f1fc50f3a4f2ba685708c7ff", "patch": "@@ -183,7 +183,7 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,prfchw\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}