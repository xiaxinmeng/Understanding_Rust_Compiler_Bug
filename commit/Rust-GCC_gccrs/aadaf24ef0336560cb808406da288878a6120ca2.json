{"sha": "aadaf24ef0336560cb808406da288878a6120ca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkYWYyNGVmMDMzNjU2MGNiODA4NDA2ZGEyODg4NzhhNjEyMGNhMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-06-04T08:56:32Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-06-04T08:56:32Z"}, "message": "rtl.def: Add extra fourth optional field to define_cond_exec.\n\n2013-06-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* rtl.def: Add extra fourth optional field to define_cond_exec.\n\t* gensupport.c (process_one_cond_exec): Process attributes from\n\tdefine_cond_exec.\n\t* doc/md.texi: Document fourth field in define_cond_exec.\n\nFrom-SVN: r199640", "tree": {"sha": "4f8825d4fa1be11ed9e79f9aea1c1495ed811e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8825d4fa1be11ed9e79f9aea1c1495ed811e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aadaf24ef0336560cb808406da288878a6120ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadaf24ef0336560cb808406da288878a6120ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aadaf24ef0336560cb808406da288878a6120ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadaf24ef0336560cb808406da288878a6120ca2/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cd9e9eeeadf90b732ed7bbad30739d1b0d9128b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd9e9eeeadf90b732ed7bbad30739d1b0d9128b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd9e9eeeadf90b732ed7bbad30739d1b0d9128b"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "f845fbdd365b707eb0bcd87ded9a48043c2fae2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aadaf24ef0336560cb808406da288878a6120ca2", "patch": "@@ -1,3 +1,10 @@\n+2013-06-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* rtl.def: Add extra fourth optional field to define_cond_exec.\n+\t* gensupport.c (process_one_cond_exec): Process attributes from\n+\tdefine_cond_exec.\n+\t* doc/md.texi: Document fourth field in define_cond_exec.\n+\n 2013-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expmed.c (extract_bit_field_1): In the larger-than-a-word case, factor"}, {"sha": "3b20991af5294df10a3508abc953565fb037bd09", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=aadaf24ef0336560cb808406da288878a6120ca2", "patch": "@@ -8866,7 +8866,8 @@ can be quite tedious to describe these forms directly in the\n (define_cond_exec\n   [@var{predicate-pattern}]\n   \"@var{condition}\"\n-  \"@var{output-template}\")\n+  \"@var{output-template}\"\n+  \"@var{optional-insn-attribues}\")\n @end smallexample\n \n @var{predicate-pattern} is the condition that must be true for the\n@@ -8887,6 +8888,13 @@ In order to handle the general case, there is a global variable\n @code{current_insn_predicate} that will contain the entire predicate\n if the current insn is predicated, and will otherwise be @code{NULL}.\n \n+@var{optional-insn-attributes} is an optional vector of attributes that gets\n+appended to the insn attributes of the produced cond_exec rtx. It can\n+be used to add some distinguishing attribute to cond_exec rtxs produced\n+that way. An example usage would be to use this attribute in conjunction\n+with attributes on the main pattern to disable particular alternatives under\n+certain conditions.\n+\n When @code{define_cond_exec} is used, an implicit reference to\n the @code{predicable} instruction attribute is made.\n @xref{Insn Attributes}.  This attribute must be a boolean (i.e.@: have"}, {"sha": "19b92408dc4bcc6d86ace6006b6f52dc6e24c17f", "filename": "gcc/gensupport.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=aadaf24ef0336560cb808406da288878a6120ca2", "patch": "@@ -1717,6 +1717,21 @@ process_one_cond_exec (struct queue_elem *ce_elem)\n \t  XVECEXP (insn, 1, 0) = pattern;\n \t}\n \n+       if (XVEC (ce_elem->data, 3) != NULL)\n+\t{\n+\t  rtvec attributes = rtvec_alloc (XVECLEN (insn, 4)\n+\t                                  + XVECLEN (ce_elem->data, 3));\n+\t  int i = 0;\n+\t  int j = 0;\n+\t  for (i = 0; i < XVECLEN (insn, 4); i++)\n+\t    RTVEC_ELT (attributes, i) = XVECEXP (insn, 4, i);\n+\n+\t  for (j = 0; j < XVECLEN (ce_elem->data, 3); j++, i++)\n+\t    RTVEC_ELT (attributes, i) = XVECEXP (ce_elem->data, 3, j);\n+\n+\t  XVEC (insn, 4) = attributes;\n+\t}\n+\n       XSTR (insn, 2) = alter_test_for_insn (ce_elem, insn_elem);\n       XTMPL (insn, 3) = alter_output_for_insn (ce_elem, insn_elem,\n \t\t\t\t\t      alternatives, max_operand);"}, {"sha": "b4ce1b99f3f2bb64e5c89173029cdbbade0ac1f9", "filename": "gcc/rtl.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadaf24ef0336560cb808406da288878a6120ca2/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=aadaf24ef0336560cb808406da288878a6120ca2", "patch": "@@ -962,8 +962,9 @@ DEF_RTL_EXPR(DEFINE_ASM_ATTRIBUTES, \"define_asm_attributes\", \"V\", RTX_EXTRA)\n       relational operator.  Operands should have only one alternative.\n    1: A C expression giving an additional condition for recognizing\n       the generated pattern.\n-   2: A template or C code to produce assembler output.  */\n-DEF_RTL_EXPR(DEFINE_COND_EXEC, \"define_cond_exec\", \"Ess\", RTX_EXTRA)\n+   2: A template or C code to produce assembler output.\n+   3: A vector of attributes to append to the resulting cond_exec insn.  */\n+DEF_RTL_EXPR(DEFINE_COND_EXEC, \"define_cond_exec\", \"EssV\", RTX_EXTRA)\n \n /* Definition of an operand predicate.  The difference between\n    DEFINE_PREDICATE and DEFINE_SPECIAL_PREDICATE is that genrecog will"}]}