{"sha": "24a7980d0f48671ea13da18c9162a43420b5af58", "node_id": "C_kwDOANBUbNoAKDI0YTc5ODBkMGY0ODY3MWVhMTNkYTE4YzkxNjJhNDM0MjBiNWFmNTg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-23T09:50:18Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-23T09:50:18Z"}, "message": "PR target/106933: Limit TImode STV to SSA-like def-use chains on x86.\n\nWith many thanks to H.J. for doing all the hard work, this patch resolves\ntwo P1 regressions; PR target/106933 and PR target/106959.\n\nAlthough superficially similar, the i386 backend's two scalar-to-vector\n(STV) passes perform their transformations in importantly different ways.\nThe original pass converting SImode and DImode operations to V4SImode\nor V2DImode operations is \"soft\", allowing values to be maintained in\nboth integer and vector hard registers.  The newer pass converting TImode\noperations to V1TImode is \"hard\" (all or nothing) that converts all uses\nof a pseudo to vector form.  To implement this it invokes powerful ju-ju\ncalling SET_MODE on a reg_rtx, which due to RTL sharing, often updates\nthis pseudo's mode everywhere in the RTL chain.  Hence, TImode STV can only\nbe performed when all uses of a pseudo are convertible to V1TImode form.\nTo ensure this the STV passes currently use data-flow analysis to inspect\nall DEFs and USEs in a chain.  This works fine for chains that are in\nthe usual single assignment form, but the occurrence of uninitialized\nvariables, or multiple assignments that split a pseudo's usage into\nseveral independent chains (lifetimes) can lead to situations where\nsome but not all of a pseudo's occurrences need to be updated.  This is\nsafe for the SImode/DImode pass, but leads to the above bugs during\nthe TImode pass.\n\nMy one minor tweak to HJ's patch from comment #4 of bugzilla PR106959\nis to only perform the new single_def_chain_p check for TImode STV; it\nturns out that STV of SImode/DImode min/max operates safely on multiple-def\nchains, and prohibiting this leads to testsuite regressions.  We don't\n(yet) support V1TImode min/max, so this idiom isn't an issue during the\nTImode STV pass.\n\nFor the record, the two alternate possible fixes are (i) make the TImode\nSTV pass \"soft\", by eliminating use of SET_MODE, instead using replace_rtx\nwith a new pseudo, or (ii) merging \"chains\" so that multiple DFA\nchains/lifetimes are considered a single STV chain.\n\n2022-12-23  H.J. Lu  <hjl.tools@gmail.com>\n\t    Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/106933\n\tPR target/106959\n\t* config/i386/i386-features.cc (single_def_chain_p): New predicate\n\tfunction to check that a pseudo's use-def chain is in SSA form.\n\t(timode_scalar_to_vector_candidate_p): Check that TImode regs that\n\tare SET_DEST or SET_SRC of an insn match/are single_def_chain_p.\n\ngcc/testsuite/ChangeLog\n\tPR target/106933\n\tPR target/106959\n\t* gcc.target/i386/pr106933-1.c: New test case.\n\t* gcc.target/i386/pr106933-2.c: Likewise.\n\t* gcc.target/i386/pr106959-1.c: Likewise.\n\t* gcc.target/i386/pr106959-2.c: Likewise.\n\t* gcc.target/i386/pr106959-3.c: Likewise.", "tree": {"sha": "301b69fbe565f835281b37733ef4f10279151426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/301b69fbe565f835281b37733ef4f10279151426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a7980d0f48671ea13da18c9162a43420b5af58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a7980d0f48671ea13da18c9162a43420b5af58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a7980d0f48671ea13da18c9162a43420b5af58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a7980d0f48671ea13da18c9162a43420b5af58/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3c5831f80e674b9ee77c1e9ca8364a72ca5758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3c5831f80e674b9ee77c1e9ca8364a72ca5758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3c5831f80e674b9ee77c1e9ca8364a72ca5758"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "4bf8bb3580480b103dd3295d0a88efcbf7c923eb", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=24a7980d0f48671ea13da18c9162a43420b5af58", "patch": "@@ -1756,6 +1756,19 @@ pseudo_reg_set (rtx_insn *insn)\n   return set;\n }\n \n+/* Return true if the register REG is defined in a single DEF chain.\n+   If it is defined in more than one DEF chains, we may not be able\n+   to convert it in all chains.  */\n+\n+static bool\n+single_def_chain_p (rtx reg)\n+{\n+  df_ref ref = DF_REG_DEF_CHAIN (REGNO (reg));\n+  if (!ref)\n+    return false;\n+  return DF_REF_NEXT_REG (ref) == nullptr;\n+}\n+\n /* Check if comparison INSN may be transformed into vector comparison.\n    Currently we transform equality/inequality checks which look like:\n    (set (reg:CCZ 17 flags) (compare:CCZ (reg:TI x) (reg:TI y)))  */\n@@ -1972,9 +1985,14 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n       && !TARGET_SSE_UNALIGNED_STORE_OPTIMAL)\n     return false;\n \n+  if (REG_P (dst) && !single_def_chain_p (dst))\n+    return false;\n+\n   switch (GET_CODE (src))\n     {\n     case REG:\n+      return single_def_chain_p (src);\n+\n     case CONST_WIDE_INT:\n       return true;\n "}, {"sha": "bcd9576633a7f4bf217d79520627b96a53e684d8", "filename": "gcc/testsuite/gcc.target/i386/pr106933-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106933-1.c?ref=24a7980d0f48671ea13da18c9162a43420b5af58", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+short int\n+bar (void);\n+\n+__int128\n+empty (void)\n+{\n+}\n+\n+__attribute__ ((simd)) int\n+foo (__int128 *p)\n+{\n+  int a = 0x80000000;\n+\n+  *p = empty ();\n+\n+  return *p == (a < bar ());\n+}\n+"}, {"sha": "ac7d07e5acfe50042c878171189ef369b5ec85ce", "filename": "gcc/testsuite/gcc.target/i386/pr106933-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106933-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106933-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106933-2.c?ref=24a7980d0f48671ea13da18c9162a43420b5af58", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-msse4 -Os\" } */\n+\n+__int128 n;\n+\n+__int128\n+empty (void)\n+{\n+}\n+\n+int\n+foo (void)\n+{\n+  n = empty ();\n+\n+  return n == 0;\n+}"}, {"sha": "4bac2a7d0a99903f62d15361dc4a2f10e45d7d52", "filename": "gcc/testsuite/gcc.target/i386/pr106959-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-1.c?ref=24a7980d0f48671ea13da18c9162a43420b5af58", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-msse4 -O2 -fno-tree-loop-im --param max-combine-insns=2 -Wno-shift-count-overflow\" } */\n+\n+unsigned __int128 n;\n+\n+int\n+foo (int x)\n+{\n+  __int128 a = 0;\n+  int b = !!(n * 2);\n+\n+  while (x < 2)\n+    {\n+      if (a)\n+        {\n+          if (n)\n+            n ^= 1;\n+          else\n+            x <<= 32;\n+        }\n+\n+      a = 1;\n+    }\n+\n+  return b;\n+}"}, {"sha": "29f0c475755be2a0bb8b8356694edd8e81e0647e", "filename": "gcc/testsuite/gcc.target/i386/pr106959-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-2.c?ref=24a7980d0f48671ea13da18c9162a43420b5af58", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-msse4 -O2 -fno-tree-loop-im -Wno-shift-count-overflow\" } */\n+\n+unsigned __int128 n;\n+\n+int\n+foo (int x)\n+{\n+  __int128 a = 0;\n+  int b = !!(n * 2);\n+\n+  while (x < 2)\n+    {\n+      if (a)\n+        {\n+          if (n)\n+            n ^= 1;\n+          else\n+            x <<= 32;\n+        }\n+\n+      a = 1;\n+    }\n+\n+  return b;\n+}"}, {"sha": "0f58f13cfa6573d7ed74601f25a82a34a97dbb96", "filename": "gcc/testsuite/gcc.target/i386/pr106959-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7980d0f48671ea13da18c9162a43420b5af58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106959-3.c?ref=24a7980d0f48671ea13da18c9162a43420b5af58", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fpeel-loops\" } */\n+\n+unsigned __int128 m;\n+int n;\n+\n+__attribute__ ((simd)) void\n+foo (int x)\n+{\n+  x = n ? n : (short int) x;\n+  if (x)\n+    m /= 2;\n+}\n+"}]}