{"sha": "301a5c0b57e24135dd231d36de93f2b8121ec987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxYTVjMGI1N2UyNDEzNWRkMjMxZDM2ZGU5M2YyYjgxMjFlYzk4Nw==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1992-09-02T20:10:54Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1992-09-02T20:10:54Z"}, "message": "(default_compilers, \".C\" and \".ii\"): Pass `+e*' into cc1plus.\n\n(process_command): Allow +e[012] to be passed down into cc1plus.\n\nFrom-SVN: r2036", "tree": {"sha": "a90b1756d1b434b024ba5dd23b7255b384de035b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a90b1756d1b434b024ba5dd23b7255b384de035b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/301a5c0b57e24135dd231d36de93f2b8121ec987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301a5c0b57e24135dd231d36de93f2b8121ec987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301a5c0b57e24135dd231d36de93f2b8121ec987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301a5c0b57e24135dd231d36de93f2b8121ec987/comments", "author": null, "committer": null, "parents": [{"sha": "82b5625880d00412ff280b4b1ad6a390dc5dedd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b5625880d00412ff280b4b1ad6a390dc5dedd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b5625880d00412ff280b4b1ad6a390dc5dedd7"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "e353efa28d3857d5c6d1366c8881cc1d6a5de7a6", "filename": "gcc/gcc.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301a5c0b57e24135dd231d36de93f2b8121ec987/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301a5c0b57e24135dd231d36de93f2b8121ec987/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=301a5c0b57e24135dd231d36de93f2b8121ec987", "patch": "@@ -504,7 +504,7 @@ static struct compiler default_compilers[] =\n    \"%{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.i} %1 %2\\\n \t\t   %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} %{traditional}\\\n-\t\t   %{v:-version} %{pg:-p} %{p} %{f*}\\\n+\t\t   %{v:-version} %{pg:-p} %{p} %{f*} %{+e*}\\\n \t\t   %{aux-info*}\\\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n@@ -525,7 +525,7 @@ static struct compiler default_compilers[] =\n   {\"@c++-cpp-output\",\n    \"cc1plus %i %1 %2 %{!Q:-quiet} %{d*} %{m*} %{a}\\\n \t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} %{traditional}\\\n-\t    %{v:-version} %{pg:-p} %{p} %{f*}\\\n+\t    %{v:-version} %{pg:-p} %{p} %{f*} %{+e*}\\\n \t    %{aux-info*}\\\n \t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n@@ -2017,6 +2017,9 @@ process_command (argc, argv)\n \t  /* Record the part after the last comma.  */\n \t  assembler_options[n_assembler_options - 1] = argv[i] + prev;\n \t}\n+      else if (argv[i][0] == '+' && argv[i][1] == 'e')\n+\t/* Compensate for the +e options to the C++ front-end.  */\n+\tn_switches++;\n       else if (argv[i][0] == '-' && argv[i][1] != 0 && argv[i][1] != 'l')\n \t{\n \t  register char *p = &argv[i][1];\n@@ -2097,6 +2100,18 @@ process_command (argc, argv)\n \n   add_prefix (&startfile_prefix, standard_exec_prefix, 0, 1, NULL_PTR);\n   add_prefix (&startfile_prefix, standard_exec_prefix_1, 0, 1, NULL_PTR);\n+      else if (argv[i][0] == '+' && argv[i][1] == 'e')\n+\t{\n+\t  /* Compensate for the +e options to the C++ front-end;\n+\t     they're there simply for cfront call-compatability.  We do\n+\t     some magic in default_compilers to pass them down properly.\n+\t     Note we deliberately start at the `+' here, to avoid passing\n+\t     -e0 or -e1 down into the linker.  */\n+\t  switches[n_switches].part1 = &argv[i][0];\n+\t  switches[n_switches].args = 0;\n+\t  switches[n_switches].valid = 0;\n+\t  n_switches++;\n+\t}\n \n   /* More prefixes are enabled in main, after we read the specs file\n      and determine whether this is cross-compilation or not.  */"}]}