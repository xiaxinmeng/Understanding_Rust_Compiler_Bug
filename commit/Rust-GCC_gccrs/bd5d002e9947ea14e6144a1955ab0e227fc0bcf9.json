{"sha": "bd5d002e9947ea14e6144a1955ab0e227fc0bcf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ1ZDAwMmU5OTQ3ZWExNGU2MTQ0YTE5NTVhYjBlMjI3ZmMwYmNmOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-14T11:23:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-14T11:23:02Z"}, "message": "gimplify.c (gimplify_expr): Only do required conversions.\n\n2011-07-14  Richard Guenther  <rguenther@suse.de>\n\n\t* gimplify.c (gimplify_expr): Only do required conversions.\n\nFrom-SVN: r176267", "tree": {"sha": "64c9f71e7c605711b34bf91d3b44a7b49aca21f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c9f71e7c605711b34bf91d3b44a7b49aca21f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "696b1960a5e72f91583370aeadb477800e8e7e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696b1960a5e72f91583370aeadb477800e8e7e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696b1960a5e72f91583370aeadb477800e8e7e3a"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "9c5fed6ea2ad6fc1e18e27ac4634d330983febf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd5d002e9947ea14e6144a1955ab0e227fc0bcf9", "patch": "@@ -1,3 +1,7 @@\n+2011-07-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimplify.c (gimplify_expr): Only do required conversions.\n+\n 2011-07-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/43746"}, {"sha": "f313352e8a237358e3729394ebf074214fa9d466", "filename": "gcc/gimplify.c", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5d002e9947ea14e6144a1955ab0e227fc0bcf9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=bd5d002e9947ea14e6144a1955ab0e227fc0bcf9", "patch": "@@ -6787,22 +6787,20 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n \tcase TRUTH_NOT_EXPR:\n \t  {\n-\t    tree org_type = TREE_TYPE (*expr_p);\n-\n+\t    tree orig_type = TREE_TYPE (*expr_p);\n \t    *expr_p = gimple_boolify (*expr_p);\n-\t    if (org_type != boolean_type_node)\n+\t    if (!useless_type_conversion_p (orig_type, TREE_TYPE (*expr_p)))\n \t      {\n-\t\t*expr_p = fold_convert (org_type, *expr_p);\n+\t\t*expr_p = fold_convert_loc (saved_location, orig_type, *expr_p);\n \t\tret = GS_OK;\n \t\tbreak;\n \t      }\n+\t    ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t\t\t is_gimple_val, fb_rvalue);\n+\t    recalculate_side_effects (*expr_p);\n+\t    break;\n \t  }\n \n-\t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n-\t\t\t       is_gimple_val, fb_rvalue);\n-\t  recalculate_side_effects (*expr_p);\n-\t  break;\n-\n \tcase ADDR_EXPR:\n \t  ret = gimplify_addr_expr (expr_p, pre_p, post_p);\n \t  break;\n@@ -7227,40 +7225,36 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase TRUTH_OR_EXPR:\n \tcase TRUTH_XOR_EXPR:\n \t  {\n-\t    tree org_type = TREE_TYPE (*expr_p);\n-\t    \n+\t    tree orig_type = TREE_TYPE (*expr_p);\n \t    *expr_p = gimple_boolify (*expr_p);\n-\n-\t    /* This shouldn't happen, but due fold-const (and here especially\n-\t       fold_truth_not_expr) happily uses operand type and doesn't\n-\t       automatically uses boolean_type as result, we need to keep\n-\t       orignal type.  */\n-\t    if (org_type != boolean_type_node)\n+\t    if (!useless_type_conversion_p (orig_type, TREE_TYPE (*expr_p)))\n \t      {\n-\t\t*expr_p = fold_convert (org_type, *expr_p);\n+\t\t*expr_p = fold_convert_loc (saved_location, orig_type, *expr_p);\n \t\tret = GS_OK;\n \t\tbreak;\n \t      }\n-\t  }\n \n-\t  /* With two-valued operand types binary truth expressions are\n-\t     semantically equivalent to bitwise binary expressions.  Canonicalize\n-\t     them to the bitwise variant.  */\tswitch (TREE_CODE (*expr_p))\n-\t  {\n-\t  case TRUTH_AND_EXPR:\n-\t    TREE_SET_CODE (*expr_p, BIT_AND_EXPR);\n-\t    break;\n-\t  case TRUTH_OR_EXPR:\n-\t    TREE_SET_CODE (*expr_p, BIT_IOR_EXPR);\n-\t    break;\n-\t  case TRUTH_XOR_EXPR:\n-\t    TREE_SET_CODE (*expr_p, BIT_XOR_EXPR);\n-\t    break;\n-\t  default:\n-\t    break;\n+\t  /* Boolified binary truth expressions are semantically equivalent\n+\t     to bitwise binary expressions.  Canonicalize them to the\n+\t     bitwise variant.  */\n+\t    switch (TREE_CODE (*expr_p))\n+\t      {\n+\t      case TRUTH_AND_EXPR:\n+\t\tTREE_SET_CODE (*expr_p, BIT_AND_EXPR);\n+\t\tbreak;\n+\t      case TRUTH_OR_EXPR:\n+\t\tTREE_SET_CODE (*expr_p, BIT_IOR_EXPR);\n+\t\tbreak;\n+\t      case TRUTH_XOR_EXPR:\n+\t\tTREE_SET_CODE (*expr_p, BIT_XOR_EXPR);\n+\t\tbreak;\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\n+\t    /* Continue classified as tcc_binary.  */\n+\t    goto expr_2;\n \t  }\n-\t  /* Classified as tcc_expression.  */\n-\t  goto expr_2;\n \n \tcase FMA_EXPR:\n \t  /* Classified as tcc_expression.  */"}]}