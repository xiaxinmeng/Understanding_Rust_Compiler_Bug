{"sha": "8a5800b82f04303c1a6ed9094885ba79dfc4378a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1ODAwYjgyZjA0MzAzYzFhNmVkOTA5NDg4NWJhNzlkZmM0Mzc4YQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2013-05-07T14:17:50Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-05-07T14:17:50Z"}, "message": "arm.c (arm_asan_shadow_offset): New function.\n\n2013-05-06  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm.c (arm_asan_shadow_offset): New function.\n\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n\t* config/arm/linux-eabi.h (ASAN_CC1_SPEC): Define.\n\t(LINUX_OR_ANDROID_CC): Add ASAN_CC1_SPEC.\n\n\tlibsanitizer/\n\t* configure.tgt: Add ARM pattern.\n\n\ttestsuite/\n\t* lib/target-supports.exp (check_effective_target_hw): New\n\tfunction.\n\t* c-c++-common/asan/clone-test-1.c: Call\n\tcheck_effective_target_hw.\n\t* c-c++-common/asan/rlimit-mmap-test-1.c: Likewise.\n\t* c-c++-common/asan/heap-overflow-1.c: Update regexps to accept\n\tpossible decorations.\n\t* c-c++-common/asan/null-deref-1.c: Likewise.\n\t* c-c++-common/asan/stack-overflow-1.c: Likewise.\n\t* c-c++-common/asan/strncpy-overflow-1.c: Likewise.\n\t* c-c++-common/asan/use-after-free-1.c: Likewise.\n\t* g++.dg/asan/deep-thread-stack-1.C: Likewise.\n\t* g++.dg/asan/large-func-test-1.C: Likewise.\n\nFrom-SVN: r198683", "tree": {"sha": "f49b90d6259dbe7cbb55464ba1121033590c72c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49b90d6259dbe7cbb55464ba1121033590c72c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5800b82f04303c1a6ed9094885ba79dfc4378a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5800b82f04303c1a6ed9094885ba79dfc4378a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5800b82f04303c1a6ed9094885ba79dfc4378a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5800b82f04303c1a6ed9094885ba79dfc4378a/comments", "author": null, "committer": null, "parents": [{"sha": "7bf55a70ea2a606b387b8c8012dea8caa1f1502d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf55a70ea2a606b387b8c8012dea8caa1f1502d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf55a70ea2a606b387b8c8012dea8caa1f1502d"}], "stats": {"total": 110, "additions": 92, "deletions": 18}, "files": [{"sha": "8276e8ae0aefb923d3c6f14411b52443cf443970", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -1,3 +1,10 @@\n+2013-05-07  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm.c (arm_asan_shadow_offset): New function.\n+\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n+\t* config/arm/linux-eabi.h (ASAN_CC1_SPEC): Define.\n+\t(LINUX_OR_ANDROID_CC): Add ASAN_CC1_SPEC.\n+\n 2013-05-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (MAX_INCR_VEC_LEN): New constant."}, {"sha": "170dcb7042852977f9a7f98bad2228e1bf693e37", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -281,6 +281,7 @@ static unsigned arm_add_stmt_cost (void *data, int count,\n \n static void arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n \t\t\t\t\t bool op0_preserve_value);\n+static unsigned HOST_WIDE_INT arm_asan_shadow_offset (void);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -657,6 +658,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_CANONICALIZE_COMPARISON \\\n   arm_canonicalize_comparison\n \n+#undef TARGET_ASAN_SHADOW_OFFSET\n+#define TARGET_ASAN_SHADOW_OFFSET arm_asan_shadow_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -28062,4 +28066,12 @@ arm_validize_comparison (rtx *comparison, rtx * op1, rtx * op2)\n \n }\n \n+/* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n+\n+static unsigned HOST_WIDE_INT\n+arm_asan_shadow_offset (void)\n+{\n+  return (unsigned HOST_WIDE_INT) 1 << 29;\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "cb0aad19c344c3c20a9d8ee354544e7292317d25", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -84,10 +84,14 @@\n   LINUX_OR_ANDROID_LD (LINUX_TARGET_LINK_SPEC,\t\t\t\t\\\n \t\t       LINUX_TARGET_LINK_SPEC \" \" ANDROID_LINK_SPEC)\n \n+#undef  ASAN_CC1_SPEC\n+#define ASAN_CC1_SPEC \"%{fsanitize=*:-funwind-tables}\"\n+\n #undef  CC1_SPEC\n #define CC1_SPEC\t\t\t\t\t\t\t\\\n-  LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC,\t\t\t\\\n-\t\t       GNU_USER_TARGET_CC1_SPEC \" \" ANDROID_CC1_SPEC)\n+  LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC \" \" ASAN_CC1_SPEC,\t\\\n+\t\t       GNU_USER_TARGET_CC1_SPEC \" \" ASAN_CC1_SPEC \" \"\t\\\n+\t\t       ANDROID_CC1_SPEC)\n \n #define CC1PLUS_SPEC \\\n   LINUX_OR_ANDROID_CC (\"\", ANDROID_CC1PLUS_SPEC)"}, {"sha": "78ee04fbe8ddb781257cc54a86628c0260fa5cbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -1,3 +1,19 @@\n+2013-05-07  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp (check_effective_target_hw): New\n+\tfunction.\n+\t* c-c++-common/asan/clone-test-1.c: Call\n+\tcheck_effective_target_hw.\n+\t* c-c++-common/asan/rlimit-mmap-test-1.c: Likewise.\n+\t* c-c++-common/asan/heap-overflow-1.c: Update regexps to accept\n+\tpossible decorations.\n+\t* c-c++-common/asan/null-deref-1.c: Likewise.\n+\t* c-c++-common/asan/stack-overflow-1.c: Likewise.\n+\t* c-c++-common/asan/strncpy-overflow-1.c: Likewise.\n+\t* c-c++-common/asan/use-after-free-1.c: Likewise.\n+\t* g++.dg/asan/deep-thread-stack-1.C: Likewise.\n+\t* g++.dg/asan/large-func-test-1.C: Likewise.\n+\n 2013-05-07  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* gcc.target/aarch64/scalar_intrinsics.c: Update."}, {"sha": "fd187aaadd2d7ffca62f4cecc308555e35f05ad6", "filename": "gcc/testsuite/c-c++-common/asan/clone-test-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fclone-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fclone-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fclone-test-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do run { target { *-*-linux* } } } */\n /* { dg-require-effective-target clone } */\n+/* { dg-require-effective-target hw } */\n /* { dg-options \"-D_GNU_SOURCE\" } */\n \n #include <stdio.h>"}, {"sha": "996909d3c8e3d8888a4a283ea05124eee55b838c", "filename": "gcc/testsuite/c-c++-common/asan/heap-overflow-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -25,7 +25,7 @@ int main(int argc, char **argv) {\n \n /* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*heap-overflow-1.c:21|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes to the right of 10-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes to the right of 10-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*heap-overflow-1.c:19|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "14ec514aa9add892e61cd0dd3796ed8bd51bfdfd", "filename": "gcc/testsuite/c-c++-common/asan/null-deref-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fnull-deref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fnull-deref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fnull-deref-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -18,6 +18,6 @@ int main()\n \n /* { dg-output \"ERROR: AddressSanitizer:? SEGV on unknown address\\[^\\n\\r]*\" } */\n /* { dg-output \"0x\\[0-9a-f\\]+ \\[^\\n\\r]*pc 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"AddressSanitizer can not provide additional info.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*AddressSanitizer can not provide additional info.*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*NullDeref\\[^\\n\\r]* (\\[^\\n\\r]*null-deref-1.c:10|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*null-deref-1.c:15|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "9dbbc85f4f30b5ccbf4bd7bb83a73001de1786c2", "filename": "gcc/testsuite/c-c++-common/asan/rlimit-mmap-test-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Frlimit-mmap-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Frlimit-mmap-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Frlimit-mmap-test-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do run { target setrlimit } } */\n /* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+/* { dg-require-effective-target hw } */\n /* { dg-shouldfail \"asan\" } */\n \n #include <stdlib.h>"}, {"sha": "5f563561935d0c5be5143e78daafeb50a685d3ed", "filename": "gcc/testsuite/c-c++-common/asan/stack-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstack-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstack-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstack-overflow-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -19,4 +19,4 @@ int main() {\n \n /* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*stack-overflow-1.c:16|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"Address 0x\\[0-9a-f\\]+ is\\[^\\n\\r]*frame <main>\" } */\n+/* { dg-output \"\\[^\\n\\r]*Address 0x\\[0-9a-f\\]+ is\\[^\\n\\r]*frame <main>\" } */"}, {"sha": "3ed9fd6dd5c21e579cd0a4042a883692bdf737e1", "filename": "gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -15,7 +15,7 @@ int main(int argc, char **argv) {\n /* { dg-output \"WRITE of size \\[0-9\\]* at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)strncpy|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*strncpy-overflow-1.c:11|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes to the right of 9-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes to the right of 9-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*strncpy-overflow-1.c:10|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "25e9be827f0f6d7a82019aff86d013e3c98c47a9", "filename": "gcc/testsuite/c-c++-common/asan/use-after-free-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-free-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-free-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-free-1.c?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -11,12 +11,12 @@ int main() {\n \n /* { dg-output \"ERROR: AddressSanitizer:? heap-use-after-free on address\\[^\\n\\r]*\" } */\n /* { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*use-after-free-1.c:9|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"0x\\[0-9a-f\\]+ is located 5 bytes inside of 10-byte region .0x\\[0-9a-f\\]+,0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"freed by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 5 bytes inside of 10-byte region .0x\\[0-9a-f\\]+,0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*freed by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)free|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*use-after-free-1.c:8|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"previously allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*previously allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*use-after-free-1.c:7|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "d5d85c42d93f3883372eee444f4e56c5f0f3d8e5", "filename": "gcc/testsuite/g++.dg/asan/deep-thread-stack-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-thread-stack-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-thread-stack-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-thread-stack-1.C?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -45,9 +45,9 @@ int main(int argc, char *argv[]) {\n }\n \n // { dg-output \"ERROR: AddressSanitizer: heap-use-after-free.*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"WRITE of size 4 at 0x\\[0-9a-f\\]+ thread T(\\[0-9\\]+).*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"freed by thread T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"previously allocated by thread T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*WRITE of size 4 at 0x\\[0-9a-f\\]+ thread T(\\[0-9\\]+).*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*freed by thread T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*previously allocated by thread T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"Thread T\\\\2 created by T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"Thread T\\\\8 created by T0 here:.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"Thread T\\\\4 created by T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }"}, {"sha": "9344c3bcff62040982e177b51e2733c9f25db88f", "filename": "gcc/testsuite/g++.dg/asan/large-func-test-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -37,9 +37,9 @@ int main() {\n \n // { dg-output \"ERROR: AddressSanitizer:? heap-buffer-overflow on address\\[^\\n\\r]*\" }\n // { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"    #0 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*LargeFunction\\[^\\n\\r]*(large-func-test-1.C:18|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"0x\\[0-9a-f\\]+ is located 44 bytes to the right of 400-byte region.*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 44 bytes to the right of 400-byte region.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"    #0( 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"    #1|) 0x\\[0-9a-f\\]+ (in (operator new|_*_Zn\\[aw\\]\\[mj\\])|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }"}, {"sha": "28b6b6d9ffd3c350551f51b19f6efb0e42bac6c1", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -4668,6 +4668,33 @@ proc check_effective_target_simulator { } {\n     return 0\n }\n \n+# Return 1 if programs are intended to be run on hardware rather than\n+# on a simulator\n+\n+proc check_effective_target_hw { } {\n+\n+    # All \"src/sim\" simulators set this one.\n+    if [board_info target exists is_simulator] {\n+\tif [board_info target is_simulator] {\n+\t  return 0\n+\t} else {\n+\t  return 1\n+\t}\n+    }\n+\n+    # The \"sid\" simulators don't set that one, but at least they set\n+    # this one.\n+    if [board_info target exists slow_simulator] {\n+\tif [board_info target slow_simulator] {\n+\t  return 0\n+\t} else {\n+\t  return 1\n+\t}\n+    }\n+\n+    return 1\n+}\n+\n # Return 1 if the target is a VxWorks kernel.\n \n proc check_effective_target_vxworks_kernel { } {"}, {"sha": "8cc31a318fc819abf2f8f8468d9881168b2b7d5d", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -1,3 +1,7 @@\n+2013-05-07  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* configure.tgt: Add ARM pattern.\n+\n 2013-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/43620"}, {"sha": "bdfc22e3718f40992ac0545b2d34f5806c0bb27f", "filename": "libsanitizer/configure.tgt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5800b82f04303c1a6ed9094885ba79dfc4378a/libsanitizer%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5800b82f04303c1a6ed9094885ba79dfc4378a/libsanitizer%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure.tgt?ref=8a5800b82f04303c1a6ed9094885ba79dfc4378a", "patch": "@@ -29,6 +29,8 @@ case \"${target}\" in\n \t;;\n   sparc*-*-linux*)\n \t;;\n+  arm*-*-linux*)\n+\t;;\n   x86_64-*-darwin[1]* | i?86-*-darwin[1]*)\n \tTSAN_SUPPORTED=no\n \t;;"}]}