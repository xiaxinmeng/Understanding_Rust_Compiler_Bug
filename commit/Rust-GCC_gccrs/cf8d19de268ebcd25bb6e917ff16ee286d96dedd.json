{"sha": "cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4ZDE5ZGUyNjhlYmNkMjViYjZlOTE3ZmYxNmVlMjg2ZDk2ZGVkZA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-01-24T13:09:27Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-01-24T13:09:27Z"}, "message": "re PR tree-optimization/79159 (spurious array-bounds warning)\n\n\tPR tree-optimization/79159\n\t* tree-ssa-loop-niter.c (get_cst_init_from_scev): New function.\n\t(record_nonwrapping_iv): Imporve boundary using above function if no\n\tvalue range information.\n\n\tgcc/testsuite\n\tPR tree-optimization/79159\n\t* g++.dg/tree-ssa/pr79159.C: New test.\n\nFrom-SVN: r244868", "tree": {"sha": "33da9dab32cb1102151fce01f63a0a6c3ff22f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33da9dab32cb1102151fce01f63a0a6c3ff22f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/comments", "author": null, "committer": null, "parents": [{"sha": "5fd1486ce58297190c2b924e96e716087139a8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd1486ce58297190c2b924e96e716087139a8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd1486ce58297190c2b924e96e716087139a8b5"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "8a2d6d3ece3b9ea844fc7321fbe39c7158d64a22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "patch": "@@ -1,3 +1,10 @@\n+2017-01-24  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/79159\n+\t* tree-ssa-loop-niter.c (get_cst_init_from_scev): New function.\n+\t(record_nonwrapping_iv): Imporve boundary using above function if no\n+\tvalue range information.\n+\n 2017-01-24  Pekka J\u00e4\u00e4skel\u00e4inen <pekka@parmance.com>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "086cc3320efbb671f645f8c6ab5d5a5c6095a0eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "patch": "@@ -1,3 +1,8 @@\n+2017-01-24  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/79159\n+\t* g++.dg/tree-ssa/pr79159.C: New test.\n+\n 2017-01-24  Pekka J\u00e4\u00e4skel\u00e4inen <pekka@parmance.com>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "e15e1170c41e161ede55c8286c0d684ddb55d04e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr79159.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr79159.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr79159.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr79159.C?ref=cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Wall\" } */\n+\n+void foo(float tmpCorr[9][9]);\n+float bar;\n+\n+void finalDigits(int& n)\n+{\n+  float tmpCorr[9][9] = {{0}};\n+\n+  foo(tmpCorr);\n+  for (int i = 0; i < n; i++) {\n+    for (int j = i+1; j < n; j++) {\n+      bar = tmpCorr[i][j];\n+    }\n+  }\n+}\n+"}, {"sha": "efcf3ed65a63f5001517cb5f99245b73b5f2fc56", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8d19de268ebcd25bb6e917ff16ee286d96dedd/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=cf8d19de268ebcd25bb6e917ff16ee286d96dedd", "patch": "@@ -3059,6 +3059,43 @@ record_control_iv (struct loop *loop, struct tree_niter_desc *niter)\n   return;\n }\n \n+/* This function returns TRUE if below conditions are satisfied:\n+     1) VAR is SSA variable.\n+     2) VAR is an IV:{base, step} in its defining loop.\n+     3) IV doesn't overflow.\n+     4) Both base and step are integer constants.\n+     5) Base is the MIN/MAX value depends on IS_MIN.\n+   Store value of base to INIT correspondingly.  */\n+\n+static bool\n+get_cst_init_from_scev (tree var, wide_int *init, bool is_min)\n+{\n+  if (TREE_CODE (var) != SSA_NAME)\n+    return false;\n+\n+  gimple *def_stmt = SSA_NAME_DEF_STMT (var);\n+  struct loop *loop = loop_containing_stmt (def_stmt);\n+\n+  if (loop == NULL)\n+    return false;\n+\n+  affine_iv iv;\n+  if (!simple_iv (loop, loop, var, &iv, false))\n+    return false;\n+\n+  if (!iv.no_overflow)\n+    return false;\n+\n+  if (TREE_CODE (iv.base) != INTEGER_CST || TREE_CODE (iv.step) != INTEGER_CST)\n+    return false;\n+\n+  if (is_min == tree_int_cst_sign_bit (iv.step))\n+    return false;\n+\n+  *init = iv.base;\n+  return true;\n+}\n+\n /* Record the estimate on number of iterations of LOOP based on the fact that\n    the induction variable BASE + STEP * i evaluated in STMT does not wrap and\n    its values belong to the range <LOW, HIGH>.  REALISTIC is true if the\n@@ -3100,7 +3137,8 @@ record_nonwrapping_iv (struct loop *loop, tree base, tree step, gimple *stmt,\n       if (TREE_CODE (orig_base) == SSA_NAME\n \t  && TREE_CODE (high) == INTEGER_CST\n \t  && INTEGRAL_TYPE_P (TREE_TYPE (orig_base))\n-\t  && get_range_info (orig_base, &min, &max) == VR_RANGE\n+\t  && (get_range_info (orig_base, &min, &max) == VR_RANGE\n+\t      || get_cst_init_from_scev (orig_base, &max, false))\n \t  && wi::gts_p (high, max))\n \tbase = wide_int_to_tree (unsigned_type, max);\n       else if (TREE_CODE (base) != INTEGER_CST\n@@ -3117,7 +3155,8 @@ record_nonwrapping_iv (struct loop *loop, tree base, tree step, gimple *stmt,\n       if (TREE_CODE (orig_base) == SSA_NAME\n \t  && TREE_CODE (low) == INTEGER_CST\n \t  && INTEGRAL_TYPE_P (TREE_TYPE (orig_base))\n-\t  && get_range_info (orig_base, &min, &max) == VR_RANGE\n+\t  && (get_range_info (orig_base, &min, &max) == VR_RANGE\n+\t      || get_cst_init_from_scev (orig_base, &min, true))\n \t  && wi::gts_p (min, low))\n \tbase = wide_int_to_tree (unsigned_type, min);\n       else if (TREE_CODE (base) != INTEGER_CST"}]}