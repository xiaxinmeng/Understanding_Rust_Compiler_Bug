{"sha": "2604ec03c96cc3bfd8b3493df8665689d62778fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwNGVjMDNjOTZjYzNiZmQ4YjM0OTNkZjg2NjU2ODlkNjI3NzhmYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T10:17:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T10:17:10Z"}, "message": "[multiple changes]\n\n2010-10-08  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_prag.adb: Minor reformatting.\n\n2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derived_Type_Declaration): In the private part of an\n\tinstance, it is legal to derive from a non-limited actual when the\n\tformal type is untagged limited.\n\t* sem_ch12.adb (Instantiate_Type): For a formal private type, use\n\tanalyzed formal as Generic_Parent_Type, to simplify later checks.\n\n2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Insert_Default): If default value is already a\n\traise_constraint_error do not rewrite it as new raise node, to prevent\n\tinfinite loops in the warning removal machinery.\n\nFrom-SVN: r165156", "tree": {"sha": "f8de0ca6262c0bda50f336f5801a2ac7e2cf781d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8de0ca6262c0bda50f336f5801a2ac7e2cf781d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2604ec03c96cc3bfd8b3493df8665689d62778fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2604ec03c96cc3bfd8b3493df8665689d62778fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2604ec03c96cc3bfd8b3493df8665689d62778fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2604ec03c96cc3bfd8b3493df8665689d62778fa/comments", "author": null, "committer": null, "parents": [{"sha": "c86ee18adc5f021703d4f5814ebbbfe59395274f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86ee18adc5f021703d4f5814ebbbfe59395274f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86ee18adc5f021703d4f5814ebbbfe59395274f"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "00e7dbad91774d2afcdf82be842eb4d2823ea25e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2604ec03c96cc3bfd8b3493df8665689d62778fa", "patch": "@@ -1,3 +1,21 @@\n+2010-10-08  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derived_Type_Declaration): In the private part of an\n+\tinstance, it is legal to derive from a non-limited actual when the\n+\tformal type is untagged limited.\n+\t* sem_ch12.adb (Instantiate_Type): For a formal private type, use\n+\tanalyzed formal as Generic_Parent_Type, to simplify later checks.\n+\n+2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Insert_Default): If default value is already a\n+\traise_constraint_error do not rewrite it as new raise node, to prevent\n+\tinfinite loops in the warning removal machinery.\n+\n 2010-10-08  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb, sem_prag.adb: Minor reformatting"}, {"sha": "2b6a12cba0ed5affb02db4dcba47fb3fc09727d4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=2604ec03c96cc3bfd8b3493df8665689d62778fa", "patch": "@@ -10355,6 +10355,10 @@ package body Sem_Ch12 is\n       --  parent, but the analyzed formal that includes the interface\n       --  operations of all its progenitors.\n \n+      --  Same treatment for formal private types, so we can check whether the\n+      --  type is tagged limited when validating derivations in the private\n+      --  part. (See AI05-096).\n+\n       if Nkind (Def) = N_Formal_Derived_Type_Definition then\n          if Present (Interface_List (Def)) then\n             Set_Generic_Parent_Type (Decl_Node, A_Gen_T);\n@@ -10363,7 +10367,7 @@ package body Sem_Ch12 is\n          end if;\n \n       elsif Nkind (Def) = N_Formal_Private_Type_Definition then\n-         Set_Generic_Parent_Type (Decl_Node, Ancestor);\n+         Set_Generic_Parent_Type (Decl_Node, A_Gen_T);\n       end if;\n \n       --  If the actual is a synchronized type that implements an interface,"}, {"sha": "eee4dd752367fd6463b2a466c12d41b259ee2fd4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2604ec03c96cc3bfd8b3493df8665689d62778fa", "patch": "@@ -13738,9 +13738,24 @@ package body Sem_Ch3 is\n              (not Is_Interface (Parent_Type)\n                or else not Is_Limited_Interface (Parent_Type))\n          then\n-            Error_Msg_NE\n-              (\"parent type& of limited type must be limited\",\n-               N, Parent_Type);\n+\n+            --  AI05-0096 : a derivation in the private part of an instance is\n+            --  legal if the generic formal is untagged limited, and the actual\n+            --  is non-limited.\n+\n+            if Is_Generic_Actual_Type (Parent_Type)\n+              and then In_Private_Part (Current_Scope)\n+              and then\n+                not Is_Tagged_Type\n+                  (Generic_Parent_Type (Parent (Parent_Type)))\n+            then\n+               null;\n+\n+            else\n+               Error_Msg_NE\n+                 (\"parent type& of limited type must be limited\",\n+                  N, Parent_Type);\n+            end if;\n          end if;\n       end if;\n    end Derived_Type_Declaration;"}, {"sha": "84f50ac16828499b09fed1247ae7b9ab2ad01e8b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2604ec03c96cc3bfd8b3493df8665689d62778fa", "patch": "@@ -8074,9 +8074,9 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            --  Ada 2012 (AI05-0030): Cannot apply the Implementation_kind\n-            --  \"By_Protected_Procedure\" to the primitive procedure of a\n-            --  task interface.\n+            --  Ada 2012 (AI05-0030): Cannot apply the implementation_kind\n+            --  By_Protected_Procedure to the primitive procedure of a task\n+            --  interface.\n \n             if Chars (Arg2) = Name_By_Protected_Procedure\n               and then Is_Interface (Typ)"}, {"sha": "ecc1dfbb0d225891d01c0c7d9ade7788e59d6949", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2604ec03c96cc3bfd8b3493df8665689d62778fa/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2604ec03c96cc3bfd8b3493df8665689d62778fa", "patch": "@@ -3120,8 +3120,12 @@ package body Sem_Res is\n          --  If the default expression raises constraint error, then just\n          --  silently replace it with an N_Raise_Constraint_Error node,\n          --  since we already gave the warning on the subprogram spec.\n+         --  If node is already a Raise_Constraint_Error leave as is, to\n+         --  prevent loops in the warnings removal machinery.\n \n-         if Raises_Constraint_Error (Actval) then\n+         if Raises_Constraint_Error (Actval)\n+           and then Nkind (Actval) /= N_Raise_Constraint_Error\n+         then\n             Rewrite (Actval,\n               Make_Raise_Constraint_Error (Loc,\n                 Reason => CE_Range_Check_Failed));"}]}