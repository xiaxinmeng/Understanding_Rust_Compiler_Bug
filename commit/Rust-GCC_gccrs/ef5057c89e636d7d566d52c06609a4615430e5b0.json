{"sha": "ef5057c89e636d7d566d52c06609a4615430e5b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1MDU3Yzg5ZTYzNmQ3ZDU2NmQ1MmMwNjYwOWE0NjE1NDMwZTViMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-09-14T09:22:01Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-09-14T09:22:01Z"}, "message": "[libgfortran] Fix uninitialized variable use in fallback_access\n\nI've been tracking down a bug in a Fortran program on a newlib target and it boils down to fallback_access doing something bad.\nThe unconditional calls to close cause havoc when open doesn't get called due to the short-circuiting in the if-statement above\nbecause the fd is uninitialised. In my environment GCC ends up calling close on file descriptor 0, thus trying to close stdin.\n\nThis patch tightens up the calling so that close is called only when the corresponding open call succeeded.\nWith this my runtime failure disappears.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\nThough that doesn't exercise this call I hope it's an obviously correct change. \n\n\t* io/unix.c (fallback_access): Avoid calling close on\n\tuninitialized file descriptor.\n\nFrom-SVN: r264305", "tree": {"sha": "b69851d448758d64451837fb961a0bbf073c1922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69851d448758d64451837fb961a0bbf073c1922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef5057c89e636d7d566d52c06609a4615430e5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5057c89e636d7d566d52c06609a4615430e5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5057c89e636d7d566d52c06609a4615430e5b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5057c89e636d7d566d52c06609a4615430e5b0/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7efd5ff31df5ac69a23b6285474f0b50154801f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efd5ff31df5ac69a23b6285474f0b50154801f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efd5ff31df5ac69a23b6285474f0b50154801f7"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "56828b1bee5c8cdb056f39709ac1d518e7c7c23d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5057c89e636d7d566d52c06609a4615430e5b0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5057c89e636d7d566d52c06609a4615430e5b0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ef5057c89e636d7d566d52c06609a4615430e5b0", "patch": "@@ -1,3 +1,8 @@\n+2018-09-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* io/unix.c (fallback_access): Avoid calling close on\n+\tuninitialized file descriptor.\n+\n 2018-09-12  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* runtime/minimal.c (estr_write): Define in terms of write."}, {"sha": "ad2577c44a9432db2a83ef3d2f474b04b9d7d70c", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5057c89e636d7d566d52c06609a4615430e5b0/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5057c89e636d7d566d52c06609a4615430e5b0/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=ef5057c89e636d7d566d52c06609a4615430e5b0", "patch": "@@ -150,13 +150,21 @@ fallback_access (const char *path, int mode)\n {\n   int fd;\n \n-  if ((mode & R_OK) && (fd = open (path, O_RDONLY)) < 0)\n-    return -1;\n-  close (fd);\n+  if (mode & R_OK)\n+    {\n+      if ((fd = open (path, O_RDONLY)) < 0)\n+\treturn -1;\n+      else\n+\tclose (fd);\n+    }\n \n-  if ((mode & W_OK) && (fd = open (path, O_WRONLY)) < 0)\n-    return -1;\n-  close (fd);\n+  if (mode & W_OK)\n+    {\n+      if ((fd = open (path, O_WRONLY)) < 0)\n+\treturn -1;\n+      else\n+\tclose (fd);\n+    }\n \n   if (mode == F_OK)\n     {"}]}