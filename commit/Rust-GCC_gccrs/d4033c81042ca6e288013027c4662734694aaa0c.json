{"sha": "d4033c81042ca6e288013027c4662734694aaa0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwMzNjODEwNDJjYTZlMjg4MDEzMDI3YzQ2NjI3MzQ2OTRhYWEwYw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-27T16:06:00Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-27T16:06:00Z"}, "message": "re PR c++/17880 (-Wsequence-point doesn't warn inside if, while, do conditions, for beg/cond/end expressions etc.)\n\n2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/17880\ncp/\n\t* semantics.c (maybe_convert_cond): Call verify_sequence_points.\n\t(finish_return_stmt): Likewise.\n\t(finish_switch_condition): Likewise.\ntestsuite/\n\t* g++.dg/warn/sequence-pt-1.C: New.\n\t* g++.dg/warn/sequence-pt-pr17880.C: New.\n\nFrom-SVN: r139625", "tree": {"sha": "bd56272d2aa361afef5fa56a4f3eb69385986665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd56272d2aa361afef5fa56a4f3eb69385986665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4033c81042ca6e288013027c4662734694aaa0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4033c81042ca6e288013027c4662734694aaa0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4033c81042ca6e288013027c4662734694aaa0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4033c81042ca6e288013027c4662734694aaa0c/comments", "author": null, "committer": null, "parents": [{"sha": "f5d09f36347c9c1c13c94db2ffa06df3388431a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d09f36347c9c1c13c94db2ffa06df3388431a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d09f36347c9c1c13c94db2ffa06df3388431a6"}], "stats": {"total": 188, "additions": 187, "deletions": 1}, "files": [{"sha": "7d2266c65eb04b6ef7665515152b1637566d1ef5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4033c81042ca6e288013027c4662734694aaa0c", "patch": "@@ -1,3 +1,10 @@\n+2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/17880\n+\t* semantics.c (maybe_convert_cond): Call verify_sequence_points.\n+\t(finish_return_stmt): Likewise.\n+\t(finish_switch_condition): Likewise.\n+\n 2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* cp-tree.h: Fix #error directive."}, {"sha": "e044a4392c33eccf758488c788d90def74af6ade", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d4033c81042ca6e288013027c4662734694aaa0c", "patch": "@@ -572,7 +572,8 @@ finish_goto_stmt (tree destination)\n }\n \n /* COND is the condition-expression for an if, while, etc.,\n-   statement.  Convert it to a boolean value, if appropriate.  */\n+   statement.  Convert it to a boolean value, if appropriate.\n+   In addition, verify sequence points if -Wsequence-point is enabled.  */\n \n static tree\n maybe_convert_cond (tree cond)\n@@ -585,6 +586,9 @@ maybe_convert_cond (tree cond)\n   if (processing_template_decl)\n     return cond;\n \n+  if (warn_sequence_point)\n+    verify_sequence_points (cond);\n+\n   /* Do the conversion.  */\n   cond = convert_from_reference (cond);\n \n@@ -790,6 +794,9 @@ finish_return_stmt (tree expr)\n     return error_mark_node;\n   if (!processing_template_decl)\n     {\n+      if (warn_sequence_point)\n+\tverify_sequence_points (expr);\n+      \n       if (DECL_DESTRUCTOR_P (current_function_decl)\n \t  || (DECL_CONSTRUCTOR_P (current_function_decl)\n \t      && targetm.cxx.cdtor_returns_this ()))\n@@ -978,6 +985,9 @@ finish_switch_cond (tree cond, tree switch_stmt)\n     }\n   if (check_for_bare_parameter_packs (cond))\n     cond = error_mark_node;\n+  else if (!processing_template_decl && warn_sequence_point)\n+    verify_sequence_points (cond);\n+\n   finish_cond (&SWITCH_STMT_COND (switch_stmt), cond);\n   SWITCH_STMT_TYPE (switch_stmt) = orig_type;\n   add_stmt (switch_stmt);"}, {"sha": "42d12a230225b7cc26b324ddd3b8e68b80ca16eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4033c81042ca6e288013027c4662734694aaa0c", "patch": "@@ -1,3 +1,9 @@\n+2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/17880\n+\t* g++.dg/warn/sequence-pt-1.C: New.\n+\t* g++.dg/warn/sequence-pt-pr17880.C: New.\n+\n 2008-08-26  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* g++.dg/cpp0x/scoped_enum_examples.C: New."}, {"sha": "3b9214233cd4763def57e6425d81a0893465c882", "filename": "gcc/testsuite/g++.dg/warn/sequence-pt-1.C", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C?ref=d4033c81042ca6e288013027c4662734694aaa0c", "patch": "@@ -0,0 +1,109 @@\n+/* Test for sequence point warnings.  */\n+/* Origin: Michael Meeks in\n+   <URL:http://gcc.gnu.org/ml/gcc-patches/1998-06/msg00316.html>,\n+   adapted to a testcase by Joseph Myers <jsm28@cam.ac.uk>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+struct s\n+{\n+  int a;\n+};\n+\n+extern int fn (int);\n+extern int fnb (int, int);\n+extern int fnc (int *);\n+extern int sprintf (char *, const char *, ...);\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void\n+foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n+     int *ap, int *bp, int **cp, char *ans, int (*fnp[8])(int))\n+{\n+  int len;\n+    \n+  a = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = --a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = ++a + b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = a-- + b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[n] = bp[n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[--n] = bp[n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[++n] = bp[--n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  cp[n][p] = cp[n][n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  *ptr++ = (size_t)ptr++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  sptr->a = (size_t)(sptr++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  *ptr++ = fn (*ptr); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = b = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = a = --b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = 1 + (a = 1); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (a = b); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (a = b) + 1; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (bp[a++] = b) + 1; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = b++ * b++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = fnb (b++, b++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (*fnp[b++]) (b++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (*fnp[b]) (b++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (*fnp[b++]) (b); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  *ap = fnc (ap++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  (a += b) + (a += n); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a =  (b, b++) + (b++, b); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[a++] += a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[a+=1] += a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[a++] += a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[a+=1] += a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = a++, b = a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = a, a = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (b++ ? n : a) + b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b ? a = a++ : a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b && (a = a++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  (a = a++) && b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b, (a = a++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  (a = a++), b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a ^= b ^= a ^= b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  a = a; /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = (a++ && 4); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = ! (a++ && 4); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = - (a++ && 4); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = (double) (a++ && 4); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  len = sprintf (ans, \"%d\", len++); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = fn (a++); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  b++, (b + b); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  (a = b++), (a = b++); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = (b++, b++); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = b++ && b++; /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = b++ || b++; /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = (b++ ? b++ : a); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  a = (b++ ? a : b++); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  ap[a++] += bp[b]; /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  ap[a += 1] += 1; /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+  *ptr < 128 ? *ptr++ : *(ptr += 2); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n+\n+  /* The following will be represented internally with a tree consisting of\n+     many duplicated SAVE_EXPRs.  This caused the previous version of the\n+     sequence point warning code to fail by running out of virtual memory.  */\n+  a = ((b & 1 ? 21 : 0)\n+       | (b & 2 ? 22 : 0)\n+       | (b & 3 ? 23 : 0)\n+       | (b & 4 ? 24 : 0)\n+       | (b & 5 ? 25 : 0)\n+       | (b & 6 ? 26 : 0)\n+       | (b & 7 ? 27 : 0)\n+       | (b & 8 ? 28 : 0)\n+       | (b & 9 ? 29 : 0)\n+       | (b & 10 ? 30 : 0)\n+       | (b & 11 ? 31 : 0)\n+       | (b & 12 ? 32 : 0)\n+       | (b & 13 ? 1 : 0)\n+       | (b & 14 ? 2 : 0)\n+       | (b & 15 ? 3 : 0)\n+       | (b & 16 ? 4 : 0)\n+       | (b & 17 ? 5 : 0)\n+       | (b & 18 ? 6 : 0)\n+       | (b & 19 ? 7 : 0)\n+       | (b & 20 ? 8 : 0)\n+       | (b & 21 ? 9 : 0));\n+}"}, {"sha": "01d87be8bbed5b9fda9892ca1fdd9bc27bcf57b5", "filename": "gcc/testsuite/g++.dg/warn/sequence-pt-pr17880.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-pr17880.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4033c81042ca6e288013027c4662734694aaa0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-pr17880.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-pr17880.C?ref=d4033c81042ca6e288013027c4662734694aaa0c", "patch": "@@ -0,0 +1,54 @@\n+// PR 17880\n+// { dg-do compile }\n+// { dg-options \"-Wsequence-point\" }\n+\n+int\n+foo (int x)\n+{\n+  unsigned int a;\n+  int b;\n+\n+  b = (a += 5) > a;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = (a += 5) + a == 10;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = (a -= 5) > a;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = (a -= 5) + a == 10;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = a-- > a;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = a-- + a == 10;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = ++a > a;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  b = ++a + a == 10;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+\n+  if ((a += 5) > a) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if ((a += 5) + a == 10) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if ((a -= 5) > a) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if ((a -= 5) + a == 10) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if (a-- > a) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if (a-- + a == 10) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if (++a > a) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if (++a + a == 10) return -1;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  do {} while ((a += 5) > a);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  while ((a += 5) > a);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  for ((a += 5) > a;;);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  for (b = (a += 5) > a;;);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  for (; (a += 5) > a;);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  for (;; b = (a += 5) > a);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  for (;; a++ + a++);  // { dg-warning \"undefined\" \"sequence point warning\" }\n+  if (a) a++ - a--;    // { dg-warning \"undefined\" \"sequence point warning\" }\n+  ((a +=5) > a) ? a : b; // { dg-warning \"undefined\" \"sequence point warning\" }\n+  return (a++ - a--); // { dg-warning \"undefined\" \"sequence point warning\" }\n+}\n+\n+void bar (int i)\n+{\n+  int a = i++ - i++; // { dg-warning \"undefined\" \"sequence point warning\" }\n+} \n+\n+void baz (int i)\n+{\n+  switch (i++ + i++)  // { dg-warning \"undefined\" \"sequence point warning\" }\n+    {\n+    case 1:\n+      i++ - i++;  // { dg-warning \"undefined\" \"sequence point warning\" }\n+    case 2:\n+      break;\n+    }\n+}"}]}