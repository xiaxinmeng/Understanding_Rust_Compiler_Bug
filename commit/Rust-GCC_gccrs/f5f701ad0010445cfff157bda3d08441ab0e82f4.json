{"sha": "f5f701ad0010445cfff157bda3d08441ab0e82f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmNzAxYWQwMDEwNDQ1Y2ZmZjE1N2JkYTNkMDg0NDFhYjBlODJmNA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-04-16T03:45:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-04-16T03:45:24Z"}, "message": "re PR fortran/26822 (Scalarization of non-elemental intrinsic: __logical_4_l4)\n\n2006-04-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/26822\n\t* intrinsic.c (add_functions): Mark LOGICAL as elemental.\n\n\tPR fortran/26787\n\t* expr.c (gfc_check_assign): Extend scope of error to include\n\tassignments to a procedure in the main program or, from a\n\tmodule or internal procedure that is not that represented by\n\tthe lhs symbol. Use VARIABLE rather than l-value in message.\n\n\tPR fortran/27096\n\t* trans-array.c (gfc_trans_deferred_array): If the backend_decl\n\tis not a descriptor, dereference and then test and use the type.\n\n\tPR fortran/25597\n\t* trans-decl.c (gfc_trans_deferred_vars): Check if an array\n\tresult, is also automatic character length.  If so, process\n\tthe character length.\n\n\tPR fortran/18803\n\tPR fortran/25669\n\tPR fortran/26834\n\t* trans_intrinsic.c (gfc_walk_intrinsic_bound): Set\n\tdata.info.dimen for bound intrinsics.\n\t* trans_array.c (gfc_conv_ss_startstride): Pick out LBOUND and\n\tUBOUND intrinsics and supply their shape information to the ss\n\tand the loop.\n\n\tPR fortran/27124\n\t* trans_expr.c (gfc_trans_function_call):  Add a new block, post,\n\tin to which all the argument post blocks are put.  Add this block\n\tto se->pre after a byref call or to se->post, otherwise.\n\n2006-04-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/26787\n\t* gfortran.dg/proc_assign_1.f90: New test.\n\t* gfortran.dg/procedure_lvalue.f90: Change message.\n\t* gfortran.dg/namelist_4.f90: Add new error.\n\n\tPR fortran/27096\n\t* gfortran.dg/auto_pointer_array_result_1.f90\n\n\tPR fortran/27089\n\t* gfortran.dg/specification_type_resolution_1.f90\n\n\tPR fortran/18803\n\tPR fortran/25669\n\tPR fortran/26834\n\t* gfortran.dg/bounds_temporaries_1.f90: New test.\n\n\tPR fortran/27124\n\t* gfortran.dg/array_return_value_1.f90: New test.\n\nFrom-SVN: r112981", "tree": {"sha": "91336ea3d66ad4b06a4314c5493b7032adfe1c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91336ea3d66ad4b06a4314c5493b7032adfe1c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5f701ad0010445cfff157bda3d08441ab0e82f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f701ad0010445cfff157bda3d08441ab0e82f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f701ad0010445cfff157bda3d08441ab0e82f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f701ad0010445cfff157bda3d08441ab0e82f4/comments", "author": null, "committer": null, "parents": [{"sha": "7fe25d1a558e736813076d49f7e7ef8a502ee37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe25d1a558e736813076d49f7e7ef8a502ee37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe25d1a558e736813076d49f7e7ef8a502ee37c"}], "stats": {"total": 439, "additions": 427, "deletions": 12}, "files": [{"sha": "24af5f628808d6798309bd85b509b0ad5dc6de28", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -1,3 +1,37 @@\n+2006-04-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/26822\n+\t* intrinsic.c (add_functions): Mark LOGICAL as elemental.\n+\n+\tPR fortran/26787\n+\t* expr.c (gfc_check_assign): Extend scope of error to include\n+\tassignments to a procedure in the main program or, from a\n+\tmodule or internal procedure that is not that represented by\n+\tthe lhs symbol. Use VARIABLE rather than l-value in message.\n+\n+\tPR fortran/27096\n+\t* trans-array.c (gfc_trans_deferred_array): If the backend_decl\n+\tis not a descriptor, dereference and then test and use the type.\n+\n+\tPR fortran/25597\n+\t* trans-decl.c (gfc_trans_deferred_vars): Check if an array\n+\tresult, is also automatic character length.  If so, process\n+\tthe character length.\n+\n+\tPR fortran/18803\n+\tPR fortran/25669\n+\tPR fortran/26834\n+\t* trans_intrinsic.c (gfc_walk_intrinsic_bound): Set\n+\tdata.info.dimen for bound intrinsics.\n+\t* trans_array.c (gfc_conv_ss_startstride): Pick out LBOUND and\n+\tUBOUND intrinsics and supply their shape information to the ss\n+\tand the loop.\n+\n+\tPR fortran/27124\n+\t* trans_expr.c (gfc_trans_function_call):  Add a new block, post,\n+\tin to which all the argument post blocks are put.  Add this block\n+\tto se->pre after a byref call or to se->post, otherwise.\n+\n 2006-04-14  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-io.c (set_string): Use fold_build2 and build_int_cst instead"}, {"sha": "5ecc829f1cbd905857190db0e8649b3fa68495ef", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -1863,13 +1863,49 @@ gfc_check_assign (gfc_expr * lvalue, gfc_expr * rvalue, int conform)\n       return FAILURE;\n     }\n \n-  if (sym->attr.flavor == FL_PROCEDURE && sym->attr.use_assoc)\n+/* 12.5.2.2, Note 12.26: The result variable is very similar to any other\n+   variable local to a function subprogram.  Its existence begins when\n+   execution of the function is initiated and ends when execution of the\n+   function is terminated.....\n+   Therefore, the left hand side is no longer a varaiable, when it is:*/\n+  if (sym->attr.flavor == FL_PROCEDURE\n+\t&& sym->attr.proc != PROC_ST_FUNCTION\n+\t&& !sym->attr.external)\n     {\n-      gfc_error (\"'%s' in the assignment at %L cannot be an l-value \"\n-\t\t \"since it is a procedure\", sym->name, &lvalue->where);\n-      return FAILURE;\n-    }\n+      bool bad_proc;\n+      bad_proc = false;\n+\n+      /* (i) Use associated; */\n+      if (sym->attr.use_assoc)\n+\tbad_proc = true;\n+\n+      /* (ii) The assignement is in the main program; or  */\n+      if (gfc_current_ns->proc_name->attr.is_main_program)\n+\tbad_proc = true;\n+\n+      /* (iii) A module or internal procedure....  */\n+      if ((gfc_current_ns->proc_name->attr.proc == PROC_INTERNAL\n+\t     || gfc_current_ns->proc_name->attr.proc == PROC_MODULE)\n+\t  && gfc_current_ns->parent\n+\t  && (!(gfc_current_ns->parent->proc_name->attr.function\n+\t\t  || gfc_current_ns->parent->proc_name->attr.subroutine)\n+\t      || gfc_current_ns->parent->proc_name->attr.is_main_program))\n+\t{\n+\t  /* .... that is not a function.... */ \n+\t  if (!gfc_current_ns->proc_name->attr.function)\n+\t    bad_proc = true;\n+\n+\t  /* .... or is not an entry and has a different name.  */\n+\t  if (!sym->attr.entry && sym->name != gfc_current_ns->proc_name->name)\n+\t    bad_proc = true;\n+\t}\n \n+      if (bad_proc)\n+\t{\n+\t  gfc_error (\"'%s' at %L is not a VALUE\", sym->name, &lvalue->where);\n+\t  return FAILURE;\n+\t}\n+    }\n \n   if (rvalue->rank != 0 && lvalue->rank != rvalue->rank)\n     {"}, {"sha": "78289227d7d40e8774cfe26537a6cd71ddd293ff", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -1670,7 +1670,7 @@ add_functions (void)\n \n   make_generic (\"log10\", GFC_ISYM_LOG10, GFC_STD_F77);\n \n-  add_sym_2 (\"logical\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_2 (\"logical\", 1, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_logical, gfc_simplify_logical, gfc_resolve_logical,\n \t     l, BT_LOGICAL, dl, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n "}, {"sha": "f7acb73126948b05d27c931183e2276ab4f02062", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -952,9 +952,17 @@ resolve_generic_f0 (gfc_expr * expr, gfc_symbol * sym)\n \t{\n \t  expr->value.function.name = s->name;\n \t  expr->value.function.esym = s;\n-\t  expr->ts = s->ts;\n+\n+\t  if (s->ts.type != BT_UNKNOWN)\n+\t    expr->ts = s->ts;\n+\t  else if (s->result != NULL && s->result->ts.type != BT_UNKNOWN)\n+\t    expr->ts = s->result->ts;\n+\n \t  if (s->as != NULL)\n \t    expr->rank = s->as->rank;\n+\t  else if (s->result != NULL && s->result->as != NULL)\n+\t    expr->rank = s->result->as->rank;\n+\n \t  return MATCH_YES;\n \t}\n "}, {"sha": "fe8d13ca76e05b9e868827108cc1e00d216f85f0", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -2393,6 +2393,18 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t  loop->dimen = ss->data.info.dimen;\n \t  break;\n \n+\t/* As usual, lbound and ubound are exceptions!.  */\n+\tcase GFC_SS_INTRINSIC:\n+\t  switch (ss->expr->value.function.isym->generic_id)\n+\t    {\n+\t    case GFC_ISYM_LBOUND:\n+\t    case GFC_ISYM_UBOUND:\n+\t      loop->dimen = ss->data.info.dimen;\n+\n+\t    default:\n+\t      break;\n+\t    }\n+\n \tdefault:\n \t  break;\n \t}\n@@ -2418,6 +2430,17 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t    gfc_conv_section_startstride (loop, ss, n);\n \t  break;\n \n+\tcase GFC_SS_INTRINSIC:\n+\t  switch (ss->expr->value.function.isym->generic_id)\n+\t    {\n+\t    /* Fall through to supply start and stride.  */\n+\t    case GFC_ISYM_LBOUND:\n+\t    case GFC_ISYM_UBOUND:\n+\t      break;\n+\t    default:\n+\t      continue;\n+\t    }\n+\n \tcase GFC_SS_CONSTRUCTOR:\n \tcase GFC_SS_FUNCTION:\n \t  for (n = 0; n < ss->data.info.dimen; n++)\n@@ -4391,7 +4414,14 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n \n   /* Get the descriptor type.  */\n   type = TREE_TYPE (sym->backend_decl);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n+  if (!GFC_DESCRIPTOR_TYPE_P (type))\n+    {\n+      /* If the backend_decl is not a descriptor, we must have a pointer\n+\t to one.  */\n+      descriptor = build_fold_indirect_ref (sym->backend_decl);\n+      type = TREE_TYPE (descriptor);\n+      gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n+    }\n \n   /* NULLIFY the data pointer.  */\n   gfc_conv_descriptor_data_set (&fnblock, descriptor, null_pointer_node);"}, {"sha": "4efe4bdb95d7b7237ef78f5497bae12935c3eb06", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -2536,6 +2536,12 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t{\n \t  tree result = TREE_VALUE (current_fake_result_decl);\n \t  fnbody = gfc_trans_dummy_array_bias (proc_sym, result, fnbody);\n+\n+\t  /* An automatic character length, pointer array result.  */\n+\t  if (proc_sym->ts.type == BT_CHARACTER\n+\t\t&& TREE_CODE (proc_sym->ts.cl->backend_decl) == VAR_DECL)\n+\t    fnbody = gfc_trans_dummy_character (proc_sym, proc_sym->ts.cl,\n+\t\t\t\t\t\tfnbody);\n \t}\n       else if (proc_sym->ts.type == BT_CHARACTER)\n \t{"}, {"sha": "4eceab6876ec64bd39d6c303d13a9c2b15436417", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -1832,6 +1832,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   gfc_charlen cl;\n   gfc_expr *e;\n   gfc_symbol *fsym;\n+  stmtblock_t post;\n \n   arglist = NULL_TREE;\n   retargs = NULL_TREE;\n@@ -1861,6 +1862,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   else\n     info = NULL;\n \n+  gfc_init_block (&post);\n   gfc_init_interface_mapping (&mapping);\n   need_interface_mapping = ((sym->ts.type == BT_CHARACTER\n \t\t\t\t  && sym->ts.cl->length\n@@ -1970,7 +1972,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \tgfc_add_interface_mapping (&mapping, fsym, &parmse);\n \n       gfc_add_block_to_block (&se->pre, &parmse.pre);\n-      gfc_add_block_to_block (&se->post, &parmse.post);\n+      gfc_add_block_to_block (&post, &parmse.post);\n \n       /* Character strings are passed as two parameters, a length and a\n          pointer.  */\n@@ -2177,6 +2179,12 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t}\n     }\n \n+  /* Follow the function call with the argument post block.  */\n+  if (byref)\n+    gfc_add_block_to_block (&se->pre, &post);\n+  else\n+    gfc_add_block_to_block (&se->post, &post);\n+\n   return has_alternate_specifier;\n }\n "}, {"sha": "1abc79aa69b3a21c725b9df302279ea52ad77c32", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -3710,6 +3710,7 @@ gfc_walk_intrinsic_bound (gfc_ss * ss, gfc_expr * expr)\n   newss->type = GFC_SS_INTRINSIC;\n   newss->expr = expr;\n   newss->next = ss;\n+  newss->data.info.dimen = 1;\n \n   return newss;\n }"}, {"sha": "d02f439ae3723844e32fd933fae16e07e8070604", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -1,3 +1,25 @@\n+2006-04-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/26787\n+\t* gfortran.dg/proc_assign_1.f90: New test.\n+\t* gfortran.dg/procedure_lvalue.f90: Change message.\n+\t* gfortran.dg/namelist_4.f90: Add new error.\n+\n+\tPR fortran/25597\n+\tPR fortran/27096\n+\t* gfortran.dg/auto_pointer_array_result_1.f90\n+\n+\tPR fortran/27089\n+\t* gfortran.dg/specification_type_resolution_1.f90\n+\n+\tPR fortran/18803\n+\tPR fortran/25669\n+\tPR fortran/26834\n+\t* gfortran.dg/bounds_temporaries_1.f90: New test.\n+\n+\tPR fortran/27124\n+\t* gfortran.dg/array_return_value_1.f90: New test.\n+\n 2006-04-15  Jerry DeLisle <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/25336"}, {"sha": "45699ffd7d59719b6f401585b1d8fe70bbb15044", "filename": "gcc/testsuite/gfortran.dg/array_return_value_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_return_value_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_return_value_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_return_value_1.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! Tests the fix for PR27124 in which the unpacking of argument\n+! temporaries and of array result temporaries occurred in the\n+! incorrect order.\n+! \n+! Test is based on the original example, provided by\n+! Philippe Schaffnit <P.Schaffnit@access.rwth-aachen.de>\n+!\n+  PROGRAM Test\n+    INTEGER :: Array(2, 3) = reshape ((/1,4,2,5,3,6/),(/2,3/))\n+    integer :: Brray(2, 3) = 0\n+    Brray(1,:) = Function_Test (Array(1,:))\n+    if (any(reshape (Brray, (/6/)) .ne. (/11, 0, 12, 0, 13, 0/))) call abort ()\n+    Array(1,:) = Function_Test (Array(1,:))\n+    if (any(reshape (Array, (/6/)) .ne. (/11, 4, 12, 5, 13, 6/))) call abort ()\n+\n+  contains\n+      FUNCTION Function_Test (Input)\n+          INTEGER, INTENT(IN) :: Input(1:3)\n+          INTEGER :: Function_Test(1:3)\n+          Function_Test = Input + 10\n+      END FUNCTION Function_Test\n+  END PROGRAM Test\n+"}, {"sha": "8e3eb94c261c00389f81409a8fed79d5d828015b", "filename": "gcc/testsuite/gfortran.dg/auto_char_pointer_array_result_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_pointer_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_pointer_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_pointer_array_result_1.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! Tests the fixes for PR25597 and PR27096.\n+!\n+! This test combines the PR testcases.\n+!\n+  character(10), dimension (2) :: implicit_result\n+  character(10), dimension (2) :: explicit_result\n+  character(10), dimension (2) :: source\n+  source = \"abcdefghij\"\n+  explicit_result = join_1(source)\n+  if (any (explicit_result .ne. source)) call abort () \n+\n+  implicit_result = reallocate_hnv (source, size(source, 1), LEN (source))\n+  if (any (implicit_result .ne. source)) call abort () \n+\n+contains\n+\n+! This function would cause an ICE in gfc_trans_deferred_array.\n+  function join_1(self) result(res)\n+    character(len=*), dimension(:) :: self\n+    character(len=len(self)), dimension(:), pointer :: res\n+    allocate (res(2))\n+    res = self\n+  end function\n+\n+! This function originally ICEd and latterly caused a runtime error.\n+  FUNCTION reallocate_hnv(p, n, LEN)\n+    CHARACTER(LEN=LEN), DIMENSION(:), POINTER :: reallocate_hnv\n+    character(*), dimension(:) :: p\n+    ALLOCATE (reallocate_hnv(n))\n+    reallocate_hnv = p\n+  END FUNCTION reallocate_hnv\n+\n+end\n+\n+ "}, {"sha": "7e7cde5fbdd2b50d12e17ad8eabec7122e6dc0a6", "filename": "gcc/testsuite/gfortran.dg/auto_pointer_array_result_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_pointer_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_pointer_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_pointer_array_result_1.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! Tests the fixes for PR25597 and PR27096.\n+!\n+! This test combines the PR testcases.\n+!\n+  character(10), dimension (2) :: implicit_result\n+  character(10), dimension (2) :: explicit_result\n+  character(10), dimension (2) :: source\n+  source = \"abcdefghij\"\n+  explicit_result = join_1(source)\n+  if (any (explicit_result .ne. source)) call abort () \n+\n+  implicit_result = reallocate_hnv (source, size(source, 1), LEN (source))\n+  if (any (implicit_result .ne. source)) call abort () \n+\n+contains\n+\n+! This function would cause an ICE in gfc_trans_deferred_array.\n+  function join_1(self) result(res)\n+    character(len=*), dimension(:) :: self\n+    character(len=len(self)), dimension(:), pointer :: res\n+    allocate (res(2))\n+    res = self\n+  end function\n+\n+! This function originally ICEd and latterly caused a runtime error.\n+  FUNCTION reallocate_hnv(p, n, LEN)\n+    CHARACTER(LEN=LEN), DIMENSION(:), POINTER :: reallocate_hnv\n+    character(*), dimension(:) :: p\n+    ALLOCATE (reallocate_hnv(n))\n+    reallocate_hnv = p\n+  END FUNCTION reallocate_hnv\n+\n+end\n+\n+"}, {"sha": "a277566735d4f1c5adda173dd2551de4d2c4b8cc", "filename": "gcc/testsuite/gfortran.dg/bounds_temporaries_1.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do compile }\n+! This tests the fix for PRs 26834, 25669 and 18803, in which\n+! shape information for the lbound and ubound intrinsics was not\n+! transferred to the scalarizer.  For this reason, an ICE would\n+! ensue, whenever these functions were used in temporaries.\n+!\n+! The tests are lifted from the PRs and some further checks are\n+! done to make sure that nothing is broken.\n+!\n+! This is PR26834\n+subroutine gfcbug34 ()\n+  implicit none\n+  type t\n+     integer, pointer :: i (:) => NULL ()\n+  end type t\n+  type(t), save :: gf\n+  allocate (gf%i(20))\n+  write(*,*) 'ubound:', ubound (gf% i)\n+  write(*,*) 'lbound:', lbound (gf% i)\n+end subroutine gfcbug34\n+\n+! This is PR25669\n+subroutine foo (a)\n+  real a(*)\n+  call bar (a, LBOUND(a),2)\n+end subroutine foo\n+subroutine bar (b, i, j)\n+  real b(i:j)\n+  print *, i, j\n+  print *, b(i:j)\n+end subroutine bar\n+\n+! This is PR18003\n+subroutine io_bug()\n+  integer :: a(10)\n+  print *, ubound(a)\n+end subroutine io_bug\n+\n+! This checks that lbound and ubound are OK in  temporary\n+! expressions.\n+subroutine io_bug_plus()\n+  integer :: a(10, 10), b(2)\n+  print *, ubound(a)*(/1,2/)\n+  print *, (/1,2/)*ubound(a)\n+end subroutine io_bug_plus\n+\n+  character(4) :: ch(2), ech(2) = (/'ABCD', 'EFGH'/)\n+  real(4) :: a(2)\n+  equivalence (ech,a)  ! { dg-warning \"default CHARACTER EQUIVALENCE statement\" }\n+  integer(1) :: i(8) = (/(j, j = 1,8)/)\n+\n+! Check that the bugs have gone\n+  call io_bug ()\n+  call io_bug_plus ()\n+  call foo ((/1.0,2.0,3.0/))\n+  call gfcbug34 ()\n+\n+! Check that we have not broken other intrinsics.\n+  print *, cos ((/1.0,2.0/))\n+  print *, transfer (a, ch)\n+  print *, i(1:4) * transfer (a, i, 4) * 2\n+end\n+\n+"}, {"sha": "52a5bc9938cb510a42a85739fadb2de53fc91b3a", "filename": "gcc/testsuite/gfortran.dg/namelist_4.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_4.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -28,8 +28,9 @@ program P1\n CONTAINS\r\n ! This has the additional wrinkle of a reference to the object.\r\n   INTEGER FUNCTION F1()\r\n-    NAMELIST /NML3/ F2 ! { dg-error \"PROCEDURE attribute conflicts\" }\r\n-    f2 = 1     ! Used to ICE here\r\n+    NAMELIST /NML3/ F2 ! { dg-error \"PROCEDURE attribute conflicts\" }\n+! Used to ICE here\r\n+    f2 = 1             ! { dg-error \"is not a VALUE\" }\r\n     F1=1\r\n   END FUNCTION\r\n   INTEGER FUNCTION F2()\r"}, {"sha": "a0f725080c231158b8f594a9543c5df69afc7623", "filename": "gcc/testsuite/gfortran.dg/proc_assign_1.f90", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_1.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -0,0 +1,78 @@\n+! { dg-do compile }\r\n+! This tests the patch for PR26787 in which it was found that setting\r\n+! the result of one module procedure from within another produced an\r\n+! ICE rather than an error.\r\n+!\r\n+! This is an \"elaborated\" version of the original testcase from\r\n+! Joshua Cogliati  <jjcogliati-r1@yahoo.com>\r\n+!\r\n+function ext1 ()\r\n+    integer ext1, ext2, arg\r\n+    ext1 = 1\r\n+    entry ext2 (arg)\r\n+    ext2 = arg\r\n+contains\r\n+    subroutine int_1 ()\r\n+        ext1 = arg * arg     ! OK - host associated.\r\n+    end subroutine int_1\r\n+end function ext1\r\n+\r\n+module simple\r\n+    implicit none\r\n+contains\r\n+    integer function foo () \r\n+         foo = 10            ! OK - function result\r\n+         call foobar ()\r\n+    contains\r\n+        subroutine foobar ()\r\n+            integer z\r\n+            foo = 20         ! OK - host associated.\r\n+        end subroutine foobar\r\n+    end function foo\r\n+    subroutine bar()         ! This was the original bug.\r\n+        foo = 10             ! { dg-error \"is not a VALUE\" }\r\n+    end subroutine bar\r\n+    integer function oh_no ()\r\n+        oh_no = 1\r\n+        foo = 5              ! { dg-error \"is not a VALUE\" }\r\n+    end function oh_no\r\n+end module simple\r\n+\r\n+module simpler\r\n+    implicit none\r\n+contains\r\n+    integer function foo_er () \r\n+         foo_er = 10         ! OK - function result\r\n+    end function foo_er\r\n+end module simpler\r\n+\r\n+    use simpler\r\n+    real w, stmt_fcn\r\n+    interface\r\n+\tfunction ext1 ()\r\n+\t    integer ext1\r\n+\tend function ext1\r\n+\tfunction ext2 (arg)\r\n+\t    integer ext2, arg\r\n+\tend function ext2\r\n+    end interface\r\n+    stmt_fcn (w) = sin (w)     \r\n+    call x (y ())\r\n+    x = 10                   ! { dg-error \"Expected VARIABLE\" }\r\n+    y = 20                   ! { dg-error \"is not a VALUE\" }\r\n+    foo_er = 8               ! { dg-error \"is not a VALUE\" }\r\n+    ext1 = 99                ! { dg-error \"is not a VALUE\" }\r\n+    ext2 = 99                ! { dg-error \"is not a VALUE\" }\r\n+    stmt_fcn = 1.0           ! { dg-error \"Expected VARIABLE\" }\r\n+    w = stmt_fcn (1.0)\r\n+contains\r\n+    subroutine x (i)\r\n+        integer i\r\n+        y = i                ! { dg-error \"is not a VALUE\" }\r\n+    end subroutine x\r\n+    function y ()\r\n+        integer y\r\n+        y = 2                ! OK - function result\r\n+    end function y\r\n+end\r\n+! { dg-final { cleanup-modules \"simple simpler\" } }\n\\ No newline at end of file"}, {"sha": "634eaca0e27e1814174e3ad0599e5dfd33c5e5f7", "filename": "gcc/testsuite/gfortran.dg/procedure_lvalue.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -14,7 +14,7 @@ end module t\n \n subroutine r\n   use t\n-  b = 1.       ! { dg-error \"l-value since it is a procedure\" }\n+  b = 1.       ! { dg-error \"is not a VALUE\" }\n   y = a(1.)\n end subroutine r\n "}, {"sha": "b830b5dfc7d6f874337de8531a0c25f8fdfa63b3", "filename": "gcc/testsuite/gfortran.dg/specification_type_resolution_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecification_type_resolution_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f701ad0010445cfff157bda3d08441ab0e82f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecification_type_resolution_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecification_type_resolution_1.f90?ref=f5f701ad0010445cfff157bda3d08441ab0e82f4", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! Test of the fix of PR27089, where gfortran was unable to resolve the\n+! type of n_elements_uncommon_with_ in the specification expression on\n+! line 21.\n+!\n+! Test extracted from vec{int}.F90 of tonto.\n+!\n+module test\n+   public    n_elements_uncommon_with_\n+   interface n_elements_uncommon_with_\n+      module procedure n_elements_uncommon_with\n+   end interface\n+contains\n+   pure function n_elements_uncommon_with(x) result(res)\n+      integer(4), dimension(:), intent(in) :: x\n+      integer(4) :: res\n+      res = size (x, 1)\n+   end function\n+   pure function elements_uncommon_with(x) result(res)\n+      integer(4), dimension(:), intent(in) :: x\n+      integer(4), dimension(n_elements_uncommon_with_(x)) :: res\n+      res = x\n+   end function\n+end module test\n+   use test\n+   integer(4) :: z(4)\n+   z = 1\n+   print *, elements_uncommon_with (z)\n+   print *, n_elements_uncommon_with_ (z)\n+end\n+! { dg-final { cleanup-modules \"test\" } }"}]}