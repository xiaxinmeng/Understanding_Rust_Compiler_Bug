{"sha": "bd2e63a1c4d4159f576c31bee9e4090919462aa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyZTYzYTFjNGQ0MTU5ZjU3NmMzMWJlZTllNDA5MDkxOTQ2MmFhNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-06-17T12:22:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-06-17T12:22:22Z"}, "message": "gimplify.c (gimplify_bind_expr): Always promote complex and vector variables to registers if possible.\n\n2010-06-17  Richard Guenther  <rguenther@suse.de>\n\n\t* gimplify.c (gimplify_bind_expr): Always promote complex\n\tand vector variables to registers if possible.\n\nFrom-SVN: r160903", "tree": {"sha": "d9efed283414c50ff46880e65b6175b134d1a139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9efed283414c50ff46880e65b6175b134d1a139"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2e63a1c4d4159f576c31bee9e4090919462aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2e63a1c4d4159f576c31bee9e4090919462aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2e63a1c4d4159f576c31bee9e4090919462aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2e63a1c4d4159f576c31bee9e4090919462aa5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fa5296e5791829f1ef67de819e5188c58952d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa5296e5791829f1ef67de819e5188c58952d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa5296e5791829f1ef67de819e5188c58952d67"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "2f93800cbabacbd6ac617a5eca8cb8a436b1aa78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2e63a1c4d4159f576c31bee9e4090919462aa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2e63a1c4d4159f576c31bee9e4090919462aa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd2e63a1c4d4159f576c31bee9e4090919462aa5", "patch": "@@ -1,3 +1,8 @@\n+2010-06-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimplify.c (gimplify_bind_expr): Always promote complex\n+\tand vector variables to registers if possible.\n+\n 2010-06-17  Richard Guenther  <rguenther@suse.de>\n \n \t* expr.c (get_inner_reference): Use double_int for bit_offset"}, {"sha": "a374bdaec5f23a68764f4e5a38b7e75256437d69", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2e63a1c4d4159f576c31bee9e4090919462aa5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2e63a1c4d4159f576c31bee9e4090919462aa5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=bd2e63a1c4d4159f576c31bee9e4090919462aa5", "patch": "@@ -1153,14 +1153,9 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \n       /* Preliminarily mark non-addressed complex variables as eligible\n \t for promotion to gimple registers.  We'll transform their uses\n-\t as we find them.\n-\t We exclude complex types if not optimizing because they can be\n-\t subject to partial stores in GNU C by means of the __real__ and\n-\t __imag__ operators and we cannot promote them to total stores\n-\t (see gimplify_modify_expr_complex_part).  */\n-      if (optimize\n-\t  && (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-\t      || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n+\t as we find them.  */\n+      if ((TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n+\t   || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n \t  && !TREE_THIS_VOLATILE (t)\n \t  && (TREE_CODE (t) == VAR_DECL && !DECL_HARD_REGISTER (t))\n \t  && !needs_to_live_in_memory (t))"}]}