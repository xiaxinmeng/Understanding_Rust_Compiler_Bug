{"sha": "c517295940a23db8ca165dfd5d0edea4457eda49", "node_id": "C_kwDOANBUbNoAKGM1MTcyOTU5NDBhMjNkYjhjYTE2NWRmZDVkMGVkZWE0NDU3ZWRhNDk", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2023-01-21T16:10:59Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2023-01-22T19:11:34Z"}, "message": "pru: Fix CLZ expansion for QI and HI modes\n\nThe recent gcc.dg/tree-ssa/clz-char.c test case failed for PRU target,\nexposing a wrong code generation bug in the PRU backend.  The \"clz\"\npattern did not produce correct output for QI and HI input operand\nmodes.  SI mode is ok.\n\nThe \"clz\" pattern is expanded to an LMBD instruction to get the\nleft-most bit position having value \"1\".  In turn, to get the correct\n\"clz\" value, that bit position must be subtracted from the MSB bit\nposition of the input operand.  The old behaviour of hard-coding 31\nfor MSB bit position is wrong.\n\nThe LMBD instruction returns 32 if input operand is zero, irrespective\nof its register mode.  This maps nicely for SI mode, where the \"clz\"\npattern outputs -1.  It also leads to peculiar (but valid!) output\nvalues from the \"clz\" pattern for QI and HI zero-valued inputs.\n\ngcc/ChangeLog:\n\n\t* config/pru/pru.h (CLZ_DEFINED_VALUE_AT_ZERO): Fix value for QI\n\tand HI input modes.\n\t* config/pru/pru.md (clz): Fix generated code for QI and HI\n\tinput modes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/pru/clz-hi-2.c: New test.\n\t* gcc.target/pru/clz-hi.c: New test.\n\nSigned-off-by: Dimitar Dimitrov <dimitar@dinux.eu>", "tree": {"sha": "b6d5382d85b8ff98fa167d43ccecebafdd22b689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d5382d85b8ff98fa167d43ccecebafdd22b689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c517295940a23db8ca165dfd5d0edea4457eda49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c517295940a23db8ca165dfd5d0edea4457eda49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c517295940a23db8ca165dfd5d0edea4457eda49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c517295940a23db8ca165dfd5d0edea4457eda49/comments", "author": null, "committer": null, "parents": [{"sha": "011c0c29a2452e588f255673238460da4167c4c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011c0c29a2452e588f255673238460da4167c4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011c0c29a2452e588f255673238460da4167c4c0"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "1b5e874bc06bc7794a75047648b4ec3ee7a42ec3", "filename": "gcc/config/pru/pru.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Fconfig%2Fpru%2Fpru.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Fconfig%2Fpru%2Fpru.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.h?ref=c517295940a23db8ca165dfd5d0edea4457eda49", "patch": "@@ -566,8 +566,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define CASE_VECTOR_MODE Pmode\n \n-/* See definition of clz pattern for rationale of value -1.  */\n-#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = -1, 2)\n+/* See definition of clz pattern for rationale of the value.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)\t\\\n+\t((VALUE) = GET_MODE_BITSIZE (MODE) - 1 - 32, 2)\n \n /* Jumps are cheap on PRU.  */\n #define LOGICAL_OP_NON_SHORT_CIRCUIT\t\t0"}, {"sha": "6deb5ecfecb3687e4746d0ee0e25477492b3a20e", "filename": "gcc/config/pru/pru.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Fconfig%2Fpru%2Fpru.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Fconfig%2Fpru%2Fpru.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.md?ref=c517295940a23db8ca165dfd5d0edea4457eda49", "patch": "@@ -1723,8 +1723,16 @@\n   [(set_attr \"type\" \"control\")])\n \n ;; Count Leading Zeros implemented using LMBD.\n-;; LMBD returns 32 if bit value is not present, and we subtract 31 to get CLZ.\n-;; Hence we get a defined value -1 for CLZ_DEFINED_VALUE_AT_ZERO.\n+;;\n+;; LMBD returns 32 if bit value is not present, for any kind of input MODE.\n+;; The LMBD's search result for a \"1\" bit is subtracted from the\n+;; mode bit size minus one, in order to get CLZ.\n+;;\n+;; Hence for SImode we get a defined value -1 for CLZ_DEFINED_VALUE_AT_ZERO.\n+;;\n+;; The QImode and HImode defined values for zero inputs end up to be\n+;; non-standard (-25 and -17).  But this is considered acceptable in\n+;; order to keep the CLZ expansion to only two instructions.\n (define_expand \"clz<mode>2\"\n   [(set (match_operand:QISI 0 \"register_operand\")\n \t(clz:QISI (match_operand:QISI 1 \"register_operand\")))]\n@@ -1735,7 +1743,8 @@\n   rtx tmpval = gen_reg_rtx (<MODE>mode);\n \n   emit_insn (gen_pru_lmbd (<MODE>mode, tmpval, src, const1_rtx));\n-  emit_insn (gen_sub3_insn (dst, GEN_INT (31), tmpval));\n+  int msb_bitn = GET_MODE_BITSIZE (<MODE>mode) - 1;\n+  emit_insn (gen_sub3_insn (dst, GEN_INT (msb_bitn), tmpval));\n   DONE;\n })\n "}, {"sha": "af877c7021ec43f051fefad4145debd72feb6a1b", "filename": "gcc/testsuite/gcc.target/pru/clz-hi-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclz-hi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclz-hi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclz-hi-2.c?ref=c517295940a23db8ca165dfd5d0edea4457eda49", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-ch\" } */\n+\n+/* This test case is based on gcc.dg/tree-ssa/clz-char.c. */\n+\n+#define PREC (sizeof(short) * 8)\n+\n+int\n+__attribute__ ((noinline, noclone))\n+foo (unsigned short b) {\n+    int c = 0;\n+\n+    if (b == 0)\n+      return PREC;\n+\n+    while (!(b & (1 << (PREC - 1)))) {\n+\tb <<= 1;\n+\tc++;\n+    }\n+\n+    return c;\n+}\n+\n+/* { dg-final { scan-assembler \"lmbd\\\\tr\\[012\\]\\[0-9\\]?.w\\[0-2\\], r\\[012\\]\\[0-9\\]?.w\\[0-2\\], 1\" } } */"}, {"sha": "9350913b6d50eaf2811aa6e68864f1aa7eb83d49", "filename": "gcc/testsuite/gcc.target/pru/clz-hi.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclz-hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c517295940a23db8ca165dfd5d0edea4457eda49/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclz-hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclz-hi.c?ref=c517295940a23db8ca165dfd5d0edea4457eda49", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-tree-ch -fdump-tree-optimized\" } */\n+\n+/* This test case is based on gcc.dg/tree-ssa/clz-char.c. */\n+\n+#define PREC (sizeof(short) * 8)\n+\n+int\n+__attribute__ ((noinline, noclone))\n+foo (unsigned short b) {\n+    int c = 0;\n+\n+    if (b == 0)\n+      return PREC;\n+\n+    while (!(b & (1 << (PREC - 1)))) {\n+\tb <<= 1;\n+\tc++;\n+    }\n+\n+    return c;\n+}\n+\n+int main()\n+{\n+  if (foo(0) != PREC)\n+    __builtin_abort ();\n+  if (foo(1 << (PREC - 1)) != 0)\n+    __builtin_abort ();\n+  if (foo(35) != PREC - 6)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_clz|\\\\.CLZ\" 1 \"optimized\" } } */"}]}