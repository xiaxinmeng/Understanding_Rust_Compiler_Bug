{"sha": "052aaaceed25c962791b0b973f66febabaf47574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyYWFhY2VlZDI1Yzk2Mjc5MWIwYjk3M2Y2NmZlYmFiYWY0NzU3NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-11T11:46:43Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-11T11:46:43Z"}, "message": "[nvptx] Don't allow vector_length 64 with num_workers 16\n\nWhen using a compiler build with:\n...\n+#define PTX_DEFAULT_VECTOR_LENGTH PTX_CTA_SIZE\n...\n\nconsider a test-case:\n...\nint\nmain (void)\n{\n  #pragma acc parallel vector_length (64)\n    #pragma acc loop worker\n    for (unsigned int i = 0; i < 32; i++)\n      #pragma acc loop vector\n      for (unsigned int j = 0; j < 64; j++)\n        ;\n\n  return 0;\n}\n...\n\nIf num_workers is 16, either because:\n- we add a \"num_workers (16)\" clause on the parallel directive, or\n- we set \"GOMP_OPENACC_DIM=:16:\", or\n- the libgomp plugin chooses 16 num_workers\nwe run into an illegal instruction at runtime, because a bar.sync instruction\ntries to use a barrier 16.  The instruction is illegal, because ptx supports\nonly 16 barriers per CTA, and the valid range is 0..15.\n\nThe problem is that with a warp-multiple vector length, we use a code generation\nscheme with a per-worker barrier.  And because barrier zero is reserved for\nper-cta barrier, only the remaining 15 barriers can be used as per-worker\nbarrier, and consequently we can't use num_workers larger than 15.\n\nThis problem occurs only for vector_length 64.  For vector_length 32, we use a\ndifferent code generation scheme, and for vector_length >= 96, the maximum\nnum_workers is not big enough not to trigger this problem.\n\nAlso, this problem only occurs for num_workers 16.  As explained above,\nnum_workers 15 is safe to use, and 16 is already the maximum num_workers for\nvector_length 64.\n\nThis patch fixes the problem in both the compiler (handling \"num_workers (16)\")\nand in the libgomp nvptx plugin (with and without \"GOMP_OPENACC_DIM=:16:\").\n\n2019-01-11  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.c (PTX_CTA_NUM_BARRIERS, PTX_PER_CTA_BARRIER)\n\t(PTX_NUM_PER_CTA_BARRIER, PTX_FIRST_PER_WORKER_BARRIER)\n\t(PTX_NUM_PER_WORKER_BARRIERS): Define.\n\t(nvptx_apply_dim_limits): Prevent vector_length 64 and\n\tnum_workers 16.\n\n\t* plugin/plugin-nvptx.c (nvptx_exec): Prevent vector_length 64 and\n\tnum_workers 16.\n\nFrom-SVN: r267838", "tree": {"sha": "e9d728a762d31429ac27e46323b2f78e0dc44696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d728a762d31429ac27e46323b2f78e0dc44696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052aaaceed25c962791b0b973f66febabaf47574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052aaaceed25c962791b0b973f66febabaf47574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052aaaceed25c962791b0b973f66febabaf47574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052aaaceed25c962791b0b973f66febabaf47574/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69b09a587dfddff912bfd1e5d69d3cb0d67c3895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b09a587dfddff912bfd1e5d69d3cb0d67c3895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b09a587dfddff912bfd1e5d69d3cb0d67c3895"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "5d9c536e41411f63f74e0b55f29d77deefab8b5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052aaaceed25c962791b0b973f66febabaf47574/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052aaaceed25c962791b0b973f66febabaf47574/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=052aaaceed25c962791b0b973f66febabaf47574", "patch": "@@ -1,3 +1,11 @@\n+2019-01-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (PTX_CTA_NUM_BARRIERS, PTX_PER_CTA_BARRIER)\n+\t(PTX_NUM_PER_CTA_BARRIER, PTX_FIRST_PER_WORKER_BARRIER)\n+\t(PTX_NUM_PER_WORKER_BARRIERS): Define.\n+\t(nvptx_apply_dim_limits): Prevent vector_length 64 and\n+\tnum_workers 16.\n+\n 2019-01-11  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.c (PTX_CTA_SIZE): Move up."}, {"sha": "b37010ff58ed586136d2b6d5cde56707def185c3", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052aaaceed25c962791b0b973f66febabaf47574/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052aaaceed25c962791b0b973f66febabaf47574/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=052aaaceed25c962791b0b973f66febabaf47574", "patch": "@@ -87,8 +87,14 @@\n    2.x.  */\n #define PTX_CTA_SIZE 1024\n \n+#define PTX_CTA_NUM_BARRIERS 16\n #define PTX_WARP_SIZE 32\n \n+#define PTX_PER_CTA_BARRIER 0\n+#define PTX_NUM_PER_CTA_BARRIERS 1\n+#define PTX_FIRST_PER_WORKER_BARRIER (PTX_NUM_PER_CTA_BARRIERS)\n+#define PTX_NUM_PER_WORKER_BARRIERS (PTX_CTA_NUM_BARRIERS - PTX_NUM_PER_CTA_BARRIERS)\n+\n #define PTX_DEFAULT_VECTOR_LENGTH PTX_WARP_SIZE\n #define PTX_MAX_VECTOR_LENGTH PTX_WARP_SIZE\n #define PTX_WORKER_LENGTH 32\n@@ -5496,6 +5502,13 @@ nvptx_apply_dim_limits (int dims[])\n   if (dims[GOMP_DIM_WORKER] > 0 &&  dims[GOMP_DIM_VECTOR] > 0\n       && dims[GOMP_DIM_WORKER] * dims[GOMP_DIM_VECTOR] > PTX_CTA_SIZE)\n     dims[GOMP_DIM_VECTOR] = PTX_WARP_SIZE;\n+\n+  /* If we need a per-worker barrier ... .  */\n+  if (dims[GOMP_DIM_WORKER] > 0 &&  dims[GOMP_DIM_VECTOR] > 0\n+      && dims[GOMP_DIM_VECTOR] > PTX_WARP_SIZE)\n+    /* Don't use more barriers than available.  */\n+    dims[GOMP_DIM_WORKER] = MIN (dims[GOMP_DIM_WORKER],\n+\t\t\t\t PTX_NUM_PER_WORKER_BARRIERS);\n }\n \n /* Return true if FNDECL contains calls to vector-partitionable routines.  */"}, {"sha": "8c04d5a53f42f6e1041c2f010216c70f2671952b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052aaaceed25c962791b0b973f66febabaf47574/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052aaaceed25c962791b0b973f66febabaf47574/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=052aaaceed25c962791b0b973f66febabaf47574", "patch": "@@ -1,3 +1,8 @@\n+2019-01-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* plugin/plugin-nvptx.c (nvptx_exec): Prevent vector_length 64 and\n+\tnum_workers 16.\n+\n 2019-01-11  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.oacc-c-c++-common/reduction-1.c: Remove"}, {"sha": "c80da64c42251c72dd3c35e7b2f4d0d7d8699d0b", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052aaaceed25c962791b0b973f66febabaf47574/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052aaaceed25c962791b0b973f66febabaf47574/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=052aaaceed25c962791b0b973f66febabaf47574", "patch": "@@ -1273,6 +1273,10 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \t\t\t\t      : dims[GOMP_DIM_VECTOR]);\n \t\tworkers = blocks / actual_vectors;\n \t\tworkers = MAX (workers, 1);\n+\t\t/* If we need a per-worker barrier ... .  */\n+\t\tif (actual_vectors > 32)\n+\t\t  /* Don't use more barriers than available.  */\n+\t\t  workers = MIN (workers, 15);\n \t      }\n \n \t    for (i = 0; i != GOMP_DIM_MAX; i++)\n@@ -1303,6 +1307,24 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \t\t\t suggest_workers, suggest_workers);\n     }\n \n+  /* Check if the accelerator has sufficient barrier resources to\n+     launch the offloaded kernel.  */\n+  if (dims[GOMP_DIM_WORKER] > 15 && dims[GOMP_DIM_VECTOR] > 32)\n+    {\n+      const char *msg\n+\t= (\"The Nvidia accelerator has insufficient barrier resources to launch\"\n+\t   \" '%s' with num_workers = %d and vector_length = %d\"\n+\t   \"; \"\n+\t   \"recompile the program with 'num_workers = x' on that offloaded\"\n+\t   \" region or '-fopenacc-dim=:x:' where x <= 15\"\n+\t   \"; \"\n+\t   \"or, recompile the program with 'vector_length = 32' on that\"\n+\t   \" offloaded region\"\n+\t   \".\\n\");\n+\tGOMP_PLUGIN_fatal (msg, targ_fn->launch->fn, dims[GOMP_DIM_WORKER],\n+\t\t\t   dims[GOMP_DIM_VECTOR]);\n+    }\n+\n   /* This reserves a chunk of a pre-allocated page of memory mapped on both\n      the host and the device. HP is a host pointer to the new chunk, and DP is\n      the corresponding device pointer.  */"}]}