{"sha": "c9081a928a5ea257798a8e4d6fd381d4371ae9c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwODFhOTI4YTVlYTI1Nzc5OGE4ZTRkNmZkMzgxZDQzNzFhZTljOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T08:03:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T08:03:15Z"}, "message": "mips.md (UNSPEC_[LS][WD][LR]): Delete in favor of...\n\n\t* config/mips/mips.md (UNSPEC_[LS][WD][LR]): Delete in favor of...\n\t(UNSPEC_{LOAD,STORE}_{LEFT,RIGHT}): ...these new constants.  Shuffle\n\tlater constants to cover the gap.\n\t(load, store): New mode attributes.\n\t(mov_l[wd]l, mov_l[wd]r, mov_s[wd]l, mov_s[wd]r): Redefine using :GPR.\n\tUse new unspec constants.\n\nFrom-SVN: r86414", "tree": {"sha": "7a37a45a56392f1c12e45eb372273148fec815e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a37a45a56392f1c12e45eb372273148fec815e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9081a928a5ea257798a8e4d6fd381d4371ae9c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9081a928a5ea257798a8e4d6fd381d4371ae9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9081a928a5ea257798a8e4d6fd381d4371ae9c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9081a928a5ea257798a8e4d6fd381d4371ae9c8/comments", "author": null, "committer": null, "parents": [{"sha": "3d1f285d085b455b12954bc7162307ed1ae58925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1f285d085b455b12954bc7162307ed1ae58925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1f285d085b455b12954bc7162307ed1ae58925"}], "stats": {"total": 130, "additions": 47, "deletions": 83}, "files": [{"sha": "16cb707726ba686c6bb1ab4dd14f27dbabcd20c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9081a928a5ea257798a8e4d6fd381d4371ae9c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9081a928a5ea257798a8e4d6fd381d4371ae9c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9081a928a5ea257798a8e4d6fd381d4371ae9c8", "patch": "@@ -1,3 +1,12 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (UNSPEC_[LS][WD][LR]): Delete in favor of...\n+\t(UNSPEC_{LOAD,STORE}_{LEFT,RIGHT}): ...these new constants.  Shuffle\n+\tlater constants to cover the gap.\n+\t(load, store): New mode attributes.\n+\t(mov_l[wd]l, mov_l[wd]r, mov_s[wd]l, mov_s[wd]r): Redefine using :GPR.\n+\tUse new unspec constants.\n+\n 2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (one_cmpl[sd]i2): Redefine using :GPR."}, {"sha": "14f3dbda2a8de901ff7f2f79b2d6bfa053db2448", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 38, "deletions": 83, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9081a928a5ea257798a8e4d6fd381d4371ae9c8/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9081a928a5ea257798a8e4d6fd381d4371ae9c8/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c9081a928a5ea257798a8e4d6fd381d4371ae9c8", "patch": "@@ -36,19 +36,15 @@\n    (UNSPEC_CONSTTABLE_FLOAT\t 9)\n    (UNSPEC_ALIGN\t\t14)\n    (UNSPEC_HIGH\t\t\t17)\n-   (UNSPEC_LWL\t\t\t18)\n-   (UNSPEC_LWR\t\t\t19)\n-   (UNSPEC_SWL\t\t\t20)\n-   (UNSPEC_SWR\t\t\t21)\n-   (UNSPEC_LDL\t\t\t22)\n-   (UNSPEC_LDR\t\t\t23)\n-   (UNSPEC_SDL\t\t\t24)\n-   (UNSPEC_SDR\t\t\t25)\n-   (UNSPEC_LOADGP\t\t26)\n-   (UNSPEC_LOAD_CALL\t\t27)\n-   (UNSPEC_LOAD_GOT\t\t28)\n-   (UNSPEC_GP\t\t\t29)\n-   (UNSPEC_MFHILO\t\t30)\n+   (UNSPEC_LOAD_LEFT\t\t18)\n+   (UNSPEC_LOAD_RIGHT\t\t19)\n+   (UNSPEC_STORE_LEFT\t\t20)\n+   (UNSPEC_STORE_RIGHT\t\t21)\n+   (UNSPEC_LOADGP\t\t22)\n+   (UNSPEC_LOAD_CALL\t\t23)\n+   (UNSPEC_LOAD_GOT\t\t24)\n+   (UNSPEC_GP\t\t\t25)\n+   (UNSPEC_MFHILO\t\t26)\n \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n@@ -297,6 +293,10 @@\n ;; 32-bit version and \"dsubu\" in the 64-bit version.\n (define_mode_attr d [(SI \"\") (DI \"d\")])\n \n+;; Mode attributes for GPR loads and stores.\n+(define_mode_attr load [(SI \"lw\") (DI \"ld\")])\n+(define_mode_attr store [(SI \"sw\") (DI \"sd\")])\n+\n ;; The unextended ranges of the MIPS16 addiu and daddiu instructions\n ;; are different.  Some forms of unextended addiu have an 8-bit immediate\n ;; field but the equivalent daddiu has only a 5-bit field.\n@@ -3203,93 +3203,48 @@ beq\\t%2,%.,1b\\;\\\n ;; This allows us to use the standard length calculations for the \"load\"\n ;; and \"store\" type attributes.\n \n-(define_insn \"mov_lwl\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(unspec:SI [(match_operand:BLK 1 \"memory_operand\" \"m\")\n-\t\t    (match_operand:QI 2 \"memory_operand\" \"m\")]\n-\t\t   UNSPEC_LWL))]\n+(define_insn \"mov_<load>l\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(unspec:GPR [(match_operand:BLK 1 \"memory_operand\" \"m\")\n+\t\t     (match_operand:QI 2 \"memory_operand\" \"m\")]\n+\t\t    UNSPEC_LOAD_LEFT))]\n   \"!TARGET_MIPS16\"\n-  \"lwl\\t%0,%2\"\n+  \"<load>l\\t%0,%2\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"mode\" \"SI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"hazard\" \"none\")])\n \n-(define_insn \"mov_lwr\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(unspec:SI [(match_operand:BLK 1 \"memory_operand\" \"m\")\n-\t\t    (match_operand:QI 2 \"memory_operand\" \"m\")\n-\t\t    (match_operand:SI 3 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_LWR))]\n+(define_insn \"mov_<load>r\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(unspec:GPR [(match_operand:BLK 1 \"memory_operand\" \"m\")\n+\t\t     (match_operand:QI 2 \"memory_operand\" \"m\")\n+\t\t     (match_operand:GPR 3 \"register_operand\" \"0\")]\n+\t\t    UNSPEC_LOAD_RIGHT))]\n   \"!TARGET_MIPS16\"\n-  \"lwr\\t%0,%2\"\n+  \"<load>r\\t%0,%2\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"mode\" \"SI\")])\n-\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"mov_swl\"\n+(define_insn \"mov_<store>l\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t(unspec:BLK [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t(unspec:BLK [(match_operand:GPR 1 \"reg_or_0_operand\" \"dJ\")\n \t\t     (match_operand:QI 2 \"memory_operand\" \"m\")]\n-\t\t    UNSPEC_SWL))]\n+\t\t    UNSPEC_STORE_LEFT))]\n   \"!TARGET_MIPS16\"\n-  \"swl\\t%z1,%2\"\n+  \"<store>l\\t%z1,%2\"\n   [(set_attr \"type\" \"store\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"mov_swr\"\n+(define_insn \"mov_<store>r\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"+m\")\n-\t(unspec:BLK [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t(unspec:BLK [(match_operand:GPR 1 \"reg_or_0_operand\" \"dJ\")\n \t\t     (match_operand:QI 2 \"memory_operand\" \"m\")\n \t\t     (match_dup 0)]\n-\t\t    UNSPEC_SWR))]\n+\t\t    UNSPEC_STORE_RIGHT))]\n   \"!TARGET_MIPS16\"\n-  \"swr\\t%z1,%2\"\n+  \"<store>r\\t%z1,%2\"\n   [(set_attr \"type\" \"store\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-\n-(define_insn \"mov_ldl\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(unspec:DI [(match_operand:BLK 1 \"memory_operand\" \"m\")\n-\t\t    (match_operand:QI 2 \"memory_operand\" \"m\")]\n-\t\t   UNSPEC_LDL))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"ldl\\t%0,%2\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mov_ldr\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(unspec:DI [(match_operand:BLK 1 \"memory_operand\" \"m\")\n-\t\t    (match_operand:QI 2 \"memory_operand\" \"m\")\n-\t\t    (match_operand:DI 3 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_LDR))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"ldr\\t%0,%2\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-(define_insn \"mov_sdl\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t(unspec:BLK [(match_operand:DI 1 \"reg_or_0_operand\" \"dJ\")\n-\t\t     (match_operand:QI 2 \"memory_operand\" \"m\")]\n-\t\t    UNSPEC_SDL))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sdl\\t%z1,%2\"\n-  [(set_attr \"type\" \"store\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mov_sdr\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"+m\")\n-\t(unspec:BLK [(match_operand:DI 1 \"reg_or_0_operand\" \"dJ\")\n-\t\t     (match_operand:QI 2 \"memory_operand\" \"m\")\n-\t\t     (match_dup 0)]\n-\t\t    UNSPEC_SDR))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sdr\\t%z1,%2\"\n-  [(set_attr \"type\" \"store\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; An instruction to calculate the high part of a 64-bit SYMBOL_GENERAL.\n ;; The required value is:"}]}