{"sha": "9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2ZTEwYzcwYTVjNWMyYWUwYTg2N2YyODc2MjNiMWQ4M2YyOTY5YQ==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2014-11-19T15:15:51Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2014-11-19T15:15:51Z"}, "message": "re PR middle-end/63762 ([ARM]GCC generates UNPREDICTABLE STR with Rn = Rt when hard-float abi is used)\n\n2014-11-19  Renlin Li  <Renlin.Li@arm.com>\n\n        PR middle-end/63762\n        * ira.c (ira): Update preferred class. \n\n        * gcc.dg/pr63762.c: New test.\n\nFrom-SVN: r217783", "tree": {"sha": "7e28af5fb6d3e43de7aca4a46ff43b6e5cfaf21a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e28af5fb6d3e43de7aca4a46ff43b6e5cfaf21a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/comments", "author": null, "committer": null, "parents": [{"sha": "dd308ed81c37f3342ea6d15767d9360f365d9800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd308ed81c37f3342ea6d15767d9360f365d9800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd308ed81c37f3342ea6d15767d9360f365d9800"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "e20f8cbe896069f1aaf9df58c6af1ce985e0de66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "patch": "@@ -1,3 +1,8 @@\n+2014-11-19  Renlin Li  <Renlin.Li@arm.com>\n+\n+    PR middle-end/63762\n+\t* ira.c (ira): Update preferred class.\n+\n 2014-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple.h (gimple_build_assign_with_ops): Add unary arg overload."}, {"sha": "e610d3581776358751ded4eb881d04ad5d5435f2", "filename": "gcc/ira.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "patch": "@@ -5263,7 +5263,18 @@ ira (FILE *f)\n \t      ira_allocno_iterator ai;\n \n \t      FOR_EACH_ALLOCNO (a, ai)\n-\t\tALLOCNO_REGNO (a) = REGNO (ALLOCNO_EMIT_DATA (a)->reg);\n+                {\n+                  int old_regno = ALLOCNO_REGNO (a);\n+                  int new_regno = REGNO (ALLOCNO_EMIT_DATA (a)->reg);\n+\n+                  ALLOCNO_REGNO (a) = new_regno;\n+\n+                  if (old_regno != new_regno)\n+                    setup_reg_classes (new_regno, reg_preferred_class (old_regno),\n+                                       reg_alternate_class (old_regno),\n+                                       reg_allocno_class (old_regno));\n+                }\n+\n \t    }\n \t  else\n \t    {"}, {"sha": "f5fb9db873f610b9a2f92588c595e4c880565d22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "patch": "@@ -1,3 +1,8 @@\n+2014-11-19  Renlin Li  <Renlin.Li@arm.com>\n+\n+    PR middle-end/63762\n+\t* gcc.dg/pr63762.c: New test. \n+\n 2014-11-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/63690"}, {"sha": "df110676eca6eb7418a9a24ec0a6ad72c8f8d88e", "filename": "gcc/testsuite/gcc.dg/pr63762.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63762.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e10c70a5c5c2ae0a867f287623b1d83f2969a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63762.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63762.c?ref=9d6e10c70a5c5c2ae0a867f287623b1d83f2969a", "patch": "@@ -0,0 +1,77 @@\n+/* PR middle-end/63762 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdlib.h>\n+\n+void *astFree ();\n+void *astMalloc ();\n+void astNegate (void *);\n+int astGetNegated (void *);\n+void astGetRegionBounds (void *, double *, double *);\n+int astResampleF (void *, ...);\n+\n+extern int astOK;\n+\n+int\n+MaskF (int inside, int ndim, const int lbnd[], const int ubnd[],\n+       float in[], float val)\n+{\n+\n+  void *used_region;\n+  float *c, *d, *out, *tmp_out;\n+  double *lbndgd, *ubndgd;\n+  int *lbndg, *ubndg, idim, ipix, nax, nin, nout, npix, npixg, result = 0;\n+  if (!astOK) return result;\n+  lbndg = astMalloc (sizeof (int)*(size_t) ndim);\n+  ubndg = astMalloc (sizeof (int)*(size_t) ndim);\n+  lbndgd = astMalloc (sizeof (double)*(size_t) ndim);\n+  ubndgd = astMalloc (sizeof (double)*(size_t) ndim);\n+  if (astOK)\n+    {\n+      astGetRegionBounds (used_region, lbndgd, ubndgd);\n+      npix = 1;\n+      npixg = 1;\n+      for (idim = 0; idim < ndim; idim++)\n+        {\n+          lbndg[ idim ] = lbnd[ idim ];\n+          ubndg[ idim ] = ubnd[ idim ];\n+          npix *= (ubnd[ idim ] - lbnd[ idim ] + 1);\n+          if (npixg >= 0) npixg *= (ubndg[ idim ] - lbndg[ idim ] + 1);\n+        }\n+      if (npixg <= 0 && astOK)\n+        {\n+          if ((inside != 0) == (astGetNegated( used_region ) != 0))\n+            {\n+              c = in;\n+              for (ipix = 0; ipix < npix; ipix++) *(c++) = val;\n+              result = npix;\n+            }\n+        }\n+      else if (npixg > 0 && astOK)\n+        {\n+          if ((inside != 0) == (astGetNegated (used_region) != 0))\n+            {\n+              tmp_out = astMalloc (sizeof (float)*(size_t) npix);\n+              if (tmp_out)\n+                {\n+                  c = tmp_out;\n+                  for (ipix = 0; ipix < npix; ipix++) *(c++) = val;\n+                  result = npix - npixg;\n+                }\n+              out = tmp_out;\n+            }\n+          else\n+            {\n+              tmp_out = NULL;\n+              out = in;\n+            }\n+          if (inside) astNegate (used_region);\n+          result += astResampleF (used_region, ndim, lbnd, ubnd, in, NULL,\n+                                  NULL, NULL, 0, 0.0, 100, val, ndim,\n+                                  lbnd, ubnd, lbndg, ubndg, out, NULL);\n+          if (inside) astNegate (used_region);\n+        }\n+    }\n+  return result;\n+}"}]}