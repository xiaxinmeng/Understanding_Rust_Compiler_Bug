{"sha": "3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M0MGJhZTFjNTBmNGZkOGMyM2VlMDRkN2ZlNzY4ZDdkZjY4ZjJlNg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-11-06T22:33:01Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-11-06T22:33:01Z"}, "message": "pr51244-11.c: Remove target line.\n\n\t* gcc.target/sh/pr51244-11.c: Remove target line.\n\t* gcc.target/sh/sh4a-sincosf.c: Likewise.\n\t* gcc.target/sh/attr-isr-trap_exit.c: Likewise.\n\t* gcc.target/sh/pr51244-15.c: Likewise.\n\t* gcc.target/sh/pr51244-19.c: Likewise.\n\t* gcc.target/sh/cmpstr.c: Likewise.\n\t* gcc.target/sh/pr33135-3.c: Likewise.\n\t* gcc.target/sh/pr53512-2.c: Likewise.\n\t* gcc.target/sh/pr54602-2.c: Likewise.\n\t* gcc.target/sh/pr52483-1.c: Likewise.\n\t* gcc.target/sh/pr21255-2-ml.c: Likewise.\n\t* gcc.target/sh/pr54760-4.c: Likewise.\n\t* gcc.target/sh/pr52483-5.c: Likewise.\n\t* gcc.target/sh/pr54089-2.c: Likewise.\n\t* gcc.target/sh/pr56547-2.c: Likewise.\n\t* gcc.target/sh/pr54089-6.c: Likewise.\n\t* gcc.target/sh/pr51244-20.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-4.c: Likewise.\n\t* gcc.target/sh/sh4a-fsrra.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-predec-1.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-2.c: Likewise.\n\t* gcc.target/sh/pr55303-2.c: Likewise.\n\t* gcc.target/sh/sh2a-resbank.c: Likewise.\n\t* gcc.target/sh/sp-switch.c: Likewise.\n\t* gcc.target/sh/pr51244-3.c: Likewise.\n\t* gcc.target/sh/pr50751-3.c: Likewise.\n\t* gcc.target/sh/pr51244-7.c: Likewise.\n\t* gcc.target/sh/struct-arg-dw2.c: Likewise.\n\t* gcc.target/sh/pr50751-7.c: Likewise.\n\t* gcc.target/sh/pr49468-di.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-postinc-4.c: Likewise.\n\t* gcc.target/sh/pr49880-3.c: Likewise.\n\t* gcc.target/sh/pr51244-12.c: Likewise.\n\t* gcc.target/sh/pr53988.c: Likewise.\n\t* gcc.target/sh/pr6526.c: Likewise.\n\t* gcc.target/sh/sh2a-bxor.c: Likewise.\n\t* gcc.target/sh/pr51244-16.c: Likewise.\n\t* gcc.target/sh/sh2a-bclrmem.c: Likewise.\n\t* gcc.target/sh/sh2a-bor.c: Likewise.\n\t* gcc.target/sh/pr53511-1.c: Likewise.\n\t* gcc.target/sh/pr21255-3.c: Likewise.\n\t* gcc.target/sh/pr53512-3.c: Likewise.\n\t* gcc.target/sh/pr33135-4.c: Likewise.\n\t* gcc.target/sh/pr54602-3.c: Likewise.\n\t* gcc.target/sh/pr54760-1.c: Likewise.\n\t* gcc.target/sh/pr52483-2.c: Likewise.\n\t* gcc.target/sh/sh2a-bsetmem.c: Likewise.\n\t* gcc.target/sh/pr54680.c: Likewise.\n\t* gcc.target/sh/pr54386.c: Likewise.\n\t* gcc.target/sh/pr51244-20-sh2a.c: Likewise.\n\t* gcc.target/sh/pr54089-3.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-1.c: Likewise.\n\t* gcc.target/sh/pr54089-7.c: Likewise.\n\t* gcc.target/sh/strlen.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-3.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-predec-2.c: Likewise.\n\t* gcc.target/sh/pr55303-3.c: Likewise.\n\t* gcc.target/sh/pr51244-4.c: Likewise.\n\t* gcc.target/sh/pr50751-4.c: Likewise.\n\t* gcc.target/sh/pr39423-1.c: Likewise.\n\t* gcc.target/sh/pr51244-8.c: Likewise.\n\t* gcc.target/sh/pr55146.c: Likewise.\n\t* gcc.target/sh/pr50751-8.c: Likewise.\n\t* gcc.target/sh/sh2a-bset.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-postinc-1.c: Likewise.\n\t* gcc.target/sh/sh2a-movi20s.c: Likewise.\n\t* gcc.target/sh/20080410-1.c: Likewise.\n\t* gcc.target/sh/pr49880-4.c: Likewise.\n\t* gcc.target/sh/pr51244-13.c: Likewise.\n\t* gcc.target/sh/sh2a-movrt.c: Likewise.\n\t* gcc.target/sh/pr51244-17.c: Likewise.\n\t* gcc.target/sh/pr21255-2-mb.c: Likewise.\n\t* gcc.target/sh/sh2a-bclr.c: Likewise.\n\t* gcc.target/sh/pr33135-1.c: Likewise.\n\t* gcc.target/sh/pr53512-4.c: Likewise.\n\t* gcc.target/sh/pr54602-4.c: Likewise.\n\t* gcc.target/sh/sh4a-bitmovua.c: Likewise.\n\t* gcc.target/sh/pr54760-2.c: Likewise.\n\t* gcc.target/sh/pr52483-3.c: Likewise.\n\t* gcc.target/sh/sh2a-bld.c: Likewise.\n\t* gcc.target/sh/pr54089-4.c: Likewise.\n\t* gcc.target/sh/pr54685.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-2.c: Likewise.\n\t* gcc.target/sh/pr54089-8.c: Likewise.\n\t* gcc.target/sh/pragma-isr-trap-exit.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-predec-3.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-4.c: Likewise.\n\t* gcc.target/sh/pr51244-1.c: Likewise.\n\t* gcc.target/sh/pr50751-1.c: Likewise.\n\t* gcc.target/sh/pr55160.c: Likewise.\n\t* gcc.target/sh/pr51244-5.c: Likewise.\n\t* gcc.target/sh/pr54236-1.c: Likewise.\n\t* gcc.target/sh/pr50751-5.c: Likewise.\n\t* gcc.target/sh/pr52933-1.c: Likewise.\n\t* gcc.target/sh/pr39423-2.c: Likewise.\n\t* gcc.target/sh/pr51244-9.c: Likewise.\n\t* gcc.target/sh/pr49263.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-postinc-2.c: Likewise.\n\t* gcc.target/sh/pr49880-1.c: Likewise.\n\t* gcc.target/sh/sh2a-band.c: Likewise.\n\t* gcc.target/sh/pr51244-10.c: Likewise.\n\t* gcc.target/sh/pr49880-5.c: Likewise.\n\t* gcc.target/sh/prefetch.c: Likewise.\n\t* gcc.target/sh/pr51244-14.c: Likewise.\n\t* gcc.target/sh/rte-delay-slot.c: Likewise.\n\t* gcc.target/sh/fpul-usage-1.c: Likewise.\n\t* gcc.target/sh/pr51244-18.c: Likewise.\n\t* gcc.target/sh/pr21255-1.c: Likewise.\n\t* gcc.target/sh/pr33135-2.c: Likewise.\n\t* gcc.target/sh/pr53512-1.c: Likewise.\n\t* gcc.target/sh/pr54602-1.c: Likewise.\n\t* gcc.target/sh/sh2a-rtsn.c: Likewise.\n\t* gcc.target/sh/torture/pragma-isr.c: Likewise.\n\t* gcc.target/sh/torture/pragma-isr2.c: Likewise.\n\t* gcc.target/sh/torture/pr58314.c: Likewise.\n\t* gcc.target/sh/torture/pr34777.c: Likewise.\n\t* gcc.target/sh/torture/pr58475.c: Likewise.\n\t* gcc.target/sh/pr54760-3.c: Likewise.\n\t* gcc.target/sh/sh4a-cosf.c: Likewise.\n\t* gcc.target/sh/pr52483-4.c: Likewise.\n\t* gcc.target/sh/mfmovd.c: Likewise.\n\t* gcc.target/sh/pr54089-1.c: Likewise.\n\t* gcc.target/sh/pr56547-1.c: Likewise.\n\t* gcc.target/sh/pr54089-5.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-3.c: Likewise.\n\t* gcc.target/sh/pr54089-9.c: Likewise.\n\t* gcc.target/sh/sh2a-jsrn.c: Likewise.\n\t* gcc.target/sh/pr49468-si.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-1.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-predec-4.c: Likewise.\n\t* gcc.target/sh/pr55303-1.c: Likewise.\n\t* gcc.target/sh/pr51244-2.c: Likewise.\n\t* gcc.target/sh/pr50751-2.c: Likewise.\n\t* gcc.target/sh/pr54236-2.c: Likewise.\n\t* gcc.target/sh/pr51244-6.c: Likewise.\n\t* gcc.target/sh/cmpstrn.c: Likewise.\n\t* gcc.target/sh/pr50751-6.c: Likewise.\n\t* gcc.target/sh/pr52933-2.c: Likewise.\n\t* gcc.target/sh/pr53568-1.c: Likewise.\n\t* gcc.target/sh/pr50749-qihisi-postinc-3.c: Likewise.\n\t* gcc.target/sh/sh2a-tbr-jump.c: Likewise.\n\t* gcc.target/sh/sh4a-sinf.c: Likewise.\n\t* gcc.target/sh/pr49880-2.c: Likewise.\n\nFrom-SVN: r204487", "tree": {"sha": "d5bf3dbf510bf98e94680f9b53adb75b2b62ac24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bf3dbf510bf98e94680f9b53adb75b2b62ac24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/comments", "author": null, "committer": null, "parents": [{"sha": "5157b91ea39549aba181ca118820b1f439f48b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5157b91ea39549aba181ca118820b1f439f48b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5157b91ea39549aba181ca118820b1f439f48b45"}], "stats": {"total": 432, "additions": 289, "deletions": 143}, "files": [{"sha": "cb7b15bfcbb6a511e29ab34eb7679ef658426b95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,3 +1,149 @@\n+2013-11-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* gcc.target/sh/pr51244-11.c: Remove target line.\n+\t* gcc.target/sh/sh4a-sincosf.c: Likewise.\n+\t* gcc.target/sh/attr-isr-trap_exit.c: Likewise.\n+\t* gcc.target/sh/pr51244-15.c: Likewise.\n+\t* gcc.target/sh/pr51244-19.c: Likewise.\n+\t* gcc.target/sh/cmpstr.c: Likewise.\n+\t* gcc.target/sh/pr33135-3.c: Likewise.\n+\t* gcc.target/sh/pr53512-2.c: Likewise.\n+\t* gcc.target/sh/pr54602-2.c: Likewise.\n+\t* gcc.target/sh/pr52483-1.c: Likewise.\n+\t* gcc.target/sh/pr21255-2-ml.c: Likewise.\n+\t* gcc.target/sh/pr54760-4.c: Likewise.\n+\t* gcc.target/sh/pr52483-5.c: Likewise.\n+\t* gcc.target/sh/pr54089-2.c: Likewise.\n+\t* gcc.target/sh/pr56547-2.c: Likewise.\n+\t* gcc.target/sh/pr54089-6.c: Likewise.\n+\t* gcc.target/sh/pr51244-20.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-4.c: Likewise.\n+\t* gcc.target/sh/sh4a-fsrra.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-predec-1.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-2.c: Likewise.\n+\t* gcc.target/sh/pr55303-2.c: Likewise.\n+\t* gcc.target/sh/sh2a-resbank.c: Likewise.\n+\t* gcc.target/sh/sp-switch.c: Likewise.\n+\t* gcc.target/sh/pr51244-3.c: Likewise.\n+\t* gcc.target/sh/pr50751-3.c: Likewise.\n+\t* gcc.target/sh/pr51244-7.c: Likewise.\n+\t* gcc.target/sh/struct-arg-dw2.c: Likewise.\n+\t* gcc.target/sh/pr50751-7.c: Likewise.\n+\t* gcc.target/sh/pr49468-di.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-4.c: Likewise.\n+\t* gcc.target/sh/pr49880-3.c: Likewise.\n+\t* gcc.target/sh/pr51244-12.c: Likewise.\n+\t* gcc.target/sh/pr53988.c: Likewise.\n+\t* gcc.target/sh/pr6526.c: Likewise.\n+\t* gcc.target/sh/sh2a-bxor.c: Likewise.\n+\t* gcc.target/sh/pr51244-16.c: Likewise.\n+\t* gcc.target/sh/sh2a-bclrmem.c: Likewise.\n+\t* gcc.target/sh/sh2a-bor.c: Likewise.\n+\t* gcc.target/sh/pr53511-1.c: Likewise.\n+\t* gcc.target/sh/pr21255-3.c: Likewise.\n+\t* gcc.target/sh/pr53512-3.c: Likewise.\n+\t* gcc.target/sh/pr33135-4.c: Likewise.\n+\t* gcc.target/sh/pr54602-3.c: Likewise.\n+\t* gcc.target/sh/pr54760-1.c: Likewise.\n+\t* gcc.target/sh/pr52483-2.c: Likewise.\n+\t* gcc.target/sh/sh2a-bsetmem.c: Likewise.\n+\t* gcc.target/sh/pr54680.c: Likewise.\n+\t* gcc.target/sh/pr54386.c: Likewise.\n+\t* gcc.target/sh/pr51244-20-sh2a.c: Likewise.\n+\t* gcc.target/sh/pr54089-3.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-1.c: Likewise.\n+\t* gcc.target/sh/pr54089-7.c: Likewise.\n+\t* gcc.target/sh/strlen.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-3.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-predec-2.c: Likewise.\n+\t* gcc.target/sh/pr55303-3.c: Likewise.\n+\t* gcc.target/sh/pr51244-4.c: Likewise.\n+\t* gcc.target/sh/pr50751-4.c: Likewise.\n+\t* gcc.target/sh/pr39423-1.c: Likewise.\n+\t* gcc.target/sh/pr51244-8.c: Likewise.\n+\t* gcc.target/sh/pr55146.c: Likewise.\n+\t* gcc.target/sh/pr50751-8.c: Likewise.\n+\t* gcc.target/sh/sh2a-bset.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-1.c: Likewise.\n+\t* gcc.target/sh/sh2a-movi20s.c: Likewise.\n+\t* gcc.target/sh/20080410-1.c: Likewise.\n+\t* gcc.target/sh/pr49880-4.c: Likewise.\n+\t* gcc.target/sh/pr51244-13.c: Likewise.\n+\t* gcc.target/sh/sh2a-movrt.c: Likewise.\n+\t* gcc.target/sh/pr51244-17.c: Likewise.\n+\t* gcc.target/sh/pr21255-2-mb.c: Likewise.\n+\t* gcc.target/sh/sh2a-bclr.c: Likewise.\n+\t* gcc.target/sh/pr33135-1.c: Likewise.\n+\t* gcc.target/sh/pr53512-4.c: Likewise.\n+\t* gcc.target/sh/pr54602-4.c: Likewise.\n+\t* gcc.target/sh/sh4a-bitmovua.c: Likewise.\n+\t* gcc.target/sh/pr54760-2.c: Likewise.\n+\t* gcc.target/sh/pr52483-3.c: Likewise.\n+\t* gcc.target/sh/sh2a-bld.c: Likewise.\n+\t* gcc.target/sh/pr54089-4.c: Likewise.\n+\t* gcc.target/sh/pr54685.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-2.c: Likewise.\n+\t* gcc.target/sh/pr54089-8.c: Likewise.\n+\t* gcc.target/sh/pragma-isr-trap-exit.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-predec-3.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-4.c: Likewise.\n+\t* gcc.target/sh/pr51244-1.c: Likewise.\n+\t* gcc.target/sh/pr50751-1.c: Likewise.\n+\t* gcc.target/sh/pr55160.c: Likewise.\n+\t* gcc.target/sh/pr51244-5.c: Likewise.\n+\t* gcc.target/sh/pr54236-1.c: Likewise.\n+\t* gcc.target/sh/pr50751-5.c: Likewise.\n+\t* gcc.target/sh/pr52933-1.c: Likewise.\n+\t* gcc.target/sh/pr39423-2.c: Likewise.\n+\t* gcc.target/sh/pr51244-9.c: Likewise.\n+\t* gcc.target/sh/pr49263.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-2.c: Likewise.\n+\t* gcc.target/sh/pr49880-1.c: Likewise.\n+\t* gcc.target/sh/sh2a-band.c: Likewise.\n+\t* gcc.target/sh/pr51244-10.c: Likewise.\n+\t* gcc.target/sh/pr49880-5.c: Likewise.\n+\t* gcc.target/sh/prefetch.c: Likewise.\n+\t* gcc.target/sh/pr51244-14.c: Likewise.\n+\t* gcc.target/sh/rte-delay-slot.c: Likewise.\n+\t* gcc.target/sh/fpul-usage-1.c: Likewise.\n+\t* gcc.target/sh/pr51244-18.c: Likewise.\n+\t* gcc.target/sh/pr21255-1.c: Likewise.\n+\t* gcc.target/sh/pr33135-2.c: Likewise.\n+\t* gcc.target/sh/pr53512-1.c: Likewise.\n+\t* gcc.target/sh/pr54602-1.c: Likewise.\n+\t* gcc.target/sh/sh2a-rtsn.c: Likewise.\n+\t* gcc.target/sh/torture/pragma-isr.c: Likewise.\n+\t* gcc.target/sh/torture/pragma-isr2.c: Likewise.\n+\t* gcc.target/sh/torture/pr58314.c: Likewise.\n+\t* gcc.target/sh/torture/pr34777.c: Likewise.\n+\t* gcc.target/sh/torture/pr58475.c: Likewise.\n+\t* gcc.target/sh/pr54760-3.c: Likewise.\n+\t* gcc.target/sh/sh4a-cosf.c: Likewise.\n+\t* gcc.target/sh/pr52483-4.c: Likewise.\n+\t* gcc.target/sh/mfmovd.c: Likewise.\n+\t* gcc.target/sh/pr54089-1.c: Likewise.\n+\t* gcc.target/sh/pr56547-1.c: Likewise.\n+\t* gcc.target/sh/pr54089-5.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-3.c: Likewise.\n+\t* gcc.target/sh/pr54089-9.c: Likewise.\n+\t* gcc.target/sh/sh2a-jsrn.c: Likewise.\n+\t* gcc.target/sh/pr49468-si.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-1.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-predec-4.c: Likewise.\n+\t* gcc.target/sh/pr55303-1.c: Likewise.\n+\t* gcc.target/sh/pr51244-2.c: Likewise.\n+\t* gcc.target/sh/pr50751-2.c: Likewise.\n+\t* gcc.target/sh/pr54236-2.c: Likewise.\n+\t* gcc.target/sh/pr51244-6.c: Likewise.\n+\t* gcc.target/sh/cmpstrn.c: Likewise.\n+\t* gcc.target/sh/pr50751-6.c: Likewise.\n+\t* gcc.target/sh/pr52933-2.c: Likewise.\n+\t* gcc.target/sh/pr53568-1.c: Likewise.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-3.c: Likewise.\n+\t* gcc.target/sh/sh2a-tbr-jump.c: Likewise.\n+\t* gcc.target/sh/sh4a-sinf.c: Likewise.\n+\t* gcc.target/sh/pr49880-2.c: Likewise.\n+\n 2013-11-06  Tobias Burnus  <burnus@net-b.de>\n \n \t* g++.dg/warn/wdate-time.C: Update dg-error pattern."}, {"sha": "c398674c2aa7d0b6c6c7a3e60d98aafecf0fb485", "filename": "gcc/testsuite/gcc.target/sh/20080410-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O0\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"-mb\" \"\" }  */\n /* { dg-final { scan-assembler-not \"add\\tr0,r0\" } } */"}, {"sha": "a45e92f8c6f72cb5c7b7d46da0eb7e1c4c338e00", "filename": "gcc/testsuite/gcc.target/sh/attr-isr-trap_exit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-trap_exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-trap_exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-trap_exit.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that trapa / interrput_handler attributes can paired in\n    either order.  */\n-/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-do compile }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler \"trapa\\[ \\t\\]\\[ \\t\\]*#4\"} }  */"}, {"sha": "4d638cc3e70adf4b281950f9c70e6a5bd4e195eb", "filename": "gcc/testsuite/gcc.target/sh/cmpstr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstr.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the __builtin_strcmp function is inlined with cmp/str\n    when optimizing for speed.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"jmp\" } } */"}, {"sha": "bc72b2c51d22c8773586de5fc88be3b66e233119", "filename": "gcc/testsuite/gcc.target/sh/cmpstrn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstrn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstrn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstrn.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the __builtin_strncmp function is inlined\n    when optimizing for speed.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"jmp\" } } */"}, {"sha": "5c3bb196de0ffab276f069d0ae263c009f1c98a9", "filename": "gcc/testsuite/gcc.target/sh/fpul-usage-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ffpul-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ffpul-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ffpul-usage-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the FPUL register is used when reading a float as an int and\n    vice versa, as opposed to pushing and popping the values over the stack.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"fpul\" } } */"}, {"sha": "ce3e99332e3ae47e00e56b0ec45980b1ca87bb5e", "filename": "gcc/testsuite/gcc.target/sh/mfmovd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that we generate fmov.d instructions to move doubles when -mfmovd \n    option is enabled.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-require-effective-target hard_float } */\n /* { dg-options \"-mfmovd\" } */\n /* { dg-skip-if \"\" { *-*-* }  { \"*-single-only\" } { \"\" } } */"}, {"sha": "3e9b78515f9a07fee797910d609b18ea0116b1ef", "filename": "gcc/testsuite/gcc.target/sh/pr21255-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2 -fomit-frame-pointer\" } */\n /* { dg-final { scan-assembler \"mov fr4,fr.; mov fr5,fr.\" { target sh-*-* } } } */\n /* { dg-final { scan-assembler \"mov fr4,fr.; mov fr5,fr.\" { target sh[1234lb]*-*-* } } } */"}, {"sha": "531ed3979d194d98bd6d10c089c3ccc0eb564355", "filename": "gcc/testsuite/gcc.target/sh/pr21255-2-mb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-mb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-mb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-mb.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-mb -O2 -fomit-frame-pointer\" } */\n /* { dg-final { scan-assembler \"mov @r.,r.; mov @\\\\(4,r.\\\\),r.\" } } */\n double d;"}, {"sha": "6948f475ea3874a5b4cdbc2428aa0121ed77aab9", "filename": "gcc/testsuite/gcc.target/sh/pr21255-2-ml.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-ml.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-ml.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-ml.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2 -fomit-frame-pointer\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-mb\" && \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler \"mov @\\\\(4,r.\\\\),r.; mov @r.,r.\" } } */"}, {"sha": "a6727841837dd5559c65de3ea436eeebf17da5d2", "filename": "gcc/testsuite/gcc.target/sh/pr21255-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2 -fomit-frame-pointer\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m2e\" \"-m3e\" \"*single-only\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"mov #?0,r.*; mov #?20,r\" } } */"}, {"sha": "cc6a3f984d3e4092902e22ed1a14b49a6d9aa06b", "filename": "gcc/testsuite/gcc.target/sh/pr33135-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that fcmp/eq and fcmp/gt instructions are generated by default\n    (implicit -mieee).  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fcmp/eq\" 4 } } */"}, {"sha": "b93ecb81e4890e1bddfb67db56c143517338a679", "filename": "gcc/testsuite/gcc.target/sh/pr33135-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that only the fcmp/gt instruction is generated when specifying\n    -ffinite-math-only (implicit -mno-ieee).  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -ffinite-math-only\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fcmp/eq\" } } */"}, {"sha": "f5f9a5b92275f7bec371aad41ff00b6cd32b718b", "filename": "gcc/testsuite/gcc.target/sh/pr33135-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that fcmp/eq and fcmp/gt instructions are generated when specifying\n    -ffinite-math-only and -mieee.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -ffinite-math-only -mieee\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fcmp/eq\" 4 } } */"}, {"sha": "20178d7e493e4f18cb1b93cbe7a7605bfcbe8b01", "filename": "gcc/testsuite/gcc.target/sh/pr33135-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that only the fcmp/gt instruction is generated when specifying\n    -fno-finite-math-only and -mno-ieee.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -fno-finite-math-only -mno-ieee\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fcmp/eq\" } } */"}, {"sha": "1e02937ccba19645a8a5ff21325c5c5a92240d8a", "filename": "gcc/testsuite/gcc.target/sh/pr39423-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that displacement addressing is used for indexed addresses with a\n    small offset, instead of re-calculating the index.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-not \"add\\t#1\" } } */"}, {"sha": "702384dc27a730bad3d344b29253df8c1b4fc732", "filename": "gcc/testsuite/gcc.target/sh/pr39423-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that displacement addressing is used for indexed addresses with a\n    small offset, instead of re-calculating the index and that the movu.w\n    instruction is used on SH2A.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-not \"add\\t#1\" } } */"}, {"sha": "783d865592c9ee1c5e45a13067d01de8e6c530ca", "filename": "gcc/testsuite/gcc.target/sh/pr49263.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    allows it.  Under some circumstances another compare instruction might\n    be selected, which is also fine.  Any AND instructions are considered\n    counter productive and fail the test.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-not \"and\" } } */\n "}, {"sha": "4b17fce30bdaccbe137b201cf31ad44d5f94f15f", "filename": "gcc/testsuite/gcc.target/sh/pr49468-di.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-di.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that 64 bit integer abs is generated as negc instruction pairs\n    and conditional branch instead of default branch-free code.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"negc\" 4 } } */"}, {"sha": "8c771ed20b67b429575790bfb53ce8bf6769d454", "filename": "gcc/testsuite/gcc.target/sh/pr49468-si.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that 32 bit integer abs is generated as neg instruction and\n    conditional branch instead of default branch-free code.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"neg\" 2 } } */"}, {"sha": "249fae00284a6862b3bf6bc714365b2e7344e41a", "filename": "gcc/testsuite/gcc.target/sh/pr49880-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the option -mdiv=call-div1 works.  */\n-/* { dg-do link { target \"sh*-*-*\" } } */\n+/* { dg-do link }  */\n /* { dg-options \"-mdiv=call-div1\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n "}, {"sha": "35e23dec438530c2099e6122ff86aa7236660cab", "filename": "gcc/testsuite/gcc.target/sh/pr49880-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the option -mdiv=call-fp works.  */\n-/* { dg-do link { target \"sh*-*-*\" } } */\n+/* { dg-do link }  */\n /* { dg-options \"-mdiv=call-fp\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n "}, {"sha": "be6ea523ca87b57e180b23949a3fa38d3deec851", "filename": "gcc/testsuite/gcc.target/sh/pr49880-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the option -mdiv=call-table works.  */\n-/* { dg-do link { target \"sh*-*-*\" } } */\n+/* { dg-do link }  */\n /* { dg-options \"-mdiv=call-table\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n "}, {"sha": "5b5af1e40141f5cfef354b2f95de2889ea6cf6e9", "filename": "gcc/testsuite/gcc.target/sh/pr49880-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the option -mdiv=call-fp does not produce calls to the\n    library function that uses FPU to implement integer division if FPU insns\n    are not supported or are disabled.  */\n-/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-do compile }  */\n /* { dg-options \"-mdiv=call-fp\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" } }  */\n /* { dg-final { scan-assembler-not \"sdivsi3_i4\\n|udivsi3_i4\\n\" } }  */"}, {"sha": "bff9f331f9a20aba3d98146c352d3e79e92ea377", "filename": "gcc/testsuite/gcc.target/sh/pr49880-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the option -mdiv=call-fp results in the corresponding library\n    function calls on targets that have a double precision FPU.  */\n-/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-do compile }  */\n /* { dg-options \"-mdiv=call-fp\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m2a\" \"-m4\" \"-m4a\" \"*single-only\" } }  */\n /* { dg-final { scan-assembler \"sdivsi3_i4\\n\" } }  */"}, {"sha": "90db97a273d7d99abe8e18822c6be5e671f49550", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* PR target/50749: Verify that post-increment addressing is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n /* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */"}, {"sha": "b695db173fe9bfc90e2d194ab0f735d5cd312cee", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that subsequent post-increment addressings\n    are generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n /* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 5 { xfail *-*-*} } } */"}, {"sha": "6e54d4dd721360d27b83e6fd3d1c60ee1250da0e", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that post-increment addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n /* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */"}, {"sha": "fc6fa8da0378f7db5036efd8186cb8d54f60ff1c", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that post-increment addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n /* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 3 { xfail *-*-*} } } */"}, {"sha": "4f455743cfc83a9f59bf335482072dadd07f2675", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 { xfail *-*-*} } } */\n /* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 { xfail *-*-*} } } */"}, {"sha": "beda957fa895495d7222e23c3069d22a016ae4fc", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that subsequent pre-decrement addressings\n    are generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n /* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */"}, {"sha": "541749750e0a5cc5c3a09e621610c86c9e682efb", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n /* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */"}, {"sha": "e8c03481e2f4f275b94e97cab534cd395f56b9d4", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n /* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */"}, {"sha": "41e3bdd28349a3bd77afd6f1cd7c1b047d3e13c2", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* PR target/50749: Verify that post-increment addressing is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 1 } } */"}, {"sha": "304ed11c4286c6fd68cc0c105f3dae3c42071259", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that subsequent post-increment addressings\n    are generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 5 { xfail *-*-*} } } */"}, {"sha": "7461bedb4a63e9c9cb837e2f3d4bda9d571bdd55", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that post-increment addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 1 } } */"}, {"sha": "b6dce42fca7f13eca5e4c0e56318eb0bce70a07a", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that post-increment addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 3 { xfail *-*-*} } } */"}, {"sha": "d51aa9e09a60f1c60c91682564c6525df8f8b1e7", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */"}, {"sha": "cd87ce95f8f8921429193a7ee11b5a4887cf932e", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that subsequent pre-decrement addressings\n    are generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */"}, {"sha": "a772b23a4ba7571ea72f2e1b4c8b2b6cbb9b08bd", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */"}, {"sha": "9d080387d2e5e8fb7622c885246bb5f4b9b185d1", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated\n    inside a loop.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */"}, {"sha": "80c63fb3652dfef34327d950f08d0e40a2f90e3e", "filename": "gcc/testsuite/gcc.target/sh/pr50751-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the mov.b displacement addressing insn is generated.\n    If the insn is generated as expected, there should be no address \n    calculations outside the mov insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */"}, {"sha": "cd716426112fc34b0499a3767103462002762adc", "filename": "gcc/testsuite/gcc.target/sh/pr50751-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    base address is adjusted only once.  On SH2A this test is skipped because\n    there is a 4 byte mov.b insn that can handle larger displacements.  Thus\n    on SH2A the base address will not be adjusted in this case.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"add\" 2 } } */"}, {"sha": "5b8d3514e4d6b42ebcff6775a6acc2f3489e3ed9", "filename": "gcc/testsuite/gcc.target/sh/pr50751-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that on SH2A the 4 byte mov.b displacement insn is generated to\n    handle larger displacements.  If it is generated correctly, there should\n    be no base address adjustments outside the mov.b insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */"}, {"sha": "e0f3ab799ebe2887737346b6f5fb6c761ffd53ae", "filename": "gcc/testsuite/gcc.target/sh/pr50751-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the mov.w displacement addressing insn is generated.\n    If the insn is generated as expected, there should be no address \n    calculations outside the mov insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */"}, {"sha": "5da9ac2a1282519e21b36cae57a61ec2ec84c666", "filename": "gcc/testsuite/gcc.target/sh/pr50751-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    base address is adjusted only once.  On SH2A this test is skipped because\n    there is a 4 byte mov.w insn that can handle larger displacements.  Thus\n    on SH2A the base address will not be adjusted in this case.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"add\" 2 } } */"}, {"sha": "129729037e22822365f4a0a875594f722ad795d9", "filename": "gcc/testsuite/gcc.target/sh/pr50751-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that on SH2A the 4 byte mov.w displacement insn is generated to\n    handle larger displacements.  If it is generated correctly, there should\n    be no base address adjustments outside the mov.w insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */"}, {"sha": "014575ad0d485c23e80f8ef5edcea93696eef564", "filename": "gcc/testsuite/gcc.target/sh/pr50751-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-7.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that mov.b and mov.w displacement insns are generated.\n    If this is working properly, there should be no base address adjustments\n    outside the mov insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */"}, {"sha": "d9eda44f04154d814b9fbf1c7b5e82938c6a673c", "filename": "gcc/testsuite/gcc.target/sh/pr50751-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-8.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that on SH2A the 4 byte movu.b and movu.w displacement insns are\n    generated.  This has to be checked with -O2 because some of the patterns\n    rely on peepholes.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"movu.b\" 4 } } */"}, {"sha": "15e2ebd1bfc339dfa43419b108281d48f7c7a851", "filename": "gcc/testsuite/gcc.target/sh/pr51244-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that inverted conditional branch logic does not generate\n    unnecessary explicit T bit extractions, inversions and \n    test instructions.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mbranch-cost=2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-not \"movt|tst|negc|extu\" } } */"}, {"sha": "ef16b75ff79c79de72646cf2bcf860f37c25b98f", "filename": "gcc/testsuite/gcc.target/sh/pr51244-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-10.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -10,7 +10,7 @@\n \ttst\tr0,r0\n \tbt\t.L195\n */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"shll|subc|and\" } } */"}, {"sha": "b673e9ac48bc79587a1d6091765a4a2a617b89f4", "filename": "gcc/testsuite/gcc.target/sh/pr51244-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that zero-displacement branches are used instead of branch-free\n    execution patterns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mzdcbranch\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"subc|and\" } } */"}, {"sha": "da941015cc8aa592ac6d09dd5294b839c5b83fa0", "filename": "gcc/testsuite/gcc.target/sh/pr51244-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-12.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the negc instruction is generated as expected for the cases\n    below.  If we see a movrt or #-1 negc sequence it means that the pattern\n    which handles the inverted case does not work properly.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"negc\" 10 } } */"}, {"sha": "41d23eb94383ad11e48aabf1e3835b50b24eff13", "filename": "gcc/testsuite/gcc.target/sh/pr51244-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-13.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -8,7 +8,7 @@\n    branch condition.  The tested function contains two other tst insns.  If\n    everything goes as expected we will be seeing only those other two tst\n    insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 2 } } */"}, {"sha": "844eb3a5693b34dfcc486b951a73bdb3f072cd1e", "filename": "gcc/testsuite/gcc.target/sh/pr51244-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-14.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -9,7 +9,7 @@\n \tbf/s\t.L35\n    where the negated T bit store did not combine properly.  Since there are\n    other movt insns we only check for the xor and the extu.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"xor|extu\" } } */"}, {"sha": "e99963f8f99f6758337386d582c1ff2a74a110fc", "filename": "gcc/testsuite/gcc.target/sh/pr51244-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-15.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the redundant test removal code in the *cbranch_t split works\n    as expected on non-SH2A targets.  Because on SH2A the movrt instruction\n    is used, this test is re-used and checked differently in pr51244-16.c.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 6 } } */"}, {"sha": "5132f7433f32136be3ffc3c9e234c505eebdba79", "filename": "gcc/testsuite/gcc.target/sh/pr51244-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-16.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the redundant test removal code in the *cbranch_t split works\n    as expected on SH2A targets.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 6 } } */"}, {"sha": "621abb788a92037e27ec2b3dda59fbdb89bc32a5", "filename": "gcc/testsuite/gcc.target/sh/pr51244-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-17.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that no unnecessary zero extensions are done on values that are\n    results of arithmetic with T bit inputs.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"extu|exts\" } } */"}, {"sha": "19b244cea108688fa775158891042ac166e20b44", "filename": "gcc/testsuite/gcc.target/sh/pr51244-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-18.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -12,7 +12,7 @@\n    not working as expected.  This test requires -O2 because the T bit stores\n    in question will be eliminated in additional insn split passes after\n    reload.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"movt|tst\" } } */"}, {"sha": "5845d93f60a1a00d74360240285e4138ec8e45b2", "filename": "gcc/testsuite/gcc.target/sh/pr51244-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-19.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -23,7 +23,7 @@\n    working as expected.  This test requires -O2 because the T bit stores\n    in question will be eliminated in additional insn split passes after\n    reload.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"movt\" } } */"}, {"sha": "a81ee7ed9d62ec00186acd47a58f14733450dca9", "filename": "gcc/testsuite/gcc.target/sh/pr51244-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    instruction pattern, the constant -1 is loaded only once.\n    On SH2A this test is skipped because the movrt instruction is used\n    to get the complement of the T bit.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mbranch-cost=2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"mov\\t#-1\" 1 } } */"}, {"sha": "f2cd2de04f9b653b56bf608442a3ae780d4d60a2", "filename": "gcc/testsuite/gcc.target/sh/pr51244-20-sh2a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20-sh2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20-sh2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20-sh2a.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the SH specific sh_treg_combine RTL optimization pass works as\n    expected.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 5 } } */"}, {"sha": "a9ded46351114f1b916703d51b07357e9ab12667", "filename": "gcc/testsuite/gcc.target/sh/pr51244-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the SH specific sh_treg_combine RTL optimization pass works as\n    expected.  On SH2A the expected insns are slightly different, see\n    pr51244-21.c.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 6 } } */"}, {"sha": "92963c4bec97011f6254e5b7bc9bc85e762d352a", "filename": "gcc/testsuite/gcc.target/sh/pr51244-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that when taking the complement of the T bit on SH2A, \n    the movrt instruction is being generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mbranch-cost=2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"movrt\" 4 } } */"}, {"sha": "a11429b15e4bec02e3465e3b5120bf346d0a8be8", "filename": "gcc/testsuite/gcc.target/sh/pr51244-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that storing the (negated) T bit as all ones or zeros in a reg\n    uses the subc instruction.  On SH2A a sequence with the movrt instruction\n    is also OK instead of subc.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mbranch-cost=2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-not \"movt|tst|negc\" } } */"}, {"sha": "c0f05a105208cae4c76716cf1d9b1dafea3957e1", "filename": "gcc/testsuite/gcc.target/sh/pr51244-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-5.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that no unnecessary sign or zero extension insn is generated after\n    a negc or movrt insn that stores the inverted T bit in a reg.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"extu|exts\" } } */"}, {"sha": "3f9aafb7d876c26d939f8ca21904a104b6f1396a", "filename": "gcc/testsuite/gcc.target/sh/pr51244-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-6.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that no unnecessary sign or zero extension insn is generated after\n    a negc or movrt insn that stores the inverted T bit in a reg.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"extu|exts\" } } */"}, {"sha": "d4d39745dac839a407b0c2ef5ed6a4bd2068d1af", "filename": "gcc/testsuite/gcc.target/sh/pr51244-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-7.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -10,7 +10,7 @@\n \tbra\t.L197\n \tnop\n */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"cmp/hi\" } } */"}, {"sha": "d8c1269bb3127e821c9a972eb9bfc6c512c5c6e2", "filename": "gcc/testsuite/gcc.target/sh/pr51244-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-8.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -6,7 +6,7 @@\n \ttst\t#1,r0\n \tbf\t.L47\n */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"shad|neg\" } } */"}, {"sha": "cca90a8439717542d82028de57e9c4c9b1653f4b", "filename": "gcc/testsuite/gcc.target/sh/pr51244-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-9.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -8,7 +8,7 @@\n \tcmp/hi\tr2,r7\t\t\tbt\t.L534\n \tbf\t.L534\n */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"mov\\t#0\" } } */"}, {"sha": "ca64a0a2c638af8263c82fd05c427d05ca53bdfb", "filename": "gcc/testsuite/gcc.target/sh/pr52483-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that loads/stores from/to volatile mems don't result in redundant\n    sign/zero extensions.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-not \"exts|extu\" } } */"}, {"sha": "68e7f8e2516db9acdd2956e94349e00c040a0ae8", "filename": "gcc/testsuite/gcc.target/sh/pr52483-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that loads/stores from/to volatile mems utilize displacement\n    addressing modes and do not result in redundant sign/zero extensions. */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"@\\\\(5,\" 4 } } */"}, {"sha": "baeec334331c841a153c4e7c13f5a7b5b3586f0f", "filename": "gcc/testsuite/gcc.target/sh/pr52483-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that loads/stores from/to volatile mems utilize indexed addressing\n    modes and do not result in redundant sign/zero extensions. */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"@\\\\(r0,\" 6 } } */"}, {"sha": "743e8dc546e39d7dd5bbab1bbb7084b632e5a061", "filename": "gcc/testsuite/gcc.target/sh/pr52483-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that loads/stores from/to volatile floating point mems utilize\n    indexed addressing modes. */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"@\\\\(r0,\" 2 } } */"}, {"sha": "50aefe2cddec6484dedf5b1fb7ba74f2b7ea8f4d", "filename": "gcc/testsuite/gcc.target/sh/pr52483-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-5.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that loads from volatile mems utilize post-increment addressing\n    modes and do not result in redundant sign extensions. */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"@r\\[0-9\\]\\+\\\\+,\" 3 } } */"}, {"sha": "b65707ee40bf11c75828a3d8cc5e3eaad611310c", "filename": "gcc/testsuite/gcc.target/sh/pr52933-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    Each test case is expected to emit at least one div0s insn.\n    Problems when combining the div0s comparison result with surrounding\n    logic usually show up as redundant tst insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"div0s\" 25 } } */"}, {"sha": "865cb370913bece3826847ba27f45bd657c48453", "filename": "gcc/testsuite/gcc.target/sh/pr52933-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -3,7 +3,7 @@\n    Each test case is expected to emit at least one div0s insn.\n    Problems when combining the div0s comparison result with surrounding\n    logic usually show up as redundant tst insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2 -mpretend-cmove\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"div0s\" 25 } } */"}, {"sha": "d58a72c3b2bf18b252c588dae61550fb2117c570", "filename": "gcc/testsuite/gcc.target/sh/pr53511-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Verify that the fmac insn is used for the standard fmaf function.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"fmac\" } } */"}, {"sha": "c54671bd20cd3ffa6450acd52f3ece2fbe154211", "filename": "gcc/testsuite/gcc.target/sh/pr53512-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the fsca insn is used when specifying -mfsca and\n   -funsafe-math-optimizations.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mfsca -funsafe-math-optimizations\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 3 } } */"}, {"sha": "ed410116c675274333f764132ca17c75919925c0", "filename": "gcc/testsuite/gcc.target/sh/pr53512-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the fsca insn is not used when specifying -mno-fsca and\n   -funsafe-math-optimizations.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mno-fsca -funsafe-math-optimizations\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fsca\" } } */"}, {"sha": "71522c8d96498aaaa7eb3ec69fc8f8f9e8370b11", "filename": "gcc/testsuite/gcc.target/sh/pr53512-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the fsrra insn is used when specifying -mfsrra and\n   -funsafe-math-optimizations and -ffinite-math-only.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mfsrra -funsafe-math-optimizations -ffinite-math-only\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"fsrra\" } } */"}, {"sha": "1645eed528fed919c841d97c49804940db3f3bd7", "filename": "gcc/testsuite/gcc.target/sh/pr53512-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the fsrra insn is not used when specifying -mno-fsrra and\n   -funsafe-math-optimizations and -ffinite-math-only.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -mno-fsrra -funsafe-math-optimizations -ffinite-math-only\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fsrra\" } } */"}, {"sha": "e274170fe1f303bc6656ab4282fb8fdc8cf74159", "filename": "gcc/testsuite/gcc.target/sh/pr53568-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53568-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53568-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53568-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the bswap32 pattern is generated as swap.b and swap.w\n    instructions.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"swap.w\" 7 } } */"}, {"sha": "a2e7213cd8f0e3b104483dcb33651083f24f726e", "filename": "gcc/testsuite/gcc.target/sh/pr53988.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53988.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53988.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53988.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    values loaded from memory.  If everything goes as expected we won't see\n    any sign/zero extensions or and ops.  On SH2A we don't expect to see the\n    movu insn.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"tst\\tr\" 8 } } */"}, {"sha": "3eb700ad267c4c3bdbaf01fc89643fc03bb104e3", "filename": "gcc/testsuite/gcc.target/sh/pr54089-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the rotcr instruction is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rotcr\" 24 } } */"}, {"sha": "17466f3e19e1e04850e288c833e52420caf15253", "filename": "gcc/testsuite/gcc.target/sh/pr54089-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -9,7 +9,7 @@\n \tmov\tr4,r0\n \trts\n \trotcr\tr0  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m3* -m2a* -m4*\" } }  */\n /* { dg-final { scan-assembler-not \"neg\" } } */"}, {"sha": "abdb021cade38cc08986a7bd1454cf2e7802db55", "filename": "gcc/testsuite/gcc.target/sh/pr54089-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* The dynamic shift library functions truncate the shift count to 5 bits.\n    Verify that this is taken into account and no extra shift count\n    truncations are generated before the library call.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m1*\" \"-m2\" \"-m2e*\" } } */\n /* { dg-final { scan-assembler-not \"and\" } } */"}, {"sha": "e01e51c0a36471c57baa805eb31542f48e672ec5", "filename": "gcc/testsuite/gcc.target/sh/pr54089-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the rotcr instruction is generated when shifting the\n    negated T bit on non-SH2A.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rotcr\" 1 } } */"}, {"sha": "decb9db9504cf9c6c312e716efd86e3fe25b2e87", "filename": "gcc/testsuite/gcc.target/sh/pr54089-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-5.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the movrt rotr instruction sequence is generated when shifting\n    the negated T bit on SH2A.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"movrt\" 1 } } */"}, {"sha": "577690dd8329957bddbdf232b3443e61b7dce4c5", "filename": "gcc/testsuite/gcc.target/sh/pr54089-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-6.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the rotr and rotl instructions are generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rotr\" 2 } } */"}, {"sha": "0476f75d199c4101efdf384b9a565591dfc58b04", "filename": "gcc/testsuite/gcc.target/sh/pr54089-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-7.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the rotcr instruction is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rotcr\" 4 } } */"}, {"sha": "d2cced75a58e9777a4f0b8b8644fb83c49cb8d1c", "filename": "gcc/testsuite/gcc.target/sh/pr54089-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-8.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the rotcl instruction is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rotcl\" 28 } } */"}, {"sha": "8aa15df8605296354abb556d426cd298a70195d5", "filename": "gcc/testsuite/gcc.target/sh/pr54089-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-9.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the rotcr instruction is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rotcl\" 4 } } */"}, {"sha": "f7568a92c59749fd34ddcd9156e3e2c192af91a9", "filename": "gcc/testsuite/gcc.target/sh/pr54236-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Tests to check the utilization of addc, subc and negc instructions in\n    special cases.  If everything works as expected we won't see any\n    movt instructions in these cases.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-times \"addc\" 4 } } */"}, {"sha": "b3cf48c9d32e3c5533cb5007ad35315966ee8130", "filename": "gcc/testsuite/gcc.target/sh/pr54236-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Tests to check the utilization of the addc instruction in special cases.\n    If everything works as expected we won't see any movt instructions in\n    these cases.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-times \"addc\" 37 } } */"}, {"sha": "ec52d89405a7d5bdcfaea6298aa7e7831ed2697b", "filename": "gcc/testsuite/gcc.target/sh/pr54386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54386.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the inlined mem load is not handled as unaligned load.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-not \"shll|extu|or\" } } */"}, {"sha": "bd402b3a0c17ca1eb4cbfdf2b77d5d64394de9de", "filename": "gcc/testsuite/gcc.target/sh/pr54602-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that the delay slot is stuffed with register pop insns for normal\n    (i.e. not interrupt handler) function returns.  If everything goes as\n    expected we won't see any nop insns.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-not \"nop\" } } */"}, {"sha": "05592ddbfdd9f1da6b4db79e69e7d917ff82183b", "filename": "gcc/testsuite/gcc.target/sh/pr54602-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that the delay slot is not stuffed with register pop insns for\n    interrupt handler function returns on SH1* and SH2* targets, where the\n    rte insn uses the stack pointer.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m1*\" \"-m2*\" } }  */\n /* { dg-final { scan-assembler-times \"nop\" 1 } } */"}, {"sha": "5d6a75a70ae313908b42d54e8fa504ec5ab7ce55", "filename": "gcc/testsuite/gcc.target/sh/pr54602-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the rte delay slot is not stuffed with register pop insns\n    which touch the banked registers r0..r7 on SH3* and SH4* targets.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m3*\" \"-m4*\" } }  */\n /* { dg-final { scan-assembler-times \"nop\" 1 } } */"}, {"sha": "78fb9096e93e8180db089d4f35f897e121837275", "filename": "gcc/testsuite/gcc.target/sh/pr54602-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that the delay slot is stuffed with register pop insns on SH3* and\n    SH4* targets, where the stack pointer is not used by the rte insn.  If\n    everything works out, we won't see a nop insn.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m3*\" \"-m4*\" } }  */\n /* { dg-final { scan-assembler-not \"nop\" } } */"}, {"sha": "9171eeaf65c252656a338dbd6ace8037a2a7351c", "filename": "gcc/testsuite/gcc.target/sh/pr54680.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that the fsca input value is not converted to float and then back\n    to int.  Notice that we can't count just \"lds\" insns because mode switches\n    use \"lds.l\".  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2 -mfsca -funsafe-math-optimizations\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 7 } } */"}, {"sha": "111a12013d6949b40e16339f2f716bb78cfb3f87", "filename": "gcc/testsuite/gcc.target/sh/pr54685.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54685.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54685.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54685.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that a comparison 'unsigned int <= 0x7FFFFFFF' results in code\n    utilizing the cmp/pz instruction.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-not \"not\\[ \\t\\]\" } } */"}, {"sha": "4437511cf7c93c83cd35769ebc02475069a902b5", "filename": "gcc/testsuite/gcc.target/sh/pr54760-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the __builtin_thread_pointer and __builtin_set_thread_pointer\n    built-in functions result in gbr store / load instructions.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"ldc\" 1 } } */"}, {"sha": "4a3561a56e99cac73c838f4c7775aed43feb2d40", "filename": "gcc/testsuite/gcc.target/sh/pr54760-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that thread pointer relative memory accesses are converted to\n    gbr displacement address modes.  If we see a gbr register store\n    instruction something is not working properly.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"stc\\tgbr\" 0 } } */"}, {"sha": "678fb3954268f965d6cb63467cbf9f9c6172cf0c", "filename": "gcc/testsuite/gcc.target/sh/pr54760-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -2,7 +2,7 @@\n    surrounding code.\n    These should be moved to C torture tests once there are target\n    independent thread_pointer built-in functions available.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n "}, {"sha": "d21828196b6c4c679f506b9d640bb8956a02fb77", "filename": "gcc/testsuite/gcc.target/sh/pr54760-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-4.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Check that the GBR address optimization does not combine a gbr store\n    and its use when a function call is in between, when GBR is a call used\n    register, i.e. it is invalidated by function calls.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -fcall-used-gbr\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler \"stc\\tgbr\" } } */"}, {"sha": "91f09359d1c723f7eb4650599589850d01cf8ba0", "filename": "gcc/testsuite/gcc.target/sh/pr55146.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55146.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the 'extu.b' instruction is generated for short jump tables.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-Os\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler \"extu.b\" } } */"}, {"sha": "dca15c9b5ab55dbed283fc32430343acc0f177f8", "filename": "gcc/testsuite/gcc.target/sh/pr55160.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55160.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55160.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55160.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check that the decrement-and-test instruction is generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler-times \"dt\\tr\" 2 } } */"}, {"sha": "b77c5e10ee5753633771644df42e5c87f9360688", "filename": "gcc/testsuite/gcc.target/sh/pr55303-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the SH2A clips and clipu instructions are generated as\n    expected.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"clips.b\" 2 } } */"}, {"sha": "34f706327dfece72c1e960bbdbb813212e182f79", "filename": "gcc/testsuite/gcc.target/sh/pr55303-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that for SH2A smax/smin -> cbranch conversion is done properly\n    if the clips insn is not used and the expected comparison insns are\n    generated.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"cmp/pl\" 4 } } */"}, {"sha": "57c2f403e7165d4953bcee9eeca8127b4b143377", "filename": "gcc/testsuite/gcc.target/sh/pr55303-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-3.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the special case (umin (reg const_int 1)) results in the\n    expected instruction sequence on SH2A.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 1 } } */"}, {"sha": "0c7c97e81dd8cb038eb9f97ea75cb8cb264df864", "filename": "gcc/testsuite/gcc.target/sh/pr56547-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that the fmac insn is used for the expression 'a * b + a' and\n    'a * a + a'.\n    This assumes that the default compiler setting is -ffp-contract=fast.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmac\" 2 } } */"}, {"sha": "2d36fa9c5685c8412fc5b3f707ea44c8d8ac0368", "filename": "gcc/testsuite/gcc.target/sh/pr56547-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that the fmac insn is used for the expression 'a * b + a' and\n    'a * a + a' when -ffast-math is specified.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O1 -ffast-math\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmac\" 2 } } */"}, {"sha": "a49b877b5760d5e2424728bcb01c75b5cba60c6b", "filename": "gcc/testsuite/gcc.target/sh/pr6526.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr6526.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr6526.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr6526.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the XF registers are not clobbered by an integer division\n    that is done using double precision FPU division.  */\n-/* { dg-do run { target \"sh*-*-*\" } }  */\n+/* { dg-do run }  */\n /* { dg-options \"-O1 -mdiv=call-fp\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4*-single\" \"-m4*-single-only\" } }  */\n "}, {"sha": "6dbd8e7c932ef7677d7e39fba7a2dc3eeb730e67", "filename": "gcc/testsuite/gcc.target/sh/pragma-isr-trap-exit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trap-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trap-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trap-exit.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check whether trapa is generated only for an ISR.  */\n-/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-do compile }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"trapa\\[ \\t\\]\\[ \\t\\]*#4\" 1 } }  */"}, {"sha": "fb580bde87a65d02e7ad67827d87ef9265cea6a0", "filename": "gcc/testsuite/gcc.target/sh/prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fprefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fprefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fprefetch.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH4 and SH2A operand cache prefetch\n    instruction PREF @Rm.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O0\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" \"-m3*\" \"-m4*\" } }  */\n /* { dg-final { scan-assembler \"pref\"} }  */"}, {"sha": "48f1b13b0d30135da8a2a185d111a5d85264aa63", "filename": "gcc/testsuite/gcc.target/sh/rte-delay-slot.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Frte-delay-slot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Frte-delay-slot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Frte-delay-slot.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m1 -m2*\" }  */\n /* { dg-final { scan-assembler-not \"\\trte\\t\\n\\tmov.l\\t@r15\\\\+\" } } */"}, {"sha": "a5096262c876ee47a651688586b55c6ef493470a", "filename": "gcc/testsuite/gcc.target/sh/sh2a-band.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-band.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-band.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-band.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    \"BAND.B #imm3, @(disp12, Rn)\".  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O1 -mbitops\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"band.b\"} }  */"}, {"sha": "ab1e3ddab204f39f4b940839152dfcd1b1a69f4d", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bclr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction\n    'BCLR #imm3,Rn'.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O1\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bclr\"} }  */"}, {"sha": "9c99c592980233fc3ffd18da50454a96c6fcbf71", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bclrmem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclrmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclrmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclrmem.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction\n    \"BCLR #imm3,@(disp12,Rn)\".  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O2 -mbitops\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bclr\"} }  */"}, {"sha": "d0c74c9c72c524c11e7831274605636e8ece94ec", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bld.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bld.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -4,7 +4,7 @@\n     BLD #imm3, Rn\n     BLD.B #imm3, @(disp12, Rn)\n  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-Os -mbitops\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bld\"} }  */"}, {"sha": "8db437709972524dba969a325c93a21d4d8cece8", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bor.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bor.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    \"BOR.B #imm3, @(disp12, Rn)\".  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O1 -mbitops\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bor.b\"} }  */"}, {"sha": "322821b5accffe8071704499c1301329e6e4665d", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction\n   'BSET #imm3,Rn'.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O1\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bset\"} }  */"}, {"sha": "cf35ed632bf211e46604b835dc8dfed4d7ffd702", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bsetmem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bsetmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bsetmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bsetmem.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction\n    \"BSET #imm3,@(disp12,Rn)\".  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O2 -mbitops\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bset\"} }  */"}, {"sha": "6cca825e61220a4998b5fdb5463779a3188fea10", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bxor.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bxor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bxor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bxor.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    \"BXOR.B #imm3, @(disp12, Rn)\".  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O1 -mbitops\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bxor.b\"} }  */"}, {"sha": "3f55327f0d734380815869f8dcc463be2f44d78a", "filename": "gcc/testsuite/gcc.target/sh/sh2a-jsrn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-jsrn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-jsrn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-jsrn.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    'JSR/N @Rm'.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O0\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"jsr/n\"} }  */"}, {"sha": "fe3226e25141fa427728df4b0a30fadb1794c474", "filename": "gcc/testsuite/gcc.target/sh/sh2a-movi20s.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movi20s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movi20s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movi20s.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Testcase to check generation of 'MOVI20S #imm20, Rn'.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O0\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"movi20s\"} }  */"}, {"sha": "3e72930ca64c9fbb8e4c1850151eeb9d97a834c3", "filename": "gcc/testsuite/gcc.target/sh/sh2a-movrt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movrt.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    'MOVRT Rn'.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O1\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"movrt\"} }  */"}, {"sha": "a12a711afa6dedeec9889cf96282228765090a11", "filename": "gcc/testsuite/gcc.target/sh/sh2a-resbank.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-resbank.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-resbank.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-resbank.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Test for resbank attribute.  */\n-/* { dg-do assemble {target sh*-*-*}} */\n+/* { dg-do assemble }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" } */\n /* { dg-final { scan-assembler \"resbank\" } } */\n  "}, {"sha": "612c3032de119294c0bf14b56b45922efa002809", "filename": "gcc/testsuite/gcc.target/sh/sh2a-rtsn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-rtsn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-rtsn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-rtsn.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    'RTS/N'.  */\n-/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-do assemble }  */\n /* { dg-options \"-O0\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"rts/n\"} }  */"}, {"sha": "24b57febe636393b03dc14dabd4067eb49a1a0a0", "filename": "gcc/testsuite/gcc.target/sh/sh2a-tbr-jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-tbr-jump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-tbr-jump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-tbr-jump.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Testcase to check generation of a SH2A specific,\n    TBR relative jump instruction - 'JSR @@(disp8,TBR)'.  */\n-/* { dg-do assemble {target sh*-*-*}} */\n+/* { dg-do assemble }  */\n /* { dg-options \"\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" } */\n /* { dg-final { scan-assembler-times \"jsr/n\\\\t@@\\\\(40,tbr\\\\)\" 1} } */"}, {"sha": "35ebf5cd3e63fc54e2551740f0c2293995ac21a0", "filename": "gcc/testsuite/gcc.target/sh/sh4a-bitmovua.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Verify that we generate movua to load unaligned 32-bit values on SH4A.  */\n-/* { dg-do run { target \"sh*-*-*\" } } */\n+/* { dg-do run }  */\n /* { dg-options \"-O1 -save-temps -fno-inline\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a*\" } }  */\n /* { dg-final { scan-assembler-times \"movua.l\" 6 } } */"}, {"sha": "d6277da7e9ae9f029e6687c665489b6fe1d34b8f", "filename": "gcc/testsuite/gcc.target/sh/sh4a-cosf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that we generate single-precision sine and cosine approximate\n    (fsca) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O -ffast-math\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler \"fsca\" } } */"}, {"sha": "0bd7d8773bbade334d2e3f0bdd3408ff7124916b", "filename": "gcc/testsuite/gcc.target/sh/sh4a-fsrra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that we generate single-precision square root reciprocal\n    approximate (fsrra) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O -ffast-math\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler \"fsrra\" } } */"}, {"sha": "b85fa86a278c45c757ca0afce56db01783a4ebdb", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sincosf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that we generate a single single-precision sine and cosine\n    approximate (fsca) in fast math mode when a function computes both\n    sine and cosine.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O -ffast-math\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 1 } } */"}, {"sha": "0ce13263ec17055d10f0a295010d080293d6d7d8", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sinf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that we generate single-precision sine and cosine approximate\n    (fsca) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O -ffast-math\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler \"fsca\" } } */"}, {"sha": "aad6ba001c062d10109e76373bf6e123a7a629a7", "filename": "gcc/testsuite/gcc.target/sh/sp-switch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsp-switch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsp-switch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsp-switch.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-final { scan-assembler \"mov\\tr0,r15\" } } */\n /* { dg-final { scan-assembler \".long\\t_alt_stack\" } } */\n "}, {"sha": "115baba99cd3efd6e0383c2af6a34e60230470f3", "filename": "gcc/testsuite/gcc.target/sh/strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstrlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstrlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstrlen.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Check that the __builtin_strlen function is inlined with cmp/str\n    when optimizing for speed.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-not \"jmp\" } } */"}, {"sha": "50c8f34c3e67e82c0c20a7aeafacfc5cd3d63fdb", "filename": "gcc/testsuite/gcc.target/sh/struct-arg-dw2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that we don't generate frame related insn against stack adjustment\n    for the object sent partially in registers. */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-g\" } */\n /* { dg-final { scan-assembler-not \"\\t.cfi_def_cfa_offset 16\" } } */\n "}, {"sha": "de6ba028c87c7d492501617fce8bdb2f42854752", "filename": "gcc/testsuite/gcc.target/sh/torture/pr34777.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr34777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr34777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr34777.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-additional-options \"-fschedule-insns -fPIC -mprefergot\" }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n "}, {"sha": "7a11508405bbb1dbd941e7307a8594f48635b8b9", "filename": "gcc/testsuite/gcc.target/sh/torture/pr58314.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n /* { dg-options \"-Os\" } */\n \n typedef unsigned short __u16;"}, {"sha": "f44780d297a9338e72ada86ba5b4610b80a869fc", "filename": "gcc/testsuite/gcc.target/sh/torture/pr58475.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58475.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58475.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58475.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile }  */\n \n int\n kerninfo(int __bsx, double tscale)"}, {"sha": "9e665bafb48bd5aac0a8f13228c223aba89884c4", "filename": "gcc/testsuite/gcc.target/sh/torture/pragma-isr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpragma-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpragma-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpragma-isr.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check whether rte is generated for two ISRs.  */\n-/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-do compile }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rte\" 2 } }  */\n "}, {"sha": "ce984e73fbd2a327549537aea9d8c1516653958e", "filename": "gcc/testsuite/gcc.target/sh/torture/pragma-isr2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpragma-isr2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpragma-isr2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpragma-isr2.c?ref=3c40bae1c50f4fd8c23ee04d7fe768d7df68f2e6", "patch": "@@ -1,5 +1,5 @@\n /* Check whether rte is generated only for an ISRs.  */\n-/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-do compile }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n "}]}