{"sha": "6643ca0be6f34786b686415e457de96d0d9fbd2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0M2NhMGJlNmYzNDc4NmI2ODY0MTVlNDU3ZGU5NmQwZDlmYmQyZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-06T18:43:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-06T20:56:34Z"}, "message": "x86: Check mode of pseudo register push\n\ncommit 266f44a91c0c9705d3d18e82d7c5bab32927a18f\nAuthor: H.J. Lu <hjl.tools@gmail.com>\nDate:   Sun May 17 10:10:34 2020 -0700\n\n    x86: Allow V1TI vector register pushes\n\n    Add V1TI vector register push and split it after reload to a sequence\n    of:\n\n    (set (reg:P SP_REG) (plus:P SP_REG) (const_int -8)))\n    (set (match_dup 0) (match_dup 1))\n\nadded a pseudo register push check.  But\n\n(insn 13 12 14 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])\n        (reg/v:SI 87 [ srclen ])) \"x.c\":37:16 54 {*pushsi2}\n     (expr_list:REG_DEAD (reg/v:SI 87 [ srclen ])\n        (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])\n            (nil))))\n\nis not a pseudo register push.  In 64-bit mode, mode of pseudo register\npush is TImode.  In 32-bit mode, it is DImode.  Add pseudo register push\nmode check to pseudo_reg_set.\n\ngcc/\n\n\tPR target/98161\n\t* config/i386/i386-features.c (pseudo_reg_set): Check mode of\n\tpseudo register push.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/pr98161.c: New test.", "tree": {"sha": "c094b31602f3cd9454a85d2d2f6d1feca9c001df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c094b31602f3cd9454a85d2d2f6d1feca9c001df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6643ca0be6f34786b686415e457de96d0d9fbd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6643ca0be6f34786b686415e457de96d0d9fbd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6643ca0be6f34786b686415e457de96d0d9fbd2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6643ca0be6f34786b686415e457de96d0d9fbd2d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "c61685bd2f561cdd8670d846185f284de68a7ba3", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6643ca0be6f34786b686415e457de96d0d9fbd2d/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6643ca0be6f34786b686415e457de96d0d9fbd2d/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=6643ca0be6f34786b686415e457de96d0d9fbd2d", "patch": "@@ -1266,9 +1266,10 @@ pseudo_reg_set (rtx_insn *insn)\n     return NULL;\n \n   /* Check pseudo register push first. */\n+  machine_mode mode = TARGET_64BIT ? TImode : DImode;\n   if (REG_P (SET_SRC (set))\n       && !HARD_REGISTER_P (SET_SRC (set))\n-      && push_operand (SET_DEST (set), GET_MODE (SET_DEST (set))))\n+      && push_operand (SET_DEST (set), mode))\n     return set;\n \n   df_ref ref;"}, {"sha": "5825b9bd1dbb34c29ae242200a6f373ed2f5ac28", "filename": "gcc/testsuite/gcc.target/i386/pr98161.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6643ca0be6f34786b686415e457de96d0d9fbd2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6643ca0be6f34786b686415e457de96d0d9fbd2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98161.c?ref=6643ca0be6f34786b686415e457de96d0d9fbd2d", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse4\" } */\n+/* { dg-require-effective-target sse4} */\n+\n+typedef unsigned short u16;\n+typedef unsigned int   u32;\n+typedef unsigned char  u8;\n+\n+u32\n+__attribute__((__force_align_arg_pointer__))\n+unreach(const u16 * pu16, u16 *dst, u32 dstlen, const u8 *src, u32 srclen)\n+{\n+  for (u32 i = dstlen; srclen && i; i--, srclen--, src++, dst++)\n+    {\n+      u16 off = pu16[*src];\n+      if (off)\n+\t{\n+\t  src++; srclen--;\n+\t  *dst = pu16[off + *src];\n+\t}\n+    }\n+  return 56;\n+}\n+\n+u32\n+__attribute__((__force_align_arg_pointer__))\n+__attribute__((noipa))\n+bug(const u16 * pu16, u16 *dst, u32 dstlen, const u8 *src, u32 srclen)\n+{\n+  if (pu16)\n+    /* Branch should not execute, but stack realignment\n+     * reads wrong 'pu16' value from stack. */\n+    return unreach(pu16, dst, dstlen, src, srclen);\n+\n+  return (srclen < dstlen) ? srclen : dstlen;\n+}\n+\n+int\n+main()\n+{\n+  if (__builtin_cpu_supports (\"sse4.1\"))\n+    {\n+      /* Should return 12 */\n+      if (bug(0, 0, 12, 0, 34) != 12)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}]}