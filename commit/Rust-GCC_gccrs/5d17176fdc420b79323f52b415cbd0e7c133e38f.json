{"sha": "5d17176fdc420b79323f52b415cbd0e7c133e38f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxNzE3NmZkYzQyMGI3OTMyM2Y1MmI0MTVjYmQwZTdjMTMzZTM4Zg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:14:22Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:14:22Z"}, "message": "(andsi3): Match op2 with logic_operand, change constraint accordingly.\n\n(andsi3): Match op2 with logic_operand, change constraint\naccordingly.  Output andnot for negative op2.\n(iorsi3, xorsi3): Analogous changes.\nMove all plain logical patterns together.\n\nFrom-SVN: r10724", "tree": {"sha": "35091dda23acc538fa066ae1ff98ac0b7580eed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35091dda23acc538fa066ae1ff98ac0b7580eed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d17176fdc420b79323f52b415cbd0e7c133e38f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d17176fdc420b79323f52b415cbd0e7c133e38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d17176fdc420b79323f52b415cbd0e7c133e38f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d17176fdc420b79323f52b415cbd0e7c133e38f/comments", "author": null, "committer": null, "parents": [{"sha": "fb3ba99d6393fff8a8c8202a449a5db28c94329c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3ba99d6393fff8a8c8202a449a5db28c94329c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3ba99d6393fff8a8c8202a449a5db28c94329c"}], "stats": {"total": 164, "additions": 87, "deletions": 77}, "files": [{"sha": "1891a3ec1184b163437f2ed2b99a80478ccf99c9", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 87, "deletions": 77, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17176fdc420b79323f52b415cbd0e7c133e38f/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17176fdc420b79323f52b415cbd0e7c133e38f/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=5d17176fdc420b79323f52b415cbd0e7c133e38f", "patch": "@@ -1645,32 +1645,48 @@\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"%d\")\n+\t\t(match_operand:SI 2 \"logic_operand\" \"dIM\")))]\n   \"\"\n   \"*\n {\n+  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n+    return \\\"andnot\t%C2,%1,%0\\\";\n   if (i960_bypass (insn, operands[1], operands[2], 0))\n     return \\\"and\t%2,%1,%0\\\";\n   return \\\"and\t%1,%2,%0\\\";\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (not:SI (match_operand:SI 1 \"arith_operand\" \"dI\"))\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+\t(and:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n+\t\t(match_operand:SI 2 \"cmplpower2_operand\" \"n\")))]\n   \"\"\n   \"*\n {\n+  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t bitpos (~INTVAL (operands[2])));\n+  return \\\"clrbit\t%2,%1,%0\\\";\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"logic_operand\" \"dIM\")))]\n+  \"\"\n+  \"*\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n+    return \\\"nor\t%C2,%1,%0\\\";\n   if (i960_bypass (insn, operands[1], operands[2], 0))\n     return \\\"notand\t%2,%1,%0\\\";\n   return \\\"andnot\t%1,%2,%0\\\";\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (not:SI (match_operand:SI 1 \"arith_operand\" \"%dI\"))\n-\t\t(not:SI (match_operand:SI 2 \"arith_operand\" \"dI\"))))]\n+\t(ior:SI (not:SI (match_operand:SI 1 \"register_operand\" \"%d\"))\n+\t\t(not:SI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"\"\n   \"*\n {\n@@ -1679,9 +1695,23 @@\n   return \\\"nand\t%1,%2,%0\\\";\n }\")\n \n+(define_insn \"iorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%d\")\n+\t\t(match_operand:SI 2 \"logic_operand\" \"dIM\")))]\n+  \"\"\n+  \"*\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n+    return \\\"ornot\t%C2,%1,%0\\\";\n+  if (i960_bypass (insn, operands[1], operands[2], 0))\n+    return \\\"or\t%2,%1,%0\\\";\n+  return \\\"or\t%1,%2,%0\\\";\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"power2_operand\" \"n\")))]\n   \"\"\n   \"*\n@@ -1693,42 +1723,43 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (ashift:SI (const_int 1)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+\t(ior:SI (not:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"logic_operand\" \"dIM\")))]\n   \"\"\n-  \"setbit\t%1,%2,%0\")\n+  \"*\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n+    return \\\"nand\t%C2,%1,%0\\\";\n+  if (i960_bypass (insn, operands[1], operands[2], 0))\n+    return \\\"notor\t%2,%1,%0\\\";\n+  return \\\"ornot\t%1,%2,%0\\\";\n+}\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n-\t\t(match_operand:SI 2 \"cmplpower2_operand\" \"n\")))]\n+\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"%d\"))\n+\t\t(not:SI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t bitpos (~INTVAL (operands[2])));\n-  return \\\"clrbit\t%2,%1,%0\\\";\n+  if (i960_bypass (insn, operands[1], operands[2], 0))\n+    return \\\"nor\t%2,%1,%0\\\";\n+  return \\\"nor\t%1,%2,%0\\\";\n }\")\n \n-;; (not (ashift 1 reg)) canonicalizes to (rotate -2 reg)\n-(define_insn \"\"\n+(define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (rotate:SI (const_int -2)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n-  \"\"\n-  \"clrbit\t%1,%2,%0\")\n-\n-;; The above pattern canonicalizes to this when both the input and output\n-;; are the same pseudo-register.\n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t(const_int 0))]\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%d\")\n+\t\t(match_operand:SI 2 \"logic_operand\" \"dIM\")))]\n   \"\"\n-  \"clrbit\t%1,%0,%0\")\n+  \"*\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n+    return \\\"xnor\t%C2,%1,%0\\\";\n+  if (i960_bypass (insn, operands[1], operands[2], 0))\n+    return \\\"xor\t%2,%1,%0\\\";\n+  return \\\"xor\t%1,%2,%0\\\";\n+}\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1744,71 +1775,50 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(xor:SI (ashift:SI (const_int 1)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n-  \"\"\n-  \"notbit\t%1,%2,%0\")\n-\n-(define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+\t(not:SI (xor:SI (match_operand:SI 1 \"register_operand\" \"%d\")\n+\t\t\t(match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"\"\n   \"*\n {\n   if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"or\t%2,%1,%0\\\";\n-  return \\\"or\t%1,%2,%0\\\";\n+    return \\\"xnor\t%2,%1,%0\\\";\n+  return \\\"xnor\t%2,%1,%0\\\";\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (not:SI (match_operand:SI 1 \"arith_operand\" \"dI\"))\n+\t(ior:SI (ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"\"\n-  \"*\n-{\n-  if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"notor\t%2,%1,%0\\\";\n-  return \\\"ornot\t%1,%2,%0\\\";\n-}\")\n+  \"setbit\t%1,%2,%0\")\n \n+;; (not (ashift 1 reg)) canonicalizes to (rotate -2 reg)\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (not:SI (match_operand:SI 1 \"arith_operand\" \"%dI\"))\n-\t\t(not:SI (match_operand:SI 2 \"arith_operand\" \"dI\"))))]\n+\t(and:SI (rotate:SI (const_int -2)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"*\n-{\n-  if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"nor\t%2,%1,%0\\\";\n-  return \\\"nor\t%1,%2,%0\\\";\n-}\")\n+  \"clrbit\t%1,%2,%0\")\n \n-(define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(xor:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+;; The above pattern canonicalizes to this when both the input and output\n+;; are the same pseudo-register.\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t(const_int 0))]\n   \"\"\n-  \"*\n-{\n-  if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"xor\t%2,%1,%0\\\";\n-  return \\\"xor\t%1,%2,%0\\\";\n-}\")\n+  \"clrbit\t%1,%0,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(not:SI (xor:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n-\t\t\t(match_operand:SI 2 \"arith_operand\" \"dI\"))))]\n+\t(xor:SI (ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"\"\n-  \"*\n-{\n-  if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"xnor\t%2,%1,%0\\\";\n-  return \\\"xnor\t%2,%1,%0\\\";\n-}\")\n+  \"notbit\t%1,%2,%0\")\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")"}]}