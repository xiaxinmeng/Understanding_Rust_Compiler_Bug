{"sha": "ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlOWEwYTc2ZTQyMTJkOGVjMmI0MWQ3NTZhZTgyZWY4NGQxM2Q0MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-02-08T09:40:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-02-08T09:40:46Z"}, "message": "utils.c (create_var_decl): Set again DECL_COMMON and DECL_IGNORED_P last.\n\n\t* gcc-interface/utils.c (create_var_decl): Set again DECL_COMMON and\n\tDECL_IGNORED_P last.\n\nFrom-SVN: r233210", "tree": {"sha": "e1c0dd395600a81eb425b24b3dd6744e4c20916f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1c0dd395600a81eb425b24b3dd6744e4c20916f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40/comments", "author": null, "committer": null, "parents": [{"sha": "43f4a281a321cf24391870c340e2a52e8acb6b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f4a281a321cf24391870c340e2a52e8acb6b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f4a281a321cf24391870c340e2a52e8acb6b7f"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "43ae0a900e3a0dfd45cfe09cbff5c0ceae63a85b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40", "patch": "@@ -1,3 +1,8 @@\n+2016-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (create_var_decl): Set again DECL_COMMON and\n+\tDECL_IGNORED_P last.\n+\n 2016-01-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (enum attr_type): Rename into..."}, {"sha": "a62d9c240731f1964a3a9d2d4feff840d695b010", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ffe9a0a76e4212d8ec2b41d756ae82ef84d13d40", "patch": "@@ -2484,6 +2484,24 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n   DECL_ARTIFICIAL (var_decl) = artificial_p;\n   DECL_EXTERNAL (var_decl) = extern_flag;\n \n+  TREE_CONSTANT (var_decl) = constant_p;\n+  TREE_READONLY (var_decl) = const_flag;\n+\n+  /* The object is public if it is external or if it is declared public\n+     and has static storage duration.  */\n+  TREE_PUBLIC (var_decl) = extern_flag || (public_flag && static_storage);\n+\n+  /* We need to allocate static storage for an object with static storage\n+     duration if it isn't external.  */\n+  TREE_STATIC (var_decl) = !extern_flag && static_storage;\n+\n+  TREE_SIDE_EFFECTS (var_decl)\n+    = TREE_THIS_VOLATILE (var_decl)\n+    = TYPE_VOLATILE (type) | volatile_flag;\n+\n+  if (TREE_SIDE_EFFECTS (var_decl))\n+    TREE_ADDRESSABLE (var_decl) = 1;\n+\n   /* Ada doesn't feature Fortran-like COMMON variables so we shouldn't\n      try to fiddle with DECL_COMMON.  However, on platforms that don't\n      support global BSS sections, uninitialized global variables would\n@@ -2508,24 +2526,6 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n \t     != null_pointer_node))\n     DECL_IGNORED_P (var_decl) = 1;\n \n-  TREE_CONSTANT (var_decl) = constant_p;\n-  TREE_READONLY (var_decl) = const_flag;\n-\n-  /* The object is public if it is external or if it is declared public\n-     and has static storage duration.  */\n-  TREE_PUBLIC (var_decl) = extern_flag || (public_flag && static_storage);\n-\n-  /* We need to allocate static storage for an object with static storage\n-     duration if it isn't external.  */\n-  TREE_STATIC (var_decl) = !extern_flag && static_storage;\n-\n-  TREE_SIDE_EFFECTS (var_decl)\n-    = TREE_THIS_VOLATILE (var_decl)\n-    = TYPE_VOLATILE (type) | volatile_flag;\n-\n-  if (TREE_SIDE_EFFECTS (var_decl))\n-    TREE_ADDRESSABLE (var_decl) = 1;\n-\n   /* ??? Some attributes cannot be applied to CONST_DECLs.  */\n   if (TREE_CODE (var_decl) == VAR_DECL)\n     process_attributes (&var_decl, &attr_list, true, gnat_node);"}]}