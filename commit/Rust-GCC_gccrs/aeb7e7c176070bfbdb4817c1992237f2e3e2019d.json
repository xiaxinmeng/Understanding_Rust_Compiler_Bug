{"sha": "aeb7e7c176070bfbdb4817c1992237f2e3e2019d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViN2U3YzE3NjA3MGJmYmRiNDgxN2MxOTkyMjM3ZjJlM2UyMDE5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-01-08T17:01:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-08T17:01:58Z"}, "message": "re PR fortran/55341 (address-sanitizer and Fortran)\n\n\tPR fortran/55341\n\t* asan.c (asan_clear_shadow): New function.\n\t(asan_emit_stack_protection): Use it.\n\nFrom-SVN: r195025", "tree": {"sha": "48b3c9aa4647fa4a5704ac3a66e96527996459b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b3c9aa4647fa4a5704ac3a66e96527996459b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb7e7c176070bfbdb4817c1992237f2e3e2019d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb7e7c176070bfbdb4817c1992237f2e3e2019d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb7e7c176070bfbdb4817c1992237f2e3e2019d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb7e7c176070bfbdb4817c1992237f2e3e2019d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4208463a3f454e3b10e3a3a306ee7416897c301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4208463a3f454e3b10e3a3a306ee7416897c301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4208463a3f454e3b10e3a3a306ee7416897c301"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "59d97edee7b29fc6d2af5f8c00cd8dd5badbe928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb7e7c176070bfbdb4817c1992237f2e3e2019d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb7e7c176070bfbdb4817c1992237f2e3e2019d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeb7e7c176070bfbdb4817c1992237f2e3e2019d", "patch": "@@ -1,3 +1,9 @@\n+2013-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/55341\n+\t* asan.c (asan_clear_shadow): New function.\n+\t(asan_emit_stack_protection): Use it.\n+\n 2013-01-08  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_<su>mult_lo_<mode>,"}, {"sha": "4f9927b9ef44aa7d9c7efc4355ba95d389b8a2b9", "filename": "gcc/asan.c", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb7e7c176070bfbdb4817c1992237f2e3e2019d/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb7e7c176070bfbdb4817c1992237f2e3e2019d/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=aeb7e7c176070bfbdb4817c1992237f2e3e2019d", "patch": "@@ -270,6 +270,45 @@ asan_shadow_cst (unsigned char shadow_bytes[4])\n   return GEN_INT (trunc_int_for_mode (val, SImode));\n }\n \n+/* Clear shadow memory at SHADOW_MEM, LEN bytes.  Can't call a library call here\n+   though.  */\n+\n+static void\n+asan_clear_shadow (rtx shadow_mem, HOST_WIDE_INT len)\n+{\n+  rtx insn, insns, top_label, end, addr, tmp, jump;\n+\n+  start_sequence ();\n+  clear_storage (shadow_mem, GEN_INT (len), BLOCK_OP_NORMAL);\n+  insns = get_insns ();\n+  end_sequence ();\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    if (CALL_P (insn))\n+      break;\n+  if (insn == NULL_RTX)\n+    {\n+      emit_insn (insns);\n+      return;\n+    }\n+\n+  gcc_assert ((len & 3) == 0);\n+  top_label = gen_label_rtx ();\n+  addr = force_reg (Pmode, XEXP (shadow_mem, 0));\n+  shadow_mem = adjust_automodify_address (shadow_mem, SImode, addr, 0);\n+  end = force_reg (Pmode, plus_constant (Pmode, addr, len));\n+  emit_label (top_label);\n+\n+  emit_move_insn (shadow_mem, const0_rtx);\n+  tmp = expand_simple_binop (Pmode, PLUS, addr, GEN_INT (4), addr,\n+                             true, OPTAB_LIB_WIDEN);\n+  if (tmp != addr)\n+    emit_move_insn (addr, tmp);\n+  emit_cmp_and_jump_insns (addr, end, LT, NULL_RTX, Pmode, true, top_label);\n+  jump = get_last_insn ();\n+  gcc_assert (JUMP_P (jump));\n+  add_reg_note (jump, REG_BR_PROB, GEN_INT (REG_BR_PROB_BASE * 80 / 100));\n+}\n+\n /* Insert code to protect stack vars.  The prologue sequence should be emitted\n    directly, epilogue sequence returned.  BASE is the register holding the\n    stack base, against which OFFSETS array offsets are relative to, OFFSETS\n@@ -404,8 +443,7 @@ asan_emit_stack_protection (rtx base, HOST_WIDE_INT *offsets, tree *decls,\n \t\t\t\t       (last_offset - prev_offset)\n \t\t\t\t       >> ASAN_SHADOW_SHIFT);\n \t  prev_offset = last_offset;\n-\t  clear_storage (shadow_mem, GEN_INT (last_size >> ASAN_SHADOW_SHIFT),\n-\t\t\t BLOCK_OP_NORMAL);\n+\t  asan_clear_shadow (shadow_mem, last_size >> ASAN_SHADOW_SHIFT);\n \t  last_offset = offset;\n \t  last_size = 0;\n \t}\n@@ -418,8 +456,7 @@ asan_emit_stack_protection (rtx base, HOST_WIDE_INT *offsets, tree *decls,\n       shadow_mem = adjust_address (shadow_mem, VOIDmode,\n \t\t\t\t   (last_offset - prev_offset)\n \t\t\t\t   >> ASAN_SHADOW_SHIFT);\n-      clear_storage (shadow_mem, GEN_INT (last_size >> ASAN_SHADOW_SHIFT),\n-\t\t     BLOCK_OP_NORMAL);\n+      asan_clear_shadow (shadow_mem, last_size >> ASAN_SHADOW_SHIFT);\n     }\n \n   do_pending_stack_adjust ();"}]}