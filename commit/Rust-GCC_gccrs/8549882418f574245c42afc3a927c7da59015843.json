{"sha": "8549882418f574245c42afc3a927c7da59015843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0OTg4MjQxOGY1NzQyNDVjNDJhZmMzYTkyN2M3ZGE1OTAxNTg0Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-23T01:35:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-23T01:35:06Z"}, "message": "c-common.c (c_common_truthvalue_conversion): Adjust comment.\n\n\t* c-common.c (c_common_truthvalue_conversion): Adjust comment.\n\tCall c_common_truthvalue_conversion rather than\n\tlang_hooks.truthvalue_conversion.\n\t* c-convert.c (convert): Call c_objc_common_truthvalue_conversion.\n\t* c-objc-common.c (c_objc_common_truthvalue_conversion): Move to\n\tc-typeck.c.\n\t* c-objc-common.h (LANG_HOOKS_TRUTHVALUE_CONVERSION): Change to\n\tc_common_truthvalue_conversion.\n\t* c-parser.c (c_parser_paren_condition, c_parser_for_statement,\n\tc_parser_conditional_expression, c_parser_binary_expression): Call\n\tc_objc_common_truthvalue_conversion.\n\t* c-typeck.c (build_unary_op): Call\n\tc_objc_common_truthvalue_conversion.\n\t(build_conditional_expr): Do not call\n\tlang_hooks.truthvalue_conversion.\n\t(build_binary_op): Call c_common_truthvalue_conversion.\n\t(c_objc_common_truthvalue_conversion): Moved from\n\tc-objc-common.c.  Call default_function_array_conversion instead\n\tof default_conversion.\n\nobjc:\n\t* objc-act.c (next_sjlj_build_enter_and_setjmp,\n\tnext_sjlj_build_catch_list, next_sjlj_build_try_catch_finally):\n\tCall c_common_truthvalue_conversion.\n\nFrom-SVN: r96917", "tree": {"sha": "2dc0be928c289ceb6e2df4ae5cf04396eb70721e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dc0be928c289ceb6e2df4ae5cf04396eb70721e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8549882418f574245c42afc3a927c7da59015843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8549882418f574245c42afc3a927c7da59015843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8549882418f574245c42afc3a927c7da59015843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8549882418f574245c42afc3a927c7da59015843/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522ddfa2543f57daddbb9cd8e2a44d8f6425396e"}], "stats": {"total": 154, "additions": 95, "deletions": 59}, "files": [{"sha": "8f354b5cf2f521671e90200f0bd904fe6b2437f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -1,3 +1,25 @@\n+2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_common_truthvalue_conversion): Adjust comment.\n+\tCall c_common_truthvalue_conversion rather than\n+\tlang_hooks.truthvalue_conversion.\n+\t* c-convert.c (convert): Call c_objc_common_truthvalue_conversion.\n+\t* c-objc-common.c (c_objc_common_truthvalue_conversion): Move to\n+\tc-typeck.c.\n+\t* c-objc-common.h (LANG_HOOKS_TRUTHVALUE_CONVERSION): Change to\n+\tc_common_truthvalue_conversion.\n+\t* c-parser.c (c_parser_paren_condition, c_parser_for_statement,\n+\tc_parser_conditional_expression, c_parser_binary_expression): Call\n+\tc_objc_common_truthvalue_conversion.\n+\t* c-typeck.c (build_unary_op): Call\n+\tc_objc_common_truthvalue_conversion.\n+\t(build_conditional_expr): Do not call\n+\tlang_hooks.truthvalue_conversion.\n+\t(build_binary_op): Call c_common_truthvalue_conversion.\n+\t(c_objc_common_truthvalue_conversion): Moved from\n+\tc-objc-common.c.  Call default_function_array_conversion instead\n+\tof default_conversion.\n+\n 2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-common.h (default_conversion): Remove."}, {"sha": "ec7b04d6f325baebf03552285dfa668e66a89ee6", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -2313,7 +2313,9 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n }\n \f\n /* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n-   or validate its data type for an `if' or `while' statement or ?..: exp.\n+   or for an `if' or `while' statement or ?..: exp.  It should already\n+   have been validated to be of suitable type; otherwise, a bad\n+   diagnostic may result.\n \n    This preparation consists of taking the ordinary\n    representation of an expression expr and producing a valid tree\n@@ -2345,14 +2347,14 @@ c_common_truthvalue_conversion (tree expr)\n       if (TREE_TYPE (expr) == truthvalue_type_node)\n \treturn expr;\n       return build2 (TREE_CODE (expr), truthvalue_type_node,\n-\t\t lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0)),\n-\t\t lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 1)));\n+\t\t c_common_truthvalue_conversion (TREE_OPERAND (expr, 0)),\n+\t\t c_common_truthvalue_conversion (TREE_OPERAND (expr, 1)));\n \n     case TRUTH_NOT_EXPR:\n       if (TREE_TYPE (expr) == truthvalue_type_node)\n \treturn expr;\n       return build1 (TREE_CODE (expr), truthvalue_type_node,\n-\t\t lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0)));\n+\t\t c_common_truthvalue_conversion (TREE_OPERAND (expr, 0)));\n \n     case ERROR_MARK:\n       return expr;\n@@ -2400,15 +2402,15 @@ c_common_truthvalue_conversion (tree expr)\n     case COMPLEX_EXPR:\n       return build_binary_op ((TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n \t\t\t       ? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n-\t\tlang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0)),\n-\t\tlang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 0)),\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n \t\t\t      0);\n \n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */\n-      return lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0));\n+      return c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n@@ -2417,16 +2419,16 @@ c_common_truthvalue_conversion (tree expr)\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1)))\n \treturn build2 (COMPOUND_EXPR, truthvalue_type_node,\n \t\t       TREE_OPERAND (expr, 1),\n-\t\t       lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0)));\n+\t\t       c_common_truthvalue_conversion (TREE_OPERAND (expr, 0)));\n       else\n-\treturn lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n       return fold (build3 (COND_EXPR, truthvalue_type_node,\n \t\tTREE_OPERAND (expr, 0),\n-\t\tlang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-\t\tlang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n \n     case CONVERT_EXPR:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n@@ -2439,7 +2441,7 @@ c_common_truthvalue_conversion (tree expr)\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n \t  >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n-\treturn lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n       break;\n \n     case MINUS_EXPR:\n@@ -2488,8 +2490,8 @@ c_common_truthvalue_conversion (tree expr)\n       return (build_binary_op\n \t      ((TREE_SIDE_EFFECTS (expr)\n \t\t? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n-\tlang_hooks.truthvalue_conversion (build_unary_op (REALPART_EXPR, t, 0)),\n-\tlang_hooks.truthvalue_conversion (build_unary_op (IMAGPART_EXPR, t, 0)),\n+\tc_common_truthvalue_conversion (build_unary_op (REALPART_EXPR, t, 0)),\n+\tc_common_truthvalue_conversion (build_unary_op (IMAGPART_EXPR, t, 0)),\n \t       0));\n     }\n "}, {"sha": "d6bff462ede7bc9b6653e5a8a9d7fb07a72a7733", "filename": "gcc/c-convert.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"convert.h\"\n #include \"c-common.h\"\n+#include \"c-tree.h\"\n #include \"langhooks.h\"\n #include \"toplev.h\"\n \n@@ -95,7 +96,7 @@ convert (tree type, tree expr)\n     return fold (convert_to_integer (type, e));\n   if (code == BOOLEAN_TYPE)\n     {\n-      tree t = lang_hooks.truthvalue_conversion (expr);\n+      tree t = c_objc_common_truthvalue_conversion (expr);\n       if (TREE_CODE (t) == ERROR_MARK)\n \treturn t;\n "}, {"sha": "4b09c3e40d861e5bf92785cf45de85c14a8872d5", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -230,34 +230,6 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n   return true;\n }\n \n-tree\n-c_objc_common_truthvalue_conversion (tree expr)\n-{\n- retry:\n-  switch (TREE_CODE (TREE_TYPE (expr)))\n-    {\n-    case ARRAY_TYPE:\n-      expr = default_conversion (expr);\n-      if (TREE_CODE (TREE_TYPE (expr)) != ARRAY_TYPE)\n-\tgoto retry;\n-\n-      error (\"used array that cannot be converted to pointer where scalar is required\");\n-      return error_mark_node;\n-\n-    case RECORD_TYPE:\n-      error (\"used struct type value where scalar is required\");\n-      return error_mark_node;\n-\n-    case UNION_TYPE:\n-      error (\"used union type value where scalar is required\");\n-      return error_mark_node;\n-    default:\n-      break;\n-    }\n-\n-  return c_common_truthvalue_conversion (expr);\n-}\n-\n /* In C and ObjC, all decls have \"C\" linkage.  */\n bool\n has_c_linkage (tree decl ATTRIBUTE_UNUSED)"}, {"sha": "c6cca43d3c0f9c800ca2eafe0d8944dff5751a33", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -53,7 +53,7 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n-#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_objc_common_truthvalue_conversion\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL c_finish_incomplete_decl\n #undef LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS"}, {"sha": "8e8626ef248efdd0b886bd799cc25da469c1c934", "filename": "gcc/c-parser.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -3580,7 +3580,8 @@ c_parser_paren_condition (c_parser *parser)\n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return error_mark_node;\n   loc = c_parser_peek_token (parser)->location;\n-  cond = lang_hooks.truthvalue_conversion (c_parser_expression (parser).value);\n+  cond = c_objc_common_truthvalue_conversion\n+    (c_parser_expression (parser).value);\n   if (EXPR_P (cond))\n     SET_EXPR_LOCATION (cond, loc);\n   c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n@@ -3816,7 +3817,7 @@ c_parser_for_statement (c_parser *parser)\n       else\n \t{\n \t  tree ocond = c_parser_expression (parser).value;\n-\t  cond = lang_hooks.truthvalue_conversion (ocond);\n+\t  cond = c_objc_common_truthvalue_conversion (ocond);\n \t  if (EXPR_P (cond))\n \t    SET_EXPR_LOCATION (cond, loc);\n \t  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n@@ -4151,13 +4152,14 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n \tpedwarn (\"ISO C forbids omitting the middle term of a ?: expression\");\n       /* Make sure first operand is calculated only once.  */\n       exp1.value = save_expr (default_conversion (cond.value));\n-      cond.value = lang_hooks.truthvalue_conversion (exp1.value);\n+      cond.value = c_objc_common_truthvalue_conversion (exp1.value);\n       skip_evaluation += cond.value == truthvalue_true_node;\n     }\n   else\n     {\n       cond.value\n-\t= lang_hooks.truthvalue_conversion (default_conversion (cond.value));\n+\t= c_objc_common_truthvalue_conversion\n+\t(default_conversion (cond.value));\n       skip_evaluation += cond.value == truthvalue_false_node;\n       exp1 = c_parser_expression (parser);\n       skip_evaluation += ((cond.value == truthvalue_true_node)\n@@ -4394,12 +4396,12 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after)\n       switch (ocode)\n \t{\n \tcase TRUTH_ANDIF_EXPR:\n-\t  stack[sp].expr.value = lang_hooks.truthvalue_conversion\n+\t  stack[sp].expr.value = c_objc_common_truthvalue_conversion\n \t    (default_conversion (stack[sp].expr.value));\n \t  skip_evaluation += stack[sp].expr.value == truthvalue_false_node;\n \t  break;\n \tcase TRUTH_ORIF_EXPR:\n-\t  stack[sp].expr.value = lang_hooks.truthvalue_conversion\n+\t  stack[sp].expr.value = c_objc_common_truthvalue_conversion\n \t    (default_conversion (stack[sp].expr.value));\n \t  skip_evaluation += stack[sp].expr.value == truthvalue_true_node;\n \t  break;"}, {"sha": "9ddafe10c5d5d1535c31ad5f69e7d7748046f40c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -2561,6 +2561,8 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n       break;\n \n     case TRUTH_NOT_EXPR:\n+      /* ??? Why do most validation here but that for non-lvalue arrays\n+\t in c_objc_common_truthvalue_conversion?  */\n       if (typecode != INTEGER_TYPE\n \t  && typecode != REAL_TYPE && typecode != POINTER_TYPE\n \t  && typecode != COMPLEX_TYPE\n@@ -2570,7 +2572,7 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t  error (\"wrong type argument to unary exclamation mark\");\n \t  return error_mark_node;\n \t}\n-      arg = lang_hooks.truthvalue_conversion (arg);\n+      arg = c_objc_common_truthvalue_conversion (arg);\n       return invert_truthvalue (arg);\n \n     case NOP_EXPR:\n@@ -2926,8 +2928,6 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n   tree result_type = NULL;\n   tree orig_op1 = op1, orig_op2 = op2;\n \n-  ifexp = lang_hooks.truthvalue_conversion (default_conversion (ifexp));\n-\n   /* Promote both alternatives.  */\n \n   if (TREE_CODE (TREE_TYPE (op1)) != VOID_TYPE)\n@@ -7316,8 +7316,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t     but that does not mean the operands should be\n \t     converted to ints!  */\n \t  result_type = integer_type_node;\n-\t  op0 = lang_hooks.truthvalue_conversion (op0);\n-\t  op1 = lang_hooks.truthvalue_conversion (op1);\n+\t  op0 = c_common_truthvalue_conversion (op0);\n+\t  op1 = c_common_truthvalue_conversion (op1);\n \t  converted = 1;\n \t}\n       break;\n@@ -7797,3 +7797,34 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     return result;\n   }\n }\n+\n+\n+/* Convert EXPR to be a truth-value, validating its type for this\n+   purpose.  Passes EXPR to default_function_array_conversion.  */\n+\n+tree\n+c_objc_common_truthvalue_conversion (tree expr)\n+{\n+  expr = default_function_array_conversion (expr);\n+  switch (TREE_CODE (TREE_TYPE (expr)))\n+    {\n+    case ARRAY_TYPE:\n+      error (\"used array that cannot be converted to pointer where scalar is required\");\n+      return error_mark_node;\n+\n+    case RECORD_TYPE:\n+      error (\"used struct type value where scalar is required\");\n+      return error_mark_node;\n+\n+    case UNION_TYPE:\n+      error (\"used union type value where scalar is required\");\n+      return error_mark_node;\n+\n+    default:\n+      break;\n+    }\n+\n+  /* ??? Should we also give an error for void and vectors rather than\n+     leaving those to give errors later?  */\n+  return c_common_truthvalue_conversion (expr);\n+}"}, {"sha": "00df6c3dffdf1c90d92e46f3fe2fadb835320a30", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -1,3 +1,9 @@\n+2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c (next_sjlj_build_enter_and_setjmp,\n+\tnext_sjlj_build_catch_list, next_sjlj_build_try_catch_finally):\n+\tCall c_common_truthvalue_conversion.\n+\n 2005-02-25  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* Make-lang.in (objc/objc-parse.o-warn, objc/objc-parse.o,"}, {"sha": "1848e3c6c47dac0536ec461963173e8b65792da3", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8549882418f574245c42afc3a927c7da59015843/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8549882418f574245c42afc3a927c7da59015843/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8549882418f574245c42afc3a927c7da59015843", "patch": "@@ -3019,7 +3019,7 @@ next_sjlj_build_enter_and_setjmp (void)\n   sj = build_function_call (objc_setjmp_decl, t);\n \n   cond = build (COMPOUND_EXPR, TREE_TYPE (sj), enter, sj);\n-  cond = lang_hooks.truthvalue_conversion (cond);\n+  cond = c_common_truthvalue_conversion (cond);\n \n   return build (COND_EXPR, void_type_node, cond, NULL, NULL);\n }\n@@ -3086,7 +3086,7 @@ next_sjlj_build_catch_list (void)\n \t      t = objc_get_class_reference (OBJC_TYPE_NAME (TREE_TYPE (type)));\n \t      args = tree_cons (NULL, t, args);\n \t      t = build_function_call (objc_exception_match_decl, args);\n-\t      cond = lang_hooks.truthvalue_conversion (t);\n+\t      cond = c_common_truthvalue_conversion (t);\n \t    }\n \t  t = build (COND_EXPR, void_type_node, cond, body, NULL);\n \t  SET_EXPR_LOCUS (t, EXPR_LOCUS (stmt));\n@@ -3208,7 +3208,7 @@ next_sjlj_build_try_catch_finally (void)\n   /* Build the complete FINALLY statement list.  */\n   t = next_sjlj_build_try_exit ();\n   t = build_stmt (COND_EXPR,\n-\t\t  lang_hooks.truthvalue_conversion (rethrow_decl),\n+\t\t  c_common_truthvalue_conversion (rethrow_decl),\n \t\t  NULL, t);\n   SET_EXPR_LOCATION (t, cur_try_context->finally_locus);\n   append_to_statement_list (t, &TREE_OPERAND (try_fin, 1));\n@@ -3219,7 +3219,7 @@ next_sjlj_build_try_catch_finally (void)\n   t = tree_cons (NULL, rethrow_decl, NULL);\n   t = build_function_call (objc_exception_throw_decl, t);\n   t = build_stmt (COND_EXPR,\n-\t\t  lang_hooks.truthvalue_conversion (rethrow_decl),\n+\t\t  c_common_truthvalue_conversion (rethrow_decl),\n \t\t  t, NULL);\n   SET_EXPR_LOCATION (t, cur_try_context->end_finally_locus);\n   append_to_statement_list (t, &TREE_OPERAND (try_fin, 1));"}]}