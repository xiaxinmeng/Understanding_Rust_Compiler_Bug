{"sha": "f33211587118865c4f26f3806355441c4dfdb8b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzMjExNTg3MTE4ODY1YzRmMjZmMzgwNjM1NTQ0MWM0ZGZkYjhiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-30T11:15:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-30T11:15:20Z"}, "message": "re PR tree-optimization/49218 (Incorrect optimization of a 'for' loop creates an infinite loop)\n\n2011-05-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49218\n\t* tree-vrp.c (adjust_range_with_scev): Properly check whether\n\toverflow occured.\n\n\t* gcc.c-torture/execute/pr49218.c: New testcase.\n\nFrom-SVN: r174429", "tree": {"sha": "461b8951a8882fd9c13e1232291f8e317d76f105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461b8951a8882fd9c13e1232291f8e317d76f105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33211587118865c4f26f3806355441c4dfdb8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33211587118865c4f26f3806355441c4dfdb8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33211587118865c4f26f3806355441c4dfdb8b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33211587118865c4f26f3806355441c4dfdb8b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d12d8efea8fcb3122b78b3eafb7e35fe7ec2f4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12d8efea8fcb3122b78b3eafb7e35fe7ec2f4bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12d8efea8fcb3122b78b3eafb7e35fe7ec2f4bd"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "e1d9f65508ddf35fe9fc93348b1db3d69ce9972c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f33211587118865c4f26f3806355441c4dfdb8b8", "patch": "@@ -1,3 +1,9 @@\n+2011-05-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49218\n+\t* tree-vrp.c (adjust_range_with_scev): Properly check whether\n+\toverflow occured.\n+\n 2011-05-30  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_into_comparison):"}, {"sha": "2a504c75e9e9608cbb7665a0bb9221e545f8f23f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f33211587118865c4f26f3806355441c4dfdb8b8", "patch": "@@ -1,3 +1,8 @@\n+2011-05-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49218\n+\t* gcc.c-torture/execute/pr49218.c: New testcase.\n+\n 2011-05-30  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/49199"}, {"sha": "2fb18dda760dfd344ecd5e4f3627a59c37ab3edf", "filename": "gcc/testsuite/gcc.c-torture/execute/pr49218.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49218.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49218.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49218.c?ref=f33211587118865c4f26f3806355441c4dfdb8b8", "patch": "@@ -0,0 +1,20 @@\n+#ifdef __SIZEOF_INT128__\n+typedef __int128 L;\n+#else\n+typedef long long L;\n+#endif\n+float f;\n+\n+int\n+main ()\n+{\n+  L i = f;\n+  if (i <= 10)\n+    do\n+      {\n+\t++i;\n+\tasm (\"\");\n+      }\n+    while (i != 11);\n+  return 0;\n+}"}, {"sha": "f40d0d4c89048dd3b45bd3c7f5a5667d03f861c1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33211587118865c4f26f3806355441c4dfdb8b8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f33211587118865c4f26f3806355441c4dfdb8b8", "patch": "@@ -3423,11 +3423,17 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n                                            loop->nb_iterations_upper_bound,\n                                            double_int_one),\n                                        unsigned_p, &overflow);\n-      tem = double_int_to_tree (TREE_TYPE (init), dtmp);\n       /* If the multiplication overflowed we can't do a meaningful\n-\t adjustment.  */\n-      if (!overflow && double_int_equal_p (dtmp, tree_to_double_int (tem)))\n-\t{\n+\t adjustment.  Likewise if the result doesn't fit in the type\n+\t of the induction variable.  For a signed type we have to\n+\t check whether the result has the expected signedness which\n+\t is that of the step as nb_iterations_upper_bound is unsigned.  */\n+      if (!overflow\n+\t  && double_int_fits_to_tree_p (TREE_TYPE (init), dtmp)\n+\t  && (unsigned_p\n+\t      || ((dtmp.high ^ TREE_INT_CST_HIGH (step)) >= 0)))\n+\t{\n+\t  tem = double_int_to_tree (TREE_TYPE (init), dtmp);\n \t  extract_range_from_binary_expr (&maxvr, PLUS_EXPR,\n \t\t\t\t\t  TREE_TYPE (init), init, tem);\n \t  /* Likewise if the addition did.  */"}]}