{"sha": "83a840a91fb3281f8980eaacdb7b5377778da3bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhODQwYTkxZmIzMjgxZjg5ODBlYWFjZGI3YjUzNzc3NzhkYTNiYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-09-03T14:25:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-09-03T14:25:25Z"}, "message": "PR libstdc++/87194 fix range insertion into maps and sets\n\nSince C++11 range insertion and construction of maps and sets from a\npair of iterators only requires that the iterator's value_type is\nconvertible to the container's value_type (previously it had to be the\nsame).\n\nThis fixes the implementation to meet that relaxed requirement, by\ndefining a pair of overloads that either insert or emplace, depending on\nthe iterator's value_type. Instead of adding yet another overload of\n_M_insert_unique and _M_insert_equal, the overloads taking iterators are\nrenamed to _M_insert_range_unique and _M_insert_range_equal.\n\n\tPR libstdc++/87194\n\t* include/bits/stl_map.h\n\t(map::map(initializer_list<value_type>, const Compare&, const Alloc&))\n\t(map::map(initializer_list<value_type>, const Alloc&))\n\t(map::map(InputIterator, InputIterator, const Alloc&))\n\t(map::map(InputIterator, InputIterator))\n\t(map::map(InputIterator, InputIterator, const Compare&, const Alloc&))\n\t(map::insert(InputIterator, InputIterator)):\n\tCall _M_insert_range_unique instead of _M_insert_unique.\n\t* include/bits/stl_multimap.h\n\t(multimap::multimap(initializer_list<value_type>, const C&, const A&))\n\t(multimap::multimap(initializer_list<value_type>, const A&))\n\t(multimap::multimap(InputIterator, InputIterator, const A&))\n\t(multimap::multimap(InputIterator, InputIterator))\n\t(multimap::multimap(InputIterator, InputIterator, const C&, const A&))\n\t(multimap::insert(InputIterator, InputIterator)): Call\n\t_M_insert_range_equal instead of _M_insert_equal.\n\t* include/bits/stl_multiset.h\n\t(multiset::multiset(InputIterator, InputIterator))\n\t(multiset::multiset(InputIterator, InputIterator, const C&, const A&))\n\t(multiset::multiset(initializer_list<value_type>, const C&, const A&))\n\t(multiset::multiset(initializer_list<value_type>, const A&))\n\t(multiset::multiset(InputIterator, InputIterator, const A&))\n\t(multiset::insert(InputIterator, InputIterator)): Call\n\t_M_insert_range_equal instead of _M_insert_equal.\n\t* include/bits/stl_set.h\n\t(set::set(InputIterator, InputIterator))\n\t(set::set(InputIterator, InputIterator, const Compare&, const Alloc&))\n\t(set::set(initializer_list<value_type>, const Compare&, const Alloc&))\n\t(set::set(initializer_list<value_type>, const Alloc&))\n\t(set::set(InputIterator, InputIterator, const Alloc&))\n\t(set::insert(InputIterator, InputIterator)):\n\tCall _M_insert_range_unique instead of _M_insert_unique.\n\t* include/bits/stl_tree.h\n\t[__cplusplus >= 201103L] (_Rb_tree::__same_value_type): New alias\n\ttemplate for SFINAE constraints.\n\t[__cplusplus >= 201103L] (_Rb_tree::_M_insert_range_unique): Pair of\n\tconstrained overloads that either insert or emplace, depending on\n\titerator's value_type.\n\t[__cplusplus >= 201103L] (_Rb_tree::_M_insert_range_equal): Likewise.\n\t[__cplusplus < 201103L] (_Rb_tree::_M_insert_range_unique)\n\t(_Rb_tree::_M_insert_range_equal): New functions replacing range\n\tversions of _M_insert_unique and _M_insert_equal.\n\t(_Rb_tree::_M_insert_unique(_InputIterator, _InputIterator))\n\t(_Rb_tree::_M_insert_equal(_InputIterator, _InputIterator)): Remove.\n\t* testsuite/23_containers/map/modifiers/insert/87194.cc: New test.\n\t* testsuite/23_containers/multimap/modifiers/insert/87194.cc: New test.\n\t* testsuite/23_containers/multiset/modifiers/insert/87194.cc: New test.\n\t* testsuite/23_containers/set/modifiers/insert/87194.cc: New test.\n\nFrom-SVN: r264060", "tree": {"sha": "2e92c6147aece7f85ca771a0c202e3d5d84e5e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e92c6147aece7f85ca771a0c202e3d5d84e5e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a840a91fb3281f8980eaacdb7b5377778da3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a840a91fb3281f8980eaacdb7b5377778da3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a840a91fb3281f8980eaacdb7b5377778da3bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a840a91fb3281f8980eaacdb7b5377778da3bb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc62e155e412fd2230ec0538e2bef86211d26301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc62e155e412fd2230ec0538e2bef86211d26301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc62e155e412fd2230ec0538e2bef86211d26301"}], "stats": {"total": 356, "additions": 306, "deletions": 50}, "files": [{"sha": "6a576baeed5135ce9f8184681049e4b9944e9ef3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -1,5 +1,55 @@\n 2018-09-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/87194\n+\t* include/bits/stl_map.h\n+\t(map::map(initializer_list<value_type>, const Compare&, const Alloc&))\n+\t(map::map(initializer_list<value_type>, const Alloc&))\n+\t(map::map(InputIterator, InputIterator, const Alloc&))\n+\t(map::map(InputIterator, InputIterator))\n+\t(map::map(InputIterator, InputIterator, const Compare&, const Alloc&))\n+\t(map::insert(InputIterator, InputIterator)):\n+\tCall _M_insert_range_unique instead of _M_insert_unique.\n+\t* include/bits/stl_multimap.h\n+\t(multimap::multimap(initializer_list<value_type>, const C&, const A&))\n+\t(multimap::multimap(initializer_list<value_type>, const A&))\n+\t(multimap::multimap(InputIterator, InputIterator, const A&))\n+\t(multimap::multimap(InputIterator, InputIterator))\n+\t(multimap::multimap(InputIterator, InputIterator, const C&, const A&))\n+\t(multimap::insert(InputIterator, InputIterator)): Call\n+\t_M_insert_range_equal instead of _M_insert_equal.\n+\t* include/bits/stl_multiset.h\n+\t(multiset::multiset(InputIterator, InputIterator))\n+\t(multiset::multiset(InputIterator, InputIterator, const C&, const A&))\n+\t(multiset::multiset(initializer_list<value_type>, const C&, const A&))\n+\t(multiset::multiset(initializer_list<value_type>, const A&))\n+\t(multiset::multiset(InputIterator, InputIterator, const A&))\n+\t(multiset::insert(InputIterator, InputIterator)): Call\n+\t_M_insert_range_equal instead of _M_insert_equal.\n+\t* include/bits/stl_set.h\n+\t(set::set(InputIterator, InputIterator))\n+\t(set::set(InputIterator, InputIterator, const Compare&, const Alloc&))\n+\t(set::set(initializer_list<value_type>, const Compare&, const Alloc&))\n+\t(set::set(initializer_list<value_type>, const Alloc&))\n+\t(set::set(InputIterator, InputIterator, const Alloc&))\n+\t(set::insert(InputIterator, InputIterator)):\n+\tCall _M_insert_range_unique instead of _M_insert_unique.\n+\t* include/bits/stl_tree.h\n+\t[__cplusplus >= 201103L] (_Rb_tree::__same_value_type): New alias\n+\ttemplate for SFINAE constraints.\n+\t[__cplusplus >= 201103L] (_Rb_tree::_M_insert_range_unique): Pair of\n+\tconstrained overloads that either insert or emplace, depending on\n+\titerator's value_type.\n+\t[__cplusplus >= 201103L] (_Rb_tree::_M_insert_range_equal): Likewise.\n+\t[__cplusplus < 201103L] (_Rb_tree::_M_insert_range_unique)\n+\t(_Rb_tree::_M_insert_range_equal): New functions replacing range\n+\tversions of _M_insert_unique and _M_insert_equal.\n+\t(_Rb_tree::_M_insert_unique(_InputIterator, _InputIterator))\n+\t(_Rb_tree::_M_insert_equal(_InputIterator, _InputIterator)): Remove.\n+\t* testsuite/23_containers/map/modifiers/insert/87194.cc: New test.\n+\t* testsuite/23_containers/multimap/modifiers/insert/87194.cc: New test.\n+\t* testsuite/23_containers/multiset/modifiers/insert/87194.cc: New test.\n+\t* testsuite/23_containers/set/modifiers/insert/87194.cc: New test.\n+\n \tPR libstdc++/78595\n \t* include/bits/stl_map.h (map::insert(_Pair&&))\n \t(map::insert(const_iterator, _Pair&&)): Do emplace instead of insert."}, {"sha": "0a4946ccb9617cbed80f7e917b105260f99623df", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -227,7 +227,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n       : _M_t(__comp, _Pair_alloc_type(__a))\n-      { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }\n \n       /// Allocator-extended default constructor.\n       explicit\n@@ -247,14 +247,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended initialier-list constructor.\n       map(initializer_list<value_type> __l, const allocator_type& __a)\n       : _M_t(_Pair_alloc_type(__a))\n-      { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tmap(_InputIterator __first, _InputIterator __last,\n \t    const allocator_type& __a)\n \t: _M_t(_Pair_alloc_type(__a))\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n #endif\n \n       /**\n@@ -270,7 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tmap(_InputIterator __first, _InputIterator __last)\n \t: _M_t()\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n       /**\n        *  @brief  Builds a %map from a range.\n@@ -289,7 +289,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    const _Compare& __comp,\n \t    const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, _Pair_alloc_type(__a))\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n #if __cplusplus >= 201103L\n       /**\n@@ -889,7 +889,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n #if __cplusplus > 201402L\n #define __cpp_lib_map_insertion 201411"}, {"sha": "6d5c264e67fa6fde5247b8bca1a79385e9878136", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -224,7 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n       : _M_t(__comp, _Pair_alloc_type(__a))\n-      { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }\n \n       /// Allocator-extended default constructor.\n       explicit\n@@ -244,14 +244,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended initialier-list constructor.\n       multimap(initializer_list<value_type> __l, const allocator_type& __a)\n       : _M_t(_Pair_alloc_type(__a))\n-      { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tmultimap(_InputIterator __first, _InputIterator __last,\n \t\t const allocator_type& __a)\n \t: _M_t(_Pair_alloc_type(__a))\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n #endif\n \n       /**\n@@ -266,7 +266,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tmultimap(_InputIterator __first, _InputIterator __last)\n \t: _M_t()\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n       /**\n        *  @brief  Builds a %multimap from a range.\n@@ -284,7 +284,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t const _Compare& __comp,\n \t\t const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, _Pair_alloc_type(__a))\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n #if __cplusplus >= 201103L\n       /**\n@@ -609,7 +609,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n #if __cplusplus >= 201103L\n       /**"}, {"sha": "f150471d07a2a26db4cf5f25b6b9c3ba84245f14", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -186,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tmultiset(_InputIterator __first, _InputIterator __last)\n \t: _M_t()\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n       /**\n        *  @brief  Builds a %multiset from a range.\n@@ -204,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t const _Compare& __comp,\n \t\t const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, _Key_alloc_type(__a))\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n       /**\n        *  @brief  %Multiset copy constructor.\n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n       : _M_t(__comp, _Key_alloc_type(__a))\n-      { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }\n \n       /// Allocator-extended default constructor.\n       explicit\n@@ -260,14 +260,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended initialier-list constructor.\n       multiset(initializer_list<value_type> __l, const allocator_type& __a)\n       : _M_t(_Key_alloc_type(__a))\n-      { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tmultiset(_InputIterator __first, _InputIterator __last,\n \t\t const allocator_type& __a)\n \t: _M_t(_Key_alloc_type(__a))\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n       /**\n        *  The dtor only erases the elements, and note that if the elements\n@@ -549,7 +549,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n-\t{ _M_t._M_insert_equal(__first, __last); }\n+\t{ _M_t._M_insert_range_equal(__first, __last); }\n \n #if __cplusplus >= 201103L\n       /**"}, {"sha": "a8d10d5a7884037465330761ab6948272adea394", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tset(_InputIterator __first, _InputIterator __last)\n \t: _M_t()\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n       /**\n        *  @brief  Builds a %set from a range.\n@@ -209,7 +209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    const _Compare& __comp,\n \t    const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, _Key_alloc_type(__a))\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n       /**\n        *  @brief  %Set copy constructor.\n@@ -244,7 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n       : _M_t(__comp, _Key_alloc_type(__a))\n-      { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }\n \n       /// Allocator-extended default constructor.\n       explicit\n@@ -264,14 +264,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended initialier-list constructor.\n       set(initializer_list<value_type> __l, const allocator_type& __a)\n       : _M_t(_Key_alloc_type(__a))\n-      { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n+      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tset(_InputIterator __first, _InputIterator __last,\n \t    const allocator_type& __a)\n \t: _M_t(_Key_alloc_type(__a))\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n       /**\n        *  The dtor only erases the elements, and note that if the elements\n@@ -564,7 +564,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_range_unique(__first, __last); }\n \n #if __cplusplus >= 201103L\n       /**"}, {"sha": "70d7483c7b17c4077e2ca212afb672c85cc0209d", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 52, "deletions": 26, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -1104,6 +1104,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename... _Args>\n \titerator\n \t_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);\n+\n+      template<typename _Iter>\n+\tusing __same_value_type\n+\t  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;\n+\n+      template<typename _InputIterator>\n+\t__enable_if_t<__same_value_type<_InputIterator>::value>\n+\t_M_insert_range_unique(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  _Alloc_node __an(*this);\n+\t  for (; __first != __last; ++__first)\n+\t    _M_insert_unique_(end(), *__first, __an);\n+\t}\n+\n+      template<typename _InputIterator>\n+\t__enable_if_t<!__same_value_type<_InputIterator>::value>\n+\t_M_insert_range_unique(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  for (; __first != __last; ++__first)\n+\t    _M_emplace_unique(*__first);\n+\t}\n+\n+      template<typename _InputIterator>\n+\t__enable_if_t<__same_value_type<_InputIterator>::value>\n+\t_M_insert_range_equal(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  _Alloc_node __an(*this);\n+\t  for (; __first != __last; ++__first)\n+\t    _M_insert_equal_(end(), *__first, __an);\n+\t}\n+\n+      template<typename _InputIterator>\n+\t__enable_if_t<!__same_value_type<_InputIterator>::value>\n+\t_M_insert_range_equal(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  _Alloc_node __an(*this);\n+\t  for (; __first != __last; ++__first)\n+\t    _M_emplace_equal(*__first);\n+\t}\n #else\n       pair<iterator, bool>\n       _M_insert_unique(const value_type& __x);\n@@ -1133,15 +1172,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Alloc_node __an(*this);\n \treturn _M_insert_equal_(__pos, __x, __an);\n       }\n-#endif\n \n       template<typename _InputIterator>\n \tvoid\n-\t_M_insert_unique(_InputIterator __first, _InputIterator __last);\n+\t_M_insert_range_unique(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  _Alloc_node __an(*this);\n+\t  for (; __first != __last; ++__first)\n+\t    _M_insert_unique_(end(), *__first, __an);\n+\t}\n \n       template<typename _InputIterator>\n \tvoid\n-\t_M_insert_equal(_InputIterator __first, _InputIterator __last);\n+\t_M_insert_range_equal(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  _Alloc_node __an(*this);\n+\t  for (; __first != __last; ++__first)\n+\t    _M_insert_equal_(end(), *__first, __an);\n+\t}\n+#endif\n \n     private:\n       void\n@@ -2471,29 +2520,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n #endif\n \n-  template<typename _Key, typename _Val, typename _KoV,\n-\t   typename _Cmp, typename _Alloc>\n-    template<class _II>\n-      void\n-      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::\n-      _M_insert_unique(_II __first, _II __last)\n-      {\n-\t_Alloc_node __an(*this);\n-\tfor (; __first != __last; ++__first)\n-\t  _M_insert_unique_(end(), *__first, __an);\n-      }\n-\n-  template<typename _Key, typename _Val, typename _KoV,\n-\t   typename _Cmp, typename _Alloc>\n-    template<class _II>\n-      void\n-      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::\n-      _M_insert_equal(_II __first, _II __last)\n-      {\n-\t_Alloc_node __an(*this);\n-\tfor (; __first != __last; ++__first)\n-\t  _M_insert_equal_(end(), *__first, __an);\n-      }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>"}, {"sha": "4daba408dedbb7c7fe244ed2478e2b6a405d01a8", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/87194.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F87194.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F87194.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F87194.cc?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <map>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct S\n+{\n+  operator std::pair<const int, int>() &&\n+  { int i = val; val = 0; return {i, 0}; }\n+\n+  int val;\n+};\n+\n+void\n+test01()\n+{\n+  S a[3] = { {1}, {2}, {3} };\n+  std::map<int, int> s;\n+  s.insert(std::make_move_iterator(a), std::make_move_iterator(a+3));\n+  VERIFY( s.size() == 3 );\n+  VERIFY( s.find(0) == s.end() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "8a47101577233ad2e8967bfa06c740a734efd9bd", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/insert/87194.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2F87194.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2F87194.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2F87194.cc?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <map>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct S\n+{\n+  operator std::pair<const int, int>() &&\n+  { int i = val; val = 0; return {i, 0}; }\n+\n+  int val;\n+};\n+\n+void\n+test01()\n+{\n+  S a[3] = { {1}, {2}, {3} };\n+  std::multimap<int, int> s;\n+  s.insert(std::make_move_iterator(a), std::make_move_iterator(a+3));\n+  VERIFY( s.size() == 3 );\n+  VERIFY( s.find(0) == s.end() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "c2a21d333d304b9cf09fe1d6e01fe4a6d1bf3b1b", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/insert/87194.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F87194.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F87194.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F87194.cc?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <set>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct S {\n+  S(int v) : val(v) {}\n+  operator int() && { int i = val; val = 0; return i; }\n+  int val;\n+};\n+\n+void\n+test01()\n+{\n+  S a[3] = { {1}, {2}, {3} };\n+  std::multiset<int> s;\n+  s.insert(std::make_move_iterator(a), std::make_move_iterator(a+3));\n+  VERIFY( s.size() == 3 );\n+  VERIFY( s.find(0) == s.end() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "14bf54e1d65b9eec38307d21c3d7ddc512240b1a", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/insert/87194.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Finsert%2F87194.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a840a91fb3281f8980eaacdb7b5377778da3bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Finsert%2F87194.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Finsert%2F87194.cc?ref=83a840a91fb3281f8980eaacdb7b5377778da3bb", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <set>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct S {\n+  S(int v) : val(v) {}\n+  operator int() && { int i = val; val = 0; return i; }\n+  int val;\n+};\n+\n+void\n+test01()\n+{\n+  S a[3] = { {1}, {2}, {3} };\n+  std::set<int> s;\n+  s.insert(std::make_move_iterator(a), std::make_move_iterator(a+3));\n+  VERIFY( s.size() == 3 );\n+  VERIFY( s.find(0) == s.end() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}