{"sha": "aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViZTEwZDQ4Y2NjMjE3MjczZWU4YTRlMmMzODA1ZWQxZTE3M2E3OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-02-23T19:39:35Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-02-23T19:39:35Z"}, "message": "driver: Also prune joined switches with negation\n\nWhen -march=native is passed to host_detect_local_cpu to the backend,\nit overrides all command lines after it.  That means\n\n$ gcc -march=native -march=skylake-avx512\n\nis the treated as\n\n$ gcc -march=skylake-avx512 -march=native\n\nPrune joined switches with Negative and RejectNegative to allow\n-march=skylake-avx512 to override previous -march=native on command-line.\n\ngcc/\n\n\tPR driver/69471\n\t* opts-common.c (prune_options): Also prune joined switches\n\twith Negative and RejectNegative.\n\t* config/i386/i386.opt (march=): Add Negative(march=).\n\t(mtune=): Add Negative(mtune=).\n\t* doc/options.texi: Document Negative used together with Joined\n\tand RejectNegative.\n\ngcc/testsuite/\n\n\tPR driver/69471\n\t* gcc.dg/pr69471-1.c: New test.\n\t* gcc.dg/pr69471-2.c: Likewise.\n\t* gcc.target/i386/pr69471-3.c: Likewise.\n\nFrom-SVN: r269164", "tree": {"sha": "8adfb00f7eaa823c09b2fa514cf58c21740af52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8adfb00f7eaa823c09b2fa514cf58c21740af52b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85627e2a9e9808c49da92b943a3c8e22106bf9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85627e2a9e9808c49da92b943a3c8e22106bf9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85627e2a9e9808c49da92b943a3c8e22106bf9aa"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "78d5e9962bbf063e88029b3d3edd09db0b75f95e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -1,3 +1,13 @@\n+2019-02-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/69471\n+\t* opts-common.c (prune_options): Also prune joined switches\n+\twith Negative and RejectNegative.\n+\t* config/i386/i386.opt (march=): Add Negative(march=).\n+\t(mtune=): Add Negative(mtune=).\n+\t* doc/options.texi: Document Negative used together with Joined\n+\tand RejectNegative.\n+\n 2019-02-22  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (Other Builtins): Add"}, {"sha": "b7998ee736327c31e9077a9ab2ee6f8ccde8066f", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -253,7 +253,7 @@ EnumValue\n Enum(ix86_align_data) String(cacheline) Value(ix86_align_data_type_cacheline)\n \n march=\n-Target RejectNegative Joined Var(ix86_arch_string)\n+Target RejectNegative Negative(march=) Joined Var(ix86_arch_string)\n Generate code for given CPU.\n \n masm=\n@@ -510,7 +510,7 @@ Target Report Mask(TLS_DIRECT_SEG_REFS)\n Use direct references against %gs when accessing tls data.\n \n mtune=\n-Target RejectNegative Joined Var(ix86_tune_string)\n+Target RejectNegative Negative(mtune=) Joined Var(ix86_tune_string)\n Schedule code for given CPU.\n \n mtune-ctrl="}, {"sha": "1c83d24148818133f0854020c0d7f9c8dbba7798", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -220,7 +220,11 @@ property is used.\n The option will turn off another option @var{othername}, which is\n the option name with the leading ``-'' removed.  This chain action will\n propagate through the @code{Negative} property of the option to be\n-turned off.\n+turned off.  The driver will prune options, removing those that are\n+turned off by some later option.  This pruning is not done for options\n+with @code{Joined} or @code{JoinedOrMissing} properties, unless the\n+options have either @code{RejectNegative} property or the @code{Negative}\n+property mentions an option other than itself.\n \n As a consequence, if you have a group of mutually-exclusive\n options, their @code{Negative} properties should form a circular chain."}, {"sha": "edbb3ac9b6d04580afbdcc29c67b4601360108da", "filename": "gcc/opts-common.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -1015,7 +1015,9 @@ prune_options (struct cl_decoded_option **decoded_options,\n \t    goto keep;\n \n \t  /* Skip joined switches.  */\n-\t  if ((option->flags & CL_JOINED))\n+\t  if ((option->flags & CL_JOINED)\n+\t      && (!option->cl_reject_negative\n+\t\t  || (unsigned int) option->neg_index != opt_idx))\n \t    goto keep;\n \n \t  for (j = i + 1; j < old_decoded_options_count; j++)\n@@ -1027,8 +1029,11 @@ prune_options (struct cl_decoded_option **decoded_options,\n \t\tcontinue;\n \t      if (cl_options[next_opt_idx].neg_index < 0)\n \t\tcontinue;\n-\t      if ((cl_options[next_opt_idx].flags & CL_JOINED))\n-\t\t  continue;\n+\t      if ((cl_options[next_opt_idx].flags & CL_JOINED)\n+\t\t  && (!cl_options[next_opt_idx].cl_reject_negative\n+\t\t      || ((unsigned int) cl_options[next_opt_idx].neg_index\n+\t\t\t  != next_opt_idx)))\n+\t\tcontinue;\n \t      if (cancel_option (opt_idx, next_opt_idx, next_opt_idx))\n \t\tbreak;\n \t    }"}, {"sha": "d0520fb0547cd396e8bb3dc341a9cfd26aa73eac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -1,3 +1,10 @@\n+2019-02-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/69471\n+\t* gcc.dg/pr69471-1.c: New test.\n+\t* gcc.dg/pr69471-2.c: Likewise.\n+\t* gcc.target/i386/pr69471-3.c: Likewise.\n+\n 2019-02-23  Jerry DeLisle <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/84387"}, {"sha": "3eac3b5bdbcab51fd9b357a0bbfdf8df342df03e", "filename": "gcc/testsuite/gcc.dg/pr69471-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69471-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69471-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69471-1.c?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-implicit-function-declaration -Wno-int-conversion -fno-builtin-free -fno-builtin-malloc\" } */\n+\n+void *\n+foo (void * p)\n+{\n+  free (p);\n+  return malloc (p);\n+}"}, {"sha": "d5799604b366b9a205442454744fe79bf0d9d5c2", "filename": "gcc/testsuite/gcc.dg/pr69471-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69471-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69471-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69471-2.c?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gstabs2 -gdwarf-4 -gstabs3\" } */\n+/* { dg-error \"conflicts with prior selectio\" \"\" { target *-*-* } 0 } */\n+\n+void\n+foo (void)\n+{\n+}"}, {"sha": "3826f9690900fa29ed6423d431ed4bc8d1c55c23", "filename": "gcc/testsuite/gcc.target/i386/pr69471-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69471-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebe10d48ccc217273ee8a4e2c3805ed1e173a78/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69471-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69471-3.c?ref=aebe10d48ccc217273ee8a4e2c3805ed1e173a78", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=native -march=knl\" } */\n+\n+/* NB: We want to verify that -march=native -march=processor is the same\n+   as -march=processor.  Since it is very unlikely that GCC will be built\n+   on KNL, -march=native will have -mno-avx512er and -march=knl should\n+   enable AVX512ER.  */\n+\n+#ifndef __AVX512ER__\n+# error __AVX512ER__ is not defined\n+#endif"}]}