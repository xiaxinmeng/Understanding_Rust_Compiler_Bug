{"sha": "a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3NGE2YTJmYmVhZjdjYmNiN2E3YWZlNDMzNDE4ZjJkNzQwYjQ1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-20T07:45:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-20T07:45:11Z"}, "message": "configury: Fix up --enable-link-serialization support\n\nEric reported that the --enable-link-serialization changes seemed to\ncause the binaries to be always relinked, for example from the\ngcc/ directory of the build tree:\nmake\n[relink of gnat1, brig1, cc1plus, d21, f951, go1, lto1, ...]\nmake\n[relink of gnat1, brig1, cc1plus, d21, f951, go1, lto1, ...]\nFurthermore as reported in PR, it can cause problems during make install\nwhere make install rebuilds the binaries again.\n\nThe problem is that for make .PHONY targets are just\n\"rebuilt\" always, so it is very much undesirable for the cc1plus$(exeext)\netc. dependencies to include .PHONY targets, but I was using\nthem - cc1plus.prev which would depend on some *.serial and\ne.g. cc1.serial depending on c and c depending on cc1$(exeext).\n\nThe following patch rewrites this so that *.serial and *.prev aren't\n.PHONY targets, but instead just make variables.\n\nI was worried that the order in which the language makefile fragments are\nincluded (which is quite random, what order we get from the filesystem\nmatching */config-lang.in) would be a problem but it seems to work fine\n- as it uses make = rather than := variables, later definitions are just\nfine for earlier uses as long as the uses aren't needed during the\nmakefile parsing, but only in the dependencies of make targets and in\ntheir commands.\n\n2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR other/97911\ngcc/\n\t* configure.ac: In SERIAL_LIST use lang words without .serial\n\tsuffix.  Change $lang.prev from a target to variable and instead\n\tof depending on *.serial expand to the *.serial variable if\n\tthe word is in the SERIAL_LIST at all, otherwise to nothing.\n\t* configure: Regenerated.\ngcc/c/\n\t* Make-lang.in (c.serial): Change from goal to a variable.\n\t(.PHONY): Drop c.serial.\ngcc/ada/\n\t* gcc-interface/Make-lang.in (ada.serial): Change from goal to a\n\tvariable.\n\t(.PHONY): Drop ada.serial and ada.prev.\n\t(gnat1$(exeext)): Depend on $(ada.serial) rather than ada.serial.\ngcc/brig/\n\t* Make-lang.in (brig.serial): Change from goal to a variable.\n\t(.PHONY): Drop brig.serial and brig.prev.\n\t(brig1$(exeext)): Depend on $(brig.serial) rather than brig.serial.\ngcc/cp/\n\t* Make-lang.in (c++.serial): Change from goal to a variable.\n\t(.PHONY): Drop c++.serial and c++.prev.\n\t(cc1plus$(exeext)): Depend on $(c++.serial) rather than c++.serial.\ngcc/d/\n\t* Make-lang.in (d.serial): Change from goal to a variable.\n\t(.PHONY): Drop d.serial and d.prev.\n\t(d21$(exeext)): Depend on $(d.serial) rather than d.serial.\ngcc/fortran/\n\t* Make-lang.in (fortran.serial): Change from goal to a variable.\n\t(.PHONY): Drop fortran.serial and fortran.prev.\n\t(f951$(exeext)): Depend on $(fortran.serial) rather than\n\tfortran.serial.\ngcc/go/\n\t* Make-lang.in (go.serial): Change from goal to a variable.\n\t(.PHONY): Drop go.serial and go.prev.\n\t(go1$(exeext)): Depend on $(go.serial) rather than go.serial.\ngcc/jit/\n\t* Make-lang.in (jit.serial): Change from goal to a\n\tvariable.\n\t(.PHONY): Drop jit.serial and jit.prev.\n\t($(LIBGCCJIT_FILENAME)): Depend on $(jit.serial) rather than\n\tjit.serial.\ngcc/lto/\n\t* Make-lang.in (lto1.serial, lto2.serial): Change from goals to\n\tvariables.\n\t(.PHONY): Drop lto1.serial, lto2.serial, lto1.prev and lto2.prev.\n\t($(LTO_EXE)): Depend on $(lto1.serial) rather than lto1.serial.\n\t($(LTO_DUMP_EXE)): Depend on $(lto2.serial) rather than lto2.serial.\ngcc/objc/\n\t* Make-lang.in (objc.serial): Change from goal to a variable.\n\t(.PHONY): Drop objc.serial and objc.prev.\n\t(cc1obj$(exeext)): Depend on $(objc.serial) rather than objc.serial.\ngcc/objcp/\n\t* Make-lang.in (obj-c++.serial): Change from goal to a variable.\n\t(.PHONY): Drop obj-c++.serial and obj-c++.prev.\n\t(cc1objplus$(exeext)): Depend on $(obj-c++.serial) rather than\n\tobj-c++.serial.", "tree": {"sha": "91355fa040fd2f80ee05a587a7b244db9710133d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91355fa040fd2f80ee05a587a7b244db9710133d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02109ea26848d04175c7ac55007944128cd227a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02109ea26848d04175c7ac55007944128cd227a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02109ea26848d04175c7ac55007944128cd227a6"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "89b57505d2158a7bc40efcde9d855660b1fc6968", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -146,10 +146,10 @@ endif\n \n # Define the names for selecting Ada in LANGUAGES.\n ada: gnat1$(exeext) gnatbind$(exeext)\n-ada.serial: gnat1$(exeext)\n+ada.serial = gnat1$(exeext)\n \n # Tell GNU Make to ignore these, if they exist.\n-.PHONY: ada ada.serial ada.prev\n+.PHONY: ada\n \n # Compute the FLAGS to pass for gnattools, now linked with a C++ driver as\n # we're linking against at least libcommon which contains C++ compiled code.\n@@ -669,7 +669,7 @@ ada/libgnat/s-excmac.adb: $(srcdir)/ada/libgnat/s-excmac__$(EH_MECHANISM).adb\n # Since the RTL should be built with the latest compiler, remove the\n #  stamp target in the parent directory whenever gnat1 is rebuilt\n gnat1$(exeext): $(TARGET_ADA_SRCS) $(GNAT1_OBJS) $(ADA_BACKEND) libcommon-target.a \\\n-\t\t$(LIBDEPS) ada.prev\n+\t\t$(LIBDEPS) $(ada.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.ada),start)\n \t+$(GCC_LLINK) -o $@ $(GNAT1_OBJS) $(ADA_BACKEND) \\\n \t  libcommon-target.a $(LIBS) $(SYSLIBS) $(BACKENDLIBS) $(CFLAGS)"}, {"sha": "0141b9828a551b7ff5a736e96ccbc7472f5be68f", "filename": "gcc/brig/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fbrig%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fbrig%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -29,9 +29,9 @@ GCCBRIG_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccbrig|sed \\\n \n # The name for selecting brig in LANGUAGES.\n brig: brig1$(exeext)\n-brig.serial: brig\n+brig.serial = brig1$(exeext)\n \n-.PHONY: brig brig.serial brig.prev\n+.PHONY: brig\n \n CFLAGS-brig/brigspec.o += $(DRIVER_DEFINES)\n \n@@ -82,7 +82,7 @@ BRIG_OBJS = \\\n \n brig_OBJS = $(BRIG_OBJS) brig/brigspec.o\n \n-brig1$(exeext): $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBDEPS) brig.prev\n+brig1$(exeext): $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBDEPS) $(brig.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.brig),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBS) \\"}, {"sha": "4b2e616eab60526bbd63908401c6514ff82ad030", "filename": "gcc/c/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -37,10 +37,10 @@\n #\f\n # Define the names for selecting c in LANGUAGES.\n c: cc1$(exeext)\n-c.serial: c\n+c.serial = cc1$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: c gcc c.serial\n+.PHONY: c gcc\n \n # The C front end driver.  This is different from the drivers for other\n # front ends, because there is no C language specific driver (i.e. nothing"}, {"sha": "3316dd724522c55ae49a135ff0695e7b40c01341", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -30913,7 +30913,7 @@ echo \"SERIAL_LIST =\" >> Make-hooks\n echo else >> Make-hooks\n lang_cnt=0\n lang_list=\n-prev=c.serial\n+prev=c\n serialization_languages=c\n for lang in $all_selected_languages\n do\n@@ -30929,7 +30929,7 @@ do\n \ttest $lang = c && continue\n \tlang_cnt=`expr $lang_cnt + 1`\n \tlang_list=\" $prev$lang_list\"\n-\tprev=${lang}.serial\n+\tprev=${lang}\n done\n echo \"SERIAL_LIST = \\$(wordlist \\$(DO_LINK_SERIALIZATION),$lang_cnt,$lang_list)\" >> Make-hooks\n echo endif >> Make-hooks\n@@ -30939,7 +30939,7 @@ lang_idx=1\n for lang in $serialization_languages\n do\n \ttest $lang = c && continue\n-\techo \"$lang.prev: \\$(word $lang_cnt,\\$(SERIAL_LIST))\" >> Make-hooks\n+\techo \"$lang.prev = \\$(if \\$(word $lang_cnt,\\$(SERIAL_LIST)),\\$(\\$(word $lang_cnt,\\$(SERIAL_LIST)).serial))\" >> Make-hooks\n \techo \"INDEX.$lang = $lang_idx\" >> Make-hooks\n \tlang_cnt=`expr $lang_cnt - 1`\n \tlang_idx=`expr $lang_idx + 1`"}, {"sha": "b410428b4fcb331ab9f7e9fa1c0bc619aa480188", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -6934,7 +6934,7 @@ echo \"SERIAL_LIST =\" >> Make-hooks\n echo else >> Make-hooks\n lang_cnt=0\n lang_list=\n-prev=c.serial\n+prev=c\n serialization_languages=c\n for lang in $all_selected_languages\n do\n@@ -6950,7 +6950,7 @@ do\n \ttest $lang = c && continue\n \tlang_cnt=`expr $lang_cnt + 1`\n \tlang_list=\" $prev$lang_list\"\n-\tprev=${lang}.serial\n+\tprev=${lang}\n done\n echo \"SERIAL_LIST = \\$(wordlist \\$(DO_LINK_SERIALIZATION),$lang_cnt,$lang_list)\" >> Make-hooks\n echo endif >> Make-hooks\n@@ -6960,7 +6960,7 @@ lang_idx=1\n for lang in $serialization_languages\n do\n \ttest $lang = c && continue\n-\techo \"$lang.prev: \\$(word $lang_cnt,\\$(SERIAL_LIST))\" >> Make-hooks\n+\techo \"$lang.prev = \\$(if \\$(word $lang_cnt,\\$(SERIAL_LIST)),\\$(\\$(word $lang_cnt,\\$(SERIAL_LIST)).serial))\" >> Make-hooks\n \techo \"INDEX.$lang = $lang_idx\" >> Make-hooks\n \tlang_cnt=`expr $lang_cnt - 1`\n \tlang_idx=`expr $lang_idx + 1`"}, {"sha": "52b1dba7003e472b32edac8f4455332cc966d1f1", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -47,10 +47,10 @@ CP_PLUGIN_HEADERS := cp-tree.h cxx-pretty-print.h name-lookup.h type-utils.h ope\n # into the C++ rule, but that needs a little bit of work\n # to do the right thing within all.cross.\n c++: cc1plus$(exeext)\n-c++.serial: c++\n+c++.serial = cc1plus$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: c++ c++.serial c++.prev\n+.PHONY: c++\n \n CFLAGS-cp/g++spec.o += $(DRIVER_DEFINES)\n \n@@ -117,7 +117,7 @@ cc1plus-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n \t  $(srcdir)/../move-if-change cc1plus-checksum.c.tmp cc1plus-checksum.c; \\\n \tfi\n \n-cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS) c++.prev\n+cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS) $(c++.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.c++),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)"}, {"sha": "8c0c7535c9e806a7a1cdd336dd977ab7e14a6e25", "filename": "gcc/d/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fd%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fd%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -27,10 +27,10 @@ D_LIBPHOBOS = -DLIBPHOBOS=\\\"gphobos\\\"\n \n # The name for selecting d in LANGUAGES.\n d: d21$(exeext)\n-d.serial: d\n+d.serial = d21$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: d d.serial d.prev\n+.PHONY: d\n \n # Create the compiler driver for D.\n CFLAGS-d/d-spec.o += $(DRIVER_DEFINES) $(D_LIBPHOBOS)\n@@ -163,7 +163,7 @@ D_ALL_OBJS = $(D_FRONTEND_OBJS) $(D_GENERATED_OBJS) $(D_OBJS) $(D_TARGET_OBJS)\n \n d_OBJS = $(D_ALL_OBJS) d/d-spec.o\n \n-d21$(exeext): $(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS) d.prev\n+d21$(exeext): $(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS) $(d.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.d),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)"}, {"sha": "4afd874b0572f1975011a5b6edf08013d8558e65", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -72,10 +72,10 @@ fortran_OBJS = $(F95_OBJS) fortran/gfortranspec.o\n #\f\n # Define the names for selecting gfortran in LANGUAGES.\n fortran: f951$(exeext)\n-fortran.serial: fortran\n+fortran.serial = f951$(exeext)\n \n # Tell GNU make to ignore files by these names if they exist.\n-.PHONY: fortran fortran.serial fortran.prev\n+.PHONY: fortran\n \n CFLAGS-fortran/gfortranspec.o += $(DRIVER_DEFINES)\n \n@@ -93,7 +93,7 @@ gfortran-cross$(exeext): gfortran$(exeext)\n \tcp gfortran$(exeext) gfortran-cross$(exeext)\n \n # The compiler itself is called f951.\n-f951$(exeext): $(F95_OBJS) $(BACKEND) $(LIBDEPS) attribs.o fortran.prev\n+f951$(exeext): $(F95_OBJS) $(BACKEND) $(LIBDEPS) attribs.o $(fortran.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.fortran),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(F95_OBJS) $(BACKEND) $(ZLIB) $(LIBS) attribs.o \\"}, {"sha": "a987127d3ac4cae1ecb40dc43be4f4d96435183e", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -27,9 +27,9 @@ GCCGO_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccgo|sed '$(pr\n \n # The name for selecting go in LANGUAGES.\n go: go1$(exeext)\n-go.serial: go\n+go.serial = go1$(exeext)\n \n-.PHONY: go go.serial go.prev\n+.PHONY: go\n \n CFLAGS-go/gospec.o += $(DRIVER_DEFINES)\n \n@@ -79,7 +79,7 @@ GO_OBJS = \\\n \n go_OBJS = $(GO_OBJS) go/gospec.o\n \n-go1$(exeext): $(GO_OBJS) attribs.o $(BACKEND) $(LIBDEPS) go.prev\n+go1$(exeext): $(GO_OBJS) attribs.o $(BACKEND) $(LIBDEPS) $(go.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.go),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(GO_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)"}, {"sha": "1d34d2a0e4e804d6b08ccc3aee16a228009cba0d", "filename": "gcc/jit/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fjit%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fjit%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -81,10 +81,10 @@ jit: $(LIBGCCJIT_FILENAME) \\\n \t$(FULL_DRIVER_NAME)\n endif\n \n-jit.serial: $(LIBGCCJIT_FILENAME)\n+jit.serial = $(LIBGCCJIT_FILENAME)\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: jit jit.serial jit.prev\n+.PHONY: jit\n \n jit_OBJS = attribs.o \\\n \tjit/dummy-frontend.o \\\n@@ -119,7 +119,7 @@ $(LIBGCCJIT_FILENAME): $(jit_OBJS) \\\n \tlibbackend.a libcommon-target.a libcommon.a \\\n \t$(CPPLIB) $(LIBDECNUMBER) \\\n \t$(LIBDEPS) $(srcdir)/jit/libgccjit.map \\\n-\t$(EXTRA_GCC_OBJS) jit.prev\n+\t$(EXTRA_GCC_OBJS) $(jit.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.jit),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ -shared \\\n \t     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \\"}, {"sha": "6e5fbac071aab7ad36cec8aefbed2466acdb87a0", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -42,10 +42,10 @@ lto_dump_OBJS = $(LTO_DUMP_OBJS)\n # Rules\n \n lto: $(LTO_EXE) $(LTO_DUMP_EXE)\n-lto1.serial: $(LTO_EXE)\n-lto2.serial: $(LTO_DUMP_EXE)\n+lto1.serial = $(LTO_EXE)\n+lto2.serial = $(LTO_DUMP_EXE)\n \n-.PHONY: lto lto1.serial lto1.prev lto2.serial lto2.prev\n+.PHONY: lto\n \n # These hooks are used by the main GCC Makefile.  Consult that\n # Makefile for documentation.\n@@ -90,13 +90,13 @@ lto.stagefeedback:\n # Use strict warnings for this front end.\n lto-warn = $(STRICT_WARN)\n \n-$(LTO_EXE): $(LTO_OBJS) $(BACKEND) $(LIBDEPS) lto1.prev\n+$(LTO_EXE): $(LTO_OBJS) $(BACKEND) $(LIBDEPS) $(lto1.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.lto1),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(LTO_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)\n \t@$(call LINK_PROGRESS,$(INDEX.lto1),end)\n \n-$(LTO_DUMP_EXE): $(LTO_DUMP_OBJS) $(BACKEND) $(LIBDEPS) lto2.prev\n+$(LTO_DUMP_EXE): $(LTO_DUMP_OBJS) $(BACKEND) $(LIBDEPS) $(lto2.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.lto2),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(LTO_DUMP_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)"}, {"sha": "2edf0a9553ec0bd39ef58576a7c7b1c9fcffb63e", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -38,10 +38,10 @@\n #\f\n # Define the names for selecting Objective-C in LANGUAGES.\n objc: cc1obj$(exeext)\n-objc.serial: objc\n+objc.serial = cc1obj$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: objc objc.serial objc.prev\n+.PHONY: objc\n \n # Use maximal warnings for this front end.\n objc-warn = $(STRICT_WARN)\n@@ -64,7 +64,7 @@ cc1obj-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n \t$(srcdir)/../move-if-change cc1obj-checksum.c.tmp cc1obj-checksum.c\n \n cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o $(BACKEND) \\\n-\t\t $(LIBDEPS) objc.prev\n+\t\t $(LIBDEPS) $(objc.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.objc),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o \\"}, {"sha": "2e3e37ecb4c02e1e90366e58bbfa67419697949f", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "patch": "@@ -39,10 +39,10 @@\n #\f\n # Define the names for selecting Objective-C++ in LANGUAGES.\n obj-c++: cc1objplus$(exeext)\n-obj-c++.serial: obj-c++\n+obj-c++.serial = cc1objplus$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: obj-c++ obj-c++.serial obj-c++.prev\n+.PHONY: obj-c++\n \n # Use maximal warnings for this front end.  Also, make ObjC and C++\n # headers accessible.\n@@ -68,7 +68,7 @@ cc1objplus-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n \tcc1objplus-checksum.c\n \n cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) \\\n-\t\t     $(LIBDEPS) obj-c++.prev\n+\t\t     $(LIBDEPS) $(obj-c++.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.obj-c++),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)"}]}