{"sha": "850a8ec54c4310d779004299bf9a0dec52324e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwYThlYzU0YzQzMTBkNzc5MDA0Mjk5YmY5YTBkZWM1MjMyNGU5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-28T23:39:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-28T23:39:00Z"}, "message": "c++: Fix -Weffc++ in templates [PR98841]\n\nWe emit a bogus warning on the following testcase, suggesting that the\noperator should return *this even when it does that already.\nThe problem is that normally cp_build_indirect_ref_1 ensures that *this\nis folded as current_class_ref, but in templates (if return type is\nnon-dependent, otherwise check_return_expr doesn't check it) it didn't\ngo through cp_build_indirect_ref_1, but just built another INDIRECT_REF.\nWhich means it then doesn't compare pointer-equal to current_class_ref.\n\nThe following patch fixes it by doing in build_x_indirect_ref for\n*this what cp_build_indirect_ref_1 would do.\n\n2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98841\n\t* typeck.c (build_x_indirect_ref): For *this, return current_class_ref.\n\n\t* g++.dg/warn/effc5.C: New test.", "tree": {"sha": "cbd00e7d5812ae2a06755d730f8e156c0702a2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd00e7d5812ae2a06755d730f8e156c0702a2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/850a8ec54c4310d779004299bf9a0dec52324e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850a8ec54c4310d779004299bf9a0dec52324e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850a8ec54c4310d779004299bf9a0dec52324e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850a8ec54c4310d779004299bf9a0dec52324e9e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "9322e087345e1e6ff140ff4f90ccd3c362951ad8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850a8ec54c4310d779004299bf9a0dec52324e9e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850a8ec54c4310d779004299bf9a0dec52324e9e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=850a8ec54c4310d779004299bf9a0dec52324e9e", "patch": "@@ -3326,7 +3326,15 @@ build_x_indirect_ref (location_t loc, tree expr, ref_operator errorstring,\n     {\n       /* Retain the type if we know the operand is a pointer.  */\n       if (TREE_TYPE (expr) && INDIRECT_TYPE_P (TREE_TYPE (expr)))\n-\treturn build_min (INDIRECT_REF, TREE_TYPE (TREE_TYPE (expr)), expr);\n+\t{\n+\t  if (expr == current_class_ptr\n+\t      || (TREE_CODE (expr) == NOP_EXPR\n+\t\t  && TREE_OPERAND (expr, 0) == current_class_ptr\n+\t\t  && (same_type_ignoring_top_level_qualifiers_p\n+\t\t\t(TREE_TYPE (expr), TREE_TYPE (current_class_ptr)))))\n+\t    return current_class_ref;\n+\t  return build_min (INDIRECT_REF, TREE_TYPE (TREE_TYPE (expr)), expr);\n+\t}\n       if (type_dependent_expression_p (expr))\n \treturn build_min_nt_loc (loc, INDIRECT_REF, expr);\n       expr = build_non_dependent_expr (expr);"}, {"sha": "43fdd0952164eec811c3d4916b14024196446907", "filename": "gcc/testsuite/g++.dg/warn/effc5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850a8ec54c4310d779004299bf9a0dec52324e9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850a8ec54c4310d779004299bf9a0dec52324e9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc5.C?ref=850a8ec54c4310d779004299bf9a0dec52324e9e", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/98841\n+// { dg-do compile }\n+// { dg-options \"-Weffc++\" }\n+\n+struct S {\n+  template <typename T>\n+  S& operator=(const T&) { return *this; }\t// { dg-bogus \"should return a reference to\" }\n+  S& operator=(const S&) { return *this; }\n+};\n+\n+void\n+foo ()\n+{\n+  S s, t;\n+  s = 1;\n+  s = t;\n+}"}]}