{"sha": "75d1c391e49488659a2dc1de296802d42fb2ea57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkMWMzOTFlNDk0ODg2NTlhMmRjMWRlMjk2ODAyZDQyZmIyZWE1Nw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2015-01-08T22:17:49Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2015-01-08T22:17:49Z"}, "message": "tsan_barrier.h: New.\n\n2015-01-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-c++-common/tsan/tsan_barrier.h: New.\n        * c-c++-common/tsan/atomic_stack.c: Reworked to not depend on sleep.\n        * c-c++-common/tsan/bitfield_race.c: Likewise.\n        * c-c++-common/tsan/fd_pipe_race.c: Likewise.\n        * c-c++-common/tsan/mutexset1.c: Likewise.\n        * c-c++-common/tsan/race_on_barrier.c: Likewise.\n        * c-c++-common/tsan/race_on_mutex.c: Likewise.\n        * c-c++-common/tsan/race_on_mutex2.c: Likewise.\n        * c-c++-common/tsan/simple_race.c: Likewise.\n        * c-c++-common/tsan/simple_stack.c: Likewise.\n        * c-c++-common/tsan/sleep_sync.c: Likewise.\n        * c-c++-common/tsan/tiny_race.c: Likewise.\n        * c-c++-common/tsan/tls_race.c: Likewise.\n        * c-c++-common/tsan/write_in_reader_lock.c: Likewise.\n        * g++.dg/tsan/aligned_vs_unaligned_race.C: Likewise.\n        * g++.dg/tsan/atomic_free.C: Likewise.\n        * g++.dg/tsan/atomic_free2.C: Likewise.\n        * g++.dg/tsan/cond_race.C: Likewise.\n        * g++.dg/tsan/tsan_barrier.h: Copied from c-c++-common/tsan.\n\nFrom-SVN: r219367", "tree": {"sha": "3c98228b56a76a6a55c8dc14abfb17f58d73d0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c98228b56a76a6a55c8dc14abfb17f58d73d0ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75d1c391e49488659a2dc1de296802d42fb2ea57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d1c391e49488659a2dc1de296802d42fb2ea57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d1c391e49488659a2dc1de296802d42fb2ea57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d1c391e49488659a2dc1de296802d42fb2ea57/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c8db13ee3b66cac87319944ed87957a96e1bd6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8db13ee3b66cac87319944ed87957a96e1bd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8db13ee3b66cac87319944ed87957a96e1bd6e"}], "stats": {"total": 217, "additions": 170, "deletions": 47}, "files": [{"sha": "bc1c52cd2d680345813926a2e80a6479a64fb72c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,3 +1,25 @@\n+2015-01-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-c++-common/tsan/tsan_barrier.h: New.\n+\t* c-c++-common/tsan/atomic_stack.c: Reworked to not depend on sleep.\n+\t* c-c++-common/tsan/bitfield_race.c: Likewise.\n+\t* c-c++-common/tsan/fd_pipe_race.c: Likewise.\n+\t* c-c++-common/tsan/mutexset1.c: Likewise.\n+\t* c-c++-common/tsan/race_on_barrier.c: Likewise.\n+\t* c-c++-common/tsan/race_on_mutex.c: Likewise.\n+\t* c-c++-common/tsan/race_on_mutex2.c: Likewise.\n+\t* c-c++-common/tsan/simple_race.c: Likewise.\n+\t* c-c++-common/tsan/simple_stack.c: Likewise.\n+\t* c-c++-common/tsan/sleep_sync.c: Likewise.\n+\t* c-c++-common/tsan/tiny_race.c: Likewise.\n+\t* c-c++-common/tsan/tls_race.c: Likewise.\n+\t* c-c++-common/tsan/write_in_reader_lock.c: Likewise.\n+\t* g++.dg/tsan/aligned_vs_unaligned_race.C: Likewise.\n+\t* g++.dg/tsan/atomic_free.C: Likewise.\n+\t* g++.dg/tsan/atomic_free2.C: Likewise.\n+\t* g++.dg/tsan/cond_race.C: Likewise.\n+\t* g++.dg/tsan/tsan_barrier.h: Copied from c-c++-common/tsan. \n+\n 2015-01-08  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR testsuite/62250"}, {"sha": "746afa7b4664a07d84e70d6eac107246c7d3fba0", "filename": "gcc/testsuite/c-c++-common/tsan/atomic_stack.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fatomic_stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fatomic_stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fatomic_stack.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,22 +1,26 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n int Global;\n \n void *Thread1(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   __atomic_fetch_add(&Global, 1, __ATOMIC_RELAXED);\n   return NULL;\n }\n \n void *Thread2(void *x) {\n   Global++;\n+  barrier_wait(&barrier);\n   return NULL;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t[2];\n   pthread_create(&t[0], NULL, Thread1, NULL);\n   pthread_create(&t[1], NULL, Thread2, NULL);"}, {"sha": "42681157799a5a4571c687bed91acf0531a036f7", "filename": "gcc/testsuite/c-c++-common/tsan/bitfield_race.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fbitfield_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fbitfield_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fbitfield_race.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,24 +1,28 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n struct bitfield\n {\n   int a:10;\n   int b:10;\n } Global;\n \n void *Thread1(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   Global.a = 42;\n   return x;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t;\n   pthread_create(&t, 0, Thread1, 0);\n   Global.b = 43;\n+  barrier_wait(&barrier);\n   pthread_join(t, 0);\n   return Global.a;\n }"}, {"sha": "e2176da4b628dee2704b07239b49a8d9453a8cec", "filename": "gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffd_pipe_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffd_pipe_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffd_pipe_race.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,30 +1,35 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n #include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n int fds[2];\n \n void *Thread1(void *x) {\n   write(fds[1], \"a\", 1);\n+  barrier_wait(&barrier);\n   return NULL;\n }\n \n void *Thread2(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   close(fds[0]);\n   close(fds[1]);\n   return NULL;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pipe(fds);\n   pthread_t t[2];\n   pthread_create(&t[0], NULL, Thread1, NULL);\n   pthread_create(&t[1], NULL, Thread2, NULL);\n   pthread_join(t[0], NULL);\n   pthread_join(t[1], NULL);\n+  return 0;\n }\n \n /* { dg-output \"WARNING: ThreadSanitizer: data race.*\\n\" } */"}, {"sha": "3462ec457d6184ab44e317a715cfc60c7e3e0e42", "filename": "gcc/testsuite/c-c++-common/tsan/mutexset1.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fmutexset1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fmutexset1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fmutexset1.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,14 +1,15 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n int Global;\n pthread_mutex_t mtx;\n \n void *Thread1(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   pthread_mutex_lock(&mtx);\n   Global++;\n   pthread_mutex_unlock(&mtx);\n@@ -17,11 +18,13 @@ void *Thread1(void *x) {\n \n void *Thread2(void *x) {\n   Global--;\n+  barrier_wait(&barrier);\n   return NULL;/* { dg-output \".*\" } */\n \n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_mutex_init(&mtx, 0);\n   pthread_t t[2];\n   pthread_create(&t[0], NULL, Thread1, NULL);"}, {"sha": "3de3ff2257fa0d0f500de42998e382c1009a63b1", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_barrier.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,26 +1,28 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n-#include <stddef.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n pthread_barrier_t B;\n int Global;\n \n void *Thread1(void *x) {\n   pthread_barrier_init(&B, 0, 2);\n+  barrier_wait(&barrier);\n   pthread_barrier_wait(&B);\n   return NULL;\n }\n \n void *Thread2(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   pthread_barrier_wait(&B);\n   return NULL;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t;\n   pthread_create(&t, NULL, Thread1, NULL);\n   Thread2(0);"}, {"sha": "ae30d053c92a95cee8ef48fd9689e241d597598f", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_mutex.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,10 +1,10 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n-#include <stddef.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n pthread_mutex_t Mtx;\n int Global;\n \n@@ -13,18 +13,20 @@ void *Thread1(void *x) {\n   pthread_mutex_lock(&Mtx);\n   Global = 42;\n   pthread_mutex_unlock(&Mtx);\n+  barrier_wait(&barrier);\n   return NULL;\n }\n \n void *Thread2(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   pthread_mutex_lock(&Mtx);\n   Global = 43;\n   pthread_mutex_unlock(&Mtx);\n   return NULL;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t[2];\n   pthread_create(&t[0], NULL, Thread1, NULL);\n   pthread_create(&t[1], NULL, Thread2, NULL);\n@@ -37,7 +39,7 @@ int main() {\n /* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"  Atomic read of size 1 at .* by thread T2:(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 pthread_mutex_lock.*\" } */\n-/* { dg-output \"    #1 Thread2.* .*(race_on_mutex.c:21|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 Thread2.* .*(race_on_mutex.c:22|\\\\?{2}:0) (.*)\" } */\n /* { dg-output \"  Previous write of size 1 at .* by thread T1:(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 pthread_mutex_init .* (.)*\" } */\n /* { dg-output \"    #1 Thread1.* .*(race_on_mutex.c:12|\\\\?{2}:0) .*\" } */"}, {"sha": "57d7e21e76a53ccc1dde57ecac7744620cb7ecea", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_mutex2.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex2.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,22 +1,25 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n-#include <stddef.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n+\n+static pthread_barrier_t barrier;\n \n void *Thread(void *x) {\n   pthread_mutex_lock((pthread_mutex_t*)x);\n   pthread_mutex_unlock((pthread_mutex_t*)x);\n+  barrier_wait(&barrier);\n   return 0;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_mutex_t Mtx;\n   pthread_mutex_init(&Mtx, 0);\n   pthread_t t;\n   pthread_create(&t, 0, Thread, &Mtx);\n-  sleep(1);\n+  barrier_wait(&barrier);\n   pthread_mutex_destroy(&Mtx);\n   pthread_join(t, 0);\n   return 0;"}, {"sha": "c1a369b459071a8fdd5254033e81ba2523613841", "filename": "gcc/testsuite/c-c++-common/tsan/simple_race.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_race.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,13 +1,15 @@\n /* { dg-set-target-env-var TSAN_OPTIONS \"halt_on_error=1\" } */\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n #include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n-#define MAX_ITERATIONS_NUMBER 100\n-#define SLEEP_STEP 128000 \n+#define MAX_ITERATIONS_NUMBER 1\n+#define SLEEP_STEP 128000\n \n+static pthread_barrier_t barrier;\n unsigned int delay_time = 1000;\n \n static inline void delay () {\n@@ -17,6 +19,7 @@ static inline void delay () {\n extern int main_1();\n \n int main() {\n+  barrier_init(&barrier, 2);\n   int i;\n   for (i = 0; i < MAX_ITERATIONS_NUMBER; i++) {\n     main_1();\n@@ -28,13 +31,15 @@ int main() {\n int Global;\n \n void *Thread1(void *x) {\n+  barrier_wait(&barrier);\n   delay();\n   Global = 42;\n   return NULL;\n }\n \n void *Thread2(void *x) {\n   Global = 43;\n+  barrier_wait(&barrier);\n   return NULL;\n }\n "}, {"sha": "a4d0aba69287572bfe170e2618d1f779cadeb244", "filename": "gcc/testsuite/c-c++-common/tsan/simple_stack.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_stack.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,9 +1,10 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n int Global;\n \n void __attribute__((noinline)) foo1() {\n@@ -25,13 +26,14 @@ void __attribute__((noinline)) bar2() {\n }\n \n void *Thread1(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   bar1();\n   return NULL;\n }\n \n void *Thread2(void *x) {\n   bar2();\n+  barrier_wait(&barrier);\n   return NULL;\n }\n \n@@ -40,6 +42,7 @@ void StartThread(pthread_t *t, void *(*f)(void*)) {\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t[2];\n   StartThread(&t[0], Thread1);\n   StartThread(&t[1], Thread2);\n@@ -50,16 +53,16 @@ int main() {\n \n /* { dg-output \"WARNING: ThreadSanitizer: data race.*\" } */\n /* { dg-output \"  Write of size 4 at .* by thread T1:(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"    #0 foo1.* .*(simple_stack.c:10|\\\\?{2}:0) (.*)\" } */\n-/* { dg-output \"    #1 bar1.* .*(simple_stack.c:15|\\\\?{2}:0) (.*)\" } */\n-/* { dg-output \"    #2 Thread1.* .*(simple_stack.c:29|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #0 foo1.* .*(simple_stack.c:11|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 bar1.* .*(simple_stack.c:16|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #2 Thread1.* .*(simple_stack.c:30|\\\\?{2}:0) (.*)\" } */\n /* { dg-output \"  Previous read of size 4 at .* by thread T2:(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"    #0 foo2.* .*(simple_stack.c:19|\\\\?{2}:0) (.*)\" } */\n-/* { dg-output \"    #1 bar2.* .*(simple_stack.c:24|\\\\?{2}:0) (.*)\" } */\n-/* { dg-output \"    #2 Thread2.* .*(simple_stack.c:34|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #0 foo2.* .*(simple_stack.c:20|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 bar2.* .*(simple_stack.c:25|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #2 Thread2.* .*(simple_stack.c:35|\\\\?{2}:0) (.*)\" } */\n /* { dg-output \"  Thread T1 \\\\(tid=.*, running\\\\) created by main thread at:(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 pthread_create .* (.*)\" } */\n-/* { dg-output \"    #1 StartThread.* .*(simple_stack.c:39|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 StartThread.* .*(simple_stack.c:41|\\\\?{2}:0) (.*)\" } */\n /* { dg-output \"  Thread T2 (.*) created by main thread at:(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 pthread_create .* (.*)\" } */\n-/* { dg-output \"    #1 StartThread.* .*(simple_stack.c:39|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 StartThread.* .*(simple_stack.c:41|\\\\?{2}:0) (.*)\" } */"}, {"sha": "c681dcef1bfd41612127674350992bd671ec2294", "filename": "gcc/testsuite/c-c++-common/tsan/sleep_sync.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsleep_sync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsleep_sync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsleep_sync.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,24 +1,30 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n #include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n int X = 0;\n \n void MySleep() {\n   sleep(1);\n }\n \n void *Thread(void *p) {\n+  barrier_wait(&barrier);\n   MySleep();  // Assume the main thread has done the write.\n   X = 42;\n   return 0;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t;\n   pthread_create(&t, 0, Thread, 0);\n   X = 43;\n+  barrier_wait(&barrier);\n   pthread_join(t, 0);\n   return 0;\n }"}, {"sha": "10a3feb9b334eeb553a45f9ebe6bd9c5e117e5df", "filename": "gcc/testsuite/c-c++-common/tsan/tiny_race.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftiny_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftiny_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftiny_race.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,20 +1,24 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n int Global;\n \n void *Thread1(void *x) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   Global = 42;\n   return x;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t;\n   pthread_create(&t, 0, Thread1, 0);\n   Global = 43;\n+  barrier_wait(&barrier);\n   pthread_join(t, 0);\n   return Global;\n }"}, {"sha": "4dd6506043e17a0f2bf8d9708051357bddccd426", "filename": "gcc/testsuite/c-c++-common/tsan/tls_race.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftls_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftls_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftls_race.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,18 +1,24 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <stddef.h>\n+#include \"tsan_barrier.h\"\n+\n+static pthread_barrier_t barrier;\n \n void *Thread(void *a) {\n+  barrier_wait(&barrier);\n   *(int*)a = 43;\n   return 0;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   static __thread int Var = 42;\n   pthread_t t;\n   pthread_create(&t, 0, Thread, &Var);\n   Var = 43;\n+  barrier_wait(&barrier);\n   pthread_join(t, 0);\n }\n "}, {"sha": "5d37a64758531861c81b975a7eb4abcea0f3d04b", "filename": "gcc/testsuite/c-c++-common/tsan/tsan_barrier.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftsan_barrier.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftsan_barrier.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftsan_barrier.h?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -0,0 +1,14 @@\n+/* TSAN-invisible barriers.  Link with -ldl.  */\n+#include <pthread.h>\n+#include <dlfcn.h>\n+\n+static __typeof(pthread_barrier_wait) *barrier_wait;\n+\n+static\n+void barrier_init (pthread_barrier_t *barrier, unsigned count)\n+{\n+  void *h = dlopen (\"libpthread.so.0\", RTLD_LAZY);\n+  barrier_wait = (__typeof (pthread_barrier_wait) *)\n+\t \t dlsym (h, \"pthread_barrier_wait\");\n+  pthread_barrier_init (barrier, NULL, count);\n+}"}, {"sha": "df32632bfeaa291a7e0898a882b52efdb1f24433", "filename": "gcc/testsuite/c-c++-common/tsan/write_in_reader_lock.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fwrite_in_reader_lock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fwrite_in_reader_lock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fwrite_in_reader_lock.c?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,29 +1,33 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n pthread_rwlock_t rwlock;\n int GLOB;\n \n void *Thread1(void *p) {\n  (void)p;\n   pthread_rwlock_rdlock(&rwlock);\n   // Write under reader lock.\n-  sleep(1);\n+  barrier_wait(&barrier);\n   GLOB++;\n   pthread_rwlock_unlock(&rwlock);\n   return 0;\n }\n \n int main(int argc, char *argv[]) {\n+  barrier_init(&barrier, 2);\n   pthread_rwlock_init(&rwlock, NULL);\n   pthread_rwlock_rdlock(&rwlock);\n   pthread_t t;\n   pthread_create(&t, 0, Thread1, 0);\n   volatile int x = GLOB;\n  (void)x;\n   pthread_rwlock_unlock(&rwlock);\n+  barrier_wait(&barrier);\n   pthread_join(t, 0);\n   pthread_rwlock_destroy(&rwlock);\n   return 0;"}, {"sha": "1facadc87dd1f34f9ba5ae59e4d2a69bfe2a4366", "filename": "gcc/testsuite/g++.dg/tsan/aligned_vs_unaligned_race.C", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Faligned_vs_unaligned_race.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Faligned_vs_unaligned_race.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Faligned_vs_unaligned_race.C?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,11 +1,16 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n+\n #include <pthread.h>\n #include <stdio.h>\n #include <stdint.h>\n+#include \"tsan_barrier.h\"\n \n+static pthread_barrier_t barrier;\n uint64_t Global[2];\n \n void *Thread1(void *x) {\n+  barrier_wait(&barrier);\n   Global[1]++;\n   return NULL;\n }\n@@ -15,10 +20,12 @@ void *Thread2(void *x) {\n   struct __attribute__((packed, aligned(1))) u_uint64_t { uint64_t val; };\n   u_uint64_t *p4 = reinterpret_cast<u_uint64_t *>(p1 + 1);\n   (*p4).val++;\n+  barrier_wait(&barrier);\n   return NULL;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   pthread_t t[2];\n   pthread_create(&t[0], NULL, Thread1, NULL);\n   pthread_create(&t[1], NULL, Thread2, NULL);"}, {"sha": "20429f159b870b04514c41258f43205cfe2e9688", "filename": "gcc/testsuite/g++.dg/tsan/atomic_free.C", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free.C?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,18 +1,23 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n+\n+static pthread_barrier_t barrier;\n \n void *Thread(void *a) {\n   __atomic_fetch_add((int*)a, 1, __ATOMIC_SEQ_CST);\n+  barrier_wait(&barrier);\n   return 0;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   int *a = new int(0);\n   pthread_t t;\n   pthread_create(&t, 0, Thread, a);\n-  sleep(1);\n+  barrier_wait(&barrier);\n   delete a;\n   pthread_join(t, 0);\n }"}, {"sha": "3b6a8e3af9966c85ea04d762f5d36e68edfecd2e", "filename": "gcc/testsuite/g++.dg/tsan/atomic_free2.C", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free2.C?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,19 +1,24 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n \n #include <pthread.h>\n-#include <unistd.h>\n+#include \"tsan_barrier.h\"\n+\n+static pthread_barrier_t barrier;\n \n void *Thread(void *a) {\n-  sleep(1);\n+  barrier_wait(&barrier);\n   __atomic_fetch_add((int*)a, 1, __ATOMIC_SEQ_CST);\n   return 0;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   int *a = new int(0);\n   pthread_t t;\n   pthread_create(&t, 0, Thread, a);\n   delete a;\n+  barrier_wait(&barrier);\n   pthread_join(t, 0);\n }\n "}, {"sha": "d72d0fb54f60f87a34d9fe2645f597163bf5a79b", "filename": "gcc/testsuite/g++.dg/tsan/cond_race.C", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fcond_race.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fcond_race.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fcond_race.C?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -1,10 +1,12 @@\n /* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-ldl\" } */\n /* { dg-output \"ThreadSanitizer: data race.*\" } */\n /* { dg-output \"pthread_cond_signal.*\" } */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n #include <pthread.h>\n+#include \"tsan_barrier.h\"\n+\n+static pthread_barrier_t barrier;\n \n struct Ctx {\n   pthread_mutex_t m;\n@@ -18,10 +20,12 @@ void *thr(void *p) {\n   c->done = true;\n   pthread_mutex_unlock(&c->m);\n   pthread_cond_signal(&c->c);\n+  barrier_wait(&barrier);\n   return 0;\n }\n \n int main() {\n+  barrier_init(&barrier, 2);\n   Ctx *c = new Ctx();\n   pthread_mutex_init(&c->m, 0);\n   pthread_cond_init(&c->c, 0);\n@@ -31,6 +35,7 @@ int main() {\n   while (!c->done)\n     pthread_cond_wait(&c->c, &c->m);\n   pthread_mutex_unlock(&c->m);\n+  barrier_wait(&barrier);\n   delete c;\n   pthread_join(th, 0);\n }"}, {"sha": "5d37a64758531861c81b975a7eb4abcea0f3d04b", "filename": "gcc/testsuite/g++.dg/tsan/tsan_barrier.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan_barrier.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c391e49488659a2dc1de296802d42fb2ea57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan_barrier.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan_barrier.h?ref=75d1c391e49488659a2dc1de296802d42fb2ea57", "patch": "@@ -0,0 +1,14 @@\n+/* TSAN-invisible barriers.  Link with -ldl.  */\n+#include <pthread.h>\n+#include <dlfcn.h>\n+\n+static __typeof(pthread_barrier_wait) *barrier_wait;\n+\n+static\n+void barrier_init (pthread_barrier_t *barrier, unsigned count)\n+{\n+  void *h = dlopen (\"libpthread.so.0\", RTLD_LAZY);\n+  barrier_wait = (__typeof (pthread_barrier_wait) *)\n+\t \t dlsym (h, \"pthread_barrier_wait\");\n+  pthread_barrier_init (barrier, NULL, count);\n+}"}]}