{"sha": "d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4YTcyZmQ0ZjVlYTRlYTZlYTQ1ZmQ1YWYyNzdlYWVhYTE4MTY3OA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-09-01T12:49:30Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-09-01T12:49:30Z"}, "message": "arm-cores.def (ARM_CORE): Add new field for the real name of the CPU.\n\n* arm/arm-cores.def (ARM_CORE): Add new field for the real name of the\nCPU.\n(arm7tdmi-s): New CPU name.\n* arm/arm.c (ARM_CORE): Update for new format.\n* arm/arm.h (ARM_CORE): Likewise.\n* arm/gentune.sh: Update for extra field.\n* config.gcc: Likewise.\n* arm/arm-tune.md: Regenerate.\n* doc/invoke.texi: Document the real processor names for ARM cpus.\n\nFrom-SVN: r86884", "tree": {"sha": "976f71696634aaa5c39f0d78035eda72378a45b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976f71696634aaa5c39f0d78035eda72378a45b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/comments", "author": null, "committer": null, "parents": [{"sha": "6cdb2c6e80a9c6300ae56a260c617d6e72b52f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdb2c6e80a9c6300ae56a260c617d6e72b52f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdb2c6e80a9c6300ae56a260c617d6e72b52f19"}], "stats": {"total": 167, "additions": 93, "deletions": 74}, "files": [{"sha": "6846701f1c3f16771d04d402ad1ca19dd2246250", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -1,3 +1,15 @@\n+2004-09-01  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm/arm-cores.def (ARM_CORE): Add new field for the real name of the\n+\tCPU.\n+\t(arm7tdmi-s): New CPU name.\n+\t* arm/arm.c (ARM_CORE): Update for new format.\n+\t* arm/arm.h (ARM_CORE): Likewise.\n+\t* arm/gentune.sh: Update for extra field.\n+\t* config.gcc: Likewise.\n+\t* arm/arm-tune.md: Regenerate.\n+\t* doc/invoke.texi: Document the real processor names for ARM cpus.\n+\n 2004-09-01  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm/ieee754-df.S (aeabi_ul2d, aeabi_l2d, floatundidf)"}, {"sha": "aee83254a59b95b7bd77f014634adefd5a067f7a", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -2266,10 +2266,16 @@ fi\n \t\t\t# See if it matches any of the entries in arm-cores.def\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tif [ x\"$val\" = x ] \\\n-\t\t\t    || grep \"^ARM_CORE($val,\" \\\n+\t\t\t    || grep \"^ARM_CORE(\\\"$val\\\",\" \\\n \t\t\t\t    ${srcdir}/config/arm/arm-cores.def \\\n \t\t\t\t    > /dev/null; then\n \t\t\t  # Ok\n+\t\t\t  new_val=`grep \"^ARM_CORE(\\\"$val\\\",\" \\\n+\t\t\t\t${srcdir}/config/arm/arm-cores.def | \\\n+\t\t\t\tsed -e 's/^[^,]*,[ \t]*//' | \\\n+\t\t\t\tsed -e 's/,.*$//'`\n+\t\t\t  eval \"with_$which=$new_val\"\n+\t\t\techo \"For $val real value is $new_val\"\n \t\t\t  true\n \t\t\telse\n \t\t\t  echo \"Unknown CPU used in --with-$which=$val\" 1>&2"}, {"sha": "957a22557a524dfb59eb51207a636c92738aa98f", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 60, "deletions": 59, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -21,10 +21,10 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_CORE(CORE_NAME, ARCH, FLAGS, COSTS)\n+      ARM_CORE(CORE_NAME, CORE_IDENT, ARCH, FLAGS, COSTS)\n \n-   The CORE_NAME is the name of the core, represented as an identifier\n-   rather than a string constant.\n+   The CORE_NAME is the name of the core, represented as a string constant.\n+   The CORE_IDENT is the name of the core, represented as an identifier.\n    ARCH is the architecture revision implemeted by the chip.\n    FLAGS are the bitwise-or of the traits that apply to that core.\n    This need not include flags implied by the architecture.\n@@ -36,77 +36,78 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(arm2,\t\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm250,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm3,\t\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm2\",   arm2,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm250\", arm250,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm3\",   arm3,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(arm6,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm60,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm600,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm610,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(arm620,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm7,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm7d,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm7di,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm70,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm700,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm700i,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm710,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(arm720,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(arm710c,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(arm7100,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(arm7500,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm6\",          arm6,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm60\",         arm60,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm600\",        arm600,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm610\",        arm610,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm620\",        arm620,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7\",          arm7,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7d\",         arm7d,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7di\",        arm7di,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm70\",         arm70,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm700\",        arm700,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm700i\",       arm700i,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm710\",        arm710,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm720\",        arm720,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm710c\",       arm710c,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm7100\",       arm7100,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm7500\",       arm7500,\t3,\t             FL_MODE26, slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa.  */\n-ARM_CORE(arm7500fe,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7500fe\",     arm7500fe,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n \n /* V3M Architecture Processors */\n-/* arm7m doesn't exist on its own, but only with D, (and I), but\n+/* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(arm7m,\t\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n-ARM_CORE(arm7dm,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n-ARM_CORE(arm7dmi,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7m\",         arm7m,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7dm\",        arm7dm,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7dmi\",       arm7dmi,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(arm8,\t\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(arm810,\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(strongarm,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(strongarm110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(strongarm1100,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(strongarm1110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(\"arm8\",          arm8,\t\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm810\",        arm810,\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n+ARM_CORE(\"strongarm\",     strongarm,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(\"strongarm110\",  strongarm110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(\"strongarm1100\", strongarm1100, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(\"strongarm1110\", strongarm1110, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(arm7tdmi,\t4T,\tFL_CO_PROC            , fastmul)\n-ARM_CORE(arm710t,\t4T,\t                      0 , fastmul)\n-ARM_CORE(arm720t,\t4T,\t                      0 , fastmul)\n-ARM_CORE(arm740t,\t4T,\t                      0 , fastmul)\n-ARM_CORE(arm9,\t\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(arm9tdmi,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(arm920,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(arm920t,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(arm922t,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(arm940t,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(ep9312,\t4T,\t                         FL_LDSCHED |             FL_CIRRUS, fastmul)\n+ARM_CORE(\"arm7tdmi\",      arm7tdmi,\t4T,\tFL_CO_PROC            , fastmul)\n+ARM_CORE(\"arm7tdmi-s\",    arm7tdmis,\t4T,\tFL_CO_PROC            , fastmul)\n+ARM_CORE(\"arm710t\",       arm710t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(\"arm720t\",       arm720t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(\"arm740t\",       arm740t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(\"arm9\",          arm9,\t\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm9tdmi\",      arm9tdmi,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm920\",        arm920,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm920t\",       arm920t,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm922t\",       arm922t,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm940t\",       arm940t,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"ep9312\",        ep9312,\t4T,\t                         FL_LDSCHED |             FL_CIRRUS, fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(arm10tdmi,\t5T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(arm1020t,\t5T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm10tdmi\",     arm10tdmi,\t5T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm1020t\",      arm1020t,\t5T,\t                         FL_LDSCHED, fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(arm9e,\t\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(arm946es,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(arm966es,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(arm968es,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(arm10e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n-ARM_CORE(arm1020e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n-ARM_CORE(arm1022e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n-ARM_CORE(xscale,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n-ARM_CORE(iwmmxt,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n+ARM_CORE(\"arm9e\",         arm9e,\t5TE,\t                         FL_LDSCHED, 9e)\n+ARM_CORE(\"arm946e-s\",     arm946es,\t5TE,\t                         FL_LDSCHED, 9e)\n+ARM_CORE(\"arm966e-s\",     arm966es,\t5TE,\t                         FL_LDSCHED, 9e)\n+ARM_CORE(\"arm968e-s\",     arm968es,\t5TE,\t                         FL_LDSCHED, 9e)\n+ARM_CORE(\"arm10e\",        arm10e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm1020e\",      arm1020e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm1022e\",      arm1022e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n+ARM_CORE(\"xscale\",        xscale,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n+ARM_CORE(\"iwmmxt\",        iwmmxt,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(arm926ejs,\t5TEJ,\t                         0, 9e)\n-ARM_CORE(arm1026ejs,\t5TEJ,\t                         0, 9e)\n+ARM_CORE(\"arm926ej-s\",    arm926ejs,\t5TEJ,\t                         0, 9e)\n+ARM_CORE(\"arm1026ej-s\",   arm1026ejs,\t5TEJ,\t                         0, 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(arm1136js,\t6J,\t                         0, 9e)\n-ARM_CORE(arm1136jfs,\t6J,\t                         FL_VFPV2, 9e)\n+ARM_CORE(\"arm1136j-s\",    arm1136js,\t6J,\t                         0, 9e)\n+ARM_CORE(\"arm1136jf-s\",   arm1136jfs,\t6J,\t                         FL_VFPV2, 9e)"}, {"sha": "a457df375cbf6dc823382bf4b429e54e4e5de249", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from arm-cores.def\n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs\"\n+\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs\"\n \t(const (symbol_ref \"arm_tune\")))"}, {"sha": "c2617052d7c88c054de13f41f40f5e4761fe5b6d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -500,8 +500,8 @@ struct processors\n static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n-#define ARM_CORE(NAME, ARCH, FLAGS, COSTS) \\\n-  {#NAME, arm_none, #ARCH, FLAGS | FL_FOR_ARCH##ARCH, arm_##COSTS##_rtx_costs},\n+#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n+  {NAME, arm_none, #ARCH, FLAGS | FL_FOR_ARCH##ARCH, arm_##COSTS##_rtx_costs},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   {NULL, arm_none, NULL, 0, NULL}"}, {"sha": "735b182c86bdca0a438c487cfaabc28ccff1b09b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -83,8 +83,8 @@ extern char arm_arch_name[];\n /* The various ARM cores.  */\n enum processor_type\n {\n-#define ARM_CORE(NAME, ARCH, FLAGS, COSTS) \\\n-  NAME,\n+#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n+  IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   /* Used to indicate that no processor has been specified.  */\n@@ -93,8 +93,8 @@ enum processor_type\n \n enum target_cpus\n {\n-#define ARM_CORE(NAME, ARCH, FLAGS, COSTS) \\\n-  TARGET_CPU_##NAME,\n+#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n+  TARGET_CPU_##IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   TARGET_CPU_generic"}, {"sha": "40c054110527377ee9aadf1140c29349033cd3c6", "filename": "gcc/config/arm/gentune.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Fgentune.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fconfig%2Farm%2Fgentune.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgentune.sh?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -5,7 +5,7 @@\n echo \";; -*- buffer-read-only: t -*-\"\n echo \";; Generated automatically by gentune.sh from arm-cores.def\"\n \n-allcores=`awk -F'[(,]' '/^ARM_CORE/ { cores = cores$2\",\" } END { print cores } ' $1`\n+allcores=`awk -F'[(, \t]+' '/^ARM_CORE/ { cores = cores$3\",\" } END { print cores } ' $1`\n \n echo \"(define_attr \\\"tune\\\"\"\n echo \"\t\\\"$allcores\\\"\" | sed -e 's/,\"$/\"/'"}, {"sha": "96b0fcea791f84e724207a83a06fd000a7ddbdcc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d98a72fd4f5ea4ea6ea45fd5af277eaeaa181678", "patch": "@@ -6595,14 +6595,14 @@ assembly code.  Permissible names are: @samp{arm2}, @samp{arm250},\n @samp{arm620}, @samp{arm7}, @samp{arm7m}, @samp{arm7d}, @samp{arm7dm},\n @samp{arm7di}, @samp{arm7dmi}, @samp{arm70}, @samp{arm700},\n @samp{arm700i}, @samp{arm710}, @samp{arm710c}, @samp{arm7100},\n-@samp{arm7500}, @samp{arm7500fe}, @samp{arm7tdmi}, @samp{arm8},\n-@samp{strongarm}, @samp{strongarm110}, @samp{strongarm1100},\n+@samp{arm7500}, @samp{arm7500fe}, @samp{arm7tdmi}, @samp{arm7tdmi-s},\n+@samp{arm8}, @samp{strongarm}, @samp{strongarm110}, @samp{strongarm1100},\n @samp{arm8}, @samp{arm810}, @samp{arm9}, @samp{arm9e}, @samp{arm920},\n-@samp{arm920t}, @samp{arm922t}, @samp{arm946es}, @samp{arm966es},\n-@samp{arm968es}, @samp{arm926ejs}, @samp{arm940t}, @samp{arm9tdmi},\n-@samp{arm10tdmi}, @samp{arm1020t}, @samp{arm1026ejs},\n+@samp{arm920t}, @samp{arm922t}, @samp{arm946e-s}, @samp{arm966e-s},\n+@samp{arm968e-s}, @samp{arm926ej-s}, @samp{arm940t}, @samp{arm9tdmi},\n+@samp{arm10tdmi}, @samp{arm1020t}, @samp{arm1026ej-s},\n @samp{arm10e}, @samp{arm1020e}, @samp{arm1022e},\n-@samp{arm1136js}, @samp{arm1136jfs} ,@samp{xscale}, @samp{iwmmxt},\n+@samp{arm1136j-s}, @samp{arm1136jf-s} ,@samp{xscale}, @samp{iwmmxt},\n @samp{ep9312}.\n \n @itemx -mtune=@var{name}"}]}