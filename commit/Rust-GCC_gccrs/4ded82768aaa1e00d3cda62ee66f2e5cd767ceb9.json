{"sha": "4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlZDgyNzY4YWFhMWUwMGQzY2RhNjJlZTY2ZjJlNWNkNzY3Y2ViOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-08-27T10:10:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-08-27T10:10:34Z"}, "message": "re PR tree-optimization/57521 (wrong code for expressions in loop at -O3)\n\n2013-08-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57521\n\t* tree-if-conv.c (if_convertible_bb_p): Verify that at least\n\tone edge is non-critical.\n\t(find_phi_replacement_condition): Make sure to use a non-critical\n\tedge.  Cleanup and remove old bug workarounds.\n\t(bb_postdominates_preds): Remove.\n\t(if_convertible_loop_p_1): Do not compute post-dominators.\n\t(combine_blocks): Do not free post-dominators.\n\t(main_tree_if_conversion): Likewise.\n\t(pass_data_if_conversion): Add TODO_verify_ssa.\n\n\t* gcc.dg/torture/pr57521.c: New testcase.\n\nFrom-SVN: r202019", "tree": {"sha": "311215e5a03ff949e2f3101bcf33c5ac1f3ec523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311215e5a03ff949e2f3101bcf33c5ac1f3ec523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d15774b6318e7d7b1781eed30a1e3703bc450b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15774b6318e7d7b1781eed30a1e3703bc450b98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15774b6318e7d7b1781eed30a1e3703bc450b98"}], "stats": {"total": 157, "additions": 95, "deletions": 62}, "files": [{"sha": "04ed16160719385a76f63173cd569436b0a4a5ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "patch": "@@ -1,3 +1,16 @@\n+2013-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57521\n+\t* tree-if-conv.c (if_convertible_bb_p): Verify that at least\n+\tone edge is non-critical.\n+\t(find_phi_replacement_condition): Make sure to use a non-critical\n+\tedge.  Cleanup and remove old bug workarounds.\n+\t(bb_postdominates_preds): Remove.\n+\t(if_convertible_loop_p_1): Do not compute post-dominators.\n+\t(combine_blocks): Do not free post-dominators.\n+\t(main_tree_if_conversion): Likewise.\n+\t(pass_data_if_conversion): Add TODO_verify_ssa.\n+\n 2013-08-27  DJ Delorie  <dj@redhat.com>\n \n \t* config/i386/djgpp.h (ASM_DECLARE_FUNCTION_NAME): New."}, {"sha": "9e0951b693a64c21f0deab48fa1aad50ccd4cd0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "patch": "@@ -1,3 +1,8 @@\n+2013-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57521\n+\t* gcc.dg/torture/pr57521.c: New testcase.\n+\n 2013-08-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/57860"}, {"sha": "e7832cb00e83a509b24672218e461f989e8a520a", "filename": "gcc/testsuite/gcc.dg/torture/pr57521.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57521.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57521.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57521.c?ref=4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-ftree-loop-if-convert\" } */\n+\n+void abort (void);\n+\n+int a, b, c, d, o = 1, p;\n+short e;\n+\n+int\n+fn1 (int * p1)\n+{\n+  int f, g, h, j = 0, k = 0, l = 0;\n+  unsigned int i;\n+  int *m[1] = { &l };\n+  for (; b >= 0; b--)\n+    {\n+      if (*p1)\n+\tif (j >= 0)\n+\t  {\n+\t    int n = 1;\n+\t    e = 1;\n+\t    h = a ? a : 1 % n;\n+\t    g = h > 0 ? 0 : h + 1;\n+\t    k = c + g;\n+\t  }\n+\telse\n+\t  continue;\n+      else\n+\t{\n+\n+\t  f = d > 0 ? 0 : d + 1;\n+\t  i = f;\n+\t  j = 1 + i;\n+\t}\n+      l++;\n+    }\n+  return k;\n+}\n+\n+int\n+main ()\n+{\n+  for (;; p++)\n+    {\n+      fn1 (&o);\n+      break;\n+    }\n+  if (e != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6ec9c0f5050fb1dc83e4954d2587115f463e44dc", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 26, "deletions": 62, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "patch": "@@ -797,20 +797,6 @@ if_convertible_stmt_p (gimple stmt, vec<data_reference_p> refs)\n   return true;\n }\n \n-/* Return true when BB post-dominates all its predecessors.  */\n-\n-static bool\n-bb_postdominates_preds (basic_block bb)\n-{\n-  unsigned i;\n-\n-  for (i = 0; i < EDGE_COUNT (bb->preds); i++)\n-    if (!dominated_by_p (CDI_POST_DOMINATORS, EDGE_PRED (bb, i)->src, bb))\n-      return false;\n-\n-  return true;\n-}\n-\n /* Return true when BB is if-convertible.  This routine does not check\n    basic block's statements and phis.\n \n@@ -868,10 +854,23 @@ if_convertible_bb_p (struct loop *loop, basic_block bb, basic_block exit_bb)\n \treturn false;\n       }\n \n-  if (EDGE_COUNT (bb->preds) == 2\n-      && bb != loop->header\n-      && !bb_postdominates_preds (bb))\n-    return false;\n+  /* At least one incoming edge has to be non-critical as otherwise edge\n+     predicates are not equal to basic-block predicates of the edge\n+     source.  */\n+  if (EDGE_COUNT (bb->preds) > 1\n+      && bb != loop->header)\n+    {\n+      bool found = false;\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\tif (EDGE_COUNT (e->src->succs) == 1)\n+\t  found = true;\n+      if (!found)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"only critical predecessors\\n\");\n+\t  return false;\n+\t}\n+    }\n \n   return true;\n }\n@@ -1084,7 +1083,6 @@ if_convertible_loop_p_1 (struct loop *loop,\n     return false;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n-  calculate_dominance_info (CDI_POST_DOMINATORS);\n \n   /* Allow statements that can be handled during if-conversion.  */\n   ifc_bbs = get_loop_body_in_if_conv_order (loop);\n@@ -1220,8 +1218,7 @@ if_convertible_loop_p (struct loop *loop)\n    if-conversion.  */\n \n static basic_block\n-find_phi_replacement_condition (struct loop *loop,\n-\t\t\t\tbasic_block bb, tree *cond,\n+find_phi_replacement_condition (basic_block bb, tree *cond,\n \t\t\t\tgimple_stmt_iterator *gsi)\n {\n   edge first_edge, second_edge;\n@@ -1231,34 +1228,10 @@ find_phi_replacement_condition (struct loop *loop,\n   first_edge = EDGE_PRED (bb, 0);\n   second_edge = EDGE_PRED (bb, 1);\n \n-  /* Use condition based on following criteria:\n-     1)\n-       S1: x = !c ? a : b;\n-\n-       S2: x = c ? b : a;\n-\n-       S2 is preferred over S1. Make 'b' first_bb and use its condition.\n-\n-     2) Do not make loop header first_bb.\n-\n-     3)\n-       S1: x = !(c == d)? a : b;\n-\n-       S21: t1 = c == d;\n-       S22: x = t1 ? b : a;\n-\n-       S3: x = (c == d) ? b : a;\n-\n-       S3 is preferred over S1 and S2*, Make 'b' first_bb and use\n-       its condition.\n-\n-     4) If  pred B is dominated by pred A then use pred B's condition.\n-        See PR23115.  */\n-\n-  /* Select condition that is not TRUTH_NOT_EXPR.  */\n+  /* Prefer an edge with a not negated predicate.\n+     ???  That's a very weak cost model.  */\n   tmp_cond = bb_predicate (first_edge->src);\n   gcc_assert (tmp_cond);\n-\n   if (TREE_CODE (tmp_cond) == TRUTH_NOT_EXPR)\n     {\n       edge tmp_edge;\n@@ -1268,11 +1241,9 @@ find_phi_replacement_condition (struct loop *loop,\n       second_edge = tmp_edge;\n     }\n \n-  /* Check if FIRST_BB is loop header or not and make sure that\n-     FIRST_BB does not dominate SECOND_BB.  */\n-  if (first_edge->src == loop->header\n-      || dominated_by_p (CDI_DOMINATORS,\n-\t\t\t second_edge->src, first_edge->src))\n+  /* Check if the edge we take the condition from is not critical.\n+     We know that at least one non-critical edge exists.  */\n+  if (EDGE_COUNT (first_edge->src->succs) > 1)\n     {\n       *cond = bb_predicate (second_edge->src);\n \n@@ -1347,9 +1318,6 @@ predicate_scalar_phi (gimple phi, tree cond,\n \t  arg_1 = gimple_phi_arg_def (phi, 1);\n \t}\n \n-      gcc_checking_assert (bb == bb->loop_father->header\n-\t\t\t   || bb_postdominates_preds (bb));\n-\n       /* Build new RHS using selected condition and arguments.  */\n       rhs = fold_build_cond_expr (TREE_TYPE (res), unshare_expr (cond),\n \t\t\t\t  arg_0, arg_1);\n@@ -1395,7 +1363,7 @@ predicate_all_scalar_phis (struct loop *loop)\n       /* BB has two predecessors.  Using predecessor's aux field, set\n \t appropriate condition for the PHI node replacement.  */\n       gsi = gsi_after_labels (bb);\n-      true_bb = find_phi_replacement_condition (loop, bb, &cond, &gsi);\n+      true_bb = find_phi_replacement_condition (bb, &cond, &gsi);\n \n       while (!gsi_end_p (phi_gsi))\n \t{\n@@ -1765,9 +1733,6 @@ combine_blocks (struct loop *loop)\n \n   free (ifc_bbs);\n   ifc_bbs = NULL;\n-\n-  /* Post-dominators are corrupt now.  */\n-  free_dominance_info (CDI_POST_DOMINATORS);\n }\n \n /* If-convert LOOP when it is legal.  For the moment this pass has no\n@@ -1830,8 +1795,6 @@ main_tree_if_conversion (void)\n   if (changed && flag_tree_loop_if_convert_stores)\n     todo |= TODO_update_ssa_only_virtuals;\n \n-  free_dominance_info (CDI_POST_DOMINATORS);\n-\n #ifdef ENABLE_CHECKING\n   {\n     basic_block bb;\n@@ -1867,7 +1830,8 @@ const pass_data pass_data_if_conversion =\n   0, /* properties_provided */\n   0, /* properties_destroyed */\n   0, /* todo_flags_start */\n-  ( TODO_verify_stmts | TODO_verify_flow ), /* todo_flags_finish */\n+  ( TODO_verify_stmts | TODO_verify_flow\n+    | TODO_verify_ssa ), /* todo_flags_finish */\n };\n \n class pass_if_conversion : public gimple_opt_pass"}]}