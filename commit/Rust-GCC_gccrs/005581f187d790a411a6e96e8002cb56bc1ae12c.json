{"sha": "005581f187d790a411a6e96e8002cb56bc1ae12c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1NTgxZjE4N2Q3OTBhNDExYTZlOTZlODAwMmNiNTZiYzFhZTEyYw==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-11-18T07:25:12Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-11-18T07:25:12Z"}, "message": "passes.c (remove_cgraph_node_from_order): New.\n\ngcc/\n\n\t* passes.c (remove_cgraph_node_from_order): New.\n\t(do_per_function_toporder): Register cgraph removal\n\thook.\n\ngcc/testsuite/\n\n\t* g++.dg/pr63766.C: New.\n\nFrom-SVN: r217688", "tree": {"sha": "2becea89197e77d2686d8bdb1f690ba101490c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2becea89197e77d2686d8bdb1f690ba101490c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005581f187d790a411a6e96e8002cb56bc1ae12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005581f187d790a411a6e96e8002cb56bc1ae12c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005581f187d790a411a6e96e8002cb56bc1ae12c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005581f187d790a411a6e96e8002cb56bc1ae12c/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92191d7b1b6b791f85039ad0b63959f53cb0afe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92191d7b1b6b791f85039ad0b63959f53cb0afe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92191d7b1b6b791f85039ad0b63959f53cb0afe2"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "0befede06de06f564f7c189703a242f294e027f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=005581f187d790a411a6e96e8002cb56bc1ae12c", "patch": "@@ -1,3 +1,9 @@\n+2014-11-18  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* passes.c (remove_cgraph_node_from_order): New.\n+\t(do_per_function_toporder): Register cgraph removal\n+\thook.\n+\n 2014-11-17  Terry Guo  <terry.guo@arm.com>\n \n \t* config/arm/arm.c (arm_issue_rate): Return 2 for cortex-m7."}, {"sha": "f6f3b9dd19ff866eaa4f6109b8992f1bc6f69a8d", "filename": "gcc/passes.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=005581f187d790a411a6e96e8002cb56bc1ae12c", "patch": "@@ -1609,6 +1609,24 @@ do_per_function (void (*callback) (function *, void *data), void *data)\n static int nnodes;\n static GTY ((length (\"nnodes\"))) cgraph_node **order;\n \n+/* Hook called when NODE is removed and therefore should be\n+   excluded from order vector.  DATA is an array of integers.\n+   DATA[0] holds max index it may be accessed by.  For cgraph\n+   node DATA[node->uid + 1] holds index of this node in order\n+   vector.  */\n+static void\n+remove_cgraph_node_from_order (cgraph_node *node, void *data)\n+{\n+  int *order_idx = (int *)data;\n+\n+  if (node->uid >= order_idx[0])\n+    return;\n+\n+  int idx = order_idx[node->uid + 1];\n+  if (idx >= 0 && idx < nnodes && order[idx] == node)\n+    order[idx] = NULL;\n+}\n+\n /* If we are in IPA mode (i.e., current_function_decl is NULL), call\n    function CALLBACK for every function in the call graph.  Otherwise,\n    call CALLBACK on the current function.\n@@ -1622,13 +1640,29 @@ do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n     callback (cfun, data);\n   else\n     {\n+      cgraph_node_hook_list *hook;\n+      int *order_idx;\n       gcc_assert (!order);\n       order = ggc_vec_alloc<cgraph_node *> (symtab->cgraph_count);\n+\n+      order_idx = XALLOCAVEC (int, symtab->cgraph_max_uid + 1);\n+      memset (order_idx + 1, -1, sizeof (int) * symtab->cgraph_max_uid);\n+      order_idx[0] = symtab->cgraph_max_uid;\n+\n       nnodes = ipa_reverse_postorder (order);\n       for (i = nnodes - 1; i >= 0; i--)\n-        order[i]->process = 1;\n+\t{\n+\t  order[i]->process = 1;\n+\t  order_idx[order[i]->uid + 1] = i;\n+\t}\n+      hook = symtab->add_cgraph_removal_hook (remove_cgraph_node_from_order,\n+\t\t\t\t\t      order_idx);\n       for (i = nnodes - 1; i >= 0; i--)\n \t{\n+\t  /* Function could be inlined and removed as unreachable.  */\n+\t  if (!order[i])\n+\t    continue;\n+\n \t  struct cgraph_node *node = order[i];\n \n \t  /* Allow possibly removed nodes to be garbage collected.  */\n@@ -1637,6 +1671,7 @@ do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n \t  if (node->has_gimple_body_p ())\n \t    callback (DECL_STRUCT_FUNCTION (node->decl), data);\n \t}\n+      symtab->remove_cgraph_removal_hook (hook);\n     }\n   ggc_free (order);\n   order = NULL;"}, {"sha": "c97fe881252436630a3ca56f43a234055a66b9aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=005581f187d790a411a6e96e8002cb56bc1ae12c", "patch": "@@ -1,3 +1,7 @@\n+2014-11-18  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* g++.dg/pr63766.C: New.\n+\n 2014-11-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p8vector-ldst.c: Rewrite to use 40 live"}, {"sha": "1414fbe52b71ab58111f858c605943c5227ce363", "filename": "gcc/testsuite/g++.dg/pr63766.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63766.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005581f187d790a411a6e96e8002cb56bc1ae12c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63766.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63766.C?ref=005581f187d790a411a6e96e8002cb56bc1ae12c", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11 -O2\" } */\n+\n+class A\n+{\n+ public:\n+  void\n+    getValueType ()\n+  {\n+  }\n+  void getTypeClass ();\n+};\n+template <typename ImplClass> class B\n+{\n+ public:\n+  void\n+    Visit (A *p1)\n+  {\n+    p1->getTypeClass ();\n+    static_cast<ImplClass *> (0)->VisitAtomicType (0);\n+  }\n+};\n+class C : B<C>\n+{\n+  template <typename Fn>\n+  void\n+    dumpChild (Fn p1)\n+    {\n+      p1 ();\n+    }\n+\n+ public:\n+  void dumpTypeAsChild (int);\n+  void\n+    VisitAtomicType (A *p1)\n+  {\n+    p1->getValueType ();\n+    dumpTypeAsChild (0);\n+  }\n+};\n+void\n+C::dumpTypeAsChild (int)\n+{\n+  dumpChild ([=]\n+             {\n+               Visit (0);\n+             });\n+}"}]}