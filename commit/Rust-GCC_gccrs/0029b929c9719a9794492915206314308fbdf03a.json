{"sha": "0029b929c9719a9794492915206314308fbdf03a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyOWI5MjljOTcxOWE5Nzk0NDkyOTE1MjA2MzE0MzA4ZmJkZjAzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-18T16:10:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-18T16:10:43Z"}, "message": "common.opt (gno-column-info, [...]): New options.\n\n\t* common.opt (gno-column-info, gcolumn-info): New options.\n\t* dwarf2out.c (dwarf2_lineno_debug_hooks): Formatting fix.\n\t(check_die): Also test for multiple DW_AT_decl_column attributes.\n\t(add_src_coords_attributes, dwarf2out_imported_module_or_decl_1): Add\n\tDW_AT_decl_column if requested.\n\t(gen_subprogram_die): Compare and/or add also DW_AT_decl_column\n\tif requested.\n\t(gen_variable_die): Likewise.\n\t(add_call_src_coords_attributes): Add DW_AT_call_column if requested.\n\t* doc/invoke.texi (-gcolumn-info, -gno-column-info): Document.\n\nFrom-SVN: r245563", "tree": {"sha": "4c95700c937961cb180b52f430d1e0b453fed5ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c95700c937961cb180b52f430d1e0b453fed5ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0029b929c9719a9794492915206314308fbdf03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0029b929c9719a9794492915206314308fbdf03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0029b929c9719a9794492915206314308fbdf03a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0029b929c9719a9794492915206314308fbdf03a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47e16d83e9ee0be3640c1afc3621feaf6bcd30e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e16d83e9ee0be3640c1afc3621feaf6bcd30e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e16d83e9ee0be3640c1afc3621feaf6bcd30e2"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "3d4b52367236b1a43b7b7753de52db1a2eb1a7ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0029b929c9719a9794492915206314308fbdf03a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0029b929c9719a9794492915206314308fbdf03a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0029b929c9719a9794492915206314308fbdf03a", "patch": "@@ -1,5 +1,16 @@\n 2017-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* common.opt (gno-column-info, gcolumn-info): New options.\n+\t* dwarf2out.c (dwarf2_lineno_debug_hooks): Formatting fix.\n+\t(check_die): Also test for multiple DW_AT_decl_column attributes.\n+\t(add_src_coords_attributes, dwarf2out_imported_module_or_decl_1): Add\n+\tDW_AT_decl_column if requested.\n+\t(gen_subprogram_die): Compare and/or add also DW_AT_decl_column\n+\tif requested.\n+\t(gen_variable_die): Likewise.\n+\t(add_call_src_coords_attributes): Add DW_AT_call_column if requested.\n+\t* doc/invoke.texi (-gcolumn-info, -gno-column-info): Document.\n+\n \tPR target/79569\n \t* config/i386/i386.opt (m3dnowa): Replace Undocumented with Report.\n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_3DNOW_A_SET): Define."}, {"sha": "6defe713c0b7d2aa7efdee21a50550a266a8089f", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0029b929c9719a9794492915206314308fbdf03a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0029b929c9719a9794492915206314308fbdf03a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0029b929c9719a9794492915206314308fbdf03a", "patch": "@@ -2805,6 +2805,14 @@ gcoff\n Common Driver JoinedOrMissing Negative(gdwarf)\n Generate debug information in COFF format.\n \n+gno-column-info\n+Common Driver RejectNegative Var(debug_column_info,0) Init(0)\n+Don't record DW_AT_decl_column and DW_AT_call_column in DWARF.\n+\n+gcolumn-info\n+Common Driver RejectNegative Var(debug_column_info,1)\n+Record DW_AT_decl_column and DW_AT_call_column in DWARF.\n+\n gdwarf\n Common Driver JoinedOrMissing Negative(gdwarf-)\n Generate debug information in default version of DWARF format."}, {"sha": "c65086cb3a8b2f048307b7d459d84cb76f598537", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0029b929c9719a9794492915206314308fbdf03a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0029b929c9719a9794492915206314308fbdf03a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0029b929c9719a9794492915206314308fbdf03a", "patch": "@@ -338,6 +338,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-g  -g@var{level}  -gcoff  -gdwarf  -gdwarf-@var{version} @gol\n -ggdb  -grecord-gcc-switches  -gno-record-gcc-switches @gol\n -gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf @gol\n+-gcolumn-info  -gno-column-info @gol\n -gvms  -gxcoff  -gxcoff+  -gz@r{[}=@var{type}@r{]} @gol\n -fdebug-prefix-map=@var{old}=@var{new}  -fdebug-types-section @gol\n -feliminate-dwarf2-dups  -fno-eliminate-unused-debug-types @gol\n@@ -6816,6 +6817,14 @@ DWARF extensions from later standard versions is allowed.\n Allow using extensions of later DWARF standard version than selected with\n @option{-gdwarf-@var{version}}.\n \n+@item -gcolumn-info\n+@item -gno-column-info\n+@opindex gcolumn-info\n+@opindex gno-column-info\n+Emit location column information into DWARF debugging information, rather\n+than just file and line.\n+This option is disabled by default.\n+\n @item -gz@r{[}=@var{type}@r{]}\n @opindex gz\n Produce compressed debug sections in DWARF format, if that is supported."}, {"sha": "f39c2aa8f254bc8be0ed23d22cd897a5c9b2e23e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0029b929c9719a9794492915206314308fbdf03a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0029b929c9719a9794492915206314308fbdf03a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0029b929c9719a9794492915206314308fbdf03a", "patch": "@@ -2732,7 +2732,7 @@ const struct gcc_debug_hooks dwarf2_lineno_debug_hooks =\n   debug_nothing_int_int,\t         /* begin_block */\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n-  dwarf2out_source_line,\t /* source_line */\n+  dwarf2out_source_line,\t\t /* source_line */\n   debug_nothing_int_charstar,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */\n@@ -6109,7 +6109,7 @@ check_die (dw_die_ref die)\n   dw_attr_node *a;\n   bool inline_found = false;\n   int n_location = 0, n_low_pc = 0, n_high_pc = 0, n_artificial = 0;\n-  int n_decl_line = 0, n_decl_file = 0;\n+  int n_decl_line = 0, n_decl_column = 0, n_decl_file = 0;\n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n     {\n       switch (a->dw_attr)\n@@ -6130,6 +6130,9 @@ check_die (dw_die_ref die)\n \tcase DW_AT_artificial:\n \t  ++n_artificial;\n \t  break;\n+        case DW_AT_decl_column:\n+\t  ++n_decl_column;\n+\t  break;\n \tcase DW_AT_decl_line:\n \t  ++n_decl_line;\n \t  break;\n@@ -6141,7 +6144,7 @@ check_die (dw_die_ref die)\n \t}\n     }\n   if (n_location > 1 || n_low_pc > 1 || n_high_pc > 1 || n_artificial > 1\n-      || n_decl_line > 1 || n_decl_file > 1)\n+      || n_decl_column > 1 || n_decl_line > 1 || n_decl_file > 1)\n     {\n       fprintf (stderr, \"Duplicate attributes in DIE:\\n\");\n       debug_dwarf_die (die);\n@@ -20190,6 +20193,8 @@ add_src_coords_attributes (dw_die_ref die, tree decl)\n   s = expand_location (DECL_SOURCE_LOCATION (decl));\n   add_AT_file (die, DW_AT_decl_file, lookup_filename (s.file));\n   add_AT_unsigned (die, DW_AT_decl_line, s.line);\n+  if (debug_column_info && s.column)\n+    add_AT_unsigned (die, DW_AT_decl_column, s.column);\n }\n \n /* Add DW_AT_{,MIPS_}linkage_name attribute for the given decl.  */\n@@ -21936,7 +21941,11 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t   && (DECL_ARTIFICIAL (decl)\n \t       || (get_AT_file (old_die, DW_AT_decl_file) == file_index\n \t\t   && (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t\t       == (unsigned) s.line))))\n+\t\t       == (unsigned) s.line)\n+\t\t   && (!debug_column_info\n+\t\t       || s.column == 0\n+\t\t       || (get_AT_unsigned (old_die, DW_AT_decl_column)\n+\t\t\t   == (unsigned) s.column)))))\n \t{\n \t  subr_die = old_die;\n \n@@ -21963,10 +21972,15 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t    add_AT_file (subr_die, DW_AT_decl_file, file_index);\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line) != (unsigned) s.line)\n \t    add_AT_unsigned (subr_die, DW_AT_decl_line, s.line);\n+\t  if (debug_column_info\n+\t      && s.column\n+\t      && (get_AT_unsigned (old_die, DW_AT_decl_column)\n+\t\t  != (unsigned) s.column))\n+\t    add_AT_unsigned (subr_die, DW_AT_decl_column, s.column);\n \n \t  /* If the prototype had an 'auto' or 'decltype(auto)' return type,\n \t     emit the real type on the definition die.  */\n-\t  if (is_cxx() && debug_info_level > DINFO_LEVEL_TERSE)\n+\t  if (is_cxx () && debug_info_level > DINFO_LEVEL_TERSE)\n \t    {\n \t      dw_die_ref die = get_AT_ref (old_die, DW_AT_type);\n \t      if (die == auto_die || die == decltype_auto_die)\n@@ -22838,6 +22852,12 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line) != (unsigned) s.line)\n \t    add_AT_unsigned (var_die, DW_AT_decl_line, s.line);\n \n+\t  if (debug_column_info\n+\t      && s.column\n+\t      && (get_AT_unsigned (old_die, DW_AT_decl_column)\n+\t\t  != (unsigned) s.column))\n+\t    add_AT_unsigned (var_die, DW_AT_decl_column, s.column);\n+\n \t  if (old_die->die_tag == DW_TAG_member)\n \t    add_linkage_name (var_die, decl);\n \t}\n@@ -23011,6 +23031,8 @@ add_call_src_coords_attributes (tree stmt, dw_die_ref die)\n     {\n       add_AT_file (die, DW_AT_call_file, lookup_filename (s.file));\n       add_AT_unsigned (die, DW_AT_call_line, s.line);\n+      if (debug_column_info && s.column)\n+\tadd_AT_unsigned (die, DW_AT_call_column, s.column);\n     }\n }\n \n@@ -25547,6 +25569,8 @@ dwarf2out_imported_module_or_decl_1 (tree decl,\n \n   add_AT_file (imported_die, DW_AT_decl_file, lookup_filename (xloc.file));\n   add_AT_unsigned (imported_die, DW_AT_decl_line, xloc.line);\n+  if (debug_column_info && xloc.column)\n+    add_AT_unsigned (imported_die, DW_AT_decl_column, xloc.column);\n   if (name)\n     add_AT_string (imported_die, DW_AT_name,\n \t\t   IDENTIFIER_POINTER (name));\n@@ -27959,7 +27983,9 @@ move_linkage_attr (dw_die_ref die)\n     {\n       dw_attr_node *prev = &(*die->die_attr)[ix - 1];\n \n-      if (prev->dw_attr == DW_AT_decl_line || prev->dw_attr == DW_AT_name)\n+      if (prev->dw_attr == DW_AT_decl_line\n+\t  || prev->dw_attr == DW_AT_decl_column\n+\t  || prev->dw_attr == DW_AT_name)\n \tbreak;\n     }\n "}]}