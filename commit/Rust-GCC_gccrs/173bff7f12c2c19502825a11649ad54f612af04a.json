{"sha": "173bff7f12c2c19502825a11649ad54f612af04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczYmZmN2YxMmMyYzE5NTAyODI1YTExNjQ5YWQ1NGY2MTJhZjA0YQ==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-03-10T20:41:53Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-14T18:35:34Z"}, "message": "Fix Woverloaded-virtual warnings.\n\nFix warnings from -Woverloaded-virtual.\nFix #274", "tree": {"sha": "09e8eb459878a26068306952cb40110d120a38c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09e8eb459878a26068306952cb40110d120a38c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/173bff7f12c2c19502825a11649ad54f612af04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173bff7f12c2c19502825a11649ad54f612af04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173bff7f12c2c19502825a11649ad54f612af04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173bff7f12c2c19502825a11649ad54f612af04a/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8549556123da80e60922eaa928cfd284f831303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8549556123da80e60922eaa928cfd284f831303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8549556123da80e60922eaa928cfd284f831303"}], "stats": {"total": 616, "additions": 374, "deletions": 242}, "files": [{"sha": "8b0b24a71bdc906c90e3f177690604bcb381f17a", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -242,7 +242,7 @@ CFLAGS-rust/rust-parse.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES)\n \n # TODO: possibly find a way to ensure C++11 compilation level here?\n-RUST_CXXFLAGS = -std=c++11 -Wno-unused-parameter -Wno-overloaded-virtual\n+RUST_CXXFLAGS = -std=c++11 -Wno-unused-parameter\n \n # build all rust/lex files in rust folder, add cross-folder includes\n rust/%.o: rust/lex/%.cc"}, {"sha": "128a729dd8753367ace51eef60765cce6bc9e32b", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Compile {\n \n class CompileBlock : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bblock *compile (HIR::BlockExpr *expr, Context *ctx, Bvariable *result)\n   {\n@@ -35,7 +37,7 @@ class CompileBlock : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  void visit (HIR::BlockExpr &expr);\n+  void visit (HIR::BlockExpr &expr) override;\n \n private:\n   CompileBlock (Context *ctx, Bvariable *result)\n@@ -48,6 +50,8 @@ class CompileBlock : public HIRCompileBase\n \n class CompileConditionalBlocks : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bstatement *compile (HIR::IfExpr *expr, Context *ctx,\n \t\t\t      Bvariable *result)\n@@ -57,11 +61,11 @@ class CompileConditionalBlocks : public HIRCompileBase\n     return resolver.translated;\n   }\n \n-  void visit (HIR::IfExpr &expr);\n+  void visit (HIR::IfExpr &expr) override;\n \n-  void visit (HIR::IfExprConseqElse &expr);\n+  void visit (HIR::IfExprConseqElse &expr) override;\n \n-  void visit (HIR::IfExprConseqIf &expr);\n+  void visit (HIR::IfExprConseqIf &expr) override;\n \n private:\n   CompileConditionalBlocks (Context *ctx, Bvariable *result)\n@@ -74,6 +78,8 @@ class CompileConditionalBlocks : public HIRCompileBase\n \n class CompileExprWithBlock : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bstatement *compile (HIR::ExprWithBlock *expr, Context *ctx,\n \t\t\t      Bvariable *result)\n@@ -83,17 +89,17 @@ class CompileExprWithBlock : public HIRCompileBase\n     return resolver.translated;\n   }\n \n-  void visit (HIR::IfExpr &expr)\n+  void visit (HIR::IfExpr &expr) override\n   {\n     translated = CompileConditionalBlocks::compile (&expr, ctx, result);\n   }\n \n-  void visit (HIR::IfExprConseqElse &expr)\n+  void visit (HIR::IfExprConseqElse &expr) override\n   {\n     translated = CompileConditionalBlocks::compile (&expr, ctx, result);\n   }\n \n-  void visit (HIR::IfExprConseqIf &expr)\n+  void visit (HIR::IfExprConseqIf &expr) override\n   {\n     translated = CompileConditionalBlocks::compile (&expr, ctx, result);\n   }"}, {"sha": "f4353cd6e84a3e2099c1ccffdd75f4bf5cc92520", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -30,6 +30,8 @@ namespace Compile {\n \n class CompileExpr : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bexpression *Compile (HIR::Expr *expr, Context *ctx)\n   {\n@@ -38,7 +40,7 @@ class CompileExpr : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  void visit (HIR::TupleIndexExpr &expr)\n+  void visit (HIR::TupleIndexExpr &expr) override\n   {\n     HIR::Expr *tuple_expr = expr.get_tuple_expr ().get ();\n     TupleIndex index = expr.get_tuple_index ();\n@@ -49,7 +51,7 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t      expr.get_locus ());\n   }\n \n-  void visit (HIR::TupleExpr &expr)\n+  void visit (HIR::TupleExpr &expr) override\n   {\n     if (expr.is_unit ())\n       {\n@@ -82,7 +84,7 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t     expr.get_locus ());\n   }\n \n-  void visit (HIR::ReturnExpr &expr)\n+  void visit (HIR::ReturnExpr &expr) override\n   {\n     auto fncontext = ctx->peek_fn ();\n \n@@ -101,11 +103,11 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (s);\n   }\n \n-  void visit (HIR::CallExpr &expr);\n+  void visit (HIR::CallExpr &expr) override;\n \n-  void visit (HIR::MethodCallExpr &expr);\n+  void visit (HIR::MethodCallExpr &expr) override;\n \n-  void visit (HIR::IdentifierExpr &expr)\n+  void visit (HIR::IdentifierExpr &expr) override\n   {\n     // need to look up the reference for this identifier\n     NodeId ref_node_id;\n@@ -157,7 +159,7 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n-  void visit (HIR::LiteralExpr &expr)\n+  void visit (HIR::LiteralExpr &expr) override\n   {\n     auto literal_value = expr.get_literal ();\n     switch (expr.get_lit_type ())\n@@ -241,7 +243,7 @@ class CompileExpr : public HIRCompileBase\n     gcc_unreachable ();\n   }\n \n-  void visit (HIR::AssignmentExpr &expr)\n+  void visit (HIR::AssignmentExpr &expr) override\n   {\n     fncontext fn = ctx->peek_fn ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n@@ -253,7 +255,7 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (assignment);\n   }\n \n-  void visit (HIR::ArrayIndexExpr &expr)\n+  void visit (HIR::ArrayIndexExpr &expr) override\n   {\n     Bexpression *array = CompileExpr::Compile (expr.get_array_expr (), ctx);\n     Bexpression *index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n@@ -262,7 +264,7 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t     expr.get_locus ());\n   }\n \n-  void visit (HIR::ArrayExpr &expr)\n+  void visit (HIR::ArrayExpr &expr) override\n   {\n     TyTy::BaseType *tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -286,7 +288,7 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t\t   expr.get_locus ());\n   }\n \n-  void visit (HIR::ArrayElemsValues &elems)\n+  void visit (HIR::ArrayElemsValues &elems) override\n   {\n     elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n       Bexpression *translated_expr = CompileExpr::Compile (e, ctx);\n@@ -295,7 +297,7 @@ class CompileExpr : public HIRCompileBase\n     });\n   }\n \n-  void visit (HIR::ArrayElemsCopied &elems)\n+  void visit (HIR::ArrayElemsCopied &elems) override\n   {\n     Bexpression *translated_expr\n       = CompileExpr::Compile (elems.get_elem_to_copy (), ctx);\n@@ -304,7 +306,7 @@ class CompileExpr : public HIRCompileBase\n       constructor.push_back (translated_expr);\n   }\n \n-  void visit (HIR::ArithmeticOrLogicalExpr &expr)\n+  void visit (HIR::ArithmeticOrLogicalExpr &expr) override\n   {\n     auto op = expr.get_expr_type ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n@@ -316,7 +318,7 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t\t       location);\n   }\n \n-  void visit (HIR::ComparisonExpr &expr)\n+  void visit (HIR::ComparisonExpr &expr) override\n   {\n     auto op = expr.get_expr_type ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n@@ -327,7 +329,7 @@ class CompileExpr : public HIRCompileBase\n       = ctx->get_backend ()->comparison_expression (op, lhs, rhs, location);\n   }\n \n-  void visit (HIR::LazyBooleanExpr &expr)\n+  void visit (HIR::LazyBooleanExpr &expr) override\n   {\n     auto op = expr.get_expr_type ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n@@ -338,7 +340,7 @@ class CompileExpr : public HIRCompileBase\n       = ctx->get_backend ()->lazy_boolean_expression (op, lhs, rhs, location);\n   }\n \n-  void visit (HIR::NegationExpr &expr)\n+  void visit (HIR::NegationExpr &expr) override\n   {\n     auto op = expr.get_expr_type ();\n     auto negated_expr = CompileExpr::Compile (expr.get_expr (), ctx);\n@@ -348,13 +350,13 @@ class CompileExpr : public HIRCompileBase\n       = ctx->get_backend ()->negation_expression (op, negated_expr, location);\n   }\n \n-  void visit (HIR::IfExpr &expr)\n+  void visit (HIR::IfExpr &expr) override\n   {\n     auto stmt = CompileConditionalBlocks::compile (&expr, ctx, nullptr);\n     ctx->add_statement (stmt);\n   }\n \n-  void visit (HIR::IfExprConseqElse &expr)\n+  void visit (HIR::IfExprConseqElse &expr) override\n   {\n     TyTy::BaseType *if_type = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -391,7 +393,7 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n-  void visit (HIR::IfExprConseqIf &expr)\n+  void visit (HIR::IfExprConseqIf &expr) override\n   {\n     TyTy::BaseType *if_type = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -428,7 +430,7 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n-  void visit (HIR::BlockExpr &expr)\n+  void visit (HIR::BlockExpr &expr) override\n   {\n     TyTy::BaseType *block_tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -465,7 +467,7 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n-  void visit (HIR::StructExprStructFields &struct_expr)\n+  void visit (HIR::StructExprStructFields &struct_expr) override\n   {\n     TyTy::BaseType *tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (\n@@ -492,12 +494,12 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t     struct_expr.get_locus ());\n   }\n \n-  void visit (HIR::GroupedExpr &expr)\n+  void visit (HIR::GroupedExpr &expr) override\n   {\n     translated = CompileExpr::Compile (expr.get_expr_in_parens ().get (), ctx);\n   }\n \n-  void visit (HIR::FieldAccessExpr &expr)\n+  void visit (HIR::FieldAccessExpr &expr) override\n   {\n     // resolve the receiver back to ADT type\n     TyTy::BaseType *receiver = nullptr;\n@@ -522,12 +524,12 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t      expr.get_locus ());\n   }\n \n-  void visit (HIR::PathInExpression &expr)\n+  void visit (HIR::PathInExpression &expr) override\n   {\n     translated = ResolvePathRef::Compile (&expr, ctx);\n   }\n \n-  void visit (HIR::LoopExpr &expr)\n+  void visit (HIR::LoopExpr &expr) override\n   {\n     TyTy::BaseType *block_tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -592,7 +594,7 @@ class CompileExpr : public HIRCompileBase\n     ctx->pop_loop_begin_label ();\n   }\n \n-  void visit (HIR::WhileLoopExpr &expr)\n+  void visit (HIR::WhileLoopExpr &expr) override\n   {\n     fncontext fnctx = ctx->peek_fn ();\n     if (expr.has_loop_label ())\n@@ -650,7 +652,7 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (loop_stmt);\n   }\n \n-  void visit (HIR::BreakExpr &expr)\n+  void visit (HIR::BreakExpr &expr) override\n   {\n     fncontext fnctx = ctx->peek_fn ();\n     if (expr.has_break_expr ())\n@@ -713,7 +715,7 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n-  void visit (HIR::ContinueExpr &expr)\n+  void visit (HIR::ContinueExpr &expr) override\n   {\n     Blabel *label = ctx->peek_loop_begin_label ();\n     if (expr.has_label ())\n@@ -752,7 +754,7 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (goto_label);\n   }\n \n-  void visit (HIR::BorrowExpr &expr)\n+  void visit (HIR::BorrowExpr &expr) override\n   {\n     Bexpression *main_expr\n       = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n@@ -761,7 +763,7 @@ class CompileExpr : public HIRCompileBase\n       = ctx->get_backend ()->address_expression (main_expr, expr.get_locus ());\n   }\n \n-  void visit (HIR::DereferenceExpr &expr)\n+  void visit (HIR::DereferenceExpr &expr) override\n   {\n     Bexpression *main_expr\n       = CompileExpr::Compile (expr.get_expr ().get (), ctx);"}, {"sha": "13bb74dbab1d99035cf315df0fbd25e4e4649a30", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -26,6 +26,8 @@ namespace Compile {\n \n class CompileFnParam : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bvariable *compile (Context *ctx, Bfunction *fndecl,\n \t\t\t     HIR::FunctionParam *param, Btype *decl_type,\n@@ -36,7 +38,7 @@ class CompileFnParam : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  void visit (HIR::IdentifierPattern &pattern)\n+  void visit (HIR::IdentifierPattern &pattern) override\n   {\n     if (!pattern.is_mut)\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);"}, {"sha": "202b86899f5582cd5114a1ae758f9f9d8ee5db85", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -31,6 +31,8 @@ namespace Compile {\n \n class CompileInherentImplItem : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static void Compile (TyTy::BaseType *self, HIR::InherentImplItem *item,\n \t\t       Context *ctx, bool compile_fns)\n@@ -39,7 +41,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     item->accept_vis (compiler);\n   }\n \n-  void visit (HIR::ConstantItem &constant)\n+  void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *resolved_type = nullptr;\n     bool ok\n@@ -58,7 +60,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     ctx->insert_const_decl (constant.get_mappings ().get_hirid (), const_expr);\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     if (!compile_fns)\n       return;\n@@ -223,7 +225,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     ctx->push_function (fndecl);\n   }\n \n-  void visit (HIR::Method &method)\n+  void visit (HIR::Method &method) override\n   {\n     if (!compile_fns)\n       return;"}, {"sha": "1d4fcdaa36bfb5f06737fba0ee5988322e1f7250", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -32,14 +32,16 @@ namespace Compile {\n \n class CompileItem : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static void compile (HIR::Item *item, Context *ctx, bool compile_fns = true)\n   {\n     CompileItem compiler (ctx, compile_fns);\n     item->accept_vis (compiler);\n   }\n \n-  void visit (HIR::StaticItem &var)\n+  void visit (HIR::StaticItem &var) override\n   {\n     TyTy::BaseType *resolved_type = nullptr;\n     bool ok = ctx->get_tyctx ()->lookup_type (var.get_mappings ().get_hirid (),\n@@ -67,7 +69,7 @@ class CompileItem : public HIRCompileBase\n     ctx->push_var (static_global);\n   }\n \n-  void visit (HIR::ConstantItem &constant)\n+  void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *resolved_type = nullptr;\n     bool ok\n@@ -85,7 +87,7 @@ class CompileItem : public HIRCompileBase\n     ctx->insert_const_decl (constant.get_mappings ().get_hirid (), const_expr);\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     if (!compile_fns)\n       return;\n@@ -255,7 +257,7 @@ class CompileItem : public HIRCompileBase\n     ctx->push_function (fndecl);\n   }\n \n-  void visit (HIR::InherentImpl &impl_block)\n+  void visit (HIR::InherentImpl &impl_block) override\n   {\n     TyTy::BaseType *self_lookup = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type ("}, {"sha": "da1d97e97c896edcf8565332f1ca06a77211f50e", "filename": "gcc/rust/backend/rust-compile-resolve-path.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Compile {\n \n class ResolvePathRef : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bexpression *Compile (HIR::Expr *expr, Context *ctx)\n   {"}, {"sha": "3c2916da28ab87ea3a261f599754f9c9e69ac740", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -28,6 +28,8 @@ namespace Compile {\n \n class CompileStmt : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bexpression *Compile (HIR::Stmt *stmt, Context *ctx)\n   {\n@@ -37,19 +39,19 @@ class CompileStmt : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  void visit (HIR::ExprStmtWithBlock &stmt)\n+  void visit (HIR::ExprStmtWithBlock &stmt) override\n   {\n     ok = true;\n     translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n   }\n \n-  void visit (HIR::ExprStmtWithoutBlock &stmt)\n+  void visit (HIR::ExprStmtWithoutBlock &stmt) override\n   {\n     ok = true;\n     translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n   }\n \n-  void visit (HIR::LetStmt &stmt)\n+  void visit (HIR::LetStmt &stmt) override\n   {\n     // marks that the statement has been looked at\n     ok = true;"}, {"sha": "e3775247b964377d36988d2652ba32d0767d9763", "filename": "gcc/rust/backend/rust-compile-struct-field-expr.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Compile {\n \n class CompileStructExprField : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static Bexpression *Compile (HIR::StructExprField *field, Context *ctx)\n   {\n@@ -36,11 +38,11 @@ class CompileStructExprField : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  void visit (HIR::StructExprFieldIdentifierValue &field);\n+  void visit (HIR::StructExprFieldIdentifierValue &field) override;\n \n-  void visit (HIR::StructExprFieldIndexValue &field);\n+  void visit (HIR::StructExprFieldIndexValue &field) override;\n \n-  void visit (HIR::StructExprFieldIdentifier &field);\n+  void visit (HIR::StructExprFieldIdentifier &field) override;\n \n private:\n   CompileStructExprField (Context *ctx)"}, {"sha": "ee4e65bd573510f2bbd21ae0fcdd2c7a03acda26", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -26,6 +26,8 @@ namespace Compile {\n \n class CompileVarDecl : public HIRCompileBase\n {\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n public:\n   static ::Bvariable *compile (::Bfunction *fndecl, HIR::Stmt *stmt,\n \t\t\t       Context *ctx)\n@@ -38,7 +40,7 @@ class CompileVarDecl : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  void visit (HIR::LetStmt &stmt)\n+  void visit (HIR::LetStmt &stmt) override\n   {\n     locus = stmt.get_locus ();\n     TyTy::BaseType *resolved_type = nullptr;\n@@ -50,7 +52,7 @@ class CompileVarDecl : public HIRCompileBase\n     stmt.get_pattern ()->accept_vis (*this);\n   }\n \n-  void visit (HIR::IdentifierPattern &pattern)\n+  void visit (HIR::IdentifierPattern &pattern) override\n   {\n     if (!pattern.is_mut)\n       translated_type = ctx->get_backend ()->immutable_type (translated_type);"}, {"sha": "25c35835ae094a0058a5daeaffa77d30d1834297", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace HIR {\n \n class ASTLoweringBlock : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::BlockExpr *translate (AST::BlockExpr *expr, bool *terminated)\n   {\n@@ -46,7 +48,7 @@ class ASTLoweringBlock : public ASTLoweringBase\n \n   ~ASTLoweringBlock () {}\n \n-  void visit (AST::BlockExpr &expr);\n+  void visit (AST::BlockExpr &expr) override;\n \n private:\n   ASTLoweringBlock ()\n@@ -59,6 +61,8 @@ class ASTLoweringBlock : public ASTLoweringBase\n \n class ASTLoweringIfBlock : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::IfExpr *translate (AST::IfExpr *expr, bool *terminated)\n   {\n@@ -77,11 +81,11 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n \n   ~ASTLoweringIfBlock () {}\n \n-  void visit (AST::IfExpr &expr);\n+  void visit (AST::IfExpr &expr) override;\n \n-  void visit (AST::IfExprConseqElse &expr);\n+  void visit (AST::IfExprConseqElse &expr) override;\n \n-  void visit (AST::IfExprConseqIf &expr);\n+  void visit (AST::IfExprConseqIf &expr) override;\n \n private:\n   ASTLoweringIfBlock ()\n@@ -94,6 +98,8 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n \n class ASTLoweringExprWithBlock : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::ExprWithBlock *translate (AST::ExprWithBlock *expr,\n \t\t\t\t\tbool *terminated)\n@@ -114,27 +120,27 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \n   ~ASTLoweringExprWithBlock () {}\n \n-  void visit (AST::IfExpr &expr)\n+  void visit (AST::IfExpr &expr) override\n   {\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::IfExprConseqElse &expr)\n+  void visit (AST::IfExprConseqElse &expr) override\n   {\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::IfExprConseqIf &expr)\n+  void visit (AST::IfExprConseqIf &expr) override\n   {\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::BlockExpr &expr)\n+  void visit (AST::BlockExpr &expr) override\n   {\n     translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::LoopExpr &expr)\n+  void visit (AST::LoopExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n     HIR::BlockExpr *loop_block\n@@ -155,7 +161,7 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \t\t\t   std::move (outer_attribs));\n   }\n \n-  void visit (AST::WhileLoopExpr &expr);\n+  void visit (AST::WhileLoopExpr &expr) override;\n \n private:\n   ASTLoweringExprWithBlock ()"}, {"sha": "c55213d90ce1a38c14352bafaa4e5707112d4ee4", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -29,6 +29,8 @@ namespace HIR {\n \n class ArrayCapacityConstant : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static bool fold (AST::Expr *expr, size_t *folded_result)\n   {\n@@ -40,7 +42,7 @@ class ArrayCapacityConstant : public ASTLoweringBase\n \n   virtual ~ArrayCapacityConstant () {}\n \n-  void visit (AST::LiteralExpr &expr)\n+  void visit (AST::LiteralExpr &expr) override\n   {\n     switch (expr.get_lit_type ())\n       {\n@@ -65,6 +67,8 @@ class ArrayCapacityConstant : public ASTLoweringBase\n \n class ASTLowerPathInExpression : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::PathInExpression *translate (AST::PathInExpression *expr)\n   {\n@@ -84,6 +88,8 @@ class ASTLowerPathInExpression : public ASTLoweringBase\n \n class ASTLoweringExpr : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr)\n   {\n@@ -110,7 +116,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  void visit (AST::TupleIndexExpr &expr)\n+  void visit (AST::TupleIndexExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n \n@@ -129,7 +135,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t std::move (outer_attribs), expr.get_locus ());\n   }\n \n-  void visit (AST::TupleExpr &expr)\n+  void visit (AST::TupleExpr &expr) override\n   {\n     std::vector<HIR::Attribute> inner_attribs;\n     std::vector<HIR::Attribute> outer_attribs;\n@@ -151,32 +157,32 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t    std::move (outer_attribs), expr.get_locus ());\n   }\n \n-  void visit (AST::IfExpr &expr)\n+  void visit (AST::IfExpr &expr) override\n   {\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::IfExprConseqElse &expr)\n+  void visit (AST::IfExprConseqElse &expr) override\n   {\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::IfExprConseqIf &expr)\n+  void visit (AST::IfExprConseqIf &expr) override\n   {\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::BlockExpr &expr)\n+  void visit (AST::BlockExpr &expr) override\n   {\n     translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::PathInExpression &expr)\n+  void visit (AST::PathInExpression &expr) override\n   {\n     translated = ASTLowerPathInExpression::translate (&expr);\n   }\n \n-  void visit (AST::ReturnExpr &expr)\n+  void visit (AST::ReturnExpr &expr) override\n   {\n     terminated = true;\n     HIR::Expr *return_expr\n@@ -193,7 +199,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t      std::unique_ptr<HIR::Expr> (return_expr));\n   }\n \n-  void visit (AST::CallExpr &expr)\n+  void visit (AST::CallExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n     HIR::Expr *func\n@@ -216,7 +222,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t   expr.get_locus ());\n   }\n \n-  void visit (AST::MethodCallExpr &expr)\n+  void visit (AST::MethodCallExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n \n@@ -245,7 +251,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t std::move (outer_attribs), expr.get_locus ());\n   }\n \n-  void visit (AST::AssignmentExpr &expr)\n+  void visit (AST::AssignmentExpr &expr) override\n   {\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n@@ -261,7 +267,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t expr.get_locus ());\n   }\n \n-  void visit (AST::IdentifierExpr &expr)\n+  void visit (AST::IdentifierExpr &expr) override\n   {\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n@@ -271,7 +277,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::IdentifierExpr (mapping, expr.as_string (), expr.get_locus ());\n   }\n \n-  void visit (AST::ArrayExpr &expr)\n+  void visit (AST::ArrayExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n     std::vector<HIR::Attribute> inner_attribs;\n@@ -290,7 +296,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t    inner_attribs, outer_attribs, expr.get_locus ());\n   }\n \n-  void visit (AST::ArrayIndexExpr &expr)\n+  void visit (AST::ArrayIndexExpr &expr) override\n   {\n     std::vector<Attribute> outer_attribs;\n     HIR::Expr *array_expr\n@@ -310,7 +316,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t outer_attribs, expr.get_locus ());\n   }\n \n-  void visit (AST::ArrayElemsValues &elems)\n+  void visit (AST::ArrayElemsValues &elems) override\n   {\n     std::vector<std::unique_ptr<HIR::Expr> > elements;\n     elems.iterate ([&] (AST::Expr *elem) mutable -> bool {\n@@ -322,7 +328,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated_array_elems = new HIR::ArrayElemsValues (std::move (elements));\n   }\n \n-  void visit (AST::ArrayElemsCopied &elems)\n+  void visit (AST::ArrayElemsCopied &elems) override\n   {\n     HIR::Expr *element\n       = ASTLoweringExpr::translate (elems.get_elem_to_copy ().get ());\n@@ -343,7 +349,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   folded);\n   }\n \n-  void visit (AST::LiteralExpr &expr)\n+  void visit (AST::LiteralExpr &expr) override\n   {\n     HIR::Literal::LitType type = HIR::Literal::LitType::CHAR;\n     switch (expr.get_lit_type ())\n@@ -386,7 +392,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t       expr.get_locus ());\n   }\n \n-  void visit (AST::ArithmeticOrLogicalExpr &expr)\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override\n   {\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     rust_assert (lhs != nullptr);\n@@ -406,7 +412,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t\t  expr.get_locus ());\n   }\n \n-  void visit (AST::ComparisonExpr &expr)\n+  void visit (AST::ComparisonExpr &expr) override\n   {\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     rust_assert (lhs != nullptr);\n@@ -424,7 +430,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t expr.get_expr_type (), expr.get_locus ());\n   }\n \n-  void visit (AST::LazyBooleanExpr &expr)\n+  void visit (AST::LazyBooleanExpr &expr) override\n   {\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     rust_assert (lhs != nullptr);\n@@ -442,7 +448,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t  expr.get_expr_type (), expr.get_locus ());\n   }\n \n-  void visit (AST::NegationExpr &expr)\n+  void visit (AST::NegationExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n \n@@ -461,7 +467,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n   }\n \n   /* Compound assignment expression is compiled away. */\n-  void visit (AST::CompoundAssignmentExpr &expr)\n+  void visit (AST::CompoundAssignmentExpr &expr) override\n   {\n     /* First we need to find the corresponding arithmetic or logical operator.\n      */\n@@ -520,7 +526,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t expr.get_locus ());\n   }\n \n-  void visit (AST::StructExprStructFields &struct_expr)\n+  void visit (AST::StructExprStructFields &struct_expr) override\n   {\n     std::vector<HIR::Attribute> inner_attribs;\n     std::vector<HIR::Attribute> outer_attribs;\n@@ -560,7 +566,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t\t inner_attribs, outer_attribs);\n   }\n \n-  void visit (AST::GroupedExpr &expr)\n+  void visit (AST::GroupedExpr &expr) override\n   {\n     std::vector<HIR::Attribute> inner_attribs;\n     std::vector<HIR::Attribute> outer_attribs;\n@@ -579,7 +585,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t      std::move (outer_attribs), expr.get_locus ());\n   }\n \n-  void visit (AST::FieldAccessExpr &expr)\n+  void visit (AST::FieldAccessExpr &expr) override\n   {\n     std::vector<HIR::Attribute> inner_attribs;\n     std::vector<HIR::Attribute> outer_attribs;\n@@ -598,17 +604,17 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t  std::move (outer_attribs), expr.get_locus ());\n   }\n \n-  void visit (AST::LoopExpr &expr)\n+  void visit (AST::LoopExpr &expr) override\n   {\n     translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::WhileLoopExpr &expr)\n+  void visit (AST::WhileLoopExpr &expr) override\n   {\n     translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::BreakExpr &expr)\n+  void visit (AST::BreakExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n     HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n@@ -628,7 +634,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t     std::move (outer_attribs));\n   }\n \n-  void visit (AST::ContinueExpr &expr)\n+  void visit (AST::ContinueExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n     HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n@@ -643,7 +649,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t\tstd::move (outer_attribs));\n   }\n \n-  void visit (AST::BorrowExpr &expr)\n+  void visit (AST::BorrowExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n \n@@ -662,7 +668,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t     std::move (outer_attribs), expr.get_locus ());\n   }\n \n-  void visit (AST::DereferenceExpr &expr)\n+  void visit (AST::DereferenceExpr &expr) override\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n "}, {"sha": "473d14f5d963ec5c94815f208e2e9944bd9acb92", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -31,6 +31,8 @@ namespace HIR {\n \n class ASTLowerImplItem : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::InherentImplItem *translate (AST::InherentImplItem *item)\n   {\n@@ -55,7 +57,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   self.get_is_mut (), self.get_locus ());\n   }\n \n-  void visit (AST::ConstantItem &constant)\n+  void visit (AST::ConstantItem &constant) override\n   {\n     std::vector<HIR::Attribute> outer_attrs;\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n@@ -79,7 +81,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t       constant.get_locus ());\n   }\n \n-  void visit (AST::Function &function)\n+  void visit (AST::Function &function) override\n   {\n     // ignore for now and leave empty\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n@@ -158,7 +160,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     translated = fn;\n   }\n \n-  void visit (AST::Method &method)\n+  void visit (AST::Method &method) override\n   {\n     // ignore for now and leave empty\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;"}, {"sha": "50e50f65c4ec304b63b291e1cada66da519aec42", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -34,6 +34,8 @@ namespace HIR {\n \n class ASTLoweringItem : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::Item *translate (AST::Item *item)\n   {\n@@ -51,7 +53,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  void visit (AST::TupleStruct &struct_decl)\n+  void visit (AST::TupleStruct &struct_decl) override\n   {\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (struct_decl.has_generics ())\n@@ -107,7 +109,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       struct_decl.get_locus ());\n   }\n \n-  void visit (AST::StructStruct &struct_decl)\n+  void visit (AST::StructStruct &struct_decl) override\n   {\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (struct_decl.has_generics ())\n@@ -164,7 +166,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       struct_decl.get_locus ());\n   }\n \n-  void visit (AST::StaticItem &var)\n+  void visit (AST::StaticItem &var) override\n   {\n     std::vector<HIR::Attribute> outer_attrs;\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n@@ -190,7 +192,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       var.get_locus ());\n   }\n \n-  void visit (AST::ConstantItem &constant)\n+  void visit (AST::ConstantItem &constant) override\n   {\n     std::vector<HIR::Attribute> outer_attrs;\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n@@ -215,7 +217,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       constant.get_locus ());\n   }\n \n-  void visit (AST::Function &function)\n+  void visit (AST::Function &function) override\n   {\n     // ignore for now and leave empty\n     std::vector<HIR::Attribute> outer_attrs;\n@@ -300,7 +302,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     translated = fn;\n   }\n \n-  void visit (AST::InherentImpl &impl_block)\n+  void visit (AST::InherentImpl &impl_block) override\n   {\n     std::vector<HIR::Attribute> inner_attrs;\n     std::vector<HIR::Attribute> outer_attrs;"}, {"sha": "340fba86b096d7af2e144f9d2ad0b34ca44398e4", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace HIR {\n \n class ASTLoweringPattern : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::Pattern *translate (AST::Pattern *pattern)\n   {\n@@ -35,7 +37,7 @@ class ASTLoweringPattern : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  virtual ~ASTLoweringPattern () {}\n+  virtual ~ASTLoweringPattern () override {}\n \n   void visit (AST::IdentifierPattern &pattern)\n   {"}, {"sha": "e15714c7218d9e5e94a55a8afa49f5f6af6e5d69", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -32,6 +32,8 @@ namespace HIR {\n \n class ASTLoweringStmt : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::Stmt *translate (AST::Stmt *stmt, bool *terminated)\n   {\n@@ -44,7 +46,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   virtual ~ASTLoweringStmt () {}\n \n-  void visit (AST::ExprStmtWithBlock &stmt)\n+  void visit (AST::ExprStmtWithBlock &stmt) override\n   {\n     HIR::ExprWithBlock *expr\n       = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get (),\n@@ -63,7 +65,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n-  void visit (AST::ExprStmtWithoutBlock &stmt)\n+  void visit (AST::ExprStmtWithoutBlock &stmt) override\n   {\n     HIR::Expr *expr\n       = ASTLoweringExpr::translate (stmt.get_expr ().get (), &terminated);\n@@ -81,7 +83,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n-  void visit (AST::LetStmt &stmt)\n+  void visit (AST::LetStmt &stmt) override\n   {\n     std::vector<HIR::Attribute> outer_attrs;\n     HIR::Pattern *variables"}, {"sha": "3b313a7847650973375b7c7f941afa675e04327d", "filename": "gcc/rust/hir/rust-ast-lower-struct-field-expr.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace HIR {\n \n class ASTLowerStructExprField : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::StructExprField *translate (AST::StructExprField *field)\n   {\n@@ -47,11 +49,11 @@ class ASTLowerStructExprField : public ASTLoweringBase\n \n   ~ASTLowerStructExprField () {}\n \n-  void visit (AST::StructExprFieldIdentifierValue &field);\n+  void visit (AST::StructExprFieldIdentifierValue &field) override;\n \n-  void visit (AST::StructExprFieldIndexValue &field);\n+  void visit (AST::StructExprFieldIndexValue &field) override;\n \n-  void visit (AST::StructExprFieldIdentifier &field);\n+  void visit (AST::StructExprFieldIdentifier &field) override;\n \n private:\n   ASTLowerStructExprField () : translated (nullptr) {}"}, {"sha": "cd9b032f10ad9c88ee6d87bafc3889ba057e241d", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -28,6 +28,8 @@ namespace HIR {\n \n class ASTLoweringType : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::Type *translate (AST::Type *type)\n   {\n@@ -43,7 +45,7 @@ class ASTLoweringType : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  void visit (AST::BareFunctionType &fntype)\n+  void visit (AST::BareFunctionType &fntype) override\n   {\n     bool is_variadic = false;\n     std::vector<HIR::LifetimeParam> lifetime_params;\n@@ -94,7 +96,7 @@ class ASTLoweringType : public ASTLoweringBase\n       std::unique_ptr<HIR::Type> (return_type), fntype.get_locus ());\n   }\n \n-  void visit (AST::TupleType &tuple)\n+  void visit (AST::TupleType &tuple) override\n   {\n     std::vector<std::unique_ptr<HIR::Type> > elems;\n     for (auto &e : tuple.get_elems ())\n@@ -112,7 +114,7 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t     tuple.get_locus ());\n   }\n \n-  void visit (AST::TypePathSegment &segment)\n+  void visit (AST::TypePathSegment &segment) override\n   {\n     HIR::PathIdentSegment ident (segment.get_ident_segment ().as_string ());\n     translated_segment\n@@ -121,7 +123,7 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t  segment.get_locus ());\n   }\n \n-  void visit (AST::TypePathSegmentGeneric &segment)\n+  void visit (AST::TypePathSegmentGeneric &segment) override\n   {\n     std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n \n@@ -148,7 +150,7 @@ class ASTLoweringType : public ASTLoweringBase\n       std::move (type_args), std::move (binding_args), segment.get_locus ());\n   }\n \n-  void visit (AST::TypePath &path)\n+  void visit (AST::TypePath &path) override\n   {\n     std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n \n@@ -179,7 +181,7 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n-  void visit (AST::ArrayType &type)\n+  void visit (AST::ArrayType &type) override\n   {\n     HIR::Type *translated_type\n       = ASTLoweringType::translate (type.get_elem_type ().get ());\n@@ -200,7 +202,7 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n-  void visit (AST::ReferenceType &type)\n+  void visit (AST::ReferenceType &type) override\n   {\n     HIR::Lifetime lifetime = lower_lifetime (type.get_lifetime ());\n \n@@ -220,7 +222,7 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n-  void visit (AST::InferredType &type)\n+  void visit (AST::InferredType &type) override\n   {\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n@@ -244,6 +246,8 @@ class ASTLoweringType : public ASTLoweringBase\n \n class ASTLowerGenericParam : public ASTLoweringBase\n {\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n public:\n   static HIR::GenericParam *translate (AST::GenericParam *param)\n   {"}, {"sha": "48cc18e3c5fbd4289be46a40023073f135ed12f6", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -29,6 +29,8 @@ namespace Resolver {\n \n class ResolvePath : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::PathInExpression *expr, NodeId parent)\n   {\n@@ -44,19 +46,21 @@ class ResolvePath : public ResolverBase\n \n class ResolveExpr : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::Expr *expr, NodeId parent)\n   {\n     ResolveExpr resolver (parent);\n     expr->accept_vis (resolver);\n   };\n \n-  void visit (AST::TupleIndexExpr &expr)\n+  void visit (AST::TupleIndexExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_tuple_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::TupleExpr &expr)\n+  void visit (AST::TupleExpr &expr) override\n   {\n     if (expr.is_unit ())\n       return;\n@@ -65,15 +69,18 @@ class ResolveExpr : public ResolverBase\n       ResolveExpr::go (elem.get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::PathInExpression &expr) { ResolvePath::go (&expr, parent); }\n+  void visit (AST::PathInExpression &expr) override\n+  {\n+    ResolvePath::go (&expr, parent);\n+  }\n \n-  void visit (AST::ReturnExpr &expr)\n+  void visit (AST::ReturnExpr &expr) override\n   {\n     if (expr.has_returned_expr ())\n       ResolveExpr::go (expr.get_returned_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::CallExpr &expr)\n+  void visit (AST::CallExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_function_expr ().get (), expr.get_node_id ());\n     expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n@@ -82,7 +89,7 @@ class ResolveExpr : public ResolverBase\n     });\n   }\n \n-  void visit (AST::MethodCallExpr &expr)\n+  void visit (AST::MethodCallExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_receiver_expr ().get (), expr.get_node_id ());\n     expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n@@ -91,7 +98,7 @@ class ResolveExpr : public ResolverBase\n     });\n   }\n \n-  void visit (AST::AssignmentExpr &expr)\n+  void visit (AST::AssignmentExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n@@ -100,7 +107,7 @@ class ResolveExpr : public ResolverBase\n     VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::IdentifierExpr &expr)\n+  void visit (AST::IdentifierExpr &expr) override\n   {\n     if (resolver->get_name_scope ().lookup (expr.as_string (), &resolved_node))\n       {\n@@ -124,13 +131,13 @@ class ResolveExpr : public ResolverBase\n       }\n   }\n \n-  void visit (AST::ArithmeticOrLogicalExpr &expr)\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::CompoundAssignmentExpr &expr)\n+  void visit (AST::CompoundAssignmentExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n@@ -139,71 +146,71 @@ class ResolveExpr : public ResolverBase\n     VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::ComparisonExpr &expr)\n+  void visit (AST::ComparisonExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::LazyBooleanExpr &expr)\n+  void visit (AST::LazyBooleanExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::NegationExpr &expr)\n+  void visit (AST::NegationExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_negated_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::IfExpr &expr)\n+  void visit (AST::IfExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_if_block ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::IfExprConseqElse &expr)\n+  void visit (AST::IfExprConseqElse &expr) override\n   {\n     ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_if_block ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_else_block ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::IfExprConseqIf &expr)\n+  void visit (AST::IfExprConseqIf &expr) override\n   {\n     ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_if_block ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_conseq_if_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::BlockExpr &expr);\n+  void visit (AST::BlockExpr &expr) override;\n \n-  void visit (AST::ArrayElemsValues &elems)\n+  void visit (AST::ArrayElemsValues &elems) override\n   {\n     elems.iterate ([&] (AST::Expr *elem) mutable -> bool {\n       ResolveExpr::go (elem, elems.get_node_id ());\n       return true;\n     });\n   }\n \n-  void visit (AST::ArrayExpr &expr)\n+  void visit (AST::ArrayExpr &expr) override\n   {\n     expr.get_array_elems ()->accept_vis (*this);\n   }\n \n-  void visit (AST::ArrayIndexExpr &expr)\n+  void visit (AST::ArrayIndexExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_array_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_index_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::ArrayElemsCopied &elems)\n+  void visit (AST::ArrayElemsCopied &elems) override\n   {\n     ResolveExpr::go (elems.get_num_copies ().get (), elems.get_node_id ());\n     ResolveExpr::go (elems.get_elem_to_copy ().get (), elems.get_node_id ());\n   }\n \n-  void visit (AST::StructExprStructFields &struct_expr)\n+  void visit (AST::StructExprStructFields &struct_expr) override\n   {\n     ResolveExpr::go (&struct_expr.get_struct_name (),\n \t\t     struct_expr.get_node_id ());\n@@ -222,17 +229,17 @@ class ResolveExpr : public ResolverBase\n       });\n   }\n \n-  void visit (AST::GroupedExpr &expr)\n+  void visit (AST::GroupedExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_expr_in_parens ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::FieldAccessExpr &expr)\n+  void visit (AST::FieldAccessExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_receiver_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::LoopExpr &expr)\n+  void visit (AST::LoopExpr &expr) override\n   {\n     if (expr.has_loop_label ())\n       {\n@@ -261,7 +268,7 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_loop_block ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::BreakExpr &expr)\n+  void visit (AST::BreakExpr &expr) override\n   {\n     if (expr.has_label ())\n       {\n@@ -288,7 +295,7 @@ class ResolveExpr : public ResolverBase\n       ResolveExpr::go (expr.get_break_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::WhileLoopExpr &expr)\n+  void visit (AST::WhileLoopExpr &expr) override\n   {\n     if (expr.has_loop_label ())\n       {\n@@ -318,7 +325,7 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_loop_block ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::ContinueExpr &expr)\n+  void visit (AST::ContinueExpr &expr) override\n   {\n     if (expr.has_label ())\n       {\n@@ -342,12 +349,12 @@ class ResolveExpr : public ResolverBase\n       }\n   }\n \n-  void visit (AST::BorrowExpr &expr)\n+  void visit (AST::BorrowExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_borrowed_expr ().get (), expr.get_node_id ());\n   }\n \n-  void visit (AST::DereferenceExpr &expr)\n+  void visit (AST::DereferenceExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_dereferenced_expr ().get (), expr.get_node_id ());\n   }"}, {"sha": "d76cbac5bf9b4d8a8265848d367971cce41a2730", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -28,14 +28,16 @@ namespace Resolver {\n \n class ResolveToplevelImplItem : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::InherentImplItem *item, AST::Type *base)\n   {\n     ResolveToplevelImplItem resolver (base);\n     item->accept_vis (resolver);\n   };\n \n-  void visit (AST::ConstantItem &constant)\n+  void visit (AST::ConstantItem &constant) override\n   {\n     std::string identifier\n       = base->as_string () + \"::\" + constant.get_identifier ();\n@@ -50,7 +52,7 @@ class ResolveToplevelImplItem : public ResolverBase\n \t\t\t\t\t\tconstant.get_node_id ()});\n   }\n \n-  void visit (AST::Function &function)\n+  void visit (AST::Function &function) override\n   {\n     std::string identifier\n       = base->as_string () + \"::\" + function.get_function_name ();\n@@ -65,7 +67,7 @@ class ResolveToplevelImplItem : public ResolverBase\n \t\t\t\t\t\tfunction.get_node_id ()});\n   }\n \n-  void visit (AST::Method &method)\n+  void visit (AST::Method &method) override\n   {\n     std::string identifier\n       = base->as_string () + \"::\" + method.get_method_name ();"}, {"sha": "95e335b5bc8133ddbbcaa72329e2a96f6e598f9e", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -30,14 +30,16 @@ namespace Resolver {\n \n class ResolveItem : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::Item *item)\n   {\n     ResolveItem resolver;\n     item->accept_vis (resolver);\n   };\n \n-  void visit (AST::TupleStruct &struct_decl)\n+  void visit (AST::TupleStruct &struct_decl) override\n   {\n     NodeId scope_node_id = struct_decl.get_node_id ();\n     resolver->get_type_scope ().push (scope_node_id);\n@@ -60,7 +62,7 @@ class ResolveItem : public ResolverBase\n     resolver->get_type_scope ().pop ();\n   }\n \n-  void visit (AST::StructStruct &struct_decl)\n+  void visit (AST::StructStruct &struct_decl) override\n   {\n     NodeId scope_node_id = struct_decl.get_node_id ();\n     resolver->get_type_scope ().push (scope_node_id);\n@@ -83,7 +85,7 @@ class ResolveItem : public ResolverBase\n     resolver->get_type_scope ().pop ();\n   }\n \n-  void visit (AST::StaticItem &var)\n+  void visit (AST::StaticItem &var) override\n   {\n     ResolveType::go (var.get_type ().get (), var.get_node_id ());\n     ResolveExpr::go (var.get_expr ().get (), var.get_node_id ());\n@@ -93,7 +95,7 @@ class ResolveItem : public ResolverBase\n     resolver->mark_assignment_to_decl (var.get_node_id (), var.get_node_id ());\n   }\n \n-  void visit (AST::ConstantItem &constant)\n+  void visit (AST::ConstantItem &constant) override\n   {\n     ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n     ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n@@ -105,7 +107,7 @@ class ResolveItem : public ResolverBase\n \t\t\t\t       constant.get_node_id ());\n   }\n \n-  void visit (AST::Function &function)\n+  void visit (AST::Function &function) override\n   {\n     NodeId scope_node_id = function.get_node_id ();\n     resolver->get_name_scope ().push (scope_node_id);\n@@ -148,7 +150,7 @@ class ResolveItem : public ResolverBase\n     resolver->get_label_scope ().pop ();\n   }\n \n-  void visit (AST::InherentImpl &impl_block)\n+  void visit (AST::InherentImpl &impl_block) override\n   {\n     NodeId resolved_node = ResolveType::go (impl_block.get_type ().get (),\n \t\t\t\t\t    impl_block.get_node_id ());\n@@ -164,7 +166,7 @@ class ResolveItem : public ResolverBase\n     resolver->get_type_scope ().peek ()->clear_name (\"Self\", resolved_node);\n   }\n \n-  void visit (AST::Method &method)\n+  void visit (AST::Method &method) override\n   {\n     if (method.has_return_type ())\n       ResolveType::go (method.get_return_type ().get (), method.get_node_id ());"}, {"sha": "147bf72a58b86255ca0054926bfba1c1d40d33bb", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Resolver {\n \n class ResolvePattern : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::Pattern *pattern, NodeId parent)\n   {\n@@ -42,7 +44,7 @@ class ResolvePattern : public ResolverBase\n \n   ~ResolvePattern () {}\n \n-  void visit (AST::IdentifierPattern &pattern)\n+  void visit (AST::IdentifierPattern &pattern) override\n   {\n     if (resolver->get_name_scope ().lookup (pattern.get_ident (),\n \t\t\t\t\t    &resolved_node))\n@@ -60,6 +62,8 @@ class ResolvePattern : public ResolverBase\n \n class PatternDeclaration : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::Pattern *pattern, NodeId parent)\n   {\n@@ -76,7 +80,7 @@ class PatternDeclaration : public ResolverBase\n \n   ~PatternDeclaration () {}\n \n-  void visit (AST::IdentifierPattern &pattern)\n+  void visit (AST::IdentifierPattern &pattern) override\n   {\n     // if we have a duplicate id this then allows for shadowing correctly\n     // as new refs to this decl will match back here so it is ok to overwrite"}, {"sha": "7ff80e4f5b8daa6cc8b5e41b20caca0d95faa55c", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -30,6 +30,8 @@ namespace Resolver {\n \n class ResolveStmt : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::Stmt *stmt, NodeId parent)\n   {\n@@ -39,17 +41,17 @@ class ResolveStmt : public ResolverBase\n \n   ~ResolveStmt () {}\n \n-  void visit (AST::ExprStmtWithBlock &stmt)\n+  void visit (AST::ExprStmtWithBlock &stmt) override\n   {\n     ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());\n   }\n \n-  void visit (AST::ExprStmtWithoutBlock &stmt)\n+  void visit (AST::ExprStmtWithoutBlock &stmt) override\n   {\n     ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());\n   }\n \n-  void visit (AST::LetStmt &stmt)\n+  void visit (AST::LetStmt &stmt) override\n   {\n     if (stmt.has_init_expr ())\n       {"}, {"sha": "e979137e6f035538dbe93dd2ac9f2727e84ae622", "filename": "gcc/rust/resolve/rust-ast-resolve-struct-expr-field.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -29,20 +29,22 @@ namespace Resolver {\n \n class ResolveStructExprField : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::StructExprField *field, NodeId parent)\n   {\n     ResolveStructExprField resolver (parent);\n     field->accept_vis (resolver);\n   }\n \n-  virtual ~ResolveStructExprField () {}\n+  virtual ~ResolveStructExprField () override {}\n \n-  void visit (AST::StructExprFieldIdentifierValue &field);\n+  void visit (AST::StructExprFieldIdentifierValue &field) override;\n \n-  void visit (AST::StructExprFieldIndexValue &field);\n+  void visit (AST::StructExprFieldIndexValue &field) override;\n \n-  void visit (AST::StructExprFieldIdentifier &field);\n+  void visit (AST::StructExprFieldIdentifier &field) override;\n \n private:\n   ResolveStructExprField (NodeId parent) : ResolverBase (parent) {}"}, {"sha": "8baab136575eda611b782d1a33a08c83711e14b1", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -29,14 +29,16 @@ namespace Resolver {\n \n class ResolveTopLevel : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static void go (AST::Item *item)\n   {\n     ResolveTopLevel resolver;\n     item->accept_vis (resolver);\n   };\n \n-  void visit (AST::TupleStruct &struct_decl)\n+  void visit (AST::TupleStruct &struct_decl) override\n   {\n     resolver->get_type_scope ().insert (\n       struct_decl.get_identifier (), struct_decl.get_node_id (),\n@@ -47,7 +49,7 @@ class ResolveTopLevel : public ResolverBase\n       });\n   }\n \n-  void visit (AST::StructStruct &struct_decl)\n+  void visit (AST::StructStruct &struct_decl) override\n   {\n     resolver->get_type_scope ().insert (\n       struct_decl.get_identifier (), struct_decl.get_node_id (),\n@@ -58,7 +60,7 @@ class ResolveTopLevel : public ResolverBase\n       });\n   }\n \n-  void visit (AST::StaticItem &var)\n+  void visit (AST::StaticItem &var) override\n   {\n     resolver->get_name_scope ().insert (\n       var.get_identifier (), var.get_node_id (), var.get_locus (), false,\n@@ -72,7 +74,7 @@ class ResolveTopLevel : public ResolverBase\n     resolver->mark_decl_mutability (var.get_node_id (), var.is_mutable ());\n   }\n \n-  void visit (AST::ConstantItem &constant)\n+  void visit (AST::ConstantItem &constant) override\n   {\n     resolver->get_name_scope ().insert (\n       constant.get_identifier (), constant.get_node_id (),\n@@ -86,7 +88,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\t\tconstant.get_node_id ()});\n   }\n \n-  void visit (AST::Function &function)\n+  void visit (AST::Function &function) override\n   {\n     resolver->get_name_scope ().insert (\n       function.get_function_name (), function.get_node_id (),\n@@ -108,7 +110,7 @@ class ResolveTopLevel : public ResolverBase\n       }\n   }\n \n-  void visit (AST::InherentImpl &impl_block)\n+  void visit (AST::InherentImpl &impl_block) override\n   {\n     for (auto &impl_item : impl_block.get_impl_items ())\n       ResolveToplevelImplItem::go (impl_item.get (),"}, {"sha": "c829ed07913451caebe21df8a3fe4db5a63864af", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Resolver {\n \n class ResolveTypePath : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static NodeId go (AST::TypePath &path, NodeId parent)\n   {\n@@ -74,6 +76,8 @@ class ResolveTypePath : public ResolverBase\n \n class ResolveType : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static NodeId go (AST::Type *type, NodeId parent)\n   {\n@@ -85,7 +89,7 @@ class ResolveType : public ResolverBase\n     return resolver.resolved_node;\n   };\n \n-  void visit (AST::BareFunctionType &fntype)\n+  void visit (AST::BareFunctionType &fntype) override\n   {\n     ok = true;\n     for (auto &param : fntype.get_function_params ())\n@@ -95,7 +99,7 @@ class ResolveType : public ResolverBase\n       ResolveType::go (fntype.get_return_type ().get (), fntype.get_node_id ());\n   }\n \n-  void visit (AST::TupleType &tuple)\n+  void visit (AST::TupleType &tuple) override\n   {\n     ok = true;\n     if (tuple.is_unit_type ())\n@@ -108,7 +112,7 @@ class ResolveType : public ResolverBase\n       ResolveType::go (elem.get (), tuple.get_node_id ());\n   }\n \n-  void visit (AST::TypePath &path)\n+  void visit (AST::TypePath &path) override\n   {\n     resolved_node = ResolveTypePath::go (path, parent);\n     ok = resolved_node != UNKNOWN_NODEID;\n@@ -121,18 +125,18 @@ class ResolveType : public ResolverBase\n       }\n   }\n \n-  void visit (AST::ArrayType &type)\n+  void visit (AST::ArrayType &type) override\n   {\n     type.get_elem_type ()->accept_vis (*this);\n   }\n \n-  void visit (AST::ReferenceType &type)\n+  void visit (AST::ReferenceType &type) override\n   {\n     type.get_type_referenced ()->accept_vis (*this);\n   }\n \n   // nothing to do for inferred types\n-  void visit (AST::InferredType &type) { ok = true; }\n+  void visit (AST::InferredType &type) override { ok = true; }\n \n private:\n   ResolveType (NodeId parent) : ResolverBase (parent), ok (false) {}\n@@ -142,6 +146,8 @@ class ResolveType : public ResolverBase\n \n class ResolveGenericParam : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static NodeId go (AST::GenericParam *param, NodeId parent)\n   {"}, {"sha": "b607fbe26570bc962ba79512f74630e72da71bf6", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Resolver {\n \n class VerifyAsignee : public ResolverBase\n {\n+  using Rust::Resolver::ResolverBase::visit;\n+\n public:\n   static bool go (AST::Expr *assignee, NodeId parent)\n   {\n@@ -38,22 +40,22 @@ class VerifyAsignee : public ResolverBase\n     return checker.ok;\n   }\n \n-  void visit (AST::ArrayIndexExpr &expr)\n+  void visit (AST::ArrayIndexExpr &expr) override\n   {\n     expr.get_array_expr ()->accept_vis (*this);\n   }\n \n-  void visit (AST::FieldAccessExpr &expr)\n+  void visit (AST::FieldAccessExpr &expr) override\n   {\n     expr.get_receiver_expr ()->accept_vis (*this);\n   }\n \n-  void visit (AST::TupleIndexExpr &expr)\n+  void visit (AST::TupleIndexExpr &expr) override\n   {\n     expr.get_tuple_expr ()->accept_vis (*this);\n   }\n \n-  void visit (AST::IdentifierExpr &expr)\n+  void visit (AST::IdentifierExpr &expr) override\n   {\n     if (!resolver->get_name_scope ().lookup (expr.as_string (), &resolved_node))\n       return;"}, {"sha": "7c472c7a6f2a2ec93833e7f6e9bc57ff416666cb", "filename": "gcc/rust/typecheck/rust-hir-method-resolve.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -28,6 +28,8 @@ namespace Resolver {\n \n class MethodResolution : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static std::vector<HIR::Method *> Probe (TyTy::BaseType *receiver,\n \t\t\t\t\t   HIR::PathExprSegment method_name)\n@@ -45,7 +47,7 @@ class MethodResolution : public TypeCheckBase\n     return probe.probed;\n   }\n \n-  void visit (HIR::Method &method)\n+  void visit (HIR::Method &method) override\n   {\n     TyTy::BaseType *self_lookup = nullptr;\n     if (!context->lookup_type ("}, {"sha": "6a4ed83c3150a468ed89ab3db903cb99d8e01f79", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -31,6 +31,8 @@ namespace Resolver {\n \n class TypeCheckExpr : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static TyTy::BaseType *Resolve (HIR::Expr *expr, bool inside_loop)\n   {\n@@ -51,7 +53,7 @@ class TypeCheckExpr : public TypeCheckBase\n     return resolver.infered;\n   }\n \n-  void visit (HIR::TupleIndexExpr &expr)\n+  void visit (HIR::TupleIndexExpr &expr) override\n   {\n     auto resolved\n       = TypeCheckExpr::Resolve (expr.get_tuple_expr ().get (), inside_loop);\n@@ -114,7 +116,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = field_tyty->get_field_type ();\n   }\n \n-  void visit (HIR::TupleExpr &expr)\n+  void visit (HIR::TupleExpr &expr) override\n   {\n     if (expr.is_unit ())\n       {\n@@ -136,7 +138,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = new TyTy::TupleType (expr.get_mappings ().get_hirid (), fields);\n   }\n \n-  void visit (HIR::ReturnExpr &expr)\n+  void visit (HIR::ReturnExpr &expr) override\n   {\n     if (!expr.has_return_expr ())\n       {\n@@ -161,7 +163,7 @@ class TypeCheckExpr : public TypeCheckBase\n       fn_return_tyty->append_reference (ref);\n   }\n \n-  void visit (HIR::CallExpr &expr)\n+  void visit (HIR::CallExpr &expr) override\n   {\n     TyTy::BaseType *function_tyty\n       = TypeCheckExpr::Resolve (expr.get_fnexpr (), false);\n@@ -188,7 +190,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered->set_ref (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::MethodCallExpr &expr)\n+  void visit (HIR::MethodCallExpr &expr) override\n   {\n     auto receiver_tyty\n       = TypeCheckExpr::Resolve (expr.get_receiver ().get (), false);\n@@ -248,7 +250,7 @@ class TypeCheckExpr : public TypeCheckBase\n       resolved_method->get_mappings ().get_nodeid ());\n   }\n \n-  void visit (HIR::AssignmentExpr &expr)\n+  void visit (HIR::AssignmentExpr &expr) override\n   {\n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n \n@@ -301,7 +303,7 @@ class TypeCheckExpr : public TypeCheckBase\n       result->clone ());\n   }\n \n-  void visit (HIR::IdentifierExpr &expr)\n+  void visit (HIR::IdentifierExpr &expr) override\n   {\n     NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n \n@@ -359,7 +361,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered->set_ref (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::LiteralExpr &expr)\n+  void visit (HIR::LiteralExpr &expr) override\n   {\n     switch (expr.get_lit_type ())\n       {\n@@ -473,7 +475,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = infered->clone ();\n   }\n \n-  void visit (HIR::ArithmeticOrLogicalExpr &expr)\n+  void visit (HIR::ArithmeticOrLogicalExpr &expr) override\n   {\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n@@ -494,7 +496,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered->append_reference (rhs->get_ref ());\n   }\n \n-  void visit (HIR::ComparisonExpr &expr)\n+  void visit (HIR::ComparisonExpr &expr) override\n   {\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n@@ -509,7 +511,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered->append_reference (rhs->get_ref ());\n   }\n \n-  void visit (HIR::LazyBooleanExpr &expr)\n+  void visit (HIR::LazyBooleanExpr &expr) override\n   {\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n@@ -530,7 +532,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered->append_reference (rhs->get_ref ());\n   }\n \n-  void visit (HIR::NegationExpr &expr)\n+  void visit (HIR::NegationExpr &expr) override\n   {\n     auto negated_expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n \n@@ -579,15 +581,15 @@ class TypeCheckExpr : public TypeCheckBase\n     infered->append_reference (negated_expr_ty->get_ref ());\n   }\n \n-  void visit (HIR::IfExpr &expr)\n+  void visit (HIR::IfExpr &expr) override\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n     TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n \n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::IfExprConseqElse &expr)\n+  void visit (HIR::IfExprConseqElse &expr) override\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n     auto if_blk_resolved\n@@ -598,7 +600,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n-  void visit (HIR::IfExprConseqIf &expr)\n+  void visit (HIR::IfExprConseqIf &expr) override\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n     auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n@@ -608,9 +610,9 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = if_blk->unify (else_blk);\n   }\n \n-  void visit (HIR::BlockExpr &expr);\n+  void visit (HIR::BlockExpr &expr) override;\n \n-  void visit (HIR::ArrayIndexExpr &expr)\n+  void visit (HIR::ArrayIndexExpr &expr) override\n   {\n     TyTy::BaseType *size_ty;\n     if (!context->lookup_builtin (\"usize\", &size_ty))\n@@ -653,7 +655,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = array_type->get_element_type ()->clone ();\n   }\n \n-  void visit (HIR::ArrayExpr &expr)\n+  void visit (HIR::ArrayExpr &expr) override\n   {\n     HIR::ArrayElems *elements = expr.get_internal_elements ();\n     size_t num_elems = elements->get_num_elements ();\n@@ -666,7 +668,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t\t     TyTy::TyCtx (infered_array_elems->get_ref ()));\n   }\n \n-  void visit (HIR::ArrayElemsValues &elems)\n+  void visit (HIR::ArrayElemsValues &elems) override\n   {\n     std::vector<TyTy::BaseType *> types;\n     elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n@@ -684,23 +686,23 @@ class TypeCheckExpr : public TypeCheckBase\n       infered_array_elems->append_reference (elem->get_ref ());\n   }\n \n-  void visit (HIR::ArrayElemsCopied &elems)\n+  void visit (HIR::ArrayElemsCopied &elems) override\n   {\n     infered_array_elems\n       = TypeCheckExpr::Resolve (elems.get_elem_to_copy (), false);\n   }\n \n-  void visit (HIR::StructExprStructFields &struct_expr)\n+  void visit (HIR::StructExprStructFields &struct_expr) override\n   {\n     infered = TypeCheckStructExpr::Resolve (&struct_expr);\n   }\n \n-  void visit (HIR::GroupedExpr &expr)\n+  void visit (HIR::GroupedExpr &expr) override\n   {\n     infered = TypeCheckExpr::Resolve (expr.get_expr_in_parens ().get (), false);\n   }\n \n-  void visit (HIR::FieldAccessExpr &expr)\n+  void visit (HIR::FieldAccessExpr &expr) override\n   {\n     auto struct_base\n       = TypeCheckExpr::Resolve (expr.get_receiver_expr ().get (), false);\n@@ -727,7 +729,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = resolved->get_field_type ();\n   }\n \n-  void visit (HIR::PathInExpression &expr)\n+  void visit (HIR::PathInExpression &expr) override\n   {\n     NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n \n@@ -801,7 +803,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n   }\n \n-  void visit (HIR::LoopExpr &expr)\n+  void visit (HIR::LoopExpr &expr) override\n   {\n     context->push_new_loop_context (expr.get_mappings ().get_hirid ());\n     TyTy::BaseType *block_expr\n@@ -826,7 +828,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::WhileLoopExpr &expr)\n+  void visit (HIR::WhileLoopExpr &expr) override\n   {\n     context->push_new_while_loop_context (expr.get_mappings ().get_hirid ());\n \n@@ -845,7 +847,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::BreakExpr &expr)\n+  void visit (HIR::BreakExpr &expr) override\n   {\n     if (!inside_loop)\n       {\n@@ -873,7 +875,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::ContinueExpr &expr)\n+  void visit (HIR::ContinueExpr &expr) override\n   {\n     if (!inside_loop)\n       {\n@@ -885,7 +887,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n-  void visit (HIR::BorrowExpr &expr)\n+  void visit (HIR::BorrowExpr &expr) override\n   {\n     TyTy::BaseType *resolved_base\n       = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n@@ -896,7 +898,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t\t\t       TyTy::TyCtx (resolved_base->get_ref ()));\n   }\n \n-  void visit (HIR::DereferenceExpr &expr)\n+  void visit (HIR::DereferenceExpr &expr) override\n   {\n     TyTy::BaseType *resolved_base\n       = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);"}, {"sha": "9473edaa61af6a5f2262570504fa10ab1c9c9303", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -30,14 +30,16 @@ namespace Resolver {\n \n class TypeCheckTopLevelImplItem : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static void Resolve (HIR::InherentImplItem *item, TyTy::BaseType *self)\n   {\n     TypeCheckTopLevelImplItem resolver (self);\n     item->accept_vis (resolver);\n   }\n \n-  void visit (HIR::ConstantItem &constant)\n+  void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n     TyTy::BaseType *expr_type\n@@ -46,7 +48,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n     context->insert_type (constant.get_mappings (), type->unify (expr_type));\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     TyTy::BaseType *ret_type = nullptr;\n     if (!function.has_function_return_type ())\n@@ -84,7 +86,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n-  void visit (HIR::Method &method)\n+  void visit (HIR::Method &method) override\n   {\n     TyTy::BaseType *ret_type = nullptr;\n     if (!method.has_function_return_type ())\n@@ -146,14 +148,16 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n class TypeCheckImplItem : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static void Resolve (HIR::InherentImplItem *item, TyTy::BaseType *self)\n   {\n     TypeCheckImplItem resolver (self);\n     item->accept_vis (resolver);\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     TyTy::BaseType *lookup;\n     if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))\n@@ -186,7 +190,7 @@ class TypeCheckImplItem : public TypeCheckBase\n     context->pop_return_type ();\n   }\n \n-  void visit (HIR::Method &method)\n+  void visit (HIR::Method &method) override\n   {\n     TyTy::BaseType *lookup;\n     if (!context->lookup_type (method.get_mappings ().get_hirid (), &lookup))"}, {"sha": "cf04260a4feff42069e636f925903fe2987aec23", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -31,6 +31,8 @@ namespace Resolver {\n \n class TypeCheckItem : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static void Resolve (HIR::Item *item)\n   {"}, {"sha": "7f7e6251866b3fff8bb8acda9a1c5732d58a373d", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -29,6 +29,8 @@ namespace Resolver {\n \n class TypeCheckStmt : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static TyTy::BaseType *Resolve (HIR::Stmt *stmt, bool inside_loop)\n   {\n@@ -37,17 +39,17 @@ class TypeCheckStmt : public TypeCheckBase\n     return resolver.infered;\n   }\n \n-  void visit (HIR::ExprStmtWithBlock &stmt)\n+  void visit (HIR::ExprStmtWithBlock &stmt) override\n   {\n     infered = TypeCheckExpr::Resolve (stmt.get_expr (), inside_loop);\n   }\n \n-  void visit (HIR::ExprStmtWithoutBlock &stmt)\n+  void visit (HIR::ExprStmtWithoutBlock &stmt) override\n   {\n     infered = TypeCheckExpr::Resolve (stmt.get_expr (), inside_loop);\n   }\n \n-  void visit (HIR::LetStmt &stmt)\n+  void visit (HIR::LetStmt &stmt) override\n   {\n     infered = new TyTy::UnitType (stmt.get_mappings ().get_hirid ());\n "}, {"sha": "3a6cdc71e2c01ab23db8d0c83364144c0a8789d2", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct-field.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -29,6 +29,8 @@ namespace Resolver {\n \n class TypeCheckStructExpr : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static TyTy::BaseType *Resolve (HIR::StructExprStructFields *expr)\n   {\n@@ -37,15 +39,15 @@ class TypeCheckStructExpr : public TypeCheckBase\n     return resolver.resolved;\n   }\n \n-  void visit (HIR::StructExprStructFields &struct_expr);\n+  void visit (HIR::StructExprStructFields &struct_expr) override;\n \n-  void visit (HIR::PathInExpression &path);\n+  void visit (HIR::PathInExpression &path) override;\n \n-  void visit (HIR::StructExprFieldIdentifierValue &field);\n+  void visit (HIR::StructExprFieldIdentifierValue &field) override;\n \n-  void visit (HIR::StructExprFieldIndexValue &field);\n+  void visit (HIR::StructExprFieldIndexValue &field) override;\n \n-  void visit (HIR::StructExprFieldIdentifier &field);\n+  void visit (HIR::StructExprFieldIdentifier &field) override;\n \n private:\n   TypeCheckStructExpr (HIR::Expr *e)"}, {"sha": "f0d0d35cbf0df722112e86d396decb31f69b4ba8", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -31,14 +31,16 @@ namespace Resolver {\n \n class TypeCheckTopLevel : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static void Resolve (HIR::Item *item)\n   {\n     TypeCheckTopLevel resolver;\n     item->accept_vis (resolver);\n   }\n \n-  void visit (HIR::TupleStruct &struct_decl)\n+  void visit (HIR::TupleStruct &struct_decl) override\n   {\n     std::vector<TyTy::SubstitionMapping> substitions;\n     if (struct_decl.has_generics ())\n@@ -78,7 +80,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n-  void visit (HIR::StructStruct &struct_decl)\n+  void visit (HIR::StructStruct &struct_decl) override\n   {\n     std::vector<TyTy::SubstitionMapping> substitions;\n     if (struct_decl.has_generics ())\n@@ -115,15 +117,15 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n-  void visit (HIR::StaticItem &var)\n+  void visit (HIR::StaticItem &var) override\n   {\n     TyTy::BaseType *type = TypeCheckType::Resolve (var.get_type ());\n     TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (var.get_expr (), false);\n \n     context->insert_type (var.get_mappings (), type->unify (expr_type));\n   }\n \n-  void visit (HIR::ConstantItem &constant)\n+  void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n     TyTy::BaseType *expr_type\n@@ -132,7 +134,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (constant.get_mappings (), type->unify (expr_type));\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     std::vector<TyTy::SubstitionMapping> substitions;\n     if (function.has_generics ())\n@@ -184,7 +186,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n-  void visit (HIR::InherentImpl &impl_block)\n+  void visit (HIR::InherentImpl &impl_block) override\n   {\n     auto self = TypeCheckType::Resolve (impl_block.get_type ().get ());\n     if (self == nullptr)"}, {"sha": "db7fe63ef8a2bf3f8e1ae8184201927a38b90043", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -27,6 +27,8 @@ namespace Resolver {\n \n class ArrayCapacityConstant : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static bool fold (HIR::Expr *expr, size_t *folded_result)\n   {\n@@ -38,7 +40,7 @@ class ArrayCapacityConstant : public TypeCheckBase\n \n   virtual ~ArrayCapacityConstant () {}\n \n-  void visit (HIR::LiteralExpr &expr)\n+  void visit (HIR::LiteralExpr &expr) override\n   {\n     auto literal_value = expr.get_literal ();\n     switch (expr.get_lit_type ())\n@@ -64,6 +66,8 @@ class ArrayCapacityConstant : public TypeCheckBase\n \n class TypeCheckResolveGenericArguments : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static HIR::GenericArgs resolve (HIR::TypePathSegment *segment)\n   {\n@@ -87,6 +91,8 @@ class TypeCheckResolveGenericArguments : public TypeCheckBase\n \n class TypeCheckType : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static TyTy::BaseType *Resolve (HIR::Type *type)\n   {\n@@ -100,7 +106,7 @@ class TypeCheckType : public TypeCheckBase\n     return resolver.translated;\n   }\n \n-  void visit (HIR::BareFunctionType &fntype)\n+  void visit (HIR::BareFunctionType &fntype) override\n   {\n     TyTy::BaseType *return_type\n       = fntype.has_return_type ()\n@@ -120,7 +126,7 @@ class TypeCheckType : public TypeCheckBase\n \t\t\t\t  TyTy::TyCtx (return_type->get_ref ()));\n   }\n \n-  void visit (HIR::TupleType &tuple)\n+  void visit (HIR::TupleType &tuple) override\n   {\n     if (tuple.is_unit_type ())\n       {\n@@ -144,7 +150,7 @@ class TypeCheckType : public TypeCheckBase\n       = new TyTy::TupleType (tuple.get_mappings ().get_hirid (), fields);\n   }\n \n-  void visit (HIR::TypePath &path)\n+  void visit (HIR::TypePath &path) override\n   {\n     // lookup the Node this resolves to\n     NodeId ref;\n@@ -227,7 +233,7 @@ class TypeCheckType : public TypeCheckBase\n \t\t   path.as_string ().c_str ());\n   }\n \n-  void visit (HIR::ArrayType &type)\n+  void visit (HIR::ArrayType &type) override\n   {\n     size_t capacity;\n     if (!ArrayCapacityConstant::fold (type.get_size_expr (), &capacity))\n@@ -242,15 +248,15 @@ class TypeCheckType : public TypeCheckBase\n \t\t\t\t      capacity, TyTy::TyCtx (base->get_ref ()));\n   }\n \n-  void visit (HIR::ReferenceType &type)\n+  void visit (HIR::ReferenceType &type) override\n   {\n     TyTy::BaseType *base\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n \t\t\t\t\t  TyTy::TyCtx (base->get_ref ()));\n   }\n \n-  void visit (HIR::InferredType &type)\n+  void visit (HIR::InferredType &type) override\n   {\n     translated = new TyTy::InferType (type.get_mappings ().get_hirid (),\n \t\t\t\t      TyTy::InferType::InferTypeKind::GENERAL);\n@@ -264,6 +270,8 @@ class TypeCheckType : public TypeCheckBase\n \n class TypeResolveGenericParam : public TypeCheckBase\n {\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n public:\n   static TyTy::ParamType *Resolve (HIR::GenericParam *param)\n   {"}, {"sha": "953770e3621afb247cba48868c3d1b4d5c5981ff", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -28,6 +28,8 @@ namespace Resolver {\n class TypeResolverDump : public TypeCheckBase\n {\n public:\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n   static void go (HIR::Crate &crate, std::ofstream &out)\n   {\n     TypeResolverDump dumper;"}, {"sha": "58018ed35477ace3b5631c27557b316b6ad1452c", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173bff7f12c2c19502825a11649ad54f612af04a/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=173bff7f12c2c19502825a11649ad54f612af04a", "patch": "@@ -276,6 +276,8 @@ class BaseRules : public TyVisitor\n \n class InferRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   InferRules (InferType *base) : BaseRules (base), base (base) {}\n \n@@ -511,6 +513,8 @@ class UnitRules : public BaseRules\n \n class FnRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   FnRules (FnType *base) : BaseRules (base), base (base) {}\n \n@@ -567,6 +571,8 @@ class FnRules : public BaseRules\n \n class FnptrRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   FnptrRules (FnPtr *base) : BaseRules (base), base (base) {}\n \n@@ -660,6 +666,8 @@ class FnptrRules : public BaseRules\n \n class ArrayRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   ArrayRules (ArrayType *base) : BaseRules (base), base (base) {}\n \n@@ -696,6 +704,8 @@ class ArrayRules : public BaseRules\n \n class BoolRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   BoolRules (BoolType *base) : BaseRules (base), base (base) {}\n \n@@ -712,6 +722,8 @@ class BoolRules : public BaseRules\n \n class IntRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   IntRules (IntType *base) : BaseRules (base), base (base) {}\n \n@@ -748,6 +760,8 @@ class IntRules : public BaseRules\n \n class UintRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   UintRules (UintType *base) : BaseRules (base), base (base) {}\n \n@@ -784,6 +798,8 @@ class UintRules : public BaseRules\n \n class FloatRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   FloatRules (FloatType *base) : BaseRules (base), base (base) {}\n \n@@ -819,6 +835,8 @@ class FloatRules : public BaseRules\n \n class ADTRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   ADTRules (ADTType *base) : BaseRules (base), base (base) {}\n \n@@ -857,6 +875,8 @@ class ADTRules : public BaseRules\n \n class TupleRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   TupleRules (TupleType *base) : BaseRules (base), base (base) {}\n \n@@ -896,6 +916,8 @@ class TupleRules : public BaseRules\n \n class USizeRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   USizeRules (USizeType *base) : BaseRules (base), base (base) {}\n \n@@ -922,6 +944,8 @@ class USizeRules : public BaseRules\n \n class ISizeRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   ISizeRules (ISizeType *base) : BaseRules (base), base (base) {}\n \n@@ -948,6 +972,8 @@ class ISizeRules : public BaseRules\n \n class CharRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   CharRules (CharType *base) : BaseRules (base), base (base) {}\n \n@@ -973,6 +999,8 @@ class CharRules : public BaseRules\n \n class ReferenceRules : public BaseRules\n {\n+  using Rust::TyTy::BaseRules::visit;\n+\n public:\n   ReferenceRules (ReferenceType *base) : BaseRules (base), base (base) {}\n \n@@ -1042,6 +1070,7 @@ class ParamRules : public BaseRules\n class StrRules : public BaseRules\n {\n   // FIXME we will need a enum for the StrType like ByteBuf etc..\n+  using Rust::TyTy::BaseRules::visit;\n \n public:\n   StrRules (StrType *base) : BaseRules (base), base (base) {}"}]}