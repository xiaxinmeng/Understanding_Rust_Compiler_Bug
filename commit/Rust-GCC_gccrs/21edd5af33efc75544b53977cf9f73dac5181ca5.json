{"sha": "21edd5af33efc75544b53977cf9f73dac5181ca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlZGQ1YWYzM2VmYzc1NTQ0YjUzOTc3Y2Y5ZjczZGFjNTE4MWNhNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-13T03:20:22Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-13T03:20:22Z"}, "message": "[RS6000] Rotate testcase\n\nThe testcase exercises one of the rotate patterns.\n\ngcc/\n\t* config/rs6000/predicates.md (logical_const_operand),\n\t(logical_operand): Correct comment.\ngcc/testsuite/\n\t* gcc.target/powerpc/rotmask.c: New.\n\nFrom-SVN: r266046", "tree": {"sha": "55f9dfec64f20bf550b15a5322b614e794d40ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f9dfec64f20bf550b15a5322b614e794d40ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21edd5af33efc75544b53977cf9f73dac5181ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21edd5af33efc75544b53977cf9f73dac5181ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21edd5af33efc75544b53977cf9f73dac5181ca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21edd5af33efc75544b53977cf9f73dac5181ca5/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee0d2718cd3433345e2b9b27b018e08279776a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee0d2718cd3433345e2b9b27b018e08279776a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee0d2718cd3433345e2b9b27b018e08279776a4c"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "b2ab5487d5567304ffe720570f9703f72712ab4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21edd5af33efc75544b53977cf9f73dac5181ca5", "patch": "@@ -1,3 +1,8 @@\n+2018-11-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/predicates.md (logical_const_operand),\n+\t(logical_operand): Correct comment.\n+\n 2018-11-13  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.md (addsi3_high): Prefix with '*'."}, {"sha": "b80c278d74246031ce3292518e97ee9a4233aafe", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=21edd5af33efc75544b53977cf9f73dac5181ca5", "patch": "@@ -922,7 +922,7 @@\n \t\t    && !satisfies_constraint_L (op)\")))\n \n ;; Return 1 if the operand is a constant that can be used as the operand\n-;; of an OR or XOR.\n+;; of an AND, OR or XOR.\n (define_predicate \"logical_const_operand\"\n   (match_code \"const_int\")\n {\n@@ -935,7 +935,7 @@\n })\n \n ;; Return 1 if the operand is a non-special register or a constant that\n-;; can be used as the operand of an OR or XOR.\n+;; can be used as the operand of an AND, OR or XOR.\n (define_predicate \"logical_operand\"\n   (ior (match_operand 0 \"gpc_reg_operand\")\n        (match_operand 0 \"logical_const_operand\")))"}, {"sha": "e7d4ad7143c2ce6dc74ad1b732c799a547dc940b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21edd5af33efc75544b53977cf9f73dac5181ca5", "patch": "@@ -1,3 +1,7 @@\n+2018-11-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/rotmask.c: New.\n+\n 2018-11-13  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/86677"}, {"sha": "4d1b9174921869c8808ca67ea7f9d3452487e68f", "filename": "gcc/testsuite/gcc.target/powerpc/rotmask.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frotmask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21edd5af33efc75544b53977cf9f73dac5181ca5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frotmask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frotmask.c?ref=21edd5af33efc75544b53977cf9f73dac5181ca5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"rotldi\" } } */\n+\n+unsigned long f (unsigned long x)\n+{\n+  return ((x << 1) | (x >> 63)) & 0xffffffff;\n+}"}]}