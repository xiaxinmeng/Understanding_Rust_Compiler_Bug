{"sha": "b2218cc139d0b634c7db731964d78e9c0e43a1cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyMThjYzEzOWQwYjYzNGM3ZGI3MzE5NjRkNzhlOWMwZTQzYTFjYw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-10-01T22:57:57Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-10-01T22:57:57Z"}, "message": "output.h (compute_reloc_for_constant): Declare.\n\n* output.h (compute_reloc_for_constant): Declare.\n* varasm.c (compute_reloc_for_constant): Extract from...\n(output_addressed_constants): ... here.  Adjust all callers.\n\nFrom-SVN: r72000", "tree": {"sha": "bbd97c70ecaadc17cbc3a74ea03bb24419c8944b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbd97c70ecaadc17cbc3a74ea03bb24419c8944b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2218cc139d0b634c7db731964d78e9c0e43a1cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2218cc139d0b634c7db731964d78e9c0e43a1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2218cc139d0b634c7db731964d78e9c0e43a1cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2218cc139d0b634c7db731964d78e9c0e43a1cc/comments", "author": null, "committer": null, "parents": [{"sha": "2ce240d34e2eefed9937ded61dcfb6b92e41b608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce240d34e2eefed9937ded61dcfb6b92e41b608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce240d34e2eefed9937ded61dcfb6b92e41b608"}], "stats": {"total": 99, "additions": 80, "deletions": 19}, "files": [{"sha": "297a01244ff08a670b9f034bf27f7f9074ca1ebc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2218cc139d0b634c7db731964d78e9c0e43a1cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2218cc139d0b634c7db731964d78e9c0e43a1cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2218cc139d0b634c7db731964d78e9c0e43a1cc", "patch": "@@ -1,3 +1,9 @@\n+2003-10-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* output.h (compute_reloc_for_constant): Declare.\n+\t* varasm.c (compute_reloc_for_constant): Extract from...\n+\t(output_addressed_constants): ... here.  Adjust all callers.\n+\n 2003-10-01  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* aclocal.m4: Add hpux10* and hpux11.00 to /dev/zero blacklist.\n@@ -10,7 +16,7 @@\n \n 2003-09-30  Alexandre Oliva  <aoliva@redhat.com>\n \n-\tconfig/frv/frv.h (PREDICATE_CODES): Added\n+\t* config/frv/frv.h (PREDICATE_CODES): Added\n \tcondexec_si_media_operator, condexec_sf_add_operator and\n \tcondexec_sf_conv_operator.  Removed condexec_sf_binary_operator\n \tand condexec_sf_unary_operator."}, {"sha": "9fbc726a6653107c3e65711563bffc7d8698a41b", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2218cc139d0b634c7db731964d78e9c0e43a1cc/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2218cc139d0b634c7db731964d78e9c0e43a1cc/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=b2218cc139d0b634c7db731964d78e9c0e43a1cc", "patch": "@@ -437,6 +437,10 @@ extern rtx this_is_asm_operands;\n extern bool decl_readonly_section (tree, int);\n extern bool decl_readonly_section_1 (tree, int, int);\n \n+/* This can be used to compute RELOC for the function above, when\n+   given a constant expression.  */\n+extern int compute_reloc_for_constant (tree);\n+\n /* User label prefix in effect for this compilation.  */\n extern const char *user_label_prefix;\n "}, {"sha": "ea43a7d3e1bd4179a14b57e4351d7353ff38e4b1", "filename": "gcc/varasm.c", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2218cc139d0b634c7db731964d78e9c0e43a1cc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2218cc139d0b634c7db731964d78e9c0e43a1cc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b2218cc139d0b634c7db731964d78e9c0e43a1cc", "patch": "@@ -154,7 +154,7 @@ static struct pool_constant *find_pool_constant (struct function *, rtx);\n static void mark_constant_pool (void);\n static void mark_constants (rtx);\n static int mark_constant (rtx *current_rtx, void *data);\n-static int output_addressed_constants (tree);\n+static void output_addressed_constants (tree);\n static unsigned HOST_WIDE_INT array_size_for_constructor (tree);\n static unsigned min_align (unsigned, unsigned);\n static void output_constructor (tree, unsigned HOST_WIDE_INT, unsigned int);\n@@ -1459,7 +1459,10 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n   if (DECL_INITIAL (decl) == error_mark_node)\n     reloc = contains_pointers_p (TREE_TYPE (decl)) ? 3 : 0;\n   else if (DECL_INITIAL (decl))\n-    reloc = output_addressed_constants (DECL_INITIAL (decl));\n+    {\n+      reloc = compute_reloc_for_constant (DECL_INITIAL (decl));\n+      output_addressed_constants (DECL_INITIAL (decl));\n+    }\n   resolve_unique_section (decl, reloc, flag_data_sections);\n \n   /* Handle uninitialized definitions.  */\n@@ -2501,14 +2504,16 @@ output_constant_def_contents (rtx symbol)\n \n   /* Make sure any other constants whose addresses appear in EXP\n      are assigned label numbers.  */\n-  int reloc = output_addressed_constants (exp);\n+  int reloc = compute_reloc_for_constant (exp);\n \n   /* Align the location counter as required by EXP's data type.  */\n   int align = TYPE_ALIGN (TREE_TYPE (exp));\n #ifdef CONSTANT_ALIGNMENT\n   align = CONSTANT_ALIGNMENT (exp, align);\n #endif\n \n+  output_addressed_constants (exp);\n+\n   /* We are no longer deferring this constant.  */\n   TREE_ASM_WRITTEN (exp) = 1;\n \n@@ -3329,12 +3334,10 @@ mark_constant (rtx *current_rtx, void *data ATTRIBUTE_UNUSED)\n   return 0;\n }\n \f\n-/* Find all the constants whose addresses are referenced inside of EXP,\n-   and make sure assembler code with a label has been output for each one.\n-   Indicate whether an ADDR_EXPR has been encountered.  */\n+/* Determine what kind of relocations EXP may need.  */\n \n-static int\n-output_addressed_constants (tree exp)\n+int\n+compute_reloc_for_constant (tree exp)\n {\n   int reloc = 0, reloc2;\n   tree tem;\n@@ -3354,24 +3357,20 @@ output_addressed_constants (tree exp)\n \t   tem = TREE_OPERAND (tem, 0))\n \t;\n \n-      if (TREE_CODE_CLASS (TREE_CODE (tem)) == 'c'\n-\t  || TREE_CODE (tem) == CONSTRUCTOR)\n-\toutput_constant_def (tem, 0);\n-\n       if (TREE_PUBLIC (tem))\n \treloc |= 2;\n       else\n \treloc |= 1;\n       break;\n \n     case PLUS_EXPR:\n-      reloc = output_addressed_constants (TREE_OPERAND (exp, 0));\n-      reloc |= output_addressed_constants (TREE_OPERAND (exp, 1));\n+      reloc = compute_reloc_for_constant (TREE_OPERAND (exp, 0));\n+      reloc |= compute_reloc_for_constant (TREE_OPERAND (exp, 1));\n       break;\n \n     case MINUS_EXPR:\n-      reloc = output_addressed_constants (TREE_OPERAND (exp, 0));\n-      reloc2 = output_addressed_constants (TREE_OPERAND (exp, 1));\n+      reloc = compute_reloc_for_constant (TREE_OPERAND (exp, 0));\n+      reloc2 = compute_reloc_for_constant (TREE_OPERAND (exp, 1));\n       /* The difference of two local labels is computable at link time.  */\n       if (reloc == 1 && reloc2 == 1)\n \treloc = 0;\n@@ -3382,13 +3381,13 @@ output_addressed_constants (tree exp)\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case NON_LVALUE_EXPR:\n-      reloc = output_addressed_constants (TREE_OPERAND (exp, 0));\n+      reloc = compute_reloc_for_constant (TREE_OPERAND (exp, 0));\n       break;\n \n     case CONSTRUCTOR:\n       for (tem = CONSTRUCTOR_ELTS (exp); tem; tem = TREE_CHAIN (tem))\n \tif (TREE_VALUE (tem) != 0)\n-\t  reloc |= output_addressed_constants (TREE_VALUE (tem));\n+\t  reloc |= compute_reloc_for_constant (TREE_VALUE (tem));\n \n       break;\n \n@@ -3397,6 +3396,58 @@ output_addressed_constants (tree exp)\n     }\n   return reloc;\n }\n+\n+/* Find all the constants whose addresses are referenced inside of EXP,\n+   and make sure assembler code with a label has been output for each one.\n+   Indicate whether an ADDR_EXPR has been encountered.  */\n+\n+static void\n+output_addressed_constants (tree exp)\n+{\n+  tree tem;\n+\n+  /* Give the front-end a chance to convert VALUE to something that\n+     looks more like a constant to the back-end.  */\n+  exp = (*lang_hooks.expand_constant) (exp);\n+\n+  switch (TREE_CODE (exp))\n+    {\n+    case ADDR_EXPR:\n+    case FDESC_EXPR:\n+      /* Go inside any operations that get_inner_reference can handle and see\n+\t if what's inside is a constant: no need to do anything here for\n+\t addresses of variables or functions.  */\n+      for (tem = TREE_OPERAND (exp, 0); handled_component_p (tem);\n+\t   tem = TREE_OPERAND (tem, 0))\n+\t;\n+\n+      if (TREE_CODE_CLASS (TREE_CODE (tem)) == 'c'\n+\t  || TREE_CODE (tem) == CONSTRUCTOR)\n+\toutput_constant_def (tem, 0);\n+      break;\n+\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+      output_addressed_constants (TREE_OPERAND (exp, 1));\n+      /* Fall through.  */\n+\n+    case NOP_EXPR:\n+    case CONVERT_EXPR:\n+    case NON_LVALUE_EXPR:\n+      output_addressed_constants (TREE_OPERAND (exp, 0));\n+      break;\n+\n+    case CONSTRUCTOR:\n+      for (tem = CONSTRUCTOR_ELTS (exp); tem; tem = TREE_CHAIN (tem))\n+\tif (TREE_VALUE (tem) != 0)\n+\t  output_addressed_constants (TREE_VALUE (tem));\n+\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n \f\n /* Return nonzero if VALUE is a valid constant-valued expression\n    for use in initializing a static variable; one that can be an"}]}