{"sha": "63408827c4d31b6be3de9026658c5440e19c273b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0MDg4MjdjNGQzMWI2YmUzZGU5MDI2NjU4YzU0NDBlMTljMjczYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-11-16T04:55:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-11-16T04:55:19Z"}, "message": "ggc-common.c (ggc_print_statistics): Cast size_t to unsigned long for printing.\n\n        * ggc-common.c (ggc_print_statistics): Cast size_t to unsigned long\n        for printing.\n        * ggc.h (struct ggc_statistics): Rearrange elements for better\n        packing on 64-bit hosts.\n        * lcm.c (compute_laterin): Store a size_t not an int in bb->aux.\n        (compute_nearerout): Likewise.\n\nFrom-SVN: r30547", "tree": {"sha": "843dc855bf9ff6321be0e9793797d36b421d0ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843dc855bf9ff6321be0e9793797d36b421d0ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63408827c4d31b6be3de9026658c5440e19c273b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63408827c4d31b6be3de9026658c5440e19c273b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63408827c4d31b6be3de9026658c5440e19c273b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63408827c4d31b6be3de9026658c5440e19c273b/comments", "author": null, "committer": null, "parents": [{"sha": "1344f8d5d033c461d07e336331b6551bfb2c5c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1344f8d5d033c461d07e336331b6551bfb2c5c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1344f8d5d033c461d07e336331b6551bfb2c5c77"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "b137d7ad38a478e4becdbafae070e8e84d38cd02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63408827c4d31b6be3de9026658c5440e19c273b", "patch": "@@ -5,6 +5,13 @@ Mon Nov 15 20:46:45 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (calculate_global_regs_live): Zero bb->aux to begin.\n \n+\t* ggc-common.c (ggc_print_statistics): Cast size_t to unsigned long\n+\tfor printing.\n+\t* ggc.h (struct ggc_statistics): Rearrange elements for better\n+\tpacking on 64-bit hosts.\n+\t* lcm.c (compute_laterin): Store a size_t not an int in bb->aux.\n+\t(compute_nearerout): Likewise.\n+\n Tue Nov 16 14:37:52 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/rs6000.c (first_reg_to_save): Save"}, {"sha": "bacbcddbd5d19f392ea4b9c39b1c95325a3c82cf", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=63408827c4d31b6be3de9026658c5440e19c273b", "patch": "@@ -563,9 +563,9 @@ ggc_print_statistics (stream, stats)\n \t\t  / ggc_stats->total_size_trees));\n       }\n   fprintf (stream,\n-\t   \"%-22s%-15u %-15u\\n\", \"Total\",\n+\t   \"%-22s%-15u %-15lu\\n\", \"Total\",\n \t   ggc_stats->total_num_trees,\n-\t   ggc_stats->total_size_trees);\n+\t   (unsigned long) ggc_stats->total_size_trees);\n \n   /* Print the statistics for RTL.  */\n   fprintf (stream, \"\\n%-22s%-16s%-16s%-7s\\n\", \"Code\", \n@@ -582,9 +582,9 @@ ggc_print_statistics (stream, stats)\n \t\t  / ggc_stats->total_size_rtxs));\n       }\n   fprintf (stream,\n-\t   \"%-22s%-15u %-15u\\n\", \"Total\",\n+\t   \"%-22s%-15u %-15lu\\n\", \"Total\",\n \t   ggc_stats->total_num_rtxs,\n-\t   ggc_stats->total_size_rtxs);\n+\t   (unsigned long) ggc_stats->total_size_rtxs);\n \n \n   /* Don't gather statistics any more.  */"}, {"sha": "3f55a21736b81e31e5e9d34373717a7f7d2debb8", "filename": "gcc/ggc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=63408827c4d31b6be3de9026658c5440e19c273b", "patch": "@@ -182,14 +182,14 @@ typedef struct ggc_statistics\n   /* The Ith element is the number of bytes allocated by nodes with \n      code I.  */\n   size_t size_rtxs[256];\n-  /* The total number of tree nodes allocated.  */\n-  unsigned total_num_trees;\n   /* The total size of the tree nodes allocated.  */\n   size_t total_size_trees;\n-  /* The total number of RTL nodes allocated.  */\n-  unsigned total_num_rtxs;\n   /* The total size of the RTL nodes allocated.  */\n   size_t total_size_rtxs;\n+  /* The total number of tree nodes allocated.  */\n+  unsigned total_num_trees;\n+  /* The total number of RTL nodes allocated.  */\n+  unsigned total_num_rtxs;\n } ggc_statistics;\n \n /* Return the number of bytes allocated at the indicated address.  */"}, {"sha": "a6cdd7d4974e963cd39d9e9cb6e9df595b69ba79", "filename": "gcc/lcm.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63408827c4d31b6be3de9026658c5440e19c273b/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=63408827c4d31b6be3de9026658c5440e19c273b", "patch": "@@ -255,7 +255,7 @@ compute_laterin (edge_list, earliest, antloc, later, laterin)\n \n   /* Initialize a mapping from each edge to its index.  */\n   for (i = 0; i < num_edges; i++)\n-    INDEX_EDGE (edge_list, i)->aux = (void *)i;\n+    INDEX_EDGE (edge_list, i)->aux = (void *) (size_t) i;\n \n   /* We want a maximal solution, so initially consider LATER true for\n      all edges.  This allows propagation through a loop since the incoming\n@@ -296,13 +296,13 @@ compute_laterin (edge_list, earliest, antloc, later, laterin)\n       bb = b->index;\n       sbitmap_ones (laterin[bb]);\n       for (e = b->pred; e != NULL; e = e->pred_next)\n-\tsbitmap_a_and_b (laterin[bb], laterin[bb], later[(int)e->aux]);\n+\tsbitmap_a_and_b (laterin[bb], laterin[bb], later[(size_t)e->aux]);\n \n       /* Calculate LATER for all outgoing edges.  */\n       for (e = b->succ; e != NULL; e = e->succ_next)\n \t{\n-\t  if (sbitmap_union_of_diff (later[(int)e->aux],\n-\t\t\t\t     earliest[(int)e->aux],\n+\t  if (sbitmap_union_of_diff (later[(size_t) e->aux],\n+\t\t\t\t     earliest[(size_t) e->aux],\n \t\t\t\t     laterin[e->src->index],\n \t\t\t\t     antloc[e->src->index]))\n \t    {\n@@ -324,7 +324,7 @@ compute_laterin (edge_list, earliest, antloc, later, laterin)\n   for (e = EXIT_BLOCK_PTR->pred; e != NULL; e = e->pred_next)\n     sbitmap_a_and_b (laterin[n_basic_blocks],\n \t\t     laterin[n_basic_blocks],\n-\t\t     later[(int)e->aux]);\n+\t\t     later[(size_t) e->aux]);\n \n   free (tos);\n }\n@@ -600,7 +600,7 @@ compute_nearerout (edge_list, farthest, st_avloc, nearer, nearerout)\n   /* Initialize NEARER for each edge and build a mapping from an edge to\n      its index.  */\n   for (i = 0; i < num_edges; i++)\n-    INDEX_EDGE (edge_list, i)->aux = (void *)i;\n+    INDEX_EDGE (edge_list, i)->aux = (void *) (size_t) i;\n \n   /* We want a maximal solution.  */\n   sbitmap_vector_ones (nearer, num_edges);\n@@ -632,13 +632,14 @@ compute_nearerout (edge_list, farthest, st_avloc, nearer, nearerout)\n       bb = b->index;\n       sbitmap_ones (nearerout[bb]);\n       for (e = b->succ; e != NULL; e = e->succ_next)\n-\tsbitmap_a_and_b (nearerout[bb], nearerout[bb], nearer[(int)e->aux]);\n+\tsbitmap_a_and_b (nearerout[bb], nearerout[bb],\n+\t\t\t nearer[(size_t) e->aux]);\n \n       /* Calculate NEARER for all incoming edges.  */\n       for (e = b->pred; e != NULL; e = e->pred_next)\n \t{\n-\t  if (sbitmap_union_of_diff (nearer[(int)e->aux],\n-\t\t\t\t     farthest[(int)e->aux],\n+\t  if (sbitmap_union_of_diff (nearer[(size_t) e->aux],\n+\t\t\t\t     farthest[(size_t) e->aux],\n \t\t\t\t     nearerout[e->dest->index],\n \t\t\t\t     st_avloc[e->dest->index]))\n \t    {\n@@ -660,7 +661,7 @@ compute_nearerout (edge_list, farthest, st_avloc, nearer, nearerout)\n   for (e = ENTRY_BLOCK_PTR->succ; e != NULL; e = e->succ_next)\n     sbitmap_a_and_b (nearerout[n_basic_blocks],\n \t\t     nearerout[n_basic_blocks],\n-\t\t     nearer[(int)e->aux]);\n+\t\t     nearer[(size_t) e->aux]);\n \n   free (tos);\n }"}]}