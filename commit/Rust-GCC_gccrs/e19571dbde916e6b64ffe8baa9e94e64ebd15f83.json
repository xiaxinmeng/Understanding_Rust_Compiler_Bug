{"sha": "e19571dbde916e6b64ffe8baa9e94e64ebd15f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5NTcxZGJkZTkxNmU2YjY0ZmZlOGJhYTllOTRlNjRlYmQxNWY4Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-07T20:13:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-07T20:13:58Z"}, "message": "(preserve_temp_slots): If X cannot be a temp slot, preserve all things\nwhose address was taken at the present level.\n\nFrom-SVN: r8238", "tree": {"sha": "af909c2bc37d7f4ff84a11601f5638390bf16e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af909c2bc37d7f4ff84a11601f5638390bf16e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e19571dbde916e6b64ffe8baa9e94e64ebd15f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19571dbde916e6b64ffe8baa9e94e64ebd15f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19571dbde916e6b64ffe8baa9e94e64ebd15f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19571dbde916e6b64ffe8baa9e94e64ebd15f83/comments", "author": null, "committer": null, "parents": [{"sha": "3d771dfd7ae13f303ed9fe346df8364adb2c702d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d771dfd7ae13f303ed9fe346df8364adb2c702d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d771dfd7ae13f303ed9fe346df8364adb2c702d"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b0d76ecb740e982f5d22c7e13644be27a4eac261", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19571dbde916e6b64ffe8baa9e94e64ebd15f83/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19571dbde916e6b64ffe8baa9e94e64ebd15f83/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e19571dbde916e6b64ffe8baa9e94e64ebd15f83", "patch": "@@ -1040,12 +1040,19 @@ preserve_temp_slots (x)\n     p = find_temp_slot_from_address (x);\n \n   /* If X is not in memory or is at a constant address, it cannot be in\n-     a temporary slot.  */\n+     a temporary slot, but it can contain something whose address was\n+     taken.  */\n   if (p == 0 && (GET_CODE (x) != MEM || CONSTANT_P (XEXP (x, 0))))\n-    return;\n+    {\n+      for (p = temp_slots; p; p = p->next)\n+\tif (p->in_use && p->level == temp_slot_level && p->addr_taken)\n+\t  p->level--;\n+\n+      return;\n+    }\n \n   /* First see if we can find a match.  */\n-  if (p== 0)\n+  if ( p== 0)\n     p = find_temp_slot_from_address (XEXP (x, 0));\n \n   if (p != 0)"}]}