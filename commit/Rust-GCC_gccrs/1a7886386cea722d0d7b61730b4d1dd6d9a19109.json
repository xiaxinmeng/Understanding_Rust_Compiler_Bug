{"sha": "1a7886386cea722d0d7b61730b4d1dd6d9a19109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3ODg2Mzg2Y2VhNzIyZDBkN2I2MTczMGI0ZDFkZDZkOWExOTEwOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-09T21:31:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2020-01-09T21:31:55Z"}, "message": "libstdc++: Fix <ext/pointer.h> incompatibilities with C++20\n\nThe equality operators for _ExtPtr_allocator are defined as non-const\nmember functions, which causes ambiguities in C++20 due to the\nsynthesized operator!= candidates. They should always have been const.\n\nThe _Pointer_adapter class template has both value_type and element_type\nmembers, which makes readable_traits<_Pointer_adapter<T>> ambiguous. The\nintended workaround is to add a specialization of readable_traits.\n\n\t* include/ext/extptr_allocator.h (_ExtPtr_allocator::operator==)\n\t(_ExtPtr_allocator::operator!=): Add missing const qualifiers.\n\t* include/ext/pointer.h (readable_traits<_Pointer_adapter<S>>): Add\n\tpartial specialization to disambiguate the two constrained\n\tspecializations.\n\nFrom-SVN: r280067", "tree": {"sha": "64790bbbe31216714a01e9328debb4b49a4a1040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64790bbbe31216714a01e9328debb4b49a4a1040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7886386cea722d0d7b61730b4d1dd6d9a19109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7886386cea722d0d7b61730b4d1dd6d9a19109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7886386cea722d0d7b61730b4d1dd6d9a19109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7886386cea722d0d7b61730b4d1dd6d9a19109/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa39b2e842b03226551231688ef7190cbe44f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa39b2e842b03226551231688ef7190cbe44f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa39b2e842b03226551231688ef7190cbe44f89"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "65cd480ddcc69710390ed93b99096cebf619095d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7886386cea722d0d7b61730b4d1dd6d9a19109/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7886386cea722d0d7b61730b4d1dd6d9a19109/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1a7886386cea722d0d7b61730b4d1dd6d9a19109", "patch": "@@ -1,5 +1,11 @@\n 2020-01-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/ext/extptr_allocator.h (_ExtPtr_allocator::operator==)\n+\t(_ExtPtr_allocator::operator!=): Add missing const qualifiers.\n+\t* include/ext/pointer.h (readable_traits<_Pointer_adapter<S>>): Add\n+\tpartial specialization to disambiguate the two constrained\n+\tspecializations.\n+\n \t* include/experimental/type_traits (experimental::is_pod_v): Disable\n \t-Wdeprecated-declarations warnings around reference to std::is_pod.\n \t* include/std/type_traits (is_pod_v): Likewise."}, {"sha": "88090548b7cddec7cdd9bf9813f18d8ebfb1f90f", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7886386cea722d0d7b61730b4d1dd6d9a19109/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7886386cea722d0d7b61730b4d1dd6d9a19109/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=1a7886386cea722d0d7b61730b4d1dd6d9a19109", "patch": "@@ -131,20 +131,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up>\n         inline bool\n-        operator==(const _ExtPtr_allocator<_Up>& __rarg)\n+        operator==(const _ExtPtr_allocator<_Up>& __rarg) const\n         { return _M_real_alloc == __rarg._M_getUnderlyingImp(); }\n \n       inline bool\n-      operator==(const _ExtPtr_allocator& __rarg)\n+      operator==(const _ExtPtr_allocator& __rarg) const\n       { return _M_real_alloc == __rarg._M_real_alloc; }\n \n       template<typename _Up>\n         inline bool\n-        operator!=(const _ExtPtr_allocator<_Up>& __rarg)\n+        operator!=(const _ExtPtr_allocator<_Up>& __rarg) const\n         { return _M_real_alloc != __rarg._M_getUnderlyingImp(); }\n \n       inline bool\n-      operator!=(const _ExtPtr_allocator& __rarg)\n+      operator!=(const _ExtPtr_allocator& __rarg) const\n       { return _M_real_alloc != __rarg._M_real_alloc; }\n \n       template<typename _Up>"}, {"sha": "02d3e60169f853be051646d92d44d7c580a89880", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7886386cea722d0d7b61730b4d1dd6d9a19109/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7886386cea722d0d7b61730b4d1dd6d9a19109/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=1a7886386cea722d0d7b61730b4d1dd6d9a19109", "patch": "@@ -46,6 +46,9 @@\n # include <bits/move.h>\n # include <bits/ptr_traits.h>\n #endif\n+#if __cplusplus > 201703L\n+# include <iterator> // for readable_traits\n+#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -594,6 +597,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return pointer(std::addressof(__r)); }\n     };\n \n+#if __cpp_lib_concepts\n+  template<typename _Storage_policy>\n+    struct readable_traits<__gnu_cxx::_Pointer_adapter<_Storage_policy>>\n+    {\n+      using value_type\n+\t= typename __gnu_cxx::_Pointer_adapter<_Storage_policy>::value_type;\n+    };\n+#endif\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n #endif"}]}