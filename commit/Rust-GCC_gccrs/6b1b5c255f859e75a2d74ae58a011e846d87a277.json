{"sha": "6b1b5c255f859e75a2d74ae58a011e846d87a277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxYjVjMjU1Zjg1OWU3NWEyZDc0YWU1OGEwMTFlODQ2ZDg3YTI3Nw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-08T04:05:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-08T04:05:36Z"}, "message": "c++: Set the constraints of a class type sooner [PR96229]\n\nIn the testcase below, during processing (at parse time) of Y's base\nclass X<Y>, convert_template_argument calls is_compatible_template_arg\nto check if the template argument Y is no more constrained than the\nparameter P.  But at this point we haven't yet set Y's constraints, so\nget_normalized_constraints_from_decl yields NULL_TREE as the normal form\nand caches this result into the normalized_map.\n\nWe set Y's constraints later in cp_parser_class_specifier_1 but the\nstale normal form in the normalized_map remains.  This ultimately causes\nus to miss the constraint failure for Y<Z> because according to the\ncached normal form, Y is not constrained.\n\nThis patch fixes this issue by moving up the call to\nassociate_classtype_constraints so that we set constraints before we\nstart processing a class's bases.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96229\n\t* parser.c (cp_parser_class_specifier_1): Move call to\n\tassociate_classtype_constraints from here to ...\n\t(cp_parser_class_head): ... here.\n\t* pt.c (is_compatible_template_arg): Correct documentation to\n\tsay \"argument is _no_ more constrained than the parameter\".\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96229\n\t* g++.dg/cpp2a/concepts-class2.C: New test.", "tree": {"sha": "eb259997aeae06d9b51c4865f31db565fd04b5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb259997aeae06d9b51c4865f31db565fd04b5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b1b5c255f859e75a2d74ae58a011e846d87a277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1b5c255f859e75a2d74ae58a011e846d87a277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1b5c255f859e75a2d74ae58a011e846d87a277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1b5c255f859e75a2d74ae58a011e846d87a277/comments", "author": null, "committer": null, "parents": [{"sha": "6caec77e3be8e2989f723ac7f522885dded6bcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6caec77e3be8e2989f723ac7f522885dded6bcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6caec77e3be8e2989f723ac7f522885dded6bcfc"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "592ce95b571899a89ec46050f7499c28473d2459", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1b5c255f859e75a2d74ae58a011e846d87a277/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1b5c255f859e75a2d74ae58a011e846d87a277/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6b1b5c255f859e75a2d74ae58a011e846d87a277", "patch": "@@ -24044,10 +24044,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n     = parser->in_unbraced_linkage_specification_p;\n   parser->in_unbraced_linkage_specification_p = false;\n \n-  // Associate constraints with the type.\n-  if (flag_concepts)\n-    type = associate_classtype_constraints (type);\n-\n   /* Start the class.  */\n   if (nested_name_specifier_p)\n     {\n@@ -24815,6 +24811,10 @@ cp_parser_class_head (cp_parser* parser,\n       fixup_attribute_variants (type);\n     }\n \n+  /* Associate constraints with the type.  */\n+  if (flag_concepts)\n+    type = associate_classtype_constraints (type);\n+\n   /* We will have entered the scope containing the class; the names of\n      base classes should be looked up in that context.  For example:\n "}, {"sha": "fc4b9bb7c7f9810f4daab5859a9ad9a20d1f98d5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1b5c255f859e75a2d74ae58a011e846d87a277/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1b5c255f859e75a2d74ae58a011e846d87a277/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6b1b5c255f859e75a2d74ae58a011e846d87a277", "patch": "@@ -8127,9 +8127,10 @@ canonicalize_expr_argument (tree arg, tsubst_flags_t complain)\n   return canon;\n }\n \n-// A template declaration can be substituted for a constrained\n-// template template parameter only when the argument is more\n-// constrained than the parameter.\n+/* A template declaration can be substituted for a constrained\n+   template template parameter only when the argument is no more\n+   constrained than the parameter.  */\n+\n static bool\n is_compatible_template_arg (tree parm, tree arg)\n {"}, {"sha": "0ed9eb0a386d0a39fd2015efae0da294d04656f3", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-class2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1b5c255f859e75a2d74ae58a011e846d87a277/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1b5c255f859e75a2d74ae58a011e846d87a277/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class2.C?ref=6b1b5c255f859e75a2d74ae58a011e846d87a277", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/96229\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> concept Int = requires { T{0}; };\n+template <template <Int> class P> struct X        { };\n+template <Int>                    struct Y : X<Y> { };\n+                                  struct Z        { };\n+                                  struct W        { int i; };\n+\n+Y<Z> z; // { dg-error \"constraint\" }\n+Y<W> w;"}]}