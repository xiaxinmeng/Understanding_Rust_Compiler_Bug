{"sha": "384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg0YzQwMGE4MmY3MDQyMGUzMWZiZGM3YzFiMGI5MzY4ZmM1M2I1Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-28T16:44:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-28T16:44:32Z"}, "message": "except.h (struct eh_region_d): Add use_cxa_end_cleanup.\n\n\t* except.h (struct eh_region_d): Add use_cxa_end_cleanup.\n\t* except.c (gen_eh_region): Set it.\n\t(duplicate_eh_regions_1): Copy it.\n\t* tree-eh.c (lower_resx): Use it to determine which function\n\tto call to resume.\n\n\t* langhooks.h (struct lang_hooks): Add eh_use_cxa_end_cleanup.\n\t* langhooks-def.h (LANG_HOOKS_EH_USE_CXA_END_CLEANUP): New.\n\n\t* builtins.def (BUILT_IN_CXA_END_CLEANUP): New.\n\t* tree.c (build_common_builtin_nodes): Remove parameter.  Build\n\tBUILT_IN_CXA_END_CLEANUP if necessary.\n\t* tree.h (build_common_builtin_nodes): Update decl.\n\n\t* c-common.c (c_define_builtins): Update call to\n\tbuild_common_builtin_nodes.\n\ngcc/ada/\n\t* gcc-interface/utils.c (gnat_install_builtins): Update call to\n\tbuild_common_builtin_nodes.\n\ngcc/cp/\n\t* cp-objcp-common.h (LANG_HOOKS_EH_USE_CXA_END_CLEANUP): New.\n\ngcc/fortran/\n\t* f95-lang.c (gfc_init_builtin_functions): Update call to\n\tbuild_common_builtin_nodes.\n\ngcc/java/\n\t* builtins.c (initialize_builtins): Update call to\n\tbuild_common_builtin_nodes.\n\t* lang.c (LANG_HOOKS_EH_USE_CXA_END_CLEANUP): New.\n\nFrom-SVN: r152241", "tree": {"sha": "96758456da27013ac77e14db7add80d1de6fb85f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96758456da27013ac77e14db7add80d1de6fb85f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/comments", "author": null, "committer": null, "parents": [{"sha": "aa633255e79391140eaff46920861926a35a1eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa633255e79391140eaff46920861926a35a1eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa633255e79391140eaff46920861926a35a1eaa"}], "stats": {"total": 126, "additions": 89, "deletions": 37}, "files": [{"sha": "fa89805ba9fbd53b703a3f589e425e4851a43416", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -1,3 +1,20 @@\n+2009-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* except.h (struct eh_region_d): Add use_cxa_end_cleanup.\n+\t* except.c (gen_eh_region): Set it.\n+\t(duplicate_eh_regions_1): Copy it.\n+\t* tree-eh.c (lower_resx): Use it to determine which function\n+\tto call to resume.\n+\n+\t* langhooks.h (struct lang_hooks): Add eh_use_cxa_end_cleanup.\n+\t* langhooks-def.h (LANG_HOOKS_EH_USE_CXA_END_CLEANUP): New.\n+\t* builtins.def (BUILT_IN_CXA_END_CLEANUP): New.\n+\t* tree.c (build_common_builtin_nodes): Remove parameter.  Build\n+\tBUILT_IN_CXA_END_CLEANUP if necessary.\n+\n+\t* c-common.c (c_define_builtins): Update call to\n+\tbuild_common_builtin_nodes.\n+\n 2009-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* spu.c (get_branch_target): Return NULL for ASM_OPERANDS patterns."}, {"sha": "8e4c061c04bc443bdf0e4664532727dc287cd340", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -1,3 +1,8 @@\n+2009-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc-interface/utils.c (gnat_install_builtins): Update call to\n+\tbuild_common_builtin_nodes.\n+\n 2009-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Filter out"}, {"sha": "7acb2ce2de4ec8343c887eb4890cbe06dc6f20f3", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -5662,7 +5662,7 @@ gnat_install_builtins (void)\n      know about internal specificities and control attributes accordingly, for\n      instance __builtin_alloca vs no-throw and -fstack-check.  We will ignore\n      the generic definition from builtins.def.  */\n-  build_common_builtin_nodes (false);\n+  build_common_builtin_nodes ();\n \n   /* Now, install the target specific builtins, such as the AltiVec family on\n      ppc, and the common set as exposed by builtins.def.  */"}, {"sha": "785eefb0b74f32a8b53b8ac27a9710cece4e2a8f", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -761,6 +761,7 @@ DEF_BUILTIN (BUILT_IN_EMUTLS_REGISTER_COMMON,\n \n /* Exception support.  */\n DEF_BUILTIN_STUB (BUILT_IN_UNWIND_RESUME, \"__builtin_unwind_resume\")\n+DEF_BUILTIN_STUB (BUILT_IN_CXA_END_CLEANUP, \"__builtin_cxa_end_cleanup\")\n DEF_BUILTIN_STUB (BUILT_IN_EH_POINTER, \"__builtin_eh_pointer\")\n DEF_BUILTIN_STUB (BUILT_IN_EH_FILTER, \"__builtin_eh_filter\")\n DEF_BUILTIN_STUB (BUILT_IN_EH_COPY_VALUES, \"__builtin_eh_copy_values\")"}, {"sha": "baa3d35c27f59ba471e764f4d5bde9baf5277fd9", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -4574,7 +4574,7 @@ c_define_builtins (tree va_list_ref_type_node, tree va_list_arg_type_node)\n \n   targetm.init_builtins ();\n \n-  build_common_builtin_nodes (c_dialect_cxx ());\n+  build_common_builtin_nodes ();\n \n   if (flag_mudflap)\n     mudflap_init ();"}, {"sha": "de0a97fd48240cf5f8bc6d23d62f5c75566d5cc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -1,3 +1,7 @@\n+2009-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_EH_USE_CXA_END_CLEANUP): New.\n+\n 2009-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* method.c (make_thunk, make_alias_for): Don't set"}, {"sha": "8f0cdc324e4af51c9b0ff8ee46fa2f42f724cbde", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -142,4 +142,7 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #undef LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE cxx_omp_privatize_by_reference\n \n+#undef LANG_HOOKS_EH_USE_CXA_END_CLEANUP\n+#define LANG_HOOKS_EH_USE_CXA_END_CLEANUP true\n+\n #endif /* GCC_CP_OBJCP_COMMON */"}, {"sha": "bb26bf4dc6f6f7db781825a77046f6a09bc27e5e", "filename": "gcc/except.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -369,6 +369,10 @@ gen_eh_region (enum eh_region_type type, eh_region outer)\n   new_eh->index = VEC_length (eh_region, cfun->eh->region_array);\n   VEC_safe_push (eh_region, gc, cfun->eh->region_array, new_eh);\n \n+  /* Copy the language's notion of whether to use __cxa_end_cleanup.  */\n+  if (targetm.arm_eabi_unwinder && lang_hooks.eh_use_cxa_end_cleanup)\n+    new_eh->use_cxa_end_cleanup = true;\n+\n   return new_eh;\n }\n \n@@ -573,6 +577,9 @@ duplicate_eh_regions_1 (struct duplicate_eh_regions_data *data,\n       EH_LANDING_PAD_NR (new_lp->post_landing_pad) = new_lp->index;\n     }\n \n+  /* Make sure to preserve the original use of __cxa_end_cleanup.  */\n+  new_r->use_cxa_end_cleanup = old_r->use_cxa_end_cleanup;\n+\n   for (old_r = old_r->inner; old_r ; old_r = old_r->next_peer)\n     duplicate_eh_regions_1 (data, old_r, new_r);\n }"}, {"sha": "f1dbf90c2a991fe7e623d7883d9e101f8734aea4", "filename": "gcc/except.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -171,6 +171,10 @@ struct GTY(()) eh_region_d\n      Each region gets its own psuedos so that if there are nested exceptions\n      we do not overwrite the values of the first exception.  */\n   rtx exc_ptr_reg, filter_reg;\n+\n+  /* True if this region should use __cxa_end_cleanup instead\n+     of _Unwind_Resume.  */\n+  bool use_cxa_end_cleanup;\n };\n \n typedef struct eh_landing_pad_d *eh_landing_pad;"}, {"sha": "ab55bd8931d38975a4f78ef935376e097281a86c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -1,3 +1,8 @@\n+2009-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Update call to\n+\tbuild_common_builtin_nodes.\n+\n 2009-09-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* simplify.c (gfc_simplify_acos, gfc_simplify_acosh,"}, {"sha": "5d2846c8890ac84aff89fa2ad9347250c70ec203", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -1131,7 +1131,7 @@ gfc_init_builtin_functions (void)\n \t\t      BUILT_IN_EMUTLS_REGISTER_COMMON,\n \t\t      \"__emutls_register_common\", false);\n \n-  build_common_builtin_nodes (false);\n+  build_common_builtin_nodes ();\n   targetm.init_builtins ();\n }\n "}, {"sha": "5a9f1d6e010c94592f0849d2bf24fe5a87597d6c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -1,3 +1,9 @@\n+2009-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (initialize_builtins): Update call to\n+\tbuild_common_builtin_nodes.\n+\t* lang.c (LANG_HOOKS_EH_USE_CXA_END_CLEANUP): New.\n+\n 2009-09-14  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.c (initialize_builtins): Update call to"}, {"sha": "6e4815beeab2755e9e7a4b2b5bb95741c0e9bebe", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -584,7 +584,7 @@ initialize_builtins (void)\n \t\t  build_function_type_list (ptr_type_node, int_type_node, NULL_TREE),\n \t\t  \"__builtin_return_address\", BUILTIN_NOTHROW);\n \n-  build_common_builtin_nodes (true);\n+  build_common_builtin_nodes ();\n }\n \n /* If the call matches a builtin, return the"}, {"sha": "f1d8f44ce86d30bece4262647f6c2049ebfc6e22", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -164,6 +164,9 @@ struct GTY(()) language_function {\n #undef LANG_HOOKS_EH_PERSONALITY\n #define LANG_HOOKS_EH_PERSONALITY java_eh_personality\n \n+#undef LANG_HOOKS_EH_USE_CXA_END_CLEANUP\n+#define LANG_HOOKS_EH_USE_CXA_END_CLEANUP  true\n+\n /* Each front end provides its own.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "40a4de93d6d34ec2c2bc903b528080657387f01f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -110,6 +110,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing\n #define LANG_HOOKS_EH_PERSONALITY\tlhd_gcc_personality\n #define LANG_HOOKS_EH_RUNTIME_TYPE\tlhd_pass_through_t\n+#define LANG_HOOKS_EH_USE_CXA_END_CLEANUP\tfalse\n \n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n@@ -283,6 +284,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_EXPR_TO_DECL, \\\n   LANG_HOOKS_EH_PERSONALITY, \\\n   LANG_HOOKS_EH_RUNTIME_TYPE, \\\n+  LANG_HOOKS_EH_USE_CXA_END_CLEANUP, \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "b133ea0576311330b4a9150ff69850b5fcadbb15", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -430,6 +430,10 @@ struct lang_hooks\n   /* Map a type to a runtime object to match type.  */\n   tree (*eh_runtime_type) (tree);\n \n+  /* True if this language uses __cxa_end_cleanup when the ARM EABI\n+     is enabled.  */\n+  bool eh_use_cxa_end_cleanup;\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "0f5931e0b75ee8aec7152698b0bb760500f1624b", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -2949,21 +2949,16 @@ lower_resx (basic_block bb, gimple stmt, struct pointer_map_t *mnt_map)\n \t up the call chain.  We resolve this by generating a call to the\n \t _Unwind_Resume library function.  */\n \n-      /* ??? The ARM EABI redefines _Unwind_Resume as __cxa_end_cleanup\n+      /* The ARM EABI redefines _Unwind_Resume as __cxa_end_cleanup\n \t with no arguments for C++ and Java.  Check for that.  */\n-      switch (targetm.arm_eabi_unwinder)\n+      if (src_r->use_cxa_end_cleanup)\n+\t{\n+\t  fn = implicit_built_in_decls[BUILT_IN_CXA_END_CLEANUP];\n+\t  x = gimple_build_call (fn, 0);\n+\t  gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n+\t}\n+      else\n \t{\n-\tdefault:\n-\t  fn = implicit_built_in_decls[BUILT_IN_UNWIND_RESUME];\n-\t  if (TYPE_ARG_TYPES (TREE_TYPE (fn)) == void_list_node)\n-\t    {\n-\t      x = gimple_build_call (fn, 0);\n-\t      gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n-\t      break;\n-\t    }\n-\t  /* FALLTHRU */\n-\n-\tcase 0:\n \t  fn = implicit_built_in_decls[BUILT_IN_EH_POINTER];\n \t  src_nr = build_int_cst (NULL, src_r->index);\n \t  x = gimple_build_call (fn, 1, src_nr);\n@@ -2975,7 +2970,6 @@ lower_resx (basic_block bb, gimple stmt, struct pointer_map_t *mnt_map)\n \t  fn = implicit_built_in_decls[BUILT_IN_UNWIND_RESUME];\n \t  x = gimple_build_call (fn, 1, var);\n \t  gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n-\t  break;\n \t}\n \n       gcc_assert (EDGE_COUNT (bb->succs) == 0);"}, {"sha": "315df903b30f56d9178ecc48cfb1e73c0f4850a5", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -8890,13 +8890,10 @@ local_define_builtin (const char *name, tree type, enum built_in_function code,\n \n /* Call this function after instantiating all builtins that the language\n    front end cares about.  This will build the rest of the builtins that\n-   are relied upon by the tree optimizers and the middle-end.\n-\n-   ENABLE_CXA_END_CLEANUP should be true for C++ and Java, where the ARM\n-   EABI requires a slightly different implementation of _Unwind_Resume.  */\n+   are relied upon by the tree optimizers and the middle-end.  */\n \n void\n-build_common_builtin_nodes (bool enable_cxa_end_cleanup)\n+build_common_builtin_nodes (void)\n {\n   tree tmp, tmp2, ftype;\n \n@@ -9003,23 +9000,23 @@ build_common_builtin_nodes (bool enable_cxa_end_cleanup)\n   local_define_builtin (\"__builtin_profile_func_exit\", ftype,\n \t\t\tBUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\", 0);\n \n-  if (enable_cxa_end_cleanup && targetm.arm_eabi_unwinder)\n+  /* If there's a possibility that we might use the ARM EABI, build the\n+    alternate __cxa_end_cleanup node used to resume from C++ and Java.  */\n+  if (targetm.arm_eabi_unwinder)\n     {\n       ftype = build_function_type (void_type_node, void_list_node);\n-      local_define_builtin (\"__builtin_unwind_resume\", ftype,\n-\t\t\t    BUILT_IN_UNWIND_RESUME,\n+      local_define_builtin (\"__builtin_cxa_end_cleanup\", ftype,\n+\t\t\t    BUILT_IN_CXA_END_CLEANUP,\n \t\t\t    \"__cxa_end_cleanup\", ECF_NORETURN);\n     }\n-  else\n-    {\n-      tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-      ftype = build_function_type (void_type_node, tmp);\n-      local_define_builtin (\"__builtin_unwind_resume\", ftype,\n-\t\t\t    BUILT_IN_UNWIND_RESUME,\n-\t\t\t    (USING_SJLJ_EXCEPTIONS\n-\t\t\t     ? \"_Unwind_SjLj_Resume\" : \"_Unwind_Resume\"),\n-\t\t\t    ECF_NORETURN);\n-    }\n+\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+  ftype = build_function_type (void_type_node, tmp);\n+  local_define_builtin (\"__builtin_unwind_resume\", ftype,\n+\t\t\tBUILT_IN_UNWIND_RESUME,\n+\t\t\t(USING_SJLJ_EXCEPTIONS\n+\t\t\t ? \"_Unwind_SjLj_Resume\" : \"_Unwind_Resume\"),\n+\t\t\tECF_NORETURN);\n \n   /* The exception object and filter values from the runtime.  The argument\n      must be zero before exception lowering, i.e. from the front end.  After"}, {"sha": "a5a22f456433e50c586551ddba6da9471daae105", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384c400a82f70420e31fbdc7c1b0b9368fc53b5b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=384c400a82f70420e31fbdc7c1b0b9368fc53b5b", "patch": "@@ -4949,7 +4949,7 @@ extern int real_minus_onep (const_tree);\n extern void init_ttree (void);\n extern void build_common_tree_nodes (bool, bool);\n extern void build_common_tree_nodes_2 (int);\n-extern void build_common_builtin_nodes (bool);\n+extern void build_common_builtin_nodes (void);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_range_type (tree, tree, tree);\n extern bool subrange_type_for_debug_p (const_tree, tree *, tree *);"}]}