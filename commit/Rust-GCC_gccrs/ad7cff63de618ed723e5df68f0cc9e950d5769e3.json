{"sha": "ad7cff63de618ed723e5df68f0cc9e950d5769e3", "node_id": "C_kwDOANBUbNoAKGFkN2NmZjYzZGU2MThlZDcyM2U1ZGY2OGYwY2M5ZTk1MGQ1NzY5ZTM", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-11T09:20:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-11T13:52:24Z"}, "message": "Move TRUE case first in range-op.cc.\n\nIt's incredibly annoying that some of the BRS_TRUE cases come after\nBRS_FALSE, if only because we're not consistent.  Having random\nordering increases the changes of thinkos when adapting the irange\ncode to floats.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_equal::op1_range): Move BRS_TRUE case up.\n\t(operator_lt::op2_range): Same.\n\t(operator_le::op2_range): Same.\n\t(operator_gt::op2_range): Same.\n\t(operator_ge::op2_range): Same.", "tree": {"sha": "ed823ce9c60368dd33ab8dd8c0032ec8323cd31e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed823ce9c60368dd33ab8dd8c0032ec8323cd31e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad7cff63de618ed723e5df68f0cc9e950d5769e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7cff63de618ed723e5df68f0cc9e950d5769e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7cff63de618ed723e5df68f0cc9e950d5769e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7cff63de618ed723e5df68f0cc9e950d5769e3/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa35c7e2974a22b2107fa378895c3069fe07ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa35c7e2974a22b2107fa378895c3069fe07ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa35c7e2974a22b2107fa378895c3069fe07ff3"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "4d5a033dfa5fb1c07d58ae552e546fdc6c5c28b8", "filename": "gcc/range-op.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7cff63de618ed723e5df68f0cc9e950d5769e3/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7cff63de618ed723e5df68f0cc9e950d5769e3/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=ad7cff63de618ed723e5df68f0cc9e950d5769e3", "patch": "@@ -531,6 +531,11 @@ operator_equal::op1_range (irange &r, tree type,\n {\n   switch (get_bool_state (r, lhs, type))\n     {\n+    case BRS_TRUE:\n+      // If it's true, the result is the same as OP2.\n+      r = op2;\n+      break;\n+\n     case BRS_FALSE:\n       // If the result is false, the only time we know anything is\n       // if OP2 is a constant.\n@@ -543,11 +548,6 @@ operator_equal::op1_range (irange &r, tree type,\n \tr.set_varying (type);\n       break;\n \n-    case BRS_TRUE:\n-      // If it's true, the result is the same as OP2.\n-      r = op2;\n-      break;\n-\n     default:\n       break;\n     }\n@@ -841,14 +841,14 @@ operator_lt::op2_range (irange &r, tree type,\n {\n   switch (get_bool_state (r, lhs, type))\n     {\n-    case BRS_FALSE:\n-      build_le (r, type, op1.upper_bound ());\n-      break;\n-\n     case BRS_TRUE:\n       build_gt (r, type, op1.lower_bound ());\n       break;\n \n+    case BRS_FALSE:\n+      build_le (r, type, op1.upper_bound ());\n+      break;\n+\n     default:\n       break;\n     }\n@@ -952,14 +952,14 @@ operator_le::op2_range (irange &r, tree type,\n {\n   switch (get_bool_state (r, lhs, type))\n     {\n-    case BRS_FALSE:\n-      build_lt (r, type, op1.upper_bound ());\n-      break;\n-\n     case BRS_TRUE:\n       build_ge (r, type, op1.lower_bound ());\n       break;\n \n+    case BRS_FALSE:\n+      build_lt (r, type, op1.upper_bound ());\n+      break;\n+\n     default:\n       break;\n     }\n@@ -1062,14 +1062,14 @@ operator_gt::op2_range (irange &r, tree type,\n {\n   switch (get_bool_state (r, lhs, type))\n     {\n-    case BRS_FALSE:\n-      build_ge (r, type, op1.lower_bound ());\n-      break;\n-\n     case BRS_TRUE:\n       build_lt (r, type, op1.upper_bound ());\n       break;\n \n+    case BRS_FALSE:\n+      build_ge (r, type, op1.lower_bound ());\n+      break;\n+\n     default:\n       break;\n     }\n@@ -1173,14 +1173,14 @@ operator_ge::op2_range (irange &r, tree type,\n {\n   switch (get_bool_state (r, lhs, type))\n     {\n-    case BRS_FALSE:\n-      build_gt (r, type, op1.lower_bound ());\n-      break;\n-\n     case BRS_TRUE:\n       build_le (r, type, op1.upper_bound ());\n       break;\n \n+    case BRS_FALSE:\n+      build_gt (r, type, op1.lower_bound ());\n+      break;\n+\n     default:\n       break;\n     }"}]}