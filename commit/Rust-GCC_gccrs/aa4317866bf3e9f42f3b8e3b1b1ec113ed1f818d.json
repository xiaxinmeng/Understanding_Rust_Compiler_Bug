{"sha": "aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0MzE3ODY2YmYzZTlmNDJmM2I4ZTNiMWIxZWMxMTNlZDFmODE4ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-11T14:37:19Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-11T14:38:54Z"}, "message": "i386: Improve basic vectorized V2SFmode operations [PR95046]\n\nUse plain \"v\" constraint for AVX alternatives and add \"prefix\" attribute.\n\ngcc/ChangeLog:\n\n\tPR target/95046\n\t* config/i386/mmx.md (mmx_addv2sf3): Use \"v\" constraint\n\tinstead of \"Yv\" for AVX alternatives.  Add \"prefix\" attribute.\n\t(*mmx_addv2sf3): Ditto.\n\t(*mmx_subv2sf3): Ditto.\n\t(*mmx_mulv2sf3): Ditto.\n\t(*mmx_<code>v2sf3): Ditto.\n\t(mmx_ieee_<ieee_maxmin>v2sf3): Ditto.", "tree": {"sha": "58c807fb5f28b95d0995241f27ba180bd0751890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c807fb5f28b95d0995241f27ba180bd0751890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248e357f6941fe9409658386dc9b86b75dfd96c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248e357f6941fe9409658386dc9b86b75dfd96c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248e357f6941fe9409658386dc9b86b75dfd96c6"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "acf6da24c3268cbe5853e2892755e733dc297418", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "patch": "@@ -14,6 +14,17 @@\n \t(*csinv3_uxtw_insn3): New.\n \t* config/aarch64/iterators.md (neg_not_cs): New.\n \n+2020-05-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* config/i386/mmx.md (mmx_addv2sf3): Use \"v\" constraint\n+\tinstead of \"Yv\" for AVX alternatives.  Add \"prefix\" attribute.\n+\t(*mmx_addv2sf3): Ditto.\n+\t(*mmx_subv2sf3): Ditto.\n+\t(*mmx_mulv2sf3): Ditto.\n+\t(*mmx_<code>v2sf3): Ditto.\n+\t(mmx_ieee_<ieee_maxmin>v2sf3): Ditto.\n+\n 2020-05-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95046"}, {"sha": "7d76c631a770b7ce7799665b2e9ec19f8bf120e4", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "patch": "@@ -255,10 +255,10 @@\n   \"ix86_fixup_binary_operands_no_copy (PLUS, V2SFmode, operands);\")\n \n (define_insn \"*mmx_addv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,v\")\n \t(plus:V2SF\n-\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n-\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,v\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,v\")))]\n   \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (PLUS, V2SFmode, operands)\"\n   \"@\n@@ -269,6 +269,7 @@\n    (set_attr \"mmx_isa\" \"native,*,*\")\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"prefix\" \"*,orig,vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n (define_expand \"mmx_subv2sf3\"\n@@ -292,10 +293,10 @@\n   \"ix86_fixup_binary_operands_no_copy (MINUS, V2SFmode, operands);\")\n \n (define_insn \"*mmx_subv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y,x,Yv\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y,x,v\")\n         (minus:V2SF\n-\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"0,ym,0,Yv\")\n-\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,0,x,Yv\")))]\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"0,ym,0,v\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,0,x,v\")))]\n   \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -307,6 +308,7 @@\n    (set_attr \"mmx_isa\" \"native,native,*,*\")\n    (set_attr \"type\" \"mmxadd,mmxadd,sseadd,sseadd\")\n    (set_attr \"prefix_extra\" \"1,1,*,*\")\n+   (set_attr \"prefix\" \"*,*,orig,vex\")\n    (set_attr \"mode\" \"V2SF,V2SF,V4SF,V4SF\")])\n \n (define_expand \"mmx_mulv2sf3\"\n@@ -325,10 +327,10 @@\n   \"ix86_fixup_binary_operands_no_copy (MULT, V2SFmode, operands);\")\n \n (define_insn \"*mmx_mulv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,v\")\n \t(mult:V2SF\n-\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n-\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,v\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,v\")))]\n   \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (MULT, V2SFmode, operands)\"\n   \"@\n@@ -338,8 +340,9 @@\n   [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n    (set_attr \"mmx_isa\" \"native,*,*\")\n    (set_attr \"type\" \"mmxmul,ssemul,ssemul\")\n-   (set_attr \"prefix_extra\" \"1,*,*\")\n    (set_attr \"btver2_decode\" \"*,direct,double\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"prefix\" \"*,orig,vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n (define_expand \"mmx_<code>v2sf3\"\n@@ -383,10 +386,10 @@\n ;; are undefined in this condition, we're certain this is correct.\n \n (define_insn \"*mmx_<code>v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,v\")\n         (smaxmin:V2SF\n-\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n-\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,v\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,v\")))]\n   \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n   \"@\n@@ -398,6 +401,7 @@\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"btver2_sse_attr\" \"*,maxmin,maxmin\")\n    (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"prefix\" \"*,orig,vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n ;; These versions of the min/max patterns implement exactly the operations\n@@ -407,10 +411,10 @@\n ;; presence of -0.0 and NaN.\n \n (define_insn \"mmx_ieee_<ieee_maxmin>v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,v\")\n         (unspec:V2SF\n-\t  [(match_operand:V2SF 1 \"register_operand\" \"0,0,Yv\")\n-\t   (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")]\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"0,0,v\")\n+\t   (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,v\")]\n \t  IEEE_MAXMIN))]\n   \"TARGET_3DNOW || TARGET_MMX_WITH_SSE\"\n   \"@\n@@ -422,6 +426,7 @@\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"btver2_sse_attr\" \"*,maxmin,maxmin\")\n    (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"prefix\" \"*,orig,vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n (define_insn \"mmx_rcpv2sf2\""}]}