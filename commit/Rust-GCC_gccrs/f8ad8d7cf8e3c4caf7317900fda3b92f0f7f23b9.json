{"sha": "f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhZDhkN2NmOGUzYzRjYWY3MzE3OTAwZmRhM2I5MmYwZjdmMjNiOQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-03-20T23:08:57Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-03-20T23:08:57Z"}, "message": "emit-rtl.c (set_mem_attributes_minus_bitpos): Set MEM_POINTER flag.\n\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Set MEM_POINTER\n\tflag.\n\t* explow.c (force_not_mem): Set REG_POINTER flag according to\n\tMEM_POINTER one.\n\t* rtl.h (MEM_POINTER): New macro.\n\t(struct rtx_def): Use integrated for MEM_SCALAR_P and frame_related\n\tfor MEM_POINTER.\n\nFrom-SVN: r79764", "tree": {"sha": "433e408c11da99bc70ed380b6638087bd38c1d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433e408c11da99bc70ed380b6638087bd38c1d32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/comments", "author": null, "committer": null, "parents": [{"sha": "687c3ea538f70e6a198a11a3999a23b318759e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687c3ea538f70e6a198a11a3999a23b318759e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687c3ea538f70e6a198a11a3999a23b318759e27"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "46a3a9e7c9efb619ea5a08866fae6832b4a331f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "patch": "@@ -1,3 +1,13 @@\n+2004-03-20  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Set MEM_POINTER\n+\tflag.\n+\t* explow.c (force_not_mem): Set REG_POINTER flag according to\n+\tMEM_POINTER one.\n+\t* rtl.h (MEM_POINTER): New macro.\n+\t(struct rtx_def): Use integrated for MEM_SCALAR_P and frame_related\n+\tfor MEM_POINTER.\n+\n 2004-03-20  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/13889"}, {"sha": "6d18b78209423aeca395ebc3c8480e1e3ec1bac2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "patch": "@@ -1512,6 +1512,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n     |= ((lang_hooks.honor_readonly\n \t && (TYPE_READONLY (type) || TREE_READONLY (t)))\n \t|| (! TYPE_P (t) && TREE_CONSTANT (t)));\n+  MEM_POINTER (ref) = POINTER_TYPE_P (type);\n \n   /* If we are making an object of this type, or if this is a DECL, we know\n      that it is a scalar if the type is not an aggregate.  */"}, {"sha": "b3c82b836fd4cc9be33c3bb6ce516453930164de", "filename": "gcc/explow.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "patch": "@@ -770,6 +770,10 @@ force_not_mem (rtx x)\n     return x;\n \n   temp = gen_reg_rtx (GET_MODE (x));\n+\n+  if (MEM_POINTER (x))\n+    REG_POINTER (temp) = 1;\n+\n   emit_move_insn (temp, x);\n   return temp;\n }"}, {"sha": "26466a954e4ee5ee33a49b2cc666b436654455f0", "filename": "gcc/rtl.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f8ad8d7cf8e3c4caf7317900fda3b92f0f7f23b9", "patch": "@@ -243,14 +243,14 @@ struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n   /* Nonzero if this rtx came from procedure integration.\n      1 in a REG or PARALLEL means this rtx refers to the return value\n      of the current function.\n-     1 in a SYMBOL_REF if the symbol is weak.  */\n+     1 in a SYMBOL_REF if the symbol is weak.\n+     1 in a MEM if the MEM refers to a scalar, rather than a member of\n+     an aggregate.  */\n   unsigned integrated : 1;\n   /* 1 in an INSN or a SET if this rtx is related to the call frame,\n      either changing how we compute the frame address or saving and\n      restoring registers in the prologue and epilogue.\n-     1 in a MEM if the MEM refers to a scalar, rather than a member of\n-     an aggregate.\n-     1 in a REG if the register is a pointer.\n+     1 in a REG or MEM if it is a pointer.\n      1 in a SYMBOL_REF if it addresses something in the per-function\n      constant string pool.  */\n   unsigned frame_related : 1;\n@@ -1136,6 +1136,10 @@ enum label_kind\n #define REG_POINTER(RTX)\t\t\t\t\t\t\\\n   (RTL_FLAG_CHECK1(\"REG_POINTER\", (RTX), REG)->frame_related)\n \n+/* 1 if RTX is a mem that holds a pointer value.  */\n+#define MEM_POINTER(RTX)\t\t\t\t\t\t\\\n+  (RTL_FLAG_CHECK1(\"MEM_POINTER\", (RTX), MEM)->frame_related)\n+\n /* 1 if the given register REG corresponds to a hard register.  */\n #define HARD_REGISTER_P(REG) (HARD_REGISTER_NUM_P (REGNO (REG)))\n \n@@ -1251,7 +1255,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* 1 if RTX is a mem that refers to a scalar.  If zero, RTX may or may\n    not refer to a scalar.  */\n #define MEM_SCALAR_P(RTX)\t\t\t\t\t\t\\\n-  (RTL_FLAG_CHECK1(\"MEM_SCALAR_P\", (RTX), MEM)->frame_related)\n+  (RTL_FLAG_CHECK1(\"MEM_SCALAR_P\", (RTX), MEM)->integrated)\n \n /* 1 if RTX is a mem that cannot trap.  */\n #define MEM_NOTRAP_P(RTX) \\"}]}