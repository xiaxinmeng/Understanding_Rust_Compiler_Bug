{"sha": "b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM5ZTEyNDAzY2FlMDg3YTBlMGRkNjhmOWQwYzE1OTllZTVjNTFlMw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-01-09T20:03:01Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-01-09T20:03:01Z"}, "message": "Fix compile time warnings about signed vs unsigned constants\n\nFrom-SVN: r31298", "tree": {"sha": "9da48901ff3ae006fffeef6d8347d6f8cbcbde1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da48901ff3ae006fffeef6d8347d6f8cbcbde1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/comments", "author": null, "committer": null, "parents": [{"sha": "3a5a42822354d37589ddf16563f33e1114c71bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a42822354d37589ddf16563f33e1114c71bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5a42822354d37589ddf16563f33e1114c71bfa"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "c6979ada84ec0249e329dd184a5bab0bc5951994", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "patch": "@@ -1,3 +1,10 @@\n+2000-01-09  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.c: Fix compile time warnings about signed vs\n+\tunsigned constants.\n+\t* config/arm/arm.h: Fix compile time warnings about signed vs\n+\tunsigned constants.\n+\n 2000-01-09  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.c (output_return_instruction): Use `ldr' rather"}, {"sha": "78ff84e42bef64beb1c26045cad30346caf75104", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "patch": "@@ -658,10 +658,10 @@ const_ok_for_arm (i)\n \n   /* For machines with >32 bit HOST_WIDE_INT, the bits above bit 31 must \n      be all zero, or all one.  */\n-  if ((i & ~(unsigned HOST_WIDE_INT) 0xffffffff) != 0\n-      && ((i & ~(unsigned HOST_WIDE_INT) 0xffffffff) \n+  if ((i & ~(unsigned HOST_WIDE_INT) 0xffffffffUL) != 0\n+      && ((i & ~(unsigned HOST_WIDE_INT) 0xffffffffUL) \n \t  != ((~(unsigned HOST_WIDE_INT) 0)\n-\t      & ~(unsigned HOST_WIDE_INT) 0xffffffff)))\n+\t      & ~(unsigned HOST_WIDE_INT) 0xffffffffUL)))\n     return FALSE;\n   \n   /* Fast return for 0 and powers of 2 */\n@@ -670,11 +670,11 @@ const_ok_for_arm (i)\n \n   do\n     {\n-      if ((i & mask & (unsigned HOST_WIDE_INT) 0xffffffff) == 0)\n+      if ((i & mask & (unsigned HOST_WIDE_INT) 0xffffffffUL) == 0)\n         return TRUE;\n       mask =\n-\t  (mask << 2) | ((mask & (unsigned HOST_WIDE_INT) 0xffffffff)\n-\t\t\t >> (32 - 2)) | ~((unsigned HOST_WIDE_INT) 0xffffffff);\n+\t  (mask << 2) | ((mask & (unsigned HOST_WIDE_INT) 0xffffffffUL)\n+\t\t\t >> (32 - 2)) | ~((unsigned HOST_WIDE_INT) 0xffffffffUL);\n     } while (mask != ~(unsigned HOST_WIDE_INT) 0xFF);\n \n   return FALSE;\n@@ -795,7 +795,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n   int set_zero_bit_copies = 0;\n   int insns = 0;\n   unsigned HOST_WIDE_INT temp1, temp2;\n-  unsigned HOST_WIDE_INT remainder = val & 0xffffffff;\n+  unsigned HOST_WIDE_INT remainder = val & 0xffffffffUL;\n \n   /* find out which operations are safe for a given CODE.  Also do a quick\n      check for degenerate cases; these can occur when DImode operations\n@@ -814,7 +814,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       break;\n \n     case IOR:\n-      if (remainder == 0xffffffff)\n+      if (remainder == 0xffffffffUL)\n \t{\n \t  if (generate)\n \t    emit_insn (gen_rtx_SET (VOIDmode, target,\n@@ -838,7 +838,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t    emit_insn (gen_rtx_SET (VOIDmode, target, const0_rtx));\n \t  return 1;\n \t}\n-      if (remainder == 0xffffffff)\n+      if (remainder == 0xffffffffUL)\n \t{\n \t  if (reload_completed && rtx_equal_p (target, source))\n \t    return 0;\n@@ -858,7 +858,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t    emit_insn (gen_rtx_SET (VOIDmode, target, source));\n \t  return 1;\n \t}\n-      if (remainder == 0xffffffff)\n+      if (remainder == 0xffffffffUL)\n \t{\n \t  if (generate)\n \t    emit_insn (gen_rtx_SET (VOIDmode, target,\n@@ -988,15 +988,15 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t word.  We only look for the simplest cases, to do more would cost\n \t too much.  Be careful, however, not to generate this when the\n \t alternative would take fewer insns.  */\n-      if (val & 0xffff0000)\n+      if (val & 0xffff0000UL)\n \t{\n-\t  temp1 = remainder & 0xffff0000;\n+\t  temp1 = remainder & 0xffff0000UL;\n \t  temp2 = remainder & 0x0000ffff;\n \n \t  /* Overlaps outside this range are best done using other methods. */\n \t  for (i = 9; i < 24; i++)\n \t    {\n-\t      if ((((temp2 | (temp2 << i)) & 0xffffffff) == remainder)\n+\t      if ((((temp2 | (temp2 << i)) & 0xffffffffUL) == remainder)\n \t\t  && ! const_ok_for_arm (temp2))\n \t\t{\n \t\t  rtx new_src = (subtargets\n@@ -1134,11 +1134,11 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       /* See if two shifts will do 2 or more insn's worth of work.  */\n       if (clear_sign_bit_copies >= 16 && clear_sign_bit_copies < 24)\n \t{\n-\t  HOST_WIDE_INT shift_mask = ((0xffffffff \n+\t  HOST_WIDE_INT shift_mask = ((0xffffffffUL \n \t\t\t\t       << (32 - clear_sign_bit_copies))\n-\t\t\t\t      & 0xffffffff);\n+\t\t\t\t      & 0xffffffffUL);\n \n-\t  if ((remainder | shift_mask) != 0xffffffff)\n+\t  if ((remainder | shift_mask) != 0xffffffffUL)\n \t    {\n \t      if (generate)\n \t\t{\n@@ -1171,7 +1171,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t{\n \t  HOST_WIDE_INT shift_mask = (1 << clear_zero_bit_copies) - 1;\n \t  \n-\t  if ((remainder | shift_mask) != 0xffffffff)\n+\t  if ((remainder | shift_mask) != 0xffffffffUL)\n \t    {\n \t      if (generate)\n \t\t{\n@@ -1213,9 +1213,9 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       num_bits_set++;\n \n   if (code == AND || (can_invert && num_bits_set > 16))\n-    remainder = (~remainder) & 0xffffffff;\n+    remainder = (~remainder) & 0xffffffffUL;\n   else if (code == PLUS && num_bits_set > 16)\n-    remainder = (-remainder) & 0xffffffff;\n+    remainder = (-remainder) & 0xffffffffUL;\n   else\n     {\n       can_invert = 0;\n@@ -1809,7 +1809,7 @@ arm_rtx_costs (x, code)\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n \t{\n \t  unsigned HOST_WIDE_INT i = (INTVAL (XEXP (x, 1))\n-\t\t\t\t      & (unsigned HOST_WIDE_INT) 0xffffffff);\n+\t\t\t\t      & (unsigned HOST_WIDE_INT) 0xffffffffUL);\n \t  int add_cost = const_ok_for_arm (i) ? 4 : 8;\n \t  int j;\n \t  /* Tune as appropriate */ \n@@ -3764,9 +3764,9 @@ arm_reload_in_hi (operands)\n       if (lo == 4095)\n \tlo &= 0x7ff;\n \n-      hi = ((((offset - lo) & (HOST_WIDE_INT) 0xFFFFFFFF)\n-\t     ^ (HOST_WIDE_INT) 0x80000000)\n-\t    - (HOST_WIDE_INT) 0x80000000);\n+      hi = ((((offset - lo) & (HOST_WIDE_INT) 0xFFFFFFFFUL)\n+\t     ^ (HOST_WIDE_INT) 0x80000000UL)\n+\t    - (HOST_WIDE_INT) 0x80000000UL);\n \n       if (hi + lo != offset)\n \tabort ();\n@@ -3910,9 +3910,9 @@ arm_reload_out_hi (operands)\n       if (lo == 4095)\n \tlo &= 0x7ff;\n \n-      hi = ((((offset - lo) & (HOST_WIDE_INT) 0xFFFFFFFF)\n-\t     ^ (HOST_WIDE_INT) 0x80000000)\n-\t    - (HOST_WIDE_INT) 0x80000000);\n+      hi = ((((offset - lo) & (HOST_WIDE_INT) 0xFFFFFFFFUL)\n+\t     ^ (HOST_WIDE_INT) 0x80000000UL)\n+\t    - (HOST_WIDE_INT) 0x80000000UL);\n \n       if (hi + lo != offset)\n \tabort ();"}, {"sha": "577cbe88f7d12caccbf0b60cd0d90e1719ced900", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39e12403cae087a0e0dd68f9d0c1599ee5c51e3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b39e12403cae087a0e0dd68f9d0c1599ee5c51e3", "patch": "@@ -2041,10 +2041,10 @@ extern struct rtx_def * arm_compare_op1;\n \n #define ARM_SIGN_EXTEND(x)  ((HOST_WIDE_INT)\t\t\\\n   (HOST_BITS_PER_WIDE_INT <= 32 ? (x)\t\t\t\\\n-   : (((x) & (unsigned HOST_WIDE_INT) 0xffffffff) |\t\\\n-      (((x) & (unsigned HOST_WIDE_INT) 0x80000000)\t\\\n+   : (((x) & (unsigned HOST_WIDE_INT) 0xffffffffUL) |\t\\\n+      (((x) & (unsigned HOST_WIDE_INT) 0x80000000UL)\t\\\n        ? ((~ (HOST_WIDE_INT) 0)\t\t\t\t\\\n-\t  & ~ (unsigned HOST_WIDE_INT) 0xffffffff)\t\\\n+\t  & ~ (unsigned HOST_WIDE_INT) 0xffffffffUL)\t\\\n        : 0))))\n \n /* Output the address of an operand.  */"}]}