{"sha": "d42b75599229d4a0e36fddae2931feff40ae7c03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyYjc1NTk5MjI5ZDRhMGUzNmZkZGFlMjkzMWZlZmY0MGFlN2MwMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-21T21:34:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-21T21:34:12Z"}, "message": "tree.c (verify_type_variant): Skip TYPE_SIZE and TYPE_SIZE_UNIT if they are both PLACEHOLDER_EXPRs.\n\n\t* tree.c (verify_type_variant): Skip TYPE_SIZE and TYPE_SIZE_UNIT if\n\tthey are both PLACEHOLDER_EXPRs.\nada/\n\t* gcc-interface/decl.c (set_nonaliased_component_on_array_type): New\n\tfunction.\n\t(set_reverse_storage_order_on_array_type): Likewise.\n\t(gnat_to_gnu_entity) <E_Array_Type>: Call them to set the flags.\n\t<E_Array_Subtype>: Likewise.\n\t<E_String_Literal_Subtype>: Likewise.\n\t(substitute_in_type) <ARRAY_TYPE>: Likewise.\n\t* gcc-interface/utils.c (gnat_pushdecl): Always create a variant for\n\tthe DECL_ORIGINAL_TYPE of a type.\n\nFrom-SVN: r237658", "tree": {"sha": "e7b0e434edc72f983800394d5804a843fe014a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7b0e434edc72f983800394d5804a843fe014a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d42b75599229d4a0e36fddae2931feff40ae7c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42b75599229d4a0e36fddae2931feff40ae7c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42b75599229d4a0e36fddae2931feff40ae7c03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42b75599229d4a0e36fddae2931feff40ae7c03/comments", "author": null, "committer": null, "parents": [{"sha": "5cd0a74a915cbd63653a8332c2a54c13bb33fbf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd0a74a915cbd63653a8332c2a54c13bb33fbf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd0a74a915cbd63653a8332c2a54c13bb33fbf4"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "ff7bf8f867465fa029fc2e6b1ebb50cebcbbdd81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d42b75599229d4a0e36fddae2931feff40ae7c03", "patch": "@@ -1,3 +1,8 @@\n+2016-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.c (verify_type_variant): Skip TYPE_SIZE and TYPE_SIZE_UNIT if\n+\tthey are both PLACEHOLDER_EXPRs.\n+\n 2016-06-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* stor-layout.c (layout_type): Move setting complex MODE to"}, {"sha": "1d605212934a1a88eba0a08c867c676077d02b02", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d42b75599229d4a0e36fddae2931feff40ae7c03", "patch": "@@ -1,3 +1,15 @@\n+2016-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (set_nonaliased_component_on_array_type): New\n+\tfunction.\n+\t(set_reverse_storage_order_on_array_type): Likewise.\n+\t(gnat_to_gnu_entity) <E_Array_Type>: Call them to set the flags.\n+\t<E_Array_Subtype>: Likewise.\n+\t<E_String_Literal_Subtype>: Likewise.\n+\t(substitute_in_type) <ARRAY_TYPE>: Likewise.\n+\t* gcc-interface/utils.c (gnat_pushdecl): Always create a variant for\n+\tthe DECL_ORIGINAL_TYPE of a type.\n+\n 2016-06-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* make.adb, gnatbind.adb, g-socket.adb, sem_ch13.adb: Minor"}, {"sha": "96f484191285c472fa57b031a0416929f7f3c674", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=d42b75599229d4a0e36fddae2931feff40ae7c03", "patch": "@@ -206,6 +206,8 @@ static tree gnat_to_gnu_subprog_type (Entity_Id, bool, bool, tree *);\n static tree gnat_to_gnu_field (Entity_Id, tree, int, bool, bool);\n static tree gnu_ext_name_for_subprog (Entity_Id, tree);\n static tree change_qualified_type (tree, int);\n+static void set_nonaliased_component_on_array_type (tree);\n+static void set_reverse_storage_order_on_array_type (tree);\n static bool same_discriminant_p (Entity_Id, Entity_Id);\n static bool array_type_has_nonaliased_component (tree, Entity_Id);\n static bool compile_time_known_address_p (Node_Id);\n@@ -2265,12 +2267,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tfor (index = ndim - 1; index >= 0; index--)\n \t  {\n \t    tem = build_nonshared_array_type (tem, gnu_index_types[index]);\n-\t    if (index == ndim - 1)\n-\t      TYPE_REVERSE_STORAGE_ORDER (tem)\n-\t\t= Reverse_Storage_Order (gnat_entity);\n \t    TYPE_MULTI_ARRAY_P (tem) = (index > 0);\n+\t    TYPE_CONVENTION_FORTRAN_P (tem) = convention_fortran_p;\n+\t    if (index == ndim - 1 && Reverse_Storage_Order (gnat_entity))\n+\t      set_reverse_storage_order_on_array_type (tem);\n \t    if (array_type_has_nonaliased_component (tem, gnat_entity))\n-\t      TYPE_NONALIASED_COMPONENT (tem) = 1;\n+\t      set_nonaliased_component_on_array_type (tem);\n \t  }\n \n \t/* If an alignment is specified, use it if valid.  But ignore it\n@@ -2287,8 +2289,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      TYPE_USER_ALIGN (tem) = 1;\n \t  }\n \n-\tTYPE_CONVENTION_FORTRAN_P (tem) = convention_fortran_p;\n-\n \t/* Tag top-level ARRAY_TYPE nodes for packed arrays and their\n \t   implementation types as such so that the debug information back-end\n \t   can output the appropriate description for them.  */\n@@ -2651,12 +2651,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    {\n \t      gnu_type = build_nonshared_array_type (gnu_type,\n \t\t\t\t\t\t     gnu_index_types[index]);\n-\t      if (index == ndim - 1)\n-\t\tTYPE_REVERSE_STORAGE_ORDER (gnu_type)\n-\t\t  = Reverse_Storage_Order (gnat_entity);\n \t      TYPE_MULTI_ARRAY_P (gnu_type) = (index > 0);\n+\t      TYPE_CONVENTION_FORTRAN_P (gnu_type) = convention_fortran_p;\n+\t      if (index == ndim - 1 && Reverse_Storage_Order (gnat_entity))\n+\t\tset_reverse_storage_order_on_array_type (gnu_type);\n \t      if (array_type_has_nonaliased_component (gnu_type, gnat_entity))\n-\t\tTYPE_NONALIASED_COMPONENT (gnu_type) = 1;\n+\t\tset_nonaliased_component_on_array_type (gnu_type);\n \t    }\n \n \t  /* Strip the ___XP suffix for standard DWARF.  */\n@@ -2764,7 +2764,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t}\n \t    }\n \n-\t  TYPE_CONVENTION_FORTRAN_P (gnu_type) = convention_fortran_p;\n \t  TYPE_PACKED_ARRAY_TYPE_P (gnu_type)\n \t    = (Is_Packed_Array_Impl_Type (gnat_entity)\n \t       && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)));\n@@ -2932,7 +2931,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t\t\t\t(Component_Type (gnat_entity)),\n \t\t\t\t\tgnu_index_type);\n \tif (array_type_has_nonaliased_component (gnu_type, gnat_entity))\n-\t  TYPE_NONALIASED_COMPONENT (gnu_type) = 1;\n+\t  set_nonaliased_component_on_array_type (gnu_type);\n \trelate_alias_sets (gnu_type, gnu_string_type, ALIAS_SET_COPY);\n       }\n       break;\n@@ -6223,6 +6222,26 @@ change_qualified_type (tree type, int type_quals)\n   return build_qualified_type (type, TYPE_QUALS (type) | type_quals);\n }\n \n+/* Set TYPE_NONALIASED_COMPONENT on an array type built by means of\n+   build_nonshared_array_type.  */\n+\n+static void\n+set_nonaliased_component_on_array_type (tree type)\n+{\n+  TYPE_NONALIASED_COMPONENT (type) = 1;\n+  TYPE_NONALIASED_COMPONENT (TYPE_CANONICAL (type)) = 1;\n+}\n+\n+/* Set TYPE_REVERSE_STORAGE_ORDER on an array type built by means of\n+   build_nonshared_array_type.  */\n+\n+static void\n+set_reverse_storage_order_on_array_type (tree type)\n+{\n+  TYPE_REVERSE_STORAGE_ORDER (type) = 1;\n+  TYPE_REVERSE_STORAGE_ORDER (TYPE_CANONICAL (type)) = 1;\n+}\n+\n /* Return true if DISCR1 and DISCR2 represent the same discriminant.  */\n \n static bool\n@@ -9262,9 +9281,12 @@ substitute_in_type (tree t, tree f, tree r)\n \tSET_TYPE_MODE (nt, TYPE_MODE (t));\n \tTYPE_SIZE (nt) = SUBSTITUTE_IN_EXPR (TYPE_SIZE (t), f, r);\n \tTYPE_SIZE_UNIT (nt) = SUBSTITUTE_IN_EXPR (TYPE_SIZE_UNIT (t), f, r);\n-\tTYPE_NONALIASED_COMPONENT (nt) = TYPE_NONALIASED_COMPONENT (t);\n \tTYPE_MULTI_ARRAY_P (nt) = TYPE_MULTI_ARRAY_P (t);\n \tTYPE_CONVENTION_FORTRAN_P (nt) = TYPE_CONVENTION_FORTRAN_P (t);\n+\tif (TYPE_REVERSE_STORAGE_ORDER (t))\n+\t  set_reverse_storage_order_on_array_type (nt);\n+\tif (TYPE_NONALIASED_COMPONENT (t))\n+\t  set_nonaliased_component_on_array_type (nt);\n \treturn nt;\n       }\n "}, {"sha": "8e4f863825888ed3b24c746f25a6f795bb1e049f", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=d42b75599229d4a0e36fddae2931feff40ae7c03", "patch": "@@ -789,24 +789,11 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t\t   || TREE_CODE (t) == POINTER_TYPE\n \t\t   || TYPE_IS_FAT_POINTER_P (t)))\n \t{\n-\t  tree tt;\n-\t  /* ??? Copy and original type are not supposed to be variant but we\n-\t     really need a variant for the placeholder machinery to work.  */\n-\t  if (TYPE_IS_FAT_POINTER_P (t))\n-\t    tt = build_variant_type_copy (t);\n-\t  else\n-\t    {\n-\t      /* TYPE_NEXT_PTR_TO is a chain of main variants.  */\n-\t      tt = build_distinct_type_copy (TYPE_MAIN_VARIANT (t));\n-\t      if (TREE_CODE (t) == POINTER_TYPE)\n-\t\tTYPE_NEXT_PTR_TO (TYPE_MAIN_VARIANT (t)) = tt;\n-\t      tt = build_qualified_type (tt, TYPE_QUALS (t));\n-\t    }\n+\t  tree tt = build_variant_type_copy (t);\n \t  TYPE_NAME (tt) = decl;\n \t  defer_or_set_type_context (tt,\n \t\t\t\t     DECL_CONTEXT (decl),\n \t\t\t\t     deferred_decl_context);\n-\t  TREE_USED (tt) = TREE_USED (t);\n \t  TREE_TYPE (decl) = tt;\n \t  if (TYPE_NAME (t)\n \t      && TREE_CODE (TYPE_NAME (t)) == TYPE_DECL"}, {"sha": "bc60190b33925ac4ea0890fddbe1871ff9de9066", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42b75599229d4a0e36fddae2931feff40ae7c03/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d42b75599229d4a0e36fddae2931feff40ae7c03", "patch": "@@ -13220,9 +13220,13 @@ verify_type_variant (const_tree t, tree tv)\n \n   if (COMPLETE_TYPE_P (t))\n     {\n-      verify_variant_match (TYPE_SIZE);\n       verify_variant_match (TYPE_MODE);\n-      if (TYPE_SIZE_UNIT (t) != TYPE_SIZE_UNIT (tv)\n+      if (TREE_CODE (TYPE_SIZE (t)) != PLACEHOLDER_EXPR\n+\t  && TREE_CODE (TYPE_SIZE (tv)) != PLACEHOLDER_EXPR)\n+\tverify_variant_match (TYPE_SIZE);\n+      if (TREE_CODE (TYPE_SIZE_UNIT (t)) != PLACEHOLDER_EXPR\n+\t  && TREE_CODE (TYPE_SIZE_UNIT (tv)) != PLACEHOLDER_EXPR\n+\t  && TYPE_SIZE_UNIT (t) != TYPE_SIZE_UNIT (tv)\n \t  /* FIXME: ideally we should compare pointer equality, but java FE\n \t     produce variants where size is INTEGER_CST of different type (int\n \t     wrt size_type) during libjava biuld.  */"}]}