{"sha": "c73ae90f23fab6c872b09e02b0d1e34727883056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczYWU5MGYyM2ZhYjZjODcyYjA5ZTAyYjBkMWUzNDcyNzg4MzA1Ng==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2005-07-04T13:26:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:26:45Z"}, "message": "checks.adb (Null_Exclusion_Static_Checks): In the case of N_Object_Declaration...\n\n2005-07-04  Gary Dismukes  <dismukes@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\t    Javier Miranda  <miranda@adacore.com>\n\n\t* checks.adb (Null_Exclusion_Static_Checks): In the case of\n\tN_Object_Declaration, only perform the checks if the Object_Definition\n\tis not an Access_Definition.\n\n        * sem_ch3.adb (Access_Subprogram_Declaration): Add test for the case\n        where the parent of an the access definition is an N_Object_Declaration\n        when determining the Associated_Node_For_Itype and scope of an\n        anonymous access-to-subprogram type.\n\n\t* exp_ch6.adb (Expand_N_Subprogram_Declaration): Set the\n\tCorresponding_Spec on the body created for a null procedure. Add ???\n\tcomment. Remove New_Copy_Tree call on body argument to\n\tSet_Body_To_Inline.\n\n\t* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): For an out parameter with\n\tdiscriminants, use the type of the actual as well, because the\n\tdiscriminants may be read by the called subprogram.\n\n\t* sem_ch3.adb (Access_Type_Declaration): If the designated type is an\n\taccess type we do not need to handle non-limited views.\n\t(Build_Derived_Record_Type): Additional check to check that in case of\n\tprivate types, interfaces are only allowed in private extensions.\n\nFrom-SVN: r101575", "tree": {"sha": "633c05c9e717cfac8109be0508f2149ee422efed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/633c05c9e717cfac8109be0508f2149ee422efed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73ae90f23fab6c872b09e02b0d1e34727883056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73ae90f23fab6c872b09e02b0d1e34727883056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73ae90f23fab6c872b09e02b0d1e34727883056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73ae90f23fab6c872b09e02b0d1e34727883056/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3104eb4aac48292ca0ee231971420470efbf7b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3104eb4aac48292ca0ee231971420470efbf7b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3104eb4aac48292ca0ee231971420470efbf7b9b"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "68eb16e2d72c7b851ab807b07c7fc7df734362c1", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73ae90f23fab6c872b09e02b0d1e34727883056/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73ae90f23fab6c872b09e02b0d1e34727883056/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=c73ae90f23fab6c872b09e02b0d1e34727883056", "patch": "@@ -2637,13 +2637,17 @@ package body Checks is\n \n          when N_Object_Declaration =>\n             Msg_K := Objects;\n-            Has_Null_Exclusion := Null_Exclusion_Present (N);\n-            Typ := Entity (Object_Definition (N));\n-            Related_Nod := Object_Definition (N);\n-            Check_Must_Be_Access (Typ, Has_Null_Exclusion);\n-            Check_Already_Null_Excluding_Type\n-              (Typ, Has_Null_Exclusion, Related_Nod);\n-            Check_Must_Be_Initialized (N, Related_Nod);\n+\n+            if Nkind (Object_Definition (N)) /= N_Access_Definition then\n+               Has_Null_Exclusion := Null_Exclusion_Present (N);\n+               Typ := Entity (Object_Definition (N));\n+               Related_Nod := Object_Definition (N);\n+               Check_Must_Be_Access (Typ, Has_Null_Exclusion);\n+               Check_Already_Null_Excluding_Type\n+                 (Typ, Has_Null_Exclusion, Related_Nod);\n+               Check_Must_Be_Initialized (N, Related_Nod);\n+            end if;\n+\n             Check_Null_Not_Allowed (N);\n \n          when N_Discriminant_Specification =>"}, {"sha": "ee7278cc426509efdfec3a2aee513e499ea8a3a7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73ae90f23fab6c872b09e02b0d1e34727883056/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73ae90f23fab6c872b09e02b0d1e34727883056/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c73ae90f23fab6c872b09e02b0d1e34727883056", "patch": "@@ -760,25 +760,36 @@ package body Exp_Ch6 is\n          Outcod := New_Copy_Tree (Incod);\n \n          --  Generate declaration of temporary variable, initializing it\n-         --  with the input parameter unless we have an OUT variable or\n+         --  with the input parameter unless we have an OUT formal or\n          --  this is an initialization call.\n \n+         --  If the formal is an out parameter with discriminants, the\n+         --  discriminants must be captured even if the rest of the object\n+         --  is in principle uninitialized, because the discriminants may\n+         --  be read by the called subprogram.\n+\n          if Ekind (Formal) = E_Out_Parameter then\n             Incod := Empty;\n \n+            if Has_Discriminants (Etype (Formal)) then\n+               Indic := New_Occurrence_Of (Etype (Actual), Loc);\n+            end if;\n+\n          elsif Inside_Init_Proc then\n+\n+            --  Could use a comment here to match comment below ???\n+\n             if Nkind (Actual) /= N_Selected_Component\n               or else\n                 not Has_Discriminant_Dependent_Constraint\n                   (Entity (Selector_Name (Actual)))\n             then\n                Incod := Empty;\n \n-            else\n-               --  We need the component in order to generate the proper\n-               --  actual subtype, that depends on enclosing discriminants.\n-               --  What is the comment for, given code below is null ???\n+            --  Otherwise, keep the component in order to generate the proper\n+            --  actual subtype, that depends on enclosing discriminants.\n \n+            else\n                null;\n             end if;\n          end if;\n@@ -3859,9 +3870,20 @@ package body Exp_Ch6 is\n                         Make_Handled_Sequence_Of_Statements (Loc,\n                           Statements => New_List (Make_Null_Statement (Loc))));\n          begin\n-            Set_Body_To_Inline (N, New_Copy_Tree (Bod));\n+            Set_Body_To_Inline (N, Bod);\n             Insert_After (N, Bod);\n             Analyze (Bod);\n+\n+            --  Corresponding_Spec isn't being set by Analyze_Subprogram_Body,\n+            --  evidently because Set_Has_Completion is called earlier for null\n+            --  procedures in Analyze_Subprogram_Declaration, so we force its\n+            --  setting here. If the setting of Has_Completion is not set\n+            --  earlier, then it can result in missing body errors if other\n+            --  errors were already reported (since expansion is turned off).\n+\n+            --  Should creation of the empty body be moved to the analyzer???\n+\n+            Set_Corresponding_Spec (Bod, Defining_Entity (Specification (N)));\n          end;\n       end if;\n    end Expand_N_Subprogram_Declaration;"}, {"sha": "124adbbb07c174ef59e9676c64d7d942b689a68a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73ae90f23fab6c872b09e02b0d1e34727883056/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73ae90f23fab6c872b09e02b0d1e34727883056/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c73ae90f23fab6c872b09e02b0d1e34727883056", "patch": "@@ -818,6 +818,7 @@ package body Sem_Ch3 is\n       while Nkind (D_Ityp) /= N_Full_Type_Declaration\n          and then Nkind (D_Ityp) /= N_Procedure_Specification\n          and then Nkind (D_Ityp) /= N_Function_Specification\n+         and then Nkind (D_Ityp) /= N_Object_Declaration\n          and then Nkind (D_Ityp) /= N_Object_Renaming_Declaration\n          and then Nkind (D_Ityp) /= N_Formal_Type_Declaration\n       loop\n@@ -833,6 +834,7 @@ package body Sem_Ch3 is\n          Set_Scope (Desig_Type, Scope (Defining_Unit_Name (D_Ityp)));\n \n       elsif Nkind (D_Ityp) = N_Full_Type_Declaration\n+        or else Nkind (D_Ityp) = N_Object_Declaration\n         or else Nkind (D_Ityp) = N_Object_Renaming_Declaration\n         or else Nkind (D_Ityp) = N_Formal_Type_Declaration\n       then\n@@ -981,7 +983,9 @@ package body Sem_Ch3 is\n          N_Desig : Entity_Id;\n \n       begin\n-         if From_With_Type (Desig) then\n+         if From_With_Type (Desig)\n+           and then Ekind (Desig) /= E_Access_Type\n+         then\n             Set_From_With_Type (T);\n \n             if Ekind (Desig) = E_Incomplete_Type then\n@@ -5870,9 +5874,17 @@ package body Sem_Ch3 is\n                   Same_Interfaces    : Boolean := True;\n \n                begin\n+                  if Nkind (N_Partial) /= N_Private_Extension_Declaration then\n+                     Error_Msg_N\n+                       (\"(Ada 2005) interfaces only allowed in private\"\n+                        & \" extension declarations\", N_Partial);\n+                  end if;\n+\n                   --  Count the interfaces implemented by the partial view\n \n-                  if not Is_Empty_List (Interface_List (N_Partial)) then\n+                  if Nkind (N_Partial) = N_Private_Extension_Declaration\n+                    and then not Is_Empty_List (Interface_List (N_Partial))\n+                  then\n                      Iface_Partial := First (Interface_List (N_Partial));\n \n                      while Present (Iface_Partial) loop"}]}