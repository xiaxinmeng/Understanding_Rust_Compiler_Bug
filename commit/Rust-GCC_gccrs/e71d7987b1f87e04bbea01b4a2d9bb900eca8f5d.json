{"sha": "e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxZDc5ODdiMWY4N2UwNGJiZWEwMWI0YTJkOWJiOTAwZWNhOGY1ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-07-03T10:44:20Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-07-03T10:44:20Z"}, "message": "invoke.texi (-fsanitize=bounds): Tweak wording.\n\n\t* doc/invoke.texi (-fsanitize=bounds): Tweak wording.\n\t(-fsanitize=float-divide-by-zero): Move to the table with\n\t-fsanitize=undefined suboptions.\n\t(-fsanitize=float-cast-overflow): Likewise.\n\nFrom-SVN: r212260", "tree": {"sha": "60ee36409c7176b3d2eaf3296fecfc6a161e2a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ee36409c7176b3d2eaf3296fecfc6a161e2a15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "283bbe35a1fec8373445fcf94780fe3b686e68c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283bbe35a1fec8373445fcf94780fe3b686e68c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283bbe35a1fec8373445fcf94780fe3b686e68c7"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "84a105e1bd17b87b4121cba57eb45b54fd01da70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "patch": "@@ -1,3 +1,10 @@\n+2014-07-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi (-fsanitize=bounds): Tweak wording.\n+\t(-fsanitize=float-divide-by-zero): Move to the table with\n+\t-fsanitize=undefined suboptions.\n+\t(-fsanitize=float-cast-overflow): Likewise.\n+\n 2014-07-03  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (rs6000_adjust_atomic_subword): Use"}, {"sha": "046ea58077219bf121423cc2f4bb2740ff026885", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "patch": "@@ -5400,50 +5400,43 @@ at runtime.  Current suboptions are:\n \n @item -fsanitize=shift\n @opindex fsanitize=shift\n-\n This option enables checking that the result of a shift operation is\n not undefined.  Note that what exactly is considered undefined differs\n slightly between C and C++, as well as between ISO C90 and C99, etc.\n \n @item -fsanitize=integer-divide-by-zero\n @opindex fsanitize=integer-divide-by-zero\n-\n Detect integer division by zero as well as @code{INT_MIN / -1} division.\n \n @item -fsanitize=unreachable\n @opindex fsanitize=unreachable\n-\n With this option, the compiler will turn the @code{__builtin_unreachable}\n call into a diagnostics message call instead.  When reaching the\n @code{__builtin_unreachable} call, the behavior is undefined.\n \n @item -fsanitize=vla-bound\n @opindex fsanitize=vla-bound\n-\n This option instructs the compiler to check that the size of a variable\n length array is positive.  This option does not have any effect in\n @option{-std=c++1y} mode, as the standard requires the exception be thrown\n instead.\n \n @item -fsanitize=null\n @opindex fsanitize=null\n-\n This option enables pointer checking.  Particularly, the application\n built with this option turned on will issue an error message when it\n tries to dereference a NULL pointer, or if a reference (possibly an\n rvalue reference) is bound to a NULL pointer.\n \n @item -fsanitize=return\n @opindex fsanitize=return\n-\n This option enables return statement checking.  Programs\n built with this option turned on will issue an error message\n when the end of a non-void function is reached without actually\n returning a value.  This option works in C++ only.\n \n @item -fsanitize=signed-integer-overflow\n @opindex fsanitize=signed-integer-overflow\n-\n This option enables signed integer overflow checking.  We check that\n the result of @code{+}, @code{*}, and both unary and binary @code{-}\n does not overflow in the signed arithmetics.  Note, integer promotion\n@@ -5456,32 +5449,29 @@ a++;\n \n @item -fsanitize=bounds\n @opindex fsanitize=bounds\n-\n This option enables instrumentation of array bounds.  Various out of bounds\n-accesses are detected.  Flexible array members are not instrumented, as well\n-as initializers of variables with static storage.\n-\n-@end table\n-\n-While @option{-ftrapv} causes traps for signed overflows to be emitted,\n-@option{-fsanitize=undefined} gives a diagnostic message.\n-This currently works only for the C family of languages.\n+accesses are detected.  Flexible array members and initializers of variables\n+with static storage are not instrumented.\n \n @item -fsanitize=float-divide-by-zero\n @opindex fsanitize=float-divide-by-zero\n-\n Detect floating-point division by zero.  Unlike other similar options,\n @option{-fsanitize=float-divide-by-zero} is not enabled by\n @option{-fsanitize=undefined}, since floating-point division by zero can\n be a legitimate way of obtaining infinities and NaNs.\n \n @item -fsanitize=float-cast-overflow\n @opindex fsanitize=float-cast-overflow\n-\n This option enables floating-point type to integer conversion checking.\n We check that the result of the conversion does not overflow.\n This option does not work well with @code{FE_INVALID} exceptions enabled.\n \n+@end table\n+\n+While @option{-ftrapv} causes traps for signed overflows to be emitted,\n+@option{-fsanitize=undefined} gives a diagnostic message.\n+This currently works only for the C family of languages.\n+\n @item -fsanitize-recover\n @opindex fsanitize-recover\n By default @option{-fsanitize=undefined} sanitization (and its suboptions"}]}