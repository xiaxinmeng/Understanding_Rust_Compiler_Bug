{"sha": "c860fe8c6cbc547d960118fb71d6e018aa51b18d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2MGZlOGM2Y2JjNTQ3ZDk2MDExOGZiNzFkNmUwMThhYTUxYjE4ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-05T14:59:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-05T14:59:55Z"}, "message": "opt-functions.awk (var_type_struct): Handle Enum options.\n\n\t* opt-functions.awk (var_type_struct): Handle Enum options.\n\t* optc-gen.awk: Don't check range of variables of character type.\n\t* config/rs6000/rs6000.c (rs6000_sched_insert_nops_str,\n\trs6000_sched_costly_dep_str, rs6000_recip_name, rs6000_abi_name,\n\trs6000_sdata_name, rs6000_explicit_options): Remove.\n\t(rs6000_option_override_internal): Check for -malign-power here.\n\tUse global_options_set instead of rs6000_explicit_options.\n\t(rs6000_parse_fpu_option): Remove.\n\t(rs6000_handle_option): Access variables via opts and opts_set\n\tpointers.  Use error_at and warning_at.  Add fall-through\n\tcomments.  Don't handle OPT_mcmodel_, OPT_maix_struct_return,\n\tOPT_msvr4_struct_return, OPT_mvrsave, OPT_mspe, OPT_mcall_,\n\tOPT_msdata_, OPT_mtls_size_, OPT_mtraceback_, OPT_mfloat_gprs_,\n\tOPT_msched_costly_dep_, OPT_malign_ or OPT_mrecip_ explicitly\n\there.  Don't use rs6000_parse_fpu_option.\n\t* config/rs6000/rs6000.h (fpu_type): Remove declaration.\n\t* config/rs6000/rs6000.opt (rs6000_long_double_type_size,\n\trs6000_spe, rs6000_float_gprs): Remove TargetVariable entries.\n\t(mrecip=): Use Var.\n\t(mspe): Use Var and Save.\n\t(mtraceback=): Use Enum and Var.\n\t(rs6000_traceback_type): New Enum and EnumValue entries.\n\t(mfloat-gprs=): Use Enum, Var and Save.\n\t(rs6000_float_gprs): New Enum and EnumValue entries.\n\t(mlong-double-): use Var and Save.\n\t(msched-costly-dep=, minsert-sched-nops=): Use Var.\n\t(malign-): Use Enum and Var.\n\t(rs6000_alignment_flags): New Enum and EnumValue entries.\n\t(mfpu=): Use Enum.\n\t(fpu_type_t): New Enum and EnumValue entries.\n\t* config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/e500-double.h (SUB3TARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t(RS6000_DEFAULT_LONG_DOUBLE_SIZE): Remove commented-out\n\tdefinition.\n\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/linux64.opt (mcmodel=): Use Enum and Var.\n\t(rs6000_cmodel): New Enum and EnumValue entries.\n\t* config/rs6000/linuxspe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n\tglobal_options_set instead of rs6000_explicit_options.\n\t* config/rs6000/sysv4.opt (mcall-, msdata=): Use Var.\n\t(mtls-size=): Use Enum and Var.\n\t(rs6000_tls_size): New Enum and EnumValue entries.\n\nFrom-SVN: r173434", "tree": {"sha": "7f4ebe1f33b19f10a0d0ee291b6b5aadb9e812c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4ebe1f33b19f10a0d0ee291b6b5aadb9e812c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c860fe8c6cbc547d960118fb71d6e018aa51b18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c860fe8c6cbc547d960118fb71d6e018aa51b18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c860fe8c6cbc547d960118fb71d6e018aa51b18d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c860fe8c6cbc547d960118fb71d6e018aa51b18d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3edeff4e165c874cac9c59f243fd7c0cec0dd93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3edeff4e165c874cac9c59f243fd7c0cec0dd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3edeff4e165c874cac9c59f243fd7c0cec0dd93"}], "stats": {"total": 623, "additions": 307, "deletions": 316}, "files": [{"sha": "5f304ecc2b3f6b0819a31d966c1b9bb2a191bf3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,3 +1,59 @@\n+2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opt-functions.awk (var_type_struct): Handle Enum options.\n+\t* optc-gen.awk: Don't check range of variables of character type.\n+\t* config/rs6000/rs6000.c (rs6000_sched_insert_nops_str,\n+\trs6000_sched_costly_dep_str, rs6000_recip_name, rs6000_abi_name,\n+\trs6000_sdata_name, rs6000_explicit_options): Remove.\n+\t(rs6000_option_override_internal): Check for -malign-power here.\n+\tUse global_options_set instead of rs6000_explicit_options.\n+\t(rs6000_parse_fpu_option): Remove.\n+\t(rs6000_handle_option): Access variables via opts and opts_set\n+\tpointers.  Use error_at and warning_at.  Add fall-through\n+\tcomments.  Don't handle OPT_mcmodel_, OPT_maix_struct_return,\n+\tOPT_msvr4_struct_return, OPT_mvrsave, OPT_mspe, OPT_mcall_,\n+\tOPT_msdata_, OPT_mtls_size_, OPT_mtraceback_, OPT_mfloat_gprs_,\n+\tOPT_msched_costly_dep_, OPT_malign_ or OPT_mrecip_ explicitly\n+\there.  Don't use rs6000_parse_fpu_option.\n+\t* config/rs6000/rs6000.h (fpu_type): Remove declaration.\n+\t* config/rs6000/rs6000.opt (rs6000_long_double_type_size,\n+\trs6000_spe, rs6000_float_gprs): Remove TargetVariable entries.\n+\t(mrecip=): Use Var.\n+\t(mspe): Use Var and Save.\n+\t(mtraceback=): Use Enum and Var.\n+\t(rs6000_traceback_type): New Enum and EnumValue entries.\n+\t(mfloat-gprs=): Use Enum, Var and Save.\n+\t(rs6000_float_gprs): New Enum and EnumValue entries.\n+\t(mlong-double-): use Var and Save.\n+\t(msched-costly-dep=, minsert-sched-nops=): Use Var.\n+\t(malign-): Use Enum and Var.\n+\t(rs6000_alignment_flags): New Enum and EnumValue entries.\n+\t(mfpu=): Use Enum.\n+\t(fpu_type_t): New Enum and EnumValue entries.\n+\t* config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/e500-double.h (SUB3TARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t(RS6000_DEFAULT_LONG_DOUBLE_SIZE): Remove commented-out\n+\tdefinition.\n+\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/linux64.opt (mcmodel=): Use Enum and Var.\n+\t(rs6000_cmodel): New Enum and EnumValue entries.\n+\t* config/rs6000/linuxspe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n+\tglobal_options_set instead of rs6000_explicit_options.\n+\t* config/rs6000/sysv4.opt (mcall-, msdata=): Use Var.\n+\t(mtls-size=): Use Enum and Var.\n+\t(rs6000_tls_size): New Enum and EnumValue entries.\n+\n 2011-05-05  Michael Matz  <matz@suse.de>\n \n \t* config/alpha/elf.h (ENDFILE_SPEC): Add Ofast."}, {"sha": "936176cb34e20199bb7c95d0b3147ef8454d07b4", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX version 4.3.\n    Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n-   2007, 2009, 2010 Free Software Foundation, Inc.\n+   2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n    This file is part of GCC.\n@@ -39,7 +39,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (rs6000_explicit_options.long_double)\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\"}, {"sha": "4b1f0cf85cf40b4dbf5989cb2ef3ac8ef0f9b3a1", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.2.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -39,7 +39,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (rs6000_explicit_options.long_double)\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\"}, {"sha": "36af0850502435106f9aae400892ce15a1f4617b", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.3.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -39,7 +39,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (rs6000_explicit_options.long_double)\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\"}, {"sha": "f04c712aa151105eeffd7dcfa68d70879fad3324", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V6.1.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -39,7 +39,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (rs6000_explicit_options.long_double)\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\"}, {"sha": "2e73dd94c1b5dc311e8073e124697d88e256b411", "filename": "gcc/config/rs6000/e500-double.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Fe500-double.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Fe500-double.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500-double.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for E500 with double precision FP.\n-   Copyright (C) 2004, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2006, 2007, 2011 Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez (aldyh@redhat.com).\n \n    This file is part of GCC.\n@@ -20,5 +20,5 @@\n \n #undef  SUB3TARGET_OVERRIDE_OPTIONS\n #define SUB3TARGET_OVERRIDE_OPTIONS \\\n-  if (!rs6000_explicit_options.float_gprs) \\\n+  if (!global_options_set.x_rs6000_float_gprs) \\\n     rs6000_float_gprs = 2;"}, {"sha": "f0b3a32f2969c953eab812c9965ab190407f8dc9", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -28,24 +28,14 @@\n #define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n   if (rs6000_select[1].string == NULL) \\\n     rs6000_cpu = PROCESSOR_PPC8540; \\\n-  if (!rs6000_explicit_options.spe_abi) \\\n+  if (!global_options_set.x_rs6000_spe_abi) \\\n     rs6000_spe_abi = 1; \\\n-  if (!rs6000_explicit_options.float_gprs) \\\n+  if (!global_options_set.x_rs6000_float_gprs) \\\n     rs6000_float_gprs = 1; \\\n-  if (!rs6000_explicit_options.spe) \\\n+  if (!global_options_set.x_rs6000_spe) \\\n     rs6000_spe = 1; \\\n   if (target_flags & MASK_64BIT) \\\n     error (\"-m64 not supported in this configuration\")\n \n-/* The e500 ABI says that either long doubles are 128 bits, or if\n-   implemented in any other size, the compiler/linker should error out.\n-   We have no emulation libraries for 128 bit long doubles, and I hate\n-   the dozens of failures on the regression suite.  So I'm breaking ABI\n-   specifications, until I properly fix the emulation.\n-\n-   Enable these later.\n-#define RS6000_DEFAULT_LONG_DOUBLE_SIZE (TARGET_SPE ? 128 : 64)\n-*/\n-\n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "5a26d120a46c07f6da38f953dc3018e94fd06d33", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -93,7 +93,7 @@ extern int dot_symbols;\n #define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      if (!rs6000_explicit_options.alignment)\t\t\t\\\n+      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n \trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n       if (TARGET_64BIT)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n@@ -125,14 +125,14 @@ extern int dot_symbols;\n \t    }\t\t\t\t\t\t\t\\\n \t  if ((target_flags_explicit & MASK_MINIMAL_TOC) != 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      if (rs6000_explicit_options.cmodel\t\t\\\n+\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n \t\terror (\"-mcmodel incompatible with other toc options\"); \\\n \t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      if (!rs6000_explicit_options.cmodel)\t\t\\\n+\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n \t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n \t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n \t\t{\t\t\t\t\t\t\\\n@@ -150,7 +150,7 @@ extern int dot_symbols;\n \t      TARGET_PROFILE_KERNEL = 0;\t\t\t\\\n \t      error (INVALID_32BIT, \"profile-kernel\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if (rs6000_explicit_options.cmodel)\t\t\t\\\n+\t  if (global_options_set.x_rs6000_current_cmodel)\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t      error (INVALID_32BIT, \"cmodel\");\t\t\t\\"}, {"sha": "0492d5361c310f4da5a62f5ed6cea6fd8674d3d6", "filename": "gcc/config/rs6000/linux64.opt", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Flinux64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Flinux64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.opt?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,6 +1,6 @@\n ; Options for 64-bit PowerPC Linux.\n ;\n-; Copyright (C) 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n ; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n ;\n ; This file is part of GCC.\n@@ -24,5 +24,19 @@ Target Report Var(profile_kernel) Save\n Call mcount for profiling before a function prologue\n \n mcmodel=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(rs6000_cmodel) Var(rs6000_current_cmodel)\n Select code model\n+\n+Enum\n+Name(rs6000_cmodel) Type(enum rs6000_cmodel)\n+Known code models (for use with the -mcmodel= option):\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(small) Value(CMODEL_SMALL)\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(medium) Value(CMODEL_MEDIUM)\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(large) Value(CMODEL_LARGE)\n+"}, {"sha": "a5d048cca790cd03eebe111a755d04e69078fd0d", "filename": "gcc/config/rs6000/linuxspe.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxspe.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -28,11 +28,11 @@\n #define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n   if (rs6000_select[1].string == NULL) \\\n     rs6000_cpu = PROCESSOR_PPC8540; \\\n-  if (!rs6000_explicit_options.spe_abi) \\\n+  if (!global_options_set.x_rs6000_spe_abi) \\\n     rs6000_spe_abi = 1; \\\n-  if (!rs6000_explicit_options.float_gprs) \\\n+  if (!global_options_set.x_rs6000_float_gprs) \\\n     rs6000_float_gprs = 1; \\\n-  if (!rs6000_explicit_options.spe) \\\n+  if (!global_options_set.x_rs6000_spe) \\\n     rs6000_spe = 1; \\\n   if (target_flags & MASK_64BIT) \\\n     error (\"-m64 not supported in this configuration\")"}, {"sha": "a4a0eb6306274471d359b2795117f73b6273fe52", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 127, "deletions": 257, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -148,16 +148,6 @@ struct rs6000_cpu_select rs6000_select[3] =\n   { (const char *)0,\t\"-mtune=\",\t\t1,\t0 },\n };\n \n-/* String variables to hold the various options.  */\n-static const char *rs6000_sched_insert_nops_str;\n-static const char *rs6000_sched_costly_dep_str;\n-static const char *rs6000_recip_name;\n-\n-#ifdef USING_ELFOS_H\n-static const char *rs6000_abi_name;\n-static const char *rs6000_sdata_name;\n-#endif\n-\n /* Support targetm.vectorize.builtin_mask_for_load.  */\n static GTY(()) tree altivec_builtin_mask_for_load;\n \n@@ -227,20 +217,6 @@ static GTY(()) section *read_only_private_data_section;\n static GTY(()) section *sdata2_section;\n static GTY(()) section *toc_section;\n \n-/* True for any options that were explicitly set.  */\n-static struct {\n-  bool aix_struct_ret;\t\t/* True if -maix-struct-ret was used.  */\n-  bool alignment;\t\t/* True if -malign- was used.  */\n-  bool spe_abi;\t\t\t/* True if -mabi=spe/no-spe was used.  */\n-  bool altivec_abi;\t\t/* True if -mabi=altivec/no-altivec used.  */\n-  bool spe;\t\t\t/* True if -mspe= was used.  */\n-  bool float_gprs;\t\t/* True if -mfloat-gprs= was used.  */\n-  bool long_double;\t        /* True if -mlong-double- was used.  */\n-  bool ieee;\t\t\t/* True if -mabi=ieee/ibmlongdouble used.  */\n-  bool vrsave;\t\t\t/* True if -mvrsave was used.  */\n-  bool cmodel;\t\t\t/* True if -mcmodel was used.  */\n-} rs6000_explicit_options;\n-\n struct builtin_description\n {\n   /* mask is not const because we're going to alter it below.  This\n@@ -2678,6 +2654,17 @@ rs6000_option_override_internal (bool global_init_p)\n     = ((global_init_p || target_option_default_node == NULL)\n        ? NULL : TREE_TARGET_OPTION (target_option_default_node));\n \n+  /* On 64-bit Darwin, power alignment is ABI-incompatible with some C\n+     library functions, so warn about it. The flag may be useful for\n+     performance studies from time to time though, so don't disable it\n+     entirely.  */\n+  if (global_options_set.x_rs6000_alignment_flags\n+      && rs6000_alignment_flags == MASK_ALIGN_POWER\n+      && DEFAULT_ABI == ABI_DARWIN\n+      && TARGET_64BIT)\n+    warning (0, \"-malign-power is not supported for 64-bit Darwin;\"\n+\t     \" it is incompatible with the installed C and C++ libraries\");\n+\n   /* Numerous experiment shows that IRA based loop pressure\n      calculation works better for RTL loop invariant motion on targets\n      with enough (>= 32) registers.  It is an expensive optimization.\n@@ -2901,7 +2888,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  if (!rs6000_explicit_options.long_double)\n+  if (!global_options_set.x_rs6000_long_double_type_size)\n     {\n       if (main_target_opt != NULL\n \t  && (main_target_opt->x_rs6000_long_double_type_size\n@@ -2912,7 +2899,7 @@ rs6000_option_override_internal (bool global_init_p)\n     }\n \n #ifndef POWERPC_LINUX\n-  if (!rs6000_explicit_options.ieee)\n+  if (!global_options_set.x_rs6000_ieeequad)\n     rs6000_ieeequad = 1;\n #endif\n \n@@ -2937,7 +2924,7 @@ rs6000_option_override_internal (bool global_init_p)\n      be explicitly overridden in either case.  */\n   if (TARGET_ELF)\n     {\n-      if (!rs6000_explicit_options.altivec_abi\n+      if (!global_options_set.x_rs6000_altivec_abi\n \t  && (TARGET_64BIT || TARGET_ALTIVEC || TARGET_VSX))\n \t{\n \t  if (main_target_opt != NULL &&\n@@ -2948,7 +2935,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n \n       /* Enable VRSAVE for AltiVec ABI, unless explicitly overridden.  */\n-      if (!rs6000_explicit_options.vrsave)\n+      if (!global_options_set.x_TARGET_ALTIVEC_VRSAVE)\n \tTARGET_ALTIVEC_VRSAVE = rs6000_altivec_abi;\n     }\n \n@@ -3003,11 +2990,11 @@ rs6000_option_override_internal (bool global_init_p)\n \terror (\"target attribute or pragma changes SPE ABI\");\n       else\n \t{\n-\t  if (!rs6000_explicit_options.spe_abi)\n+\t  if (!global_options_set.x_rs6000_spe_abi)\n \t    rs6000_spe_abi = 0;\n-\t  if (!rs6000_explicit_options.spe)\n+\t  if (!global_options_set.x_rs6000_spe)\n \t    rs6000_spe = 0;\n-\t  if (!rs6000_explicit_options.float_gprs)\n+\t  if (!global_options_set.x_rs6000_float_gprs)\n \t    rs6000_float_gprs = 0;\n \t}\n       if (!(target_flags_explicit & MASK_ISEL))\n@@ -3095,7 +3082,7 @@ rs6000_option_override_internal (bool global_init_p)\n       /* Set aix_struct_return last, after the ABI is determined.\n \t If -maix-struct-return or -msvr4-struct-return was explicitly\n \t used, don't override with the ABI default.  */\n-      if (!rs6000_explicit_options.aix_struct_ret)\n+      if (!global_options_set.x_aix_struct_return)\n \taix_struct_return = (DEFAULT_ABI != ABI_V4 || DRAFT_V4_STRUCT_RET);\n \n #if 0\n@@ -3848,19 +3835,6 @@ rs6000_option_default_params (void)\n   set_default_param_value (PARAM_MAX_GROW_COPY_BB_INSNS, 16);\n }\n \n-static enum fpu_type_t\n-rs6000_parse_fpu_option (const char *option)\n-{\n-  if (!strcmp(\"none\", option)) return FPU_NONE;\n-  if (!strcmp(\"sp_lite\", option)) return FPU_SF_LITE;\n-  if (!strcmp(\"dp_lite\", option)) return FPU_DF_LITE;\n-  if (!strcmp(\"sp_full\", option)) return FPU_SF_FULL;\n-  if (!strcmp(\"dp_full\", option)) return FPU_DF_FULL;\n-  error(\"unknown value %s for -mfpu\", option);\n-  return FPU_NONE;\n-}\n-\n-\n /* Handler for the Mathematical Acceleration Subsystem (mass) interface to a\n    library with vectorized intrinsics.  */\n \n@@ -4194,7 +4168,7 @@ rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n static bool\n rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n-\t\t      location_t loc ATTRIBUTE_UNUSED)\n+\t\t      location_t loc)\n {\n   enum fpu_type_t fpu_type = FPU_NONE;\n   char *p, *q;\n@@ -4208,128 +4182,100 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n   switch (code)\n     {\n     case OPT_mno_power:\n-      target_flags &= ~(MASK_POWER | MASK_POWER2\n-\t\t\t| MASK_MULTIPLE | MASK_STRING);\n-      target_flags_explicit |= (MASK_POWER | MASK_POWER2\n+      opts->x_target_flags &= ~(MASK_POWER | MASK_POWER2\n \t\t\t\t| MASK_MULTIPLE | MASK_STRING);\n+      opts_set->x_target_flags |= (MASK_POWER | MASK_POWER2\n+\t\t\t\t   | MASK_MULTIPLE | MASK_STRING);\n       break;\n     case OPT_mno_powerpc:\n-      target_flags &= ~(MASK_POWERPC | MASK_PPC_GPOPT\n-\t\t\t| MASK_PPC_GFXOPT | MASK_POWERPC64);\n-      target_flags_explicit |= (MASK_POWERPC | MASK_PPC_GPOPT\n+      opts->x_target_flags &= ~(MASK_POWERPC | MASK_PPC_GPOPT\n \t\t\t\t| MASK_PPC_GFXOPT | MASK_POWERPC64);\n+      opts_set->x_target_flags |= (MASK_POWERPC | MASK_PPC_GPOPT\n+\t\t\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64);\n       break;\n     case OPT_mfull_toc:\n-      target_flags &= ~MASK_MINIMAL_TOC;\n-      TARGET_NO_FP_IN_TOC = 0;\n-      TARGET_NO_SUM_IN_TOC = 0;\n-      target_flags_explicit |= MASK_MINIMAL_TOC;\n+      opts->x_target_flags &= ~MASK_MINIMAL_TOC;\n+      opts->x_TARGET_NO_FP_IN_TOC = 0;\n+      opts->x_TARGET_NO_SUM_IN_TOC = 0;\n+      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n #ifdef TARGET_USES_SYSV4_OPT\n       /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be\n \t just the same as -mminimal-toc.  */\n-      target_flags |= MASK_MINIMAL_TOC;\n-      target_flags_explicit |= MASK_MINIMAL_TOC;\n+      opts->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n #endif\n       break;\n \n #ifdef TARGET_USES_SYSV4_OPT\n     case OPT_mtoc:\n       /* Make -mtoc behave like -mminimal-toc.  */\n-      target_flags |= MASK_MINIMAL_TOC;\n-      target_flags_explicit |= MASK_MINIMAL_TOC;\n+      opts->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n       break;\n #endif\n \n #if defined (HAVE_LD_LARGE_TOC) && defined (TARGET_USES_LINUX64_OPT)\n     case OPT_mcmodel_:\n-      if (strcmp (arg, \"small\") == 0)\n-\trs6000_current_cmodel = CMODEL_SMALL;\n-      else if (strcmp (arg, \"medium\") == 0)\n-\trs6000_current_cmodel = CMODEL_MEDIUM;\n-      else if (strcmp (arg, \"large\") == 0)\n-\trs6000_current_cmodel = CMODEL_LARGE;\n-      else\n-\t{\n-\t  error (\"invalid option for -mcmodel: '%s'\", arg);\n-\t  return false;\n-\t}\n-      rs6000_explicit_options.cmodel = true;\n+      /* Fall through.  */\n #endif\n \n #ifdef TARGET_USES_AIX64_OPT\n     case OPT_maix64:\n #else\n     case OPT_m64:\n #endif\n-      target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n-      target_flags |= ~target_flags_explicit & MASK_PPC_GFXOPT;\n-      target_flags_explicit |= MASK_POWERPC64 | MASK_POWERPC;\n+      opts->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n+      opts->x_target_flags |= ~opts_set->x_target_flags & MASK_PPC_GFXOPT;\n+      opts_set->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n       break;\n \n #ifdef TARGET_USES_AIX64_OPT\n     case OPT_maix32:\n #else\n     case OPT_m32:\n #endif\n-      target_flags &= ~MASK_POWERPC64;\n-      target_flags_explicit |= MASK_POWERPC64;\n-      break;\n-\n-    case OPT_minsert_sched_nops_:\n-      rs6000_sched_insert_nops_str = arg;\n+      opts->x_target_flags &= ~MASK_POWERPC64;\n+      opts_set->x_target_flags |= MASK_POWERPC64;\n       break;\n \n     case OPT_mminimal_toc:\n       if (value == 1)\n \t{\n-\t  TARGET_NO_FP_IN_TOC = 0;\n-\t  TARGET_NO_SUM_IN_TOC = 0;\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 0;\n+\t  opts->x_TARGET_NO_SUM_IN_TOC = 0;\n \t}\n       break;\n \n     case OPT_mpower:\n       if (value == 1)\n \t{\n-\t  target_flags |= (MASK_MULTIPLE | MASK_STRING);\n-\t  target_flags_explicit |= (MASK_MULTIPLE | MASK_STRING);\n+\t  opts->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n+\t  opts_set->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n \t}\n       break;\n \n     case OPT_mpower2:\n       if (value == 1)\n \t{\n-\t  target_flags |= (MASK_POWER | MASK_MULTIPLE | MASK_STRING);\n-\t  target_flags_explicit |= (MASK_POWER | MASK_MULTIPLE | MASK_STRING);\n+\t  opts->x_target_flags |= (MASK_POWER | MASK_MULTIPLE | MASK_STRING);\n+\t  opts_set->x_target_flags |= (MASK_POWER\n+\t\t\t\t       | MASK_MULTIPLE\n+\t\t\t\t       | MASK_STRING);\n \t}\n       break;\n \n     case OPT_mpowerpc_gpopt:\n     case OPT_mpowerpc_gfxopt:\n       if (value == 1)\n \t{\n-\t  target_flags |= MASK_POWERPC;\n-\t  target_flags_explicit |= MASK_POWERPC;\n+\t  opts->x_target_flags |= MASK_POWERPC;\n+\t  opts_set->x_target_flags |= MASK_POWERPC;\n \t}\n       break;\n \n-    case OPT_maix_struct_return:\n-    case OPT_msvr4_struct_return:\n-      rs6000_explicit_options.aix_struct_ret = true;\n-      break;\n-\n-    case OPT_mvrsave:\n-      rs6000_explicit_options.vrsave = true;\n-      TARGET_ALTIVEC_VRSAVE = value;\n-      break;\n-\n-    case OPT_mspe:\n-      rs6000_explicit_options.spe = true;\n-      rs6000_spe = value;\n-      break;\n-\n     case OPT_mdebug_:\n       p = ASTRDUP (arg);\n-      rs6000_debug = 0;\n+      opts->x_rs6000_debug = 0;\n \n       while ((q = strtok (p, \",\")) != NULL)\n \t{\n@@ -4360,260 +4306,184 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t  else if (! strcmp (q, \"target\"))\n \t    mask = MASK_DEBUG_TARGET;\n \t  else\n-\t    error (\"unknown -mdebug-%s switch\", q);\n+\t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n \n \t  if (invert)\n-\t    rs6000_debug &= ~mask;\n+\t    opts->x_rs6000_debug &= ~mask;\n \t  else\t\n-\t    rs6000_debug |= mask;\n+\t    opts->x_rs6000_debug |= mask;\n \t}\n       break;\n \n #ifdef TARGET_USES_SYSV4_OPT\n-    case OPT_mcall_:\n-      rs6000_abi_name = arg;\n-      break;\n-\n-    case OPT_msdata_:\n-      rs6000_sdata_name = arg;\n-      break;\n-\n-    case OPT_mtls_size_:\n-      if (strcmp (arg, \"16\") == 0)\n-\trs6000_tls_size = 16;\n-      else if (strcmp (arg, \"32\") == 0)\n-\trs6000_tls_size = 32;\n-      else if (strcmp (arg, \"64\") == 0)\n-\trs6000_tls_size = 64;\n-      else\n-\terror (\"bad value %qs for -mtls-size switch\", arg);\n-      break;\n-\n     case OPT_mrelocatable:\n       if (value == 1)\n \t{\n-\t  target_flags |= MASK_MINIMAL_TOC;\n-\t  target_flags_explicit |= MASK_MINIMAL_TOC;\n-\t  TARGET_NO_FP_IN_TOC = 1;\n+\t  opts->x_target_flags |= MASK_MINIMAL_TOC;\n+\t  opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n \t}\n       break;\n \n     case OPT_mrelocatable_lib:\n       if (value == 1)\n \t{\n-\t  target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n-\t  target_flags_explicit |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n-\t  TARGET_NO_FP_IN_TOC = 1;\n+\t  opts->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n+\t  opts_set->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n \t}\n       else\n \t{\n-\t  target_flags &= ~MASK_RELOCATABLE;\n-\t  target_flags_explicit |= MASK_RELOCATABLE;\n+\t  opts->x_target_flags &= ~MASK_RELOCATABLE;\n+\t  opts_set->x_target_flags |= MASK_RELOCATABLE;\n \t}\n       break;\n #endif\n \n     case OPT_mabi_:\n       if (!strcmp (arg, \"altivec\"))\n \t{\n-\t  rs6000_explicit_options.altivec_abi = true;\n-\t  rs6000_altivec_abi = 1;\n+\t  opts_set->x_rs6000_altivec_abi = true;\n+\t  opts->x_rs6000_altivec_abi = 1;\n \n \t  /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n-\t  rs6000_spe_abi = 0;\n+\t  opts->x_rs6000_spe_abi = 0;\n \t}\n       else if (! strcmp (arg, \"no-altivec\"))\n \t{\n-\t  rs6000_explicit_options.altivec_abi = true;\n-\t  rs6000_altivec_abi = 0;\n+\t  opts_set->x_rs6000_altivec_abi = true;\n+\t  opts->x_rs6000_altivec_abi = 0;\n \t}\n       else if (! strcmp (arg, \"spe\"))\n \t{\n-\t  rs6000_explicit_options.spe_abi = true;\n-\t  rs6000_spe_abi = 1;\n-\t  rs6000_altivec_abi = 0;\n+\t  opts_set->x_rs6000_spe_abi = true;\n+\t  opts->x_rs6000_spe_abi = 1;\n+\t  opts->x_rs6000_altivec_abi = 0;\n \t  if (!TARGET_SPE_ABI)\n-\t    error (\"not configured for ABI: '%s'\", arg);\n+\t    error_at (loc, \"not configured for ABI: '%s'\", arg);\n \t}\n       else if (! strcmp (arg, \"no-spe\"))\n \t{\n-\t  rs6000_explicit_options.spe_abi = true;\n-\t  rs6000_spe_abi = 0;\n+\t  opts_set->x_rs6000_spe_abi = true;\n+\t  opts->x_rs6000_spe_abi = 0;\n \t}\n \n       /* These are here for testing during development only, do not\n \t document in the manual please.  */\n       else if (! strcmp (arg, \"d64\"))\n \t{\n-\t  rs6000_darwin64_abi = 1;\n-\t  warning (0, \"using darwin64 ABI\");\n+\t  opts->x_rs6000_darwin64_abi = 1;\n+\t  warning_at (loc, 0, \"using darwin64 ABI\");\n \t}\n       else if (! strcmp (arg, \"d32\"))\n \t{\n-\t  rs6000_darwin64_abi = 0;\n-\t  warning (0, \"using old darwin ABI\");\n+\t  opts->x_rs6000_darwin64_abi = 0;\n+\t  warning_at (loc, 0, \"using old darwin ABI\");\n \t}\n \n       else if (! strcmp (arg, \"ibmlongdouble\"))\n \t{\n-\t  rs6000_explicit_options.ieee = true;\n-\t  rs6000_ieeequad = 0;\n-\t  warning (0, \"using IBM extended precision long double\");\n+\t  opts_set->x_rs6000_ieeequad = true;\n+\t  opts->x_rs6000_ieeequad = 0;\n+\t  warning_at (loc, 0, \"using IBM extended precision long double\");\n \t}\n       else if (! strcmp (arg, \"ieeelongdouble\"))\n \t{\n-\t  rs6000_explicit_options.ieee = true;\n-\t  rs6000_ieeequad = 1;\n-\t  warning (0, \"using IEEE extended precision long double\");\n+\t  opts_set->x_rs6000_ieeequad = true;\n+\t  opts->x_rs6000_ieeequad = 1;\n+\t  warning_at (loc, 0, \"using IEEE extended precision long double\");\n \t}\n \n       else\n \t{\n-\t  error (\"unknown ABI specified: '%s'\", arg);\n+\t  error_at (loc, \"unknown ABI specified: '%s'\", arg);\n \t  return false;\n \t}\n       break;\n \n     case OPT_mcpu_:\n       rs6000_select[1].string = arg;\n-      rs6000_cpu_index = rs6000_cpu_name_lookup (arg);\n-      if (rs6000_cpu_index < 0)\n-\terror (\"bad value (%s) for -mcpu\", arg);\n+      opts->x_rs6000_cpu_index = rs6000_cpu_name_lookup (arg);\n+      if (opts->x_rs6000_cpu_index < 0)\n+\terror_at (loc, \"bad value (%s) for -mcpu\", arg);\n       break;\n \n     case OPT_mtune_:\n       rs6000_select[2].string = arg;\n-      rs6000_tune_index = rs6000_cpu_name_lookup (arg);\n-      if (rs6000_tune_index < 0)\n-\terror (\"bad value (%s) for -mtune\", arg);\n-      break;\n-\n-    case OPT_mtraceback_:\n-      if (! strncmp (arg, \"full\", 4))\n-\trs6000_traceback = traceback_full;\n-      else if (! strncmp (arg, \"part\", 4))\n-\trs6000_traceback = traceback_part;\n-      else if (! strncmp (arg, \"no\", 2))\n-\trs6000_traceback = traceback_none;\n-      else\n-\terror (\"unknown -mtraceback arg %qs; expecting %<full%>, \"\n-\t       \"%<partial%> or %<none%>\", arg);\n-      break;\n-\n-    case OPT_mfloat_gprs_:\n-      rs6000_explicit_options.float_gprs = true;\n-      if (! strcmp (arg, \"yes\") || ! strcmp (arg, \"single\"))\n-\trs6000_float_gprs = 1;\n-      else if (! strcmp (arg, \"double\"))\n-\trs6000_float_gprs = 2;\n-      else if (! strcmp (arg, \"no\"))\n-\trs6000_float_gprs = 0;\n-      else\n-\t{\n-\t  error (\"invalid option for -mfloat-gprs: '%s'\", arg);\n-\t  return false;\n-\t}\n+      opts->x_rs6000_tune_index = rs6000_cpu_name_lookup (arg);\n+      if (opts->x_rs6000_tune_index < 0)\n+\terror_at (loc, \"bad value (%s) for -mtune\", arg);\n       break;\n \n     case OPT_mlong_double_:\n-      rs6000_explicit_options.long_double = true;\n-      rs6000_long_double_type_size = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n       if (value != 64 && value != 128)\n \t{\n-\t  error (\"unknown switch -mlong-double-%s\", arg);\n-\t  rs6000_long_double_type_size = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n-\t  return false;\n-\t}\n-      else\n-\trs6000_long_double_type_size = value;\n-      break;\n-\n-    case OPT_msched_costly_dep_:\n-      rs6000_sched_costly_dep_str = arg;\n-      break;\n-\n-    case OPT_malign_:\n-      rs6000_explicit_options.alignment = true;\n-      if (! strcmp (arg, \"power\"))\n-\t{\n-\t  /* On 64-bit Darwin, power alignment is ABI-incompatible with\n-\t     some C library functions, so warn about it. The flag may be\n-\t     useful for performance studies from time to time though, so\n-\t     don't disable it entirely.  */\n-\t  if (DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT)\n-\t    warning (0, \"-malign-power is not supported for 64-bit Darwin;\"\n-\t\t     \" it is incompatible with the installed C and C++ libraries\");\n-\t  rs6000_alignment_flags = MASK_ALIGN_POWER;\n-\t}\n-      else if (! strcmp (arg, \"natural\"))\n-\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\n-      else\n-\t{\n-\t  error (\"unknown -malign-XXXXX option specified: '%s'\", arg);\n+\t  error_at (loc, \"unknown switch -mlong-double-%s\", arg);\n+\t  opts->x_rs6000_long_double_type_size\n+\t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n \t  return false;\n \t}\n       break;\n \n     case OPT_msingle_float:\n       if (!TARGET_SINGLE_FPU) \n-\twarning (0, \"-msingle-float option equivalent to -mhard-float\");\n+\twarning_at (loc, 0,\n+\t\t    \"-msingle-float option equivalent to -mhard-float\");\n       /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n-      rs6000_double_float = 0;\n-      target_flags &= ~MASK_SOFT_FLOAT;\n-      target_flags_explicit |= MASK_SOFT_FLOAT;\n+      opts->x_rs6000_double_float = 0;\n+      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n+      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n       break;\n \n     case OPT_mdouble_float:\n       /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n-      rs6000_single_float = 1;\n-      target_flags &= ~MASK_SOFT_FLOAT;\n-      target_flags_explicit |= MASK_SOFT_FLOAT;\n+      opts->x_rs6000_single_float = 1;\n+      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n+      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n       break;\n \n     case OPT_msimple_fpu:\n       if (!TARGET_SINGLE_FPU) \n-\twarning (0, \"-msimple-fpu option ignored\");\n+\twarning_at (loc, 0, \"-msimple-fpu option ignored\");\n       break;\n \n     case OPT_mhard_float:\n       /* -mhard_float implies -msingle-float and -mdouble-float. */\n-      rs6000_single_float = rs6000_double_float = 1;\n+      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n       break;\n \n     case OPT_msoft_float:\n       /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n-      rs6000_single_float = rs6000_double_float = 0;\n+      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n       break;\n \n     case OPT_mfpu_:\n-      fpu_type = rs6000_parse_fpu_option(arg);\n-      if (fpu_type != FPU_NONE) \n-      /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on HARD_FLOAT. */\n-      {\n-        target_flags &= ~MASK_SOFT_FLOAT;\n-        target_flags_explicit |= MASK_SOFT_FLOAT;\n-        rs6000_xilinx_fpu = 1;\n-        if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n-        rs6000_single_float = 1;\n-        if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n-          rs6000_single_float = rs6000_double_float = 1;\n-        if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n-          rs6000_simple_fpu = 1;\n-      }\n+      fpu_type = (enum fpu_type_t) value;\n+      if (fpu_type != FPU_NONE)\n+\t{\n+\t  /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on\n+\t     HARD_FLOAT. */\n+\t  opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n+\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_xilinx_fpu = 1;\n+\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n+\t    opts->x_rs6000_single_float = 1;\n+\t  if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n+\t    opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n+\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n+\t    opts->x_rs6000_simple_fpu = 1;\n+\t}\n       else\n-      {\n-        /* -mfpu=none is equivalent to -msoft-float */\n-        target_flags |= MASK_SOFT_FLOAT;\n-        target_flags_explicit |= MASK_SOFT_FLOAT;\n-        rs6000_single_float = rs6000_double_float = 0;\n-      }\n+\t{\n+\t  /* -mfpu=none is equivalent to -msoft-float.  */\n+\t  opts->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n+\t}\n+      /* Fall through.  */\n \n     case OPT_mrecip:\n-      rs6000_recip_name = (value) ? \"default\" : \"none\";\n-      break;\n-\n-    case OPT_mrecip_:\n-      rs6000_recip_name = arg;\n+      opts->x_rs6000_recip_name = (value) ? \"default\" : \"none\";\n       break;\n     }\n   return true;"}, {"sha": "0c44512aa4ab6adc56d3ea1de0311a287477384c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -354,8 +354,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define PROCESSOR_DEFAULT   PROCESSOR_RIOS1\n #define PROCESSOR_DEFAULT64 PROCESSOR_RS64A\n \n-extern enum fpu_type_t fpu_type;\n-\n /* Specify the dialect of assembler to use.  New mnemonics is dialect one\n    and the old mnemonics are dialect zero.  */\n #define ASSEMBLER_DIALECT (TARGET_NEW_MNEMONICS ? 1 : 0)"}, {"sha": "8a83a5ad6bd795c92b4d90cc369c211450aee213", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -47,10 +47,6 @@ enum rs6000_dependence_cost rs6000_sched_costly_dep = no_dep_costly\n TargetVariable\n enum rs6000_nop_insertion rs6000_sched_insert_nops = sched_finish_none\n \n-;; Size of long double.\n-TargetVariable\n-unsigned char rs6000_long_double_type_size\n-\n ;; IEEE quad extended precision long double.\n TargetVariable\n unsigned char rs6000_ieeequad\n@@ -59,18 +55,10 @@ unsigned char rs6000_ieeequad\n TargetVariable\n unsigned char rs6000_altivec_abi\n \n-;; Nonzero if we want SPE SIMD instructions.\n-TargetVariable\n-int rs6000_spe\n-\n ;; Nonzero if we want SPE ABI extensions.\n TargetVariable\n unsigned char rs6000_spe_abi\n \n-;; Nonzero if floating point operations are done in the GPRs.\n-TargetVariable\n-unsigned char rs6000_float_gprs\n-\n ;; Nonzero if we want Darwin's struct-by-value-in-regs ABI.\n TargetVariable\n unsigned char rs6000_darwin64_abi\n@@ -311,7 +299,7 @@ Target Report\n Generate software reciprocal divide and square root for better throughput.\n \n mrecip=\n-Target Report RejectNegative Joined\n+Target Report RejectNegative Joined Var(rs6000_recip_name)\n Generate software reciprocal divide and square root for better throughput.\n \n mrecip-precision\n@@ -378,7 +366,7 @@ Target RejectNegative Alias(misel)\n Deprecated option.  Use -misel instead\n \n mspe\n-Target\n+Target Var(rs6000_spe) Save\n Generate SPE SIMD instructions on E500\n \n mpaired\n@@ -410,9 +398,21 @@ Target RejectNegative Joined\n -mtune=\tSchedule code for given CPU\n \n mtraceback=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(rs6000_traceback_type) Var(rs6000_traceback)\n -mtraceback=\tSelect full, part, or no traceback table\n \n+Enum\n+Name(rs6000_traceback_type) Type(enum rs6000_traceback_type)\n+\n+EnumValue\n+Enum(rs6000_traceback_type) String(full) Value(traceback_full)\n+\n+EnumValue\n+Enum(rs6000_traceback_type) String(part) Value(traceback_part)\n+\n+EnumValue\n+Enum(rs6000_traceback_type) String(no) Value(traceback_none)\n+\n mlongcall\n Target Report Var(rs6000_default_long_calls) Save\n Avoid all range limits on call instructions\n@@ -430,25 +430,51 @@ Target Var(rs6000_warn_altivec_long) Init(1) Save\n Warn about deprecated 'vector long ...' AltiVec type usage\n \n mfloat-gprs=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(rs6000_float_gprs) Var(rs6000_float_gprs) Save\n -mfloat-gprs=\tSelect GPR floating point method\n \n+Enum\n+Name(rs6000_float_gprs) Type(unsigned char)\n+Valid arguments to -mfloat-gprs=:\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(yes) Value(1)\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(single) Value(1)\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(double) Value(2)\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(no) Value(0)\n+\n mlong-double-\n-Target RejectNegative Joined UInteger\n+Target RejectNegative Joined UInteger Var(rs6000_long_double_type_size) Save\n -mlong-double-<n>\tSpecify size of long double (64 or 128 bits)\n \n msched-costly-dep=\n-Target RejectNegative Joined \n+Target RejectNegative Joined Var(rs6000_sched_costly_dep_str)\n Determine which dependences between insns are considered costly\n \n minsert-sched-nops=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(rs6000_sched_insert_nops_str)\n Specify which post scheduling nop insertion scheme to apply\n \n malign-\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(rs6000_alignment_flags) Var(rs6000_alignment_flags)\n Specify alignment of structure fields default/natural\n \n+Enum\n+Name(rs6000_alignment_flags) Type(unsigned char)\n+Valid arguments to -malign-:\n+\n+EnumValue\n+Enum(rs6000_alignment_flags) String(power) Value(MASK_ALIGN_POWER)\n+\n+EnumValue\n+Enum(rs6000_alignment_flags) String(natural) Value(MASK_ALIGN_NATURAL)\n+\n mprioritize-restricted-insns=\n Target RejectNegative Joined UInteger Var(rs6000_sched_restricted_insns_priority) Save\n Specify scheduling priority for dispatch slot restricted insns\n@@ -466,9 +492,27 @@ Target RejectNegative Var(rs6000_simple_fpu) Save\n Floating point unit does not support divide & sqrt\n \n mfpu=\n-Target RejectNegative Joined \n+Target RejectNegative Joined Enum(fpu_type_t)\n -mfpu=\tSpecify FP (sp, dp, sp-lite, dp-lite) (implies -mxilinx-fpu)\n \n+Enum\n+Name(fpu_type_t) Type(enum fpu_type_t)\n+\n+EnumValue\n+Enum(fpu_type_t) String(none) Value(FPU_NONE)\n+\n+EnumValue\n+Enum(fpu_type_t) String(sp_lite) Value(FPU_SF_LITE)\n+\n+EnumValue\n+Enum(fpu_type_t) String(dp_lite) Value(FPU_DF_LITE)\n+\n+EnumValue\n+Enum(fpu_type_t) String(sp_full) Value(FPU_SF_FULL)\n+\n+EnumValue\n+Enum(fpu_type_t) String(dp_full) Value(FPU_DF_FULL)\n+\n mxilinx-fpu\n Target Var(rs6000_xilinx_fpu) Save\n Specify Xilinx FPU."}, {"sha": "0d8d955af129fd9fad03c431719a6b11ec473c1e", "filename": "gcc/config/rs6000/sysv4.opt", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.opt?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -1,6 +1,7 @@\n ; SYSV4 options for PPC port.\n ;\n-; Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2008, 2009, 2010, 2011\n+; Free Software Foundation, Inc.\n ; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n ;\n ; This file is part of GCC.\n@@ -20,17 +21,29 @@\n ; <http://www.gnu.org/licenses/>.\n \n mcall-\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(rs6000_abi_name)\n Select ABI calling convention\n \n msdata=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(rs6000_sdata_name)\n Select method for sdata handling\n \n mtls-size=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(rs6000_tls_size) Enum(rs6000_tls_size)\n Specify bit size of immediate TLS offsets\n \n+Enum\n+Name(rs6000_tls_size) Type(int)\n+\n+EnumValue\n+Enum(rs6000_tls_size) String(16) Value(16)\n+\n+EnumValue\n+Enum(rs6000_tls_size) String(32) Value(32)\n+\n+EnumValue\n+Enum(rs6000_tls_size) String(64) Value(64)\n+\n mbit-align\n Target Report Var(TARGET_NO_BITFIELD_TYPE) Save\n Align to the base type of the bit-field"}, {"sha": "945eeb15418c0880d662e7344563f08eb37a1dd6", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -192,6 +192,10 @@ function var_type_struct(flags)\n {\n \tif (flag_set_p(\"UInteger\", flags))\n \t\treturn \"int \"\n+\telse if (flag_set_p(\"Enum.*\", flags)) {\n+\t\ten = opt_args(\"Enum\", flags);\n+\t\treturn enum_type[en] \" \"\n+\t}\n \telse if (!flag_set_p(\"Joined.*\", flags) && !flag_set_p(\"Separate\", flags)) {\n \t\tif (flag_set_p(\".*Mask.*\", flags))\n \t\t\treturn \"int \""}, {"sha": "9408ced9c4448551945580aee776f66273680d60", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c860fe8c6cbc547d960118fb71d6e018aa51b18d/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=c860fe8c6cbc547d960118fb71d6e018aa51b18d", "patch": "@@ -629,6 +629,8 @@ if (have_save) {\n \t\t\t\t\tvar_target_range[name] = \"0, 255\"\n \t\t\t\telse if (otype ~ \"^signed +char *$\")\n \t\t\t\t\tvar_target_range[name] = \"-128, 127\"\n+\t\t\t\tif (otype == var_type(flags[i]))\n+\t\t\t\t\tvar_target_range[name] = \"\"\n \t\t\t}\n \t\t\telse\n \t\t\t\tvar_target_other[n_target_other++] = name;"}]}