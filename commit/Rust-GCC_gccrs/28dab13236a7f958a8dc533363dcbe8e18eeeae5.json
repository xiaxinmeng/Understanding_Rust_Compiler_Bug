{"sha": "28dab13236a7f958a8dc533363dcbe8e18eeeae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkYWIxMzIzNmE3Zjk1OGE4ZGM1MzMzNjNkY2JlOGUxOGVlZWFlNQ==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-25T22:17:02Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-25T22:17:02Z"}, "message": "basic-block.h (reorder_block_def): Rename to reorder_block_def_p.\n\n\t* basic-block.h (reorder_block_def): Rename to reorder_block_def_p.\n\t* c-common.c: Add missing casts from void * to other types.\n\t* c-decl.c: Likewise.\n\t* c-format.c: Likewise.\n\t* c-lex.c: Likewise.\n\t* c-pragma.c: Likewise.\n\t* c-typeck.c: Likewise.\n\t* defaults.h: Likewise.\n\t* genconstants.c: Likewise.\n\t* gengtype-lex.l: Likewise.\n\t* genmodes.c: Likewise.\n\t* read-rtl.c: Likewise.\n\t* rtl.c: Likewise.\n\nFrom-SVN: r85166", "tree": {"sha": "d4ef1636ca1b7a8d3ec231e0f5b6e84697ddeb94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ef1636ca1b7a8d3ec231e0f5b6e84697ddeb94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28dab13236a7f958a8dc533363dcbe8e18eeeae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dab13236a7f958a8dc533363dcbe8e18eeeae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28dab13236a7f958a8dc533363dcbe8e18eeeae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dab13236a7f958a8dc533363dcbe8e18eeeae5/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f3d87d661d99cb035d4f5cf72164f785fa270fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3d87d661d99cb035d4f5cf72164f785fa270fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3d87d661d99cb035d4f5cf72164f785fa270fc"}], "stats": {"total": 161, "additions": 97, "deletions": 64}, "files": [{"sha": "6815008cab5ec3205132a1758869d5f9725a91e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -1,3 +1,19 @@\n+2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* basic-block.h (reorder_block_def): Rename to reorder_block_def_p.\n+\t* c-common.c: Add missing casts from void * to other types.\n+\t* c-decl.c: Likewise.\n+\t* c-format.c: Likewise.\n+\t* c-lex.c: Likewise.\n+\t* c-pragma.c: Likewise.\n+\t* c-typeck.c: Likewise.\n+\t* defaults.h: Likewise.\n+\t* genconstants.c: Likewise.\n+\t* gengtype-lex.l: Likewise.\n+\t* genmodes.c: Likewise.\n+\t* read-rtl.c: Likewise.\n+\t* rtl.c: Likewise.\n+\n 2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n \n \t* bitmap.c: Use type-safe memory allocation macros from libiberty."}, {"sha": "bb334fd2add8b23222fb6ee84db75ab211f9fa87", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -300,7 +300,7 @@ typedef struct reorder_block_def\n \n   /* These fields are used by bb-reorder pass.  */\n   int visited;\n-} *reorder_block_def;\n+} *reorder_block_def_p;\n \n #define BB_FREQ_MAX 10000\n "}, {"sha": "ddd8e8766b0769763f04fa3cdf4bf12cb586db79", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -740,7 +740,7 @@ fname_as_string (int pretty_p)\n       int len = strlen (name) + 3; /* Two for '\"'s.  One for NULL.  */\n       cpp_string cstr = { 0, 0 }, strname;\n \n-      namep = xmalloc (len);\n+      namep = XNEWVEC (char, len);\n       snprintf (namep, len, \"\\\"%s\\\"\", name);\n       strname.text = (unsigned char *) namep;\n       strname.len = len - 1;\n@@ -1394,7 +1394,7 @@ verify_sequence_points (tree expr)\n   if (tlist_firstobj == 0)\n     {\n       gcc_obstack_init (&tlist_obstack);\n-      tlist_firstobj = obstack_alloc (&tlist_obstack, 0);\n+      tlist_firstobj = (char *) obstack_alloc (&tlist_obstack, 0);\n     }\n \n   verify_tree (expr, &before_sp, &after_sp, 0);\n@@ -2762,7 +2762,7 @@ c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n     }\n   else\n     {\n-      if (op == SIZEOF_EXPR)\n+      if (op == (enum tree_code) SIZEOF_EXPR)\n \t/* Convert in case a char is more than one unit.  */\n \tvalue = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n \t\t\t    size_int (TYPE_PRECISION (char_type_node)\n@@ -3658,7 +3658,7 @@ static int\n match_case_to_enum (splay_tree_node node, void *data)\n {\n   tree label = (tree) node->value;\n-  tree type = data;\n+  tree type = (tree) data;\n \n   /* Skip default case.  */\n   if (!CASE_LOW (label))\n@@ -4280,7 +4280,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n       if (len > 4 && p[0] == '_' && p[1] == '_'\n \t  && p[len - 1] == '_' && p[len - 2] == '_')\n \t{\n-\t  char *newp = alloca (len - 1);\n+\t  char *newp = (char *) alloca (len - 1);\n \n \t  strcpy (newp, &p[2]);\n \t  newp[len - 4] = '\\0';\n@@ -5199,8 +5199,9 @@ check_function_arguments_recurse (void (*callback)\n int\n field_decl_cmp (const void *x_p, const void *y_p)\n {\n-  const tree *const x = x_p;\n-  const tree *const y = y_p;\n+  const tree *const x = (const tree *const) x_p;\n+  const tree *const y = (const tree *const) y_p;\n+\n   if (DECL_NAME (*x) == DECL_NAME (*y))\n     /* A nontype is \"greater\" than a type.  */\n     return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n@@ -5224,8 +5225,8 @@ pointer operator in resort_data.  */\n static int\n resort_field_decl_cmp (const void *x_p, const void *y_p)\n {\n-  const tree *const x = x_p;\n-  const tree *const y = y_p;\n+  const tree *const x = (const tree *const) x_p;\n+  const tree *const y = (const tree *const) y_p;\n \n   if (DECL_NAME (*x) == DECL_NAME (*y))\n     /* A nontype is \"greater\" than a type.  */"}, {"sha": "47cfd5cc24f78c9327693b30a0568062a64d5bec", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -2963,7 +2963,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n     {\n       /* ASMSPEC is given, and not the name of a register.  Mark the\n       name with a star so assemble_name won't munge it.  */\n-      char *starred = alloca (strlen (asmspec) + 2);\n+      char *starred = (char *) alloca (strlen (asmspec) + 2);\n       starred[0] = '*';\n       strcpy (starred + 1, asmspec);\n "}, {"sha": "019b91a733952305f5c1100b99b2487002fd6412", "filename": "gcc/c-format.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -889,8 +889,8 @@ init_dollar_format_checking (int first_arg_num, tree params)\n       if (dollar_arguments_pointer_p)\n \tfree (dollar_arguments_pointer_p);\n       dollar_arguments_alloc = dollar_arguments_count;\n-      dollar_arguments_used = xmalloc (dollar_arguments_alloc);\n-      dollar_arguments_pointer_p = xmalloc (dollar_arguments_alloc);\n+      dollar_arguments_used = XNEWVEC (char, dollar_arguments_alloc);\n+      dollar_arguments_pointer_p = XNEWVEC (char, dollar_arguments_alloc);\n     }\n   if (dollar_arguments_alloc)\n     {\n@@ -980,9 +980,10 @@ maybe_read_dollar_number (const char **format,\n     {\n       int nalloc;\n       nalloc = 2 * dollar_arguments_alloc + 16;\n-      dollar_arguments_used = xrealloc (dollar_arguments_used, nalloc);\n-      dollar_arguments_pointer_p = xrealloc (dollar_arguments_pointer_p,\n-\t\t\t\t\t     nalloc);\n+      dollar_arguments_used = XRESIZEVEC (char, dollar_arguments_used,\n+\t\t\t\t\t  nalloc);\n+      dollar_arguments_pointer_p = XRESIZEVEC (char, dollar_arguments_pointer_p,\n+\t\t\t\t\t       nalloc);\n       memset (dollar_arguments_used + dollar_arguments_alloc, 0,\n \t      nalloc - dollar_arguments_alloc);\n       dollar_arguments_alloc = nalloc;\n@@ -1207,7 +1208,7 @@ static void\n check_format_arg (void *ctx, tree format_tree,\n \t\t  unsigned HOST_WIDE_INT arg_num)\n {\n-  format_check_context *format_ctx = ctx;\n+  format_check_context *format_ctx = (format_check_context *) ctx;\n   format_check_results *res = format_ctx->res;\n   function_format_info *info = format_ctx->info;\n   tree params = format_ctx->params;\n@@ -2307,7 +2308,8 @@ init_dynamic_asm_fprintf_info (void)\n \tabort ();\n \n       /* Create a new (writable) copy of asm_fprintf_length_specs.  */\n-      new_asm_fprintf_length_specs = xmemdup (asm_fprintf_length_specs,\n+      new_asm_fprintf_length_specs = (format_length_info *)\n+\t\t\t\t     xmemdup (asm_fprintf_length_specs,\n \t\t\t\t\t      sizeof (asm_fprintf_length_specs),\n \t\t\t\t\t      sizeof (asm_fprintf_length_specs));\n \n@@ -2333,7 +2335,7 @@ static void\n init_dynamic_diag_info (void)\n {\n   static tree t, loc, hwi;\n-      \n+\n   if (!loc || !t || !hwi)\n     {\n       static format_char_info *diag_fci, *cdiag_fci, *cxxdiag_fci;\n@@ -2368,7 +2370,8 @@ init_dynamic_diag_info (void)\n \tdynamic_format_types[gcc_diag_format_type].length_char_specs =\n \t  dynamic_format_types[gcc_cdiag_format_type].length_char_specs =\n \t  dynamic_format_types[gcc_cxxdiag_format_type].length_char_specs =\n-\t  diag_ls = xmemdup (gcc_diag_length_specs,\n+\t  diag_ls = (format_length_info *)\n+\t\t    xmemdup (gcc_diag_length_specs,\n \t\t\t     sizeof (gcc_diag_length_specs),\n \t\t\t     sizeof (gcc_diag_length_specs)); \n       if (hwi)\n@@ -2386,7 +2389,8 @@ init_dynamic_diag_info (void)\n       /* Handle the __gcc_diag__ format specifics.  */\n       if (! diag_fci)\n \tdynamic_format_types[gcc_diag_format_type].conversion_specs =\n-\t  diag_fci = xmemdup (gcc_diag_char_table,\n+\t  diag_fci = (format_char_info *)\n+\t\t     xmemdup (gcc_diag_char_table,\n \t\t\t      sizeof(gcc_diag_char_table),\n \t\t\t      sizeof(gcc_diag_char_table));\n       if (loc)\n@@ -2405,7 +2409,8 @@ init_dynamic_diag_info (void)\n       /* Handle the __gcc_cdiag__ format specifics.  */\n       if (! cdiag_fci)\n \tdynamic_format_types[gcc_cdiag_format_type].conversion_specs =\n-\t  cdiag_fci = xmemdup (gcc_cdiag_char_table,\n+\t  cdiag_fci = (format_char_info *)\n+\t\t      xmemdup (gcc_cdiag_char_table,\n \t\t\t       sizeof(gcc_cdiag_char_table),\n \t\t\t       sizeof(gcc_cdiag_char_table));\n       if (loc)\n@@ -2428,7 +2433,8 @@ init_dynamic_diag_info (void)\n       /* Handle the __gcc_cxxdiag__ format specifics.  */\n       if (! cxxdiag_fci)\n \tdynamic_format_types[gcc_cxxdiag_format_type].conversion_specs =\n-\t  cxxdiag_fci = xmemdup (gcc_cxxdiag_char_table,\n+\t  cxxdiag_fci = (format_char_info *)\n+\t\t\txmemdup (gcc_cxxdiag_char_table,\n \t\t\t\t sizeof(gcc_cxxdiag_char_table),\n \t\t\t\t sizeof(gcc_cxxdiag_char_table));\n       if (loc)\n@@ -2530,7 +2536,7 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       /* Our first time through, we have to make sure that our\n          format_type data is allocated dynamically and is modifiable.  */\n       if (!dynamic_format_types)\n-\tformat_types = dynamic_format_types =\n+\tformat_types = dynamic_format_types = (format_kind_info *)\n \t  xmemdup (format_types_orig, sizeof (format_types_orig),\n \t\t   sizeof (format_types_orig));\n "}, {"sha": "091ec802d979ec3e4a31450ca776cbe518aebe9a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -628,7 +628,7 @@ interpret_float (const cpp_token *token, unsigned int flags)\n     /* I or J suffix.  */\n     copylen--;\n \n-  copy = alloca (copylen + 1);\n+  copy = (char *) alloca (copylen + 1);\n   memcpy (copy, token->val.str.text, copylen);\n   copy[copylen] = '\\0';\n \n@@ -710,7 +710,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n \t    }\n \t}\n       while (tok->type == CPP_STRING || tok->type == CPP_WSTRING);\n-      strs = obstack_finish (&str_ob);\n+      strs = (cpp_string *) obstack_finish (&str_ob);\n     }\n \n   /* We have read one more token than we want.  */"}, {"sha": "563e2d7abdc120dc6d289de9cb2cdd42c4267358", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -554,7 +554,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n       const char *id = IDENTIFIER_POINTER (DECL_NAME (decl));\n       size_t ilen = IDENTIFIER_LENGTH (DECL_NAME (decl));\n \t\n-      char *newname = alloca (plen + ilen + 1);\n+      char *newname = (char *) alloca (plen + ilen + 1);\n \n       memcpy (newname,        prefix, plen);\n       memcpy (newname + plen, id, ilen + 1);"}, {"sha": "9a41da62382d2e4778475fd2df0a9e314e47f5be", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -3598,7 +3598,7 @@ warn_for_assignment (const char *msgid, const char *opname, tree function,\n \t    {\n \t      /* Function name is known; supply it.  */\n \t      const char *const argstring = _(\"passing arg of `%s'\");\n-\t      new_opname = alloca (IDENTIFIER_LENGTH (function)\n+\t      new_opname = (char *) alloca (IDENTIFIER_LENGTH (function)\n \t\t\t\t   + strlen (argstring) + 1 + 1);\n \t      sprintf (new_opname, argstring,\n \t\t       IDENTIFIER_POINTER (function));\n@@ -3607,15 +3607,15 @@ warn_for_assignment (const char *msgid, const char *opname, tree function,\n \t    {\n \t      /* Function name unknown (call through ptr).  */\n \t      const char *const argnofun = _(\"passing arg of pointer to function\");\n-\t      new_opname = alloca (strlen (argnofun) + 1 + 1);\n+\t      new_opname = (char *) alloca (strlen (argnofun) + 1 + 1);\n \t      sprintf (new_opname, argnofun);\n \t    }\n \t}\n       else if (function)\n \t{\n \t  /* Function name is known; supply it.  */\n \t  const char *const argstring = _(\"passing arg %d of `%s'\");\n-\t  new_opname = alloca (IDENTIFIER_LENGTH (function)\n+\t  new_opname = (char *) alloca (IDENTIFIER_LENGTH (function)\n \t\t\t       + strlen (argstring) + 1 + 25 /*%d*/ + 1);\n \t  sprintf (new_opname, argstring, argnum,\n \t\t   IDENTIFIER_POINTER (function));\n@@ -3624,7 +3624,7 @@ warn_for_assignment (const char *msgid, const char *opname, tree function,\n \t{\n \t  /* Function name unknown (call through ptr); just give arg number.  */\n \t  const char *const argnofun = _(\"passing arg %d of pointer to function\");\n-\t  new_opname = alloca (strlen (argnofun) + 1 + 25 /*%d*/ + 1);\n+\t  new_opname = (char *) alloca (strlen (argnofun) + 1 + 25 /*%d*/ + 1);\n \t  sprintf (new_opname, argnofun, argnum);\n \t}\n       opname = new_opname;\n@@ -3849,7 +3849,7 @@ error_init (const char *msgid)\n   char *ofwhat;\n \n   error (\"%s\", _(msgid));\n-  ofwhat = print_spelling (alloca (spelling_length () + 1));\n+  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     error (\"(near initialization for `%s')\", ofwhat);\n }\n@@ -3864,7 +3864,7 @@ pedwarn_init (const char *msgid)\n   char *ofwhat;\n \n   pedwarn (\"%s\", _(msgid));\n-  ofwhat = print_spelling (alloca (spelling_length () + 1));\n+  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     pedwarn (\"(near initialization for `%s')\", ofwhat);\n }\n@@ -3879,7 +3879,7 @@ warning_init (const char *msgid)\n   char *ofwhat;\n \n   warning (\"%s\", _(msgid));\n-  ofwhat = print_spelling (alloca (spelling_length () + 1));\n+  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     warning (\"(near initialization for `%s')\", ofwhat);\n }"}, {"sha": "763601c5f7ab16c12edd4389e8d7792c2ce5f0d2", "filename": "gcc/defaults.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -67,7 +67,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef ASM_FORMAT_PRIVATE_NAME\n # define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO) \\\n   do { const char *const name_ = (NAME); \\\n-       char *const output_ = (OUTPUT) = alloca (strlen (name_) + 32);\\\n+       char *const output_ = (OUTPUT) = \\\n+\t (char *) alloca (strlen (name_) + 32); \\\n        sprintf (output_, ASM_PN_FORMAT, name_, (unsigned long)(LABELNO)); \\\n   } while (0)\n #endif"}, {"sha": "a4daa22027a8a425143061963e52cb86920fe6d5", "filename": "gcc/genconstants.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -42,8 +42,8 @@ static int print_md_constant (void **, void *);\n static int\n print_md_constant (void **slot, void *info)\n {\n-  struct md_constant *def = *slot;\n-  FILE *file = info;\n+  struct md_constant *def = (struct md_constant *) *slot;\n+  FILE *file = (FILE *) info;\n \n   fprintf (file, \"#define %s %s\\n\", def->name, def->value);\n   return 1;"}, {"sha": "0c0c06d2f4424d45832dff1496e6b4b53ddcf93f", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -85,10 +85,11 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n       is_pointer = 1;\n   for (namelen = 1; ISIDNUM (namestart[namelen]); namelen++)\n     ;\n-  t = find_structure (xmemdup (tagstart, taglen, taglen+1), union_p);\n+  t = find_structure ((const char *) xmemdup (tagstart, taglen, taglen+1),\n+\t\t      union_p);\n   if (is_pointer)\n     t = create_pointer (t);\n-  namestart = xmemdup (namestart, namelen, namelen+1);\n+  namestart = (char *) xmemdup (namestart, namelen, namelen+1);\n #ifdef USE_MAPPED_LOCATION\n   /* temporary kludge - gentype doesn't handle cpp conditionals */\n   if (strcmp (namestart, \"location_t\") != 0\n@@ -115,13 +116,14 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n        ISSPACE(*typestart);\n        typestart++)\n     ;\n-  for (typelen = namestart - typestart; \n-       ISSPACE(typestart[typelen-1]); \n+  for (typelen = namestart - typestart;\n+       ISSPACE (typestart[typelen-1]);\n        typelen--)\n     ;\n \n   t = create_scalar_type (typestart, typelen);\n-  do_typedef (xmemdup (namestart, namelen, namelen+1), t, &lexer_line);\n+  do_typedef ((const char *) xmemdup (namestart, namelen, namelen+1), t,\n+\t      &lexer_line);\n   update_lineno (yytext, yyleng);\n }\n \n@@ -137,7 +139,8 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   namestart -= namelen - 1;\n \n   t = create_scalar_type (\"function type\", sizeof (\"function type\")-1);\n-  do_typedef (xmemdup (namestart, namelen, namelen+1), t, &lexer_line);\n+  do_typedef ((const char *) xmemdup (namestart, namelen, namelen+1), t,\n+\t      &lexer_line);\n   update_lineno (yytext, yyleng);\n }\n \n@@ -153,7 +156,8 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   namestart -= namelen - 1;\n \n   t = create_scalar_type (\"function type\", sizeof (\"function type\")-1);\n-  do_typedef (xmemdup (namestart, namelen, namelen+1), t, &lexer_line);\n+  do_typedef ((const char *) xmemdup (namestart, namelen, namelen+1), t,\n+\t      &lexer_line);\n   update_lineno (yytext, yyleng);\n }\n \n@@ -169,7 +173,8 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   namestart -= namelen - 1;\n \n   t = create_scalar_type (\"function type\", sizeof (\"function type\")-1);\n-  do_typedef (xmemdup (namestart, namelen, namelen+1), t, &lexer_line);\n+  do_typedef ((const char *) xmemdup (namestart, namelen, namelen+1), t,\n+\t      &lexer_line);\n   update_lineno (yytext, yyleng);\n }\n \n@@ -185,7 +190,8 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   namestart -= namelen - 1;\n \n   t = create_scalar_type (\"function type\", sizeof (\"function type\")-1);\n-  do_typedef (xmemdup (namestart, namelen, namelen+1), t, &lexer_line);\n+  do_typedef ((const char *) xmemdup (namestart, namelen, namelen+1), t,\n+\t      &lexer_line);\n   update_lineno (yytext, yyleng);\n }\n \n@@ -211,7 +217,9 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   for (taglen = 1; ISIDNUM (tagstart[taglen]); taglen++)\n     ;\n \n-  yylval.t = find_structure (xmemdup (tagstart, taglen, taglen + 1), union_p);\n+  yylval.t = find_structure ((const char *) xmemdup (tagstart, taglen,\n+\t\t\t\t\t\t     taglen + 1),\n+\t\t\t     union_p);\n   BEGIN(in_struct);\n   update_lineno (yytext, yyleng);\n   return typedef_p ? ENT_TYPEDEF_STRUCT : ENT_STRUCT;\n@@ -251,7 +259,7 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   push_macro_expansion (macro, macro_len, arg, arg_len);\n \n   /* Create the struct and typedef.  */\n-  ptr = xmemdup (\"VEC_\", 4, 4 + arg_len + 1);\n+  ptr = (char *) xmemdup (\"VEC_\", 4, 4 + arg_len + 1);\n   memcpy (&ptr[4], arg, arg_len);\n   ptr[4 + arg_len] = 0;\n   t = find_structure (ptr, 0);\n@@ -276,8 +284,8 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n \"ptr_alias\"/[^[:alnum:]_]\t{ return ALIAS; }\n \"nested_ptr\"/[^[:alnum:]_]\t{ return NESTED_PTR; }\n [0-9]+\t\t\t\t{ return NUM; }\n-\"param\"[0-9]*\"_is\"/[^[:alnum:]_]\t\t{ \n-  yylval.s = xmemdup (yytext, yyleng, yyleng+1);\n+\"param\"[0-9]*\"_is\"/[^[:alnum:]_]\t\t{\n+  yylval.s = (const char *) xmemdup (yytext, yyleng, yyleng+1);\n   return PARAM_IS;\n }\n \n@@ -308,32 +316,32 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   while (*ptr != ')' && !ISSPACE (*ptr))\n     ptr++;\n   arg_len = ptr - arg;\n-  ptr = xmemdup (macro, macro_len, macro_len + arg_len + 2);\n+  ptr = (char *) xmemdup (macro, macro_len, macro_len + arg_len + 2);\n   ptr[macro_len] = '_';\n   memcpy (&ptr[macro_len+1], arg, arg_len);\n   yylval.s = ptr;\n   return ID;\n }\n \n {ID}/[^[:alnum:]_]\t\t{\n-  yylval.s = xmemdup (yytext, yyleng, yyleng+1);\n+  yylval.s = (const char *) xmemdup (yytext, yyleng, yyleng+1);\n   return ID;\n }\n \n \\\"([^\"\\\\]|\\\\.)*\\\"\t\t{\n-  yylval.s = xmemdup (yytext+1, yyleng-2, yyleng-1);\n+  yylval.s = (const char *) xmemdup (yytext+1, yyleng-2, yyleng-1);\n   return STRING;\n }\n \"[\"[^\\[\\]]*\"]\"\t\t\t{\n-  yylval.s = xmemdup (yytext+1, yyleng-2, yyleng-1);\n+  yylval.s = (const char *) xmemdup (yytext+1, yyleng-2, yyleng-1);\n   return ARRAY;\n }\n ^\"%\"{ID}\t\t\t{\n-  yylval.s = xmemdup (yytext+1, yyleng-1, yyleng);\n+  yylval.s = (const char *) xmemdup (yytext+1, yyleng-1, yyleng);\n   return PERCENT_ID;\n }\n \"'\"(\"\\\\\".|[^\\\\])\"'\"\t\t{\n-  yylval.s = xmemdup (yytext+1, yyleng-2, yyleng);\n+  yylval.s = (const char *) xmemdup (yytext+1, yyleng-2, yyleng);\n   return CHAR;\n }\n "}, {"sha": "fc5dc9b41697b597d7ed2efabf6522e80386f97f", "filename": "gcc/genmodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -703,7 +703,7 @@ calc_wider_mode (void)\n \n   /* Allocate max_n_modes + 1 entries to leave room for the extra null\n      pointer assigned after the qsort call below.  */\n-  sortbuf = alloca ((max_n_modes + 1) * sizeof (struct mode_data *));\n+  sortbuf = (struct mode_data **) alloca ((max_n_modes + 1) * sizeof (struct mode_data *));\n \n   for (c = 0; c < MAX_MODE_CLASS; c++)\n     {"}, {"sha": "46ca61a188d7a1de1ab55377afe379720a117c30", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -191,7 +191,7 @@ read_name (char *str, FILE *infile)\n \t  struct md_constant tmp_def;\n \n \t  tmp_def.name = p;\n-\t  def = htab_find (md_constants, &tmp_def);\n+\t  def = (struct md_constant *) htab_find (md_constants, &tmp_def);\n \t  if (def)\n \t    p = def->value;\n \t} while (def);\n@@ -277,7 +277,7 @@ read_quoted_string (struct obstack *ob, FILE *infile)\n     }\n \n   obstack_1grow (ob, 0);\n-  return obstack_finish (ob);\n+  return (char *) obstack_finish (ob);\n }\n \n /* Read a braced string (a la Tcl) onto the obstack.  Caller has\n@@ -315,7 +315,7 @@ read_braced_string (struct obstack *ob, FILE *infile)\n     }\n \n   obstack_1grow (ob, 0);\n-  return obstack_finish (ob);\n+  return (char *) obstack_finish (ob);\n }\n \n /* Read some kind of string constant.  This is the high-level routine\n@@ -455,7 +455,7 @@ read_constants (FILE *infile, char *tmp_char)\n \t}\n       else\n \t{\n-\t  def = *entry_ptr;\n+\t  def = (struct md_constant *) *entry_ptr;\n \t  if (strcmp (def->value, tmp_char))\n \t    fatal_with_file_and_line (infile,\n \t\t\t\t      \"redefinition of %s, was %s, now %s\","}, {"sha": "533b2f12274f9ca0188e6d1cc60909e530c87e6e", "filename": "gcc/rtl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dab13236a7f958a8dc533363dcbe8e18eeeae5/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=28dab13236a7f958a8dc533363dcbe8e18eeeae5", "patch": "@@ -177,7 +177,8 @@ rtx_alloc_stat (RTX_CODE code MEM_STAT_DECL)\n {\n   rtx rt;\n \n-  rt = ggc_alloc_typed_stat (gt_ggc_e_7rtx_def, RTX_SIZE (code) PASS_MEM_STAT);\n+  rt = (rtx) ggc_alloc_typed_stat (gt_ggc_e_7rtx_def,\n+\t\t\t\t   RTX_SIZE (code) PASS_MEM_STAT);\n \n   /* We want to clear everything up to the FLD array.  Normally, this\n      is one int, but we don't want to assume that and it isn't very\n@@ -311,8 +312,8 @@ shallow_copy_rtx_stat (rtx orig MEM_STAT_DECL)\n {\n   rtx copy;\n \n-  copy = ggc_alloc_typed_stat (gt_ggc_e_7rtx_def, RTX_SIZE (GET_CODE (orig))\n-\t\t\t       PASS_MEM_STAT);\n+  copy = (rtx) ggc_alloc_typed_stat (gt_ggc_e_7rtx_def,\n+\t\t\t\t     RTX_SIZE (GET_CODE (orig)) PASS_MEM_STAT);\n   memcpy (copy, orig, RTX_SIZE (GET_CODE (orig)));\n   return copy;\n }"}]}