{"sha": "24fe8c8e338e1c820d942b9c7b997a37705eb29e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmZThjOGUzMzhlMWM4MjBkOTQyYjljN2I5OTdhMzc3MDVlYjI5ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-03T09:42:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-03T09:42:20Z"}, "message": "libstdc++: Fix std::to_address for debug iterators (PR 93960)\n\nIt should be valid to use std::to_address on a past-the-end iterator,\nbut the debug mode iterators do a check for dereferenceable in their\noperator->(). That check is generally useful, so rather than remove it\nthis changes std::__to_address to identify a debug mode iterator and\nuse base().operator->() to skip the check.\n\n\tPR libstdc++/93960\n\t* include/bits/ptr_traits.h (__to_address): Add special case for debug\n\titerators, to avoid dereferenceable check.\n\t* testsuite/20_util/to_address/1_neg.cc: Adjust dg-error line number.\n\t* testsuite/20_util/to_address/debug.cc: New test.", "tree": {"sha": "65a23ce2fbccca770f58214ecd7c7c277d1abbf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65a23ce2fbccca770f58214ecd7c7c277d1abbf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24fe8c8e338e1c820d942b9c7b997a37705eb29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fe8c8e338e1c820d942b9c7b997a37705eb29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24fe8c8e338e1c820d942b9c7b997a37705eb29e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fe8c8e338e1c820d942b9c7b997a37705eb29e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1e849b35bfe694b09f090397944e11c9f1dc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1e849b35bfe694b09f090397944e11c9f1dc04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1e849b35bfe694b09f090397944e11c9f1dc04"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "c358977dfbb703b300961f1f142e8b1caceb3e6d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=24fe8c8e338e1c820d942b9c7b997a37705eb29e", "patch": "@@ -1,3 +1,11 @@\n+2020-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93960\n+\t* include/bits/ptr_traits.h (__to_address): Add special case for debug\n+\titerators, to avoid dereferenceable check.\n+\t* testsuite/20_util/to_address/1_neg.cc: Adjust dg-error line number.\n+\t* testsuite/20_util/to_address/debug.cc: New test.\n+\n 2020-04-01  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* testsuite/experimental/net/execution_context/use_service.cc:"}, {"sha": "8fd91bf7bf271904682e30d9ba0675107bfebd0e", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=24fe8c8e338e1c820d942b9c7b997a37705eb29e", "patch": "@@ -34,6 +34,10 @@\n \n #include <bits/move.h>\n \n+#if __cplusplus > 201703L\n+namespace __gnu_debug { struct _Safe_iterator_base; }\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -169,7 +173,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Ptr, typename... _None>\n     constexpr auto\n     __to_address(const _Ptr& __ptr, _None...) noexcept\n-    { return std::__to_address(__ptr.operator->()); }\n+    {\n+      if constexpr (is_base_of_v<__gnu_debug::_Safe_iterator_base, _Ptr>)\n+\treturn std::__to_address(__ptr.base().operator->());\n+      else\n+\treturn std::__to_address(__ptr.operator->());\n+    }\n \n   /**\n    * @brief Obtain address referenced by a pointer to an object"}, {"sha": "ee64a2281fba6c2019739c7ca4780353d0c2a467", "filename": "libstdc++-v3/testsuite/20_util/to_address/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1_neg.cc?ref=24fe8c8e338e1c820d942b9c7b997a37705eb29e", "patch": "@@ -17,7 +17,7 @@\n \n // { dg-options \"-std=gnu++2a\" }\n // { dg-do compile { target c++2a } }\n-// { dg-error \"not a function pointer\" \"\" { target *-*-* } 153 }\n+// { dg-error \"not a function pointer\" \"\" { target *-*-* } 157 }\n \n #include <memory>\n "}, {"sha": "4555284416dc0391932db46556c246426bf15faa", "filename": "libstdc++-v3/testsuite/20_util/to_address/debug.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fe8c8e338e1c820d942b9c7b997a37705eb29e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2Fdebug.cc?ref=24fe8c8e338e1c820d942b9c7b997a37705eb29e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <debug/vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  __gnu_debug::vector<int> v{1, 2, 3};\n+  auto p = std::to_address(v.end());\n+  VERIFY( p == v.data() + v.size() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}