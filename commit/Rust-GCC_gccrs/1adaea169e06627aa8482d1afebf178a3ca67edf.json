{"sha": "1adaea169e06627aa8482d1afebf178a3ca67edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkYWVhMTY5ZTA2NjI3YWE4NDgyZDFhZmViZjE3OGEzY2E2N2VkZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T14:09:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T14:09:05Z"}, "message": "[multiple changes]\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sprint.adb (Sprint_Node_Actual, case Qualified_Expression):\n\tAvoid junk semicolon after argument of machine code Asm operand.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch11.adb (Generate_Push_Pop): Inhibit push/pop nodes in\n\tCodePeer mode or if restriction No_Exception_Handlers is present.\n\t* exp_ch6.adb (Expand_N_Subprogram_Body): (Inhibit push/pop\n\tnodes in CodePeer mode or if restriction No_Exception_Handlers\n\tis present.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* s-tassta.adb, atree.ads, errout.adb, sinput.adb: Minor reformatting.\n\n2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Specification): The\n\tspecification is legal if it is a function that returns an\n\tabstract type, if it comes from an attribute renaming of a stream\n\tattribute of an abstract type.\n\n2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_util.adb (Is_Possibly_Unaligned_Object): In case of indexed\n\tcomponents, check whether recursively check whether the prefix\n\tdenotes an unaligned object.\n\n2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Debug): The argument of\n\tthe pragma is legal if it is an expanded name that denotes a\n\tprocedure that be can called without parameters.\n\n2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_ugn.texi (Performance Considerations) <Vectorization\n\tof loops>: New sub-section.  <Other Optimization Switches>:\n\tMinor tweak.\n\nFrom-SVN: r180955", "tree": {"sha": "9a92388832fcd63df076879c26d8b5b64096e21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a92388832fcd63df076879c26d8b5b64096e21f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1adaea169e06627aa8482d1afebf178a3ca67edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adaea169e06627aa8482d1afebf178a3ca67edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adaea169e06627aa8482d1afebf178a3ca67edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adaea169e06627aa8482d1afebf178a3ca67edf/comments", "author": null, "committer": null, "parents": [{"sha": "4c9fe6c7494e31402c1c3ae4565aa03f70144258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9fe6c7494e31402c1c3ae4565aa03f70144258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9fe6c7494e31402c1c3ae4565aa03f70144258"}], "stats": {"total": 102, "additions": 89, "deletions": 13}, "files": [{"sha": "fba1980485749988fc3bd6257ef6bb1dfc484a5f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -1,3 +1,45 @@\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sprint.adb (Sprint_Node_Actual, case Qualified_Expression):\n+\tAvoid junk semicolon after argument of machine code Asm operand.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch11.adb (Generate_Push_Pop): Inhibit push/pop nodes in\n+\tCodePeer mode or if restriction No_Exception_Handlers is present.\n+\t* exp_ch6.adb (Expand_N_Subprogram_Body): (Inhibit push/pop\n+\tnodes in CodePeer mode or if restriction No_Exception_Handlers\n+\tis present.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-tassta.adb, atree.ads, errout.adb, sinput.adb: Minor reformatting.\n+\n+2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): The\n+\tspecification is legal if it is a function that returns an\n+\tabstract type, if it comes from an attribute renaming of a stream\n+\tattribute of an abstract type.\n+\n+2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Is_Possibly_Unaligned_Object): In case of indexed\n+\tcomponents, check whether recursively check whether the prefix\n+\tdenotes an unaligned object.\n+\n+2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Debug): The argument of\n+\tthe pragma is legal if it is an expanded name that denotes a\n+\tprocedure that be can called without parameters.\n+\n+2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_ugn.texi (Performance Considerations) <Vectorization\n+\tof loops>: New sub-section.  <Other Optimization Switches>:\n+\tMinor tweak.\n+\n 2011-11-04  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Minor reformatting."}, {"sha": "bbb6e3e20e0525cd0b8242f0a8f8eef35ce39588", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -160,7 +160,7 @@ package Atree is\n    --   Flag10\n    --   Flag11        Note that Flag1-2 are missing from this list. For\n    --   Flag12        historical reasons, these flag names are unused.\n-   --   Flag13\n+   --   Flag13        What about Flag3???\n    --   Flag14\n    --   Flag15\n    --   Flag16"}, {"sha": "5993132cf816f0dffb8c69fb8aa8beb16d31bd9a", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -439,7 +439,6 @@ package body Errout is\n                      Error_Msg_Internal\n                        (\"?in inlined body #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n-\n                   else\n                      Error_Msg_Internal\n                        (\"error in inlined body #\",\n@@ -453,7 +452,6 @@ package body Errout is\n                      Error_Msg_Internal\n                        (\"?in instantiation #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n-\n                   else\n                      Error_Msg_Internal\n                        (\"instantiation error #\","}, {"sha": "b2bf98cd1db386145c2bfb731b30e36055c66b2d", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -334,7 +334,7 @@ package body Exp_Ch11 is\n       --  raise statements into gotos, e.g. all N_Raise_xxx_Error nodes are\n       --  left unchanged and passed to the back end.\n \n-      --  Instead, the front end generates two nodes\n+      --  Instead, the front end generates three nodes\n \n       --     N_Push_Constraint_Error_Label\n       --     N_Push_Program_Error_Label\n@@ -356,6 +356,10 @@ package body Exp_Ch11 is\n       --  field in the Push node will be empty signifying that for this region\n       --  of code, no optimization is possible.\n \n+      --  These Push/Pop nodes are inhibited if No_Exception_Handlers is set\n+      --  since they are useless in this case, and in CodePeer mode, where\n+      --  they serve no purpose and can intefere with the analysis.\n+\n       --  The back end must maintain three stacks, one for each exception case,\n       --  the Push node pushes an entry onto the corresponding stack, and Pop\n       --  node pops off the entry. Then instead of calling Rcheck_nn, if the\n@@ -503,6 +507,12 @@ package body Exp_Ch11 is\n \n          procedure Generate_Push_Pop (H : Node_Id) is\n          begin\n+            if Restriction_Active (No_Exception_Handlers)\n+              or else CodePeer_Mode\n+            then\n+               return;\n+            end if;\n+\n             if Exc_Locally_Handled then\n                return;\n             else"}, {"sha": "d60993140928e233a4345597c8229f47cccedfbc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -5679,10 +5679,14 @@ package body Exp_Ch6 is\n       end if;\n \n       --  If local-exception-to-goto optimization active, insert dummy push\n-      --  statements at start, and dummy pop statements at end.\n+      --  statements at start, and dummy pop statements at end, but inhibit\n+      --  this if we have No_Exception_Handlers, since they are useless and\n+      --  intefere with analysis, e.g. by codepeer.\n \n       if (Debug_Flag_Dot_G\n            or else Restriction_Active (No_Exception_Propagation))\n+        and then not Restriction_Active (No_Exception_Handlers)\n+        and then not CodePeer_Mode\n         and then Is_Non_Empty_List (L)\n       then\n          declare"}, {"sha": "2045201a52209a1fc94a48f417090f74b6367a21", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -4273,9 +4273,14 @@ package body Exp_Util is\n          return True;\n       end if;\n \n-      --  Case of component reference\n+      --  Case of indexed component reference: test whether prefix is unaligned\n \n-      if Nkind (N) = N_Selected_Component then\n+      if Nkind (N) = N_Indexed_Component then\n+         return Is_Possibly_Unaligned_Object (Prefix (N));\n+\n+      --  Case of selected component reference\n+\n+      elsif Nkind (N) = N_Selected_Component then\n          declare\n             P : constant Node_Id   := Prefix (N);\n             C : constant Entity_Id := Entity (Selector_Name (N));"}, {"sha": "410cc8c0f06e13d65a4f02cfb840ee2a59a6da1e", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -1156,7 +1156,7 @@ package body System.Tasking.Stages is\n       Stack_Guard (Self_ID, True);\n \n       --  Initialize low-level TCB components, that cannot be initialized by\n-      --  the creator. Enter_Task sets Self_ID.LL.Thread\n+      --  the creator. Enter_Task sets Self_ID.LL.Thread.\n \n       Enter_Task (Self_ID);\n "}, {"sha": "5d30faa494427f03ac54cfc65e16d71f8696d916", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -3415,14 +3415,17 @@ package body Sem_Ch6 is\n \n          --  Ada 2005 (AI-251): If the return type is abstract, verify that\n          --  the subprogram is abstract also. This does not apply to renaming\n-         --  declarations, where abstractness is inherited.\n+         --  declarations, where abstractness is inherited, and to subprogram\n+         --  bodies generated for stream operations, which become renamings as\n+         --  bodies.\n \n          --  In case of primitives associated with abstract interface types\n          --  the check is applied later (see Analyze_Subprogram_Declaration).\n \n-         if not Nkind_In (Parent (N), N_Subprogram_Renaming_Declaration,\n-                                      N_Abstract_Subprogram_Declaration,\n-                                      N_Formal_Abstract_Subprogram_Declaration)\n+         if not Nkind_In (Original_Node (Parent (N)),\n+                            N_Subprogram_Renaming_Declaration,\n+                            N_Abstract_Subprogram_Declaration,\n+                            N_Formal_Abstract_Subprogram_Declaration)\n          then\n             if Is_Abstract_Type (Etype (Designator))\n               and then not Is_Interface (Etype (Designator))"}, {"sha": "397c73380a217f80f4f049a37b12cccf00cf6455", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -7902,10 +7902,13 @@ package body Sem_Prag is\n                  N_Indexed_Component,\n                  N_Function_Call,\n                  N_Identifier,\n+                 N_Expanded_Name,\n                  N_Selected_Component)\n             then\n                --  If this pragma Debug comes from source, its argument was\n                --  parsed as a name form (which is syntactically identical).\n+               --  In a generic context a parameterless call will be left as\n+               --  an expanded name (if global) or selected_component if local.\n                --  Change it to a procedure call statement now.\n \n                Change_Name_To_Procedure_Call_Statement (Call);"}, {"sha": "175af07969bec54ce0f12d078684aebbefdb5dfb", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,6 +51,7 @@ package body Sinput is\n    --  Make control characters visible\n \n    First_Time_Around : Boolean := True;\n+   --  This needs a comment ???\n \n    --  Routines to support conversion between types Lines_Table_Ptr,\n    --  Logical_Lines_Table_Ptr and System.Address."}, {"sha": "674c9db05ac7c340ae2822498e19a7af68fbdaa9", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adaea169e06627aa8482d1afebf178a3ca67edf/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=1adaea169e06627aa8482d1afebf178a3ca67edf", "patch": "@@ -2694,9 +2694,19 @@ package body Sprint is\n \n             if Paren_Count (Expression (Node)) /= 0 then\n                Sprint_Node (Expression (Node));\n+\n             else\n                Write_Char ('(');\n                Sprint_Node (Expression (Node));\n+\n+               --  Odd case, for the qualified expressions used in machine\n+               --  code the argument may be a procedure call, resulting in\n+               --  a junk semicolon before the right parent, get rid of it.\n+\n+               Write_Erase_Char (';');\n+\n+               --  Now we can add the terminating right paren\n+\n                Write_Char (')');\n             end if;\n "}]}