{"sha": "cd91a084877dabcc53aec57ab70ca4fc32f3d985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5MWEwODQ4NzdkYWJjYzUzYWVjNTdhYjcwY2E0ZmMzMmYzZDk4NQ==", "commit": {"author": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-07-22T09:14:39Z"}, "committer": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-07-22T09:22:11Z"}, "message": "Generation of adjusted ldp/stp for vector types\n\nIntroduce simple peephole2 optimization which substitutes a sequence of\nfour consecutive load or store (LDR, STR) instructions with two load or\nstore pair (LDP, STP) instructions for 2 element supported vector modes\n(V2SI, V2SF, V2DI, and V2DF).\nGenerated load / store pair instruction offset is adjusted accordingly.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\nExample:\n$ cat stp_vec_v2sf.c\ntypedef float __attribute__((vector_size(8))) vec;\n\nvoid\nstore_adjusted(vec *out, vec x, vec y)\n{\n  out[400] = x;\n  out[401] = y;\n  out[402] = y;\n  out[403] = x;\n}\n\nExample compiled with:\n$ ./aarch64-none-linux-gnu-gcc -S -O2 stp_vec_v2sf.c -dp\n\nBefore the patch:\n\nstore_adjusted:\n    str     d0, [x0, 3200]    // 9    [c=4 l=4]  *aarch64_simd_movv2si/2\n    str     d1, [x0, 3208]    // 11   [c=4 l=4]  *aarch64_simd_movv2si/2\n    str     d1, [x0, 3216]    // 13   [c=4 l=4]  *aarch64_simd_movv2si/2\n    str     d0, [x0, 3224]    // 15   [c=4 l=4]  *aarch64_simd_movv2si/2\n    ret       // 26       [c=0 l=4]  *do_return\n\nAfter the patch:\n\nstore_adjusted:\n    add     x1, x0, 3200    // 27   [c=4 l=4]  *adddi3_aarch64/0\n    stp     d0, d1, [x1]    // 28   [c=0 l=4]  vec_store_pairv2siv2si\n    stp     d1, d0, [x1, 16]        // 29   [c=0 l=4]  vec_store_pairv2siv2si\n    ret             // 22   [c=0 l=4]  *do_return\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-ldpstp.md: Add two peepholes for adjusted vector\n\tV2SI, V2SF, V2DI, V2DF load pair and store pair modes.\n\t* config/aarch64/aarch64-protos.h (aarch64_gen_adjusted_ldpstp):\n\tChange mode parameter to machine_mode.\n\t(aarch64_operands_adjust_ok_for_ldpstp): Change mode parameter to\n\tmachine_mode.\n\t* config/aarch64/aarch64.c (aarch64_operands_adjust_ok_for_ldpstp):\n\tChange mode parameter to machine_mode.\n\t(aarch64_gen_adjusted_ldpstp): Change mode parameter to machine_mode.\n\t* config/aarch64/iterators.md (VP_2E): New iterator for 2 element vectors.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/ldp_vec_v2sf.c: New test.\n\t* gcc.target/aarch64/ldp_vec_v2si.c: New test.\n\t* gcc.target/aarch64/stp_vec_v2df.c: New test.\n\t* gcc.target/aarch64/stp_vec_v2di.c: New test.\n\t* gcc.target/aarch64/stp_vec_v2sf.c: New test.\n\t* gcc.target/aarch64/stp_vec_v2si.c: New test.", "tree": {"sha": "45e021672be7374e47b47cc99b1596c5d35629b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45e021672be7374e47b47cc99b1596c5d35629b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd91a084877dabcc53aec57ab70ca4fc32f3d985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd91a084877dabcc53aec57ab70ca4fc32f3d985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd91a084877dabcc53aec57ab70ca4fc32f3d985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd91a084877dabcc53aec57ab70ca4fc32f3d985/comments", "author": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93676fb5385200b249cd1c53d95e1d6f717edaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93676fb5385200b249cd1c53d95e1d6f717edaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93676fb5385200b249cd1c53d95e1d6f717edaa"}], "stats": {"total": 157, "additions": 151, "deletions": 6}, "files": [{"sha": "02d7a5bd171b2e2e1a92448c021ff4822cd7a1a7", "filename": "gcc/config/aarch64/aarch64-ldpstp.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -294,3 +294,45 @@\n   else\n     FAIL;\n })\n+\n+(define_peephole2\n+  [(match_scratch:DI 8 \"r\")\n+   (set (match_operand:VP_2E 0 \"memory_operand\" \"\")\n+        (match_operand:VP_2E 1 \"aarch64_reg_or_zero\" \"\"))\n+   (set (match_operand:VP_2E 2 \"memory_operand\" \"\")\n+        (match_operand:VP_2E 3 \"aarch64_reg_or_zero\" \"\"))\n+   (set (match_operand:VP_2E 4 \"memory_operand\" \"\")\n+        (match_operand:VP_2E 5 \"aarch64_reg_or_zero\" \"\"))\n+   (set (match_operand:VP_2E 6 \"memory_operand\" \"\")\n+        (match_operand:VP_2E 7 \"aarch64_reg_or_zero\" \"\"))\n+   (match_dup 8)]\n+  \"TARGET_SIMD\n+   && aarch64_operands_adjust_ok_for_ldpstp (operands, false, <MODE>mode)\"\n+  [(const_int 0)]\n+{\n+  if (aarch64_gen_adjusted_ldpstp (operands, false, <MODE>mode, UNKNOWN))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n+(define_peephole2\n+  [(match_scratch:DI 8 \"r\")\n+   (set (match_operand:VP_2E 0 \"register_operand\" \"\")\n+        (match_operand:VP_2E 1 \"memory_operand\" \"\"))\n+   (set (match_operand:VP_2E 2 \"register_operand\" \"\")\n+        (match_operand:VP_2E 3 \"memory_operand\" \"\"))\n+   (set (match_operand:VP_2E 4 \"register_operand\" \"\")\n+        (match_operand:VP_2E 5 \"memory_operand\" \"\"))\n+   (set (match_operand:VP_2E 6 \"register_operand\" \"\")\n+        (match_operand:VP_2E 7 \"memory_operand\" \"\"))\n+   (match_dup 8)]\n+  \"TARGET_SIMD\n+   && aarch64_operands_adjust_ok_for_ldpstp (operands, true, <MODE>mode)\"\n+  [(const_int 0)]\n+{\n+  if (aarch64_gen_adjusted_ldpstp (operands, true, <MODE>mode, UNKNOWN))\n+    DONE;\n+  else\n+    FAIL;\n+})"}, {"sha": "c7e828d940f8f0014ab2569edeae54836ab367ff", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -682,7 +682,7 @@ void aarch64_split_compare_and_swap (rtx op[]);\n \n void aarch64_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n \n-bool aarch64_gen_adjusted_ldpstp (rtx *, bool, scalar_mode, RTX_CODE);\n+bool aarch64_gen_adjusted_ldpstp (rtx *, bool, machine_mode, RTX_CODE);\n \n void aarch64_expand_sve_vec_cmp_int (rtx, rtx_code, rtx, rtx);\n bool aarch64_expand_sve_vec_cmp_float (rtx, rtx_code, rtx, rtx, bool);\n@@ -733,7 +733,7 @@ int aarch64_ccmp_mode_to_code (machine_mode mode);\n \n bool extract_base_offset_in_addr (rtx mem, rtx *base, rtx *offset);\n bool aarch64_operands_ok_for_ldpstp (rtx *, bool, machine_mode);\n-bool aarch64_operands_adjust_ok_for_ldpstp (rtx *, bool, scalar_mode);\n+bool aarch64_operands_adjust_ok_for_ldpstp (rtx *, bool, machine_mode);\n void aarch64_swap_ldrstr_operands (rtx *, bool);\n \n extern void aarch64_asm_output_pool_epilogue (FILE *, const char *,"}, {"sha": "3fe1feaa80ccb0a287ee1c7ea1056e8f0a830532", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -22158,7 +22158,7 @@ aarch64_ldrstr_offset_compare (const void *x, const void *y)\n \n bool\n aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n-\t\t\t\t       scalar_mode mode)\n+\t\t\t\t       machine_mode mode)\n {\n   const int num_insns = 4;\n   enum reg_class rclass;\n@@ -22235,7 +22235,7 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n   for (int i = 0; i < num_insns; i++)\n     offvals[i] = INTVAL (offset[i]);\n \n-  msize = GET_MODE_SIZE (mode);\n+  msize = GET_MODE_SIZE (mode).to_constant ();\n \n   /* Check if the offsets can be put in the right order to do a ldp/stp.  */\n   qsort (offvals, num_insns, sizeof (HOST_WIDE_INT),\n@@ -22275,7 +22275,7 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n \n bool\n aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n-\t\t\t     scalar_mode mode, RTX_CODE code)\n+\t\t\t     machine_mode mode, RTX_CODE code)\n {\n   rtx base, offset_1, offset_3, t1, t2;\n   rtx mem_1, mem_2, mem_3, mem_4;\n@@ -22314,7 +22314,7 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n \t      && offset_3 != NULL_RTX);\n \n   /* Adjust offset so it can fit in LDP/STP instruction.  */\n-  msize = GET_MODE_SIZE (mode);\n+  msize = GET_MODE_SIZE (mode).to_constant();\n   stp_off_upper_limit = msize * (0x40 - 1);\n   stp_off_lower_limit = - msize * 0x40;\n "}, {"sha": "054fd8515c6ebf136da699e2993f6ebb348c3b1a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -98,6 +98,9 @@\n ;; Copy of the above.\n (define_mode_iterator DREG2 [V8QI V4HI V4HF V2SI V2SF DF])\n \n+;; All modes suitable to store/load pair (2 elements) using STP/LDP.\n+(define_mode_iterator VP_2E [V2SI V2SF V2DI V2DF])\n+\n ;; Advanced SIMD, 64-bit container, all integer modes.\n (define_mode_iterator VD_BHSI [V8QI V4HI V2SI])\n "}, {"sha": "fbdae1c6cff1aef40db644361381ce511f0be64a", "filename": "gcc/testsuite/gcc.target/aarch64/ldp_vec_v2sf.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_v2sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_v2sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_v2sf.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef float __attribute__((vector_size(8))) vec;\n+\n+vec\n+load_long(vec *v) {\n+  return v[110] + v[111] + v[112] + v[113];\n+}\n+\n+/* { dg-final { scan-assembler {add\\tx[0-9]+, x[0-9]+, 880} } } */\n+/* { dg-final { scan-assembler {ldp\\td[0-9]+, d[0-9]+, \\[x[0-9]+\\]} } } */\n+/* { dg-final { scan-assembler {ldp\\td[0-9]+, d[0-9]+, \\[x[0-9]+, 16\\]} } } */\n+/* { dg-final { scan-assembler-not \"ldr\\t\" } } */"}, {"sha": "7714cd6cd9e8fa7dc1febf484d6726d44c246408", "filename": "gcc/testsuite/gcc.target/aarch64/ldp_vec_v2si.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_v2si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_v2si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_v2si.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int __attribute__((vector_size(8))) vec;\n+\n+vec\n+load_long(vec *v) {\n+  return v[110] + v[111] + v[112] + v[113];\n+}\n+\n+/* { dg-final { scan-assembler {add\\tx[0-9]+, x[0-9]+, 880} } } */\n+/* { dg-final { scan-assembler {ldp\\td[0-9]+, d[0-9]+, \\[x[0-9]+\\]} } } */\n+/* { dg-final { scan-assembler {ldp\\td[0-9]+, d[0-9]+, \\[x[0-9]+, 16\\]} } } */\n+/* { dg-final { scan-assembler-not \"ldr\\t\" } } */"}, {"sha": "3ee039d641531258be2453520c4e1bce6412d809", "filename": "gcc/testsuite/gcc.target/aarch64/stp_vec_v2df.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2df.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef double __attribute__((vector_size(16))) vec;\n+\n+void\n+store_adjusted(vec *out, vec x, vec y)\n+{\n+  out[100] = x;\n+  out[101] = y;\n+  out[102] = y;\n+  out[103] = x;\n+}\n+\n+/* { dg-final { scan-assembler {add\\tx[0-9]+, x[0-9]+, 1600} } } */\n+/* { dg-final { scan-assembler {stp\\tq[0-9]+, q[0-9]+, \\[x[0-9]+\\]} } } */\n+/* { dg-final { scan-assembler {stp\\tq[0-9]+, q[0-9]+, \\[x[0-9]+, 32\\]} } } */\n+/* { dg-final { scan-assembler-not \"str\\t\" } } */"}, {"sha": "85d7b5b955efaa617235519281a6c187d970b0da", "filename": "gcc/testsuite/gcc.target/aarch64/stp_vec_v2di.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2di.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef long long __attribute__((vector_size(16))) vec;\n+\n+void\n+store_adjusted(vec *out, vec x, vec y)\n+{\n+  out[100] = x;\n+  out[101] = y;\n+  out[102] = y;\n+  out[103] = x;\n+}\n+\n+/* { dg-final { scan-assembler {add\\tx[0-9]+, x[0-9]+, 1600} } } */\n+/* { dg-final { scan-assembler {stp\\tq[0-9]+, q[0-9]+, \\[x[0-9]+\\]} } } */\n+/* { dg-final { scan-assembler {stp\\tq[0-9]+, q[0-9]+, \\[x[0-9]+, 32\\]} } } */\n+/* { dg-final { scan-assembler-not \"str\\t\" } } */"}, {"sha": "e7c2e6e62ce741e45beada811af6c32bae27f698", "filename": "gcc/testsuite/gcc.target/aarch64/stp_vec_v2sf.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2sf.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef float __attribute__((vector_size(8))) vec;\n+\n+void\n+store_adjusted(vec *out, vec x, vec y)\n+{\n+  out[400] = x;\n+  out[401] = y;\n+  out[402] = y;\n+  out[403] = x;\n+}\n+\n+/* { dg-final { scan-assembler {add\\tx[0-9]+, x[0-9]+, 3200} } } */\n+/* { dg-final { scan-assembler {stp\\td[0-9]+, d[0-9]+, \\[x[0-9]+\\]} } } */\n+/* { dg-final { scan-assembler {stp\\td[0-9]+, d[0-9]+, \\[x[0-9]+, 16\\]} } } */\n+/* { dg-final { scan-assembler-not \"str\\t\" } } */"}, {"sha": "17b44a2aed5df90230c4583a46a5bfa97a957b26", "filename": "gcc/testsuite/gcc.target/aarch64/stp_vec_v2si.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd91a084877dabcc53aec57ab70ca4fc32f3d985/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_v2si.c?ref=cd91a084877dabcc53aec57ab70ca4fc32f3d985", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int __attribute__((vector_size(8))) vec;\n+\n+void\n+store_adjusted(vec *out, vec x, vec y)\n+{\n+  out[400] = x;\n+  out[401] = y;\n+  out[402] = y;\n+  out[403] = x;\n+}\n+\n+/* { dg-final { scan-assembler {add\\tx[0-9]+, x[0-9]+, 3200} } } */\n+/* { dg-final { scan-assembler {stp\\td[0-9]+, d[0-9]+, \\[x[0-9]+\\]} } } */\n+/* { dg-final { scan-assembler {stp\\td[0-9]+, d[0-9]+, \\[x[0-9]+, 16\\]} } } */\n+/* { dg-final { scan-assembler-not \"str\\t\" } } */"}]}