{"sha": "db87f19ae3cfc126fb39616515b57dea4df02e6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4N2YxOWFlM2NmYzEyNmZiMzk2MTY1MTViNTdkZWE0ZGYwMmU2ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-18T14:44:38Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-18T16:44:49Z"}, "message": "preprocessor: Update mkdeps for modules\n\nThis is slightly different to the original patch I posted.  This adds\nseparate module target and dependency functions (rather than a single\nbi-modal function).\n\n\tlibcpp/\n\t* include/cpplib.h (struct cpp_options): Add modules to\n\tdep-options.\n\t* include/mkdeps.h (deps_add_module_target): Declare.\n\t(deps_add_module_dep): Declare.\n\t* mkdeps.c (class mkdeps): Add modules, module_name, cmi_name,\n\tis_header_unit fields.  Adjust cdtors.\n\t(deps_add_module_target, deps_add_module_dep): New.\n\t(make_write): Write module dependencies, if enabled.", "tree": {"sha": "b6ecb449034d003a05e622635f3c11b862687825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ecb449034d003a05e622635f3c11b862687825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db87f19ae3cfc126fb39616515b57dea4df02e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db87f19ae3cfc126fb39616515b57dea4df02e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db87f19ae3cfc126fb39616515b57dea4df02e6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db87f19ae3cfc126fb39616515b57dea4df02e6d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a788c7174496aca5fbe3e2b617a5a62e32c209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a788c7174496aca5fbe3e2b617a5a62e32c209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a788c7174496aca5fbe3e2b617a5a62e32c209"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "75d4d0a9f2ffd47c315846076c609633ace43baa", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db87f19ae3cfc126fb39616515b57dea4df02e6d/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db87f19ae3cfc126fb39616515b57dea4df02e6d/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=db87f19ae3cfc126fb39616515b57dea4df02e6d", "patch": "@@ -528,6 +528,9 @@ struct cpp_options\n        one.  */\n     bool phony_targets;\n \n+    /* Generate dependency info for modules.  */\n+    bool modules;\n+\n     /* If true, no dependency is generated on the main file.  */\n     bool ignore_main_file;\n "}, {"sha": "9f10327eec346506f3bee64988eec4414743eaf6", "filename": "libcpp/include/mkdeps.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db87f19ae3cfc126fb39616515b57dea4df02e6d/libcpp%2Finclude%2Fmkdeps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db87f19ae3cfc126fb39616515b57dea4df02e6d/libcpp%2Finclude%2Fmkdeps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fmkdeps.h?ref=db87f19ae3cfc126fb39616515b57dea4df02e6d", "patch": "@@ -51,6 +51,13 @@ extern void deps_add_target (class mkdeps *, const char *, int);\n    string as the default target is interpreted as stdin.  */\n extern void deps_add_default_target (class mkdeps *, const char *);\n \n+/* Adds a module target.  The module name and cmi name are copied.  */\n+extern void deps_add_module_target (struct mkdeps *, const char *module,\n+\t\t\t\t    const char *cmi, bool is_header);\n+\n+/* Adds a module dependency.  The module name is copied.  */\n+extern void deps_add_module_dep (struct mkdeps *, const char *module);\n+\n /* Add a dependency (appears on the right side of the colon) to the\n    deps list.  Dependencies will be printed in the order that they\n    were entered with this function.  By convention, the first"}, {"sha": "4a8e101b912f3f18079b9859f94b4bed5df6e341", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db87f19ae3cfc126fb39616515b57dea4df02e6d/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db87f19ae3cfc126fb39616515b57dea4df02e6d/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=db87f19ae3cfc126fb39616515b57dea4df02e6d", "patch": "@@ -81,7 +81,7 @@ class mkdeps\n   };\n \n   mkdeps ()\n-    : quote_lwm (0)\n+    : module_name (NULL), cmi_name (NULL), is_header_unit (false), quote_lwm (0)\n   {\n   }\n   ~mkdeps ()\n@@ -94,14 +94,22 @@ class mkdeps\n       free (const_cast <char *> (deps[i]));\n     for (i = vpath.size (); i--;)\n       XDELETEVEC (vpath[i].str);\n+    for (i = modules.size (); i--;)\n+      XDELETEVEC (modules[i]);\n+    XDELETEVEC (module_name);\n+    free (const_cast <char *> (cmi_name));\n   }\n \n public:\n   vec<const char *> targets;\n   vec<const char *> deps;\n   vec<velt> vpath;\n+  vec<const char *> modules;\n \n public:\n+  const char *module_name;\n+  const char *cmi_name;\n+  bool is_header_unit;\n   unsigned short quote_lwm;\n };\n \n@@ -313,6 +321,28 @@ deps_add_vpath (class mkdeps *d, const char *vpath)\n     }\n }\n \n+/* Add a new module target (there can only be one).  M is the module\n+   name.   */\n+\n+void\n+deps_add_module_target (struct mkdeps *d, const char *m,\n+\t\t\tconst char *cmi, bool is_header_unit)\n+{\n+  gcc_assert (!d->module_name);\n+  \n+  d->module_name = xstrdup (m);\n+  d->is_header_unit = is_header_unit;\n+  d->cmi_name = xstrdup (cmi);\n+}\n+\n+/* Add a new module dependency.  M is the module name.  */\n+\n+void\n+deps_add_module_dep (struct mkdeps *d, const char *m)\n+{\n+  d->modules.push (xstrdup (m));\n+}\n+\n /* Write NAME, with a leading space to FP, a Makefile.  Advance COL as\n    appropriate, wrap at COLMAX, returning new column number.  Iff\n    QUOTE apply quoting.  Append TRAIL.  */\n@@ -369,6 +399,8 @@ make_write (const cpp_reader *pfile, FILE *fp, unsigned int colmax)\n   if (d->deps.size ())\n     {\n       column = make_write_vec (d->targets, fp, 0, colmax, d->quote_lwm);\n+      if (CPP_OPTION (pfile, deps.modules) && d->cmi_name)\n+\tcolumn = make_write_name (d->cmi_name, fp, column, colmax);\n       fputs (\":\", fp);\n       column++;\n       make_write_vec (d->deps, fp, column, colmax);\n@@ -377,6 +409,59 @@ make_write (const cpp_reader *pfile, FILE *fp, unsigned int colmax)\n \tfor (unsigned i = 1; i < d->deps.size (); i++)\n \t  fprintf (fp, \"%s:\\n\", munge (d->deps[i]));\n     }\n+\n+  if (!CPP_OPTION (pfile, deps.modules))\n+    return;\n+\n+  if (d->modules.size ())\n+    {\n+      column = make_write_vec (d->targets, fp, 0, colmax, d->quote_lwm);\n+      if (d->cmi_name)\n+\tcolumn = make_write_name (d->cmi_name, fp, column, colmax);\n+      fputs (\":\", fp);\n+      column++;\n+      column = make_write_vec (d->modules, fp, column, colmax, 0, \".c++m\");\n+      fputs (\"\\n\", fp);\n+    }\n+\n+  if (d->module_name)\n+    {\n+      if (d->cmi_name)\n+\t{\n+\t  /* module-name : cmi-name */\n+\t  column = make_write_name (d->module_name, fp, 0, colmax,\n+\t\t\t\t    true, \".c++m\");\n+\t  fputs (\":\", fp);\n+\t  column++;\n+\t  column = make_write_name (d->cmi_name, fp, column, colmax);\n+\t  fputs (\"\\n\", fp);\n+\n+\t  column = fprintf (fp, \".PHONY:\");\n+\t  column = make_write_name (d->module_name, fp, column, colmax,\n+\t\t\t\t    true, \".c++m\");\n+\t  fputs (\"\\n\", fp);\n+\t}\n+\n+      if (d->cmi_name && !d->is_header_unit)\n+\t{\n+\t  /* An order-only dependency.\n+\t      cmi-name :| first-target\n+\t     We can probably drop this this in favour of Make-4.3's grouped\n+\t      targets '&:'  */\n+\t  column = make_write_name (d->cmi_name, fp, 0, colmax);\n+\t  fputs (\":|\", fp);\n+\t  column++;\n+\t  column = make_write_name (d->targets[0], fp, column, colmax);\n+\t  fputs (\"\\n\", fp);\n+\t}\n+    }\n+  \n+  if (d->modules.size ())\n+    {\n+      column = fprintf (fp, \"CXX_IMPORTS +=\");\n+      make_write_vec (d->modules, fp, column, colmax, 0, \".c++m\");\n+      fputs (\"\\n\", fp);\n+    }\n }\n \n /* Write out dependencies according to the selected format (which is"}]}