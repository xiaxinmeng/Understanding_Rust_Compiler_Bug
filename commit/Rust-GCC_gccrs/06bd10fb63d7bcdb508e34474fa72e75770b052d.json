{"sha": "06bd10fb63d7bcdb508e34474fa72e75770b052d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiZDEwZmI2M2Q3YmNkYjUwOGUzNDQ3NGZhNzJlNzU3NzBiMDUyZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-06T23:31:22Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-06T23:31:22Z"}, "message": "libsupc++: New directory.\n\n\n2000-10-06  Benjamin Kosnik  <bkoz@cygnus.com>\n            Richard Henderson  <rth@cygnus.com>\n\t    Alexandre Oliva  <aoliva@redhat.com>\n\n\t* libsupc++: New directory.\n\t* libsupc++/*: Populate.\n\t* libsupc++/Makefile.am (INCLUDES): Add -I../../gcc for\n\teh-common.h, gansidecl.h.\n\t* configure.in: Add in libsupc++/Makefile to AC_OUTPUT.\n\t* configure: Regenerate.\n\t* Makefile.am (SUBDIRS): Add libsupc++.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.am (libstdc___la_LIBADD): Add in libsupc++.la\n\t* src/Makefile.in: Regenerate.\n\t* libio/Makefile.am: Remove extraneous, confusing bits.\n\t* libio/Makefile.in: Regeneate.\n\nFrom-SVN: r36763", "tree": {"sha": "2314d5dbdf5b1c34ddc9e7f6588386f6d3ba990b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2314d5dbdf5b1c34ddc9e7f6588386f6d3ba990b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06bd10fb63d7bcdb508e34474fa72e75770b052d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bd10fb63d7bcdb508e34474fa72e75770b052d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bd10fb63d7bcdb508e34474fa72e75770b052d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bd10fb63d7bcdb508e34474fa72e75770b052d/comments", "author": null, "committer": null, "parents": [{"sha": "4071f896a0695fb3c31153e803bbb3d1bc880108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4071f896a0695fb3c31153e803bbb3d1bc880108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4071f896a0695fb3c31153e803bbb3d1bc880108"}], "stats": {"total": 7536, "additions": 6515, "deletions": 1021}, "files": [{"sha": "a412c5d0fb00180087443b865d7d64f740f4c3df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -1,3 +1,20 @@\n+2000-10-06  Benjamin Kosnik  <bkoz@cygnus.com>\n+            Richard Henderson  <rth@cygnus.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n+\t\n+\t* libsupc++: New directory.\n+\t* libsupc++/*: Populate.\n+\t* libsupc++/Makefile.am (INCLUDES): Add -I../../gcc for\n+\teh-common.h, gansidecl.h.\n+\t* configure.in: Add in libsupc++/Makefile to AC_OUTPUT.\n+\t* configure: Regenerate.\n+\t* Makefile.am (SUBDIRS): Add libsupc++.\n+\t* Makefile.in: Regenerate.\n+\t* src/Makefile.am (libstdc___la_LIBADD): Add in libsupc++.la\n+\t* src/Makefile.in: Regenerate.\n+\t* libio/Makefile.am: Remove extraneous, confusing bits.\n+\t* libio/Makefile.in: Regeneate.\n+\t\n 2000-10-05  Brent Verner  <brent@rcfile.org>\n \n         * bits/istream.tcc [basic_istream::get(basic_streambuf&)]: Removed"}, {"sha": "bad1b08661a6ccab4fc8a25b0ac8afcf8cfd4622", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -29,7 +29,7 @@ MAINT_CHARSET = latin1\n INTERFACE = v3\n gxx_include_dir=$(includedir)/g++\n \n-SUBDIRS = math libio src\n+SUBDIRS = math libio libsupc++ src\n \n # Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n # because then the paths will be full pathnames, not relative"}, {"sha": "d6f930e5fef2d49055dd6e4c866150f8f373f23c", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -117,7 +117,7 @@ MAINT_CHARSET = latin1\n INTERFACE = v3\n gxx_include_dir = $(includedir)/g++\n \n-SUBDIRS = math libio src\n+SUBDIRS = math libio libsupc++ src\n \n #all-local:  stamp-rebuild\n "}, {"sha": "b5ea155f50bbbf7dcb80beabaaa94071558bcdf4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1001, "deletions": 1012, "changes": 2013, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d"}, {"sha": "7fa52a06367256c55ed0621c117c64539fd393c6", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -148,7 +148,7 @@ fi\n # -> top_srcdir/Makefile.am -> top_srcdir/src/Makefile.am, manually\n # append it here.\n \n-AC_OUTPUT(mkcheck Makefile src/Makefile math/Makefile libio/Makefile,\n+AC_OUTPUT(mkcheck Makefile src/Makefile math/Makefile libio/Makefile libsupc++/Makefile,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile"}, {"sha": "56f47e37f750fc06c8fd4774ff651b43ad4a0d03", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -1,3 +1,8 @@\n+2000-10-06   Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* Makefile.am (libio_la_DEPENDENCIES): Remove extaneous cruft.\n+\t(libio_la_SOURCES): Remove.\n+\t\n 2000-10-05  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* Makefile.am (INCLUDES): Add glibcpp_includedir."}, {"sha": "9fe2266447aadbba41ebb0e12742994be130d4e4", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -96,7 +96,11 @@ endif\n \n EXTRA_DIST = iostreamP.h\n \n-libio_la_LIBADD = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n-libio_la_DEPENDENCIES = $(libio_la_LIBADD)\n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n \n+\n+\n+\n+\n+\n+"}, {"sha": "29f58299fc1b3b1a496f65a61472a3981002068d", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -159,8 +159,6 @@ libio_headers =          libio.h libioP.h iolibio.h\n \n EXTRA_DIST = iostreamP.h\n \n-libio_la_LIBADD = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n-libio_la_DEPENDENCIES = $(libio_la_LIBADD)\n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n@@ -173,6 +171,7 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libio_la_LDFLAGS = \n+libio_la_LIBADD = \n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS = \n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS =  \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofwide.lo \\"}, {"sha": "10e7bff9996c027a9e6d3f7471ffc3323827d979", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,109 @@\n+## Makefile for the GNU C++ Support library.\n+##\n+## Copyright (C) 2000 Free Software Foundation, Inc.\n+##\n+## Process this file with automake to produce Makefile.in.\n+##\n+## This file is part of GNU CC.\n+##\n+## GNU CC is free software; you can redistribute it and/or modify\n+## it under the terms of the GNU General Public License as published by\n+## the Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+##\n+## GNU CC is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+##\n+## You should have received a copy of the GNU General Public License\n+## along with GNU CC; see the file COPYING.  If not, write to\n+## the Free Software Foundation, 59 Temple Place - Suite 330,\n+## Boston, MA 02111-1307, USA. \n+\n+AUTOMAKE_OPTIONS = 1.3 cygnus\n+MAINT_CHARSET = latin1\n+\n+# Cross compiler and multilib support.\n+# Install a library built with a cross compiler in tooldir, not libdir.\n+if USE_LIBDIR\n+toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+else\n+toolexecdir = $(exec_prefix)/$(target_alias)\n+toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+endif\n+\n+\n+# Need this library to both be part of libstdc++.a, and installed\n+# separately too.\n+# 1) separate libsupc++.la \n+toolexeclib_LTLIBRARIES = libsupc++.la\n+# 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n+noinst_LTLIBRARIES = libsupc++convenience.la\n+\n+\n+INCLUDES = \\\n+\t-I$(top_srcdir)/../gcc -I$(top_srcdir)/libsupc++/include \\\n+\t$(CONFIG_INCLUDES)\n+\n+headers = \\\n+\tinclude/cxxabi.h \\\n+\tinclude/exception \\\n+\tinclude/new \\\n+\tinclude/new.h \\\n+\tinclude/typeinfo\n+\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\texception.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n+\n+libsupc___la_SOURCES = $(sources)\n+libsupc__convenience_la_SOURCES = $(sources)\n+\n+# Flags to force separate libtool library to be static only.\n+LIBTOOL = @LIBTOOL@ --tag disable-shared\n+LIBSUPCXX_CXXFLAGS = -prefer-pic\n+\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set.\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+AC_CXXFLAGS = \\\n+\t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n+\t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n+\n+# Need to manually set this option because AC_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n+\t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n+\t$(LIBSUPCXX_CXXFLAGS) $(AC_CXXFLAGS) \n+\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n+# things like -O2 passed down from the toplevel can be overridden by\n+# --enable-debug.)\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t     $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+# We have a problem when building the shared libstdc++ object if the\n+# rules automake generates would be used.  We cannot allow CXX to be used\n+# in libtool since this would add -lstdc++ to the link line which of\n+# course is impossible.\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@"}, {"sha": "b5841dd7565ccabe41a6f32d19211dbcfa854a8b", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "added", "additions": 432, "deletions": 0, "changes": 432, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,432 @@\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+\n+SHELL = @SHELL@\n+\n+srcdir = @srcdir@\n+top_srcdir = @top_srcdir@\n+VPATH = @srcdir@\n+prefix = @prefix@\n+exec_prefix = @exec_prefix@\n+\n+bindir = @bindir@\n+sbindir = @sbindir@\n+libexecdir = @libexecdir@\n+datadir = @datadir@\n+sysconfdir = @sysconfdir@\n+sharedstatedir = @sharedstatedir@\n+localstatedir = @localstatedir@\n+libdir = @libdir@\n+infodir = @infodir@\n+mandir = @mandir@\n+includedir = @includedir@\n+oldincludedir = /usr/include\n+\n+DESTDIR =\n+\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+\n+top_builddir = ..\n+\n+ACLOCAL = @ACLOCAL@\n+AUTOCONF = @AUTOCONF@\n+AUTOMAKE = @AUTOMAKE@\n+AUTOHEADER = @AUTOHEADER@\n+\n+INSTALL = @INSTALL@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+transform = @program_transform_name@\n+\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_alias = @build_alias@\n+build_triplet = @build@\n+host_alias = @host_alias@\n+host_triplet = @host@\n+target_alias = @target_alias@\n+target_triplet = @target@\n+AR = @AR@\n+AS = @AS@\n+CC = @CC@\n+CPP = @CPP@\n+CPU_FLAGS = @CPU_FLAGS@\n+CSHADOWFLAGS = @CSHADOWFLAGS@\n+CXX = @CXX@\n+CXXCPP = @CXXCPP@\n+DEBUG_FLAGS = @DEBUG_FLAGS@\n+DLLTOOL = @DLLTOOL@\n+EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+GCC_OBJDIR = @GCC_OBJDIR@\n+GCJ = @GCJ@\n+GCJFLAGS = @GCJFLAGS@\n+GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n+GLIBCPP_CXXFLAGS = @GLIBCPP_CXXFLAGS@\n+LIBMATHOBJS = @LIBMATHOBJS@\n+LIBSTRINGOBJS = @LIBSTRINGOBJS@\n+LN_S = @LN_S@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n+PACKAGE = @PACKAGE@\n+RANLIB = @RANLIB@\n+SECTION_FLAGS = @SECTION_FLAGS@\n+SECTION_LDFLAGS = @SECTION_LDFLAGS@\n+STRIP = @STRIP@\n+THREADDEPS = @THREADDEPS@\n+THREADINCS = @THREADINCS@\n+THREADLIBS = @THREADLIBS@\n+THREADOBJS = @THREADOBJS@\n+THREADSPEC = @THREADSPEC@\n+USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+VERSION = @VERSION@\n+WERROR = @WERROR@\n+WFMT_FLAGS = @WFMT_FLAGS@\n+cpu_include_dir = @cpu_include_dir@\n+ctype_include_dir = @ctype_include_dir@\n+glibcpp_basedir = @glibcpp_basedir@\n+ifGNUmake = @ifGNUmake@\n+libinst_wstring_la = @libinst_wstring_la@\n+\n+AUTOMAKE_OPTIONS = 1.3 cygnus\n+MAINT_CHARSET = latin1\n+@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+\n+# Need this library to both be part of libstdc++.a, and installed\n+# separately too.\n+# 1) separate libsupc++.la \n+toolexeclib_LTLIBRARIES = libsupc++.la\n+# 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n+noinst_LTLIBRARIES = libsupc++convenience.la\n+\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/libsupc++/include \t$(CONFIG_INCLUDES)\n+\n+\n+headers =  \tinclude/cxxabi.h \tinclude/exception \tinclude/new \tinclude/new.h \tinclude/typeinfo\n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+\n+\n+libsupc___la_SOURCES = $(sources)\n+libsupc__convenience_la_SOURCES = $(sources)\n+\n+# Flags to force separate libtool library to be static only.\n+LIBTOOL = @LIBTOOL@ --tag disable-shared\n+LIBSUPCXX_CXXFLAGS = -prefer-pic\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set.\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+AC_CXXFLAGS =  \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n+\n+\n+# Need to manually set this option because AC_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CXXFLAGS =  \t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(LIBSUPCXX_CXXFLAGS) $(AC_CXXFLAGS) \n+\n+\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n+# things like -O2 passed down from the toplevel can be overridden by\n+# --enable-debug.)\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+# We have a problem when building the shared libstdc++ object if the\n+# rules automake generates would be used.  We cannot allow CXX to be used\n+# in libtool since this would add -lstdc++ to the link line which of\n+# course is impossible.\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n+CONFIG_HEADER = ../config.h\n+CONFIG_CLEAN_FILES = \n+LTLIBRARIES =  $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n+\n+\n+DEFS = @DEFS@ -I. -I$(srcdir) -I..\n+CPPFLAGS = @CPPFLAGS@\n+LDFLAGS = @LDFLAGS@\n+LIBS = @LIBS@\n+libsupc__convenience_la_LDFLAGS = \n+libsupc__convenience_la_LIBADD = \n+libsupc__convenience_la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo \\\n+del_opvnt.lo exception.lo new_handler.lo new_op.lo new_opnt.lo \\\n+new_opv.lo new_opvnt.lo tinfo.lo tinfo2.lo vec.lo\n+libsupc___la_LDFLAGS = \n+libsupc___la_LIBADD = \n+libsupc___la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo del_opvnt.lo \\\n+exception.lo new_handler.lo new_op.lo new_opnt.lo new_opv.lo \\\n+new_opvnt.lo tinfo.lo tinfo2.lo vec.lo\n+CXXFLAGS = @CXXFLAGS@\n+CXXLD = $(CXX)\n+DIST_COMMON =  Makefile.am Makefile.in configure configure.in\n+\n+\n+DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n+\n+TAR = gtar\n+GZIP_ENV = --best\n+SOURCES = $(libsupc__convenience_la_SOURCES) $(libsupc___la_SOURCES)\n+OBJECTS = $(libsupc__convenience_la_OBJECTS) $(libsupc___la_OBJECTS)\n+\n+all: all-redirect\n+.SUFFIXES:\n+.SUFFIXES: .S .c .cc .lo .o .obj .s\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus libsupc++/Makefile\n+\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+\n+\n+mostlyclean-noinstLTLIBRARIES:\n+\n+clean-noinstLTLIBRARIES:\n+\t-test -z \"$(noinst_LTLIBRARIES)\" || rm -f $(noinst_LTLIBRARIES)\n+\n+distclean-noinstLTLIBRARIES:\n+\n+maintainer-clean-noinstLTLIBRARIES:\n+\n+mostlyclean-toolexeclibLTLIBRARIES:\n+\n+clean-toolexeclibLTLIBRARIES:\n+\t-test -z \"$(toolexeclib_LTLIBRARIES)\" || rm -f $(toolexeclib_LTLIBRARIES)\n+\n+distclean-toolexeclibLTLIBRARIES:\n+\n+maintainer-clean-toolexeclibLTLIBRARIES:\n+\n+install-toolexeclibLTLIBRARIES: $(toolexeclib_LTLIBRARIES)\n+\t@$(NORMAL_INSTALL)\n+\t$(mkinstalldirs) $(DESTDIR)$(toolexeclibdir)\n+\t@list='$(toolexeclib_LTLIBRARIES)'; for p in $$list; do \\\n+\t  if test -f $$p; then \\\n+\t    echo \"$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(toolexeclibdir)/$$p\"; \\\n+\t    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(toolexeclibdir)/$$p; \\\n+\t  else :; fi; \\\n+\tdone\n+\n+uninstall-toolexeclibLTLIBRARIES:\n+\t@$(NORMAL_UNINSTALL)\n+\tlist='$(toolexeclib_LTLIBRARIES)'; for p in $$list; do \\\n+\t  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(toolexeclibdir)/$$p; \\\n+\tdone\n+\n+.c.o:\n+\t$(COMPILE) -c $<\n+\n+# FIXME: We should only use cygpath when building on Windows,\n+# and only if it is available.\n+.c.obj:\n+\t$(COMPILE) -c `cygpath -w $<`\n+\n+.s.o:\n+\t$(COMPILE) -c $<\n+\n+.S.o:\n+\t$(COMPILE) -c $<\n+\n+mostlyclean-compile:\n+\t-rm -f *.o core *.core\n+\t-rm -f *.$(OBJEXT)\n+\n+clean-compile:\n+\n+distclean-compile:\n+\t-rm -f *.tab.c\n+\n+maintainer-clean-compile:\n+\n+.c.lo:\n+\t$(LIBTOOL) --mode=compile $(COMPILE) -c $<\n+\n+.s.lo:\n+\t$(LIBTOOL) --mode=compile $(COMPILE) -c $<\n+\n+.S.lo:\n+\t$(LIBTOOL) --mode=compile $(COMPILE) -c $<\n+\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n+\n+clean-libtool:\n+\t-rm -rf .libs _libs\n+\n+distclean-libtool:\n+\n+maintainer-clean-libtool:\n+\n+libsupc++convenience.la: $(libsupc__convenience_la_OBJECTS) $(libsupc__convenience_la_DEPENDENCIES)\n+\t$(CXXLINK)  $(libsupc__convenience_la_LDFLAGS) $(libsupc__convenience_la_OBJECTS) $(libsupc__convenience_la_LIBADD) $(LIBS)\n+\n+libsupc++.la: $(libsupc___la_OBJECTS) $(libsupc___la_DEPENDENCIES)\n+\t$(CXXLINK) -rpath $(toolexeclibdir) $(libsupc___la_LDFLAGS) $(libsupc___la_OBJECTS) $(libsupc___la_LIBADD) $(LIBS)\n+.cc.o:\n+\t$(CXXCOMPILE) -c $<\n+.cc.obj:\n+\t$(CXXCOMPILE) -c `cygpath -w $<`\n+.cc.lo:\n+\t$(LTCXXCOMPILE) -c $<\n+\n+tags: TAGS\n+\n+ID: $(HEADERS) $(SOURCES) $(LISP)\n+\tlist='$(SOURCES) $(HEADERS)'; \\\n+\tunique=`for i in $$list; do echo $$i; done | \\\n+\t  awk '    { files[$$0] = 1; } \\\n+\t       END { for (i in files) print i; }'`; \\\n+\there=`pwd` && cd $(srcdir) \\\n+\t  && mkid -f$$here/ID $$unique $(LISP)\n+\n+TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n+\ttags=; \\\n+\there=`pwd`; \\\n+\tlist='$(SOURCES) $(HEADERS)'; \\\n+\tunique=`for i in $$list; do echo $$i; done | \\\n+\t  awk '    { files[$$0] = 1; } \\\n+\t       END { for (i in files) print i; }'`; \\\n+\ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n+\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\n+mostlyclean-tags:\n+\n+clean-tags:\n+\n+distclean-tags:\n+\t-rm -f TAGS ID\n+\n+maintainer-clean-tags:\n+\n+distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n+\n+subdir = libsupc++\n+\n+distdir: $(DISTFILES)\n+\t@for file in $(DISTFILES); do \\\n+\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  if test -d $$d/$$file; then \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n+\t  fi; \\\n+\tdone\n+info-am:\n+info: info-am\n+dvi-am:\n+dvi: dvi-am\n+check-am:\n+check: check-am\n+installcheck-am:\n+installcheck: installcheck-am\n+install-info-am: \n+install-info: install-info-am\n+install-exec-am: install-toolexeclibLTLIBRARIES\n+install-exec: install-exec-am\n+\n+install-data-am:\n+install-data: install-data-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+install: install-am\n+uninstall-am: uninstall-toolexeclibLTLIBRARIES\n+uninstall: uninstall-am\n+all-am: Makefile $(LTLIBRARIES)\n+all-redirect: all-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n+installdirs:\n+\t$(mkinstalldirs)  $(DESTDIR)$(toolexeclibdir)\n+\n+\n+mostlyclean-generic:\n+\n+clean-generic:\n+\n+distclean-generic:\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n+\n+maintainer-clean-generic:\n+mostlyclean-am:  mostlyclean-noinstLTLIBRARIES \\\n+\t\tmostlyclean-toolexeclibLTLIBRARIES mostlyclean-compile \\\n+\t\tmostlyclean-libtool mostlyclean-tags \\\n+\t\tmostlyclean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+clean-am:  clean-noinstLTLIBRARIES clean-toolexeclibLTLIBRARIES \\\n+\t\tclean-compile clean-libtool clean-tags clean-generic \\\n+\t\tmostlyclean-am\n+\n+clean: clean-am\n+\n+distclean-am:  distclean-noinstLTLIBRARIES \\\n+\t\tdistclean-toolexeclibLTLIBRARIES distclean-compile \\\n+\t\tdistclean-libtool distclean-tags distclean-generic \\\n+\t\tclean-am\n+\t-rm -f libtool\n+\n+distclean: distclean-am\n+\n+maintainer-clean-am:  maintainer-clean-noinstLTLIBRARIES \\\n+\t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n+\t\tmaintainer-clean-compile maintainer-clean-libtool \\\n+\t\tmaintainer-clean-tags maintainer-clean-generic \\\n+\t\tdistclean-am\n+\t@echo \"This command is intended for maintainers to use;\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+\n+maintainer-clean: maintainer-clean-am\n+\n+.PHONY: mostlyclean-noinstLTLIBRARIES distclean-noinstLTLIBRARIES \\\n+clean-noinstLTLIBRARIES maintainer-clean-noinstLTLIBRARIES \\\n+mostlyclean-toolexeclibLTLIBRARIES distclean-toolexeclibLTLIBRARIES \\\n+clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n+uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\\n+mostlyclean-compile distclean-compile clean-compile \\\n+maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n+clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n+distclean-tags clean-tags maintainer-clean-tags distdir info-am info \\\n+dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n+install-info install-exec-am install-exec install-data-am install-data \\\n+install-am install uninstall-am uninstall all-redirect all-am all \\\n+installdirs mostlyclean-generic distclean-generic clean-generic \\\n+maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "7f3b1799be77907cc281744b51f3f59fc7b76c77", "filename": "libstdc++-v3/libsupc++/aclocal.m4", "status": "added", "additions": 430, "deletions": 0, "changes": 430, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Faclocal.m4?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,430 @@\n+dnl aclocal.m4 generated automatically by aclocal 1.4\n+\n+dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+dnl This file is free software; the Free Software Foundation\n+dnl gives unlimited permission to copy and/or distribute it,\n+dnl with or without modifications, as long as this notice is preserved.\n+\n+dnl This program is distributed in the hope that it will be useful,\n+dnl but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+dnl even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+dnl PARTICULAR PURPOSE.\n+\n+\n+# serial 40 AC_PROG_LIBTOOL\n+AC_DEFUN(AC_PROG_LIBTOOL,\n+[AC_REQUIRE([AC_LIBTOOL_SETUP])dnl\n+\n+# Save cache, so that ltconfig can load it\n+AC_CACHE_SAVE\n+\n+# Actually configure libtool.  ac_aux_dir is where install-sh is found.\n+CC=\"$CC\" CFLAGS=\"$CFLAGS\" CPPFLAGS=\"$CPPFLAGS\" \\\n+LD=\"$LD\" LDFLAGS=\"$LDFLAGS\" LIBS=\"$LIBS\" \\\n+LN_S=\"$LN_S\" NM=\"$NM\" RANLIB=\"$RANLIB\" \\\n+DLLTOOL=\"$DLLTOOL\" AS=\"$AS\" OBJDUMP=\"$OBJDUMP\" \\\n+${CONFIG_SHELL-/bin/sh} $ac_aux_dir/ltconfig --no-reexec \\\n+$libtool_flags --no-verify $ac_aux_dir/ltmain.sh $lt_target \\\n+|| AC_MSG_ERROR([libtool configure failed])\n+\n+# Reload cache, that may have been modified by ltconfig\n+AC_CACHE_LOAD\n+\n+# This can be used to rebuild libtool when needed\n+LIBTOOL_DEPS=\"$ac_aux_dir/ltconfig $ac_aux_dir/ltmain.sh\"\n+\n+# Always use our own libtool.\n+LIBTOOL='$(SHELL) $(top_builddir)/libtool'\n+AC_SUBST(LIBTOOL)dnl\n+\n+# Redirect the config.log output again, so that the ltconfig log is not\n+# clobbered by the next message.\n+exec 5>>./config.log\n+])\n+\n+AC_DEFUN(AC_LIBTOOL_SETUP,\n+[AC_PREREQ(2.13)dnl\n+AC_REQUIRE([AC_ENABLE_SHARED])dnl\n+AC_REQUIRE([AC_ENABLE_STATIC])dnl\n+AC_REQUIRE([AC_ENABLE_FAST_INSTALL])dnl\n+AC_REQUIRE([AC_CANONICAL_HOST])dnl\n+AC_REQUIRE([AC_CANONICAL_BUILD])dnl\n+AC_REQUIRE([AC_PROG_RANLIB])dnl\n+AC_REQUIRE([AC_PROG_CC])dnl\n+AC_REQUIRE([AC_PROG_LD])dnl\n+AC_REQUIRE([AC_PROG_NM])dnl\n+AC_REQUIRE([AC_PROG_LN_S])dnl\n+dnl\n+\n+case \"$target\" in\n+NONE) lt_target=\"$host\" ;;\n+*) lt_target=\"$target\" ;;\n+esac\n+\n+# Check for any special flags to pass to ltconfig.\n+#\n+# the following will cause an existing older ltconfig to fail, so\n+# we ignore this at the expense of the cache file... Checking this \n+# will just take longer ... bummer!\n+#libtool_flags=\"--cache-file=$cache_file\"\n+#\n+test \"$enable_shared\" = no && libtool_flags=\"$libtool_flags --disable-shared\"\n+test \"$enable_static\" = no && libtool_flags=\"$libtool_flags --disable-static\"\n+test \"$enable_fast_install\" = no && libtool_flags=\"$libtool_flags --disable-fast-install\"\n+test \"$ac_cv_prog_gcc\" = yes && libtool_flags=\"$libtool_flags --with-gcc\"\n+test \"$ac_cv_prog_gnu_ld\" = yes && libtool_flags=\"$libtool_flags --with-gnu-ld\"\n+ifdef([AC_PROVIDE_AC_LIBTOOL_DLOPEN],\n+[libtool_flags=\"$libtool_flags --enable-dlopen\"])\n+ifdef([AC_PROVIDE_AC_LIBTOOL_WIN32_DLL],\n+[libtool_flags=\"$libtool_flags --enable-win32-dll\"])\n+AC_ARG_ENABLE(libtool-lock,\n+  [  --disable-libtool-lock  avoid locking (might break parallel builds)])\n+test \"x$enable_libtool_lock\" = xno && libtool_flags=\"$libtool_flags --disable-lock\"\n+test x\"$silent\" = xyes && libtool_flags=\"$libtool_flags --silent\"\n+\n+# Some flags need to be propagated to the compiler or linker for good\n+# libtool support.\n+case \"$lt_target\" in\n+*-*-irix6*)\n+  # Find out which ABI we are using.\n+  echo '[#]line __oline__ \"configure\"' > conftest.$ac_ext\n+  if AC_TRY_EVAL(ac_compile); then\n+    case \"`/usr/bin/file conftest.o`\" in\n+    *32-bit*)\n+      LD=\"${LD-ld} -32\"\n+      ;;\n+    *N32*)\n+      LD=\"${LD-ld} -n32\"\n+      ;;\n+    *64-bit*)\n+      LD=\"${LD-ld} -64\"\n+      ;;\n+    esac\n+  fi\n+  rm -rf conftest*\n+  ;;\n+\n+*-*-sco3.2v5*)\n+  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n+  SAVE_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -belf\"\n+  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n+    [AC_TRY_LINK([],[],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])])\n+  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n+    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n+    CFLAGS=\"$SAVE_CFLAGS\"\n+  fi\n+  ;;\n+\n+ifdef([AC_PROVIDE_AC_LIBTOOL_WIN32_DLL],\n+[*-*-cygwin* | *-*-mingw*)\n+  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n+  AC_CHECK_TOOL(AS, as, false)\n+  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n+  ;;\n+])\n+esac\n+])\n+\n+# AC_LIBTOOL_DLOPEN - enable checks for dlopen support\n+AC_DEFUN(AC_LIBTOOL_DLOPEN, [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])])\n+\n+# AC_LIBTOOL_WIN32_DLL - declare package support for building win32 dll's\n+AC_DEFUN(AC_LIBTOOL_WIN32_DLL, [AC_BEFORE([$0], [AC_LIBTOOL_SETUP])])\n+\n+# AC_ENABLE_SHARED - implement the --enable-shared flag\n+# Usage: AC_ENABLE_SHARED[(DEFAULT)]\n+#   Where DEFAULT is either `yes' or `no'.  If omitted, it defaults to\n+#   `yes'.\n+AC_DEFUN(AC_ENABLE_SHARED, [dnl\n+define([AC_ENABLE_SHARED_DEFAULT], ifelse($1, no, no, yes))dnl\n+AC_ARG_ENABLE(shared,\n+changequote(<<, >>)dnl\n+<<  --enable-shared[=PKGS]  build shared libraries [default=>>AC_ENABLE_SHARED_DEFAULT],\n+changequote([, ])dnl\n+[p=${PACKAGE-default}\n+case \"$enableval\" in\n+yes) enable_shared=yes ;;\n+no) enable_shared=no ;;\n+*)\n+  enable_shared=no\n+  # Look at the argument we got.  We use all the common list separators.\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+  for pkg in $enableval; do\n+    if test \"X$pkg\" = \"X$p\"; then\n+      enable_shared=yes\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  ;;\n+esac],\n+enable_shared=AC_ENABLE_SHARED_DEFAULT)dnl\n+])\n+\n+# AC_DISABLE_SHARED - set the default shared flag to --disable-shared\n+AC_DEFUN(AC_DISABLE_SHARED, [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n+AC_ENABLE_SHARED(no)])\n+\n+# AC_ENABLE_STATIC - implement the --enable-static flag\n+# Usage: AC_ENABLE_STATIC[(DEFAULT)]\n+#   Where DEFAULT is either `yes' or `no'.  If omitted, it defaults to\n+#   `yes'.\n+AC_DEFUN(AC_ENABLE_STATIC, [dnl\n+define([AC_ENABLE_STATIC_DEFAULT], ifelse($1, no, no, yes))dnl\n+AC_ARG_ENABLE(static,\n+changequote(<<, >>)dnl\n+<<  --enable-static[=PKGS]  build static libraries [default=>>AC_ENABLE_STATIC_DEFAULT],\n+changequote([, ])dnl\n+[p=${PACKAGE-default}\n+case \"$enableval\" in\n+yes) enable_static=yes ;;\n+no) enable_static=no ;;\n+*)\n+  enable_static=no\n+  # Look at the argument we got.  We use all the common list separators.\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+  for pkg in $enableval; do\n+    if test \"X$pkg\" = \"X$p\"; then\n+      enable_static=yes\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  ;;\n+esac],\n+enable_static=AC_ENABLE_STATIC_DEFAULT)dnl\n+])\n+\n+# AC_DISABLE_STATIC - set the default static flag to --disable-static\n+AC_DEFUN(AC_DISABLE_STATIC, [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n+AC_ENABLE_STATIC(no)])\n+\n+\n+# AC_ENABLE_FAST_INSTALL - implement the --enable-fast-install flag\n+# Usage: AC_ENABLE_FAST_INSTALL[(DEFAULT)]\n+#   Where DEFAULT is either `yes' or `no'.  If omitted, it defaults to\n+#   `yes'.\n+AC_DEFUN(AC_ENABLE_FAST_INSTALL, [dnl\n+define([AC_ENABLE_FAST_INSTALL_DEFAULT], ifelse($1, no, no, yes))dnl\n+AC_ARG_ENABLE(fast-install,\n+changequote(<<, >>)dnl\n+<<  --enable-fast-install[=PKGS]  optimize for fast installation [default=>>AC_ENABLE_FAST_INSTALL_DEFAULT],\n+changequote([, ])dnl\n+[p=${PACKAGE-default}\n+case \"$enableval\" in\n+yes) enable_fast_install=yes ;;\n+no) enable_fast_install=no ;;\n+*)\n+  enable_fast_install=no\n+  # Look at the argument we got.  We use all the common list separators.\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+  for pkg in $enableval; do\n+    if test \"X$pkg\" = \"X$p\"; then\n+      enable_fast_install=yes\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  ;;\n+esac],\n+enable_fast_install=AC_ENABLE_FAST_INSTALL_DEFAULT)dnl\n+])\n+\n+# AC_ENABLE_FAST_INSTALL - set the default to --disable-fast-install\n+AC_DEFUN(AC_DISABLE_FAST_INSTALL, [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n+AC_ENABLE_FAST_INSTALL(no)])\n+\n+# AC_PROG_LD - find the path to the GNU or non-GNU linker\n+AC_DEFUN(AC_PROG_LD,\n+[AC_ARG_WITH(gnu-ld,\n+[  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]],\n+test \"$withval\" = no || with_gnu_ld=yes, with_gnu_ld=no)\n+AC_REQUIRE([AC_PROG_CC])dnl\n+AC_REQUIRE([AC_CANONICAL_HOST])dnl\n+AC_REQUIRE([AC_CANONICAL_BUILD])dnl\n+ac_prog=ld\n+if test \"$ac_cv_prog_gcc\" = yes; then\n+  # Check if gcc -print-prog-name=ld gives a path.\n+  AC_MSG_CHECKING([for ld used by GCC])\n+  ac_prog=`($CC -print-prog-name=ld) 2>&5`\n+  case \"$ac_prog\" in\n+    # Accept absolute paths.\n+changequote(,)dnl\n+    [\\\\/]* | [A-Za-z]:[\\\\/]*)\n+      re_direlt='/[^/][^/]*/\\.\\./'\n+changequote([,])dnl\n+      # Canonicalize the path of ld\n+      ac_prog=`echo $ac_prog| sed 's%\\\\\\\\%/%g'`\n+      while echo $ac_prog | grep \"$re_direlt\" > /dev/null 2>&1; do\n+\tac_prog=`echo $ac_prog| sed \"s%$re_direlt%/%\"`\n+      done\n+      test -z \"$LD\" && LD=\"$ac_prog\"\n+      ;;\n+  \"\")\n+    # If it fails, then pretend we aren't using GCC.\n+    ac_prog=ld\n+    ;;\n+  *)\n+    # If it is relative, then search for the first ld in PATH.\n+    with_gnu_ld=unknown\n+    ;;\n+  esac\n+elif test \"$with_gnu_ld\" = yes; then\n+  AC_MSG_CHECKING([for GNU ld])\n+else\n+  AC_MSG_CHECKING([for non-GNU ld])\n+fi\n+AC_CACHE_VAL(ac_cv_path_LD,\n+[if test -z \"$LD\"; then\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}${PATH_SEPARATOR-:}\"\n+  for ac_dir in $PATH; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n+      ac_cv_path_LD=\"$ac_dir/$ac_prog\"\n+      # Check to see if the program is GNU ld.  I'd rather use --version,\n+      # but apparently some GNU ld's only accept -v.\n+      # Break only if it was the GNU/non-GNU ld that we prefer.\n+      if \"$ac_cv_path_LD\" -v 2>&1 < /dev/null | egrep '(GNU|with BFD)' > /dev/null; then\n+\ttest \"$with_gnu_ld\" != no && break\n+      else\n+\ttest \"$with_gnu_ld\" != yes && break\n+      fi\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+else\n+  ac_cv_path_LD=\"$LD\" # Let the user override the test with a path.\n+fi])\n+LD=\"$ac_cv_path_LD\"\n+if test -n \"$LD\"; then\n+  AC_MSG_RESULT($LD)\n+else\n+  AC_MSG_RESULT(no)\n+fi\n+test -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n+AC_PROG_LD_GNU\n+])\n+\n+AC_DEFUN(AC_PROG_LD_GNU,\n+[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], ac_cv_prog_gnu_ld,\n+[# I'd rather use --version here, but apparently some GNU ld's only accept -v.\n+if $LD -v 2>&1 </dev/null | egrep '(GNU|with BFD)' 1>&5; then\n+  ac_cv_prog_gnu_ld=yes\n+else\n+  ac_cv_prog_gnu_ld=no\n+fi])\n+])\n+\n+# AC_PROG_NM - find the path to a BSD-compatible name lister\n+AC_DEFUN(AC_PROG_NM,\n+[AC_MSG_CHECKING([for BSD-compatible nm])\n+AC_CACHE_VAL(ac_cv_path_NM,\n+[if test -n \"$NM\"; then\n+  # Let the user override the test.\n+  ac_cv_path_NM=\"$NM\"\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}${PATH_SEPARATOR-:}\"\n+  for ac_dir in $PATH /usr/ccs/bin /usr/ucb /bin; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/nm || test -f $ac_dir/nm$ac_exeext ; then\n+      # Check to see if the nm accepts a BSD-compat flag.\n+      # Adding the `sed 1q' prevents false positives on HP-UX, which says:\n+      #   nm: unknown option \"B\" ignored\n+      if ($ac_dir/nm -B /dev/null 2>&1 | sed '1q'; exit 0) | egrep /dev/null >/dev/null; then\n+\tac_cv_path_NM=\"$ac_dir/nm -B\"\n+\tbreak\n+      elif ($ac_dir/nm -p /dev/null 2>&1 | sed '1q'; exit 0) | egrep /dev/null >/dev/null; then\n+\tac_cv_path_NM=\"$ac_dir/nm -p\"\n+\tbreak\n+      else\n+\tac_cv_path_NM=${ac_cv_path_NM=\"$ac_dir/nm\"} # keep the first match, but\n+\tcontinue # so that we can try to find one that supports BSD flags\n+      fi\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  test -z \"$ac_cv_path_NM\" && ac_cv_path_NM=nm\n+fi])\n+NM=\"$ac_cv_path_NM\"\n+AC_MSG_RESULT([$NM])\n+])\n+\n+# AC_CHECK_LIBM - check for math library\n+AC_DEFUN(AC_CHECK_LIBM,\n+[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n+LIBM=\n+case \"$lt_target\" in\n+*-*-beos* | *-*-cygwin*)\n+  # These system don't have libm\n+  ;;\n+*-ncr-sysv4.3*)\n+  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n+  AC_CHECK_LIB(m, main, LIBM=\"$LIBM -lm\")\n+  ;;\n+*)\n+  AC_CHECK_LIB(m, main, LIBM=\"-lm\")\n+  ;;\n+esac\n+])\n+\n+# AC_LIBLTDL_CONVENIENCE[(dir)] - sets LIBLTDL to the link flags for\n+# the libltdl convenience library and INCLTDL to the include flags for\n+# the libltdl header and adds --enable-ltdl-convenience to the\n+# configure arguments.  Note that LIBLTDL and INCLTDL are not\n+# AC_SUBSTed, nor is AC_CONFIG_SUBDIRS called.  If DIR is not\n+# provided, it is assumed to be `libltdl'.  LIBLTDL will be prefixed\n+# with '${top_builddir}/' and INCLTDL will be prefixed with\n+# '${top_srcdir}/' (note the single quotes!).  If your package is not\n+# flat and you're not using automake, define top_builddir and\n+# top_srcdir appropriately in the Makefiles.\n+AC_DEFUN(AC_LIBLTDL_CONVENIENCE, [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n+  case \"$enable_ltdl_convenience\" in\n+  no) AC_MSG_ERROR([this package needs a convenience libltdl]) ;;\n+  \"\") enable_ltdl_convenience=yes\n+      ac_configure_args=\"$ac_configure_args --enable-ltdl-convenience\" ;;\n+  esac\n+  LIBLTDL='${top_builddir}/'ifelse($#,1,[$1],['libltdl'])/libltdlc.la\n+  INCLTDL='-I${top_srcdir}/'ifelse($#,1,[$1],['libltdl'])\n+])\n+\n+# AC_LIBLTDL_INSTALLABLE[(dir)] - sets LIBLTDL to the link flags for\n+# the libltdl installable library and INCLTDL to the include flags for\n+# the libltdl header and adds --enable-ltdl-install to the configure\n+# arguments.  Note that LIBLTDL and INCLTDL are not AC_SUBSTed, nor is\n+# AC_CONFIG_SUBDIRS called.  If DIR is not provided and an installed\n+# libltdl is not found, it is assumed to be `libltdl'.  LIBLTDL will\n+# be prefixed with '${top_builddir}/' and INCLTDL will be prefixed\n+# with '${top_srcdir}/' (note the single quotes!).  If your package is\n+# not flat and you're not using automake, define top_builddir and\n+# top_srcdir appropriately in the Makefiles.\n+# In the future, this macro may have to be called after AC_PROG_LIBTOOL.\n+AC_DEFUN(AC_LIBLTDL_INSTALLABLE, [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n+  AC_CHECK_LIB(ltdl, main,\n+  [test x\"$enable_ltdl_install\" != xyes && enable_ltdl_install=no],\n+  [if test x\"$enable_ltdl_install\" = xno; then\n+     AC_MSG_WARN([libltdl not installed, but installation disabled])\n+   else\n+     enable_ltdl_install=yes\n+   fi\n+  ])\n+  if test x\"$enable_ltdl_install\" = x\"yes\"; then\n+    ac_configure_args=\"$ac_configure_args --enable-ltdl-install\"\n+    LIBLTDL='${top_builddir}/'ifelse($#,1,[$1],['libltdl'])/libltdl.la\n+    INCLTDL='-I${top_srcdir}/'ifelse($#,1,[$1],['libltdl'])\n+  else\n+    ac_configure_args=\"$ac_configure_args --enable-ltdl-install=no\"\n+    LIBLTDL=\"-lltdl\"\n+    INCLTDL=\n+  fi\n+])\n+\n+dnl old names\n+AC_DEFUN(AM_PROG_LIBTOOL, [indir([AC_PROG_LIBTOOL])])dnl\n+AC_DEFUN(AM_ENABLE_SHARED, [indir([AC_ENABLE_SHARED], $@)])dnl\n+AC_DEFUN(AM_ENABLE_STATIC, [indir([AC_ENABLE_STATIC], $@)])dnl\n+AC_DEFUN(AM_DISABLE_SHARED, [indir([AC_DISABLE_SHARED], $@)])dnl\n+AC_DEFUN(AM_DISABLE_STATIC, [indir([AC_DISABLE_STATIC], $@)])dnl\n+AC_DEFUN(AM_PROG_LD, [indir([AC_PROG_LD])])dnl\n+AC_DEFUN(AM_PROG_NM, [indir([AC_PROG_NM])])dnl\n+\n+dnl This is just to silence aclocal about the macro not being used\n+ifelse([AC_DISABLE_FAST_INSTALL])dnl\n+"}, {"sha": "61025bcef7b500b4018a9c3b79cc0ab745248ffa", "filename": "libstdc++-v3/libsupc++/config.h.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfig.h.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1 @@\n+/* config.h.in.  Generated automatically from configure.in by autoheader.  */"}, {"sha": "c5d881f3a775b7694c304a3a2ab83b0237e4a6ac", "filename": "libstdc++-v3/libsupc++/configure", "status": "added", "additions": 1538, "deletions": 0, "changes": 1538, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfigure?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,1538 @@\n+#! /bin/sh\n+\n+# Guess values for system-dependent variables and create Makefiles.\n+# Generated automatically using autoconf version 2.13 \n+# Copyright (C) 1992, 93, 94, 95, 96 Free Software Foundation, Inc.\n+#\n+# This configure script is free software; the Free Software Foundation\n+# gives unlimited permission to copy, distribute and modify it.\n+\n+# Defaults:\n+ac_help=\n+ac_default_prefix=/usr/local\n+# Any additions from configure.in:\n+ac_help=\"$ac_help\n+  --enable-shared[=PKGS]  build shared libraries [default=yes]\"\n+ac_help=\"$ac_help\n+  --enable-static[=PKGS]  build static libraries [default=yes]\"\n+ac_help=\"$ac_help\n+  --enable-fast-install[=PKGS]  optimize for fast installation [default=yes]\"\n+ac_help=\"$ac_help\n+  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\"\n+ac_help=\"$ac_help\n+  --disable-libtool-lock  avoid locking (might break parallel builds)\"\n+\n+# Initialize some variables set by options.\n+# The variables have the same names as the options, with\n+# dashes changed to underlines.\n+build=NONE\n+cache_file=./config.cache\n+exec_prefix=NONE\n+host=NONE\n+no_create=\n+nonopt=NONE\n+no_recursion=\n+prefix=NONE\n+program_prefix=NONE\n+program_suffix=NONE\n+program_transform_name=s,x,x,\n+silent=\n+site=\n+srcdir=\n+target=NONE\n+verbose=\n+x_includes=NONE\n+x_libraries=NONE\n+bindir='${exec_prefix}/bin'\n+sbindir='${exec_prefix}/sbin'\n+libexecdir='${exec_prefix}/libexec'\n+datadir='${prefix}/share'\n+sysconfdir='${prefix}/etc'\n+sharedstatedir='${prefix}/com'\n+localstatedir='${prefix}/var'\n+libdir='${exec_prefix}/lib'\n+includedir='${prefix}/include'\n+oldincludedir='/usr/include'\n+infodir='${prefix}/info'\n+mandir='${prefix}/man'\n+\n+# Initialize some other variables.\n+subdirs=\n+MFLAGS= MAKEFLAGS=\n+SHELL=${CONFIG_SHELL-/bin/sh}\n+# Maximum number of lines to put in a shell here document.\n+ac_max_here_lines=12\n+\n+ac_prev=\n+for ac_option\n+do\n+\n+  # If the previous option needs an argument, assign it.\n+  if test -n \"$ac_prev\"; then\n+    eval \"$ac_prev=\\$ac_option\"\n+    ac_prev=\n+    continue\n+  fi\n+\n+  case \"$ac_option\" in\n+  -*=*) ac_optarg=`echo \"$ac_option\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n+  *) ac_optarg= ;;\n+  esac\n+\n+  # Accept the important Cygnus configure options, so we can diagnose typos.\n+\n+  case \"$ac_option\" in\n+\n+  -bindir | --bindir | --bindi | --bind | --bin | --bi)\n+    ac_prev=bindir ;;\n+  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)\n+    bindir=\"$ac_optarg\" ;;\n+\n+  -build | --build | --buil | --bui | --bu)\n+    ac_prev=build ;;\n+  -build=* | --build=* | --buil=* | --bui=* | --bu=*)\n+    build=\"$ac_optarg\" ;;\n+\n+  -cache-file | --cache-file | --cache-fil | --cache-fi \\\n+  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)\n+    ac_prev=cache_file ;;\n+  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \\\n+  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)\n+    cache_file=\"$ac_optarg\" ;;\n+\n+  -datadir | --datadir | --datadi | --datad | --data | --dat | --da)\n+    ac_prev=datadir ;;\n+  -datadir=* | --datadir=* | --datadi=* | --datad=* | --data=* | --dat=* \\\n+  | --da=*)\n+    datadir=\"$ac_optarg\" ;;\n+\n+  -disable-* | --disable-*)\n+    ac_feature=`echo $ac_option|sed -e 's/-*disable-//'`\n+    # Reject names that are not valid shell variable names.\n+    if test -n \"`echo $ac_feature| sed 's/[-a-zA-Z0-9_]//g'`\"; then\n+      { echo \"configure: error: $ac_feature: invalid feature name\" 1>&2; exit 1; }\n+    fi\n+    ac_feature=`echo $ac_feature| sed 's/-/_/g'`\n+    eval \"enable_${ac_feature}=no\" ;;\n+\n+  -enable-* | --enable-*)\n+    ac_feature=`echo $ac_option|sed -e 's/-*enable-//' -e 's/=.*//'`\n+    # Reject names that are not valid shell variable names.\n+    if test -n \"`echo $ac_feature| sed 's/[-_a-zA-Z0-9]//g'`\"; then\n+      { echo \"configure: error: $ac_feature: invalid feature name\" 1>&2; exit 1; }\n+    fi\n+    ac_feature=`echo $ac_feature| sed 's/-/_/g'`\n+    case \"$ac_option\" in\n+      *=*) ;;\n+      *) ac_optarg=yes ;;\n+    esac\n+    eval \"enable_${ac_feature}='$ac_optarg'\" ;;\n+\n+  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \\\n+  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \\\n+  | --exec | --exe | --ex)\n+    ac_prev=exec_prefix ;;\n+  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \\\n+  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \\\n+  | --exec=* | --exe=* | --ex=*)\n+    exec_prefix=\"$ac_optarg\" ;;\n+\n+  -gas | --gas | --ga | --g)\n+    # Obsolete; use --with-gas.\n+    with_gas=yes ;;\n+\n+  -help | --help | --hel | --he)\n+    # Omit some internal or obsolete options to make the list less imposing.\n+    # This message is too long to be a string in the A/UX 3.1 sh.\n+    cat << EOF\n+Usage: configure [options] [host]\n+Options: [defaults in brackets after descriptions]\n+Configuration:\n+  --cache-file=FILE       cache test results in FILE\n+  --help                  print this message\n+  --no-create             do not create output files\n+  --quiet, --silent       do not print \\`checking...' messages\n+  --version               print the version of autoconf that created configure\n+Directory and file names:\n+  --prefix=PREFIX         install architecture-independent files in PREFIX\n+                          [$ac_default_prefix]\n+  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\n+                          [same as prefix]\n+  --bindir=DIR            user executables in DIR [EPREFIX/bin]\n+  --sbindir=DIR           system admin executables in DIR [EPREFIX/sbin]\n+  --libexecdir=DIR        program executables in DIR [EPREFIX/libexec]\n+  --datadir=DIR           read-only architecture-independent data in DIR\n+                          [PREFIX/share]\n+  --sysconfdir=DIR        read-only single-machine data in DIR [PREFIX/etc]\n+  --sharedstatedir=DIR    modifiable architecture-independent data in DIR\n+                          [PREFIX/com]\n+  --localstatedir=DIR     modifiable single-machine data in DIR [PREFIX/var]\n+  --libdir=DIR            object code libraries in DIR [EPREFIX/lib]\n+  --includedir=DIR        C header files in DIR [PREFIX/include]\n+  --oldincludedir=DIR     C header files for non-gcc in DIR [/usr/include]\n+  --infodir=DIR           info documentation in DIR [PREFIX/info]\n+  --mandir=DIR            man documentation in DIR [PREFIX/man]\n+  --srcdir=DIR            find the sources in DIR [configure dir or ..]\n+  --program-prefix=PREFIX prepend PREFIX to installed program names\n+  --program-suffix=SUFFIX append SUFFIX to installed program names\n+  --program-transform-name=PROGRAM\n+                          run sed PROGRAM on installed program names\n+EOF\n+    cat << EOF\n+Host type:\n+  --build=BUILD           configure for building on BUILD [BUILD=HOST]\n+  --host=HOST             configure for HOST [guessed]\n+  --target=TARGET         configure for TARGET [TARGET=HOST]\n+Features and packages:\n+  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n+  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n+  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n+  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n+  --x-includes=DIR        X include files are in DIR\n+  --x-libraries=DIR       X library files are in DIR\n+EOF\n+    if test -n \"$ac_help\"; then\n+      echo \"--enable and --with options recognized:$ac_help\"\n+    fi\n+    exit 0 ;;\n+\n+  -host | --host | --hos | --ho)\n+    ac_prev=host ;;\n+  -host=* | --host=* | --hos=* | --ho=*)\n+    host=\"$ac_optarg\" ;;\n+\n+  -includedir | --includedir | --includedi | --included | --include \\\n+  | --includ | --inclu | --incl | --inc)\n+    ac_prev=includedir ;;\n+  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \\\n+  | --includ=* | --inclu=* | --incl=* | --inc=*)\n+    includedir=\"$ac_optarg\" ;;\n+\n+  -infodir | --infodir | --infodi | --infod | --info | --inf)\n+    ac_prev=infodir ;;\n+  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)\n+    infodir=\"$ac_optarg\" ;;\n+\n+  -libdir | --libdir | --libdi | --libd)\n+    ac_prev=libdir ;;\n+  -libdir=* | --libdir=* | --libdi=* | --libd=*)\n+    libdir=\"$ac_optarg\" ;;\n+\n+  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \\\n+  | --libexe | --libex | --libe)\n+    ac_prev=libexecdir ;;\n+  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \\\n+  | --libexe=* | --libex=* | --libe=*)\n+    libexecdir=\"$ac_optarg\" ;;\n+\n+  -localstatedir | --localstatedir | --localstatedi | --localstated \\\n+  | --localstate | --localstat | --localsta | --localst \\\n+  | --locals | --local | --loca | --loc | --lo)\n+    ac_prev=localstatedir ;;\n+  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \\\n+  | --localstate=* | --localstat=* | --localsta=* | --localst=* \\\n+  | --locals=* | --local=* | --loca=* | --loc=* | --lo=*)\n+    localstatedir=\"$ac_optarg\" ;;\n+\n+  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)\n+    ac_prev=mandir ;;\n+  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)\n+    mandir=\"$ac_optarg\" ;;\n+\n+  -nfp | --nfp | --nf)\n+    # Obsolete; use --without-fp.\n+    with_fp=no ;;\n+\n+  -no-create | --no-create | --no-creat | --no-crea | --no-cre \\\n+  | --no-cr | --no-c)\n+    no_create=yes ;;\n+\n+  -no-recursion | --no-recursion | --no-recursio | --no-recursi \\\n+  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)\n+    no_recursion=yes ;;\n+\n+  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \\\n+  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \\\n+  | --oldin | --oldi | --old | --ol | --o)\n+    ac_prev=oldincludedir ;;\n+  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \\\n+  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \\\n+  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)\n+    oldincludedir=\"$ac_optarg\" ;;\n+\n+  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)\n+    ac_prev=prefix ;;\n+  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)\n+    prefix=\"$ac_optarg\" ;;\n+\n+  -program-prefix | --program-prefix | --program-prefi | --program-pref \\\n+  | --program-pre | --program-pr | --program-p)\n+    ac_prev=program_prefix ;;\n+  -program-prefix=* | --program-prefix=* | --program-prefi=* \\\n+  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)\n+    program_prefix=\"$ac_optarg\" ;;\n+\n+  -program-suffix | --program-suffix | --program-suffi | --program-suff \\\n+  | --program-suf | --program-su | --program-s)\n+    ac_prev=program_suffix ;;\n+  -program-suffix=* | --program-suffix=* | --program-suffi=* \\\n+  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)\n+    program_suffix=\"$ac_optarg\" ;;\n+\n+  -program-transform-name | --program-transform-name \\\n+  | --program-transform-nam | --program-transform-na \\\n+  | --program-transform-n | --program-transform- \\\n+  | --program-transform | --program-transfor \\\n+  | --program-transfo | --program-transf \\\n+  | --program-trans | --program-tran \\\n+  | --progr-tra | --program-tr | --program-t)\n+    ac_prev=program_transform_name ;;\n+  -program-transform-name=* | --program-transform-name=* \\\n+  | --program-transform-nam=* | --program-transform-na=* \\\n+  | --program-transform-n=* | --program-transform-=* \\\n+  | --program-transform=* | --program-transfor=* \\\n+  | --program-transfo=* | --program-transf=* \\\n+  | --program-trans=* | --program-tran=* \\\n+  | --progr-tra=* | --program-tr=* | --program-t=*)\n+    program_transform_name=\"$ac_optarg\" ;;\n+\n+  -q | -quiet | --quiet | --quie | --qui | --qu | --q \\\n+  | -silent | --silent | --silen | --sile | --sil)\n+    silent=yes ;;\n+\n+  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n+    ac_prev=sbindir ;;\n+  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n+  | --sbi=* | --sb=*)\n+    sbindir=\"$ac_optarg\" ;;\n+\n+  -sharedstatedir | --sharedstatedir | --sharedstatedi \\\n+  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \\\n+  | --sharedst | --shareds | --shared | --share | --shar \\\n+  | --sha | --sh)\n+    ac_prev=sharedstatedir ;;\n+  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \\\n+  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \\\n+  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \\\n+  | --sha=* | --sh=*)\n+    sharedstatedir=\"$ac_optarg\" ;;\n+\n+  -site | --site | --sit)\n+    ac_prev=site ;;\n+  -site=* | --site=* | --sit=*)\n+    site=\"$ac_optarg\" ;;\n+\n+  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)\n+    ac_prev=srcdir ;;\n+  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)\n+    srcdir=\"$ac_optarg\" ;;\n+\n+  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \\\n+  | --syscon | --sysco | --sysc | --sys | --sy)\n+    ac_prev=sysconfdir ;;\n+  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \\\n+  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)\n+    sysconfdir=\"$ac_optarg\" ;;\n+\n+  -target | --target | --targe | --targ | --tar | --ta | --t)\n+    ac_prev=target ;;\n+  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)\n+    target=\"$ac_optarg\" ;;\n+\n+  -v | -verbose | --verbose | --verbos | --verbo | --verb)\n+    verbose=yes ;;\n+\n+  -version | --version | --versio | --versi | --vers)\n+    echo \"configure generated by autoconf version 2.13\"\n+    exit 0 ;;\n+\n+  -with-* | --with-*)\n+    ac_package=`echo $ac_option|sed -e 's/-*with-//' -e 's/=.*//'`\n+    # Reject names that are not valid shell variable names.\n+    if test -n \"`echo $ac_package| sed 's/[-_a-zA-Z0-9]//g'`\"; then\n+      { echo \"configure: error: $ac_package: invalid package name\" 1>&2; exit 1; }\n+    fi\n+    ac_package=`echo $ac_package| sed 's/-/_/g'`\n+    case \"$ac_option\" in\n+      *=*) ;;\n+      *) ac_optarg=yes ;;\n+    esac\n+    eval \"with_${ac_package}='$ac_optarg'\" ;;\n+\n+  -without-* | --without-*)\n+    ac_package=`echo $ac_option|sed -e 's/-*without-//'`\n+    # Reject names that are not valid shell variable names.\n+    if test -n \"`echo $ac_package| sed 's/[-a-zA-Z0-9_]//g'`\"; then\n+      { echo \"configure: error: $ac_package: invalid package name\" 1>&2; exit 1; }\n+    fi\n+    ac_package=`echo $ac_package| sed 's/-/_/g'`\n+    eval \"with_${ac_package}=no\" ;;\n+\n+  --x)\n+    # Obsolete; use --with-x.\n+    with_x=yes ;;\n+\n+  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \\\n+  | --x-incl | --x-inc | --x-in | --x-i)\n+    ac_prev=x_includes ;;\n+  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \\\n+  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)\n+    x_includes=\"$ac_optarg\" ;;\n+\n+  -x-libraries | --x-libraries | --x-librarie | --x-librari \\\n+  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)\n+    ac_prev=x_libraries ;;\n+  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \\\n+  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)\n+    x_libraries=\"$ac_optarg\" ;;\n+\n+  -*) { echo \"configure: error: $ac_option: invalid option; use --help to show usage\" 1>&2; exit 1; }\n+    ;;\n+\n+  *)\n+    if test -n \"`echo $ac_option| sed 's/[-a-z0-9.]//g'`\"; then\n+      echo \"configure: warning: $ac_option: invalid host type\" 1>&2\n+    fi\n+    if test \"x$nonopt\" != xNONE; then\n+      { echo \"configure: error: can only configure for one host and one target at a time\" 1>&2; exit 1; }\n+    fi\n+    nonopt=\"$ac_option\"\n+    ;;\n+\n+  esac\n+done\n+\n+if test -n \"$ac_prev\"; then\n+  { echo \"configure: error: missing argument to --`echo $ac_prev | sed 's/_/-/g'`\" 1>&2; exit 1; }\n+fi\n+\n+trap 'rm -fr conftest* confdefs* core core.* *.core $ac_clean_files; exit 1' 1 2 15\n+\n+# File descriptor usage:\n+# 0 standard input\n+# 1 file creation\n+# 2 errors and warnings\n+# 3 some systems may open it to /dev/tty\n+# 4 used on the Kubota Titan\n+# 6 checking for... messages and results\n+# 5 compiler messages saved in config.log\n+if test \"$silent\" = yes; then\n+  exec 6>/dev/null\n+else\n+  exec 6>&1\n+fi\n+exec 5>./config.log\n+\n+echo \"\\\n+This file contains any messages produced by compilers while\n+running configure, to aid debugging if configure makes a mistake.\n+\" 1>&5\n+\n+# Strip out --no-create and --no-recursion so they do not pile up.\n+# Also quote any args containing shell metacharacters.\n+ac_configure_args=\n+for ac_arg\n+do\n+  case \"$ac_arg\" in\n+  -no-create | --no-create | --no-creat | --no-crea | --no-cre \\\n+  | --no-cr | --no-c) ;;\n+  -no-recursion | --no-recursion | --no-recursio | --no-recursi \\\n+  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r) ;;\n+  *\" \"*|*\"\t\"*|*[\\[\\]\\~\\#\\$\\^\\&\\*\\(\\)\\{\\}\\\\\\|\\;\\<\\>\\?]*)\n+  ac_configure_args=\"$ac_configure_args '$ac_arg'\" ;;\n+  *) ac_configure_args=\"$ac_configure_args $ac_arg\" ;;\n+  esac\n+done\n+\n+# NLS nuisances.\n+# Only set these to C if already set.  These must not be set unconditionally\n+# because not all systems understand e.g. LANG=C (notably SCO).\n+# Fixing LC_MESSAGES prevents Solaris sh from translating var values in `set'!\n+# Non-C LC_CTYPE values break the ctype check.\n+if test \"${LANG+set}\"   = set; then LANG=C;   export LANG;   fi\n+if test \"${LC_ALL+set}\" = set; then LC_ALL=C; export LC_ALL; fi\n+if test \"${LC_MESSAGES+set}\" = set; then LC_MESSAGES=C; export LC_MESSAGES; fi\n+if test \"${LC_CTYPE+set}\"    = set; then LC_CTYPE=C;    export LC_CTYPE;    fi\n+\n+# confdefs.h avoids OS command line length limits that DEFS can exceed.\n+rm -rf conftest* confdefs.h\n+# AIX cpp loses on an empty file, so make sure it contains at least a newline.\n+echo > confdefs.h\n+\n+# A filename unique to this package, relative to the directory that\n+# configure is in, which we can look for to find out if srcdir is correct.\n+ac_unique_file=new_handler.cc\n+\n+# Find the source files, if location was not specified.\n+if test -z \"$srcdir\"; then\n+  ac_srcdir_defaulted=yes\n+  # Try the directory containing this script, then its parent.\n+  ac_prog=$0\n+  ac_confdir=`echo $ac_prog|sed 's%/[^/][^/]*$%%'`\n+  test \"x$ac_confdir\" = \"x$ac_prog\" && ac_confdir=.\n+  srcdir=$ac_confdir\n+  if test ! -r $srcdir/$ac_unique_file; then\n+    srcdir=..\n+  fi\n+else\n+  ac_srcdir_defaulted=no\n+fi\n+if test ! -r $srcdir/$ac_unique_file; then\n+  if test \"$ac_srcdir_defaulted\" = yes; then\n+    { echo \"configure: error: can not find sources in $ac_confdir or ..\" 1>&2; exit 1; }\n+  else\n+    { echo \"configure: error: can not find sources in $srcdir\" 1>&2; exit 1; }\n+  fi\n+fi\n+srcdir=`echo \"${srcdir}\" | sed 's%\\([^/]\\)/*$%\\1%'`\n+\n+# Prefer explicitly selected file to automatically selected ones.\n+if test -z \"$CONFIG_SITE\"; then\n+  if test \"x$prefix\" != xNONE; then\n+    CONFIG_SITE=\"$prefix/share/config.site $prefix/etc/config.site\"\n+  else\n+    CONFIG_SITE=\"$ac_default_prefix/share/config.site $ac_default_prefix/etc/config.site\"\n+  fi\n+fi\n+for ac_site_file in $CONFIG_SITE; do\n+  if test -r \"$ac_site_file\"; then\n+    echo \"loading site script $ac_site_file\"\n+    . \"$ac_site_file\"\n+  fi\n+done\n+\n+if test -r \"$cache_file\"; then\n+  echo \"loading cache $cache_file\"\n+  . $cache_file\n+else\n+  echo \"creating cache $cache_file\"\n+  > $cache_file\n+fi\n+\n+ac_ext=c\n+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'\n+cross_compiling=$ac_cv_prog_cc_cross\n+\n+ac_exeext=\n+ac_objext=o\n+if (echo \"testing\\c\"; echo 1,2,3) | grep c >/dev/null; then\n+  # Stardent Vistra SVR4 grep lacks -e, says ghazi@caip.rutgers.edu.\n+  if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then\n+    ac_n= ac_c='\n+' ac_t='\t'\n+  else\n+    ac_n=-n ac_c= ac_t=\n+  fi\n+else\n+  ac_n= ac_c='\\c' ac_t=\n+fi\n+\n+\n+ac_aux_dir=\n+for ac_dir in .. $srcdir/..; do\n+  if test -f $ac_dir/install-sh; then\n+    ac_aux_dir=$ac_dir\n+    ac_install_sh=\"$ac_aux_dir/install-sh -c\"\n+    break\n+  elif test -f $ac_dir/install.sh; then\n+    ac_aux_dir=$ac_dir\n+    ac_install_sh=\"$ac_aux_dir/install.sh -c\"\n+    break\n+  fi\n+done\n+if test -z \"$ac_aux_dir\"; then\n+  { echo \"configure: error: can not find install-sh or install.sh in .. $srcdir/..\" 1>&2; exit 1; }\n+fi\n+ac_config_guess=$ac_aux_dir/config.guess\n+ac_config_sub=$ac_aux_dir/config.sub\n+ac_configure=$ac_aux_dir/configure # This should be Cygnus configure.\n+\n+\n+PACKAGE=libsupc++\n+VERSION=3.0\n+\n+\n+\n+\n+# Do some error checking and defaulting for the host and target type.\n+# The inputs are:\n+#    configure --host=HOST --target=TARGET --build=BUILD NONOPT\n+#\n+# The rules are:\n+# 1. You are not allowed to specify --host, --target, and nonopt at the\n+#    same time.\n+# 2. Host defaults to nonopt.\n+# 3. If nonopt is not specified, then host defaults to the current host,\n+#    as determined by config.guess.\n+# 4. Target and build default to nonopt.\n+# 5. If nonopt is not specified, then target and build default to host.\n+\n+# The aliases save the names the user supplied, while $host etc.\n+# will get canonicalized.\n+case $host---$target---$nonopt in\n+NONE---*---* | *---NONE---* | *---*---NONE) ;;\n+*) { echo \"configure: error: can only configure for one host and one target at a time\" 1>&2; exit 1; } ;;\n+esac\n+\n+\n+# Make sure we can run config.sub.\n+if ${CONFIG_SHELL-/bin/sh} $ac_config_sub sun4 >/dev/null 2>&1; then :\n+else { echo \"configure: error: can not run $ac_config_sub\" 1>&2; exit 1; }\n+fi\n+\n+echo $ac_n \"checking host system type\"\"... $ac_c\" 1>&6\n+echo \"configure:588: checking host system type\" >&5\n+\n+host_alias=$host\n+case \"$host_alias\" in\n+NONE)\n+  case $nonopt in\n+  NONE)\n+    if host_alias=`${CONFIG_SHELL-/bin/sh} $ac_config_guess`; then :\n+    else { echo \"configure: error: can not guess host type; you must specify one\" 1>&2; exit 1; }\n+    fi ;;\n+  *) host_alias=$nonopt ;;\n+  esac ;;\n+esac\n+\n+host=`${CONFIG_SHELL-/bin/sh} $ac_config_sub $host_alias`\n+host_cpu=`echo $host | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\1/'`\n+host_vendor=`echo $host | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\2/'`\n+host_os=`echo $host | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\3/'`\n+echo \"$ac_t\"\"$host\" 1>&6\n+\n+echo $ac_n \"checking target system type\"\"... $ac_c\" 1>&6\n+echo \"configure:609: checking target system type\" >&5\n+\n+target_alias=$target\n+case \"$target_alias\" in\n+NONE)\n+  case $nonopt in\n+  NONE) target_alias=$host_alias ;;\n+  *) target_alias=$nonopt ;;\n+  esac ;;\n+esac\n+\n+target=`${CONFIG_SHELL-/bin/sh} $ac_config_sub $target_alias`\n+target_cpu=`echo $target | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\1/'`\n+target_vendor=`echo $target | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\2/'`\n+target_os=`echo $target | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\3/'`\n+echo \"$ac_t\"\"$target\" 1>&6\n+\n+echo $ac_n \"checking build system type\"\"... $ac_c\" 1>&6\n+echo \"configure:627: checking build system type\" >&5\n+\n+build_alias=$build\n+case \"$build_alias\" in\n+NONE)\n+  case $nonopt in\n+  NONE) build_alias=$host_alias ;;\n+  *) build_alias=$nonopt ;;\n+  esac ;;\n+esac\n+\n+build=`${CONFIG_SHELL-/bin/sh} $ac_config_sub $build_alias`\n+build_cpu=`echo $build | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\1/'`\n+build_vendor=`echo $build | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\2/'`\n+build_os=`echo $build | sed 's/^\\([^-]*\\)-\\([^-]*\\)-\\(.*\\)$/\\3/'`\n+echo \"$ac_t\"\"$build\" 1>&6\n+\n+test \"$host_alias\" != \"$target_alias\" &&\n+  test \"$program_prefix$program_suffix$program_transform_name\" = \\\n+    NONENONEs,x,x, &&\n+  program_prefix=${target_alias}-\n+\n+# Check whether --enable-shared or --disable-shared was given.\n+if test \"${enable_shared+set}\" = set; then\n+  enableval=\"$enable_shared\"\n+  p=${PACKAGE-default}\n+case \"$enableval\" in\n+yes) enable_shared=yes ;;\n+no) enable_shared=no ;;\n+*)\n+  enable_shared=no\n+  # Look at the argument we got.  We use all the common list separators.\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+  for pkg in $enableval; do\n+    if test \"X$pkg\" = \"X$p\"; then\n+      enable_shared=yes\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  ;;\n+esac\n+else\n+  enable_shared=yes\n+fi\n+\n+# Check whether --enable-static or --disable-static was given.\n+if test \"${enable_static+set}\" = set; then\n+  enableval=\"$enable_static\"\n+  p=${PACKAGE-default}\n+case \"$enableval\" in\n+yes) enable_static=yes ;;\n+no) enable_static=no ;;\n+*)\n+  enable_static=no\n+  # Look at the argument we got.  We use all the common list separators.\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+  for pkg in $enableval; do\n+    if test \"X$pkg\" = \"X$p\"; then\n+      enable_static=yes\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  ;;\n+esac\n+else\n+  enable_static=yes\n+fi\n+\n+# Check whether --enable-fast-install or --disable-fast-install was given.\n+if test \"${enable_fast_install+set}\" = set; then\n+  enableval=\"$enable_fast_install\"\n+  p=${PACKAGE-default}\n+case \"$enableval\" in\n+yes) enable_fast_install=yes ;;\n+no) enable_fast_install=no ;;\n+*)\n+  enable_fast_install=no\n+  # Look at the argument we got.  We use all the common list separators.\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+  for pkg in $enableval; do\n+    if test \"X$pkg\" = \"X$p\"; then\n+      enable_fast_install=yes\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  ;;\n+esac\n+else\n+  enable_fast_install=yes\n+fi\n+\n+# Extract the first word of \"ranlib\", so it can be a program name with args.\n+set dummy ranlib; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:721: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_RANLIB'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$RANLIB\"; then\n+  ac_cv_prog_RANLIB=\"$RANLIB\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      ac_cv_prog_RANLIB=\"ranlib\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  test -z \"$ac_cv_prog_RANLIB\" && ac_cv_prog_RANLIB=\":\"\n+fi\n+fi\n+RANLIB=\"$ac_cv_prog_RANLIB\"\n+if test -n \"$RANLIB\"; then\n+  echo \"$ac_t\"\"$RANLIB\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+# Extract the first word of \"gcc\", so it can be a program name with args.\n+set dummy gcc; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:751: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$CC\"; then\n+  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      ac_cv_prog_CC=\"gcc\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+fi\n+fi\n+CC=\"$ac_cv_prog_CC\"\n+if test -n \"$CC\"; then\n+  echo \"$ac_t\"\"$CC\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+if test -z \"$CC\"; then\n+  # Extract the first word of \"cc\", so it can be a program name with args.\n+set dummy cc; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:781: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$CC\"; then\n+  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_prog_rejected=no\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      if test \"$ac_dir/$ac_word\" = \"/usr/ucb/cc\"; then\n+        ac_prog_rejected=yes\n+\tcontinue\n+      fi\n+      ac_cv_prog_CC=\"cc\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+if test $ac_prog_rejected = yes; then\n+  # We found a bogon in the path, so make sure we never use it.\n+  set dummy $ac_cv_prog_CC\n+  shift\n+  if test $# -gt 0; then\n+    # We chose a different compiler from the bogus one.\n+    # However, it has the same basename, so the bogon will be chosen\n+    # first if we set CC to just the basename; use the full file name.\n+    shift\n+    set dummy \"$ac_dir/$ac_word\" \"$@\"\n+    shift\n+    ac_cv_prog_CC=\"$@\"\n+  fi\n+fi\n+fi\n+fi\n+CC=\"$ac_cv_prog_CC\"\n+if test -n \"$CC\"; then\n+  echo \"$ac_t\"\"$CC\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+  if test -z \"$CC\"; then\n+    case \"`uname -s`\" in\n+    *win32* | *WIN32*)\n+      # Extract the first word of \"cl\", so it can be a program name with args.\n+set dummy cl; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:832: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$CC\"; then\n+  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      ac_cv_prog_CC=\"cl\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+fi\n+fi\n+CC=\"$ac_cv_prog_CC\"\n+if test -n \"$CC\"; then\n+  echo \"$ac_t\"\"$CC\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+ ;;\n+    esac\n+  fi\n+  test -z \"$CC\" && { echo \"configure: error: no acceptable cc found in \\$PATH\" 1>&2; exit 1; }\n+fi\n+\n+echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\"\"... $ac_c\" 1>&6\n+echo \"configure:864: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n+\n+ac_ext=c\n+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'\n+cross_compiling=$ac_cv_prog_cc_cross\n+\n+cat > conftest.$ac_ext << EOF\n+\n+#line 875 \"configure\"\n+#include \"confdefs.h\"\n+\n+main(){return(0);}\n+EOF\n+if { (eval echo configure:880: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  ac_cv_prog_cc_works=yes\n+  # If we can't run a trivial program, we are probably using a cross compiler.\n+  if (./conftest; exit) 2>/dev/null; then\n+    ac_cv_prog_cc_cross=no\n+  else\n+    ac_cv_prog_cc_cross=yes\n+  fi\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  ac_cv_prog_cc_works=no\n+fi\n+rm -fr conftest*\n+ac_ext=c\n+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'\n+cross_compiling=$ac_cv_prog_cc_cross\n+\n+echo \"$ac_t\"\"$ac_cv_prog_cc_works\" 1>&6\n+if test $ac_cv_prog_cc_works = no; then\n+  { echo \"configure: error: installation or configuration problem: C compiler cannot create executables.\" 1>&2; exit 1; }\n+fi\n+echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\"\"... $ac_c\" 1>&6\n+echo \"configure:906: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n+echo \"$ac_t\"\"$ac_cv_prog_cc_cross\" 1>&6\n+cross_compiling=$ac_cv_prog_cc_cross\n+\n+echo $ac_n \"checking whether we are using GNU C\"\"... $ac_c\" 1>&6\n+echo \"configure:911: checking whether we are using GNU C\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_gcc'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.c <<EOF\n+#ifdef __GNUC__\n+  yes;\n+#endif\n+EOF\n+if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:920: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n+  ac_cv_prog_gcc=yes\n+else\n+  ac_cv_prog_gcc=no\n+fi\n+fi\n+\n+echo \"$ac_t\"\"$ac_cv_prog_gcc\" 1>&6\n+\n+if test $ac_cv_prog_gcc = yes; then\n+  GCC=yes\n+else\n+  GCC=\n+fi\n+\n+ac_test_CFLAGS=\"${CFLAGS+set}\"\n+ac_save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\n+echo $ac_n \"checking whether ${CC-cc} accepts -g\"\"... $ac_c\" 1>&6\n+echo \"configure:939: checking whether ${CC-cc} accepts -g\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_cc_g'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  echo 'void f(){}' > conftest.c\n+if test -z \"`${CC-cc} -g -c conftest.c 2>&1`\"; then\n+  ac_cv_prog_cc_g=yes\n+else\n+  ac_cv_prog_cc_g=no\n+fi\n+rm -f conftest*\n+\n+fi\n+\n+echo \"$ac_t\"\"$ac_cv_prog_cc_g\" 1>&6\n+if test \"$ac_test_CFLAGS\" = set; then\n+  CFLAGS=\"$ac_save_CFLAGS\"\n+elif test $ac_cv_prog_cc_g = yes; then\n+  if test \"$GCC\" = yes; then\n+    CFLAGS=\"-g -O2\"\n+  else\n+    CFLAGS=\"-g\"\n+  fi\n+else\n+  if test \"$GCC\" = yes; then\n+    CFLAGS=\"-O2\"\n+  else\n+    CFLAGS=\n+  fi\n+fi\n+\n+# Check whether --with-gnu-ld or --without-gnu-ld was given.\n+if test \"${with_gnu_ld+set}\" = set; then\n+  withval=\"$with_gnu_ld\"\n+  test \"$withval\" = no || with_gnu_ld=yes\n+else\n+  with_gnu_ld=no\n+fi\n+\n+ac_prog=ld\n+if test \"$ac_cv_prog_gcc\" = yes; then\n+  # Check if gcc -print-prog-name=ld gives a path.\n+  echo $ac_n \"checking for ld used by GCC\"\"... $ac_c\" 1>&6\n+echo \"configure:982: checking for ld used by GCC\" >&5\n+  ac_prog=`($CC -print-prog-name=ld) 2>&5`\n+  case \"$ac_prog\" in\n+    # Accept absolute paths.\n+    [\\\\/]* | [A-Za-z]:[\\\\/]*)\n+      re_direlt='/[^/][^/]*/\\.\\./'\n+      # Canonicalize the path of ld\n+      ac_prog=`echo $ac_prog| sed 's%\\\\\\\\%/%g'`\n+      while echo $ac_prog | grep \"$re_direlt\" > /dev/null 2>&1; do\n+\tac_prog=`echo $ac_prog| sed \"s%$re_direlt%/%\"`\n+      done\n+      test -z \"$LD\" && LD=\"$ac_prog\"\n+      ;;\n+  \"\")\n+    # If it fails, then pretend we aren't using GCC.\n+    ac_prog=ld\n+    ;;\n+  *)\n+    # If it is relative, then search for the first ld in PATH.\n+    with_gnu_ld=unknown\n+    ;;\n+  esac\n+elif test \"$with_gnu_ld\" = yes; then\n+  echo $ac_n \"checking for GNU ld\"\"... $ac_c\" 1>&6\n+echo \"configure:1006: checking for GNU ld\" >&5\n+else\n+  echo $ac_n \"checking for non-GNU ld\"\"... $ac_c\" 1>&6\n+echo \"configure:1009: checking for non-GNU ld\" >&5\n+fi\n+if eval \"test \\\"`echo '$''{'ac_cv_path_LD'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -z \"$LD\"; then\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}${PATH_SEPARATOR-:}\"\n+  for ac_dir in $PATH; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n+      ac_cv_path_LD=\"$ac_dir/$ac_prog\"\n+      # Check to see if the program is GNU ld.  I'd rather use --version,\n+      # but apparently some GNU ld's only accept -v.\n+      # Break only if it was the GNU/non-GNU ld that we prefer.\n+      if \"$ac_cv_path_LD\" -v 2>&1 < /dev/null | egrep '(GNU|with BFD)' > /dev/null; then\n+\ttest \"$with_gnu_ld\" != no && break\n+      else\n+\ttest \"$with_gnu_ld\" != yes && break\n+      fi\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+else\n+  ac_cv_path_LD=\"$LD\" # Let the user override the test with a path.\n+fi\n+fi\n+\n+LD=\"$ac_cv_path_LD\"\n+if test -n \"$LD\"; then\n+  echo \"$ac_t\"\"$LD\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+test -z \"$LD\" && { echo \"configure: error: no acceptable ld found in \\$PATH\" 1>&2; exit 1; }\n+echo $ac_n \"checking if the linker ($LD) is GNU ld\"\"... $ac_c\" 1>&6\n+echo \"configure:1044: checking if the linker ($LD) is GNU ld\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_gnu_ld'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  # I'd rather use --version here, but apparently some GNU ld's only accept -v.\n+if $LD -v 2>&1 </dev/null | egrep '(GNU|with BFD)' 1>&5; then\n+  ac_cv_prog_gnu_ld=yes\n+else\n+  ac_cv_prog_gnu_ld=no\n+fi\n+fi\n+\n+echo \"$ac_t\"\"$ac_cv_prog_gnu_ld\" 1>&6\n+\n+\n+echo $ac_n \"checking for BSD-compatible nm\"\"... $ac_c\" 1>&6\n+echo \"configure:1060: checking for BSD-compatible nm\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_path_NM'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$NM\"; then\n+  # Let the user override the test.\n+  ac_cv_path_NM=\"$NM\"\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}${PATH_SEPARATOR-:}\"\n+  for ac_dir in $PATH /usr/ccs/bin /usr/ucb /bin; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/nm || test -f $ac_dir/nm$ac_exeext ; then\n+      # Check to see if the nm accepts a BSD-compat flag.\n+      # Adding the `sed 1q' prevents false positives on HP-UX, which says:\n+      #   nm: unknown option \"B\" ignored\n+      if ($ac_dir/nm -B /dev/null 2>&1 | sed '1q'; exit 0) | egrep /dev/null >/dev/null; then\n+\tac_cv_path_NM=\"$ac_dir/nm -B\"\n+\tbreak\n+      elif ($ac_dir/nm -p /dev/null 2>&1 | sed '1q'; exit 0) | egrep /dev/null >/dev/null; then\n+\tac_cv_path_NM=\"$ac_dir/nm -p\"\n+\tbreak\n+      else\n+\tac_cv_path_NM=${ac_cv_path_NM=\"$ac_dir/nm\"} # keep the first match, but\n+\tcontinue # so that we can try to find one that supports BSD flags\n+      fi\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+  test -z \"$ac_cv_path_NM\" && ac_cv_path_NM=nm\n+fi\n+fi\n+\n+NM=\"$ac_cv_path_NM\"\n+echo \"$ac_t\"\"$NM\" 1>&6\n+\n+echo $ac_n \"checking whether ln -s works\"\"... $ac_c\" 1>&6\n+echo \"configure:1096: checking whether ln -s works\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_LN_S'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  rm -f conftestdata\n+if ln -s X conftestdata 2>/dev/null\n+then\n+  rm -f conftestdata\n+  ac_cv_prog_LN_S=\"ln -s\"\n+else\n+  ac_cv_prog_LN_S=ln\n+fi\n+fi\n+LN_S=\"$ac_cv_prog_LN_S\"\n+if test \"$ac_cv_prog_LN_S\" = \"ln -s\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+\n+case \"$target\" in\n+NONE) lt_target=\"$host\" ;;\n+*) lt_target=\"$target\" ;;\n+esac\n+\n+# Check for any special flags to pass to ltconfig.\n+#\n+# the following will cause an existing older ltconfig to fail, so\n+# we ignore this at the expense of the cache file... Checking this \n+# will just take longer ... bummer!\n+#libtool_flags=\"--cache-file=$cache_file\"\n+#\n+test \"$enable_shared\" = no && libtool_flags=\"$libtool_flags --disable-shared\"\n+test \"$enable_static\" = no && libtool_flags=\"$libtool_flags --disable-static\"\n+test \"$enable_fast_install\" = no && libtool_flags=\"$libtool_flags --disable-fast-install\"\n+test \"$ac_cv_prog_gcc\" = yes && libtool_flags=\"$libtool_flags --with-gcc\"\n+test \"$ac_cv_prog_gnu_ld\" = yes && libtool_flags=\"$libtool_flags --with-gnu-ld\"\n+\n+\n+# Check whether --enable-libtool-lock or --disable-libtool-lock was given.\n+if test \"${enable_libtool_lock+set}\" = set; then\n+  enableval=\"$enable_libtool_lock\"\n+  :\n+fi\n+\n+test \"x$enable_libtool_lock\" = xno && libtool_flags=\"$libtool_flags --disable-lock\"\n+test x\"$silent\" = xyes && libtool_flags=\"$libtool_flags --silent\"\n+\n+# Some flags need to be propagated to the compiler or linker for good\n+# libtool support.\n+case \"$lt_target\" in\n+*-*-irix6*)\n+  # Find out which ABI we are using.\n+  echo '#line 1150 \"configure\"' > conftest.$ac_ext\n+  if { (eval echo configure:1151: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+    case \"`/usr/bin/file conftest.o`\" in\n+    *32-bit*)\n+      LD=\"${LD-ld} -32\"\n+      ;;\n+    *N32*)\n+      LD=\"${LD-ld} -n32\"\n+      ;;\n+    *64-bit*)\n+      LD=\"${LD-ld} -64\"\n+      ;;\n+    esac\n+  fi\n+  rm -rf conftest*\n+  ;;\n+\n+*-*-sco3.2v5*)\n+  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n+  SAVE_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -belf\"\n+  echo $ac_n \"checking whether the C compiler needs -belf\"\"... $ac_c\" 1>&6\n+echo \"configure:1172: checking whether the C compiler needs -belf\" >&5\n+if eval \"test \\\"`echo '$''{'lt_cv_cc_needs_belf'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 1177 \"configure\"\n+#include \"confdefs.h\"\n+\n+int main() {\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:1184: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  lt_cv_cc_needs_belf=yes\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  lt_cv_cc_needs_belf=no\n+fi\n+rm -f conftest*\n+fi\n+\n+echo \"$ac_t\"\"$lt_cv_cc_needs_belf\" 1>&6\n+  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n+    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n+    CFLAGS=\"$SAVE_CFLAGS\"\n+  fi\n+  ;;\n+\n+\n+esac\n+\n+\n+# Save cache, so that ltconfig can load it\n+cat > confcache <<\\EOF\n+# This file is a shell script that caches the results of configure\n+# tests run on this system so they can be shared between configure\n+# scripts and configure runs.  It is not useful on other systems.\n+# If it contains results you don't want to keep, you may remove or edit it.\n+#\n+# By default, configure uses ./config.cache as the cache file,\n+# creating it if it does not exist already.  You can give configure\n+# the --cache-file=FILE option to use a different cache file; that is\n+# what configure does when it calls configure scripts in\n+# subdirectories, so they share the cache.\n+# Giving --cache-file=/dev/null disables caching, for debugging configure.\n+# config.status only pays attention to the cache file if you give it the\n+# --recheck option to rerun configure.\n+#\n+EOF\n+# The following way of writing the cache mishandles newlines in values,\n+# but we know of no workaround that is simple, portable, and efficient.\n+# So, don't put newlines in cache variables' values.\n+# Ultrix sh set writes to stderr and can't be redirected directly,\n+# and sets the high bit in the cache file unless we assign to the vars.\n+(set) 2>&1 |\n+  case `(ac_space=' '; set | grep ac_space) 2>&1` in\n+  *ac_space=\\ *)\n+    # `set' does not quote correctly, so add quotes (double-quote substitution\n+    # turns \\\\\\\\ into \\\\, and sed turns \\\\ into \\).\n+    sed -n \\\n+      -e \"s/'/'\\\\\\\\''/g\" \\\n+      -e \"s/^\\\\([a-zA-Z0-9_]*_cv_[a-zA-Z0-9_]*\\\\)=\\\\(.*\\\\)/\\\\1=\\${\\\\1='\\\\2'}/p\"\n+    ;;\n+  *)\n+    # `set' quotes correctly as required by POSIX, so do not add quotes.\n+    sed -n -e 's/^\\([a-zA-Z0-9_]*_cv_[a-zA-Z0-9_]*\\)=\\(.*\\)/\\1=${\\1=\\2}/p'\n+    ;;\n+  esac >> confcache\n+if cmp -s $cache_file confcache; then\n+  :\n+else\n+  if test -w $cache_file; then\n+    echo \"updating cache $cache_file\"\n+    cat confcache > $cache_file\n+  else\n+    echo \"not updating unwritable cache $cache_file\"\n+  fi\n+fi\n+rm -f confcache\n+\n+\n+# Actually configure libtool.  ac_aux_dir is where install-sh is found.\n+CC=\"$CC\" CFLAGS=\"$CFLAGS\" CPPFLAGS=\"$CPPFLAGS\" \\\n+LD=\"$LD\" LDFLAGS=\"$LDFLAGS\" LIBS=\"$LIBS\" \\\n+LN_S=\"$LN_S\" NM=\"$NM\" RANLIB=\"$RANLIB\" \\\n+DLLTOOL=\"$DLLTOOL\" AS=\"$AS\" OBJDUMP=\"$OBJDUMP\" \\\n+${CONFIG_SHELL-/bin/sh} $ac_aux_dir/ltconfig --no-reexec \\\n+$libtool_flags --no-verify $ac_aux_dir/ltmain.sh $lt_target \\\n+|| { echo \"configure: error: libtool configure failed\" 1>&2; exit 1; }\n+\n+# Reload cache, that may have been modified by ltconfig\n+if test -r \"$cache_file\"; then\n+  echo \"loading cache $cache_file\"\n+  . $cache_file\n+else\n+  echo \"creating cache $cache_file\"\n+  > $cache_file\n+fi\n+\n+\n+# This can be used to rebuild libtool when needed\n+LIBTOOL_DEPS=\"$ac_aux_dir/ltconfig $ac_aux_dir/ltmain.sh\"\n+\n+# Always use our own libtool.\n+LIBTOOL='$(SHELL) $(top_builddir)/libtool'\n+\n+# Redirect the config.log output again, so that the ltconfig log is not\n+# clobbered by the next message.\n+exec 5>>./config.log\n+\n+# Find a good install program.  We prefer a C program (faster),\n+# so one script is as good as another.  But avoid the broken or\n+# incompatible versions:\n+# SysV /etc/install, /usr/sbin/install\n+# SunOS /usr/etc/install\n+# IRIX /sbin/install\n+# AIX /bin/install\n+# AIX 4 /usr/bin/installbsd, which doesn't work without a -g flag\n+# AFS /usr/afsws/bin/install, which mishandles nonexistent args\n+# SVR4 /usr/ucb/install, which tries to use the nonexistent group \"staff\"\n+# ./install, which can be erroneously created by make from ./install.sh.\n+echo $ac_n \"checking for a BSD compatible install\"\"... $ac_c\" 1>&6\n+echo \"configure:1297: checking for a BSD compatible install\" >&5\n+if test -z \"$INSTALL\"; then\n+if eval \"test \\\"`echo '$''{'ac_cv_path_install'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+    IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\":\"\n+  for ac_dir in $PATH; do\n+    # Account for people who put trailing slashes in PATH elements.\n+    case \"$ac_dir/\" in\n+    /|./|.//|/etc/*|/usr/sbin/*|/usr/etc/*|/sbin/*|/usr/afsws/bin/*|/usr/ucb/*) ;;\n+    *)\n+      # OSF1 and SCO ODT 3.0 have their own names for install.\n+      # Don't use installbsd from OSF since it installs stuff as root\n+      # by default.\n+      for ac_prog in ginstall scoinst install; do\n+        if test -f $ac_dir/$ac_prog; then\n+\t  if test $ac_prog = install &&\n+            grep dspmsg $ac_dir/$ac_prog >/dev/null 2>&1; then\n+\t    # AIX install.  It has an incompatible calling convention.\n+\t    :\n+\t  else\n+\t    ac_cv_path_install=\"$ac_dir/$ac_prog -c\"\n+\t    break 2\n+\t  fi\n+\tfi\n+      done\n+      ;;\n+    esac\n+  done\n+  IFS=\"$ac_save_IFS\"\n+\n+fi\n+  if test \"${ac_cv_path_install+set}\" = set; then\n+    INSTALL=\"$ac_cv_path_install\"\n+  else\n+    # As a last resort, use the slow shell script.  We don't cache a\n+    # path for INSTALL within a source directory, because that will\n+    # break other packages using the cache if that directory is\n+    # removed, or if the path is relative.\n+    INSTALL=\"$ac_install_sh\"\n+  fi\n+fi\n+echo \"$ac_t\"\"$INSTALL\" 1>&6\n+\n+# Use test -z because SunOS4 sh mishandles braces in ${var-val}.\n+# It thinks the first close brace ends the variable substitution.\n+test -z \"$INSTALL_PROGRAM\" && INSTALL_PROGRAM='${INSTALL}'\n+\n+test -z \"$INSTALL_SCRIPT\" && INSTALL_SCRIPT='${INSTALL_PROGRAM}'\n+\n+test -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n+\n+for ac_prog in $CCC c++ g++ gcc CC cxx cc++ cl\n+do\n+# Extract the first word of \"$ac_prog\", so it can be a program name with args.\n+set dummy $ac_prog; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:1354: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_CXX'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$CXX\"; then\n+  ac_cv_prog_CXX=\"$CXX\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      ac_cv_prog_CXX=\"$ac_prog\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+fi\n+fi\n+CXX=\"$ac_cv_prog_CXX\"\n+if test -n \"$CXX\"; then\n+  echo \"$ac_t\"\"$CXX\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+test -n \"$CXX\" && break\n+done\n+test -n \"$CXX\" || CXX=\"gcc\"\n+\n+\n+echo $ac_n \"checking whether the C++ compiler ($CXX $CXXFLAGS $LDFLAGS) works\"\"... $ac_c\" 1>&6\n+echo \"configure:1386: checking whether the C++ compiler ($CXX $CXXFLAGS $LDFLAGS) works\" >&5\n+\n+ac_ext=C\n+# CXXFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='${CXX-g++} -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n+ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'\n+cross_compiling=$ac_cv_prog_cxx_cross\n+\n+cat > conftest.$ac_ext << EOF\n+\n+#line 1397 \"configure\"\n+#include \"confdefs.h\"\n+\n+int main(){return(0);}\n+EOF\n+if { (eval echo configure:1402: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  ac_cv_prog_cxx_works=yes\n+  # If we can't run a trivial program, we are probably using a cross compiler.\n+  if (./conftest; exit) 2>/dev/null; then\n+    ac_cv_prog_cxx_cross=no\n+  else\n+    ac_cv_prog_cxx_cross=yes\n+  fi\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  ac_cv_prog_cxx_works=no\n+fi\n+rm -fr conftest*\n+ac_ext=c\n+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'\n+cross_compiling=$ac_cv_prog_cc_cross\n+\n+echo \"$ac_t\"\"$ac_cv_prog_cxx_works\" 1>&6\n+if test $ac_cv_prog_cxx_works = no; then\n+  { echo \"configure: error: installation or configuration problem: C++ compiler cannot create executables.\" 1>&2; exit 1; }\n+fi\n+echo $ac_n \"checking whether the C++ compiler ($CXX $CXXFLAGS $LDFLAGS) is a cross-compiler\"\"... $ac_c\" 1>&6\n+echo \"configure:1428: checking whether the C++ compiler ($CXX $CXXFLAGS $LDFLAGS) is a cross-compiler\" >&5\n+echo \"$ac_t\"\"$ac_cv_prog_cxx_cross\" 1>&6\n+cross_compiling=$ac_cv_prog_cxx_cross\n+\n+echo $ac_n \"checking whether we are using GNU C++\"\"... $ac_c\" 1>&6\n+echo \"configure:1433: checking whether we are using GNU C++\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_gxx'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.C <<EOF\n+#ifdef __GNUC__\n+  yes;\n+#endif\n+EOF\n+if { ac_try='${CXX-g++} -E conftest.C'; { (eval echo configure:1442: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n+  ac_cv_prog_gxx=yes\n+else\n+  ac_cv_prog_gxx=no\n+fi\n+fi\n+\n+echo \"$ac_t\"\"$ac_cv_prog_gxx\" 1>&6\n+\n+if test $ac_cv_prog_gxx = yes; then\n+  GXX=yes\n+else\n+  GXX=\n+fi\n+\n+ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\n+echo $ac_n \"checking whether ${CXX-g++} accepts -g\"\"... $ac_c\" 1>&6\n+echo \"configure:1461: checking whether ${CXX-g++} accepts -g\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_cxx_g'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  echo 'void f(){}' > conftest.cc\n+if test -z \"`${CXX-g++} -g -c conftest.cc 2>&1`\"; then\n+  ac_cv_prog_cxx_g=yes\n+else\n+  ac_cv_prog_cxx_g=no\n+fi\n+rm -f conftest*\n+\n+fi\n+\n+echo \"$ac_t\"\"$ac_cv_prog_cxx_g\" 1>&6\n+if test \"$ac_test_CXXFLAGS\" = set; then\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+elif test $ac_cv_prog_cxx_g = yes; then\n+  if test \"$GXX\" = yes; then\n+    CXXFLAGS=\"-g -O2\"\n+  else\n+    CXXFLAGS=\"-g\"\n+  fi\n+else\n+  if test \"$GXX\" = yes; then\n+    CXXFLAGS=\"-O2\"\n+  else\n+    CXXFLAGS=\n+  fi\n+fi\n+\n+s%@SHELL@%$SHELL%g\n+s%@CFLAGS@%$CFLAGS%g\n+s%@CPPFLAGS@%$CPPFLAGS%g\n+s%@CXXFLAGS@%$CXXFLAGS%g\n+s%@FFLAGS@%$FFLAGS%g\n+s%@DEFS@%$DEFS%g\n+s%@LDFLAGS@%$LDFLAGS%g\n+s%@LIBS@%$LIBS%g\n+s%@exec_prefix@%$exec_prefix%g\n+s%@prefix@%$prefix%g\n+s%@program_transform_name@%$program_transform_name%g\n+s%@bindir@%$bindir%g\n+s%@sbindir@%$sbindir%g\n+s%@libexecdir@%$libexecdir%g\n+s%@datadir@%$datadir%g\n+s%@sysconfdir@%$sysconfdir%g\n+s%@sharedstatedir@%$sharedstatedir%g\n+s%@localstatedir@%$localstatedir%g\n+s%@libdir@%$libdir%g\n+s%@includedir@%$includedir%g\n+s%@oldincludedir@%$oldincludedir%g\n+s%@infodir@%$infodir%g\n+s%@mandir@%$mandir%g\n+s%@PACKAGE@%$PACKAGE%g\n+s%@VERSION@%$VERSION%g\n+s%@host@%$host%g\n+s%@host_alias@%$host_alias%g\n+s%@host_cpu@%$host_cpu%g\n+s%@host_vendor@%$host_vendor%g\n+s%@host_os@%$host_os%g\n+s%@target@%$target%g\n+s%@target_alias@%$target_alias%g\n+s%@target_cpu@%$target_cpu%g\n+s%@target_vendor@%$target_vendor%g\n+s%@target_os@%$target_os%g\n+s%@build@%$build%g\n+s%@build_alias@%$build_alias%g\n+s%@build_cpu@%$build_cpu%g\n+s%@build_vendor@%$build_vendor%g\n+s%@build_os@%$build_os%g\n+s%@RANLIB@%$RANLIB%g\n+s%@CC@%$CC%g\n+s%@LN_S@%$LN_S%g\n+s%@LIBTOOL@%$LIBTOOL%g\n+s%@INSTALL_PROGRAM@%$INSTALL_PROGRAM%g\n+s%@INSTALL_SCRIPT@%$INSTALL_SCRIPT%g\n+s%@INSTALL_DATA@%$INSTALL_DATA%g\n+s%@CXX@%$CXX%g"}, {"sha": "a87968bc24845ec9df39fe07f3a37c3109e83581", "filename": "libstdc++-v3/libsupc++/configure.in", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fconfigure.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,16 @@\n+# Process this file with autoconf to produce a configure script, like so:\n+# aclocal, autoconf, autoheader, automake\n+\n+AC_PREREQ(2.13)\n+AC_INIT(new_handler.cc)\n+AC_CONFIG_AUX_DIR(..)\n+\n+PACKAGE=libsupc++\n+VERSION=3.0\n+AC_SUBST(PACKAGE)\n+AC_SUBST(VERSION)\n+\n+AC_CANONICAL_SYSTEM\n+AM_PROG_LIBTOOL\n+AC_PROG_INSTALL\n+AC_PROG_CXX"}, {"sha": "c009a1637c648cfb6702ca61860525a09b1d7584", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,39 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+\n+extern \"C\" void free (void *);\n+\n+void\n+operator delete (void *ptr) throw ()\n+{\n+  if (ptr)\n+    free (ptr);\n+}"}, {"sha": "d5d619e803db2f1f349e91c84681a36cb0b36f6c", "filename": "libstdc++-v3/libsupc++/del_opnt.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,39 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+\n+extern \"C\" void free (void *);\n+\n+void\n+operator delete (void *ptr, const std::nothrow_t&) throw ()\n+{\n+  if (ptr)\n+    free (ptr);\n+}"}, {"sha": "b43d45a35a1588ea05db4f6dc2036a82d9c040c3", "filename": "libstdc++-v3/libsupc++/del_opv.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,36 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+\n+void\n+operator delete[] (void *ptr) throw ()\n+{\n+  ::operator delete (ptr);\n+}"}, {"sha": "e91096c4af6ac86ca613e80c9d823a3c4d1321be", "filename": "libstdc++-v3/libsupc++/del_opvnt.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,36 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+\n+void\n+operator delete[] (void *ptr, const std::nothrow_t&) throw ()\n+{\n+  ::operator delete (ptr);\n+}"}, {"sha": "886915c823bb5554ea93f59761ed7d5884193679", "filename": "libstdc++-v3/libsupc++/exception.cc", "status": "added", "additions": 403, "deletions": 0, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,403 @@\n+// Functions for Exception Support for -*- C++ -*-\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation\n+\n+// This file is part of GNU CC.\n+\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#pragma implementation \"exception\"\n+\n+#include \"typeinfo\"\n+#include \"exception\"\n+#include <stddef.h>\n+#include \"gansidecl.h\" /* Needed to support macros used in eh-common.h. */\n+#include \"eh-common.h\"\n+\n+/* Define terminate, unexpected, set_terminate, set_unexpected as\n+   well as the default terminate func and default unexpected func.  */\n+\n+extern std::terminate_handler __terminate_func __attribute__((__noreturn__));\n+using std::terminate;\n+\n+void\n+std::terminate ()\n+{\n+  __terminate_func ();\n+}\n+\n+void\n+__default_unexpected ()\n+{\n+  terminate ();\n+}\n+\n+static std::unexpected_handler __unexpected_func __attribute__((__noreturn__))\n+  = __default_unexpected;\n+\n+std::terminate_handler\n+std::set_terminate (std::terminate_handler func)\n+{\n+  std::terminate_handler old = __terminate_func;\n+\n+  __terminate_func = func;\n+  return old;\n+}\n+\n+std::unexpected_handler\n+std::set_unexpected (std::unexpected_handler func)\n+{\n+  std::unexpected_handler old = __unexpected_func;\n+\n+  __unexpected_func = func;\n+  return old;\n+}\n+\n+void\n+std::unexpected ()\n+{\n+  __unexpected_func ();\n+}\n+\n+/* The type of a function called to clean up an exception object.\n+   (These will be destructors.)  Under the old ABI, these take a\n+   second argument (the `in-charge' argument), that indicates whether\n+   or not do delete the object, and whether or not to destroy virtual\n+   bases.  Under the new ABI, there is no second argument.  */\n+#if !defined (__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+typedef void (*cleanup_fn)(void *, int);\n+/* The `2' is the value for the in-charge parameter that indicates\n+   that virtual bases should be destroyed.  */\n+#define CALL_CLEANUP(FN, THIS) FN (THIS, 2)\n+#else\n+typedef void (*cleanup_fn)(void *);\n+#define CALL_CLEANUP(FN, THIS) FN (THIS)\n+#endif\n+\n+/* C++-specific state about the current exception.\n+   This must match init_exception_processing().\n+\n+   Note that handlers and caught are not redundant; when rethrown, an\n+   exception can have multiple active handlers and still be considered\n+   uncaught.  */\n+\n+struct cp_eh_info\n+{\n+  __eh_info eh_info;\n+  void *value;\n+  void *type;\n+  cleanup_fn cleanup;\n+  bool caught;\n+  cp_eh_info *next;\n+  long handlers;\n+  void *original_value;\n+};\n+\n+/* Language-specific EH info pointer, defined in libgcc2. */\n+\n+extern \"C\" cp_eh_info **__get_eh_info (); \t// actually void **\n+\n+/* Exception allocate and free, defined in libgcc2. */\n+extern \"C\" void *__eh_alloc(size_t);\n+extern \"C\" void __eh_free(void *);\n+\n+/* Is P the type_info node for a pointer of some kind?  */\n+\n+extern bool __is_pointer (void *);\n+\n+\n+/* OLD Compiler hook to return a pointer to the info for the current exception.\n+   Used by get_eh_info ().  This fudges the actualy returned value to\n+   point to the beginning of what USE to be the cp_eh_info structure.\n+   THis is so that old code that dereferences this pointer will find\n+   things where it expects it to be.*/\n+extern \"C\" void *\n+__cp_exception_info (void)\n+{\n+  return &((*__get_eh_info ())->value);\n+}\n+\n+#define CP_EH_INFO ((cp_eh_info *) *__get_eh_info ())\n+\n+/* Old Compiler hook to return a pointer to the info for the current exception.\n+   Used by get_eh_info ().  */\n+\n+extern \"C\" cp_eh_info *\n+__cp_eh_info (void)\n+{\n+  cp_eh_info *p = CP_EH_INFO;\n+  return p;\n+}\n+\n+/* Compiler hook to return a pointer to the info for the current exception,\n+   Set the caught bit, and increment the number of handlers that are\n+   looking at this exception. This makes handlers smaller. */\n+\n+extern \"C\" cp_eh_info *\n+__start_cp_handler (void)\n+{\n+  cp_eh_info *p = CP_EH_INFO;\n+  p->caught = 1;\n+  p->handlers++;\n+  return p;\n+}\n+\n+extern \"C\" int __throw_type_match_rtti_2 (const void *, const void *,\n+\t\t\t\t\t void *, void **);\n+\n+extern \"C\" void *\n+__cplus_type_matcher (__eh_info *info_, void *match_info,\n+\t\t      exception_descriptor *exception_table)\n+{\n+  cp_eh_info *info = (cp_eh_info *)info_;\n+\n+  /* No exception table implies the old style mechanism, so don't check. */\n+  if (exception_table != NULL \n+      && exception_table->lang.language != EH_LANG_C_plus_plus)\n+    return NULL;\n+\n+  if (match_info == CATCH_ALL_TYPE)\n+    return (void *)1;\n+\n+  /* we don't worry about version info yet, there is only one version! */\n+  \n+  void *match_type = match_info;\n+  \n+#if !defined (__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+  match_type  = ((void *(*)())match_type) ();\n+#endif\n+\n+  if (__throw_type_match_rtti_2 (match_type, info->type,\n+\t\t\t\t info->original_value, &info->value))\n+    // Arbitrary non-null pointer.\n+    return (void *)1;\n+  else\n+    return NULL;\n+}\n+\n+/* Compiler hook to push a new exception onto the stack.\n+   Used by expand_throw().  */\n+\n+extern \"C\" void\n+__cp_push_exception (void *value, void *type, cleanup_fn cleanup)\n+{\n+  cp_eh_info *p = (cp_eh_info *) __eh_alloc (sizeof (cp_eh_info));\n+\n+  p->value = value;\n+  p->type = type;\n+  p->cleanup = cleanup;\n+  p->handlers = 0;\n+  p->caught = false;\n+  p->original_value = value;\n+\n+  p->eh_info.match_function = __cplus_type_matcher;\n+  p->eh_info.language = EH_LANG_C_plus_plus;\n+  p->eh_info.version = 1;\n+\n+  cp_eh_info **q = __get_eh_info ();\n+\n+  p->next = *q;\n+  *q = p;\n+}\n+\n+/* Compiler hook to pop an exception that has been finalized.  Used by\n+   push_eh_cleanup().  P is the info for the exception caught by the\n+   current catch block.  */\n+\n+extern \"C\" void\n+__cp_pop_exception (cp_eh_info *p)\n+{\n+  cp_eh_info **stack = __get_eh_info ();\n+  cp_eh_info **q = stack;\n+\n+  --p->handlers;\n+\n+  /* Do nothing if our exception is being rethrown (i.e. if the active\n+     exception is our exception and it is uncaught).  */\n+  if (p == *q && !p->caught)\n+    return;\n+\n+  /* Don't really pop if there are still active handlers for our exception;\n+     rather, push it down past any uncaught exceptions.  */\n+  if (p->handlers != 0)\n+    {\n+      if (p == *q && p->next && !p->next->caught)\n+\t{\n+\t  q = &(p->next);\n+\t  while (1)\n+\t    {\n+\t      if (*q == 0 || (*q)->caught)\n+\t\tbreak;\n+\n+\t      q = &((*q)->next);\n+\t    }\n+\t  *stack = p->next;\n+\t  p->next = *q;\n+\t  *q = p;\n+\t}\n+      return;\n+    }\n+\n+  for (; *q; q = &((*q)->next))\n+    if (*q == p)\n+      break;\n+\n+  if (! *q)\n+    terminate ();\n+\n+  *q = p->next;\n+\n+  if (p->cleanup)\n+    // value may have been adjusted.\n+    CALL_CLEANUP (p->cleanup, p->original_value);\n+\n+  if (! __is_pointer (p->type))\n+    __eh_free (p->original_value);  // value may have been adjusted.\n+\n+  __eh_free (p);\n+}\n+\n+/* We're doing a rethrow.  Find the currently handled exception, mark it\n+   uncaught, and move it to the top of the EH stack.  */\n+\n+extern \"C\" void\n+__uncatch_exception (void)\n+{\n+  cp_eh_info **stack = __get_eh_info ();\n+  cp_eh_info **q = stack;\n+  cp_eh_info *p;\n+\n+  while (1)\n+    {\n+      p = *q;\n+\n+      if (p == 0)\n+\tterminate ();\n+      if (p->caught)\n+\tbreak;\n+\n+      q = &(p->next);\n+    }\n+\n+  if (q != stack)\n+    {\n+      *q = p->next;\n+      p->next = *stack;\n+      *stack = p;\n+    }\n+\n+  p->caught = false;\n+}\n+\n+/* As per [except.unexpected]:\n+   If an exception is thrown, we check it against the spec.  If it doesn't\n+   match, we call unexpected ().  If unexpected () throws, we check that\n+   exception against the spec.  If it doesn't match, if the spec allows\n+   bad_exception we throw that; otherwise we call terminate ().\n+\n+   The compiler treats an exception spec as a try block with a generic\n+   handler that just calls this function with a list of the allowed\n+   exception types, so we have an active exception that can be rethrown.\n+\n+   This function does not return.  */   \n+\n+extern \"C\" void\n+__check_eh_spec (int n, const void **spec)\n+{\n+  cp_eh_info *p = CP_EH_INFO;\n+  void *d;\n+\n+  for (int i = 0; i < n; ++i)\n+    {\n+      if (__throw_type_match_rtti_2 (spec[i], p->type, p->value, &d))\n+\tthrow;\n+    }\n+\n+  try\n+    {\n+      std::unexpected ();\n+    }\n+  catch (...)\n+    {\n+      // __exception_info is an artificial var pushed into each catch block.\n+      if (p != __exception_info)\n+\t{\n+\t  p = __exception_info;\n+\t  for (int i = 0; i < n; ++i)\n+\t    {\n+\t      if (__throw_type_match_rtti_2 (spec[i], p->type, p->value, &d))\n+\t\tthrow;\n+\t    }\n+\t}\n+\n+      const std::type_info &bad_exc = typeid (std::bad_exception);\n+      for (int i = 0; i < n; ++i)\n+\t{\n+\t  if (__throw_type_match_rtti_2 (spec[i], &bad_exc, p->value, &d))\n+\t    throw std::bad_exception ();\n+\t}\n+\n+      terminate ();\n+    }\n+}\n+\n+/* Special case of the above for throw() specs.  */\n+\n+extern \"C\" void\n+__check_null_eh_spec (void)\n+{\n+  __check_eh_spec (0, 0);\n+}\n+\n+// Helpers for rtti. Although these don't return, we give them return types so\n+// that the type system is not broken.\n+\n+extern \"C\" void *\n+__throw_bad_cast ()\n+{\n+  throw std::bad_cast ();\n+  return 0;\n+}\n+\n+extern \"C\" std::type_info const &\n+__throw_bad_typeid ()\n+{\n+  throw std::bad_typeid ();\n+  return typeid (void);\n+}\n+\n+/* Has the current exception been caught?  */\n+\n+bool\n+std::uncaught_exception ()\n+{\n+  cp_eh_info *p = CP_EH_INFO;\n+  return p && ! p->caught;\n+}\n+\n+const char * std::exception::\n+what () const\n+{\n+  return typeid (*this).name ();\n+}"}, {"sha": "183d1b29882fa839a73e76e1cfd16a12db063bda", "filename": "libstdc++-v3/libsupc++/new_handler.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,44 @@\n+// Implementation file for the -*- C++ -*- dynamic memory management header.\n+// Copyright (C) 1996, 1997, 1998, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#pragma implementation \"new\"\n+#include \"new\"\n+\n+const std::nothrow_t std::nothrow = { };\n+\n+using std::new_handler;\n+new_handler __new_handler;\n+\n+new_handler\n+std::set_new_handler (new_handler handler)\n+{\n+  new_handler prev_handler = __new_handler;\n+  __new_handler = handler;\n+  return prev_handler;\n+}"}, {"sha": "92577e2f6c8c8f9f4d4e6125ddcfadd977655db4", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,56 @@\n+// Support routines for the -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+using std::new_handler;\n+using std::bad_alloc;\n+\n+extern \"C\" void *malloc (size_t);\n+extern new_handler __new_handler;\n+\n+void *\n+operator new (size_t sz) throw (std::bad_alloc)\n+{\n+  void *p;\n+\n+  /* malloc (0) is unpredictable; avoid it.  */\n+  if (sz == 0)\n+    sz = 1;\n+  p = (void *) malloc (sz);\n+  while (p == 0)\n+    {\n+      new_handler handler = __new_handler;\n+      if (! handler)\n+\tthrow bad_alloc ();\n+      handler ();\n+      p = (void *) malloc (sz);\n+    }\n+\n+  return p;\n+}"}, {"sha": "27a9283f165ff2f1fbc8da277655d06d21844e44", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,64 @@\n+// Support routines for the -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+using std::new_handler;\n+using std::bad_alloc;\n+\n+extern \"C\" void *malloc (size_t);\n+extern new_handler __new_handler;\n+\n+void *\n+operator new (size_t sz, const std::nothrow_t&) throw()\n+{\n+  void *p;\n+\n+  /* malloc (0) is unpredictable; avoid it.  */\n+  if (sz == 0)\n+    sz = 1;\n+  p = (void *) malloc (sz);\n+  while (p == 0)\n+    {\n+      new_handler handler = __new_handler;\n+      if (! handler)\n+\treturn 0;\n+      try\n+\t{\n+\t  handler ();\n+\t}\n+      catch (bad_alloc &)\n+\t{\n+\t  return 0;\n+\t}\n+\n+      p = (void *) malloc (sz);\n+    }\n+\n+  return p;\n+}"}, {"sha": "1e14ca81cf6ae004a896964c095d9f2453ba2397", "filename": "libstdc++-v3/libsupc++/new_opv.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,36 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+\n+void *\n+operator new[] (size_t sz) throw (std::bad_alloc)\n+{\n+  return ::operator new(sz);\n+}"}, {"sha": "dde0a7c3cf99d048348fed62ab4481eecaa24fe4", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,36 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"new\"\n+\n+void *\n+operator new[] (size_t sz, const std::nothrow_t& nothrow) throw()\n+{\n+  return ::operator new(sz, nothrow);\n+}"}, {"sha": "c381ff111013a5735f38bb547d70496317f0f12a", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "added", "additions": 1210, "deletions": 0, "changes": 1210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,1210 @@\n+// Methods for type_info for -*- C++ -*- Run Time Type Identification.\n+// Copyright (C) 1994, 1996, 1998, 1999, 2000 Free Software Foundation\n+\n+// This file is part of GNU CC.\n+\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#pragma implementation \"typeinfo\"\n+\n+#include <stddef.h>\n+#include \"tinfo.h\"\n+#include \"new\"\t\t\t// for placement new\n+\n+// This file contains the minimal working set necessary to link with code\n+// that uses virtual functions and -frtti but does not actually use RTTI\n+// functionality.\n+\n+std::type_info::\n+~type_info ()\n+{ }\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+// original (old) abi\n+\n+namespace\n+{\n+// ADDR is a pointer to an object.  Convert it to a pointer to a base,\n+// using OFFSET.\n+inline void*\n+convert_to_base (void *addr, bool is_virtual, myint32 offset)\n+{\n+  if (!addr)\n+    return NULL;\n+\n+  if (!is_virtual)\n+    return (char *) addr + offset;\n+\n+  // Under the old ABI, the offset gives us the address of a pointer\n+  // to the virtual base.\n+  return *((void **) ((char *) addr + offset));\n+}\n+\n+}\n+\n+// We can't rely on common symbols being shared between shared objects.\n+bool std::type_info::\n+operator== (const std::type_info& arg) const\n+{\n+  return (&arg == this) || (__builtin_strcmp (name (), arg.name ()) == 0);\n+}\n+\n+extern \"C\" void\n+__rtti_class (void *addr, const char *name,\n+\t      const __class_type_info::base_info *bl, size_t bn)\n+{ new (addr) __class_type_info (name, bl, bn); }\n+\n+extern \"C\" void\n+__rtti_si (void *addr, const char *n, const std::type_info *ti)\n+{\n+  new (addr) __si_type_info\n+    (n, static_cast <const __user_type_info &> (*ti));\n+}\n+\n+extern \"C\" void\n+__rtti_user (void *addr, const char *name)\n+{ new (addr) __user_type_info (name); }\n+\n+// Upcast for catch checking. OBJPTR points to the thrown object and might be\n+// NULL. Return 0 on failure, non-zero on success. Set *ADJPTR to adjusted\n+// object pointer.\n+int __user_type_info::\n+upcast (const type_info &target, void *objptr,\n+        void **adjptr) const\n+{\n+  upcast_result result;\n+  \n+  if (do_upcast (contained_public, target, objptr, result))\n+    return 0;\n+  *adjptr = result.target_obj;\n+  return contained_public_p (result.whole2target);\n+}\n+\n+// Down or cross cast for dynamic_cast. OBJPTR points to the most derrived\n+// object, SUBPTR points to the static base object. Both must not be NULL.\n+// TARGET specifies the desired target type, SUBTYPE specifies the static\n+// type. Both must be defined. Returns adjusted object pointer on success,\n+// NULL on failure. [expr.dynamic.cast]/8 says 'unambiguous public base'. This\n+// itself is an ambiguous statement. We choose it to mean the base must be\n+// separately unambiguous and public, rather than unambiguous considering only\n+// public bases.\n+void *__user_type_info::\n+dyncast (int boff,\n+         const type_info &target, void *objptr,\n+         const type_info &subtype, void *subptr) const\n+{\n+  dyncast_result result;\n+  \n+  do_dyncast (boff, contained_public,\n+              target, objptr, subtype, subptr, result);\n+  if (!result.target_obj)\n+    return NULL;\n+  if (contained_public_p (result.target2sub))\n+    return result.target_obj;\n+  if (contained_public_p (sub_kind (result.whole2sub & result.whole2target)))\n+    // Found a valid cross cast\n+    return result.target_obj;\n+  if (contained_nonvirtual_p (result.whole2sub))\n+    // Found an invalid cross cast, which cannot also be a down cast\n+    return NULL;\n+  if (result.target2sub == unknown)\n+    result.target2sub = static_cast <const __user_type_info &> (target)\n+                        .find_public_subobj (boff, subtype,\n+                                             result.target_obj, subptr);\n+  if (contained_public_p (result.target2sub))\n+    // Found a valid down cast\n+    return result.target_obj;\n+  // Must be an invalid down cast, or the cross cast wasn't bettered\n+  return NULL;\n+}\n+\n+// Catch cast helper. ACCESS_PATH is the access from the complete thrown\n+// object to this base. TARGET is the desired type we want to catch. OBJPTR\n+// points to this base within the throw object, it might be NULL. Fill in\n+// RESULT with what we find. Return true, should we determine catch must fail.\n+bool __user_type_info::\n+do_upcast (sub_kind access_path,\n+           const type_info &target, void *objptr,\n+           upcast_result &__restrict result) const\n+{\n+  if (*this == target)\n+    {\n+      result.target_obj = objptr;\n+      result.base_type = nonvirtual_base_type;\n+      result.whole2target = access_path;\n+      return contained_nonpublic_p (access_path);\n+    }\n+  return false;\n+}\n+\n+// dynamic cast helper. ACCESS_PATH gives the access from the most derived\n+// object to this base. TARGET indicates the desired type we want. OBJPTR\n+// points to this base within the object. SUBTYPE indicates the static type\n+// started from and SUBPTR points to that base within the most derived object.\n+// Fill in RESULT with what we find. Return true if we have located an\n+// ambiguous match.\n+bool __user_type_info::\n+do_dyncast (int, sub_kind access_path,\n+            const type_info &target, void *objptr,\n+            const type_info &subtype, void *subptr,\n+            dyncast_result &__restrict result) const\n+{\n+  if (objptr == subptr && *this == subtype)\n+    {\n+      // The subobject we started from. Indicate how we are accessible from\n+      // the most derived object.\n+      result.whole2sub = access_path;\n+      return false;\n+    }\n+  if (*this == target)\n+    {\n+      result.target_obj = objptr;\n+      result.whole2target = access_path;\n+      result.target2sub = not_contained;\n+      return false;\n+    }\n+  return false;\n+}\n+\n+// find_public_subobj helper. Return contained_public if we are the desired\n+// subtype. OBJPTR points to this base type, SUBPTR points to the desired base\n+// object.\n+__user_type_info::sub_kind __user_type_info::\n+do_find_public_subobj (int, const type_info &, void *objptr, void *subptr) const\n+{\n+  if (subptr == objptr)\n+    // Must be our type, as the pointers match.\n+    return contained_public;\n+  return not_contained;\n+}\n+\n+// catch helper for single public inheritance types. See\n+// __user_type_info::do_upcast for semantics.\n+bool __si_type_info::\n+do_upcast (sub_kind access_path,\n+           const type_info &target, void *objptr,\n+           upcast_result &__restrict result) const\n+{\n+  if (*this == target)\n+    {\n+      result.target_obj = objptr;\n+      result.base_type = nonvirtual_base_type;\n+      result.whole2target = access_path;\n+      return contained_nonpublic_p (access_path);\n+    }\n+  return base.do_upcast (access_path, target, objptr, result);\n+}\n+\n+// dynamic cast helper for single public inheritance types. See\n+// __user_type_info::do_dyncast for semantics. BOFF indicates how SUBTYPE\n+// types are inherited by TARGET types.\n+bool __si_type_info::\n+do_dyncast (int boff, sub_kind access_path,\n+            const type_info &target, void *objptr,\n+            const type_info &subtype, void *subptr,\n+            dyncast_result &__restrict result) const\n+{\n+  if (objptr == subptr && *this == subtype)\n+    {\n+      // The subobject we started from. Indicate how we are accessible from\n+      // the most derived object.\n+      result.whole2sub = access_path;\n+      return false;\n+    }\n+  if (*this == target)\n+    {\n+      result.target_obj = objptr;\n+      result.whole2target = access_path;\n+      if (boff >= 0)\n+        result.target2sub = ((char *)subptr - (char *)objptr) == boff\n+              ? contained_public : not_contained;\n+      else if (boff == -2)\n+        result.target2sub = not_contained;\n+      return false;\n+    }\n+  return base.do_dyncast (boff, access_path,\n+                          target, objptr, subtype, subptr, result);\n+}\n+\n+// find_public_subobj helper. See __user_type_info::do_find_public_subobj or\n+// semantics. BOFF indicates how SUBTYPE types are inherited by the original\n+// target object.\n+__user_type_info::sub_kind __si_type_info::\n+do_find_public_subobj (int boff, const type_info &subtype, void *objptr, void *subptr) const\n+{\n+  if (subptr == objptr && subtype == *this)\n+    return contained_public;\n+  return base.do_find_public_subobj (boff, subtype, objptr, subptr);\n+}\n+\n+// catch helper for multiple or non-public inheritance types. See\n+// __user_type_info::do_upcast for semantics.\n+bool __class_type_info::\n+do_upcast (sub_kind access_path,\n+           const type_info &target, void *objptr,\n+           upcast_result &__restrict result) const\n+{\n+  if (*this == target)\n+    {\n+      result.target_obj = objptr;\n+      result.base_type = nonvirtual_base_type;\n+      result.whole2target = access_path;\n+      return contained_nonpublic_p (access_path);\n+    }\n+  \n+  for (size_t i = n_bases; i--;)\n+    {\n+      upcast_result result2;\n+      void *p = objptr;\n+      sub_kind sub_access = access_path;\n+      p = convert_to_base (p, \n+\t\t\t   base_list[i].is_virtual,\n+\t\t\t   base_list[i].offset);\n+      if (base_list[i].is_virtual)\n+\tsub_access = sub_kind (sub_access | contained_virtual_mask);\n+      if (base_list[i].access != PUBLIC)\n+        sub_access = sub_kind (sub_access & ~contained_public_mask);\n+      if (base_list[i].base->do_upcast (sub_access, target, p, result2)\n+          && !contained_virtual_p (result2.whole2target))\n+        return true; // must fail\n+      if (result2.base_type)\n+        {\n+          if (result2.base_type == nonvirtual_base_type\n+              && base_list[i].is_virtual)\n+            result2.base_type = base_list[i].base;\n+          if (!result.base_type)\n+            result = result2;\n+          else if (result.target_obj != result2.target_obj)\n+            {\n+              // Found an ambiguity.\n+\t      result.target_obj = NULL;\n+\t      result.whole2target = contained_ambig;\n+\t      return true;\n+            }\n+          else if (result.target_obj)\n+            {\n+              // Ok, found real object via a virtual path.\n+              result.whole2target\n+                  = sub_kind (result.whole2target | result2.whole2target);\n+            }\n+          else\n+            {\n+              // Dealing with a null pointer, need to check vbase\n+              // containing each of the two choices.\n+              if (result2.base_type == nonvirtual_base_type\n+                  || result.base_type == nonvirtual_base_type\n+                  || !(*result2.base_type == *result.base_type))\n+                {\n+                  // Already ambiguous, not virtual or via different virtuals.\n+                  // Cannot match.\n+                  result.whole2target = contained_ambig;\n+                  return true;\n+                }\n+              result.whole2target\n+                  = sub_kind (result.whole2target | result2.whole2target);\n+            }\n+        }\n+    }\n+  return false;\n+}\n+\n+// dynamic cast helper for non-public or multiple inheritance types. See\n+// __user_type_info::do_dyncast for overall semantics.\n+// This is a big hairy function. Although the run-time behaviour of\n+// dynamic_cast is simple to describe, it gives rise to some non-obvious\n+// behaviour. We also desire to determine as early as possible any definite\n+// answer we can get. Because it is unknown what the run-time ratio of\n+// succeeding to failing dynamic casts is, we do not know in which direction\n+// to bias any optimizations. To that end we make no particular effort towards\n+// early fail answers or early success answers. Instead we try to minimize\n+// work by filling in things lazily (when we know we need the information),\n+// and opportunisticly take early success or failure results.\n+bool __class_type_info::\n+do_dyncast (int boff, sub_kind access_path,\n+            const type_info &target, void *objptr,\n+            const type_info &subtype, void *subptr,\n+            dyncast_result &__restrict result) const\n+{\n+  if (objptr == subptr && *this == subtype)\n+    {\n+      // The subobject we started from. Indicate how we are accessible from\n+      // the most derived object.\n+      result.whole2sub = access_path;\n+      return false;\n+    }\n+  if (*this == target)\n+    {\n+      result.target_obj = objptr;\n+      result.whole2target = access_path;\n+      if (boff >= 0)\n+        result.target2sub = ((char *)subptr - (char *)objptr) == boff\n+              ? contained_public : not_contained;\n+      else if (boff == -2)\n+        result.target2sub = not_contained;\n+      return false;\n+    }\n+  bool result_ambig = false;\n+  for (size_t i = n_bases; i--;)\n+    {\n+      dyncast_result result2;\n+      void *p;\n+      sub_kind sub_access = access_path;\n+      p = convert_to_base (objptr, \n+\t\t\t   base_list[i].is_virtual,\n+\t\t\t   base_list[i].offset);\n+      if (base_list[i].is_virtual)\n+\tsub_access = sub_kind (sub_access | contained_virtual_mask);\n+      if (base_list[i].access != PUBLIC)\n+        sub_access = sub_kind (sub_access & ~contained_public_mask);\n+      \n+      bool result2_ambig\n+          = base_list[i].base->do_dyncast (boff, sub_access,\n+                                           target, p, subtype, subptr, result2);\n+      result.whole2sub = sub_kind (result.whole2sub | result2.whole2sub);\n+      if (result2.target2sub == contained_public\n+          || result2.target2sub == contained_ambig)\n+        {\n+          result.target_obj = result2.target_obj;\n+          result.whole2target = result2.whole2target;\n+          result.target2sub = result2.target2sub;\n+          // Found a downcast which can't be bettered or an ambiguous downcast\n+          // which can't be disambiguated\n+          return result2_ambig;\n+        }\n+      \n+      if (!result_ambig && !result.target_obj)\n+        {\n+          // Not found anything yet.\n+          result.target_obj = result2.target_obj;\n+          result.whole2target = result2.whole2target;\n+          result_ambig = result2_ambig;\n+        }\n+      else if (result.target_obj && result.target_obj == result2.target_obj)\n+        {\n+          // Found at same address, must be via virtual.  Pick the most\n+          // accessible path.\n+          result.whole2target =\n+              sub_kind (result.whole2target | result2.whole2target);\n+        }\n+      else if ((result.target_obj && result2.target_obj)\n+               || (result_ambig && result2.target_obj)\n+               || (result2_ambig && result.target_obj))\n+        {\n+          // Found two different TARGET bases, or a valid one and a set of\n+          // ambiguous ones, must disambiguate. See whether SUBOBJ is\n+          // contained publicly within one of the non-ambiguous choices.\n+          // If it is in only one, then that's the choice. If it is in\n+          // both, then we're ambiguous and fail. If it is in neither,\n+          // we're ambiguous, but don't yet fail as we might later find a\n+          // third base which does contain SUBPTR.\n+        \n+          sub_kind new_sub_kind = result2.target2sub;\n+          sub_kind old_sub_kind = result.target2sub;\n+          \n+          if (contained_nonvirtual_p (result.whole2sub))\n+            {\n+              // We already found SUBOBJ as a non-virtual base of most\n+              // derived. Therefore if it is in either choice, it can only be\n+              // in one of them, and we will already know.\n+              if (old_sub_kind == unknown)\n+                old_sub_kind = not_contained;\n+              if (new_sub_kind == unknown)\n+                new_sub_kind = not_contained;\n+            }\n+          else\n+            {\n+              const __user_type_info &t =\n+                  static_cast <const __user_type_info &> (target);\n+              \n+              if (old_sub_kind >= not_contained)\n+                ;// already calculated\n+              else if (contained_nonvirtual_p (new_sub_kind))\n+                // Already found non-virtually inside the other choice,\n+                // cannot be in this.\n+                old_sub_kind = not_contained;\n+              else\n+                old_sub_kind = t.find_public_subobj (boff, subtype,\n+                                                     result.target_obj, subptr);\n+          \n+              if (new_sub_kind >= not_contained)\n+                ;// already calculated\n+              else if (contained_nonvirtual_p (old_sub_kind))\n+                // Already found non-virtually inside the other choice,\n+                // cannot be in this.\n+                new_sub_kind = not_contained;\n+              else\n+                new_sub_kind = t.find_public_subobj (boff, subtype,\n+                                                     result2.target_obj, subptr);\n+            }\n+          \n+          // Neither sub_kind can be contained_ambig -- we bail out early\n+          // when we find those.\n+          if (contained_p (sub_kind (new_sub_kind ^ old_sub_kind)))\n+            {\n+              // Only on one choice, not ambiguous.\n+              if (contained_p (new_sub_kind))\n+                {\n+                  // Only in new.\n+                  result.target_obj = result2.target_obj;\n+                  result.whole2target = result2.whole2target;\n+                  result_ambig = false;\n+                  old_sub_kind = new_sub_kind;\n+                }\n+              result.target2sub = old_sub_kind;\n+              if (result.target2sub == contained_public)\n+                return false; // Can't be an ambiguating downcast for later discovery.\n+            }\n+          else if (contained_p (sub_kind (new_sub_kind & old_sub_kind)))\n+            {\n+              // In both.\n+              result.target_obj = NULL;\n+              result.target2sub = contained_ambig;\n+              return true;  // Fail.\n+            }\n+          else\n+            {\n+              // In neither publicly, ambiguous for the moment, but keep\n+              // looking. It is possible that it was private in one or\n+              // both and therefore we should fail, but that's just tough.\n+              result.target_obj = NULL;\n+              result.target2sub = not_contained;\n+              result_ambig = true;\n+            }\n+        }\n+      \n+      if (result.whole2sub == contained_private)\n+        // We found SUBOBJ as a private non-virtual base, therefore all\n+        // cross casts will fail. We have already found a down cast, if\n+        // there is one.\n+        return result_ambig;\n+    }\n+\n+  return result_ambig;\n+}\n+\n+// find_public_subobj helper for non-public or multiple inheritance types. See\n+// __user_type_info::do_find_public_subobj for semantics. We make use of BOFF\n+// to prune the base class walk.\n+__user_type_info::sub_kind __class_type_info::\n+do_find_public_subobj (int boff, const type_info &subtype, void *objptr, void *subptr) const\n+{\n+  if (objptr == subptr && subtype == *this)\n+    return contained_public;\n+  \n+  for (size_t i = n_bases; i--;)\n+    {\n+      if (base_list[i].access != PUBLIC)\n+        continue; // Not public, can't be here.\n+      void *p;\n+\n+      if (base_list[i].is_virtual && boff == -3)\n+\t// Not a virtual base, so can't be here.\n+\tcontinue;\n+      \n+      p = convert_to_base (objptr, \n+\t\t\t   base_list[i].is_virtual,\n+\t\t\t   base_list[i].offset);\n+\n+      sub_kind base_kind = base_list[i].base->do_find_public_subobj\n+                              (boff, subtype, p, subptr);\n+      if (contained_p (base_kind))\n+        {\n+          if (base_list[i].is_virtual)\n+            base_kind = sub_kind (base_kind | contained_virtual_mask);\n+          return base_kind;\n+        }\n+    }\n+  \n+  return not_contained;\n+}\n+#else\n+// new abi\n+\n+namespace std {\n+\n+// return true if this is a type_info for a pointer type\n+bool type_info::\n+__is_pointer_p () const\n+{\n+  return false;\n+}\n+\n+// return true if this is a type_info for a function type\n+bool type_info::\n+__is_function_p () const\n+{\n+  return false;\n+}\n+\n+// try and catch a thrown object.\n+bool type_info::\n+__do_catch (const type_info *thr_type, void **, unsigned) const\n+{\n+  return *this == *thr_type;\n+}\n+\n+// upcast from this type to the target. __class_type_info will override\n+bool type_info::\n+__do_upcast (const abi::__class_type_info *, void **) const\n+{\n+  return false;\n+}\n+\n+};\n+\n+namespace {\n+\n+using namespace std;\n+using namespace abi;\n+\n+// initial part of a vtable, this structure is used with offsetof, so we don't\n+// have to keep alignments consistent manually.\n+struct vtable_prefix {\n+  ptrdiff_t whole_object;           // offset to most derived object\n+  const __class_type_info *whole_type;  // pointer to most derived type_info\n+  const void *origin;               // what a class's vptr points to\n+};\n+\n+template <typename T>\n+inline const T *\n+adjust_pointer (const void *base, ptrdiff_t offset)\n+{\n+  return reinterpret_cast <const T *>\n+    (reinterpret_cast <const char *> (base) + offset);\n+}\n+\n+// ADDR is a pointer to an object.  Convert it to a pointer to a base,\n+// using OFFSET. IS_VIRTUAL is true, if we are getting a virtual base.\n+inline void const *\n+convert_to_base (void const *addr, bool is_virtual, ptrdiff_t offset)\n+{\n+  if (is_virtual)\n+    {\n+      const void *vtable = *static_cast <const void *const *> (addr);\n+      \n+      offset = *adjust_pointer<ptrdiff_t> (vtable, offset);\n+    }\n+\n+  return adjust_pointer<void> (addr, offset);\n+}\n+\n+// some predicate functions for __class_type_info::__sub_kind\n+inline bool contained_p (__class_type_info::__sub_kind access_path)\n+{\n+  return access_path >= __class_type_info::__contained_mask;\n+}\n+inline bool public_p (__class_type_info::__sub_kind access_path)\n+{\n+  return access_path & __class_type_info::__contained_public_mask;\n+}\n+inline bool virtual_p (__class_type_info::__sub_kind access_path)\n+{\n+  return (access_path & __class_type_info::__contained_virtual_mask);\n+}\n+inline bool contained_public_p (__class_type_info::__sub_kind access_path)\n+{\n+  return ((access_path & __class_type_info::__contained_public)\n+          == __class_type_info::__contained_public);\n+}\n+inline bool contained_nonpublic_p (__class_type_info::__sub_kind access_path)\n+{\n+  return ((access_path & __class_type_info::__contained_public)\n+          == __class_type_info::__contained_mask);\n+}\n+inline bool contained_nonvirtual_p (__class_type_info::__sub_kind access_path)\n+{\n+  return ((access_path & (__class_type_info::__contained_mask\n+                          | __class_type_info::__contained_virtual_mask))\n+          == __class_type_info::__contained_mask);\n+}\n+\n+static const __class_type_info *const nonvirtual_base_type =\n+    static_cast <const __class_type_info *> (0) + 1;\n+\n+}; // namespace\n+\n+namespace __cxxabiv1\n+{\n+\n+__class_type_info::\n+~__class_type_info ()\n+{}\n+\n+__si_class_type_info::\n+~__si_class_type_info ()\n+{}\n+\n+__vmi_class_type_info::\n+~__vmi_class_type_info ()\n+{}\n+\n+// __upcast_result is used to hold information during traversal of a class\n+// heirarchy when catch matching.\n+struct __class_type_info::__upcast_result\n+{\n+  const void *dst_ptr;        // pointer to caught object\n+  __sub_kind part2dst;        // path from current base to target\n+  int src_details;            // hints about the source type heirarchy\n+  const __class_type_info *base_type; // where we found the target,\n+                              // if in vbase the __class_type_info of vbase\n+                              // if a non-virtual base then 1\n+                              // else NULL\n+  public:\n+  __upcast_result (int d)\n+    :dst_ptr (NULL), part2dst (__unknown), src_details (d), base_type (NULL)\n+    {}\n+};\n+\n+// __dyncast_result is used to hold information during traversal of a class\n+// heirarchy when dynamic casting.\n+struct __class_type_info::__dyncast_result\n+{\n+  const void *dst_ptr;        // pointer to target object or NULL\n+  __sub_kind whole2dst;       // path from most derived object to target\n+  __sub_kind whole2src;       // path from most derived object to sub object\n+  __sub_kind dst2src;         // path from target to sub object\n+  int whole_details;          // details of the whole class heirarchy\n+  \n+  public:\n+  __dyncast_result (int details_ = __vmi_class_type_info::__flags_unknown_mask)\n+    :dst_ptr (NULL), whole2dst (__unknown),\n+     whole2src (__unknown), dst2src (__unknown),\n+     whole_details (details_)\n+    {}\n+};\n+\n+bool __class_type_info::\n+__do_catch (const type_info *thr_type,\n+            void **thr_obj,\n+            unsigned outer) const\n+{\n+  if (*this == *thr_type)\n+    return true;\n+  if (outer >= 4)\n+    // Neither `A' nor `A *'.\n+    return false;\n+  return thr_type->__do_upcast (this, thr_obj);\n+}\n+\n+bool __class_type_info::\n+__do_upcast (const __class_type_info *dst_type,\n+             void **obj_ptr) const\n+{\n+  __upcast_result result (__vmi_class_type_info::__flags_unknown_mask);\n+  \n+  __do_upcast (dst_type, *obj_ptr, result);\n+  if (!contained_public_p (result.part2dst))\n+    return false;\n+  *obj_ptr = const_cast <void *> (result.dst_ptr);\n+  return true;\n+}\n+\n+inline __class_type_info::__sub_kind __class_type_info::\n+__find_public_src (ptrdiff_t src2dst,\n+                   const void *obj_ptr,\n+                   const __class_type_info *src_type,\n+                   const void *src_ptr) const\n+{\n+  if (src2dst >= 0)\n+    return adjust_pointer <void> (obj_ptr, src2dst) == src_ptr\n+            ? __contained_public : __not_contained;\n+  if (src2dst == -2)\n+    return __not_contained;\n+  return __do_find_public_src (src2dst, obj_ptr, src_type, src_ptr);\n+}\n+\n+__class_type_info::__sub_kind __class_type_info::\n+__do_find_public_src (ptrdiff_t,\n+                      const void *obj_ptr,\n+                      const __class_type_info *,\n+                      const void *src_ptr) const\n+{\n+  if (src_ptr == obj_ptr)\n+    // Must be our type, as the pointers match.\n+    return __contained_public;\n+  return __not_contained;\n+}\n+\n+__class_type_info::__sub_kind __si_class_type_info::\n+__do_find_public_src (ptrdiff_t src2dst,\n+                      const void *obj_ptr,\n+                      const __class_type_info *src_type,\n+                      const void *src_ptr) const\n+{\n+  if (src_ptr == obj_ptr && *this == *src_type)\n+    return __contained_public;\n+  return __base_type->__do_find_public_src (src2dst, obj_ptr, src_type, src_ptr);\n+}\n+\n+__class_type_info::__sub_kind __vmi_class_type_info::\n+__do_find_public_src (ptrdiff_t src2dst,\n+                      const void *obj_ptr,\n+                      const __class_type_info *src_type,\n+                      const void *src_ptr) const\n+{\n+  if (obj_ptr == src_ptr && *this == *src_type)\n+    return __contained_public;\n+  \n+  for (size_t i = __base_count; i--;)\n+    {\n+      if (!__base_info[i].__is_public_p ())\n+        continue; // Not public, can't be here.\n+      \n+      const void *base = obj_ptr;\n+      ptrdiff_t offset = __base_info[i].__offset ();\n+      bool is_virtual = __base_info[i].__is_virtual_p ();\n+      \n+      if (is_virtual)\n+        {\n+          if (src2dst == -3)\n+            continue; // Not a virtual base, so can't be here.\n+        }\n+      base = convert_to_base (base, is_virtual, offset);\n+      \n+      __sub_kind base_kind = __base_info[i].__base->__do_find_public_src\n+                              (src2dst, base, src_type, src_ptr);\n+      if (contained_p (base_kind))\n+        {\n+          if (is_virtual)\n+            base_kind = __sub_kind (base_kind | __contained_virtual_mask);\n+          return base_kind;\n+        }\n+    }\n+  \n+  return __not_contained;\n+}\n+\n+bool __class_type_info::\n+__do_dyncast (ptrdiff_t,\n+              __sub_kind access_path,\n+              const __class_type_info *dst_type,\n+              const void *obj_ptr,\n+              const __class_type_info *src_type,\n+              const void *src_ptr,\n+              __dyncast_result &__restrict result) const\n+{\n+  if (obj_ptr == src_ptr && *this == *src_type)\n+    {\n+      // The src object we started from. Indicate how we are accessible from\n+      // the most derived object.\n+      result.whole2src = access_path;\n+      return false;\n+    }\n+  if (*this == *dst_type)\n+    {\n+      result.dst_ptr = obj_ptr;\n+      result.whole2dst = access_path;\n+      result.dst2src = __not_contained;\n+      return false;\n+    }\n+  return false;\n+}\n+\n+bool __si_class_type_info::\n+__do_dyncast (ptrdiff_t src2dst,\n+              __sub_kind access_path,\n+              const __class_type_info *dst_type,\n+              const void *obj_ptr,\n+              const __class_type_info *src_type,\n+              const void *src_ptr,\n+              __dyncast_result &__restrict result) const\n+{\n+  if (*this == *dst_type)\n+    {\n+      result.dst_ptr = obj_ptr;\n+      result.whole2dst = access_path;\n+      if (src2dst >= 0)\n+        result.dst2src = adjust_pointer <void> (obj_ptr, src2dst) == src_ptr\n+              ? __contained_public : __not_contained;\n+      else if (src2dst == -2)\n+        result.dst2src = __not_contained;\n+      return false;\n+    }\n+  if (obj_ptr == src_ptr && *this == *src_type)\n+    {\n+      // The src object we started from. Indicate how we are accessible from\n+      // the most derived object.\n+      result.whole2src = access_path;\n+      return false;\n+    }\n+  return __base_type->__do_dyncast (src2dst, access_path, dst_type, obj_ptr,\n+                             src_type, src_ptr, result);\n+}\n+\n+// This is a big hairy function. Although the run-time behaviour of\n+// dynamic_cast is simple to describe, it gives rise to some non-obvious\n+// behaviour. We also desire to determine as early as possible any definite\n+// answer we can get. Because it is unknown what the run-time ratio of\n+// succeeding to failing dynamic casts is, we do not know in which direction\n+// to bias any optimizations. To that end we make no particular effort towards\n+// early fail answers or early success answers. Instead we try to minimize\n+// work by filling in things lazily (when we know we need the information),\n+// and opportunisticly take early success or failure results.\n+bool __vmi_class_type_info::\n+__do_dyncast (ptrdiff_t src2dst,\n+              __sub_kind access_path,\n+              const __class_type_info *dst_type,\n+              const void *obj_ptr,\n+              const __class_type_info *src_type,\n+              const void *src_ptr,\n+              __dyncast_result &__restrict result) const\n+{\n+  if (result.whole_details & __flags_unknown_mask)\n+    result.whole_details = __flags;\n+  \n+  if (obj_ptr == src_ptr && *this == *src_type)\n+    {\n+      // The src object we started from. Indicate how we are accessible from\n+      // the most derived object.\n+      result.whole2src = access_path;\n+      return false;\n+    }\n+  if (*this == *dst_type)\n+    {\n+      result.dst_ptr = obj_ptr;\n+      result.whole2dst = access_path;\n+      if (src2dst >= 0)\n+        result.dst2src = adjust_pointer <void> (obj_ptr, src2dst) == src_ptr\n+              ? __contained_public : __not_contained;\n+      else if (src2dst == -2)\n+        result.dst2src = __not_contained;\n+      return false;\n+    }\n+\n+  bool result_ambig = false;\n+  for (size_t i = __base_count; i--;)\n+    {\n+      __dyncast_result result2 (result.whole_details);\n+      void const *base = obj_ptr;\n+      __sub_kind base_access = access_path;\n+      ptrdiff_t offset = __base_info[i].__offset ();\n+      bool is_virtual = __base_info[i].__is_virtual_p ();\n+      \n+      if (is_virtual)\n+        base_access = __sub_kind (base_access | __contained_virtual_mask);\n+      base = convert_to_base (base, is_virtual, offset);\n+\n+      if (!__base_info[i].__is_public_p ())\n+        {\n+          if (src2dst == -2 &&\n+              !(result.whole_details\n+                & (__non_diamond_repeat_mask | __diamond_shaped_mask)))\n+            // The hierarchy has no duplicate bases (which might ambiguate\n+            // things) and where we started is not a public base of what we\n+            // want (so it cannot be a downcast). There is nothing of interest\n+            // hiding in a non-public base.\n+            continue;\n+          base_access = __sub_kind (base_access & ~__contained_public_mask);\n+        }\n+      \n+      bool result2_ambig\n+          = __base_info[i].__base->__do_dyncast (src2dst, base_access,\n+                                             dst_type, base,\n+                                             src_type, src_ptr, result2);\n+      result.whole2src = __sub_kind (result.whole2src | result2.whole2src);\n+      if (result2.dst2src == __contained_public\n+          || result2.dst2src == __contained_ambig)\n+        {\n+          result.dst_ptr = result2.dst_ptr;\n+          result.whole2dst = result2.whole2dst;\n+          result.dst2src = result2.dst2src;\n+          // Found a downcast which can't be bettered or an ambiguous downcast\n+          // which can't be disambiguated\n+          return result2_ambig;\n+        }\n+      \n+      if (!result_ambig && !result.dst_ptr)\n+        {\n+          // Not found anything yet.\n+          result.dst_ptr = result2.dst_ptr;\n+          result.whole2dst = result2.whole2dst;\n+          result_ambig = result2_ambig;\n+          if (result.dst_ptr && result.whole2src != __unknown\n+              && !(__flags & __non_diamond_repeat_mask))\n+            // Found dst and src and we don't have repeated bases.\n+            return result_ambig;\n+        }\n+      else if (result.dst_ptr && result.dst_ptr == result2.dst_ptr)\n+        {\n+          // Found at same address, must be via virtual.  Pick the most\n+          // accessible path.\n+          result.whole2dst =\n+              __sub_kind (result.whole2dst | result2.whole2dst);\n+        }\n+      else if ((result.dst_ptr != 0 | result_ambig)\n+               && (result2.dst_ptr != 0 | result2_ambig))\n+        {\n+          // Found two different DST_TYPE bases, or a valid one and a set of\n+          // ambiguous ones, must disambiguate. See whether SRC_PTR is\n+          // contained publicly within one of the non-ambiguous choices. If it\n+          // is in only one, then that's the choice. If it is in both, then\n+          // we're ambiguous and fail. If it is in neither, we're ambiguous,\n+          // but don't yet fail as we might later find a third base which does\n+          // contain SRC_PTR.\n+        \n+          __sub_kind new_sub_kind = result2.dst2src;\n+          __sub_kind old_sub_kind = result.dst2src;\n+          \n+          if (contained_p (result.whole2src)\n+              && (!virtual_p (result.whole2src)\n+                  || !(result.whole_details & __diamond_shaped_mask)))\n+            {\n+              // We already found SRC_PTR as a base of most derived, and\n+              // either it was non-virtual, or the whole heirarchy is\n+              // not-diamond shaped. Therefore if it is in either choice, it\n+              // can only be in one of them, and we will already know.\n+              if (old_sub_kind == __unknown)\n+                old_sub_kind = __not_contained;\n+              if (new_sub_kind == __unknown)\n+                new_sub_kind = __not_contained;\n+            }\n+          else\n+            {\n+              if (old_sub_kind >= __not_contained)\n+                ;// already calculated\n+              else if (contained_p (new_sub_kind)\n+                       && (!virtual_p (new_sub_kind)\n+                           || !(__flags & __diamond_shaped_mask)))\n+                // Already found inside the other choice, and it was\n+                // non-virtual or we are not diamond shaped.\n+                old_sub_kind = __not_contained;\n+              else\n+                old_sub_kind = dst_type->__find_public_src\n+                                (src2dst, result.dst_ptr, src_type, src_ptr);\n+          \n+              if (new_sub_kind >= __not_contained)\n+                ;// already calculated\n+              else if (contained_p (old_sub_kind)\n+                       && (!virtual_p (old_sub_kind)\n+                           || !(__flags & __diamond_shaped_mask)))\n+                // Already found inside the other choice, and it was\n+                // non-virtual or we are not diamond shaped.\n+                new_sub_kind = __not_contained;\n+              else\n+                new_sub_kind = dst_type->__find_public_src\n+                                (src2dst, result2.dst_ptr, src_type, src_ptr);\n+            }\n+          \n+          // Neither sub_kind can be contained_ambig -- we bail out early\n+          // when we find those.\n+          if (contained_p (__sub_kind (new_sub_kind ^ old_sub_kind)))\n+            {\n+              // Only on one choice, not ambiguous.\n+              if (contained_p (new_sub_kind))\n+                {\n+                  // Only in new.\n+                  result.dst_ptr = result2.dst_ptr;\n+                  result.whole2dst = result2.whole2dst;\n+                  result_ambig = false;\n+                  old_sub_kind = new_sub_kind;\n+                }\n+              result.dst2src = old_sub_kind;\n+              if (public_p (result.dst2src))\n+                return false; // Can't be an ambiguating downcast for later discovery.\n+              if (!virtual_p (result.dst2src))\n+                return false; // Found non-virtually can't be bettered\n+            }\n+          else if (contained_p (__sub_kind (new_sub_kind & old_sub_kind)))\n+            {\n+              // In both.\n+              result.dst_ptr = NULL;\n+              result.dst2src = __contained_ambig;\n+              return true;  // Fail.\n+            }\n+          else\n+            {\n+              // In neither publicly, ambiguous for the moment, but keep\n+              // looking. It is possible that it was private in one or\n+              // both and therefore we should fail, but that's just tough.\n+              result.dst_ptr = NULL;\n+              result.dst2src = __not_contained;\n+              result_ambig = true;\n+            }\n+        }\n+      \n+      if (result.whole2src == __contained_private)\n+        // We found SRC_PTR as a private non-virtual base, therefore all\n+        // cross casts will fail. We have already found a down cast, if\n+        // there is one.\n+        return result_ambig;\n+    }\n+\n+  return result_ambig;\n+}\n+\n+bool __class_type_info::\n+__do_upcast (const __class_type_info *dst, const void *obj,\n+             __upcast_result &__restrict result) const\n+{\n+  if (*this == *dst)\n+    {\n+      result.dst_ptr = obj;\n+      result.base_type = nonvirtual_base_type;\n+      result.part2dst = __contained_public;\n+      return true;\n+    }\n+  return false;\n+}\n+\n+bool __si_class_type_info::\n+__do_upcast (const __class_type_info *dst, const void *obj_ptr,\n+             __upcast_result &__restrict result) const\n+{\n+  if (__class_type_info::__do_upcast (dst, obj_ptr, result))\n+    return true;\n+  \n+  return __base_type->__do_upcast (dst, obj_ptr, result);\n+}\n+\n+bool __vmi_class_type_info::\n+__do_upcast (const __class_type_info *dst, const void *obj_ptr,\n+             __upcast_result &__restrict result) const\n+{\n+  if (__class_type_info::__do_upcast (dst, obj_ptr, result))\n+    return true;\n+  \n+  int src_details = result.src_details;\n+  if (src_details & __flags_unknown_mask)\n+    src_details = __flags;\n+  \n+  for (size_t i = __base_count; i--;)\n+    {\n+      __upcast_result result2 (src_details);\n+      const void *base = obj_ptr;\n+      ptrdiff_t offset = __base_info[i].__offset ();\n+      bool is_virtual = __base_info[i].__is_virtual_p ();\n+      bool is_public = __base_info[i].__is_public_p ();\n+      \n+      if (!is_public && !(src_details & __non_diamond_repeat_mask))\n+        // original cannot have an ambiguous base, so skip private bases\n+        continue;\n+\n+      if (base)\n+        base = convert_to_base (base, is_virtual, offset);\n+      \n+      if (__base_info[i].__base->__do_upcast (dst, base, result2))\n+        {\n+          if (result2.base_type == nonvirtual_base_type && is_virtual)\n+            result2.base_type = __base_info[i].__base;\n+          if (contained_p (result2.part2dst) && !is_public)\n+            result2.part2dst = __sub_kind (result2.part2dst & ~__contained_public_mask);\n+          \n+          if (!result.base_type)\n+            {\n+              result = result2;\n+              if (!contained_p (result.part2dst))\n+                return true; // found ambiguously\n+              \n+              if (result.part2dst & __contained_public_mask)\n+                {\n+                  if (!(__flags & __non_diamond_repeat_mask))\n+                    return true;  // cannot have an ambiguous other base\n+                }\n+              else\n+                {\n+                  if (!virtual_p (result.part2dst))\n+                    return true; // cannot have another path\n+                  if (!(__flags & __diamond_shaped_mask))\n+                    return true; // cannot have a more accessible path\n+                }\n+            }\n+          else if (result.dst_ptr != result2.dst_ptr)\n+            {\n+              // Found an ambiguity.\n+\t      result.dst_ptr = NULL;\n+\t      result.part2dst = __contained_ambig;\n+\t      return true;\n+            }\n+          else if (result.dst_ptr)\n+            {\n+              // Ok, found real object via a virtual path.\n+              result.part2dst\n+                  = __sub_kind (result.part2dst | result2.part2dst);\n+            }\n+          else\n+            {\n+              // Dealing with a null pointer, need to check vbase\n+              // containing each of the two choices.\n+              if (result2.base_type == nonvirtual_base_type\n+                  || result.base_type == nonvirtual_base_type\n+                  || !(*result2.base_type == *result.base_type))\n+                {\n+                  // Already ambiguous, not virtual or via different virtuals.\n+                  // Cannot match.\n+                  result.part2dst = __contained_ambig;\n+                  return true;\n+                }\n+              result.part2dst\n+                  = __sub_kind (result.part2dst | result2.part2dst);\n+            }\n+        }\n+    }\n+  return result.part2dst != __unknown;\n+}\n+\n+// this is the external interface to the dynamic cast machinery\n+extern \"C\" void *\n+__dynamic_cast (const void *src_ptr,    // object started from\n+                const __class_type_info *src_type, // type of the starting object\n+                const __class_type_info *dst_type, // desired target type\n+                ptrdiff_t src2dst) // how src and dst are related\n+{\n+  const void *vtable = *static_cast <const void *const *> (src_ptr);\n+  const vtable_prefix *prefix =\n+      adjust_pointer <vtable_prefix> (vtable, \n+\t\t\t\t      -offsetof (vtable_prefix, origin));\n+  const void *whole_ptr =\n+      adjust_pointer <void> (src_ptr, prefix->whole_object);\n+  const __class_type_info *whole_type = prefix->whole_type;\n+  __class_type_info::__dyncast_result result;\n+  \n+  whole_type->__do_dyncast (src2dst, __class_type_info::__contained_public,\n+                            dst_type, whole_ptr, src_type, src_ptr, result);\n+  if (!result.dst_ptr)\n+    return NULL;\n+  if (contained_public_p (result.dst2src))\n+    // Src is known to be a public base of dst.\n+    return const_cast <void *> (result.dst_ptr);\n+  if (contained_public_p (__class_type_info::__sub_kind (result.whole2src & result.whole2dst)))\n+    // Both src and dst are known to be public bases of whole. Found a valid\n+    // cross cast.\n+    return const_cast <void *> (result.dst_ptr);\n+  if (contained_nonvirtual_p (result.whole2src))\n+    // Src is known to be a non-public nonvirtual base of whole, and not a\n+    // base of dst. Found an invalid cross cast, which cannot also be a down\n+    // cast\n+    return NULL;\n+  if (result.dst2src == __class_type_info::__unknown)\n+    result.dst2src = dst_type->__find_public_src (src2dst, result.dst_ptr,\n+                                                  src_type, src_ptr);\n+  if (contained_public_p (result.dst2src))\n+    // Found a valid down cast\n+    return const_cast <void *> (result.dst_ptr);\n+  // Must be an invalid down cast, or the cross cast wasn't bettered\n+  return NULL;\n+}\n+\n+}; // namespace __cxxabiv1\n+#endif"}, {"sha": "6be77bae26833b86900cd14744798b12bd4728f9", "filename": "libstdc++-v3/libsupc++/tinfo.h", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,223 @@\n+// RTTI support internals for -*- C++ -*-\n+// Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000 Free Software Foundation\n+\n+#include \"typeinfo\"\n+\n+// Class declarations shared between the typeinfo implementation files.\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+// original (old) abi\n+\n+// type_info for a class with no base classes (or an enum).\n+\n+struct __user_type_info : public std::type_info {\n+  __user_type_info (const char *n) : type_info (n) {}\n+\n+  // If our type can be upcast to a public and unambiguous base, then return\n+  // non-zero and set RES to point to the base object. OBJ points to the throw\n+  // object and can be NULL, if there is no object to adjust.\n+  int upcast (const type_info &target, void *obj, void **res) const;\n+  \n+  // If our type can be dynamicly cast to the target type, then return\n+  // pointer to the target object. OBJ is the pointer to the most derived\n+  // type and cannot be NULL. SUBTYPE and SUBOBJ indicate the static type\n+  // base object from whence we came, it cannot be NULL. SUBTYPE cannot be\n+  // the same as TARGET. TARGET cannot be a base of SUBTYPE.\n+  // BOFF indicates how SUBTYPE is related to TARGET.\n+  // BOFF >= 0, there is only one public non-virtual SUBTYPE base at offset\n+  //    BOFF, and there are no public virtual SUBTYPE bases.\n+  //    Therefore check if SUBOBJ is at offset BOFF when we find a target\n+  // BOFF == -1, SUBTYPE occurs as multiple public virtual or non-virtual bases.\n+  //    Lazily search all the bases of TARGET.\n+  // BOFF == -2, SUBTYPE is not a public base.\n+  // BOFF == -3, SUBTYPE occurs as multiple public non-virtual bases.\n+  //    Lazily search the non-virtual bases of TARGET.\n+  // For backwards compatibility set BOFF to -1, that is the safe \"unknown\"\n+  // value. We do not care about SUBTYPES as private bases of TARGET, as they\n+  // can never succeed as downcasts, only as crosscasts -- and then only if\n+  // they are virtual. This is more complicated that it might seem.\n+  void *dyncast (int boff,\n+                 const type_info &target, void *obj,\n+                 const type_info &subtype, void *subobj) const;\n+  \n+  // non_virtual_base_type is used to indicate that a base class is via a\n+  // non-virtual access path.\n+  static const type_info *const nonvirtual_base_type\n+      = static_cast <const type_info *> (0) + 1;\n+  \n+  // sub_kind tells us about how a base object is contained within a derived\n+  // object. We often do this lazily, hence the UNKNOWN value. At other times\n+  // we may use NOT_CONTAINED to mean not publicly contained.\n+  enum sub_kind\n+  {\n+    unknown = 0,              // we have no idea\n+    not_contained,            // not contained within us (in some\n+                              // circumstances this might mean not contained\n+                              // publicly)\n+    contained_ambig,          // contained ambiguously\n+    contained_mask = 4,       // contained within us\n+    contained_virtual_mask = 1, // via a virtual path\n+    contained_public_mask = 2,  // via a public path\n+    contained_private = contained_mask,\n+    contained_public = contained_mask | contained_public_mask\n+  };\n+  // some predicate functions for sub_kind\n+  static inline bool contained_p (sub_kind access_path)\n+  {\n+    return access_path >= contained_mask;\n+  }\n+  static inline bool contained_public_p (sub_kind access_path)\n+  {\n+    return access_path >= contained_public;\n+  }\n+  static inline bool contained_nonpublic_p (sub_kind access_path)\n+  {\n+    return (access_path & contained_public) == contained_mask;\n+  }\n+  static inline bool contained_nonvirtual_p (sub_kind access_path)\n+  {\n+    return (access_path & (contained_mask | contained_virtual_mask))\n+           == contained_mask;\n+  }\n+  static inline bool contained_virtual_p (sub_kind access_path)\n+  {\n+    return (access_path & (contained_mask | contained_virtual_mask))\n+           == (contained_mask | contained_virtual_mask);\n+  }\n+  \n+  struct upcast_result\n+  {\n+    void *target_obj;   // pointer to target object or NULL (init NULL)\n+    sub_kind whole2target;      // path from most derived object to target\n+    const type_info *base_type; // where we found the target, (init NULL)\n+                                // if in vbase the __user_type_info of vbase)\n+                                // if a non-virtual base then 1\n+                                // else NULL\n+    public:\n+    upcast_result ()\n+      :target_obj (NULL), whole2target (unknown), base_type (NULL)\n+      {}\n+  };\n+  struct dyncast_result\n+  {\n+    void *target_obj;   // pointer to target object or NULL (init NULL)\n+    sub_kind whole2target;      // path from most derived object to target\n+    sub_kind whole2sub;         // path from most derived object to sub object\n+    sub_kind target2sub;        // path from target to sub object\n+    \n+    public:\n+    dyncast_result ()\n+      :target_obj (NULL), whole2target (unknown),\n+       whole2sub (unknown), target2sub (unknown)\n+      {}\n+  };\n+  \n+  public:\n+  // Helper for upcast. See if TARGET is us, or one of our bases. ACCESS_PATH\n+  // gives the access from the start object. Return TRUE if we know the catch\n+  // fails.\n+  virtual bool do_upcast (sub_kind access_path,\n+                          const type_info &target, void *obj,\n+                          upcast_result &__restrict result) const;\n+  // Helper for dyncast. BOFF indicates how the SUBTYPE is related to TARGET.\n+  // ACCESS_PATH indicates the access from the most derived object.  It is\n+  // used to prune the DAG walk. All information about what we find is put\n+  // into RESULT. Return true, if the match we have found is ambiguous.\n+  virtual bool do_dyncast (int boff, sub_kind access_path,\n+                           const type_info &target, void *obj,\n+                           const type_info &subtype, void *subptr,\n+                           dyncast_result &__restrict result) const;\n+  public:\n+  // Indicate whether SUBPTR of type SUBTYPE is contained publicly within\n+  // OBJPTR. OBJPTR points to this base object. BOFF indicates how SUBTYPE\n+  // objects might be contained within this type.  If SUBPTR is one of our\n+  // SUBTYPE bases, indicate virtuality. Returns not_contained for non\n+  // containment or private containment.\n+  sub_kind find_public_subobj (int boff, const type_info &subtype,\n+                               void *objptr, void *subptr) const\n+  {\n+    if (boff >= 0)\n+      return ((char *)subptr - (char *)objptr) == boff\n+              ? contained_public : not_contained;\n+    if (boff == -2)\n+      return not_contained;\n+    return do_find_public_subobj (boff, subtype, objptr, subptr);\n+  }\n+  \n+  public:\n+  // Helper for find_subobj. BOFF indicates how SUBTYPE bases are inherited by\n+  // the type started from -- which is not necessarily the current type.\n+  // OBJPTR points to the current base.\n+  virtual sub_kind do_find_public_subobj (int boff, const type_info &subtype,\n+                                          void *objptr, void *subptr) const;\n+};\n+\n+// type_info for a class with one public, nonvirtual base class.\n+\n+class __si_type_info : public __user_type_info {\n+  const __user_type_info &base;\n+\n+public:\n+  __si_type_info (const char *n, const __user_type_info &b)\n+    : __user_type_info (n), base (b) { }\n+\n+  private:\n+  virtual bool do_upcast (sub_kind access_path,\n+                          const type_info &target, void *obj,\n+                          upcast_result &__restrict result) const;\n+  virtual bool do_dyncast (int boff, sub_kind access_path,\n+                           const type_info &target, void *obj,\n+                           const type_info &subtype, void *subptr,\n+                           dyncast_result &__restrict result) const;\n+  virtual sub_kind do_find_public_subobj (int boff, const type_info &subtype,\n+                                          void *objptr, void *subptr) const;\n+};\n+\n+// type_info for a general class.\n+\n+#include <limits.h>\n+\n+#if INT_MAX == 2147483647\n+typedef int myint32;\n+#elif SHRT_MAX == 2147483647\n+typedef short myint32;\n+#elif SCHAR_MAX == 2147483647\n+typedef signed char myint32;\n+#elif LONG_MAX == 2147483647\n+typedef long myint32;\n+#else\n+# error \"No 32-bit data type?\"\n+#endif\n+\n+struct __class_type_info : public __user_type_info {\n+  enum access { PUBLIC = 1, PROTECTED = 2, PRIVATE = 3 };\n+\n+  struct base_info {\n+    const __user_type_info *base;\n+    myint32 offset: 29;\n+    bool is_virtual: 1;\n+    enum access access: 2;\n+  };\n+\n+  const base_info *base_list;\n+  size_t n_bases;\n+\n+  __class_type_info (const char *name, const base_info *bl, size_t bn)\n+    : __user_type_info (name), base_list (bl), n_bases (bn) {}\n+\n+  public:\n+  virtual bool do_upcast (sub_kind access_path,\n+                          const type_info &target, void *obj,\n+                          upcast_result &__restrict result) const;\n+  virtual bool do_dyncast (int boff, sub_kind access_path,\n+                           const type_info &target, void *obj,\n+                           const type_info &subtype, void *subptr,\n+                           dyncast_result &__restrict result) const;\n+  virtual sub_kind do_find_public_subobj (int boff, const type_info &subtype,\n+                                          void *objptr, void *subptr) const;\n+};\n+#else\n+// new abi\n+#include <cxxabi.h>\n+\n+#endif"}, {"sha": "7c9a764134c305ef38363295a5844b1a2269832b", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "added", "additions": 452, "deletions": 0, "changes": 452, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,452 @@\n+// Methods for type_info for -*- C++ -*- Run Time Type Identification.\n+// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000 Free Software Foundation\n+\n+// This file is part of GNU CC.\n+\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <stddef.h>\n+#include \"tinfo.h\"\n+#include \"new\"\t\t\t// for placement new\n+\n+// We can't rely on having stdlib.h if we're freestanding.\n+extern \"C\" void abort ();\n+\n+using std::type_info;\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+bool\n+type_info::before (const type_info &arg) const\n+{\n+  return __builtin_strcmp (name (), arg.name ()) < 0;\n+}\n+\n+// type info for pointer type.\n+\n+struct __pointer_type_info : public type_info {\n+  const type_info& type;\n+\n+  __pointer_type_info (const char *n, const type_info& ti)\n+    : type_info (n), type (ti) {}\n+};\n+\n+// type info for attributes\n+\n+struct __attr_type_info : public type_info {\n+  enum cv { NONE = 0, CONST = 1, VOLATILE = 2, CONSTVOL = 1 | 2 };\n+\n+  const type_info& type;\n+  cv attr;\n+\n+  __attr_type_info (const char *n, cv a, const type_info& t)\n+    : type_info (n), type (t), attr (a) {}\n+};\n+\n+// type_info for builtin type\n+\n+struct __builtin_type_info : public type_info {\n+  __builtin_type_info (const char *n): type_info (n) {}\n+};\n+\n+// type info for function.\n+\n+struct __func_type_info : public type_info {\n+  __func_type_info (const char *n) : type_info (n) {}\n+};\n+\n+// type info for pointer to member function.\n+\n+struct __ptmf_type_info : public type_info {\n+  __ptmf_type_info (const char *n) : type_info (n) {}\n+};\n+\n+// type info for pointer to data member.\n+\n+struct __ptmd_type_info : public type_info {\n+  __ptmd_type_info (const char *n): type_info (n) {}\n+};\n+\n+// type info for array.\n+\n+struct __array_type_info : public type_info {\n+  __array_type_info (const char *n): type_info (n) {}\n+};\n+\n+#else\n+\n+#include <cxxabi.h>\n+#endif\n+\n+#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+namespace __cxxabiv1 {\n+\n+using namespace std;\n+\n+// This has special meaning to the compiler, and will cause it\n+// to emit the type_info structures for the fundamental types which are\n+// mandated to exist in the runtime.\n+__fundamental_type_info::\n+~__fundamental_type_info ()\n+{}\n+\n+__array_type_info::\n+~__array_type_info ()\n+{}\n+\n+__function_type_info::\n+~__function_type_info ()\n+{}\n+\n+__enum_type_info::\n+~__enum_type_info ()\n+{}\n+\n+__pbase_type_info::\n+~__pbase_type_info ()\n+{}\n+\n+__pointer_type_info::\n+~__pointer_type_info ()\n+{}\n+\n+__pointer_to_member_type_info::\n+~__pointer_to_member_type_info ()\n+{}\n+\n+bool __pointer_type_info::\n+__is_pointer_p () const\n+{\n+  return true;\n+}\n+\n+bool __function_type_info::\n+__is_function_p () const\n+{\n+  return true;\n+}\n+\n+bool __pbase_type_info::\n+__do_catch (const type_info *thr_type,\n+            void **thr_obj,\n+            unsigned outer) const\n+{\n+  if (*this == *thr_type)\n+    return true;      // same type\n+  if (typeid (*this) != typeid (*thr_type))\n+    return false;     // not both same kind of pointers\n+  \n+  if (!(outer & 1))\n+    // We're not the same and our outer pointers are not all const qualified\n+    // Therefore there must at least be a qualification conversion involved\n+    // But for that to be valid, our outer pointers must be const qualified.\n+    return false;\n+  \n+  const __pbase_type_info *thrown_type =\n+    static_cast <const __pbase_type_info *> (thr_type);\n+  \n+  if (thrown_type->__qualifier_flags & ~__qualifier_flags)\n+    // We're less qualified.\n+    return false;\n+  \n+  if (!(__qualifier_flags & __const_mask))\n+    outer &= ~1;\n+  \n+  return __pointer_catch (thrown_type, thr_obj, outer);\n+}\n+\n+inline bool __pbase_type_info::\n+__pointer_catch (const __pbase_type_info *thrown_type,\n+                 void **thr_obj,\n+                 unsigned outer) const\n+{\n+  return __pointee->__do_catch (thrown_type->__pointee, thr_obj, outer + 2);\n+}\n+\n+bool __pointer_type_info::\n+__pointer_catch (const __pbase_type_info *thrown_type,\n+                 void **thr_obj,\n+                 unsigned outer) const\n+{\n+  if (outer < 2 && *__pointee == typeid (void))\n+    {\n+      // conversion to void\n+      return !thrown_type->__pointee->__is_function_p ();\n+    }\n+  \n+  return __pbase_type_info::__pointer_catch (thrown_type, thr_obj, outer);\n+}\n+\n+bool __pointer_to_member_type_info::\n+__pointer_catch (const __pbase_type_info *thr_type,\n+                 void **thr_obj,\n+                 unsigned outer) const\n+{\n+  // This static cast is always valid, as our caller will have determined that\n+  // thr_type is really a __pointer_to_member_type_info.\n+  const __pointer_to_member_type_info *thrown_type =\n+    static_cast <const __pointer_to_member_type_info *> (thr_type);\n+  \n+  if (*__context_class != *thrown_type->__context_class)\n+    return false;     // not pointers to member of same class\n+  \n+  return __pbase_type_info::__pointer_catch (thrown_type, thr_obj, outer);\n+}\n+\n+} // namespace std\n+#endif\n+\n+// Entry points for the compiler.\n+\n+/* Low level match routine used by compiler to match types of catch\n+   variables and thrown objects.  */\n+\n+extern \"C\" int\n+__throw_type_match_rtti_2 (const void *catch_type_r, const void *throw_type_r,\n+\t\t\t void *objptr, void **valp)\n+{\n+  const type_info &catch_type = *(const type_info *)catch_type_r;\n+  const type_info &throw_type = *(const type_info *)throw_type_r;\n+\n+  *valp = objptr;\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+// old abi\n+  if (catch_type == throw_type)\n+    return 1;\n+  \n+  if (const __user_type_info *p\n+      = dynamic_cast <const __user_type_info *> (&throw_type))\n+    {\n+      return p->upcast (catch_type, objptr, valp);\n+    }\n+  else if (const __pointer_type_info *fr =\n+\t   dynamic_cast <const __pointer_type_info *> (&throw_type))\n+    {\n+      const __pointer_type_info *to =\n+\t   dynamic_cast <const __pointer_type_info *> (&catch_type);\n+\n+      if (! to)\n+\treturn 0;\n+\n+      const type_info *subfr = &fr->type, *subto = &to->type;\n+      __attr_type_info::cv cvfrom, cvto;\n+\n+      if (const __attr_type_info *at\n+\t  = dynamic_cast <const __attr_type_info *> (subfr))\n+\t{\n+\t  cvfrom = at->attr;\n+\t  subfr = &at->type;\n+\t}\n+      else\n+\tcvfrom = __attr_type_info::NONE;\n+      \n+      if (const __attr_type_info *at\n+\t  = dynamic_cast <const __attr_type_info *> (subto))\n+\t{\n+\t  cvto = at->attr;\n+\t  subto = &at->type;\n+\t}\n+      else\n+\tcvto = __attr_type_info::NONE;\n+\n+      if (((cvfrom & __attr_type_info::CONST)\n+\t   > (cvto & __attr_type_info::CONST))\n+\t  || ((cvfrom & __attr_type_info::VOLATILE)\n+\t      > (cvto & __attr_type_info::VOLATILE)))\n+\treturn 0;\n+\n+      if (*subto == *subfr)\n+\treturn 1;\n+      else if (*subto == typeid (void)\n+\t       && dynamic_cast <const __func_type_info *> (subfr) == 0)\n+\treturn 1;\n+      else if (const __user_type_info *p\n+\t       = dynamic_cast <const __user_type_info *> (subfr))\n+\treturn p->upcast (*subto, objptr, valp);\n+      else if (const __pointer_type_info *pfr\n+\t       = dynamic_cast <const __pointer_type_info *> (subfr))\n+\t{\n+\t  // Multi-level pointer conversion.\n+\n+\t  const __pointer_type_info *pto\n+\t    = dynamic_cast <const __pointer_type_info *> (subto);\n+\n+\t  if (! pto)\n+\t    return 0;\n+\t    \n+\t  bool constp = (cvto & __attr_type_info::CONST);\n+\t  for (subto = &pto->type, subfr = &pfr->type; ;\n+\t       subto = &pto->type, subfr = &pfr->type)\n+\t    {\n+\t      if (const __attr_type_info *at\n+\t\t  = dynamic_cast <const __attr_type_info *> (subfr))\n+\t\t{\n+\t\t  cvfrom = at->attr;\n+\t\t  subfr = &at->type;\n+\t\t}\n+\t      else\n+\t\tcvfrom = __attr_type_info::NONE;\n+      \n+\t      if (const __attr_type_info *at\n+\t\t  = dynamic_cast <const __attr_type_info *> (subto))\n+\t\t{\n+\t\t  cvto = at->attr;\n+\t\t  subto = &at->type;\n+\t\t}\n+\t      else\n+\t\tcvto = __attr_type_info::NONE;\n+\n+\t      if (((cvfrom & __attr_type_info::CONST)\n+\t\t   > (cvto & __attr_type_info::CONST))\n+\t\t  || ((cvfrom & __attr_type_info::VOLATILE)\n+\t\t      > (cvto & __attr_type_info::VOLATILE)))\n+\t\treturn 0;\n+\n+\t      if (! constp\n+\t\t  && (((cvfrom & __attr_type_info::CONST)\n+\t\t       < (cvto & __attr_type_info::CONST))\n+\t\t      || ((cvfrom & __attr_type_info::VOLATILE)\n+\t\t\t  < (cvto & __attr_type_info::VOLATILE))))\n+\t\treturn 0;\n+\n+\t      if (*subto == *subfr)\n+\t\treturn 1;\n+\n+\t      pto = dynamic_cast <const __pointer_type_info *> (subto);\n+\t      pfr = dynamic_cast <const __pointer_type_info *> (subfr);\n+\t      if (! pto || ! pfr)\n+\t\treturn 0;\t\t\n+\n+\t      if (! (cvto & __attr_type_info::CONST))\n+\t\tconstp = false;\n+\t    }\n+\t}\n+    }\n+#else\n+// new abi\n+  \n+  return catch_type.__do_catch (&throw_type, valp, 1);\n+#endif\n+  return 0;\n+}\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+/* Backward compatibility wrapper.  */\n+\n+extern \"C\" void*\n+__throw_type_match_rtti (const void *catch_type_r, const void *throw_type_r,\n+\t\t\t void *objptr)\n+{\n+  void *ret;\n+  if (__throw_type_match_rtti_2 (catch_type_r, throw_type_r, objptr, &ret))\n+    return ret;\n+  return NULL;\n+}\n+#endif\n+\n+/* Called from __cp_pop_exception.  Is P the type_info node for a pointer\n+   of some kind?  */\n+\n+bool\n+__is_pointer (void *p)\n+{\n+  const type_info *t = reinterpret_cast <const type_info *>(p);\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+// old abi\n+  const __pointer_type_info *pt =\n+    dynamic_cast <const __pointer_type_info *> (t);\n+  return pt != 0;\n+#else\n+// new abi\n+  return t->__is_pointer_p ();\n+#endif\n+}\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+// old abi\n+\n+extern \"C\" void\n+__rtti_ptr (void *addr, const char *n, const type_info *ti)\n+{ new (addr) __pointer_type_info (n, *ti); }\n+\n+extern \"C\" void\n+__rtti_attr (void *addr, const char *n, int attrval, const type_info *ti)\n+{\n+  new (addr) __attr_type_info\n+    (n, static_cast <__attr_type_info::cv> (attrval), *ti);\n+}\n+\n+extern \"C\" void\n+__rtti_func (void *addr, const char *name)\n+{ new (addr) __func_type_info (name); }\n+\n+extern \"C\" void\n+__rtti_ptmf (void *addr, const char *name)\n+{ new (addr) __ptmf_type_info (name); }\n+\n+extern \"C\" void\n+__rtti_ptmd (void *addr, const char *name)\n+{ new (addr) __ptmd_type_info (name); }\n+\n+extern \"C\" void\n+__rtti_array (void *addr, const char *name)\n+{ new (addr) __array_type_info (name); }\n+\n+extern \"C\" void *\n+__dynamic_cast (const type_info& (*from)(void), const type_info& (*to)(void),\n+\t\tint require_public, void *address, const type_info & (*sub)(void), void *subptr)\n+{\n+  if (!require_public) abort();\n+  return static_cast <__user_type_info const &> (from ()).dyncast\n+      (/*boff=*/-1, to (), address, sub (), subptr);\n+}\n+\n+extern \"C\" void *\n+__dynamic_cast_2 (const type_info& (*from)(void), const type_info& (*to)(void),\n+                  int boff,\n+\t\t  void *address, const type_info & (*sub)(void), void *subptr)\n+{\n+  return static_cast <__user_type_info const &> (from ()).dyncast\n+      (boff, to (), address, sub (), subptr);\n+}\n+\n+// type_info nodes and functions for the builtin types.  The mangling here\n+// must match the mangling in gcc/cp/rtti.c.\n+\n+#define BUILTIN(mangled)\t\t\t\t\t\\\n+unsigned char __ti##mangled [sizeof (__builtin_type_info)]\t\\\n+  __attribute__ ((aligned (__alignof__ (void *))));\t\t\\\n+extern \"C\" const type_info &__tf##mangled (void) {\t\t\\\n+  if ((*(void **) __ti##mangled) == 0)\t\t\t\t\\\n+    new (__ti##mangled) __builtin_type_info (#mangled);\t\t\\\n+  return *(type_info *)__ti##mangled;\t\t\t\t\\\n+}\n+\n+BUILTIN (v); BUILTIN (x); BUILTIN (l); BUILTIN (i); BUILTIN (s); BUILTIN (b);\n+BUILTIN (c); BUILTIN (w); BUILTIN (r); BUILTIN (d); BUILTIN (f);\n+BUILTIN (Ui); BUILTIN (Ul); BUILTIN (Ux); BUILTIN (Us); BUILTIN (Uc);\n+BUILTIN (Sc);\n+\n+#endif"}, {"sha": "966feb486de49a7f124dd1b9263d6e60e7681454", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -0,0 +1,279 @@\n+// new abi support -*- C++ -*-\n+// Copyright (C) 2000\n+// Free Software Foundation, Inc.\n+// Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>\n+// \n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+#include <cxxabi.h>\n+#include <new>\n+#include <exception>\n+\n+// Exception handling hook, to mark current exception as not caught --\n+// generally because we're about to rethrow it after some cleanup.\n+extern \"C\" void __uncatch_exception (void);\n+\n+namespace __cxxabiv1\n+{\n+\n+/* allocate and construct array */\n+extern \"C\" void *\n+__cxa_vec_new (size_t element_count,\n+               size_t element_size,\n+               size_t padding_size,\n+               void (*constructor) (void *),\n+               void (*destructor) (void *))\n+{\n+  return __cxa_vec_new2 (element_count, element_size, padding_size,\n+                         constructor, destructor,\n+                         &operator new[], &operator delete []);\n+}\n+\n+extern \"C\" void *\n+__cxa_vec_new2 (size_t element_count,\n+                size_t element_size,\n+                size_t padding_size,\n+                void (*constructor) (void *),\n+                void (*destructor) (void *),\n+                void *(*alloc) (size_t),\n+                void (*dealloc) (void *))\n+{\n+  size_t size = element_count * element_size + padding_size;\n+  char *base = static_cast <char *> (alloc (size));\n+  \n+  if (padding_size)\n+    {\n+      base += padding_size;\n+      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+    }\n+  try\n+    {\n+      __cxa_vec_ctor (base, element_count, element_size,\n+                      constructor, destructor);\n+    }\n+  catch (...)\n+    {\n+      __uncatch_exception ();\n+      dealloc (base - padding_size);\n+      throw;\n+    }\n+  return base;\n+}\n+\n+extern \"C\" void *\n+__cxa_vec_new3 (size_t element_count,\n+                size_t element_size,\n+                size_t padding_size,\n+                void (*constructor) (void *),\n+                void (*destructor) (void *),\n+                void *(*alloc) (size_t),\n+                void (*dealloc) (void *, size_t))\n+{\n+  size_t size = element_count * element_size + padding_size;\n+  char *base = static_cast <char *> (alloc (size));\n+  \n+  if (padding_size)\n+    {\n+      base += padding_size;\n+      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+    }\n+  try\n+    {\n+      __cxa_vec_ctor (base, element_count, element_size,\n+                      constructor, destructor);\n+    }\n+  catch (...)\n+    {\n+      __uncatch_exception ();\n+      dealloc (base - padding_size, size);\n+      throw;\n+    }\n+  return base;\n+}\n+\n+/* construct array */\n+extern \"C\" void\n+__cxa_vec_ctor (void *array_address,\n+                size_t element_count,\n+                size_t element_size,\n+                void (*constructor) (void *),\n+                void (*destructor) (void *))\n+{\n+  size_t ix = 0;\n+  char *ptr = static_cast <char *> (array_address);\n+  \n+  try\n+    {\n+      if (constructor)\n+        for (; ix != element_count; ix++, ptr += element_size)\n+          constructor (ptr);\n+    }\n+  catch (...)\n+    {\n+      __uncatch_exception ();\n+      __cxa_vec_dtor (array_address, ix, element_size, destructor);\n+      throw;\n+    }\n+}\n+\n+/* construct an array by copying */\n+\n+extern \"C\" void\n+__cxa_vec_cctor (void *dest_array,\n+\t\t void *src_array,\n+\t\t size_t element_count,\n+\t\t size_t element_size,\n+\t\t void (*constructor) (void *, void *),\n+\t\t void (*destructor) (void *))\n+{\n+  size_t ix = 0;\n+  char *dest_ptr = static_cast <char *> (dest_array);\n+  char *src_ptr = static_cast <char *> (src_array);\n+\n+  try\n+    {\n+      if (constructor)\n+\tfor (; ix != element_count; \n+\t     ix++, src_ptr += element_size, dest_ptr += element_size)\n+\t  constructor (dest_ptr, src_ptr);\n+    }\n+  catch (...)\n+    {\n+      __uncatch_exception ();\n+      __cxa_vec_dtor (dest_array, ix, element_size, destructor);\n+      throw;\n+    }\n+}\n+\n+/* destruct array */\n+extern \"C\" void\n+__cxa_vec_dtor (void *array_address,\n+                size_t element_count,\n+                size_t element_size,\n+                void (*destructor) (void *))\n+{\n+  if (destructor)\n+    {\n+      char *ptr = static_cast <char *> (array_address);\n+      size_t ix = element_count;\n+      bool unwinding = std::uncaught_exception ();\n+      \n+      ptr += element_count * element_size;\n+      \n+      try\n+        {\n+          while (ix--)\n+            {\n+              ptr -= element_size;\n+              destructor (ptr);\n+            }\n+        }\n+      catch (...)\n+        {\n+          if (unwinding)\n+            // [except.ctor]/3 If a destructor called during stack unwinding\n+            // exits with an exception, terminate is called.\n+            std::terminate ();\n+          __uncatch_exception ();\n+          __cxa_vec_dtor (array_address, ix, element_size, destructor);\n+          throw;\n+        }\n+    }\n+}\n+\n+/* destruct and release array */\n+extern \"C\" void\n+__cxa_vec_delete (void *array_address,\n+                  size_t element_size,\n+                  size_t padding_size,\n+                  void (*destructor) (void *))\n+{\n+  __cxa_vec_delete2 (array_address, element_size, padding_size,\n+                     destructor,\n+                     &operator delete []);\n+}\n+\n+extern \"C\" void\n+__cxa_vec_delete2 (void *array_address,\n+                  size_t element_size,\n+                  size_t padding_size,\n+                  void (*destructor) (void *),\n+                  void (*dealloc) (void *))\n+{\n+  char *base = static_cast <char *> (array_address);\n+  \n+  if (padding_size)\n+    {\n+      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      base -= padding_size;\n+      try\n+        {\n+          __cxa_vec_dtor (array_address, element_count, element_size,\n+                          destructor);\n+        }\n+      catch (...)\n+        {\n+          __uncatch_exception ();\n+          dealloc (base);\n+          throw;\n+        }\n+    }\n+  dealloc (base);\n+}\n+\n+extern \"C\" void\n+__cxa_vec_delete3 (void *array_address,\n+                  size_t element_size,\n+                  size_t padding_size,\n+                  void (*destructor) (void *),\n+                  void (*dealloc) (void *, size_t))\n+{\n+  char *base = static_cast <char *> (array_address);\n+  size_t size = 0;\n+  \n+  if (padding_size)\n+    {\n+      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      base -= padding_size;\n+      size = element_count * element_size + padding_size;\n+      try\n+        {\n+          __cxa_vec_dtor (array_address, element_count, element_size,\n+                          destructor);\n+        }\n+      catch (...)\n+        {\n+          __uncatch_exception ();\n+          dealloc (base, size);\n+          throw;\n+        }\n+    }\n+  dealloc (base, size);\n+}\n+\n+} // namespace __cxxabiv1\n+\n+#endif // defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100"}, {"sha": "c211aa259a03980c4e5c8a89ee51564f80b32567", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.32 2000/10/04 06:44:25 bkoz Exp $\n+## $Id: Makefile.am,v 1.33 2000/10/05 11:36:52 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -239,6 +239,7 @@ libinst_wstring_la_SOURCES = $(wstring_sources)\n \n libstdc___la_LIBADD = \\\n \t../math/libmath.la ../libio/libio.la \\\n+\t../libsupc++/libsupc++convenience.la \\\n \t@libinst_wstring_la@\n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm"}, {"sha": "8ba3606bc7e2d36eca471cac590e4dbaa746fc14", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bd10fb63d7bcdb508e34474fa72e75770b052d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=06bd10fb63d7bcdb508e34474fa72e75770b052d", "patch": "@@ -196,7 +196,7 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD =  \t../math/libmath.la ../libio/libio.la \t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../math/libmath.la ../libio/libio.la \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm"}]}