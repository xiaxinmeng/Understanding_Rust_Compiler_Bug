{"sha": "c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxZTZkODU1ZWNmYzYwNTM3NmFhMWE0ZTBiNWM3ZjFjOGVmN2JhOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-02T21:33:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-02T21:33:54Z"}, "message": "emmintrin.h: Fix comment typos.\n\n\t* config/i386/emmintrin.h: Fix comment typos.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/i386/sco5.h: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/ia64/itanium2.md: Likewise.\n\nFrom-SVN: r68857", "tree": {"sha": "3542dbe4fc37a2344e999055e2e7c7bbee9cf69f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3542dbe4fc37a2344e999055e2e7c7bbee9cf69f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/comments", "author": null, "committer": null, "parents": [{"sha": "82911f36f98c99cc96d17552416bc95c4d0d111f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82911f36f98c99cc96d17552416bc95c4d0d111f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82911f36f98c99cc96d17552416bc95c4d0d111f"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "4f880107ca6ea6a1859c49f499d6bca6e821f7a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -1,3 +1,12 @@\n+2003-07-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i386/emmintrin.h: Fix comment typos.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/sco5.h: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/ia64/itanium2.md: Likewise.\n+\n 2003-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* dbxout.c (pending_bincls): Replace DBX_USE_BINCLS with"}, {"sha": "af8719c2f02a6f17d9e29b2ceb8c0f9a1cc180fa", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -147,7 +147,7 @@ _mm_store_sd (double *__P, __m128d __A)\n   __builtin_ia32_storesd (__P, (__v2df)__A);\n }\n \n-/* Store the lower DPFP value acrosd two words.  */\n+/* Store the lower DPFP value across two words.  */\n static __inline void\n _mm_store1_pd (double *__P, __m128d __A)\n {"}, {"sha": "3959a23b4cbb8ecefdc60724715e6e15e8444337", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -2608,7 +2608,7 @@ contains_128bit_aligned_vector_p (type)\n \n   if (AGGREGATE_TYPE_P (type))\n     {\n-      /* Walk the agregates recursivly.  */\n+      /* Walk the agregates recursively.  */\n       if (TREE_CODE (type) == RECORD_TYPE\n \t  || TREE_CODE (type) == UNION_TYPE\n \t  || TREE_CODE (type) == QUAL_UNION_TYPE)\n@@ -9597,9 +9597,9 @@ ix86_expand_carry_flag_compare (code, op0, op1, pop)\n \t  code = swap_condition (code);\n \t}\n \n-      /* Try to expand the comparsion and verify that we end up with carry flag\n-\t based comparsion.  This is fails to be true only when we decide to expand\n-\t comparsion using arithmetic that is not too common scenario.  */\n+      /* Try to expand the comparison and verify that we end up with carry flag\n+\t based comparison.  This is fails to be true only when we decide to expand\n+\t comparison using arithmetic that is not too common scenario.  */\n       start_sequence ();\n       compare_op = ix86_expand_fp_compare (code, op0, op1, NULL_RTX,\n \t\t\t\t\t   &second_test, &bypass_test);\n@@ -12217,7 +12217,7 @@ ix86_adjust_cost (insn, link, dep_insn, cost)\n \t     floating unit pipeline preparation stages, the memory operands\n \t     for floating point are cheaper. \n \n-\t     ??? For Athlon it the difference is most propbably 2.  */\n+\t     ??? For Athlon it the difference is most probably 2.  */\n \t  if (unit == UNIT_INTEGER || unit == UNIT_UNKNOWN)\n \t    loadcost = 3;\n \t  else\n@@ -15690,7 +15690,7 @@ x86_function_profiler (file, labelno)\n \n /* We don't have exact information about the insn sizes, but we may assume\n    quite safely that we are informed about all 1 byte insns and memory\n-   address sizes.  This is enought to elliminate unnecesary padding in\n+   address sizes.  This is enough to eliminate unnecessary padding in\n    99% of cases.  */\n \n static int\n@@ -15735,7 +15735,7 @@ min_insn_size (insn)\n     return 2;\n }\n \n-/* AMD K8 core misspredicts jumps when there are more than 3 jumps in 16 byte\n+/* AMD K8 core mispredicts jumps when there are more than 3 jumps in 16 byte\n    window.  */\n \n static void\n@@ -15839,7 +15839,7 @@ ix86_reorg ()\n \t    && ((GET_CODE (prev) == JUMP_INSN && any_condjump_p (prev))\n \t\t|| GET_CODE (prev) == CALL_INSN))\n \t  replace = true;\n-\t/* Empty functions get branch misspredict even when the jump destination\n+\t/* Empty functions get branch mispredict even when the jump destination\n \t   is not visible to us.  */\n \tif (!prev && cfun->function_frequency > FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n \t  replace = true;"}, {"sha": "343cfd17472d43e39ca10c8e476dd2dbb429ecf5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -1248,7 +1248,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define RETURN_IN_MEMORY(TYPE) \\\n   ix86_return_in_memory (TYPE)\n \n-/* This is overriden by <cygwin.h>.  */\n+/* This is overridden by <cygwin.h>.  */\n #define MS_AGGREGATE_RETURN 0\n \n \f"}, {"sha": "4698550287c608d4a3611338bf2daebd0b5d5541", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n  * Here's the reason why. If we dont define them, and we dont define them\n  * to always emit to the same section, the default is to emit to \"named\"\n  * ctors and dtors sections. This would be great if we could use GNU ld,\n- * but we can't. The native linker could possibly be trained to coallesce\n+ * but we can't. The native linker could possibly be trained to coalesce\n  * named ctors sections, but that hasn't been done either. So if we don't\n  * define these, many C++ ctors and dtors dont get run, because they never\n  * wind up in the ctors/dtors arrays."}, {"sha": "1ff3cf9fa4b7083860b522f9742fec8aa4491813", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -4268,7 +4268,7 @@ ia64_secondary_reload_class (class, mode, x)\n       break;\n \n     case FR_REGS:\n-      /* Need to go through general regsters to get to other class regs.  */\n+      /* Need to go through general registers to get to other class regs.  */\n       if (regno >= 0 && ! (FR_REGNO_P (regno) || GENERAL_REGNO_P (regno)))\n \treturn GR_REGS;\n  "}, {"sha": "d4adf0eeff754bcc70ed087d860a75f856575313", "filename": "gcc/config/ia64/itanium2.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fia64%2Fitanium2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8/gcc%2Fconfig%2Fia64%2Fitanium2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fitanium2.md?ref=c51e6d855ecfc605376aa1a4e0b5c7f1c8ef7ba8", "patch": "@@ -484,7 +484,7 @@\n (define_reservation \"2_M_only_um01\" \"2_M0_only_um01|2_M1_only_um01\")\n \n ;; I instruction is dispersed to the lowest numbered I unit\n-;; not already in use.  Remeber about possible spliting.\n+;; not already in use.  Remeber about possible splitting.\n (define_reservation \"2_I0\"\n   \"2_0mi.i+2_ui0|2_0mii.+(2_ui0|2_ui1)|2_0mmi.+2_ui0\\\n    |2_0mfi.+2_ui0|2_0mi.b+2_ui0|(2_1mi.i|2_1mi.b)+(2_ui0|2_ui1)\\\n@@ -1335,7 +1335,7 @@\n    +(2b_um2|2b_um3)\")\n \n ;; I instruction is dispersed to the lowest numbered I unit\n-;; not already in use.  Remeber about possible spliting.\n+;; not already in use.  Remeber about possible splitting.\n (define_reservation \"2b_I\"\n   \"2b_0mi.i+2_2+2b_ui0|2b_0mii.+2_3+(2b_ui0|2b_ui1)|2b_0mmi.+2_3+2b_ui0\\\n    |2b_0mfi.+2_3+2b_ui0|2b_0mi.b+2_2+2b_ui0\\"}]}