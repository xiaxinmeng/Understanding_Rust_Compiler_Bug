{"sha": "4d007574449171a92b7505505bc750bf5ee2d38c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwMDc1NzQ0NDkxNzFhOTJiNzUwNTUwNWJjNzUwYmY1ZWUyZDM4Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-12-03T17:22:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-03T17:22:44Z"}, "message": "hashtable.cc: New.\n\n2007-12-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/hashtable.cc: New.\n\t* src/hashtable_c++0x.cc: Likewise.\n\t* src/Makefile.am: Add.\n\t* src/Makefile.in: Regenerate.\n\t* include/tr1_impl/hashtable_policy.h (struct _Primes): Remove.\n\t(_Prime_rehash_policy::_M_next_bkt, _M_bkt_for_elements,\n\t_M_need_rehash): Adjust.\n\t* config/abi/pre/gnu.ver: Update exports.\n\n\t* src/hash.cc: Minor tweak.\n\nFrom-SVN: r130585", "tree": {"sha": "d813b7842995e7f2db3b32eece81ae632df80698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d813b7842995e7f2db3b32eece81ae632df80698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d007574449171a92b7505505bc750bf5ee2d38c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d007574449171a92b7505505bc750bf5ee2d38c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d007574449171a92b7505505bc750bf5ee2d38c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d007574449171a92b7505505bc750bf5ee2d38c/comments", "author": null, "committer": null, "parents": [{"sha": "78a1179776243b44324760fccaa696ed82f92560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a1179776243b44324760fccaa696ed82f92560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a1179776243b44324760fccaa696ed82f92560"}], "stats": {"total": 381, "additions": 231, "deletions": 150}, "files": [{"sha": "716ca5045a0ce3028139819935db43b91a55ccd3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -1,3 +1,16 @@\n+2007-12-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/hashtable.cc: New.\n+\t* src/hashtable_c++0x.cc: Likewise.\n+\t* src/Makefile.am: Add.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/tr1_impl/hashtable_policy.h (struct _Primes): Remove.\n+\t(_Prime_rehash_policy::_M_next_bkt, _M_bkt_for_elements,\n+\t_M_need_rehash): Adjust.\n+\t* config/abi/pre/gnu.ver: Update exports.\n+\n+\t* src/hash.cc: Minor tweak.\n+\n 2007-12-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/debug/unordered_map (operator==(const unordered_map&,"}, {"sha": "058fc94eace3715935d18eb2ccbe667d95eda783", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -789,6 +789,9 @@ GLIBCXX_3.4.10 {\n     _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE6stosscEv;\n \n     _ZSt17__verify_grouping*;\n+    \n+    _ZNSt8__detail12__prime_listE;\n+    _ZNSt3tr18__detail12__prime_listE;\n \n } GLIBCXX_3.4.9;\n "}, {"sha": "a636125213ef15dd8a49a5e95aeb17fbea009573", "filename": "libstdc++-v3/include/tr1_impl/hashtable_policy.h", "status": "modified", "additions": 20, "deletions": 119, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -60,99 +60,6 @@ namespace __detail\n       return __distance_fw(__first, __last, _Tag());\n     }\n \n-  // XXX This is a hack.  _Prime_rehash_policy's member functions, and\n-  // certainly the list of primes, should be defined in a .cc file.\n-  // We're temporarily putting them in a header because we don't have a\n-  // place to put TR1 .cc files yet.  There's no good reason for any of\n-  // _Prime_rehash_policy's member functions to be inline, and there's\n-  // certainly no good reason for _Primes<> to exist at all.  \n-  template<int __ulongsize = sizeof(unsigned long)>\n-    struct _Primes\n-    {\n-      static const int __n_primes = __ulongsize != 8 ? 256 : 256 + 48;\n-      static const unsigned long __primes[256 + 48 + 1];\n-    };\n-\n-  template<int __ulongsize>\n-    const int _Primes<__ulongsize>::__n_primes;\n-\n-  template<int __ulongsize>\n-    const unsigned long _Primes<__ulongsize>::__primes[256 + 48 + 1] =\n-    {\n-      2ul, 3ul, 5ul, 7ul, 11ul, 13ul, 17ul, 19ul, 23ul, 29ul, 31ul,\n-      37ul, 41ul, 43ul, 47ul, 53ul, 59ul, 61ul, 67ul, 71ul, 73ul, 79ul,\n-      83ul, 89ul, 97ul, 103ul, 109ul, 113ul, 127ul, 137ul, 139ul, 149ul,\n-      157ul, 167ul, 179ul, 193ul, 199ul, 211ul, 227ul, 241ul, 257ul,\n-      277ul, 293ul, 313ul, 337ul, 359ul, 383ul, 409ul, 439ul, 467ul,\n-      503ul, 541ul, 577ul, 619ul, 661ul, 709ul, 761ul, 823ul, 887ul,\n-      953ul, 1031ul, 1109ul, 1193ul, 1289ul, 1381ul, 1493ul, 1613ul,\n-      1741ul, 1879ul, 2029ul, 2179ul, 2357ul, 2549ul, 2753ul, 2971ul,\n-      3209ul, 3469ul, 3739ul, 4027ul, 4349ul, 4703ul, 5087ul, 5503ul,\n-      5953ul, 6427ul, 6949ul, 7517ul, 8123ul, 8783ul, 9497ul, 10273ul,\n-      11113ul, 12011ul, 12983ul, 14033ul, 15173ul, 16411ul, 17749ul,\n-      19183ul, 20753ul, 22447ul, 24281ul, 26267ul, 28411ul, 30727ul,\n-      33223ul, 35933ul, 38873ul, 42043ul, 45481ul, 49201ul, 53201ul,\n-      57557ul, 62233ul, 67307ul, 72817ul, 78779ul, 85229ul, 92203ul,\n-      99733ul, 107897ul, 116731ul, 126271ul, 136607ul, 147793ul,\n-      159871ul, 172933ul, 187091ul, 202409ul, 218971ul, 236897ul,\n-      256279ul, 277261ul, 299951ul, 324503ul, 351061ul, 379787ul,\n-      410857ul, 444487ul, 480881ul, 520241ul, 562841ul, 608903ul,\n-      658753ul, 712697ul, 771049ul, 834181ul, 902483ul, 976369ul,\n-      1056323ul, 1142821ul, 1236397ul, 1337629ul, 1447153ul, 1565659ul,\n-      1693859ul, 1832561ul, 1982627ul, 2144977ul, 2320627ul, 2510653ul,\n-      2716249ul, 2938679ul, 3179303ul, 3439651ul, 3721303ul, 4026031ul,\n-      4355707ul, 4712381ul, 5098259ul, 5515729ul, 5967347ul, 6456007ul,\n-      6984629ul, 7556579ul, 8175383ul, 8844859ul, 9569143ul, 10352717ul,\n-      11200489ul, 12117689ul, 13109983ul, 14183539ul, 15345007ul,\n-      16601593ul, 17961079ul, 19431899ul, 21023161ul, 22744717ul,\n-      24607243ul, 26622317ul, 28802401ul, 31160981ul, 33712729ul,\n-      36473443ul, 39460231ul, 42691603ul, 46187573ul, 49969847ul,\n-      54061849ul, 58488943ul, 63278561ul, 68460391ul, 74066549ul,\n-      80131819ul, 86693767ul, 93793069ul, 101473717ul, 109783337ul,\n-      118773397ul, 128499677ul, 139022417ul, 150406843ul, 162723577ul,\n-      176048909ul, 190465427ul, 206062531ul, 222936881ul, 241193053ul,\n-      260944219ul, 282312799ul, 305431229ul, 330442829ul, 357502601ul,\n-      386778277ul, 418451333ul, 452718089ul, 489790921ul, 529899637ul,\n-      573292817ul, 620239453ul, 671030513ul, 725980837ul, 785430967ul,\n-      849749479ul, 919334987ul, 994618837ul, 1076067617ul, 1164186217ul,\n-      1259520799ul, 1362662261ul, 1474249943ul, 1594975441ul,\n-      1725587117ul, 1866894511ul, 2019773507ul, 2185171673ul,\n-      2364114217ul, 2557710269ul, 2767159799ul, 2993761039ul,\n-      3238918481ul, 3504151727ul, 3791104843ul, 4101556399ul,\n-      4294967291ul,\n-      // Sentinel, so we don't have to test the result of lower_bound,\n-      // or, on 64-bit machines, rest of the table.\n-      __ulongsize != 8 ? 4294967291ul : (unsigned long)6442450933ull,\n-      (unsigned long)8589934583ull,\n-      (unsigned long)12884901857ull, (unsigned long)17179869143ull,\n-      (unsigned long)25769803693ull, (unsigned long)34359738337ull,\n-      (unsigned long)51539607367ull, (unsigned long)68719476731ull,\n-      (unsigned long)103079215087ull, (unsigned long)137438953447ull,\n-      (unsigned long)206158430123ull, (unsigned long)274877906899ull,\n-      (unsigned long)412316860387ull, (unsigned long)549755813881ull,\n-      (unsigned long)824633720731ull, (unsigned long)1099511627689ull,\n-      (unsigned long)1649267441579ull, (unsigned long)2199023255531ull,\n-      (unsigned long)3298534883309ull, (unsigned long)4398046511093ull,\n-      (unsigned long)6597069766607ull, (unsigned long)8796093022151ull,\n-      (unsigned long)13194139533241ull, (unsigned long)17592186044399ull,\n-      (unsigned long)26388279066581ull, (unsigned long)35184372088777ull,\n-      (unsigned long)52776558133177ull, (unsigned long)70368744177643ull,\n-      (unsigned long)105553116266399ull, (unsigned long)140737488355213ull,\n-      (unsigned long)211106232532861ull, (unsigned long)281474976710597ull,\n-      (unsigned long)562949953421231ull, (unsigned long)1125899906842597ull,\n-      (unsigned long)2251799813685119ull, (unsigned long)4503599627370449ull,\n-      (unsigned long)9007199254740881ull, (unsigned long)18014398509481951ull,\n-      (unsigned long)36028797018963913ull, (unsigned long)72057594037927931ull,\n-      (unsigned long)144115188075855859ull,\n-      (unsigned long)288230376151711717ull,\n-      (unsigned long)576460752303423433ull,\n-      (unsigned long)1152921504606846883ull,\n-      (unsigned long)2305843009213693951ull,\n-      (unsigned long)4611686018427387847ull,\n-      (unsigned long)9223372036854775783ull,\n-      (unsigned long)18446744073709551557ull,\n-      (unsigned long)18446744073709551557ull\n-    };\n \n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators.\n@@ -476,10 +383,12 @@ namespace __detail\n   // smallest prime that keeps the load factor small enough.\n   struct _Prime_rehash_policy\n   {\n-    _Prime_rehash_policy(float __z = 1.0);\n+    _Prime_rehash_policy(float __z = 1.0)\n+    : _M_max_load_factor(__z), _M_growth_factor(2.f), _M_next_resize(0) { }\n \n     float\n-    max_load_factor() const;\n+    max_load_factor() const\n+    { return _M_max_load_factor; }      \n \n     // Return a bucket size no smaller than n.\n     std::size_t\n@@ -502,26 +411,19 @@ namespace __detail\n     mutable std::size_t  _M_next_resize;\n   };\n \n-  inline\n-  _Prime_rehash_policy::\n-  _Prime_rehash_policy(float __z)\n-  : _M_max_load_factor(__z), _M_growth_factor(2.f), _M_next_resize(0)\n-  { }\n+  extern const unsigned long __prime_list[];\n \n-  inline float\n-  _Prime_rehash_policy::\n-  max_load_factor() const\n-  { return _M_max_load_factor; }\n+  // XXX This is a hack.  There's no good reason for any of\n+  // _Prime_rehash_policy's member functions to be inline.  \n \n   // Return a prime no smaller than n.\n   inline std::size_t\n   _Prime_rehash_policy::\n   _M_next_bkt(std::size_t __n) const\n   {\n-    const unsigned long* const __last = (_Primes<>::__primes\n-\t\t\t\t\t + _Primes<>::__n_primes);\n-    const unsigned long* __p = std::lower_bound(_Primes<>::__primes, __last,\n-\t\t\t\t\t\t__n);\n+    const int __n_primes = sizeof(unsigned long) != 8 ? 256 : 256 + 48; \n+    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t\t+ __n_primes, __n);\n     _M_next_resize = static_cast<std::size_t>(std::ceil(*__p\n \t\t\t\t\t\t\t* _M_max_load_factor));\n     return *__p;\n@@ -533,11 +435,10 @@ namespace __detail\n   _Prime_rehash_policy::\n   _M_bkt_for_elements(std::size_t __n) const\n   {\n-    const unsigned long* const __last = (_Primes<>::__primes\n-\t\t\t\t\t + _Primes<>::__n_primes);\n+    const int __n_primes = sizeof(unsigned long) != 8 ? 256 : 256 + 48; \n     const float __min_bkts = __n / _M_max_load_factor;\n-    const unsigned long* __p = std::lower_bound(_Primes<>::__primes, __last,\n-\t\t\t\t\t\t__min_bkts);\n+    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t\t+ __n_primes, __min_bkts);\n     _M_next_resize = static_cast<std::size_t>(std::ceil(*__p\n \t\t\t\t\t\t\t* _M_max_load_factor));\n     return *__p;\n@@ -547,11 +448,11 @@ namespace __detail\n   // If p > __n_bkt, return make_pair(true, p); otherwise return\n   // make_pair(false, 0).  In principle this isn't very different from \n   // _M_bkt_for_elements.\n-  \n+\n   // The only tricky part is that we're caching the element count at\n   // which we need to rehash, so we don't have to do a floating-point\n   // multiply for every insertion.\n-  \n+\n   inline std::pair<bool, std::size_t>\n   _Prime_rehash_policy::\n   _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,\n@@ -564,11 +465,11 @@ namespace __detail\n \tif (__min_bkts > __n_bkt)\n \t  {\n \t    __min_bkts = std::max(__min_bkts, _M_growth_factor * __n_bkt);\n-\t    const unsigned long* const __last = (_Primes<>::__primes\n-\t\t\t\t\t\t + _Primes<>::__n_primes);\n-\t    const unsigned long* __p = std::lower_bound(_Primes<>::__primes,\n-\t\t\t\t\t\t\t__last, __min_bkts);\n-\t    _M_next_resize = \n+\t    const int __n_primes = sizeof(unsigned long) != 8 ? 256 : 256 + 48; \n+\t    const unsigned long* __p =\n+\t      std::lower_bound(__prime_list, __prime_list + __n_primes,\n+\t\t\t       __min_bkts);\n+\t    _M_next_resize =\n \t      static_cast<std::size_t>(std::ceil(*__p * _M_max_load_factor));\n \t    return std::make_pair(true, *__p);\n \t  }"}, {"sha": "de277e5232ccafe048fd2f0e0df350cfbe03a479", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -146,6 +146,8 @@ sources = \\\n \thash.cc \\\n \thash_c++0x.cc \\\n \tglobals_io.cc \\\n+\thashtable.cc \\\n+\thashtable_c++0x.cc \\\t\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -229,6 +231,11 @@ hash_c++0x.lo: hash_c++0x.cc\n hash_c++0x.o: hash_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hashtable_c++0x.lo: hashtable_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hashtable_c++0x.o: hashtable_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "696117e125de8a66af1ec3f6fd0d60e788af994d", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -71,19 +71,19 @@ LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__libstdc___la_SOURCES_DIST = bitmap_allocator.cc pool_allocator.cc \\\n \tmt_allocator.cc codecvt.cc compatibility.cc complex_io.cc \\\n \tctype.cc debug.cc functexcept.cc hash.cc hash_c++0x.cc \\\n-\tglobals_io.cc ios.cc ios_failure.cc ios_init.cc ios_locale.cc \\\n-\tlimits.cc list.cc debug_list.cc locale.cc locale_init.cc \\\n-\tlocale_facets.cc localename.cc stdexcept.cc strstream.cc \\\n-\tsystem_error.cc tree.cc allocator-inst.cc concept-inst.cc \\\n-\tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n-\tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n-\tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n-\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc atomicity.cc codecvt_members.cc \\\n-\tcollate_members.cc ctype_members.cc messages_members.cc \\\n-\tmonetary_members.cc numeric_members.cc time_members.cc \\\n-\tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n-\tparallel_list.cc\n+\tglobals_io.cc hashtable.cc hashtable_c++0x.cc ios.cc \\\n+\tios_failure.cc ios_init.cc ios_locale.cc limits.cc list.cc \\\n+\tdebug_list.cc locale.cc locale_init.cc locale_facets.cc \\\n+\tlocalename.cc stdexcept.cc strstream.cc system_error.cc \\\n+\ttree.cc allocator-inst.cc concept-inst.cc fstream-inst.cc \\\n+\text-inst.cc ios-inst.cc iostream-inst.cc istream-inst.cc \\\n+\tistream.cc locale-inst.cc misc-inst.cc ostream-inst.cc \\\n+\tsstream-inst.cc streambuf-inst.cc streambuf.cc string-inst.cc \\\n+\tvalarray-inst.cc wlocale-inst.cc wstring-inst.cc atomicity.cc \\\n+\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n+\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n+\ttime_members.cc basic_file.cc c++locale.cc \\\n+\tcompatibility-ldbl.cc parallel_list.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n@@ -93,16 +93,17 @@ am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n \t$(am__objects_3)\n am__objects_5 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tcodecvt.lo compatibility.lo complex_io.lo ctype.lo debug.lo \\\n-\tfunctexcept.lo hash.lo hash_c++0x.lo globals_io.lo ios.lo \\\n-\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n-\tdebug_list.lo locale.lo locale_init.lo locale_facets.lo \\\n-\tlocalename.lo stdexcept.lo strstream.lo system_error.lo \\\n-\ttree.lo allocator-inst.lo concept-inst.lo fstream-inst.lo \\\n-\text-inst.lo ios-inst.lo iostream-inst.lo istream-inst.lo \\\n-\tistream.lo locale-inst.lo misc-inst.lo ostream-inst.lo \\\n-\tsstream-inst.lo streambuf-inst.lo streambuf.lo string-inst.lo \\\n-\tvalarray-inst.lo wlocale-inst.lo wstring-inst.lo \\\n-\t$(am__objects_1) $(am__objects_4)\n+\tfunctexcept.lo hash.lo hash_c++0x.lo globals_io.lo \\\n+\thashtable.lo hashtable_c++0x.lo ios.lo ios_failure.lo \\\n+\tios_init.lo ios_locale.lo limits.lo list.lo debug_list.lo \\\n+\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n+\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n+\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n+\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n+\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n+\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo $(am__objects_1) \\\n+\t$(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -242,9 +243,13 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+ac_ct_AR = @ac_ct_AR@\n+ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n+ac_ct_RANLIB = @ac_ct_RANLIB@\n+ac_ct_STRIP = @ac_ct_STRIP@\n am__leading_dot = @am__leading_dot@\n am__tar = @am__tar@\n am__untar = @am__untar@\n@@ -257,9 +262,6 @@ build_os = @build_os@\n build_vendor = @build_vendor@\n check_msgfmt = @check_msgfmt@\n datadir = @datadir@\n-datarootdir = @datarootdir@\n-docdir = @docdir@\n-dvidir = @dvidir@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n exec_prefix = @exec_prefix@\n@@ -279,25 +281,21 @@ host_alias = @host_alias@\n host_cpu = @host_cpu@\n host_os = @host_os@\n host_vendor = @host_vendor@\n-htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libtool_VERSION = @libtool_VERSION@\n-localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n-pdfdir = @pdfdir@\n port_specific_symbol_files = @port_specific_symbol_files@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n-psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n sysconfdir = @sysconfdir@\n@@ -378,6 +376,8 @@ sources = \\\n \thash.cc \\\n \thash_c++0x.cc \\\n \tglobals_io.cc \\\n+\thashtable.cc \\\n+\thashtable_c++0x.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -819,6 +819,11 @@ hash_c++0x.lo: hash_c++0x.cc\n hash_c++0x.o: hash_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hashtable_c++0x.lo: hashtable_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hashtable_c++0x.o: hashtable_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "e778e2bf366b1edb9a6bd55a6931ddcb35277462", "filename": "libstdc++-v3/src/hash.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -37,7 +37,6 @@\n #  define _GLIBCXX_END_NAMESPACE_TR1 \n #else\n #include <tr1/functional>\n-#  define _GLIBCXX_INCLUDE_AS_TR1\n #  define _GLIBCXX_BEGIN_NAMESPACE_TR1 namespace tr1 {\n #  define _GLIBCXX_END_NAMESPACE_TR1 }\n #endif"}, {"sha": "8f84927caf7076bff670e0298c7220265603df29", "filename": "libstdc++-v3/src/hashtable.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2Fhashtable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2Fhashtable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhashtable.cc?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -0,0 +1,123 @@\n+// std::__detail and std::tr1::__detail definitions -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 \n+#  define _GLIBCXX_END_NAMESPACE_TR1 \n+#else\n+#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 namespace tr1 {\n+#  define _GLIBCXX_END_NAMESPACE_TR1 }\n+#endif\n+\n+namespace std\n+{ \n+_GLIBCXX_BEGIN_NAMESPACE_TR1\n+\n+namespace __detail\n+{\n+  extern const unsigned long __prime_list[256 + 48 + 1] =\n+  {\n+    2ul, 3ul, 5ul, 7ul, 11ul, 13ul, 17ul, 19ul, 23ul, 29ul, 31ul,\n+    37ul, 41ul, 43ul, 47ul, 53ul, 59ul, 61ul, 67ul, 71ul, 73ul, 79ul,\n+    83ul, 89ul, 97ul, 103ul, 109ul, 113ul, 127ul, 137ul, 139ul, 149ul,\n+    157ul, 167ul, 179ul, 193ul, 199ul, 211ul, 227ul, 241ul, 257ul,\n+    277ul, 293ul, 313ul, 337ul, 359ul, 383ul, 409ul, 439ul, 467ul,\n+    503ul, 541ul, 577ul, 619ul, 661ul, 709ul, 761ul, 823ul, 887ul,\n+    953ul, 1031ul, 1109ul, 1193ul, 1289ul, 1381ul, 1493ul, 1613ul,\n+    1741ul, 1879ul, 2029ul, 2179ul, 2357ul, 2549ul, 2753ul, 2971ul,\n+    3209ul, 3469ul, 3739ul, 4027ul, 4349ul, 4703ul, 5087ul, 5503ul,\n+    5953ul, 6427ul, 6949ul, 7517ul, 8123ul, 8783ul, 9497ul, 10273ul,\n+    11113ul, 12011ul, 12983ul, 14033ul, 15173ul, 16411ul, 17749ul,\n+    19183ul, 20753ul, 22447ul, 24281ul, 26267ul, 28411ul, 30727ul,\n+    33223ul, 35933ul, 38873ul, 42043ul, 45481ul, 49201ul, 53201ul,\n+    57557ul, 62233ul, 67307ul, 72817ul, 78779ul, 85229ul, 92203ul,\n+    99733ul, 107897ul, 116731ul, 126271ul, 136607ul, 147793ul,\n+    159871ul, 172933ul, 187091ul, 202409ul, 218971ul, 236897ul,\n+    256279ul, 277261ul, 299951ul, 324503ul, 351061ul, 379787ul,\n+    410857ul, 444487ul, 480881ul, 520241ul, 562841ul, 608903ul,\n+    658753ul, 712697ul, 771049ul, 834181ul, 902483ul, 976369ul,\n+    1056323ul, 1142821ul, 1236397ul, 1337629ul, 1447153ul, 1565659ul,\n+    1693859ul, 1832561ul, 1982627ul, 2144977ul, 2320627ul, 2510653ul,\n+    2716249ul, 2938679ul, 3179303ul, 3439651ul, 3721303ul, 4026031ul,\n+    4355707ul, 4712381ul, 5098259ul, 5515729ul, 5967347ul, 6456007ul,\n+    6984629ul, 7556579ul, 8175383ul, 8844859ul, 9569143ul, 10352717ul,\n+    11200489ul, 12117689ul, 13109983ul, 14183539ul, 15345007ul,\n+    16601593ul, 17961079ul, 19431899ul, 21023161ul, 22744717ul,\n+    24607243ul, 26622317ul, 28802401ul, 31160981ul, 33712729ul,\n+    36473443ul, 39460231ul, 42691603ul, 46187573ul, 49969847ul,\n+    54061849ul, 58488943ul, 63278561ul, 68460391ul, 74066549ul,\n+    80131819ul, 86693767ul, 93793069ul, 101473717ul, 109783337ul,\n+    118773397ul, 128499677ul, 139022417ul, 150406843ul, 162723577ul,\n+    176048909ul, 190465427ul, 206062531ul, 222936881ul, 241193053ul,\n+    260944219ul, 282312799ul, 305431229ul, 330442829ul, 357502601ul,\n+    386778277ul, 418451333ul, 452718089ul, 489790921ul, 529899637ul,\n+    573292817ul, 620239453ul, 671030513ul, 725980837ul, 785430967ul,\n+    849749479ul, 919334987ul, 994618837ul, 1076067617ul, 1164186217ul,\n+    1259520799ul, 1362662261ul, 1474249943ul, 1594975441ul,\n+    1725587117ul, 1866894511ul, 2019773507ul, 2185171673ul,\n+    2364114217ul, 2557710269ul, 2767159799ul, 2993761039ul,\n+    3238918481ul, 3504151727ul, 3791104843ul, 4101556399ul,\n+    4294967291ul,\n+    // Sentinel, so we don't have to test the result of lower_bound,\n+    // or, on 64-bit machines, rest of the table.\n+    sizeof(unsigned long) != 8 ? 4294967291ul : (unsigned long)6442450933ull,\n+    (unsigned long)8589934583ull,\n+    (unsigned long)12884901857ull, (unsigned long)17179869143ull,\n+    (unsigned long)25769803693ull, (unsigned long)34359738337ull,\n+    (unsigned long)51539607367ull, (unsigned long)68719476731ull,\n+    (unsigned long)103079215087ull, (unsigned long)137438953447ull,\n+    (unsigned long)206158430123ull, (unsigned long)274877906899ull,\n+    (unsigned long)412316860387ull, (unsigned long)549755813881ull,\n+    (unsigned long)824633720731ull, (unsigned long)1099511627689ull,\n+    (unsigned long)1649267441579ull, (unsigned long)2199023255531ull,\n+    (unsigned long)3298534883309ull, (unsigned long)4398046511093ull,\n+    (unsigned long)6597069766607ull, (unsigned long)8796093022151ull,\n+    (unsigned long)13194139533241ull, (unsigned long)17592186044399ull,\n+    (unsigned long)26388279066581ull, (unsigned long)35184372088777ull,\n+    (unsigned long)52776558133177ull, (unsigned long)70368744177643ull,\n+    (unsigned long)105553116266399ull, (unsigned long)140737488355213ull,\n+    (unsigned long)211106232532861ull, (unsigned long)281474976710597ull,\n+    (unsigned long)562949953421231ull, (unsigned long)1125899906842597ull,\n+    (unsigned long)2251799813685119ull, (unsigned long)4503599627370449ull,\n+    (unsigned long)9007199254740881ull, (unsigned long)18014398509481951ull,\n+    (unsigned long)36028797018963913ull, (unsigned long)72057594037927931ull,\n+    (unsigned long)144115188075855859ull,\n+    (unsigned long)288230376151711717ull,\n+    (unsigned long)576460752303423433ull,\n+    (unsigned long)1152921504606846883ull,\n+    (unsigned long)2305843009213693951ull,\n+    (unsigned long)4611686018427387847ull,\n+    (unsigned long)9223372036854775783ull,\n+    (unsigned long)18446744073709551557ull,\n+    (unsigned long)18446744073709551557ull    \n+  };\n+} // namespace __detail\n+\n+_GLIBCXX_END_NAMESPACE_TR1\n+}"}, {"sha": "a9f1ba3b1a928138983526581b6e5dd09fc8e5d7", "filename": "libstdc++-v3/src/hashtable_c++0x.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d007574449171a92b7505505bc750bf5ee2d38c/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_c%2B%2B0x.cc?ref=4d007574449171a92b7505505bc750bf5ee2d38c", "patch": "@@ -0,0 +1,30 @@\n+// std::__detail definitions -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"hashtable.cc\""}]}