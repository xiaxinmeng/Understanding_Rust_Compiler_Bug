{"sha": "0f1f080ec2d5adde968c4089891986a30eca25ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxZjA4MGVjMmQ1YWRkZTk2OGM0MDg5ODkxOTg2YTMwZWNhMjVjYQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-20T00:17:54Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-20T00:17:54Z"}, "message": "sparc.md (cpu attr): Add all cpu variants.\n\n\t* sparc/sparc.md (cpu attr): Add all cpu variants.\n\t(negtf2,negdf2,abstf2,absdf2): Use isa attr, not arch attr in\n\tdetermining insn lengths.\n\nFrom-SVN: r11321", "tree": {"sha": "e2c08b904036388bda45ebcbaaa8cda5bd753ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c08b904036388bda45ebcbaaa8cda5bd753ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f1f080ec2d5adde968c4089891986a30eca25ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f1f080ec2d5adde968c4089891986a30eca25ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f1f080ec2d5adde968c4089891986a30eca25ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f1f080ec2d5adde968c4089891986a30eca25ca/comments", "author": null, "committer": null, "parents": [{"sha": "bafb031b01fedafab908d822d25087edd89d5cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafb031b01fedafab908d822d25087edd89d5cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafb031b01fedafab908d822d25087edd89d5cfe"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "cb662e74676b339cc84d3d51ec332a516b4a0ad5", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f1f080ec2d5adde968c4089891986a30eca25ca/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f1f080ec2d5adde968c4089891986a30eca25ca/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=0f1f080ec2d5adde968c4089891986a30eca25ca", "patch": "@@ -29,6 +29,11 @@\n ;; constraint letter is 'e'.  To avoid any confusion, 'e' is used instead of\n ;; 'f' for all DF/TFmode values, including those that are specific to the v8.\n \n+;; Attribute for cpu type.\n+;; These must match those in sparc.h.\n+(define_attr \"cpu\" \"common,cypress,v8,supersparc,sparclite,sparclet,v9,ultrasparc\"\n+  (const (symbol_ref \"sparc_cpu\")))\n+\n ;; Attribute for the instruction set.\n ;; At present we only need to distinguish v9/!v9, but for clarity we\n ;; test TARGET_V8 too.\n@@ -44,12 +49,6 @@\n   (cond [(symbol_ref \"TARGET_ARCH64\") (const_string \"arch64bit\")]\n \t(const_string \"arch32bit\"))))\n \n-;; CPU type.  This is only used for instruction scheduling.\n-(define_attr \"cpu\" \"cypress,supersparc\"\n- (const\n-  (cond [(symbol_ref \"TARGET_SUPERSPARC\") (const_string \"supersparc\")]\n-\t(const_string \"cypress\"))))\n-\n ;; Insn type.  Used to default other attribute values.\n \n ;; type \"unary\" insns have one input operand (1) and one output operand (0)\n@@ -4621,7 +4620,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr_alternative \"length\"\n      [(const_int 1)\n-      (if_then_else (eq_attr \"arch\" \"arch32bit\") (const_int 4) (const_int 1))])])\n+      (if_then_else (eq_attr \"isa\" \"v9\") (const_int 1) (const_int 4))])])\n \n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e,e\")\n@@ -4639,7 +4638,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr_alternative \"length\"\n      [(const_int 1)\n-      (if_then_else (eq_attr \"arch\" \"arch32bit\") (const_int 2) (const_int 1))])])\n+      (if_then_else (eq_attr \"isa\" \"v9\") (const_int 1) (const_int 2))])])\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n@@ -4664,7 +4663,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr_alternative \"length\"\n      [(const_int 1)\n-      (if_then_else (eq_attr \"arch\" \"arch32bit\") (const_int 4) (const_int 1))])])\n+      (if_then_else (eq_attr \"isa\" \"v9\") (const_int 1) (const_int 4))])])\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e,e\")\n@@ -4682,7 +4681,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr_alternative \"length\"\n      [(const_int 1)\n-      (if_then_else (eq_attr \"arch\" \"arch32bit\") (const_int 2) (const_int 1))])])\n+      (if_then_else (eq_attr \"isa\" \"v9\") (const_int 1) (const_int 2))])])\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")"}]}