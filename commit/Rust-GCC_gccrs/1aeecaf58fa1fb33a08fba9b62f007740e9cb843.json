{"sha": "1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlZWNhZjU4ZmExZmIzM2EwOGZiYTliNjJmMDA3NzQwZTljYjg0Mw==", "commit": {"author": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-11-08T05:34:25Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-11-08T05:34:25Z"}, "message": "Fix inefficient vector constructor.\n\nChangelog\ngcc/\n\tPR target/92295\n\t* config/i386/i386-expand.c (ix86_expand_vector_init_concat)\n\tEnhance ix86_expand_vector_init_concat.\n\ngcc/testsuite\n\t* gcc.target/i386/pr92295.c: New test.\n\nFrom-SVN: r277946", "tree": {"sha": "6e5e0be10761f1105e9eff39478e54db4421c553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e5e0be10761f1105e9eff39478e54db4421c553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/comments", "author": null, "committer": null, "parents": [{"sha": "017c6491077bee998eed9ed6520026285c906d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017c6491077bee998eed9ed6520026285c906d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017c6491077bee998eed9ed6520026285c906d37"}], "stats": {"total": 153, "additions": 75, "deletions": 78}, "files": [{"sha": "9a33aa1ebe38237c498cc5a0a639d2ffac43c12f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "patch": "@@ -1,3 +1,9 @@\n+2019-11-08  Hongtao Liu  <Hongtao.liu@intel.com>\n+\n+\tPR target/92295\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_concat)\n+\tEnhance ix86_expand_vector_init_concat.\n+\n 2019-11-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/invoke.texi (-Wold-style-definition): Document () not being"}, {"sha": "be040a1bc3e9c3c8d29e7a2bb198e06579058b42", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 52, "deletions": 78, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "patch": "@@ -13654,8 +13654,8 @@ static void\n ix86_expand_vector_init_concat (machine_mode mode,\n \t\t\t\trtx target, rtx *ops, int n)\n {\n-  machine_mode cmode, hmode = VOIDmode, gmode = VOIDmode;\n-  rtx first[16], second[8], third[4];\n+  machine_mode half_mode = VOIDmode;\n+  rtx half[2];\n   rtvec v;\n   int i, j;\n \n@@ -13665,55 +13665,55 @@ ix86_expand_vector_init_concat (machine_mode mode,\n       switch (mode)\n \t{\n \tcase E_V16SImode:\n-\t  cmode = V8SImode;\n+\t  half_mode = V8SImode;\n \t  break;\n \tcase E_V16SFmode:\n-\t  cmode = V8SFmode;\n+\t  half_mode = V8SFmode;\n \t  break;\n \tcase E_V8DImode:\n-\t  cmode = V4DImode;\n+\t  half_mode = V4DImode;\n \t  break;\n \tcase E_V8DFmode:\n-\t  cmode = V4DFmode;\n+\t  half_mode = V4DFmode;\n \t  break;\n \tcase E_V8SImode:\n-\t  cmode = V4SImode;\n+\t  half_mode = V4SImode;\n \t  break;\n \tcase E_V8SFmode:\n-\t  cmode = V4SFmode;\n+\t  half_mode = V4SFmode;\n \t  break;\n \tcase E_V4DImode:\n-\t  cmode = V2DImode;\n+\t  half_mode = V2DImode;\n \t  break;\n \tcase E_V4DFmode:\n-\t  cmode = V2DFmode;\n+\t  half_mode = V2DFmode;\n \t  break;\n \tcase E_V4SImode:\n-\t  cmode = V2SImode;\n+\t  half_mode = V2SImode;\n \t  break;\n \tcase E_V4SFmode:\n-\t  cmode = V2SFmode;\n+\t  half_mode = V2SFmode;\n \t  break;\n \tcase E_V2DImode:\n-\t  cmode = DImode;\n+\t  half_mode = DImode;\n \t  break;\n \tcase E_V2SImode:\n-\t  cmode = SImode;\n+\t  half_mode = SImode;\n \t  break;\n \tcase E_V2DFmode:\n-\t  cmode = DFmode;\n+\t  half_mode = DFmode;\n \t  break;\n \tcase E_V2SFmode:\n-\t  cmode = SFmode;\n+\t  half_mode = SFmode;\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n \n-      if (!register_operand (ops[1], cmode))\n-\tops[1] = force_reg (cmode, ops[1]);\n-      if (!register_operand (ops[0], cmode))\n-\tops[0] = force_reg (cmode, ops[0]);\n+      if (!register_operand (ops[1], half_mode))\n+\tops[1] = force_reg (half_mode, ops[1]);\n+      if (!register_operand (ops[0], half_mode))\n+\tops[0] = force_reg (half_mode, ops[0]);\n       emit_insn (gen_rtx_SET (target, gen_rtx_VEC_CONCAT (mode, ops[0],\n \t\t\t\t\t\t\t  ops[1])));\n       break;\n@@ -13722,16 +13722,16 @@ ix86_expand_vector_init_concat (machine_mode mode,\n       switch (mode)\n \t{\n \tcase E_V4DImode:\n-\t  cmode = V2DImode;\n+\t  half_mode = V2DImode;\n \t  break;\n \tcase E_V4DFmode:\n-\t  cmode = V2DFmode;\n+\t  half_mode = V2DFmode;\n \t  break;\n \tcase E_V4SImode:\n-\t  cmode = V2SImode;\n+\t  half_mode = V2SImode;\n \t  break;\n \tcase E_V4SFmode:\n-\t  cmode = V2SFmode;\n+\t  half_mode = V2SFmode;\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -13742,20 +13742,16 @@ ix86_expand_vector_init_concat (machine_mode mode,\n       switch (mode)\n \t{\n \tcase E_V8DImode:\n-\t  cmode = V2DImode;\n-\t  hmode = V4DImode;\n+\t  half_mode = V4DImode;\n \t  break;\n \tcase E_V8DFmode:\n-\t  cmode = V2DFmode;\n-\t  hmode = V4DFmode;\n+\t  half_mode = V4DFmode;\n \t  break;\n \tcase E_V8SImode:\n-\t  cmode = V2SImode;\n-\t  hmode = V4SImode;\n+\t  half_mode = V4SImode;\n \t  break;\n \tcase E_V8SFmode:\n-\t  cmode = V2SFmode;\n-\t  hmode = V4SFmode;\n+\t  half_mode = V4SFmode;\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -13766,14 +13762,10 @@ ix86_expand_vector_init_concat (machine_mode mode,\n       switch (mode)\n \t{\n \tcase E_V16SImode:\n-\t  cmode = V2SImode;\n-\t  hmode = V4SImode;\n-\t  gmode = V8SImode;\n+\t  half_mode = V8SImode;\n \t  break;\n \tcase E_V16SFmode:\n-\t  cmode = V2SFmode;\n-\t  hmode = V4SFmode;\n-\t  gmode = V8SFmode;\n+\t  half_mode = V8SFmode;\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -13783,50 +13775,32 @@ ix86_expand_vector_init_concat (machine_mode mode,\n half:\n       /* FIXME: We process inputs backward to help RA.  PR 36222.  */\n       i = n - 1;\n-      j = (n >> 1) - 1;\n-      for (; i > 0; i -= 2, j--)\n-\t{\n-\t  first[j] = gen_reg_rtx (cmode);\n-\t  v = gen_rtvec (2, ops[i - 1], ops[i]);\n-\t  ix86_expand_vector_init (false, first[j],\n-\t\t\t\t   gen_rtx_PARALLEL (cmode, v));\n-\t}\n-\n-      n >>= 1;\n-      if (n > 4)\n-\t{\n-\t  gcc_assert (hmode != VOIDmode);\n-\t  gcc_assert (gmode != VOIDmode);\n-\t  for (i = j = 0; i < n; i += 2, j++)\n-\t    {\n-\t      second[j] = gen_reg_rtx (hmode);\n-\t      ix86_expand_vector_init_concat (hmode, second [j],\n-\t\t\t\t\t      &first [i], 2);\n-\t    }\n-\t  n >>= 1;\n-\t  for (i = j = 0; i < n; i += 2, j++)\n-\t    {\n-\t      third[j] = gen_reg_rtx (gmode);\n-\t      ix86_expand_vector_init_concat (gmode, third[j],\n-\t\t\t\t\t      &second[i], 2);\n-\t    }\n-\t  n >>= 1;\n-\t  ix86_expand_vector_init_concat (mode, target, third, n);\n-\t}\n-      else if (n > 2)\n+      for (j = 1; j != -1; j--)\n \t{\n-\t  gcc_assert (hmode != VOIDmode);\n-\t  for (i = j = 0; i < n; i += 2, j++)\n+\t  half[j] = gen_reg_rtx (half_mode);\n+\t  switch (n >> 1)\n \t    {\n-\t      second[j] = gen_reg_rtx (hmode);\n-\t      ix86_expand_vector_init_concat (hmode, second [j],\n-\t\t\t\t\t      &first [i], 2);\n+\t    case 2:\n+\t      v = gen_rtvec (2, ops[i-1], ops[i]);\n+\t      i -= 2;\n+\t      break;\n+\t    case 4:\n+\t      v = gen_rtvec (4, ops[i-3], ops[i-2], ops[i-1], ops[i]);\n+\t      i -= 4;\n+\t      break;\n+\t    case 8:\n+\t      v = gen_rtvec (8, ops[i-7], ops[i-6], ops[i-5], ops[i-4],\n+\t\t\t     ops[i-3], ops[i-2], ops[i-1], ops[i]);\n+\t      i -= 8;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n \t    }\n-\t  n >>= 1;\n-\t  ix86_expand_vector_init_concat (mode, target, second, n);\n+\t  ix86_expand_vector_init (false, half[j],\n+\t\t\t\t   gen_rtx_PARALLEL (half_mode, v));\n \t}\n-      else\n-\tix86_expand_vector_init_concat (mode, target, first, n);\n+\n+      ix86_expand_vector_init_concat (mode, target, half, 2);\n       break;\n \n     default:"}, {"sha": "dec89484145af067767df4b94e6ed5306428823e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "patch": "@@ -1,3 +1,7 @@\n+2019-11-08  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr92295.c: New test.\n+\n 2019-11-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c11-old-style-definition-1.c,"}, {"sha": "179dc487b983783135680045f6bb0ec6be252095", "filename": "gcc/testsuite/gcc.target/i386/pr92295.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92295.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeecaf58fa1fb33a08fba9b62f007740e9cb843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92295.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92295.c?ref=1aeecaf58fa1fb33a08fba9b62f007740e9cb843", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+typedef int X __attribute__((vector_size (32)));\n+\n+X\n+foo (int x, int z)\n+{\n+  X y = { x, x, x, x, z, z, z, z };\n+  return y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcast\" \"2\" } } */"}]}