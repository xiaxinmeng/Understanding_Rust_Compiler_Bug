{"sha": "76898cec437561a5e74d92b98f4631b80300409d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4OThjZWM0Mzc1NjFhNWU3NGQ5MmI5OGY0NjMxYjgwMzAwNDA5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-26T13:54:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-26T13:54:17Z"}, "message": "Remove useless register keywords\n\nThis patch removes useless register keywords from several backends and one\nspot in the Ada FE.\n\n2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* config/epiphany/epiphany.c (epiphany_print_operand_address): Remove\n\tregister keywords.\n\t* config/microblaze/microblaze.c (microblaze_legitimize_address,\n\tcall_internal1,\n\tmicroblaze_option_override, print_operand): Likewise.\n\t* config/microblaze/microblaze.md (call_internal_plt,\n\tcall_value_intern_plt, call_value_intern): Likewise.\n\t* config/arm/aout.h (ASM_OUTPUT_ALIGN): Likewise.\n\t* config/iq2000/iq2000.md (call_internal1, call_value_internal1,\n\tcall_value_multiple_internal1): Likewise.\n\t* config/bfin/bfin.c (symbolic_reference_mentioned_p): Likewise.\ngcc/ada/\n\t* init.c (__gnat_error_handler): Remove register keyword.", "tree": {"sha": "56e9ab5cb0791a523ac718f571ec2318af70a9e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e9ab5cb0791a523ac718f571ec2318af70a9e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76898cec437561a5e74d92b98f4631b80300409d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76898cec437561a5e74d92b98f4631b80300409d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76898cec437561a5e74d92b98f4631b80300409d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76898cec437561a5e74d92b98f4631b80300409d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74045879770ace0b14f0f809c8e795069044cf41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74045879770ace0b14f0f809c8e795069044cf41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74045879770ace0b14f0f809c8e795069044cf41"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "c48e2445ae8b46a6db143ac2bf1671e212f140d9", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -1989,7 +1989,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n      anything else.\n      This mechanism is only need in kernel mode. */\n #if !(defined (__RTP__) || defined (VTHREADS)) && ((CPU == PPCE500V2) || (CPU == PPC85XX))\n-  register unsigned msr;\n+  unsigned msr;\n   /* Read the MSR value */\n   asm volatile (\"mfmsr %0\" : \"=r\" (msr));\n   /* Force the SPE bit if not set.  */"}, {"sha": "25a2812a663742893b928398b0d3948e97f1905b", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -257,7 +257,7 @@\n #define ASM_OUTPUT_ALIGN(STREAM, POWER)\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      register int amount = 1 << (POWER);\t\t\\\n+      int amount = 1 << (POWER);\t\t\t\\\n \t\t\t\t\t\t\t\\\n       if (amount == 2)\t\t\t\t\t\\\n \tfprintf (STREAM, \"\\t.even\\n\");\t\t\t\\"}, {"sha": "698dd879934b935fca0246ed1e61fda8ecce4c90", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -1773,8 +1773,8 @@ function_arg_regno_p (int n)\n int\n symbolic_reference_mentioned_p (rtx op)\n {\n-  register const char *fmt;\n-  register int i;\n+  const char *fmt;\n+  int i;\n \n   if (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF)\n     return 1;\n@@ -1784,7 +1784,7 @@ symbolic_reference_mentioned_p (rtx op)\n     {\n       if (fmt[i] == 'E')\n \t{\n-\t  register int j;\n+\t  int j;\n \n \t  for (j = XVECLEN (op, i) - 1; j >= 0; j--)\n \t    if (symbolic_reference_mentioned_p (XVECEXP (op, i, j)))"}, {"sha": "f2482947e768f6f0f4531d74861fe7c775b1f5e9", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -1394,7 +1394,7 @@ epiphany_print_operand (FILE *file, rtx x, int code)\n static void\n epiphany_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n {\n-  register rtx base, index = 0;\n+  rtx base, index = 0;\n   int offset = 0;\n \n   switch (GET_CODE (addr))"}, {"sha": "4637703410f66e8bcd1ab5c6f5840f85fbf7999a", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -1553,7 +1553,7 @@\n   \"\"\n   \"*\n {\n-  register rtx target = operands[0];\n+  rtx target = operands[0];\n \n   if (GET_CODE (target) == CONST_INT)\n     return \\\"li\\\\t%@,%0\\\\n\\\\tjalr\\\\t%2,%@\\\";\n@@ -1641,7 +1641,7 @@\n   \"\"\n   \"*\n {\n-  register rtx target = operands[1];\n+  rtx target = operands[1];\n \n   if (GET_CODE (target) == CONST_INT)\n     return \\\"li\\\\t%@,%1\\\\n\\\\tjalr\\\\t%3,%@\\\";\n@@ -1678,7 +1678,7 @@\n   \"\"\n   \"*\n {\n-  register rtx target = operands[1];\n+  rtx target = operands[1];\n \n   if (GET_CODE (target) == CONST_INT)\n     return \\\"li\\\\t%@,%1\\\\n\\\\tjalr\\\\t%4,%@\\\";"}, {"sha": "6e8f367c80ac83c33a90793a803dae1bf5599f3c", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -991,7 +991,7 @@ static rtx\n microblaze_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t\t\t       machine_mode mode ATTRIBUTE_UNUSED)\n {\n-  register rtx xinsn = x, result;\n+  rtx xinsn = x, result;\n \n   if (GET_CODE (xinsn) == CONST\n       && flag_pic && pic_address_needs_scratch (xinsn))\n@@ -1011,10 +1011,10 @@ microblaze_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \n   if (GET_CODE (xinsn) == PLUS)\n     {\n-      register rtx xplus0 = XEXP (xinsn, 0);\n-      register rtx xplus1 = XEXP (xinsn, 1);\n-      register enum rtx_code code0 = GET_CODE (xplus0);\n-      register enum rtx_code code1 = GET_CODE (xplus1);\n+      rtx xplus0 = XEXP (xinsn, 0);\n+      rtx xplus1 = XEXP (xinsn, 1);\n+      enum rtx_code code0 = GET_CODE (xplus0);\n+      enum rtx_code code1 = GET_CODE (xplus1);\n \n       if (code0 != REG && code1 == REG)\n \t{\n@@ -1736,9 +1736,9 @@ microblaze_version_to_int (const char *version)\n static void\n microblaze_option_override (void)\n {\n-  register int i, start;\n-  register int regno;\n-  register machine_mode mode;\n+  int i, start;\n+  int regno;\n+  machine_mode mode;\n   int ver;\n \n   microblaze_section_threshold = (global_options_set.x_g_switch_value\n@@ -1891,11 +1891,11 @@ microblaze_option_override (void)\n   for (mode = VOIDmode;\n        mode != MAX_MACHINE_MODE; mode = (machine_mode) ((int) mode + 1))\n     {\n-      register int size = GET_MODE_SIZE (mode);\n+      int size = GET_MODE_SIZE (mode);\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t{\n-\t  register int ok;\n+\t  int ok;\n \n \t  if (mode == CCmode)\n \t    {\n@@ -2267,7 +2267,7 @@ microblaze_initial_elimination_offset (int from, int to)\n void\n print_operand (FILE * file, rtx op, int letter)\n {\n-  register enum rtx_code code;\n+  enum rtx_code code;\n \n   if (PRINT_OPERAND_PUNCT_VALID_P (letter))\n     {\n@@ -2406,7 +2406,7 @@ print_operand (FILE * file, rtx op, int letter)\n \n   else if (code == REG || code == SUBREG)\n     {\n-      register int regnum;\n+      int regnum;\n \n       if (code == REG)\n \tregnum = REGNO (op);\n@@ -2431,7 +2431,7 @@ print_operand (FILE * file, rtx op, int letter)\n         rtx mem_reg = XEXP (op, 0);\n         if (GET_CODE (mem_reg) == REG)\n         {\n-            register int regnum = REGNO (mem_reg);\n+            int regnum = REGNO (mem_reg);\n             fprintf (file, \"%s\", reg_names[regnum]);\n         }\n       }"}, {"sha": "6d77752cbfd0b7f20bb4294b818e4754fa779cc2", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76898cec437561a5e74d92b98f4631b80300409d/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=76898cec437561a5e74d92b98f4631b80300409d", "patch": "@@ -2107,8 +2107,8 @@\n   (use (reg:SI R_GOT))]\n   \"flag_pic\"\n   {\n-    register rtx target2 = gen_rtx_REG (Pmode, \n-\t\t\t      GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n+    rtx target2\n+      = gen_rtx_REG (Pmode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n     gen_rtx_CLOBBER (VOIDmode, target2);\n     return \"brlid\\tr15,%0\\;%#\";\n   }\n@@ -2122,9 +2122,9 @@\n   (clobber (reg:SI R_SR))]\n   \"\"\n   {\n-    register rtx target = operands[0];\n-    register rtx target2 = gen_rtx_REG (Pmode,\n-\t\t\t      GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n+    rtx target = operands[0];\n+    rtx target2\n+      = gen_rtx_REG (Pmode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n     if (GET_CODE (target) == SYMBOL_REF) {\n         if (microblaze_break_function_p (SYMBOL_REF_DECL (target))) {\n             gen_rtx_CLOBBER (VOIDmode, target2);\n@@ -2216,7 +2216,8 @@\n    (use (match_operand:SI 4 \"register_operand\"))]\n   \"flag_pic\"\n   { \n-    register rtx target2=gen_rtx_REG (Pmode,GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n+    rtx target2\n+      = gen_rtx_REG (Pmode,GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n \n     gen_rtx_CLOBBER (VOIDmode,target2);\n     return \"brlid\\tr15,%1\\;%#\";\n@@ -2232,8 +2233,9 @@\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"\"\n   { \n-    register rtx target = operands[1];\n-    register rtx target2=gen_rtx_REG (Pmode,GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n+    rtx target = operands[1];\n+    rtx target2\n+      = gen_rtx_REG (Pmode,GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n \n     if (GET_CODE (target) == SYMBOL_REF)\n     {"}]}