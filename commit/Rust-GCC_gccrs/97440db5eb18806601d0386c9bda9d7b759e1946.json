{"sha": "97440db5eb18806601d0386c9bda9d7b759e1946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0NDBkYjVlYjE4ODA2NjAxZDAzODZjOWJkYTlkN2I3NTllMTk0Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-01-23T15:09:08Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-01-23T15:09:08Z"}, "message": "Remove false positives for warnings that break LTO profiled\n\n\t* tree.h (tree_vec_elt_check): Workaround -Wstrict-overflow\n\tfalse positive during profiledbootstrap.\n\t* decl.c (attr_decl1): Workaround -Wmaybe-uninitialized\n\tfalse positive during profiledbootstrap by initializing them.\n\t* matchexp.c (match_mult_operand): Likewise.\n\t* module.c (write_atom): Likewise.\n\t(read_module): Likewise.\n\nFrom-SVN: r220042", "tree": {"sha": "bbb02f98da538862784e8a813e85f9f6b000d710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbb02f98da538862784e8a813e85f9f6b000d710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97440db5eb18806601d0386c9bda9d7b759e1946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97440db5eb18806601d0386c9bda9d7b759e1946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97440db5eb18806601d0386c9bda9d7b759e1946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97440db5eb18806601d0386c9bda9d7b759e1946/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c83622c6b1c95cdeb12fa5e6b0ef294c78eff16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c83622c6b1c95cdeb12fa5e6b0ef294c78eff16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c83622c6b1c95cdeb12fa5e6b0ef294c78eff16"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "2b53eed19552fe7123c5c3ef0a211302172357a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97440db5eb18806601d0386c9bda9d7b759e1946", "patch": "@@ -1,3 +1,8 @@\n+2015-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree.h (tree_vec_elt_check): Workaround -Wstrict-overflow\n+\tfalse positive during profiledbootstrap.\n+\n 2015-01-23  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/64672"}, {"sha": "26af04165987bbdd1aba25730023ebc8fb28bf3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=97440db5eb18806601d0386c9bda9d7b759e1946", "patch": "@@ -1,3 +1,11 @@\n+2015-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (attr_decl1): Workaround -Wmaybe-uninitialized\n+\tfalse positive during profiledbootstrap by initializing them.\n+\t* matchexp.c (match_mult_operand): Likewise.\n+\t* module.c (write_atom): Likewise.\n+\t(read_module): Likewise.\n+\n 2015-01-23  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/64672"}, {"sha": "cc35c65f268c84a6af6ae9df4bd4deb823eb6cd4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=97440db5eb18806601d0386c9bda9d7b759e1946", "patch": "@@ -6391,7 +6391,10 @@ attr_decl1 (void)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_array_spec *as;\n-  gfc_symbol *sym;\n+\n+  /* Workaround -Wmaybe-uninitialized false positive during\n+     profiledbootstrap by initializing them.  */\n+  gfc_symbol *sym = NULL;\n   locus var_locus;\n   match m;\n "}, {"sha": "fc35c8c055875d4005aab6e0d1d5afa95ecbe2ac", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=97440db5eb18806601d0386c9bda9d7b759e1946", "patch": "@@ -258,7 +258,9 @@ match_add_op (void)\n static match\n match_mult_operand (gfc_expr **result)\n {\n-  gfc_expr *e, *exp, *r;\n+  /* Workaround -Wmaybe-uninitialized false positive during\n+     profiledbootstrap by initializing them.  */\n+  gfc_expr *e = NULL, *exp, *r;\n   locus where;\n   match m;\n "}, {"sha": "4cfc0e202b570012ba82b69cd0d4ea8f4ec1a9b6", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=97440db5eb18806601d0386c9bda9d7b759e1946", "patch": "@@ -1536,7 +1536,10 @@ static void\n write_atom (atom_type atom, const void *v)\n {\n   char buffer[20];\n-  int i, len;\n+\n+  /* Workaround -Wmaybe-uninitialized false positive during\n+     profiledbootstrap by initializing them.  */\n+  int i = 0, len;\n   const char *p;\n \n   switch (atom)\n@@ -4908,7 +4911,9 @@ read_module (void)\n   const char *p;\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   int i;\n-  int ambiguous, j, nuse, symbol;\n+  /* Workaround -Wmaybe-uninitialized false positive during\n+     profiledbootstrap by initializing them.  */\n+  int ambiguous = 0, j, nuse, symbol = 0;\n   pointer_info *info, *q;\n   gfc_use_rename *u = NULL;\n   gfc_symtree *st;"}, {"sha": "6c69fce4f5196d6e1a28720f19af275f471e8f96", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97440db5eb18806601d0386c9bda9d7b759e1946/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=97440db5eb18806601d0386c9bda9d7b759e1946", "patch": "@@ -3050,6 +3050,13 @@ tree_int_cst_elt_check (tree __t, int __i,\n   return &CONST_CAST_TREE (__t)->int_cst.val[__i];\n }\n \n+/* Workaround -Wstrict-overflow false positive during profiledbootstrap.  */\n+\n+# if GCC_VERSION >= 4004\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wstrict-overflow\"\n+#endif\n+\n inline tree *\n tree_vec_elt_check (tree __t, int __i,\n                     const char *__f, int __l, const char *__g)\n@@ -3061,6 +3068,10 @@ tree_vec_elt_check (tree __t, int __i,\n   return &CONST_CAST_TREE (__t)->vec.a[__i];\n }\n \n+# if GCC_VERSION >= 4004\n+#pragma GCC diagnostic pop\n+#endif\n+\n inline tree *\n omp_clause_elt_check (tree __t, int __i,\n                       const char *__f, int __l, const char *__g)"}]}