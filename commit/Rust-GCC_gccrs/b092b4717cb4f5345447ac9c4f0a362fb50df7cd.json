{"sha": "b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5MmI0NzE3Y2I0ZjUzNDU0NDdhYzljNGYwYTM2MmZiNTBkZjdjZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-06-23T00:28:39Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-06-23T00:28:39Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1237", "tree": {"sha": "fee5950c3b8c1f35285119747f81f73356578eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee5950c3b8c1f35285119747f81f73356578eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/comments", "author": null, "committer": null, "parents": [{"sha": "23a900dc7795d56e75dbf870c3d9643693bea3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a900dc7795d56e75dbf870c3d9643693bea3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a900dc7795d56e75dbf870c3d9643693bea3e9"}], "stats": {"total": 843, "additions": 723, "deletions": 120}, "files": [{"sha": "eadbccac7ad16444f99281d7c292923608206156", "filename": "gcc/expr.c", "status": "modified", "additions": 94, "deletions": 7, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "patch": "@@ -355,13 +355,27 @@ convert_move (to, from, unsignedp)\n \t  return;\n \t}\n #endif\n+#ifdef HAVE_extendsfxf2\n+      if (HAVE_extendsfxf2 && from_mode == SFmode && to_mode == XFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendsfxf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n #ifdef HAVE_extendsftf2\n       if (HAVE_extendsftf2 && from_mode == SFmode && to_mode == TFmode)\n \t{\n \t  emit_unop_insn (CODE_FOR_extendsftf2, to, from, UNKNOWN);\n \t  return;\n \t}\n #endif\n+#ifdef HAVE_extenddfxf2\n+      if (HAVE_extenddfxf2 && from_mode == DFmode && to_mode == XFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extenddfxf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n #ifdef HAVE_extenddftf2\n       if (HAVE_extenddftf2 && from_mode == DFmode && to_mode == TFmode)\n \t{\n@@ -376,13 +390,27 @@ convert_move (to, from, unsignedp)\n \t  return;\n \t}\n #endif\n+#ifdef HAVE_truncxfsf2\n+      if (HAVE_truncxfsf2 && from_mode == XFmode && to_mode == SFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncxfsf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n #ifdef HAVE_trunctfsf2\n       if (HAVE_trunctfsf2 && from_mode == TFmode && to_mode == SFmode)\n \t{\n \t  emit_unop_insn (CODE_FOR_trunctfsf2, to, from, UNKNOWN);\n \t  return;\n \t}\n #endif\n+#ifdef HAVE_truncxfdf2\n+      if (HAVE_truncxfdf2 && from_mode == XFmode && to_mode == DFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncxfdf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n #ifdef HAVE_trunctfdf2\n       if (HAVE_trunctfdf2 && from_mode == TFmode && to_mode == DFmode)\n \t{\n@@ -391,13 +419,72 @@ convert_move (to, from, unsignedp)\n \t}\n #endif\n \n-      if (from_mode == SFmode && to_mode == DFmode)\n-\tlibcall = extendsfdf2_libfunc;\n-      else if (from_mode == DFmode && to_mode == SFmode)\n-\tlibcall = truncdfsf2_libfunc;\n-      else\n-\t/* This conversion is not implemented yet.  There aren't any TFmode\n-\t   library calls.  */\n+      libcall = (rtx) 0;\n+      switch (from_mode)\n+\t{\n+\tcase SFmode:\n+\t  switch (to_mode)\n+\t    {\n+\t    case DFmode:\n+\t      libcall = extendsfdf2_libfunc;\n+\t      break;\n+\n+\t    case XFmode:\n+\t      libcall = extendsfxf2_libfunc;\n+\t      break;\n+\n+\t    case TFmode:\n+\t      libcall = extendsftf2_libfunc;\n+\t      break;\n+\t    }\n+\t  break;\n+\n+\tcase DFmode:\n+\t  switch (to_mode)\n+\t    {\n+\t    case SFmode:\n+\t      libcall = truncdfsf2_libfunc;\n+\t      break;\n+\n+\t    case XFmode:\n+\t      libcall = extenddfxf2_libfunc;\n+\t      break;\n+\n+\t    case TFmode:\n+\t      libcall = extenddftf2_libfunc;\n+\t      break;\n+\t    }\n+\t  break;\n+\n+\tcase XFmode:\n+\t  switch (to_mode)\n+\t    {\n+\t    case SFmode:\n+\t      libcall = truncxfsf2_libfunc;\n+\t      break;\n+\n+\t    case DFmode:\n+\t      libcall = truncxfdf2_libfunc;\n+\t      break;\n+\t    }\n+\t  break;\n+\n+\tcase TFmode:\n+\t  switch (to_mode)\n+\t    {\n+\t    case SFmode:\n+\t      libcall = trunctfsf2_libfunc;\n+\t      break;\n+\n+\t    case DFmode:\n+\t      libcall = trunctfdf2_libfunc;\n+\t      break;\n+\t    }\n+\t  break;\n+\t}\n+\n+      if (libcall == (rtx) 0)\n+\t/* This conversion is not implemented yet.  */\n \tabort ();\n \n       emit_library_call (libcall, 1, to_mode, 1, from, from_mode);"}, {"sha": "2e5ae99c6bf5742d10e780b9c3368e9a061ee178", "filename": "gcc/expr.h", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "patch": "@@ -341,37 +341,99 @@ enum optab_methods\n    implicitly and not via optabs.  */\n \n extern rtx extendsfdf2_libfunc;\n+extern rtx extendsfxf2_libfunc;\n+extern rtx extendsftf2_libfunc;\n+extern rtx extenddfxf2_libfunc;\n+extern rtx extenddftf2_libfunc;\n+\n extern rtx truncdfsf2_libfunc;\n+extern rtx truncxfsf2_libfunc;\n+extern rtx trunctfsf2_libfunc;\n+extern rtx truncxfdf2_libfunc;\n+extern rtx trunctfdf2_libfunc;\n+\n extern rtx memcpy_libfunc;\n extern rtx bcopy_libfunc;\n extern rtx memcmp_libfunc;\n extern rtx bcmp_libfunc;\n extern rtx memset_libfunc;\n extern rtx bzero_libfunc;\n+\n extern rtx eqsf2_libfunc;\n extern rtx nesf2_libfunc;\n extern rtx gtsf2_libfunc;\n extern rtx gesf2_libfunc;\n extern rtx ltsf2_libfunc;\n extern rtx lesf2_libfunc;\n+\n extern rtx eqdf2_libfunc;\n extern rtx nedf2_libfunc;\n extern rtx gtdf2_libfunc;\n extern rtx gedf2_libfunc;\n extern rtx ltdf2_libfunc;\n extern rtx ledf2_libfunc;\n-extern rtx floatdisf_libfunc;\n+\n+extern rtx eqxf2_libfunc;\n+extern rtx nexf2_libfunc;\n+extern rtx gtxf2_libfunc;\n+extern rtx gexf2_libfunc;\n+extern rtx ltxf2_libfunc;\n+extern rtx lexf2_libfunc;\n+\n+extern rtx eqtf2_libfunc;\n+extern rtx netf2_libfunc;\n+extern rtx gttf2_libfunc;\n+extern rtx getf2_libfunc;\n+extern rtx lttf2_libfunc;\n+extern rtx letf2_libfunc;\n+\n extern rtx floatsisf_libfunc;\n-extern rtx floatdidf_libfunc;\n+extern rtx floatdisf_libfunc;\n+extern rtx floattisf_libfunc;\n+\n extern rtx floatsidf_libfunc;\n+extern rtx floatdidf_libfunc;\n+extern rtx floattidf_libfunc;\n+\n+extern rtx floatsixf_libfunc;\n+extern rtx floatdixf_libfunc;\n+extern rtx floattixf_libfunc;\n+\n+extern rtx floatsitf_libfunc;\n+extern rtx floatditf_libfunc;\n+extern rtx floattitf_libfunc;\n+\n extern rtx fixsfsi_libfunc;\n extern rtx fixsfdi_libfunc;\n+extern rtx fixsfti_libfunc;\n+\n extern rtx fixdfsi_libfunc;\n extern rtx fixdfdi_libfunc;\n+extern rtx fixdfti_libfunc;\n+\n+extern rtx fixxfsi_libfunc;\n+extern rtx fixxfdi_libfunc;\n+extern rtx fixxfti_libfunc;\n+\n+extern rtx fixtfsi_libfunc;\n+extern rtx fixtfdi_libfunc;\n+extern rtx fixtfti_libfunc;\n+\n extern rtx fixunssfsi_libfunc;\n extern rtx fixunssfdi_libfunc;\n+extern rtx fixunssfti_libfunc;\n+\n extern rtx fixunsdfsi_libfunc;\n extern rtx fixunsdfdi_libfunc;\n+extern rtx fixunsdfti_libfunc;\n+\n+extern rtx fixunsxfsi_libfunc;\n+extern rtx fixunsxfdi_libfunc;\n+extern rtx fixunsxfti_libfunc;\n+\n+extern rtx fixunstfsi_libfunc;\n+extern rtx fixunstfdi_libfunc;\n+extern rtx fixunstfti_libfunc;\n \f\n typedef rtx (*rtxfun) ();\n "}, {"sha": "509ee18c45d6c37bfa9c54b741fccea85653bd74", "filename": "gcc/optabs.c", "status": "modified", "additions": 565, "deletions": 111, "changes": 676, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b092b4717cb4f5345447ac9c4f0a362fb50df7cd/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=b092b4717cb4f5345447ac9c4f0a362fb50df7cd", "patch": "@@ -83,37 +83,99 @@ optab strlen_optab;\n    implicitly and not via optabs.  */\n \n rtx extendsfdf2_libfunc;\n+rtx extendsfxf2_libfunc;\n+rtx extendsftf2_libfunc;\n+rtx extenddfxf2_libfunc;\n+rtx extenddftf2_libfunc;\n+\n rtx truncdfsf2_libfunc;\n+rtx truncxfsf2_libfunc;\n+rtx trunctfsf2_libfunc;\n+rtx truncxfdf2_libfunc;\n+rtx trunctfdf2_libfunc;\n+\n rtx memcpy_libfunc;\n rtx bcopy_libfunc;\n rtx memcmp_libfunc;\n rtx bcmp_libfunc;\n rtx memset_libfunc;\n rtx bzero_libfunc;\n+\n rtx eqsf2_libfunc;\n rtx nesf2_libfunc;\n rtx gtsf2_libfunc;\n rtx gesf2_libfunc;\n rtx ltsf2_libfunc;\n rtx lesf2_libfunc;\n+\n rtx eqdf2_libfunc;\n rtx nedf2_libfunc;\n rtx gtdf2_libfunc;\n rtx gedf2_libfunc;\n rtx ltdf2_libfunc;\n rtx ledf2_libfunc;\n-rtx floatdisf_libfunc;\n+\n+rtx eqxf2_libfunc;\n+rtx nexf2_libfunc;\n+rtx gtxf2_libfunc;\n+rtx gexf2_libfunc;\n+rtx ltxf2_libfunc;\n+rtx lexf2_libfunc;\n+\n+rtx eqtf2_libfunc;\n+rtx netf2_libfunc;\n+rtx gttf2_libfunc;\n+rtx getf2_libfunc;\n+rtx lttf2_libfunc;\n+rtx letf2_libfunc;\n+\n rtx floatsisf_libfunc;\n-rtx floatdidf_libfunc;\n+rtx floatdisf_libfunc;\n+rtx floattisf_libfunc;\n+\n rtx floatsidf_libfunc;\n+rtx floatdidf_libfunc;\n+rtx floattidf_libfunc;\n+\n+rtx floatsixf_libfunc;\n+rtx floatdixf_libfunc;\n+rtx floattixf_libfunc;\n+\n+rtx floatsitf_libfunc;\n+rtx floatditf_libfunc;\n+rtx floattitf_libfunc;\n+\n rtx fixsfsi_libfunc;\n rtx fixsfdi_libfunc;\n+rtx fixsfti_libfunc;\n+\n rtx fixdfsi_libfunc;\n rtx fixdfdi_libfunc;\n+rtx fixdfti_libfunc;\n+\n+rtx fixxfsi_libfunc;\n+rtx fixxfdi_libfunc;\n+rtx fixxfti_libfunc;\n+\n+rtx fixtfsi_libfunc;\n+rtx fixtfdi_libfunc;\n+rtx fixtfti_libfunc;\n+\n rtx fixunssfsi_libfunc;\n rtx fixunssfdi_libfunc;\n+rtx fixunssfti_libfunc;\n+\n rtx fixunsdfsi_libfunc;\n rtx fixunsdfdi_libfunc;\n+rtx fixunsdfti_libfunc;\n+\n+rtx fixunsxfsi_libfunc;\n+rtx fixunsxfdi_libfunc;\n+rtx fixunsxfti_libfunc;\n+\n+rtx fixunstfsi_libfunc;\n+rtx fixunstfdi_libfunc;\n+rtx fixunstfti_libfunc;\n \n /* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n    gives the gen_function to make a branch to test that condition.  */\n@@ -1709,6 +1771,60 @@ emit_float_lib_cmp (x, y, comparison)\n \tlibfunc = ledf2_libfunc;\n \tbreak;\n       }\n+  else if (mode == XFmode)\n+    switch (comparison)\n+      {\n+      case EQ:\n+\tlibfunc = eqxf2_libfunc;\n+\tbreak;\n+\n+      case NE:\n+\tlibfunc = nexf2_libfunc;\n+\tbreak;\n+\n+      case GT:\n+\tlibfunc = gtxf2_libfunc;\n+\tbreak;\n+\n+      case GE:\n+\tlibfunc = gexf2_libfunc;\n+\tbreak;\n+\n+      case LT:\n+\tlibfunc = ltxf2_libfunc;\n+\tbreak;\n+\n+      case LE:\n+\tlibfunc = lexf2_libfunc;\n+\tbreak;\n+      }\n+  else if (mode == TFmode)\n+    switch (comparison)\n+      {\n+      case EQ:\n+\tlibfunc = eqtf2_libfunc;\n+\tbreak;\n+\n+      case NE:\n+\tlibfunc = netf2_libfunc;\n+\tbreak;\n+\n+      case GT:\n+\tlibfunc = gttf2_libfunc;\n+\tbreak;\n+\n+      case GE:\n+\tlibfunc = getf2_libfunc;\n+\tbreak;\n+\n+      case LT:\n+\tlibfunc = lttf2_libfunc;\n+\tbreak;\n+\n+      case LE:\n+\tlibfunc = letf2_libfunc;\n+\tbreak;\n+      }\n   else\n     {\n       enum machine_mode wider_mode;\n@@ -2090,6 +2206,27 @@ init_fixtab ()\n     fixtab[(int) DFmode][(int) TImode][0] = CODE_FOR_fixdfti2;\n #endif\n \n+#ifdef HAVE_fixxfqi2\n+  if (HAVE_fixxfqi2)\n+    fixtab[(int) XFmode][(int) QImode][0] = CODE_FOR_fixxfqi2;\n+#endif\n+#ifdef HAVE_fixxfhi2\n+  if (HAVE_fixxfhi2)\n+    fixtab[(int) XFmode][(int) HImode][0] = CODE_FOR_fixxfhi2;\n+#endif\n+#ifdef HAVE_fixxfsi2\n+  if (HAVE_fixxfsi2)\n+    fixtab[(int) XFmode][(int) SImode][0] = CODE_FOR_fixxfsi2;\n+#endif\n+#ifdef HAVE_fixxfdi2\n+  if (HAVE_fixxfdi2)\n+    fixtab[(int) XFmode][(int) DImode][0] = CODE_FOR_fixxfdi2;\n+#endif\n+#ifdef HAVE_fixxfti2\n+  if (HAVE_fixxfti2)\n+    fixtab[(int) XFmode][(int) TImode][0] = CODE_FOR_fixxfti2;\n+#endif\n+\n #ifdef HAVE_fixtfqi2\n   if (HAVE_fixtfqi2)\n     fixtab[(int) TFmode][(int) QImode][0] = CODE_FOR_fixtfqi2;\n@@ -2149,6 +2286,27 @@ init_fixtab ()\n     fixtab[(int) DFmode][(int) TImode][1] = CODE_FOR_fixunsdfti2;\n #endif\n \n+#ifdef HAVE_fixunsxfqi2\n+  if (HAVE_fixunsxfqi2)\n+    fixtab[(int) XFmode][(int) QImode][1] = CODE_FOR_fixunsxfqi2;\n+#endif\n+#ifdef HAVE_fixunsxfhi2\n+  if (HAVE_fixunsxfhi2)\n+    fixtab[(int) XFmode][(int) HImode][1] = CODE_FOR_fixunsxfhi2;\n+#endif\n+#ifdef HAVE_fixunsxfsi2\n+  if (HAVE_fixunsxfsi2)\n+    fixtab[(int) XFmode][(int) SImode][1] = CODE_FOR_fixunsxfsi2;\n+#endif\n+#ifdef HAVE_fixunsxfdi2\n+  if (HAVE_fixunsxfdi2)\n+    fixtab[(int) XFmode][(int) DImode][1] = CODE_FOR_fixunsxfdi2;\n+#endif\n+#ifdef HAVE_fixunsxfti2\n+  if (HAVE_fixunsxfti2)\n+    fixtab[(int) XFmode][(int) TImode][1] = CODE_FOR_fixunsxfti2;\n+#endif\n+\n #ifdef HAVE_fixunstfqi2\n   if (HAVE_fixunstfqi2)\n     fixtab[(int) TFmode][(int) QImode][1] = CODE_FOR_fixunstfqi2;\n@@ -2208,6 +2366,27 @@ init_fixtab ()\n     fixtrunctab[(int) DFmode][(int) TImode][0] = CODE_FOR_fix_truncdfti2;\n #endif\n \n+#ifdef HAVE_fix_truncxfqi2\n+  if (HAVE_fix_truncxfqi2)\n+    fixtrunctab[(int) XFmode][(int) QImode][0] = CODE_FOR_fix_truncxfqi2;\n+#endif\n+#ifdef HAVE_fix_truncxfhi2\n+  if (HAVE_fix_truncxfhi2)\n+    fixtrunctab[(int) XFmode][(int) HImode][0] = CODE_FOR_fix_truncxfhi2;\n+#endif\n+#ifdef HAVE_fix_truncxfsi2\n+  if (HAVE_fix_truncxfsi2)\n+    fixtrunctab[(int) XFmode][(int) SImode][0] = CODE_FOR_fix_truncxfsi2;\n+#endif\n+#ifdef HAVE_fix_truncxfdi2\n+  if (HAVE_fix_truncxfdi2)\n+    fixtrunctab[(int) XFmode][(int) DImode][0] = CODE_FOR_fix_truncxfdi2;\n+#endif\n+#ifdef HAVE_fix_truncxfti2\n+  if (HAVE_fix_truncxfti2)\n+    fixtrunctab[(int) XFmode][(int) TImode][0] = CODE_FOR_fix_truncxfti2;\n+#endif\n+\n #ifdef HAVE_fix_trunctfqi2\n   if (HAVE_fix_trunctfqi2)\n     fixtrunctab[(int) TFmode][(int) QImode][0] = CODE_FOR_fix_trunctfqi2;\n@@ -2267,6 +2446,27 @@ init_fixtab ()\n     fixtrunctab[(int) DFmode][(int) TImode][1] = CODE_FOR_fixuns_truncdfti2;\n #endif\n \n+#ifdef HAVE_fixuns_truncxfqi2\n+  if (HAVE_fixuns_truncxfqi2)\n+    fixtrunctab[(int) XFmode][(int) QImode][1] = CODE_FOR_fixuns_truncxfqi2;\n+#endif\n+#ifdef HAVE_fixuns_truncxfhi2\n+  if (HAVE_fixuns_truncxfhi2)\n+    fixtrunctab[(int) XFmode][(int) HImode][1] = CODE_FOR_fixuns_truncxfhi2;\n+#endif\n+#ifdef HAVE_fixuns_truncxfsi2\n+  if (HAVE_fixuns_truncxfsi2)\n+    fixtrunctab[(int) XFmode][(int) SImode][1] = CODE_FOR_fixuns_truncxfsi2;\n+#endif\n+#ifdef HAVE_fixuns_truncxfdi2\n+  if (HAVE_fixuns_truncxfdi2)\n+    fixtrunctab[(int) XFmode][(int) DImode][1] = CODE_FOR_fixuns_truncxfdi2;\n+#endif\n+#ifdef HAVE_fixuns_truncxfti2\n+  if (HAVE_fixuns_truncxfti2)\n+    fixtrunctab[(int) XFmode][(int) TImode][1] = CODE_FOR_fixuns_truncxfti2;\n+#endif\n+\n #ifdef HAVE_fixuns_trunctfqi2\n   if (HAVE_fixuns_trunctfqi2)\n     fixtrunctab[(int) TFmode][(int) QImode][1] = CODE_FOR_fixuns_trunctfqi2;\n@@ -2352,6 +2552,27 @@ init_floattab ()\n     floattab[(int) DFmode][(int) TImode][0] = CODE_FOR_floattidf2;\n #endif\n \n+#ifdef HAVE_floatqixf2\n+  if (HAVE_floatqixf2)\n+    floattab[(int) XFmode][(int) QImode][0] = CODE_FOR_floatqixf2;\n+#endif\n+#ifdef HAVE_floathixf2\n+  if (HAVE_floathixf2)\n+    floattab[(int) XFmode][(int) HImode][0] = CODE_FOR_floathixf2;\n+#endif\n+#ifdef HAVE_floatsixf2\n+  if (HAVE_floatsixf2)\n+    floattab[(int) XFmode][(int) SImode][0] = CODE_FOR_floatsixf2;\n+#endif\n+#ifdef HAVE_floatdixf2\n+  if (HAVE_floatdixf2)\n+    floattab[(int) XFmode][(int) DImode][0] = CODE_FOR_floatdixf2;\n+#endif\n+#ifdef HAVE_floattixf2\n+  if (HAVE_floattixf2)\n+    floattab[(int) XFmode][(int) TImode][0] = CODE_FOR_floattixf2;\n+#endif\n+\n #ifdef HAVE_floatqitf2\n   if (HAVE_floatqitf2)\n     floattab[(int) TFmode][(int) QImode][0] = CODE_FOR_floatqitf2;\n@@ -2415,6 +2636,27 @@ init_floattab ()\n     floattab[(int) DFmode][(int) TImode][1] = CODE_FOR_floatunstidf2;\n #endif\n \n+#ifdef HAVE_floatunsqixf2\n+  if (HAVE_floatunsqixf2)\n+    floattab[(int) XFmode][(int) QImode][1] = CODE_FOR_floatunsqixf2;\n+#endif\n+#ifdef HAVE_floatunshixf2\n+  if (HAVE_floatunshixf2)\n+    floattab[(int) XFmode][(int) HImode][1] = CODE_FOR_floatunshixf2;\n+#endif\n+#ifdef HAVE_floatunssixf2\n+  if (HAVE_floatunssixf2)\n+    floattab[(int) XFmode][(int) SImode][1] = CODE_FOR_floatunssixf2;\n+#endif\n+#ifdef HAVE_floatunsdixf2\n+  if (HAVE_floatunsdixf2)\n+    floattab[(int) XFmode][(int) DImode][1] = CODE_FOR_floatunsdixf2;\n+#endif\n+#ifdef HAVE_floatunstixf2\n+  if (HAVE_floatunstixf2)\n+    floattab[(int) XFmode][(int) TImode][1] = CODE_FOR_floatunstixf2;\n+#endif\n+\n #ifdef HAVE_floatunsqitf2\n   if (HAVE_floatunsqitf2)\n     floattab[(int) TFmode][(int) QImode][1] = CODE_FOR_floatunsqitf2;\n@@ -2541,8 +2783,8 @@ expand_float (to, from, unsignedp)\n   else\n #endif\n \n-  /* No hardware instruction available; call a library\n-     to convert from SImode or DImode into SFmode or DFmode.  */\n+  /* No hardware instruction available; call a library rotine to convert from\n+     SImode, DImode, or TImode into SFmode, DFmode, XFmode, or TFmode.  */\n     {\n       rtx libfcn;\n       rtx insns;\n@@ -2563,6 +2805,8 @@ expand_float (to, from, unsignedp)\n \t    libfcn = floatsisf_libfunc;\n \t  else if (GET_MODE (from) == DImode)\n \t    libfcn = floatdisf_libfunc;\n+\t  else if (GET_MODE (from) == TImode)\n+\t    libfcn = floattisf_libfunc;\n \t  else\n \t    abort ();\n \t}\n@@ -2572,6 +2816,30 @@ expand_float (to, from, unsignedp)\n \t    libfcn = floatsidf_libfunc;\n \t  else if (GET_MODE (from) == DImode)\n \t    libfcn = floatdidf_libfunc;\n+\t  else if (GET_MODE (from) == TImode)\n+\t    libfcn = floattidf_libfunc;\n+\t  else\n+\t    abort ();\n+\t}\n+      else if (GET_MODE (to) == XFmode)\n+\t{\n+\t  if (GET_MODE (from) == SImode)\n+\t    libfcn = floatsixf_libfunc;\n+\t  else if (GET_MODE (from) == DImode)\n+\t    libfcn = floatdixf_libfunc;\n+\t  else if (GET_MODE (from) == TImode)\n+\t    libfcn = floattixf_libfunc;\n+\t  else\n+\t    abort ();\n+\t}\n+      else if (GET_MODE (to) == TFmode)\n+\t{\n+\t  if (GET_MODE (from) == SImode)\n+\t    libfcn = floatsitf_libfunc;\n+\t  else if (GET_MODE (from) == DImode)\n+\t    libfcn = floatditf_libfunc;\n+\t  else if (GET_MODE (from) == TImode)\n+\t    libfcn = floattitf_libfunc;\n \t  else\n \t    abort ();\n \t}\n@@ -2749,6 +3017,8 @@ expand_fix (to, from, unsignedp)\n \tlibfcn = unsignedp ? fixunssfsi_libfunc : fixsfsi_libfunc;\n       else if (GET_MODE (to) == DImode)\n \tlibfcn = unsignedp ? fixunssfdi_libfunc : fixsfdi_libfunc;\n+      else if (GET_MODE (to) == TImode)\n+\tlibfcn = unsignedp ? fixunssfti_libfunc : fixsfti_libfunc;\n       else\n \tabort ();\n     }\n@@ -2758,6 +3028,30 @@ expand_fix (to, from, unsignedp)\n \tlibfcn = unsignedp ? fixunsdfsi_libfunc : fixdfsi_libfunc;\n       else if (GET_MODE (to) == DImode)\n \tlibfcn = unsignedp ? fixunsdfdi_libfunc : fixdfdi_libfunc;\n+      else if (GET_MODE (to) == TImode)\n+\tlibfcn = unsignedp ? fixunsdfti_libfunc : fixdfti_libfunc;\n+      else\n+\tabort ();\n+    }\n+  else if (GET_MODE (from) == XFmode)\n+    {\n+      if (GET_MODE (to) == SImode)\n+\tlibfcn = unsignedp ? fixunsxfsi_libfunc : fixxfsi_libfunc;\n+      else if (GET_MODE (to) == DImode)\n+\tlibfcn = unsignedp ? fixunsxfdi_libfunc : fixxfdi_libfunc;\n+      else if (GET_MODE (to) == TImode)\n+\tlibfcn = unsignedp ? fixunsxfti_libfunc : fixxfti_libfunc;\n+      else\n+\tabort ();\n+    }\n+  else if (GET_MODE (from) == TFmode)\n+    {\n+      if (GET_MODE (to) == SImode)\n+\tlibfcn = unsignedp ? fixunstfsi_libfunc : fixtfsi_libfunc;\n+      else if (GET_MODE (to) == DImode)\n+\tlibfcn = unsignedp ? fixunstfdi_libfunc : fixtfdi_libfunc;\n+      else if (GET_MODE (to) == TImode)\n+\tlibfcn = unsignedp ? fixunstfti_libfunc : fixtfti_libfunc;\n       else\n \tabort ();\n     }\n@@ -2806,6 +3100,85 @@ init_optab (code)\n   return op;\n }\n \n+/* Initialize the libfunc fields of an entire group of entries in some\n+   optab.  Each entry is set equal to a string consisting of a leading\n+   pair of underscores followed by a generic operation name followed by\n+   a mode name (downshifted to lower case) followed by a single character\n+   representing the number of operands for the given operation (which is\n+   usually one of the characters '2', '3', or '4').\n+\n+   OPTABLE is the table in which libfunc fields are to be initialized.\n+   FIRST_MODE is the first machine mode index in the given optab to\n+     initialize.\n+   LAST_MODE is the last machine mode index in the given optab to\n+     initialize.\n+   OPNAME is the generic (string) name of the operation.\n+   SUFFIX is the character which specifies the number of operands for\n+     the given generic operation.\n+*/\n+\n+static void\n+init_libfuncs (optable, first_mode, last_mode, opname, suffix)\n+    register optab optable;\n+    register char *opname;\n+    register enum machine_mode first_mode;\n+    register enum machine_mode last_mode;\n+    register char suffix;\n+{\n+  register enum machine_mode mode;\n+  register unsigned opname_len = strlen (opname);\n+\n+  for (mode = first_mode; mode <= last_mode; mode++)\n+    {\n+      register char *mname = mode_name[(int) mode];\n+      register unsigned mname_len = strlen (mname);\n+      register char *libfunc_name\n+\t= (char *) xmalloc (2 + opname_len + mname_len + 1 + 1);\n+      register char *p;\n+      register char *q;\n+\n+      p = libfunc_name;\n+      *p++ = '_';\n+      *p++ = '_';\n+      for (q = opname; *q; )\n+\t*p++ = *q++;\n+      for (q = mname; *q; q++)\n+\t*p++ = tolower (*q);\n+      *p++ = suffix;\n+      *p++ = '\\0';\n+      optable->handlers[(int) mode].libfunc\n+\t= gen_rtx (SYMBOL_REF, Pmode, libfunc_name);\n+    }\n+}\n+\n+/* Initialize the libfunc fields of an entire group of entries in some\n+   optab which correspond to all integer mode operations.  The parameters\n+   have the same meaning as similarly named ones for the `init_libfuncs'\n+   routine.  (See above).  */\n+\n+static void\n+init_integral_libfuncs (optable, opname, suffix)\n+    register optab optable;\n+    register char *opname;\n+    register char suffix;\n+{\n+  init_libfuncs (optable, SImode, TImode, opname, suffix);\n+}\n+\n+/* Initialize the libfunc fields of an entire group of entries in some\n+   optab which correspond to all real mode operations.  The parameters\n+   have the same meaning as similarly named ones for the `init_libfuncs'\n+   routine.  (See above).  */\n+\n+static void\n+init_floating_libfuncs (optable, opname, suffix)\n+    register optab optable;\n+    register char *opname;\n+    register char suffix;\n+{\n+  init_libfuncs (optable, SFmode, TFmode, opname, suffix);\n+}\n+\n /* Call this once to initialize the contents of the optabs\n    appropriately for the current target machine.  */\n \n@@ -2888,14 +3261,16 @@ init_optabs ()\n   if (HAVE_adddf3)\n     add_optab->handlers[(int) DFmode].insn_code = CODE_FOR_adddf3;\n #endif\n+#ifdef HAVE_addxf3\n+  if (HAVE_addxf3)\n+    add_optab->handlers[(int) XFmode].insn_code = CODE_FOR_addxf3;\n+#endif\n #ifdef HAVE_addtf3\n   if (HAVE_addtf3)\n     add_optab->handlers[(int) TFmode].insn_code = CODE_FOR_addtf3;\n #endif\n-  add_optab->handlers[(int) SFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__addsf3\");\n-  add_optab->handlers[(int) DFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__adddf3\");\n+  init_integral_libfuncs (add_optab, \"add\", '3');\n+  init_floating_libfuncs (add_optab, \"add\", '3');\n \n #ifdef HAVE_subqi3\n   if (HAVE_subqi3)\n@@ -2929,14 +3304,16 @@ init_optabs ()\n   if (HAVE_subdf3)\n     sub_optab->handlers[(int) DFmode].insn_code = CODE_FOR_subdf3;\n #endif\n+#ifdef HAVE_subxf3\n+  if (HAVE_subxf3)\n+    sub_optab->handlers[(int) XFmode].insn_code = CODE_FOR_subxf3;\n+#endif\n #ifdef HAVE_subtf3\n   if (HAVE_subtf3)\n     sub_optab->handlers[(int) TFmode].insn_code = CODE_FOR_subtf3;\n #endif\n-  sub_optab->handlers[(int) SFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__subsf3\");\n-  sub_optab->handlers[(int) DFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__subdf3\");\n+  init_integral_libfuncs (sub_optab, \"sub\", '3');\n+  init_floating_libfuncs (sub_optab, \"sub\", '3');\n \n #ifdef HAVE_mulqi3\n   if (HAVE_mulqi3)\n@@ -2970,29 +3347,29 @@ init_optabs ()\n   if (HAVE_muldf3)\n     smul_optab->handlers[(int) DFmode].insn_code = CODE_FOR_muldf3;\n #endif\n+#ifdef HAVE_mulxf3\n+  if (HAVE_mulxf3)\n+    smul_optab->handlers[(int) XFmode].insn_code = CODE_FOR_mulxf3;\n+#endif\n #ifdef HAVE_multf3\n   if (HAVE_multf3)\n     smul_optab->handlers[(int) TFmode].insn_code = CODE_FOR_multf3;\n #endif\n+  init_integral_libfuncs (smul_optab, \"mul\", '3');\n+  init_floating_libfuncs (smul_optab, \"mul\", '3');\n \n #ifdef MULSI3_LIBCALL\n   smul_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, MULSI3_LIBCALL);\n-#else\n-  smul_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__mulsi3\");\n #endif\n #ifdef MULDI3_LIBCALL\n   smul_optab->handlers[(int) DImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, MULDI3_LIBCALL);\n-#else\n-  smul_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__muldi3\");\n #endif\n-  smul_optab->handlers[(int) SFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__mulsf3\");\n-  smul_optab->handlers[(int) DFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__muldf3\");\n+#ifdef MULTI3_LIBCALL\n+  smul_optab->handlers[(int) TImode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, MULTI3_LIBCALL);\n+#endif\n \n #ifdef HAVE_mulqihi3\n   if (HAVE_mulqihi3)\n@@ -3052,20 +3429,19 @@ init_optabs ()\n   if (HAVE_divti3)\n     sdiv_optab->handlers[(int) TImode].insn_code = CODE_FOR_divti3;\n #endif\n+  init_integral_libfuncs (sdiv_optab, \"div\", '3');\n \n #ifdef DIVSI3_LIBCALL\n   sdiv_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, DIVSI3_LIBCALL);\n-#else\n-  sdiv_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__divsi3\");\n #endif\n #ifdef DIVDI3_LIBCALL\n   sdiv_optab->handlers[(int) DImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, DIVDI3_LIBCALL);\n-#else\n-  sdiv_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__divdi3\");\n+#endif\n+#ifdef DIVTI3_LIBCALL\n+  sdiv_optab->handlers[(int) TImode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, DIVTI3_LIBCALL);\n #endif\n \n #ifdef HAVE_udivqi3\n@@ -3092,20 +3468,19 @@ init_optabs ()\n   if (HAVE_udivti3)\n     udiv_optab->handlers[(int) TImode].insn_code = CODE_FOR_udivti3;\n #endif\n+  init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n \n #ifdef UDIVSI3_LIBCALL\n   udiv_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, UDIVSI3_LIBCALL);\n-#else\n-  udiv_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__udivsi3\");\n #endif\n #ifdef UDIVDI3_LIBCALL\n   udiv_optab->handlers[(int) DImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, UDIVDI3_LIBCALL);\n-#else\n-  udiv_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__udivdi3\");\n+#endif\n+#ifdef UDIVTI3_LIBCALL\n+  udiv_optab->handlers[(int) TImode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, UDIVTI3_LIBCALL);\n #endif\n \n #ifdef HAVE_divmodqi4\n@@ -3128,6 +3503,7 @@ init_optabs ()\n   if (HAVE_divmodti4)\n     sdivmod_optab->handlers[(int) TImode].insn_code = CODE_FOR_divmodti4;\n #endif\n+  init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n \n #ifdef HAVE_udivmodqi4\n   if (HAVE_udivmodqi4)\n@@ -3149,6 +3525,7 @@ init_optabs ()\n   if (HAVE_udivmodti4)\n     udivmod_optab->handlers[(int) TImode].insn_code = CODE_FOR_udivmodti4;\n #endif\n+  init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n \n #ifdef HAVE_modqi3\n   if (HAVE_modqi3)\n@@ -3174,20 +3551,19 @@ init_optabs ()\n   if (HAVE_modti3)\n     smod_optab->handlers[(int) TImode].insn_code = CODE_FOR_modti3;\n #endif\n+  init_integral_libfuncs (smod_optab, \"mod\", '3');\n \n #ifdef MODSI3_LIBCALL\n   smod_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, MODSI3_LIBCALL);\n-#else\n-  smod_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__modsi3\");\n #endif\n #ifdef MODDI3_LIBCALL\n   smod_optab->handlers[(int) DImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, MODDI3_LIBCALL);\n-#else\n-  smod_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__moddi3\");\n+#endif\n+#ifdef MODTI3_LIBCALL\n+  smod_optab->handlers[(int) TImode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, MODTI3_LIBCALL);\n #endif\n \n #ifdef HAVE_umodqi3\n@@ -3214,20 +3590,19 @@ init_optabs ()\n   if (HAVE_umodti3)\n     umod_optab->handlers[(int) TImode].insn_code = CODE_FOR_umodti3;\n #endif\n+  init_integral_libfuncs (umod_optab, \"umod\", '3');\n \n #ifdef UMODSI3_LIBCALL\n   umod_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, UMODSI3_LIBCALL);\n-#else\n-  umod_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__umodsi3\");\n #endif\n #ifdef UMODDI3_LIBCALL\n   umod_optab->handlers[(int) DImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, UMODDI3_LIBCALL);\n-#else\n-  umod_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__umoddi3\");\n+#endif\n+#ifdef UMODTI3_LIBCALL\n+  umod_optab->handlers[(int) TImode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, UMODTI3_LIBCALL);\n #endif\n \n #ifdef HAVE_divsf3\n@@ -3238,14 +3613,15 @@ init_optabs ()\n   if (HAVE_divdf3)\n     flodiv_optab->handlers[(int) DFmode].insn_code = CODE_FOR_divdf3;\n #endif\n+#ifdef HAVE_divxf3\n+  if (HAVE_divxf3)\n+    flodiv_optab->handlers[(int) XFmode].insn_code = CODE_FOR_divxf3;\n+#endif\n #ifdef HAVE_divtf3\n   if (HAVE_divtf3)\n     flodiv_optab->handlers[(int) TFmode].insn_code = CODE_FOR_divtf3;\n #endif\n-  flodiv_optab->handlers[(int) SFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__divsf3\");\n-  flodiv_optab->handlers[(int) DFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__divdf3\");\n+  init_floating_libfuncs (flodiv_optab, \"div\", '3');\n \n #ifdef HAVE_ftruncsf2\n   if (HAVE_ftruncsf2)\n@@ -3255,10 +3631,15 @@ init_optabs ()\n   if (HAVE_ftruncdf2)\n     ftrunc_optab->handlers[(int) DFmode].insn_code = CODE_FOR_ftruncdf2;\n #endif\n+#ifdef HAVE_ftruncxf2\n+  if (HAVE_ftruncxf2)\n+    ftrunc_optab->handlers[(int) XFmode].insn_code = CODE_FOR_ftruncxf2;\n+#endif\n #ifdef HAVE_ftrunctf2\n   if (HAVE_ftrunctf2)\n     ftrunc_optab->handlers[(int) TFmode].insn_code = CODE_FOR_ftrunctf2;\n #endif\n+  init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n \n #ifdef HAVE_andqi3\n   if (HAVE_andqi3)\n@@ -3284,6 +3665,7 @@ init_optabs ()\n   if (HAVE_andti3)\n     and_optab->handlers[(int) TImode].insn_code = CODE_FOR_andti3;\n #endif\n+  init_integral_libfuncs (and_optab, \"and\", '3');\n \n #ifdef HAVE_iorqi3\n   if (HAVE_iorqi3)\n@@ -3309,6 +3691,7 @@ init_optabs ()\n   if (HAVE_iorti3)\n     ior_optab->handlers[(int) TImode].insn_code = CODE_FOR_iorti3;\n #endif\n+  init_integral_libfuncs (ior_optab, \"ior\", '3');\n \n #ifdef HAVE_xorqi3\n   if (HAVE_xorqi3)\n@@ -3334,6 +3717,7 @@ init_optabs ()\n   if (HAVE_xorti3)\n     xor_optab->handlers[(int) TImode].insn_code = CODE_FOR_xorti3;\n #endif\n+  init_integral_libfuncs (xor_optab, \"xor\", '3');\n \n #ifdef HAVE_ashlqi3\n   if (HAVE_ashlqi3)\n@@ -3359,10 +3743,7 @@ init_optabs ()\n   if (HAVE_ashlti3)\n     ashl_optab->handlers[(int) TImode].insn_code = CODE_FOR_ashlti3;\n #endif\n-  ashl_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__ashlsi3\");\n-  ashl_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__ashldi3\");\n+  init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n \n #ifdef HAVE_ashrqi3\n   if (HAVE_ashrqi3)\n@@ -3388,10 +3769,7 @@ init_optabs ()\n   if (HAVE_ashrti3)\n     ashr_optab->handlers[(int) TImode].insn_code = CODE_FOR_ashrti3;\n #endif\n-  ashr_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__ashrsi3\");\n-  ashr_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__ashrdi3\");\n+  init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n \n #ifdef HAVE_lshlqi3\n   if (HAVE_lshlqi3)\n@@ -3417,10 +3795,7 @@ init_optabs ()\n   if (HAVE_lshlti3)\n     lshl_optab->handlers[(int) TImode].insn_code = CODE_FOR_lshlti3;\n #endif\n-  lshl_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__lshlsi3\");\n-  lshl_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__lshldi3\");\n+  init_integral_libfuncs (lshl_optab, \"lshl\", '3');\n \n #ifdef HAVE_lshrqi3\n   if (HAVE_lshrqi3)\n@@ -3446,10 +3821,7 @@ init_optabs ()\n   if (HAVE_lshrti3)\n     lshr_optab->handlers[(int) TImode].insn_code = CODE_FOR_lshrti3;\n #endif\n-  lshr_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__lshrsi3\");\n-  lshr_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__lshrdi3\");\n+  init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n \n #ifdef HAVE_rotlqi3\n   if (HAVE_rotlqi3)\n@@ -3475,10 +3847,7 @@ init_optabs ()\n   if (HAVE_rotlti3)\n     rotl_optab->handlers[(int) TImode].insn_code = CODE_FOR_rotlti3;\n #endif\n-  rotl_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__rotlsi3\");\n-  rotl_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__rotldi3\");\n+  init_integral_libfuncs (rotl_optab, \"rotl\", '3');\n \n #ifdef HAVE_rotrqi3\n   if (HAVE_rotrqi3)\n@@ -3504,10 +3873,7 @@ init_optabs ()\n   if (HAVE_rotrti3)\n     rotr_optab->handlers[(int) TImode].insn_code = CODE_FOR_rotrti3;\n #endif\n-  rotr_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__rotrsi3\");\n-  rotr_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__rotrdi3\");\n+  init_integral_libfuncs (rotr_optab, \"rotr\", '3');\n \n #ifdef HAVE_sminqi3\n   if (HAVE_sminqi3)\n@@ -3529,18 +3895,24 @@ init_optabs ()\n   if (HAVE_sminti3)\n     smin_optab->handlers[(int) TImode].insn_code = CODE_FOR_sminti3;\n #endif\n-#ifdef HAVE_sminsf3\n-  if (HAVE_sminsf3)\n-    smin_optab->handlers[(int) SFmode].insn_code = CODE_FOR_sminsf3;\n+#ifdef HAVE_minsf3\n+  if (HAVE_minsf3)\n+    smin_optab->handlers[(int) SFmode].insn_code = CODE_FOR_minsf3;\n+#endif\n+#ifdef HAVE_mindf3\n+  if (HAVE_mindf3)\n+    smin_optab->handlers[(int) DFmode].insn_code = CODE_FOR_mindf3;\n #endif\n-#ifdef HAVE_smindf3\n-  if (HAVE_smindf3)\n-    smin_optab->handlers[(int) DFmode].insn_code = CODE_FOR_smindf3;\n+#ifdef HAVE_minxf3\n+  if (HAVE_minxf3)\n+    smin_optab->handlers[(int) XFmode].insn_code = CODE_FOR_minxf3;\n #endif\n-#ifdef HAVE_smintf3\n-  if (HAVE_smintf3)\n-    smin_optab->handlers[(int) TFmode].insn_code = CODE_FOR_smintf3;\n+#ifdef HAVE_mintf3\n+  if (HAVE_mintf3)\n+    smin_optab->handlers[(int) TFmode].insn_code = CODE_FOR_mintf3;\n #endif\n+  init_integral_libfuncs (smin_optab, \"min\", '3');\n+  init_floating_libfuncs (smin_optab, \"min\", '3');\n \n #ifdef HAVE_smaxqi3\n   if (HAVE_smaxqi3)\n@@ -3562,18 +3934,24 @@ init_optabs ()\n   if (HAVE_smaxti3)\n     smax_optab->handlers[(int) TImode].insn_code = CODE_FOR_smaxti3;\n #endif\n-#ifdef HAVE_smaxsf3\n-  if (HAVE_smaxsf3)\n-    smax_optab->handlers[(int) SFmode].insn_code = CODE_FOR_smaxsf3;\n+#ifdef HAVE_maxsf3\n+  if (HAVE_maxsf3)\n+    smax_optab->handlers[(int) SFmode].insn_code = CODE_FOR_maxsf3;\n #endif\n-#ifdef HAVE_smaxdf3\n-  if (HAVE_smaxdf3)\n-    smax_optab->handlers[(int) DFmode].insn_code = CODE_FOR_smaxdf3;\n+#ifdef HAVE_maxdf3\n+  if (HAVE_maxdf3)\n+    smax_optab->handlers[(int) DFmode].insn_code = CODE_FOR_maxdf3;\n #endif\n-#ifdef HAVE_smaxtf3\n-  if (HAVE_smaxtf3)\n-    smax_optab->handlers[(int) TFmode].insn_code = CODE_FOR_smaxtf3;\n+#ifdef HAVE_maxxf3\n+  if (HAVE_maxxf3)\n+    smax_optab->handlers[(int) XFmode].insn_code = CODE_FOR_maxxf3;\n #endif\n+#ifdef HAVE_maxtf3\n+  if (HAVE_maxtf3)\n+    smax_optab->handlers[(int) TFmode].insn_code = CODE_FOR_maxtf3;\n+#endif\n+  init_integral_libfuncs (smax_optab, \"max\", '3');\n+  init_floating_libfuncs (smax_optab, \"max\", '3');\n \n #ifdef HAVE_uminqi3\n   if (HAVE_uminqi3)\n@@ -3595,6 +3973,7 @@ init_optabs ()\n   if (HAVE_uminti3)\n     umin_optab->handlers[(int) TImode].insn_code = CODE_FOR_uminti3;\n #endif\n+  init_integral_libfuncs (umin_optab, \"umin\", '3');\n \n #ifdef HAVE_umaxqi3\n   if (HAVE_umaxqi3)\n@@ -3616,6 +3995,7 @@ init_optabs ()\n   if (HAVE_umaxti3)\n     umax_optab->handlers[(int) TImode].insn_code = CODE_FOR_umaxti3;\n #endif\n+  init_integral_libfuncs (umax_optab, \"umax\", '3');\n \n #ifdef HAVE_negqi2\n   if (HAVE_negqi2)\n@@ -3649,18 +4029,16 @@ init_optabs ()\n   if (HAVE_negdf2)\n     neg_optab->handlers[(int) DFmode].insn_code = CODE_FOR_negdf2;\n #endif\n+#ifdef HAVE_negxf2\n+  if (HAVE_negxf2)\n+    neg_optab->handlers[(int) XFmode].insn_code = CODE_FOR_negxf2;\n+#endif\n #ifdef HAVE_negtf2\n   if (HAVE_negtf2)\n     neg_optab->handlers[(int) TFmode].insn_code = CODE_FOR_negtf2;\n #endif\n-  neg_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__negsi2\"); \n-  neg_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__negdi2\");\n-  neg_optab->handlers[(int) SFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__negsf2\");\n-  neg_optab->handlers[(int) DFmode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__negdf2\");\n+  init_integral_libfuncs (neg_optab, \"neg\", '2');\n+  init_floating_libfuncs (neg_optab, \"neg\", '2');\n \n #ifdef HAVE_absqi2\n   if (HAVE_absqi2)\n@@ -3694,6 +4072,10 @@ init_optabs ()\n   if (HAVE_absdf2)\n     abs_optab->handlers[(int) DFmode].insn_code = CODE_FOR_absdf2;\n #endif\n+#ifdef HAVE_absxf2\n+  if (HAVE_absxf2)\n+    abs_optab->handlers[(int) XFmode].insn_code = CODE_FOR_absxf2;\n+#endif\n #ifdef HAVE_abstf2\n   if (HAVE_abstf2)\n     abs_optab->handlers[(int) TFmode].insn_code = CODE_FOR_abstf2;\n@@ -3791,8 +4173,7 @@ init_optabs ()\n   if (HAVE_one_cmplti2)\n     one_cmpl_optab->handlers[(int) TImode].insn_code = CODE_FOR_one_cmplti2;\n #endif\n-  one_cmpl_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__one_cmplsi2\"); \n+  init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n \n #ifdef HAVE_ffsqi2\n   if (HAVE_ffsqi2)\n@@ -3818,8 +4199,7 @@ init_optabs ()\n   if (HAVE_ffsti2)\n     ffs_optab->handlers[(int) TImode].insn_code = CODE_FOR_ffsti2;\n #endif\n-  ffs_optab->handlers[(int) SImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"ffs\"); \n+  init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n \n #ifdef HAVE_movqi\n   if (HAVE_movqi)\n@@ -3853,6 +4233,10 @@ init_optabs ()\n   if (HAVE_movdf)\n     mov_optab->handlers[(int) DFmode].insn_code = CODE_FOR_movdf;\n #endif\n+#ifdef HAVE_movxf\n+  if (HAVE_movxf)\n+    mov_optab->handlers[(int) XFmode].insn_code = CODE_FOR_movxf;\n+#endif\n #ifdef HAVE_movtf\n   if (HAVE_movtf)\n     mov_optab->handlers[(int) TFmode].insn_code = CODE_FOR_movtf;\n@@ -3923,10 +4307,19 @@ init_optabs ()\n   if (HAVE_cmpdf)\n     cmp_optab->handlers[(int) DFmode].insn_code = CODE_FOR_cmpdf;\n #endif\n+#ifdef HAVE_cmpxf\n+  if (HAVE_cmpxf)\n+    cmp_optab->handlers[(int) XFmode].insn_code = CODE_FOR_cmpxf;\n+#endif\n #ifdef HAVE_cmptf\n   if (HAVE_cmptf)\n     cmp_optab->handlers[(int) TFmode].insn_code = CODE_FOR_cmptf;\n #endif\n+  /* Comparison libcalls for integers MUST come in pairs, signed/unsigned.  */\n+  init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n+  init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n+  init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n+\n #ifdef HAVE_tstqi\n   if (HAVE_tstqi)\n     tst_optab->handlers[(int) QImode].insn_code = CODE_FOR_tstqi;\n@@ -3959,15 +4352,14 @@ init_optabs ()\n   if (HAVE_tstdf)\n     tst_optab->handlers[(int) DFmode].insn_code = CODE_FOR_tstdf;\n #endif\n+#ifdef HAVE_tstxf\n+  if (HAVE_tstxf)\n+    tst_optab->handlers[(int) XFmode].insn_code = CODE_FOR_tstxf;\n+#endif\n #ifdef HAVE_tsttf\n   if (HAVE_tsttf)\n     tst_optab->handlers[(int) TFmode].insn_code = CODE_FOR_tsttf;\n #endif\n-  /* Comparison libcalls for integers MUST come in pairs, signed/unsigned.  */\n-  cmp_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__cmpdi2\");\n-  ucmp_optab->handlers[(int) DImode].libfunc\n-    = gen_rtx (SYMBOL_REF, Pmode, \"__ucmpdi2\");\n \n #ifdef HAVE_beq\n   if (HAVE_beq)\n@@ -4055,37 +4447,99 @@ init_optabs ()\n #endif\n \n   extendsfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extendsfdf2\");\n+  extendsfxf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extendsfxf2\");\n+  extendsftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extendsftf2\");\n+  extenddfxf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extenddfxf2\");\n+  extenddftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extenddftf2\");\n+\n   truncdfsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__truncdfsf2\");\n+  truncxfsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__truncxfsf2\");\n+  trunctfsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__trunctfsf2\");\n+  truncxfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__truncxfdf2\");\n+  trunctfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__trunctfdf2\");\n+\n   memcpy_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"memcpy\");\n   bcopy_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"bcopy\");\n   memcmp_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"memcmp\");\n   bcmp_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"bcmp\");\n   memset_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"memset\");\n   bzero_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"bzero\");\n+\n   eqsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__eqsf2\");\n   nesf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__nesf2\");\n   gtsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gtsf2\");\n   gesf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gesf2\");\n   ltsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__ltsf2\");\n   lesf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__lesf2\");\n+\n   eqdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__eqdf2\");\n   nedf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__nedf2\");\n   gtdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gtdf2\");\n   gedf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gedf2\");\n   ltdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__ltdf2\");\n   ledf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__ledf2\");\n-  floatdisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdisf\");\n+\n+  eqxf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__eqxf2\");\n+  nexf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__nexf2\");\n+  gtxf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gtxf2\");\n+  gexf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gexf2\");\n+  ltxf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__ltxf2\");\n+  lexf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__lexf2\");\n+\n+  eqtf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__eqtf2\");\n+  netf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__netf2\");\n+  gttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gttf2\");\n+  getf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__getf2\");\n+  lttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__lttf2\");\n+  letf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__letf2\");\n+\n   floatsisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsisf\");\n-  floatdidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdidf\");\n+  floatdisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdisf\");\n+  floattisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floattisf\");\n+\n   floatsidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsidf\");\n+  floatdidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdidf\");\n+  floattidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floattidf\");\n+\n+  floatsixf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsixf\");\n+  floatdixf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdixf\");\n+  floattixf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floattixf\");\n+\n+  floatsitf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsitf\");\n+  floatditf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatditf\");\n+  floattitf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floattitf\");\n+\n   fixsfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixsfsi\");\n   fixsfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixsfdi\");\n+  fixsfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixsfti\");\n+\n   fixdfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixdfsi\");\n   fixdfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixdfdi\");\n+  fixdfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixdfti\");\n+\n+  fixxfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixxfsi\");\n+  fixxfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixxfdi\");\n+  fixxfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixxfti\");\n+\n+  fixtfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixtfsi\");\n+  fixtfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixtfdi\");\n+  fixtfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixtfti\");\n+\n   fixunssfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunssfsi\");\n   fixunssfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunssfdi\");\n+  fixunssfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunssfti\");\n+\n   fixunsdfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsdfsi\");\n   fixunsdfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsdfdi\");\n+  fixunsdfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsdfti\");\n+\n+  fixunsxfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsxfsi\");\n+  fixunsxfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsxfdi\");\n+  fixunsxfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsxfti\");\n+\n+  fixunstfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunstfsi\");\n+  fixunstfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunstfdi\");\n+  fixunstfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunstfti\");\n }\n \f\n #ifdef BROKEN_LDEXP"}]}