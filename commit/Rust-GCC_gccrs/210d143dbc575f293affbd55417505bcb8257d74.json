{"sha": "210d143dbc575f293affbd55417505bcb8257d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEwZDE0M2RiYzU3NWYyOTNhZmZiZDU1NDE3NTA1YmNiODI1N2Q3NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T14:07:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T14:11:27Z"}, "message": "c++: Mangling for modules\n\nThis is the mangling changes for modules.  These were developed in\ncollaboration with clang, which also implemements the same ABI (or\nplans to, I do not think the global init is in clang).  The global\ninit mangling is captured in\nhttps://github.com/itanium-cxx-abi/cxx-abi/issues/99\n\n\tgcc/cp/\n\t* cp-tree.h (mangle_module_substitution, mangle_identifier)\n\t(mangle_module_global_init): Declare.\n\t* mangle.c (struct globals): Add mod field.\n\t (mangle_module_substitution, mangle_identifier)\n\t(mangle_module_global_init): Define.\n\t(write_module, maybe_write_module): New.\n\t(write_name): Call it.\n\t(start_mangling): Clear mod field.\n\t(finish_mangling_internal): Adjust.\n\t* module.cc (mangle_module, mangle_module_fini)\n\t(get_originating_module): Stubs.", "tree": {"sha": "4ef923731b7db45f1fb166c568ce159bf9080f40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef923731b7db45f1fb166c568ce159bf9080f40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/210d143dbc575f293affbd55417505bcb8257d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210d143dbc575f293affbd55417505bcb8257d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210d143dbc575f293affbd55417505bcb8257d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210d143dbc575f293affbd55417505bcb8257d74/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edbbf7363cff62fc7ff536b5fa64e39f5a4d6496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbbf7363cff62fc7ff536b5fa64e39f5a4d6496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbbf7363cff62fc7ff536b5fa64e39f5a4d6496"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "f11cf87f190cb258c286dcd9595a3a5f3602f9a6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d143dbc575f293affbd55417505bcb8257d74/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d143dbc575f293affbd55417505bcb8257d74/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=210d143dbc575f293affbd55417505bcb8257d74", "patch": "@@ -7916,6 +7916,9 @@ extern tree mangle_template_parm_object\t\t(tree);\n extern char *get_mangled_vtable_map_var_name    (tree);\n extern bool mangle_return_type_p\t\t(tree);\n extern tree mangle_decomp\t\t\t(tree, vec<tree> &);\n+extern void mangle_module_substitution\t\t(int);\n+extern void mangle_identifier\t\t\t(char, tree);\n+extern tree mangle_module_global_init\t\t(int);\n \n /* in dump.c */\n extern bool cp_dump_tree\t\t\t(void *, tree);"}, {"sha": "c1d9c737a165d6cde80d5bf48515140b2365f47a", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 81, "deletions": 3, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d143dbc575f293affbd55417505bcb8257d74/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d143dbc575f293affbd55417505bcb8257d74/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=210d143dbc575f293affbd55417505bcb8257d74", "patch": "@@ -117,6 +117,9 @@ struct GTY(()) globals {\n \n   /* True if the mangling will be different in C++17 mode.  */\n   bool need_cxx17_warning;\n+\n+  /* True if we mangled a module name.  */\n+  bool mod;\n };\n \n static GTY (()) globals G;\n@@ -832,6 +835,62 @@ write_encoding (const tree decl)\n     }\n }\n \n+/* Interface to substitution and identifer mangling, used by the\n+   module name mangler.  */\n+\n+void\n+mangle_module_substitution (int v)\n+{\n+  if (v < 10)\n+    {\n+      write_char ('_');\n+      write_char ('0' + v);\n+    }\n+  else\n+    {\n+      write_char ('W');\n+      write_unsigned_number (v - 10);\n+      write_char ('_');\n+    }\n+}\n+\n+void\n+mangle_identifier (char c, tree id)\n+{\n+  if (c)\n+    write_char (c);\n+  write_source_name (id);\n+}\n+\n+/* If the outermost non-namespace context (including DECL itself) is\n+   a module-linkage decl, mangle the module information.  For module\n+   global initializers we need to include the partition part.\n+\n+   <module-name> ::= W <module-id>+ E\n+   <module-id> :: <unqualified-name>\n+               || _ <digit>  ;; short backref\n+\t       || W <number> _  ;; long backref\n+               || P <module-id> ;; partition introducer\n+*/\n+\n+static void\n+write_module (int m, bool include_partition)\n+{\n+  G.mod = true;\n+\n+  write_char ('W');\n+  mangle_module (m, include_partition);\n+  write_char ('E');\n+}\n+\n+static void\n+maybe_write_module (tree decl)\n+{\n+  int m = get_originating_module (decl, true);\n+  if (m >= 0)\n+    write_module (m, false);\n+}\n+\n /* Lambdas can have a bit more context for mangling, specifically VAR_DECL\n    or PARM_DECL context, which doesn't belong in DECL_CONTEXT.  */\n \n@@ -894,6 +953,9 @@ write_name (tree decl, const int ignore_local_scope)\n       decl = TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (decl)));\n     }\n \n+  if (modules_p ())\n+    maybe_write_module (decl);\n+\n   context = decl_mangling_context (decl);\n \n   gcc_assert (context != NULL_TREE);\n@@ -3825,21 +3887,23 @@ start_mangling (const tree entity)\n   G.entity = entity;\n   G.need_abi_warning = false;\n   G.need_cxx17_warning = false;\n+  G.mod = false;\n   obstack_free (&name_obstack, name_base);\n   mangle_obstack = &name_obstack;\n   name_base = obstack_alloc (&name_obstack, 0);\n }\n \n-/* Done with mangling. If WARN is true, and the name of G.entity will\n-   be mangled differently in a future version of the ABI, issue a\n-   warning.  */\n+/* Done with mangling.  Release the data.  */\n \n static void\n finish_mangling_internal (void)\n {\n   /* Clear all the substitutions.  */\n   vec_safe_truncate (G.substitutions, 0);\n \n+  if (G.mod)\n+    mangle_module_fini ();\n+\n   /* Null-terminate the string.  */\n   write_char ('\\0');\n }\n@@ -3884,6 +3948,20 @@ init_mangle (void)\n   subst_identifiers[SUBID_BASIC_IOSTREAM] = get_identifier (\"basic_iostream\");\n }\n \n+/* Generate a mangling for MODULE's global initializer fn.  */\n+\n+tree\n+mangle_module_global_init (int module)\n+{\n+  start_mangling (NULL_TREE);\n+\n+  write_string (\"_ZGI\");\n+  write_module (module, true);\n+  write_char ('v');\n+\n+  return finish_mangling_get_identifier ();\n+}\n+\n /* Generate the mangled name of DECL.  */\n \n static tree"}, {"sha": "24580c70907d74394da982103d6d6812942f86fd", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d143dbc575f293affbd55417505bcb8257d74/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d143dbc575f293affbd55417505bcb8257d74/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=210d143dbc575f293affbd55417505bcb8257d74", "patch": "@@ -70,6 +70,23 @@ get_module (tree, module_state *, bool)\n   return nullptr;\n }\n \n+\n+void\n+mangle_module (int, bool)\n+{\n+}\n+\n+void\n+mangle_module_fini ()\n+{\n+}\n+\n+int\n+get_originating_module (tree, bool)\n+{\n+  return 0;\n+}\n+\n module_state *\n preprocess_module (module_state *, unsigned, bool, bool, bool, cpp_reader *)\n {"}]}