{"sha": "b31e65bb600deccb25cdac88b8db1144066c307e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxZTY1YmI2MDBkZWNjYjI1Y2RhYzg4YjhkYjExNDQwNjZjMzA3ZQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-06-03T11:56:24Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-06-03T11:56:24Z"}, "message": "Detect EXT patterns to vec_perm_const, use for EXT intrinsics.\n\n(part 2, fix ICE at -O0)\n\n\t* config/aarch64/aarch64.c (aarch64_evpc_ext): allow and handle\n\tlocation == 0.\n\nFrom-SVN: r211177", "tree": {"sha": "836146a4bce19c2ad78a707453735fb5fbf1a177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836146a4bce19c2ad78a707453735fb5fbf1a177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b31e65bb600deccb25cdac88b8db1144066c307e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31e65bb600deccb25cdac88b8db1144066c307e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31e65bb600deccb25cdac88b8db1144066c307e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31e65bb600deccb25cdac88b8db1144066c307e/comments", "author": null, "committer": null, "parents": [{"sha": "923fcec3d8427c6169979294ea5f2a5e11cfd4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923fcec3d8427c6169979294ea5f2a5e11cfd4cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923fcec3d8427c6169979294ea5f2a5e11cfd4cf"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "b35b44492d88f8d91df6e143e38dc050c4284313", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31e65bb600deccb25cdac88b8db1144066c307e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31e65bb600deccb25cdac88b8db1144066c307e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b31e65bb600deccb25cdac88b8db1144066c307e", "patch": "@@ -1,3 +1,8 @@\n+2014-06-03  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_evpc_ext): allow and handle\n+\tlocation == 0.\n+\n 2014-06-03  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_rev<REVERSE:rev-op><mode>):"}, {"sha": "961e5c95f8cfdcd964a976e3513c4ee208e8e59e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31e65bb600deccb25cdac88b8db1144066c307e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31e65bb600deccb25cdac88b8db1144066c307e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b31e65bb600deccb25cdac88b8db1144066c307e", "patch": "@@ -9018,9 +9018,6 @@ aarch64_evpc_ext (struct expand_vec_perm_d *d)\n         return false;\n     }\n \n-  /* The mid-end handles masks that just return one of the input vectors.  */\n-  gcc_assert (location != 0);\n-\n   switch (d->vmode)\n     {\n     case V16QImode: gen = gen_aarch64_extv16qi; break;\n@@ -9041,7 +9038,10 @@ aarch64_evpc_ext (struct expand_vec_perm_d *d)\n   if (d->testing_p)\n     return true;\n \n-  if (BYTES_BIG_ENDIAN)\n+  /* The case where (location == 0) is a no-op for both big- and little-endian,\n+     and is removed by the mid-end at optimization levels -O1 and higher.  */\n+\n+  if (BYTES_BIG_ENDIAN && (location != 0))\n     {\n       /* After setup, we want the high elements of the first vector (stored\n          at the LSB end of the register), and the low elements of the second"}]}