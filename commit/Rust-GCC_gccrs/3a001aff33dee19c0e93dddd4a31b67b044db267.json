{"sha": "3a001aff33dee19c0e93dddd4a31b67b044db267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwMDFhZmYzM2RlZTE5YzBlOTNkZGRkNGEzMWI2N2IwNDRkYjI2Nw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-09-06T17:37:50Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-09-06T17:37:50Z"}, "message": "resource.c (mark_referenced_resources): Handle COND_EXEC.\n\ngcc:\n\t* resource.c (mark_referenced_resources): Handle COND_EXEC.\ngcc/testsuite:\n\t* gcc.target/arc/cond-set-use.c: New test.\n\nFrom-SVN: r202344", "tree": {"sha": "203b948fdf9aeb277ad7db4a330532f3c0fce32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/203b948fdf9aeb277ad7db4a330532f3c0fce32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a001aff33dee19c0e93dddd4a31b67b044db267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a001aff33dee19c0e93dddd4a31b67b044db267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a001aff33dee19c0e93dddd4a31b67b044db267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a001aff33dee19c0e93dddd4a31b67b044db267/comments", "author": null, "committer": null, "parents": [{"sha": "c42091c1b505de009cea3420537a5453d81d0165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42091c1b505de009cea3420537a5453d81d0165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42091c1b505de009cea3420537a5453d81d0165"}], "stats": {"total": 148, "additions": 147, "deletions": 1}, "files": [{"sha": "451879429b0236b4e744a323ce6bf455932e753d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a001aff33dee19c0e93dddd4a31b67b044db267", "patch": "@@ -1,4 +1,8 @@\n-2013-09-06 Claudiu Zissulescu <claziss@synopsys.com>\n+2013-09-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* resource.c (mark_referenced_resources): Handle COND_EXEC.\n+\n+2013-09-06  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* resource.c (mark_target_live_regs): Compute resources taking\n \tinto account if a call is predicated or not."}, {"sha": "367181289df59ce48ce0a21eb2fe3fd6e0e5cc1d", "filename": "gcc/resource.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=3a001aff33dee19c0e93dddd4a31b67b044db267", "patch": "@@ -374,6 +374,16 @@ mark_referenced_resources (rtx x, struct resources *res,\n     case INSN:\n     case JUMP_INSN:\n \n+      if (GET_CODE (PATTERN (x)) == COND_EXEC)\n+      /* In addition to the usual references, also consider all outputs\n+\t as referenced, to compensate for mark_set_resources treating\n+\t them as killed.  This is similar to ZERO_EXTRACT / STRICT_LOW_PART\n+\t handling, execpt that we got a partial incidence instead of a partial\n+\t width.  */\n+      mark_set_resources (x, res, 0,\n+\t\t\t  include_delayed_effects\n+\t\t\t  ? MARK_SRC_DEST_CALL : MARK_SRC_DEST);\n+\n #ifdef INSN_REFERENCES_ARE_DELAYED\n       if (! include_delayed_effects\n \t  && INSN_REFERENCES_ARE_DELAYED (x))"}, {"sha": "e3b92b2cb20f7b72f0c4a5c3c50d54437c06a1c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a001aff33dee19c0e93dddd4a31b67b044db267", "patch": "@@ -1,3 +1,7 @@\n+2013-09-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* gcc.target/arc/cond-set-use.c: New test.\n+\n 2013-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/stack_usage2.adb: New test."}, {"sha": "aee27251a5cdcc4073db6aee15b8d17151874841", "filename": "gcc/testsuite/gcc.target/arc/cond-set-use.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcond-set-use.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a001aff33dee19c0e93dddd4a31b67b044db267/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcond-set-use.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcond-set-use.c?ref=3a001aff33dee19c0e93dddd4a31b67b044db267", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os\" } */\n+\n+/* Based on gethostbyname_r,\n+ * Copyright (C) 2000-2006 Erik Andersen <andersen@uclibc.org>\n+ *\n+ * Licensed under the LGPL v2.1, see the file COPYING.LIB\n+ *\n+ * Extraction / wrapping as test by\n+ * Joern Rennecke  <joern.rennecke@embecosm.com>\n+ * Copyright (C) 2013 Free Software Foundation, Inc.\n+ */\n+\n+typedef unsigned size_t;\n+typedef int ssize_t;\n+typedef unsigned uint32_t;\n+struct resolv_answer {\n+ char *dotted;\n+ int atype;\n+ int aclass;\n+ int ttl;\n+ int rdlength;\n+ const unsigned char *rdata;\n+ int rdoffset;\n+ char* buf;\n+ size_t buflen;\n+ size_t add_count;\n+};\n+struct hostent\n+{\n+  char *h_name;\n+  char **h_aliases;\n+  int h_addrtype;\n+  int h_length;\n+  char **h_addr_list;\n+};\n+\n+int *__attribute__  ((noinline,weak)) nop (void * p) { return p; };\n+void __attribute__  ((noinline,weak)) seta (struct resolv_answer * p)\n+{ p->atype = 1;}\n+\n+int ghostbyname_r(\n+  struct hostent *result_buf,\n+  char *buf,\n+  size_t buflen,\n+  struct hostent **result,\n+  int *h_errnop)\n+{\n+ char **addr_list;\n+ char **alias;\n+ char *alias0;\n+ int i0;\n+ struct resolv_answer a;\n+ int i;\n+\n+ *result = ((void *)0);\n+\n+         *h_errnop = -1;\n+\n+         if ((ssize_t)buflen <= 5)\n+  return 34;\n+\n+ alias = (char **)buf;\n+ addr_list = (char **)buf;\n+\n+  /* This got turned into branch with conditional move in delay slot.  */\n+ if ((ssize_t)buflen < 256)\n+  return 34;\n+\n+\n+ {\n+  if (!nop(&i0)) {\n+   result_buf->h_aliases = alias;\n+   result_buf->h_addrtype = 2;\n+   result_buf->h_length = 4;\n+   result_buf->h_addr_list = addr_list;\n+   *result = result_buf;\n+   *h_errnop = 0;\n+   return 0;\n+  }\n+ }\n+\n+\n+ seta (&a);\n+\n+ if (a.atype == 1) {\n+\n+  int need_bytes = sizeof(addr_list[0]) * (a.add_count + 1 + 1);\n+\n+  int ips_len = a.add_count * a.rdlength;\n+\n+  buflen -= (need_bytes + ips_len);\n+  if ((ssize_t)buflen < 0) {\n+   i = 34;\n+   goto free_and_ret;\n+  }\n+\n+  result_buf->h_addrtype = 2;\n+  *result = result_buf;\n+  *h_errnop = 0;\n+  i = 0;\n+  goto free_and_ret;\n+ }\n+\n+ /* For cse, the 1 was is loaded into a call-saved register;\n+    the load was hoisted into a delay slot before the conditional load,\n+    clobbering result_buf, which (conditionally) lived in the same\n+    call-saved register, because mark_referenced_resources considered the\n+    destination of the COND_EXEC only clobbered, but not used.  */\n+ *h_errnop = 1;\n+ *nop(&i0) = 1;\n+ i = 2;\n+\n+ free_and_ret:\n+ nop (&i0);\n+ return i;\n+}\n+\n+int\n+main ()\n+{\n+  struct hostent buf, *res;\n+  int i;\n+  char c;\n+  ghostbyname_r (&buf,  &c, 1024, &res, &i);\n+  ghostbyname_r (&buf,  0, 1024, &res, &i);\n+  return 0;\n+}"}]}