{"sha": "a7dd5069bb45d94331655a246897fbaeef21ef38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkZDUwNjliYjQ1ZDk0MzMxNjU1YTI0Njg5N2ZiYWVlZjIxZWYzOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-05-19T19:20:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-05-19T19:20:40Z"}, "message": "Fix handling of non-dependent calls with default template args.\n\n\tPR c++/10200\n\t* pt.c (fn_type_unification): Add outer template args if needed.\n\t(type_unification_real): Handle getting full args.\n\nFrom-SVN: r236486", "tree": {"sha": "cc1bd2fb652d644342657a188193b023036e9d6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc1bd2fb652d644342657a188193b023036e9d6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7dd5069bb45d94331655a246897fbaeef21ef38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7dd5069bb45d94331655a246897fbaeef21ef38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7dd5069bb45d94331655a246897fbaeef21ef38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7dd5069bb45d94331655a246897fbaeef21ef38/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e9a538594761b93843b4285c06bcd871fa0335f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9a538594761b93843b4285c06bcd871fa0335f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9a538594761b93843b4285c06bcd871fa0335f"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "5c38aaf9b57af2bb8d2bfc6b7e3fcb7e1ccb32c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dd5069bb45d94331655a246897fbaeef21ef38/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dd5069bb45d94331655a246897fbaeef21ef38/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7dd5069bb45d94331655a246897fbaeef21ef38", "patch": "@@ -1,3 +1,9 @@\n+2016-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/10200\n+\t* pt.c (fn_type_unification): Add outer template args if needed.\n+\t(type_unification_real): Handle getting full args.\n+\n 2016-05-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/71184"}, {"sha": "39085927e8602bb6d33daf362de651eac3ad0cc7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dd5069bb45d94331655a246897fbaeef21ef38/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dd5069bb45d94331655a246897fbaeef21ef38/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a7dd5069bb45d94331655a246897fbaeef21ef38", "patch": "@@ -17578,6 +17578,13 @@ fn_type_unification (tree fn,\n   tree tinst;\n   tree r = error_mark_node;\n \n+  tree full_targs = targs;\n+  if (TMPL_ARGS_DEPTH (targs)\n+      < TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (fn)))\n+    full_targs = (add_outermost_template_args\n+\t\t  (DECL_TI_ARGS (DECL_TEMPLATE_RESULT (fn)),\n+\t\t   targs));\n+\n   if (decltype_p)\n     complain |= tf_decltype;\n \n@@ -17623,6 +17630,14 @@ fn_type_unification (tree fn,\n       location_t loc = input_location;\n       bool incomplete = false;\n \n+      if (explicit_targs == error_mark_node)\n+\tgoto fail;\n+\n+      if (TMPL_ARGS_DEPTH (explicit_targs)\n+\t  < TMPL_ARGS_DEPTH (full_targs))\n+\texplicit_targs = add_outermost_template_args (full_targs,\n+\t\t\t\t\t\t      explicit_targs);\n+\n       /* Adjust any explicit template arguments before entering the\n \t substitution context.  */\n       explicit_targs\n@@ -17702,6 +17717,7 @@ fn_type_unification (tree fn,\n \tgoto fail;\n \n       /* Place the explicitly specified arguments in TARGS.  */\n+      explicit_targs = INNERMOST_TEMPLATE_ARGS (explicit_targs);\n       for (i = NUM_TMPL_ARGS (explicit_targs); i--;)\n \tTREE_VEC_ELT (targs, i) = TREE_VEC_ELT (explicit_targs, i);\n     }\n@@ -17751,7 +17767,7 @@ fn_type_unification (tree fn,\n   checks = NULL;\n \n   ok = !type_unification_real (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n-\t\t\t       targs, parms, args, nargs, /*subr=*/0,\n+\t\t\t       full_targs, parms, args, nargs, /*subr=*/0,\n \t\t\t       strict, flags, &checks, explain_p);\n   if (!explain_p)\n     pop_tinst_level ();\n@@ -18247,7 +18263,7 @@ unify_one_argument (tree tparms, tree targs, tree parm, tree arg,\n \n static int\n type_unification_real (tree tparms,\n-\t\t       tree targs,\n+\t\t       tree full_targs,\n \t\t       tree xparms,\n \t\t       const tree *xargs,\n \t\t       unsigned int xnargs,\n@@ -18270,6 +18286,8 @@ type_unification_real (tree tparms,\n   gcc_assert (xparms == NULL_TREE || TREE_CODE (xparms) == TREE_LIST);\n   gcc_assert (ntparms > 0);\n \n+  tree targs = INNERMOST_TEMPLATE_ARGS (full_targs);\n+\n   /* Reset the number of non-defaulted template arguments contained\n      in TARGS.  */\n   NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs) = NULL_TREE;\n@@ -18304,7 +18322,7 @@ type_unification_real (tree tparms,\n       arg = args[ia];\n       ++ia;\n \n-      if (unify_one_argument (tparms, targs, parm, arg, subr, strict,\n+      if (unify_one_argument (tparms, full_targs, parm, arg, subr, strict,\n \t\t\t      explain_p))\n \treturn 1;\n     }\n@@ -18324,7 +18342,7 @@ type_unification_real (tree tparms,\n \n       /* Copy the parameter into parmvec.  */\n       TREE_VEC_ELT (parmvec, 0) = TREE_VALUE (parms);\n-      if (unify_pack_expansion (tparms, targs, parmvec, argvec, strict,\n+      if (unify_pack_expansion (tparms, full_targs, parmvec, argvec, strict,\n                                 /*subr=*/subr, explain_p))\n         return 1;\n \n@@ -18485,8 +18503,8 @@ type_unification_real (tree tparms,\n \t  location_t save_loc = input_location;\n \t  if (DECL_P (parm))\n \t    input_location = DECL_SOURCE_LOCATION (parm);\n-\t  arg = tsubst_template_arg (arg, targs, complain, NULL_TREE);\n-\t  arg = convert_template_argument (parm, arg, targs, complain,\n+\t  arg = tsubst_template_arg (arg, full_targs, complain, NULL_TREE);\n+\t  arg = convert_template_argument (parm, arg, full_targs, complain,\n \t\t\t\t\t   i, NULL_TREE);\n \t  input_location = save_loc;\n \t  *checks = get_deferred_access_checks ();"}, {"sha": "1e0dc54092d272dce3abc4c88cecb3ca6f569f46", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg6.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dd5069bb45d94331655a246897fbaeef21ef38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dd5069bb45d94331655a246897fbaeef21ef38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg6.C?ref=a7dd5069bb45d94331655a246897fbaeef21ef38", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+struct A {\n+  template <int I = 42, int J = (T)42> int f() { return I; }\n+  template <int I = 42> int g() { return f(); }\n+};"}]}