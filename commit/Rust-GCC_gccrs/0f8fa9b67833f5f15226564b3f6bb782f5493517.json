{"sha": "0f8fa9b67833f5f15226564b3f6bb782f5493517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4ZmE5YjY3ODMzZjVmMTUyMjY1NjRiM2Y2YmI3ODJmNTQ5MzUxNw==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-12-13T18:46:58Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-12-13T18:46:58Z"}, "message": "re PR c++/14258 (typename in a using declaration not supported)\n\ngcc/testsuite/ChangeLog\n\n2011-12-11  Fabien Chene  <fabien@gcc.gnu.org>\n\n\tPR c++/14258\n\t* g++.dg/template/using16.C: New.\n\t* g++.dg/template/using17.C: New.\n\ngcc/cp/ChangeLog\n\n2011-12-11  Fabien Chene  <fabien@gcc.gnu.org>\n\n\tPR c++/14258\n\t* cp-tree.h (USING_DECL_TYPENAME_P): New macro.\n\t* parser.c (cp_parser_nonclass_name): Handle using declarations\n\tthat refer to a dependent type.\n\t(cp_parser_using_declaration): Set USING_DECL_TYPENAME_P to 1 if\n\tthe using declaration refers to a dependent type.\n\nFrom-SVN: r182292", "tree": {"sha": "42d417ed9dfb4115cfed8440e8d3927916c549a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d417ed9dfb4115cfed8440e8d3927916c549a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f8fa9b67833f5f15226564b3f6bb782f5493517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8fa9b67833f5f15226564b3f6bb782f5493517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8fa9b67833f5f15226564b3f6bb782f5493517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8fa9b67833f5f15226564b3f6bb782f5493517/comments", "author": null, "committer": null, "parents": [{"sha": "863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c"}], "stats": {"total": 137, "additions": 133, "deletions": 4}, "files": [{"sha": "3e7abcc0a3592dc7332d7498aebf020fc3650faf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f8fa9b67833f5f15226564b3f6bb782f5493517", "patch": "@@ -1,3 +1,12 @@\n+2011-12-13  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/14258\n+\t* cp-tree.h (USING_DECL_TYPENAME_P): New macro.\n+\t* parser.c (cp_parser_nonclass_name): Handle using declarations\n+\tthat refer to a dependent type.\n+\t(cp_parser_using_declaration): Set USING_DECL_TYPENAME_P to 1 if\n+\tthe using declaration refers to a dependent type.\n+\n 2011-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/51496"}, {"sha": "a96adbb17b223729f23cb8158996fc3b63f77f69", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0f8fa9b67833f5f15226564b3f6bb782f5493517", "patch": "@@ -130,6 +130,7 @@ c-common.h, not after.\n       DECL_TEMPLATE_INSTANTIATED (in a VAR_DECL or a FUNCTION_DECL)\n       DECL_MEMBER_TEMPLATE_P (in TEMPLATE_DECL)\n       FUNCTION_PARAMETER_PACK_P (in PARM_DECL)\n+      USING_DECL_TYPENAME_P (in USING_DECL)\n    2: DECL_THIS_EXTERN (in VAR_DECL or FUNCTION_DECL).\n       DECL_IMPLICIT_TYPEDEF_P (in a TYPE_DECL)\n    3: DECL_IN_AGGR_P.\n@@ -2521,6 +2522,9 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n /* The decls named by a using decl.  */\n #define USING_DECL_DECLS(NODE) DECL_INITIAL (USING_DECL_CHECK (NODE))\n \n+/* Non zero if the using decl refers to a dependent type.  */\n+#define USING_DECL_TYPENAME_P(NODE) DECL_LANG_FLAG_1 (USING_DECL_CHECK (NODE))\n+\n /* In a VAR_DECL, true if we have a shadowed local variable\n    in the shadowed var table for this VAR_DECL.  */\n #define DECL_HAS_SHADOWED_FOR_VAR_P(NODE) \\"}, {"sha": "91280b785a2bb575bd2ed5a05a8d63d30a65610b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0f8fa9b67833f5f15226564b3f6bb782f5493517", "patch": "@@ -13807,9 +13807,26 @@ cp_parser_nonclass_name (cp_parser* parser)\n   /* Look up the type-name.  */\n   type_decl = cp_parser_lookup_name_simple (parser, identifier, token->location);\n \n-  /* If it is a using decl, use its underlying decl.  */\n-  type_decl = strip_using_decl (type_decl);\n-\n+  if (TREE_CODE (type_decl) == USING_DECL)\n+    {\n+      if (!DECL_DEPENDENT_P (type_decl))\n+\ttype_decl = strip_using_decl (type_decl);\n+      else if (USING_DECL_TYPENAME_P (type_decl))\n+\t{\n+\t  /* We have found a type introduced by a using\n+\t     declaration at class scope that refers to a dependent\n+\t     type.\n+\t     \n+\t     using typename :: [opt] nested-name-specifier unqualified-id ;\n+\t  */\n+\t  type_decl = make_typename_type (TREE_TYPE (type_decl),\n+\t\t\t\t\t  DECL_NAME (type_decl),\n+\t\t\t\t\t  typename_type, tf_error);\n+\t  if (type_decl != error_mark_node)\n+\t    type_decl = TYPE_NAME (type_decl);\n+\t}\n+    }\n+  \n   if (TREE_CODE (type_decl) != TYPE_DECL\n       && (objc_is_id (identifier) || objc_is_class_name (identifier)))\n     {\n@@ -14947,6 +14964,9 @@ cp_parser_using_declaration (cp_parser* parser,\n \t  /* Create the USING_DECL.  */\n \t  decl = do_class_using_decl (parser->scope, identifier);\n \n+\t  if (typename_p)\n+\t    USING_DECL_TYPENAME_P (decl) = 1;\n+\n \t  if (check_for_bare_parameter_packs (decl))\n             return false;\n           else\n@@ -18900,7 +18920,11 @@ cp_parser_member_declaration (cp_parser* parser)\n   parser->colon_corrects_to_scope_p = false;\n \n   if (cp_parser_using_declaration (parser, /*access_declaration=*/true))\n-    goto out;\n+    {\n+      warning (OPT_Wdeprecated, \"access declarations are deprecated; \"\n+\t       \"employ using declarations instead\");\n+      goto out;\n+    }\n \n   /* Parse the decl-specifier-seq.  */\n   decl_spec_token_start = cp_lexer_peek_token (parser->lexer);"}, {"sha": "50595b29dbacea6a0488311d134c9aec85ffe174", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f8fa9b67833f5f15226564b3f6bb782f5493517", "patch": "@@ -1,3 +1,9 @@\n+2011-12-11  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/14258\n+\t* g++.dg/template/using16.C: New.\n+\t* g++.dg/template/using17.C: New.\n+\n 2011-12-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/51362"}, {"sha": "589f7f18f520e259ec57eaf4abe85a22b4bf9983", "filename": "gcc/testsuite/g++.dg/template/using16.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing16.C?ref=0f8fa9b67833f5f15226564b3f6bb782f5493517", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+\n+template <class T>\n+struct A\n+{\n+    typedef T type;\n+};\n+\n+template <class T>\n+struct B\n+{\n+    class type\n+    {\n+\ttype(); // { dg-error \"private\" }\n+    };\n+};\n+\n+template <class T>\n+struct C : A<T>, B<T>\n+{\n+    using typename B<T>::type;\n+\n+    void f()\n+    {\n+\ttype j; // { dg-error \"context\" }\n+    }\n+};\n+\n+template class C<int>; // { dg-message \"required\" }\n+\n+template <class T>\n+struct D\n+{\n+    typedef T type;\n+};\n+\n+template <class T>\n+class E : D<T>\n+{\n+    using typename D<T>::type; // { dg-message \"previous\" }\n+    using typename D<T>::type; // { dg-error \"redeclaration\" }\n+};"}, {"sha": "1af1dc71e4e831446d43251ac81d4db5e6482a05", "filename": "gcc/testsuite/g++.dg/template/using17.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fa9b67833f5f15226564b3f6bb782f5493517/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing17.C?ref=0f8fa9b67833f5f15226564b3f6bb782f5493517", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/14258\n+// { dg-do run }\n+\n+template<typename T>\n+struct A \n+{\n+  typedef T type;\n+  typedef A type2;\n+};\n+                                                                               \n+template<typename T>\n+struct B : A<T> \n+{\n+  using typename A<T>::type;\n+  type t;\n+\n+  using typename A<T>::type2;\n+\n+  type f()\n+  {\n+    type i = 1;\n+    return i;\n+  }\n+};\n+\n+int main()\n+{\n+  B<int>::type t = 4;\n+  if (t != 4)\n+    __builtin_abort();\n+\n+  B<double> b;\n+  b.t = 3;\n+  if (b.t != 3)\n+    __builtin_abort();\n+\n+  B<long> b2;\n+  if (b2.f() != 1)\n+    __builtin_abort();\n+\n+  B<double>::type2::type tt = 12;\n+  if (tt != 12)\n+    __builtin_abort();\n+}"}]}