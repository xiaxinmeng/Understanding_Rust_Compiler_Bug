{"sha": "0883673194a2b28ad888498d74dac9a4cccc513c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4MzY3MzE5NGEyYjI4YWQ4ODg0OThkNzRkYWM5YTRjY2NjNTEzYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-11-07T10:43:19Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-11-07T10:43:19Z"}, "message": "[arm][3/X] Implement __smla* intrinsics (Q-setting)\n\nThis patch implements some more Q-setting intrinsics form the SMLA* group.\nThese can set the saturation bit on overflow in the accumulation step.\nLike earlier, these have non-Q-setting RTL forms as well for when the\nQ-bit read\nis not needed.\n\n\t* config/arm/arm.md (arm_smlabb_setq): New define_insn.\n\t(arm_smlabb): New define_expand.\n\t(*maddhisi4tb): Rename to...\n\t(maddhisi4tb): ... This.\n\t(*maddhisi4tt): Rename to...\n\t(maddhisi4tt): ... This.\n\t(arm_smlatb_setq): New define_insn.\n\t(arm_smlatb): New define_expand.\n\t(arm_smlatt_setq): New define_insn.\n\t(arm_smlatt): New define_expand.\n\t(arm_<smlaw_op><add_clobber_name>_insn): New define_insn.\n\t(arm_<smlaw_op>): New define_expand.\n\t* config/arm/arm_acle.h (__smlabb, __smlatb, __smlabt, __smlatt,\n\t__smlawb, __smlawt): Define.\n\t* config/arm_acle_builtins.def: Define builtins for the above.\n\t* config/arm/iterators.md (SMLAWBT): New int_iterator.\n\t(slaw_op): New int_attribute.\n\t* config/arm/unspecs.md (UNSPEC_SMLAWB, UNSPEC_SMLAWT): Define.\n\n\t* gcc.target/arm/acle/dsp_arith.c: Update test.\n\nFrom-SVN: r277916", "tree": {"sha": "d0befb58d798bd19c32002a1bb137924a5dd4e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0befb58d798bd19c32002a1bb137924a5dd4e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0883673194a2b28ad888498d74dac9a4cccc513c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0883673194a2b28ad888498d74dac9a4cccc513c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0883673194a2b28ad888498d74dac9a4cccc513c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0883673194a2b28ad888498d74dac9a4cccc513c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e56d199b04fb7cde9b6ef423175883d852de78b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56d199b04fb7cde9b6ef423175883d852de78b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e56d199b04fb7cde9b6ef423175883d852de78b4"}], "stats": {"total": 262, "additions": 260, "deletions": 2}, "files": [{"sha": "436e38bcfb366436292a1af44b96e7997fd4de35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -1,3 +1,24 @@\n+2019-11-07  Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (arm_smlabb_setq): New define_insn.\n+\t(arm_smlabb): New define_expand.\n+\t(*maddhisi4tb): Rename to...\n+\t(maddhisi4tb): ... This.\n+\t(*maddhisi4tt): Rename to...\n+\t(maddhisi4tt): ... This.\n+\t(arm_smlatb_setq): New define_insn.\n+\t(arm_smlatb): New define_expand.\n+\t(arm_smlatt_setq): New define_insn.\n+\t(arm_smlatt): New define_expand.\n+\t(arm_<smlaw_op><add_clobber_name>_insn): New define_insn.\n+\t(arm_<smlaw_op>): New define_expand.\n+\t* config/arm/arm_acle.h (__smlabb, __smlatb, __smlabt, __smlatt,\n+\t__smlawb, __smlawt): Define.\n+\t* config/arm_acle_builtins.def: Define builtins for the above.\n+\t* config/arm/iterators.md (SMLAWBT): New int_iterator.\n+\t(slaw_op): New int_attribute.\n+\t* config/arm/unspecs.md (UNSPEC_SMLAWB, UNSPEC_SMLAWT): Define.\n+\n 2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (arm_<ss_op>): New define_expand."}, {"sha": "c3a7aa9e40d9230bf31de62e650b85815cf05297", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 134, "deletions": 2, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -2565,8 +2565,40 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n+(define_insn \"arm_smlabb_setq\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (sign_extend:SI\n+\t\t\t   (match_operand:HI 1 \"s_register_operand\" \"r\"))\n+\t\t\t  (sign_extend:SI\n+\t\t\t   (match_operand:HI 2 \"s_register_operand\" \"r\")))\n+\t\t (match_operand:SI 3 \"s_register_operand\" \"r\")))\n+   (set (reg:CC APSRQ_REGNUM)\n+\t(unspec:CC [(reg:CC APSRQ_REGNUM)] UNSPEC_Q_SET))]\n+  \"TARGET_DSP_MULTIPLY\"\n+  \"smlabb%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"type\" \"smlaxy\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_expand \"arm_smlabb\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")]\n+  \"TARGET_DSP_MULTIPLY\"\n+  {\n+    rtx mult1 = gen_lowpart (HImode, operands[1]);\n+    rtx mult2 = gen_lowpart (HImode, operands[2]);\n+    if (ARM_Q_BIT_READ)\n+      emit_insn (gen_arm_smlabb_setq (operands[0], mult1, mult2, operands[3]));\n+    else\n+      emit_insn (gen_maddhisi4 (operands[0], mult1, mult2, operands[3]));\n+    DONE;\n+  }\n+)\n+\n ;; Note: there is no maddhisi4ibt because this one is canonical form\n-(define_insn \"*maddhisi4tb\"\n+(define_insn \"maddhisi4tb\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(plus:SI (mult:SI (ashiftrt:SI\n \t\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -2580,7 +2612,41 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"*maddhisi4tt\"\n+(define_insn \"arm_smlatb_setq\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (ashiftrt:SI\n+\t\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (const_int 16))\n+\t\t\t  (sign_extend:SI\n+\t\t\t   (match_operand:HI 2 \"s_register_operand\" \"r\")))\n+\t\t (match_operand:SI 3 \"s_register_operand\" \"r\")))\n+   (set (reg:CC APSRQ_REGNUM)\n+\t(unspec:CC [(reg:CC APSRQ_REGNUM)] UNSPEC_Q_SET))]\n+  \"TARGET_DSP_MULTIPLY\"\n+  \"smlatb%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"type\" \"smlaxy\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_expand \"arm_smlatb\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")]\n+  \"TARGET_DSP_MULTIPLY\"\n+  {\n+    rtx mult2 = gen_lowpart (HImode, operands[2]);\n+    if (ARM_Q_BIT_READ)\n+      emit_insn (gen_arm_smlatb_setq (operands[0], operands[1],\n+\t\t\t\t      mult2, operands[3]));\n+    else\n+      emit_insn (gen_maddhisi4tb (operands[0], operands[1],\n+\t\t\t\t  mult2, operands[3]));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"maddhisi4tt\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(plus:SI (mult:SI (ashiftrt:SI\n \t\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -2595,6 +2661,40 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n+(define_insn \"arm_smlatt_setq\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (ashiftrt:SI\n+\t\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (const_int 16))\n+\t\t\t  (ashiftrt:SI\n+\t\t\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t\t   (const_int 16)))\n+\t\t (match_operand:SI 3 \"s_register_operand\" \"r\")))\n+   (set (reg:CC APSRQ_REGNUM)\n+\t(unspec:CC [(reg:CC APSRQ_REGNUM)] UNSPEC_Q_SET))]\n+  \"TARGET_DSP_MULTIPLY\"\n+  \"smlatt%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"type\" \"smlaxy\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_expand \"arm_smlatt\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")]\n+  \"TARGET_DSP_MULTIPLY\"\n+  {\n+    if (ARM_Q_BIT_READ)\n+      emit_insn (gen_arm_smlatt_setq (operands[0], operands[1],\n+\t\t\t\t      operands[2], operands[3]));\n+    else\n+      emit_insn (gen_maddhisi4tt (operands[0], operands[1],\n+\t\t\t\t  operands[2], operands[3]));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"maddhidi4\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n \t(plus:DI\n@@ -2641,6 +2741,38 @@\n   [(set_attr \"type\" \"smlalxy\")\n    (set_attr \"predicable\" \"yes\")])\n \n+(define_insn \"arm_<smlaw_op><add_clobber_q_name>_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t   [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t    (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t    (match_operand:SI 3 \"s_register_operand\" \"r\")]\n+\t   SMLAWBT))]\n+  \"TARGET_DSP_MULTIPLY && <add_clobber_q_pred>\"\n+  \"<smlaw_op>%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"type\" \"smlaxy\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_expand \"arm_<smlaw_op>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(unspec:SI\n+\t   [(match_operand:SI 1 \"s_register_operand\")\n+\t    (match_operand:SI 2 \"s_register_operand\")\n+\t    (match_operand:SI 3 \"s_register_operand\")]\n+\t   SMLAWBT))]\n+  \"TARGET_DSP_MULTIPLY\"\n+  {\n+    if (ARM_Q_BIT_READ)\n+      emit_insn (gen_arm_<smlaw_op>_setq_insn (operands[0], operands[1],\n+\t\t\t\t\t       operands[2], operands[3]));\n+    else\n+      emit_insn (gen_arm_<smlaw_op>_insn (operands[0], operands[1],\n+\t\t\t\t\t  operands[2], operands[3]));\n+    DONE;\n+  }\n+)\n+\n (define_expand \"mulsf3\"\n   [(set (match_operand:SF          0 \"s_register_operand\")\n \t(mult:SF (match_operand:SF 1 \"s_register_operand\")"}, {"sha": "fb144cf789c87db92d688c2444d1204e0bb14ffe", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -499,6 +499,50 @@ __qdbl (int32_t __x)\n {\n   return __qadd (__x, __x);\n }\n+\n+__extension__ extern __inline int32_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlabb (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlabb (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlatb (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlatb (__a, __b, __c);\n+}\n+\n+/* smlatb is equivalent to smlabt with the two multiplication operands\n+   swapped around.  */\n+__extension__ extern __inline int32_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlabt (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return __smlatb (__b, __a, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlatt (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlatt (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlawb (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlawb (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlawt (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlawt (__a, __b, __c);\n+}\n #endif\n \n #pragma GCC push_options"}, {"sha": "85dd87e9d8e1507b579d511245537aa75c3ce3d8", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -86,3 +86,8 @@ VAR1 (SAT_OCCURRED, saturation_occurred, si)\n VAR1 (SET_SAT, set_saturation, void)\n VAR1 (BINOP, qadd, si)\n VAR1 (BINOP, qsub, si)\n+VAR1 (TERNOP, smlabb, si)\n+VAR1 (TERNOP, smlatb, si)\n+VAR1 (TERNOP, smlatt, si)\n+VAR1 (TERNOP, smlawb, si)\n+VAR1 (TERNOP, smlawt, si)"}, {"sha": "006ffd7fc6c8c69e169a4f2e6321d312b70225d6", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -446,6 +446,8 @@\n (define_int_iterator SIMD32_DIMODE [UNSPEC_SMLALD UNSPEC_SMLALDX\n \t\t\t\t    UNSPEC_SMLSLD UNSPEC_SMLSLDX])\n \n+(define_int_iterator SMLAWBT [UNSPEC_SMLAWB UNSPEC_SMLAWT])\n+\n (define_int_iterator VQRDMLH_AS [UNSPEC_VQRDMLAH UNSPEC_VQRDMLSH])\n \n (define_int_iterator VFM_LANE_AS [UNSPEC_VFMA_LANE UNSPEC_VFMS_LANE])\n@@ -1127,3 +1129,5 @@\n \n (define_int_attr opsuffix [(UNSPEC_DOT_S \"s8\")\n \t\t\t   (UNSPEC_DOT_U \"u8\")])\n+\n+(define_int_attr smlaw_op [(UNSPEC_SMLAWB \"smlawb\") (UNSPEC_SMLAWT \"smlawt\")])"}, {"sha": "06988abb67eee27e948d8039df6a94eefb187618", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -130,6 +130,8 @@\n   UNSPEC_SMLALDX\t; Represent the SMLALDX operation.\n   UNSPEC_SMLSLD\t\t; Represent the SMLSLD operation.\n   UNSPEC_SMLSLDX\t; Represent the SMLSLDX operation.\n+  UNSPEC_SMLAWB\t\t; Represent the SMLAWB operation.\n+  UNSPEC_SMLAWT\t\t; Represent the SMLAWT operation.\n ])\n \n "}, {"sha": "6008206aa5e12644089e8893c8b59106f555d491", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -1,3 +1,7 @@\n+2019-11-07  Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/acle/dsp_arith.c: Update test.\n+\n 2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/acle/dsp_arith.c: New test."}, {"sha": "9ebd55a12879a198b76f4645912187a4d16c9363", "filename": "gcc/testsuite/gcc.target/arm/acle/dsp_arith.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fdsp_arith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0883673194a2b28ad888498d74dac9a4cccc513c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fdsp_arith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fdsp_arith.c?ref=0883673194a2b28ad888498d74dac9a4cccc513c", "patch": "@@ -25,3 +25,49 @@ test_qsub (int32_t a, int32_t b)\n }\n \n /* { dg-final { scan-assembler-times \"qsub\\t...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlabb (int32_t a, int32_t b, int32_t c)\n+{\n+  return __smlabb (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlabb\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlabt (int32_t a, int32_t b, int32_t c)\n+{\n+  return __smlabt (a, b, c);\n+}\n+\n+int32_t\n+test_smlatb (int32_t a, int32_t b, int32_t c)\n+{\n+  return __smlatb (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlatb\\t...?, ...?, ...?, ...?\" 2 } } */\n+\n+int32_t\n+test_smlatt (int32_t a, int32_t b, int32_t c)\n+{\n+  return __smlatt (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlatt\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlawb (int32_t a, int32_t b, int32_t c)\n+{\n+  return __smlawb (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlawb\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlawt (int32_t a, int32_t b, int32_t c)\n+{\n+  return __smlawt (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlawt\\t...?, ...?, ...?, ...?\" 1 } } */"}]}