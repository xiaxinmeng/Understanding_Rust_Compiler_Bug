{"sha": "2ac7cbb53296e6006d7c113d81175dd455fd570b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjN2NiYjUzMjk2ZTYwMDZkN2MxMTNkODExNzVkZDQ1NWZkNTcwYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-01-08T22:53:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-01-08T22:53:20Z"}, "message": "tree.h (build_int_cst_wide_type): Export.\n\n2007-01-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (build_int_cst_wide_type): Export.\n\t* tree.c (build_int_cst_wide_type): New function.\n\t(build_int_cst_wide): Fix comment.\n\t* builtins.c (fold_builtin_object_size): Use build_int_cst\n\tto build -1 or 0 of the correct type.  Use fit_double_type\n\tto check for overflow.\n\t* fold-const.c (optimize_bit_field_compare): Use build_int_cst_type\n\tto build the mask.\n\t(decode_field_reference): Likewise.\n\t(all_ones_mask_p): Likewise.\n\t(native_interpret_int): Use build_int_cst_wide_type.\n\t(fold_binary): Use build_int_cst_type to build an all-ones\n\tvalue.\n\t* stor-layout.c (set_sizetype): Use build_int_cst_wide_type.\n\n\tjava/\n\t* lex.c (do_java_lex): Use build_int_cst_wide_type.\n\t* jcf-parse.c (get_constant): Likewise.\n\n\tcp/\n\t* cvt.c (cp_convert_to_pointer): Use build_int_cst_type.\n\n\tada/\n\t* cuintp.c (build_cst_from_int): Use built_int_cst_type.\n\t* trans.c (gnat_to_gnu): Likewise.\n\nFrom-SVN: r120596", "tree": {"sha": "c7ad9e6d3d7b86c201aaecf9a0017fb8badea1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ad9e6d3d7b86c201aaecf9a0017fb8badea1c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ac7cbb53296e6006d7c113d81175dd455fd570b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac7cbb53296e6006d7c113d81175dd455fd570b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac7cbb53296e6006d7c113d81175dd455fd570b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac7cbb53296e6006d7c113d81175dd455fd570b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c61ff294690d6ce7c9e958f62ab48a441943844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c61ff294690d6ce7c9e958f62ab48a441943844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c61ff294690d6ce7c9e958f62ab48a441943844"}], "stats": {"total": 128, "additions": 75, "deletions": 53}, "files": [{"sha": "db828ec9b927de208526189c250082a2e6364f3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -1,3 +1,20 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (build_int_cst_wide_type): Export.\n+\t* tree.c (build_int_cst_wide_type): New function.\n+\t(build_int_cst_wide): Fix comment.\n+\t* builtins.c (fold_builtin_object_size): Use build_int_cst\n+\tto build -1 or 0 of the correct type.  Use fit_double_type\n+\tto check for overflow.\n+\t* fold-const.c (optimize_bit_field_compare): Use build_int_cst_type\n+\tto build the mask.\n+\t(decode_field_reference): Likewise.\n+\t(all_ones_mask_p): Likewise.\n+\t(native_interpret_int): Use build_int_cst_wide_type.\n+\t(fold_binary): Use build_int_cst_type to build an all-ones\n+\tvalue.\n+\t* stor-layout.c (set_sizetype): Use build_int_cst_wide_type.\n+\n 2007-01-08  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/pa/t-pa64 (libgcc_stub.a): Use $(T)."}, {"sha": "af2d893ba3804de1e2fdcfafb892cfb9b7373bc8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -1,3 +1,8 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cuintp.c (build_cst_from_int): Use built_int_cst_type.\n+\t* trans.c (gnat_to_gnu): Likewise.\n+\n 2006-12-07  Geoffrey Keating  <geoffk@apple.com>\n \n \t* Makefile.in: Replace CROSS_COMPILE with CROSS_DIRECTORY_STRUCTURE."}, {"sha": "fbf800f3a8e3d5dabcb882f6d3d3097420cbbc6e", "filename": "gcc/ada/cuintp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fada%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fada%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcuintp.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -62,7 +62,7 @@ build_cst_from_int (tree type, HOST_WIDE_INT low)\n   if (TREE_CODE (type) == REAL_TYPE)\n     return convert (type, build_int_cst (NULL_TREE, low));\n   else\n-    return force_fit_type (build_int_cst (type, low), false, false, false);\n+    return build_int_cst_type (type, low);\n }\n \n /* Similar to UI_To_Int, but return a GCC INTEGER_CST or REAL_CST node,"}, {"sha": "14c059d16bf34ae186c5cffc3c3ef9a6fe9f8375", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -2729,10 +2729,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \tgnu_result = DECL_INITIAL (get_gnu_tree (Entity (gnat_node)));\n       else\n \tgnu_result\n-\t  = force_fit_type\n-\t    (build_int_cst\n-\t      (gnu_result_type, UI_To_CC (Char_Literal_Value (gnat_node))),\n-\t     false, false, false);\n+\t  = build_int_cst_type\n+\t      (gnu_result_type, UI_To_CC (Char_Literal_Value (gnat_node)));\n       break;\n \n     case N_Real_Literal:"}, {"sha": "ad85034a8306ec7ab9679ac5bb4b60ed8cb9fadc", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -10808,13 +10808,11 @@ fold_builtin_object_size (tree arglist)\n      if there are any side-effects, it returns (size_t) -1 for types 0 and 1\n      and (size_t) 0 for types 2 and 3.  */\n   if (TREE_SIDE_EFFECTS (ptr))\n-    return fold_convert (size_type_node,\n-\t\t\t object_size_type < 2\n-\t\t\t ? integer_minus_one_node : integer_zero_node);\n+    return build_int_cst_type (size_type_node, object_size_type < 2 ? -1 : 0);\n \n   if (TREE_CODE (ptr) == ADDR_EXPR)\n     ret = build_int_cstu (size_type_node,\n-\t\t\tcompute_builtin_object_size (ptr, object_size_type));\n+\t\t\t  compute_builtin_object_size (ptr, object_size_type));\n \n   else if (TREE_CODE (ptr) == SSA_NAME)\n     {\n@@ -10831,9 +10829,10 @@ fold_builtin_object_size (tree arglist)\n \n   if (ret)\n     {\n-      ret = force_fit_type (ret, -1, false, false);\n-      if (TREE_CONSTANT_OVERFLOW (ret))\n-\tret = 0;\n+      unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (ret);\n+      HOST_WIDE_INT high = TREE_INT_CST_HIGH (ret);\n+      if (fit_double_type (low, high, &low, &high, TREE_TYPE (ret)))\n+\tret = NULL_TREE;\n     }\n \n   return ret;"}, {"sha": "d41988f0709c3a0b726eff6ddceef51b1bc290e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -1,3 +1,7 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cvt.c (cp_convert_to_pointer): Use build_int_cst_type.\n+\n 2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n \n \t* call.c (standard_conversion): Pass flag to"}, {"sha": "d01dc1db6c371a0d8f02d6a0bf34338ed2222e98", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -251,9 +251,7 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n \t{\n \t  /* A NULL pointer-to-member is represented by -1, not by\n \t     zero.  */\n-\t  expr = build_int_cst (type, -1);\n-\t  /* Fix up the representation of -1 if appropriate.  */\n-\t  expr = force_fit_type (expr, 0, false, false);\n+\t  expr = build_int_cst_type (type, -1);\n \t}\n       else\n \texpr = build_int_cst (type, 0);"}, {"sha": "d88c01b02be87becdd8cef994ae891317c9ed4f6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -3478,9 +3478,7 @@ optimize_bit_field_compare (enum tree_code code, tree compare_type,\n     lbitpos = nbitsize - lbitsize - lbitpos;\n \n   /* Make the mask to be used against the extracted field.  */\n-  mask = build_int_cst (unsigned_type, -1);\n-  mask = force_fit_type (mask, 0, false, false);\n-  mask = fold_convert (unsigned_type, mask);\n+  mask = build_int_cst_type (unsigned_type, -1);\n   mask = const_binop (LSHIFT_EXPR, mask, size_int (nbitsize - lbitsize), 0);\n   mask = const_binop (RSHIFT_EXPR, mask,\n \t\t      size_int (nbitsize - lbitsize - lbitpos), 0);\n@@ -3638,8 +3636,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   unsigned_type = lang_hooks.types.type_for_size (*pbitsize, 1);\n   precision = TYPE_PRECISION (unsigned_type);\n \n-  mask = build_int_cst (unsigned_type, -1);\n-  mask = force_fit_type (mask, 0, false, false);\n+  mask = build_int_cst_type (unsigned_type, -1);\n \n   mask = const_binop (LSHIFT_EXPR, mask, size_int (precision - *pbitsize), 0);\n   mask = const_binop (RSHIFT_EXPR, mask, size_int (precision - *pbitsize), 0);\n@@ -3664,8 +3661,7 @@ all_ones_mask_p (tree mask, int size)\n   unsigned int precision = TYPE_PRECISION (type);\n   tree tmask;\n \n-  tmask = build_int_cst (lang_hooks.types.signed_type (type), -1);\n-  tmask = force_fit_type (tmask, 0, false, false);\n+  tmask = build_int_cst_type (lang_hooks.types.signed_type (type), -1);\n \n   return\n     tree_int_cst_equal (mask,\n@@ -7113,8 +7109,7 @@ native_interpret_int (tree type, unsigned char *ptr, int len)\n \t      << (bitpos - HOST_BITS_PER_WIDE_INT);\n     }\n \n-  return force_fit_type (build_int_cst_wide (type, lo, hi),\n-\t\t\t 0, false, false);\n+  return build_int_cst_wide_type (type, lo, hi);\n }\n \n \n@@ -8802,8 +8797,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n \t      && !TYPE_TRAP_SIGNED (type))\n \t    {\n-\t      t1 = build_int_cst (type, -1);\n-\t      t1 = force_fit_type (t1, 0, false, false);\n+\t      t1 = build_int_cst_type (type, -1);\n \t      return omit_one_operand (type, t1, arg1);\n \t    }\n \n@@ -8812,8 +8806,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0)\n \t      && !TYPE_TRAP_SIGNED (type))\n \t    {\n-\t      t1 = build_int_cst (type, -1);\n-\t      t1 = force_fit_type (t1, 0, false, false);\n+\t      t1 = build_int_cst_type (type, -1);\n \t      return omit_one_operand (type, t1, arg0);\n \t  }\n \n@@ -9601,17 +9594,15 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = build_int_cst (type, -1);\n-\t  t1 = force_fit_type (t1, 0, false, false);\n+\t  t1 = build_int_cst_type (type, -1);\n \t  return omit_one_operand (type, t1, arg1);\n \t}\n \n       /* X | ~X is -1.  */\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = build_int_cst (type, -1);\n-\t  t1 = force_fit_type (t1, 0, false, false);\n+\t  t1 = build_int_cst_type (type, -1);\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n \n@@ -9717,17 +9708,15 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = build_int_cst (type, -1);\n-\t  t1 = force_fit_type (t1, 0, false, false);\n+\t  t1 = build_int_cst_type (type, -1);\n \t  return omit_one_operand (type, t1, arg1);\n \t}\n \n       /* X ^ ~X is -1.  */\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = build_int_cst (type, -1);\n-\t  t1 = force_fit_type (t1, 0, false, false);\n+\t  t1 = build_int_cst_type (type, -1);\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n "}, {"sha": "a8aea42a1bd94baf597d6410694247b44e314dfc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -1,3 +1,8 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lex.c (do_java_lex): Use build_int_cst_wide_type.\n+\t* jcf-parse.c (get_constant): Likewise.\n+\n 2006-11-12  Jan Hubicka  <jh@suse.cz>\n \n \t* resource.c (compile_resource_data): Update for new varpool names."}, {"sha": "9f0ccaa094daafab75b76a895fd306de7b061ebb", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -320,8 +320,7 @@ get_constant (JCF *jcf, int index)\n \tlshift_double (num, 0, 32, 64, &lo, &hi, 0);\n \tnum = JPOOL_UINT (jcf, index+1);\n \tadd_double (lo, hi, num, 0, &lo, &hi);\n-\tvalue = build_int_cst_wide (long_type_node, lo, hi);\n-\tvalue = force_fit_type (value, 0, false, false);\n+\tvalue = build_int_cst_wide_type (long_type_node, lo, hi);\n \tbreak;\n       }\n "}, {"sha": "730c1447fbd8fb47d0e0e7fdb09a6549a05e76c6", "filename": "gcc/java/lex.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -1234,9 +1234,8 @@ do_java_lex (YYSTYPE *java_lval)\n \t}\n \n       /* Sign extend the value.  */\n-      value = build_int_cst_wide (long_suffix ? long_type_node : int_type_node,\n-\t\t\t\t  low, high);\n-      value = force_fit_type (value, 0, false, false);\n+      value = build_int_cst_wide_type (long_suffix ? long_type_node\n+\t\t\t\t       : int_type_node, low, high);\n \n       if (radix != 10)\n \t{"}, {"sha": "c1c81c3e6d538e946a510ce71b94a9b8ce3c3d22", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -2003,14 +2003,11 @@ set_sizetype (tree type)\n \n       orig_max = TYPE_MAX_VALUE (sizetype);\n \n-      /* Build a new node with the same values, but a different type.  */\n-      new_max = build_int_cst_wide (sizetype,\n-\t\t\t\t    TREE_INT_CST_LOW (orig_max),\n-\t\t\t\t    TREE_INT_CST_HIGH (orig_max));\n-\n-      /* Now sign extend it using force_fit_type to ensure\n-\t consistency.  */\n-      new_max = force_fit_type (new_max, 0, 0, 0);\n+      /* Build a new node with the same values, but a different type.\n+\t Sign extend it to ensure consistency.  */\n+      new_max = build_int_cst_wide_type (sizetype,\n+\t\t\t\t\t TREE_INT_CST_LOW (orig_max),\n+\t\t\t\t\t TREE_INT_CST_HIGH (orig_max));\n       TYPE_MAX_VALUE (sizetype) = new_max;\n     }\n }"}, {"sha": "a3577c4488403bbc7bb25740d233021a094e4414", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -789,6 +789,17 @@ build_int_cst_type (tree type, HOST_WIDE_INT low)\n   return build_int_cst_wide (type, low1, hi);\n }\n \n+/* Create an INT_CST node of TYPE and value HI:LOW.  The value is truncated\n+   and sign extended according to the value range of TYPE.  */\n+\n+tree\n+build_int_cst_wide_type (tree type,\n+\t\t\t unsigned HOST_WIDE_INT low, HOST_WIDE_INT high)\n+{\n+  fit_double_type (low, high, &low, &high, type);\n+  return build_int_cst_wide (type, low, high);\n+}\n+\n /* These are the hash table functions for the hash table of INTEGER_CST\n    nodes of a sizetype.  */\n \n@@ -817,10 +828,9 @@ int_cst_hash_eq (const void *x, const void *y)\n \t  && TREE_INT_CST_LOW (xt) == TREE_INT_CST_LOW (yt));\n }\n \n-/* Create an INT_CST node of TYPE and value HI:LOW.  If TYPE is NULL,\n-   integer_type_node is used.  The returned node is always shared.\n-   For small integers we use a per-type vector cache, for larger ones\n-   we use a single hash table.  */\n+/* Create an INT_CST node of TYPE and value HI:LOW.\n+   The returned node is always shared.  For small integers we use a\n+   per-type vector cache, for larger ones we use a single hash table.  */\n \n tree\n build_int_cst_wide (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)"}, {"sha": "37a854608dc7c5e00a1238f63741113cdfb1b7e2", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac7cbb53296e6006d7c113d81175dd455fd570b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2ac7cbb53296e6006d7c113d81175dd455fd570b", "patch": "@@ -3654,6 +3654,8 @@ extern tree build_int_cst (tree, HOST_WIDE_INT);\n extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree build_int_cstu (tree, unsigned HOST_WIDE_INT);\n extern tree build_int_cst_wide (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n+extern tree build_int_cst_wide_type (tree,\n+\t\t\t\t     unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_vector (tree, tree);\n extern tree build_vector_from_ctor (tree, VEC(constructor_elt,gc) *);\n extern tree build_constructor (tree, VEC(constructor_elt,gc) *);"}]}