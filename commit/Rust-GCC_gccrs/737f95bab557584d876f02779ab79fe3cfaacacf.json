{"sha": "737f95bab557584d876f02779ab79fe3cfaacacf", "node_id": "C_kwDOANBUbNoAKDczN2Y5NWJhYjU1NzU4NGQ4NzZmMDI3NzlhYjc5ZmUzY2ZhYWNhY2Y", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-05T20:28:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-05T20:28:38Z"}, "message": "c++: Fix apply_identity_attributes [PR102548]\n\nThe following testcase ICEs on x86_64-linux with -m32 due to a bug in\napply_identity_attributes.  The function is being smart and attempts not\nto duplicate the chain unnecessarily, if either there are no attributes\nthat affect type identity or there is possibly empty set of attributes\nthat do not affect type identity in the chain followed by attributes\nthat do affect type identity, it reuses that attribute chain.\n\nThe function mishandles the cases where in the chain an attribute affects\ntype identity and is followed by one or more attributes that don't\naffect type identity (and then perhaps some further ones that do).\n\nThere are two bugs.  One is that when we notice first attribute that\ndoesn't affect type identity after first attribute that does affect type\nidentity (with perhaps some further such attributes in the chain after it),\nwe want to put into the new chain just attributes starting from\n(inclusive) first_ident and up to (exclusive) the current attribute a,\nbut the code puts into the chain all attributes starting with first_ident,\nincluding the ones that do not affect type identity and if e.g. we have\ndoesn't0 affects1 doesn't2 affects3 affects4 sequence of attributes, the\nresulting sequence would have\naffects1 doesn't2 affects3 affects4 affects3 affects4\nattributes, i.e. one attribute that shouldn't be there and two attributes\nduplicated.  That is fixed by the a2 -> a2 != a change.\n\nThe second one is that we ICE once we see second attribute that doesn't\naffect type identity after an attribute that affects it.  That is because\nfirst_ident is set to error_mark_node after handling the first attribute\nthat doesn't affect type identity (i.e. after we've copied the\n[first_ident, a) set of attributes to the new chain) to denote that from\nthat time on, each attribute that affects type identity should be copied\nwhenever it is seen (the if (as && as->affects_type_identity) code does\nthat correctly).  But that condition is false and first_ident is\nerror_mark_node, we enter else if (first_ident) and use TREE_PURPOSE\n/TREE_VALUE/TREE_CHAIN on error_mark_node, which ICEs.  When\nfirst_ident is error_mark_node and a doesn't affect type identity,\nwe want to do nothing.  So that is the && first_ident != error_mark_node\nchunk.\n\n2021-10-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102548\n\t* tree.c (apply_identity_attributes): Fix handling of the\n\tcase where an attribute in the list doesn't affect type\n\tidentity but some attribute before it does.\n\n\t* g++.target/i386/pr102548.C: New test.", "tree": {"sha": "5d0fa6ee792810d467e489d60daea17b5df1a7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0fa6ee792810d467e489d60daea17b5df1a7ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/737f95bab557584d876f02779ab79fe3cfaacacf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737f95bab557584d876f02779ab79fe3cfaacacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737f95bab557584d876f02779ab79fe3cfaacacf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737f95bab557584d876f02779ab79fe3cfaacacf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24760533b62bb7068e63eb8da49dbca2837d38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24760533b62bb7068e63eb8da49dbca2837d38d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24760533b62bb7068e63eb8da49dbca2837d38d"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "32ddf835a9184a60a1453b4fdf51580050b0705f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737f95bab557584d876f02779ab79fe3cfaacacf/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737f95bab557584d876f02779ab79fe3cfaacacf/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=737f95bab557584d876f02779ab79fe3cfaacacf", "patch": "@@ -1499,9 +1499,9 @@ apply_identity_attributes (tree result, tree attribs, bool *remove_attributes)\n \t      p = &TREE_CHAIN (*p);\n \t    }\n \t}\n-      else if (first_ident)\n+      else if (first_ident && first_ident != error_mark_node)\n \t{\n-\t  for (tree a2 = first_ident; a2; a2 = TREE_CHAIN (a2))\n+\t  for (tree a2 = first_ident; a2 != a; a2 = TREE_CHAIN (a2))\n \t    {\n \t      *p = tree_cons (TREE_PURPOSE (a2), TREE_VALUE (a2), NULL_TREE);\n \t      p = &TREE_CHAIN (*p);"}, {"sha": "e1238c3f904aaa8410b2b63df27b0c62bd154a5b", "filename": "gcc/testsuite/g++.target/i386/pr102548.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737f95bab557584d876f02779ab79fe3cfaacacf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102548.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737f95bab557584d876f02779ab79fe3cfaacacf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102548.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102548.C?ref=737f95bab557584d876f02779ab79fe3cfaacacf", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/102548\n+// { dg-do compile { target { c++14 && ia32 } } }\n+\n+typedef decltype(sizeof(0)) size_t;\n+struct tm;\n+extern \"C\" size_t __attribute__((__cdecl__)) strftime (char *, size_t, const char *, const struct tm *);\n+\n+auto\n+foo (void)\n+{\n+  return strftime;\n+}"}]}