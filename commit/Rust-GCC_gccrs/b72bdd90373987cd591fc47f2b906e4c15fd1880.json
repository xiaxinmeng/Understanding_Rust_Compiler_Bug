{"sha": "b72bdd90373987cd591fc47f2b906e4c15fd1880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyYmRkOTAzNzM5ODdjZDU5MWZjNDdmMmI5MDZlNGMxNWZkMTg4MA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-29T17:16:51Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-29T17:16:51Z"}, "message": "re PR middle-end/55027 (simplify vector multiplication by 1)\n\n2012-10-29  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR middle-end/55027\n\ngcc/\n\t* tree.c (real_zerop, real_onep, real_twop, real_minus_onep):\n\tHandle VECTOR_CST.\n\ntestsuite/\n\t* gcc.dg/pr55027.c: New testcase.\n\nFrom-SVN: r192954", "tree": {"sha": "bb15cfddab3c8c4729cdefef2669d39224bf685d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb15cfddab3c8c4729cdefef2669d39224bf685d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b72bdd90373987cd591fc47f2b906e4c15fd1880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72bdd90373987cd591fc47f2b906e4c15fd1880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72bdd90373987cd591fc47f2b906e4c15fd1880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72bdd90373987cd591fc47f2b906e4c15fd1880/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa547b393c74ed9cd176b24dc91561b750891cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa547b393c74ed9cd176b24dc91561b750891cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa547b393c74ed9cd176b24dc91561b750891cac"}], "stats": {"total": 123, "additions": 99, "deletions": 24}, "files": [{"sha": "4f146736a716949bbb9362ddae09c80fcdf97b94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b72bdd90373987cd591fc47f2b906e4c15fd1880", "patch": "@@ -1,3 +1,9 @@\n+2012-10-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/55027\n+\t* tree.c (real_zerop, real_onep, real_twop, real_minus_onep):\n+\tHandle VECTOR_CST.\n+\n 2012-10-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* rtlanal.c (strip_address_mutation): Use SUBREG_REG instead of"}, {"sha": "0c0124d4f1ace0ba49ae8687f555be0f6f532c18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b72bdd90373987cd591fc47f2b906e4c15fd1880", "patch": "@@ -1,3 +1,8 @@\n+2012-10-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/55027\n+\t* gcc.dg/pr55027.c: New testcase.\n+\n 2012-10-29  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/ipa/inline-6.c: New testcase."}, {"sha": "e72b8fc03dca6d90882d92c322670caa62bea209", "filename": "gcc/testsuite/gcc.dg/pr55027.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55027.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55027.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55027.c?ref=b72bdd90373987cd591fc47f2b906e4c15fd1880", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-optimized-raw\" } */\n+\n+typedef double v2df __attribute__ ((__vector_size__ (2 * sizeof (double))));\n+\n+void f (v2df *x)\n+{\n+  *x = 0 + 1 * *x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"gimple_assign\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a671aed236ea99e67048d5eca60a2c1d3a70a678", "filename": "gcc/tree.c", "status": "modified", "additions": 76, "deletions": 24, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bdd90373987cd591fc47f2b906e4c15fd1880/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b72bdd90373987cd591fc47f2b906e4c15fd1880", "patch": "@@ -1992,12 +1992,25 @@ real_zerop (const_tree expr)\n {\n   STRIP_NOPS (expr);\n \n-  return ((TREE_CODE (expr) == REAL_CST\n-\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0)\n-\t   && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr)))))\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && real_zerop (TREE_REALPART (expr))\n-\t      && real_zerop (TREE_IMAGPART (expr))));\n+  switch (TREE_CODE (expr))\n+    {\n+    case REAL_CST:\n+      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0)\n+\t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n+    case COMPLEX_CST:\n+      return real_zerop (TREE_REALPART (expr))\n+\t     && real_zerop (TREE_IMAGPART (expr));\n+    case VECTOR_CST:\n+      {\n+\tunsigned i;\n+\tfor (i = 0; i < VECTOR_CST_NELTS (expr); ++i)\n+\t  if (!real_zerop (VECTOR_CST_ELT (expr, i)))\n+\t    return false;\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n \n /* Return 1 if EXPR is the real constant one in real or complex form.\n@@ -2009,12 +2022,25 @@ real_onep (const_tree expr)\n {\n   STRIP_NOPS (expr);\n \n-  return ((TREE_CODE (expr) == REAL_CST\n-\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1)\n-\t   && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr)))))\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && real_onep (TREE_REALPART (expr))\n-\t      && real_zerop (TREE_IMAGPART (expr))));\n+  switch (TREE_CODE (expr))\n+    {\n+    case REAL_CST:\n+      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1)\n+\t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n+    case COMPLEX_CST:\n+      return real_onep (TREE_REALPART (expr))\n+\t     && real_zerop (TREE_IMAGPART (expr));\n+    case VECTOR_CST:\n+      {\n+\tunsigned i;\n+\tfor (i = 0; i < VECTOR_CST_NELTS (expr); ++i)\n+\t  if (!real_onep (VECTOR_CST_ELT (expr, i)))\n+\t    return false;\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n \n /* Return 1 if EXPR is the real constant two.  Trailing zeroes matter\n@@ -2025,12 +2051,25 @@ real_twop (const_tree expr)\n {\n   STRIP_NOPS (expr);\n \n-  return ((TREE_CODE (expr) == REAL_CST\n-\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst2)\n-\t   && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr)))))\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && real_twop (TREE_REALPART (expr))\n-\t      && real_zerop (TREE_IMAGPART (expr))));\n+  switch (TREE_CODE (expr))\n+    {\n+    case REAL_CST:\n+      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst2)\n+\t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n+    case COMPLEX_CST:\n+      return real_twop (TREE_REALPART (expr))\n+\t     && real_zerop (TREE_IMAGPART (expr));\n+    case VECTOR_CST:\n+      {\n+\tunsigned i;\n+\tfor (i = 0; i < VECTOR_CST_NELTS (expr); ++i)\n+\t  if (!real_twop (VECTOR_CST_ELT (expr, i)))\n+\t    return false;\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n \n /* Return 1 if EXPR is the real constant minus one.  Trailing zeroes\n@@ -2041,12 +2080,25 @@ real_minus_onep (const_tree expr)\n {\n   STRIP_NOPS (expr);\n \n-  return ((TREE_CODE (expr) == REAL_CST\n-\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconstm1)\n-\t   && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr)))))\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && real_minus_onep (TREE_REALPART (expr))\n-\t      && real_zerop (TREE_IMAGPART (expr))));\n+  switch (TREE_CODE (expr))\n+    {\n+    case REAL_CST:\n+      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconstm1)\n+\t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n+    case COMPLEX_CST:\n+      return real_minus_onep (TREE_REALPART (expr))\n+\t     && real_zerop (TREE_IMAGPART (expr));\n+    case VECTOR_CST:\n+      {\n+\tunsigned i;\n+\tfor (i = 0; i < VECTOR_CST_NELTS (expr); ++i)\n+\t  if (!real_minus_onep (VECTOR_CST_ELT (expr, i)))\n+\t    return false;\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n \n /* Nonzero if EXP is a constant or a cast of a constant.  */"}]}