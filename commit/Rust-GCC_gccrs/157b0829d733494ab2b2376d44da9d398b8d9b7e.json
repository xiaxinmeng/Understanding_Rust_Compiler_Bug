{"sha": "157b0829d733494ab2b2376d44da9d398b8d9b7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3YjA4MjlkNzMzNDk0YWIyYjIzNzZkNDRkYTlkMzk4YjhkOWI3ZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2016-01-21T14:07:01Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2016-01-21T14:07:01Z"}, "message": "re PR target/69129 (ICE in get_attr_got, at config/mips/mips.md:694 on mips-linux-gnu)\n\n\tPR target/69129\n\tPR target/69012\n\t* config/mips/mips.c (mips_compute_frame_info): Initialise\n\targs_size and hard_frame_pointer_offset fields of the frame\n\tstructure before calling mips_global_pointer.\n\n\tPR target/69129\n\t* gcc.target/mips/pr69129.c: New.\n\nFrom-SVN: r232674", "tree": {"sha": "34f425796870051f50eecef22ef831a599c3d8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f425796870051f50eecef22ef831a599c3d8a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157b0829d733494ab2b2376d44da9d398b8d9b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157b0829d733494ab2b2376d44da9d398b8d9b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157b0829d733494ab2b2376d44da9d398b8d9b7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157b0829d733494ab2b2376d44da9d398b8d9b7e/comments", "author": null, "committer": null, "parents": [{"sha": "a52f938b1b4daec4b915bd99203a76dda21b87be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52f938b1b4daec4b915bd99203a76dda21b87be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52f938b1b4daec4b915bd99203a76dda21b87be"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "e620e3064036707be7db3ec6b214e9a6cce32c9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157b0829d733494ab2b2376d44da9d398b8d9b7e", "patch": "@@ -1,3 +1,12 @@\n+2016-01-21  Bernd Enlinger  <bernd.edlinger@hotmail.de>\n+\t    Nick Clifton  <nickc@redhat.com>\n+\n+\tPR target/69129\n+\tPR target/69012\n+\t* config/mips/mips.c (mips_compute_frame_info): Initialise\n+\targs_size and hard_frame_pointer_offset fields of the frame\n+\tstructure before calling mips_global_pointer.\n+\n 2016-01-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* configure.ac (gcc_cv_as_dwloc): Test support for debug frame section"}, {"sha": "dd54d6ab37aff104181d52d8cdfac42387dfdd4e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=157b0829d733494ab2b2376d44da9d398b8d9b7e", "patch": "@@ -10347,8 +10347,6 @@ mips_compute_frame_info (void)\n   memset (frame, 0, sizeof (*frame));\n   size = get_frame_size ();\n \n-  cfun->machine->global_pointer = mips_global_pointer ();\n-\n   /* The first two blocks contain the outgoing argument area and the $gp save\n      slot.  This area isn't needed in leaf functions.  We can also skip it\n      if we know that none of the called functions will use this space.\n@@ -10375,6 +10373,26 @@ mips_compute_frame_info (void)\n       frame->args_size = crtl->outgoing_args_size;\n       frame->cprestore_size = MIPS_GP_SAVE_AREA_SIZE;\n     }\n+\n+  /* MIPS16 code offsets the frame pointer by the size of the outgoing\n+     arguments.  This tends to increase the chances of using unextended\n+     instructions for local variables and incoming arguments.  */\n+  if (TARGET_MIPS16)\n+    frame->hard_frame_pointer_offset = frame->args_size;\n+\n+  /* PR 69129 / 69012: Beware of a possible race condition.  mips_global_pointer\n+     might call mips_cfun_has_inflexible_gp_ref_p which in turn can call\n+     mips_find_gp_ref which will iterate over the current insn sequence.\n+     If any of these insns use the cprestore_save_slot_operand or\n+     cprestore_load_slot_operand predicates in order to be recognised then\n+     they will call mips_cprestore_address_p which calls\n+     mips_get_cprestore_base_and_offset which expects the frame information\n+     to be filled in...  In fact mips_get_cprestore_base_and_offset only\n+     needs the args_size and hard_frame_pointer_offset fields to be filled\n+     in, which is why the global_pointer field is initialised here and not\n+     earlier.  */\n+  cfun->machine->global_pointer = mips_global_pointer ();\n+\n   offset = frame->args_size + frame->cprestore_size;\n \n   /* Move above the local variables.  */\n@@ -10520,12 +10538,6 @@ mips_compute_frame_info (void)\n     frame->acc_save_offset = frame->acc_sp_offset - offset;\n   if (frame->num_cop0_regs > 0)\n     frame->cop0_save_offset = frame->cop0_sp_offset - offset;\n-\n-  /* MIPS16 code offsets the frame pointer by the size of the outgoing\n-     arguments.  This tends to increase the chances of using unextended\n-     instructions for local variables and incoming arguments.  */\n-  if (TARGET_MIPS16)\n-    frame->hard_frame_pointer_offset = frame->args_size;\n }\n \n /* Return the style of GP load sequence that is being used for the"}, {"sha": "08aafd107222a46ddcd5fbcf539ee5d6435e50bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=157b0829d733494ab2b2376d44da9d398b8d9b7e", "patch": "@@ -1,3 +1,8 @@\n+2016-01-21  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR target/69129\n+\t* gcc.target/mips/pr69129.c: New.\n+\n 2016-01-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58046"}, {"sha": "186582f50d8101ec6e03513d0a35229b6565fd29", "filename": "gcc/testsuite/gcc.target/mips/pr69129.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr69129.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157b0829d733494ab2b2376d44da9d398b8d9b7e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr69129.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr69129.c?ref=157b0829d733494ab2b2376d44da9d398b8d9b7e", "patch": "@@ -0,0 +1,29 @@\n+_Noreturn void fn1 (int) __attribute__((__visibility__(\"hidden\")));\n+\n+void\n+fn2 (void *p1)\n+{\n+  int a[7];\n+  float *b;\n+  int c, n;\n+\n+  if (c != p1) /* { dg-warning \"comparison between pointer and integer\" } */\n+    fn1 (1);\n+\n+  n = 0;\n+  for (; c; n++)\n+    {\n+      int d;\n+      if (a[n] != d)\n+\tfn1(n);\n+    }\n+\n+  b = p1;\n+\n+  while (1)\n+    {\n+      *b = 3.40282347e38f;\n+      if (a[0])\n+\treturn;\n+    }\n+}"}]}