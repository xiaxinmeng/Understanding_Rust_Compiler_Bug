{"sha": "fe03b3df84399b6e2f63ea4286b295e8dc145c60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwM2IzZGY4NDM5OWI2ZTJmNjNlYTQyODZiMjk1ZThkYzE0NWM2MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-05T14:11:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-05T14:11:11Z"}, "message": "[multiple changes]\n\n2009-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/lib/libstdc++.exp (check_v3_target_rvalref): Remove.\n\t* testsuite/lib/dg-options.exp (dg-require-rvalref): Likewise.\n\n2009-10-05  Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/bits/stl_algo.h (__stable_partition_adaptive,\n\t__rotate_adaptive, __merge_adaptive, __merge_sort_loop):\n\tExtend to work with rvalue references in C++0x mode.\n\t* testsuite/25_algorithms/inplace_merge/moveable2.cc: New.\n\t* testsuite/25_algorithms/inplace_merge/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/stable_partition/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/moveable2.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/moveable.cc: Likewise.\n\nFrom-SVN: r152451", "tree": {"sha": "30641a73165472d83cdeb2b7fd1a56af00148c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30641a73165472d83cdeb2b7fd1a56af00148c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe03b3df84399b6e2f63ea4286b295e8dc145c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe03b3df84399b6e2f63ea4286b295e8dc145c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe03b3df84399b6e2f63ea4286b295e8dc145c60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe03b3df84399b6e2f63ea4286b295e8dc145c60/comments", "author": null, "committer": null, "parents": [{"sha": "1a735925e30877491ac12ca78612e4de29c4bf0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a735925e30877491ac12ca78612e4de29c4bf0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a735925e30877491ac12ca78612e4de29c4bf0f"}], "stats": {"total": 460, "additions": 365, "deletions": 95}, "files": [{"sha": "f13105a2262b2d421e658c77675f1ed619fa8e13", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -1,3 +1,19 @@\n+2009-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_rvalref): Remove.\n+\t* testsuite/lib/dg-options.exp (dg-require-rvalref): Likewise.\n+\n+2009-10-05  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/bits/stl_algo.h (__stable_partition_adaptive,\n+\t__rotate_adaptive, __merge_adaptive, __merge_sort_loop):\n+\tExtend to work with rvalue references in C++0x mode.\n+\t* testsuite/25_algorithms/inplace_merge/moveable2.cc: New.\n+\t* testsuite/25_algorithms/inplace_merge/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_partition/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/moveable2.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/moveable.cc: Likewise.\n+\n 2009-10-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/manual/using.xml: Add profile headers."}, {"sha": "70cde1a4bf04f2560598cc800219b48725fdb7a8", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 56, "deletions": 31, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -1862,15 +1862,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  for (; __first != __last; ++__first)\n \t    if (__pred(*__first))\n \t      {\n-\t\t*__result1 = *__first;\n+\t\t*__result1 = _GLIBCXX_MOVE(*__first);\n \t\t++__result1;\n \t      }\n \t    else\n \t      {\n-\t\t*__result2 = *__first;\n+\t\t*__result2 = _GLIBCXX_MOVE(*__first);\n \t\t++__result2;\n \t      }\n-\t  std::copy(__buffer, __result2, __result1);\n+\t  _GLIBCXX_MOVE3(__buffer, __result2, __result1);\n \t  return __result1;\n \t}\n       else\n@@ -2926,15 +2926,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _BidirectionalIterator2 __buffer_end;\n       if (__len1 > __len2 && __len2 <= __buffer_size)\n \t{\n-\t  __buffer_end = std::copy(__middle, __last, __buffer);\n-\t  std::copy_backward(__first, __middle, __last);\n-\t  return std::copy(__buffer, __buffer_end, __first);\n+\t  __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n+\t  _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);\n+\t  return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);\n \t}\n       else if (__len1 <= __buffer_size)\n \t{\n-\t  __buffer_end = std::copy(__first, __middle, __buffer);\n-\t  std::copy(__middle, __last, __first);\n-\t  return std::copy_backward(__buffer, __buffer_end, __last);\n+\t  __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n+\t  _GLIBCXX_MOVE3(__middle, __last, __first);\n+\t  return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);\n \t}\n       else\n \t{\n@@ -2956,15 +2956,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       if (__len1 <= __len2 && __len1 <= __buffer_size)\n \t{\n-\t  _Pointer __buffer_end = std::copy(__first, __middle, __buffer);\n-\t  _GLIBCXX_STD_P::merge(__buffer, __buffer_end, __middle, __last, \n+\t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n+\t  _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer_end),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__middle),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n \t\t\t\t__first);\n \t}\n       else if (__len2 <= __buffer_size)\n \t{\n-\t  _Pointer __buffer_end = std::copy(__middle, __last, __buffer);\n-\t  std::__merge_backward(__first, __middle, __buffer,\n-\t\t\t\t__buffer_end, __last);\n+\t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n+\t  std::__merge_backward(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__middle),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer_end),\n+\t\t\t\t__last);\n \t}\n       else\n \t{\n@@ -3013,15 +3019,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       if (__len1 <= __len2 && __len1 <= __buffer_size)\n \t{\n-\t  _Pointer __buffer_end = std::copy(__first, __middle, __buffer);\n-\t  _GLIBCXX_STD_P::merge(__buffer, __buffer_end, __middle, __last,\n+\t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n+\t  _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer_end),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__middle),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n \t\t\t\t__first, __comp);\n \t}\n       else if (__len2 <= __buffer_size)\n \t{\n-\t  _Pointer __buffer_end = std::copy(__middle, __last, __buffer);\n-\t  std::__merge_backward(__first, __middle, __buffer, __buffer_end,\n-\t\t\t\t__last, __comp);\n+\t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n+\t  std::__merge_backward(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__middle),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n+\t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer_end),\n+\t\t\t\t__last,__comp);\n \t}\n       else\n \t{\n@@ -3270,16 +3282,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       while (__last - __first >= __two_step)\n \t{\n-\t  __result = _GLIBCXX_STD_P::merge(__first, __first + __step_size,\n-\t\t\t\t\t   __first + __step_size,\n-\t\t\t\t\t   __first + __two_step,\n-\t\t\t\t\t   __result);\n+\t  __result = _GLIBCXX_STD_P::merge(\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __two_step),\n+\t\t\t__result);\n \t  __first += __two_step;\n \t}\n \n       __step_size = std::min(_Distance(__last - __first), __step_size);\n-      _GLIBCXX_STD_P::merge(__first, __first + __step_size, \n-\t\t\t    __first + __step_size, __last,\n+      _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n+\t\t\t\t\t\t\t__step_size),\n+\t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n+\t\t\t\t\t\t\t__step_size),\n+\t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n \t\t\t    __result);\n     }\n \n@@ -3295,16 +3313,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       while (__last - __first >= __two_step)\n \t{\n-\t  __result = _GLIBCXX_STD_P::merge(__first, __first + __step_size,\n-\t\t\t\t__first + __step_size, __first + __two_step,\n-\t\t\t\t__result,\n-\t\t\t\t__comp);\n+\t  __result = _GLIBCXX_STD_P::merge(\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n+\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __two_step),\n+\t\t\t__result, __comp);\n \t  __first += __two_step;\n \t}\n       __step_size = std::min(_Distance(__last - __first), __step_size);\n \n-      _GLIBCXX_STD_P::merge(__first, __first + __step_size,\n-\t\t\t    __first + __step_size, __last, __result, __comp);\n+      _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n+\t\t\t\t\t\t\t__step_size),\n+\t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n+\t\t\t\t\t\t\t__step_size),\n+\t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n+\t\t\t    __result, __comp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance>"}, {"sha": "4b07a63edee3482881a10d5258d8299726945063", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/moveable.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.4 [lib.alg.merge]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> container;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[]={0,2,4,1,3,5};\n+  rvalstruct rv_array[6];\n+  std::copy(array, array + 6, rv_array);\n+  container con(rv_array, rv_array + 6);\n+  std::inplace_merge(con.begin(), con.it(3), con.end());\n+  VERIFY( rv_array[0] == 0 && rv_array[1] == 1 && rv_array[2] == 2\n+\t  && rv_array[3] == 3 && rv_array[4] == 4 && rv_array[5] == 5 );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "32ab3c70c6b590970b80a26940d04c79f0817505", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/moveable2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.4 [lib.alg.merge]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> container;\n+\n+bool\n+are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[]={0,2,4,1,3,5};\n+  rvalstruct rv_array[6];\n+  std::copy(array, array + 6, rv_array);\n+  container con(rv_array, rv_array + 6);\n+  std::inplace_merge(con.begin(), con.it(3), con.end(), are_ordered);\n+  VERIFY( rv_array[0] == 0 && rv_array[1] == 1 && rv_array[2] == 2\n+\t  && rv_array[3] == 3 && rv_array[4] == 4 && rv_array[5] == 5 );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "193f1312849b2e6332fa3aeb7474bf8f5413b114", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/moveable.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmoveable.cc?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.12 [lib.alg.partitions] Partitions.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n+const int N = sizeof(A) / sizeof(int);\n+\n+struct Pred\n+{\n+  bool\n+  operator()(const rvalstruct& x) const\n+  { return (x.val % 2) == 0; }\n+};\n+\n+// 25.2.12 stable_partition()\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[N];\n+  std::copy(A, A + N, s1);\n+  Container con(s1, s1 + N);\n+\n+  std::stable_partition(con.begin(), con.end(), Pred());\n+  VERIFY( std::equal(s1, s1 + N, B) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "09d6129c06c773ec75c3255c457a0ec2df09b142", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/moveable.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable.cc?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.1.2 [lib.stable.sort]\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+const int A[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n+\t\t  17, 8, 18, 9, 19 };\n+const int N = sizeof(A) / sizeof(int);\n+\n+// 25.3.1.2 stable_sort()\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[N];\n+  std::copy(A, A + N, s1);\n+  Container con(s1, s1 + N);\n+  std::stable_sort(con.begin(), con.end());\n+  VERIFY( s1[0].valid );\n+  for(int i = 1; i < N; ++i)\n+    VERIFY( s1[i].val>s1[i-1].val && s1[i].valid );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "86ff353967d7bf00f2a941e279261fd0bed4fd07", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/moveable2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable2.cc?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.1.2 [lib.stable.sort]\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+const int A[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n+\t\t  17, 8, 18, 9, 19 };\n+const int N = sizeof(A) / sizeof(int);\n+\n+bool order(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+// 25.3.1.2 stable_sort()\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[N];\n+  std::copy(A, A + N, s1);\n+  Container con(s1, s1 + N);\n+  std::stable_sort(con.begin(), con.end(), order);\n+  VERIFY( s1[0].valid );\n+  for(int i = 1; i < N; ++i)\n+    VERIFY( s1[i].val>s1[i-1].val && s1[i].valid );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "60e9b78fdbadcf56a2ea1b92deab57013505d22c", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -80,15 +80,6 @@ proc dg-require-time { args } {\n     return\n }\n \n-proc dg-require-rvalref { args } {\n-    if { ![ check_v3_target_rvalref ] } {\n-\tupvar dg-do-what dg-do-what\n-\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n-\treturn\n-    }\n-    return\n-}\n-\n proc dg-require-cstdint { args } {\n     if { ![ check_v3_target_cstdint ] } {\n \tupvar dg-do-what dg-do-what"}, {"sha": "c71991afc90de4ca749dde81c980976b1b45165f", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03b3df84399b6e2f63ea4286b295e8dc145c60/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=fe03b3df84399b6e2f63ea4286b295e8dc145c60", "patch": "@@ -805,61 +805,6 @@ proc check_v3_target_time { } {\n     return $et_time_saved\n }\n \n-proc check_v3_target_rvalref { } {\n-    global et_rvalref_saved\n-    global et_rvalref_target_name\n-    global tool\t\n-\n-    if { ![info exists et_rvalref_target_name] } {\n-\tset et_rvalref_target_name \"\"\n-    }\n-\n-    # If the target has changed since we set the cached value, clear it.\n-    set current_target [current_target_name]\n-    if { $current_target != $et_rvalref_target_name } {\n-\tverbose \"check_v3_target_rvalref: `$et_rvalref_target_name'\" 2\n-\tset et_rvalref_target_name $current_target\n-\tif [info exists et_rvalref_saved] {\n-\t    verbose \"check_v3_target_rvalref: removing cached result\" 2\n-\t    unset et_rvalref_saved\n-\t}\n-    }\n-\n-    if [info exists et_rvalref_saved] {\n-\tverbose \"check_v3_target_rvalref: using cached result\" 2\n-    } else {\n-\tset et_rvalref_saved 0\n-\n-\t# Set up and compile a C++ test program that tries to use\n-\t# the library components of rval references\n-\tset src rvalref[pid].cc\n-\tset exe rvalref[pid].x\n-\n-\tset f [open $src \"w\"]\n-\tputs $f \"#include <iterator>\"\n-\tputs $f \"#include <utility>\"\n-\tputs $f \"using std::move;\"\n-\tputs $f \"using std::identity;\"\n-\tputs $f \"using std::forward;\"\n-\tputs $f \"using std::move_iterator;\"\n-\tputs $f \"using std::make_move_iterator;\"\n-\tclose $f\n-\n-\tset lines [v3_target_compile $src $exe executable \"\"]\n-\tfile delete $src\n-\n-\tif [string match \"\" $lines] {\n-\t    # No error message, compilation succeeded.\n-\t    verbose \"check_v3_target_rvalref: compilation succeeded\" 2\n-\t    remote_file build delete $exe\n-\t    set et_rvalref_saved 1\n-\t} else {\n-\t    verbose \"check_v3_target_rvalref: compilation failed\" 2\n-\t}\n-    }\n-    return $et_rvalref_saved\n-}\n-\n proc check_v3_target_namedlocale { } {\n     global et_namedlocale_saved\n     global et_namedlocale_target_name"}]}