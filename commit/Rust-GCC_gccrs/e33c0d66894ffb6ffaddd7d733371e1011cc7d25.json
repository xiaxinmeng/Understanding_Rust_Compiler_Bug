{"sha": "e33c0d66894ffb6ffaddd7d733371e1011cc7d25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzYzBkNjY4OTRmZmI2ZmZhZGRkN2Q3MzMzNzFlMTAxMWNjN2QyNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-06T06:24:13Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-06T06:24:13Z"}, "message": "(emit_move_insn_1): Push the components of a complex\nin proper order: imag part has higher address.\n\nFrom-SVN: r6024", "tree": {"sha": "149b2db7728e80371c26df0f9ed3521a07d7f4b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/149b2db7728e80371c26df0f9ed3521a07d7f4b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33c0d66894ffb6ffaddd7d733371e1011cc7d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33c0d66894ffb6ffaddd7d733371e1011cc7d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33c0d66894ffb6ffaddd7d733371e1011cc7d25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33c0d66894ffb6ffaddd7d733371e1011cc7d25/comments", "author": null, "committer": null, "parents": [{"sha": "82020a12d5c879337cadab7b738d1df2e2a306af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82020a12d5c879337cadab7b738d1df2e2a306af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82020a12d5c879337cadab7b738d1df2e2a306af"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "fc33c84f3f6ccfc6ff3efdcc3d28341fed4f9444", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33c0d66894ffb6ffaddd7d733371e1011cc7d25/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33c0d66894ffb6ffaddd7d733371e1011cc7d25/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e33c0d66894ffb6ffaddd7d733371e1011cc7d25", "patch": "@@ -1802,20 +1802,22 @@ emit_move_insn_1 (x, y)\n \t the mode, not to change the address.  */\n       if (stack)\n \t{\n+\t  /* Note that the real part always precedes the imag part in memory\n+\t     regardless of machine's endianness.  */\n #ifdef STACK_GROWS_DOWNWARD\n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n \t\t     (gen_rtx (MEM, submode, (XEXP (x, 0))),\n-\t\t      gen_highpart (submode, y)));\n+\t\t      gen_imagpart (submode, y)));\n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n \t\t     (gen_rtx (MEM, submode, (XEXP (x, 0))),\n-\t\t      gen_lowpart (submode, y)));\n+\t\t      gen_realpart (submode, y)));\n #else\n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n \t\t     (gen_rtx (MEM, submode, (XEXP (x, 0))),\n-\t\t      gen_lowpart (submode, y)));\n+\t\t      gen_realpart (submode, y)));\n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n \t\t     (gen_rtx (MEM, submode, (XEXP (x, 0))),\n-\t\t      gen_highpart (submode, y)));\n+\t\t      gen_imagpart (submode, y)));\n #endif\n \t}\n       else"}]}