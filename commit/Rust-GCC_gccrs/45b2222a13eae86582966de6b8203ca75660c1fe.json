{"sha": "45b2222a13eae86582966de6b8203ca75660c1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDViMjIyMmExM2VhZTg2NTgyOTY2ZGU2YjgyMDNjYTc1NjYwYzFmZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-06-13T13:59:05Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-06-13T13:59:05Z"}, "message": "Implement no_sanitize function attribute\n\n2017-06-13  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitize/78204\n\t* c-c++-common/ubsan/attrib-2.c (float_cast2): Enhance the\n\ttest by adding no_sanitize attribute.\n\t* gcc.dg/asan/use-after-scope-4.c: Likewise.\n2017-06-13  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitize/78204\n\t* c-attribs.c (add_no_sanitize_value): New function.\n\t(handle_no_sanitize_attribute): Likewise.\n\t(handle_no_sanitize_address_attribute): Use the function.\n\t(handle_no_sanitize_thread_attribute): New function.\n\t(handle_no_address_safety_analysis_attribute): Use\n\tadd_no_sanitize_value.\n\t(handle_no_sanitize_undefined_attribute): Likewise.\n\t* c-common.h: Declare new functions.\n\t* c-ubsan.c (ubsan_instrument_division): Use sanitize_flags_p.\n\t(ubsan_instrument_shift): Likewise.\n\t(ubsan_instrument_bounds): Likewise.\n\t(ubsan_maybe_instrument_array_ref): Likewise.\n\t(ubsan_maybe_instrument_reference_or_call): Likewise.\n2017-06-13  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitize/78204\n\t* asan.c (asan_sanitize_stack_p): Use sanitize_flags_p.\n\t(gate_asan): Likewise.\n\t* asan.h (asan_no_sanitize_address_p): Remove the function.\n\t(sanitize_flags_p): New function.\n\t* builtins.def: Fix coding style.\n\t* common.opt: Use renamed enum value.\n\t* convert.c (convert_to_integer_1): Use sanitize_flags_p.\n\t* doc/extend.texi: Document no_sanitize attribute.\n\t* flag-types.h (enum sanitize_code): Rename SANITIZE_NONDEFAULT\n\tto SANITIZE_UNDEFINED_NONDEFAULT.\n\t* gcc.c (sanitize_spec_function): Use the renamed enum value.\n\t* gimple-fold.c (optimize_atomic_compare_exchange_p):\n\tUse sanitize_flags_p.\n\t* gimplify.c (gimplify_function_tree): Likewise.\n\t* ipa-inline.c (sanitize_attrs_match_for_inline_p): Likewise.\n\t* opts.c (parse_no_sanitize_attribute): New function.\n\t(common_handle_option): Use renamed enum value.\n\t* opts.h (parse_no_sanitize_attribute): Declare.\n\t* tree.c (sanitize_flags_p): New function.\n\t* tree.h: Declared here.\n\t* tsan.c: Use sanitize_flags_p.\n\t* ubsan.c (ubsan_expand_null_ifn): Likewise.\n\t(instrument_mem_ref): Likewise.\n\t(instrument_bool_enum_load): Likewise.\n\t(do_ubsan_in_current_function): Remove the function.\n\t(pass_ubsan::execute): Use sanitize_flags_p.\n\t* ubsan.h: Remove do_ubsan_in_current_function\n\t* tree-cfg.c (print_no_sanitize_attr_value): New function.\n\t(dump_function_to_file): Use it here.\n2017-06-13  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitize/78204\n\t* class.c (build_base_path): Use sanitize_flags_p.\n\t* cp-gimplify.c (cp_genericize_r): Likewise.\n\t(cp_genericize_tree): Likewise.\n\t(cp_genericize): Likewise.\n\t* cp-ubsan.c (cp_ubsan_instrument_vptr_p): Likewise.\n\t* decl.c (compute_array_index_type): Likewise.\n\t(start_preparsed_function): Likewise.\n\t* decl2.c (one_static_initialization_or_destruction): Likewise.\n\t* init.c (finish_length_check): Likewise.\n\t* lambda.c (maybe_add_lambda_conv_op): Likewise.\n\t* typeck.c (cp_build_binary_op): Likewise.\n\t(build_static_cast_1): Likewise.\n2017-06-13  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitize/78204\n\t* c-convert.c (convert): Use sanitize_flags_p.\n\t* c-decl.c (grokdeclarator): Likewise.\n\t* c-typeck.c (convert_for_assignment): Likewise.\n\t(c_finish_return): Likewise.\n\t(build_binary_op): Likewise.\n\nFrom-SVN: r249158", "tree": {"sha": "36d6c2af79ae50b3f1411ab1d312739c1d808a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d6c2af79ae50b3f1411ab1d312739c1d808a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45b2222a13eae86582966de6b8203ca75660c1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b2222a13eae86582966de6b8203ca75660c1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b2222a13eae86582966de6b8203ca75660c1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b2222a13eae86582966de6b8203ca75660c1fe/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef0e3441246ee1dc01b3bf39622bc53644b181f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0e3441246ee1dc01b3bf39622bc53644b181f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0e3441246ee1dc01b3bf39622bc53644b181f8"}], "stats": {"total": 563, "additions": 409, "deletions": 154}, "files": [{"sha": "32f2d343a22a2d3061d9d3d09ad7eb1db68e6c08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1,3 +1,36 @@\n+2017-06-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitize/78204\n+\t* asan.c (asan_sanitize_stack_p): Use sanitize_flags_p.\n+\t(gate_asan): Likewise.\n+\t* asan.h (asan_no_sanitize_address_p): Remove the function.\n+\t(sanitize_flags_p): New function.\n+\t* builtins.def: Fix coding style.\n+\t* common.opt: Use renamed enum value.\n+\t* convert.c (convert_to_integer_1): Use sanitize_flags_p.\n+\t* doc/extend.texi: Document no_sanitize attribute.\n+\t* flag-types.h (enum sanitize_code): Rename SANITIZE_NONDEFAULT\n+\tto SANITIZE_UNDEFINED_NONDEFAULT.\n+\t* gcc.c (sanitize_spec_function): Use the renamed enum value.\n+\t* gimple-fold.c (optimize_atomic_compare_exchange_p):\n+\tUse sanitize_flags_p.\n+\t* gimplify.c (gimplify_function_tree): Likewise.\n+\t* ipa-inline.c (sanitize_attrs_match_for_inline_p): Likewise.\n+\t* opts.c (parse_no_sanitize_attribute): New function.\n+\t(common_handle_option): Use renamed enum value.\n+\t* opts.h (parse_no_sanitize_attribute): Declare.\n+\t* tree.c (sanitize_flags_p): New function.\n+\t* tree.h: Declared here.\n+\t* tsan.c: Use sanitize_flags_p.\n+\t* ubsan.c (ubsan_expand_null_ifn): Likewise.\n+\t(instrument_mem_ref): Likewise.\n+\t(instrument_bool_enum_load): Likewise.\n+\t(do_ubsan_in_current_function): Remove the function.\n+\t(pass_ubsan::execute): Use sanitize_flags_p.\n+\t* ubsan.h: Remove do_ubsan_in_current_function\n+\t* tree-cfg.c (print_no_sanitize_attr_value): New function.\n+\t(dump_function_to_file): Use it here.\n+\n 2017-06-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/80803"}, {"sha": "e730530930b44fbf937542ceff2d0f988e9a4b10", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -305,9 +305,7 @@ asan_mark_p (gimple *stmt, enum asan_mark_flags flag)\n bool\n asan_sanitize_stack_p (void)\n {\n-  return ((flag_sanitize & SANITIZE_ADDRESS)\n-\t  && ASAN_STACK\n-\t  && !asan_no_sanitize_address_p ());\n+  return (sanitize_flags_p (SANITIZE_ADDRESS) && ASAN_STACK);\n }\n \n /* Checks whether section SEC should be sanitized.  */\n@@ -3194,9 +3192,7 @@ asan_instrument (void)\n static bool\n gate_asan (void)\n {\n-  return (flag_sanitize & SANITIZE_ADDRESS) != 0\n-\t  && !lookup_attribute (\"no_sanitize_address\",\n-\t\t\t\tDECL_ATTRIBUTES (current_function_decl));\n+  return sanitize_flags_p (SANITIZE_ADDRESS);\n }\n \n namespace {"}, {"sha": "95bb89e197c9b84a51d85975fa23fa437127341b", "filename": "gcc/asan.h", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -144,13 +144,6 @@ asan_sanitize_use_after_scope (void)\n   return (flag_sanitize_address_use_after_scope && asan_sanitize_stack_p ());\n }\n \n-static inline bool\n-asan_no_sanitize_address_p (void)\n-{\n-  return lookup_attribute (\"no_sanitize_address\",\n-\t\t\t   DECL_ATTRIBUTES (current_function_decl));\n-}\n-\n /* Return true if DECL should be guarded on the stack.  */\n \n static inline bool\n@@ -161,4 +154,24 @@ asan_protect_stack_decl (tree decl)\n \t|| (asan_sanitize_use_after_scope () && TREE_ADDRESSABLE (decl)));\n }\n \n+/* Return true when flag_sanitize & FLAG is non-zero.  If FN is non-null,\n+   remove all flags mentioned in \"no_sanitize\" of DECL_ATTRIBUTES.  */\n+\n+static inline bool\n+sanitize_flags_p (unsigned int flag, const_tree fn = current_function_decl)\n+{\n+  unsigned int result_flags = flag_sanitize & flag;\n+  if (result_flags == 0)\n+    return false;\n+\n+  if (fn != NULL_TREE)\n+    {\n+      tree value = lookup_attribute (\"no_sanitize\", DECL_ATTRIBUTES (fn));\n+      if (value)\n+\tresult_flags &= ~tree_to_uhwi (TREE_VALUE (value));\n+    }\n+\n+  return result_flags;\n+}\n+\n #endif /* TREE_ASAN */"}, {"sha": "f242137a1cba70b8a28843d7e06e398790f871aa", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -236,7 +236,8 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n \t       true, true, true, ATTRS, true, \\\n \t      (flag_sanitize & (SANITIZE_ADDRESS | SANITIZE_THREAD \\\n-\t\t\t\t| SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT) \\\n+\t\t\t\t| SANITIZE_UNDEFINED \\\n+\t\t\t\t| SANITIZE_UNDEFINED_NONDEFAULT) \\\n \t       || flag_sanitize_coverage))\n \n #undef DEF_CILKPLUS_BUILTIN"}, {"sha": "84887683337d72a4e3ae811e754817e76b48de4b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1,3 +1,20 @@\n+2017-06-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitize/78204\n+\t* c-attribs.c (add_no_sanitize_value): New function.\n+\t(handle_no_sanitize_attribute): Likewise.\n+\t(handle_no_sanitize_address_attribute): Use the function.\n+\t(handle_no_sanitize_thread_attribute): New function.\n+\t(handle_no_address_safety_analysis_attribute): Use\n+\tadd_no_sanitize_value.\n+\t(handle_no_sanitize_undefined_attribute): Likewise.\n+\t* c-common.h: Declare new functions.\n+\t* c-ubsan.c (ubsan_instrument_division): Use sanitize_flags_p.\n+\t(ubsan_instrument_shift): Likewise.\n+\t(ubsan_instrument_bounds): Likewise.\n+\t(ubsan_maybe_instrument_array_ref): Likewise.\n+\t(ubsan_maybe_instrument_reference_or_call): Likewise.\n+\n 2017-06-11  Jason Merrill  <jason@redhat.com>\n \n \t* c-ada-spec.c, c-pragma.c: Use id_equal."}, {"sha": "2b6845f2cbd3afdf95b6b3dddc4f1bb8931873a8", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 96, "deletions": 14, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -51,8 +51,11 @@ static tree handle_common_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_no_sanitize_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_sanitize_address_attribute (tree *, tree, tree,\n \t\t\t\t\t\t  int, bool *);\n+static tree handle_no_sanitize_thread_attribute (tree *, tree, tree,\n+\t\t\t\t\t\t int, bool *);\n static tree handle_no_address_safety_analysis_attribute (tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *);\n static tree handle_no_sanitize_undefined_attribute (tree *, tree, tree, int,\n@@ -285,11 +288,14 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      0, 0, true, false, false,\n \t\t\t      handle_no_address_safety_analysis_attribute,\n \t\t\t      false },\n+  { \"no_sanitize\",\t      1, 1, true, false, false,\n+\t\t\t      handle_no_sanitize_attribute,\n+\t\t\t      false },\n   { \"no_sanitize_address\",    0, 0, true, false, false,\n \t\t\t      handle_no_sanitize_address_attribute,\n \t\t\t      false },\n   { \"no_sanitize_thread\",     0, 0, true, false, false,\n-\t\t\t      handle_no_sanitize_address_attribute,\n+\t\t\t      handle_no_sanitize_thread_attribute,\n \t\t\t      false },\n   { \"no_sanitize_undefined\",  0, 0, true, false, false,\n \t\t\t      handle_no_sanitize_undefined_attribute,\n@@ -547,36 +553,111 @@ handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n-/* Handle a \"no_sanitize_address\" attribute; arguments as in\n+/* Add FLAGS for a function NODE to no_sanitize_flags in DECL_ATTRIBUTES.  */\n+\n+void\n+add_no_sanitize_value (tree node, unsigned int flags)\n+{\n+  tree attr = lookup_attribute (\"no_sanitize\", DECL_ATTRIBUTES (node));\n+  if (attr)\n+    {\n+      unsigned int old_value = tree_to_uhwi (TREE_VALUE (attr));\n+      flags |= old_value;\n+\n+      if (flags == old_value)\n+\treturn;\n+\n+      TREE_VALUE (attr) = build_int_cst (unsigned_type_node, flags);\n+    }\n+  else\n+    DECL_ATTRIBUTES (node)\n+      = tree_cons (get_identifier (\"no_sanitize\"),\n+\t\t   build_int_cst (unsigned_type_node, flags),\n+\t\t   DECL_ATTRIBUTES (node));\n+}\n+\n+/* Handle a \"no_sanitize\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_no_sanitize_address_attribute (tree *node, tree name, tree, int,\n-\t\t\t\t      bool *no_add_attrs)\n+handle_no_sanitize_attribute (tree *node, tree name, tree args, int,\n+\t\t\t      bool *no_add_attrs)\n {\n+  *no_add_attrs = true;\n+  tree id = TREE_VALUE (args);\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  if (TREE_CODE (id) != STRING_CST)\n+    {\n+      error (\"no_sanitize argument not a string\");\n+      return NULL_TREE;\n+    }\n+\n+  char *error_value = NULL;\n+  char *string = ASTRDUP (TREE_STRING_POINTER (id));\n+  unsigned int flags = parse_no_sanitize_attribute (string, &error_value);\n+\n+  if (error_value)\n+    {\n+      error (\"wrong argument: \\\"%s\\\"\", error_value);\n+      return NULL_TREE;\n     }\n \n+  add_no_sanitize_value (*node, flags);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"no_sanitize_address\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_sanitize_address_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t      bool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+  else\n+    add_no_sanitize_value (*node, SANITIZE_ADDRESS);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"no_sanitize_thread\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_sanitize_thread_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t      bool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+  else\n+    add_no_sanitize_value (*node, SANITIZE_THREAD);\n+\n   return NULL_TREE;\n }\n \n+\n /* Handle a \"no_address_safety_analysis\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n static tree\n handle_no_address_safety_analysis_attribute (tree *node, tree name, tree, int,\n \t\t\t\t\t     bool *no_add_attrs)\n {\n+  *no_add_attrs = true;\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-  else if (!lookup_attribute (\"no_sanitize_address\", DECL_ATTRIBUTES (*node)))\n-    DECL_ATTRIBUTES (*node)\n-      = tree_cons (get_identifier (\"no_sanitize_address\"),\n-\t\t   NULL_TREE, DECL_ATTRIBUTES (*node));\n-  *no_add_attrs = true;\n+  else\n+    add_no_sanitize_value (*node, SANITIZE_ADDRESS);\n+\n   return NULL_TREE;\n }\n \n@@ -587,11 +668,12 @@ static tree\n handle_no_sanitize_undefined_attribute (tree *node, tree name, tree, int,\n \t\t\t\t      bool *no_add_attrs)\n {\n+  *no_add_attrs = true;\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-      *no_add_attrs = true;\n-    }\n+    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+  else\n+    add_no_sanitize_value (*node,\n+\t\t\t   SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT);\n \n   return NULL_TREE;\n }"}, {"sha": "1748c1979aaf913ab4a65ad87436293a3105b8d1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1552,6 +1552,7 @@ extern enum flt_eval_method\n excess_precision_mode_join (enum flt_eval_method, enum flt_eval_method);\n \n extern int c_flt_eval_method (bool ts18661_p);\n+extern void add_no_sanitize_value (tree node, unsigned int flags);\n \n #if CHECKING_P\n namespace selftest {"}, {"sha": "a072d19eda6b6a6908e635b3d322b42a2ed96924", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -49,19 +49,19 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n   op1 = unshare_expr (op1);\n \n   if (TREE_CODE (type) == INTEGER_TYPE\n-      && (flag_sanitize & SANITIZE_DIVIDE))\n+      && sanitize_flags_p (SANITIZE_DIVIDE))\n     t = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t     op1, build_int_cst (type, 0));\n   else if (TREE_CODE (type) == REAL_TYPE\n-\t   && (flag_sanitize & SANITIZE_FLOAT_DIVIDE))\n+\t   && sanitize_flags_p (SANITIZE_FLOAT_DIVIDE))\n     t = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t     op1, build_real (type, dconst0));\n   else\n     return NULL_TREE;\n \n   /* We check INT_MIN / -1 only for signed types.  */\n   if (TREE_CODE (type) == INTEGER_TYPE\n-      && (flag_sanitize & SANITIZE_DIVIDE)\n+      && sanitize_flags_p (SANITIZE_DIVIDE)\n       && !TYPE_UNSIGNED (type))\n     {\n       tree x;\n@@ -131,7 +131,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n      Also punt on bit-fields.  */\n   if (TYPE_OVERFLOW_WRAPS (type0)\n       || GET_MODE_BITSIZE (TYPE_MODE (type0)) != TYPE_PRECISION (type0)\n-      || (flag_sanitize & SANITIZE_SHIFT_BASE) == 0)\n+      || !sanitize_flags_p (SANITIZE_SHIFT_BASE))\n     ;\n \n   /* For signed x << y, in C99/C11, the following:\n@@ -178,7 +178,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n   tree else_t = void_node;\n   if (tt)\n     {\n-      if ((flag_sanitize & SANITIZE_SHIFT_EXPONENT) == 0)\n+      if (!sanitize_flags_p (SANITIZE_SHIFT_EXPONENT))\n \t{\n \t  t = fold_build1 (TRUTH_NOT_EXPR, boolean_type_node, t);\n \t  t = fold_build2 (TRUTH_AND_EXPR, boolean_type_node, t, tt);\n@@ -301,7 +301,7 @@ ubsan_instrument_bounds (location_t loc, tree array, tree *index,\n   /* Detect flexible array members and suchlike, unless\n      -fsanitize=bounds-strict.  */\n   tree base = get_base_address (array);\n-  if ((flag_sanitize & SANITIZE_BOUNDS_STRICT) == 0\n+  if (!sanitize_flags_p (SANITIZE_BOUNDS_STRICT)\n       && TREE_CODE (array) == COMPONENT_REF\n       && base && (INDIRECT_REF_P (base) || TREE_CODE (base) == MEM_REF))\n     {\n@@ -373,7 +373,7 @@ void\n ubsan_maybe_instrument_array_ref (tree *expr_p, bool ignore_off_by_one)\n {\n   if (!ubsan_array_ref_instrumented_p (*expr_p)\n-      && do_ubsan_in_current_function ())\n+      && sanitize_flags_p (SANITIZE_BOUNDS | SANITIZE_BOUNDS_STRICT))\n     {\n       tree op0 = TREE_OPERAND (*expr_p, 0);\n       tree op1 = TREE_OPERAND (*expr_p, 1);\n@@ -393,15 +393,15 @@ static tree\n ubsan_maybe_instrument_reference_or_call (location_t loc, tree op, tree ptype,\n \t\t\t\t\t  enum ubsan_null_ckind ckind)\n {\n-  if (!do_ubsan_in_current_function ())\n+  if (!sanitize_flags_p (SANITIZE_ALIGNMENT | SANITIZE_NULL))\n     return NULL_TREE;\n \n   tree type = TREE_TYPE (ptype);\n   tree orig_op = op;\n   bool instrument = false;\n   unsigned int mina = 0;\n \n-  if (flag_sanitize & SANITIZE_ALIGNMENT)\n+  if (sanitize_flags_p (SANITIZE_ALIGNMENT))\n     {\n       mina = min_align_of_type (type);\n       if (mina <= 1)\n@@ -419,7 +419,7 @@ ubsan_maybe_instrument_reference_or_call (location_t loc, tree op, tree ptype,\n     }\n   else\n     {\n-      if ((flag_sanitize & SANITIZE_NULL) && TREE_CODE (op) == ADDR_EXPR)\n+      if (sanitize_flags_p (SANITIZE_NULL) && TREE_CODE (op) == ADDR_EXPR)\n \t{\n \t  bool strict_overflow_p = false;\n \t  /* tree_single_nonzero_warnv_p will not return true for non-weak\n@@ -435,7 +435,7 @@ ubsan_maybe_instrument_reference_or_call (location_t loc, tree op, tree ptype,\n \t  flag_delete_null_pointer_checks\n \t    = save_flag_delete_null_pointer_checks;\n \t}\n-      else if (flag_sanitize & SANITIZE_NULL)\n+      else if (sanitize_flags_p (SANITIZE_NULL))\n \tinstrument = true;\n       if (mina && mina > 1)\n \t{"}, {"sha": "1e2d192bb31a8af311b121f44296845355f7c93a", "filename": "gcc/c-family/c-ubsan.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-ubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc-family%2Fc-ubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.h?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -31,7 +31,4 @@ extern void ubsan_maybe_instrument_array_ref (tree *, bool);\n extern void ubsan_maybe_instrument_reference (tree *);\n extern void ubsan_maybe_instrument_member_call (tree, bool);\n \n-/* Declare this here as well as in ubsan.h. */\n-extern bool do_ubsan_in_current_function (void);\n-\n #endif  /* GCC_C_UBSAN_H  */"}, {"sha": "173fa924a396044d9f00450799eeb0d666299e40", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1,3 +1,12 @@\n+2017-06-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitize/78204\n+\t* c-convert.c (convert): Use sanitize_flags_p.\n+\t* c-decl.c (grokdeclarator): Likewise.\n+\t* c-typeck.c (convert_for_assignment): Likewise.\n+\t(c_finish_return): Likewise.\n+\t(build_binary_op): Likewise.\n+\n 2017-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/81006"}, {"sha": "33c9143e354659eb6a8943974d22b325efc86100", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"convert.h\"\n #include \"langhooks.h\"\n #include \"ubsan.h\"\n+#include \"asan.h\"\n \n /* Change of width--truncation and extension of integers or reals--\n    is represented with NOP_EXPR.  Proper functioning of many things\n@@ -106,10 +107,9 @@ convert (tree type, tree expr)\n \n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n-      if (flag_sanitize & SANITIZE_FLOAT_CAST\n+      if (sanitize_flags_p (SANITIZE_FLOAT_CAST)\n \t  && TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n-\t  && COMPLETE_TYPE_P (type)\n-\t  && do_ubsan_in_current_function ())\n+\t  && COMPLETE_TYPE_P (type))\n \t{\n \t  expr = save_expr (expr);\n \t  tree check = ubsan_instrument_float_cast (loc, type, expr);"}, {"sha": "317d5cdd099d0c31a5970e7ecd8845f4d48fa49e", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"spellcheck-tree.h\"\n #include \"gcc-rich-location.h\"\n+#include \"asan.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -6044,9 +6045,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       with known value.  */\n \t\t    this_size_varies = size_varies = true;\n \t\t    warn_variable_length_array (name, size);\n-\t\t    if (flag_sanitize & SANITIZE_VLA\n-\t\t        && decl_context == NORMAL\n-\t\t\t&& do_ubsan_in_current_function ())\n+\t\t    if (sanitize_flags_p (SANITIZE_VLA)\n+\t\t\t&& decl_context == NORMAL)\n \t\t      {\n \t\t\t/* Evaluate the array size only once.  */\n \t\t\tsize = save_expr (size);"}, {"sha": "4d067e96dd3976bd22bce3731336bb5d1ba92b60", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"spellcheck-tree.h\"\n #include \"gcc-rich-location.h\"\n+#include \"asan.h\"\n \n /* Possible cases of implicit bad conversions.  Used to select\n    diagnostic messages in convert_for_assignment.  */\n@@ -6378,7 +6379,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       if (codel == BOOLEAN_TYPE || codel == COMPLEX_TYPE\n \t  || (coder == REAL_TYPE\n \t      && (codel == INTEGER_TYPE || codel == ENUMERAL_TYPE)\n-\t      && (flag_sanitize & SANITIZE_FLOAT_CAST)))\n+\t      && sanitize_flags_p (SANITIZE_FLOAT_CAST)))\n \tin_late_binary_op = true;\n       ret = convert_and_check (expr_loc != UNKNOWN_LOCATION\n \t\t\t       ? expr_loc : location, type, orig_rhs);\n@@ -9955,7 +9956,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \t  || (TREE_CODE (TREE_TYPE (t)) == REAL_TYPE\n \t      && (TREE_CODE (TREE_TYPE (res)) == INTEGER_TYPE\n \t\t  || TREE_CODE (TREE_TYPE (res)) == ENUMERAL_TYPE)\n-\t      && (flag_sanitize & SANITIZE_FLOAT_CAST)))\n+\t      && sanitize_flags_p (SANITIZE_FLOAT_CAST)))\n         in_late_binary_op = true;\n       inner = t = convert (TREE_TYPE (res), t);\n       in_late_binary_op = save;\n@@ -11835,9 +11836,8 @@ build_binary_op (location_t location, enum tree_code code,\n \treturn error_mark_node;\n     }\n \n-  if ((flag_sanitize & (SANITIZE_SHIFT | SANITIZE_DIVIDE\n-\t\t\t| SANITIZE_FLOAT_DIVIDE))\n-      && do_ubsan_in_current_function ()\n+  if (sanitize_flags_p ((SANITIZE_SHIFT\n+\t\t\t | SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n       && (doing_div_or_mod || doing_shift)\n       && !require_constant_value)\n     {\n@@ -11846,10 +11846,10 @@ build_binary_op (location_t location, enum tree_code code,\n       op1 = save_expr (op1);\n       op0 = c_fully_fold (op0, false, NULL);\n       op1 = c_fully_fold (op1, false, NULL);\n-      if (doing_div_or_mod && (flag_sanitize & (SANITIZE_DIVIDE\n-\t\t\t\t\t\t| SANITIZE_FLOAT_DIVIDE)))\n+      if (doing_div_or_mod && (sanitize_flags_p ((SANITIZE_DIVIDE\n+\t\t\t\t\t\t  | SANITIZE_FLOAT_DIVIDE))))\n \tinstrument_expr = ubsan_instrument_division (location, op0, op1);\n-      else if (doing_shift && (flag_sanitize & SANITIZE_SHIFT))\n+      else if (doing_shift && sanitize_flags_p (SANITIZE_SHIFT))\n \tinstrument_expr = ubsan_instrument_shift (location, code, op0, op1);\n     }\n "}, {"sha": "4f9c3dcac3e3903b55294d91e029ee187aa2ea14", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -224,7 +224,7 @@ unsigned int flag_sanitize\n \n ; What sanitizers should recover from errors\n Variable\n-unsigned int flag_sanitize_recover = (SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT | SANITIZE_KERNEL_ADDRESS) & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN)\n+unsigned int flag_sanitize_recover = (SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT | SANITIZE_KERNEL_ADDRESS) & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN)\n \n fsanitize-coverage=trace-pc\n Common Report Var(flag_sanitize_coverage)"}, {"sha": "429f988cbde24f7ed8f3790967f6ee2f48b2afe1", "filename": "gcc/convert.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"builtins.h\"\n #include \"ubsan.h\"\n+#include \"asan.h\"\n \n #define maybe_fold_build1_loc(FOLD_P, LOC, CODE, TYPE, EXPR) \\\n   ((FOLD_P) ? fold_build1_loc (LOC, CODE, TYPE, EXPR)\t     \\\n@@ -937,8 +938,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n       return build1 (CONVERT_EXPR, type, expr);\n \n     case REAL_TYPE:\n-      if (flag_sanitize & SANITIZE_FLOAT_CAST\n-\t  && do_ubsan_in_current_function ())\n+      if (sanitize_flags_p (SANITIZE_FLOAT_CAST))\n \t{\n \t  expr = save_expr (expr);\n \t  tree check = ubsan_instrument_float_cast (loc, type, expr);"}, {"sha": "43888304bd1e6ac0c9df92bd8e38bcf6e8febad7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1,3 +1,19 @@\n+2017-06-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitize/78204\n+\t* class.c (build_base_path): Use sanitize_flags_p.\n+\t* cp-gimplify.c (cp_genericize_r): Likewise.\n+\t(cp_genericize_tree): Likewise.\n+\t(cp_genericize): Likewise.\n+\t* cp-ubsan.c (cp_ubsan_instrument_vptr_p): Likewise.\n+\t* decl.c (compute_array_index_type): Likewise.\n+\t(start_preparsed_function): Likewise.\n+\t* decl2.c (one_static_initialization_or_destruction): Likewise.\n+\t* init.c (finish_length_check): Likewise.\n+\t* lambda.c (maybe_add_lambda_conv_op): Likewise.\n+\t* typeck.c (cp_build_binary_op): Likewise.\n+\t(build_static_cast_1): Likewise.\n+\n 2017-06-11  Jason Merrill  <jason@redhat.com>\n \n \t* error.c (dump_expr): Use is_this_parameter."}, {"sha": "dd1051e294b596a5733ad623bb24f657dc10ab03", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"gimplify.h\"\n #include \"intl.h\"\n+#include \"asan.h\"\n \n /* Id for dumping the class hierarchy.  */\n int class_dump_id;\n@@ -462,7 +463,8 @@ build_base_path (enum tree_code code,\n       else\n \t{\n \t  tree t = expr;\n-\t  if ((flag_sanitize & SANITIZE_VPTR) && fixed_type_p == 0)\n+\t  if (sanitize_flags_p (SANITIZE_VPTR)\n+\t      && fixed_type_p == 0)\n \t    {\n \t      t = cp_ubsan_maybe_instrument_cast_to_vbase (input_location,\n \t\t\t\t\t\t\t   probe, expr);"}, {"sha": "3c8f4b041d2c3155e5c6f6281f7405bb44782d1b", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-ubsan.h\"\n #include \"cilk.h\"\n #include \"cp-cilkplus.h\"\n+#include \"asan.h\"\n \n /* Forward declarations.  */\n \n@@ -1262,8 +1263,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t\t\t\t     : OMP_CLAUSE_DEFAULT_PRIVATE);\n \t      }\n \t}\n-      if (flag_sanitize\n-\t  & (SANITIZE_NULL | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n+      if (sanitize_flags_p (SANITIZE_NULL | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n \t{\n \t  /* The point here is to not sanitize static initializers.  */\n \t  bool no_sanitize_p = wtd->no_sanitize_p;\n@@ -1450,11 +1450,11 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       *stmt_p = cplus_expand_constant (stmt);\n       *walk_subtrees = 0;\n     }\n-  else if ((flag_sanitize\n-\t    & (SANITIZE_NULL | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n+  else if (sanitize_flags_p ((SANITIZE_NULL\n+\t\t\t      | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n \t   && !wtd->no_sanitize_p)\n     {\n-      if ((flag_sanitize & (SANITIZE_NULL | SANITIZE_ALIGNMENT))\n+      if (sanitize_flags_p (SANITIZE_NULL | SANITIZE_ALIGNMENT)\n \t  && TREE_CODE (stmt) == NOP_EXPR\n \t  && TREE_CODE (TREE_TYPE (stmt)) == REFERENCE_TYPE)\n \tubsan_maybe_instrument_reference (stmt_p);\n@@ -1470,9 +1470,9 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t\t= TREE_CODE (fn) == ADDR_EXPR\n \t\t  && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n \t\t  && DECL_CONSTRUCTOR_P (TREE_OPERAND (fn, 0));\n-\t      if (flag_sanitize & (SANITIZE_NULL | SANITIZE_ALIGNMENT))\n+\t      if (sanitize_flags_p (SANITIZE_NULL | SANITIZE_ALIGNMENT))\n \t\tubsan_maybe_instrument_member_call (stmt, is_ctor);\n-\t      if ((flag_sanitize & SANITIZE_VPTR) && !is_ctor)\n+\t      if (sanitize_flags_p (SANITIZE_VPTR) && !is_ctor)\n \t\tcp_ubsan_maybe_instrument_member_call (stmt);\n \t    }\n \t}\n@@ -1499,7 +1499,7 @@ cp_genericize_tree (tree* t_p, bool handle_invisiref_parm_p)\n   cp_walk_tree (t_p, cp_genericize_r, &wtd, NULL);\n   delete wtd.p_set;\n   wtd.bind_expr_stack.release ();\n-  if (flag_sanitize & SANITIZE_VPTR)\n+  if (sanitize_flags_p (SANITIZE_VPTR))\n     cp_ubsan_instrument_member_accesses (t_p);\n }\n \n@@ -1622,8 +1622,7 @@ cp_genericize (tree fndecl)\n      walk_tree's hash functionality.  */\n   cp_genericize_tree (&DECL_SAVED_TREE (fndecl), true);\n \n-  if (flag_sanitize & SANITIZE_RETURN\n-      && do_ubsan_in_current_function ())\n+  if (sanitize_flags_p (SANITIZE_RETURN))\n     cp_ubsan_maybe_instrument_return (fndecl);\n \n   /* Do everything else.  */"}, {"sha": "f00f870bd3ef94c4ef4e217b40ac24296c2ac2e7", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n #include \"ubsan.h\"\n+#include \"asan.h\"\n \n /* Test if we should instrument vptr access.  */\n \n@@ -32,7 +33,7 @@ cp_ubsan_instrument_vptr_p (tree type)\n   if (!flag_rtti || flag_sanitize_undefined_trap_on_error)\n     return false;\n \n-  if (!do_ubsan_in_current_function ())\n+  if (!sanitize_flags_p (SANITIZE_VPTR))\n     return false;\n \n   if (type)"}, {"sha": "37114761be08a1d474bfd5e27f72c918611855fa", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cilk.h\"\n #include \"builtins.h\"\n #include \"gimplify.h\"\n+#include \"asan.h\"\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {\n@@ -9524,8 +9525,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \n \t  stabilize_vla_size (itype);\n \n-\t  if (flag_sanitize & SANITIZE_VLA\n-\t      && do_ubsan_in_current_function ())\n+\t  if (sanitize_flags_p (SANITIZE_VLA))\n \t    {\n \t      /* We have to add 1 -- in the ubsan routine we generate\n \t\t LE_EXPR rather than LT_EXPR.  */\n@@ -15108,7 +15108,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   if (!processing_template_decl\n       && DECL_CONSTRUCTOR_P (decl1)\n-      && (flag_sanitize & SANITIZE_VPTR)\n+      && sanitize_flags_p (SANITIZE_VPTR)\n       && !DECL_CLONED_FUNCTION_P (decl1)\n       && !implicit_default_ctor_p (decl1))\n     cp_ubsan_maybe_initialize_vtbl_ptrs (current_class_ptr);"}, {"sha": "ab32b71701821301a1a61bf9d79933d4386c9664", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -3737,7 +3737,7 @@ one_static_initialization_or_destruction (tree decl, tree init, bool initp)\n       if (init)\n \t{\n \t  finish_expr_stmt (init);\n-\t  if (flag_sanitize & SANITIZE_ADDRESS)\n+\t  if (sanitize_flags_p (SANITIZE_ADDRESS, decl))\n \t    {\n \t      varpool_node *vnode = varpool_node::get (decl);\n \t      if (vnode)"}, {"sha": "90abd23a267be40d526a969149ced5ba12f97e00", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"c-family/c-ubsan.h\"\n #include \"intl.h\"\n+#include \"asan.h\"\n \n static bool begin_init_stmts (tree *, tree *);\n static tree finish_init_stmts (bool, tree, tree);\n@@ -3911,8 +3912,7 @@ finish_length_check (tree atype, tree iterator, tree obase, unsigned n)\n \t}\n       /* Don't check an array new when -fno-exceptions.  */\n     }\n-  else if (flag_sanitize & SANITIZE_BOUNDS\n-\t   && do_ubsan_in_current_function ())\n+  else if (sanitize_flags_p (SANITIZE_BOUNDS))\n     {\n       /* Make sure the last element of the initializer is in bounds. */\n       finish_expr_stmt"}, {"sha": "52e1fb78865f7105457f89ac27b048757a7fdd33", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1150,9 +1150,7 @@ maybe_add_lambda_conv_op (tree type)\n     {\n       /* Don't UBsan this function; we're deliberately calling op() with a null\n \t object argument.  */\n-      tree attrs = build_tree_list (get_identifier (\"no_sanitize_undefined\"),\n-\t\t\t\t    NULL_TREE);\n-      cplus_decl_attributes (&fn, attrs, 0);\n+      add_no_sanitize_value (fn, SANITIZE_UNDEFINED);\n     }\n \n   add_method (type, fn, false);"}, {"sha": "05b4fbb79d31009e27b36bf3cf99bc4b50e07408", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-ubsan.h\"\n #include \"params.h\"\n #include \"gcc-rich-location.h\"\n+#include \"asan.h\"\n \n static tree cp_build_addr_expr_strict (tree, tsubst_flags_t);\n static tree cp_build_function_call (tree, tree, tsubst_flags_t);\n@@ -5253,19 +5254,18 @@ cp_build_binary_op (location_t location,\n   if (build_type == NULL_TREE)\n     build_type = result_type;\n \n-  if ((flag_sanitize & (SANITIZE_SHIFT | SANITIZE_DIVIDE\n-\t\t\t| SANITIZE_FLOAT_DIVIDE))\n+  if (sanitize_flags_p ((SANITIZE_SHIFT\n+\t\t\t | SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n       && !processing_template_decl\n-      && do_ubsan_in_current_function ()\n       && (doing_div_or_mod || doing_shift))\n     {\n       /* OP0 and/or OP1 might have side-effects.  */\n       op0 = cp_save_expr (op0);\n       op1 = cp_save_expr (op1);\n       op0 = fold_non_dependent_expr (op0);\n       op1 = fold_non_dependent_expr (op1);\n-      if (doing_div_or_mod && (flag_sanitize & (SANITIZE_DIVIDE\n-\t\t\t\t\t\t| SANITIZE_FLOAT_DIVIDE)))\n+      if (doing_div_or_mod\n+\t  && sanitize_flags_p (SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n \t{\n \t  /* For diagnostics we want to use the promoted types without\n \t     shorten_binary_op.  So convert the arguments to the\n@@ -5278,7 +5278,7 @@ cp_build_binary_op (location_t location,\n \t    cop1 = cp_convert (orig_type, op1, complain);\n \t  instrument_expr = ubsan_instrument_division (location, cop0, cop1);\n \t}\n-      else if (doing_shift && (flag_sanitize & SANITIZE_SHIFT))\n+      else if (doing_shift && sanitize_flags_p (SANITIZE_SHIFT))\n \tinstrument_expr = ubsan_instrument_shift (location, code, op0, op1);\n     }\n \n@@ -6823,7 +6823,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \t\t\t  NULL, complain);\n       expr = build_address (expr);\n \n-      if (flag_sanitize & SANITIZE_VPTR)\n+      if (sanitize_flags_p (SANITIZE_VPTR))\n \t{\n \t  tree ubsan_check\n \t    = cp_ubsan_maybe_instrument_downcast (input_location, type,\n@@ -6967,7 +6967,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       expr = build_base_path (MINUS_EXPR, expr, base, /*nonnull=*/false,\n \t\t\t      complain);\n \n-      if (flag_sanitize & SANITIZE_VPTR)\n+      if (sanitize_flags_p (SANITIZE_VPTR))\n \t{\n \t  tree ubsan_check\n \t    = cp_ubsan_maybe_instrument_downcast (input_location, type,"}, {"sha": "1de17b4b99a353ec8aaf1e1f5cfdedec0c919f5b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -2911,6 +2911,18 @@ This has a similar effect\n as the @option{-fno-toplevel-reorder} option, but only applies to the\n marked symbols.\n \n+@item no_sanitize (\"@var{sanitize_option}\")\n+@cindex @code{no_sanitize} function attribute\n+The @code{no_sanitize} attribute on functions is used\n+to inform the compiler that it should not do sanitization of all options\n+mentioned in @var{sanitize_option}.  A list of values acceptable by\n+@option{-fsanitize} option can be provided.\n+\n+@smallexample\n+void __attribute__ ((no_sanitize (\"alignment\", \"object-size\")))\n+f () @{ /* @r{Do something.} */; @}\n+@end smallexample\n+\n @item no_sanitize_address\n @itemx no_address_safety_analysis\n @cindex @code{no_sanitize_address} function attribute"}, {"sha": "5faade539754abcfe4ff3bac743d67a9f149452a", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -246,8 +246,8 @@ enum sanitize_code {\n \t\t       | SANITIZE_NONNULL_ATTRIBUTE\n \t\t       | SANITIZE_RETURNS_NONNULL_ATTRIBUTE\n \t\t       | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR,\n-  SANITIZE_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST\n-\t\t\t| SANITIZE_BOUNDS_STRICT\n+  SANITIZE_UNDEFINED_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST\n+\t\t\t\t  | SANITIZE_BOUNDS_STRICT\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "3292532996b88810ca1858554d316d52f55835bd", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -9398,7 +9398,8 @@ sanitize_spec_function (int argc, const char **argv)\n   if (strcmp (argv[0], \"thread\") == 0)\n     return (flag_sanitize & SANITIZE_THREAD) ? \"\" : NULL;\n   if (strcmp (argv[0], \"undefined\") == 0)\n-    return ((flag_sanitize & (SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT))\n+    return ((flag_sanitize\n+\t     & (SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT))\n \t    && !flag_sanitize_undefined_trap_on_error) ? \"\" : NULL;\n   if (strcmp (argv[0], \"leak\") == 0)\n     return ((flag_sanitize"}, {"sha": "0f8e326a0e84c27208fd3849972817b60bac1efa", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-chkp.h\"\n #include \"tree-cfg.h\"\n #include \"fold-const-call.h\"\n+#include \"asan.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -3479,7 +3480,7 @@ optimize_atomic_compare_exchange_p (gimple *stmt)\n   if (gimple_call_num_args (stmt) != 6\n       || !flag_inline_atomics\n       || !optimize\n-      || (flag_sanitize & (SANITIZE_THREAD | SANITIZE_ADDRESS)) != 0\n+      || sanitize_flags_p (SANITIZE_THREAD | SANITIZE_ADDRESS)\n       || !gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n       || !gimple_vdef (stmt)\n       || !gimple_vuse (stmt))"}, {"sha": "9af95a28704731fc30c3309de0950d934d204500", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -12647,7 +12647,7 @@ gimplify_function_tree (tree fndecl)\n       && !needs_to_live_in_memory (ret))\n     DECL_GIMPLE_REG_P (ret) = 1;\n \n-  if (asan_sanitize_use_after_scope () && !asan_no_sanitize_address_p ())\n+  if (asan_sanitize_use_after_scope () && sanitize_flags_p (SANITIZE_ADDRESS))\n     asan_poisoned_variables = new hash_set<tree> ();\n   bind = gimplify_body (fndecl, true);\n   if (asan_poisoned_variables)\n@@ -12714,8 +12714,7 @@ gimplify_function_tree (tree fndecl)\n       bind = new_bind;\n     }\n \n-  if ((flag_sanitize & SANITIZE_THREAD) != 0\n-      && !lookup_attribute (\"no_sanitize_thread\", DECL_ATTRIBUTES (fndecl)))\n+  if (sanitize_flags_p (SANITIZE_THREAD))\n     {\n       gcall *call = gimple_build_call_internal (IFN_TSAN_FUNC_EXIT, 0);\n       gimple *tf = gimple_build_try (seq, call, GIMPLE_TRY_FINALLY);"}, {"sha": "fb20d3723cc6177fae38dc11f807d75e204b7932", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -117,6 +117,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"auto-profile.h\"\n #include \"builtins.h\"\n #include \"fibonacci_heap.h\"\n+#include \"asan.h\"\n \n typedef fibonacci_heap <sreal, cgraph_edge> edge_heap_t;\n typedef fibonacci_node <sreal, cgraph_edge> edge_heap_node_t;\n@@ -257,17 +258,11 @@ report_inline_failed_reason (struct cgraph_edge *e)\n static bool\n sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n {\n-  /* Don't care if sanitizer is disabled */\n-  if (!(flag_sanitize & SANITIZE_ADDRESS))\n-    return true;\n-\n   if (!caller || !callee)\n     return true;\n \n-  return !!lookup_attribute (\"no_sanitize_address\",\n-      DECL_ATTRIBUTES (caller)) == \n-      !!lookup_attribute (\"no_sanitize_address\",\n-      DECL_ATTRIBUTES (callee));\n+  return sanitize_flags_p (SANITIZE_ADDRESS, caller)\n+    == sanitize_flags_p (SANITIZE_ADDRESS, callee);\n }\n \n /* Used for flags where it is safe to inline when caller's value is"}, {"sha": "4013ea51fd2f5d19696ab8323998b6df759d02e6", "filename": "gcc/opts.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1656,6 +1656,37 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n   return flags;\n }\n \n+/* Parse string values of no_sanitize attribute passed in VALUE.\n+   Values are separated with comma.  Wrong argument is stored to\n+   WRONG_ARGUMENT variable.  */\n+\n+unsigned int\n+parse_no_sanitize_attribute (char *value, char **wrong_argument)\n+{\n+  unsigned int flags = 0;\n+  unsigned int i;\n+  char *q = strtok (value, \",\");\n+\n+  while (q != NULL)\n+    {\n+      for (i = 0; sanitizer_opts[i].name != NULL; ++i)\n+\tif (strcmp (sanitizer_opts[i].name, q) == 0)\n+\t  {\n+\t    flags |= sanitizer_opts[i].flag;\n+\t    if (sanitizer_opts[i].flag == SANITIZE_UNDEFINED)\n+\t      flags |= SANITIZE_UNDEFINED_NONDEFAULT;\n+\t    break;\n+\t  }\n+\n+      if (sanitizer_opts[i].name == NULL)\n+\t*wrong_argument = q;\n+\n+      q = strtok (NULL, \",\");\n+    }\n+\n+  return flags;\n+}\n+\n /* Handle target- and language-independent options.  Return zero to\n    generate an \"unknown option\" message.  Only options that need\n    extra handling need to be listed here; if you simply want\n@@ -1892,11 +1923,11 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_fsanitize_recover:\n       if (value)\n \topts->x_flag_sanitize_recover\n-\t  |= (SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT)\n+\t  |= (SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT)\n \t     & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN);\n       else\n \topts->x_flag_sanitize_recover\n-\t  &= ~(SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT);\n+\t  &= ~(SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT);\n       break;\n \n     case OPT_O:"}, {"sha": "16371e8141f43936edc7fda33554d51454277673", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -378,6 +378,8 @@ extern void print_ignored_options (void);\n extern void handle_common_deferred_options (void);\n unsigned int parse_sanitizer_options (const char *, location_t, int,\n \t\t\t\t      unsigned int, int, bool);\n+\n+unsigned int parse_no_sanitize_attribute (char *value, char **wrong_argument);\n extern bool common_handle_option (struct gcc_options *opts,\n \t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t  const struct cl_decoded_option *decoded,"}, {"sha": "16bdba760423fc9fa05cc8c639b8fe83da16e115", "filename": "gcc/sanopt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -948,9 +948,7 @@ pass_sanopt::execute (function *fun)\n \t      switch (DECL_FUNCTION_CODE (callee))\n \t\t{\n \t\tcase BUILT_IN_UNREACHABLE:\n-\t\t  if (flag_sanitize & SANITIZE_UNREACHABLE\n-\t\t      && !lookup_attribute (\"no_sanitize_undefined\",\n-\t\t\t\t\t    DECL_ATTRIBUTES (fun->decl)))\n+\t\t  if (sanitize_flags_p (SANITIZE_UNREACHABLE))\n \t\t    no_next = ubsan_instrument_unreachable (&gsi);\n \t\t  break;\n \t\tdefault:"}, {"sha": "1eddf49423121d63ea7131aac0e5ea7f93ddc806", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1,3 +1,10 @@\n+2017-06-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitize/78204\n+\t* c-c++-common/ubsan/attrib-2.c (float_cast2): Enhance the\n+\ttest by adding no_sanitize attribute.\n+\t* gcc.dg/asan/use-after-scope-4.c: Likewise.\n+\n 2017-06-13  Renlin Li  <renlin.li@arm.com>\n \n \t* gcc.target/arm/cold-lc.c: Update coding style, call dump_stack"}, {"sha": "3f0a9c35d9849c8add1112d2efa2428962b6f2b2", "filename": "gcc/testsuite/c-c++-common/ubsan/attrib-2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-2.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -68,4 +68,14 @@ float_cast (void)\n   c = d;\n }\n \n+__attribute__((no_sanitize((\"undefined\"))))\n+static void\n+float_cast2 (void)\n+{\n+  volatile double d = 300;\n+  volatile signed char c;\n+  c = d;\n+}\n+\n+\n /* { dg-final { scan-assembler-not \"__ubsan_handle\" } } */"}, {"sha": "44dc79535d2ab7921eda8581238b875fc3f0ffe1", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-4.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-4.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -1,16 +1,40 @@\n // { dg-do run }\n \n-int\n+#define FN(NAME) \\\n+NAME (void) \\\n+{ \\\n+  char *ptr; \\\n+  char *ptr2; \\\n+  { \\\n+    char my_char[9]; \\\n+    ptr = &my_char[0]; \\\n+    __builtin_memcpy (&ptr2, &ptr, sizeof (ptr2)); \\\n+  } \\\n+ \\\n+  *(ptr2+9) = 'c'; \\\n+}\n+\n+void\n+__attribute__((no_sanitize((\"address\"))))\n+__attribute__((no_sanitize((\"undefined\"))))\n+__attribute__((no_sanitize((\"address\"))))\n+__attribute__((no_sanitize((\"null\"))))\n+FN (fn1)\n+\n+void\n+__attribute__((no_sanitize((\"all\"))))\n+FN (fn2)\n+\n+void\n __attribute__((no_sanitize_address))\n+FN (fn3)\n+\n+int\n main (void)\n {\n-  char *ptr;\n-  char *ptr2;\n-  {\n-    char my_char[9];\n-    ptr = &my_char[0];\n-    __builtin_memcpy (&ptr2, &ptr, sizeof (ptr2));\n-  }\n+  fn1 ();\n+  fn2 ();\n+  fn3 ();\n \n-  *(ptr2+9) = 'c';\n+  return 0;\n }"}, {"sha": "7df80f8ee8c6e6f3c1773ce95732a109ace6b3fe", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"attribs.h\"\n #include \"selftest.h\"\n+#include \"opts.h\"\n \n /* This file contains functions for building the Control Flow Graph (CFG)\n    for a function tree.  */\n@@ -7555,6 +7556,25 @@ dump_default_def (FILE *file, tree def, int spc, dump_flags_t flags)\n   fprintf (file, \";\\n\");\n }\n \n+/* Print no_sanitize attribute to FILE for a given attribute VALUE.  */\n+\n+static void\n+print_no_sanitize_attr_value (FILE *file, tree value)\n+{\n+  unsigned int flags = tree_to_uhwi (value);\n+  bool first = true;\n+  for (int i = 0; sanitizer_opts[i].name != NULL; ++i)\n+    {\n+      if ((sanitizer_opts[i].flag & flags) == sanitizer_opts[i].flag)\n+\t{\n+\t  if (!first)\n+\t    fprintf (file, \" | \");\n+\t  fprintf (file, \"%s\", sanitizer_opts[i].name);\n+\t  first = false;\n+\t}\n+    }\n+}\n+\n /* Dump FUNCTION_DECL FN to file FILE using FLAGS (see TDF_* in dumpfile.h)\n    */\n \n@@ -7582,11 +7602,16 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \t  if (!first)\n \t    fprintf (file, \", \");\n \n-\t  print_generic_expr (file, get_attribute_name (chain), dump_flags);\n+\t  tree name = get_attribute_name (chain);\n+\t  print_generic_expr (file, name, dump_flags);\n \t  if (TREE_VALUE (chain) != NULL_TREE)\n \t    {\n \t      fprintf (file, \" (\");\n-\t      print_generic_expr (file, TREE_VALUE (chain), dump_flags);\n+\n+\t      if (strstr (IDENTIFIER_POINTER (name), \"no_sanitize\"))\n+\t\tprint_no_sanitize_attr_value (file, TREE_VALUE (chain));\n+\t      else\n+\t\tprint_generic_expr (file, TREE_VALUE (chain), dump_flags);\n \t      fprintf (file, \")\");\n \t    }\n \t}"}, {"sha": "2f98b936c03345321b1635fdb7df640ed1295c49", "filename": "gcc/tsan.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -896,9 +896,7 @@ class pass_tsan : public gimple_opt_pass\n   opt_pass * clone () { return new pass_tsan (m_ctxt); }\n   virtual bool gate (function *)\n {\n-  return ((flag_sanitize & SANITIZE_THREAD) != 0\n-\t  && !lookup_attribute (\"no_sanitize_thread\",\n-                                DECL_ATTRIBUTES (current_function_decl)));\n+  return sanitize_flags_p (SANITIZE_THREAD);\n }\n \n   virtual unsigned int execute (function *) { return tsan_pass (); }\n@@ -938,9 +936,7 @@ class pass_tsan_O0 : public gimple_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return ((flag_sanitize & SANITIZE_THREAD) != 0 && !optimize\n-\t      && !lookup_attribute (\"no_sanitize_thread\",\n-\t\t\t\t    DECL_ATTRIBUTES (current_function_decl)));\n+      return (sanitize_flags_p (SANITIZE_THREAD) && !optimize);\n     }\n \n   virtual unsigned int execute (function *) { return tsan_pass (); }"}, {"sha": "cee525ccf9878711e661de70c4da7f8e68009345", "filename": "gcc/ubsan.c", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -757,7 +757,7 @@ ubsan_expand_null_ifn (gimple_stmt_iterator *gsip)\n \t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n \t}\n     }\n-  check_null = (flag_sanitize & SANITIZE_NULL) != 0;\n+  check_null = sanitize_flags_p (SANITIZE_NULL);\n \n   if (check_align == NULL_TREE && !check_null)\n     {\n@@ -1181,13 +1181,13 @@ instrument_mem_ref (tree mem, tree base, gimple_stmt_iterator *iter,\n {\n   enum ubsan_null_ckind ikind = is_lhs ? UBSAN_STORE_OF : UBSAN_LOAD_OF;\n   unsigned int align = 0;\n-  if (flag_sanitize & SANITIZE_ALIGNMENT)\n+  if (sanitize_flags_p (SANITIZE_ALIGNMENT))\n     {\n       align = min_align_of_type (TREE_TYPE (base));\n       if (align <= 1)\n \talign = 0;\n     }\n-  if (align == 0 && (flag_sanitize & SANITIZE_NULL) == 0)\n+  if (align == 0 && !sanitize_flags_p (SANITIZE_NULL))\n     return;\n   tree t = TREE_OPERAND (base, 0);\n   if (!POINTER_TYPE_P (TREE_TYPE (t)))\n@@ -1355,13 +1355,14 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   tree type = TREE_TYPE (rhs);\n   tree minv = NULL_TREE, maxv = NULL_TREE;\n \n-  if (TREE_CODE (type) == BOOLEAN_TYPE && (flag_sanitize & SANITIZE_BOOL))\n+  if (TREE_CODE (type) == BOOLEAN_TYPE\n+      && sanitize_flags_p (SANITIZE_BOOL))\n     {\n       minv = boolean_false_node;\n       maxv = boolean_true_node;\n     }\n   else if (TREE_CODE (type) == ENUMERAL_TYPE\n-\t   && (flag_sanitize & SANITIZE_ENUM)\n+\t   && sanitize_flags_p (SANITIZE_ENUM)\n \t   && TREE_TYPE (type) != NULL_TREE\n \t   && TREE_CODE (TREE_TYPE (type)) == INTEGER_TYPE\n \t   && (TYPE_PRECISION (TREE_TYPE (type))\n@@ -1924,16 +1925,6 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n   gsi_insert_before (gsi, g, GSI_SAME_STMT);\n }\n \n-/* True if we want to play UBSan games in the current function.  */\n-\n-bool\n-do_ubsan_in_current_function ()\n-{\n-  return (current_function_decl != NULL_TREE\n-\t  && !lookup_attribute (\"no_sanitize_undefined\",\n-\t\t\t\tDECL_ATTRIBUTES (current_function_decl)));\n-}\n-\n namespace {\n \n const pass_data pass_data_ubsan =\n@@ -1959,13 +1950,12 @@ class pass_ubsan : public gimple_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return flag_sanitize & (SANITIZE_NULL | SANITIZE_SI_OVERFLOW\n-\t\t\t      | SANITIZE_BOOL | SANITIZE_ENUM\n-\t\t\t      | SANITIZE_ALIGNMENT\n-\t\t\t      | SANITIZE_NONNULL_ATTRIBUTE\n-\t\t\t      | SANITIZE_RETURNS_NONNULL_ATTRIBUTE\n-\t\t\t      | SANITIZE_OBJECT_SIZE)\n-\t&& do_ubsan_in_current_function ();\n+      return sanitize_flags_p ((SANITIZE_NULL | SANITIZE_SI_OVERFLOW\n+\t\t\t\t| SANITIZE_BOOL | SANITIZE_ENUM\n+\t\t\t\t| SANITIZE_ALIGNMENT\n+\t\t\t\t| SANITIZE_NONNULL_ATTRIBUTE\n+\t\t\t\t| SANITIZE_RETURNS_NONNULL_ATTRIBUTE\n+\t\t\t\t| SANITIZE_OBJECT_SIZE));\n     }\n \n   virtual unsigned int execute (function *);\n@@ -1992,11 +1982,11 @@ pass_ubsan::execute (function *fun)\n \t      continue;\n \t    }\n \n-\t  if ((flag_sanitize & SANITIZE_SI_OVERFLOW)\n+\t  if ((sanitize_flags_p (SANITIZE_SI_OVERFLOW, fun->decl))\n \t      && is_gimple_assign (stmt))\n \t    instrument_si_overflow (gsi);\n \n-\t  if (flag_sanitize & (SANITIZE_NULL | SANITIZE_ALIGNMENT))\n+\t  if (sanitize_flags_p (SANITIZE_NULL | SANITIZE_ALIGNMENT, fun->decl))\n \t    {\n \t      if (gimple_store_p (stmt))\n \t\tinstrument_null (gsi, true);\n@@ -2018,29 +2008,29 @@ pass_ubsan::execute (function *fun)\n \t\t}\n \t    }\n \n-\t  if (flag_sanitize & (SANITIZE_BOOL | SANITIZE_ENUM)\n+\t  if (sanitize_flags_p (SANITIZE_BOOL | SANITIZE_ENUM, fun->decl)\n \t      && gimple_assign_load_p (stmt))\n \t    {\n \t      instrument_bool_enum_load (&gsi);\n \t      bb = gimple_bb (stmt);\n \t    }\n \n-\t  if ((flag_sanitize & SANITIZE_NONNULL_ATTRIBUTE)\n+\t  if (sanitize_flags_p (SANITIZE_NONNULL_ATTRIBUTE, fun->decl)\n \t      && is_gimple_call (stmt)\n \t      && !gimple_call_internal_p (stmt))\n \t    {\n \t      instrument_nonnull_arg (&gsi);\n \t      bb = gimple_bb (stmt);\n \t    }\n \n-\t  if ((flag_sanitize & SANITIZE_RETURNS_NONNULL_ATTRIBUTE)\n+\t  if (sanitize_flags_p (SANITIZE_RETURNS_NONNULL_ATTRIBUTE, fun->decl)\n \t      && gimple_code (stmt) == GIMPLE_RETURN)\n \t    {\n \t      instrument_nonnull_return (&gsi);\n \t      bb = gimple_bb (stmt);\n \t    }\n \n-\t  if (flag_sanitize & SANITIZE_OBJECT_SIZE)\n+\t  if (sanitize_flags_p (SANITIZE_OBJECT_SIZE, fun->decl))\n \t    {\n \t      if (gimple_store_p (stmt))\n \t\tinstrument_object_size (&gsi, true);"}, {"sha": "fddd359ebc351e9c5775fa4edebcb30769d8afe0", "filename": "gcc/ubsan.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b2222a13eae86582966de6b8203ca75660c1fe/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=45b2222a13eae86582966de6b8203ca75660c1fe", "patch": "@@ -42,7 +42,6 @@ enum ubsan_print_style {\n   UBSAN_PRINT_ARRAY\n };\n \n-extern bool do_ubsan_in_current_function (void);\n extern bool ubsan_expand_bounds_ifn (gimple_stmt_iterator *);\n extern bool ubsan_expand_null_ifn (gimple_stmt_iterator *);\n extern bool ubsan_expand_objsize_ifn (gimple_stmt_iterator *);"}]}