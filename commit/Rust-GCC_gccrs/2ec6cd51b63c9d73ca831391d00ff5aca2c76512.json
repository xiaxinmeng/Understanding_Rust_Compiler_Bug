{"sha": "2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjNmNkNTFiNjNjOWQ3M2NhODMxMzkxZDAwZmY1YWNhMmM3NjUxMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2005-08-26T13:45:42Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2005-08-26T13:45:42Z"}, "message": "v850.c (ep_memory_operand): Return FALSE if TARGET_EP is not defined.\n\n* config/v850/v850.c (ep_memory_operand): Return FALSE if TARGET_EP is not\n  defined.\n* config/v850/c850.h (TARGET_CPU_CPP_BUILTINS): Define __EP__ if TARGET_EP is\n  enabled.\n  (OPTIMIZATION_OPTIONS): Do not define MASK_EP when optimizing.\n* config/v850/v850.md (save_all_interrupt): Only use the EP register if\n  TARGET_EP is defined.\n  (restore_all_interrupt): Likewise.\n* config/v850/lib1funcs.asm: Update functions so that the EP register is only\n  used if __EP__ is defined.\n\nFrom-SVN: r103520", "tree": {"sha": "78458bbeb8d35a4e24339b126b0e1a3edebbf7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78458bbeb8d35a4e24339b126b0e1a3edebbf7c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e296c00c3209450305f5cf270d9cba03cba38a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e296c00c3209450305f5cf270d9cba03cba38a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e296c00c3209450305f5cf270d9cba03cba38a1c"}], "stats": {"total": 684, "additions": 641, "deletions": 43}, "files": [{"sha": "72e78c441114429ecdd8a0a5d8a4046b30da3ff9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "patch": "@@ -1,3 +1,16 @@\n+2005-08-26  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/v850/v850.c (ep_memory_operand): Return FALSE if\n+\tTARGET_EP is not defined.\n+\t* config/v850/c850.h (TARGET_CPU_CPP_BUILTINS): Define __EP__ if\n+\tTARGET_EP is enabled.\n+\t(OPTIMIZATION_OPTIONS): Do not define MASK_EP when optimizing.\n+\t* config/v850/v850.md (save_all_interrupt): Only use the EP\n+\tregister if TARGET_EP is defined.\n+\t(restore_all_interrupt): Likewise.\n+\t* config/v850/lib1funcs.asm: Update functions so that the EP\n+\tregister is only used if __EP__ is defined.\n+\n 2005-08-26  David Ung  <davidu@mips.com>\n \n \t* config/mips/mips.c (mips_expand_prologue): Handle case when"}, {"sha": "618e49baf34b5dd566d381889a2f135939cc5cd9", "filename": "gcc/config/v850/lib1funcs.asm", "status": "modified", "additions": 513, "deletions": 7, "changes": 520, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Flib1funcs.asm?ref=2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "patch": "@@ -1,5 +1,5 @@\n /* libgcc routines for NEC V850.\n-   Copyright (C) 1996, 1997, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2002, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -268,6 +268,7 @@ ___modsi3:\n \t/* Allocate space and save registers 2, 20 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r2_r29,r10 */\n __save_r2_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-44,sp,sp\n \tmov\tsp,ep\n@@ -283,6 +284,20 @@ __save_r2_r29:\n \tsst.w\tr20,36[ep]\n \tsst.w\tr2,40[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-44,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+\tst.w\tr24,20[sp]\n+\tst.w\tr23,24[sp]\n+\tst.w\tr22,28[sp]\n+\tst.w\tr21,32[sp]\n+\tst.w\tr20,36[sp]\n+\tst.w\tr2,40[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r2_r29,.-__save_r2_r29\n \n@@ -292,6 +307,7 @@ __save_r2_r29:\n \t.globl\t__return_r2_r29\n \t.type\t__return_r2_r29,@function\n __return_r2_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -307,6 +323,20 @@ __return_r2_r29:\n \tsld.w\t40[ep],r2\n \taddi\t44,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\tld.w\t16[sp],r25\n+\tld.w\t20[sp],r24\n+\tld.w\t24[sp],r23\n+\tld.w\t28[sp],r22\n+\tld.w\t32[sp],r21\n+\tld.w\t36[sp],r20\n+\tld.w\t40[sp],r2\n+\taddi\t44,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r2_r29,.-__return_r2_r29\n #endif /* L_save_2 */\n@@ -319,6 +349,7 @@ __return_r2_r29:\n \t/* Allocate space and save registers 20 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r20_r29,r10 */\n __save_r20_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-40,sp,sp\n \tmov\tsp,ep\n@@ -333,6 +364,19 @@ __save_r20_r29:\n \tsst.w\tr21,32[ep]\n \tsst.w\tr20,36[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-40,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+\tst.w\tr24,20[sp]\n+\tst.w\tr23,24[sp]\n+\tst.w\tr22,28[sp]\n+\tst.w\tr21,32[sp]\n+\tst.w\tr20,36[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r20_r29,.-__save_r20_r29\n \n@@ -342,6 +386,7 @@ __save_r20_r29:\n \t.globl\t__return_r20_r29\n \t.type\t__return_r20_r29,@function\n __return_r20_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -356,6 +401,19 @@ __return_r20_r29:\n \tsld.w\t36[ep],r20\n \taddi\t40,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\tld.w\t16[sp],r25\n+\tld.w\t20[sp],r24\n+\tld.w\t24[sp],r23\n+\tld.w\t28[sp],r22\n+\tld.w\t32[sp],r21\n+\tld.w\t36[sp],r20\n+\taddi\t40,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r20_r29,.-__return_r20_r29\n #endif /* L_save_20 */\n@@ -368,6 +426,7 @@ __return_r20_r29:\n \t/* Allocate space and save registers 21 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r21_r29,r10 */\n __save_r21_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-36,sp,sp\n \tmov\tsp,ep\n@@ -381,6 +440,18 @@ __save_r21_r29:\n \tsst.w\tr22,28[ep]\n \tsst.w\tr21,32[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-36,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+\tst.w\tr24,20[sp]\n+\tst.w\tr23,24[sp]\n+\tst.w\tr22,28[sp]\n+\tst.w\tr21,32[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r21_r29,.-__save_r21_r29\n \n@@ -390,6 +461,7 @@ __save_r21_r29:\n \t.globl\t__return_r21_r29\n \t.type\t__return_r21_r29,@function\n __return_r21_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -403,6 +475,18 @@ __return_r21_r29:\n \tsld.w\t32[ep],r21\n \taddi\t36,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\tld.w\t16[sp],r25\n+\tld.w\t20[sp],r24\n+\tld.w\t24[sp],r23\n+\tld.w\t28[sp],r22\n+\tld.w\t32[sp],r21\n+\taddi\t36,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r21_r29,.-__return_r21_r29\n #endif /* L_save_21 */\n@@ -415,6 +499,7 @@ __return_r21_r29:\n \t/* Allocate space and save registers 22 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r22_r29,r10 */\n __save_r22_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-32,sp,sp\n \tmov\tsp,ep\n@@ -427,6 +512,17 @@ __save_r22_r29:\n \tsst.w\tr23,24[ep]\n \tsst.w\tr22,28[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-32,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+\tst.w\tr24,20[sp]\n+\tst.w\tr23,24[sp]\n+\tst.w\tr22,28[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r22_r29,.-__save_r22_r29\n \n@@ -436,6 +532,7 @@ __save_r22_r29:\n \t.globl\t__return_r22_r29\n \t.type\t__return_r22_r29,@function\n __return_r22_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -448,6 +545,17 @@ __return_r22_r29:\n \tsld.w\t28[ep],r22\n \taddi\t32,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\tld.w\t16[sp],r25\n+\tld.w\t20[sp],r24\n+\tld.w\t24[sp],r23\n+\tld.w\t28[sp],r22\n+\taddi\t32,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r22_r29,.-__return_r22_r29\n #endif /* L_save_22 */\n@@ -460,6 +568,7 @@ __return_r22_r29:\n \t/* Allocate space and save registers 23 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r23_r29,r10 */\n __save_r23_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-28,sp,sp\n \tmov\tsp,ep\n@@ -471,6 +580,16 @@ __save_r23_r29:\n \tsst.w\tr24,20[ep]\n \tsst.w\tr23,24[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-28,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+\tst.w\tr24,20[sp]\n+\tst.w\tr23,24[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r23_r29,.-__save_r23_r29\n \n@@ -480,6 +599,7 @@ __save_r23_r29:\n \t.globl\t__return_r23_r29\n \t.type\t__return_r23_r29,@function\n __return_r23_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -491,6 +611,16 @@ __return_r23_r29:\n \tsld.w\t24[ep],r23\n \taddi\t28,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\tld.w\t16[sp],r25\n+\tld.w\t20[sp],r24\n+\tld.w\t24[sp],r23\n+\taddi\t28,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r23_r29,.-__return_r23_r29\n #endif /* L_save_23 */\n@@ -503,6 +633,7 @@ __return_r23_r29:\n \t/* Allocate space and save registers 24 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r24_r29,r10 */\n __save_r24_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-24,sp,sp\n \tmov\tsp,ep\n@@ -513,6 +644,15 @@ __save_r24_r29:\n \tsst.w\tr25,16[ep]\n \tsst.w\tr24,20[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-24,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+\tst.w\tr24,20[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r24_r29,.-__save_r24_r29\n \n@@ -522,6 +662,7 @@ __save_r24_r29:\n \t.globl\t__return_r24_r29\n \t.type\t__return_r24_r29,@function\n __return_r24_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -532,6 +673,15 @@ __return_r24_r29:\n \tsld.w\t20[ep],r24\n \taddi\t24,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\tld.w\t16[sp],r25\n+\tld.w\t20[sp],r24\n+\taddi\t24,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r24_r29,.-__return_r24_r29\n #endif /* L_save_24 */\n@@ -544,6 +694,7 @@ __return_r24_r29:\n \t/* Allocate space and save registers 25 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r25_r29,r10 */\n __save_r25_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-20,sp,sp\n \tmov\tsp,ep\n@@ -553,6 +704,14 @@ __save_r25_r29:\n \tsst.w\tr26,12[ep]\n \tsst.w\tr25,16[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-20,sp,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+\tst.w\tr25,16[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r25_r29,.-__save_r25_r29\n \n@@ -562,6 +721,7 @@ __save_r25_r29:\n \t.globl\t__return_r25_r29\n \t.type\t__return_r25_r29,@function\n __return_r25_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -571,6 +731,14 @@ __return_r25_r29:\n \tsld.w\t16[ep],r25\n \taddi\t20,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[ep],r29\n+\tld.w\t4[ep],r28\n+\tld.w\t8[ep],r27\n+\tld.w\t12[ep],r26\n+\tld.w\t16[ep],r25\n+\taddi\t20,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r25_r29,.-__return_r25_r29\n #endif /* L_save_25 */\n@@ -583,6 +751,7 @@ __return_r25_r29:\n \t/* Allocate space and save registers 26 .. 29 on the stack */\n \t/* Called via:\tjalr __save_r26_r29,r10 */\n __save_r26_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tadd\t-16,sp\n \tmov\tsp,ep\n@@ -591,6 +760,13 @@ __save_r26_r29:\n \tsst.w\tr27,8[ep]\n \tsst.w\tr26,12[ep]\n \tmov\tr1,ep\n+#else\n+\tadd\t-16,sp\n+\tst.w\tr29,0[sp]\n+\tst.w\tr28,4[sp]\n+\tst.w\tr27,8[sp]\n+\tst.w\tr26,12[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r26_r29,.-__save_r26_r29\n \n@@ -600,6 +776,7 @@ __save_r26_r29:\n \t.globl\t__return_r26_r29\n \t.type\t__return_r26_r29,@function\n __return_r26_r29:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t0[ep],r29\n@@ -608,6 +785,13 @@ __return_r26_r29:\n \tsld.w\t12[ep],r26\n \taddi\t16,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t0[sp],r29\n+\tld.w\t4[sp],r28\n+\tld.w\t8[sp],r27\n+\tld.w\t12[sp],r26\n+\taddi\t16,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r26_r29,.-__return_r26_r29\n #endif /* L_save_26 */\n@@ -698,10 +882,11 @@ __return_r29:\n \t.align\t2\n \t.globl\t__save_r2_r31\n \t.type\t__save_r2_r31,@function\n-\t/* Allocate space and save registers 20 .. 29, 31 on the stack */\n-\t/* Also allocate space for the argument save area */\n-\t/* Called via:\tjalr __save_r2_r31,r10 */\n+\t/* Allocate space and save registers 20 .. 29, 31 on the stack.  */\n+\t/* Also allocate space for the argument save area.  */\n+\t/* Called via:\tjalr __save_r2_r31,r10.  */\n __save_r2_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-64,sp,sp\n \tmov\tsp,ep\n@@ -718,6 +903,21 @@ __save_r2_r31:\n \tsst.w\tr2,56[ep]\n \tsst.w\tr31,60[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-64,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr23,40[sp]\n+\tst.w\tr22,44[sp]\n+\tst.w\tr21,48[sp]\n+\tst.w\tr20,52[sp]\n+\tst.w\tr2,56[sp]\n+\tst.w\tr31,60[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r2_r31,.-__save_r2_r31\n \n@@ -727,6 +927,7 @@ __save_r2_r31:\n \t.globl\t__return_r2_r31\n \t.type\t__return_r2_r31,@function\n __return_r2_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -743,6 +944,21 @@ __return_r2_r31:\n \tsld.w\t60[ep],r31\n \taddi\t64,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r24\n+\tld.w\t40[sp],r23\n+\tld.w\t44[sp],r22\n+\tld.w\t48[sp],r21\n+\tld.w\t52[sp],r20\n+\tld.w\t56[sp],r2\n+\tld.w\t60[sp],r31\n+\taddi\t64,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r2_r31,.-__return_r2_r31\n #endif /* L_save_2c */\n@@ -756,6 +972,7 @@ __return_r2_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r20_r31,r10 */\n __save_r20_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-60,sp,sp\n \tmov\tsp,ep\n@@ -771,6 +988,20 @@ __save_r20_r31:\n \tsst.w\tr20,52[ep]\n \tsst.w\tr31,56[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-60,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr23,40[sp]\n+\tst.w\tr22,44[sp]\n+\tst.w\tr21,48[sp]\n+\tst.w\tr20,52[sp]\n+\tst.w\tr31,56[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r20_r31,.-__save_r20_r31\n \n@@ -780,6 +1011,7 @@ __save_r20_r31:\n \t.globl\t__return_r20_r31\n \t.type\t__return_r20_r31,@function\n __return_r20_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -795,6 +1027,20 @@ __return_r20_r31:\n \tsld.w\t56[ep],r31\n \taddi\t60,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r24\n+\tld.w\t40[sp],r23\n+\tld.w\t44[sp],r22\n+\tld.w\t48[sp],r21\n+\tld.w\t52[sp],r20\n+\tld.w\t56[sp],r31\n+\taddi\t60,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r20_r31,.-__return_r20_r31\n #endif /* L_save_20c */\n@@ -808,6 +1054,7 @@ __return_r20_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r21_r31,r10 */\n __save_r21_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-56,sp,sp\n \tmov\tsp,ep\n@@ -822,6 +1069,19 @@ __save_r21_r31:\n \tsst.w\tr21,48[ep]\n \tsst.w\tr31,52[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-56,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr23,40[sp]\n+\tst.w\tr22,44[sp]\n+\tst.w\tr21,48[sp]\n+\tst.w\tr31,52[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r21_r31,.-__save_r21_r31\n \n@@ -831,6 +1091,7 @@ __save_r21_r31:\n \t.globl\t__return_r21_r31\n \t.type\t__return_r21_r31,@function\n __return_r21_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -845,6 +1106,19 @@ __return_r21_r31:\n \tsld.w\t52[ep],r31\n \taddi\t56,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r24\n+\tld.w\t40[sp],r23\n+\tld.w\t44[sp],r22\n+\tld.w\t48[sp],r21\n+\tld.w\t52[sp],r31\n+\taddi\t56,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r21_r31,.-__return_r21_r31\n #endif /* L_save_21c */\n@@ -858,6 +1132,7 @@ __return_r21_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r22_r31,r10 */\n __save_r22_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-52,sp,sp\n \tmov\tsp,ep\n@@ -871,6 +1146,18 @@ __save_r22_r31:\n \tsst.w\tr22,44[ep]\n \tsst.w\tr31,48[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-52,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr23,40[sp]\n+\tst.w\tr22,44[sp]\n+\tst.w\tr31,48[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r22_r31,.-__save_r22_r31\n \n@@ -880,6 +1167,7 @@ __save_r22_r31:\n \t.globl\t__return_r22_r31\n \t.type\t__return_r22_r31,@function\n __return_r22_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -893,6 +1181,18 @@ __return_r22_r31:\n \tsld.w\t48[ep],r31\n \taddi\t52,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r24\n+\tld.w\t40[sp],r23\n+\tld.w\t44[sp],r22\n+\tld.w\t48[sp],r31\n+\taddi\t52,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r22_r31,.-__return_r22_r31\n #endif /* L_save_22c */\n@@ -906,6 +1206,7 @@ __return_r22_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r23_r31,r10 */\n __save_r23_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-48,sp,sp\n \tmov\tsp,ep\n@@ -918,6 +1219,17 @@ __save_r23_r31:\n \tsst.w\tr23,40[ep]\n \tsst.w\tr31,44[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-48,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr23,40[sp]\n+\tst.w\tr31,44[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r23_r31,.-__save_r23_r31\n \n@@ -927,6 +1239,7 @@ __save_r23_r31:\n \t.globl\t__return_r23_r31\n \t.type\t__return_r23_r31,@function\n __return_r23_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -939,6 +1252,17 @@ __return_r23_r31:\n \tsld.w\t44[ep],r31\n \taddi\t48,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r24\n+\tld.w\t40[sp],r23\n+\tld.w\t44[sp],r31\n+\taddi\t48,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r23_r31,.-__return_r23_r31\n #endif /* L_save_23c */\n@@ -952,6 +1276,7 @@ __return_r23_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r24_r31,r10 */\n __save_r24_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-44,sp,sp\n \tmov\tsp,ep\n@@ -963,6 +1288,16 @@ __save_r24_r31:\n \tsst.w\tr24,36[ep]\n \tsst.w\tr31,40[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-44,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr31,40[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r24_r31,.-__save_r24_r31\n \n@@ -972,6 +1307,7 @@ __save_r24_r31:\n \t.globl\t__return_r24_r31\n \t.type\t__return_r24_r31,@function\n __return_r24_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -983,6 +1319,16 @@ __return_r24_r31:\n \tsld.w\t40[ep],r31\n \taddi\t44,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r24\n+\tld.w\t40[sp],r31\n+\taddi\t44,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r24_r31,.-__return_r24_r31\n #endif /* L_save_24c */\n@@ -996,6 +1342,7 @@ __return_r24_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r25_r31,r10 */\n __save_r25_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-40,sp,sp\n \tmov\tsp,ep\n@@ -1006,6 +1353,15 @@ __save_r25_r31:\n \tsst.w\tr25,32[ep]\n \tsst.w\tr31,36[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-40,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr31,36[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r25_r31,.-__save_r25_r31\n \n@@ -1015,6 +1371,7 @@ __save_r25_r31:\n \t.globl\t__return_r25_r31\n \t.type\t__return_r25_r31,@function\n __return_r25_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -1025,6 +1382,15 @@ __return_r25_r31:\n \tsld.w\t36[ep],r31\n \taddi\t40,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r25\n+\tld.w\t36[sp],r31\n+\taddi\t40,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r25_r31,.-__return_r25_r31\n #endif /* L_save_25c */\n@@ -1038,6 +1404,7 @@ __return_r25_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r26_r31,r10 */\n __save_r26_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-36,sp,sp\n \tmov\tsp,ep\n@@ -1047,6 +1414,14 @@ __save_r26_r31:\n \tsst.w\tr26,28[ep]\n \tsst.w\tr31,32[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-36,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr31,32[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r26_r31,.-__save_r26_r31\n \n@@ -1056,6 +1431,7 @@ __save_r26_r31:\n \t.globl\t__return_r26_r31\n \t.type\t__return_r26_r31,@function\n __return_r26_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -1065,6 +1441,14 @@ __return_r26_r31:\n \tsld.w\t32[ep],r31\n \taddi\t36,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r26\n+\tld.w\t32[sp],r31\n+\taddi\t36,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r26_r31,.-__return_r26_r31\n #endif /* L_save_26c */\n@@ -1078,6 +1462,7 @@ __return_r26_r31:\n \t/* Also allocate space for the argument save area */\n \t/* Called via:\tjalr __save_r27_r31,r10 */\n __save_r27_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \taddi\t-32,sp,sp\n \tmov\tsp,ep\n@@ -1086,6 +1471,13 @@ __save_r27_r31:\n \tsst.w\tr27,24[ep]\n \tsst.w\tr31,28[ep]\n \tmov\tr1,ep\n+#else\n+\taddi\t-32,sp,sp\n+\tst.w\tr29,16[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr31,28[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r27_r31,.-__save_r27_r31\n \n@@ -1095,6 +1487,7 @@ __save_r27_r31:\n \t.globl\t__return_r27_r31\n \t.type\t__return_r27_r31,@function\n __return_r27_r31:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t16[ep],r29\n@@ -1103,6 +1496,13 @@ __return_r27_r31:\n \tsld.w\t28[ep],r31\n \taddi\t32,sp,sp\n \tmov\tr1,ep\n+#else\n+\tld.w\t16[sp],r29\n+\tld.w\t20[sp],r28\n+\tld.w\t24[sp],r27\n+\tld.w\t28[sp],r31\n+\taddi\t32,sp,sp\n+#endif\n \tjmp\t[r31]\n \t.size\t__return_r27_r31,.-__return_r27_r31\n #endif /* L_save_27c */\n@@ -1199,13 +1599,20 @@ __return_r31:\n \t/* Save registers 6 .. 9 on the stack for variable argument functions.  */\n \t/* Called via:\tjalr __save_r6_r9,r10 */\n __save_r6_r9:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsst.w\tr6,0[ep]\n \tsst.w\tr7,4[ep]\n \tsst.w\tr8,8[ep]\n \tsst.w\tr9,12[ep]\n \tmov\tr1,ep\n+#else\n+\tst.w\tr6,0[sp]\n+\tst.w\tr7,4[sp]\n+\tst.w\tr8,8[sp]\n+\tst.w\tr9,12[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_r6_r9,.-__save_r6_r9\n #endif /* L_save_varargs */\n@@ -1254,6 +1661,7 @@ __return_interrupt:\n \t/* Called via:\tjalr __save_all_interrupt,r10 */\n __save_all_interrupt:\n \taddi\t-120,sp,sp\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsst.w\tr31,116[ep]\n@@ -1283,6 +1691,34 @@ __save_all_interrupt:\n \tsst.w\tr28,20[ep]\n \tsst.w\tr29,16[ep]\n \tmov\tr1,ep\n+#else\n+\tst.w\tr31,116[sp]\n+\tst.w\tr2,112[sp]\n+\tst.w\tgp,108[sp]\n+\tst.w\tr6,104[sp]\n+\tst.w\tr7,100[sp]\n+\tst.w\tr8,96[sp]\n+\tst.w\tr9,92[sp]\n+\tst.w\tr11,88[sp]\n+\tst.w\tr12,84[sp]\n+\tst.w\tr13,80[sp]\n+\tst.w\tr14,76[sp]\n+\tst.w\tr15,72[sp]\n+\tst.w\tr16,68[sp]\n+\tst.w\tr17,64[sp]\n+\tst.w\tr18,60[sp]\n+\tst.w\tr19,56[sp]\n+\tst.w\tr20,52[sp]\n+\tst.w\tr21,48[sp]\n+\tst.w\tr22,44[sp]\n+\tst.w\tr23,40[sp]\n+\tst.w\tr24,36[sp]\n+\tst.w\tr25,32[sp]\n+\tst.w\tr26,28[sp]\n+\tst.w\tr27,24[sp]\n+\tst.w\tr28,20[sp]\n+\tst.w\tr29,16[sp]\n+#endif\n \tjmp\t[r10]\n \t.size\t__save_all_interrupt,.-__save_all_interrupt\n \n@@ -1292,6 +1728,7 @@ __save_all_interrupt:\n \t   deallocate the stack space.  */\n \t/* Called via:\tjalr __restore_all_interrupt,r10 */\n __restore_all_interrupt:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsld.w\t116[ep],r31\n@@ -1321,7 +1758,35 @@ __restore_all_interrupt:\n \tsld.w\t20[ep],r28\n \tsld.w\t16[ep],r29\n \tmov\tr1,ep\n-\taddi\t120,sp,sp\n+#else\n+\tld.w\t116[sp],r31\n+\tld.w\t112[sp],r2\n+\tld.w\t108[sp],gp\n+\tld.w\t104[sp],r6\n+\tld.w\t100[sp],r7\n+\tld.w\t96[sp],r8\n+\tld.w\t92[sp],r9\n+\tld.w\t88[sp],r11\n+\tld.w\t84[sp],r12\n+\tld.w\t80[sp],r13\n+\tld.w\t76[sp],r14\n+\tld.w\t72[sp],r15\n+\tld.w\t68[sp],r16\n+\tld.w\t64[sp],r17\n+\tld.w\t60[sp],r18\n+\tld.w\t56[sp],r19\n+\tld.w\t52[sp],r20\n+\tld.w\t48[sp],r21\n+\tld.w\t44[sp],r22\n+\tld.w\t40[sp],r23\n+\tld.w\t36[sp],r24\n+\tld.w\t32[sp],r25\n+\tld.w\t28[sp],r26\n+\tld.w\t24[sp],r27\n+\tld.w\t20[sp],r28\n+\tld.w\t16[sp],r29\n+#endif\n+\taddi\t120,sp,sp\t\n \tjmp\t[r10]\n \t.size\t__restore_all_interrupt,.-__restore_all_interrupt\n #endif /* L_save_all_interrupt */\n@@ -1409,13 +1874,20 @@ __callt_return_r2_r31:\t.short ctoff(.L_return_r2_r31)\n \t   Called via:\tcallt ctoff(__callt_save_r6_r9).  */\n \t.align\t2\n .L_save_r6_r9:\n+#ifdef __EP__\n \tmov\tep,r1\n \tmov\tsp,ep\n \tsst.w\tr6,0[ep]\n \tsst.w\tr7,4[ep]\n \tsst.w\tr8,8[ep]\n \tsst.w\tr9,12[ep]\n \tmov\tr1,ep\n+#else\n+\tst.w\tr6,0[sp]\n+\tst.w\tr7,4[sp]\n+\tst.w\tr8,8[sp]\n+\tst.w\tr9,12[sp]\n+#endif\n \tctret\n \n \t/* Place the offsets of the start of this routines into the call table.  */\n@@ -1486,6 +1958,7 @@ __callt_return_interrupt:       .short ctoff(.L_return_interrupt)\n \t.align\t2\n .L_save_all_interrupt:\n \taddi\t-60, sp, sp\n+#ifdef __EP__\n \tmov\tep,  r1\n \tmov\tsp,  ep\n \tsst.w\tr2,  56[ep]\n@@ -1504,7 +1977,23 @@ __callt_return_interrupt:       .short ctoff(.L_return_interrupt)\n \tsst.w\tr18, 4[ep]\n \tsst.w\tr19, 0[ep]\n \tmov\tr1,  ep\n-\n+#else\n+\tst.w\tr2,  56[sp]\n+\tst.w\tr5,  52[sp]\n+\tst.w\tr6,  48[sp]\n+\tst.w\tr7,  44[sp]\n+\tst.w\tr8,  40[sp]\n+\tst.w\tr9,  36[sp]\n+\tst.w\tr11, 32[sp]\n+\tst.w\tr12, 28[sp]\n+\tst.w\tr13, 24[sp]\n+\tst.w\tr14, 20[sp]\n+\tst.w\tr15, 16[sp]\n+\tst.w\tr16, 12[sp]\n+\tst.w\tr17, 8[sp]\n+\tst.w\tr18, 4[sp]\n+\tst.w\tr19, 0[sp]\n+#endif\n \tprepare {r20 - r29, r31}, 4\n \tctret\t\n \n@@ -1514,7 +2003,7 @@ __callt_return_interrupt:       .short ctoff(.L_return_interrupt)\n \t.align 2\n .L_restore_all_interrupt:\n \tdispose 4, {r20 - r29, r31}\n-\t\n+#ifdef __EP__\t\n \tmov\tep, r1\n \tmov\tsp, ep\n \tsld.w\t0 [ep], r19\n@@ -1533,6 +2022,23 @@ __callt_return_interrupt:       .short ctoff(.L_return_interrupt)\n \tsld.w\t52[ep], r5\n \tsld.w\t56[ep], r2\n \tmov\tr1, ep\n+#else\n+\tld.w\t0 [sp], r19\n+\tld.w\t4 [sp], r18\n+\tld.w\t8 [sp], r17\n+\tld.w\t12[sp], r16\n+\tld.w\t16[sp], r15\n+\tld.w\t20[sp], r14\n+\tld.w\t24[sp], r13\n+\tld.w\t28[sp], r12\n+\tld.w\t32[sp], r11\n+\tld.w\t36[sp], r9\n+\tld.w\t40[sp], r8\n+\tld.w\t44[sp], r7\n+\tld.w\t48[sp], r6\n+\tld.w\t52[sp], r5\n+\tld.w\t56[sp], r2\n+#endif\n \taddi\t60, sp, sp\n \tctret\n "}, {"sha": "e77d56ab5e7558602d17a15b3af8e7e07a35c35f", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "patch": "@@ -616,7 +616,7 @@ print_operand (FILE * file, rtx x, int code)\n       break;\n     case 'S':\n       {\n-        /* if it's a reference to a TDA variable, use sst/sld vs. st/ld */\n+        /* If it's a reference to a TDA variable, use sst/sld vs. st/ld.  */\n         if (GET_CODE (x) == MEM && ep_memory_operand (x, GET_MODE (x), FALSE))\n           fputs (\"s\", file);\n \n@@ -1057,6 +1057,13 @@ ep_memory_operand (rtx op, enum machine_mode mode, int unsigned_load)\n   int max_offset;\n   int mask;\n \n+  /* If we are not using the EP register on a per-function basis\n+     then do not allow this optimisation at all.  This is to\n+     prevent the use of the SLD/SST instructions which cannot be\n+     guaranteed to work properly due to a hardware bug.  */\n+  if (!TARGET_EP)\n+    return FALSE;\n+\n   if (GET_CODE (op) != MEM)\n     return FALSE;\n "}, {"sha": "08c85fdbade1a005c4fece99b99feeeac2cea68d", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "patch": "@@ -81,6 +81,8 @@\n   builtin_define( \"__v850\" );\t\t\t\\\n   builtin_assert( \"machine=v850\" );\t\t\\\n   builtin_assert( \"cpu=v850\" );\t\t\t\\\n+  if (TARGET_EP)\t\t\t\t\\\n+    builtin_define (\"__EP__\");\t\t\t\\\n } while(0)\n \n #define MASK_CPU (MASK_V850 | MASK_V850E)\n@@ -131,7 +133,13 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n {\t\t\t\t\t\t\t\t\t\\\n   target_flags |= MASK_STRICT_ALIGN;\t\t\t\t\t\\\n   if (LEVEL)\t\t\t\t\t\t\t\t\\\n-    target_flags |= (MASK_EP | MASK_PROLOG_FUNCTION);\t\t\t\\\n+    /* Note - we no longer enable MASK_EP when optimizing.  This is\t\\\n+       because of a hardware bug which stops the SLD and SST instructions\\\n+       from correctly detecting some hazards.  If the user is sure that \\\n+       their hardware is fixed or that their program will not encounter \\\n+       the conditions that trigger the bug then they can enable -mep by \\\n+       hand.  */\t\t\t\t\t\t\t\\\n+    target_flags |= MASK_PROLOG_FUNCTION;\t\t\t\t\\\n }\n \n \f\n@@ -758,11 +766,11 @@ struct cum_arg { int nbytes; int anonymous_args; };\n    register class that does not include r0 on the output.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n- ((C) == 'Q'   ? ep_memory_operand (OP, GET_MODE (OP), 0)\t\t\\\n+ ((C) == 'Q'   ? ep_memory_operand (OP, GET_MODE (OP), FALSE)\t\t\\\n   : (C) == 'R' ? special_symbolref_operand (OP, VOIDmode)\t\t\\\n   : (C) == 'S' ? (GET_CODE (OP) == SYMBOL_REF\t\t\t\t\\\n \t\t  && !SYMBOL_REF_ZDA_P (OP))\t\t\t\t\\\n-  : (C) == 'T' ? ep_memory_operand(OP,GET_MODE(OP),TRUE)\t\t\\\n+  : (C) == 'T' ? ep_memory_operand (OP, GET_MODE (OP), TRUE)\t\t\\\n   : (C) == 'U' ? ((GET_CODE (OP) == SYMBOL_REF\t\t\t\t\\\n \t\t   && SYMBOL_REF_ZDA_P (OP))\t\t\t\t\\\n \t\t  || (GET_CODE (OP) == CONST\t\t\t\t\\"}, {"sha": "15c0cafbb7c7e7db2bde00bdb611a26be735f02d", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 96, "deletions": 32, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6cd51b63c9d73ca831391d00ff5aca2c76512/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=2ec6cd51b63c9d73ca831391d00ff5aca2c76512", "patch": "@@ -1832,35 +1832,69 @@\n     return \\\"jarl __save_all_interrupt,r10\\\";\n \n   output_asm_insn (\\\"addi -120, sp, sp\\\", operands);\n-  output_asm_insn (\\\"mov ep, r1\\\", operands);\n-  output_asm_insn (\\\"mov sp, ep\\\", operands);\n-  output_asm_insn (\\\"sst.w r31, 116[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r2,  112[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w gp,  108[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r6,  104[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r7,  100[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r8,   96[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r9,   92[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r11,  88[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r12,  84[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r13,  80[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r14,  76[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r15,  72[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r16,  68[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r17,  64[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r18,  60[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r19,  56[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r20,  52[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r21,  48[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r22,  44[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r23,  40[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r24,  36[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r25,  32[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r26,  28[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r27,  24[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r28,  20[ep]\\\", operands);\n-  output_asm_insn (\\\"sst.w r29,  16[ep]\\\", operands);\n-  output_asm_insn (\\\"mov   r1,   ep\\\", operands);\n+\n+  if (TARGET_EP)\n+    {\n+      output_asm_insn (\\\"mov ep, r1\\\", operands);\n+      output_asm_insn (\\\"mov sp, ep\\\", operands);\n+      output_asm_insn (\\\"sst.w r31, 116[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r2,  112[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w gp,  108[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r6,  104[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r7,  100[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r8,   96[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r9,   92[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r11,  88[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r12,  84[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r13,  80[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r14,  76[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r15,  72[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r16,  68[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r17,  64[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r18,  60[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r19,  56[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r20,  52[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r21,  48[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r22,  44[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r23,  40[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r24,  36[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r25,  32[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r26,  28[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r27,  24[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r28,  20[ep]\\\", operands);\n+      output_asm_insn (\\\"sst.w r29,  16[ep]\\\", operands);\n+      output_asm_insn (\\\"mov   r1,   ep\\\", operands);\n+    }\n+  else\n+    {\n+      output_asm_insn (\\\"st.w r31, 116[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r2,  112[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w gp,  108[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r6,  104[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r7,  100[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r8,   96[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r9,   92[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r11,  88[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r12,  84[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r13,  80[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r14,  76[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r15,  72[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r16,  68[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r17,  64[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r18,  60[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r19,  56[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r20,  52[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r21,  48[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r22,  44[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r23,  40[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r24,  36[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r25,  32[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r26,  28[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r27,  24[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r28,  20[sp]\\\", operands);\n+      output_asm_insn (\\\"st.w r29,  16[sp]\\\", operands);\n+    }\n+    \n   return \\\"\\\";\n }\"\n   [(set (attr \"length\")\n@@ -1897,7 +1931,8 @@\n {\n   if (TARGET_PROLOG_FUNCTION && !TARGET_LONG_CALLS)\n     return \\\"jarl __restore_all_interrupt,r10\\\";\n-  else\n+\n+  if (TARGET_EP)\n     {\n       output_asm_insn (\\\"mov   ep,      r1\\\", operands);\n       output_asm_insn (\\\"mov   sp,      ep\\\", operands);\n@@ -1928,9 +1963,38 @@\n       output_asm_insn (\\\"sld.w 20[ep],  r28\\\", operands);\n       output_asm_insn (\\\"sld.w 16[ep],  r29\\\", operands);\n       output_asm_insn (\\\"mov   r1,      ep\\\", operands);\n-      output_asm_insn (\\\"addi  120, sp, sp\\\", operands);\n-      return \\\"\\\";\n     }\n+  else\n+    {\n+      output_asm_insn (\\\"ld.w 116[sp], r31\\\", operands);\n+      output_asm_insn (\\\"ld.w 112[sp], r2\\\", operands);\n+      output_asm_insn (\\\"ld.w 108[sp], gp\\\", operands);\n+      output_asm_insn (\\\"ld.w 104[sp], r6\\\", operands);\n+      output_asm_insn (\\\"ld.w 100[sp], r7\\\", operands);\n+      output_asm_insn (\\\"ld.w 96[sp],  r8\\\", operands);\n+      output_asm_insn (\\\"ld.w 92[sp],  r9\\\", operands);\n+      output_asm_insn (\\\"ld.w 88[sp],  r11\\\", operands);\n+      output_asm_insn (\\\"ld.w 84[sp],  r12\\\", operands);\n+      output_asm_insn (\\\"ld.w 80[sp],  r13\\\", operands);\n+      output_asm_insn (\\\"ld.w 76[sp],  r14\\\", operands);\n+      output_asm_insn (\\\"ld.w 72[sp],  r15\\\", operands);\n+      output_asm_insn (\\\"ld.w 68[sp],  r16\\\", operands);\n+      output_asm_insn (\\\"ld.w 64[sp],  r17\\\", operands);\n+      output_asm_insn (\\\"ld.w 60[sp],  r18\\\", operands);\n+      output_asm_insn (\\\"ld.w 56[sp],  r19\\\", operands);\n+      output_asm_insn (\\\"ld.w 52[sp],  r20\\\", operands);\n+      output_asm_insn (\\\"ld.w 48[sp],  r21\\\", operands);\n+      output_asm_insn (\\\"ld.w 44[sp],  r22\\\", operands);\n+      output_asm_insn (\\\"ld.w 40[sp],  r23\\\", operands);\n+      output_asm_insn (\\\"ld.w 36[sp],  r24\\\", operands);\n+      output_asm_insn (\\\"ld.w 32[sp],  r25\\\", operands);\n+      output_asm_insn (\\\"ld.w 28[sp],  r26\\\", operands);\n+      output_asm_insn (\\\"ld.w 24[sp],  r27\\\", operands);\n+      output_asm_insn (\\\"ld.w 20[sp],  r28\\\", operands);\n+      output_asm_insn (\\\"ld.w 16[sp],  r29\\\", operands);\n+    }\n+  output_asm_insn (\\\"addi  120, sp, sp\\\", operands);\n+  return \\\"\\\";\n }\"\n   [(set (attr \"length\")\n         (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\") (const_int 0))"}]}