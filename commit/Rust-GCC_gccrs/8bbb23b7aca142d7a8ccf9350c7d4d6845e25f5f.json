{"sha": "8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJiYjIzYjdhY2ExNDJkN2E4Y2NmOTM1MGM3ZDRkNjg0NWUyNWY1Zg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "1999-12-10T16:06:23Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-12-10T16:06:23Z"}, "message": "parse.h (BUILD_THROW): Add support for sjlj-exceptions.\n\n1999-11-17  Andrew Haley  <aph@cygnus.com>\n\n\t* parse.h (BUILD_THROW): Add support for sjlj-exceptions.\n\tdecl.c (init_decl_processing): Add _Jv_Sjlj_Throw.\n\texpr.c (build_java_athrow): Add support for sjlj-exceptions.\n\tjava-tree.h: Ditto.\n\tjcf-write.c: Ditto.\n\nFrom-SVN: r30859", "tree": {"sha": "47d721442246f0cf2bfbddf397cdc82c91b72932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47d721442246f0cf2bfbddf397cdc82c91b72932"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/comments", "author": null, "committer": null, "parents": [{"sha": "22d37998107dd5a2afa93861e790275b98c90dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d37998107dd5a2afa93861e790275b98c90dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d37998107dd5a2afa93861e790275b98c90dd7"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "2a9a10b813ea85545575ec1b40a517a39e5c8f08", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "patch": "@@ -1,3 +1,11 @@\n+1999-12-10  Andrew Haley  <aph@cygnus.com>\n+\n+\t* parse.h (BUILD_THROW): Add support for sjlj-exceptions.\n+\tdecl.c (init_decl_processing): Add _Jv_Sjlj_Throw.\n+\texpr.c (build_java_athrow): Add support for sjlj-exceptions.\n+\tjava-tree.h: Ditto.\n+\tjcf-write.c: Ditto.\t\n+\n 1999-12-5  Anthony Green  <green@cygnus.com>\n \n \t* decl.c (init_decl_processing): Mark throw_node as a noreturn"}, {"sha": "85b64e581fa35f3df4c01e44048ccec7f742dcfa", "filename": "gcc/java/decl.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "patch": "@@ -337,7 +337,7 @@ tree soft_newarray_node;\n tree soft_anewarray_node;\n tree soft_multianewarray_node;\n tree soft_badarrayindex_node;\n-tree throw_node;\n+tree throw_node [2];\n tree soft_checkarraystore_node;\n tree soft_monitorenter_node;\n tree soft_monitorexit_node;\n@@ -706,12 +706,18 @@ init_decl_processing ()\n \t\t\t\t\t  0, NOT_BUILT_IN,\n \t\t\t\t\t  NULL_PTR);\n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n-  throw_node = builtin_function (\"_Jv_Throw\",\n-\t\t\t\t build_function_type (ptr_type_node, t),\n-\t\t\t\t 0, NOT_BUILT_IN, NULL_PTR);\n-  /* Mark throw_node as a `noreturn' function with side effects.  */\n-  TREE_THIS_VOLATILE (throw_node) = 1;\n-  TREE_SIDE_EFFECTS (throw_node) = 1;\n+  throw_node[0] = builtin_function (\"_Jv_Throw\",\n+\t\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t\t    0, NOT_BUILT_IN, NULL_PTR);\n+  /* Mark throw_nodes as `noreturn' functions with side effects.  */\n+  TREE_THIS_VOLATILE (throw_node[0]) = 1;\n+  TREE_SIDE_EFFECTS (throw_node[0]) = 1;\n+  t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n+  throw_node[1] = builtin_function (\"_Jv_Sjlj_Throw\",\n+\t\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t\t    0, NOT_BUILT_IN, NULL_PTR);\n+  TREE_THIS_VOLATILE (throw_node[1]) = 1;\n+  TREE_SIDE_EFFECTS (throw_node[1]) = 1;\n   t = build_function_type (int_type_node, endlink);\n   soft_monitorenter_node \n     = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,"}, {"sha": "c7332a52b073db0f4270e96b61df8cfb42324f19", "filename": "gcc/java/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "patch": "@@ -523,7 +523,8 @@ java_stack_dup (size, offset)\n     }\n }\n \n-/* Calls _Jv_Throw.  Discard the contents of the value stack. */\n+/* Calls _Jv_Throw or _Jv_Sjlj_Throw.  Discard the contents of the\n+   value stack. */\n \n static void\n build_java_athrow (node)\n@@ -533,7 +534,7 @@ build_java_athrow (node)\n \n   call = build (CALL_EXPR,\n \t\tvoid_type_node,\n-\t\tbuild_address_of (throw_node),\n+\t\tbuild_address_of (throw_node[exceptions_via_longjmp ? 1 : 0]),\n \t\tbuild_tree_list (NULL_TREE, node),\n \t\tNULL_TREE);\n   TREE_SIDE_EFFECTS (call) = 1;"}, {"sha": "a76439800aa519f59cee2484ebc7209eb58316f8", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "patch": "@@ -269,7 +269,7 @@ extern tree soft_newarray_node;\n extern tree soft_anewarray_node;\n extern tree soft_multianewarray_node;\n extern tree soft_badarrayindex_node;\n-extern tree throw_node;\n+extern tree throw_node[];\n extern tree soft_checkarraystore_node;\n extern tree soft_monitorenter_node;\n extern tree soft_monitorexit_node;"}, {"sha": "8c39c6120ea4585cacdf2d7d2599b6ccda899f46", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "patch": "@@ -2451,7 +2451,8 @@ generate_bytecode_insns (exp, target, state)\n \t  }\n \telse if (f == soft_monitorenter_node\n \t\t || f == soft_monitorexit_node\n-\t\t || f == throw_node)\n+\t\t || f == throw_node[0]\n+\t\t || f == throw_node[1])\n \t  {\n \t    if (f == soft_monitorenter_node)\n \t      op = OPCODE_monitorenter;"}, {"sha": "692b33e963158caa553c22c58a6385760c3ce9d8", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=8bbb23b7aca142d7a8ccf9350c7d4d6845e25f5f", "patch": "@@ -534,7 +534,7 @@ typedef struct _jdeplist {\n #define BUILD_THROW(WHERE, WHAT)\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     (WHERE) = build (CALL_EXPR, void_type_node,\t\t\t\t\\\n-\t\t  build_address_of (throw_node),\t\t\t\\\n+\t\t  build_address_of (throw_node[exceptions_via_longjmp ? 1 : 0]), \\\n \t\t  build_tree_list (NULL_TREE, (WHAT)), NULL_TREE);\t\\\n     TREE_SIDE_EFFECTS ((WHERE)) = 1;\t\t\t\t\t\\\n   }"}]}