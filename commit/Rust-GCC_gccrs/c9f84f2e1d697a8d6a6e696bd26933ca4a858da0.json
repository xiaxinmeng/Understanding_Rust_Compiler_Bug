{"sha": "c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmODRmMmUxZDY5N2E4ZDZhNmU2OTZiZDI2OTMzY2E0YTg1OGRhMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-16T13:50:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-16T13:50:08Z"}, "message": "gensupport.h (compute_test_codes): Take a file_location rather than a line number.\n\ngcc/\n\t* gensupport.h (compute_test_codes): Take a file_location rather\n\tthan a line number.\n\t* gensupport.c (compute_test_codes): Likewise.  Use *_at functions\n\trather than *_with_line functions.\n\t(process_define_predicate): Update call to compute_test_codes.\n\t* genpreds.c (validate_exp): Take a file_location rather than a\n\tline number.  Use *_at functions rather than *_with_line functions.\n\t(process_define_predicate): Update call to validate_exp.\n\t(constraint_data): Replace lineno field with a file_location.\n\t(add_constraint): Take a file_location rather than a line number.\n\tUse *_at functions rather than *_with_line functions.  Fix error\n\tmessage for address constraints.  Update after changes to\n\tvalidate_exp, constraint_data and compute_test_codes.\n\t(process_define_constraint): Update accordingly.\n\t(process_define_register_constraint): Likewise.\n\nFrom-SVN: r225882", "tree": {"sha": "b2ee1ab0865bf93d131b453a750d3d087b3fd325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ee1ab0865bf93d131b453a750d3d087b3fd325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca018d3cc0872d88bf3ffab1dc4e11bab6041d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca018d3cc0872d88bf3ffab1dc4e11bab6041d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca018d3cc0872d88bf3ffab1dc4e11bab6041d8c"}], "stats": {"total": 169, "additions": 92, "deletions": 77}, "files": [{"sha": "a882a8c7633de784f1d9f839ed32f0d968cfceb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "patch": "@@ -1,3 +1,21 @@\n+2015-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gensupport.h (compute_test_codes): Take a file_location rather\n+\tthan a line number.\n+\t* gensupport.c (compute_test_codes): Likewise.  Use *_at functions\n+\trather than *_with_line functions.\n+\t(process_define_predicate): Update call to compute_test_codes.\n+\t* genpreds.c (validate_exp): Take a file_location rather than a\n+\tline number.  Use *_at functions rather than *_with_line functions.\n+\t(process_define_predicate): Update call to validate_exp.\n+\t(constraint_data): Replace lineno field with a file_location.\n+\t(add_constraint): Take a file_location rather than a line number.\n+\tUse *_at functions rather than *_with_line functions.  Fix error\n+\tmessage for address constraints.  Update after changes to\n+\tvalidate_exp, constraint_data and compute_test_codes.\n+\t(process_define_constraint): Update accordingly.\n+\t(process_define_register_constraint): Likewise.\n+\n 2015-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* genoutput.c (data): Use a file_location to record the source"}, {"sha": "87d56f73fffe9d3c28605118678b67a1c389f3f0", "filename": "gcc/genpreds.c", "status": "modified", "additions": 52, "deletions": 53, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "patch": "@@ -32,33 +32,33 @@ along with GCC; see the file COPYING3.  If not see\n \n static char general_mem[] = { TARGET_MEM_CONSTRAINT, 0 };\n \n-/* Given a predicate expression EXP, from form NAME at line LINENO,\n+/* Given a predicate expression EXP, from form NAME at location LOC,\n    verify that it does not contain any RTL constructs which are not\n    valid in predicate definitions.  Returns true if EXP is\n    INvalid; issues error messages, caller need not.  */\n static bool\n-validate_exp (rtx exp, const char *name, int lineno)\n+validate_exp (rtx exp, const char *name, file_location loc)\n {\n   if (exp == 0)\n     {\n-      message_with_line (lineno, \"%s: must give a predicate expression\", name);\n+      message_at (loc, \"%s: must give a predicate expression\", name);\n       return true;\n     }\n \n   switch (GET_CODE (exp))\n     {\n       /* Ternary, binary, unary expressions: recurse into subexpressions.  */\n     case IF_THEN_ELSE:\n-      if (validate_exp (XEXP (exp, 2), name, lineno))\n+      if (validate_exp (XEXP (exp, 2), name, loc))\n \treturn true;\n       /* else fall through */\n     case AND:\n     case IOR:\n-      if (validate_exp (XEXP (exp, 1), name, lineno))\n+      if (validate_exp (XEXP (exp, 1), name, loc))\n \treturn true;\n       /* else fall through */\n     case NOT:\n-      return validate_exp (XEXP (exp, 0), name, lineno);\n+      return validate_exp (XEXP (exp, 0), name, loc);\n \n       /* MATCH_CODE might have a syntax error in its path expression.  */\n     case MATCH_CODE:\n@@ -68,8 +68,8 @@ validate_exp (rtx exp, const char *name, int lineno)\n \t  {\n \t    if (!ISDIGIT (*p) && !ISLOWER (*p))\n \t      {\n-\t\terror_with_line (lineno, \"%s: invalid character in path \"\n-\t\t\t\t \"string '%s'\", name, XSTR (exp, 1));\n+\t\terror_at (loc, \"%s: invalid character in path \"\n+\t\t\t  \"string '%s'\", name, XSTR (exp, 1));\n \t\treturn true;\n \t      }\n \t  }\n@@ -82,9 +82,8 @@ validate_exp (rtx exp, const char *name, int lineno)\n       return false;\n \n     default:\n-      error_with_line (lineno,\n-\t\t       \"%s: cannot use '%s' in a predicate expression\",\n-\t\t       name, GET_RTX_NAME (GET_CODE (exp)));\n+      error_at (loc, \"%s: cannot use '%s' in a predicate expression\",\n+\t\tname, GET_RTX_NAME (GET_CODE (exp)));\n       return true;\n     }\n }\n@@ -94,7 +93,8 @@ validate_exp (rtx exp, const char *name, int lineno)\n static void\n process_define_predicate (rtx defn, int lineno)\n {\n-  validate_exp (XEXP (defn, 1), XSTR (defn, 0), lineno);\n+  validate_exp (XEXP (defn, 1), XSTR (defn, 0),\n+\t\tfile_location (read_md_filename, lineno));\n }\n \n /* Given a predicate, if it has an embedded C block, write the block\n@@ -671,10 +671,10 @@ struct constraint_data\n   struct constraint_data *next_textual;\n   const char *name;\n   const char *c_name;    /* same as .name unless mangling is necessary */\n+  file_location loc;     /* location of definition */\n   size_t namelen;\n   const char *regclass;  /* for register constraints */\n   rtx exp;               /* for other constraints */\n-  unsigned int lineno;   /* line of definition */\n   unsigned int is_register\t: 1;\n   unsigned int is_const_int\t: 1;\n   unsigned int is_const_dbl\t: 1;\n@@ -754,7 +754,8 @@ mangle (const char *name)\n /* Add one constraint, of any sort, to the tables.  NAME is its name;\n    REGCLASS is the register class, if any; EXP is the expression to\n    test, if any;  IS_MEMORY and IS_ADDRESS indicate memory and address\n-   constraints, respectively; LINENO is the line number from the MD reader.\n+   constraints, respectively; LOC is the .md file location.\n+\n    Not all combinations of arguments are valid; most importantly, REGCLASS\n    is mutually exclusive with EXP, and IS_MEMORY/IS_ADDRESS are only\n    meaningful for constraints with EXP.\n@@ -765,7 +766,7 @@ mangle (const char *name)\n static void\n add_constraint (const char *name, const char *regclass,\n \t\trtx exp, bool is_memory, bool is_address,\n-\t\tint lineno)\n+\t\tfile_location loc)\n {\n   struct constraint_data *c, **iter, **slot;\n   const char *p;\n@@ -777,7 +778,7 @@ add_constraint (const char *name, const char *regclass,\n   if (strcmp (name, \"TARGET_MEM_CONSTRAINT\") == 0)\n     name = general_mem;\n \n-  if (exp && validate_exp (exp, name, lineno))\n+  if (exp && validate_exp (exp, name, loc))\n     return;\n \n   for (p = name; *p; p++)\n@@ -787,23 +788,20 @@ add_constraint (const char *name, const char *regclass,\n \t  need_mangled_name = true;\n \telse\n \t  {\n-\t    error_with_line (lineno,\n-\t\t\t     \"constraint name '%s' must be composed of \"\n-\t\t\t     \"letters, digits, underscores, and \"\n-\t\t\t     \"angle brackets\", name);\n+\t    error_at (loc, \"constraint name '%s' must be composed of letters,\"\n+\t\t      \" digits, underscores, and angle brackets\", name);\n \t    return;\n \t  }\n       }\n \n   if (strchr (generic_constraint_letters, name[0]))\n     {\n       if (name[1] == '\\0')\n-\terror_with_line (lineno, \"constraint letter '%s' cannot be \"\n-\t\t\t \"redefined by the machine description\", name);\n+\terror_at (loc, \"constraint letter '%s' cannot be \"\n+\t\t  \"redefined by the machine description\", name);\n       else\n-\terror_with_line (lineno, \"constraint name '%s' cannot be defined by \"\n-\t\t\t \"the machine description, as it begins with '%c'\",\n-\t\t\t name, name[0]);\n+\terror_at (loc, \"constraint name '%s' cannot be defined by the machine\"\n+\t\t  \" description, as it begins with '%c'\", name, name[0]);\n       return;\n     }\n \n@@ -822,22 +820,22 @@ add_constraint (const char *name, const char *regclass,\n \n       if (!strcmp ((*iter)->name, name))\n \t{\n-\t  error_with_line (lineno, \"redefinition of constraint '%s'\", name);\n-\t  message_with_line ((*iter)->lineno, \"previous definition is here\");\n+\t  error_at (loc, \"redefinition of constraint '%s'\", name);\n+\t  message_at ((*iter)->loc, \"previous definition is here\");\n \t  return;\n \t}\n       else if (!strncmp ((*iter)->name, name, (*iter)->namelen))\n \t{\n-\t  error_with_line (lineno, \"defining constraint '%s' here\", name);\n-\t  message_with_line ((*iter)->lineno, \"renders constraint '%s' \"\n-\t\t\t     \"(defined here) a prefix\", (*iter)->name);\n+\t  error_at (loc, \"defining constraint '%s' here\", name);\n+\t  message_at ((*iter)->loc, \"renders constraint '%s' \"\n+\t\t      \"(defined here) a prefix\", (*iter)->name);\n \t  return;\n \t}\n       else if (!strncmp ((*iter)->name, name, namelen))\n \t{\n-\t  error_with_line (lineno, \"constraint '%s' is a prefix\", name);\n-\t  message_with_line ((*iter)->lineno, \"of constraint '%s' \"\n-\t\t\t     \"(defined here)\", (*iter)->name);\n+\t  error_at (loc, \"constraint '%s' is a prefix\", name);\n+\t  message_at ((*iter)->loc, \"of constraint '%s' (defined here)\",\n+\t\t      (*iter)->name);\n \t  return;\n \t}\n     }\n@@ -858,36 +856,36 @@ add_constraint (const char *name, const char *regclass,\n \t\t     GET_RTX_NAME (appropriate_code)))\n \t{\n \t  if (name[1] == '\\0')\n-\t    error_with_line (lineno, \"constraint letter '%c' is reserved \"\n-\t\t\t     \"for %s constraints\",\n-\t\t\t     name[0], GET_RTX_NAME (appropriate_code));\n+\t    error_at (loc, \"constraint letter '%c' is reserved \"\n+\t\t      \"for %s constraints\", name[0],\n+\t\t      GET_RTX_NAME (appropriate_code));\n \t  else\n-\t    error_with_line (lineno, \"constraint names beginning with '%c' \"\n-\t\t\t     \"(%s) are reserved for %s constraints\",\n-\t\t\t     name[0], name, GET_RTX_NAME (appropriate_code));\n+\t    error_at (loc, \"constraint names beginning with '%c' \"\n+\t\t      \"(%s) are reserved for %s constraints\",\n+\t\t      name[0], name, GET_RTX_NAME (appropriate_code));\n \t  return;\n \t}\n \n       if (is_memory)\n \t{\n \t  if (name[1] == '\\0')\n-\t    error_with_line (lineno, \"constraint letter '%c' cannot be a \"\n-\t\t\t     \"memory constraint\", name[0]);\n+\t    error_at (loc, \"constraint letter '%c' cannot be a \"\n+\t\t      \"memory constraint\", name[0]);\n \t  else\n-\t    error_with_line (lineno, \"constraint name '%s' begins with '%c', \"\n-\t\t\t     \"and therefore cannot be a memory constraint\",\n-\t\t\t     name, name[0]);\n+\t    error_at (loc, \"constraint name '%s' begins with '%c', \"\n+\t\t      \"and therefore cannot be a memory constraint\",\n+\t\t      name, name[0]);\n \t  return;\n \t}\n       else if (is_address)\n \t{\n \t  if (name[1] == '\\0')\n-\t    error_with_line (lineno, \"constraint letter '%c' cannot be a \"\n-\t\t\t     \"memory constraint\", name[0]);\n+\t    error_at (loc, \"constraint letter '%c' cannot be an \"\n+\t\t      \"address constraint\", name[0]);\n \t  else\n-\t    error_with_line (lineno, \"constraint name '%s' begins with '%c', \"\n-\t\t\t     \"and therefore cannot be a memory constraint\",\n-\t\t\t     name, name[0]);\n+\t    error_at (loc, \"constraint name '%s' begins with '%c', \"\n+\t\t      \"and therefore cannot be an address constraint\",\n+\t\t      name, name[0]);\n \t  return;\n \t}\n     }\n@@ -896,7 +894,7 @@ add_constraint (const char *name, const char *regclass,\n   c = XOBNEW (rtl_obstack, struct constraint_data);\n   c->name = name;\n   c->c_name = need_mangled_name ? mangle (name) : name;\n-  c->lineno = lineno;\n+  c->loc = loc;\n   c->namelen = namelen;\n   c->regclass = regclass;\n   c->exp = exp;\n@@ -911,7 +909,7 @@ add_constraint (const char *name, const char *regclass,\n   if (exp)\n     {\n       char codes[NUM_RTX_CODE];\n-      compute_test_codes (exp, lineno, codes);\n+      compute_test_codes (exp, loc, codes);\n       if (!codes[REG] && !codes[SUBREG])\n \tc->maybe_allows_reg = false;\n       if (!codes[MEM])\n@@ -943,14 +941,15 @@ process_define_constraint (rtx c, int lineno)\n   add_constraint (XSTR (c, 0), 0, XEXP (c, 2),\n \t\t  GET_CODE (c) == DEFINE_MEMORY_CONSTRAINT,\n \t\t  GET_CODE (c) == DEFINE_ADDRESS_CONSTRAINT,\n-\t\t  lineno);\n+\t\t  file_location (read_md_filename, lineno));\n }\n \n /* Process a DEFINE_REGISTER_CONSTRAINT expression, C.  */\n static void\n process_define_register_constraint (rtx c, int lineno)\n {\n-  add_constraint (XSTR (c, 0), XSTR (c, 1), 0, false, false, lineno);\n+  add_constraint (XSTR (c, 0), XSTR (c, 1), 0, false, false,\n+\t\t  file_location (read_md_filename, lineno));\n }\n \n /* Put the constraints into enum order.  We want to keep constraints"}, {"sha": "d387a5331060d537bbff8b12ea6f994730593a82", "filename": "gcc/gensupport.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "patch": "@@ -209,11 +209,11 @@ add_implicit_parallel (rtvec vec)\n static char did_you_mean_codes[NUM_RTX_CODE];\n \n /* Recursively calculate the set of rtx codes accepted by the\n-   predicate expression EXP, writing the result to CODES.  LINENO is\n-   the line number on which the directive containing EXP appeared.  */\n+   predicate expression EXP, writing the result to CODES.  LOC is\n+   the .md file location of the directive containing EXP.  */\n \n void\n-compute_test_codes (rtx exp, int lineno, char *codes)\n+compute_test_codes (rtx exp, file_location loc, char *codes)\n {\n   char op0_codes[NUM_RTX_CODE];\n   char op1_codes[NUM_RTX_CODE];\n@@ -223,29 +223,29 @@ compute_test_codes (rtx exp, int lineno, char *codes)\n   switch (GET_CODE (exp))\n     {\n     case AND:\n-      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n-      compute_test_codes (XEXP (exp, 1), lineno, op1_codes);\n+      compute_test_codes (XEXP (exp, 0), loc, op0_codes);\n+      compute_test_codes (XEXP (exp, 1), loc, op1_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_AND (op0_codes[i], op1_codes[i]);\n       break;\n \n     case IOR:\n-      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n-      compute_test_codes (XEXP (exp, 1), lineno, op1_codes);\n+      compute_test_codes (XEXP (exp, 0), loc, op0_codes);\n+      compute_test_codes (XEXP (exp, 1), loc, op1_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_OR (op0_codes[i], op1_codes[i]);\n       break;\n     case NOT:\n-      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n+      compute_test_codes (XEXP (exp, 0), loc, op0_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_NOT (op0_codes[i]);\n       break;\n \n     case IF_THEN_ELSE:\n       /* a ? b : c  accepts the same codes as (a & b) | (!a & c).  */\n-      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n-      compute_test_codes (XEXP (exp, 1), lineno, op1_codes);\n-      compute_test_codes (XEXP (exp, 2), lineno, op2_codes);\n+      compute_test_codes (XEXP (exp, 0), loc, op0_codes);\n+      compute_test_codes (XEXP (exp, 1), loc, op1_codes);\n+      compute_test_codes (XEXP (exp, 2), loc, op2_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_OR (TRISTATE_AND (op0_codes[i], op1_codes[i]),\n \t\t\t\tTRISTATE_AND (TRISTATE_NOT (op0_codes[i]),\n@@ -269,7 +269,7 @@ compute_test_codes (rtx exp, int lineno, char *codes)\n \n \tif (*next_code == '\\0')\n \t  {\n-\t    error_with_line (lineno, \"empty match_code expression\");\n+\t    error_at (loc, \"empty match_code expression\");\n \t    break;\n \t  }\n \n@@ -288,17 +288,16 @@ compute_test_codes (rtx exp, int lineno, char *codes)\n \t\t}\n \t    if (!found_it)\n \t      {\n-\t\terror_with_line (lineno,\n-\t\t\t\t \"match_code \\\"%.*s\\\" matches nothing\",\n-\t\t\t\t (int) n, code);\n+\t\terror_at (loc, \"match_code \\\"%.*s\\\" matches nothing\",\n+\t\t\t  (int) n, code);\n \t\tfor (i = 0; i < NUM_RTX_CODE; i++)\n \t\t  if (!strncasecmp (code, GET_RTX_NAME (i), n)\n \t\t      && GET_RTX_NAME (i)[n] == '\\0'\n \t\t      && !did_you_mean_codes[i])\n \t\t    {\n \t\t      did_you_mean_codes[i] = 1;\n-\t\t      message_with_line (lineno, \"(did you mean \\\"%s\\\"?)\",\n-\t\t\t\t\t GET_RTX_NAME (i));\n+\t\t      message_at (loc, \"(did you mean \\\"%s\\\"?)\",\n+\t\t\t\t  GET_RTX_NAME (i));\n \t\t    }\n \t      }\n \t  }\n@@ -312,8 +311,8 @@ compute_test_codes (rtx exp, int lineno, char *codes)\n \tstruct pred_data *p = lookup_predicate (XSTR (exp, 1));\n \tif (!p)\n \t  {\n-\t    error_with_line (lineno, \"reference to unknown predicate '%s'\",\n-\t\t\t     XSTR (exp, 1));\n+\t    error_at (loc, \"reference to unknown predicate '%s'\",\n+\t\t      XSTR (exp, 1));\n \t    break;\n \t  }\n \tfor (i = 0; i < NUM_RTX_CODE; i++)\n@@ -328,9 +327,8 @@ compute_test_codes (rtx exp, int lineno, char *codes)\n       break;\n \n     default:\n-      error_with_line (lineno,\n-\t\t       \"'%s' cannot be used in predicates or constraints\",\n-\t\t       GET_RTX_NAME (GET_CODE (exp)));\n+      error_at (loc, \"'%s' cannot be used in predicates or constraints\",\n+\t\tGET_RTX_NAME (GET_CODE (exp)));\n       memset (codes, I, NUM_RTX_CODE);\n       break;\n     }\n@@ -380,7 +378,7 @@ process_define_predicate (rtx desc, file_location loc)\n   if (GET_CODE (desc) == DEFINE_SPECIAL_PREDICATE)\n     pred->special = true;\n \n-  compute_test_codes (XEXP (desc, 1), loc.lineno, codes);\n+  compute_test_codes (XEXP (desc, 1), loc, codes);\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n     if (codes[i] != N)"}, {"sha": "fc0e8491f10ab1a6c65a9bc93dd5a25ccfdfa379", "filename": "gcc/gensupport.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f84f2e1d697a8d6a6e696bd26933ca4a858da0/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=c9f84f2e1d697a8d6a6e696bd26933ca4a858da0", "patch": "@@ -110,7 +110,7 @@ struct pattern_stats\n };\n \n extern void get_pattern_stats (struct pattern_stats *ranges, rtvec vec);\n-extern void compute_test_codes (rtx, int, char *);\n+extern void compute_test_codes (rtx, file_location, char *);\n extern const char *get_emit_function (rtx);\n extern bool needs_barrier_p (rtx);\n "}]}