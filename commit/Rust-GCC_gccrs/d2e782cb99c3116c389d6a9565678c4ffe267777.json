{"sha": "d2e782cb99c3116c389d6a9565678c4ffe267777", "node_id": "C_kwDOANBUbNoAKGQyZTc4MmNiOTljMzExNmMzODlkNmE5NTY1Njc4YzRmZmUyNjc3Nzc", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-11-20T15:22:53Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-12-07T00:40:17Z"}, "message": "libgccjit: Fix float vector comparison\n\nFix float vector comparison and add comparison tests to include float and\nvectors.\n\ngcc/testsuite:\n\tPR jit/107770\n\t* jit.dg/harness.h: Add new macro to to perform vector\n\tcomparisons\n\t* jit.dg/test-expressions.c: Extend comparison tests to add float\n\ttypes and vectors\n\ngcc/jit:\n\tPR jit/107770\n\t* jit-playback.cc: Fix vector float comparison\n\t* jit-playback.h: Update comparison function signature\n\t* jit-recording.cc: Update call for \"new_comparison\" function\n\t* jit-recording.h: Fix vector float comparison\n\nCo-authored-by: Guillaume Gomez <guillaume1.gomez@gmail.com>\nSigned-off-by: Guillaume Gomez <guillaume1.gomez@gmail.com>", "tree": {"sha": "a75b5d3a8a7f6fb3c024fc42fad4f3dfc656f3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75b5d3a8a7f6fb3c024fc42fad4f3dfc656f3bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2e782cb99c3116c389d6a9565678c4ffe267777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e782cb99c3116c389d6a9565678c4ffe267777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e782cb99c3116c389d6a9565678c4ffe267777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e782cb99c3116c389d6a9565678c4ffe267777/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1"}], "stats": {"total": 299, "additions": 246, "deletions": 53}, "files": [{"sha": "96e9227af40fdeaa3f16b2b37e218ad12dc7fcd4", "filename": "gcc/jit/jit-playback.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-playback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-playback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.cc?ref=d2e782cb99c3116c389d6a9565678c4ffe267777", "patch": "@@ -1213,7 +1213,7 @@ playback::rvalue *\n playback::context::\n new_comparison (location *loc,\n \t\tenum gcc_jit_comparison op,\n-\t\trvalue *a, rvalue *b)\n+\t\trvalue *a, rvalue *b, type *vec_result_type)\n {\n   // FIXME: type-checking, or coercion?\n   enum tree_code inner_op;\n@@ -1252,10 +1252,27 @@ new_comparison (location *loc,\n   tree node_b = b->as_tree ();\n   node_b = fold_const_var (node_b);\n \n-  tree inner_expr = build2 (inner_op,\n-\t\t\t    boolean_type_node,\n-\t\t\t    node_a,\n-\t\t\t    node_b);\n+  tree inner_expr;\n+  tree a_type = TREE_TYPE (node_a);\n+  if (VECTOR_TYPE_P (a_type))\n+  {\n+    /* Build a vector comparison.  See build_vec_cmp in c-typeck.cc for\n+       reference.  */\n+    tree t_vec_result_type = vec_result_type->as_tree ();\n+    tree zero_vec = build_zero_cst (t_vec_result_type);\n+    tree minus_one_vec = build_minus_one_cst (t_vec_result_type);\n+    tree cmp_type = truth_type_for (a_type);\n+    tree cmp = build2 (inner_op, cmp_type, node_a, node_b);\n+    inner_expr = build3 (VEC_COND_EXPR, t_vec_result_type, cmp, minus_one_vec,\n+\t\t\t zero_vec);\n+  }\n+  else\n+  {\n+    inner_expr = build2 (inner_op,\n+\t\t\t boolean_type_node,\n+\t\t\t node_a,\n+\t\t\t node_b);\n+  }\n \n   /* Try to fold.  */\n   inner_expr = fold (inner_expr);"}, {"sha": "214f399f45c445e98ec84169e83c22cd01b245c0", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=d2e782cb99c3116c389d6a9565678c4ffe267777", "patch": "@@ -162,7 +162,7 @@ class context : public log_user\n   rvalue *\n   new_comparison (location *loc,\n \t\t  enum gcc_jit_comparison op,\n-\t\t  rvalue *a, rvalue *b);\n+\t\t  rvalue *a, rvalue *b, type *vec_result_type);\n \n   rvalue *\n   new_call (location *loc,"}, {"sha": "2ce272267b81702dfd02960b7258472d807f1c23", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=d2e782cb99c3116c389d6a9565678c4ffe267777", "patch": "@@ -5836,7 +5836,8 @@ recording::comparison::replay_into (replayer *r)\n   set_playback_obj (r->new_comparison (playback_location (r, m_loc),\n \t\t\t\t       m_op,\n \t\t\t\t       m_a->playback_rvalue (),\n-\t\t\t\t       m_b->playback_rvalue ()));\n+\t\t\t\t       m_b->playback_rvalue (),\n+\t\t\t\t       m_type->playback_type ()));\n }\n \n /* Implementation of pure virtual hook recording::rvalue::visit_children"}, {"sha": "5d7c7177cc3ec01bd691e77a2331dd663d11e522", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=d2e782cb99c3116c389d6a9565678c4ffe267777", "patch": "@@ -1683,7 +1683,23 @@ class comparison : public rvalue\n     m_op (op),\n     m_a (a),\n     m_b (b)\n-  {}\n+  {\n+    type *a_type = a->get_type ();\n+    vector_type *vec_type = a_type->dyn_cast_vector_type ();\n+    if (vec_type != NULL)\n+    {\n+      type *element_type = vec_type->get_element_type ();\n+      type *inner_type;\n+      /* Vectors of floating-point values return a vector of integers of the\n+         same size.  */\n+      if (element_type->is_float ())\n+\tinner_type = ctxt->get_int_type (element_type->get_size (), false);\n+      else\n+\tinner_type = element_type;\n+      m_type = new vector_type (inner_type, vec_type->get_num_units ());\n+      ctxt->record (m_type);\n+    }\n+  }\n \n   void replay_into (replayer *r) final override;\n "}, {"sha": "e423abe9ee1fde23b39caa3d82b0cba00788b68a", "filename": "gcc/testsuite/jit.dg/harness.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h?ref=d2e782cb99c3116c389d6a9565678c4ffe267777", "patch": "@@ -68,6 +68,21 @@ static char test[1024];\n     }                                        \\\n   } while (0)\n \n+#define CHECK_VECTOR_VALUE(LEN, ACTUAL, EXPECTED) \\\n+  do {                                       \\\n+    for (int __check_vector_it = 0; __check_vector_it < LEN; ++__check_vector_it) { \\\n+      if ((ACTUAL)[__check_vector_it] != (EXPECTED)[__check_vector_it]) { \\\n+          fail (\"%s: %s: actual: %s != expected: %s (position %d)\", \\\n+              test, __func__, #ACTUAL, #EXPECTED, __check_vector_it);  \\\n+        fprintf (stderr, \"incorrect value\\n\"); \\\n+        abort ();                              \\\n+      } \\\n+    } \\\n+  pass (\"%s: %s: actual: %s == expected: %s\", \\\n+        test, __func__, #ACTUAL, #EXPECTED);  \\\n+  } while (0)\n+\n+\n #define CHECK_DOUBLE_VALUE(ACTUAL, EXPECTED) \\\n   do {                                       \\\n     double expected = (EXPECTED);\t     \\"}, {"sha": "13b3baf79ea58f4823894f616ce87903106a658d", "filename": "gcc/testsuite/jit.dg/test-expressions.c", "status": "modified", "additions": 189, "deletions": 45, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Ftestsuite%2Fjit.dg%2Ftest-expressions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e782cb99c3116c389d6a9565678c4ffe267777/gcc%2Ftestsuite%2Fjit.dg%2Ftest-expressions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-expressions.c?ref=d2e782cb99c3116c389d6a9565678c4ffe267777", "patch": "@@ -383,15 +383,7 @@ make_test_of_comparison (gcc_jit_context *ctxt,\n   gcc_jit_param *param_b =\n     gcc_jit_context_new_param (ctxt, NULL, type, \"b\");\n   gcc_jit_param *params[] = {param_a, param_b};\n-  gcc_jit_type *bool_type =\n-    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_BOOL);\n-  gcc_jit_function *test_fn =\n-    gcc_jit_context_new_function (ctxt, NULL,\n-\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n-\t\t\t\t  bool_type,\n-\t\t\t\t  funcname,\n-\t\t\t\t  2, params,\n-\t\t\t\t  0);\n+\n   gcc_jit_rvalue *comparison =\n     gcc_jit_context_new_comparison (\n       ctxt,\n@@ -400,55 +392,120 @@ make_test_of_comparison (gcc_jit_context *ctxt,\n       gcc_jit_param_as_rvalue (param_a),\n       gcc_jit_param_as_rvalue (param_b));\n \n+  gcc_jit_type *comparison_type = gcc_jit_rvalue_get_type(comparison);\n+\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  comparison_type,\n+\t\t\t\t  funcname,\n+\t\t\t\t  2, params,\n+\t\t\t\t  0);\n+\n   gcc_jit_block *initial = gcc_jit_function_new_block (test_fn, \"initial\");\n   gcc_jit_block_end_with_return (initial, NULL, comparison);\n \n   return gcc_jit_object_get_debug_string (\n     gcc_jit_rvalue_as_object (comparison));\n }\n \n-static void\n-make_tests_of_comparisons (gcc_jit_context *ctxt)\n+static void run_test_of_comparison(gcc_jit_context *ctxt,\n+\t\t\t gcc_jit_type *type,\n+\t\t\t enum gcc_jit_comparison op,\n+\t\t\t const char *funcname,\n+\t\t\t const char *vec_funcname,\n+\t\t\t const char *expected)\n {\n-  gcc_jit_type *int_type =\n-    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *vec_type =\n+    gcc_jit_type_get_vector (type, 4);\n \n   CHECK_STRING_VALUE (\n     make_test_of_comparison (ctxt,\n-\t\t\t     int_type,\n-\t\t\t     GCC_JIT_COMPARISON_EQ,\n-\t\t\t     \"test_COMPARISON_EQ_on_int\"),\n-    \"a == b\");\n-  CHECK_STRING_VALUE (\n-    make_test_of_comparison (ctxt,\n-\t\t\t     int_type,\n-\t\t\t     GCC_JIT_COMPARISON_NE,\n-\t\t\t     \"test_COMPARISON_NE_on_int\"),\n-    \"a != b\");\n-  CHECK_STRING_VALUE (\n-    make_test_of_comparison (ctxt,\n-\t\t\t     int_type,\n-\t\t\t     GCC_JIT_COMPARISON_LT,\n-\t\t\t     \"test_COMPARISON_LT_on_int\"),\n-    \"a < b\");\n+\t\t\t     type,\n+\t\t\t     op,\n+\t\t\t     funcname),\n+    expected);\n   CHECK_STRING_VALUE (\n     make_test_of_comparison (ctxt,\n-\t\t\t     int_type,\n-\t\t\t     GCC_JIT_COMPARISON_LE,\n-\t\t\t     \"test_COMPARISON_LE_on_int\"),\n-    \"a <= b\");\n-  CHECK_STRING_VALUE (\n-    make_test_of_comparison (ctxt,\n-\t\t\t     int_type,\n-\t\t\t     GCC_JIT_COMPARISON_GT,\n-\t\t\t     \"test_COMPARISON_GT_on_int\"),\n-    \"a > b\");\n-  CHECK_STRING_VALUE (\n-    make_test_of_comparison (ctxt,\n-\t\t\t     int_type,\n-\t\t\t     GCC_JIT_COMPARISON_GE,\n-\t\t\t     \"test_COMPARISON_GE_on_int\"),\n-    \"a >= b\");\n+\t\t\t     vec_type,\n+\t\t\t     op,\n+\t\t\t     vec_funcname),\n+    expected);\n+}\n+\n+static void\n+make_tests_of_comparisons (gcc_jit_context *ctxt)\n+{\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *float_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_FLOAT);\n+\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tint_type,\n+  \tGCC_JIT_COMPARISON_EQ,\n+  \t\"test_COMPARISON_EQ_on_int\",\n+  \t\"test_COMPARISON_EQ_on_vec_int\",\n+  \t\"a == b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tint_type,\n+  \tGCC_JIT_COMPARISON_NE,\n+  \t\"test_COMPARISON_NE_on_int\",\n+  \t\"test_COMPARISON_NE_on_vec_int\",\n+  \t\"a != b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tint_type,\n+  \tGCC_JIT_COMPARISON_LT,\n+  \t\"test_COMPARISON_LT_on_int\",\n+  \t\"test_COMPARISON_LT_on_vec_int\",\n+  \t\"a < b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tint_type,\n+  \tGCC_JIT_COMPARISON_LE,\n+  \t\"test_COMPARISON_LE_on_int\",\n+  \t\"test_COMPARISON_LE_on_vec_int\",\n+  \t\"a <= b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tint_type,\n+  \tGCC_JIT_COMPARISON_GT,\n+  \t\"test_COMPARISON_GT_on_int\",\n+  \t\"test_COMPARISON_GT_on_vec_int\",\n+  \t\"a > b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tint_type,\n+  \tGCC_JIT_COMPARISON_GE,\n+  \t\"test_COMPARISON_GE_on_int\",\n+  \t\"test_COMPARISON_GE_on_vec_int\",\n+  \t\"a >= b\");\n+\n+  // Float tests\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tfloat_type,\n+  \tGCC_JIT_COMPARISON_NE,\n+  \t\"test_COMPARISON_NE_on_float\",\n+  \t\"test_COMPARISON_NE_on_vec_float\",\n+  \t\"a != b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tfloat_type,\n+  \tGCC_JIT_COMPARISON_LT,\n+  \t\"test_COMPARISON_LT_on_float\",\n+  \t\"test_COMPARISON_LT_on_vec_float\",\n+  \t\"a < b\");\n+  run_test_of_comparison(\n+  \tctxt,\n+  \tfloat_type,\n+  \tGCC_JIT_COMPARISON_GT,\n+  \t\"test_COMPARISON_GT_on_float\",\n+  \t\"test_COMPARISON_GT_on_vec_float\",\n+  \t\"a > b\");\n }\n \n static void\n@@ -502,6 +559,93 @@ verify_comparisons (gcc_jit_result *result)\n   CHECK_VALUE (test_COMPARISON_GE_on_int (0, 0), 1);\n   CHECK_VALUE (test_COMPARISON_GE_on_int (1, 2), 0);\n   CHECK_VALUE (test_COMPARISON_GE_on_int (2, 1), 1);\n+\n+  typedef int __vector __attribute__ ((__vector_size__ (sizeof(int) * 2)));\n+  typedef __vector (*test_vec_fn) (__vector, __vector);\n+\n+  __vector zero_zero = {0, 0};\n+  __vector zero_one = {0, 1};\n+  __vector one_zero = {1, 0};\n+\n+  __vector true_true = {-1, -1};\n+  __vector false_true = {0, -1};\n+  __vector true_false = {-1, 0};\n+  __vector false_false = {0, 0};\n+\n+  test_vec_fn test_COMPARISON_EQ_on_vec_int =\n+    (test_vec_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_EQ_on_vec_int\");\n+  CHECK_NON_NULL (test_COMPARISON_EQ_on_vec_int);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_EQ_on_vec_int (zero_zero, zero_zero), true_true);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_EQ_on_vec_int (zero_one, one_zero), false_false);\n+\n+  test_vec_fn test_COMPARISON_NE_on_vec_int =\n+    (test_vec_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_NE_on_vec_int\");\n+  CHECK_NON_NULL (test_COMPARISON_NE_on_vec_int);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_NE_on_vec_int (zero_zero, zero_zero), false_false);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_NE_on_vec_int (zero_one, one_zero), true_true);\n+\n+  test_vec_fn test_COMPARISON_LT_on_vec_int =\n+    (test_vec_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_LT_on_vec_int\");\n+  CHECK_NON_NULL (test_COMPARISON_LT_on_vec_int);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_LT_on_vec_int (zero_zero, zero_zero), false_false);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_LT_on_vec_int (zero_one, one_zero), true_false);\n+\n+  test_vec_fn test_COMPARISON_LE_on_vec_int =\n+    (test_vec_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_LE_on_vec_int\");\n+  CHECK_NON_NULL (test_COMPARISON_LE_on_vec_int);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_LE_on_vec_int (zero_zero, zero_zero), true_true);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_LE_on_vec_int (zero_one, one_zero), true_false);\n+\n+  test_vec_fn test_COMPARISON_GT_on_vec_int =\n+    (test_vec_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_GT_on_vec_int\");\n+  CHECK_NON_NULL (test_COMPARISON_GT_on_vec_int);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_GT_on_vec_int (zero_zero, zero_zero), false_false);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_GT_on_vec_int (zero_one, one_zero), false_true);\n+\n+  test_vec_fn test_COMPARISON_GE_on_vec_int =\n+    (test_vec_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_GE_on_vec_int\");\n+  CHECK_NON_NULL (test_COMPARISON_GE_on_vec_int);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_GE_on_vec_int (zero_zero, zero_zero), true_true);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_GE_on_vec_int (zero_one, one_zero), false_true);\n+\n+  typedef float __vector_f __attribute__ ((__vector_size__ (sizeof(float) * 2)));\n+  typedef __vector (*test_vec_f_fn) (__vector_f, __vector_f);\n+\n+  __vector_f zero_zero_f = {0, 0};\n+  __vector_f zero_one_f = {0, 1};\n+  __vector_f one_zero_f = {1, 0};\n+\n+  __vector_f true_true_f = {-1, -1};\n+  __vector_f false_true_f = {0, -1};\n+  __vector_f true_false_f = {-1, 0};\n+  __vector_f false_false_f = {0, 0};\n+\n+  test_vec_f_fn test_COMPARISON_NE_on_vec_float =\n+    (test_vec_f_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_NE_on_vec_float\");\n+  CHECK_NON_NULL (test_COMPARISON_NE_on_vec_float);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_NE_on_vec_float (zero_zero_f, zero_zero_f), false_false_f);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_NE_on_vec_float (zero_one_f, one_zero_f), true_true_f);\n+\n+  test_vec_f_fn test_COMPARISON_LT_on_vec_float =\n+    (test_vec_f_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_LT_on_vec_float\");\n+  CHECK_NON_NULL (test_COMPARISON_LT_on_vec_float);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_LT_on_vec_float (zero_zero_f, zero_zero_f), false_false_f);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_LT_on_vec_float (zero_one_f, one_zero_f), true_false_f);\n+\n+  test_vec_f_fn test_COMPARISON_GT_on_vec_float =\n+    (test_vec_f_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_COMPARISON_GT_on_vec_float\");\n+  CHECK_NON_NULL (test_COMPARISON_GT_on_vec_float);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_GT_on_vec_float (zero_zero_f, zero_zero_f), false_false_f);\n+  CHECK_VECTOR_VALUE (2, test_COMPARISON_GT_on_vec_float (zero_one_f, one_zero_f), false_true_f);\n }\n \n /**********************************************************************"}]}