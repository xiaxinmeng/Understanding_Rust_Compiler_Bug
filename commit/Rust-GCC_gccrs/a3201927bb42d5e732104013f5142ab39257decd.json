{"sha": "a3201927bb42d5e732104013f5142ab39257decd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyMDE5MjdiYjQyZDVlNzMyMTA0MDEzZjUxNDJhYjM5MjU3ZGVjZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-11-18T06:02:26Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-11-18T06:02:26Z"}, "message": "re PR debug/41888 (ICE from '-O -ftree-loop-distribution -fgraphite-identity -g')\n\nPR debug/41888\nPR debug/41886\n* graphite-scop-detection.c (stmt_simple_for_scop_p): Debug stmts\nare ok.\n* graphite-sese-to-poly.c (graphite_stmt_p): Likewise.\n(try_generate_gimple_bb): Skip debug stmts when finding data refs.\n* sese.c (sese_build_liveouts_bb): Skip debug stmts.\n(sese_bad_liveouts_use): New.\n(sese_reset_debug_liveouts_bb): New.\n(sese_build_liveouts): Use it.\n(rename_variables_in_stmt): Reset debug stmts rather than creating\nnew vars for them.\n(expand_scalar_variable_stmt): Likewise.\n\nFrom-SVN: r154279", "tree": {"sha": "96d4902248d6b570e56d9410a0539f2289aba6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96d4902248d6b570e56d9410a0539f2289aba6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3201927bb42d5e732104013f5142ab39257decd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3201927bb42d5e732104013f5142ab39257decd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3201927bb42d5e732104013f5142ab39257decd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3201927bb42d5e732104013f5142ab39257decd/comments", "author": null, "committer": null, "parents": [{"sha": "d785e46f77dbfc48ce018c840b7f50183d449490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d785e46f77dbfc48ce018c840b7f50183d449490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d785e46f77dbfc48ce018c840b7f50183d449490"}], "stats": {"total": 122, "additions": 118, "deletions": 4}, "files": [{"sha": "d12b7724a3df07165cb94c9223d8e2e40d005c85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3201927bb42d5e732104013f5142ab39257decd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3201927bb42d5e732104013f5142ab39257decd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3201927bb42d5e732104013f5142ab39257decd", "patch": "@@ -1,3 +1,19 @@\n+2009-11-18  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/41888\n+\tPR debug/41886\n+\t* graphite-scop-detection.c (stmt_simple_for_scop_p): Debug stmts\n+\tare ok.\n+\t* graphite-sese-to-poly.c (graphite_stmt_p): Likewise.\n+\t(try_generate_gimple_bb): Skip debug stmts when finding data refs.\n+\t* sese.c (sese_build_liveouts_bb): Skip debug stmts.\n+\t(sese_bad_liveouts_use): New.\n+\t(sese_reset_debug_liveouts_bb): New.\n+\t(sese_build_liveouts): Use it.\n+\t(rename_variables_in_stmt): Reset debug stmts rather than creating\n+\tnew vars for them.\n+\t(expand_scalar_variable_stmt): Likewise.\n+\n 2009-11-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* df-scan.c (df_ref_create): Don't mark BB as dirty on debug insns."}, {"sha": "596a334133731be90736407904d4f560bab10a64", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3201927bb42d5e732104013f5142ab39257decd/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3201927bb42d5e732104013f5142ab39257decd/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=a3201927bb42d5e732104013f5142ab39257decd", "patch": "@@ -372,6 +372,9 @@ stmt_simple_for_scop_p (basic_block scop_entry, loop_p outermost_loop,\n       || (gimple_code (stmt) == GIMPLE_ASM))\n     return false;\n \n+  if (is_gimple_debug (stmt))\n+    return true;\n+\n   if (!stmt_has_simple_data_refs_p (outermost_loop, stmt))\n     return false;\n "}, {"sha": "2c842a054f6d4c4d55ec49e18b513f8b9bef7cd1", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3201927bb42d5e732104013f5142ab39257decd/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3201927bb42d5e732104013f5142ab39257decd/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=a3201927bb42d5e732104013f5142ab39257decd", "patch": "@@ -232,6 +232,7 @@ graphite_stmt_p (sese region, basic_block bb,\n \n       switch (gimple_code (stmt))\n         {\n+\tcase GIMPLE_DEBUG:\n           /* Control flow expressions can be ignored, as they are\n              represented in the iteration domains and will be\n              regenerated by graphite.  */\n@@ -338,7 +339,11 @@ try_generate_gimple_bb (scop_p scop, basic_block bb)\n   gimple_stmt_iterator gsi;\n \n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-    graphite_find_data_references_in_stmt (nest, gsi_stmt (gsi), &drs);\n+    {\n+      gimple stmt = gsi_stmt (gsi);\n+      if (!is_gimple_debug (stmt))\n+\tgraphite_find_data_references_in_stmt (nest, stmt, &drs);\n+    }\n \n   if (!graphite_stmt_p (SCOP_REGION (scop), bb, drs))\n     free_data_refs (drs);"}, {"sha": "2c38b24388cacd29598c0cc84c2862a9a8305ba5", "filename": "gcc/sese.c", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3201927bb42d5e732104013f5142ab39257decd/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3201927bb42d5e732104013f5142ab39257decd/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=a3201927bb42d5e732104013f5142ab39257decd", "patch": "@@ -235,8 +235,73 @@ sese_build_liveouts_bb (sese region, bitmap liveouts, basic_block bb)\n \t\t\t       PHI_ARG_DEF_FROM_EDGE (gsi_stmt (bsi), e));\n \n   for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n-    FOR_EACH_SSA_USE_OPERAND (use_p, gsi_stmt (bsi), iter, SSA_OP_ALL_USES)\n-      sese_build_liveouts_use (region, liveouts, bb, USE_FROM_PTR (use_p));\n+    {\n+      gimple stmt = gsi_stmt (bsi);\n+\n+      if (is_gimple_debug (stmt))\n+\tcontinue;\n+\n+      FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_ALL_USES)\n+\tsese_build_liveouts_use (region, liveouts, bb, USE_FROM_PTR (use_p));\n+    }\n+}\n+\n+/* For a USE in BB, return true if BB is outside REGION and it's not\n+   in the LIVEOUTS set.  */\n+\n+static bool\n+sese_bad_liveouts_use (sese region, bitmap liveouts, basic_block bb,\n+\t\t       tree use)\n+{\n+  unsigned ver;\n+  basic_block def_bb;\n+\n+  if (TREE_CODE (use) != SSA_NAME)\n+    return false;\n+\n+  ver = SSA_NAME_VERSION (use);\n+\n+  /* If it's in liveouts, the variable will get a new PHI node, and\n+     the debug use will be properly adjusted.  */\n+  if (bitmap_bit_p (liveouts, ver))\n+    return false;\n+\n+  def_bb = gimple_bb (SSA_NAME_DEF_STMT (use));\n+\n+  if (!def_bb\n+      || !bb_in_sese_p (def_bb, region)\n+      || bb_in_sese_p (bb, region))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Reset debug stmts that reference SSA_NAMES defined in REGION that\n+   are not marked as liveouts.  */\n+\n+static void\n+sese_reset_debug_liveouts_bb (sese region, bitmap liveouts, basic_block bb)\n+{\n+  gimple_stmt_iterator bsi;\n+  ssa_op_iter iter;\n+  use_operand_p use_p;\n+\n+  for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n+    {\n+      gimple stmt = gsi_stmt (bsi);\n+\n+      if (!is_gimple_debug (stmt))\n+\tcontinue;\n+\n+      FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_ALL_USES)\n+\tif (sese_bad_liveouts_use (region, liveouts, bb,\n+\t\t\t\t   USE_FROM_PTR (use_p)))\n+\t  {\n+\t    gimple_debug_bind_reset_value (stmt);\n+\t    update_stmt (stmt);\n+\t    break;\n+\t  }\n+    }\n }\n \n /* Build the LIVEOUTS of REGION: the set of variables defined inside\n@@ -249,6 +314,9 @@ sese_build_liveouts (sese region, bitmap liveouts)\n \n   FOR_EACH_BB (bb)\n     sese_build_liveouts_bb (region, liveouts, bb);\n+  if (MAY_HAVE_DEBUG_INSNS)\n+    FOR_EACH_BB (bb)\n+      sese_reset_debug_liveouts_bb (region, liveouts, bb);\n }\n \n /* Builds a new SESE region from edges ENTRY and EXIT.  */\n@@ -534,7 +602,19 @@ rename_variables_in_stmt (gimple stmt, htab_t map, gimple_stmt_iterator *insert_\n \t  || (TREE_CODE (expr) != SSA_NAME\n \t      && is_gimple_reg (use)))\n \t{\n-\t  tree var = create_tmp_var (type_use, \"var\");\n+\t  tree var;\n+\n+\t  if (is_gimple_debug (stmt))\n+\t    {\n+\t      if (gimple_debug_bind_p (stmt))\n+\t\tgimple_debug_bind_reset_value (stmt);\n+\t      else\n+\t\tgcc_unreachable ();\n+\n+\t      break;\n+\t    }\n+\n+\t  var = create_tmp_var (type_use, \"var\");\n \n \t  if (type_use != type_expr)\n \t    expr = fold_convert (type_use, expr);\n@@ -827,6 +907,16 @@ expand_scalar_variables_stmt (gimple stmt, basic_block bb, sese region,\n       if (use_expr == use)\n \tcontinue;\n \n+      if (is_gimple_debug (stmt))\n+\t{\n+\t  if (gimple_debug_bind_p (stmt))\n+\t    gimple_debug_bind_reset_value (stmt);\n+\t  else\n+\t    gcc_unreachable ();\n+\n+\t  break;\n+\t}\n+\n       if (TREE_CODE (use_expr) != SSA_NAME)\n \t{\n \t  tree var = create_tmp_var (type, \"var\");"}]}