{"sha": "929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "node_id": "C_kwDOANBUbNoAKDkyOWM2YjhjZDEyYTNiZDMzOGE0YzI1MDI3NGE5ZDg2ZGE1YjJlYTc", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-02T23:00:44Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-03T00:25:45Z"}, "message": "d: Allow vectors to be compared for identity [PR108946]\n\nVector equality and comparisons are now accepted by the language\nimplementation, but identity wasn't.  Implement it as an extra integer\ncomparison of the bit-casted bitmask.\n\n\tPR d/108946\n\ngcc/d/ChangeLog:\n\n\t* d-target.cc (Target::isVectorOpSupported): Allow identity ops.\n\t* expr.cc (ExprVisitor::visit (IdentityExp *)): Handle vector identity\n\tcomparisons.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/simd2a.d: Update test.\n\t* gdc.dg/simd2b.d: Likewise.\n\t* gdc.dg/simd2c.d: Likewise.\n\t* gdc.dg/simd2d.d: Likewise.\n\t* gdc.dg/simd2e.d: Likewise.\n\t* gdc.dg/simd2f.d: Likewise.\n\t* gdc.dg/simd2g.d: Likewise.\n\t* gdc.dg/simd2h.d: Likewise.\n\t* gdc.dg/simd2i.d: Likewise.\n\t* gdc.dg/simd2j.d: Likewise.", "tree": {"sha": "44cc9a476333506c4dbecff672f3b91446af7727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44cc9a476333506c4dbecff672f3b91446af7727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1cea3e22f58bbddde017f8a92e59bae8892339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1cea3e22f58bbddde017f8a92e59bae8892339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1cea3e22f58bbddde017f8a92e59bae8892339"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "4c7a212703e52794460908a02197d39af7835fcb", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -323,11 +323,6 @@ Target::isVectorOpSupported (Type *type, EXP op, Type *)\n       /* Logical operators must have a result type of bool.  */\n       return false;\n \n-    case EXP::identity:\n-    case EXP::notIdentity:\n-      /* Comparison operators must have a result type of bool.  */\n-      return false;\n-\n     default:\n       break;\n     }"}, {"sha": "4311edcc2d6039d0d7684913bc81b43ea2852328", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -313,6 +313,31 @@ class ExprVisitor : public Visitor\n \n \tthis->result_ = build_struct_comparison (code, ts->sym, t1, t2);\n       }\n+    else if (tb1->ty == TY::Tvector && tb2->ty == TY::Tvector)\n+      {\n+\t/* For vectors, identity is defined as all values being equal.  */\n+\ttree t1 = build_expr (e->e1);\n+\ttree t2 = build_expr (e->e2);\n+\ttree mask = build_boolop (code, t1, t2);\n+\n+\t/* To reinterpret the vector comparison as a boolean expression, bitcast\n+\t   the bitmask result and generate an additional integer comparison.  */\n+\topt_scalar_int_mode mode =\n+\t  int_mode_for_mode (TYPE_MODE (TREE_TYPE (mask)));\n+\tgcc_assert (mode.exists ());\n+\n+\ttree type = lang_hooks.types.type_for_mode (mode.require (), 1);\n+\tif (type == NULL_TREE)\n+\t  type = make_unsigned_type (GET_MODE_BITSIZE (mode.require ()));\n+\n+\t/* In `t1 is t2', all mask bits must be set for vectors to be equal.\n+\t   Otherwise any bit set is enough for vectors to be not-equal.  */\n+\ttree mask_eq = (code == EQ_EXPR)\n+\t  ? build_all_ones_cst (type) : build_zero_cst (type);\n+\n+\tthis->result_ = build_boolop (code, mask_eq,\n+\t\t\t\t      build_vconvert (type, mask));\n+      }\n     else\n       {\n \t/* For operands of other types, identity is defined as being the"}, {"sha": "d47175fd38b38414b945f529937b5dae05ba8a77", "filename": "gcc/testsuite/gdc.dg/simd2a.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2a()\n {\n     byte16 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2a()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "a1b2a10caaf1a57466d166d35a8769338023dbe7", "filename": "gcc/testsuite/gdc.dg/simd2b.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2b()\n {\n     ubyte16 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2b()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "ca8d1000306466ad9051d2439a8262bb6c42413c", "filename": "gcc/testsuite/gdc.dg/simd2c.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2c()\n {\n     short8 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2c()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "e928d4be6015d67de315b546216d313ce355417a", "filename": "gcc/testsuite/gdc.dg/simd2d.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2d()\n {\n     ushort8 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2d()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "a611ea770c9f41203fc5a8db2ad2b96c16010669", "filename": "gcc/testsuite/gdc.dg/simd2e.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2e()\n {\n     int4 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2e()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "1e9d6c264a861dcd2cffffae481fcf8c72898779", "filename": "gcc/testsuite/gdc.dg/simd2f.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2f()\n {\n     uint4 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2f()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "7183304b22362b0911bd95751f90c9c27db77333", "filename": "gcc/testsuite/gdc.dg/simd2g.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2g()\n {\n     long2 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2g()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "8c55e0117afcf1b78f631a460aec0c26d3a27328", "filename": "gcc/testsuite/gdc.dg/simd2h.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2h()\n {\n     ulong2 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2h()\n     v1 = v2 ^ v3;\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "d9ff6889ea237dd7161cb7803f1974279a416873", "filename": "gcc/testsuite/gdc.dg/simd2i.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2i()\n {\n     float4 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2i()\n     static assert(!__traits(compiles, v1 ^ v2));\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}, {"sha": "a84120f3cce2f9b436b8980fb92f4c72077abbe5", "filename": "gcc/testsuite/gdc.dg/simd2j.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d?ref=929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "patch": "@@ -5,6 +5,7 @@ import core.simd;\n void test2j()\n {\n     double2 v1, v2 = 1, v3 = 1;\n+    bool b1;\n     v1 = v2;\n     v1 = v2 + v3;\n     v1 = v2 - v3;\n@@ -16,8 +17,8 @@ void test2j()\n     static assert(!__traits(compiles, v1 ^ v2));\n     static assert(!__traits(compiles, v1 ~ v2));\n     static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n+    b1 = v1 is v2;\n+    b1 = v1 !is v2;\n     static assert( __traits(compiles, v1 == v2));\n     static assert( __traits(compiles, v1 != v2));\n     static assert( __traits(compiles, v1 < v2));"}]}