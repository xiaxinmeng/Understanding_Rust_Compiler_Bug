{"sha": "e4746336dc92c73ec67159365f86b56b216417aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3NDYzMzZkYzkyYzczZWM2NzE1OTM2NWY4NmI1NmIyMTY0MTdhYQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-19T18:40:24Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-19T18:40:24Z"}, "message": "re PR target/46436 (m68hc11-elf --enable-werror-always build fails)\n\n\tPR target/46436\n\t* config/m68hc11/m68hc11.c (m68hc11_gen_highpart): Split shift count\n\tto accomodate 32 bit HOST_WIDE_INT.\n\t(m68hc11_emit_logical): Remove unused variable insn.\n\t(m68hc11_check_z_replacement) <CLOBBER>: Set this_insn_uses_ix and\n\tthis_insn_uses_iy before use.\n\nFrom-SVN: r166952", "tree": {"sha": "d8ffe222a8d2e870c483c1831448be1c4dc9b9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8ffe222a8d2e870c483c1831448be1c4dc9b9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4746336dc92c73ec67159365f86b56b216417aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4746336dc92c73ec67159365f86b56b216417aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4746336dc92c73ec67159365f86b56b216417aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4746336dc92c73ec67159365f86b56b216417aa/comments", "author": null, "committer": null, "parents": [{"sha": "5386338c2ce9a7f68c270166b4ac5bd2ffe5af05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5386338c2ce9a7f68c270166b4ac5bd2ffe5af05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5386338c2ce9a7f68c270166b4ac5bd2ffe5af05"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "0aaa0527db10da5099976a351dc51ff272ea21af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4746336dc92c73ec67159365f86b56b216417aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4746336dc92c73ec67159365f86b56b216417aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4746336dc92c73ec67159365f86b56b216417aa", "patch": "@@ -1,3 +1,12 @@\n+2010-11-19  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/46436\n+\t* config/m68hc11/m68hc11.c (m68hc11_gen_highpart): Split shift count\n+\tto accomodate 32 bit HOST_WIDE_INT.\n+\t(m68hc11_emit_logical): Remove unused variable insn.\n+\t(m68hc11_check_z_replacement) <CLOBBER>: Set this_insn_uses_ix and\n+\tthis_insn_uses_iy before use.\n+\n 2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/46547"}, {"sha": "08cb0390b2193d544999e4466d12d037e2e6812b", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4746336dc92c73ec67159365f86b56b216417aa/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4746336dc92c73ec67159365f86b56b216417aa/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=e4746336dc92c73ec67159365f86b56b216417aa", "patch": "@@ -1999,7 +1999,7 @@ m68hc11_gen_highpart (enum machine_mode mode, rtx x)\n \t}\n       else if (mode == SImode)\n        {\n-         return gen_int_mode (val >> 32, SImode);\n+         return gen_int_mode ((val >> 16) >> 16, SImode);\n        }\n     }\n   if (mode == QImode && D_REG_P (x))\n@@ -2967,24 +2967,20 @@ m68hc11_emit_logical (enum machine_mode mode, enum rtx_code code, rtx *operands)\n     }\n   else if (operands[1] != 0 && operands[2] != 0)\n     {\n-      rtx insn;\n-\n       if (!H_REG_P (operands[0]) && operands[3])\n \t{\n \t  emit_move_insn (operands[3], operands[1]);\n \t  emit_insn (gen_rtx_SET (mode,\n \t\t\t\t  operands[3],\n \t\t\t\t  gen_rtx_fmt_ee (code, mode,\n \t\t\t\t\t\t  operands[3], operands[2])));\n-\t  insn = emit_move_insn (operands[0], operands[3]);\n+\t  emit_move_insn (operands[0], operands[3]);\n \t}\n       else\n \t{\n-\t  insn = emit_insn (gen_rtx_SET (mode,\n-\t\t\t\t\t operands[0],\n-\t\t\t\t\t gen_rtx_fmt_ee (code, mode,\n-\t\t\t\t\t\t\t operands[0],\n-\t\t\t\t\t\t\t operands[2])));\n+\t  emit_insn (gen_rtx_SET (mode, operands[0],\n+\t\t\t\t  gen_rtx_fmt_ee (code, mode,\n+\t\t\t\t\t\t  operands[0], operands[2])));\n \t}\n     }\n \n@@ -4657,6 +4653,10 @@ m68hc11_check_z_replacement (rtx insn, struct replace_info *info)\n     }\n   if (GET_CODE (body) == CLOBBER)\n     {\n+      rtx dst = XEXP (body, 0);\n+\n+      this_insn_uses_ix = reg_mentioned_p (ix_reg, dst);\n+      this_insn_uses_iy = reg_mentioned_p (iy_reg, dst);\n \n       /* IX and IY are used at the same time, we have to restore\n          the value of the scratch register before this insn.  */"}]}