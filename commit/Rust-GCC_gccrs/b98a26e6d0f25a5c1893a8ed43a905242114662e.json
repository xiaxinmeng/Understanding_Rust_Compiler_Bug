{"sha": "b98a26e6d0f25a5c1893a8ed43a905242114662e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk4YTI2ZTZkMGYyNWE1YzE4OTNhOGVkNDNhOTA1MjQyMTE0NjYyZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-09-04T18:56:39Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-09-04T18:56:39Z"}, "message": "guality.h: Include stdint.h.\n\n* gcc.dg/guality/guality.h: Include stdint.h.  Drop unnecessary\nunistd.h, sys/types.h and sys/wait.h.\n(gualchk_t): New.\n(GUALCVT): New.\n(GUALCHKXPR, GUALCHKVAL, GUALCHKFLA): Use it.\n(GUALITY_GDB_REDIRECT): New.\n(GUALITY_GDB_ARGS): Use it.\n\nFrom-SVN: r151434", "tree": {"sha": "818c1a1db64f426ab8d36e26bf0a9b4bc474631f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/818c1a1db64f426ab8d36e26bf0a9b4bc474631f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b98a26e6d0f25a5c1893a8ed43a905242114662e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98a26e6d0f25a5c1893a8ed43a905242114662e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98a26e6d0f25a5c1893a8ed43a905242114662e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98a26e6d0f25a5c1893a8ed43a905242114662e/comments", "author": null, "committer": null, "parents": [{"sha": "6751b6f658de1f96923b5f671cf8f1bcedf90c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6751b6f658de1f96923b5f671cf8f1bcedf90c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6751b6f658de1f96923b5f671cf8f1bcedf90c7d"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "ee774b13d30b917000d200cddb1f5b5c96372965", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98a26e6d0f25a5c1893a8ed43a905242114662e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98a26e6d0f25a5c1893a8ed43a905242114662e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b98a26e6d0f25a5c1893a8ed43a905242114662e", "patch": "@@ -1,3 +1,13 @@\n+2009-09-04  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.dg/guality/guality.h: Include stdint.h.  Drop unnecessary\n+\tunistd.h, sys/types.h and sys/wait.h.\n+\t(gualchk_t): New.\n+\t(GUALCVT): New.\n+\t(GUALCHKXPR, GUALCHKVAL, GUALCHKFLA): Use it.\n+\t(GUALITY_GDB_REDIRECT): New.\n+\t(GUALITY_GDB_ARGS): Use it.\n+\n 2009-09-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41257"}, {"sha": "eec0ab6bedf78bc9abf70adfd67a6d2faabfb9ed", "filename": "gcc/testsuite/gcc.dg/guality/guality.h", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98a26e6d0f25a5c1893a8ed43a905242114662e/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98a26e6d0f25a5c1893a8ed43a905242114662e/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h?ref=b98a26e6d0f25a5c1893a8ed43a905242114662e", "patch": "@@ -21,9 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n-#include <unistd.h>\n-#include <sys/types.h>\n-#include <sys/wait.h>\n+#include <stdint.h>\n \n /* This is a first cut at checking that debug information matches\n    run-time.  The idea is to annotate programs with GUALCHK* macros\n@@ -56,8 +54,20 @@ along with GCC; see the file COPYING3.  If not see\n    so that __FILE__ and __LINE__ will be usable to identify them.\n */\n \n+/* This is the type we use to pass values to guality_check.  */\n+\n+typedef intmax_t gualchk_t;\n+\n+/* Convert a pointer or integral type to the widest integral type,\n+   as expected by guality_check.  */\n+\n+#define GUALCVT(val)\t\t\t\t\t\t\\\n+  ((gualchk_t)__builtin_choose_expr\t\t\t\t\\\n+   (__builtin_types_compatible_p (__typeof (val), gualchk_t),\t\\\n+    (val), (intptr_t)(val)))\n+\n /* Attach a debugger to the current process and verify that the string\n-   EXPR, evaluated by the debugger, yields the long long number VAL.\n+   EXPR, evaluated by the debugger, yields the gualchk_t number VAL.\n    If the debugger cannot compute the expression, say because the\n    variable is unavailable, this will count as an error, unless unkok\n    is nonzero.  */\n@@ -73,13 +83,13 @@ along with GCC; see the file COPYING3.  If not see\n    guality_check, although not necessarily after the call.  */\n \n #define GUALCHKXPR(expr) \\\n-  GUALCHKXPRVAL (#expr, (long long)(expr), 1)\n+  GUALCHKXPRVAL (#expr, GUALCVT (expr), 1)\n \n /* Same as GUALCHKXPR, but issue an error if the variable is optimized\n    away.  */\n \n #define GUALCHKVAL(expr) \\\n-  GUALCHKXPRVAL (#expr, (long long)(expr), 0)\n+  GUALCHKXPRVAL (#expr, GUALCVT (expr), 0)\n \n /* Check that a debugger knows that EXPR evaluates to the run-time\n    value of EXPR.  Unknown values are marked as errors, because the\n@@ -91,7 +101,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GUALCHKFLA(expr) do {\t\t\t\t\t\\\n     __typeof(expr) volatile __preserve_after;\t\t\t\\\n     __typeof(expr) __preserve_before = (expr);\t\t\t\\\n-    GUALCHKXPRVAL (#expr, (long long)(__preserve_before), 0);\t\\\n+    GUALCHKXPRVAL (#expr, GUALCVT (__preserve_before), 0);\t\\\n     __preserve_after = __preserve_before;\t\t\t\\\n     asm (\"\" : : \"m\" (__preserve_after));\t\t\t\\\n   } while (0)\n@@ -119,7 +129,14 @@ along with GCC; see the file COPYING3.  If not see\n \n static const char *guality_gdb_command;\n #define GUALITY_GDB_DEFAULT \"gdb\"\n-#define GUALITY_GDB_ARGS \" -nx -nw --quiet > /dev/null 2>&1\"\n+#if defined(__unix)\n+# define GUALITY_GDB_REDIRECT \" > /dev/null 2>&1\"\n+#elif defined (_WIN32) || defined (MSDOS)\n+# define GUALITY_GDB_REDIRECT \" > nul\"\n+#else\n+# define GUALITY_GDB_REDRECT \"\"\n+#endif\n+#define GUALITY_GDB_ARGS \" -nx -nw --quiet\" GUALITY_GDB_REDIRECT\n \n /* Kinds of results communicated as exit status from child process\n    that runs gdb to the parent process that's being monitored.  */\n@@ -155,7 +172,7 @@ int volatile guality_attached;\n extern int guality_main (int argc, char *argv[]);\n \n static void __attribute__((noinline))\n-guality_check (const char *name, long long value, int unknown_ok);\n+guality_check (const char *name, gualchk_t value, int unknown_ok);\n \n /* Set things up, run guality_main, then print a summary and quit.  */\n \n@@ -228,15 +245,15 @@ continue\\n\\\n    have an UNRESOLVED.  Otherwise, it's a FAIL.  */\n \n static void __attribute__((noinline))\n-guality_check (const char *name, long long value, int unknown_ok)\n+guality_check (const char *name, gualchk_t value, int unknown_ok)\n {\n   int result;\n \n   if (guality_skip)\n     return;\n \n   {\n-    volatile long long xvalue = -1;\n+    volatile gualchk_t xvalue = -1;\n     volatile int unavailable = 0;\n     if (name)\n       {"}]}