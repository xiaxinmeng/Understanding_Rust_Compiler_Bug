{"sha": "f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkZGU4YWY2ZjRiZjhkMTZmY2IxMjU0NGNhZWYwYWFkM2RhNTZmMg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-15T13:52:33Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-15T13:52:33Z"}, "message": "re PR fortran/43207 ([OOP] invalid (pointer) assignment to and from abstract non-polymorphic expressions)\n\n2010-05-15  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43207\n\tPR fortran/43969\n\t* gfortran.h (gfc_class_null_initializer): New prototype.\n\t* expr.c (gfc_class_null_initializer): New function to build a NULL\n\tinitializer for CLASS pointers.\n\t* symbol.c (gfc_build_class_symbol): Modify internal naming of class\n\tcontainers. Remove default NULL initialization of $data component.\n\t* trans.c (gfc_allocate_array_with_status): Fix wording of an error \n\tmessage.\n\t* trans-expr.c (gfc_conv_initializer,gfc_trans_subcomponent_assign):\n\tUse new function 'gfc_class_null_initializer'.\n\t* trans-intrinsic.c (gfc_conv_allocated): Handle allocatable scalar\n\tclass variables.\n\n\n2010-05-15  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43207\n\tPR fortran/43969\n\t* gfortran.dg/class_18.f03: New.\n\t* gfortran.dg/class_19.f03: New.\n\nFrom-SVN: r159431", "tree": {"sha": "a70032d51f8a223474b6f5114ee467e48b7758f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a70032d51f8a223474b6f5114ee467e48b7758f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46c3001944a778ddd079de47697c092bfd82419a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c3001944a778ddd079de47697c092bfd82419a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c3001944a778ddd079de47697c092bfd82419a"}], "stats": {"total": 136, "additions": 125, "deletions": 11}, "files": [{"sha": "dd6d23fcd7db5cdb6475cf11b9596d31243625b0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -1,3 +1,19 @@\n+2010-05-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43207\n+\tPR fortran/43969\n+\t* gfortran.h (gfc_class_null_initializer): New prototype.\n+\t* expr.c (gfc_class_null_initializer): New function to build a NULL\n+\tinitializer for CLASS pointers.\n+\t* symbol.c (gfc_build_class_symbol): Modify internal naming of class\n+\tcontainers. Remove default NULL initialization of $data component.\n+\t* trans.c (gfc_allocate_array_with_status): Fix wording of an error \n+\tmessage.\n+\t* trans-expr.c (gfc_conv_initializer,gfc_trans_subcomponent_assign):\n+\tUse new function 'gfc_class_null_initializer'.\n+\t* trans-intrinsic.c (gfc_conv_allocated): Handle allocatable scalar\n+\tclass variables.\n+\n 2010-05-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/44135"}, {"sha": "382d1fe645245a0171f00140aec952203a2ed881", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -3628,6 +3628,32 @@ gfc_default_initializer (gfc_typespec *ts)\n }\n \n \n+/* Build a NULL initializer for CLASS pointers,\n+   initializing the $data and $vptr components to zero.  */\n+\n+gfc_expr *\n+gfc_class_null_initializer (gfc_typespec *ts)\n+{\n+  gfc_expr *init;\n+  gfc_component *comp;\n+  \n+  init = gfc_get_structure_constructor_expr (ts->type, ts->kind,\n+\t\t\t\t\t     &ts->u.derived->declared_at);\n+  init->ts = *ts;\n+  \n+  for (comp = ts->u.derived->components; comp; comp = comp->next)\n+    {\n+      gfc_constructor *ctor = gfc_constructor_get();\n+      ctor->expr = gfc_get_expr ();\n+      ctor->expr->expr_type = EXPR_NULL;\n+      ctor->expr->ts = comp->ts;\n+      gfc_constructor_append (&init->value.constructor, ctor);\n+    }\n+\n+  return init;\n+}\n+\n+\n /* Given a symbol, create an expression node with that symbol as a\n    variable. If the symbol is array valued, setup a reference of the\n    whole array.  */"}, {"sha": "96acaa4574ed885ebc671d4d31432124f0d15155", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -2630,6 +2630,7 @@ gfc_try gfc_check_pointer_assign (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_assign_symbol (gfc_symbol *, gfc_expr *);\n \n gfc_expr *gfc_default_initializer (gfc_typespec *);\n+gfc_expr *gfc_class_null_initializer (gfc_typespec *);\n gfc_expr *gfc_get_variable_expr (gfc_symtree *);\n \n gfc_array_spec *gfc_get_full_arrayspec_from_expr (gfc_expr *expr);"}, {"sha": "ceb45bfa6ec7f6f116b7ea760711ff20797ed3e1", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -4717,15 +4717,15 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \n   /* Determine the name of the encapsulating type.  */\n   if ((*as) && (*as)->rank && attr->allocatable)\n-    sprintf (name, \".class.%s.%d.a\", ts->u.derived->name, (*as)->rank);\n+    sprintf (name, \"class$%s_%d_a\", ts->u.derived->name, (*as)->rank);\n   else if ((*as) && (*as)->rank)\n-    sprintf (name, \".class.%s.%d\", ts->u.derived->name, (*as)->rank);\n+    sprintf (name, \"class$%s_%d\", ts->u.derived->name, (*as)->rank);\n   else if (attr->pointer)\n-    sprintf (name, \".class.%s.p\", ts->u.derived->name);\n+    sprintf (name, \"class$%s_p\", ts->u.derived->name);\n   else if (attr->allocatable)\n-    sprintf (name, \".class.%s.a\", ts->u.derived->name);\n+    sprintf (name, \"class$%s_a\", ts->u.derived->name);\n   else\n-    sprintf (name, \".class.%s\", ts->u.derived->name);\n+    sprintf (name, \"class$%s\", ts->u.derived->name);\n \n   gfc_find_symbol (name, ts->u.derived->ns, 0, &fclass);\n   if (fclass == NULL)\n@@ -4759,7 +4759,7 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n       c->attr.codimension = attr->codimension;\n       c->attr.abstract = ts->u.derived->attr.abstract;\n       c->as = (*as);\n-      c->initializer = gfc_get_null_expr (NULL);\n+      c->initializer = NULL;\n \n       /* Add component '$vptr'.  */\n       if (gfc_add_component (fclass, \"$vptr\", &c) == FAILURE)"}, {"sha": "4d48c05b7aa5e270b33555ee38fc7f49bbc50f5e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -3894,7 +3894,10 @@ gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n \tcase BT_DERIVED:\n \tcase BT_CLASS:\n \t  gfc_init_se (&se, NULL);\n-\t  gfc_conv_structure (&se, expr, 1);\n+\t  if (ts->type == BT_CLASS && expr->expr_type == EXPR_NULL)\n+\t    gfc_conv_structure (&se, gfc_class_null_initializer(ts), 1);\n+\t  else\n+\t    gfc_conv_structure (&se, expr, 1);\n \t  return se.expr;\n \n \tcase BT_CHARACTER:\n@@ -4202,7 +4205,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n     {\n       /* NULL initialization for CLASS components.  */\n       tmp = gfc_trans_structure_assign (dest,\n-\t\t\t\t\tgfc_default_initializer (&cm->ts));\n+\t\t\t\t\tgfc_class_null_initializer (&cm->ts));\n       gfc_add_expr_to_block (&block, tmp);\n     }\n   else if (cm->attr.dimension)"}, {"sha": "257b6842d286dc0881f3ada8c1b6b01ebe6925d0", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -4529,6 +4529,8 @@ gfc_conv_allocated (gfc_se *se, gfc_expr *expr)\n     {\n       /* Allocatable scalar.  */\n       arg1se.want_pointer = 1;\n+      if (arg1->expr->ts.type == BT_CLASS)\n+\tgfc_add_component_ref (arg1->expr, \"$data\");\n       gfc_conv_expr (&arg1se, arg1->expr);\n       tmp = arg1se.expr;\n     }"}, {"sha": "3a25bcc02d9bde743c466037301b6f0d9429cdb5", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -704,7 +704,7 @@ gfc_allocate_with_status (stmtblock_t * block, tree size, tree status)\n \t  return mem;\n \t}\n \telse\n-\t  runtime_error (\"Attempting to allocate already allocated array\");\n+\t  runtime_error (\"Attempting to allocate already allocated variable\");\n       }\n     }\n     \n@@ -743,13 +743,13 @@ gfc_allocate_array_with_status (stmtblock_t * block, tree mem, tree size,\n \n       error = gfc_trans_runtime_error (true, &expr->where,\n \t\t\t\t       \"Attempting to allocate already\"\n-\t\t\t\t       \" allocated array '%s'\",\n+\t\t\t\t       \" allocated variable '%s'\",\n \t\t\t\t       varname);\n     }\n   else\n     error = gfc_trans_runtime_error (true, NULL,\n \t\t\t\t     \"Attempting to allocate already allocated\"\n-\t\t\t\t     \"array\");\n+\t\t\t\t     \"variable\");\n \n   if (status != NULL_TREE && !integer_zerop (status))\n     {"}, {"sha": "1e3d9c7b5cbf264308e568a0032703a1e2323a82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -1,3 +1,10 @@\n+2010-05-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43207\n+\tPR fortran/43969\n+\t* gfortran.dg/class_18.f03: New.\n+\t* gfortran.dg/class_19.f03: New.\n+\n 2010-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/44112"}, {"sha": "576f931f96909368772f5c0b517fc4c515a7f221", "filename": "gcc/testsuite/gfortran.dg/class_18.f03", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_18.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_18.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_18.f03?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+!\n+! PR 43207: [OOP] ICE for class pointer => null() initialization\n+!\n+! Original test case by Tobias Burnus <burnus@gcc.gnu.org>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+  implicit none\n+  type :: parent\n+  end type\n+  type(parent), target :: t\n+  class(parent), pointer :: cp => null()\n+\n+  if (associated(cp)) call abort()\n+  cp => t\n+  if (.not. associated(cp)) call abort()\n+\n+end"}, {"sha": "ffc3de3b1e4e0dd29ee3ed095d5020790fe29f3e", "filename": "gcc/testsuite/gfortran.dg/class_19.f03", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dde8af6f4bf8d16fcb12544caef0aad3da56f2/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03?ref=f8dde8af6f4bf8d16fcb12544caef0aad3da56f2", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! PR 43969: [OOP] ALLOCATED() with polymorphic variables\n+!\n+! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n+\n+\n+module foo_mod\n+  type foo_inner\n+    integer, allocatable :: v(:)\n+  end type foo_inner\n+  type foo_outer\n+    class(foo_inner), allocatable :: int\n+  end type foo_outer\n+contains\n+subroutine foo_checkit()\n+  implicit none\n+  type(foo_outer)    :: try\n+  type(foo_outer),allocatable :: try2\n+  class(foo_outer), allocatable :: try3\n+  \n+  if (allocated(try%int)) call abort()\n+  allocate(foo_outer :: try3)\n+  if (allocated(try3%int)) call abort()\n+  allocate(try2)\n+  if (allocated(try2%int)) call abort()\n+ \n+end subroutine foo_checkit\n+end module foo_mod\n+\n+\n+program main\n+\n+  use foo_mod\n+  implicit none\n+  \n+  call foo_checkit()\n+\n+end program main\n+\n+! { dg-final { cleanup-modules \"foo_mod\" } }"}]}