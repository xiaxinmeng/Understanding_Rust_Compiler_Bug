{"sha": "806b956fed0026c5431340ee15e770dd513684a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2Yjk1NmZlZDAwMjZjNTQzMTM0MGVlMTVlNzcwZGQ1MTM2ODRhOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T14:30:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T14:30:39Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r146726", "tree": {"sha": "b67d4edfba3739f5b769dd091d525df2fac4d725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b67d4edfba3739f5b769dd091d525df2fac4d725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806b956fed0026c5431340ee15e770dd513684a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806b956fed0026c5431340ee15e770dd513684a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806b956fed0026c5431340ee15e770dd513684a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806b956fed0026c5431340ee15e770dd513684a8/comments", "author": null, "committer": null, "parents": [{"sha": "757240b39c1728f6ad8837e1f3cc69dd43cdb460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757240b39c1728f6ad8837e1f3cc69dd43cdb460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757240b39c1728f6ad8837e1f3cc69dd43cdb460"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "8563938ebe8e46c693a3d59b679f8cefc9c02f14", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806b956fed0026c5431340ee15e770dd513684a8/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806b956fed0026c5431340ee15e770dd513684a8/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=806b956fed0026c5431340ee15e770dd513684a8", "patch": "@@ -1542,10 +1542,11 @@ package body Sem is\n                null;  --  Specs are OK\n \n             when N_Package_Body | N_Subprogram_Body =>\n+\n                --  A body must be the main unit\n \n                pragma Assert (Acts_As_Spec (CU)\n-                              or else CU = Cunit (Main_Unit));\n+                               or else CU = Cunit (Main_Unit));\n                null;\n \n             --  All other cases cannot happen\n@@ -1570,8 +1571,8 @@ package body Sem is\n             pragma Assert (Item = Unit (CU));\n \n             declare\n-               Unit_Num     : constant Unit_Number_Type :=\n-                                Get_Cunit_Unit_Number (CU);\n+               Unit_Num : constant Unit_Number_Type :=\n+                            Get_Cunit_Unit_Number (CU);\n \n                procedure Assert_Done (Withed_Unit : Node_Id);\n                --  Assert Withed_Unit is already Done, unless it's a body. It\n@@ -1581,21 +1582,27 @@ package body Sem is\n                --  spec is also created). With clauses pointing to the\n                --  instantiation end up pointing to the instance body.\n \n+               -----------------\n+               -- Assert_Done --\n+               -----------------\n+\n                procedure Assert_Done (Withed_Unit : Node_Id) is\n                begin\n                   if not Done (Get_Cunit_Unit_Number (Withed_Unit)) then\n                      if not Nkind_In\n-                       (Unit (Withed_Unit), N_Package_Body, N_Subprogram_Body)\n+                              (Unit (Withed_Unit), N_Package_Body,\n+                                                   N_Subprogram_Body)\n                      then\n-\n                         Write_Unit_Name\n                           (Unit_Name\n-                           (Get_Cunit_Unit_Number\n-                            (Withed_Unit)));\n+                            (Get_Cunit_Unit_Number\n+                             (Withed_Unit)));\n                         Write_Str (\" not yet walked!\");\n+\n                         if Get_Cunit_Unit_Number (Withed_Unit) = Unit_Num then\n                            Write_Str (\" (self-ref)\");\n                         end if;\n+\n                         Write_Eol;\n \n                         pragma Assert (False);\n@@ -1604,7 +1611,8 @@ package body Sem is\n                end Assert_Done;\n \n                procedure Assert_Withed_Units_Done is\n-                  new Walk_Withs (Assert_Done);\n+                 new Walk_Withs (Assert_Done);\n+\n             begin\n                if Debug_Unit_Walk then\n                   Write_Unit_Info (Unit_Num, Item);\n@@ -1648,12 +1656,19 @@ package body Sem is\n          procedure Do_Withed_Unit (Withed_Unit : Node_Id);\n          --  Pass the buck to Do_Unit_And_Dependents\n \n+         --------------------\n+         -- Do_Withed_Unit --\n+         --------------------\n+\n          procedure Do_Withed_Unit (Withed_Unit : Node_Id) is\n          begin\n             Do_Unit_And_Dependents (Withed_Unit, Unit (Withed_Unit));\n          end Do_Withed_Unit;\n \n          procedure Do_Withed_Units is new Walk_Withs (Do_Withed_Unit);\n+\n+      --  Start of processing for Do_Unit_And_Dependents\n+\n       begin\n          if Seen (Unit_Num) then\n             return;\n@@ -1670,7 +1685,6 @@ package body Sem is\n                if Spec_Unit = CU then  --  ???Why needed?\n                   pragma Assert (Acts_As_Spec (CU));\n                   null;\n-\n                else\n                   Do_Unit_And_Dependents (Spec_Unit, Unit (Spec_Unit));\n                end if;\n@@ -1715,7 +1729,7 @@ package body Sem is\n \n       --  Local Declarations\n \n-      Cur : Elmt_Id := First_Elmt (Comp_Unit_List);\n+      Cur : Elmt_Id;\n \n    --  Start of processing for Walk_Library_Items\n \n@@ -1729,6 +1743,7 @@ package body Sem is\n \n       Do_Action (Empty, Standard_Package_Node);\n \n+      Cur := First_Elmt (Comp_Unit_List);\n       while Present (Cur) loop\n          declare\n             CU : constant Node_Id := Node (Cur);\n@@ -1820,32 +1835,34 @@ package body Sem is\n       pragma Assert (Nkind (Unit (CU)) /= N_Subunit);\n \n       procedure Walk_Immediate is new Walk_Withs_Immediate (Action);\n+\n    begin\n       --  First walk the withs immediately on the library item\n \n       Walk_Immediate (CU, Include_Limited);\n \n-      --  For a body, we must also check for any subunits which belong to\n-      --  it and which have context clauses of their own, since these\n-      --  with'ed units are part of its own dependencies.\n+      --  For a body, we must also check for any subunits which belong to it\n+      --  and which have context clauses of their own, since these with'ed\n+      --  units are part of its own dependencies.\n \n       if Nkind (Unit (CU)) in N_Unit_Body then\n          for S in Main_Unit .. Last_Unit loop\n \n-            --  We are only interested in subunits.  For preproc. data and\n-            --  def. files, Cunit is Empty, so we need to test that first.\n+            --  We are only interested in subunits. For preproc. data and def.\n+            --  files, Cunit is Empty, so we need to test that first.\n \n             if Cunit (S) /= Empty\n               and then Nkind (Unit (Cunit (S))) = N_Subunit\n             then\n                declare\n                   Pnode : Node_Id;\n+\n                begin\n                   Pnode := Library_Unit (Cunit (S));\n \n-                  --  In -gnatc mode, the errors in the subunits will not\n-                  --  have been recorded, but the analysis of the subunit\n-                  --  may have failed, so just quit.\n+                  --  In -gnatc mode, the errors in the subunits will not have\n+                  --  been recorded, but the analysis of the subunit may have\n+                  --  failed, so just quit.\n \n                   if No (Pnode) then\n                      exit;\n@@ -1876,8 +1893,10 @@ package body Sem is\n    procedure Walk_Withs_Immediate (CU : Node_Id; Include_Limited : Boolean) is\n       pragma Assert (Nkind (CU) = N_Compilation_Unit);\n \n-      Context_Item : Node_Id := First (Context_Items (CU));\n+      Context_Item : Node_Id;\n+\n    begin\n+      Context_Item := First (Context_Items (CU));\n       while Present (Context_Item) loop\n          if Nkind (Context_Item) = N_With_Clause\n            and then (Include_Limited\n@@ -1926,11 +1945,13 @@ package body Sem is\n       end if;\n \n       declare\n-         Context_Item : Node_Id := First (Context_Items (Cunit (Unit_Num)));\n+         Context_Item : Node_Id;\n+\n       begin\n+         Context_Item := First (Context_Items (Cunit (Unit_Num)));\n          while Present (Context_Item)\n            and then (Nkind (Context_Item) /= N_With_Clause\n-                     or else Limited_Present (Context_Item))\n+                      or else Limited_Present (Context_Item))\n          loop\n             Context_Item := Next (Context_Item);\n          end loop;\n@@ -1947,10 +1968,12 @@ package body Sem is\n                   pragma Assert (Present (Library_Unit (Context_Item)));\n                   Write_Unit_Name\n                     (Unit_Name\n-                     (Get_Cunit_Unit_Number (Library_Unit (Context_Item))));\n+                       (Get_Cunit_Unit_Number (Library_Unit (Context_Item))));\n+\n                   if Implicit_With (Context_Item) then\n                      Write_Str (\" -- implicit\");\n                   end if;\n+\n                   Write_Eol;\n                end if;\n "}, {"sha": "9864e94f3aa26be3df52bb9560ebbb26aea877a4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806b956fed0026c5431340ee15e770dd513684a8/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806b956fed0026c5431340ee15e770dd513684a8/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=806b956fed0026c5431340ee15e770dd513684a8", "patch": "@@ -3037,7 +3037,6 @@ package body Sem_Res is\n          elsif Is_Entity_Name (Left_Opnd (N)) then\n             declare\n                Ent : constant Entity_Id := Entity (Left_Opnd (N));\n-\n             begin\n                if Ekind (Ent) = E_Constant\n                  and then Present (Constant_Value (Ent))"}]}