{"sha": "f99652b5e31bf860a7a007e71e67796f047a3512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5NjUyYjVlMzFiZjg2MGE3YTAwN2U3MWU2Nzc5NmYwNDdhMzUxMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2004-11-19T09:47:23Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-11-19T09:47:23Z"}, "message": "config/stormy16/stormy16.c (combine_bnp): Add code to handle zero_extension and lshiftrt insns.\n\nconfig/stormy16/stormy16.c (combine_bnp): Add code to handle zero_extension and\n  lshiftrt insns.\nReplace uses of XEXP(...) with either SET_DEST() or SET_SRC()\twhere\n  appropriate.\nconfig/stormy16.stormy16.md (bclrx3, bsetx3): New patterns to handle bp and bn\n  insn patterns with a zero_extend rtx inside them.\n\nFrom-SVN: r90898", "tree": {"sha": "8ca78644de58813f1f589e1ff2f999bc240d9ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca78644de58813f1f589e1ff2f999bc240d9ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99652b5e31bf860a7a007e71e67796f047a3512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99652b5e31bf860a7a007e71e67796f047a3512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99652b5e31bf860a7a007e71e67796f047a3512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99652b5e31bf860a7a007e71e67796f047a3512/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e648d85ab2e419200e7424d1d744030c7075b013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e648d85ab2e419200e7424d1d744030c7075b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e648d85ab2e419200e7424d1d744030c7075b013"}], "stats": {"total": 150, "additions": 124, "deletions": 26}, "files": [{"sha": "aef41d64e49461679f07d05a6721211a63084e3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99652b5e31bf860a7a007e71e67796f047a3512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99652b5e31bf860a7a007e71e67796f047a3512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f99652b5e31bf860a7a007e71e67796f047a3512", "patch": "@@ -1,3 +1,13 @@\n+2004-11-19  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/stormy16/stormy16.c (combine_bnp): Add code to handle\n+\tzero_extension and lshiftrt insns.\n+\tReplace uses of XEXP(...) with either SET_DEST() or SET_SRC()\n+\twhere appropriate.\n+\t* config/stormy16.stormy16.md (bclrx3, bsetx3): New patterns\n+\tto handle bp and bn insn patterns with a zero_extend rtx\n+\tinside them.\n+\n 2004-11-19  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* config/arm/arm.md (generic_sched): Make const."}, {"sha": "ec40cd916b25fe3ded0d2c75058decf99de20451", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 88, "deletions": 26, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99652b5e31bf860a7a007e71e67796f047a3512/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99652b5e31bf860a7a007e71e67796f047a3512/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=f99652b5e31bf860a7a007e71e67796f047a3512", "patch": "@@ -2570,9 +2570,12 @@ xstormy16_expand_builtin(tree exp, rtx target,\n static void\n combine_bnp (rtx insn)\n {\n-  int insn_code, regno, need_extend, mask;\n+  int insn_code, regno, need_extend;\n+  unsigned int mask;\n   rtx cond, reg, and, load, qireg, mem;\n   enum machine_mode load_mode = QImode;\n+  enum machine_mode and_mode = QImode;\n+  rtx shift = NULL_RTX;\n \n   insn_code = recog_memoized (insn);\n   if (insn_code != CODE_FOR_cbranchhi\n@@ -2613,15 +2616,14 @@ combine_bnp (rtx insn)\n       for (and = prev_real_insn (insn); and; and = prev_real_insn (and))\n \t{\n \t  int and_code = recog_memoized (and);\n+\n \t  if (and_code == CODE_FOR_extendqihi2\n-\t      && rtx_equal_p (XEXP (PATTERN (and), 0), reg)\n-\t      && rtx_equal_p (XEXP (XEXP (PATTERN (and), 1), 0), qireg))\n-\t    {\n-\t      break;\n-\t    }\n+\t      && rtx_equal_p (SET_DEST (PATTERN (and)), reg)\n+\t      && rtx_equal_p (XEXP (SET_SRC (PATTERN (and)), 0), qireg))\n+\t    break;\n \t\n \t  if (and_code == CODE_FOR_movhi_internal\n-\t      && rtx_equal_p (XEXP (PATTERN (and), 0), reg))\n+\t      && rtx_equal_p (SET_DEST (PATTERN (and)), reg))\n \t    {\n \t      /* This is for testing bit 15.  */\n \t      and = insn;\n@@ -2630,6 +2632,7 @@ combine_bnp (rtx insn)\n \n \t  if (reg_mentioned_p (reg, and))\n \t    return;\n+\n \t  if (GET_CODE (and) != NOTE\n \t      && GET_CODE (and) != INSN)\n \t    return;\n@@ -2641,64 +2644,118 @@ combine_bnp (rtx insn)\n       for (and = prev_real_insn (insn); and; and = prev_real_insn (and))\n \t{\n \t  if (recog_memoized (and) == CODE_FOR_andhi3\n-\t      && rtx_equal_p (XEXP (PATTERN (and), 0), reg)\n-\t      && rtx_equal_p (XEXP (XEXP (PATTERN (and), 1), 0), reg))\n-\t    {\n-\t      break;\n-\t    }\n+\t      && rtx_equal_p (SET_DEST (PATTERN (and)), reg)\n+\t      && rtx_equal_p (XEXP (SET_SRC (PATTERN (and)), 0), reg))\n+\t    break;\n \t\n \t  if (reg_mentioned_p (reg, and))\n \t    return;\n+\n \t  if (GET_CODE (and) != NOTE\n \t      && GET_CODE (and) != INSN)\n \t    return;\n \t}\n+\n+      if (and)\n+\t{\n+\t  /* Some mis-optimisations by GCC can generate a RIGHT-SHIFT\n+\t     followed by an AND like this:\n+\n+               (parallel [(set (reg:HI r7) (lshiftrt:HI (reg:HI r7) (const_int 3)))\n+                          (clobber (reg:BI carry))]\n+\n+               (set (reg:HI r7) (and:HI (reg:HI r7) (const_int 1)))\n+\t      \n+\t     Attempt to detect this here.  */\n+\t  for (shift = prev_real_insn (and); shift; shift = prev_real_insn (shift))\n+\t    {\n+\t      if (recog_memoized (shift) == CODE_FOR_lshrhi3\n+\t\t  && rtx_equal_p (SET_DEST (XVECEXP (PATTERN (shift), 0, 0)), reg)\n+\t\t  && rtx_equal_p (XEXP (SET_SRC (XVECEXP (PATTERN (shift), 0, 0)), 0), reg))\n+\t\tbreak;\n+\t\t\n+\t      if (reg_mentioned_p (reg, shift)\n+\t\t  || (GET_CODE (shift) != NOTE\n+\t\t      && GET_CODE (shift) != INSN))\n+\t\t{\n+\t\t  shift = NULL_RTX;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n     }\n   if (!and)\n     return;\n \n-  for (load = prev_real_insn (and); load; load = prev_real_insn (load))\n+  for (load = shift ? prev_real_insn (shift) : prev_real_insn (and);\n+       load;\n+       load = prev_real_insn (load))\n     {\n       int load_code = recog_memoized (load);\n+\n       if (load_code == CODE_FOR_movhi_internal\n-\t  && rtx_equal_p (XEXP (PATTERN (load), 0), reg)\n-\t  && xstormy16_below100_operand (XEXP (PATTERN (load), 1), HImode)\n-\t  && ! MEM_VOLATILE_P (XEXP (PATTERN (load), 1)))\n+\t  && rtx_equal_p (SET_DEST (PATTERN (load)), reg)\n+\t  && xstormy16_below100_operand (SET_SRC (PATTERN (load)), HImode)\n+\t  && ! MEM_VOLATILE_P (SET_SRC (PATTERN (load))))\n \t{\n \t  load_mode = HImode;\n \t  break;\n \t}\n \n       if (load_code == CODE_FOR_movqi_internal\n-\t  && rtx_equal_p (XEXP (PATTERN (load), 0), qireg)\n-\t  && xstormy16_below100_operand (XEXP (PATTERN (load), 1), QImode))\n+\t  && rtx_equal_p (SET_DEST (PATTERN (load)), qireg)\n+\t  && xstormy16_below100_operand (SET_SRC (PATTERN (load)), QImode))\n \t{\n \t  load_mode = QImode;\n \t  break;\n \t}\n-\t\n+\n+      if (load_code == CODE_FOR_zero_extendqihi2\n+\t  && rtx_equal_p (SET_DEST (PATTERN (load)), reg)\n+\t  && xstormy16_below100_operand (XEXP (SET_SRC (PATTERN (load)), 0), QImode))\n+\t{\n+\t  load_mode = QImode;\n+\t  and_mode = HImode;\n+\t  break;\n+\t}\n+\n       if (reg_mentioned_p (reg, load))\n \treturn;\n+\n       if (GET_CODE (load) != NOTE\n \t  && GET_CODE (load) != INSN)\n \treturn;\n     }\n   if (!load)\n     return;\n \n-  if (!need_extend)\n+  mem = SET_SRC (PATTERN (load));\n+\n+  if (need_extend)\n     {\n-      if (!xstormy16_onebit_set_operand (XEXP (XEXP (PATTERN (and), 1), 1), load_mode))\n-\treturn;\n-      mask = (int) INTVAL (XEXP (XEXP (PATTERN (and), 1), 1));\n+      mask = (load_mode == HImode) ? 0x8000 : 0x80;\n+\n+      /* If the mem includes a zero-extend operation and we are\n+\t going to generate a sign-extend operation then move the\n+\t mem inside the zero-extend.  */\n+      if (GET_CODE (mem) == ZERO_EXTEND)\n+\tmem = XEXP (mem, 0);\n     }\n   else\n-    mask = (load_mode == HImode) ? 0x8000 : 0x80;\n+    {\n+      if (!xstormy16_onebit_set_operand (XEXP (SET_SRC (PATTERN (and)), 1), load_mode))\n+\treturn;\n+\n+      mask = (int) INTVAL (XEXP (SET_SRC (PATTERN (and)), 1));\n+\n+      if (shift)\n+\tmask <<= INTVAL (XEXP (SET_SRC (XVECEXP (PATTERN (shift), 0, 0)), 1));\n+    }\n \n-  mem = XEXP (PATTERN (load), 1);\n   if (load_mode == HImode)\n     {\n       rtx addr = XEXP (mem, 0);\n+\n       if (! (mask & 0xff))\n \t{\n \t  addr = plus_constant (addr, 1);\n@@ -2710,11 +2767,16 @@ combine_bnp (rtx insn)\n   if (need_extend)\n     XEXP (cond, 0) = gen_rtx_SIGN_EXTEND (HImode, mem);\n   else\n-    XEXP (cond, 0) = gen_rtx_AND (QImode, mem, GEN_INT (mask));\n+    XEXP (cond, 0) = gen_rtx_AND (and_mode, mem, GEN_INT (mask));\n+\n   INSN_CODE (insn) = -1;\n   delete_insn (load);\n+\n   if (and != insn)\n     delete_insn (and);\n+\n+  if (shift != NULL_RTX)\n+    delete_insn (shift);\n }\n \n static void"}, {"sha": "14dd7902188c8ebc3944f0ac4e82b567ef864327", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99652b5e31bf860a7a007e71e67796f047a3512/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99652b5e31bf860a7a007e71e67796f047a3512/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=f99652b5e31bf860a7a007e71e67796f047a3512", "patch": "@@ -1268,6 +1268,19 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"psw_operand\" \"nop\")])\n \n+(define_insn \"*bclrx3\"\n+  [(set (pc) \n+\t(if_then_else (eq:HI (and:HI (zero_extend:HI (match_operand:QI 1 \"xstormy16_below100_operand\" \"W\"))\n+\t\t\t\t     (match_operand:HI 2 \"immediate_operand\" \"i\"))\n+\t\t\t     (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n+   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+  \"\"\n+  \"bn %1,%B2,%l0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"psw_operand\" \"nop\")])\n+\n (define_insn \"*bclr7\"\n   [(set (pc) \n \t(if_then_else (xor:HI (lshiftrt:HI (subreg:HI\n@@ -1320,6 +1333,19 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"psw_operand\" \"nop\")])\n \n+(define_insn \"*bsetx3\"\n+  [(set (pc) \n+\t(if_then_else (ne:HI (and:HI (zero_extend:HI (match_operand:QI 1 \"xstormy16_below100_operand\" \"W\"))\n+\t\t\t\t     (match_operand:HI 2 \"immediate_operand\" \"i\"))\n+\t\t\t     (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n+   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+  \"\"\n+  \"bp %1,%B2,%l0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"psw_operand\" \"nop\")])\n+\n (define_insn \"*bset7\"\n   [(set (pc) \n \t(if_then_else (lshiftrt:HI (subreg:HI (match_operand:QI 1 \"xstormy16_below100_operand\" \"W\") 0)"}]}