{"sha": "59a2dfe8d754913ff356c83e1c9a7106a69aad11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhMmRmZThkNzU0OTEzZmYzNTZjODNlMWM5YTcxMDZhNjlhYWQxMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-10-02T18:08:02Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-10-02T18:08:02Z"}, "message": "If no -mcpu=<xxx> or implicit cpu via --with-cpu=<xxx> configure option, inhereit all TARGET_DEFAULT bits.\n\nFrom-SVN: r191993", "tree": {"sha": "b71704cef58ddf578204641fb40e495212684b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b71704cef58ddf578204641fb40e495212684b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a2dfe8d754913ff356c83e1c9a7106a69aad11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a2dfe8d754913ff356c83e1c9a7106a69aad11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a2dfe8d754913ff356c83e1c9a7106a69aad11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a2dfe8d754913ff356c83e1c9a7106a69aad11/comments", "author": null, "committer": null, "parents": [{"sha": "6b7fa93a48b768a4b3414012a66d2343a6e6acaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7fa93a48b768a4b3414012a66d2343a6e6acaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7fa93a48b768a4b3414012a66d2343a6e6acaa"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "0a6a13953fb9aed5ff7b41439638c3e1e0afc4f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a2dfe8d754913ff356c83e1c9a7106a69aad11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a2dfe8d754913ff356c83e1c9a7106a69aad11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59a2dfe8d754913ff356c83e1c9a7106a69aad11", "patch": "@@ -1,3 +1,10 @@\n+2012-10-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If\n+\t-mcpu=<xxx> is not specified and the compiler is not configured\n+\tusing --with-cpu=<xxx>, use the bits from the TARGET_DEFAULT to\n+\tset the initial options.\n+\n 2012-10-02  Sharad Singhai  <singhai@google.com>\n \n \tPR testsuite/54772"}, {"sha": "3e3d55324e9abe4540d2c9bb029889fc1ab217cd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a2dfe8d754913ff356c83e1c9a7106a69aad11/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a2dfe8d754913ff356c83e1c9a7106a69aad11/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=59a2dfe8d754913ff356c83e1c9a7106a69aad11", "patch": "@@ -2446,21 +2446,34 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_cpu_index = cpu_index = main_target_opt->x_rs6000_cpu_index;\n       have_cpu = true;\n     }\n+  else if (implicit_cpu)\n+    {\n+      rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (implicit_cpu);\n+      have_cpu = true;\n+    }\n   else\n     {\n-      const char *default_cpu =\n-        (implicit_cpu ? implicit_cpu\n-         : (TARGET_POWERPC64 ? \"powerpc64\" : \"powerpc\"));\n-\n+      const char *default_cpu = (TARGET_POWERPC64 ? \"powerpc64\" : \"powerpc\");\n       rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n-      have_cpu = implicit_cpu != 0;\n+      have_cpu = false;\n     }\n \n   gcc_assert (cpu_index >= 0);\n \n-  target_flags &= ~set_masks;\n-  target_flags |= (processor_target_table[cpu_index].target_enable\n-\t\t   & set_masks);\n+  /* If we have a cpu, either through an explicit -mcpu=<xxx> or if the\n+     compiler was configured with --with-cpu=<xxx>, replace all of the ISA bits\n+     with those from the cpu, except for options that were explicitly set.  If\n+     we don't have a cpu, do not override the target bits set in\n+     TARGET_DEFAULT.  */\n+  if (have_cpu)\n+    {\n+      target_flags &= ~set_masks;\n+      target_flags |= (processor_target_table[cpu_index].target_enable\n+\t\t       & set_masks);\n+    }\n+  else\n+    target_flags |= (processor_target_table[cpu_index].target_enable\n+\t\t     & ~target_flags_explicit);\n \n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;"}]}