{"sha": "4e227341f6e6c3ceef721d3839c8d9eb6292db70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyMjczNDFmNmU2YzNjZWVmNzIxZDM4MzljOGQ5ZWI2MjkyZGI3MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-08-31T06:51:31Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-08-31T06:51:31Z"}, "message": "re PR fortran/86328 (Runtime segfault reading an allocatable class(*) object in allocate statements)\n\n2018-08-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/86328\n\tPR fortran/86760\n\t* trans-array.c (gfc_conv_scalarized_array_ref): Do not fix\n\tinfo->descriptor but pass it directly to gfc_build_array_ref.\n\t(gfc_conv_array_ref): Likewise for se->expr.\n\t* trans.c (gfc_build_array_ref): If 'decl' is a COMPONENT_REF\n\tobtain the span field directly from it.\n\n2018-08-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/86328\n\tPR fortran/86760\n\t* gfortran.dg/pr86328.f90 : New test.\n\tin comment 12 of the PR.\n\t* gfortran.dg/pr86760.f90 : New test.\n\nFrom-SVN: r264008", "tree": {"sha": "0527c447bb8c74cd2c74bd4f96e460ce137bded9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0527c447bb8c74cd2c74bd4f96e460ce137bded9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e227341f6e6c3ceef721d3839c8d9eb6292db70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e227341f6e6c3ceef721d3839c8d9eb6292db70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e227341f6e6c3ceef721d3839c8d9eb6292db70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e227341f6e6c3ceef721d3839c8d9eb6292db70/comments", "author": null, "committer": null, "parents": [{"sha": "ee3ec8ac28ce03874214bde9148bc6e5c6705915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3ec8ac28ce03874214bde9148bc6e5c6705915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3ec8ac28ce03874214bde9148bc6e5c6705915"}], "stats": {"total": 143, "additions": 132, "deletions": 11}, "files": [{"sha": "c386a649583f973b8d5d42478aa0b90770f81f4c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4e227341f6e6c3ceef721d3839c8d9eb6292db70", "patch": "@@ -1,3 +1,13 @@\n+2018-08-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/86328\n+\tPR fortran/86760\n+\t* trans-array.c (gfc_conv_scalarized_array_ref): Do not fix\n+\tinfo->descriptor but pass it directly to gfc_build_array_ref.\n+\t(gfc_conv_array_ref): Likewise for se->expr.\n+\t* trans.c (gfc_build_array_ref): If 'decl' is a COMPONENT_REF\n+\tobtain the span field directly from it.\n+\n 2017-08-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/80477"}, {"sha": "adb2c0575a861b65d49c0c17bd969e4873f104e3", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4e227341f6e6c3ceef721d3839c8d9eb6292db70", "patch": "@@ -3414,11 +3414,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n   if (is_pointer_array (info->descriptor))\n     {\n       if (TREE_CODE (info->descriptor) == COMPONENT_REF)\n-\t{\n-\t  decl = gfc_evaluate_now (info->descriptor, &se->pre);\n-\t  GFC_DECL_PTR_ARRAY_P (decl) = 1;\n-\t  TREE_USED (decl) = 1;\n-\t}\n+\tdecl = info->descriptor;\n       else if (TREE_CODE (info->descriptor) == INDIRECT_REF)\n \tdecl = TREE_OPERAND (info->descriptor, 0);\n \n@@ -3659,11 +3655,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n       && is_pointer_array (se->expr))\n     {\n       if (TREE_CODE (se->expr) == COMPONENT_REF)\n-\t{\n-\t  decl = gfc_evaluate_now (se->expr, &se->pre);\n-\t  GFC_DECL_PTR_ARRAY_P (decl) = 1;\n-\t  TREE_USED (decl) = 1;\n-\t}\n+\tdecl = se->expr;\n       else if (TREE_CODE (se->expr) == INDIRECT_REF)\n \tdecl = TREE_OPERAND (se->expr, 0);\n       else"}, {"sha": "153bab633960a22fe680d056df2bc9661779d4b6", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=4e227341f6e6c3ceef721d3839c8d9eb6292db70", "patch": "@@ -407,7 +407,12 @@ gfc_build_array_ref (tree base, tree offset, tree decl, tree vptr)\n   if (vptr)\n     span = gfc_vptr_size_get (vptr);\n   else if (decl)\n-    span = get_array_span (type, decl);\n+    {\n+      if (TREE_CODE (decl) == COMPONENT_REF)\n+\tspan = gfc_conv_descriptor_span_get (decl);\n+      else\n+\tspan = get_array_span (type, decl);\n+    }\n \n   /* If a non-null span has been generated reference the element with\n      pointer arithmetic.  */"}, {"sha": "c0240a13700a3f0084806311803094a77e6cb47f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e227341f6e6c3ceef721d3839c8d9eb6292db70", "patch": "@@ -1,3 +1,11 @@\n+2018-08-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/86328\n+\tPR fortran/86760\n+\t* gfortran.dg/pr86328.f90 : New test.\n+\tin comment 12 of the PR.\n+\t* gfortran.dg/pr86760.f90 : New test.\n+\n 2018-08-30  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* g++.dg/cpp0x/noexcept30.C: Make dependence on"}, {"sha": "dfa0e068958567287fae7faa0c876201a1dc13fe", "filename": "gcc/testsuite/gfortran.dg/pr86328.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86328.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86328.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86328.f90?ref=4e227341f6e6c3ceef721d3839c8d9eb6292db70", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR86328 in which temporaries were not being\n+! assigned for array component references.\n+!\n+! Contributed by Martin  <mscfd@gmx.net>\n+!\n+program ptr_alloc\n+\n+   type :: t\n+      class(*), allocatable :: val\n+   end type\n+\n+   type :: list\n+      type(t), dimension(:), pointer :: ll\n+   end type\n+\n+   integer :: i\n+   type(list) :: a\n+\n+   allocate(a%ll(1:2))\n+   do i = 1,2\n+      allocate(a%ll(i)%val, source=i)\n+   end do\n+\n+   do i = 1,2\n+     call rrr(a, i)\n+   end do\n+\n+   do i = 1,2\n+      deallocate(a%ll(i)%val)\n+   end do\n+   deallocate (a%ll)\n+contains\n+\n+   subroutine rrr(a, i)\n+      type(list), intent(in) :: a\n+      class(*), allocatable :: c\n+      integer :: i\n+\n+      allocate(c, source=a%ll(i)%val)\n+      select type (c)\n+        type is (integer)\n+          if (c .ne. i) stop 1\n+      end select\n+\n+   end subroutine\n+\n+end"}, {"sha": "e75b47c516bd88bbae8310812424cac895b59477", "filename": "gcc/testsuite/gfortran.dg/pr86760.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86760.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e227341f6e6c3ceef721d3839c8d9eb6292db70/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86760.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86760.f90?ref=4e227341f6e6c3ceef721d3839c8d9eb6292db70", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR86760 in which temporaries were not being\n+! assigned for array component references.\n+!\n+! Contributed by Chris Hansen  <hansec@uw.edu>\n+!\n+MODULE test_nesting_mod\n+  IMPLICIT NONE\n+  TYPE :: test_obj1\n+  CONTAINS\n+    PROCEDURE :: destroy\n+  END TYPE\n+\n+  TYPE :: obj_ptr\n+    CLASS(test_obj1), POINTER :: f => NULL()\n+  END TYPE\n+\n+  TYPE :: obj_container\n+    TYPE(obj_ptr), POINTER, DIMENSION(:) :: v => NULL()\n+  END TYPE\n+\n+  integer :: ctr = 0\n+\n+CONTAINS\n+\n+  SUBROUTINE destroy(self)\n+    CLASS(test_obj1), INTENT(INOUT):: self\n+    ctr = ctr + 1\n+  END SUBROUTINE\n+\n+  SUBROUTINE container_destroy(self)\n+    type(obj_container), INTENT(INOUT) :: self\n+    INTEGER :: i\n+    DO i=1,ubound(self%v,1)\n+      CALL self%v(i)%f%destroy()\n+    END DO\n+  END SUBROUTINE\n+\n+END MODULE\n+\n+\n+PROGRAM test_nesting_ptr\n+  USE test_nesting_mod\n+  IMPLICIT NONE\n+  INTEGER :: i\n+  INTEGER, PARAMETER :: n = 2\n+  TYPE(obj_container) :: var\n+\n+  ALLOCATE(var%v(n))\n+  DO i=1,n\n+    ALLOCATE(test_obj1::var%v(i)%f)\n+  END DO\n+  CALL container_destroy(var)\n+\n+  if (ctr .ne. 2) stop 1\n+END"}]}