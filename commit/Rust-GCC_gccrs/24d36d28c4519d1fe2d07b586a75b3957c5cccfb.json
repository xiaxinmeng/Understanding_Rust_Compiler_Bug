{"sha": "24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkMzZkMjhjNDUxOWQxZmUyZDA3YjU4NmE3NWIzOTU3YzVjY2NmYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-07-19T20:13:53Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-07-19T20:13:53Z"}, "message": "re PR fortran/16940 (Failure to perform host association correctly)\n\n2005-07-19 Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/16940\n\t* resolve.c (resolve_symbol): A symbol with FL_UNKNOWN\n\tis matched against interfaces in parent namespaces. If there\n\tthe symtree is set to point to the interface.\n\n2005-07-19 Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/16940\n\t* gfortran.dg/module_interface_1.f90: New test.\n\nFrom-SVN: r102167", "tree": {"sha": "2ed49e292053f65344151ace758bb01e4c5254ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ed49e292053f65344151ace758bb01e4c5254ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/comments", "author": null, "committer": null, "parents": [{"sha": "6a9a79a866b120d678d6463bcdb718fe87c8717f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9a79a866b120d678d6463bcdb718fe87c8717f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9a79a866b120d678d6463bcdb718fe87c8717f"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "12c6b2efdb9ead75ac9677276cd01bef3c7037da", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "patch": "@@ -1,3 +1,10 @@\n+2005-07-19 Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/16940\n+\t* resolve.c (resolve_symbol): A symbol with FL_UNKNOWN\n+\tis matched against interfaces in parent namespaces. If there\n+\tthe symtree is set to point to the interface.\n+\n 2005-07-16  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR fortran/21730"}, {"sha": "ff2ac5675cdf65e5a2c9bc69cd45a0b9fc61667f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "patch": "@@ -4031,9 +4031,34 @@ resolve_symbol (gfc_symbol * sym)\n   int i;\n   const char *whynot;\n   gfc_namelist *nl;\n+  gfc_symtree * symtree;\n+  gfc_symtree * this_symtree;\n+  gfc_namespace * ns;\n \n   if (sym->attr.flavor == FL_UNKNOWN)\n     {\n+\n+    /* If we find that a flavorless symbol is an interface in one of the\n+       parent namespaces, find its symtree in this namespace, free the\n+       symbol and set the symtree to point to the interface symbol.  */\n+      for (ns = gfc_current_ns->parent; ns; ns = ns->parent)\n+\t{\n+\t  symtree = gfc_find_symtree (ns->sym_root, sym->name);\n+\t  if (symtree && symtree->n.sym->generic)\n+\t    {\n+\t      this_symtree = gfc_find_symtree (gfc_current_ns->sym_root,\n+\t\t\t\t\t       sym->name);\n+\t      sym->refs--;\n+\t      if (!sym->refs)\n+\t\tgfc_free_symbol (sym);\n+\t      symtree->n.sym->refs++;\n+\t      this_symtree->n.sym = symtree->n.sym;\n+\t      return;\n+\t    }\n+\t}\n+\n+      /* Otherwise give it a flavor according to such attributes as\n+\t it has.  */\n       if (sym->attr.external == 0 && sym->attr.intrinsic == 0)\n \tsym->attr.flavor = FL_VARIABLE;\n       else"}, {"sha": "4ffcf4ca02e57e27add07c627562e09a18bfd6df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "patch": "@@ -1,3 +1,8 @@\n+2005-07-19 Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/16940\n+\t* gfortran.dg/module_interface_1.f90: New test.\n+\n 2005-07-19  Danny Berlin <dberlin@dberlin.org>\n \t    Kenneth Zadeck <zadeck@naturalbridge.com>\n "}, {"sha": "7301f48ff32bcb3617b65bf4887cdb8d0a035b76", "filename": "gcc/testsuite/gfortran.dg/module_interface_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_interface_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d36d28c4519d1fe2d07b586a75b3957c5cccfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_interface_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_interface_1.f90?ref=24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! This tests the fix for PR16940, module interfaces to\n+! contained functions caused ICEs.\n+! This is a simplified version of the example in the PR\n+! discussion, which was due to L.Meissner.\n+!\n+! Submitted by Paul Thomas  pault@gcc.gnu.org\n+!\n+  module Max_Loc_Mod\n+    implicit none\n+    interface Max_Location\n+      module procedure I_Max_Loc\n+    end interface\n+  contains\n+    function I_Max_Loc (Vector) result(Ans)\n+      integer, intent (in), dimension(:) :: Vector\n+      integer, dimension(1) :: Ans\n+      Ans = maxloc(Vector)\n+      return\n+    end function I_Max_Loc\n+  end module Max_Loc_Mod\n+  program module_interface\n+    use Max_Loc_Mod\n+    implicit none\n+    integer :: Vector (7)\n+    Vector = (/1,6,3,5,19,1,2/)\n+    call Selection_Sort (Vector)\n+  contains\n+    subroutine Selection_Sort (Unsorted)\n+      integer, intent (in), dimension(:) :: Unsorted\n+      integer, dimension (1) :: N\n+      N = Max_Location (Unsorted)\n+      if (N(1).ne.5) call abort ()\n+      return\n+    end subroutine Selection_Sort\n+  end program module_interface\n\\ No newline at end of file"}]}