{"sha": "feae0af82753e06fbff6103da5fbb3b28e1ddbd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhZTBhZjgyNzUzZTA2ZmJmZjYxMDNkYTVmYmIzYjI4ZTFkZGJkNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-12-29T17:37:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-12-29T17:37:25Z"}, "message": "Fortran: Fix deferred character lengths in array constructors [PR93833].\n\n2020-12-29  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/93833\n\t* trans-array.c (get_array_ctor_var_strlen): If the character\n\tlength backend_decl cannot be found, convert the expression and\n\tuse the string length. Clear up some minor white space issues\n\tin the rest of the file.\n\ngcc/testsuite/\n\tPR fortran/93833\n\t* gfortran.dg/deferred_character_36.f90 : New test.", "tree": {"sha": "3f47e7f4abee7148e23f980847905d4f92c6b343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f47e7f4abee7148e23f980847905d4f92c6b343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feae0af82753e06fbff6103da5fbb3b28e1ddbd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feae0af82753e06fbff6103da5fbb3b28e1ddbd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feae0af82753e06fbff6103da5fbb3b28e1ddbd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feae0af82753e06fbff6103da5fbb3b28e1ddbd7/comments", "author": null, "committer": null, "parents": [{"sha": "02a2d78f7ad05fae2cacd151e6c68456020a2158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a2d78f7ad05fae2cacd151e6c68456020a2158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a2d78f7ad05fae2cacd151e6c68456020a2158"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "33e05be5bd1838eca22d96abe55dc2407de3d9dd", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feae0af82753e06fbff6103da5fbb3b28e1ddbd7/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feae0af82753e06fbff6103da5fbb3b28e1ddbd7/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=feae0af82753e06fbff6103da5fbb3b28e1ddbd7", "patch": "@@ -2199,6 +2199,7 @@ get_array_ctor_var_strlen (stmtblock_t *block, gfc_expr * expr, tree * len)\n   gfc_ref *ref;\n   gfc_typespec *ts;\n   mpz_t char_len;\n+  gfc_se se;\n \n   /* Don't bother if we already know the length is a constant.  */\n   if (*len && INTEGER_CST_P (*len))\n@@ -2244,6 +2245,19 @@ get_array_ctor_var_strlen (stmtblock_t *block, gfc_expr * expr, tree * len)\n \t}\n     }\n \n+  /* A last ditch attempt that is sometimes needed for deferred characters.  */\n+  if (!ts->u.cl->backend_decl)\n+    {\n+      gfc_init_se (&se, NULL);\n+      if (expr->rank)\n+\tgfc_conv_expr_descriptor (&se, expr);\n+      else\n+\tgfc_conv_expr (&se, expr);\n+      gcc_assert (se.string_length != NULL_TREE);\n+      gfc_add_block_to_block (block, &se.pre);\n+      ts->u.cl->backend_decl = se.string_length;\n+    }\n+\n   *len = ts->u.cl->backend_decl;\n }\n "}, {"sha": "65f2464e54ed3ac337015a8ac026228729d07f7a", "filename": "gcc/testsuite/gfortran.dg/deferred_character_36.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feae0af82753e06fbff6103da5fbb3b28e1ddbd7/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feae0af82753e06fbff6103da5fbb3b28e1ddbd7/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_36.f90?ref=feae0af82753e06fbff6103da5fbb3b28e1ddbd7", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR93833, which ICEd as shown.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   character(:), allocatable :: c\n+   c = \"wxyz\"\n+contains\n+   subroutine s\n+      associate (y => [c])\n+         if (any(y /= [c])) stop 1\n+      end associate\n+   end\n+end"}]}