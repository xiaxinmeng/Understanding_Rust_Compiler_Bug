{"sha": "bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwMmU3ZmE1MmJmMmJhMjI4NGVmNTM1N2UxNDAwYzM4NTM2YzgyYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-11-22T18:35:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-11-22T18:35:16Z"}, "message": "ffi.c (ffi_prep_closure): Align doubles and 64-bit integers on a 8-byte boundary.\n\n\t* src/sparc/ffi.c (ffi_prep_closure): Align doubles and 64-bit integers\n\ton a 8-byte boundary.\n\t* src/sparc/v8.S (ffi_closure_v8): Reserve frame space for\n\targuments.\n\nFrom-SVN: r91022", "tree": {"sha": "8a9179c24c961aa5bb6b5c1b72b5e41595fbe06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a9179c24c961aa5bb6b5c1b72b5e41595fbe06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "167a1354b34d35c26feb63f511e58cd7698e40ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167a1354b34d35c26feb63f511e58cd7698e40ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167a1354b34d35c26feb63f511e58cd7698e40ce"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "45082049797d54a7268194d8fe352b0fc0d1ab50", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "patch": "@@ -1,3 +1,9 @@\n+2004-11-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* src/sparc/ffi.c (ffi_prep_closure): Align doubles and 64-bit integers\n+\ton a 8-byte boundary.\n+\t* src/sparc/v8.S (ffi_closure_v8): Reserve frame space for arguments.\n+\n 2004-10-27  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* src/arm/ffi.c (ffi_prep_cif_machdep): Handle functions that return"}, {"sha": "b83d63dedc775d1855e8f9438662a82bafcf9729", "filename": "libffi/src/sparc/ffi.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/libffi%2Fsrc%2Fsparc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/libffi%2Fsrc%2Fsparc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fffi.c?ref=bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "patch": "@@ -470,7 +470,7 @@ ffi_prep_closure (ffi_closure* closure,\n \n int\n ffi_closure_sparc_inner_v8(ffi_closure *closure,\n-  void *rvalue, unsigned long *gpr)\n+  void *rvalue, unsigned long *gpr, unsigned long *scratch)\n {\n   ffi_cif *cif;\n   ffi_type **arg_types;\n@@ -505,6 +505,19 @@ ffi_closure_sparc_inner_v8(ffi_closure *closure,\n \t  /* Straight copy of invisible reference.  */\n \t  avalue[i] = (void *)gpr[argn++];\n \t}\n+      else if ((arg_types[i]->type == FFI_TYPE_DOUBLE\n+\t       || arg_types[i]->type == FFI_TYPE_SINT64\n+\t       || arg_types[i]->type == FFI_TYPE_UINT64)\n+\t       /* gpr is 8-byte aligned.  */\n+\t       && (argn % 2) != 0)\n+\t{\n+\t  /* Align on a 8-byte boundary.  */\n+\t  scratch[0] = gpr[argn];\n+\t  scratch[1] = gpr[argn+1];\n+\t  avalue[i] = scratch;\n+\t  scratch -= 2;\n+\t  argn += 2;\n+\t}\n       else\n \t{\n \t  /* Always right-justify.  */"}, {"sha": "709423ce906aed2a7c7bf1bd16e529a78f3e8989", "filename": "libffi/src/sparc/v8.S", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/libffi%2Fsrc%2Fsparc%2Fv8.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf02e7fa52bf2ba2284ef5357e1400c38536c82c/libffi%2Fsrc%2Fsparc%2Fv8.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fv8.S?ref=bf02e7fa52bf2ba2284ef5357e1400c38536c82c", "patch": "@@ -115,7 +115,15 @@ ffi_closure_v8:\n \t\t.register\t%g2, #scratch\n #endif\n .LLFB2:\n-\tsave\t%sp, -STACKFRAME, %sp\n+\t! Reserve frame space for all arguments in case\n+\t! we need to align them on a 8-byte boundary.\n+\tld\t[%g2+FFI_TRAMPOLINE_SIZE], %g1\n+\tld\t[%g1+4], %g1\n+\tsll\t%g1, 3, %g1\n+\tadd\t%g1, STACKFRAME, %g1\n+\t! %g1 == STACKFRAME + 8*nargs\n+\tneg\t%g1\n+\tsave\t%sp, %g1, %sp\n .LLCFI1:\n \n \t! Store all of the potential argument registers in va_list format.\n@@ -129,8 +137,9 @@ ffi_closure_v8:\n \t! Call ffi_closure_sparc_inner to do the bulk of the work.\n \tmov\t%g2, %o0\n \tadd\t%fp, -8, %o1\n+\tadd\t%fp,  64, %o2\n \tcall\tffi_closure_sparc_inner_v8\n-\t add\t%fp,  64, %o2\n+\t add\t%fp, -16, %o3\n \n \t! Load up the return value in the proper type.\n \t! See ffi_prep_cif_machdep for the list of cases.\n@@ -157,6 +166,7 @@ ffi_closure_v8:\n \tbe\tdone2\n \n \t! FFI_TYPE_SINT64\n+\t! FFI_TYPE_UINT64\n \tld\t[%fp-4], %i1\n \n integer:"}]}