{"sha": "edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRjY2RjYjE5ODY1Y2RjMjcxY2YyZWVhZDc2ZDhhZWJjN2NhODlkMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-12-02T22:18:25Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-12-02T22:18:25Z"}, "message": "re PR target/30040 (-mtune=native is wrong for Core 2 Duo and Core Duo)\n\n2006-12-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/30040\n\t* config/i386/driver-i386.c: Include \"coretypes.h\" and \"tm.h\".\n\t(bit_SSSE3): New.\n\t(host_detect_local_cpu): Check -mtune= vs. -march=. Rewrite\n\tprocessor detection.\n\n\t* config/i386/i386.h (CC1_CPU_SPEC): Add -mtune=native for\n\t-march=native if there is no -mtune=*.\n\n\t* config/i386/x-i386 (driver-i386.o): Also depend on $(TM_H)\n\tcoretypes.h.\n\nFrom-SVN: r119454", "tree": {"sha": "9b835745a452dc93b18173007faa8ff798b06f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b835745a452dc93b18173007faa8ff798b06f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9690009903e4d8df766361db87da3098f4aa42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9690009903e4d8df766361db87da3098f4aa42f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9690009903e4d8df766361db87da3098f4aa42f"}], "stats": {"total": 222, "additions": 187, "deletions": 35}, "files": [{"sha": "eebf3f81cf04fc565570471b836d9a17a07cd65e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "patch": "@@ -1,3 +1,17 @@\n+2006-12-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/30040\n+\t* config/i386/driver-i386.c: Include \"coretypes.h\" and \"tm.h\".\n+\t(bit_SSSE3): New.\n+\t(host_detect_local_cpu): Check -mtune= vs. -march=. Rewrite\n+\tprocessor detection.\n+\n+\t* config/i386/i386.h (CC1_CPU_SPEC): Add -mtune=native for\n+\t-march=native if there is no -mtune=*.\n+\n+\t* config/i386/x-i386 (driver-i386.o): Also depend on $(TM_H)\n+\tcoretypes.h.\n+\n 2006-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* doc/install.texi: Update recommended MPFR version.  Remove"}, {"sha": "d623c2c7b104202a4c8935a89eb412b234452372", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 170, "deletions": 33, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "patch": "@@ -20,6 +20,8 @@ Boston, MA 02110-1301, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n #include <stdlib.h>\n \n const char *host_detect_local_cpu (int argc, const char **argv);\n@@ -37,6 +39,7 @@ const char *host_detect_local_cpu (int argc, const char **argv);\n #define bit_SSE2 (1 << 26)\n \n #define bit_SSE3 (1 << 0)\n+#define bit_SSSE3 (1 << 9)\n #define bit_CMPXCHG16B (1 << 13)\n \n #define bit_3DNOW (1 << 31)\n@@ -57,19 +60,24 @@ const char *host_detect_local_cpu (int argc, const char **argv);\n    in the spec.  */\n const char *host_detect_local_cpu (int argc, const char **argv)\n {\n-  const char *cpu = \"i386\";\n+  const char *cpu = NULL;\n+  enum processor_type processor = PROCESSOR_I386;\n   unsigned int eax, ebx, ecx, edx;\n   unsigned int max_level;\n   unsigned int vendor;\n   unsigned int ext_level;\n   unsigned char has_mmx = 0, has_3dnow = 0, has_3dnowp = 0, has_sse = 0;\n-  unsigned char has_sse2 = 0, has_sse3 = 0, has_cmov = 0;\n-  unsigned char has_longmode = 0;\n+  unsigned char has_sse2 = 0, has_sse3 = 0, has_ssse3 = 0, has_cmov = 0;\n+  unsigned char has_longmode = 0, has_cmpxchg8b = 0;\n   unsigned char is_amd = 0;\n   unsigned int family = 0;\n-  if (argc < 1\n-      || (strcmp (argv[0], \"arch\")\n-\t  && strcmp (argv[0], \"tune\")))\n+  bool arch;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  arch = strcmp (argv[0], \"arch\") == 0;\n+  if (!arch && strcmp (argv[0], \"tune\"))\n     return NULL;\n \n #ifndef __x86_64__\n@@ -83,7 +91,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     goto done;\n #endif\n \n-  cpu = \"i586\";\n+  processor = PROCESSOR_PENTIUM;\n \n   /* Check the highest input value for eax.  */\n   cpuid (0, eax, ebx, ecx, edx);\n@@ -94,11 +102,13 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     goto done;\n \n   cpuid (1, eax, ebx, ecx, edx);\n+  has_cmpxchg8b = !!(edx & bit_CMPXCHG8B);\n   has_cmov = !!(edx & bit_CMOV);\n   has_mmx = !!(edx & bit_MMX);\n   has_sse = !!(edx & bit_SSE);\n   has_sse2 = !!(edx & bit_SSE2);\n   has_sse3 = !!(ecx & bit_SSE3);\n+  has_ssse3 = !!(ecx & bit_SSSE3);\n   /* We don't care for extended family.  */\n   family = (eax >> 8) & ~(1 << 4);\n \n@@ -117,44 +127,152 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   if (is_amd)\n     {\n       if (has_mmx)\n-        cpu = \"k6\";\n-      if (has_3dnow)\n-        cpu = \"k6-3\";\n+\tprocessor = PROCESSOR_K6;\n       if (has_3dnowp)\n-        cpu = \"athlon\";\n-      if (has_sse)\n-\tcpu = \"athlon-4\";\n+\tprocessor = PROCESSOR_ATHLON;\n       if (has_sse2 || has_longmode)\n-        cpu = \"k8\";\n+\tprocessor = PROCESSOR_K8;\n     }\n   else\n     {\n-      if (family == 5)\n-        {\n-          if (has_mmx)\n-            cpu = \"pentium-mmx\";\n+      switch (family)\n+\t{\n+\tcase 5:\n+\t  /* Default is PROCESSOR_PENTIUM.  */\n+\t  break;\n+\tcase 6:\n+\t  processor = PROCESSOR_PENTIUMPRO;\n+\t  break;\n+\tcase 15:\n+\t  processor = PROCESSOR_PENTIUM4;\n+\t  break;\n+\tdefault:\n+\t  /* We have no idea.  Use something reasonable.  */\n+\t  if (arch)\n+\t    {\n+\t      if (has_ssse3)\n+\t\tcpu = \"core2\";\n+\t      else if (has_sse3)\n+\t\t{\n+\t\t  if (has_longmode)\n+\t\t    cpu = \"nocona\";\n+\t\t  else\n+\t\t    cpu = \"prescott\";\n+\t\t}\n+\t      else if (has_sse2)\n+\t\tcpu = \"pentium4\";\n+\t      else if (has_cmov)\n+\t\tcpu = \"pentiumpro\";\n+\t      else if (has_mmx)\n+\t\tcpu = \"pentium-mmx\";\n+\t      else if (has_cmpxchg8b)\n+\t\tcpu = \"pentium\";\n+\t      else\n+\t\tcpu = \"i386\";\n+\t    }\n+\t  else\n+\t    cpu = \"generic\";\n+\t  goto done;\n+\t  break;\n+\t}\n+    }\n+\n+  switch (processor)\n+    {\n+    case PROCESSOR_I386:\n+      cpu = \"i386\";\n+      break;\n+    case PROCESSOR_I486:\n+      cpu = \"i486\";\n+      break;\n+    case PROCESSOR_PENTIUM:\n+      if (has_mmx)\n+\tcpu = \"pentium-mmx\";\n+      else\n+\tcpu = \"pentium\";\n+      break;\n+    case PROCESSOR_PENTIUMPRO:\n+      if (has_longmode)\n+\t{\n+\t  /* It is Core 2 Duo.  */\n+\t  cpu = \"core2\";\n \t}\n-      else if (has_mmx)\n-        cpu = \"pentium2\";\n-      if (has_sse)\n-        cpu = \"pentium3\";\n-      if (has_sse2)\n+      else\n \t{\n-\t  if (family == 6)\n-\t    /* It's a pentiumpro with sse2 --> pentium-m */\n-            cpu = \"pentium-m\";\n+\t  if (arch)\n+\t    {\n+\t      if (has_sse3)\n+\t\t{\n+\t\t  /* It is Core Duo.  */\n+\t\t  cpu = \"prescott\";\n+\t\t}\n+\t      else if (has_sse2)\n+\t\t{\n+\t\t  /* It is Pentium M.  */\n+\t\t  cpu = \"pentium4\";\n+\t\t}\n+\t      else if (has_sse)\n+\t\t{\n+\t\t  /* It is Pentium III.  */\n+\t\t  cpu = \"pentium3\";\n+\t\t}\n+\t      else if (has_mmx)\n+\t\t{\n+\t\t  /* It is Pentium II.  */\n+\t\t  cpu = \"pentium2\";\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Default to Pentium Pro.  */\n+\t\t  cpu = \"pentiumpro\";\n+\t\t}\n+\t    }\n \t  else\n-\t    /* Would have to look at extended family, but it's at least\n-\t       an pentium4 core.  */\n-\t    cpu = \"pentium4\";\n+\t    {\n+\t      /* For -mtune, we default to -mtune=generic.  */\n+\t      cpu = \"generic\";\n+\t    }\n \t}\n+      break;\n+    case PROCESSOR_GEODE:\n+      cpu = \"geode\";\n+      break;\n+    case PROCESSOR_K6:\n+      if (has_3dnow)\n+        cpu = \"k6-3\";\n+      else\n+\tcpu = \"k6\";\n+      break;\n+    case PROCESSOR_ATHLON:\n+      if (has_sse)\n+\tcpu = \"athlon-4\";\n+      else\n+\tcpu = \"athlon\";\n+      break;\n+    case PROCESSOR_PENTIUM4:\n       if (has_sse3)\n-        {\n+\t{\n \t  if (has_longmode)\n \t    cpu = \"nocona\";\n-\t  else \n-            cpu = \"prescott\";\n+\t  else\n+\t    cpu = \"prescott\";\n \t}\n+      else\n+\tcpu = \"pentium4\";\n+      break;\n+    case PROCESSOR_K8:\n+      cpu = \"k8\";\n+      break;\n+    case PROCESSOR_NOCONA:\n+      cpu = \"nocona\";\n+      break;\n+    case PROCESSOR_GENERIC32:\n+    case PROCESSOR_GENERIC64:\n+      cpu = \"generic\";\n+      break;\n+    default:\n+      abort ();\n+      break;\n     }\n \n done:\n@@ -165,6 +283,25 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n    default value.  */\n const char *host_detect_local_cpu (int argc, const char **argv)\n {\n-  return concat (\"-m\", argv[0], \"=i386\", NULL);\n+  const char *cpu;\n+  bool arch;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  arch = strcmp (argv[0], \"arch\") == 0;\n+  if (!arch && strcmp (argv[0], \"tune\"))\n+    return NULL;\n+  \n+  if (arch)\n+    {\n+      /* FIXME: i386 is wrong for 64bit compiler.  How can we tell if\n+\t we are generating 64bit or 32bit code?  */\n+      cpu = \"i386\";\n+    }\n+  else\n+    cpu = \"generic\";\n+\n+  return concat (\"-m\", argv[0], \"=\", cpu, NULL);\n }\n #endif /* GCC_VERSION */"}, {"sha": "78b963b7ab26da77f1b1ee427af2aa73f960951f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "patch": "@@ -356,7 +356,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1\n #else\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1 \\\n-\"%{march=native:%<march=native %:local_cpu_detect(arch)} \\\n+\"%{march=native:%<march=native %:local_cpu_detect(arch) \\\n+  %{!mtune=*:%<mtune=native %:local_cpu_detect(tune)}} \\\n %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n #endif\n #endif"}, {"sha": "e156bcde3c961b07c41b38a42e284c428182bfc5", "filename": "gcc/config/i386/x-i386", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2Fconfig%2Fi386%2Fx-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edccdcb19865cdc271cf2eead76d8aebc7ca89d3/gcc%2Fconfig%2Fi386%2Fx-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-i386?ref=edccdcb19865cdc271cf2eead76d8aebc7ca89d3", "patch": "@@ -1,3 +1,3 @@\n driver-i386.o : $(srcdir)/config/i386/driver-i386.c \\\n-  $(CONFIG_H) $(SYSTEM_H)\n+  $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}