{"sha": "4f4753914455ad186f7c1f994743abfcb05a7dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0NzUzOTE0NDU1YWQxODZmN2MxZjk5NDc0M2FiZmNiMDVhN2RjOQ==", "commit": {"author": {"name": "Andrew Waterman", "email": "andrew@sifive.com", "date": "2019-04-30T23:45:36Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-04-30T23:45:36Z"}, "message": "RISC-V: Short-forward-branch opt for SiFive 7 series cores.\n\n\tgcc/\n\t* config/riscv/constraints.md (L): New.\n\t* config/riscv/predicates.md (lui_operand): New.\n\t(sfb_alu_operand): New.\n\t* config/riscv/riscv-protos.h (riscv_expand_conditional_move): Declare.\n\t* config/riscv/riscv.c (riscv_expand_conditional_move): New.\n\t* config/riscv/riscv.h (TARGET_SFB_ALU): New.\n\t* config/riscv/risc.md (type): Add sfb_alu.\n\t(branch<mode>): Renamed from branch_order<mode>.  Change predicate for\n\toperand 3 to reg_or_0_operand.  In output string, change %3 to %z3.\n\t(branch_zero<mode>): Delete.\n\t(mov<mode>cc): New.\n\t(mov<GPR:mode><X:mode>cc): Likewise.\n\t* config/riscv/sifive-7.md (sifive_7_sfb_alu): New.  Use in bypasses.\n\nFrom-SVN: r270758", "tree": {"sha": "ea27d5dc06f14353730b400aa7f7976d21608cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea27d5dc06f14353730b400aa7f7976d21608cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f4753914455ad186f7c1f994743abfcb05a7dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4753914455ad186f7c1f994743abfcb05a7dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4753914455ad186f7c1f994743abfcb05a7dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4753914455ad186f7c1f994743abfcb05a7dc9/comments", "author": {"login": "aswaterman", "id": 1031106, "node_id": "MDQ6VXNlcjEwMzExMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1031106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aswaterman", "html_url": "https://github.com/aswaterman", "followers_url": "https://api.github.com/users/aswaterman/followers", "following_url": "https://api.github.com/users/aswaterman/following{/other_user}", "gists_url": "https://api.github.com/users/aswaterman/gists{/gist_id}", "starred_url": "https://api.github.com/users/aswaterman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aswaterman/subscriptions", "organizations_url": "https://api.github.com/users/aswaterman/orgs", "repos_url": "https://api.github.com/users/aswaterman/repos", "events_url": "https://api.github.com/users/aswaterman/events{/privacy}", "received_events_url": "https://api.github.com/users/aswaterman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "598f50d7891b420331f2027e60ba63824d335bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598f50d7891b420331f2027e60ba63824d335bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598f50d7891b420331f2027e60ba63824d335bad"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "805ab8aa5c0e748c1bcb14ed196614c103c66ea8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -1,3 +1,19 @@\n+2019-04-30  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/constraints.md (L): New.\n+\t* config/riscv/predicates.md (lui_operand): New.\n+\t(sfb_alu_operand): New.\n+\t* config/riscv/riscv-protos.h (riscv_expand_conditional_move): Declare.\n+\t* config/riscv/riscv.c (riscv_expand_conditional_move): New.\n+\t* config/riscv/riscv.h (TARGET_SFB_ALU): New.\n+\t* config/riscv/risc.md (type): Add sfb_alu.\n+\t(branch<mode>): Renamed from branch_order<mode>.  Change predicate for\n+\toperand 3 to reg_or_0_operand.  In output string, change %3 to %z3.\n+\t(branch_zero<mode>): Delete.\n+\t(mov<mode>cc): New.\n+\t(mov<GPR:mode><X:mode>cc): Likewise.\n+\t* config/riscv/sifive-7.md (sifive_7_sfb_alu): New.  Use in bypasses.\n+\n 2019-04-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* tree.h (MARK_TS_EXP): New."}, {"sha": "40faf0e0380462ab97c176693a4ed3dc6eca16d4", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -49,6 +49,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (ival, 0, 31)\")))\n \n+(define_constraint \"L\"\n+  \"A U-type 20-bit signed immediate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"LUI_OPERAND (ival)\")))\n+\n ;; Floating-point constant +0.0, used for FCVT-based moves when FMV is\n ;; not available in RV32.\n (define_constraint \"G\""}, {"sha": "aa5e1327dd538e0cb1abb1646607c6c307837f17", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -27,6 +27,14 @@\n   (ior (match_operand 0 \"const_arith_operand\")\n        (match_operand 0 \"register_operand\")))\n \n+(define_predicate \"lui_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"LUI_OPERAND (INTVAL (op))\")))\n+\n+(define_predicate \"sfb_alu_operand\"\n+  (ior (match_operand 0 \"arith_operand\")\n+       (match_operand 0 \"lui_operand\")))\n+\n (define_predicate \"const_csr_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 0, 31)\")))"}, {"sha": "69e39f7a2083e62bfd8c045accf8f541c5b752e1", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -59,6 +59,7 @@ extern const char *riscv_output_return ();\n extern void riscv_expand_int_scc (rtx, enum rtx_code, rtx, rtx);\n extern void riscv_expand_float_scc (rtx, enum rtx_code, rtx, rtx);\n extern void riscv_expand_conditional_branch (rtx, enum rtx_code, rtx, rtx);\n+extern void riscv_expand_conditional_move (rtx, rtx, rtx, rtx_code, rtx, rtx);\n #endif\n extern rtx riscv_legitimize_call_address (rtx);\n extern void riscv_set_return_address (rtx, rtx);"}, {"sha": "3f66b9d8487e183fa815335c9a50c1d4445f0063", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -2324,6 +2324,18 @@ riscv_expand_conditional_branch (rtx label, rtx_code code, rtx op0, rtx op1)\n   emit_jump_insn (gen_condjump (condition, label));\n }\n \n+/* If (CODE OP0 OP1) holds, move CONS to DEST; else move ALT to DEST.  */\n+\n+void\n+riscv_expand_conditional_move (rtx dest, rtx cons, rtx alt, rtx_code code,\n+\t\t\t       rtx op0, rtx op1)\n+{\n+  riscv_emit_int_compare (&code, &op0, &op1);\n+  rtx cond = gen_rtx_fmt_ee (code, GET_MODE (op0), op0, op1);\n+  emit_insn (gen_rtx_SET (dest, gen_rtx_IF_THEN_ELSE (GET_MODE (dest), cond,\n+\t\t\t\t\t\t      cons, alt)));\n+}\n+\n /* Implement TARGET_FUNCTION_ARG_BOUNDARY.  Every parameter gets at\n    least PARM_BOUNDARY bits of alignment, but will be given anything up\n    to PREFERRED_STACK_BOUNDARY bits if the type requires it.  */"}, {"sha": "4edd2a6019477d9cee27021d7c7f9f199e31b693", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -662,6 +662,17 @@ typedef struct {\n #define BRANCH_COST(speed_p, predictable_p) \\\n   ((!(speed_p) || (predictable_p)) ? 2 : riscv_branch_cost)\n \n+/* True if the target optimizes short forward branches around integer\n+   arithmetic instructions into predicated operations, e.g., for\n+   conditional-move operations.  The macro assumes that all branch\n+   instructions (BEQ, BNE, BLT, BLTU, BGE, BGEU, C.BEQZ, and C.BNEZ)\n+   support this feature.  The macro further assumes that any integer\n+   arithmetic and logical operation (ADD[I], SUB, SLL[I], SRL[I], SRA[I],\n+   SLT[I][U], AND[I], XOR[I], OR[I], LUI, AUIPC, and their compressed\n+   counterparts, including C.MV and C.LI) can be in the branch shadow.  */\n+\n+#define TARGET_SFB_ALU (riscv_microarchitecture == sifive_7)\n+\n #define LOGICAL_OP_NON_SHORT_CIRCUIT 0\n \n /* Control the assembler format that we output.  */"}, {"sha": "8b21c1963d7d226d33d3dc8efd7da4c91e4cafc3", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -156,7 +156,7 @@\n (define_attr \"type\"\n   \"unknown,branch,jump,call,load,fpload,store,fpstore,\n    mtc,mfc,const,arith,logical,shift,slt,imul,idiv,move,fmove,fadd,fmul,\n-   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,nop,ghost\"\n+   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,sfb_alu,nop,ghost\"\n   (cond [(eq_attr \"got\" \"load\") (const_string \"load\")\n \n \t ;; If a doubleword move uses these expensive instructions,\n@@ -1804,31 +1804,52 @@\n \n ;; Conditional branches\n \n-(define_insn \"*branch_order<mode>\"\n+(define_insn \"*branch<mode>\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"order_operator\"\n \t\t\t [(match_operand:X 2 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:X 3 \"register_operand\" \"r\")])\n+\t\t\t  (match_operand:X 3 \"reg_or_0_operand\" \"rJ\")])\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"b%C1\\t%2,%3,%0\"\n+  \"b%C1\\t%2,%z3,%0\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"mode\" \"none\")])\n \n-(define_insn \"*branch_zero<mode>\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 1 \"signed_order_operator\"\n-\t\t\t [(match_operand:X 2 \"register_operand\" \"r\")\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n-\t (pc)))]\n-  \"\"\n-  \"b%C1z\\t%2,%0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"mode\" \"none\")])\n+;; Patterns for implementations that optimize short forward branches.\n+\n+(define_expand \"mov<mode>cc\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(if_then_else:GPR (match_operand 1 \"comparison_operator\")\n+\t\t\t  (match_operand:GPR 2 \"register_operand\")\n+\t\t\t  (match_operand:GPR 3 \"sfb_alu_operand\")))]\n+  \"TARGET_SFB_ALU\"\n+{\n+  rtx cmp = operands[1];\n+  /* We only handle word mode integer compares for now.  */\n+  if (GET_MODE (XEXP (cmp, 0)) != word_mode)\n+    FAIL;\n+  riscv_expand_conditional_move (operands[0], operands[2], operands[3],\n+\t\t\t\t GET_CODE (cmp), XEXP (cmp, 0), XEXP (cmp, 1));\n+  DONE;\n+})\n+\n+(define_insn \"*mov<GPR:mode><X:mode>cc\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:GPR\n+\t (match_operator 5 \"order_operator\"\n+\t\t[(match_operand:X 1 \"register_operand\" \"r,r\")\n+\t\t (match_operand:X 2 \"reg_or_0_operand\" \"rJ,rJ\")])\n+\t (match_operand:GPR 3 \"register_operand\" \"0,0\")\n+\t (match_operand:GPR 4 \"sfb_alu_operand\" \"rJ,IL\")))]\n+  \"TARGET_SFB_ALU\"\n+  \"@\n+   b%C5 %1,%z2,1f; mv %0,%z4; 1: # movcc\n+   b%C5 %1,%z2,1f; li %0,%4; 1: # movcc\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"sfb_alu\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n \n ;; Used to implement built-in functions.\n (define_expand \"condjump\""}, {"sha": "526278e46d492dbf9b040fdbb8ce56fc89f77a8b", "filename": "gcc/config/riscv/sifive-7.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Fsifive-7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4753914455ad186f7c1f994743abfcb05a7dc9/gcc%2Fconfig%2Friscv%2Fsifive-7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fsifive-7.md?ref=4f4753914455ad186f7c1f994743abfcb05a7dc9", "patch": "@@ -37,6 +37,11 @@\n        (eq_attr \"type\" \"branch\"))\n   \"sifive_7_B\")\n \n+(define_insn_reservation \"sifive_7_sfb_alu\" 2\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"sfb_alu\"))\n+  \"sifive_7_A+sifive_7_B\")\n+\n (define_insn_reservation \"sifive_7_jump\" 1\n   (and (eq_attr \"tune\" \"sifive_7\")\n        (eq_attr \"type\" \"jump,call\"))\n@@ -101,10 +106,13 @@\n        (eq_attr \"type\" \"mfc\"))\n   \"sifive_7_A\")\n \n-(define_bypass 1 \"sifive_7_load,sifive_7_alu,sifive_7_mul,sifive_7_f2i\"\n+(define_bypass 1 \"sifive_7_load,sifive_7_alu,sifive_7_mul,sifive_7_f2i,sifive_7_sfb_alu\"\n   \"sifive_7_alu,sifive_7_branch\")\n \n-(define_bypass 1 \"sifive_7_load,sifive_7_alu,sifive_7_mul,sifive_7_f2i\"\n+(define_bypass 1 \"sifive_7_alu,sifive_7_sfb_alu\"\n+  \"sifive_7_sfb_alu\")\n+\n+(define_bypass 1 \"sifive_7_load,sifive_7_alu,sifive_7_mul,sifive_7_f2i,sifive_7_sfb_alu\"\n   \"sifive_7_store\" \"riscv_store_data_bypass_p\")\n \n (define_bypass 2 \"sifive_7_i2f\""}]}