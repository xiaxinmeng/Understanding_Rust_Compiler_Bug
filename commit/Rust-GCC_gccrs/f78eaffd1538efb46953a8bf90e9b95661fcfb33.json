{"sha": "f78eaffd1538efb46953a8bf90e9b95661fcfb33", "node_id": "C_kwDOANBUbNoAKGY3OGVhZmZkMTUzOGVmYjQ2OTUzYThiZjkwZTliOTU2NjFmY2ZiMzM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-18T20:04:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-12-03T22:21:12Z"}, "message": "c++: avoid redundant scope in diagnostics\n\nWe can make some function signatures shorter to print by omitting redundant\nnested-name-specifiers in the rest of the declarator.\n\ngcc/cp/ChangeLog:\n\n\t* error.c (current_dump_scope): New variable.\n\t(dump_scope): Check it.\n\t(dump_function_decl): Set it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/diagnostic/scope1.C: New test.", "tree": {"sha": "a595c47d41da9f60490e44bfd4fba9ecdfc938f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a595c47d41da9f60490e44bfd4fba9ecdfc938f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f78eaffd1538efb46953a8bf90e9b95661fcfb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78eaffd1538efb46953a8bf90e9b95661fcfb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78eaffd1538efb46953a8bf90e9b95661fcfb33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78eaffd1538efb46953a8bf90e9b95661fcfb33/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfe82e5a850621f86867072022536c3f717d54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfe82e5a850621f86867072022536c3f717d54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfe82e5a850621f86867072022536c3f717d54c"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "daea3b39a15cf4bfc1803a23d03e7f8988ec1f96", "filename": "gcc/cp/error.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78eaffd1538efb46953a8bf90e9b95661fcfb33/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78eaffd1538efb46953a8bf90e9b95661fcfb33/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=f78eaffd1538efb46953a8bf90e9b95661fcfb33", "patch": "@@ -211,14 +211,18 @@ dump_module_suffix (cxx_pretty_printer *pp, tree decl)\n       }\n }\n \n+/* The scope of the declaration we're currently printing, to avoid redundantly\n+   dumping the same scope on parameter types.  */\n+static tree current_dump_scope;\n+\n /* Dump a scope, if deemed necessary.  */\n \n static void\n dump_scope (cxx_pretty_printer *pp, tree scope, int flags)\n {\n   int f = flags & (TFF_SCOPE | TFF_CHASE_TYPEDEF);\n \n-  if (scope == NULL_TREE)\n+  if (scope == NULL_TREE || scope == current_dump_scope)\n     return;\n \n   /* Enum values within an unscoped enum will be CONST_DECL with an\n@@ -1756,6 +1760,10 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n   else\n     dump_scope (pp, CP_DECL_CONTEXT (t), flags);\n \n+  /* Name lookup for the rest of the function declarator is implicitly in the\n+     scope of the function, so avoid printing redundant scope qualifiers.  */\n+  auto cds = make_temp_override (current_dump_scope, CP_DECL_CONTEXT (t));\n+\n   dump_function_name (pp, t, dump_function_name_flags);\n \n   if (!(flags & TFF_NO_FUNCTION_ARGUMENTS))"}, {"sha": "14d0a1bfab6824c87a97edca13fed06979ba889e", "filename": "gcc/testsuite/g++.dg/diagnostic/scope1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78eaffd1538efb46953a8bf90e9b95661fcfb33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78eaffd1538efb46953a8bf90e9b95661fcfb33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fscope1.C?ref=f78eaffd1538efb46953a8bf90e9b95661fcfb33", "patch": "@@ -0,0 +1,12 @@\n+// Test for avoiding redundant scope qualifiers.\n+\n+struct A\n+{\n+  struct B { };\n+  static void f(B,B);\t\t// { dg-message {A::f\\(B, B\\)} }\n+};\n+\n+int main()\n+{\n+  A::f(42);\t\t\t// { dg-error \"no match\" }\n+}"}]}