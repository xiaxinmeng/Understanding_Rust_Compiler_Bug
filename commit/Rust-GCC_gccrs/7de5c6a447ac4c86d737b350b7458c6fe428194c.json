{"sha": "7de5c6a447ac4c86d737b350b7458c6fe428194c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlNWM2YTQ0N2FjNGM4NmQ3MzdiMzUwYjc0NThjNmZlNDI4MTk0Yw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-10-23T03:24:06Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-10-23T03:24:06Z"}, "message": "re PR tree-optimization/33834 (ICE in vect_get_vec_def_for_operand, at tree-vect-transform.c:1829)\n\n        PR tree-optimization/33834\n        PR tree-optimization/33835\n        * tree-vect-analyze.c (vect_analyze_operations): RELEVANT and LIVE stmts\n        need to be checked for success seperately.\n        * tree-vect-transform.c (vectorizable_call, vectorizable_conversion):\n        Remove the check that stmt is not LIVE.\n        (vectorizable_assignment, vectorizable_induction): Likewise.\n        (vectorizable_operation, vectorizable_type_demotion): Likewise.\n        (vectorizable_type_promotion, vectorizable_load, vectorizable_store):\n        Likewise.\n        (vectorizable_live_operation): Check that op is not NULL.\n\nFrom-SVN: r129571", "tree": {"sha": "db2eee15afd72fa434218c912f0986a5697a1aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db2eee15afd72fa434218c912f0986a5697a1aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7de5c6a447ac4c86d737b350b7458c6fe428194c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de5c6a447ac4c86d737b350b7458c6fe428194c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de5c6a447ac4c86d737b350b7458c6fe428194c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de5c6a447ac4c86d737b350b7458c6fe428194c/comments", "author": null, "committer": null, "parents": [{"sha": "fc629e9660f855d8ff75f366c2ff7a222544193d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc629e9660f855d8ff75f366c2ff7a222544193d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc629e9660f855d8ff75f366c2ff7a222544193d"}], "stats": {"total": 252, "additions": 176, "deletions": 76}, "files": [{"sha": "390ed0db2e643b57f6e2ecc6834766c718fa8ff7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -1,3 +1,17 @@\n+2007-10-22  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/33834\n+\tPR tree-optimization/33835\n+\t* tree-vect-analyze.c (vect_analyze_operations): RELEVANT and LIVE stmts\n+\tneed to be checked for success seperately.\n+\t* tree-vect-transform.c (vectorizable_call, vectorizable_conversion):\n+\tRemove the check that stmt is not LIVE.\n+\t(vectorizable_assignment, vectorizable_induction): Likewise.\n+\t(vectorizable_operation, vectorizable_type_demotion): Likewise.\n+\t(vectorizable_type_promotion, vectorizable_load, vectorizable_store):\n+\tLikewise.\n+\t(vectorizable_live_operation): Check that op is not NULL. \n+\n 2007-10-22  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/invoke.texi (Optimization Options): In the summary, show"}, {"sha": "ecc4e8010a00101ccbe51047a508d72e62a3d1cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -1,3 +1,12 @@\n+2007-10-22  Martin Michlmayr <tbm@cyrius.com>\t\n+\t    Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/33834\n+\tPR tree-optimization/33835\n+\t* g++.dg/vect/pr33834_1.cc: New test.\n+\t* g++.dg/vect/pr33834_2.cc: New test.\n+\t* g++.dg/vect/pr33835.cc: New test.\n+\n 2007-10-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/pr33644.c: New test."}, {"sha": "715ff0dda5051bdf769fb5467b01f5a3cf5384b8", "filename": "gcc/testsuite/g++.dg/vect/pr33834_1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33834_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33834_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33834_1.cc?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+\n+extern double cos (double x);\n+extern double sin (double x);\n+\n+class bend_class\n+{\n+  double *s_A;\n+public:\n+  void set_s_A (double s_A0)\n+  {\n+    s_A[0] = s_A0;\n+  }\n+};\n+class bend_set\n+{\n+  bend_class *bend_array;\n+public:\n+  void set_s_A (int index, double s_A0)\n+  {\n+    bend_array[index].set_s_A (s_A0);\n+  }\n+  void compute_s (void)\n+  {\n+    int i, j;\n+    double val;\n+    double tmp[3];\n+    for (i = 0; i < 5; ++i)\n+    {\n+      val = i;\n+      for (j = 0; j < 2; ++j)\n+        tmp[j] = cos (val);\n+      set_s_A (i, tmp[0]);\n+      tmp[j] = cos (val) / sin (val);\n+    }\n+  }\n+};\n+class internals\n+{\n+  bend_set bend;\n+  void compute_s (void);\n+};\n+void\n+internals::compute_s (void)\n+{\n+  bend.compute_s ();\n+}\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1230ca31441373c746c2a9c2ad0c9b8542859286", "filename": "gcc/testsuite/g++.dg/vect/pr33834_2.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33834_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33834_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33834_2.cc?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftree-vectorize\" } */\n+\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+\n+extern int sscanf (__const char *__restrict __s,\n+                  __const char *__restrict __format, ...);\n+unsigned char got_elevation_pattern;\n+struct site\n+{\n+  float antenna_pattern[361][1001];\n+}\n+LR;\n+void\n+LoadPAT (char *filename)\n+{\n+  int x, y;\n+  char string[255];\n+  float elevation, amplitude, elevation_pattern[361][1001];\n+  for (x = 0; filename[x] != '.' ; x++)\n+    sscanf (string, \"%f %f\", &elevation, &amplitude);\n+  for (y = 0; y <= 1000; y++)\n+  {\n+    if (got_elevation_pattern)\n+      elevation = elevation_pattern[x][y];\n+    else\n+      elevation = 1.0;\n+    LR.antenna_pattern[x][y] = elevation;\n+  }\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1ab4c7e8d3d90b85110c309d61999e9654e38a9b", "filename": "gcc/testsuite/g++.dg/vect/pr33835.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33835.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33835.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33835.cc?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+\n+extern double cos (double x);\n+\n+class bend_class\n+{\n+  double *s_A;\n+public:\n+  void set_s_A (double s_A0)\n+  {\n+    s_A[0] = s_A0;\n+  }\n+};\n+class bend_set\n+{\n+  bend_class *bend_array;\n+public:\n+  void set_s_A (int index, double s_A0)\n+  {\n+    bend_array[index].set_s_A (s_A0);\n+  }\n+  void compute_s (void)\n+  {\n+    int i, j;\n+    double val;\n+    double tmp[3];\n+    for (i = 0; i < 5; ++i)\n+    {\n+      val = i;\n+      for (j = 0; j < 2; ++j)\n+        tmp[j] = cos (val);\n+      set_s_A (i, tmp[0]);\n+      tmp[j] = cos (val);\n+    }\n+  }\n+};\n+class internals\n+{\n+  bend_set bend;\n+  void compute_s (void);\n+};\n+void\n+internals::compute_s (void)\n+{\n+  bend.compute_s ();\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b91fbc05bb97b1ad9adfe2e712e0aa6918f641fa", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -482,7 +482,10 @@ vect_analyze_operations (loop_vec_info loop_vinfo)\n \t      need_to_vectorize = true;\n \t    }\n \n-\t  ok = (vectorizable_type_promotion (stmt, NULL, NULL)\n+\t  ok = true;\n+\t  if (STMT_VINFO_RELEVANT_P (stmt_info)\n+\t      || STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def)\n+\t    ok = (vectorizable_type_promotion (stmt, NULL, NULL)\n \t\t|| vectorizable_type_demotion (stmt, NULL, NULL)\n \t\t|| vectorizable_conversion (stmt, NULL, NULL, NULL)\n \t\t|| vectorizable_operation (stmt, NULL, NULL, NULL)\n@@ -493,17 +496,29 @@ vect_analyze_operations (loop_vec_info loop_vinfo)\n \t\t|| vectorizable_condition (stmt, NULL, NULL)\n \t\t|| vectorizable_reduction (stmt, NULL, NULL));\n \n+\t  if (!ok)\n+\t    {\n+\t      if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n+\t\t{\n+\t\t  fprintf (vect_dump, \"not vectorized: relevant stmt not \");\n+\t\t  fprintf (vect_dump, \"supported: \");\n+\t\t  print_generic_expr (vect_dump, stmt, TDF_SLIM);\n+\t\t}\n+\t      return false;\n+\t    }\n+\n \t  /* Stmts that are (also) \"live\" (i.e. - that are used out of the loop)\n \t     need extra handling, except for vectorizable reductions.  */\n \t  if (STMT_VINFO_LIVE_P (stmt_info)\n \t      && STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type) \n-\t    ok |= vectorizable_live_operation (stmt, NULL, NULL);\n+\t    ok = vectorizable_live_operation (stmt, NULL, NULL);\n \n \t  if (!ok)\n \t    {\n \t      if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n \t\t{\n-\t\t  fprintf (vect_dump, \"not vectorized: stmt not supported: \");\n+\t\t  fprintf (vect_dump, \"not vectorized: live stmt not \");\n+\t\t  fprintf (vect_dump, \"supported: \");\n \t\t  print_generic_expr (vect_dump, stmt, TDF_SLIM);\n \t\t}\n \t      return false;\n@@ -3250,7 +3265,8 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo)\n \t     inner-loop: *(BASE+INIT). (The first location is actually\n \t     BASE+INIT+OFFSET, but we add OFFSET separately later.  */\n \t  tree inner_base = build_fold_indirect_ref \n-\t\t\t\t(fold_build2 (PLUS_EXPR, TREE_TYPE (base), base, init));\n+\t\t\t\t(fold_build2 (PLUS_EXPR, \n+\t\t\t\t\t      TREE_TYPE (base), base, init));\n \n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    {"}, {"sha": "0578239083a322814482e438bf54c71b96df7c66", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de5c6a447ac4c86d737b350b7458c6fe428194c/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=7de5c6a447ac4c86d737b350b7458c6fe428194c", "patch": "@@ -2961,14 +2961,6 @@ vectorizable_call (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n   if (STMT_SLP_TYPE (stmt_info))\n     return false;\n \n-  /* FORNOW: not yet supported.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is STMT a vectorizable call?   */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n@@ -3307,14 +3299,6 @@ vectorizable_conversion (tree stmt, block_stmt_iterator *bsi,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      /* FORNOW: not yet supported.  */\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-\tfprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n \n@@ -3585,14 +3569,6 @@ vectorizable_assignment (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  /* FORNOW: not yet supported.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is vectorizable assignment?  */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n@@ -3702,14 +3678,6 @@ vectorizable_induction (tree phi, block_stmt_iterator *bsi ATTRIBUTE_UNUSED,\n \n   gcc_assert (STMT_VINFO_DEF_TYPE (stmt_info) == vect_induction_def);\n \n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      /* FORNOW: not yet supported.  */\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   if (TREE_CODE (phi) != PHI_NODE)\n     return false;\n \n@@ -3791,14 +3759,6 @@ vectorizable_operation (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  /* FORNOW: not yet supported.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is STMT a vectorizable binary/unary operation?   */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n@@ -4088,14 +4048,6 @@ vectorizable_type_demotion (tree stmt, block_stmt_iterator *bsi,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  /* FORNOW: not yet supported.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is STMT a vectorizable type-demotion operation?  */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n@@ -4249,14 +4201,6 @@ vectorizable_type_promotion (tree stmt, block_stmt_iterator *bsi,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  /* FORNOW: not yet supported.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is STMT a vectorizable type-promotion operation?  */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n@@ -4629,13 +4573,6 @@ vectorizable_store (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is vectorizable store? */\n \n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n@@ -5458,14 +5395,6 @@ vectorizable_load (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_loop_def)\n     return false;\n \n-  /* FORNOW: not yet supported.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info))\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"value used after loop.\");\n-      return false;\n-    }\n-\n   /* Is vectorizable load? */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n     return false;\n@@ -5893,7 +5822,7 @@ vectorizable_live_operation (tree stmt,\n   for (i = 0; i < op_type; i++)\n     {\n       op = TREE_OPERAND (operation, i);\n-      if (!vect_is_simple_use (op, loop_vinfo, &def_stmt, &def, &dt))\n+      if (op && !vect_is_simple_use (op, loop_vinfo, &def_stmt, &def, &dt))\n         {\n           if (vect_print_dump_info (REPORT_DETAILS))\n             fprintf (vect_dump, \"use not simple.\");"}]}