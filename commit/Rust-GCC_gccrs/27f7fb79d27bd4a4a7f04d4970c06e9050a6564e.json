{"sha": "27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmN2ZiNzlkMjdiZDRhNGE3ZjA0ZDQ5NzBjMDZlOTA1MGE2NTY0ZQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2020-11-13T16:47:40Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-11-16T11:52:14Z"}, "message": "gcov: Add -fprofile-info-section support\n\nRegister the profile information in the specified section instead of using a\nconstructor/destructor.  A pointer to the profile information generated by\n-fprofile-arcs or -ftest-coverage is placed in the specified section for each\ntranslation unit.  This option disables the profile information registration\nthrough a constructor and it disables the profile information processing\nthrough a destructor.\n\nI am not sure how I can test this option.  One approach would be to assemble a\ntest file, then scan it and check that a .gcov_info section is present and no\n__gcov_init() and __gcov_exit() calls are present.  Is there an example for\nthis in the test suite?\n\ngcc/\n\n\t* common.opt (fprofile-info-section): New.\n\t* coverage.c (build_gcov_info_var_registration): New.\n\t(coverage_obj_init): Evaluate profile_info_section and use\n\tbuild_gcov_info_var_registration().\n\t* doc/invoke.texi (fprofile-info-section): Document.\n\t* opts.c (common_handle_option): Process fprofile-info-section\n\toption.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/profile-info-section.c: New test.", "tree": {"sha": "4af8d2df27787d146b742cc8cde93ea3e668c084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4af8d2df27787d146b742cc8cde93ea3e668c084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a206abc6cbf0e992bf82bbb3584686eae05d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a206abc6cbf0e992bf82bbb3584686eae05d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a206abc6cbf0e992bf82bbb3584686eae05d34"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "fe39b3dee9f270dd39b3f69ff6a0e2e854058703", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "patch": "@@ -2272,6 +2272,14 @@ fprofile-generate=\n Common Joined RejectNegative\n Enable common options for generating profile info for profile feedback directed optimizations, and set -fprofile-dir=.\n \n+fprofile-info-section\n+Common RejectNegative\n+Register the profile information in the .gcov_info section instead of using a constructor/destructor.\n+\n+fprofile-info-section=\n+Common Joined RejectNegative Var(profile_info_section)\n+Register the profile information in the specified section instead of using a constructor/destructor.\n+\n fprofile-partial-training\n Common Report Var(flag_profile_partial_training) Optimization\n Do not assume that functions never executed during the train run are cold."}, {"sha": "d299e48d59186af247e1a78d5dffcf8bc1f62627", "filename": "gcc/coverage.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "patch": "@@ -1097,6 +1097,25 @@ build_gcov_exit_decl (void)\n   cgraph_build_static_cdtor ('D', dtor, priority);\n }\n \n+/* Generate the pointer to the gcov_info_var in a dedicated section.  */\n+\n+static void\n+build_gcov_info_var_registration (tree gcov_info_type)\n+{\n+  tree var = build_decl (BUILTINS_LOCATION,\n+\t\t\t VAR_DECL, NULL_TREE,\n+\t\t\t build_pointer_type (gcov_info_type));\n+  TREE_STATIC (var) = 1;\n+  TREE_READONLY (var) = 1;\n+  char name_buf[32];\n+  ASM_GENERATE_INTERNAL_LABEL (name_buf, \"LPBX\", 2);\n+  DECL_NAME (var) = get_identifier (name_buf);\n+  get_section (profile_info_section, SECTION_UNNAMED, NULL);\n+  set_decl_section_name (var, profile_info_section);\n+  DECL_INITIAL (var) = build_fold_addr_expr (gcov_info_var);\n+  varpool_node::finalize_decl (var);\n+}\n+\n /* Create the gcov_info types and object.  Generate the constructor\n    function to call __gcov_init.  Does not generate the initializer\n    for the object.  Returns TRUE if coverage data is being emitted.  */\n@@ -1151,8 +1170,13 @@ coverage_obj_init (void)\n   ASM_GENERATE_INTERNAL_LABEL (name_buf, \"LPBX\", 0);\n   DECL_NAME (gcov_info_var) = get_identifier (name_buf);\n \n-  build_init_ctor (gcov_info_type);\n-  build_gcov_exit_decl ();\n+  if (profile_info_section)\n+    build_gcov_info_var_registration (gcov_info_type);\n+  else\n+    {\n+      build_init_ctor (gcov_info_type);\n+      build_gcov_exit_decl ();\n+    }\n \n   return true;\n }"}, {"sha": "310c3f72a3fc625260a506c9280df2fd2e0b810b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "patch": "@@ -566,6 +566,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-p  -pg  -fprofile-arcs  --coverage  -ftest-coverage @gol\n -fprofile-abs-path @gol\n -fprofile-dir=@var{path}  -fprofile-generate  -fprofile-generate=@var{path} @gol\n+-fprofile-info-section  -fprofile-info-section=@var{name} @gol\n -fprofile-note=@var{path} -fprofile-prefix-path=@var{path} @gol\n -fprofile-update=@var{method} -fprofile-filter-files=@var{regex} @gol\n -fprofile-exclude-files=@var{regex} @gol\n@@ -14237,6 +14238,34 @@ the profile feedback data files. See @option{-fprofile-dir}.\n To optimize the program based on the collected profile information, use\n @option{-fprofile-use}.  @xref{Optimize Options}, for more information.\n \n+@item -fprofile-info-section\n+@itemx -fprofile-info-section=@var{name}\n+@opindex fprofile-info-section\n+\n+Register the profile information in the specified section instead of using a\n+constructor/destructor.  The section name is @var{name} if it is specified,\n+otherwise the section name defaults to @code{.gcov_info}.  A pointer to the\n+profile information generated by @option{-fprofile-arcs} or\n+@option{-ftest-coverage} is placed in the specified section for each\n+translation unit.  This option disables the profile information registration\n+through a constructor and it disables the profile information processing\n+through a destructor.  This option is not intended to be used in hosted\n+environments such as GNU/Linux.  It targets systems with limited resources\n+which do not support constructors and destructors.  The linker could collect\n+the input sections in a continuous memory block and define start and end\n+symbols.  The runtime support could dump the profiling information registered\n+in this linker set during program termination to a serial line for example.  A\n+GNU linker script example which defines a linker output section follows:\n+\n+@smallexample\n+  .gcov_info      :\n+  @{\n+    PROVIDE (__gcov_info_start = .);\n+    KEEP (*(.gcov_info))\n+    PROVIDE (__gcov_info_end = .);\n+  @}\n+@end smallexample\n+\n @item -fprofile-note=@var{path}\n @opindex fprofile-note\n "}, {"sha": "57774916a098425dd7a635e86610b1893b8a7907", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "patch": "@@ -2596,6 +2596,10 @@ common_handle_option (struct gcc_options *opts,\n       SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_bit_cp, value);\n       break;\n \n+    case OPT_fprofile_info_section:\n+      opts->x_profile_info_section = \".gcov_info\";\n+      break;\n+\n     case OPT_fpatchable_function_entry_:\n       {\n \tchar *patch_area_arg = xstrdup (arg);"}, {"sha": "c27fe17084e712578d7c561bb163fdf0afc7c475", "filename": "gcc/testsuite/gcc.dg/profile-info-section.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-info-section.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f7fb79d27bd4a4a7f04d4970c06e9050a6564e/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-info-section.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-info-section.c?ref=27f7fb79d27bd4a4a7f04d4970c06e9050a6564e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-fprofile-arcs -fprofile-info-section -fdump-tree-optimized\" } */\n+\n+int foo()\n+{\n+  return 0;\n+}\n+\n+int bar()\n+{\n+  return 1;\n+}\n+\n+int main ()\n+{\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__gcov_init\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__gcov_exit\" \"optimized\" } } */\n+/* { dg-final { scan-assembler \"\\.gcov_info\" } } */"}]}