{"sha": "225ab2b07b41d0f373efd574e962f90e8b73d46a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1YWIyYjA3YjQxZDBmMzczZWZkNTc0ZTk2MmY5MGU4YjczZDQ2YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-06-09T11:04:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-06-09T11:04:53Z"}, "message": "Add deduction guides for sequence containers (P0433R2, partial)\n\n\t* include/bits/forward_list.h (forward_list): Add deduction guide.\n\t* include/bits/stl_deque.h (deque): Likewise.\n\t* include/bits/stl_list.h (list): Likewise.\n\t* include/bits/stl_vector.h (vector): Likewise.\n\t* testsuite/23_containers/deque/cons/deduction.cc: New.\n\t* testsuite/23_containers/forward_list/cons/deduction.cc: New.\n\t* testsuite/23_containers/list/cons/deduction.cc: New.\n\t* testsuite/23_containers/vector/cons/deduction.cc: New.\n\nFrom-SVN: r249054", "tree": {"sha": "3e4807069bd45f0742af75d26dfd8ed795c0063e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e4807069bd45f0742af75d26dfd8ed795c0063e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/225ab2b07b41d0f373efd574e962f90e8b73d46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225ab2b07b41d0f373efd574e962f90e8b73d46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/225ab2b07b41d0f373efd574e962f90e8b73d46a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225ab2b07b41d0f373efd574e962f90e8b73d46a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a8cacc96f2b5c1df5be8af746f758006c11511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a8cacc96f2b5c1df5be8af746f758006c11511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a8cacc96f2b5c1df5be8af746f758006c11511"}], "stats": {"total": 330, "additions": 330, "deletions": 0}, "files": [{"sha": "6909a1fe84aab32d95a49f46864a37c5ae531913", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -1,3 +1,14 @@\n+2017-06-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/forward_list.h (forward_list): Add deduction guide.\n+\t* include/bits/stl_deque.h (deque): Likewise.\n+\t* include/bits/stl_list.h (list): Likewise.\n+\t* include/bits/stl_vector.h (vector): Likewise.\n+\t* testsuite/23_containers/deque/cons/deduction.cc: New.\n+\t* testsuite/23_containers/forward_list/cons/deduction.cc: New.\n+\t* testsuite/23_containers/list/cons/deduction.cc: New.\n+\t* testsuite/23_containers/vector/cons/deduction.cc: New.\n+\n 2017-06-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81017"}, {"sha": "f319b7f060700a8d1ab941376fafa8ba19fa5f34", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -1359,6 +1359,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    forward_list(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> forward_list<_ValT, _Allocator>;\n+#endif\n+\n   /**\n    *  @brief  Forward list equality comparison.\n    *  @param  __lx  A %forward_list"}, {"sha": "e03e7f5808f04f9d3621e3c965d79495c3412667", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -2242,6 +2242,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    deque(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> deque<_ValT, _Allocator>;\n+#endif\n \n   /**\n    *  @brief  Deque equality comparison."}, {"sha": "232885af79de82b9b471322fb54a6702b0e1ca1a", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -1867,6 +1867,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif\n     };\n+\n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    list(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> list<_ValT, _Allocator>;\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_CXX11\n \n   /**"}, {"sha": "7ee3ce9689004124dbd3c1a584043a000bbb892d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -1580,6 +1580,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    vector(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> vector<_ValT, _Allocator>;\n+#endif\n \n   /**\n    *  @brief  Vector equality comparison."}, {"sha": "c7c0f2e5ae18ef1afaba79fb95451667ce04e8f3", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/deduction.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fdeduction.cc?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <deque>\n+#include <testsuite_iterators.h>\n+\n+template<typename T>\n+  using input_iterator_seq\n+    = __gnu_test::test_container<T, __gnu_test::input_iterator_wrapper>;\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::deque<unsigned> s0;\n+\n+  std::deque s1 = s0;\n+  check_type<std::deque<unsigned>>(s1);\n+\n+  std::deque s2 = std::move(s0);\n+  check_type<std::deque<unsigned>>(s2);\n+\n+  const std::deque s3 = s0;\n+  check_type<const std::deque<unsigned>>(s3);\n+\n+  const std::deque s4 = s3;\n+  check_type<const std::deque<unsigned>>(s4);\n+}\n+\n+void\n+test02()\n+{\n+  unsigned a[1] = {};\n+  input_iterator_seq<unsigned> seq(a);\n+\n+  std::deque s1(seq.begin(), seq.end());\n+  check_type<std::deque<unsigned>>(s1);\n+\n+  std::deque s2(seq.begin(), seq.end(), std::allocator<unsigned>());\n+  check_type<std::deque<unsigned>>(s2);\n+\n+  std::deque s3(1U, 2L);\n+  check_type<std::deque<long>>(s3);\n+\n+  std::deque s4(1U, 2L, std::allocator<long>());\n+  check_type<std::deque<long>>(s4);\n+}"}, {"sha": "ee30288678f349527f3a172b3569d36d392938cd", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/deduction.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fdeduction.cc?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <forward_list>\n+#include <testsuite_iterators.h>\n+\n+template<typename T>\n+  using input_iterator_seq\n+    = __gnu_test::test_container<T, __gnu_test::input_iterator_wrapper>;\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::forward_list<unsigned> s0;\n+\n+  std::forward_list s1 = s0;\n+  check_type<std::forward_list<unsigned>>(s1);\n+\n+  std::forward_list s2 = std::move(s0);\n+  check_type<std::forward_list<unsigned>>(s2);\n+\n+  const std::forward_list s3 = s0;\n+  check_type<const std::forward_list<unsigned>>(s3);\n+\n+  const std::forward_list s4 = s3;\n+  check_type<const std::forward_list<unsigned>>(s4);\n+}\n+\n+void\n+test02()\n+{\n+  unsigned a[1] = {};\n+  input_iterator_seq<unsigned> seq(a);\n+\n+  std::forward_list s1(seq.begin(), seq.end());\n+  check_type<std::forward_list<unsigned>>(s1);\n+\n+  std::forward_list s2(seq.begin(), seq.end(), std::allocator<unsigned>());\n+  check_type<std::forward_list<unsigned>>(s2);\n+\n+  std::forward_list s3(1U, 2L);\n+  check_type<std::forward_list<long>>(s3);\n+\n+  std::forward_list s4(1U, 2L, std::allocator<long>());\n+  check_type<std::forward_list<long>>(s4);\n+}"}, {"sha": "c4df79526a80ac27e706ebeefc6c922105ae403f", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/deduction.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fdeduction.cc?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <list>\n+#include <testsuite_iterators.h>\n+\n+template<typename T>\n+  using input_iterator_seq\n+    = __gnu_test::test_container<T, __gnu_test::input_iterator_wrapper>;\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::list<unsigned> s0;\n+\n+  std::list s1 = s0;\n+  check_type<std::list<unsigned>>(s1);\n+\n+  std::list s2 = std::move(s0);\n+  check_type<std::list<unsigned>>(s2);\n+\n+  const std::list s3 = s0;\n+  check_type<const std::list<unsigned>>(s3);\n+\n+  const std::list s4 = s3;\n+  check_type<const std::list<unsigned>>(s4);\n+}\n+\n+void\n+test02()\n+{\n+  unsigned a[1] = {};\n+  input_iterator_seq<unsigned> seq(a);\n+\n+  std::list s1(seq.begin(), seq.end());\n+  check_type<std::list<unsigned>>(s1);\n+\n+  std::list s2(seq.begin(), seq.end(), std::allocator<unsigned>());\n+  check_type<std::list<unsigned>>(s2);\n+\n+  std::list s3(1U, 2L);\n+  check_type<std::list<long>>(s3);\n+\n+  std::list s4(1U, 2L, std::allocator<long>());\n+  check_type<std::list<long>>(s4);\n+}"}, {"sha": "413f02cc0cb94f93f1acca0475f49a0b6a1742fe", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/deduction.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ab2b07b41d0f373efd574e962f90e8b73d46a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdeduction.cc?ref=225ab2b07b41d0f373efd574e962f90e8b73d46a", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <vector>\n+#include <testsuite_iterators.h>\n+\n+template<typename T>\n+  using input_iterator_seq\n+    = __gnu_test::test_container<T, __gnu_test::input_iterator_wrapper>;\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::vector<unsigned> s0;\n+\n+  std::vector s1 = s0;\n+  check_type<std::vector<unsigned>>(s1);\n+\n+  std::vector s2 = std::move(s0);\n+  check_type<std::vector<unsigned>>(s2);\n+\n+  const std::vector s3 = s0;\n+  check_type<const std::vector<unsigned>>(s3);\n+\n+  const std::vector s4 = s3;\n+  check_type<const std::vector<unsigned>>(s4);\n+}\n+\n+void\n+test02()\n+{\n+  unsigned a[1] = {};\n+  input_iterator_seq<unsigned> seq(a);\n+\n+  std::vector s1(seq.begin(), seq.end());\n+  check_type<std::vector<unsigned>>(s1);\n+\n+  std::vector s2(seq.begin(), seq.end(), std::allocator<unsigned>());\n+  check_type<std::vector<unsigned>>(s2);\n+\n+  std::vector s3(1U, 2L);\n+  check_type<std::vector<long>>(s3);\n+\n+  std::vector s4(1U, 2L, std::allocator<long>());\n+  check_type<std::vector<long>>(s4);\n+}"}]}