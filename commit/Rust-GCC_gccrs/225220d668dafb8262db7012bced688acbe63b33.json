{"sha": "225220d668dafb8262db7012bced688acbe63b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1MjIwZDY2OGRhZmI4MjYyZGI3MDEyYmNlZDY4OGFjYmU2M2IzMw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-01-18T18:01:56Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-01-18T18:01:56Z"}, "message": "rs6000: Fix *movsi_from_df (PR88892)\n\nThe memory store instructions (stfs[u][x], stxssp[x]) can result in\ngarbage if the value to be stored isn't already a valid single\nprecision floating point number.  So we cannot use this here.\n\n\n\tPR target/88892\n\t* config/rs6000/rs6000.md (*movsi_from_df): Allow only register\n\toperands.\n\nFrom-SVN: r268083", "tree": {"sha": "c1ff1a80a7770c16c2227e30060fc5720fc23755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ff1a80a7770c16c2227e30060fc5720fc23755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/225220d668dafb8262db7012bced688acbe63b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225220d668dafb8262db7012bced688acbe63b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/225220d668dafb8262db7012bced688acbe63b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225220d668dafb8262db7012bced688acbe63b33/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b248c17bd9999eb3adb585b0789595bada43e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b248c17bd9999eb3adb585b0789595bada43e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b248c17bd9999eb3adb585b0789595bada43e8c"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "6559a27a9fcf96b7e3b2d6a25136d7a343dc5fa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225220d668dafb8262db7012bced688acbe63b33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225220d668dafb8262db7012bced688acbe63b33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=225220d668dafb8262db7012bced688acbe63b33", "patch": "@@ -1,3 +1,9 @@\n+2019-01-18  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/88892\n+\t* config/rs6000/rs6000.md (*movsi_from_df): Allow only register\n+\toperands.\n+\n 2019-01-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88903"}, {"sha": "344cfa778872d9f5d8ea4725a39558a95adba521", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225220d668dafb8262db7012bced688acbe63b33/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225220d668dafb8262db7012bced688acbe63b33/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=225220d668dafb8262db7012bced688acbe63b33", "patch": "@@ -7014,24 +7014,19 @@\n \t\t 8,          4\")])\n \n ;; Like movsi_from_sf, but combine a convert from DFmode to SFmode before\n-;; moving it to SImode.  We can do a SFmode store without having to do the\n-;; conversion explicitly.  If we are doing a register->register conversion, use\n-;; XSCVDPSP instead of XSCVDPSPN, since the former handles cases where the\n-;; input will not fit in a SFmode, and the later assumes the value has already\n-;; been rounded.\n+;; moving it to SImode.  We cannot do a SFmode store without having to do the\n+;; conversion explicitly since that doesn't work in most cases if the input\n+;; isn't representable as SF.  Use XSCVDPSP instead of XSCVDPSPN, since the\n+;; former handles cases where the input will not fit in a SFmode, and the\n+;; latter assumes the value has already been rounded.\n (define_insn \"*movsi_from_df\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=wa,m,wY,Z\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=wa\")\n \t(unspec:SI [(float_truncate:SF\n-\t\t     (match_operand:DF 1 \"gpc_reg_operand\" \"wa, f,wb,wa\"))]\n+\t\t     (match_operand:DF 1 \"gpc_reg_operand\" \"wa\"))]\n \t\t    UNSPEC_SI_FROM_SF))]\n-\n   \"TARGET_NO_SF_SUBREG\"\n-  \"@\n-   xscvdpsp %x0,%x1\n-   stfs%U0%X0 %1,%0\n-   stxssp %1,%0\n-   stxsspx %x1,%y0\"\n-  [(set_attr \"type\"   \"fp,fpstore,fpstore,fpstore\")])\n+  \"xscvdpsp %x0,%x1\"\n+  [(set_attr \"type\" \"fp\")])\n \n ;; Split a load of a large constant into the appropriate two-insn\n ;; sequence."}]}