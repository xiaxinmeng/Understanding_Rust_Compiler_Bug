{"sha": "b2a59b15891d92c62c133cb11c3cf92b4957ff44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhNTliMTU4OTFkOTJjNjJjMTMzY2IxMWMzY2Y5MmI0OTU3ZmY0NA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-12-14T00:00:20Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-12-14T00:00:20Z"}, "message": "function.c (identify_blocks): Start with a chain of BLOCKs to match the rest of the backend (dbxout.c)...\n\n\t* function.c (identify_blocks): Start with a chain of BLOCKs to\n\tmatch the rest of the backend (dbxout.c), instead of just one\n\tBLOCK.\n\t(reorder_blocks): Ditto.\n\t(all_blocks): Ditto.\n\n\t* stmt.c (find_loop_tree_blocks): Pass the toplevel list of\n\tblocks, not just the first subblock.\nFixes unroll1.C.\n\nFrom-SVN: r10712", "tree": {"sha": "b45b96066205616fd1bd9a97ac535029be41f8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45b96066205616fd1bd9a97ac535029be41f8ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a59b15891d92c62c133cb11c3cf92b4957ff44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a59b15891d92c62c133cb11c3cf92b4957ff44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a59b15891d92c62c133cb11c3cf92b4957ff44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a59b15891d92c62c133cb11c3cf92b4957ff44/comments", "author": null, "committer": null, "parents": [{"sha": "869b061cfae61d30a1d5fcedc1e70ddb522e0f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869b061cfae61d30a1d5fcedc1e70ddb522e0f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869b061cfae61d30a1d5fcedc1e70ddb522e0f7b"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "3433e19a364cab75478a9b64d90737e5fa68571c", "filename": "gcc/function.c", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a59b15891d92c62c133cb11c3cf92b4957ff44/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a59b15891d92c62c133cb11c3cf92b4957ff44/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b2a59b15891d92c62c133cb11c3cf92b4957ff44", "patch": "@@ -4532,33 +4532,34 @@ round_trampoline_addr (tramp)\n    duplicate portions of the RTL code.  Call identify_blocks before\n    changing the RTL, and call reorder_blocks after.  */\n \n-/* Put all this function's BLOCK nodes into a vector, and return it.\n+/* Put all this function's BLOCK nodes including those that are chained\n+   onto the first block into a vector, and return it.\n    Also store in each NOTE for the beginning or end of a block\n    the index of that block in the vector.\n-   The arguments are TOP_BLOCK, the top-level block of the function,\n+   The arguments are BLOCK, the chain of top-level blocks of the function,\n    and INSNS, the insn chain of the function.  */\n \n tree *\n-identify_blocks (top_block, insns)\n-     tree top_block;\n+identify_blocks (block, insns)\n+     tree block;\n      rtx insns;\n {\n   int n_blocks;\n   tree *block_vector;\n   int *block_stack;\n   int depth = 0;\n-  int next_block_number = 0;\n-  int current_block_number = 0;\n+  int next_block_number = 1;\n+  int current_block_number = 1;\n   rtx insn;\n \n-  if (top_block == 0)\n+  if (block == 0)\n     return 0;\n \n-  n_blocks = all_blocks (top_block, 0);\n+  n_blocks = all_blocks (block, 0);\n   block_vector = (tree *) xmalloc (n_blocks * sizeof (tree));\n   block_stack = (int *) alloca (n_blocks * sizeof (int));\n \n-  all_blocks (top_block, block_vector);\n+  all_blocks (block, block_vector);\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n     if (GET_CODE (insn) == NOTE)\n@@ -4576,6 +4577,9 @@ identify_blocks (top_block, insns)\n \t  }\n       }\n \n+  if (n_blocks != next_block_number)\n+    abort ();\n+\n   return block_vector;\n }\n \n@@ -4586,19 +4590,20 @@ identify_blocks (top_block, insns)\n    Returns the current top-level block.  */\n \n tree\n-reorder_blocks (block_vector, top_block, insns)\n+reorder_blocks (block_vector, block, insns)\n      tree *block_vector;\n-     tree top_block;\n+     tree block;\n      rtx insns;\n {\n-  tree current_block = top_block;\n+  tree current_block = block;\n   rtx insn;\n \n   if (block_vector == 0)\n-    return top_block;\n+    return block;\n \n-  /* Prune the old tree away, so that it doesn't get in the way.  */\n+  /* Prune the old trees away, so that it doesn't get in the way.  */\n   BLOCK_SUBBLOCKS (current_block) = 0;\n+  BLOCK_CHAIN (current_block) = 0;\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n     if (GET_CODE (insn) == NOTE)\n@@ -4626,6 +4631,8 @@ reorder_blocks (block_vector, top_block, insns)\n \t  }\n       }\n \n+  BLOCK_SUBBLOCKS (current_block)\n+    = blocks_nreverse (BLOCK_SUBBLOCKS (current_block));\n   return current_block;\n }\n \n@@ -4646,26 +4653,32 @@ blocks_nreverse (t)\n   return prev;\n }\n \n-/* Count the subblocks of BLOCK, and list them all into the vector VECTOR.\n-   Also clear TREE_ASM_WRITTEN in all blocks.  */\n+/* Count the subblocks of the list starting with BLOCK, and list them\n+   all into the vector VECTOR.  Also clear TREE_ASM_WRITTEN in all\n+   blocks.  */\n \n static int\n all_blocks (block, vector)\n      tree block;\n      tree *vector;\n {\n-  int n_blocks = 1;\n-  tree subblocks; \n-\n-  TREE_ASM_WRITTEN (block) = 0;\n-  /* Record this block.  */\n-  if (vector)\n-    vector[0] = block;\n-\n-  /* Record the subblocks, and their subblocks.  */\n-  for (subblocks = BLOCK_SUBBLOCKS (block);\n-       subblocks; subblocks = BLOCK_CHAIN (subblocks))\n-    n_blocks += all_blocks (subblocks, vector ? vector + n_blocks : 0);\n+  int n_blocks = 0;\n+\n+  while (block)\n+    {\n+      TREE_ASM_WRITTEN (block) = 0;\n+\n+      /* Record this block.  */\n+      if (vector)\n+\tvector[n_blocks] = block;\n+\n+      ++n_blocks;\n+      \n+      /* Record the subblocks, and their subblocks...  */\n+      n_blocks += all_blocks (BLOCK_SUBBLOCKS (block),\n+\t\t\t      vector ? vector + n_blocks : 0);\n+      block = BLOCK_CHAIN (block);\n+    }\n \n   return n_blocks;\n }"}, {"sha": "0bf6e5069a051e39b7c69008f47bbfc0bd365027", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a59b15891d92c62c133cb11c3cf92b4957ff44/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a59b15891d92c62c133cb11c3cf92b4957ff44/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b2a59b15891d92c62c133cb11c3cf92b4957ff44", "patch": "@@ -5866,10 +5866,6 @@ find_loop_tree_blocks ()\n {\n   tree block = DECL_INITIAL (current_function_decl);\n \n-  /* There first block is for the function body, and does not have\n-     corresponding block notes.  Don't include it in the block vector.  */\n-  block = BLOCK_SUBBLOCKS (block);\n-\n   block_vector = identify_blocks (block, get_insns ());\n }\n "}]}