{"sha": "85d625202998b5153d40cf1fbc36a400e8e013dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkNjI1MjAyOTk4YjUxNTNkNDBjZjFmYmMzNmE0MDBlOGUwMTNkZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-09-10T12:00:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-09-10T12:00:33Z"}, "message": "tree-tailcall.c (process_assignment): Only do accumulator transforms for floating-point types if...\n\n\t* tree-tailcall.c (process_assignment): Only do accumulator transforms\n\tfor floating-point types if flag_unsafe_math_optimizations.\n\nFrom-SVN: r87297", "tree": {"sha": "24cd45cd4c7f9788733ecbef21298e2e39bb35a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24cd45cd4c7f9788733ecbef21298e2e39bb35a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d625202998b5153d40cf1fbc36a400e8e013dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d625202998b5153d40cf1fbc36a400e8e013dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d625202998b5153d40cf1fbc36a400e8e013dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d625202998b5153d40cf1fbc36a400e8e013dd/comments", "author": null, "committer": null, "parents": [{"sha": "315fcf9741b611fa84902ae28b52863d0009da42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315fcf9741b611fa84902ae28b52863d0009da42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315fcf9741b611fa84902ae28b52863d0009da42"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "e44ffc55ad99e0c834ba81161fe05ae1b4eaf248", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85d625202998b5153d40cf1fbc36a400e8e013dd", "patch": "@@ -1,3 +1,8 @@\n+2004-09-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* tree-tailcall.c (process_assignment): Only do accumulator transforms\n+\tfor floating-point types if flag_unsafe_math_optimizations.\n+\n 2004-09-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/darwin.c, config/alpha/alpha.h, config/arm/arm.c,"}, {"sha": "80dd8b05c5d08d37393eb2bfc552b7c7acddc5c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85d625202998b5153d40cf1fbc36a400e8e013dd", "patch": "@@ -1,3 +1,9 @@\n+2004-09-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/ieee/acc1.c: New test.\n+\t* gcc.c-torture/execute/ieee/acc2.c: New test.\n+\t* gcc.c-torture/execute/ieee/mzero6.c: New test.\n+\n 2004-09-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/deprecated-2.c: New test."}, {"sha": "e0d969b9ddc9bdd29321f5f506c1281e446d64f2", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/acc1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Facc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Facc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Facc1.c?ref=85d625202998b5153d40cf1fbc36a400e8e013dd", "patch": "@@ -0,0 +1,18 @@\n+/* Tail call optimizations would reverse the order of additions in func().  */\n+\n+double func (const double *array)\n+{\n+  double d = *array;\n+  if (d == 0.0)\n+    return d;\n+  else\n+    return d + func (array + 1);\n+}\n+\n+int main ()\n+{\n+  double values[] = { 0.1e-100, 1.0, -1.0, 0.0 };\n+  if (func (values) != 0.1e-100)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "2a44c8a01a864bd710c9778cb115251ef106be2a", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/acc2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Facc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Facc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Facc2.c?ref=85d625202998b5153d40cf1fbc36a400e8e013dd", "patch": "@@ -0,0 +1,19 @@\n+/* Tail call optimizations would reverse the order of multiplications\n+   in func().  */\n+\n+double func (const double *array)\n+{\n+  double d = *array;\n+  if (d == 1.0)\n+    return d;\n+  else\n+    return d * func (array + 1);\n+}\n+\n+int main ()\n+{\n+  double values[] = { __DBL_MAX__, 2.0, 0.5, 1.0 };\n+  if (func (values) != __DBL_MAX__)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "59ba6fee15ad622f5f49a989b65489d58cd264fe", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/mzero6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero6.c?ref=85d625202998b5153d40cf1fbc36a400e8e013dd", "patch": "@@ -0,0 +1,24 @@\n+/* Tail call optimizations would convert func() into the moral equivalent of:\n+\n+       double acc = 0.0;\n+       for (int i = 0; i <= n; i++)\n+\t acc += d;\n+       return acc;\n+\n+   which mishandles the case where 'd' is -0.  They also initialised 'acc'\n+   to a zero int rather than a zero double.  */\n+\n+double func (double d, int n)\n+{\n+  if (n == 0)\n+    return d;\n+  else\n+    return d + func (d, n - 1);\n+}\n+\n+int main ()\n+{\n+  if (__builtin_copysign (1.0, func (0.0 / -5.0, 10)) != -1.0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "d6cfe4c49ed3d8fc0739029cdc24632bb6b60dae", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d625202998b5153d40cf1fbc36a400e8e013dd/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=85d625202998b5153d40cf1fbc36a400e8e013dd", "patch": "@@ -282,6 +282,13 @@ process_assignment (tree ass, tree stmt, block_stmt_iterator call, tree *m,\n   if (TREE_CODE_CLASS (code) != '2')\n     return false;\n \n+  /* Accumulator optimizations will reverse the order of operations.\n+     We can only do that for floating-point types if we're assuming\n+     that addition and multiplication are associative.  */\n+  if (!flag_unsafe_math_optimizations)\n+    if (FLOAT_TYPE_P (TREE_TYPE (DECL_RESULT (current_function_decl))))\n+      return false;\n+\n   /* We only handle the code like\n \n      x = call ();"}]}