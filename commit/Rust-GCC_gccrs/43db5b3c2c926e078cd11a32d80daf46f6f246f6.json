{"sha": "43db5b3c2c926e078cd11a32d80daf46f6f246f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkYjViM2MyYzkyNmUwNzhjZDExYTMyZDgwZGFmNDZmNmYyNDZmNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-12-16T16:23:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-12-16T16:23:46Z"}, "message": "diagnostic.c (finish_abort): Deleted.\n\nSat Dec 16 10:41:11 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* diagnostic.c (finish_abort): Deleted.\n\t(fatal): Add code from fninish_abort.\n\t(error_recursion, fancy_abort): Call fatal, not finish_abort.\n\t(trim_filename): Remove leading \"../\".\n\t* diagnostic.h (finish_abort): Deleted.\n\t* toplev.c (crash_signal): Call fatal, not finish_abort.\n\n\t* stor-layout.c (place_field): Treat overflowing DECL_SIZE_UNIT\n\tas if size were variable.\n\n\t* expmed.c (expand_mult): Write REG_EQUAL note with proper mode.\n\nFrom-SVN: r38309", "tree": {"sha": "2b73ee06c27e427c8e3f82920915cd292c624039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b73ee06c27e427c8e3f82920915cd292c624039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43db5b3c2c926e078cd11a32d80daf46f6f246f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43db5b3c2c926e078cd11a32d80daf46f6f246f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43db5b3c2c926e078cd11a32d80daf46f6f246f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43db5b3c2c926e078cd11a32d80daf46f6f246f6/comments", "author": null, "committer": null, "parents": [{"sha": "112550d37d28d2c074e24b0799bf8fa09fac4cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112550d37d28d2c074e24b0799bf8fa09fac4cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112550d37d28d2c074e24b0799bf8fa09fac4cb0"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "11591ec2ee525bdb3df3159ed8816bc6736b36f7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43db5b3c2c926e078cd11a32d80daf46f6f246f6/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43db5b3c2c926e078cd11a32d80daf46f6f246f6/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=43db5b3c2c926e078cd11a32d80daf46f6f246f6", "patch": "@@ -156,6 +156,7 @@ static int diagnostic_lock;\n \f\n /* Return truthvalue if current input file is different from the most recent\n    file involved in a diagnostic message.  */\n+\n int\n error_module_changed ()\n {\n@@ -164,20 +165,23 @@ error_module_changed ()\n \n /* Remember current file as being the most recent file involved in a\n    diagnostic message.  */\n+\n void\n record_last_error_module ()\n {\n   last_error_tick = input_file_stack_tick;\n }\n \n /* Same as error_module_changed, but for function.  */\n+\n int\n error_function_changed ()\n {\n   return last_error_function != current_function_decl;\n }\n \n /* Same as record_last_error_module, but for function.  */\n+\n void\n record_last_error_function ()\n {\n@@ -345,6 +349,7 @@ init_output_buffer (buffer, prefix, maximum_length)\n \n /* Initialize BUFFER with a NULL prefix and current diagnostic message\n    length cutoff.  */\n+\n void\n default_initialize_buffer (buffer)\n      output_buffer *buffer;\n@@ -365,6 +370,7 @@ reshape_diagnostic_buffer ()\n }\n \n /* Reinitialize BUFFER.  */\n+\n void\n output_clear (buffer)\n      output_buffer *buffer;\n@@ -623,6 +629,7 @@ wrap_text (buffer, start, end)\n }\n \n /* Same as wrap_text but wrap text only when in line-wrapping mode.  */\n+\n static void\n maybe_wrap_text (buffer, start, end)\n      output_buffer *buffer;\n@@ -828,6 +835,7 @@ build_message_string VPARAMS ((const char *msgid, ...))\n \n /* Return a malloc'd string describing a location.  The caller is\n    responsible for freeing the memory.  */\n+\n char *\n context_as_prefix (file, line, warn)\n      const char *file;\n@@ -851,6 +859,7 @@ context_as_prefix (file, line, warn)\n }\n \n /* Same as context_as_prefix, but only the source FILE is given.  */\n+\n char *\n file_name_as_prefix (f)\n      const char *f;\n@@ -1409,13 +1418,23 @@ fatal VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n+  if (errorcount > 1 || sorrycount > 0)\n+    {\n+      fprintf (stderr, \"confused by earlier errors, bailing out\\n\");\n+      exit (FATAL_EXIT_CODE);\n+    }\n+\n   if (fatal_function != 0)\n     (*fatal_function) (_(msgid), &ap);\n   \n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, /* warn = */0);\n   report_diagnostic (&dc);\n   va_end (ap);\n+\n+  fprintf\n+    (stderr, \"Please submit a full bug report.\\n See %s for instructions.\\n\",\n+     GCCBUGURL);\n   exit (FATAL_EXIT_CODE);\n }\n \n@@ -1533,6 +1552,7 @@ warning VPARAMS ((const char *msgid, ...))\n }\n \n /* Flush diagnostic_buffer content on stderr.  */\n+\n static void\n finish_diagnostic ()\n {\n@@ -1544,6 +1564,7 @@ finish_diagnostic ()\n \n /* Helper subroutine of output_verbatim and verbatim. Do the approriate\n    settings needed by BUFFER for a verbatim formatting.  */\n+\n static void\n output_do_verbatim (buffer, msg, args_ptr)\n      output_buffer *buffer;\n@@ -1563,6 +1584,7 @@ output_do_verbatim (buffer, msg, args_ptr)\n }\n \n /* Output MESSAGE verbatim into BUFFER.  */\n+\n void\n output_verbatim VPARAMS ((output_buffer *buffer, const char *msg, ...))\n {\n@@ -1582,6 +1604,7 @@ output_verbatim VPARAMS ((output_buffer *buffer, const char *msg, ...))\n }\n \n /* Same as above but use diagnostic_buffer.  */\n+\n void\n verbatim VPARAMS ((const char *msg, ...))\n {\n@@ -1604,6 +1627,7 @@ verbatim VPARAMS ((const char *msg, ...))\n    should implement their specific diagnostic handling modules.  The\n    front-end independent format specifiers are exactly those described\n    in the documentation of output_format.  */\n+\n void\n report_diagnostic (dc)\n      diagnostic_context *dc;\n@@ -1631,29 +1655,51 @@ report_diagnostic (dc)\n /* Inform the user that an error occurred while trying to report some\n    other error.  This indicates catastrophic internal inconsistencies,\n    so give up now.  But do try to flush out the previous error.  */\n+\n static void\n error_recursion ()\n {\n   if (diagnostic_lock < 3)\n     finish_diagnostic ();\n \n-  fputs (_(\"Internal compiler error: Error reporting routines re-entered.\\n\"),\n-\t stderr);\n-  finish_abort ();\n+  fatal (\"Internal compiler error: Error reporting routines re-entered.\");\n }\n \n /* Given a partial pathname as input, return another pathname that\n    shares no directory elements with the pathname of __FILE__.  This\n    is used by fancy_abort() to print `Internal compiler error in expr.c'\n    instead of `Internal compiler error in ../../GCC/gcc/expr.c'.  */\n+\n static const char *\n trim_filename (name)\n      const char *name;\n {\n   static const char this_file[] = __FILE__;\n   const char *p = name, *q = this_file;\n \n-  while (*p == *q && *p != 0 && *q != 0) p++, q++;\n+  /* First skip any \"../\" in each filename.  This allows us to give a proper\n+     reference to a file in a subdirectory.  */\n+  while (p[0] == '.' && p[1] == '.'\n+\t && (p[2] == DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t     || p[2] == DIR_SEPARATOR_2\n+#endif\n+\t     ))\n+    p += 3;\n+\n+  while (q[0] == '.' && q[1] == '.'\n+\t && (q[2] == DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t     || p[2] == DIR_SEPARATOR_2\n+#endif\n+\t     ))\n+    q += 3;\n+\n+  /* Now skip any parts the two filenames have in common.  */\n+  while (*p == *q && *p != 0 && *q != 0)\n+    p++, q++;\n+\n+  /* Now go backwards until the previous directory separator.  */\n   while (p > name && p[-1] != DIR_SEPARATOR\n #ifdef DIR_SEPARATOR_2\n \t && p[-1] != DIR_SEPARATOR_2\n@@ -1673,32 +1719,14 @@ fancy_abort (file, line, function)\n      int line;\n      const char *function;\n {\n-  error (\"Internal compiler error in %s, at %s:%d\",\n+  fatal (\"Internal compiler error in %s, at %s:%d\",\n \t function, trim_filename (file), line);\n-  finish_abort ();\n-}\n-\n-/* Finish reporting an internal compiler error.  If the only error we've\n-   seen is the current one, encourage the user to file a bug report;\n-   otherwise, fixing their code will probably avoid the crash.  */\n-\n-void\n-finish_abort ()\n-{\n-  if (errorcount > 1 || sorrycount > 0)\n-    fprintf (stderr, \"confused by earlier errors, bailing out\\n\");\n-  else\n-    fprintf (stderr, \"\\\n-Please submit a full bug report.\\n\\\n-See %s for instructions.\\n\",\n-\t   GCCBUGURL);\n-\n-  exit (FATAL_EXIT_CODE);\n }\n \n /* Setup DC for reporting a diagnostic MESSAGE (an error or a WARNING),\n    using arguments pointed to by ARGS_PTR, issued at a location specified\n    by FILE and LINE.  */\n+\n void\n set_diagnostic_context (dc, message, args_ptr, file, line, warn)\n      diagnostic_context *dc;"}, {"sha": "b64cb67385ad866f23abb2fb75cdf3d04f59cd66", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43db5b3c2c926e078cd11a32d80daf46f6f246f6/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43db5b3c2c926e078cd11a32d80daf46f6f246f6/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=43db5b3c2c926e078cd11a32d80daf46f6f246f6", "patch": "@@ -207,6 +207,5 @@ void record_last_error_module   PARAMS ((void));\n int error_function_changed      PARAMS ((void));\n void record_last_error_function PARAMS ((void));\n void report_problematic_module  PARAMS ((output_buffer *));     \n-void finish_abort\t\tPARAMS ((void)) ATTRIBUTE_NORETURN;\n \n #endif /* __GCC_DIAGNOSTIC_H__ */"}, {"sha": "1e98568d7b3151e86fb3271ae7cfa5c90988222d", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43db5b3c2c926e078cd11a32d80daf46f6f246f6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43db5b3c2c926e078cd11a32d80daf46f6f246f6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=43db5b3c2c926e078cd11a32d80daf46f6f246f6", "patch": "@@ -1698,8 +1698,7 @@ crash_signal (signo)\n      /* If this is missing, some compilers complain.  */\n      int signo;\n {\n-  error (\"Internal error: %s.\", strsignal (signo));\n-  finish_abort ();\n+  fatal (\"Internal error: %s.\", strsignal (signo));\n }\n \n /* Strip off a legitimate source ending from the input string NAME of"}]}