{"sha": "1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlMGIyNmU2ZTFlNmMzNDhiMWQ1NGYxZjQ2MmE0NGRmNmZlNDdmNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-26T13:40:32Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-26T18:14:30Z"}, "message": "Adjust ranges for to_upper and to_lower.\n\nExclude lower case chars from to_upper and upper case chars from to_lower.\n\n\tgcc/\n\tPR tree-optimization/78888\n\t* gimple-range-fold.cc (fold_using_range::range_of_builtin_call): Add cases\n\tfor CFN_BUILT_IN_TOUPPER and CFN_BUILT_IN_TOLOWER.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr78888.c: New.", "tree": {"sha": "585616944ff4855f91c893e3ebb4d0854bab097f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585616944ff4855f91c893e3ebb4d0854bab097f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5/comments", "author": null, "committer": null, "parents": [{"sha": "cf5f544227f16b63e224529190329eb0edca791c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5f544227f16b63e224529190329eb0edca791c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5f544227f16b63e224529190329eb0edca791c"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "8465b4a82f64fe703846a1705077e21371cd0352", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "patch": "@@ -868,6 +868,38 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n \t}\n       break;\n \n+    case CFN_BUILT_IN_TOUPPER:\n+      {\n+\targ = gimple_call_arg (call, 0);\n+\tif (!src.get_operand (r, arg))\n+\t  return false;\n+\t// Return the range passed in without any lower case characters,\n+\t// but including all the upper case ones.\n+\tint_range<2> exclude (build_int_cst (type, 'a'),\n+\t\t\t      build_int_cst (type, 'z'), VR_ANTI_RANGE);\n+\tr.intersect (exclude);\n+\tint_range<2> uppers (build_int_cst (type, 'A'),\n+\t\t\t      build_int_cst (type, 'Z'));\n+\tr.union_ (uppers);\n+\treturn true;\n+      }\n+\n+     case CFN_BUILT_IN_TOLOWER:\n+      {\n+\targ = gimple_call_arg (call, 0);\n+\tif (!src.get_operand (r, arg))\n+\t  return false;\n+\t// Return the range passed in without any upper case characters,\n+\t// but including all the lower case ones.\n+\tint_range<2> exclude (build_int_cst (type, 'A'),\n+\t\t\t      build_int_cst (type, 'Z'), VR_ANTI_RANGE);\n+\tr.intersect (exclude);\n+\tint_range<2> lowers (build_int_cst (type, 'a'),\n+\t\t\t      build_int_cst (type, 'z'));\n+\tr.union_ (lowers);\n+\treturn true;\n+      }\n+\n     CASE_CFN_FFS:\n     CASE_CFN_POPCOUNT:\n       // __builtin_ffs* and __builtin_popcount* return [0, prec]."}, {"sha": "77a130cf11c2285db1fd2ec48bff38df40f75859", "filename": "gcc/testsuite/gcc.dg/pr78888.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78888.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78888.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78888.c?ref=1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/78888 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void kill (void);\n+void keep (void);\n+\n+void g (int x)\n+{\n+  if (__builtin_toupper ((unsigned char)x) == 'a')\n+    kill ();\n+  if (__builtin_toupper ((unsigned char)x) == 'z')\n+    kill ();\n+  if (__builtin_tolower ((unsigned char)x) == 'A')\n+    kill ();\n+  if (__builtin_tolower ((unsigned char)x) == 'Z')\n+    kill ();\n+\n+  if (__builtin_toupper ((unsigned char)x) == 'A')\n+    keep ();\n+  if (__builtin_toupper ((unsigned char)x) == 'Z')\n+    keep ();\n+  if (__builtin_tolower ((unsigned char)x) == 'a')\n+    keep ();\n+  if (__builtin_tolower ((unsigned char)x) == 'z')\n+    keep ();\n+}\n+/* { dg-final { scan-tree-dump-not \"kill\" \"evrp\" } }  */\n+/* { dg-final { scan-tree-dump-times \"keep\" 4 \"evrp\"} } */"}]}