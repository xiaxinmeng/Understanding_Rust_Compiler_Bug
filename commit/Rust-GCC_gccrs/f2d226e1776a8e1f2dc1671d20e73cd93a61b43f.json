{"sha": "f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMjI2ZTE3NzZhOGUxZjJkYzE2NzFkMjBlNzNjZDkzYTYxYjQzZg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2003-10-13T17:01:01Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-10-13T17:01:01Z"}, "message": "s390.md (\"*fmadddf4\", [...]): Insns are now dependent on TARGET_FUSED_MADD instead of...\n\n2003-10-13  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.md (\"*fmadddf4\", \"*fmsubdf4\", \"*fmaddsf4\",\n\t\"*fmsubsf4\"): Insns are now dependent on TARGET_FUSED_MADD instead\n\tof flag_unsafe_math_optimizations.\n\t* config/s390/s390.h (\"MASK_NO_FUSED_MADD\", \"TARGET_NO_FUSED_MADD\",\n\t\"TARGET_FUSED_MADD\", \"TARGET_SWITCHES\"): Introduced new target flags\n\tfused-madd and no-fused-madd.\n\t* doc/invoke.texi: Documented the new options fused-madd and\n\tno-fused-madd for S/390.\n\nFrom-SVN: r72433", "tree": {"sha": "f44d3aa4d62f0be4f0a2a55651dd3005a909107d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f44d3aa4d62f0be4f0a2a55651dd3005a909107d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/comments", "author": null, "committer": null, "parents": [{"sha": "2612ffce1f662e657aa3901690c7fd00bbfc189d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2612ffce1f662e657aa3901690c7fd00bbfc189d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2612ffce1f662e657aa3901690c7fd00bbfc189d"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "f477391bc6789df6f23c35327c91eab22cae58ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "patch": "@@ -1,3 +1,14 @@\n+2003-10-13  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"*fmadddf4\", \"*fmsubdf4\", \"*fmaddsf4\", \n+\t\"*fmsubsf4\"): Insns are now dependent on TARGET_FUSED_MADD instead\n+\tof flag_unsafe_math_optimizations.\n+\t* config/s390/s390.h (\"MASK_NO_FUSED_MADD\", \"TARGET_NO_FUSED_MADD\",\n+\t\"TARGET_FUSED_MADD\", \"TARGET_SWITCHES\"): Introduced new target flags\n+\tfused-madd and no-fused-madd.\n+\t* doc/invoke.texi: Documented the new options fused-madd and \n+\tno-fused-madd for S/390.\n+\n 2003-10-14  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Choose"}, {"sha": "0a605505dfacb349598ff7126b4ed1fce3bc2378", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "patch": "@@ -95,6 +95,7 @@ extern int target_flags;\n #define MASK_ZARCH                 0x20\n #define MASK_MVCLE                 0x40\n #define MASK_TPF                   0x80\n+#define MASK_NO_FUSED_MADD         0x100\n \n #define TARGET_HARD_FLOAT          (target_flags & MASK_HARD_FLOAT)\n #define TARGET_SOFT_FLOAT          (!(target_flags & MASK_HARD_FLOAT))\n@@ -105,6 +106,8 @@ extern int target_flags;\n #define TARGET_ZARCH               (target_flags & MASK_ZARCH)\n #define TARGET_MVCLE               (target_flags & MASK_MVCLE)\n #define TARGET_TPF                 (target_flags & MASK_TPF)\n+#define TARGET_NO_FUSED_MADD       (target_flags & MASK_NO_FUSED_MADD)\n+#define TARGET_FUSED_MADD\t   (! TARGET_NO_FUSED_MADD)\n \n /* ??? Once this actually works, it could be made a runtime option.  */\n #define TARGET_IBM_FLOAT           0\n@@ -116,23 +119,25 @@ extern int target_flags;\n #define TARGET_DEFAULT             0x3\n #endif\n \n-#define TARGET_SWITCHES                                                \\\n-{ { \"hard-float\",    1, N_(\"Use hardware fp\")},                        \\\n-  { \"soft-float\",   -1, N_(\"Don't use hardware fp\")},                  \\\n-  { \"backchain\",     2, N_(\"Set backchain\")},                          \\\n-  { \"no-backchain\", -2, N_(\"Don't set backchain (faster, but debug harder\")}, \\\n-  { \"small-exec\",    4, N_(\"Use bras for executable < 64k\")},          \\\n-  { \"no-small-exec\",-4, N_(\"Don't use bras\")},                         \\\n-  { \"debug\",         8, N_(\"Additional debug prints\")},                \\\n-  { \"no-debug\",     -8, N_(\"Don't print additional debug prints\")},    \\\n-  { \"64\",           16, N_(\"64 bit ABI\")},                             \\\n-  { \"31\",          -16, N_(\"31 bit ABI\")},                             \\\n-  { \"zarch\",        32, N_(\"z/Architecture\")},                         \\\n-  { \"esa\",         -32, N_(\"ESA/390 architecture\")},                   \\\n-  { \"mvcle\",        64, N_(\"mvcle use\")},                              \\\n-  { \"no-mvcle\",    -64, N_(\"mvc&ex\")},                                 \\\n-  { \"tpf\",         128, N_(\"enable tpf OS code\")},                     \\\n-  { \"no-tpf\",     -128, N_(\"disable tpf OS code\")},                    \\\n+#define TARGET_SWITCHES                                                  \\\n+{ { \"hard-float\",      1, N_(\"Use hardware fp\")},                        \\\n+  { \"soft-float\",     -1, N_(\"Don't use hardware fp\")},                  \\\n+  { \"backchain\",       2, N_(\"Set backchain\")},                          \\\n+  { \"no-backchain\",   -2, N_(\"Don't set backchain (faster, but debug harder\")},\\\n+  { \"small-exec\",      4, N_(\"Use bras for executable < 64k\")},          \\\n+  { \"no-small-exec\",  -4, N_(\"Don't use bras\")},                         \\\n+  { \"debug\",           8, N_(\"Additional debug prints\")},                \\\n+  { \"no-debug\",       -8, N_(\"Don't print additional debug prints\")},    \\\n+  { \"64\",             16, N_(\"64 bit ABI\")},                             \\\n+  { \"31\",            -16, N_(\"31 bit ABI\")},                             \\\n+  { \"zarch\",          32, N_(\"z/Architecture\")},                         \\\n+  { \"esa\",           -32, N_(\"ESA/390 architecture\")},                   \\\n+  { \"mvcle\",          64, N_(\"mvcle use\")},                              \\\n+  { \"no-mvcle\",      -64, N_(\"mvc&ex\")},                                 \\\n+  { \"tpf\",           128, N_(\"enable tpf OS code\")},                     \\\n+  { \"no-tpf\",       -128, N_(\"disable tpf OS code\")},                    \\\n+  { \"no-fused-madd\", 256, N_(\"disable fused multiply/add instructions\")},\\\n+  { \"fused-madd\",   -256, N_(\"enable fused multiply/add instructions\")}, \\\n   { \"\", TARGET_DEFAULT, 0 } }\n \n #define TARGET_OPTIONS                                          \\"}, {"sha": "aa568f85af397bbdfb8f6e90407e4ff653cb61ce", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "patch": "@@ -4190,7 +4190,7 @@\n \t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"%f,f\")\n \t\t\t  (match_operand:DF 2 \"nonimmediate_operand\"  \"f,R\"))\n \t\t (match_operand:DF 3 \"register_operand\" \"0,0\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && flag_unsafe_math_optimizations\"\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD\"\n   \"@\n    madbr\\t%0,%1,%2\n    madb\\t%0,%1,%2\"\n@@ -4202,7 +4202,7 @@\n \t(minus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f,f\")\n \t\t\t   (match_operand:DF 2 \"nonimmediate_operand\"  \"f,R\"))\n \t\t (match_operand:DF 3 \"register_operand\" \"0,0\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && flag_unsafe_math_optimizations\"\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD\"\n   \"@\n    msdbr\\t%0,%1,%2\n    msdb\\t%0,%1,%2\"\n@@ -4251,7 +4251,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"%f,f\")\n \t\t\t  (match_operand:SF 2 \"nonimmediate_operand\"  \"f,R\"))\n \t\t (match_operand:SF 3 \"register_operand\" \"0,0\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && flag_unsafe_math_optimizations\"\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD\"\n   \"@\n    maebr\\t%0,%1,%2\n    maeb\\t%0,%1,%2\"\n@@ -4263,7 +4263,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f,f\")\n \t\t\t   (match_operand:SF 2 \"nonimmediate_operand\"  \"f,R\"))\n \t\t  (match_operand:SF 3 \"register_operand\" \"0,0\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && flag_unsafe_math_optimizations\"\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD\"\n   \"@\n    msebr\\t%0,%1,%2\n    mseb\\t%0,%1,%2\""}, {"sha": "474c9b711c714bc3581f8abb1891e034e70c5545", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d226e1776a8e1f2dc1671d20e73cd93a61b43f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f2d226e1776a8e1f2dc1671d20e73cd93a61b43f", "patch": "@@ -624,7 +624,7 @@ in the following sections.\n @gccoptlist{-mtune=@var{cpu-type}  -march=@var{cpu-type} @gol\n -mhard-float  -msoft-float  -mbackchain  -mno-backchain @gol\n -msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle @gol\n--m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch}\n+-m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch  -mfused-madd  -mno-fused-madd}\n \n @emph{CRIS Options}\n @gccoptlist{-mcpu=@var{cpu}  -march=@var{cpu}  -mtune=@var{cpu} @gol\n@@ -10446,6 +10446,13 @@ except for the ABI and the set of available instructions.\n The list of @var{cpu-type} values is the same as for @option{-march}.\n The default is the value used for @option{-march}.\n \n+@item -mfused-madd\n+@itemx -mno-fused-madd\n+@opindex mfused-madd\n+@opindex mno-fused-madd\n+Generate code that uses (does not use) the floating point multiply and\n+accumulate instructions.  These instructions are generated by default if\n+hardware floating point is used.\n @end table\n \n @node CRIS Options"}]}