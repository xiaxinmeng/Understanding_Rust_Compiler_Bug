{"sha": "c5b7917eac14be1be0843853dd1f2a13679f25a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViNzkxN2VhYzE0YmUxYmUwODQzODUzZGQxZjJhMTM2NzlmMjVhNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-05-07T06:41:20Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-05-07T06:41:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r929", "tree": {"sha": "a1f7bb72e5b4c58a657fc844c6b19930ba5849d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1f7bb72e5b4c58a657fc844c6b19930ba5849d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5b7917eac14be1be0843853dd1f2a13679f25a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b7917eac14be1be0843853dd1f2a13679f25a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b7917eac14be1be0843853dd1f2a13679f25a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b7917eac14be1be0843853dd1f2a13679f25a7/comments", "author": null, "committer": null, "parents": [{"sha": "64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "82d9ddb26fc78ebf12b46a921e1511404c6bcf77", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=c5b7917eac14be1be0843853dd1f2a13679f25a7", "patch": "@@ -124,7 +124,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define HAVE_ATEXIT\n \n /* Define this macro meaning that gcc should find the library 'libgcc.a'\n-   by hand, rather than passing the argeument '-lgcc' to tell the linker\n+   by hand, rather than passing the argument '-lgcc' to tell the linker\n    to do the search */\n #define LINK_LIBGCC_SPECIAL\n "}, {"sha": "7463acf7797bbaf8cf95ee57259984779c0494dd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c5b7917eac14be1be0843853dd1f2a13679f25a7", "patch": "@@ -2882,7 +2882,7 @@ while (0)\n    pattern $L[a-z].*.  The machine independent portion of GCC creates\n    labels matching:  $L[A-Z][0-9]+ and $L[0-9]+.\n \n-\tLM[0-9]+\tSillicon graphics/ECOFF stabs label before each stmt.\n+\tLM[0-9]+\tSilicon Graphics/ECOFF stabs label before each stmt.\n \t$Lb[0-9]+\tBegin blocks for MIPS debug support\n \t$Lc[0-9]+\tLabel for use in s<xx> operation.\n \t$Le[0-9]+\tEnd blocks for MIPS debug support\n@@ -2939,7 +2939,7 @@ while (0)\n #define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\t\t\\\n   mips_declare_object (STREAM, NAME, \"\\n\\t.comm\\t\", \",%u\\n\", (ROUNDED))\n \n-/* This says how to define a local common symbol (ie, not visable to\n+/* This says how to define a local common symbol (ie, not visible to\n    linker).  */\n \n #define ASM_OUTPUT_LOCAL(STREAM, NAME, SIZE, ROUNDED)\t\t\t\\"}, {"sha": "fdbaccd2ee02d882be03c05d4bd9a637b55dd801", "filename": "gcc/halfpic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fhalfpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fhalfpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.c?ref=c5b7917eac14be1be0843853dd1f2a13679f25a7", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* The OSF/rose half-pic model assumes that the non-library code does\n    not need to have full PIC (position independent code), but rather,\n    that pointers to external references are put into the data section\n-   and derefenced as normal pointers.  References to static data does\n+   and dereferenced as normal pointers.  References to static data does\n    not need to be PIC-ized.\n \n    Another optimization is to have the compiler know what symbols are"}, {"sha": "3a5b9cf49a85ec70121958f021aba1b900c0cbcf", "filename": "gcc/loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=c5b7917eac14be1be0843853dd1f2a13679f25a7", "patch": "@@ -119,7 +119,7 @@ static rtx loop_continue;\n    is set during the loop being scanned.\n    During code motion, a negative value indicates a reg that has been\n    made a candidate; in particular -2 means that it is an candidate that\n-   we know is equal to a constant and -1 means that it is an condidate\n+   we know is equal to a constant and -1 means that it is an candidate\n    not known equal to a constant.\n    After code motion, regs moved have 0 (which is accurate now)\n    while the failed candidates have the original number of times set.\n@@ -3843,7 +3843,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t like it can be used to eliminate a biv, but the resulting insn\n \t isn't valid.  This can happen, for example, on the 88k, where a \n \t JUMP_INSN can compare a register only with zero.  Attempts to\n-\t replace it with a comapare with a constant will fail.\n+\t replace it with a compare with a constant will fail.\n \n \t Note that in cases where this call fails, we may have replaced some\n \t of the occurrences of the biv with a giv, but no harm was done in\n@@ -4098,7 +4098,7 @@ record_biv (v, insn, dest_reg, inc_val, mult_val,\n \n       /* Set initial value to the reg itself.  */\n       bl->initial_value = dest_reg;\n-      /* We haven't seen the intializing insn yet */\n+      /* We haven't seen the initializing insn yet */\n       bl->init_insn = 0;\n       bl->init_set = 0;\n       bl->initial_test = 0;\n@@ -4808,7 +4808,7 @@ general_induction_var (x, src_reg, add_val, mult_val)\n    We will canonicalize it to be of the form\n    \t(plus (mult (BIV) (invar_1))\n \t      (invar_2))\n-   with possibile degeneracies.\n+   with possible degeneracies.\n \n    The invariant expressions must each be of a form that can be used as a\n    machine operand.  We surround then with a USE rtx (a hack, but localized"}, {"sha": "d50e418b60392e19db32c82b4f98a6fd4934ee29", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b7917eac14be1be0843853dd1f2a13679f25a7/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=c5b7917eac14be1be0843853dd1f2a13679f25a7", "patch": "@@ -193,7 +193,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \t    stLocal\t  -- local variable\n \t    stLabel\t  -- label\n \t    stProc\t  -- External Procedure\n-\t    stBlock\t  -- beginnning of block\n+\t    stBlock\t  -- beginning of block\n \t    stEnd\t  -- end (of anything)\n \t    stMember\t  -- member (of anything)\n \t    stTypedef\t  -- type definition\n@@ -262,7 +262,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n        Procedures Tables            384           1          52\n        Local Symbols                436          16         192\n        Optimization Symbols           0           0           0\n-       Auxilary Symbols             628          39         156\n+       Auxiliary Symbols            628          39         156\n        Local Strings                784          80          80\n        External Strings             864         144         144\n        File Tables                 1008           2         144\n@@ -723,7 +723,7 @@ extern int errno;\t\t\t/* MIPS errno.h doesn't declare this */\n   (isalnum (ch) || (ch) == '_' || (ch) == '.' || (ch) == '$')\n \n \f\n-/* Redefination of of storage classes as an enumeration for better\n+/* Redefinition of of storage classes as an enumeration for better\n    debugging.  */\n \n typedef enum sc {\n@@ -763,7 +763,7 @@ typedef enum st {\n   st_Local\t= stLocal,\t/* local variable */\n   st_Label\t= stLabel,\t/* label */\n   st_Proc\t= stProc,\t/*     \"      \"\t Procedure */\n-  st_Block\t= stBlock,\t/* beginnning of block */\n+  st_Block\t= stBlock,\t/* beginning of block */\n   st_End\t= stEnd,\t/* end (of anything) */\n   st_Member\t= stMember,\t/* member (of anything\t- struct/union/enum */\n   st_Typedef\t= stTypedef,\t/* type definition */\n@@ -775,7 +775,7 @@ typedef enum st {\n   st_Str\t= stStr,\t/* string */\n   st_Number\t= stNumber,\t/* pure number (ie. 4 NOR 2+2) */\n   st_Expr\t= stExpr,\t/* 2+2 vs. 4 */\n-  st_Type\t= stType,\t/* post-coersion SER */\n+  st_Type\t= stType,\t/* post-coercion SER */\n   st_Max\t= stMax\t\t/* max type+1 */\n } st_t;\n \n@@ -1744,7 +1744,7 @@ extern char *sys_siglist[NSIG + 1];\n    do...... */\n \n typedef struct _pseudo_ops {\n-  const char *name;\t\t\t/* pseduo-op in ascii */\n+  const char *name;\t\t\t/* pseudo-op in ascii */\n   int len;\t\t\t\t/* length of name to compare */\n   void (*func) __proto((const char *));\t/* function to handle line */\n } pseudo_ops_t;\n@@ -2120,7 +2120,7 @@ add_ext_symbol (str_start, str_end_p1, type, storage, value, indx, ifd)\n \n STATIC symint_t\n add_aux_sym_symint (aux_word)\n-     symint_t aux_word;\t\t/* auxilary information word */\n+     symint_t aux_word;\t\t/* auxiliary information word */\n {\n   register AUXU *aux_ptr;\n   register efdr_t *file_ptr = cur_file_ptr;\n@@ -3147,7 +3147,7 @@ parse_def (name_start)\n \n \t      /* If this is a function, ignore it, so that we don't get\n \t\t two entries (one from the .ent, and one for the .def\n-\t\t that preceedes it).  Save the type information so that\n+\t\t that precedes it).  Save the type information so that\n \t\t the end block can properly add it after the begin block\n \t\t index.  For MIPS knows what reason, we must strip off\n \t\t the function type at this point.  */\n@@ -3185,7 +3185,7 @@ parse_def (name_start)\n \n \t      /* If the value is not an integer value, it must be the\n \t\t name of a static or global item.  Look up the name in\n-\t\t the orignal symbol table to pick up the storage\n+\t\t the original symbol table to pick up the storage\n \t\t class, symbol type, etc.  */\n \t      else\n \t\t{\n@@ -3369,7 +3369,7 @@ parse_def (name_start)\n       /* Members of structures and unions that aren't bitfields, need\n \t to adjust the value from a byte offset to a bit offset.\n \t Members of enumerations do not have the value adjusted, and\n-\t can be distinquished by index == indexNil.  For enumerations,\n+\t can be distinguished by index == indexNil.  For enumerations,\n \t update the maximum enumeration value.  */\n \n     case st_Member:"}]}