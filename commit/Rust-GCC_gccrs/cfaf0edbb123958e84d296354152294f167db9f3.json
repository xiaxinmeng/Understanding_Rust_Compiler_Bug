{"sha": "cfaf0edbb123958e84d296354152294f167db9f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhZjBlZGJiMTIzOTU4ZTg0ZDI5NjM1NDE1MjI5NGYxNjdkYjlmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-15T11:13:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-18T13:31:05Z"}, "message": "fixup BB vectorization constant generation place\n\nThis adjusts the way we compute the stmt insert location for\ninvariants in BB vectorization context to deal with eventually\nsharing invariant SLP nodes for multiple uses.  We can no longer\nuse a single use stmt location then but there's a simple way out.\n\n2020-05-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_slp_bb): Start after labels.\n\t(vect_get_constant_vectors): Really place init stmt after scalar defs.\n\t* tree-vect-stmts.c (vect_init_vector_1): Insert before\n\tregion begin.", "tree": {"sha": "fda9e5aea4a7ba8d81847189bc58c78362279810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fda9e5aea4a7ba8d81847189bc58c78362279810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfaf0edbb123958e84d296354152294f167db9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfaf0edbb123958e84d296354152294f167db9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfaf0edbb123958e84d296354152294f167db9f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfaf0edbb123958e84d296354152294f167db9f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d83e28f47f5467b435667122add2aa9730e1a89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83e28f47f5467b435667122add2aa9730e1a89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83e28f47f5467b435667122add2aa9730e1a89b"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "795507bc485b0fb13226624b238150d3d3d1c2d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf0edbb123958e84d296354152294f167db9f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf0edbb123958e84d296354152294f167db9f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfaf0edbb123958e84d296354152294f167db9f3", "patch": "@@ -1,3 +1,10 @@\n+2020-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_slp_bb): Start after labels.\n+\t(vect_get_constant_vectors): Really place init stmt after scalar defs.\n+\t* tree-vect-stmts.c (vect_init_vector_1): Insert before\n+\tregion begin.\n+\n 2020-05-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Support"}, {"sha": "276d960485576b05584bf470b0d9371590deb9ab", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf0edbb123958e84d296354152294f167db9f3/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf0edbb123958e84d296354152294f167db9f3/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=cfaf0edbb123958e84d296354152294f167db9f3", "patch": "@@ -3310,7 +3310,7 @@ vect_slp_bb (basic_block bb)\n   gimple_stmt_iterator gsi;\n   bool any_vectorized = false;\n \n-  gsi = gsi_start_bb (bb);\n+  gsi = gsi_after_labels (bb);\n   while (!gsi_end_p (gsi))\n     {\n       gimple_stmt_iterator region_begin = gsi;\n@@ -3597,7 +3597,7 @@ vect_get_constant_vectors (vec_info *vinfo,\n   constant_p = true;\n   tree_vector_builder elts (vector_type, nunits, 1);\n   elts.quick_grow (nunits);\n-  bool place_after_defs = false;\n+  stmt_vec_info insert_after = NULL;\n   for (j = 0; j < number_of_copies; j++)\n     {\n       for (i = group_size - 1; op_node->ops.iterate (i, &op); i--)\n@@ -3656,12 +3656,20 @@ vect_get_constant_vectors (vec_info *vinfo,\n \t  elts[number_of_places_left_in_vector] = op;\n \t  if (!CONSTANT_CLASS_P (op))\n \t    constant_p = false;\n+\t  /* For BB vectorization we have to compute an insert location\n+\t     when a def is inside the analyzed region since we cannot\n+\t     simply insert at the BB start in this case.  */\n+\t  stmt_vec_info opdef;\n \t  if (TREE_CODE (orig_op) == SSA_NAME\n \t      && !SSA_NAME_IS_DEFAULT_DEF (orig_op)\n \t      && is_a <bb_vec_info> (vinfo)\n-\t      && (as_a <bb_vec_info> (vinfo)->bb\n-\t\t  == gimple_bb (SSA_NAME_DEF_STMT (orig_op))))\n-\t    place_after_defs = true;\n+\t      && (opdef = vinfo->lookup_def (orig_op)))\n+\t    {\n+\t      if (!insert_after)\n+\t\tinsert_after = opdef;\n+\t      else\n+\t\tinsert_after = get_later_stmt (insert_after, opdef);\n+\t    }\n \n           if (number_of_places_left_in_vector == 0)\n             {\n@@ -3678,12 +3686,11 @@ vect_get_constant_vectors (vec_info *vinfo,\n \t\t  vec_cst = permute_results[number_of_vectors - j - 1];\n \t\t}\n \t      tree init;\n-\t      gimple_stmt_iterator gsi;\n-\t      if (place_after_defs)\n+\t      if (insert_after)\n \t\t{\n-\t\t  stmt_vec_info last_stmt_info\n-\t\t    = vect_find_last_scalar_stmt_in_slp (slp_node);\n-\t\t  gsi = gsi_for_stmt (last_stmt_info->stmt);\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (insert_after->stmt);\n+\t\t  /* vect_init_vector inserts before.  */\n+\t\t  gsi_next (&gsi);\n \t\t  init = vect_init_vector (vinfo, stmt_vinfo, vec_cst,\n \t\t\t\t\t   vector_type, &gsi);\n \t\t}\n@@ -3692,12 +3699,13 @@ vect_get_constant_vectors (vec_info *vinfo,\n \t\t\t\t\t vector_type, NULL);\n \t      if (ctor_seq != NULL)\n \t\t{\n-\t\t  gsi = gsi_for_stmt (SSA_NAME_DEF_STMT (init));\n+\t\t  gimple_stmt_iterator gsi\n+\t\t    = gsi_for_stmt (SSA_NAME_DEF_STMT (init));\n \t\t  gsi_insert_seq_before (&gsi, ctor_seq, GSI_SAME_STMT);\n \t\t  ctor_seq = NULL;\n \t\t}\n \t      voprnds.quick_push (init);\n-\t      place_after_defs = false;\n+\t      insert_after = NULL;\n               number_of_places_left_in_vector = nunits;\n \t      constant_p = true;\n \t      elts.new_vector (vector_type, nunits, 1);"}, {"sha": "7c4afea32f8e280b6f3454a42fa60d4b18c1668a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf0edbb123958e84d296354152294f167db9f3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf0edbb123958e84d296354152294f167db9f3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=cfaf0edbb123958e84d296354152294f167db9f3", "patch": "@@ -1425,13 +1425,8 @@ vect_init_vector_1 (vec_info *vinfo, stmt_vec_info stmt_vinfo, gimple *new_stmt,\n       else\n        {\n           bb_vec_info bb_vinfo = dyn_cast <bb_vec_info> (vinfo);\n-          basic_block bb;\n-          gimple_stmt_iterator gsi_bb_start;\n-\n-          gcc_assert (bb_vinfo);\n-          bb = BB_VINFO_BB (bb_vinfo);\n-          gsi_bb_start = gsi_after_labels (bb);\n-          gsi_insert_before (&gsi_bb_start, new_stmt, GSI_SAME_STMT);\n+\t  gimple_stmt_iterator gsi_region_begin = bb_vinfo->region_begin;\n+\t  gsi_insert_before (&gsi_region_begin, new_stmt, GSI_SAME_STMT);\n        }\n     }\n "}]}