{"sha": "693ddb1be71474a9777ac330d2d1cb5db3e800fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzZGRiMWJlNzE0NzRhOTc3N2FjMzMwZDJkMWNiNWRiM2U4MDBmYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-06T21:17:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-06T21:17:46Z"}, "message": "re PR middle-end/50266 (ICE in decode_addr_const)\n\n\tPR middle-end/50266\n\t* c-common.c (c_fully_fold_internal) <ADDR_EXPR>: Fold offsetof-like\n\tcomputations.\n\nFrom-SVN: r178611", "tree": {"sha": "f8ec4e3a49cb94b3bcb4c9ae1b5f59900b37958c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8ec4e3a49cb94b3bcb4c9ae1b5f59900b37958c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/693ddb1be71474a9777ac330d2d1cb5db3e800fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693ddb1be71474a9777ac330d2d1cb5db3e800fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693ddb1be71474a9777ac330d2d1cb5db3e800fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693ddb1be71474a9777ac330d2d1cb5db3e800fb/comments", "author": null, "committer": null, "parents": [{"sha": "8092dd900b9483f1f8ec716c5d94a5686e669b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8092dd900b9483f1f8ec716c5d94a5686e669b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8092dd900b9483f1f8ec716c5d94a5686e669b0d"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "347d904205f026f806e6758b2b967a20c5acfd88", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=693ddb1be71474a9777ac330d2d1cb5db3e800fb", "patch": "@@ -1,3 +1,9 @@\n+2011-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/50266\n+\t* c-common.c (c_fully_fold_internal) <ADDR_EXPR>: Fold offsetof-like\n+\tcomputations.\n+\n 2011-09-05  Richard Guenther  <rguenther@suse.de>\n \n \t* c-common.c (complete_array_type): Use ssize_int (-1) instead"}, {"sha": "d8028d34878b38daafab0b9a97c6a839243646c8", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=693ddb1be71474a9777ac330d2d1cb5db3e800fb", "patch": "@@ -1264,7 +1264,20 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       STRIP_TYPE_NOPS (op0);\n       if (code != ADDR_EXPR && code != REALPART_EXPR && code != IMAGPART_EXPR)\n \top0 = decl_constant_value_for_optimization (op0);\n-      if (op0 != orig_op0 || in_init)\n+      /* ??? Cope with user tricks that amount to offsetof.  The middle-end is\n+\t not prepared to deal with them if they occur in initializers.  */\n+      if (op0 != orig_op0\n+\t  && code == ADDR_EXPR\n+\t  && (op1 = get_base_address (op0)) != NULL_TREE\n+\t  && TREE_CODE (op1) == INDIRECT_REF\n+\t  && TREE_CONSTANT (TREE_OPERAND (op1, 0)))\n+\t{\n+\t  tree offset = fold_offsetof (op0, op1);\n+\t  op1\n+\t    = fold_convert_loc (loc, TREE_TYPE (expr), TREE_OPERAND (op1, 0));\n+\t  ret = fold_build_pointer_plus_loc (loc, op1, offset);\n+\t}\n+      else if (op0 != orig_op0 || in_init)\n \tret = in_init\n \t  ? fold_build1_initializer_loc (loc, code, TREE_TYPE (expr), op0)\n \t  : fold_build1_loc (loc, code, TREE_TYPE (expr), op0);"}, {"sha": "269cdffefc265bb3d670ee790c104db0e6341c6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=693ddb1be71474a9777ac330d2d1cb5db3e800fb", "patch": "@@ -1,3 +1,7 @@\n+2011-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* gcc.c-torture/compile/20110906-1.c: New test.\n+\n 2011-09-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/builtin-apply-mmx.c: Require ia32 effective target."}, {"sha": "50ea9e241b4ea0d95fedf019258faaf3cec25cd1", "filename": "gcc/testsuite/gcc.c-torture/compile/20110906-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20110906-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693ddb1be71474a9777ac330d2d1cb5db3e800fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20110906-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20110906-1.c?ref=693ddb1be71474a9777ac330d2d1cb5db3e800fb", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/50266 */\n+/* Testcase by <bero@arklinux.org> */\n+\n+struct a {\n+ unsigned int a;\n+ unsigned int b;\n+};\n+\n+struct a *const p = (struct a *)0x4A004100;\n+\n+void foo(void)\n+{\n+ unsigned int i = 0;\n+ unsigned int *const x[] = {\n+  &p->a,\n+  &p->b,\n+  0\n+ };\n+\n+ (*(volatile unsigned int *)((x[i]))\n+   = (unsigned int)((unsigned int)((*(volatile unsigned int *)(x[i])))));\n+}"}]}