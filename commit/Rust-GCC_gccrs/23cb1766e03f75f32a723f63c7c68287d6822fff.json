{"sha": "23cb1766e03f75f32a723f63c7c68287d6822fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjYjE3NjZlMDNmNzVmMzJhNzIzZjYzYzdjNjgyODdkNjgyMmZmZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-09-17T15:29:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-09-17T15:29:18Z"}, "message": "expr.c (store_constructor_field): Accept ALIAS_SET arg.\n\n\t* expr.c (store_constructor_field): Accept ALIAS_SET arg.\n\t(store_constructor): Pass alias_set to it.\n\nFrom-SVN: r36475", "tree": {"sha": "a1d94ea413d10054440d0a2863d5592cf4ccc5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1d94ea413d10054440d0a2863d5592cf4ccc5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23cb1766e03f75f32a723f63c7c68287d6822fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cb1766e03f75f32a723f63c7c68287d6822fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cb1766e03f75f32a723f63c7c68287d6822fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cb1766e03f75f32a723f63c7c68287d6822fff/comments", "author": null, "committer": null, "parents": [{"sha": "7e3bd81e9b701b488057f01af96af605f1036f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e3bd81e9b701b488057f01af96af605f1036f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e3bd81e9b701b488057f01af96af605f1036f57"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "8c48b71bc32831ca064dde24fd66a899cc90b3e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cb1766e03f75f32a723f63c7c68287d6822fff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cb1766e03f75f32a723f63c7c68287d6822fff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23cb1766e03f75f32a723f63c7c68287d6822fff", "patch": "@@ -1,18 +1,21 @@\n Sun Sep 17 18:48:32 2000  Denis Chertykov  <denisc@overta.ru>\n \n-\t* config/avr/avr.md (\"mcu_enhanced\"): New attribute.\n-\t(\"mcu_mega\"): Likewise.\n-\t(\"extendhisi2\"): Use \"mcu_enhanced\".\n-\t(\"zero_extendhisi2\"): Likewise.\n-\t(\"call_insn\"): Use \"mcu_enhanced\" and \"mcu_mega\".\n-\t(\"call_value_insn\"): Likewise.\n-\t(\"*sbrx_branch\"): Use \"mcu_mega\".\n-\t(\"*sbrx_and_branchsi\"): Likewise.\n-\t(\"*sbrx_and_branchhi\"): Likewise.\n-\t(\"*tablejump_lib\"): Likewise.\n+\t* config/avr/avr.md (mcu_enhanced): New attribute.\n+\t(mcu_mega): Likewise.\n+\t(extendhisi2): Use mcu_enhanced.\n+\t(zero_extendhisi2): Likewise.\n+\t(call_insn): Use mcu_enhanced and mcu_mega.\n+\t(call_value_insn): Likewise.\n+\t(*sbrx_branch): Use mcu_mega.\n+\t(*sbrx_and_branchsi): Likewise.\n+\t(*sbrx_and_branchhi): Likewise.\n+\t(*tablejump_lib): Likewise.\n \n Sun Sep 17 10:46:17 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (store_constructor_field): Accept ALIAS_SET arg.\n+\t(store_constructor): Pass alias_set to it.\n+\n \t* c-decl.c (grokdeclarator): Reorder tests to avoid looking at\n \tTYPE_MAIN_VARIANT of ERROR_MARK.\n \t* c-lex.c (readescape): Avoid using printf syntax we don't recognize."}, {"sha": "6013c3e96d7eda943bf68d4ecf114d29c50569ec", "filename": "gcc/expr.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cb1766e03f75f32a723f63c7c68287d6822fff/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cb1766e03f75f32a723f63c7c68287d6822fff/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=23cb1766e03f75f32a723f63c7c68287d6822fff", "patch": "@@ -166,7 +166,8 @@ static int is_zeros_p\t\tPARAMS ((tree));\n static int mostly_zeros_p\tPARAMS ((tree));\n static void store_constructor_field PARAMS ((rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t\t     HOST_WIDE_INT, enum machine_mode,\n-\t\t\t\t\t     tree, tree, unsigned int, int));\n+\t\t\t\t\t     tree, tree, unsigned int, int,\n+\t\t\t\t\t     int));\n static void store_constructor\tPARAMS ((tree, rtx, unsigned int, int,\n \t\t\t\t\t HOST_WIDE_INT));\n static rtx store_field\t\tPARAMS ((rtx, HOST_WIDE_INT,\n@@ -4175,6 +4176,7 @@ mostly_zeros_p (exp)\n    TARGET, BITSIZE, BITPOS, MODE, EXP are as for store_field.\n    TYPE is the type of the CONSTRUCTOR, not the element type.\n    ALIGN and CLEARED are as for store_constructor.\n+   ALIAS_SET is the alias set to use for any stores.\n \n    This provides a recursive shortcut back to store_constructor when it isn't\n    necessary to go through store_field.  This is so that we can pass through\n@@ -4183,14 +4185,15 @@ mostly_zeros_p (exp)\n \n static void\n store_constructor_field (target, bitsize, bitpos,\n-\t\t\t mode, exp, type, align, cleared)\n+\t\t\t mode, exp, type, align, cleared, alias_set)\n      rtx target;\n      unsigned HOST_WIDE_INT bitsize;\n      HOST_WIDE_INT bitpos;\n      enum machine_mode mode;\n      tree exp, type;\n      unsigned int align;\n      int cleared;\n+     int alias_set;\n {\n   if (TREE_CODE (exp) == CONSTRUCTOR\n       && bitpos % BITS_PER_UNIT == 0\n@@ -4208,11 +4211,13 @@ store_constructor_field (target, bitsize, bitpos,\n \t\t\t    ? BLKmode : VOIDmode,\n \t\t\t    plus_constant (XEXP (target, 0),\n \t\t\t\t\t   bitpos / BITS_PER_UNIT));\n+\n+      MEM_ALIAS_SET (target) = alias_set;\n       store_constructor (exp, target, align, cleared, bitsize / BITS_PER_UNIT);\n     }\n   else\n     store_field (target, bitsize, bitpos, mode, exp, VOIDmode, 0, align,\n-\t\t int_size_in_bytes (type), 0);\n+\t\t int_size_in_bytes (type), alias_set);\n }\n \n /* Store the value of constructor EXP into the rtx TARGET.\n@@ -4411,7 +4416,10 @@ store_constructor (exp, target, align, cleared, size)\n \t    }\n #endif\n \t  store_constructor_field (to_rtx, bitsize, bitpos, mode,\n-\t\t\t\t   TREE_VALUE (elt), type, align, cleared);\n+\t\t\t\t   TREE_VALUE (elt), type, align, cleared,\n+\t\t\t\t   DECL_NONADDRESSABLE_P (field)\n+\t\t\t\t   ? MEM_ALIAS_SET (to_rtx)\n+\t\t\t\t   : get_alias_set (TREE_TYPE (field)));\n \t}\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n@@ -4547,8 +4555,11 @@ store_constructor (exp, target, align, cleared, size)\n \t\t  for (; lo <= hi; lo++)\n \t\t    {\n \t\t      bitpos = lo * tree_low_cst (TYPE_SIZE (elttype), 0);\n-\t\t      store_constructor_field (target, bitsize, bitpos, mode,\n-\t\t\t\t\t       value, type, align, cleared);\n+\t\t      store_constructor_field\n+\t\t\t(target, bitsize, bitpos, mode, value, type, align,\n+\t\t\t cleared,\n+\t\t\t TYPE_NONALIASED_COMPONENT (type)\n+\t\t\t ? MEM_ALIAS_SET (target) : get_alias_set (elttype));\n \t\t    }\n \t\t}\n \t      else\n@@ -4636,7 +4647,11 @@ store_constructor (exp, target, align, cleared, size)\n \t\tbitpos = (i * tree_low_cst (TYPE_SIZE (elttype), 1));\n \n \t      store_constructor_field (target, bitsize, bitpos, mode, value,\n-\t\t\t\t       type, align, cleared);\n+\t\t\t\t       type, align, cleared,\n+\t\t\t\t       TYPE_NONALIASED_COMPONENT (type)\n+\t\t\t\t       ? MEM_ALIAS_SET (target) :\n+\t\t\t\t       get_alias_set (elttype));\n+\n \t    }\n \t}\n     }"}]}