{"sha": "1c4967b998b0171712d7a208c6bb68528a5449a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0OTY3Yjk5OGIwMTcxNzEyZDdhMjA4YzZiYjY4NTI4YTU0NDlhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-12-10T20:01:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-12-10T20:01:12Z"}, "message": "re PR tree-optimization/62021 (ICE in verify_gimple_assign_single)\n\n\tPR tree-optimization/62021\n\t* omp-low.c (simd_clone_adjust_return_type): Use\n\tvector of pointer_sized_int_node types instead vector of pointer\n\ttypes.\n\t(simd_clone_adjust_argument_types): Likewise.\n\n\t* gcc.dg/vect/pr62021.c: New test.\n\nFrom-SVN: r218603", "tree": {"sha": "e3bfa0e079fc8105fd5c83b1d2a1145d52e115de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3bfa0e079fc8105fd5c83b1d2a1145d52e115de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4967b998b0171712d7a208c6bb68528a5449a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4967b998b0171712d7a208c6bb68528a5449a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4967b998b0171712d7a208c6bb68528a5449a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4967b998b0171712d7a208c6bb68528a5449a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ec5dd98f08168f9230127008432286b8dc4f035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec5dd98f08168f9230127008432286b8dc4f035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec5dd98f08168f9230127008432286b8dc4f035"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "29f3e6bd25bfa8d87c68c0ecfdb0de2a8e3c2970", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c4967b998b0171712d7a208c6bb68528a5449a1", "patch": "@@ -1,3 +1,11 @@\n+2014-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/62021\n+\t* omp-low.c (simd_clone_adjust_return_type): Use\n+\tvector of pointer_sized_int_node types instead vector of pointer\n+\ttypes.\n+\t(simd_clone_adjust_argument_types): Likewise.\n+\n 2014-12-10  Jakub Jelinek  <jakub@redhat.com>\n \t    Evgeny Stupachenko  <evstupac@gmail.com>\n "}, {"sha": "ef143ab5651c90ff0903336c94a545ea6f36a44c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=1c4967b998b0171712d7a208c6bb68528a5449a1", "patch": "@@ -11590,24 +11590,24 @@ simd_clone_adjust_return_type (struct cgraph_node *node)\n   if (orig_rettype == void_type_node)\n     return NULL_TREE;\n   TREE_TYPE (fndecl) = build_distinct_type_copy (TREE_TYPE (fndecl));\n-  if (INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (fndecl)))\n-      || POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (fndecl))))\n+  t = TREE_TYPE (TREE_TYPE (fndecl));\n+  if (INTEGRAL_TYPE_P (t) || POINTER_TYPE_P (t))\n     veclen = node->simdclone->vecsize_int;\n   else\n     veclen = node->simdclone->vecsize_float;\n-  veclen /= GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (fndecl))));\n+  veclen /= GET_MODE_BITSIZE (TYPE_MODE (t));\n   if (veclen > node->simdclone->simdlen)\n     veclen = node->simdclone->simdlen;\n+  if (POINTER_TYPE_P (t))\n+    t = pointer_sized_int_node;\n   if (veclen == node->simdclone->simdlen)\n-    TREE_TYPE (TREE_TYPE (fndecl))\n-      = build_vector_type (TREE_TYPE (TREE_TYPE (fndecl)),\n-\t\t\t   node->simdclone->simdlen);\n+    t = build_vector_type (t, node->simdclone->simdlen);\n   else\n     {\n-      t = build_vector_type (TREE_TYPE (TREE_TYPE (fndecl)), veclen);\n+      t = build_vector_type (t, veclen);\n       t = build_array_type_nelts (t, node->simdclone->simdlen / veclen);\n-      TREE_TYPE (TREE_TYPE (fndecl)) = t;\n     }\n+  TREE_TYPE (TREE_TYPE (fndecl)) = t;\n   if (!node->definition)\n     return NULL_TREE;\n \n@@ -11696,7 +11696,10 @@ simd_clone_adjust_argument_types (struct cgraph_node *node)\n \t  if (veclen > node->simdclone->simdlen)\n \t    veclen = node->simdclone->simdlen;\n \t  adj.arg_prefix = \"simd\";\n-\t  adj.type = build_vector_type (parm_type, veclen);\n+\t  if (POINTER_TYPE_P (parm_type))\n+\t    adj.type = build_vector_type (pointer_sized_int_node, veclen);\n+\t  else\n+\t    adj.type = build_vector_type (parm_type, veclen);\n \t  node->simdclone->args[i].vector_type = adj.type;\n \t  for (j = veclen; j < node->simdclone->simdlen; j += veclen)\n \t    {\n@@ -11737,7 +11740,10 @@ simd_clone_adjust_argument_types (struct cgraph_node *node)\n       veclen /= GET_MODE_BITSIZE (TYPE_MODE (base_type));\n       if (veclen > node->simdclone->simdlen)\n \tveclen = node->simdclone->simdlen;\n-      adj.type = build_vector_type (base_type, veclen);\n+      if (POINTER_TYPE_P (base_type))\n+\tadj.type = build_vector_type (pointer_sized_int_node, veclen);\n+      else\n+\tadj.type = build_vector_type (base_type, veclen);\n       adjustments.safe_push (adj);\n \n       for (j = veclen; j < node->simdclone->simdlen; j += veclen)"}, {"sha": "0352b28df04252db0514e7d1a2b2e294181d8215", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c4967b998b0171712d7a208c6bb68528a5449a1", "patch": "@@ -1,3 +1,8 @@\n+2014-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/62021\n+\t* gcc.dg/vect/pr62021.c: New test.\n+\n 2014-12-10  Jakub Jelinek  <jakub@redhat.com>\n \t    Evgeny Stupachenko  <evstupac@gmail.com>\n "}, {"sha": "e0208e63b3675ca72968bdf16548c40c9dd7dcf4", "filename": "gcc/testsuite/gcc.dg/vect/pr62021.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr62021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4967b998b0171712d7a208c6bb68528a5449a1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr62021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr62021.c?ref=1c4967b998b0171712d7a208c6bb68528a5449a1", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#pragma omp declare simd linear(y)\n+__attribute__((noinline)) int *\n+foo (int *x, int y)\n+{\n+  return x + y;\n+}\n+\n+int a[1024];\n+int *b[1024] = { &a[0] };\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    b[i] = &a[1023 - i];\n+  #pragma omp simd\n+  for (i = 0; i < 1024; i++)\n+    b[i] = foo (b[i], i);\n+  for (i = 0; i < 1024; i++)\n+    if (b[i] != &a[1023])\n+      __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}