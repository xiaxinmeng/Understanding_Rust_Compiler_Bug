{"sha": "f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "node_id": "C_kwDOANBUbNoAKGY5Y2RjZTRhNzFhNGVhMDRkOTY2OTYzMWNmZDk1MWZiZDcwZDViN2M", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2022-01-03T10:12:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-11T13:24:45Z"}, "message": "[Ada] Code cleanups\n\ngcc/ada/\n\n\t* exp_ch9.adb, gen_il-types.ads, make.adb, par-ch12.adb,\n\tsem_ch13.adb: Use membership tests.", "tree": {"sha": "c37072615fe42c66dc559660dc6337f3376cbc2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c37072615fe42c66dc559660dc6337f3376cbc2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e306ed45b58e7210021a8a74d453ee1b2a75ed30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e306ed45b58e7210021a8a74d453ee1b2a75ed30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e306ed45b58e7210021a8a74d453ee1b2a75ed30"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "81f4d7c3b5af8f6910cfd2f396d05e3f3ca39be8", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "patch": "@@ -4394,7 +4394,7 @@ package body Exp_Ch9 is\n       --  It would be better to encapsulate this as a routine in Exp_Dbug ???\n \n       if Append_Char /= ' ' then\n-         if Append_Char = 'P' or Append_Char = 'N' then\n+         if Append_Char in 'P' | 'N' then\n             Add_Char_To_Name_Buffer (Append_Char);\n             return Name_Find;\n          else"}, {"sha": "ca85ecf384c64b0cbb15728c159869230a361616", "filename": "gcc/ada/gen_il-types.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fgen_il-types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fgen_il-types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-types.ads?ref=f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "patch": "@@ -577,8 +577,7 @@ package Gen_IL.Types is\n       | N_Defining_Operator_Symbol;\n \n    subtype Opt_Abstract_Type is Opt_Type_Enum with\n-     Predicate => Opt_Abstract_Type = No_Type or\n-       Opt_Abstract_Type in Abstract_Type;\n+     Predicate => Opt_Abstract_Type in No_Type | Abstract_Type;\n \n    subtype Type_Boundaries is Type_Enum with\n      Predicate => Type_Boundaries in"}, {"sha": "bbabd76c21189fe952a6cac77c589b4a6d80d526", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "patch": "@@ -3765,7 +3765,7 @@ package body Make is\n                declare\n                   Arg : constant String := Argument (J);\n                begin\n-                  if Arg = \"-cargs\" or Arg = \"-bargs\" or Arg = \"-largs\" then\n+                  if Arg in \"-cargs\" | \"-bargs\" | \"-largs\" then\n                      In_Gnatmake_Switches := False;\n \n                   elsif Arg = \"-margs\" then"}, {"sha": "991e93f3d102e1fae1230565a7ffdde81c5b1936", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "patch": "@@ -184,7 +184,7 @@ package body Ch12 is\n                if Token = Tok_Package then\n                   Append (P_Formal_Package_Declaration, Decls);\n \n-               elsif Token = Tok_Procedure or Token = Tok_Function then\n+               elsif Token in Tok_Procedure | Tok_Function then\n                   Append (P_Formal_Subprogram_Declaration, Decls);\n \n                else"}, {"sha": "1577b9b2eb7e6fa0c7e33ec28260d9c60a2f3450", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f9cdce4a71a4ea04d9669631cfd951fbd70d5b7c", "patch": "@@ -17125,9 +17125,8 @@ package body Sem_Ch13 is\n \n    procedure Validate_Literal_Aspect (Typ : Entity_Id; ASN : Node_Id) is\n       A_Id        : constant Aspect_Id := Get_Aspect_Id (ASN);\n-      pragma Assert ((A_Id = Aspect_Integer_Literal) or\n-                     (A_Id = Aspect_Real_Literal) or\n-                     (A_Id = Aspect_String_Literal));\n+      pragma Assert (A_Id in Aspect_Integer_Literal |\n+                             Aspect_Real_Literal | Aspect_String_Literal);\n       Func_Name   : constant Node_Id := Expression (ASN);\n       Overloaded  : Boolean := Is_Overloaded (Func_Name);\n "}]}