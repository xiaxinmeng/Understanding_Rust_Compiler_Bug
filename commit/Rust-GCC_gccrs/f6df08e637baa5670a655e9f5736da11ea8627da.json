{"sha": "f6df08e637baa5670a655e9f5736da11ea8627da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkZjA4ZTYzN2JhYTU2NzBhNjU1ZTlmNTczNmRhMTFlYTg2MjdkYQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-10-20T13:46:07Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-10-20T13:46:07Z"}, "message": "final.c (shorten_branches): When optimizing...\n\n        * final.c (shorten_branches): When optimizing, start with small\n        length and increase from there, and don't decrease lengths.\n\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r192634", "tree": {"sha": "c4385055d088a40f9ad6700d2461467bafef1710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4385055d088a40f9ad6700d2461467bafef1710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6df08e637baa5670a655e9f5736da11ea8627da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6df08e637baa5670a655e9f5736da11ea8627da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6df08e637baa5670a655e9f5736da11ea8627da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6df08e637baa5670a655e9f5736da11ea8627da/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e383849646654485307714640f89699bc6538ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e383849646654485307714640f89699bc6538ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e383849646654485307714640f89699bc6538ee"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "95a44196254740b7bccb09ebdd149672159c8a33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6df08e637baa5670a655e9f5736da11ea8627da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6df08e637baa5670a655e9f5736da11ea8627da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6df08e637baa5670a655e9f5736da11ea8627da", "patch": "@@ -7,6 +7,9 @@\n \t(steal_delay_list_from_target): Use copy_delay_slot_insn.\n \t(fill_slots_from_thread, fill_simple_delay_slots): Likewise.\n \n+\t* final.c (shorten_branches): When optimizing, start with small\n+\tlength and increase from there, and don't decrease lengths.\n+\n 2012-10-19  Jan Hubicka  <jh@suse.cz>\n \n \t* builtins.def (BUILT_IN_UNREACHABLE): Make ATTR_CONST_NORETURN_NOTHROW_LEAF_LIST."}, {"sha": "bffc1a9c46099f44c5c4c2040998c1d945442519", "filename": "gcc/final.c", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6df08e637baa5670a655e9f5736da11ea8627da/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6df08e637baa5670a655e9f5736da11ea8627da/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=f6df08e637baa5670a655e9f5736da11ea8627da", "patch": "@@ -1009,6 +1009,13 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t    align_tab[i] = seq;\n \t}\n     }\n+\n+  /* When optimizing, we start assuming minimum length, and keep increasing\n+     lengths as we find the need for this, till nothing changes.\n+     When not optimizing, we start assuming maximum lengths, and\n+     do a single pass to update the lengths.  */\n+  bool increasing = optimize != 0;\n+\n #ifdef CASE_VECTOR_SHORTEN_MODE\n   if (optimize)\n     {\n@@ -1062,11 +1069,16 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t  flags.min_after_base = min > rel;\n \t  flags.max_after_base = max > rel;\n \t  ADDR_DIFF_VEC_FLAGS (pat) = flags;\n+\n+\t  if (increasing)\n+\t    PUT_MODE (pat, CASE_VECTOR_SHORTEN_MODE (0, 0, pat));\n \t}\n     }\n #endif /* CASE_VECTOR_SHORTEN_MODE */\n \n   /* Compute initial lengths, addresses, and varying flags for each insn.  */\n+  int (*length_fun) (rtx) = increasing ? insn_min_length : insn_default_length;\n+\n   for (insn_current_address = 0, insn = first;\n        insn != 0;\n        insn_current_address += insn_lengths[uid], insn = NEXT_INSN (insn))\n@@ -1117,6 +1129,8 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n #else\n \t  const_delay_slots = 0;\n #endif\n+\t  int (*inner_length_fun) (rtx)\n+\t    = const_delay_slots ? length_fun : insn_default_length;\n \t  /* Inside a delay slot sequence, we do not do any branch shortening\n \t     if the shortening could change the number of delay slots\n \t     of the branch.  */\n@@ -1131,7 +1145,7 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t\tinner_length = (asm_insn_count (PATTERN (inner_insn))\n \t\t\t\t* insn_default_length (inner_insn));\n \t      else\n-\t\tinner_length = insn_default_length (inner_insn);\n+\t\tinner_length = inner_length_fun (inner_insn);\n \n \t      insn_lengths[inner_uid] = inner_length;\n \t      if (const_delay_slots)\n@@ -1149,7 +1163,7 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t}\n       else if (GET_CODE (body) != USE && GET_CODE (body) != CLOBBER)\n \t{\n-\t  insn_lengths[uid] = insn_default_length (insn);\n+\t  insn_lengths[uid] = length_fun (insn);\n \t  varying_length[uid] = insn_variable_length_p (insn);\n \t}\n \n@@ -1220,6 +1234,7 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t      rtx prev;\n \t      int rel_align = 0;\n \t      addr_diff_vec_flags flags;\n+\t      enum machine_mode vec_mode;\n \n \t      /* Avoid automatic aggregate initialization.  */\n \t      flags = ADDR_DIFF_VEC_FLAGS (body);\n@@ -1298,9 +1313,12 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t\t  else\n \t\t    max_addr += align_fuzz (max_lab, rel_lab, 0, 0);\n \t\t}\n-\t      PUT_MODE (body, CASE_VECTOR_SHORTEN_MODE (min_addr - rel_addr,\n-\t\t\t\t\t\t\tmax_addr - rel_addr,\n-\t\t\t\t\t\t\tbody));\n+\t      vec_mode = CASE_VECTOR_SHORTEN_MODE (min_addr - rel_addr,\n+\t\t\t\t\t\t   max_addr - rel_addr, body);\n+\t      if (!increasing\n+\t\t  || (GET_MODE_SIZE (vec_mode)\n+\t\t      >= GET_MODE_SIZE (GET_MODE (body))))\n+\t\tPUT_MODE (body, vec_mode);\n \t      if (JUMP_TABLES_IN_TEXT_SECTION\n \t\t  || readonly_data_section == text_section)\n \t\t{\n@@ -1362,10 +1380,15 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \n \t\t  if (inner_length != insn_lengths[inner_uid])\n \t\t    {\n-\t\t      insn_lengths[inner_uid] = inner_length;\n-\t\t      something_changed = 1;\n+\t\t      if (!increasing || inner_length > insn_lengths[inner_uid])\n+\t\t\t{\n+\t\t\t  insn_lengths[inner_uid] = inner_length;\n+\t\t\t  something_changed = 1;\n+\t\t\t}\n+\t\t      else\n+\t\t\tinner_length = insn_lengths[inner_uid];\n \t\t    }\n-\t\t  insn_current_address += insn_lengths[inner_uid];\n+\t\t  insn_current_address += inner_length;\n \t\t  new_length += inner_length;\n \t\t}\n \t    }\n@@ -1382,14 +1405,17 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t  insn_current_address += (new_length - tmp_length);\n #endif\n \n-\t  if (new_length != insn_lengths[uid])\n+\t  if (new_length != insn_lengths[uid]\n+\t      && (!increasing || new_length > insn_lengths[uid]))\n \t    {\n \t      insn_lengths[uid] = new_length;\n \t      something_changed = 1;\n \t    }\n+\t  else\n+\t    insn_current_address += insn_lengths[uid] - new_length;\n \t}\n       /* For a non-optimizing compile, do only a single pass.  */\n-      if (!optimize)\n+      if (!increasing)\n \tbreak;\n     }\n "}]}