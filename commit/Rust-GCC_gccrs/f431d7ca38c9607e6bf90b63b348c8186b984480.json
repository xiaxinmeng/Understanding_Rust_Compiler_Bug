{"sha": "f431d7ca38c9607e6bf90b63b348c8186b984480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzMWQ3Y2EzOGM5NjA3ZTZiZjkwYjYzYjM0OGM4MTg2Yjk4NDQ4MA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-12-10T14:00:03Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-12-10T14:00:03Z"}, "message": "unordered_set: Minor formatting changes.\n\n2011-12-12  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n\n\t* include/profile/unordered_set: Minor formatting changes.\n\t(unordered_set<>::_M_profile_destruct,\n\tunordered_multiset<>::_M_profile_destruct): Fix implementation to not\n\trely on normal implementation details anymore.\n\t(unordered_set<>::_M_profile_resize,\n\tunordered_multiset<>::_M_profile_resize): Implement consistently\n\taccross all unordered containers.\n\t(unordered_set<>::emplace, unordered_set<>::emplace_hint,\n\tunordered_multiset<>::emplace, unordered_multset<>::emplace_hint): Add\n\tto signal rehash to profiling system.\n\t* include/profile/unordered_map: Likewise for unordered_map<> and\n\tunordered_multimap<>.\n\nFrom-SVN: r182188", "tree": {"sha": "3932af52a5c98ee0931cb641f458d3d9987a2efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3932af52a5c98ee0931cb641f458d3d9987a2efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f431d7ca38c9607e6bf90b63b348c8186b984480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f431d7ca38c9607e6bf90b63b348c8186b984480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f431d7ca38c9607e6bf90b63b348c8186b984480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f431d7ca38c9607e6bf90b63b348c8186b984480/comments", "author": null, "committer": null, "parents": [{"sha": "188b7e235b0999c5904007a8d608362599290128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188b7e235b0999c5904007a8d608362599290128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188b7e235b0999c5904007a8d608362599290128"}], "stats": {"total": 330, "additions": 206, "deletions": 124}, "files": [{"sha": "9f117b4339187de3518e6cd6c443e2d3c4732faa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f431d7ca38c9607e6bf90b63b348c8186b984480/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f431d7ca38c9607e6bf90b63b348c8186b984480/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f431d7ca38c9607e6bf90b63b348c8186b984480", "patch": "@@ -1,3 +1,18 @@\n+2011-12-12  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n+\n+\t* include/profile/unordered_set: Minor formatting changes.\n+\t(unordered_set<>::_M_profile_destruct,\n+\tunordered_multiset<>::_M_profile_destruct): Fix implementation to not\n+\trely on normal implementation details anymore.\n+\t(unordered_set<>::_M_profile_resize,\n+\tunordered_multiset<>::_M_profile_resize): Implement consistently\n+\taccross all unordered containers.\n+\t(unordered_set<>::emplace, unordered_set<>::emplace_hint,\n+\tunordered_multiset<>::emplace, unordered_multset<>::emplace_hint): Add\n+\tto signal rehash to profiling system.\n+\t* include/profile/unordered_map: Likewise for unordered_map<> and\n+\tunordered_multimap<>.\n+\n 2011-12-09  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable.h (_Hashtable<>::emplace,"}, {"sha": "3688d549f65a8d2f0b4bcc7d9c65ec8491319277", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 87, "deletions": 49, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f431d7ca38c9607e6bf90b63b348c8186b984480/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f431d7ca38c9607e6bf90b63b348c8186b984480/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=f431d7ca38c9607e6bf90b63b348c8186b984480", "patch": "@@ -171,6 +171,28 @@ namespace __profile\n         _Base::clear();\n       }\n \n+      template<typename... _Args>\n+\tstd::pair<iterator, bool>\n+\templace(_Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  std::pair<iterator, bool> __res\n+\t    = _Base::emplace(std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n+      template<typename... _Args>\n+\titerator\n+\templace_hint(const_iterator __it, _Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  iterator __res\n+\t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n       void\n       insert(std::initializer_list<value_type> __l)\n       { \n@@ -182,7 +204,7 @@ namespace __profile\n       std::pair<iterator, bool>\n       insert(const value_type& __obj)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         std::pair<iterator, bool> __res = _Base::insert(__obj);\n         _M_profile_resize(__old_size); \n         return __res;\n@@ -203,7 +225,7 @@ namespace __profile\n         std::pair<iterator, bool>\n         insert(_Pair&& __obj)\n         {\n-\t  size_type __old_size =  _Base::bucket_count();\n+\t  size_type __old_size = _Base::bucket_count();\n \t  std::pair<iterator, bool> __res\n \t    = _Base::insert(std::forward<_Pair>(__obj));\n \t  _M_profile_resize(__old_size); \n@@ -243,7 +265,7 @@ namespace __profile\n       mapped_type&\n       operator[](const _Key& __k)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         mapped_type& __res = _M_base()[__k];\n         _M_profile_resize(__old_size); \n         return __res;\n@@ -252,7 +274,7 @@ namespace __profile\n       mapped_type&\n       operator[](_Key&& __k)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         mapped_type& __res = _M_base()[std::move(__k)];\n         _M_profile_resize(__old_size); \n         return __res;\n@@ -264,43 +286,43 @@ namespace __profile\n \n       void rehash(size_type __n)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n-        _Base::rehash(__n);\n-        _M_profile_resize(__old_size); \n+\tsize_type __old_size = _Base::bucket_count();\n+\t_Base::rehash(__n);\n+\t_M_profile_resize(__old_size); \n       }\n \n     private:\n       void\n       _M_profile_resize(size_type __old_size)\n       {\n \tsize_type __new_size = _Base::bucket_count();\n-        if (__old_size != __new_size)\n+\tif (__old_size != __new_size)\n \t  __profcxx_hashtable_resize(this, __old_size, __new_size);\n       }\n \n       void\n       _M_profile_destruct()\n       {\n-        size_type __hops = 0, __lc = 0, __chain = 0;\n-        for (iterator __it = _M_base().begin(); __it != _M_base().end();\n-\t     ++__it)\n+\tsize_type __hops = 0, __lc = 0, __chain = 0;\n+\titerator __it = this->begin();\n+\twhile (__it != this->end())\n \t  {\n-\t    while (__it._M_cur_node->_M_next)\n-\t      {\n-\t\t++__chain;\n-\t\t++__it;\n-\t      }\n+\t    size_type __bkt = this->bucket(__it->first);\n+\t    for (++__it; __it != this->end()\n+\t\t\t && this->bucket(__it->first) == __bkt;\n+\t\t ++__it)\n+\t      ++__chain;\n \t    if (__chain)\n \t      {\n \t\t++__chain;\n-\t\t__lc = __lc > __chain ? __lc : __chain;  \n+\t\t__lc = __lc > __chain ? __lc : __chain;\n \t\t__hops += __chain * (__chain - 1) / 2;\n \t\t__chain = 0;\n \t      }\n \t  }\n-        __profcxx_hashtable_destruct2(this, __lc,  _Base::size(), __hops); \n+\t__profcxx_hashtable_destruct2(this, __lc, _Base::size(), __hops);\n       }\n-   };\n+  };\n \n   template<typename _Key, typename _Tp, typename _Hash,\n \t   typename _Pred, typename _Alloc>\n@@ -429,12 +451,6 @@ namespace __profile\n         _M_profile_destruct();\n       }\n \n-      _Base&\n-      _M_base() noexcept       { return *this; }\n-\n-      const _Base&\n-      _M_base() const noexcept { return *this; }\n-\n       void\n       clear() noexcept\n       {\n@@ -444,20 +460,42 @@ namespace __profile\n         _Base::clear();\n       }\n \n+      template<typename... _Args>\n+\titerator\n+\templace(_Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  iterator __res\n+\t    = _Base::emplace(std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n+      template<typename... _Args>\n+\titerator\n+\templace_hint(const_iterator __it, _Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  iterator __res\n+\t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n       void\n       insert(std::initializer_list<value_type> __l)\n       { \n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         _Base::insert(__l);\n-        _M_profile_resize(__old_size, _Base::bucket_count());\n+        _M_profile_resize(__old_size);\n       }\n \n       iterator\n       insert(const value_type& __obj)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         iterator __res = _Base::insert(__obj);\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -466,7 +504,7 @@ namespace __profile\n       { \n         size_type __old_size = _Base::bucket_count(); \n         iterator __res = _Base::insert(__iter, __v);\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -476,9 +514,9 @@ namespace __profile\n         iterator\n         insert(_Pair&& __obj)\n         {\n-\t  size_type __old_size =  _Base::bucket_count();\n+\t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res = _Base::insert(std::forward<_Pair>(__obj));\n-\t  _M_profile_resize(__old_size, _Base::bucket_count()); \n+\t  _M_profile_resize(__old_size); \n \t  return __res;\n \t}\n \n@@ -490,7 +528,7 @@ namespace __profile\n         {\n \t  size_type __old_size = _Base::bucket_count(); \n \t  iterator __res = _Base::insert(__iter, std::forward<_Pair>(__v));\n-\t  _M_profile_resize(__old_size, _Base::bucket_count()); \n+\t  _M_profile_resize(__old_size); \n \t  return __res;\n \t}\n \n@@ -500,15 +538,15 @@ namespace __profile\n         {\n \t  size_type __old_size = _Base::bucket_count(); \n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size, _Base::bucket_count()); \n+\t  _M_profile_resize(__old_size); \n \t}\n \n       void\n       insert(const value_type* __first, const value_type* __last)\n       {\n         size_type __old_size = _Base::bucket_count(); \n         _Base::insert(__first, __last);\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n \n       void\n@@ -517,31 +555,32 @@ namespace __profile\n \n       void rehash(size_type __n)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         _Base::rehash(__n);\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n \n     private:\n       void\n-      _M_profile_resize(size_type __old_size, size_type __new_size)\n+      _M_profile_resize(size_type __old_size)\n       {\n+\tsize_type __new_size = _Base::bucket_count();\n         if (__old_size != __new_size)\n           __profcxx_hashtable_resize(this, __old_size, __new_size);\n       }\n \n       void\n       _M_profile_destruct()\n       {\n-        size_type __hops = 0, __lc = 0, __chain = 0;\n-        for (iterator __it = _M_base().begin(); __it != _M_base().end();\n-\t     ++__it)\n+\tsize_type __hops = 0, __lc = 0, __chain = 0;\n+\titerator __it = this->begin();\n+\twhile (__it != this->end())\n \t  {\n-\t    while (__it._M_cur_node->_M_next)\n-\t      {\n-\t\t++__chain;\n-\t\t++__it;\n-\t      }\n+\t    size_type __bkt = this->bucket(__it->first);\n+\t    for (++__it; __it != this->end()\n+\t\t\t && this->bucket(__it->first) == __bkt;\n+\t\t ++__it)\n+\t      ++__chain;\n \t    if (__chain)\n \t      {\n \t\t++__chain;\n@@ -550,10 +589,9 @@ namespace __profile\n \t\t__chain = 0;\n \t      }\n \t  }\n-        __profcxx_hashtable_destruct2(this, __lc,  _Base::size(), __hops);\n+\t__profcxx_hashtable_destruct2(this, __lc, _Base::size(), __hops);\n       }\n-\n-    };\n+  };\n \n   template<typename _Key, typename _Tp, typename _Hash,\n \t   typename _Pred, typename _Alloc>"}, {"sha": "55177b3355944c56c19ffbeef1c23c8a9e68baf0", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 104, "deletions": 75, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f431d7ca38c9607e6bf90b63b348c8186b984480/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f431d7ca38c9607e6bf90b63b348c8186b984480/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=f431d7ca38c9607e6bf90b63b348c8186b984480", "patch": "@@ -170,20 +170,42 @@ namespace __profile\n         _Base::clear();\n       }\n \n+      template<typename... _Args>\n+\tstd::pair<iterator, bool>\n+\templace(_Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  std::pair<iterator, bool> __res\n+\t    = _Base::emplace(std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n+      template<typename... _Args>\n+\titerator\n+\templace_hint(const_iterator __it, _Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  iterator __res\n+\t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n       void\n       insert(std::initializer_list<value_type> __l)\n       { \n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         _Base::insert(__l); \n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n \n       std::pair<iterator, bool>\n       insert(const value_type& __obj)\n       {\n         size_type __old_size = _Base::bucket_count();\n         std::pair<iterator, bool> __res = _Base::insert(__obj);\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -192,7 +214,7 @@ namespace __profile\n       { \n         size_type __old_size = _Base::bucket_count(); \n         iterator __res = _Base::insert(__iter, __v);\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -201,7 +223,7 @@ namespace __profile\n       {\n         size_type __old_size = _Base::bucket_count();\n         std::pair<iterator, bool> __res = _Base::insert(std::move(__obj));\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -210,7 +232,7 @@ namespace __profile\n       { \n         size_type __old_size = _Base::bucket_count();\n         iterator __res = _Base::insert(__iter, std::move(__v));\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -220,63 +242,56 @@ namespace __profile\n         {\n \t  size_type __old_size = _Base::bucket_count(); \n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size,  _Base::bucket_count()); \n+\t  _M_profile_resize(__old_size); \n \t}\n \n       void\n       insert(const value_type* __first, const value_type* __last)\n       {\n         size_type __old_size = _Base::bucket_count(); \n         _Base::insert(__first, __last);\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n      \n       void rehash(size_type __n)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         _Base::rehash(__n);\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n \n     private:\n-      _Base&\n-      _M_base() noexcept       { return *this; }\n-\n-      const _Base&\n-      _M_base() const noexcept { return *this; }\n-\n       void\n-      _M_profile_resize(size_type __old_size, size_type __new_size)\n+      _M_profile_resize(size_type __old_size)\n       {\n-        if (__old_size != __new_size)\n+\tsize_type __new_size = _Base::bucket_count();\n+\tif (__old_size != __new_size)\n \t  __profcxx_hashtable_resize(this, __old_size, __new_size);\n       }\n \n       void\n       _M_profile_destruct()\n       {\n-        size_type __hops = 0, __lc = 0, __chain = 0;\n-        for (iterator __it = _M_base().begin(); __it != _M_base().end();\n-\t     ++__it)\n-        {\n-          while (__it._M_cur_node->_M_next)\n-\t    {\n+\tsize_type __hops = 0, __lc = 0, __chain = 0;\n+\titerator __it = this->begin();\n+\twhile (__it != this->end())\n+\t  {\n+\t    size_type __bkt = this->bucket(*__it);\n+\t    for (++__it; __it != this->end() && this->bucket(*__it) == __bkt;\n+\t\t ++__it)\n \t      ++__chain;\n-\t      ++__it;\n-\t    }\n \n-          if (__chain)\n-\t    {\n-\t      ++__chain;\n-\t      __lc = __lc > __chain ? __lc : __chain;\n-\t      __hops += __chain * (__chain - 1) / 2;\n-\t      __chain = 0;\n-\t    }\n-        }\n-        __profcxx_hashtable_destruct2(this, __lc,  _Base::size(), __hops);\n+\t    if (__chain)\n+\t      {\n+\t\t++__chain;\n+\t\t__lc = __lc > __chain ? __lc : __chain;\n+\t\t__hops += __chain * (__chain - 1) / 2;\n+\t\t__chain = 0;\n+\t      }\n+\t  }\n+        __profcxx_hashtable_destruct2(this, __lc, _Base::size(), __hops);\n       }\n-\n-   };\n+  };\n \n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n     inline void\n@@ -418,20 +433,41 @@ namespace __profile\n         _Base::clear();\n       }\n \n+      template<typename... _Args>\n+\titerator\n+\templace(_Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  iterator __res = _Base::emplace(std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n+      template<typename... _Args>\n+\titerator\n+\templace_hint(const_iterator __it, _Args&&... __args)\n+\t{\n+\t  size_type __old_size = _Base::bucket_count();\n+\t  iterator __res\n+\t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n+\t  _M_profile_resize(__old_size);\n+\t  return __res;\n+\t}\n+\n       void\n       insert(std::initializer_list<value_type> __l)\n       { \n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         _Base::insert(__l); \n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n \n       iterator\n       insert(const value_type& __obj)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         iterator __res = _Base::insert(__obj);\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -440,16 +476,16 @@ namespace __profile\n       {\n         size_type __old_size = _Base::bucket_count(); \n         iterator __res = _Base::insert(__iter, __v);\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n       iterator\n       insert(value_type&& __obj)\n       {\n-\tsize_type __old_size =  _Base::bucket_count();\n+\tsize_type __old_size = _Base::bucket_count();\n         iterator __res = _Base::insert(std::move(__obj));\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -458,7 +494,7 @@ namespace __profile\n       {\n         size_type __old_size = _Base::bucket_count(); \n         iterator __res = _Base::insert(__iter, std::move(__v));\n-        _M_profile_resize(__old_size, _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n         return __res;\n       }\n \n@@ -468,62 +504,55 @@ namespace __profile\n         {\n \t  size_type __old_size = _Base::bucket_count(); \n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size,  _Base::bucket_count()); \n+\t  _M_profile_resize(__old_size); \n \t}\n \n       void\n       insert(const value_type* __first, const value_type* __last)\n       {\n         size_type __old_size = _Base::bucket_count(); \n         _Base::insert(__first, __last);\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n      \n       void rehash(size_type __n)\n       {\n-        size_type __old_size =  _Base::bucket_count();\n+        size_type __old_size = _Base::bucket_count();\n         _Base::rehash(__n);\n-        _M_profile_resize(__old_size,  _Base::bucket_count()); \n+        _M_profile_resize(__old_size); \n       }\n \n     private:\n-      _Base&\n-      _M_base() noexcept       { return *this; }\n-\n-      const _Base&\n-      _M_base() const noexcept { return *this; }\n-\n       void\n-      _M_profile_resize(size_type __old_size, size_type __new_size)\n+      _M_profile_resize(size_type __old_size)\n       {\n+\tsize_type __new_size = _Base::bucket_count();\n         if (__old_size != __new_size)\n           __profcxx_hashtable_resize(this, __old_size, __new_size);\n       }\n \n       void\n       _M_profile_destruct()\n       {\n-        size_type __hops = 0, __lc = 0, __chain = 0;\n-        for (iterator __it = _M_base().begin(); __it != _M_base().end();\n-\t     ++__it)\n-        {\n-          while (__it._M_cur_node->_M_next)\n-\t    {\n-             ++__chain;\n-             ++__it;\n-\t    }\n-\n-          if (__chain)\n-\t    {\n+\tsize_type __hops = 0, __lc = 0, __chain = 0;\n+\titerator __it = this->begin();\n+\twhile (__it != this->end())\n+\t  {\n+\t    size_type __bkt = this->bucket(*__it);\n+\t    for (++__it; __it != this->end() && this->bucket(*__it) == __bkt;\n+\t\t ++__it)\n \t      ++__chain;\n-\t      __lc = __lc > __chain ? __lc : __chain;\n-\t      __hops += __chain * (__chain - 1) / 2;\n-\t      __chain = 0;\n-\t    }\n-        }\n-        __profcxx_hashtable_destruct2(this, __lc,  _Base::size(), __hops);\n-      }\n \n+\t    if (__chain)\n+\t      {\n+\t\t++__chain;\n+\t\t__lc = __lc > __chain ? __lc : __chain;\n+\t\t__hops += __chain * (__chain - 1) / 2;\n+\t\t__chain = 0;\n+\t      }\n+\t  }\n+        __profcxx_hashtable_destruct2(this, __lc, _Base::size(), __hops);\n+      }\n    };\n \n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>"}]}