{"sha": "01718e96e798e62564e8aa3e4496e78441811c71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3MThlOTZlNzk4ZTYyNTY0ZThhYTNlNDQ5NmU3ODQ0MTgxMWM3MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-02-21T12:37:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-02-21T12:37:33Z"}, "message": "re PR tree-optimization/52324 (Store motion no longer performed)\n\n2012-02-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52324\n\t* gimplify.c (gimplify_expr): When re-gimplifying expressions\n\tdo not gimplify a MEM_REF address operand if it is already\n\tin suitable form.\n\n\t* gcc.dg/tree-ssa/ssa-lim-10.c: New testcase.\n\nFrom-SVN: r184435", "tree": {"sha": "a608d53ad0ae105cb54069a711fc6c63a367c516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a608d53ad0ae105cb54069a711fc6c63a367c516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01718e96e798e62564e8aa3e4496e78441811c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01718e96e798e62564e8aa3e4496e78441811c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01718e96e798e62564e8aa3e4496e78441811c71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01718e96e798e62564e8aa3e4496e78441811c71/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "305406d3e1e585ec8dc1eedbaf757148f6034119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305406d3e1e585ec8dc1eedbaf757148f6034119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305406d3e1e585ec8dc1eedbaf757148f6034119"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "4388b686717150623a995ce021b940fe5ec52aaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01718e96e798e62564e8aa3e4496e78441811c71", "patch": "@@ -1,3 +1,10 @@\n+2012-02-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52324\n+\t* gimplify.c (gimplify_expr): When re-gimplifying expressions\n+\tdo not gimplify a MEM_REF address operand if it is already\n+\tin suitable form.\n+\n 2012-02-21  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (\"fixuns_trunc<mode>si2\"): Replace"}, {"sha": "a214134c554160fac3e67973a37074fef87fdcb1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=01718e96e798e62564e8aa3e4496e78441811c71", "patch": "@@ -7061,15 +7061,23 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t      ret = GS_OK;\n \t      break;\n \t    }\n-\t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n-\t\t\t       is_gimple_mem_ref_addr, fb_rvalue);\n-\t  if (ret == GS_ERROR)\n-\t    break;\n+\t  /* Avoid re-gimplifying the address operand if it is already\n+\t     in suitable form.  Re-gimplifying would mark the address\n+\t     operand addressable.  Always gimplify when not in SSA form\n+\t     as we still may have to gimplify decls with value-exprs.  */\n+\t  if (!gimplify_ctxp || !gimplify_ctxp->into_ssa\n+\t      || !is_gimple_mem_ref_addr (TREE_OPERAND (*expr_p, 0)))\n+\t    {\n+\t      ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t\t\t   is_gimple_mem_ref_addr, fb_rvalue);\n+\t      if (ret == GS_ERROR)\n+\t\tbreak;\n+\t    }\n \t  recalculate_side_effects (*expr_p);\n \t  ret = GS_ALL_DONE;\n \t  break;\n \n-\t  /* Constants need not be gimplified.  */\n+\t/* Constants need not be gimplified.  */\n \tcase INTEGER_CST:\n \tcase REAL_CST:\n \tcase FIXED_CST:"}, {"sha": "5592364dd6ebb50c6fcae0f087f7097b0e049626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01718e96e798e62564e8aa3e4496e78441811c71", "patch": "@@ -1,3 +1,8 @@\n+2012-02-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52324\n+\t* gcc.dg/tree-ssa/ssa-lim-10.c: New testcase.\n+\n 2012-02-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR middle-end/51782"}, {"sha": "bc149265dd7844125efbadc7d69fe8e30070fae4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-10.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01718e96e798e62564e8aa3e4496e78441811c71/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-10.c?ref=01718e96e798e62564e8aa3e4496e78441811c71", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+\n+int *l, *r;\n+int test_func(void)\n+{\n+  int i;\n+  int direction;\n+  static int pos;\n+\n+  pos = 0;\n+  direction = 1;\n+\n+  for ( i = 0; i <= 400; i++ )\n+    {\n+      if ( direction == 0 )\n+\tpos = l[pos];\n+      else\n+\tpos = r[pos];\n+\n+      if ( pos == -1 )\n+\t{\n+\t  pos = 0;\n+\t  direction = !direction;\n+\t}\n+    }\n+  return i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Executing store motion of pos\" \"lim1\" } } */\n+/* { dg-final { cleanup-tree-dump \"lim1\" } } */"}]}