{"sha": "cbd9890e93bc95ef213702cb65c65836dfea2381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JkOTg5MGU5M2JjOTVlZjIxMzcwMmNiNjVjNjU4MzZkZmVhMjM4MQ==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2014-01-25T20:33:28Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2014-01-25T20:33:28Z"}, "message": "atomic.c (__atomic_do_and_fetch): Add a prefix op argument.\n\n2014-01-25  Walter Lee  <walt@tilera.com>\n\n            * config/tilepro/atomic.c (__atomic_do_and_fetch): Add a\n            prefix op argument.\n            (__atomic_nand_fetch_4): Add prefix op.\n            (__atomic_nand_fetch_8): Ditto.\n\nFrom-SVN: r207085", "tree": {"sha": "b03023edbc062939daea6fa8d4e0a013cd9905ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03023edbc062939daea6fa8d4e0a013cd9905ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbd9890e93bc95ef213702cb65c65836dfea2381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd9890e93bc95ef213702cb65c65836dfea2381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd9890e93bc95ef213702cb65c65836dfea2381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd9890e93bc95ef213702cb65c65836dfea2381/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bb0e2489c855b8354797a846d84bf6bab41bee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb0e2489c855b8354797a846d84bf6bab41bee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb0e2489c855b8354797a846d84bf6bab41bee5"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "9ea34c016156ad99d23aba3724f8875c8c3e24a9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd9890e93bc95ef213702cb65c65836dfea2381/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd9890e93bc95ef213702cb65c65836dfea2381/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=cbd9890e93bc95ef213702cb65c65836dfea2381", "patch": "@@ -1,3 +1,10 @@\n+2014-01-25  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilepro/atomic.c (__atomic_do_and_fetch): Add\n+\ta prefix op argument.\n+\t(__atomic_nand_fetch_4): Add prefix op.\n+\t(__atomic_nand_fetch_8): Ditto.\n+\n 2014-01-21  Baruch Siach <barch@tkos.co.il>\n \n \t* config.host (tmake_file): add t-slibgcc-libgcc for xtensa*-*-linux*."}, {"sha": "99193237d36d1379011cf8f22d03e9c43abfee33", "filename": "libgcc/config/tilepro/atomic.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd9890e93bc95ef213702cb65c65836dfea2381/libgcc%2Fconfig%2Ftilepro%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd9890e93bc95ef213702cb65c65836dfea2381/libgcc%2Fconfig%2Ftilepro%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ftilepro%2Fatomic.c?ref=cbd9890e93bc95ef213702cb65c65836dfea2381", "patch": "@@ -85,27 +85,29 @@ __atomic_fetch_and_do (long long, 8, or)\n __atomic_fetch_and_do (long long, 8, and)\n __atomic_fetch_and_do (long long, 8, xor)\n __atomic_fetch_and_do (long long, 8, nand)\n-#define __atomic_do_and_fetch(type, size, opname, op)\t\t\\\n+\n+#define __atomic_do_and_fetch(type, size, opname, op, op2)\t\\\n type\t\t\t\t\t\t\t\t\\\n __atomic_##opname##_fetch_##size(type* p, type i, int model)\t\\\n {\t\t\t\t\t\t\t\t\\\n   pre_atomic_barrier(model);\t\t\t\t\t\\\n-  type rv = arch_atomic_##opname(p, i) op i;\t\t\t\\\n+  type rv = op2 (arch_atomic_##opname(p, i) op i);\t\t\\\n   post_atomic_barrier(model);\t\t\t\t\t\\\n   return rv;\t\t\t\t\t\t\t\\\n }\n-__atomic_do_and_fetch (int, 4, add, +)\n-__atomic_do_and_fetch (int, 4, sub, -)\n-__atomic_do_and_fetch (int, 4, or, |)\n-__atomic_do_and_fetch (int, 4, and, &)\n-__atomic_do_and_fetch (int, 4, xor, |)\n-__atomic_do_and_fetch (int, 4, nand, &)\n-__atomic_do_and_fetch (long long, 8, add, +)\n-__atomic_do_and_fetch (long long, 8, sub, -)\n-__atomic_do_and_fetch (long long, 8, or, |)\n-__atomic_do_and_fetch (long long, 8, and, &)\n-__atomic_do_and_fetch (long long, 8, xor, |)\n-__atomic_do_and_fetch (long long, 8, nand, &)\n+__atomic_do_and_fetch (int, 4, add, +, )\n+__atomic_do_and_fetch (int, 4, sub, -, )\n+__atomic_do_and_fetch (int, 4, or, |, )\n+__atomic_do_and_fetch (int, 4, and, &, )\n+__atomic_do_and_fetch (int, 4, xor, |, )\n+__atomic_do_and_fetch (int, 4, nand, &, ~)\n+__atomic_do_and_fetch (long long, 8, add, +, )\n+__atomic_do_and_fetch (long long, 8, sub, -, )\n+__atomic_do_and_fetch (long long, 8, or, |, )\n+__atomic_do_and_fetch (long long, 8, and, &, )\n+__atomic_do_and_fetch (long long, 8, xor, |, )\n+__atomic_do_and_fetch (long long, 8, nand, &, ~)\n+\n #define __atomic_exchange_methods(type, size)\t\t\t\t\\\n bool\t\t\t\t\t\t\t\t\t\\\n __atomic_compare_exchange_##size(volatile type* ptr, type* oldvalp,\t\\\n@@ -129,6 +131,7 @@ __atomic_exchange_##size(volatile type* ptr, type val, int model)\t\\\n   post_atomic_barrier(model);\t\t\t\t\t\t\\\n   return retval;\t\t\t\t\t\t\t\\\n }\n+\n __atomic_exchange_methods (int, 4)\n __atomic_exchange_methods (long long, 8)\n \n@@ -137,6 +140,7 @@ __atomic_exchange_methods (long long, 8)\n    desired subword piece, then compare-and-exchange it into place.  */\n #define u8 unsigned char\n #define u16 unsigned short\n+\n #define __atomic_subword_cmpxchg(type, size)\t\t\t\t\\\n   \t\t\t\t\t\t\t\t\t\\\n bool\t\t\t\t\t\t\t\t\t\\\n@@ -161,8 +165,10 @@ __atomic_compare_exchange_##size(volatile type* ptr, type* guess,\t\\\n   *guess = oldval;\t\t\t\t\t\t\t\\\n   return success;\t\t\t\t\t\t\t\\\n }\n+\n __atomic_subword_cmpxchg (u8, 1)\n __atomic_subword_cmpxchg (u16, 2)\n+\n /* For the atomic-update subword methods, we use the same approach as\n    above, but we retry until we succeed if the compare-and-exchange\n    fails.  */\n@@ -185,42 +191,49 @@ proto\t\t\t\t\t\t\t\t\t\\\n   } while (__builtin_expect(xword != oldword, 0));\t\t\t\\\n   bottom\t\t\t\t\t\t\t\t\\\n }\n+\n #define __atomic_subword_fetch(type, funcname, expr, retval)\t\t\\\n   __atomic_subword(type,\t\t\t\t\t\t\\\n \t\t   type __atomic_ ## funcname(volatile type *ptr, type i, int model), \\\n \t\t   pre_atomic_barrier(model);,\t\t\t\t\\\n \t\t   expr,\t\t\t\t\t\t\\\n \t\t   post_atomic_barrier(model); return retval;)\n+\n __atomic_subword_fetch (u8, fetch_add_1, oldval + i, oldval)\n __atomic_subword_fetch (u8, fetch_sub_1, oldval - i, oldval)\n __atomic_subword_fetch (u8, fetch_or_1, oldval | i, oldval)\n __atomic_subword_fetch (u8, fetch_and_1, oldval & i, oldval)\n __atomic_subword_fetch (u8, fetch_xor_1, oldval ^ i, oldval)\n __atomic_subword_fetch (u8, fetch_nand_1, ~(oldval & i), oldval)\n+\n __atomic_subword_fetch (u16, fetch_add_2, oldval + i, oldval)\n __atomic_subword_fetch (u16, fetch_sub_2, oldval - i, oldval)\n __atomic_subword_fetch (u16, fetch_or_2, oldval | i, oldval)\n __atomic_subword_fetch (u16, fetch_and_2, oldval & i, oldval)\n __atomic_subword_fetch (u16, fetch_xor_2, oldval ^ i, oldval)\n __atomic_subword_fetch (u16, fetch_nand_2, ~(oldval & i), oldval)\n+\n __atomic_subword_fetch (u8, add_fetch_1, oldval + i, val)\n __atomic_subword_fetch (u8, sub_fetch_1, oldval - i, val)\n __atomic_subword_fetch (u8, or_fetch_1, oldval | i, val)\n __atomic_subword_fetch (u8, and_fetch_1, oldval & i, val)\n __atomic_subword_fetch (u8, xor_fetch_1, oldval ^ i, val)\n __atomic_subword_fetch (u8, nand_fetch_1, ~(oldval & i), val)\n+\n __atomic_subword_fetch (u16, add_fetch_2, oldval + i, val)\n __atomic_subword_fetch (u16, sub_fetch_2, oldval - i, val)\n __atomic_subword_fetch (u16, or_fetch_2, oldval | i, val)\n __atomic_subword_fetch (u16, and_fetch_2, oldval & i, val)\n __atomic_subword_fetch (u16, xor_fetch_2, oldval ^ i, val)\n __atomic_subword_fetch (u16, nand_fetch_2, ~(oldval & i), val)\n+\n #define __atomic_subword_lock(type, size)\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n __atomic_subword(type,\t\t\t\t\t\t\t\\\n \t\t type __atomic_exchange_##size(volatile type* ptr, type nval, int model), \\\n \t         pre_atomic_barrier(model);,\t\t\t\t\\\n \t         nval,\t\t\t\t\t\t\t\\\n \t         post_atomic_barrier(model); return oldval;)\n+\n __atomic_subword_lock (u8, 1)\n __atomic_subword_lock (u16, 2)"}]}