{"sha": "e95dda951fdf2349d669a6811cdc07f72846e5b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1ZGRhOTUxZmRmMjM0OWQ2NjlhNjgxMWNkYzA3ZjcyODQ2ZTViMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-04-20T13:30:13Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-04-20T13:30:13Z"}, "message": "Define __CET__ for -fcf-protection and remove -mibt\n\nWith revision 259496:\n\ncommit b1384095a7c1d06a44b70853372ebe037b2f7867\nAuthor: hjl <hjl@138bc75d-0d04-0410-961f-82ee72b054a4>\nDate:   Thu Apr 19 15:15:04 2018 +0000\n\n    x86: Enable -fcf-protection with multi-byte NOPs\n\n-mibt does nothing and can be removed.  Define __CET__ to indicate level\nprotection with -fcf-protection:\n\n(__CET__ & 1) != 0: -fcf-protection=branch or -fcf-protection=full\n(__CET__ & 2) != 0: -fcf-protection=return or -fcf-protection=full\n\ngcc/\n\n\tPR target/85469\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_IBT_SET):\n\tRemoved.\n\t(OPTION_MASK_ISA_IBT_UNSET): Likewise.\n\t(ix86_handle_option): Don't handle OPT_mibt.\n\t* config/i386/cet.h: Check __CET__ instead of __IBT__ and\n\t__SHSTK__.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Remove\n\thas_ibt and ibt.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Don't\n\tcheck OPTION_MASK_ISA_IBT nor flag_cf_protection.\n\t(ix86_target_macros): Define __CET__ with flag_cf_protection\n\tfor -fcf-protection.\n\t* config/i386/i386.c (isa2_opts): Remove -mibt.\n\t* config/i386/i386.h (TARGET_IBT): Removed.\n\t(TARGET_IBT_P): Likewise.\n\t(ix86_valid_target_attribute_inner_p): Don't check OPT_mibt.\n\t* config/i386/i386.md (nop_endbr): Don't check TARGET_IBT.\n\t* config/i386/i386.opt (mcet): Update help message.\n\t(mshstk): Likewise.\n\t(mibt): Removed.\n\t* doc/invoke.texi: Remove -mibt.  Document __CET__.  Document\n\t-mcet as an alias for -mshstk.\n\ngcc/testsuite/\n\n\tPR target/85469\n\t* gcc.target/i386/pr85044.c (dg-options): Remove -mibt.\n\t* gcc.target/i386/sse-26.c (dg-options): Remove -mno-ibt.\n\nFrom-SVN: r259522", "tree": {"sha": "6cd51c6124f23a670b0018b401b7243b4b03f313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd51c6124f23a670b0018b401b7243b4b03f313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e95dda951fdf2349d669a6811cdc07f72846e5b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95dda951fdf2349d669a6811cdc07f72846e5b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95dda951fdf2349d669a6811cdc07f72846e5b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95dda951fdf2349d669a6811cdc07f72846e5b3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fffefbf85f60859c21e6844aa06a0f6ce8cd1cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fffefbf85f60859c21e6844aa06a0f6ce8cd1cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fffefbf85f60859c21e6844aa06a0f6ce8cd1cdd"}], "stats": {"total": 131, "additions": 61, "deletions": 70}, "files": [{"sha": "44619827a89ff3ac3c4c37894da7de427caeb32f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -1,3 +1,29 @@\n+2018-04-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85469\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_IBT_SET):\n+\tRemoved.\n+\t(OPTION_MASK_ISA_IBT_UNSET): Likewise.\n+\t(ix86_handle_option): Don't handle OPT_mibt.\n+\t* config/i386/cet.h: Check __CET__ instead of __IBT__ and\n+\t__SHSTK__.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Remove\n+\thas_ibt and ibt.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Don't\n+\tcheck OPTION_MASK_ISA_IBT nor flag_cf_protection.\n+\t(ix86_target_macros): Define __CET__ with flag_cf_protection\n+\tfor -fcf-protection.\n+\t* config/i386/i386.c (isa2_opts): Remove -mibt.\n+\t* config/i386/i386.h (TARGET_IBT): Removed.\n+\t(TARGET_IBT_P): Likewise.\n+\t(ix86_valid_target_attribute_inner_p): Don't check OPT_mibt.\n+\t* config/i386/i386.md (nop_endbr): Don't check TARGET_IBT.\n+\t* config/i386/i386.opt (mcet): Update help message.\n+\t(mshstk): Likewise.\n+\t(mibt): Removed.\n+\t* doc/invoke.texi: Remove -mibt.  Document __CET__.  Document\n+\t-mcet as an alias for -mshstk.\n+\n 2018-04-20  Richard Biener <rguenther@suse.de>\n \n \tPR middle-end/85475"}, {"sha": "74a3490f7a367b0b6e32a4ecd26fc1f5d15234b1", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -147,7 +147,6 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_PKU_SET OPTION_MASK_ISA_PKU\n #define OPTION_MASK_ISA_RDPID_SET OPTION_MASK_ISA_RDPID\n #define OPTION_MASK_ISA_GFNI_SET OPTION_MASK_ISA_GFNI\n-#define OPTION_MASK_ISA_IBT_SET OPTION_MASK_ISA_IBT\n #define OPTION_MASK_ISA_SHSTK_SET OPTION_MASK_ISA_SHSTK\n #define OPTION_MASK_ISA_VAES_SET OPTION_MASK_ISA_VAES\n #define OPTION_MASK_ISA_VPCLMULQDQ_SET OPTION_MASK_ISA_VPCLMULQDQ\n@@ -224,7 +223,6 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_PKU_UNSET OPTION_MASK_ISA_PKU\n #define OPTION_MASK_ISA_RDPID_UNSET OPTION_MASK_ISA_RDPID\n #define OPTION_MASK_ISA_GFNI_UNSET OPTION_MASK_ISA_GFNI\n-#define OPTION_MASK_ISA_IBT_UNSET OPTION_MASK_ISA_IBT\n #define OPTION_MASK_ISA_SHSTK_UNSET OPTION_MASK_ISA_SHSTK\n #define OPTION_MASK_ISA_VAES_UNSET OPTION_MASK_ISA_VAES\n #define OPTION_MASK_ISA_VPCLMULQDQ_UNSET OPTION_MASK_ISA_VPCLMULQDQ\n@@ -546,21 +544,6 @@ ix86_handle_option (struct gcc_options *opts,\n       return true;\n \n     case OPT_mcet:\n-    case OPT_mibt:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_IBT_SET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_IBT_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_IBT_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_IBT_UNSET;\n-\t}\n-      if (code != OPT_mcet)\n-\treturn true;\n-      /* fall through.  */\n-\n     case OPT_mshstk:\n       if (value)\n \t{"}, {"sha": "309f6428735e8bb84a80558b745e2d87efec7ef6", "filename": "gcc/config/i386/cet.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fcet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fcet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcet.h?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -32,7 +32,7 @@\n \n #ifdef __ASSEMBLER__\n \n-# ifdef __IBT__\n+# if defined __CET__ && (__CET__ & 1) != 0\n #  ifdef __x86_64__\n #   define _CET_ENDBR endbr64\n #  else\n@@ -44,14 +44,14 @@\n \n # ifdef __ELF__\n #  ifdef __CET__\n-#   ifdef __IBT__\n+#   if (__CET__ & 1) != 0\n /* GNU_PROPERTY_X86_FEATURE_1_IBT.  */\n #    define __PROPERTY_IBT 0x1\n #   else\n #    define __PROPERTY_IBT 0x0\n #   endif\n \n-#   ifdef __SHSTK__\n+#   if (__CET__ & 2) != 0\n /* GNU_PROPERTY_X86_FEATURE_1_SHSTK.  */\n #    define __PROPERTY_SHSTK 0x2\n #   else"}, {"sha": "704cadd8fcfcc9df0b644c3143fbf1f090bf45c4", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -420,7 +420,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx5124fmaps = 0, has_avx5124vnniw = 0;\n   unsigned int has_gfni = 0, has_avx512vbmi2 = 0;\n   unsigned int has_avx512bitalg = 0;\n-  unsigned int has_ibt = 0, has_shstk = 0;\n+  unsigned int has_shstk = 0;\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n   unsigned int has_vpclmulqdq = 0;\n   unsigned int has_movdiri = 0, has_movdir64b = 0;\n@@ -526,7 +526,6 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n \n       has_shstk = ecx & bit_SHSTK;\n-      has_ibt = edx & bit_IBT;\n       has_pconfig = edx & bit_PCONFIG;\n     }\n \n@@ -1095,7 +1094,6 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *pku = has_pku ? \" -mpku\" : \" -mno-pku\";\n       const char *rdpid = has_rdpid ? \" -mrdpid\" : \" -mno-rdpid\";\n       const char *gfni = has_gfni ? \" -mgfni\" : \" -mno-gfni\";\n-      const char *ibt = has_ibt ? \" -mibt\" : \" -mno-ibt\";\n       const char *shstk = has_shstk ? \" -mshstk\" : \" -mno-shstk\";\n       const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n       const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n@@ -1112,7 +1110,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n-\t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, ibt, shstk,\n+\t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, NULL);\n     }"}, {"sha": "ae7d678e77ef6ec4ed5d1f0c28c83720f5af1209", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -499,20 +499,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__RDPID__\");\n   if (isa_flag & OPTION_MASK_ISA_GFNI)\n     def_or_undef (parse_in, \"__GFNI__\");\n-  if ((isa_flag2 & OPTION_MASK_ISA_IBT)\n-      || (flag_cf_protection & CF_BRANCH))\n-    {\n-      def_or_undef (parse_in, \"__IBT__\");\n-      if (flag_cf_protection != CF_NONE)\n-\tdef_or_undef (parse_in, \"__CET__\");\n-    }\n-  if ((isa_flag & OPTION_MASK_ISA_SHSTK)\n-      || (flag_cf_protection & CF_RETURN))\n-    {\n-      def_or_undef (parse_in, \"__SHSTK__\");\n-      if (flag_cf_protection != CF_NONE)\n-\tdef_or_undef (parse_in, \"__CET__\");\n-    }\n+  if ((isa_flag & OPTION_MASK_ISA_SHSTK))\n+    def_or_undef (parse_in, \"__SHSTK__\");\n   if (isa_flag2 & OPTION_MASK_ISA_VAES)\n     def_or_undef (parse_in, \"__VAES__\");\n   if (isa_flag & OPTION_MASK_ISA_VPCLMULQDQ)\n@@ -680,6 +668,10 @@ ix86_target_macros (void)\n \n   cpp_define (parse_in, \"__SEG_FS\");\n   cpp_define (parse_in, \"__SEG_GS\");\n+\n+  if (flag_cf_protection != CF_NONE)\n+    cpp_define_formatted (parse_in, \"__CET__=%d\",\n+\t\t\t  flag_cf_protection & ~CF_SET);\n }\n \n \f"}, {"sha": "dc80b34f30278efef94694b8703763dfbc6de14e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -2766,7 +2766,6 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n     { \"-mavx5124fmaps\", OPTION_MASK_ISA_AVX5124FMAPS },\n-    { \"-mibt\",\t\tOPTION_MASK_ISA_IBT },\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n@@ -5377,7 +5376,6 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"clwb\",\tOPT_mclwb),\n     IX86_ATTR_ISA (\"rdpid\",\tOPT_mrdpid),\n     IX86_ATTR_ISA (\"gfni\",\tOPT_mgfni),\n-    IX86_ATTR_ISA (\"ibt\",\tOPT_mibt),\n     IX86_ATTR_ISA (\"shstk\",\tOPT_mshstk),\n     IX86_ATTR_ISA (\"vaes\",\tOPT_mvaes),\n     IX86_ATTR_ISA (\"vpclmulqdq\", OPT_mvpclmulqdq),"}, {"sha": "795ad2a322b0a676e6c9d986f6f77356d6aca473", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -183,8 +183,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_MWAITX_P(x)\tTARGET_ISA_MWAITX_P(x)\n #define TARGET_PKU\tTARGET_ISA_PKU\n #define TARGET_PKU_P(x)\tTARGET_ISA_PKU_P(x)\n-#define TARGET_IBT\tTARGET_ISA_IBT\n-#define TARGET_IBT_P(x)\tTARGET_ISA_IBT_P(x)\n #define TARGET_SHSTK\tTARGET_ISA_SHSTK\n #define TARGET_SHSTK_P(x)\tTARGET_ISA_SHSTK_P(x)\n #define TARGET_MOVDIRI\tTARGET_ISA_MOVDIRI"}, {"sha": "a134ca8801419a240ea4cb238839b97ee93f4b13", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -20332,7 +20332,7 @@\n \n (define_insn \"nop_endbr\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_NOP_ENDBR)]\n-  \"TARGET_IBT || (flag_cf_protection & CF_BRANCH)\"\n+  \"(flag_cf_protection & CF_BRANCH)\"\n   \"*\n { return (TARGET_64BIT)? \\\"endbr64\\\" : \\\"endbr32\\\"; }\"\n   [(set_attr \"length\" \"4\")"}, {"sha": "815eceb713d37ca7372e058b166fc534dc3a1582", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -1008,17 +1008,13 @@ Generate code which uses only the general registers.\n \n mcet\n Target Report Var(flag_cet) Init(0)\n-Support Control-flow Enforcement Technology (CET) built-in functions.\n-\n-mibt\n-Target Report Mask(ISA_IBT) Var(ix86_isa_flags2) Save\n-Specifically enable indirect branch tracking built-in functions from\n-Control-flow Enforcement Technology (CET).\n+Enable shadow stack built-in functions from Control-flow Enforcement\n+Technology (CET).\n \n mshstk\n Target Report Mask(ISA_SHSTK) Var(ix86_isa_flags) Save\n-Specifically enable shadow stack built-in functions from Control-flow\n-Enforcement Technology (CET).\n+Enable shadow stack built-in functions from Control-flow Enforcement\n+Technology (CET).\n \n mcet-switch\n Target Report Undocumented Var(flag_cet_switch) Init(0)"}, {"sha": "b6784b75fa22388ddfe81a1dc71479ed0282cf3b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -1261,7 +1261,7 @@ See RS/6000 and PowerPC Options.\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n -mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  @gol\n--mcet -mibt -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n+-mcet -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n -mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b -mavx512vpopcntdq @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n@@ -11829,6 +11829,11 @@ function.  The value @code{full} is an alias for specifying both\n @code{branch} and @code{return}. The value @code{none} turns off\n instrumentation.\n \n+The macro @code{__CET__} is defined when @option{-fcf-protection} is\n+used.  The first bit of @code{__CET__} is set to 1 for the value\n+@code{branch} and the second bit of @code{__CET__} is set to 1 for\n+the @code{return}.\n+\n You can also use the @code{nocf_check} attribute to identify\n which functions and calls should be skipped from instrumentation\n (@pxref{Function Attributes}).\n@@ -27349,11 +27354,6 @@ supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n \n-The @option{-mcet} option turns on the @option{-mibt} and @option{-mshstk}\n-options.  The compiler provides a number of built-in functions for\n-fine-grained control in a CET-based application.  See\n-@xref{x86 Built-in Functions}, for more information.\n-\n @item -mdump-tune-features\n @opindex mdump-tune-features\n This option instructs GCC to dump the names of the x86 performance \n@@ -27446,19 +27446,13 @@ see @ref{Other Builtins} for details.\n This option enables use of the @code{movbe} instruction to implement\n @code{__builtin_bswap32} and @code{__builtin_bswap64}.\n \n-@item -mibt\n-@opindex mibt\n-This option enables indirect branch tracking built-in functions from\n-x86 Control-flow Enforcement Technology (CET).  The option\n-@option{-mibt} is on by default when the @code{-mcet} option is\n-specified.\n-\n @item -mshstk\n+@itemx -mcet\n @opindex mshstk\n-This option enables shadow stack built-in functions from x86\n-Control-flow Enforcement Technology (CET).  The option\n-@option{-mshstk} is on by default when the @option{-mcet} option is\n-specified.\n+@opindex mcet\n+The @option{-mshstk} option enables shadow stack built-in functions\n+from x86 Control-flow Enforcement Technology (CET).  The @option{-mcet}\n+option is an alias for the @option{-mshstk} option.\n \n @item -mcrc32\n @opindex mcrc32"}, {"sha": "8e9787647133bb629f088c8f9b4bdbd50ef286f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -1,3 +1,9 @@\n+2018-04-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85469\n+\t* gcc.target/i386/pr85044.c (dg-options): Remove -mibt.\n+\t* gcc.target/i386/sse-26.c (dg-options): Remove -mno-ibt.\n+\n 2018-04-20  Richard Biener <rguenther@suse.de>\n \n \tPR middle-end/85475"}, {"sha": "a25cc7fe3252baff438de41455985f068163b130", "filename": "gcc/testsuite/gcc.target/i386/pr85044.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85044.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85044.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85044.c?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target cet } } */\n-/* { dg-options \"-O2 -fcf-protection=branch -mibt\" } */\n+/* { dg-options \"-O2 -fcf-protection=branch\" } */\n \n void callme (void (*callback) (void));\n "}, {"sha": "04ffe10f42a17f86407001db2a5fef7b8d2720b4", "filename": "gcc/testsuite/gcc.target/i386/sse-26.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95dda951fdf2349d669a6811cdc07f72846e5b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-26.c?ref=e95dda951fdf2349d669a6811cdc07f72846e5b3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse2 -mmmx -mno-sse3 -mno-3dnow -mno-fma -mno-fxsr -mno-xsave -mno-rtm -mno-prfchw -mno-rdseed -mno-adx -mno-prefetchwt1 -mno-clflushopt -mno-xsavec -mno-xsaves -mno-clwb -mno-mwaitx -mno-clzero -mno-pku -mno-rdpid -mno-gfni -mno-ibt -mno-shstk -mno-vaes -mno-vpclmulqdq\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse2 -mmmx -mno-sse3 -mno-3dnow -mno-fma -mno-fxsr -mno-xsave -mno-rtm -mno-prfchw -mno-rdseed -mno-adx -mno-prefetchwt1 -mno-clflushopt -mno-xsavec -mno-xsaves -mno-clwb -mno-mwaitx -mno-clzero -mno-pku -mno-rdpid -mno-gfni -mno-shstk -mno-vaes -mno-vpclmulqdq\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include \"sse-13.c\""}]}