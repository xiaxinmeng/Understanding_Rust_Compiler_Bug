{"sha": "8de583fc5301987f31e1897e07d545e218b943da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlNTgzZmM1MzAxOTg3ZjMxZTE4OTdlMDdkNTQ1ZTIxOGI5NDNkYQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2018-07-06T21:05:48Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2018-07-06T21:05:48Z"}, "message": "re PR target/86324 (testsuite test divkc3-1.c FAILs when compiling with -mabi=ieeelongdouble)\n\ngcc/\n\tPR target/86324\n\t* target.def (translate_mode_attribute): New hook.\n\t* targhooks.h (default_translate_mode_attribute): Declare.\n\t* targhooks.c (default_translate_mode_attribute): New function.\n\t* doc/tm.texi.in (TARGET_TRANSLATE_MODE_ATTRIBUTE): New hook.\n\t* doc/tm.texi: Regenerate.\n\t* config/rs6000/rs6000.c (TARGET_TRANSLATE_MODE_ATTRIBUTE): Define.\n\t(rs6000_translate_mode_attribute): New function.\n\ngcc/c-family/\n\tPR target/86324\n\t* c-attribs.c (handle_mode_attribute): Call new translate_mode_attribute\n\ttarget hook.\n\ngcc/testsuite/\n\tPR target/86324\n\tgcc.target/powerpc/pr86324-1.c: New test.\n\tgcc.target/powerpc/pr86324-2.c: Likewise.\n\nFrom-SVN: r262484", "tree": {"sha": "e0355f244ec0a61d828a04ab7d1783556b3a2fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0355f244ec0a61d828a04ab7d1783556b3a2fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de583fc5301987f31e1897e07d545e218b943da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de583fc5301987f31e1897e07d545e218b943da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de583fc5301987f31e1897e07d545e218b943da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de583fc5301987f31e1897e07d545e218b943da/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cf2b955893a333c6f6e4c60427832e97dd2bff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf2b955893a333c6f6e4c60427832e97dd2bff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf2b955893a333c6f6e4c60427832e97dd2bff7"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "c4ac3ea9ef50d9bc275140348523ef0b49822131", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -1,3 +1,14 @@\n+2018-07-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/86324\n+\t* target.def (translate_mode_attribute): New hook.\n+\t* targhooks.h (default_translate_mode_attribute): Declare.\n+\t* targhooks.c (default_translate_mode_attribute): New function.\n+\t* doc/tm.texi.in (TARGET_TRANSLATE_MODE_ATTRIBUTE): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/rs6000/rs6000.c (TARGET_TRANSLATE_MODE_ATTRIBUTE): Define.\n+\t(rs6000_translate_mode_attribute): New function.\n+\n 2018-07-06  Paul Koning  <ni1d@arrl.net>\n \n \t* doc/md.texi (define_split): Document DONE and FAIL."}, {"sha": "4193200895ff17e2a840e3d1c83b8b1f858fdfba", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -1,3 +1,9 @@\n+2018-07-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/86324\n+\t* c-attribs.c (handle_mode_attribute): Call new translate_mode_attribute\n+\ttarget hook.\n+\n 2018-07-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-lex.c (fe_file_change): Check SYSTEM_IMPLICIT_EXTERN_C not"}, {"sha": "f91add488bbb5d39365beec2f6b6c37d803c9e4c", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -1517,6 +1517,10 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t  return NULL_TREE;\n \t}\n \n+      /* Allow the target a chance to translate MODE into something supported.\n+\t See PR86324.  */\n+      mode = targetm.translate_mode_attribute (mode);\n+\n       valid_mode = false;\n       switch (GET_MODE_CLASS (mode))\n \t{"}, {"sha": "197607214ff52e6f97f1b78c71a656bb95ace0f7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -1802,6 +1802,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_EH_RETURN_FILTER_MODE\n #define TARGET_EH_RETURN_FILTER_MODE rs6000_eh_return_filter_mode\n \n+#undef TARGET_TRANSLATE_MODE_ATTRIBUTE\n+#define TARGET_TRANSLATE_MODE_ATTRIBUTE rs6000_translate_mode_attribute\n+\n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P rs6000_scalar_mode_supported_p\n \n@@ -35678,6 +35681,18 @@ rs6000_eh_return_filter_mode (void)\n   return TARGET_32BIT ? SImode : word_mode;\n }\n \n+/* Target hook for translate_mode_attribute.  */\n+static machine_mode\n+rs6000_translate_mode_attribute (machine_mode mode)\n+{\n+  if ((FLOAT128_IEEE_P (mode)\n+       && ieee128_float_type_node == long_double_type_node)\n+      || (FLOAT128_IBM_P (mode)\n+\t  && ibm128_float_type_node == long_double_type_node))\n+    return COMPLEX_MODE_P (mode) ? E_TCmode : E_TFmode;\n+  return mode;\n+}\n+\n /* Target hook for scalar_mode_supported_p.  */\n static bool\n rs6000_scalar_mode_supported_p (scalar_mode mode)"}, {"sha": "7e2cdc2f2026ab727fe396a987ae0ced5899f6b3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -4255,6 +4255,14 @@ hook returns true for both @code{ptr_mode} and @code{Pmode}.\n Define this to return nonzero if the memory reference @var{ref}  may alias with the system C library errno location.  The default  version of this hook assumes the system C library errno location  is either a declaration of type int or accessed by dereferencing  a pointer to int.\n @end deftypefn\n \n+@deftypefn {Target Hook} machine_mode TARGET_TRANSLATE_MODE_ATTRIBUTE (machine_mode @var{mode})\n+Define this hook if during mode attribute processing, the port should\n+translate machine_mode @var{mode} to another mode.  For example, rs6000's\n+@code{KFmode}, when it is the same as @code{TFmode}.\n+\n+The default version of the hook returns that mode that was passed in.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_SCALAR_MODE_SUPPORTED_P (scalar_mode @var{mode})\n Define this to return nonzero if the port is prepared to handle\n insns involving scalar mode @var{mode}.  For a scalar mode to be"}, {"sha": "b7b0e8ac8dc47c7604ef2bb54d0d80c559542375", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -3336,6 +3336,8 @@ stack.\n \n @hook TARGET_REF_MAY_ALIAS_ERRNO\n \n+@hook TARGET_TRANSLATE_MODE_ATTRIBUTE\n+\n @hook TARGET_SCALAR_MODE_SUPPORTED_P\n \n @hook TARGET_VECTOR_MODE_SUPPORTED_P"}, {"sha": "112c77222a96c7e77d400e3858cab60014c1bf90", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -3310,6 +3310,16 @@ constants can be done inline.  The function\\n\\\n  HOST_WIDE_INT, (const_tree constant, HOST_WIDE_INT basic_align),\n  default_constant_alignment)\n \n+DEFHOOK\n+(translate_mode_attribute,\n+ \"Define this hook if during mode attribute processing, the port should\\n\\\n+translate machine_mode @var{mode} to another mode.  For example, rs6000's\\n\\\n+@code{KFmode}, when it is the same as @code{TFmode}.\\n\\\n+\\n\\\n+The default version of the hook returns that mode that was passed in.\",\n+ machine_mode, (machine_mode mode),\n+ default_translate_mode_attribute)\n+\n /* True if MODE is valid for the target.  By \"valid\", we mean able to\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported.  */"}, {"sha": "7315f1a9797e32a3d34ad412b45f34992119d6b5", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -393,6 +393,14 @@ default_mangle_assembler_name (const char *name ATTRIBUTE_UNUSED)\n   return get_identifier (stripped);\n }\n \n+/* The default implementation of TARGET_TRANSLATE_MODE_ATTRIBUTE.  */\n+\n+machine_mode\n+default_translate_mode_attribute (machine_mode mode)\n+{\n+  return mode;\n+}\n+\n /* True if MODE is valid for the target.  By \"valid\", we mean able to\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported."}, {"sha": "4107e22d97c1373aa01f0f802e4bdd7d98e9a69a", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -72,6 +72,7 @@ extern void default_print_operand_address (FILE *, machine_mode, rtx);\n extern bool default_print_operand_punct_valid_p (unsigned char);\n extern tree default_mangle_assembler_name (const char *);\n \n+extern machine_mode default_translate_mode_attribute (machine_mode);\n extern bool default_scalar_mode_supported_p (scalar_mode);\n extern bool default_libgcc_floating_mode_supported_p (scalar_float_mode);\n extern opt_scalar_float_mode default_floatn_mode (int, bool);"}, {"sha": "fd01045f3e21815ba8e02d01ed55c3a58d578925", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -1,3 +1,9 @@\n+2018-07-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/86324\n+\tgcc.target/powerpc/pr86324-1.c: New test.\n+\tgcc.target/powerpc/pr86324-2.c: Likewise.\n+\n 2018-07-06  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/84711"}, {"sha": "66d9a90dcc58b3390f81972502e4506bd009b5b5", "filename": "gcc/testsuite/gcc.target/powerpc/pr86324-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86324-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86324-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86324-1.c?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-options \"-mlong-double-128 -mabi=ieeelongdouble -Wno-psabi\" } */\n+\n+typedef __complex float cflt_t __attribute__((mode(KC)));\n+\n+cflt_t\n+divide (cflt_t *ptr)\n+{\n+  return *ptr;\n+}"}, {"sha": "2bd7cb37618c5e0d595e6c362d637443ee955f2f", "filename": "gcc/testsuite/gcc.target/powerpc/pr86324-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86324-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de583fc5301987f31e1897e07d545e218b943da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86324-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86324-2.c?ref=8de583fc5301987f31e1897e07d545e218b943da", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-options \"-mlong-double-128 -mabi=ibmlongdouble -Wno-psabi\" } */\n+\n+typedef __complex float cflt_t __attribute__((mode(IC)));\n+\n+cflt_t\n+divide (cflt_t *ptr)\n+{\n+  return *ptr;\n+}"}]}