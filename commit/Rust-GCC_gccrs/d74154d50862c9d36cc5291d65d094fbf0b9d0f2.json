{"sha": "d74154d50862c9d36cc5291d65d094fbf0b9d0f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0MTU0ZDUwODYyYzlkMzZjYzUyOTFkNjVkMDk0ZmJmMGI5ZDBmMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-02T04:40:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-02T04:40:43Z"}, "message": "(constant_expression_warning): Suppress duplicate warnings.\n\n(convert_and_check, overflow_warning, unsigned_conversion_warning):\nNew functions.  Prototypes added to c-tree.h.\n\nFrom-SVN: r3405", "tree": {"sha": "dbfb525530df0e7235dc15a84ca33c297e5a8b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbfb525530df0e7235dc15a84ca33c297e5a8b7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74154d50862c9d36cc5291d65d094fbf0b9d0f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74154d50862c9d36cc5291d65d094fbf0b9d0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74154d50862c9d36cc5291d65d094fbf0b9d0f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74154d50862c9d36cc5291d65d094fbf0b9d0f2/comments", "author": null, "committer": null, "parents": [{"sha": "e58cd767bbaa3a6dc474c7c4e0617f8571bd53ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58cd767bbaa3a6dc474c7c4e0617f8571bd53ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58cd767bbaa3a6dc474c7c4e0617f8571bd53ad"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "85ef0480ba4cadfce35f2274ddab29b176480364", "filename": "gcc/c-common.c", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74154d50862c9d36cc5291d65d094fbf0b9d0f2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74154d50862c9d36cc5291d65d094fbf0b9d0f2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d74154d50862c9d36cc5291d65d094fbf0b9d0f2", "patch": "@@ -304,14 +304,84 @@ decl_attributes (decl, attributes)\n       }\n }\n \f\n-/* Print a warning if a constant expression had overflow in folding.  */\n+/* Print a warning if a constant expression had overflow in folding.\n+   Invoke this function on every expression that the language\n+   requires to be a constant expression.\n+   Note the ANSI C standard says it is erroneous for a\n+   constant expression to overflow.  */\n \n void\n constant_expression_warning (value)\n      tree value;\n {\n   if (TREE_CODE (value) == INTEGER_CST && TREE_CONSTANT_OVERFLOW (value))\n-    pedwarn (\"overflow in constant expression\");\n+    {\n+      pedwarn (\"overflow in constant expression\");\n+      /* Suppress duplicate warnings.  */\n+      TREE_CONSTANT_OVERFLOW (value) = 0;\n+    }\n+}\n+\n+/* Print a warning if an expression had overflow in folding.\n+   Invoke this function on every expression that\n+   (1) appears in the source code, and\n+   (2) might be a constant expression that overflowed, and\n+   (3) is not already checked by convert_and_check;\n+   however, do not invoke this function on operands of explicit casts.  */\n+\n+void\n+overflow_warning (value)\n+     tree value;\n+{\n+  if (TREE_CODE (value) == INTEGER_CST && TREE_CONSTANT_OVERFLOW (value))\n+    {\n+      pedwarn (\"integer overflow in expression\");\n+      TREE_CONSTANT_OVERFLOW (value) = 0;\n+    }\n+}\n+\n+/* Print a warning if a large constant is truncated to unsigned,\n+   or if -Wconversion is used and a constant < 0 is converted to unsigned.\n+   Invoke this function on every expression that might be implicitly\n+   converted to an unsigned type.  */\n+\n+void\n+unsigned_conversion_warning (result, operand)\n+     tree result, operand;\n+{\n+  if (TREE_CODE (operand) == INTEGER_CST\n+      && TREE_CODE (TREE_TYPE (result)) == INTEGER_TYPE\n+      && TREE_UNSIGNED (TREE_TYPE (result))\n+      && !int_fits_type_p (operand, TREE_TYPE (result)))\n+    {\n+      if (!int_fits_type_p (operand, signed_type (TREE_TYPE (result))))\n+\t/* This detects cases like converting -129 or 256 to unsigned char.  */\n+\tpedwarn (\"large integer implicitly truncated to unsigned type\");\n+      else if (warn_conversion)\n+\tpedwarn (\"negative integer implicitly converted to unsigned type\");\n+    }\n+}\n+\n+/* Convert EXPR to TYPE, warning about conversion problems with constants.\n+   Invoke this function on every expression that is converted implicitly,\n+   i.e. because of language rules and not because of an explicit cast.  */\n+\n+tree\n+convert_and_check (type, expr)\n+     tree type, expr;\n+{\n+  tree t = convert (type, expr);\n+  if (TREE_CODE (t) == INTEGER_CST)\n+    {\n+      if (TREE_CONSTANT_OVERFLOW (t))\n+\t{\n+\t  pedwarn (\"overflow in implicit constant conversion\");\n+\t  TREE_CONSTANT_OVERFLOW (t) = 0;\n+\t}\n+      else\n+\tunsigned_conversion_warning (t, expr);\n+    }\n+  return t;\n }\n \f\n void"}]}