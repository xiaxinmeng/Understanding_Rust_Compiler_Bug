{"sha": "c2873f74238f63398915693078adc7ccc7698828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4NzNmNzQyMzhmNjMzOTg5MTU2OTMwNzhhZGM3Y2NjNzY5ODgyOA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2011-08-04T09:48:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:48:09Z"}, "message": "put_scos.adb (Put_SCOs): Do not emit decision SCO for an X decision nested in a disabled pragma.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* put_scos.adb (Put_SCOs): Do not emit decision SCO for an X decision\n\tnested in a disabled pragma.\n\t* scos.ads, scos.adb, par_sco.ads, par_sco.adb: Record sloc of\n\tenclosing pragma, if any, for X decisions.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_prag.adb: Minor reformatting.\n\nFrom-SVN: r177347", "tree": {"sha": "b86a4093d6c677e1da5706cd74c56465c8ffc6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86a4093d6c677e1da5706cd74c56465c8ffc6a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2873f74238f63398915693078adc7ccc7698828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2873f74238f63398915693078adc7ccc7698828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2873f74238f63398915693078adc7ccc7698828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2873f74238f63398915693078adc7ccc7698828/comments", "author": null, "committer": null, "parents": [{"sha": "4641426688cb151187dc9f0e125d52559eccfa85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4641426688cb151187dc9f0e125d52559eccfa85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4641426688cb151187dc9f0e125d52559eccfa85"}], "stats": {"total": 149, "additions": 108, "deletions": 41}, "files": [{"sha": "402aec6ef0add12663fd4a0a159ecab002423afa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -1,3 +1,14 @@\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* put_scos.adb (Put_SCOs): Do not emit decision SCO for an X decision\n+\tnested in a disabled pragma.\n+\t* scos.ads, scos.adb, par_sco.ads, par_sco.adb: Record sloc of\n+\tenclosing pragma, if any, for X decisions.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_prag.adb: Minor reformatting.\n+\n 2011-08-04  Vincent Celier  <celier@adacore.com>\n \n \t* a-tags.adb (Check_TSD): Avoid concatenation of strings, as it is not"}, {"sha": "811e0e02a2e5f66791555f470b7b2a081ddd3d6b", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -113,11 +113,12 @@ package body Par_SCO is\n    --  Calls above procedure for each element of the list L\n \n    procedure Set_Table_Entry\n-     (C1   : Character;\n-      C2   : Character;\n-      From : Source_Ptr;\n-      To   : Source_Ptr;\n-      Last : Boolean);\n+     (C1          : Character;\n+      C2          : Character;\n+      From        : Source_Ptr;\n+      To          : Source_Ptr;\n+      Last        : Boolean;\n+      Pragma_Sloc : Source_Ptr := No_Location);\n    --  Append an entry to SCO_Table with fields set as per arguments\n \n    procedure Traverse_Declarations_Or_Statements  (L : List_Id);\n@@ -329,8 +330,11 @@ package body Par_SCO is\n \n    --  Version taking a node\n \n-   procedure Process_Decisions (N : Node_Id; T : Character) is\n+   Pragma_Sloc : Source_Ptr := No_Location;\n+   --  While processing decisions within a pragma Assert/Debug/PPC, this is set\n+   --  to the sloc of the pragma.\n \n+   procedure Process_Decisions (N : Node_Id; T : Character) is\n       Mark : Nat;\n       --  This is used to mark the location of a decision sequence in the SCO\n       --  table. We use it for backing out a simple decision in an expression\n@@ -462,6 +466,11 @@ package body Par_SCO is\n \n                Loc := Sloc (Parent (Parent (N)));\n \n+               --  Record sloc of pragma (pragmas don't nest)\n+\n+               pragma Assert (Pragma_Sloc = No_Location);\n+               Pragma_Sloc := Loc;\n+\n             when 'X' =>\n \n                --  For an expression, no Sloc\n@@ -475,11 +484,12 @@ package body Par_SCO is\n          end case;\n \n          Set_Table_Entry\n-           (C1   => T,\n-            C2   => ' ',\n-            From => Loc,\n-            To   => No_Location,\n-            Last => False);\n+           (C1          => T,\n+            C2          => ' ',\n+            From        => Loc,\n+            To          => No_Location,\n+            Last        => False,\n+            Pragma_Sloc => Pragma_Sloc);\n \n          if T = 'P' then\n \n@@ -491,7 +501,6 @@ package body Par_SCO is\n             SCO_Table.Table (SCO_Table.Last).C2 := 'd';\n             Condition_Pragma_Hash_Table.Set (Loc, SCO_Table.Last);\n          end if;\n-\n       end Output_Header;\n \n       ------------------------------\n@@ -623,6 +632,12 @@ package body Par_SCO is\n       end if;\n \n       Traverse (N);\n+\n+      --  Reset Pragma_Sloc after full subtree traversal\n+\n+      if T = 'P' then\n+         Pragma_Sloc := No_Location;\n+      end if;\n    end Process_Decisions;\n \n    -----------\n@@ -733,6 +748,31 @@ package body Par_SCO is\n       Write_SCOs_To_ALI_File;\n    end SCO_Output;\n \n+   -------------------------\n+   -- SCO_Pragma_Disabled --\n+   -------------------------\n+\n+   function SCO_Pragma_Disabled (Loc : Source_Ptr) return Boolean is\n+      Index : Nat;\n+\n+   begin\n+      if Loc = No_Location then\n+         return False;\n+      end if;\n+\n+      Index := Condition_Pragma_Hash_Table.Get (Loc);\n+\n+      --  The test here for zero is to deal with possible previous errors\n+\n+      if Index /= 0 then\n+         pragma Assert (SCO_Table.Table (Index).C1 = 'P');\n+         return SCO_Table.Table (Index).C2 = 'd';\n+\n+      else\n+         return False;\n+      end if;\n+   end SCO_Pragma_Disabled;\n+\n    ----------------\n    -- SCO_Record --\n    ----------------\n@@ -863,11 +903,12 @@ package body Par_SCO is\n    ---------------------\n \n    procedure Set_Table_Entry\n-     (C1   : Character;\n-      C2   : Character;\n-      From : Source_Ptr;\n-      To   : Source_Ptr;\n-      Last : Boolean)\n+     (C1          : Character;\n+      C2          : Character;\n+      From        : Source_Ptr;\n+      To          : Source_Ptr;\n+      Last        : Boolean;\n+      Pragma_Sloc : Source_Ptr := No_Location)\n    is\n       function To_Source_Location (S : Source_Ptr) return Source_Location;\n       --  Converts Source_Ptr value to Source_Location (line/col) format\n@@ -891,11 +932,12 @@ package body Par_SCO is\n \n    begin\n       Add_SCO\n-        (C1   => C1,\n-         C2   => C2,\n-         From => To_Source_Location (From),\n-         To   => To_Source_Location (To),\n-         Last => Last);\n+        (C1          => C1,\n+         C2          => C2,\n+         From        => To_Source_Location (From),\n+         To          => To_Source_Location (To),\n+         Last        => Last,\n+         Pragma_Sloc => Pragma_Sloc);\n    end Set_Table_Entry;\n \n    -----------------------------------------"}, {"sha": "170406dd2c7a588042add32425857a3adaae42bf", "filename": "gcc/ada/par_sco.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fpar_sco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fpar_sco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.ads?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2009-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,6 +57,9 @@ package Par_SCO is\n    --  analysis is on a copy of the node, which is different from the node\n    --  seen by Par_SCO in the parse tree (but the Sloc values are the same).\n \n+   function SCO_Pragma_Disabled (Loc : Source_Ptr) return Boolean;\n+   --  True if Loc is the source location of a disabled pragma\n+\n    procedure SCO_Output;\n    --  Outputs SCO lines for all units, with appropriate section headers, for\n    --  unit U in the ALI file, as recorded by previous calls to SCO_Record,"}, {"sha": "b71652372eeffb2a20e695fb6ce7f31a03cddca0", "filename": "gcc/ada/put_scos.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fput_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fput_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.adb?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -23,7 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with SCOs; use SCOs;\n+with Par_SCO; use Par_SCO;\n+with SCOs;    use SCOs;\n \n procedure Put_SCOs is\n    Ctr : Nat;\n@@ -145,9 +146,13 @@ begin\n                   when 'I' | 'E' | 'G' | 'P' | 'W' | 'X' =>\n                      Start := Start + 1;\n \n-                     --  For disabled pragma, skip decision output\n+                     --  For disabled pragma, or nested decision nested, skip\n+                     --  decision output.\n \n-                     if T.C1 = 'P' and then T.C2 = 'd' then\n+                     if (T.C1 = 'P' and then T.C2 = 'd')\n+                          or else\n+                        SCO_Pragma_Disabled (T.Pragma_Sloc)\n+                     then\n                         while not SCO_Table.Table (Start).Last loop\n                            Start := Start + 1;\n                         end loop;"}, {"sha": "a45f3d8846746f6fd99fe9797a21b9a39456d2c4", "filename": "gcc/ada/scos.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fscos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fscos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.adb?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2009-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,14 +30,15 @@ package body SCOs is\n    -------------\n \n    procedure Add_SCO\n-     (From : Source_Location := No_Source_Location;\n-      To   : Source_Location := No_Source_Location;\n-      C1   : Character       := ' ';\n-      C2   : Character       := ' ';\n-      Last : Boolean         := False)\n+     (From        : Source_Location := No_Source_Location;\n+      To          : Source_Location := No_Source_Location;\n+      C1          : Character       := ' ';\n+      C2          : Character       := ' ';\n+      Last        : Boolean         := False;\n+      Pragma_Sloc : Source_Ptr      := No_Location)\n    is\n    begin\n-      SCO_Table.Append ((From, To, C1, C2, Last));\n+      SCO_Table.Append ((From, To, C1, C2, Last, Pragma_Sloc));\n    end Add_SCO;\n \n    ----------------"}, {"sha": "4039e4e541d610a2c3f65b449fcecabf25ce5aaf", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -353,6 +353,10 @@ package SCOs is\n       C1   : Character;\n       C2   : Character;\n       Last : Boolean;\n+\n+      Pragma_Sloc : Source_Ptr := No_Location;\n+      --  For a SCO nested with a pragma Debug/Assert/PPC, location of pragma\n+      --  (used for control of SCO output, value not recorded in ALI file).\n    end record;\n \n    package SCO_Table is new GNAT.Table (\n@@ -477,11 +481,12 @@ package SCOs is\n    --  Reset tables for a new compilation\n \n    procedure Add_SCO\n-     (From : Source_Location := No_Source_Location;\n-      To   : Source_Location := No_Source_Location;\n-      C1   : Character       := ' ';\n-      C2   : Character       := ' ';\n-      Last : Boolean         := False);\n+     (From        : Source_Location := No_Source_Location;\n+      To          : Source_Location := No_Source_Location;\n+      C1          : Character       := ' ';\n+      C2          : Character       := ' ';\n+      Last        : Boolean         := False;\n+      Pragma_Sloc : Source_Ptr      := No_Location);\n    --  Adds one entry to SCO table with given field values\n \n end SCOs;"}, {"sha": "1dd2f58ea64bfd70b56036e0920618f29f24b033", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2873f74238f63398915693078adc7ccc7698828/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c2873f74238f63398915693078adc7ccc7698828", "patch": "@@ -1700,7 +1700,7 @@ package body Sem_Prag is\n             return;\n          end Chain_PPC;\n \n-         --  Start of processing for Check_Precondition_Postcondition\n+      --  Start of processing for Check_Precondition_Postcondition\n \n       begin\n          if not Is_List_Member (N) then\n@@ -6713,11 +6713,11 @@ package body Sem_Prag is\n             --  cause insertion of actions that would escape the attempt to\n             --  suppress the check code.\n \n-            --  Note that the Sloc for the if statement corresponds to the\n+            --  Note that the Sloc for the IF statement corresponds to the\n             --  argument condition, not the pragma itself. The reason for this\n             --  is that we may generate a warning if the condition is False at\n             --  compile time, and we do not want to delete this warning when we\n-            --  delete the if statement.\n+            --  delete the IF statement.\n \n             Expr := Get_Pragma_Arg (Arg2);\n "}]}