{"sha": "bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzY2RjYzA4NzJjMmNlNzVkODJlY2M1YTQyNmNiM2FjZTY0MWQwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-05-13T06:13:46Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-13T06:13:46Z"}, "message": "cgraph.c (cgraph_mark_address_taken_node): No longer imply needed flag.\n\n\n\t* cgraph.c (cgraph_mark_address_taken_node): No longer imply needed flag.\n\t* cgraph.h (cgraph_only_called_directly_p,\n\tcgraph_can_remove_if_no_direct_calls_p): test address_taken flag.\n\t(cgraph_can_remove_if_no_direct_calls_and_refs_p): New function.\n\t* cgraphunit.c (cgraph_mark_functions_to_output): Test address_taken.\n\t(assemble\n\t* ipa.c (cgraph_remove_unreachable_nodes): Use\n\tcgraph_can_remove_if_no_direct_calls_and_refs_p; clear address_taken flags.\n\t* tree-inline.c (copy_bb): Check address_taken flag.\n\t* tree-profile.c (tree_gen_ic_func_profiler): Check address_taken and\n\texternally_visible flag.\n\n\t* tree-ssa/unreachable.c: New test.\n\nFrom-SVN: r159354", "tree": {"sha": "eb2005967068c3a8ec31dce8fb4dc415f37fe993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb2005967068c3a8ec31dce8fb4dc415f37fe993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/comments", "author": null, "committer": null, "parents": [{"sha": "73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "f6b155464b6271b477780605efbb84cce8885056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -1,3 +1,17 @@\n+2010-05-12  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_mark_address_taken_node): No longer imply needed flag.\n+\t* cgraph.h (cgraph_only_called_directly_p,\n+\tcgraph_can_remove_if_no_direct_calls_p): test address_taken flag.\n+\t(cgraph_can_remove_if_no_direct_calls_and_refs_p): New function.\n+\t* cgraphunit.c (cgraph_mark_functions_to_output): Test address_taken.\n+\t(assemble\n+\t* ipa.c (cgraph_remove_unreachable_nodes): Use\n+\tcgraph_can_remove_if_no_direct_calls_and_refs_p; clear address_taken flags.\n+\t* tree-inline.c (copy_bb): Check address_taken flag.\n+\t* tree-profile.c (tree_gen_ic_func_profiler): Check address_taken and\n+\texternally_visible flag.\n+\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n \tPR bootstrap/44048"}, {"sha": "82ce0e804a611f78cbcf0c62ad948b7239b6cc6e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -1686,8 +1686,8 @@ cgraph_mark_needed_node (struct cgraph_node *node)\n void\n cgraph_mark_address_taken_node (struct cgraph_node *node)\n {\n+  cgraph_mark_reachable_node (node);\n   node->address_taken = 1;\n-  cgraph_mark_needed_node (node);\n }\n \n /* Return local info for the compiled function.  */"}, {"sha": "1ccae09aa065cb4f2c1e2e791b31433b5e4806d6", "filename": "gcc/cgraph.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -856,19 +856,28 @@ varpool_node_set_nonempty_p (varpool_node_set set)\n static inline bool\n cgraph_only_called_directly_p (struct cgraph_node *node)\n {\n-  return !node->needed && !node->local.externally_visible;\n+  return !node->needed && !node->address_taken && !node->local.externally_visible;\n }\n \n /* Return true when function NODE can be removed from callgraph\n    if all direct calls are eliminated.  */\n \n static inline bool\n-cgraph_can_remove_if_no_direct_calls_p (struct cgraph_node *node)\n+cgraph_can_remove_if_no_direct_calls_and_refs_p (struct cgraph_node *node)\n {\n   return (!node->needed && !node->reachable_from_other_partition\n   \t  && (DECL_COMDAT (node->decl) || !node->local.externally_visible));\n }\n \n+/* Return true when function NODE can be removed from callgraph\n+   if all direct calls are eliminated.  */\n+\n+static inline bool\n+cgraph_can_remove_if_no_direct_calls_p (struct cgraph_node *node)\n+{\n+  return !node->address_taken && cgraph_can_remove_if_no_direct_calls_and_refs_p (node);\n+}\n+\n /* Constant pool accessor function.  */\n htab_t constant_pool_htab (void);\n "}, {"sha": "b97a33e274df58e55955937079a880fcf18848d2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -1201,6 +1201,7 @@ cgraph_mark_functions_to_output (void)\n       if (node->analyzed\n \t  && !node->global.inlined_to\n \t  && (node->needed || node->reachable_from_other_partition\n+\t      || node->address_taken\n \t      || (e && node->reachable))\n \t  && !TREE_ASM_WRITTEN (decl)\n \t  && !DECL_EXTERNAL (decl))"}, {"sha": "25121777ff51f372dec06388aa608f23f3fbbe77", "filename": "gcc/ipa.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -207,7 +207,7 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n #endif\n   varpool_reset_queue ();\n   for (node = cgraph_nodes; node; node = node->next)\n-    if (!cgraph_can_remove_if_no_direct_calls_p (node)\n+    if (!cgraph_can_remove_if_no_direct_calls_and_refs_p (node)\n \t&& ((!DECL_EXTERNAL (node->decl))\n             || before_inlining_p))\n       {\n@@ -405,6 +405,25 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t   varpool_remove_node (vnode);\n \t}\n     }\n+  if (file)\n+    fprintf (file, \"\\nClearing address taken flags:\");\n+  for (node = cgraph_nodes; node; node = node->next)\n+    if (node->address_taken\n+\t&& !node->reachable_from_other_partition)\n+      {\n+\tint i;\n+        struct ipa_ref *ref;\n+\tbool found = false;\n+        for (i = 0; ipa_ref_list_refering_iterate (&node->ref_list, i, ref)\n+\t\t    && !found; i++)\n+\t  found = true;\n+\tif (!found)\n+\t  {\n+\t    if (file)\n+\t      fprintf (file, \" %s\", cgraph_node_name (node));\n+\t    node->address_taken = false;\n+\t  }\n+      }\n \n #ifdef ENABLE_CHECKING\n   verify_cgraph ();"}, {"sha": "8f181438277d6b1a1bb72758396afe5980b07ee5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -1,3 +1,7 @@\n+2010-05-12  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa/unreachable.c: New test.\n+\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/sfinae1.C: New."}, {"sha": "279a27770309aed600cefa459a1c1bcb10aeb9a2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/unreachable.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Funreachable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Funreachable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Funreachable.c?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+static void bad_boy()\n+{\n+}\n+int\n+main()\n+{\n+  void *t=(void *)bad_boy;\n+  if (!t)\n+    return 1;\n+  return 0;\n+}\n+/* { dg-final { scan-tree-dump-not \"bad_boy\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "03b013cbde6fa16bd155bb03250f690d2a73d259", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -1711,6 +1711,7 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t\t     other cases we hit a bug (incorrect node sharing is the\n \t\t     most common reason for missing edges).  */\n \t\t  gcc_assert (dest->needed || !dest->analyzed\n+\t\t\t      || dest->address_taken\n \t\t  \t      || !id->src_node->analyzed);\n \t\t  if (id->transform_call_graph_edges == CB_CGE_MOVE_CLONES)\n \t\t    cgraph_create_edge_including_clones"}, {"sha": "6c2d1bd9e80bb906eba6b6279ed8c52775f34e24", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=bd3cdcc0872c2ce75d82ecc5a426cb3ace641d0f", "patch": "@@ -345,7 +345,7 @@ tree_gen_ic_func_profiler (void)\n   gimple stmt1, stmt2;\n   tree tree_uid, cur_func;\n \n-  if (!c_node->needed)\n+  if (cgraph_only_called_directly_p (c_node))\n     return;\n \n   tree_init_edge_profiler ();"}]}