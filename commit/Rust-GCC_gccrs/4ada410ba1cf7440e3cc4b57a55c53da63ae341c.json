{"sha": "4ada410ba1cf7440e3cc4b57a55c53da63ae341c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkYTQxMGJhMWNmNzQ0MGUzY2M0YjU3YTU1YzUzZGE2M2FlMzQxYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-08-10T08:58:03Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-08-10T08:58:03Z"}, "message": "re PR target/29560 ([avr] Poor optimization for byte shifts)\n\n\t\n\tPR target/29560\n\t* config/avr/avr.md (*ashlhiqi3): New insn-and-split.\n\t(*ashl<extend_prefix>qihiqi3): New insn-and-splits.\n\t(*ashl<extend_prefix>qihiqi3.mem): New insn-and-splits.\n\tAdd peephole2 to map ashlhi3 to ashlqi3 if high part of\n\tshift target is unused.\n\nFrom-SVN: r177616", "tree": {"sha": "8455f2447914d9dcc0fa653e32875377b768e3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8455f2447914d9dcc0fa653e32875377b768e3ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ada410ba1cf7440e3cc4b57a55c53da63ae341c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ada410ba1cf7440e3cc4b57a55c53da63ae341c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ada410ba1cf7440e3cc4b57a55c53da63ae341c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ada410ba1cf7440e3cc4b57a55c53da63ae341c/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "9fd1ab75cc46cae544e3efd5930f52b0abce8bc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ada410ba1cf7440e3cc4b57a55c53da63ae341c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ada410ba1cf7440e3cc4b57a55c53da63ae341c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ada410ba1cf7440e3cc4b57a55c53da63ae341c", "patch": "@@ -1,3 +1,12 @@\n+2011-08-10  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/29560\n+\t* config/avr/avr.md (*ashlhiqi3): New insn-and-split.\n+\t(*ashl<extend_prefix>qihiqi3): New insn-and-splits.\n+\t(*ashl<extend_prefix>qihiqi3.mem): New insn-and-splits.\n+\tAdd peephole2 to map ashlhi3 to ashlqi3 if high part of\n+\tshift target is unused.\n+\n 2011-08-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49937"}, {"sha": "8293ba7558e75f9ffd24951f4ffef8c6d34164e4", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ada410ba1cf7440e3cc4b57a55c53da63ae341c/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ada410ba1cf7440e3cc4b57a55c53da63ae341c/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=4ada410ba1cf7440e3cc4b57a55c53da63ae341c", "patch": "@@ -2263,6 +2263,88 @@\n   [(set_attr \"length\" \"6,0,2,2,4,10,10\")\n    (set_attr \"cc\" \"clobber,none,set_n,clobber,set_n,clobber,clobber\")])\n \n+\n+;; Insns like the following are generated when (implicitly) extending 8-bit shifts\n+;; like char1 = char2 << char3.  Only the low-byte is needed in that situation.\n+\n+;; \"*ashluqihiqi3\"\n+;; \"*ashlsqihiqi3\"\n+(define_insn_and_split \"*ashl<extend_prefix>qihiqi3\"\n+  [(set (match_operand:QI 0 \"register_operand\"                                     \"=r\")\n+        (subreg:QI (ashift:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n+                              (match_operand:QI 2 \"register_operand\"                \"r\"))\n+                   0))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+        (ashift:QI (match_dup 1)\n+                   (match_dup 2)))]\n+  \"\")\n+\n+;; ??? Combiner does not recognize that it could split the following insn;\n+;;     presumably because he has no register handy?\n+\n+;; \"*ashluqihiqi3.mem\"\n+;; \"*ashlsqihiqi3.mem\"\n+(define_insn_and_split \"*ashl<extend_prefix>qihiqi3.mem\"\n+  [(set (match_operand:QI 0 \"memory_operand\" \"=m\")\n+        (subreg:QI (ashift:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                              (match_operand:QI 2 \"register_operand\" \"r\"))\n+                   0))]\n+  \"!reload_completed\"\n+  { gcc_unreachable(); }\n+  \"&& 1\"\n+  [(set (match_dup 3)\n+        (ashift:QI (match_dup 1)\n+                   (match_dup 2)))\n+   (set (match_dup 0)\n+        (match_dup 3))]\n+  {\n+    operands[3] = force_reg (QImode, operands[0]);\n+  })\n+\n+;; Similar.\n+\n+(define_insn_and_split \"*ashlhiqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r\")\n+        (subreg:QI (ashift:HI (match_operand:HI 1 \"register_operand\" \"0\")\n+                              (match_operand:QI 2 \"register_operand\" \"r\")) 0))]\n+  \"!reload_completed\"\n+  { gcc_unreachable(); }\n+  \"&& 1\"\n+  [(set (match_dup 4)\n+        (ashift:QI (match_dup 3)\n+                   (match_dup 2)))\n+   (set (match_dup 0)\n+        (match_dup 4))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[1], HImode, 0);\n+    operands[4] = force_reg (QImode, operands[0]);\n+  })\n+\n+;; High part of 16-bit shift is unused after the instruction:\n+;; No need to compute it, map to 8-bit shift.\n+\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+        (ashift:HI (match_dup 0)\n+                   (match_operand:QI 1 \"register_operand\" \"\")))]\n+  \"\"\n+  [(set (match_dup 2)\n+        (ashift:QI (match_dup 2)\n+                   (match_dup 1)))\n+   (clobber (match_dup 3))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+\n+    if (!peep2_reg_dead_p (1, operands[3]))\n+      FAIL;\n+\n+    operands[2] = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n+  })\n+\n+\n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"           \"=r,r,r,r,r,r,r\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0,0,r,0,0,0\")"}]}