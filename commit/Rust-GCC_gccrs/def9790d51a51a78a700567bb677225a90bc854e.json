{"sha": "def9790d51a51a78a700567bb677225a90bc854e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmOTc5MGQ1MWE1MWE3OGE3MDA1NjdiYjY3NzIyNWE5MGJjODU0ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-12-15T07:05:04Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-15T07:05:04Z"}, "message": "Clean up initialization and simplfy caching of underlying \"C\" locale objects.\n\n\n2001-12-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tClean up initialization and simplfy caching of underlying \"C\"\n\tlocale objects.\n\t* src/localename.cc (locale::_Impl::_Impl(string, size_t):\n\tUnconditionally create __clocale object for all named locales,\n\tincluding \"C\" and \"POSIX\".\n\t* config/locale/c_locale_generic.cc\n\t(locale::facet::_S_create_c_locale): Always set __cloc to zero.\n\t* config/locale/c_locale_gnu.cc: Always delete.\n\t* include/bits/localefwd.h (locale::facet::_S_c_locale): New.\n\t* src/locale.cc (locale::classic()): Initialize\n\tlocale::facet::_S_c_locale.\n\t(locale::facet::_S_c_locale): Define.\n\n\t* include/bits/locale_facets.h: Add ctype_byname<wchar_t> ctor\n\tspecialization.\n\t* src/locale.cc: Add definition here.\n\t* config/os/gnu-linux/bits/ctype_inline.h: Tweak.\n\t* config/os/gnu-linux/bits/ctype_noninline.h: Adjust initializations.\n\t* include/bits/locale_facets.h (ctype<char>::_M_c_locale_ctype): Add.\n\tAdjust ctors, dtors.\n\t(ctype<char>::_M_toupper): Remove const&.\n\t(ctype<char>::_M_tolower): Remove const&.\n\t(ctype<char>::_M_ctable): Remove const&.\n\n\t* include/bits/locale_facets.h (collate): Clean up initialization\n\tof _M_c_locale_collate in ctors and dtors.\n\t* config/locale/collate_members_gnu.cc: Always use extended\n\tfunctions.\n\n\t* include/bits/locale_facets.h (messages): Clean up inits in ctor/dtor.\n\t(messages_byname): Same.\n\t* config/locale/messages_members_generic.h (messages::~messages):\n\tRemove.\n\t* config/locale/messages_members_gnu.h: Same.\n\n\t* include/bits/localefwd.h: Clean. Move dtor definitions to\n\t* src/locale.cc: Here.\n\t* testsuite/22_locale/facet.cc: Fix spelling.\n\n\tNamed locale support for ctype<wchar_t>.\n        * acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add variable\n        ctype_members_* bits.\n        * aclocal.m4: Regenerate.\n        * configure: Regenerate.\n        * src/Makefile.am (sources): Add ctype.cc.\n        * src/Makefile.in: Regenerate.\n        * config/locale/ctype_members_generic.cc: New file.\n        * config/locale/ctype_members_gnu.cc: New file.\n        * src/locale.cc: Remove ctype<wchart_t> definitions.\n\nFrom-SVN: r48034", "tree": {"sha": "8de54c61193922ab77a998c6f31861fa57869582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de54c61193922ab77a998c6f31861fa57869582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/def9790d51a51a78a700567bb677225a90bc854e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def9790d51a51a78a700567bb677225a90bc854e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def9790d51a51a78a700567bb677225a90bc854e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def9790d51a51a78a700567bb677225a90bc854e/comments", "author": null, "committer": null, "parents": [{"sha": "88f92c0f3f41595fb8c7d233f5aacb205495bd87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f92c0f3f41595fb8c7d233f5aacb205495bd87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f92c0f3f41595fb8c7d233f5aacb205495bd87"}], "stats": {"total": 2684, "additions": 1499, "deletions": 1185}, "files": [{"sha": "e33bb5c1c3153ed7888479c4a97639b2cef767af", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -1,3 +1,55 @@\n+2001-12-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tClean up initialization and simplfy caching of underlying \"C\"\n+\tlocale objects.\n+\t* src/localename.cc (locale::_Impl::_Impl(string, size_t):\n+\tUnconditionally create __clocale object for all named locales,\n+\tincluding \"C\" and \"POSIX\".\n+\t* config/locale/c_locale_generic.cc\n+\t(locale::facet::_S_create_c_locale): Always set __cloc to zero.\n+\t* config/locale/c_locale_gnu.cc: Always delete.\n+\t* include/bits/localefwd.h (locale::facet::_S_c_locale): New.\n+\t* src/locale.cc (locale::classic()): Initialize\n+\tlocale::facet::_S_c_locale.\n+\t(locale::facet::_S_c_locale): Define.\n+\n+\t* include/bits/locale_facets.h: Add ctype_byname<wchar_t> ctor\n+\tspecialization.\n+\t* src/locale.cc: Add definition here.\n+\t* config/os/gnu-linux/bits/ctype_inline.h: Tweak.\n+\t* config/os/gnu-linux/bits/ctype_noninline.h: Adjust initializations.\n+\t* include/bits/locale_facets.h (ctype<char>::_M_c_locale_ctype): Add.\n+\tAdjust ctors, dtors. \n+\t(ctype<char>::_M_toupper): Remove const&.\n+\t(ctype<char>::_M_tolower): Remove const&.\n+\t(ctype<char>::_M_ctable): Remove const&.\t\n+\t\n+\t* include/bits/locale_facets.h (collate): Clean up initialization\n+\tof _M_c_locale_collate in ctors and dtors.\n+\t* config/locale/collate_members_gnu.cc: Always use extended\n+\tfunctions.\n+\n+\t* include/bits/locale_facets.h (messages): Clean up inits in ctor/dtor.\n+\t(messages_byname): Same.\n+\t* config/locale/messages_members_generic.h (messages::~messages):\n+\tRemove.\n+\t* config/locale/messages_members_gnu.h: Same.\n+\n+\t* include/bits/localefwd.h: Clean. Move dtor definitions to\n+\t* src/locale.cc: Here.\n+\t* testsuite/22_locale/facet.cc: Fix spelling.\n+\t\n+\tNamed locale support for ctype<wchar_t>.\n+        * acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add variable\n+        ctype_members_* bits.\n+        * aclocal.m4: Regenerate.\n+        * configure: Regenerate.\n+        * src/Makefile.am (sources): Add ctype.cc.\n+        * src/Makefile.in: Regenerate.\n+        * config/locale/ctype_members_generic.cc: New file.\n+        * config/locale/ctype_members_gnu.cc: New file.\n+        * src/locale.cc: Remove ctype<wchart_t> definitions.\n+\n 2001-12-13  Roger Sayle <roger@eyesopen.com>\n \n \t* acconfig.h: Test for __builtin_sqrt instead of"}, {"sha": "7ed8cfd1839d574bf175a28a306fa1eac66af69f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -1059,6 +1059,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_CC=config/locale/c_locale_generic.cc\n       CCODECVT_H=config/locale/codecvt_specializations_generic.h\n       CCOLLATE_CC=config/locale/collate_members_generic.cc\n+      CCTYPE_CC=config/locale/ctype_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_generic.h\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n@@ -1088,6 +1089,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_CC=config/locale/c_locale_gnu.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CCOLLATE_CC=config/locale/collate_members_gnu.cc\n+      CCTYPE_CC=config/locale/ctype_members_gnu.cc\n       CMESSAGES_H=config/locale/messages_members_gnu.h\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n       CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n@@ -1104,6 +1106,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_CC=config/locale/c_locale_ieee_1003.1-200x.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CCOLLATE_CC=config/locale/collate_members_generic.cc\n+      CCTYPE_CC=config/locale/ctype_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n@@ -1127,6 +1130,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n   AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n+  AC_LINK_FILES($CCTYPE_CC, src/ctype.cc)\n   AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n   AC_LINK_FILES($CMONEY_CC, src/moneypunct.cc)\n   AC_LINK_FILES($CNUMERIC_CC, src/numpunct.cc)"}, {"sha": "9dcbd5b391a5c0d7063980b876f9b840ee61051c", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -1071,6 +1071,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_CC=config/locale/c_locale_generic.cc\n       CCODECVT_H=config/locale/codecvt_specializations_generic.h\n       CCOLLATE_CC=config/locale/collate_members_generic.cc\n+      CCTYPE_CC=config/locale/ctype_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_generic.h\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n@@ -1100,6 +1101,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_CC=config/locale/c_locale_gnu.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CCOLLATE_CC=config/locale/collate_members_gnu.cc\n+      CCTYPE_CC=config/locale/ctype_members_gnu.cc\n       CMESSAGES_H=config/locale/messages_members_gnu.h\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n       CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n@@ -1116,6 +1118,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_CC=config/locale/c_locale_ieee_1003.1-200x.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CCOLLATE_CC=config/locale/collate_members_generic.cc\n+      CCTYPE_CC=config/locale/ctype_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n@@ -1139,6 +1142,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n   AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n+  AC_LINK_FILES($CCTYPE_CC, src/ctype.cc)\n   AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n   AC_LINK_FILES($CMONEY_CC, src/moneypunct.cc)\n   AC_LINK_FILES($CNUMERIC_CC, src/numpunct.cc)"}, {"sha": "46fdc2887a998d78bb2794262abdca00eb7ce0f6", "filename": "libstdc++-v3/config/locale/c_locale_generic.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -38,8 +38,8 @@\n namespace std \n {\n   void\n-  locale::facet::_S_create_c_locale(__c_locale&, const char*)\n-  { }\n+  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char*)\n+  { __cloc = NULL; }\n \n   void\n   locale::facet::_S_destroy_c_locale(__c_locale&)"}, {"sha": "ba0c597e47cdc7dbf59e801d4d68981ec0e076e2", "filename": "libstdc++-v3/config/locale/c_locale_gnu.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -56,10 +56,7 @@ namespace std\n   \n   void\n   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n-  {\n-    if (__cloc)\n-      __freelocale(__cloc); \n-  }\n+  { __freelocale(__cloc); }\n \n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale& __cloc)"}, {"sha": "8e3952e5837880112bad5044324cb5a96c259f14", "filename": "libstdc++-v3/config/locale/collate_members_gnu.cc", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_gnu.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -43,46 +43,25 @@ namespace std\n     int \n     collate<char>::_M_compare_helper(const char* __one, \n \t\t\t\t     const char* __two) const\n-    {\n-      if (_M_c_locale_collate)\n-\treturn __strcoll_l(__one, __two, _M_c_locale_collate);\n-      else\n-\treturn strcoll(__one, __two);      \n-    }\n+    { return __strcoll_l(__one, __two, _M_c_locale_collate); }\n   \n   template<>\n     size_t\n     collate<char>::_M_transform_helper(char* __to, const char* __from, \n-\t\t\t\t       size_t __n) const\n-    {\n-      if (_M_c_locale_collate)\n-\treturn __strxfrm_l(__to, __from, __n, _M_c_locale_collate);\n-      else\n-\treturn strxfrm(__to, __from, __n);      \n-    }\n+\t\t\t\t       size_t __n) const \n+    { return __strxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     int \n     collate<wchar_t>::_M_compare_helper(const wchar_t* __one, \n \t\t\t\t\tconst wchar_t* __two) const\n-    {\n-      if (_M_c_locale_collate)\n-\treturn __wcscoll_l(__one, __two, _M_c_locale_collate);\n-      else\n-\treturn wcscoll(__one, __two);      \n-    }\n+    { return __wcscoll_l(__one, __two, _M_c_locale_collate); }\n   \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform_helper(wchar_t* __to, \n-\t\t\t\t\t  const wchar_t* __from, \n+    collate<wchar_t>::_M_transform_helper(wchar_t* __to, const wchar_t* __from,\n \t\t\t\t\t  size_t __n) const\n-    {\n-      if (_M_c_locale_collate)\n-\treturn __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate);\n-      else\n-\treturn wcsxfrm(__to, __from, __n);      \n-    }\n+    { return __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n #endif\n }"}, {"sha": "5a66484f199a49187c238c23891e2cafd16f698b", "filename": "libstdc++-v3/config/locale/ctype_members_generic.cc", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fctype_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fctype_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fctype_members_generic.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -0,0 +1,195 @@\n+// std::ctype implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.1.2  ctype virtual functions.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // NB: The other ctype<char> specializations are in src/locale.cc and\n+  // various /config/os/* files.\n+  template<>\n+    ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+    : ctype<char>(0, false, __refs) \n+    { \t\n+      _S_destroy_c_locale(_M_c_locale_ctype);\n+      _S_create_c_locale(_M_c_locale_ctype, __s); \n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  ctype<wchar_t>::__wmask_type\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  {\n+    __wmask_type __ret;\n+    switch (__m)\n+      {\n+      case space:\n+\t__ret = wctype(\"space\");\n+\tbreak;\n+      case print:\n+\t__ret = wctype(\"print\");\n+\tbreak;\n+      case cntrl:\n+\t__ret = wctype(\"cntrl\");\n+\tbreak;\n+      case upper:\n+\t__ret = wctype(\"upper\");\n+\tbreak;\n+      case lower:\n+\t__ret = wctype(\"lower\");\n+\tbreak;\n+      case alpha:\n+\t__ret = wctype(\"alpha\");\n+\tbreak;\n+      case digit:\n+\t__ret = wctype(\"digit\");\n+\tbreak;\n+      case punct:\n+\t__ret = wctype(\"punct\");\n+\tbreak;\n+      case xdigit:\n+\t__ret = wctype(\"xdigit\");\n+\tbreak;\n+      case alnum:\n+\t__ret = wctype(\"alnum\");\n+\tbreak;\n+      case graph:\n+\t__ret = wctype(\"graph\");\n+\tbreak;\n+      default:\n+\t__ret = 0;\n+      }\n+    return __ret;\n+  };\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_toupper(wchar_t __c) const\n+  { return towupper(__c); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = towupper(*__lo);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_tolower(wchar_t __c) const\n+  { return towlower(__c); }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = towlower(*__lo);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+\n+  bool\n+  ctype<wchar_t>::\n+  do_is(mask __m, char_type __c) const\n+  { return static_cast<bool>(iswctype(__c, _M_convert_to_wmask(__m))); }\n+  \n+  const wchar_t* \n+  ctype<wchar_t>::\n+  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __m) const\n+  {\n+    while (__lo < __hi && !this->do_is(*__m, *__lo))\n+      ++__lo;\n+    return __lo;\n+  }\n+  \n+  const wchar_t* \n+  ctype<wchar_t>::\n+  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi && !this->do_is(__m, *__lo))\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    while (__lo < __hi && this->do_is(__m, *__lo) != 0)\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  wchar_t\n+  ctype<wchar_t>::\n+  do_widen(char __c) const\n+  { return btowc(__c); }\n+  \n+  const char* \n+  ctype<wchar_t>::\n+  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n+  {\n+    mbstate_t __state;\n+    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n+    mbsrtowcs(__dest, &__lo, __hi - __lo, &__state);\n+    return __hi;\n+  }\n+\n+  char\n+  ctype<wchar_t>::\n+  do_narrow(wchar_t __wc, char __dfault) const\n+  { \n+    int __c = wctob(__wc);\n+    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+\t    char* __dest) const\n+  {\n+    mbstate_t __state;\n+    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n+    size_t __len = __hi - __lo;\n+    size_t __conv = wcsrtombs(__dest, &__lo, __len, &__state);\n+    if (__conv == __len)\n+      *__dest = __dfault;\n+    return __hi;\n+  }\n+#endif //  _GLIBCPP_USE_WCHAR_T\n+}"}, {"sha": "33540c948f2dfe4956ab5390e3ba59081bae5fdc", "filename": "libstdc++-v3/config/locale/ctype_members_gnu.cc", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fctype_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fctype_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fctype_members_gnu.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -0,0 +1,200 @@\n+// std::ctype implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.1.2  ctype virtual functions.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // NB: The other ctype<char> specializations are in src/locale.cc and\n+  // various /config/os/* files.\n+  template<>\n+    ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+    : ctype<char>(0, false, __refs) \n+    { \t\n+      if (_M_c_locale_ctype)\n+\t_S_destroy_c_locale(_M_c_locale_ctype);\n+      _S_create_c_locale(_M_c_locale_ctype, __s); \n+      _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n+      _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n+      _M_table = _M_c_locale_ctype->__ctype_b;\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  ctype<wchar_t>::__wmask_type\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  {\n+    __wmask_type __ret;\n+    switch (__m)\n+      {\n+      case space:\n+\t__ret = __wctype_l(\"space\", _M_c_locale_ctype);\n+\tbreak;\n+      case print:\n+\t__ret = __wctype_l(\"print\", _M_c_locale_ctype);\n+\tbreak;\n+      case cntrl:\n+\t__ret = __wctype_l(\"cntrl\", _M_c_locale_ctype);\n+\tbreak;\n+      case upper:\n+\t__ret = __wctype_l(\"upper\", _M_c_locale_ctype);\n+\tbreak;\n+      case lower:\n+\t__ret = __wctype_l(\"lower\", _M_c_locale_ctype);\n+\tbreak;\n+      case alpha:\n+\t__ret = __wctype_l(\"alpha\", _M_c_locale_ctype);\n+\tbreak;\n+      case digit:\n+\t__ret = __wctype_l(\"digit\", _M_c_locale_ctype);\n+\tbreak;\n+      case punct:\n+\t__ret = __wctype_l(\"punct\", _M_c_locale_ctype);\n+\tbreak;\n+      case xdigit:\n+\t__ret = __wctype_l(\"xdigit\", _M_c_locale_ctype);\n+\tbreak;\n+      case alnum:\n+\t__ret = __wctype_l(\"alnum\", _M_c_locale_ctype);\n+\tbreak;\n+      case graph:\n+\t__ret = __wctype_l(\"graph\", _M_c_locale_ctype);\n+\tbreak;\n+      default:\n+\t__ret = 0;\n+      }\n+    return __ret;\n+  };\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_toupper(wchar_t __c) const\n+  { return __towupper_l(__c, _M_c_locale_ctype); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = __towupper_l(*__lo, _M_c_locale_ctype);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_tolower(wchar_t __c) const\n+  { return __towlower_l(__c, _M_c_locale_ctype); }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = __towlower_l(*__lo, _M_c_locale_ctype);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+\n+  bool\n+  ctype<wchar_t>::\n+  do_is(mask __m, char_type __c) const\n+  { return static_cast<bool>(__iswctype_l(__c, _M_convert_to_wmask(__m), \n+\t\t\t\t\t  _M_c_locale_ctype)); }\n+  \n+  const wchar_t* \n+  ctype<wchar_t>::\n+  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __m) const\n+  {\n+    while (__lo < __hi && !this->do_is(*__m, *__lo))\n+      ++__lo;\n+    return __lo;\n+  }\n+  \n+  const wchar_t* \n+  ctype<wchar_t>::\n+  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi && !this->do_is(__m, *__lo))\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    while (__lo < __hi && this->do_is(__m, *__lo) != 0)\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  wchar_t\n+  ctype<wchar_t>::\n+  do_widen(char __c) const\n+  { return btowc(__c); }\n+  \n+  const char* \n+  ctype<wchar_t>::\n+  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n+  {\n+    mbstate_t __state;\n+    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n+    mbsrtowcs(__dest, &__lo, __hi - __lo, &__state);\n+    return __hi;\n+  }\n+\n+  char\n+  ctype<wchar_t>::\n+  do_narrow(wchar_t __wc, char __dfault) const\n+  { \n+    int __c = wctob(__wc);\n+    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+\t    char* __dest) const\n+  {\n+    mbstate_t __state;\n+    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n+    size_t __len = __hi - __lo;\n+    size_t __conv = wcsrtombs(__dest, &__lo, __len, &__state);\n+    if (__conv == __len)\n+      *__dest = __dfault;\n+    return __hi;\n+  }\n+#endif //  _GLIBCPP_USE_WCHAR_T\n+}"}, {"sha": "133bcd918a7540d975be96a90a7dea53f89f05da", "filename": "libstdc++-v3/config/locale/messages_members_generic.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.h?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -41,10 +41,6 @@\n     { return this->do_open(__s, __loc); }\n \n   // Virtual member functions.\n-  template<typename _CharT>\n-    messages<_CharT>::~messages()\n-    { }\n-\n   template<typename _CharT>\n     messages<_CharT>::catalog \n     messages<_CharT>::do_open(const basic_string<char>&, const locale&) const"}, {"sha": "0d7a6300a5283c2802e2418d3e8f0936845a32bb", "filename": "libstdc++-v3/config/locale/messages_members_gnu.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -43,14 +43,6 @@\n       return this->do_open(__s, __loc); \n     }\n \n-  // Virtual member functions.\n-  template<typename _CharT>\n-    messages<_CharT>::~messages()\n-    { \n-      if (_M_c_locale_messages)\n-\t_S_destroy_c_locale(_M_c_locale_messages); \n-    }\n-\n   template<typename _CharT>\n     messages<_CharT>::catalog \n     messages<_CharT>::do_open(const basic_string<char>& __s, "}, {"sha": "e584083a1d43407c340e987a9cf1b45b29edb5bf", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_inline.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -61,8 +61,7 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n-\t   && (_M_table[*__low] & __m) != 0)\n+    while (__low < __high && (_M_table[*__low] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "0e20a586d5ed0402466b3af8bacb8cb672fa2b61", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -43,25 +43,27 @@\n   ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n \t\t     size_t __refs) \n   : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(__cloc ? __cloc->__ctype_toupper : __ctype_toupper), \n-  _M_tolower(__cloc ? __cloc->__ctype_tolower : __ctype_tolower),\n-  _M_ctable(__ctype_b), \n-  _M_table(__table ? __table : (__cloc ? __cloc->__ctype_b : __ctype_b))\n-  { }\n+  _M_ctable(__ctype_b)\n+  {\n+    _M_c_locale_ctype = _S_clone_c_locale(__cloc);\n+    _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n+    _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n+    _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n+  }\n #else\n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n   : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n   _M_ctable(__ctype_b), _M_table(__table ? __table : __ctype_b)\n-  { }\n+  { _M_c_locale_ctype = NULL; }\n #endif\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n   __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n   _M_ctable(__ctype_b), _M_table(__table == 0 ? _M_ctable : __table) \n-  { }\n+  { _M_c_locale_ctype = NULL; }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "6f464b2bec7fc8109701279f6d7104fef4b16b57", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 891, "deletions": 887, "changes": 1778, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=def9790d51a51a78a700567bb677225a90bc854e"}, {"sha": "8550709b0579e39bf02a529c5409e695e9bd8ea7", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -171,7 +171,7 @@ namespace std\n       explicit \n       ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }\n \n-      static locale::id \t\tid;\n+      static locale::id \t       \tid;\n \n    protected:\n       virtual \n@@ -225,15 +225,16 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef char \t       char_type;\n+      typedef char \t       \tchar_type;\n \n-    private:\n+    protected:\n       // Data Members:\n-      bool \t\t       _M_del;\n-      __to_type const& \t       _M_toupper;\n-      __to_type const& \t       _M_tolower;\n-      const mask* const&       _M_ctable;\n-      const mask*              _M_table;\n+      __c_locale\t\t_M_c_locale_ctype;\n+      bool \t\t       \t_M_del;\n+      __to_type \t       \t_M_toupper;\n+      __to_type  \t       \t_M_tolower;\n+      const mask*       \t_M_ctable;\n+      const mask*              \t_M_table;\n       \n     public:\n       static locale::id        id;\n@@ -259,9 +260,6 @@ namespace std\n       scan_not(mask __m, const char* __lo, const char* __hi) const;\n      \n     protected:\n-      virtual \n-      ~ctype();\n-\n       const mask* \n       table() const throw()\n       { return _M_table; }\n@@ -270,6 +268,9 @@ namespace std\n       classic_table() throw()\n       { return _M_ctable; }\n \n+      virtual \n+      ~ctype();\n+\n       virtual bool \n       do_is(mask __m, char_type __c) const;\n \n@@ -306,7 +307,7 @@ namespace std\n \n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n-\t\t char __dfault, char* __dest) const;\n+\t\tchar __dfault, char* __dest) const;\n     };\n  \n   template<>\n@@ -320,11 +321,15 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef wchar_t \t       char_type;\n-      typedef wctype_t\t       __wmask_type;\n+      typedef wchar_t \t       \tchar_type;\n+      typedef wctype_t\t       \t__wmask_type;\n \n+    protected:\n+      __c_locale\t\t_M_c_locale_ctype;\n+\n+    public:\n       // Data Members:\n-      static locale::id        id;\n+      static locale::id        \tid;\n \n       explicit \n       ctype(size_t __refs = 0);\n@@ -375,7 +380,7 @@ namespace std\n \n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n-\t\t char __dfault, char* __dest) const;\n+\t\tchar __dfault, char* __dest) const;\n \n     };\n \n@@ -395,22 +400,25 @@ namespace std\n       typedef _CharT \t\tchar_type;\n \n       explicit \n-      ctype_byname(const char*, size_t __refs = 0);\n+      ctype_byname(const char* __s, size_t __refs = 0);\n \n     protected:\n       virtual \n-      ~ctype_byname() { }\n+      ~ctype_byname() { };\n     };\n \n-  // 22.2.1.4  Class ctype_byname specialization\n+  // 22.2.1.4  Class ctype_byname specializations.\n   template<>\n     ctype_byname<char>::ctype_byname(const char*, size_t refs);\n \n+  template<>\n+    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);\n \n   // 22.2.1.5  Template class codecvt\n   #include <bits/codecvt.h>\n \n \n+  // 22.2.2  The numeric category.\n   class __num_base\n   {\n   public:\n@@ -815,17 +823,14 @@ namespace std\n \n       explicit \n       collate(size_t __refs = 0)\n-      : locale::facet(__refs), _M_c_locale_collate(NULL)\n-      { } \n+      : locale::facet(__refs)\n+      { _M_c_locale_collate = _S_clone_c_locale(_S_c_locale); }\n \n       // Non-standard.\n       explicit \n       collate(__c_locale __cloc, size_t __refs = 0) \n       : locale::facet(__refs)\n-      { \n-\tif (__cloc)\n-\t  _M_c_locale_collate = _S_clone_c_locale(__cloc); \n-      }\n+      { _M_c_locale_collate = _S_clone_c_locale(__cloc); }\n \n       int \n       compare(const _CharT* __lo1, const _CharT* __hi1,\n@@ -850,10 +855,7 @@ namespace std\n   protected:\n       virtual\n       ~collate() \n-      {\n-\tif (_M_c_locale_collate)\n-\t  _S_destroy_c_locale(_M_c_locale_collate); \n-      }\n+      { _S_destroy_c_locale(_M_c_locale_collate); }\n \n       virtual int  \n       do_compare(const _CharT* __lo1, const _CharT* __hi1,\n@@ -899,10 +901,13 @@ namespace std\n       explicit \n       collate_byname(const char* __s, size_t __refs = 0)\n       : collate<_CharT>(__refs) \n-      { _S_create_c_locale(_M_c_locale_collate, __s); }\n+      { \n+\t_S_destroy_c_locale(_M_c_locale_collate);\n+\t_S_create_c_locale(_M_c_locale_collate, __s); \n+      }\n \n     protected:\n-      virtual \n+      virtual   \n       ~collate_byname() { }\n     };\n \n@@ -1609,18 +1614,16 @@ namespace std\n \n       explicit \n       messages(size_t __refs = 0) \n-      : locale::facet(__refs), _M_c_locale_messages(NULL), \n-      _M_name_messages(\"C\")\n-      { }\n+      : locale::facet(__refs), _M_name_messages(\"C\")\n+      { _M_c_locale_messages = _S_clone_c_locale(_S_c_locale); }\n \n       // Non-standard.\n       explicit \n       messages(__c_locale __cloc, const char* __name, size_t __refs = 0) \n       : locale::facet(__refs)\n       { \n \t_M_name_messages = __name;\n-\tif (__cloc)\n-\t  _M_c_locale_messages = _S_clone_c_locale(__cloc); \n+\t_M_c_locale_messages = _S_clone_c_locale(__cloc); \n       }\n \n       catalog \n@@ -1641,7 +1644,8 @@ namespace std\n \n     protected:\n       virtual \n-      ~messages();\n+      ~messages()\n+       { _S_destroy_c_locale(_M_c_locale_messages); }\n \n       virtual catalog \n       do_open(const basic_string<char>&, const locale&) const;\n@@ -1723,8 +1727,9 @@ namespace std\n       messages_byname(const char* __s, size_t __refs = 0)\n       : messages<_CharT>(__refs) \n       { \n-\t_S_create_c_locale(_M_c_locale_messages, __s); \n \t_M_name_messages = __s;\n+\t_S_destroy_c_locale(_M_c_locale_messages);\n+\t_S_create_c_locale(_M_c_locale_messages, __s); \n       }\n \n     protected:"}, {"sha": "a0fe3248587197070d4a4fc4197b132f4ab5d9c6", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -282,7 +282,10 @@ namespace std\n \n     static inline void  \n     _S_initialize()\n-    { if (!_S_classic) classic();  }\n+    { \n+      if (!_S_classic) \n+\tclassic();  \n+    }\n \n     static category  \n     _S_normalize_category(category);\n@@ -344,14 +347,15 @@ namespace std\n     _Impl(string __name, size_t);\n    ~_Impl() throw();\n \n-    bool\n+    inline bool\n     _M_check_same_name()\n     {\n       bool __ret = true;\n       for (size_t i = 0; i < _S_num_categories - 1; ++i)\n \t__ret &= _M_names[i] == _M_names[i + 1];\n       return __ret;\n     }\n+\n     void \n     _M_replace_categories(const _Impl*, category);\n \n@@ -387,11 +391,15 @@ namespace std\n     friend class __enc_traits;\n \n   protected:\n+    // Contains data from the underlying \"C\" library for default \"C\"\n+    // and \"POSIX\" locales.\n+    static __c_locale\t\t     _S_c_locale;\n+\n     explicit \n     facet(size_t __refs = 0) throw();\n \n     virtual \n-    ~facet() { };\n+    ~facet();\n \n     static void\n     _S_create_c_locale(__c_locale& __cloc, const char* __s);\n@@ -447,8 +455,7 @@ namespace std\n   public:\n     // NB: This class is always a static data member, and thus can be\n     // counted on to be zero-initialized.\n-    // XXX id() : _M_index(0) { }\n-    id() { }\n+    id();\n   };\n \n   template<typename _Facet>"}, {"sha": "e0015baadd83ee7e8cd02c6ef9601aa380c1daa2", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -60,13 +60,14 @@ INCLUDES = \\\n \t$(TOPLEVEL_INCLUDES)\n \n sources = \\\n-\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n-\tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n-\tlocale.cc locale-inst.cc localename.cc \\\n-\tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n-\tvterminate.cc \\\n-\tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n-\tvalarray-inst.cc wstring-inst.cc concept-inst.cc ext-inst.cc\n+\tglobals.cc limits.cc \\\n+\tbasic_file.cc complex_io.cc ios.cc strstream.cc \\\n+\tcmath.cc bitset.cc \\\n+\tfunctexcept.cc stdexcept.cc vterminate.cc \\\n+\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n+\tcollate.cc ctype.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n+\tconcept-inst.cc locale-inst.cc misc-inst.cc stl-inst.cc \\\n+\tstring-inst.cc wstring-inst.cc valarray-inst.cc  ext-inst.cc\n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n "}, {"sha": "125d1c2643cf2200c53cdd912142bd73765d6d22", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -185,13 +185,14 @@ INCLUDES = \\\n \n \n sources = \\\n-\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n-\tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n-\tlocale.cc locale-inst.cc localename.cc \\\n-\tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n-\tvterminate.cc \\\n-\tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n-\tvalarray-inst.cc wstring-inst.cc concept-inst.cc ext-inst.cc\n+\tglobals.cc limits.cc \\\n+\tbasic_file.cc complex_io.cc ios.cc strstream.cc \\\n+\tcmath.cc bitset.cc \\\n+\tfunctexcept.cc stdexcept.cc vterminate.cc \\\n+\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n+\tcollate.cc ctype.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n+\tconcept-inst.cc locale-inst.cc misc-inst.cc stl-inst.cc \\\n+\tstring-inst.cc wstring-inst.cc valarray-inst.cc  ext-inst.cc\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n@@ -264,12 +265,12 @@ DEFS = @DEFS@ -I. -I$(srcdir) -I..\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n-libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n-codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo limits.lo \\\n-locale.lo locale-inst.lo localename.lo collate.lo messages.lo \\\n-moneypunct.lo numpunct.lo time.lo vterminate.lo misc-inst.lo \\\n-stdexcept.lo stl-inst.lo string-inst.lo strstream.lo valarray-inst.lo \\\n-wstring-inst.lo concept-inst.lo ext-inst.lo\n+libstdc___la_OBJECTS =  globals.lo limits.lo basic_file.lo complex_io.lo \\\n+ios.lo strstream.lo cmath.lo bitset.lo functexcept.lo stdexcept.lo \\\n+vterminate.lo c++locale.lo locale.lo localename.lo codecvt.lo \\\n+collate.lo ctype.lo messages.lo moneypunct.lo numpunct.lo time.lo \\\n+concept-inst.lo locale-inst.lo misc-inst.lo stl-inst.lo string-inst.lo \\\n+wstring-inst.lo valarray-inst.lo ext-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "13c85aba5877c62d28b6b1b87548ca3800e311e6", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 36, "deletions": 165, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -348,9 +348,18 @@ namespace std\n     return __ret;\n   }\n \n+  __c_locale\n+  locale::facet::_S_c_locale;\n+  \n+  locale::facet::\n+  ~facet() { }\n+\n   locale::facet::\n   facet(size_t __refs) throw() : _M_references(__refs) \n-  { }\n+  { \n+    if (!_S_c_locale)\n+      _S_create_c_locale(_S_c_locale, \"C\");\n+  }\n \n   void  \n   locale::facet::\n@@ -370,6 +379,8 @@ namespace std\n       }\n   }\n   \n+  locale::id::id() { }\n+\n   // Definitions for static const data members of ctype_base.\n   const ctype_base::mask ctype_base::space;\n   const ctype_base::mask ctype_base::print;\n@@ -389,7 +400,12 @@ namespace std\n   const size_t ctype<char>::table_size;\n \n   ctype<char>::~ctype()\n-  { if (_M_del) delete[] this->table(); }\n+  { \n+    if (_M_c_locale_ctype)\n+      _S_destroy_c_locale(_M_c_locale_ctype);\n+    if (_M_del) \n+      delete[] this->table(); \n+  }\n \n   // These are dummy placeholders as these virtual functions are never called.\n   bool \n@@ -431,171 +447,26 @@ namespace std\n     return __hi;\n   }\n \n-  template<>\n-  ctype_byname<char>::ctype_byname(const char* /*__s*/, size_t __refs)\n-  : ctype<char>(new mask[table_size], true, __refs)\n-  { }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::__wmask_type\n-  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n-  {\n-    __wmask_type __ret;\n-    switch (__m)\n-      {\n-      case space:\n-\t__ret = wctype(\"space\");\n-\tbreak;\n-      case print:\n-\t__ret = wctype(\"print\");\n-\tbreak;\n-      case cntrl:\n-\t__ret = wctype(\"cntrl\");\n-\tbreak;\n-      case upper:\n-\t__ret = wctype(\"upper\");\n-\tbreak;\n-      case lower:\n-\t__ret = wctype(\"lower\");\n-\tbreak;\n-      case alpha:\n-\t__ret = wctype(\"alpha\");\n-\tbreak;\n-      case digit:\n-\t__ret = wctype(\"digit\");\n-\tbreak;\n-      case punct:\n-\t__ret = wctype(\"punct\");\n-\tbreak;\n-      case xdigit:\n-\t__ret = wctype(\"xdigit\");\n-\tbreak;\n-      case alnum:\n-\t__ret = wctype(\"alnum\");\n-\tbreak;\n-      case graph:\n-\t__ret = wctype(\"graph\");\n-\tbreak;\n-      default:\n-\t__ret = 0;\n-      }\n-    return __ret;\n-  };\n-  \n-  ctype<wchar_t>::~ctype() { }\n-\n-  // NB: These ctype<wchar_t> methods are not configuration-specific,\n-  // unlike the ctype<char> bits.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs) { }\n+  : __ctype_abstract_base<wchar_t>(__refs)\n+  { _M_c_locale_ctype = _S_clone_c_locale(_S_c_locale); }\n \n-  ctype<wchar_t>::ctype(__c_locale /*__cloc*/, size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs) { }\n+  ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n+  : __ctype_abstract_base<wchar_t>(__refs) \n+  { _M_c_locale_ctype = _S_clone_c_locale(__cloc); }\n \n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { return towupper(__c); }\n-\n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n-  {\n-    while (__lo < __hi)\n-      {\n-        *__lo = towupper(*__lo);\n-        ++__lo;\n-      }\n-    return __hi;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { return towlower(__c); }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n-  {\n-    while (__lo < __hi)\n-      {\n-        *__lo = towlower(*__lo);\n-        ++__lo;\n-      }\n-    return __hi;\n-  }\n-\n-  bool\n-  ctype<wchar_t>::\n-  do_is(mask __m, char_type __c) const\n-  { return static_cast<bool>(iswctype(__c, _M_convert_to_wmask(__m))); }\n-  \n-  const wchar_t* \n-  ctype<wchar_t>::\n-  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __m) const\n-  {\n-    while (__lo < __hi && !this->is(*__m, *__lo))\n-      ++__lo;\n-    return __lo;\n-  }\n-  \n-  const wchar_t* \n-  ctype<wchar_t>::\n-  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n-  {\n-    while (__lo < __hi && !this->is(__m, *__lo))\n-      ++__lo;\n-    return __lo;\n-  }\n-\n-  const wchar_t*\n-  ctype<wchar_t>::\n-  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n-  {\n-    while (__lo < __hi && this->is(__m, *__lo) != 0)\n-      ++__lo;\n-    return __lo;\n-  }\n-\n-  wchar_t\n-  ctype<wchar_t>::\n-  do_widen(char __c) const\n-  { return btowc(__c); }\n-  \n-  const char* \n-  ctype<wchar_t>::\n-  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n-  {\n-    mbstate_t __state;\n-    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    mbsrtowcs(__dest, &__lo, __hi - __lo, &__state);\n-    return __hi;\n-  }\n-\n-  char\n-  ctype<wchar_t>::\n-  do_narrow(wchar_t __wc, char __dfault) const\n-  { \n-    int __c = wctob(__wc);\n-    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n-  }\n-\n-  const wchar_t*\n-  ctype<wchar_t>::\n-  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n-\t    char* __dest) const\n-  {\n-    mbstate_t __state;\n-    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    size_t __len = __hi - __lo;\n-    size_t __conv = wcsrtombs(__dest, &__lo, __len, &__state);\n-    if (__conv == __len)\n-      *__dest = __dfault;\n-    return __hi;\n-  }\n+  ctype<wchar_t>::~ctype() \n+  { _S_destroy_c_locale(_M_c_locale_ctype); }\n \n   template<>\n-  ctype_byname<wchar_t>::\n-  ctype_byname(const char* /*__s*/, size_t __refs)\n-  : ctype<wchar_t>(__refs) { }\n-#endif //  _GLIBCPP_USE_WCHAR_T\n+    ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n+    : ctype<wchar_t>(__refs) \n+    { \t\n+      _S_destroy_c_locale(_M_c_locale_ctype);\n+      _S_create_c_locale(_M_c_locale_ctype, __s); \n+    }\n+#endif\n \n   // Definitions for static const data members of time_base\n   template<> \n@@ -618,7 +489,7 @@ namespace std\n \n   // Definitions for static const data members of money_base\n   const money_base::pattern \n-  money_base::_S_default_pattern =  {{symbol, sign, none, value}};\n+  money_base::_S_default_pattern =  { {symbol, sign, none, value} };\n \n   template<>\n     const ctype<char>&\n@@ -708,12 +579,12 @@ namespace std\n   }\n   \n   template<>\n-    moneypunct_byname<char, false>::moneypunct_byname(const char* /*__s*/, \n+    moneypunct_byname<char, false>::moneypunct_byname(const char*, \n \t\t\t\t\t\t      size_t __refs)\n     : moneypunct<char, false>(__refs) { }\n   \n   template<>\n-    moneypunct_byname<char, true>::moneypunct_byname(const char* /*__s*/, \n+    moneypunct_byname<char, true>::moneypunct_byname(const char*, \n \t\t\t\t\t\t     size_t __refs)\n     : moneypunct<char, true>(__refs) { }\n } // namespace std"}, {"sha": "8c2db9da7c8a1394df9793adb2bd473c588d6330", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -72,9 +72,14 @@ namespace std\n   {\n     // Initialize the underlying locale model, which also checks to\n     // see if the given name is valid.\n-    __c_locale __cloc = NULL;\n+    __c_locale __cloc;\n+    locale::facet::_S_create_c_locale(__cloc, __str.c_str());\n+\n+    // This is needed as presently \"C\" locales != required data in\n+    // __timepunct, numpunct, and moneypunct.\n+    __c_locale __cloc_c = NULL;\n     if (__str != \"C\" && __str != \"POSIX\")\n-      locale::facet::_S_create_c_locale(__cloc, __str.c_str());\n+      __cloc_c = __cloc;\n \n     // Allocate facet container.\n     try\n@@ -90,18 +95,17 @@ namespace std\n       _M_names[i] = __str;\n \n     // Construct all standard facets and add them to _M_facets.\n-    // XXX How to deal cleanly, consistently with null (\"C\") __cloc?\n     _M_init_facet(new std::collate<char>(__cloc));\n     _M_init_facet(new std::ctype<char>(__cloc));\n     _M_init_facet(new codecvt<char, char, mbstate_t>);\n-    _M_init_facet(new moneypunct<char, false>(__cloc));\n-    _M_init_facet(new moneypunct<char, true>(__cloc));\n+    _M_init_facet(new moneypunct<char, false>(__cloc_c));\n+    _M_init_facet(new moneypunct<char, true>(__cloc_c));\n     _M_init_facet(new money_get<char>);\n     _M_init_facet(new money_put<char>);\n-    _M_init_facet(new numpunct<char>(__cloc));\n+    _M_init_facet(new numpunct<char>(__cloc_c));\n     _M_init_facet(new num_get<char>);\n     _M_init_facet(new num_put<char>);\n-    _M_init_facet(new __timepunct<char>(__cloc, __str.c_str()));\n+    _M_init_facet(new __timepunct<char>(__cloc_c, __str.c_str()));\n     _M_init_facet(new time_get<char>);\n     _M_init_facet(new time_put<char>);\n     _M_init_facet(new std::messages<char>(__cloc, __str.c_str()));\n@@ -110,14 +114,14 @@ namespace std\n     _M_init_facet(new std::collate<wchar_t>(__cloc));\n     _M_init_facet(new std::ctype<wchar_t>(__cloc));\n     _M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n-    _M_init_facet(new moneypunct<wchar_t, false>(__cloc));\n-    _M_init_facet(new moneypunct<wchar_t, true>(__cloc));\n+    _M_init_facet(new moneypunct<wchar_t, false>(__cloc_c));\n+    _M_init_facet(new moneypunct<wchar_t, true>(__cloc_c));\n     _M_init_facet(new money_get<wchar_t>);\n     _M_init_facet(new money_put<wchar_t>);\n-    _M_init_facet(new numpunct<wchar_t>(__cloc));\n+    _M_init_facet(new numpunct<wchar_t>(__cloc_c));\n     _M_init_facet(new num_get<wchar_t>);\n     _M_init_facet(new num_put<wchar_t>);\n-    _M_init_facet(new __timepunct<wchar_t>(__cloc, __str.c_str()));\n+    _M_init_facet(new __timepunct<wchar_t>(__cloc_c, __str.c_str()));\n     _M_init_facet(new time_get<wchar_t>);\n     _M_init_facet(new time_put<wchar_t>);\n     _M_init_facet(new std::messages<wchar_t>(__cloc, __str.c_str()));"}, {"sha": "99ed55e4c77fc2b7d380277a155e320adb8c67e3", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_wchar_t.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-01 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -92,16 +92,17 @@ void test01()\n   gctype.tolower(c_array, c_array + len);\n   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n \n-\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n }\n #endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n-int main() {\n+int main() \n+{\n #if _GLIBCPP_USE_WCHAR_T\n   test01();\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+#endif \n+\n   return 0;\n }"}, {"sha": "431718e783451c7f0fc786ff05ed3f8ac8cd3472", "filename": "libstdc++-v3/testsuite/22_locale/facet.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def9790d51a51a78a700567bb677225a90bc854e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc?ref=def9790d51a51a78a700567bb677225a90bc854e", "patch": "@@ -159,7 +159,7 @@ class gnu_messages_byname: public std::messages_byname<char>\n };\n \n \n-// 2 or if it is a class deerived from locale:;facet and containing a\n+// 2 or if it is a class derived from locale:;facet and containing a\n // publicly-accessible declaration as follows:\n class gnu_facet: public std::locale::facet\n {"}]}