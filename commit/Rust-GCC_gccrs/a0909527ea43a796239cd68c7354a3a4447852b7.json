{"sha": "a0909527ea43a796239cd68c7354a3a4447852b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5MDk1MjdlYTQzYTc5NjIzOWNkNjhjNzM1NGEzYTQ0NDc4NTJiNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-26T21:57:12Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-26T21:57:12Z"}, "message": "[multiple changes]\n\n2016-01-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69385\n\t* trans-expr.c (gfc_trans_assignment_1): Exclude initialization\n\tassignments from check on assignment of scalars to unassigned\n\tarrays and correct wrong code within the corresponding block.\n\n2015-01-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69385\n\t* gfortran.dg/allocate_error_6.f90: New test.\n\nFrom-SVN: r232850", "tree": {"sha": "5331c8663e115052957bc948d2c8726950cbc3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5331c8663e115052957bc948d2c8726950cbc3dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0909527ea43a796239cd68c7354a3a4447852b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0909527ea43a796239cd68c7354a3a4447852b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0909527ea43a796239cd68c7354a3a4447852b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0909527ea43a796239cd68c7354a3a4447852b7/comments", "author": null, "committer": null, "parents": [{"sha": "ca30abcd13617314b7de526da03802639a2a7fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca30abcd13617314b7de526da03802639a2a7fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca30abcd13617314b7de526da03802639a2a7fc7"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "0a55a09d350ac7521cf2db17fbb984ef7e5a6b46", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a0909527ea43a796239cd68c7354a3a4447852b7", "patch": "@@ -1,3 +1,10 @@\n+2016-01-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69385\n+\t* trans-expr.c (gfc_trans_assignment_1): Exclude initialization\n+\tassignments from check on assignment of scalars to unassigned\n+\tarrays and correct wrong code within the corresponding block.\n+\n 2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR other/69006"}, {"sha": "5031a37a25aecaf85a11b63768ab413ef93fedc7", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=a0909527ea43a796239cd68c7354a3a4447852b7", "patch": "@@ -9286,21 +9286,25 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n     {\n       gfc_conv_expr (&lse, expr1);\n       if (gfc_option.rtcheck & GFC_RTCHECK_MEM\n+\t  && !init_flag\n \t  && gfc_expr_attr (expr1).allocatable\n \t  && expr1->rank\n \t  && !expr2->rank)\n \t{\n \t  tree cond;\n \t  const char* msg;\n \n-\t  tmp = expr1->symtree->n.sym->backend_decl;\n-\t  if (POINTER_TYPE_P (TREE_TYPE (tmp)))\n-\t    tmp = build_fold_indirect_ref_loc (input_location, tmp);\n+\t  /* We should only get array references here.  */\n+\t  gcc_assert (TREE_CODE (lse.expr) == POINTER_PLUS_EXPR\n+\t\t      || TREE_CODE (lse.expr) == ARRAY_REF);\n \n-\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp)))\n-\t    tmp = gfc_conv_descriptor_data_get (tmp);\n-\t  else\n-\t    tmp = TREE_OPERAND (lse.expr, 0);\n+\t  /* 'tmp' is either the pointer to the array(POINTER_PLUS_EXPR)\n+\t     or the array itself(ARRAY_REF).  */\n+\t  tmp = TREE_OPERAND (lse.expr, 0);\n+\n+\t  /* Provide the address of the array.  */\n+\t  if (TREE_CODE (lse.expr) == ARRAY_REF)\n+\t    tmp = gfc_build_addr_expr (NULL_TREE, tmp);\n \n \t  cond = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n \t\t\t\t  tmp, build_int_cst (TREE_TYPE (tmp), 0));"}, {"sha": "a35d29568a8a3b028d46bcfa733e55a4fc7738f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0909527ea43a796239cd68c7354a3a4447852b7", "patch": "@@ -1,3 +1,8 @@\n+2015-01-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69385\n+\t* gfortran.dg/allocate_error_6.f90: New test.\n+\n 2016-01-26  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/tm/pr60908.c: New test.\n@@ -140,7 +145,7 @@\n \tPR fortran/68442\n \t* gfortran.dg/interface_38.f90: New test.\n \t* gfortran.dg/interface_39.f90: New test.\n-\t\n+\n 2016-01-24  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tRevert:"}, {"sha": "f512bcbd77799f41f73b4bccb125465e25bcb77b", "filename": "gcc/testsuite/gfortran.dg/allocate_error_6.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_error_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0909527ea43a796239cd68c7354a3a4447852b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_error_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_error_6.f90?ref=a0909527ea43a796239cd68c7354a3a4447852b7", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fcheck=mem\" }\n+! { dg-shouldfail \"Fortran runtime error: Assignment of scalar to unallocated array\" }\n+!\n+! This omission was encountered in the course of fixing PR54070. Whilst this is a\n+! very specific case, others such as allocatable components have been tested.\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+function g(a) result (res)\n+  real :: a\n+  real,allocatable :: res(:)\n+  res = a  ! Since 'res' is not allocated, a runtime error should occur.\n+end function\n+\n+  interface\n+    function g(a) result(res)\n+      real :: a\n+      real,allocatable :: res(:)\n+    end function\n+  end interface\n+!  print *, g(2.0)\n+!  call foo\n+  call foofoo\n+contains\n+  subroutine foo\n+    type bar\n+      real, allocatable, dimension(:) :: r\n+    end type\n+    type (bar) :: foobar\n+    foobar%r = 1.0\n+  end subroutine\n+  subroutine foofoo\n+    type barfoo\n+      character(:), allocatable, dimension(:) :: c\n+    end type\n+    type (barfoo) :: foobarfoo\n+    foobarfoo%c = \"1.0\"\n+  end subroutine\n+end"}]}