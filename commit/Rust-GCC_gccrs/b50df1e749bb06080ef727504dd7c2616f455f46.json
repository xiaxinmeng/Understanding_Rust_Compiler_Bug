{"sha": "b50df1e749bb06080ef727504dd7c2616f455f46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwZGYxZTc0OWJiMDYwODBlZjcyNzUwNGRkN2MyNjE2ZjQ1NWY0Ng==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-14T21:00:10Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-14T21:00:10Z"}, "message": "slp: Add complex operations class to share first match among all matchers\n\nThis introduces a common class complex_operations_pattern which encapsulates\nthe complex add, mul, fma and fms pattern in such a way so that the first match\nis shared.\n\ngcc/ChangeLog:\n\n\t* tree-vect-slp-patterns.c (class complex_operations_pattern,\n\tcomplex_operations_pattern::matches,\n\tcomplex_operations_pattern::recognize,\n\tcomplex_operations_pattern::build): New.\n\t(slp_patterns): Use it.", "tree": {"sha": "39853807b8fb480a63e5e0c6a783a6ee11d0b5d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39853807b8fb480a63e5e0c6a783a6ee11d0b5d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50df1e749bb06080ef727504dd7c2616f455f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50df1e749bb06080ef727504dd7c2616f455f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50df1e749bb06080ef727504dd7c2616f455f46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50df1e749bb06080ef727504dd7c2616f455f46/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478e571a3eedfab198e48e8d2c8f02e491ba2c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478e571a3eedfab198e48e8d2c8f02e491ba2c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478e571a3eedfab198e48e8d2c8f02e491ba2c28"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "d25560fab97bb852e949884850d51c6148b14a68", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50df1e749bb06080ef727504dd7c2616f455f46/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50df1e749bb06080ef727504dd7c2616f455f46/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=b50df1e749bb06080ef727504dd7c2616f455f46", "patch": "@@ -1445,6 +1445,83 @@ complex_fms_pattern::build (vec_info *vinfo)\n   complex_pattern::build (vinfo);\n }\n \n+/*******************************************************************************\n+ * complex_operations_pattern class\n+ ******************************************************************************/\n+\n+/* This function combines all the existing pattern matchers above into one class\n+   that shares the functionality between them.  The initial match is shared\n+   between all complex operations.  */\n+\n+class complex_operations_pattern : public complex_pattern\n+{\n+  protected:\n+    complex_operations_pattern (slp_tree *node, vec<slp_tree> *m_ops,\n+\t\t\t\tinternal_fn ifn)\n+      : complex_pattern (node, m_ops, ifn)\n+    {\n+      this->m_num_args = 0;\n+    }\n+\n+  public:\n+    void build (vec_info *);\n+    static internal_fn\n+    matches (complex_operation_t op, slp_tree_to_load_perm_map_t *, slp_tree *,\n+\t     vec<slp_tree> *);\n+\n+    static vect_pattern*\n+    recognize (slp_tree_to_load_perm_map_t *, slp_tree *);\n+};\n+\n+/* Dummy matches implementation for proxy object.  */\n+\n+internal_fn\n+complex_operations_pattern::\n+matches (complex_operation_t /* op */,\n+\t slp_tree_to_load_perm_map_t * /* perm_cache */,\n+\t slp_tree * /* ref_node */, vec<slp_tree> * /* ops */)\n+{\n+  return IFN_LAST;\n+}\n+\n+/* Attempt to recognize a complex mul pattern.  */\n+\n+vect_pattern*\n+complex_operations_pattern::recognize (slp_tree_to_load_perm_map_t *perm_cache,\n+\t\t\t\t       slp_tree *node)\n+{\n+  auto_vec<slp_tree> ops;\n+  complex_operation_t op\n+    = vect_detect_pair_op (*node, true, &ops);\n+  internal_fn ifn = IFN_LAST;\n+\n+  ifn  = complex_fms_pattern::matches (op, perm_cache, node, &ops);\n+  if (ifn != IFN_LAST)\n+    return complex_fms_pattern::mkInstance (node, &ops, ifn);\n+\n+  ifn  = complex_mul_pattern::matches (op, perm_cache, node, &ops);\n+  if (ifn != IFN_LAST)\n+    return complex_mul_pattern::mkInstance (node, &ops, ifn);\n+\n+  ifn  = complex_fma_pattern::matches (op, perm_cache, node, &ops);\n+  if (ifn != IFN_LAST)\n+    return complex_fma_pattern::mkInstance (node, &ops, ifn);\n+\n+  ifn  = complex_add_pattern::matches (op, perm_cache, node, &ops);\n+  if (ifn != IFN_LAST)\n+    return complex_add_pattern::mkInstance (node, &ops, ifn);\n+\n+  return NULL;\n+}\n+\n+/* Dummy implementation of build.  */\n+\n+void\n+complex_operations_pattern::build (vec_info * /* vinfo */)\n+{\n+  gcc_unreachable ();\n+}\n+\n /*******************************************************************************\n  * Pattern matching definitions\n  ******************************************************************************/\n@@ -1456,7 +1533,7 @@ vect_pattern_decl_t slp_patterns[]\n      order patterns from the largest to the smallest.  Especially if they\n      overlap in what they can detect.  */\n \n-  SLP_PATTERN (complex_add_pattern),\n+  SLP_PATTERN (complex_operations_pattern),\n };\n #undef SLP_PATTERN\n "}]}