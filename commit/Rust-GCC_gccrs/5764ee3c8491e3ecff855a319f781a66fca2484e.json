{"sha": "5764ee3c8491e3ecff855a319f781a66fca2484e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc2NGVlM2M4NDkxZTNlY2ZmODU1YTMxOWY3ODFhNjZmY2EyNDg0ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-04-03T22:30:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-04-03T22:30:56Z"}, "message": "Fix numerous typos in comments\n\ngcc:\n\n\t* alias.c (base_alias_check): Fix typo in comment.\n\t* cgraph.h (class ipa_polymorphic_call_context): Likewise.\n\t* cgraphunit.c (symbol_table::compile): Likewise.\n\t* collect2.c (maybe_run_lto_and_relink): Likewise.\n\t* config/arm/arm.c (arm_thumb1_mi_thunk): Likewise.\n\t* config/avr/avr-arch.h (avr_arch_info_t): Likewise.\n\t* config/avr/avr.c (avr_map_op_t): Likewise.\n\t* config/cr16/cr16.h (DATA_ALIGNMENT): Likewise.\n\t* config/epiphany/epiphany.c (TARGET_ARG_PARTIAL_BYTES): Likewise.\n\t* config/epiphany/epiphany.md (movcc): Likewise.\n\t* config/i386/i386.c (legitimize_pe_coff_extern_decl): Likewise.\n\t* config/m68k/m68k.c (struct _sched_ib, m68k_sched_variable_issue):\n\tLikewise.\n\t* config/mips/mips.c (mips_save_restore_reg): Likewise.\n\t* config/rx/rx.c (rx_is_restricted_memory_address): Likewise.\n\t* config/s390/s390.c (Z10_EARLYLOAD_DISTANCE): Likewise.\n\t* config/sh/sh.c (sh_rtx_costs): Likewise.\n\t* fold-const.c (fold_truth_andor): Likewise.\n\t* genautomata.c (collapse_flag): Likewise.\n\t* gengtype.h (struct type::u::s): Likewise.\n\t* gensupport.c (has_subst_attribute, add_mnemonic_string): Likewise.\n\t* input.c (FORMAT_AMOUNT): Likewise.\n\t* ipa-cp.c (class ipcp_lattice, agg_replacements_to_vector)\n\t(known_aggs_to_agg_replacement_list): Likewise.\n\t* ipa-inline-analysis.c: Likewise.\n\t* ipa-inline.h (estimate_edge_time, estimate_edge_hints): Likewise.\n\t* ipa-polymorphic-call.c\n\t(ipa_polymorphic_call_context::restrict_to_inner_class): Likewise.\n\t* loop-unroll.c (analyze_insn_to_expand_var): Likewise.\n\t* lra.c (lra_optional_reload_pseudos, lra_subreg_reload_pseudos):\n\tLikewise.\n\t* modulo-sched.c (apply_reg_moves): Likewise.\n\t* omp-expand.c (build_omp_regions_1): Likewise.\n\t* trans-mem.c (struct tm_wrapper_hasher): Likewise.\n\t* tree-ssa-loop-ivopts.c (may_eliminate_iv): Likewise.\n\t* tree-ssa-loop-niter.c (maybe_lower_iteration_bound): Likewise.\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n\t* value-prof.c: Likewise.\n\t* var-tracking.c (val_reset): Likewise.\n\ngcc/ada:\n\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix typo.\n\t* g-socket.adb (To_Host_Entry): Fix typo in comment.\n\t* gnat_ugn.texi: Fix typo.\n\t* raise.c (_gnat_builtin_longjmp): Fix capitalization in comment.\n\t* s-stposu.adb (Allocate_Any_Controlled): Fix typo in comment.\n\t* sem_ch3.adb (Build_Derived_Record_Type): Likewise.\n\t* sem_util.adb (Mark_Coextensions): Likewise.\n\t* sem_util.ads (Available_Full_View_Of_Component): Likewise.\n\ngcc/c:\n\n\t* c-array-notation.c: Fix typo in comment.\n\ngcc/c-family:\n\n\t* c-warn.c (do_warn_double_promotion): Fix typo in comment.\n\ngcc/cp:\n\n        * class.c (update_vtable_entry_for_fn): Fix typo in comment.\n\t* decl2.c (one_static_initialization_or_destruction): Likewise.\n\t* name-lookup.c (store_bindings): Likewise.\n\t* parser.c (make_call_declarator): Likewise.\n\t* pt.c (check_explicit_specialization): Likewise.\n\ngcc/testsuite:\n\n\t* g++.old-deja/g++.benjamin/scope02.C: Fix typo in comment.\n\t* gcc.dg/20031012-1.c: Likewise.\n\t* gcc.dg/ipa/ipcp-1.c: Likewise.\n\t* gcc.dg/torture/matrix-3.c: Likewise.\n\t* gcc.target/powerpc/ppc-spe.c: Likewise.\n\t* gcc.target/rx/zero-width-bitfield.c: Likewise.\n\nlibcpp:\n\n\t* include/line-map.h (LINEMAPS_MACRO_MAPS): Fix typo in comment.\n\t* lex.c (search_line_fast): Likewise.\n\t* pch.h (cpp_valid_state): Likewise.\n\nlibdecnumber:\n\n\t* decCommon.c (decFloatFromPackedChecked): Fix typo in comment.\n\t* decNumber.c (decNumberPower, decMultiplyOp): Likewise.\n\nlibgcc:\n\n\t* config/c6x/pr-support.c (__gnu_unwind_execute): Fix typo in comment.\n\nlibitm:\n\n\t* libitm_i.h (sutrct gtm_thread): Fix typo in comment.\n\nFrom-SVN: r246664", "tree": {"sha": "9537f7fbf7eee395644f4d3b3b0d4273aa6b4288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9537f7fbf7eee395644f4d3b3b0d4273aa6b4288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5764ee3c8491e3ecff855a319f781a66fca2484e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5764ee3c8491e3ecff855a319f781a66fca2484e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5764ee3c8491e3ecff855a319f781a66fca2484e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5764ee3c8491e3ecff855a319f781a66fca2484e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a68fae797b88216b40eb6af8c75dec6e98b983c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a68fae797b88216b40eb6af8c75dec6e98b983c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a68fae797b88216b40eb6af8c75dec6e98b983c"}], "stats": {"total": 249, "additions": 173, "deletions": 76}, "files": [{"sha": "a92c3a5b5e074098ce0458b38ef69bb7b40fc4e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,45 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* alias.c (base_alias_check): Fix typo in comment.\n+\t* cgraph.h (class ipa_polymorphic_call_context): Likewise.\n+\t* cgraphunit.c (symbol_table::compile): Likewise.\n+\t* collect2.c (maybe_run_lto_and_relink): Likewise.\n+\t* config/arm/arm.c (arm_thumb1_mi_thunk): Likewise.\n+\t* config/avr/avr-arch.h (avr_arch_info_t): Likewise.\n+\t* config/avr/avr.c (avr_map_op_t): Likewise.\n+\t* config/cr16/cr16.h (DATA_ALIGNMENT): Likewise.\n+\t* config/epiphany/epiphany.c (TARGET_ARG_PARTIAL_BYTES): Likewise.\n+\t* config/epiphany/epiphany.md (movcc): Likewise.\n+\t* config/i386/i386.c (legitimize_pe_coff_extern_decl): Likewise.\n+\t* config/m68k/m68k.c (struct _sched_ib, m68k_sched_variable_issue):\n+\tLikewise.\n+\t* config/mips/mips.c (mips_save_restore_reg): Likewise.\n+\t* config/rx/rx.c (rx_is_restricted_memory_address): Likewise.\n+\t* config/s390/s390.c (Z10_EARLYLOAD_DISTANCE): Likewise.\n+\t* config/sh/sh.c (sh_rtx_costs): Likewise.\n+\t* fold-const.c (fold_truth_andor): Likewise.\n+\t* genautomata.c (collapse_flag): Likewise.\n+\t* gengtype.h (struct type::u::s): Likewise.\n+\t* gensupport.c (has_subst_attribute, add_mnemonic_string): Likewise.\n+\t* input.c (FORMAT_AMOUNT): Likewise.\n+\t* ipa-cp.c (class ipcp_lattice, agg_replacements_to_vector)\n+\t(known_aggs_to_agg_replacement_list): Likewise.\n+\t* ipa-inline-analysis.c: Likewise.\n+\t* ipa-inline.h (estimate_edge_time, estimate_edge_hints): Likewise.\n+\t* ipa-polymorphic-call.c\n+\t(ipa_polymorphic_call_context::restrict_to_inner_class): Likewise.\n+\t* loop-unroll.c (analyze_insn_to_expand_var): Likewise.\n+\t* lra.c (lra_optional_reload_pseudos, lra_subreg_reload_pseudos):\n+\tLikewise.\n+\t* modulo-sched.c (apply_reg_moves): Likewise.\n+\t* omp-expand.c (build_omp_regions_1): Likewise.\n+\t* trans-mem.c (struct tm_wrapper_hasher): Likewise.\n+\t* tree-ssa-loop-ivopts.c (may_eliminate_iv): Likewise.\n+\t* tree-ssa-loop-niter.c (maybe_lower_iteration_bound): Likewise.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n+\t* value-prof.c: Likewise.\n+\t* var-tracking.c (val_reset): Likewise.\n+\n 2017-04-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80275"}, {"sha": "127a181431f3bc7286e98889ddf7fa6561f75f7c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,14 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix typo.\n+\t* g-socket.adb (To_Host_Entry): Fix typo in comment.\n+\t* gnat_ugn.texi: Fix typo.\n+\t* raise.c (_gnat_builtin_longjmp): Fix capitalization in comment.\n+\t* s-stposu.adb (Allocate_Any_Controlled): Fix typo in comment.\n+\t* sem_ch3.adb (Build_Derived_Record_Type): Likewise.\n+\t* sem_util.adb (Mark_Coextensions): Likewise.\n+\t* sem_util.ads (Available_Full_View_Of_Component): Likewise.\n+\n 2017-03-28  Andreas Schwab  <schwab@suse.de>\n \n \tPR ada/80117"}, {"sha": "37c077e92d1a2ee8f28f474a37a7dc9a3e5cbe5f", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -3091,7 +3091,7 @@ The three modes are:\n \n Note that these modes apply only to the evaluation of predefined\n arithmetic, membership, and comparison operators for signed integer\n-aritmetic.\n+arithmetic.\n \n For fixed-point arithmetic, checks can be suppressed. But if checks\n are enabled"}, {"sha": "07931af601c2594cfc79ea0aefc59f4b7c71376b", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2541,7 +2541,7 @@ package body GNAT.Sockets is\n \n                --  Hostent_H_Addr (E, <index>) may return an address that is\n                --  not correctly aligned for In_Addr, so we need to use\n-               --  an intermediate copy operation on a type with an alignemnt\n+               --  an intermediate copy operation on a type with an alignment\n                --  of 1 to recover the value.\n \n                subtype Addr_Buf_T is C.char_array (1 .. Addr'Size / 8);"}, {"sha": "1916d1efc571a7dde5cd40a027ecceeaa3683c22", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -22168,7 +22168,7 @@ but overflow is impossible.\n \n Note that these modes apply only to the evaluation of predefined\n arithmetic, membership, and comparison operators for signed integer\n-aritmetic.\n+arithmetic.\n \n For fixed-point arithmetic, checks can be suppressed. But if checks\n are enabled"}, {"sha": "a61723d10e40e21ac0034f2cc438391930ed5e6c", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -50,7 +50,7 @@ extern \"C\" {\n /*  Wrapper to builtin_longjmp.  This is for the compiler eh only, as the sjlj\n     runtime library interfaces directly to the intrinsic.  We can't yet do\n     this for the compiler itself, because this capability relies on changes\n-    made in april 2008 and we need to preserve the possibility to bootstrap\n+    made in April 2008 and we need to preserve the possibility to bootstrap\n     with an older base version.  */\n \n #if defined (IN_GCC) && !defined (IN_RTS)"}, {"sha": "d017ce3686e94e79838d8a9455c78e75c9a8958b", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -221,7 +221,7 @@ package body System.Storage_Pools.Subpools is\n          pragma Assert\n            (Fin_Address /= null, \"primitive Finalize_Address not available\");\n \n-         --  The size must acount for the hidden header preceding the object.\n+         --  The size must account for the hidden header preceding the object.\n          --  Account for possible padding space before the header due to a\n          --  larger alignment.\n "}, {"sha": "de3a49e29103a3c7f23bae32a335e7376a23efde", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -8706,7 +8706,7 @@ package body Sem_Ch3 is\n \n                --  However, if the record contains an array constrained by\n                --  the discriminant but with some different bound, the compiler\n-               --  attemps to create a smaller range for the discriminant type.\n+               --  attempts to create a smaller range for the discriminant type.\n                --  (See exp_ch3.Adjust_Discriminants). In this case, where\n                --  the discriminant type is a scalar type, the check must use\n                --  the original discriminant type in the parent declaration."}, {"sha": "93d8bd58d81b624dbd84a79d6465cc990b9f790b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -16131,7 +16131,7 @@ package body Sem_Util is\n                                                N_Allocator,\n                                                N_Qualified_Expression);\n \n-      --  An alloctor that appears within the initialization expression of an\n+      --  An allocator that appears within the initialization expression of an\n       --  object declaration is considered a potentially dynamic coextension\n       --  when the initialization expression is an allocator or a qualified\n       --  expression."}, {"sha": "f9ab8135481428a7faa281662ce71da7062d5bbe", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -154,10 +154,10 @@ package Sem_Util is\n \n    function Available_Full_View_Of_Component (T : Entity_Id) return Boolean;\n    --  If at the point of declaration an array type has a private or limited\n-   --  component, several array operations are not avaiable on the type, and\n+   --  component, several array operations are not available on the type, and\n    --  the array type is flagged accordingly. If in the immediate scope of\n    --  the array type the component becomes non-private or non-limited, these\n-   --  operations become avaiable. This can happen if the scopes of both types\n+   --  operations become available. This can happen if the scopes of both types\n    --  are open, and the scope of the array is not outside the scope of the\n    --  component.\n "}, {"sha": "cc31ee0e261724813c851012f86688b4a19006d6", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2157,7 +2157,7 @@ base_alias_check (rtx x, rtx x_base, rtx y, rtx y_base,\n   /* The base addresses are different expressions.  If they are not accessed\n      via AND, there is no conflict.  We can bring knowledge of object\n      alignment into play here.  For example, on alpha, \"char a, b;\" can\n-     alias one another, though \"char a; long b;\" cannot.  AND addesses may\n+     alias one another, though \"char a; long b;\" cannot.  AND addresses may\n      implicitly alias surrounding objects; i.e. unaligned access in DImode\n      via AND address can alias all surrounding object types except those\n      with aligment 8 or higher.  */"}, {"sha": "594aa05a5522651d0e72b7b959c4ae75f5cd90bc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,7 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* c-warn.c (do_warn_double_promotion): Fix typo in comment.\n+\n 2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79572"}, {"sha": "45dd583111ef68481b3782f5796276af206333c8", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1850,7 +1850,7 @@ warn_for_sign_compare (location_t location,\n    the warning message.  It must have two %T specifiers for the type\n    that was converted (generally \"float\") and the type to which it was\n    converted (generally \"double), respectively.  LOC is the location\n-   to which the awrning should refer.  */\n+   to which the warning should refer.  */\n \n void\n do_warn_double_promotion (tree result_type, tree type1, tree type2,"}, {"sha": "ec1922162329d17624753f6af2663d478b2da8f2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,7 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* c-array-notation.c: Fix typo in comment.\n+\n 2017-03-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/79730"}, {"sha": "e430f5c681bfdd8e6e3389767d3ca14058c5dc11", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -26,7 +26,7 @@\n    An array notation expression has 4 major components:\n    1. The array name\n    2. Start Index\n-   3. Number of elements we need to acess (we call it length)\n+   3. Number of elements we need to access (we call it length)\n    4. Stride\n \n    For example, A[0:5:2], implies that we are accessing A[0], A[2], A[4],"}, {"sha": "77aa8803a0adeda634bfefe287f71d91b9fd213c", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1511,7 +1511,7 @@ class GTY(()) ipa_polymorphic_call_context {\n      Return true if resulting context is valid.\n \n      When CONSIDER_PLACEMENT_NEW is false, reject contexts that may be made\n-     valid only via alocation of new polymorphic type inside by means\n+     valid only via allocation of new polymorphic type inside by means\n      of placement new.\n \n      When CONSIDER_BASES is false, only look for actual fields, not base types"}, {"sha": "4a949ca9d73dc5a6703b267361b7ca9a0a11b97d", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2497,7 +2497,7 @@ symbol_table::compile (void)\n   bitmap_obstack_release (NULL);\n   mark_functions_to_output ();\n \n-  /* When weakref support is missing, we autmatically translate all\n+  /* When weakref support is missing, we automatically translate all\n      references to NODE to references to its ultimate alias target.\n      The renaming mechanizm uses flag IDENTIFIER_TRANSPARENT_ALIAS and\n      TREE_CHAIN."}, {"sha": "ddbd2be8bf8945d026341ef1d660d591cced36eb", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -761,7 +761,7 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n       do_wait (prog, pex);\n       pex = NULL;\n \n-      /* Compute memory needed for new LD arguments.  At most number of original arguemtns\n+      /* Compute memory needed for new LD arguments.  At most number of original arguments\n \t plus number of partitions.  */\n       for (lto_ld_argv_size = 0; lto_ld_argv[lto_ld_argv_size]; lto_ld_argv_size++)\n \t;"}, {"sha": "bc1e607c42c9ba12a473e4df8ef51f788e041f62", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -26228,7 +26228,7 @@ arm_thumb1_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n     {\n       int labelno = thunk_label++;\n       ASM_GENERATE_INTERNAL_LABEL (label, \"LTHUMBFUNC\", labelno);\n-      /* Thunks are entered in arm mode when avaiable.  */\n+      /* Thunks are entered in arm mode when available.  */\n       if (TARGET_THUMB1_ONLY)\n \t{\n \t  /* push r3 so we can use it as a temporary.  */"}, {"sha": "94637356a1ed6269c6553ccdabb9a38cde6ffd09", "filename": "gcc/config/avr/avr-arch.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Favr%2Favr-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Favr%2Favr-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-arch.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -169,7 +169,7 @@ typedef struct\n   /* Architecture ID.  */\n   enum avr_arch_id arch_id;\n \n-  /* textinfo source to describe the archtiecture.  */\n+  /* textinfo source to describe the architecture.  */\n   const char *texinfo;\n } avr_arch_info_t;\n "}, {"sha": "7f5a22b8edfe2c2ca165665a93cd3b440153aeb2", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -13335,7 +13335,7 @@ typedef struct\n   /* G^-1, the inverse of G (*, arg) */\n   unsigned ginv;\n \n-  /* The cost of appplying G (*, arg) */\n+  /* The cost of applying G (*, arg) */\n   int cost;\n \n   /* The composition F o G^-1 (*, arg) for some function F */"}, {"sha": "e2a678ea1ee23c5f3b4ab50c508fe273c0dce8b0", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -114,7 +114,7 @@ while (0)\n      && ((ALIGN) < BITS_PER_WORD))               \\\n      ? (BITS_PER_WORD) : (ALIGN))\n \n-/* In CR16 strings are word-aligne; strcpy from constants will be faster.  */\n+/* In CR16 strings are word-aligned; strcpy from constants will be faster.  */\n #define CONSTANT_ALIGNMENT(CONSTANT, ALIGN)                            \\\n   (((TREE_CODE (CONSTANT) == STRING_CST) && ((ALIGN) < BITS_PER_WORD)) \\\n      ? (BITS_PER_WORD) : (ALIGN))"}, {"sha": "b9ec0f40d12ab4ac78091535d6945c146f105d9a", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -95,7 +95,7 @@ static rtx_insn *frame_insn (rtx);\n #define TARGET_SETUP_INCOMING_VARARGS epiphany_setup_incoming_varargs\n \n /* Using the simplistic varags handling forces us to do partial reg/stack\n-   argument passing for types with larger size (> 4 bytes) than alignemnt.  */\n+   argument passing for types with larger size (> 4 bytes) than alignment.  */\n #define TARGET_ARG_PARTIAL_BYTES epiphany_arg_partial_bytes\n \n #define TARGET_FUNCTION_OK_FOR_SIBCALL epiphany_function_ok_for_sibcall"}, {"sha": "90a59422e4351157a3c94edefbdf581d80c28d00", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1438,7 +1438,7 @@\n   [(set_attr \"type\" \"flow\")])\n \n ; Floating point instructions require manipulating the control register.\n-; Manipulating the control register needs aritmetic.\n+; Manipulating the control register needs arithmetic.\n ; Arithmetic clobbers flags.\n ; The flags are in the status register, which also contains the alternate\n ; flag and the interrupt enable/disable bits."}, {"sha": "80b8773649460d8e1fabfd7c79c27209edbca302", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -16713,7 +16713,7 @@ get_dllimport_decl (tree decl, bool beimport)\n   return to;\n }\n \n-/* Expand SYMBOL into its corresponding far-addresse symbol.\n+/* Expand SYMBOL into its corresponding far-address symbol.\n    WANT_REG is true if we require the result be a register.  */\n \n static rtx"}, {"sha": "c14ce86d8102b41a891ca45ff7f2e2dbaf6f2fc5", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -6019,7 +6019,7 @@ struct _sched_ib\n     /* Size of buffer in records.  */\n     int n_insns;\n \n-    /* Array to hold data on adjustements made to the size of the buffer.  */\n+    /* Array to hold data on adjustments made to the size of the buffer.  */\n     int *adjust;\n \n     /* Index of the above array.  */\n@@ -6081,7 +6081,7 @@ m68k_sched_variable_issue (FILE *sched_dump ATTRIBUTE_UNUSED,\n \t  if (sched_ib.records.adjust_index == sched_ib.records.n_insns)\n \t    sched_ib.records.adjust_index = 0;\n \n-\t  /* Undo adjustement we did 7 instructions ago.  */\n+\t  /* Undo adjustment we did 7 instructions ago.  */\n \t  sched_ib.size\n \t    += sched_ib.records.adjust[sched_ib.records.adjust_index];\n "}, {"sha": "42943e01908b5aee7cf6374bb64c90a6a9f7521e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -11414,7 +11414,7 @@ mips_save_restore_reg (machine_mode mode, int regno,\n   fn (gen_rtx_REG (mode, regno), mem);\n }\n \n-/* Call FN for each accumlator that is saved by the current function.\n+/* Call FN for each accumulator that is saved by the current function.\n    SP_OFFSET is the offset of the current stack pointer from the start\n    of the frame.  */\n "}, {"sha": "1e74f380bdb284c2ca664e711dc2359874f4dff5", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -267,7 +267,7 @@ rx_is_legitimate_address (machine_mode mode, rtx x,\n   return rx_small_data_operand (x);\n }\n \n-/* Returns TRUE for simple memory addreses, ie ones\n+/* Returns TRUE for simple memory addresses, ie ones\n    that do not involve register indirect addressing\n    or pre/post increment/decrement.  */\n "}, {"sha": "51b3d46924b88173cf69eeace98fe9d1ae39d933", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -13968,7 +13968,7 @@ s390_fpload_toreg (rtx_insn *insn, unsigned int regno)\n }\n \n /* This value describes the distance to be avoided between an\n-   aritmetic fp instruction and an fp load writing the same register.\n+   arithmetic fp instruction and an fp load writing the same register.\n    Z10_EARLYLOAD_DISTANCE - 1 as well as Z10_EARLYLOAD_DISTANCE + 1 is\n    fine but the exact value has to be avoided. Otherwise the FP\n    pipeline will throw an exception causing a major penalty.  */"}, {"sha": "ff79b93adc263e02114c815ff3706ad57d5cad60", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -3259,7 +3259,7 @@ sh_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED, int outer_code,\n       return false;\n \n     /* The cost of a sign or zero extend depends on whether the source is a\n-       reg or a mem.  In case of a mem take the address into acount.  */\n+       reg or a mem.  In case of a mem take the address into account.  */\n     case SIGN_EXTEND:\n       if (arith_reg_operand (XEXP (x, 0), GET_MODE (XEXP (x, 0))))\n \t{"}, {"sha": "01baeb810aba9e73ba235b9d43d7ff656246bd86", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,11 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* class.c (update_vtable_entry_for_fn): Fix typo in comment.\n+\t* decl2.c (one_static_initialization_or_destruction): Likewise.\n+\t* name-lookup.c (store_bindings): Likewise.\n+\t* parser.c (make_call_declarator): Likewise.\n+\t* pt.c (check_explicit_specialization): Likewise.\n+\n 2017-04-03  Jason Merrill  <jason@redhat.com>\n \n \tPR sanitizer/79993 - ICE with VLA initialization from string"}, {"sha": "940cead072ec1f058ada641affa14bd29465769f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2789,7 +2789,7 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n      determined by which bases the function overrides, so we need to be\n      sure that we're using a thunk for some overridden base; even if we\n      know that the necessary this adjustment is zero, there may not be an\n-     appropriate zero-this-adjusment thunk for us to use since thunks for\n+     appropriate zero-this-adjustment thunk for us to use since thunks for\n      overriding virtual bases always use the vcall offset.\n \n      Furthermore, just choosing any base that overrides this function isn't"}, {"sha": "9c351fda44d12c52d16ec999ab1a01922163d4c3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -3648,10 +3648,10 @@ one_static_initialization_or_destruction (tree decl, tree init, bool initp)\n \n   /* Make sure temporary variables in the initialiser all have\n      their DECL_CONTEXT() set to a value different from NULL_TREE.\n-     This can happen when global variables initialisers are built.\n+     This can happen when global variables initializers are built.\n      In that case, the DECL_CONTEXT() of the global variables _AND_ of all \n      the temporary variables that might have been generated in the\n-     accompagning initialisers is NULL_TREE, meaning the variables have been\n+     accompanying initializers is NULL_TREE, meaning the variables have been\n      declared in the global namespace.\n      What we want to do here is to fix that and make sure the DECL_CONTEXT()\n      of the temporaries are set to the current function decl.  */"}, {"sha": "9dedad4e181b25e0c7c93d98ecc3b3adacac13fd", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -6341,7 +6341,7 @@ store_bindings (tree names, vec<cxx_saved_binding, va_gc> **old_bindings)\n       vec_safe_reserve_exact (*old_bindings, bindings_need_stored.length ());\n       for (i = 0; bindings_need_stored.iterate (i, &id); ++i)\n \t{\n-\t  /* We can appearantly have duplicates in NAMES.  */\n+\t  /* We can apparently have duplicates in NAMES.  */\n \t  if (store_binding_p (id))\n \t    store_binding (id, old_bindings);\n \t}"}, {"sha": "e202ad9bf120cf6f36c5f34d69be7c10919c7031", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1584,7 +1584,7 @@ make_ptrmem_declarator (cp_cv_quals cv_qualifiers, tree class_type,\n }\n \n /* Make a declarator for the function given by TARGET, with the\n-   indicated PARMS.  The CV_QUALIFIERS aply to the function, as in\n+   indicated PARMS.  The CV_QUALIFIERS apply to the function, as in\n    \"const\"-qualified member function.  The EXCEPTION_SPECIFICATION\n    indicates what exceptions can be thrown.  */\n "}, {"sha": "24b01e70ba6a1ca3e78694a734d510b86f4511b0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2968,7 +2968,7 @@ check_explicit_specialization (tree declarator,\n \n       /* Figure out what exactly is being specialized at this point.\n \t Note that for an explicit instantiation, even one for a\n-\t member function, we cannot tell apriori whether the\n+\t member function, we cannot tell a priori whether the\n \t instantiation is for a member template, or just a member\n \t function of a template class.  Even if a member template is\n \t being instantiated, the member template arguments may be"}, {"sha": "d0f1c0685ca05aa514c63f6f3321da3743ae556e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -8072,7 +8072,7 @@ fold_truth_andor (location_t loc, enum tree_code code, tree type,\n \t  return fold_build2_loc (loc, icode, type, TREE_OPERAND (arg0, 0),\n \t\t\t\t  tem);\n \t}\n-\t/* Same as abouve but for (A AND[-IF] (B AND-IF C)) -> ((A AND B) AND-IF C),\n+\t/* Same as above but for (A AND[-IF] (B AND-IF C)) -> ((A AND B) AND-IF C),\n \t   or (A OR[-IF] (B OR-IF C) -> ((A OR B) OR-IF C).  */\n       else if (TREE_CODE (arg1) == icode\n \t  && simple_operand_p_2 (arg0)"}, {"sha": "76dacbc39846fb1a3ed3cb9347fcda0f0a50f8e8", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -248,7 +248,7 @@ static int ndfa_flag;\n \n /* When making an NDFA, produce additional transitions that collapse\n    NDFA state into a deterministic one suitable for querying CPU units.\n-   Provide avance-state transitions only for deterministic states.  */\n+   Provide advance-state transitions only for deterministic states.  */\n static int collapse_flag;\n \n /* Do not make minimization of DFA (`-no-minimization').  */"}, {"sha": "61a799ff3a9e8875fe2ea5aea55d9a6bdae96bcd", "filename": "gcc/gengtype.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -277,7 +277,7 @@ struct type {\n     /* when TYPE_STRUCT or TYPE_UNION or TYPE_LANG_STRUCT, we have an\n        aggregate type containing fields: */\n     struct {\n-      const char *tag;          /* the aggragate tag, if any.  */\n+      const char *tag;          /* the aggregate tag, if any.  */\n       struct fileloc line;      /* the source location.  */\n       pair_p fields;            /* the linked list of fields.  */\n       options_p opt;            /* the GTY options if any.  */"}, {"sha": "c79feb48ad15d619cf4e8fde2a65995a42b4ddf4", "filename": "gcc/gensupport.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -679,7 +679,7 @@ change_subst_attribute (struct queue_elem *elem,\n    represented by SUBST_ELEM and this attribute has value SUBST_TRUE.\n    DEFINE_SUBST isn't applied to patterns without such attribute.  In other\n    words, we suppose the default value of the attribute to be 'no' since it is\n-   always generated automaticaly in read-rtl.c.  */\n+   always generated automatically in read-rtl.c.  */\n static bool\n has_subst_attribute (struct queue_elem *elem, struct queue_elem *subst_elem)\n {\n@@ -2259,7 +2259,7 @@ htab_eq_string (const void *s1, const void *s2)\n }\n \n /* Add mnemonic STR with length LEN to the mnemonic hash table\n-   MNEMONIC_HTAB.  A trailing zero end character is appendend to STR\n+   MNEMONIC_HTAB.  A trailing zero end character is appended to STR\n    and a permanent heap copy of STR is created.  */\n \n static void"}, {"sha": "80718100d0c5fac5baf22d8518aebad0788f89f3", "filename": "gcc/input.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -885,7 +885,7 @@ make_location (location_t caret, location_t start, location_t finish)\n #define STAT_LABEL(x) ((x) < 10 * ONE_K ? ' ' : ((x) < 10 * ONE_M ? 'k' : 'M'))\n \n /* Display an integer amount as multiple of 1K or 1M (in base 2).\n-   Display the correct unit (either k, M, or ' ') after the amout, as\n+   Display the correct unit (either k, M, or ' ') after the amount, as\n    well.  */\n #define FORMAT_AMOUNT(size) SCALE (size), STAT_LABEL (size)\n "}, {"sha": "0b408149a88dd728329f23435fa03923fc0eaf2c", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -193,7 +193,7 @@ class ipcp_value : public ipcp_value_base\n };\n \n /* Lattice describing potential values of a formal parameter of a function, or\n-   a part of an aggreagate.  TOP is represented by a lattice with zero values\n+   a part of an aggregate.  TOP is represented by a lattice with zero values\n    and with contains_variable and bottom flags cleared.  BOTTOM is represented\n    by a lattice with the bottom flag set.  In that case, values and\n    contains_variable flag should be disregarded.  */\n@@ -4014,7 +4014,7 @@ intersect_with_plats (struct ipcp_param_lattices *plats,\n     }\n }\n \n-/* Copy agggregate replacement values of NODE (which is an IPA-CP clone) to the\n+/* Copy aggregate replacement values of NODE (which is an IPA-CP clone) to the\n    vector result while subtracting OFFSET from the individual value offsets.  */\n \n static vec<ipa_agg_jf_item>\n@@ -4276,7 +4276,7 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n   return res;\n }\n \n-/* Turn KNOWN_AGGS into a list of aggreate replacement values.  */\n+/* Turn KNOWN_AGGS into a list of aggregate replacement values.  */\n \n static struct ipa_agg_replacement_value *\n known_aggs_to_agg_replacement_list (vec<ipa_agg_jump_function> known_aggs)"}, {"sha": "97338e19f3a681412205fc4ce32f111eeb211d11", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -30,20 +30,20 @@ along with GCC; see the file COPYING3.  If not see\n    For each call\n      - call statement size and time\n \n-   inlinie_summary datastructures store above information locally (i.e.\n+   inline_summary data structures store above information locally (i.e.\n    parameters of the function itself) and globally (i.e. parameters of\n    the function created by applying all the inline decisions already\n    present in the callgraph).\n \n-   We provide accestor to the inline_summary datastructure and\n+   We provide access to the inline_summary data structure and\n    basic logic updating the parameters when inlining is performed. \n \n    The summaries are context sensitive.  Context means\n      1) partial assignment of known constant values of operands\n      2) whether function is inlined into the call or not.\n    It is easy to add more variants.  To represent function size and time\n    that depends on context (i.e. it is known to be optimized away when\n-   context is known either by inlining or from IP-CP and clonning),\n+   context is known either by inlining or from IP-CP and cloning),\n    we use predicates. Predicates are logical formulas in\n    conjunctive-disjunctive form consisting of clauses. Clauses are bitmaps\n    specifying what conditions must be true. Conditions are simple test"}, {"sha": "0010530ab2ee30cb1d914624c70103aff3253266", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -309,7 +309,7 @@ estimate_edge_growth (struct cgraph_edge *edge)\n \t  - inline_edge_summary (edge)->call_stmt_size);\n }\n \n-/* Return estimated callee runtime increase after inlning\n+/* Return estimated callee runtime increase after inlining\n    EDGE.  */\n \n static inline int\n@@ -323,7 +323,7 @@ estimate_edge_time (struct cgraph_edge *edge)\n }\n \n \n-/* Return estimated callee runtime increase after inlning\n+/* Return estimated callee runtime increase after inlining\n    EDGE.  */\n \n static inline inline_hints"}, {"sha": "c8bab92b7bbc7430cf4a8d4a6fdb19b78d8b5475", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -117,7 +117,7 @@ possible_placement_new (tree type, tree expected_type,\n    Return true when lookup was sucesful.\n \n    When CONSIDER_PLACEMENT_NEW is false, reject contexts that may be made\n-   valid only via alocation of new polymorphic type inside by means\n+   valid only via allocation of new polymorphic type inside by means\n    of placement new.\n \n    When CONSIDER_BASES is false, only look for actual fields, not base types"}, {"sha": "dd5bdc519b01ccafaecf21dccd0fb6c310f6d9a9", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1454,7 +1454,7 @@ analyze_insn_to_expand_var (struct loop *loop, rtx_insn *insn)\n   if (debug_uses)\n     /* Instead of resetting the debug insns, we could replace each\n        debug use in the loop with the sum or product of all expanded\n-       accummulators.  Since we'll only know of all expansions at the\n+       accumulators.  Since we'll only know of all expansions at the\n        end, we'd have to keep track of which vars_to_expand a debug\n        insn in the loop references, take note of each copy of the\n        debug insn during unrolling, and when it's all done, compute"}, {"sha": "1230b25e7e12e6dcc41ac51a96e9d1522ec6d1f5", "filename": "gcc/lra.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2267,13 +2267,13 @@ bitmap_head lra_inheritance_pseudos;\n /* Split regnos before the new spill pass.  */\n bitmap_head lra_split_regs;\n \n-/* Reload pseudo regnos before the new assignmnet pass which still can\n-   be spilled after the assinment pass as memory is also accepted in\n+/* Reload pseudo regnos before the new assignment pass which still can\n+   be spilled after the assignment pass as memory is also accepted in\n    insns for the reload pseudos.  */\n bitmap_head lra_optional_reload_pseudos;\n \n /* Pseudo regnos used for subreg reloads before the new assignment\n-   pass.  Such pseudos still can be spilled after the assinment\n+   pass.  Such pseudos still can be spilled after the assignment\n    pass.  */\n bitmap_head lra_subreg_reload_pseudos;\n "}, {"sha": "720391f7cfed376b781cae9d7139ba1cadbf0983", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -805,7 +805,7 @@ schedule_reg_moves (partial_schedule_ptr ps)\n   return true;\n }\n \n-/* Emit the moves associatied with PS.  Apply the substitutions\n+/* Emit the moves associated with PS.  Apply the substitutions\n    associated with them.  */\n static void\n apply_reg_moves (partial_schedule_ptr ps)"}, {"sha": "5c48b7867c20b0f768fea40ebbf30f0ff1687f0a", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -7986,7 +7986,7 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t}\n       else if (code == GIMPLE_OMP_ATOMIC_STORE)\n \t{\n-\t  /* GIMPLE_OMP_ATOMIC_STORE is analoguous to\n+\t  /* GIMPLE_OMP_ATOMIC_STORE is analogous to\n \t     GIMPLE_OMP_RETURN, but matches with\n \t     GIMPLE_OMP_ATOMIC_LOAD.  */\n \t  gcc_assert (parent);"}, {"sha": "4a05eba88b9950a5b15dc8a931668a9585b5b8ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,12 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.old-deja/g++.benjamin/scope02.C: Fix typo in comment.\n+\t* gcc.dg/20031012-1.c: Likewise.\n+\t* gcc.dg/ipa/ipcp-1.c: Likewise.\n+\t* gcc.dg/torture/matrix-3.c: Likewise.\n+\t* gcc.target/powerpc/ppc-spe.c: Likewise.\n+\t* gcc.target/rx/zero-width-bitfield.c: Likewise.\n+\n 2017-04-03  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/80246"}, {"sha": "1ac1233f37102ae5937c7f56e33c93258a9d36f5", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/scope02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fscope02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fscope02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fscope02.C?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -83,7 +83,7 @@ int main(void)\n \n   // p 4 \n \n-  // if the id-expr in a class member acess is a qualified-id, the\n+  // if the id-expr in a class member access is a qualified-id, the\n   // id-expression is looked up in both the context of the entire\n   // postfix-expr and in the scope of the class of the object-expr. If\n   // the name is found in both contexts, the id-expr shall refer to"}, {"sha": "24a68d0e3da192e1a74a8f7ca66899df23564c5c", "filename": "gcc/testsuite/gcc.dg/20031012-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.dg%2F20031012-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.dg%2F20031012-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031012-1.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-Waddress\" } */\n /* Origin: Andrew Morton <akpm@osdl.org> */\n-/* Warn if a function addres of a non-weak function is used\n+/* Warn if a function address of a non-weak function is used\n    as a truth value.  */\n /* See thread starting at http://gcc.gnu.org/ml/gcc/2003-10/msg00414.html  */\n "}, {"sha": "952694d302bd192aafba5f55908a4e54af3b5c1c", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-1.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,6 +1,6 @@\n-/* Test that IPA-CP is able to figure out that poth parameters a are constant 7\n+/* Test that IPA-CP is able to figure out that both parameters a are constant 7\n    even though f and h recursively call each other and specialize them\n-   accordinly.  */\n+   accordingly.  */\n \n /* { dg-do compile } */\n /* { dg-options \"-O3 -fipa-cp -fipa-cp-clone -fdump-ipa-cp -fno-early-inlining\"  } */"}, {"sha": "a2093abdf221a5511e0e6f9c5227ebcfc88a10fe", "filename": "gcc/testsuite/gcc.dg/torture/matrix-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmatrix-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmatrix-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmatrix-3.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -11,7 +11,7 @@ int ***vel;\n void just_a_call (int *);\n \n /* The last dimension of VEL escapes because it was sent\n-   as argumet to just_a_call(). (external function)\n+   as argument to just_a_call(). (external function)\n    Only the two external dimensions are flattened.\n    Run with -c.  */\n "}, {"sha": "5880e046c04d0605939c98b04c10812506cd0afd", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-spe.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -22,7 +22,7 @@ float fl;\n uint16_t u16;\n int16_t s16;\n \n-/* These are the only documented/supported accesor functions for the\n+/* These are the only documented/supported accessor functions for the\n    SPE builtins.  */\n void\n test_api ()"}, {"sha": "8e477ffff742b7590221079d37bec0b880756f1d", "filename": "gcc/testsuite/gcc.target/rx/zero-width-bitfield.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Fzero-width-bitfield.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Fzero-width-bitfield.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Fzero-width-bitfield.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { xfail rx-*-* } } */\n /* { dg-skip-if \"skipped until patch for generic zero=width bit-field handling is accepted\" { rx-*-* } { \"*\" } { \"\" } } */\n /* { dg-options \"-msim\" } */\n-/* Note: The -msim abiove is actually there to override the default\n+/* Note: The -msim above is actually there to override the default\n    options which do not allow the GCC extension of zero-width bitfields.  */\n \n extern void abort (void);"}, {"sha": "4409bea94d1388239d36a66b3d385d4923bb6dc4", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -456,7 +456,7 @@ build_tm_abort_call (location_t loc, bool is_outer)\n \t\t\t\t\t     | (is_outer ? AR_OUTERABORT : 0)));\n }\n \f\n-/* Map for aribtrary function replacement under TM, as created\n+/* Map for arbitrary function replacement under TM, as created\n    by the tm_wrap attribute.  */\n \n struct tm_wrapper_hasher : ggc_cache_ptr_hash<tree_map>"}, {"sha": "72e3ff98a3e7a707a55d9bb70d0e727feb4e6778", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -5543,7 +5543,7 @@ may_eliminate_iv (struct ivopts_data *data,\n     return false;\n \n   /* Sometimes, it is possible to handle the situation that the number of\n-     iterations may be zero unless additional assumtions by using <\n+     iterations may be zero unless additional assumptions by using <\n      instead of != in the exit condition.\n \n      TODO: we could also calculate the value MAY_BE_ZERO ? 0 : NITER and"}, {"sha": "e67cd93094636a252c035b54e4dedb8386d0203a", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -3697,7 +3697,7 @@ maybe_lower_iteration_bound (struct loop *loop)\n      TODO: Due to the way record_estimate choose estimates to store, the bounds\n      will be always nb_iterations_upper_bound-1.  We can change this to record\n      also statements not dominating the loop latch and update the walk bellow\n-     to the shortest path algorthm.  */\n+     to the shortest path algorithm.  */\n   for (elt = loop->bounds; elt; elt = elt->next)\n     {\n       if (!elt->is_exit"}, {"sha": "aa504b6a1c694f7d8a1ac5e767d04504a67f8725", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1550,7 +1550,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n                  Hence, except for the immediate peeling amount, we also want\n                  to try to add full vector size, while we don't exceed\n                  vectorization factor.\n-                 We do this automtically for cost model, since we calculate cost\n+                 We do this automatically for cost model, since we calculate cost\n                  for every peeling option.  */\n               if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n \t\t{"}, {"sha": "1ce0fda0ed2cdf1bbb39635566cd23c796380a0f", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -100,7 +100,7 @@ along with GCC; see the file COPYING3.  If not see\n    * The value profiling code could be used to record analysis results\n      from non-profiling (e.g. VRP).\n    * Adding new profilers should be simplified, starting with a cleanup\n-     of what-happens-where andwith making gimple_find_values_to_profile\n+     of what-happens-where and with making gimple_find_values_to_profile\n      and gimple_value_profile_transformations table-driven, perhaps...\n */\n "}, {"sha": "1b9f8ddea6ab4e0ffbc97ddbdc62890a66dfbc83", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2555,7 +2555,7 @@ val_reset (dataflow_set *set, decl_or_value dv)\n     {\n       decl_or_value cdv = dv_from_value (cval);\n \n-      /* Keep the remaining values connected, accummulating links\n+      /* Keep the remaining values connected, accumulating links\n \t in the canonical value.  */\n       for (node = var->var_part[0].loc_chain; node; node = node->next)\n \t{"}, {"sha": "63cd5a52a33458972598f8a5bdf3cecae981e565", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,9 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/line-map.h (LINEMAPS_MACRO_MAPS): Fix typo in comment.\n+\t* lex.c (search_line_fast): Likewise.\n+\t* pch.h (cpp_valid_state): Likewise.\n+\n 2017-03-21  Andreas Schwab  <schwab@suse.de>\n \n \t* lex.c (search_line_fast) [__ARM_NEON && __ARM_64BIT_STATE]:"}, {"sha": "522e8bb17ebaad2b44f0dcfde3f5aa3ef09c9161", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -908,7 +908,7 @@ LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)\n }\n \n /* Returns a pointer to the beginning of the region where macro maps\n-   are allcoated.  */\n+   are allocated.  */\n inline line_map_macro *\n LINEMAPS_MACRO_MAPS (const line_maps *set)\n {"}, {"sha": "9edd2a6afdbcc286dd9536af2c7bede2c0eeebe1", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -912,7 +912,7 @@ search_line_fast (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n \n #else\n \n-/* We only have one accellerated alternative.  Use a direct call so that\n+/* We only have one accelerated alternative.  Use a direct call so that\n    we encourage inlining.  */\n \n #define search_line_fast  search_line_acc_char"}, {"sha": "cad4b872cda6e38d4b20bcdeba2db3cc945eaced", "filename": "libcpp/pch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -630,7 +630,7 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \t     attempting to use it without -g.  Restoring the PCH file\n \t     is supposed to bring in this definition *and* enable the\n \t     generation of call frame information, so that precompiled\n-\t     definitions that take this macro into accout, to decide\n+\t     definitions that take this macro into account, to decide\n \t     what asm to emit, won't issue .cfi directives when the\n \t     compiler doesn't.  */\n \t  if (!(h->flags & NODE_USED)"}, {"sha": "984c92d37c8ce916ed41017a995b35a685df10b0", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,8 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* decCommon.c (decFloatFromPackedChecked): Fix typo in comment.\n+\t* decNumber.c (decNumberPower, decMultiplyOp): Likewise.\n+\n 2017-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/79003"}, {"sha": "86037e0fdbc940ab054c0c6015b5aa8aadf99195", "filename": "libdecnumber/decCommon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libdecnumber%2FdecCommon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libdecnumber%2FdecCommon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecCommon.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -713,7 +713,7 @@ decFloat * decFloatFromPacked(decFloat *df, Int exp, const uByte *packed) {\n /*  returns df, which will be canonical or NULL if any of the\t      */\n /*    requirements are not met (if this case df is unchanged); that   */\n /*    is, the input data must be as returned by decFloatToPacked,     */\n-/*    except that all six sign codes are acccepted.\t\t      */\n+/*    except that all six sign codes are accepted.\t\t      */\n /*\t\t\t\t\t\t\t\t      */\n /* No status will be set.\t\t\t\t\t      */\n /* ------------------------------------------------------------------ */"}, {"sha": "566abb0b0103c3e9a6387fe4bf45ddf2d7659f06", "filename": "libdecnumber/decNumber.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libdecnumber%2FdecNumber.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libdecnumber%2FdecNumber.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecNumber.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -2171,7 +2171,7 @@ decNumber * decNumberPower(decNumber *res, const decNumber *lhs,\n       /* if a negative power the constant 1 is needed, and if not subset */\n       /* invert the lhs now rather than inverting the result later */\n       if (decNumberIsNegative(rhs)) {\t/* was a **-n [hence digits>0] */\n-\tdecNumber *inv=invbuff; \t/* asssume use fixed buffer */\n+\tdecNumber *inv=invbuff; \t/* assume use fixed buffer */\n \tdecNumberCopy(&dnOne, dac);\t/* dnOne=1;  [needed now or later] */\n \t#if DECSUBSET\n \tif (set->extended) {\t\t/* need to calculate 1/lhs */\n@@ -5197,7 +5197,7 @@ static decNumber * decMultiplyOp(decNumber *res, const decNumber *lhs,\n /*    exp(-x) where x can be the tiniest number (Ntiny).\t      */\n /*\t\t\t\t\t\t\t\t      */\n /* 2. Normalizing x to be <=0.1 (instead of <=1) reduces loop\t      */\n-/*    iterations by appoximately a third with additional (although    */\n+/*    iterations by approximately a third with additional (although    */\n /*    diminishing) returns as the range is reduced to even smaller    */\n /*    fractions.  However, h (the power of 10 used to correct the     */\n /*    result at the end, see below) must be kept <=8 as otherwise     */"}, {"sha": "87fea5bc8c8de5bfe636fea95b7323ebf5bbe1ff", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,7 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/c6x/pr-support.c (__gnu_unwind_execute): Fix typo in comment.\n+\n 2017-03-27  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/ieee-754/divdf3.S (__divdf3): Use __ARCEM__."}, {"sha": "f1ab7ad2f7d68f336d6549e215e6452f9f5f6563", "filename": "libgcc/config/c6x/pr-support.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libgcc%2Fconfig%2Fc6x%2Fpr-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libgcc%2Fconfig%2Fc6x%2Fpr-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fpr-support.c?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -449,7 +449,7 @@ __gnu_unwind_execute (_Unwind_Context * context, __gnu_unwind_state * uws)\n \n       if ((op & 0xf0) == 0xe0)\n \t{\n-\t  /* B3 = reg.  RETURN case alreadh handled above.  */\n+\t  /* B3 = reg.  RETURN case already handled above.  */\n \t  int regno = unwind_frame_regs[op & 0xf];\n \n \t  _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &reg);"}, {"sha": "07ab1fc2629b9f0a5a349c4d5846b329722d86ed", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -1,3 +1,7 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libitm_i.h (sutrct gtm_thread): Fix typo in comment.\n+\n 2017-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/79046"}, {"sha": "b3633bbadcf14197774c3e68e00cce51d15c20d2", "filename": "libitm/libitm_i.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5764ee3c8491e3ecff855a319f781a66fca2484e/libitm%2Flibitm_i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5764ee3c8491e3ecff855a319f781a66fca2484e/libitm%2Flibitm_i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm_i.h?ref=5764ee3c8491e3ecff855a319f781a66fca2484e", "patch": "@@ -258,7 +258,7 @@ struct gtm_thread\n   atomic<gtm_word> shared_state;\n \n   // The lock that provides access to serial mode.  Non-serialized\n-  // transactions acquire read locks; a serialized transaction aquires\n+  // transactions acquire read locks; a serialized transaction acquires\n   // a write lock.\n   // Accessed from assembly language, thus the \"asm\" specifier on\n   // the name, avoiding complex name mangling."}]}