{"sha": "e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjMWI3ZTMyMjgzYjM4ODY4NDdmOWUxNGIzM2JkYTVlNWQ1ZDQ0OA==", "commit": {"author": {"name": "Sebastian Perta", "email": "sebastian.perta@renesas.com", "date": "2018-02-13T11:55:39Z"}, "committer": {"name": "Sebastian Perta", "email": "sebastianperta@gcc.gnu.org", "date": "2018-02-13T11:55:39Z"}, "message": "rl78.c (add_vector_labels): New function.\n\n2018-02-13  Sebastian Perta  <sebastian.perta@renesas.com>\n\n\t* config/rl78/rl78.c (add_vector_labels): New function.\n\t* config/rl78/rl78.c (rl78_handle_vector_attribute): New function.\n\t* config/rl78/rl78.c (rl78_start_function): Call add_vector_labels.\n\t* config/rl78/rl78.c (rl78_handle_func_attribute): Removed the assert \n\twhich checks that no arguments are passed.\n\t* config/rl78/rl78.c (rl78_attribute_table): Add \"vector\" attribute.\n\t* doc/extend.texi: Documentation for the new attribute.\n\n2018-02-13  Sebastian Perta  <sebastian.perta@renesas.com>\n\n\t* gcc.target/rl78/test_auto_vector.c: New test.\n\nFrom-SVN: r257622", "tree": {"sha": "b84b7ca84fa98f3b659afa9a2064e92e74c9787d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84b7ca84fa98f3b659afa9a2064e92e74c9787d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/comments", "author": null, "committer": null, "parents": [{"sha": "9bc5ecf3bcb25abbf868d52e7db076248e0ef174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc5ecf3bcb25abbf868d52e7db076248e0ef174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc5ecf3bcb25abbf868d52e7db076248e0ef174"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "4a79c7b648a327e43c4455f9a4797ddc0eaca99b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "patch": "@@ -1,3 +1,13 @@\n+2018-02-13  Sebastian Perta  <sebastian.perta@renesas.com>\n+\n+\t* config/rl78/rl78.c (add_vector_labels): New function.\n+\t* config/rl78/rl78.c (rl78_handle_vector_attribute): New function.\n+\t* config/rl78/rl78.c (rl78_start_function): Call add_vector_labels.\n+\t* config/rl78/rl78.c (rl78_handle_func_attribute): Removed the assert \n+\twhich checks that no arguments are passed.\n+\t* config/rl78/rl78.c (rl78_attribute_table): Add \"vector\" attribute.\n+\t* doc/extend.texi: Documentation for the new attribute.\n+\n 2018-02-13  Andreas Schwab  <schwab@suse.de>\n \n \t* config/riscv/linux.h (CPP_SPEC): Define."}, {"sha": "7b2be23577ba8d58328f937d8500468269b6f32c", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 84, "deletions": 2, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "patch": "@@ -809,7 +809,6 @@ rl78_handle_func_attribute (tree * node,\n \t\t\t    bool * no_add_attrs)\n {\n   gcc_assert (DECL_P (* node));\n-  gcc_assert (args == NULL_TREE);\n \n   if (TREE_CODE (* node) != FUNCTION_DECL)\n     {\n@@ -868,6 +867,28 @@ rl78_handle_saddr_attribute (tree * node,\n   return NULL_TREE;\n }\n \n+/* Check \"vector\" attribute.  */\n+\n+static tree\n+rl78_handle_vector_attribute (tree * node,\n+\t\t\t    tree   name,\n+\t\t\t    tree   args,\n+\t\t\t    int    flags ATTRIBUTE_UNUSED,\n+\t\t\t    bool * no_add_attrs)\n+{\n+  gcc_assert (DECL_P (* node));\n+  gcc_assert (args != NULL_TREE);\n+\n+  if (TREE_CODE (* node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      * no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE\t\trl78_attribute_table\n \n@@ -876,14 +897,16 @@ const struct attribute_spec rl78_attribute_table[] =\n {\n   /* Name, min_len, max_len, decl_req, type_req, fn_type_req,\n      affects_type_identity, handler, exclude.  */\n-  { \"interrupt\",      0, 0, true, false, false, false,\n+  { \"interrupt\",      0, -1, true, false, false, false,\n     rl78_handle_func_attribute, NULL },\n   { \"brk_interrupt\",  0, 0, true, false, false, false,\n     rl78_handle_func_attribute, NULL },\n   { \"naked\",          0, 0, true, false, false, false,\n     rl78_handle_naked_attribute, NULL },\n   { \"saddr\",          0, 0, true, false, false, false,\n     rl78_handle_saddr_attribute, NULL },\n+  { \"vector\",         1, -1, true, false, false, \n+\trl78_handle_vector_attribute, false },\n   { NULL,             0, 0, false, false, false, false, NULL, NULL }\n };\n \n@@ -1583,13 +1606,72 @@ rl78_expand_eh_epilogue (rtx x ATTRIBUTE_UNUSED)\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE\trl78_start_function\n \n+static void\n+add_vector_labels (FILE *file, const char *aname)\n+{\n+  tree vec_attr;\n+  tree val_attr;\n+  const char *vname = \"vect\";\n+  const char *s;\n+  int vnum;\n+\n+  /* This node is for the vector/interrupt tag itself */\n+  vec_attr = lookup_attribute (aname, DECL_ATTRIBUTES (current_function_decl));\n+  if (!vec_attr)\n+    return;\n+\n+  /* Now point it at the first argument */\n+  vec_attr = TREE_VALUE (vec_attr);\n+\n+  /* Iterate through the arguments.  */\n+  while (vec_attr)\n+    {\n+      val_attr = TREE_VALUE (vec_attr);\n+      switch (TREE_CODE (val_attr))\n+\t{\n+\tcase STRING_CST:\n+\t  s = TREE_STRING_POINTER (val_attr);\n+\t  goto string_id_common;\n+\n+\tcase IDENTIFIER_NODE:\n+\t  s = IDENTIFIER_POINTER (val_attr);\n+\n+\tstring_id_common:\n+\t  if (strcmp (s, \"$default\") == 0)\n+\t    {\n+\t      fprintf (file, \"\\t.global\\t$tableentry$default$%s\\n\", vname);\n+\t      fprintf (file, \"$tableentry$default$%s:\\n\", vname);\n+\t    }\n+\t  else\n+\t    vname = s;\n+\t  break;\n+\n+\tcase INTEGER_CST:\n+\t  vnum = TREE_INT_CST_LOW (val_attr);\n+\n+\t  fprintf (file, \"\\t.global\\t$tableentry$%d$%s\\n\", vnum, vname);\n+\t  fprintf (file, \"$tableentry$%d$%s:\\n\", vnum, vname);\n+\t  break;\n+\n+\tdefault:\n+\t  ;\n+\t}\n+\n+      vec_attr = TREE_CHAIN (vec_attr);\n+    }\n+\n+}\n+\n /* We don't use this to actually emit the function prologue.  We use\n    this to insert a comment in the asm file describing the\n    function.  */\n static void\n rl78_start_function (FILE *file)\n {\n   int i;\n+  \n+  add_vector_labels (file, \"interrupt\");\n+  add_vector_labels (file, \"vector\");\n \n   if (cfun->machine->framesize == 0)\n     return;"}, {"sha": "4f79a92fc1d261e46b017dd3fde45dc8f09acb85", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "patch": "@@ -5182,7 +5182,7 @@ that the specified function is an interrupt handler.  The compiler generates\n function entry and exit sequences suitable for use in an interrupt handler\n when this attribute is present.\n \n-On RX targets, you may specify one or more vector numbers as arguments\n+On RX and RL78 targets, you may specify one or more vector numbers as arguments\n to the attribute, as well as naming an alternate table name.\n Parameters are handled sequentially, so one handler can be assigned to\n multiple entries in multiple tables.  One may also pass the magic"}, {"sha": "613a3277e10d6b0adb5570bd8a99a71f12866022", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "patch": "@@ -1,3 +1,7 @@\n+2018-02-13  Sebastian Perta  <sebastian.perta@renesas.com>\n+\n+\t* gcc.target/rl78/test_auto_vector.c: New test.\n+\n 2018-02-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR c/84305"}, {"sha": "705536303e2ab71badf5693d85bb0b1b4f5c79de", "filename": "gcc/testsuite/gcc.target/rl78/test_auto_vector.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_auto_vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c1b7e32283b3886847f9e14b33bda5e5d5d448/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_auto_vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_auto_vector.c?ref=e4c1b7e32283b3886847f9e14b33bda5e5d5d448", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\r\n+\r\n+void __attribute__ ((interrupt (5))) interrupt_5_handler ();\r\n+\r\n+void interrupt_5_handler ()\r\n+{\r\n+}\r\n+\r\n+void __attribute__ ((vector (4))) interrupt_4_handler ();\r\n+\r\n+void interrupt_4_handler ()\r\n+{\r\n+}\r\n+\r\n+void __attribute__ ((interrupt)) interrupt_handler ();\r\n+\r\n+void interrupt_handler ()\r\n+{\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler \"tableentry\" } } */\r"}]}