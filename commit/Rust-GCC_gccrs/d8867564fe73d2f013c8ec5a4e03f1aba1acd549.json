{"sha": "d8867564fe73d2f013c8ec5a4e03f1aba1acd549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4Njc1NjRmZTczZDJmMDEzYzhlYzVhNGUwM2YxYWJhMWFjZDU0OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-01-13T12:24:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-01-13T12:24:02Z"}, "message": "re PR libstdc++/14991 (stream::attach(int fd) porting entry out-of-date)\n\n2007-01-13  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/14991\n\t* docs/html/17_intro/porting-howto.html ([3]): Mention stdio_filebuf.\n\t* docs/html/17_intro/porting-howto.xml: Remove.\n\n\t* docs/html/17_intro/porting-howto.html: Remove spurious end tags\n\tpointed out by validator.w3.org.\n\nFrom-SVN: r120749", "tree": {"sha": "eae7ce21a6b3b367008ba8891ccc2fa03a6876eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae7ce21a6b3b367008ba8891ccc2fa03a6876eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8867564fe73d2f013c8ec5a4e03f1aba1acd549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8867564fe73d2f013c8ec5a4e03f1aba1acd549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8867564fe73d2f013c8ec5a4e03f1aba1acd549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8867564fe73d2f013c8ec5a4e03f1aba1acd549/comments", "author": null, "committer": null, "parents": [{"sha": "8bcd6380d1a8cdd5de8095599ea452885b6d3959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcd6380d1a8cdd5de8095599ea452885b6d3959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcd6380d1a8cdd5de8095599ea452885b6d3959"}], "stats": {"total": 840, "additions": 22, "deletions": 818}, "files": [{"sha": "ad457a60adf0b7a4ea162a93afe01156e94d99c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8867564fe73d2f013c8ec5a4e03f1aba1acd549/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8867564fe73d2f013c8ec5a4e03f1aba1acd549/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8867564fe73d2f013c8ec5a4e03f1aba1acd549", "patch": "@@ -1,3 +1,12 @@\n+2007-01-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/14991\n+\t* docs/html/17_intro/porting-howto.html ([3]): Mention stdio_filebuf.\n+\t* docs/html/17_intro/porting-howto.xml: Remove.\n+\n+\t* docs/html/17_intro/porting-howto.html: Remove spurious end tags\n+\tpointed out by validator.w3.org.\n+\n 2007-01-12  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/30416 (continued)"}, {"sha": "d6bedb271ed6e97f195b89bb437687572919cd33", "filename": "libstdc++-v3/docs/html/17_intro/porting-howto.html", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8867564fe73d2f013c8ec5a4e03f1aba1acd549/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8867564fe73d2f013c8ec5a4e03f1aba1acd549/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html?ref=d8867564fe73d2f013c8ec5a4e03f1aba1acd549", "patch": "@@ -113,7 +113,7 @@\n \twith this</a>\n </dt>\n </dl></dd>\n-<dt>2. <a href=\"#sec-nocreate\">there is no ios::nocreate/ios::noreplace\n+<dt>2. <a href=\"#sec-nocreate\">There is no ios::nocreate/ios::noreplace\n       in ISO 14882</a>\n </dt>\n <dt>3. <a href=\"#sec-stream::attach\">stream::attach(int\n@@ -182,7 +182,6 @@\n \t    <b>std::cout</b>) =&gt; can always be used\n \t  </p></li>\n </ul></div>\n-    </p>\n <p>\n       Because there are many compilers which still use an implementation\n       that does not have the standard C++-library in namespace\n@@ -235,7 +234,6 @@\n \tlibstdc++ in <b>std::</b> or not).  (ideas from\n \t<tt>&lt;<a href=\"mailto:llewelly@dbritsch.dsl.xmission.com\">llewelly@dbritsch.dsl.xmission.com</a>&gt;</tt>, Karl Nelson\n \t<tt>&lt;<a href=\"mailto:kenelson@ece.ucdavis.edu\">kenelson@ece.ucdavis.edu</a>&gt;</tt>)\n-      </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h3 class=\"title\">\n@@ -248,7 +246,6 @@\n \t  namespace std { }\n \t  using namespace std;\n \t</pre>\n-      </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h3 class=\"title\">\n@@ -270,7 +267,7 @@\n \t      </pre>\n \t      (thanks to Juergen Heinzl who posted this solution on\n \t      gnu.gcc.help)\n-\t    </p></li>\n+\t    </li>\n <li><p>\n \t      Define a macro NS_STD, which is defined to\n \t      either &quot;&quot; or &quot;std&quot;\n@@ -280,8 +277,6 @@\n \t      systems that do not put string in std::.  (This is untested)\n \t    </p></li>\n </ul></div>\n-\t  \n-      </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h3 class=\"title\">\n@@ -356,7 +351,7 @@\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: both\">\n-<a name=\"sec-nocreate\"></a>there is no ios::nocreate/ios::noreplace\n+<a name=\"sec-nocreate\"></a>There is no ios::nocreate/ios::noreplace\n       in ISO 14882</h2></div></div>\n <p>\n       I have seen <b>ios::nocreate</b> being used for\n@@ -383,22 +378,8 @@\n       It was considered and rejected.  Not all environments use file\n       descriptors.  Of those that do, not all of them use integers to represent\n       them.\n-    </p>\n-<p>\n-      When using libstdc++-v3, you can use\n-      <div class=\"funcsynopsis\">\n-<pre class=\"funcsynopsisinfo\">\n-\t  #include &lt;fstream&gt;\n-\t</pre>\n-<p><code><code class=\"funcdef\">\n-\t    <b class=\"fsfunc\">basic_filebuf&lt;...&gt;::basic_filebuf&lt;...&gt;\n-\t    </b>\n-\t  </code>(<var class=\"pdparam\">file</var>, <var class=\"pdparam\">mode</var>, <var class=\"pdparam\">size</var>);<br>__c_file_type* <var class=\"pdparam\">file</var>;<br>ios_base::open_mode <var class=\"pdparam\">mode</var>;<br>int <var class=\"pdparam\">size</var>;</code></p>\n-</div>\n-      but the the signature of this constructor has changed often, and\n-      it might change again. For the current state of this, check\n-      <a href=\"../ext/howto.html\" target=\"_top\">the howto for extensions</a>.\n-    </p>\n+    </p>  \n+\n <p>\n       For a portable solution (among systems which use\n       filedescriptors), you need to implement a subclass of\n@@ -409,6 +390,14 @@\n       <a href=\"http://www.josuttis.com/cppcode/fdstream.html\" target=\"_top\">fdstream example</a> \n       by Nicolai Josuttis.\n     </p>\n+\n+<p>\n+      An extension is also available:\n+      <code>&lt;ext/stdio_filebuf.h&gt;</code> contains a derived class called\n+      <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></a>.\n+      This class can be constructed from a C <code>FILE*</code> or a file\n+      descriptor, and provides the <code>fd()</code> function.\n+    </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: both\">\n@@ -491,7 +480,6 @@\n \t    more =&gt; use <b>if (iterator != iterator_type())</b>\n \t    ?</p></li>\n </ul></div>\n-    </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: both\">\n@@ -518,7 +506,6 @@\n \tstd:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int)\n \t_ISspace )  ;\n       </pre>\n-    </p>\n <p>\n       One solution I can think of is to test for -v3 using\n       autoconf-macros, and define macros for each of the C-functions\n@@ -537,7 +524,6 @@\n \n \t[ now include &lt;ctype.h&gt; ]\n       </pre>\n-    </p>\n <p>\n       Another problem arises if you put a <b>using namespace\n \tstd;</b> declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This will result in\n@@ -598,7 +584,6 @@\n       </pre>\n       If you are using other (non-GNU) compilers it might be a good idea\n       to check for <b>string::at</b> separately.\n-    </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: both\">\n@@ -611,7 +596,6 @@\n \t#define CPP_EOF EOF\n \t#endif\n       </pre>\n-    </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: both\">\n@@ -637,7 +621,6 @@\n       implemented in gcc 2.95.x's libstdc++, so you should use\n       <b>erase</b> (which is probably faster than\n       <b>operator=(charT*)</b>).\n-    </p>\n </div>\n <div class=\"section\">\n <div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: both\">\n@@ -678,7 +661,6 @@\n \t    (clear(); str(input);)\n \t  </p></li>\n </ul></div>\n-    </p>\n <p>\n       You can then use output-stringstreams like this:\n       <pre class=\"programlisting\">\n@@ -701,7 +683,6 @@\n \toss.freeze(false);\n \t#endif\n       </pre>\n-    </p>\n <p>\n       Input-stringstreams can be used similarly:\n       <pre class=\"programlisting\">\n@@ -743,7 +724,6 @@\n \t}\n       </pre>\n       Another example of using stringstreams is in <a href=\"../21_strings/howto.html\" target=\"_top\">this howto</a>.\n-    </p>\n <p>\n       I have read the Josuttis book on Standard C++, so some information\n       comes from there. Additionally, there is information in"}, {"sha": "cea9111318d1fc4faec76fd087c0c070915ffb6b", "filename": "libstdc++-v3/docs/html/17_intro/porting-howto.xml", "status": "removed", "additions": 0, "deletions": 785, "changes": 785, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcd6380d1a8cdd5de8095599ea452885b6d3959/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcd6380d1a8cdd5de8095599ea452885b6d3959/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml?ref=8bcd6380d1a8cdd5de8095599ea452885b6d3959", "patch": "@@ -1,785 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-\n-<!DOCTYPE article PUBLIC \"-//OASIS//DTD DocBook XML V4.1//EN\"\n-                         \"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd\">\n-\n-<?xml-stylesheet type=\"text/xsl\" href=\"docbook-xslt/docbook/html/docbook.xsl\"?>\n-\n-<!--\n-  This is written using docbook 4.1 xml. HTML is generated using\n-  the xslt-stylesheets from http://www.nwalsh.com.\n- \n-  xsltproc is an xslt-processor included in libxslt:\n-  (http://xmlsoft.org/XSLT/ or here:\n-  ftp://ftp.gnome.org/pub/GNOME/unstable/sources/libxslt/)\n-  (it requires libxml2: http://xmlsoft.org\n-\tor here: ftp://ftp.gnome.org/pub/GNOME/stable/sources/libxml/)\n-\n-  You can find the latest version of this document here:\n-  http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/porting-howto(.html|.xml)\n--->\n-\t\n-<!-- TODO:\n-o remove //@label: use automatic numbering\n-o make this work: <link linkend=\"sec-gtkmm-hack\" endterm=\"sec-gtkmm-hack.title\"/>.\n-o clean up the section-numbering\n--->\n-\n-<article class = \"whitepaper\" id = \"libstdc++-porting-howto\" lang = \"en\">\n-  <articleinfo>\n-    <title>Libstdc++-porting-howto</title>\n-    <author>\n-      <firstname>Felix</firstname>\n-      <surname>Natter</surname>\n-    </author>\n-    <address>\n-      <email>fnatter@gmx.net</email>\n-    </address>\n-    <revhistory>\n-      <revision>\n-\t<revnumber>0.5</revnumber>\n-\t<date>Thu Jun  1 13:06:50 2000</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>First docbook-version.</revremark>\n-      </revision>\n-      <revision>\n-\t<revnumber>0.8</revnumber>\n-\t<date>Sun Jul 30 20:28:40 2000</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>First released version using docbook-xml\n-\t  + second upload to libstdc++-page.\n-\t</revremark>\n-      </revision>\n-      <revision>\n-\t<revnumber>0.9</revnumber>\n-\t<date>Wed Sep  6 02:59:32 2000</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>5 new sections.</revremark>\n-      </revision>\n-      <revision>\n-\t<revnumber>0.9.1</revnumber>\n-\t<date>Sat Sep 23 14:20:15 2000</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>added information about why file-descriptors are not in the\n-\t  standard</revremark>\n-      </revision>\n-      <revision>\n-\t<revnumber>0.9.2</revnumber>\n-\t<date>Tue Jun  5 20:07:49 2001</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>\n-\t  a fix, added hint on increased portability of C-shadow-headers,\n-\t  added autoconf-test HAVE_CONTAINER_AT\n-\t</revremark>\n-      </revision>\n-      <revision>\n-\t<revnumber>0.9.3</revnumber>\n-\t<date>Fri Jun 29 16:15:56 2001</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>\n-\t  changed signature of nonstandard filebuf-constructor and\n-\t  update the section on filebuf::attach to point to ../ext/howto.html,\n-\t  added link to ../21/strings/howto.html\n-\t  in sec-stringstream, changed &lt;link&gt;-tags to have content\n-\t  (so that these links work),\n-\t  replace \"user-space\" by \"global namespace\"\n-\t  add note about gcc 3.0 and shadow-headers\t\t\t\n-\t  add section about ostream::form and istream::scan\n-\t  sec-vector-at: remove hint to modify headers\n-\t  fix spelling error in sec-stringstream\n-\t</revremark>\n-      </revision>\n-      <revision>\n-\t<revnumber>0.9.4</revnumber>\n-\t<date>Mon Nov  5 17:01:04 2001</date>\n-\t<authorinitials>fnatter</authorinitials>\n-\t<revremark>\n-\t  rewrite section 1.1.3 because of gnu.gcc.help-post by\n-\t  Juergen Heinzl\n-\t</revremark>\n-      </revision>\n-    </revhistory>\n-    <legalnotice><title>Legal Notice</title>\n-      <para>\n-\tThis document can be distributed under the FDL\n-\t(<ulink url = \"http://www.gnu.org\">www.gnu.org</ulink>)\n-      </para>\n-    </legalnotice>\n-    \n-    <pubdate>Tue Jun  5 20:07:49 2001</pubdate>\n-    <abstract>\n-      <para>\n-\tSome notes on porting applications from libstdc++-2.90 (or earlier\n-\tversions) to libstdc++-v3. Not speaking in terms of the GNU libstdc++\n-\timplementations, this means porting from earlier versions of the\n-\tC++-Standard to ISO 14882.\n-      </para>\n-    </abstract>\n-  </articleinfo>\n-\n-  <para>\n-    In the following, when I say portable, I will refer to \"portable among ISO\n-    14882-implementations\". On the other hand, if I say \"backportable\" or\n-    \"conservative\", I am talking about \"compiles with older\n-    libstdc++-implementations\".\n-  </para>\n-\n-  <section id=\"sec-nsstd\" label=\"1\"><title>Namespace std::</title>\n-    <para>\n-      The latest C++-standard (ISO-14882) requires that the standard\n-      C++-library is defined in namespace std::. Thus, in order to use\n-      classes from the standard C++-library, you can do one of three\n-      things:\n-      <itemizedlist>\n-\n-\t<listitem><para>wrap your code in <command>namespace std {\n-\t      ... }</command> =&gt; This is not an option because only symbols\n-\t    from the standard c++-library are defined in namespace std::.\n-\t  </para></listitem>\n-\n-\t<listitem><para>put a kind of\n-\t    <emphasis>using-declaration</emphasis> in your source (either\n-\t    <command>using namespace std;</command> or i.e. <command>using\n-\t      std::string;</command>) =&gt; works well for source-files, but\n-\t    cannot be used in header-files.\n-\t  </para></listitem>\n-\n-\t<listitem><para>use a <emphasis>fully qualified name</emphasis> for\n-\t    each libstdc++-symbol (i.e. <command>std::string</command>,\n-\t    <command>std::cout</command>) =&gt; can always be used\n-\t  </para></listitem>\n-      </itemizedlist>\n-    </para>\n-\n-    <para>\n-      Because there are many compilers which still use an implementation\n-      that does not have the standard C++-library in namespace\n-      <command>std::</command>, some care is required to support these as\n-      well.\n-    </para>\n-\n-    <para>\n-      Namespace back-portability-issues are generally not a problem with\n-      g++, because versions of g++ that do not have libstdc++ in\n-      <command>std::</command> use <command>-fno-honor-std</command>\n-      (ignore <command>std::</command>, <command>:: = std::</command>) by\n-      default. That is, the responsibility for enabling or disabling\n-      <command>std::</command> is on the user; the maintainer does not have\n-      to care about it. This probably applies to some other compilers as\n-      well.\n-    </para>\n-    <para>\n-      The following sections list some possible solutions to support compilers\n-      that cannot ignore std::.\n-    </para>\n-\n-    <section id = \"sec-gtkmm-hack\" label = \"1.1\">\n-      <title id=\"sec-gtkmm-hack.title\">Using <emphasis>namespace\n-\t  composition</emphasis> if the project uses a separate\n-\tnamespace</title>\n-      <para>\n-\t<ulink url = \"http://gtkmm.sourceforge.net\">Gtk--</ulink> defines\n-\tmost of its classes in namespace Gtk::. Thus, it was possible to\n-\tadapt Gtk-- to namespace std:: by using a C++-feature called\n-\t<emphasis>namespace composition</emphasis>. This is what happens if\n-\tyou put a <emphasis>using</emphasis>-declaration into a\n-\tnamespace-definition: the imported symbol(s) gets imported into the\n-\tcurrently active namespace(s). For example:\n-\t<programlisting>\n-\t  namespace Gtk {\n-\t  using std::string;\n-\t  class Window { ... }\n-\t  }\n-\t</programlisting>\n-\tIn this example, <command>std::string</command> gets imported into\n-\tnamespace Gtk::.  The result is that you don't have to use\n-\t<command>std::string</command> in this header, but still\n-\t<command>std::string</command> does not get imported into\n-\tthe global namespace (::) unless the user does\n-\t<command>using namespace Gtk;</command> (which is not recommended\n-\tpractice for Gtk--, so it is not a problem).  Additionally, the\n-\t<command>using</command>-declarations are wrapped in macros that\n-\tare set based on autoconf-tests to either \"\" or i.e. <command>using\n-\t  std::string;</command> (depending on whether the system has\n-\tlibstdc++ in <command>std::</command> or not).  (ideas from\n-\t<email>llewelly@dbritsch.dsl.xmission.com</email>, Karl Nelson\n-\t<email>kenelson@ece.ucdavis.edu</email>)\n-      </para>\n-    </section>\n-\n-    <section id = \"sec-emptyns\" label = \"1.2\">\n-      <title id=\"sec-emptyns.title\">Defining an empty namespace std</title>\n-      <para>\n-\tBy defining an (empty) namespace <command>std::</command> before\n-\tusing it, you avoid getting errors on systems where no part of the\n-\tlibrary is in namespace std:\n-\t<programlisting>\n-\t  namespace std { }\n-\t  using namespace std;\n-\t</programlisting>\n-      </para>\n-    </section>\n-\n-    <section id = \"sec-avoidfqn\" label = \"1.3\">\n-      <title id=\"sec-avoidfqn.title\">Avoid to use fully qualified names\n-\t(i.e. std::string)</title>\n-      <para>\n-\tIf some compilers complain about <command>using\n-\t  std::string;</command>, and if the \"hack\" for gtk-- mentioned above\n-\tdoes not work, then I see two solutions:\n-\t\n-\t<itemizedlist>\n-\t  <listitem><para>\n-\t      Define <command>std::</command> as a macro if the compiler\n-\t      doesn't know about <command>std::</command>.\n-\t      <programlisting>\n-\t\t#ifdef OLD_COMPILER\n-\t\t#define std\n-\t\t#endif\n-\t      </programlisting>\n-\t      (thanks to Juergen Heinzl who posted this solution on\n-\t      gnu.gcc.help)\n-\t    </para></listitem>\n-\t  \n-\t  <listitem><para>\n-\t      Define a macro <symbol>NS_STD</symbol>, which is defined to\n-\t      either \"\" or \"std\"\n-\t      based on an autoconf-test. Then you should be able to use\n-\t      <command>NS_STD::string</command>, which will evaluate to\n-\t      <command>::string</command> (\"string in the global namespace\") on\n-\t      systems that do not put string in std::.  (This is untested)\n-\t    </para></listitem>\n-\t</itemizedlist>\n-\t  \n-      </para>\n-    </section>\n-    \n-    <section id = \"sec-osprojects\" label = \"1.4\">\n-      <title id=\"sec-osprojects.title\">How some open-source-projects deal\n-\twith this</title>\n-      <para>\n-\tThis information was gathered around May 2000. It may not be correct\n-\tby the time you read this.\n-      </para>\n-      <table><title>Namespace std:: in Open-Source programs</title>\n-\t<tgroup cols = \"2\">\n-\t  <tbody>\n-\t    <row>\n-\t      <entry><ulink url = \"http://www.clanlib.org\">clanlib</ulink>\n-\t      </entry>\n-\t      <entry>usual</entry>\n-\t    </row>\n-\t    <row>\n-\t      <entry><ulink url = \"http://pingus.seul.org\">pingus</ulink>\n-\t      </entry>\n-\t      <entry>usual</entry>\n-\t    </row>\n-\t    <row>\n-\t      <entry><ulink url = \"http://www.mozilla.org\">mozilla</ulink>\n-\t      </entry>\n-\t      <entry>usual</entry>\n-\t    </row>\n-\t    <row>\n-\t      <entry><ulink url = \"http://libsigc.sourceforge.net\">\n-\t\t  libsigc++</ulink></entry>\n-\t      <entry>conservative-impl</entry>\n-\t    </row>\n-\t  </tbody>\n-\t</tgroup>\n-      </table>\n-\n-      <table><title>Notations for categories</title>\n-\t<tgroup cols = \"2\">\n-\t  <tbody>\n-\t    <row>\n-\t      <entry>usual</entry>\n-\t      <entry>mostly fully qualified names and some\n-\t\tusing-declarations (but not in headers)</entry>\n-\t    </row>\n-\t    <row>\n-\t      <entry>none</entry> <entry>no namespace std at all</entry>\n-\t    </row>\n-\t    <row>\n-\t      <entry>conservative-impl</entry>\n-\t      <entry>wrap all\n-\t\tnamespace-handling in macros to support compilers without\n-\t\tnamespace-support (no libstdc++ used in headers)</entry>\n-\t    </row>\n-\t  </tbody>\n-\t</tgroup>\n-      </table>\n-\n-      <para>\n-\tAs you can see, this currently lacks an example of a project\n-\twhich uses libstdc++-symbols in headers in a back-portable way\n-\t(except for Gtk--: see the <link linkend=\"sec-gtkmm-hack\"\n-\t  endterm=\"sec-gtkmm-hack.title\">section on the gtkmm-hack</link>).\n-      </para>\n-    </section>\t\t\n-  </section> <!-- end of namespace-section -->\n-\n-  <section id = \"sec-nocreate\" label = \"2\">\n-    <title id=\"sec-nocreate.title\">there is no ios::nocreate/ios::noreplace\n-      in ISO 14882</title>\n-    <para>\n-      I have seen <command>ios::nocreate</command> being used for\n-      input-streams, most probably because the author thought it would be\n-      more correct to specify nocreate \"explicitly\".  So you can simply\n-      leave it out for input-streams.\n-    </para>\n-    <para>\n-      For output streams, \"nocreate\" is probably the default, unless you\n-      specify <command>std::ios::trunc</command> ? To be safe, you can open\n-      the file for reading, check if it has been opened, and then decide\n-      whether you want to create/replace or not. To my knowledge, even\n-      older implementations support <command>app</command>,\n-      <command>ate</command> and <command>trunc</command> (except for\n-      <command>app</command> ?).\n-    </para>\n-  </section>\n-\n-  <section id = \"sec-stream::attach\" label = \"3\">\n-    <title id=\"sec-stream::attach.title\"><command>stream::attach(int\n-\tfd)</command> is not in the standard any more</title>\n-    <para>\n-      Phil Edwards <email>pedwards@disaster.jaj.com</email> writes:\n-      It was considered and rejected.  Not all environments use file\n-      descriptors.  Of those that do, not all of them use integers to represent\n-      them.\n-    </para>\n-    <para>\n-      When using libstdc++-v3, you can use\n-      <funcsynopsis>\n-\t<funcsynopsisinfo format=\"linespecific\">\n-\t  #include &lt;fstream&gt;\n-\t</funcsynopsisinfo>\n-\t<funcprototype>\n-\t  <funcdef>\n-\t    <function>basic_filebuf&lt;...&gt;::basic_filebuf&lt;...&gt;\n-\t    </function>\n-\t  </funcdef>\n-\t  <paramdef>__c_file_type* <parameter>file</parameter></paramdef>\n-\t  <paramdef>ios_base::open_mode <parameter>mode</parameter></paramdef>\n-\t  <paramdef>int <parameter>size</parameter></paramdef>\n-\t</funcprototype>\n-      </funcsynopsis>\n-      but the signature of this constructor has changed often, and\n-      it might change again. For the current state of this, check\n-      <ulink url=\"../ext/howto.html\">the howto for extensions</ulink>.\n-    </para>\n-    <para>\n-      For a portable solution (among systems which use\n-      filedescriptors), you need to implement a subclass of\n-      <command>std::streambuf</command> (or\n-      <command>std::basic_streambuf&lt;..&gt;</command>) which opens a file\n-      given a descriptor, and then pass an instance of this to the\n-      stream-constructor.  For an example of this, refer to\n-      <ulink url=\"http://www.josuttis.com/cppcode/fdstream.html\">fdstream example</ulink> \n-      by Nicolai Josuttis.\n-    </para>\n-  </section>\n-  \n-  <section id = \"sec-headers\" label = \"4\">\n-    <title id=\"sec-headers.title\">The new headers</title>\n-    <para>\n-      All new headers can be seen in this <ulink url=\"headers_cc.txt\">\n-\tsource-code</ulink>.\n-    </para>\n-    <para>\n-      The old C++-headers (iostream.h etc.) are available, but gcc generates\n-      a warning that you are using deprecated headers.\n-    </para>\n-\n-    <section id = \"sec-cheaders\" label = \"4.1\">\n-      <title id=\"sec-cheaders.title\">New headers replacing C-headers</title>\n-      <para>\n-\tYou should not use the C-headers (except for system-level\n-\theaders) from C++ programs. Instead, you should use a set of\n-\theaders that are named by prepending 'c' and, as usual,\n-\tomitting the extension (.h). For example, instead of using\n-\t<filename class=\"headerfile\">&lt;math.h&gt;</filename>, you\n-\tshould use <filename class =\n-\t  \"headerfile\">&lt;cmath&gt;</filename>. In some cases this has\n-\tthe advantage that the C++-header is more standardized than\n-\tthe C-header (i.e. <filename\n-\t  class=\"headerfile\">&lt;ctime&gt;</filename> (almost)\n-\tcorresponds to either <filename class =\n-\t  \"headerfile\">&lt;time.h&gt;</filename> or <filename class =\n-\t  \"headerfile\">&lt;sys/time.h&gt;</filename>).\n-\n-\tThe standard specifies that if you include the C-style header\n-\t(<filename class = \"headerfile\">&lt;math.h&gt;</filename> in\n-\tthis case), the symbols will be available both in the global\n-\tnamespace and in namespace <command>std::</command> (but\n-\tlibstdc++ does not yet have fully compliant headers) On the\n-\tother hand, if you include only the new header (i.e. <filename\n-\t  class = \"headerfile\">&lt;cmath&gt;</filename>), the symbols\n-\twill only be defined in namespace <command>std::</command>\n-\t(and macros will be converted to inline-functions).\n-      </para>\n-      <para>\n-\tFor more information on this, and for information on how the\n-\tGNU C++ implementation might reuse (\"shadow\") the C\n-\tlibrary-functions, have a look at <ulink\n-\t  url=\"http://www.cantrip.org/cheaders.html\">\n-\t  www.cantrip.org</ulink>.\n-      </para>\n-    </section>\n-    \n-    <section id = \"sec-fstream-header\" label = \"4.2\">\n-      <title id=\"sec-fstream-header.title\">\n-\t<filename class=\"headerfile\">&lt;fstream&gt;</filename> does\n-\tnot define <command>std::cout</command>,\n-\t<command>std::cin</command> etc.</title>\n-      <para>\n-\tIn earlier versions of the standard,\n-\t<filename class=\"headerfile\">&lt;fstream.h&gt;</filename>,\n-\t<filename class=\"headerfile\">&lt;ostream.h&gt;</filename>\n-\tand <filename class=\"headerfile\">&lt;istream.h&gt;</filename>\n-\tused to define\n-\t<command>cout</command>, <command>cin</command> and so on. Because\n-\tof the templatized iostreams in libstdc++-v3, you need to include\n-\t<filename class = \"headerfile\">&lt;iostream&gt;</filename>\n-\texplicitly to define these.\n-      </para>\n-    </section>\n-  </section>\n-\n-  <section id = \"sec-iterators\" label = \"5\">\n-    <title id=\"sec-iterators.title\">Iterators</title>\n-    <para>\n-      The following are not proper uses of iterators, but may be working\n-      fixes for existing uses of iterators.\n-      <itemizedlist>\n-\t<listitem><para>you cannot do\n-\t    <command>ostream::operator&lt;&lt;(iterator)</command> to\n-\t    print the address of the iterator =&gt; use\n-\t    <command>operator&lt;&lt; &amp;*iterator</command> instead ?\n-\t  </para>\n-\t</listitem>\n-\t<listitem><para>you cannot clear an iterator's reference\n-\t    (<command>iterator = 0</command>) =&gt; use\n-\t    <command>iterator = iterator_type();</command> ?\n-\t  </para>\n-\t</listitem>\n-\t<listitem><para><command>if (iterator)</command> won't work any\n-\t    more => use <command>if (iterator != iterator_type())</command>\n-\t    ?</para>\n-\t</listitem>\n-      </itemizedlist>\n-    </para>\n-  </section>\n-\n-  <section id = \"sec-macros\" label = \"6\">\n-    <title id=\"sec-macros.title\">\n-      Libc-macros (i.e. <command>isspace</command> from\n-      <filename class = \"headerfile\">&lt;cctype&gt;</filename>)</title>\n-    <para>\n-      Glibc 2.0.x and 2.1.x define the\n-      <filename class=\"headerfile\">&lt;ctype.h&gt;</filename>\n-      -functionality as macros (isspace, isalpha etc.). Libstdc++-v3\n-      \"shadows\" these macros as described in the <link\n-\tlinkend=\"sec-cheaders\" endterm=\"sec-cheaders.title\">section about\n-\tc-headers</link>.\n-    </para>\n-    <para>\n-      Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n-      for gcc 2.95.x), however, keep these functions as macros, and so it\n-      is not back-portable to use fully qualified names. For example:\n-      <programlisting>\n-\t#include &lt;cctype&gt;\n-\tint main() { std::isspace('X'); }\n-      </programlisting>\n-      will result in something like this (unless using g++-v3):\n-      <programlisting>\n-\tstd:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int)\n-\t_ISspace )  ;\n-      </programlisting>\n-    </para>\n-    <para>\n-      One solution I can think of is to test for -v3 using\n-      autoconf-macros, and define macros for each of the C-functions\n-      (maybe that is possible with one \"wrapper\" macro as well ?).\n-    </para>\n-    <para>\n-      Another solution which would fix g++ is to tell the user to modify a\n-      header-file so that g++-2 (egcs 1.x) and g++-3 (gcc 2.95.x) define a\n-      macro which tells <filename\n-\tclass=\"headerfile\">&lt;ctype.h&gt;</filename> to define functions\n-      instead of macros:\n-      <programlisting>\n-\t// This keeps isalnum, et al from being propagated as macros.\n-\t#if __linux__\n-\t#define __NO_CTYPE 1\n-\t#endif\n-\n-\t[ now include &lt;ctype.h&gt; ]\n-      </programlisting>\n-    </para>\n-    <para>\n-      Another problem arises if you put a <command>using namespace\n-\tstd;</command> declaration at the top, and include <filename class\n-\t= \"headerfile\">&lt;ctype.h&gt;</filename>. This will result in\n-      ambiguities between the definitions in the global namespace\n-      (<filename class = \"headerfile\">&lt;ctype.h&gt;</filename>) and the\n-      definitions in namespace <command>std::</command>\n-      (<command>&lt;cctype&gt;</command>).\n-    </para>\n-    <para>\n-      The solution to this problem was posted to the libstdc++-v3\n-      mailing-list:\n-      Benjamin Kosnik <email>bkoz@redhat.com</email> writes:\n-      <quote>\n-\t--enable-cshadow-headers is currently broken. As a result, shadow\n-\theaders are not being searched....\n-      </quote>\n-      This is now outdated, but gcc 3.0 still does not have fully\n-      compliant \"shadow headers\".\n-    </para>\n-  </section>\n-\n-  <section id=\"sec-stream-state\" label=\"7\">\n-    <title id=\"sec-stream-state.title\">State of streams</title>\n-    <para>\n-      At least some older implementations don't have\n-      <command>std::ios_base</command>, so you should use\n-      <command>std::ios::badbit</command>, <command>std::ios::failbit</command>\n-      and <command>std::ios::eofbit</command> and\n-      <command>std::ios::goodbit</command>.\n-    </para>\n-  </section>\n-\n-  <section id=\"sec-vector-at\" label=\"8\">\n-    <title>vector::at is missing (i.e. gcc 2.95.x)</title>\n-    <para>\n-      One solution is to add an autoconf-test for this:\n-      <programlisting>\n-\tAC_MSG_CHECKING(for container::at)\n-\tAC_TRY_COMPILE(\n-\t[\n-\t#include &lt;vector&gt;\n-\t#include &lt;deque&gt;\n-\t#include &lt;string&gt;\n-\t\n-\tusing namespace std;\n-\t],\n-\t[\n-\tdeque&lt;int&gt; test_deque(3);\n-\ttest_deque.at(2);\n-\tvector&lt;int&gt; test_vector(2);\n-\ttest_vector.at(1);\n-\tstring test_string(\"test_string\");\n-\ttest_string.at(3);\n-\t],\n-\t[AC_MSG_RESULT(yes)\n-\tAC_DEFINE(HAVE_CONTAINER_AT)],\n-\t[AC_MSG_RESULT(no)])\n-      </programlisting>\n-      If you are using other (non-GNU) compilers it might be a good idea\n-      to check for <command>string::at</command> separately.\n-    </para>\n-  </section>\n-\n-  <section id=\"sec-eof\" label=\"9\">\n-    <title>Using std::char_traits&lt;char&gt;::eof()</title>\n-    <para>\n-      <programlisting>\n-\t#ifdef HAVE_CHAR_TRAITS\n-\t#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n-\t#else\n-\t#define CPP_EOF EOF\n-\t#endif\n-      </programlisting>\n-    </para>\n-  </section>\n-\n-  <section id=\"sec-string-clear\" label=\"10\">\n-    <title>Using string::clear()/string::erase()</title>\n-    <para>\n-      There are two functions for deleting the contents of a string:\n-      <command>clear</command> and <command>erase</command> (the latter\n-      returns the string).\n-      <programlisting>\n-\tvoid \n-\tclear() { _M_mutate(0, this->size(), 0); }\n-      </programlisting>\n-      <programlisting>\n-\tbasic_string&amp; \n-\terase(size_type __pos = 0, size_type __n = npos)\n-\t{ \n-\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n),\n-\t_M_data(), _M_data()); \n-\t}\n-      </programlisting>\n-      The implementation of <command>erase</command> seems to be more\n-      complicated (from libstdc++-v3), but <command>clear</command> is not\n-      implemented in gcc 2.95.x's libstdc++, so you should use\n-      <command>erase</command> (which is probably faster than\n-      <command>operator=(charT*)</command>).\n-    </para>\n-  </section>\n-\n-  <section id=\"sec-scan-form\" label=\"11\">\n-    <title>GNU Extensions ostream::form and istream::scan</title>\n-    <para>\n-      These\tare not supported any more - use\n-      <link\tlinkend=\"sec-stringstream\" endterm=\"sec-stringstream.title\">\n-\tstringstreams</link> instead.\t\n-    </para>\n-  </section>\n-\n-  <section id=\"sec-stringstream\" label=\"12\">\n-    <title>Using stringstreams</title>\n-    <para>\n-      Libstdc++-v3 provides the new\n-      <command>i/ostringstream</command>-classes, (<filename\n-\tclass=\"headerfile\">&lt;sstream&gt;</filename>), but for compatibility\n-      with older implementations you still have to use\n-      <command>i/ostrstream</command> (<filename\n-\tclass=\"headerfile\">&lt;strstream&gt;</filename>):\n-      <programlisting>\n-\t#ifdef HAVE_SSTREAM\n-\t#include &lt;sstream&gt;\n-\t#else\n-\t#include &lt;strstream&gt;\n-\t#endif\n-      </programlisting>\n-      <itemizedlist>\n-\t<listitem><para> <command>strstream</command> is considered to be\n-\t    deprecated\n-\t  </para>\n-\t</listitem>\n-\t<listitem><para> <command>strstream</command> is limited to\n-\t    <command>char</command>\n-\t  </para>\n-\t</listitem>\n-\t<listitem><para> with <command>ostringstream</command> you don't\n-\t    have to take care of terminating the string or freeing its\n-\t    memory\n-\t  </para>\n-\t</listitem>\n-\t<listitem><para> <command>istringstream</command> can be re-filled\n-\t    (clear(); str(input);)\n-\t  </para>\n-\t</listitem>\n-      </itemizedlist>\n-    </para>\n-    <para>\n-      You can then use output-stringstreams like this:\n-      <programlisting>\n-\t#ifdef HAVE_SSTREAM\n-\tstd::ostringstream oss;\n-\t#else\n-\tstd::ostrstream oss;\n-\t#endif\n-\toss &lt;&lt; \"Name=\" &lt;&lt; m_name &lt;&lt; \", number=\" &lt;&lt; m_number &lt;&lt; std::endl;\n-\t...\n-\t#ifndef HAVE_SSTREAM\n-\toss &lt;&lt; std::ends; // terminate the char*-string\n-\t#endif\n-\t// str() returns char* for ostrstream and a string for ostringstream\n-\t// this also causes ostrstream to think that the buffer's memory\n-\t// is yours\n-\tm_label.set_text(oss.str());\n-\t#ifndef HAVE_SSTREAM\n-\t// let the ostrstream take care of freeing the memory\n-\toss.freeze(false);\n-\t#endif\n-      </programlisting>\n-    </para>\n-    <para>\n-      Input-stringstreams can be used similarly:\n-      <programlisting>\n-\tstd::string input;\n-\t...\n-\t#ifdef HAVE_SSTREAM\n-\tstd::istringstream iss(input);\n-\t#else\n-\tstd::istrstream iss(input.c_str());\n-\t#endif\n-\tint i;\n-\tiss >> i; \n-      </programlisting>\n-      One (the only?) restriction is that an istrstream cannot be re-filled:\n-      <programlisting>\n-\tstd::istringstream iss(numerator);\n-\tiss >> m_num;\n-\t// this is not possible with istrstream\n-\tiss.clear();\n-\tiss.str(denominator);\n-\tiss >> m_den;\n-      </programlisting>\n-      If you don't care about speed, you can put these conversions in\n-      a template-function:\n-      <programlisting>\n-\ttemplate &lt;class X&gt;\n-\tvoid fromString(const string&amp; input, X&amp; any)\n-\t{\n-\t#ifdef HAVE_SSTREAM\n-\tstd::istringstream iss(input);\n-\t#else\n-\tstd::istrstream iss(input.c_str());\n-\t#endif\n-\tX temp;\n-\tiss >> temp;\n-\tif (iss.fail())\n-\tthrow runtime_error(..)\n-\tany = temp;\n-\t}\n-      </programlisting>\n-      Another example of using stringstreams is in <ulink\n-\turl=\"../21_strings/howto.html\">this howto</ulink>.\n-    </para>\n-    <para>\n-      I have read the Josuttis book on Standard C++, so some information\n-      comes from there. Additionally, there is information in\n-      \"info iostream\", which covers the old implementation that gcc 2.95.x\n-      uses.\n-    </para>\n-  </section>\n-\n-  <section id = \"sec-about\" label=\"13\">\n-    <title id=\"sec-about.title\">About...</title>\n-    <para>\n-      Please send any experience, additions, corrections or questions to\n-      <ulink url = \"mailto:fnatter@gmx.net\">fnatter@gmx.net</ulink> or for\n-      discussion to the libstdc++-v3-mailing-list.\n-    </para>\n-  </section>\n-\n-</article>\n-\n-  <!-- this is now obsolete, since the nwalsh-stylesheet generates an index\n-<para>\n-<itemizedlist>\n-<listitem><para>\n-<link linkend = \"sec-nsstd\" endterm = \"sec-nsstd.title\"/>\n-</para></listitem>\n-<listitem><para>\n-<link linkend = \"sec-nocreate\" endterm = \"sec-nocreate.title\"/>\n-</para></listitem>\n-<listitem><para>\n-<link linkend = \"sec-stream::attach\"\n-  endterm = \"sec-stream::attach.title\"/>\n-</para></listitem>\n-<listitem><para>\n-<link linkend = \"sec-headers\" endterm = \"sec-headers.title\"/>\n-</para></listitem>\n-<listitem><para>\n-<link linkend = \"sec-iterators\" endterm = \"sec-iterators.title\"/>\n-</para></listitem>\n-<listitem><para>\n-<link linkend = \"sec-macros\" endterm = \"sec-macros.title\"/>\n-</para></listitem>\n-<listitem><para>\n-<link linkend = \"sec-about\" endterm = \"sec-about.title\"/>\n-</para></listitem>\n-</itemizedlist>\n-</para>\n-  -->\n-\n-<!--\n-Local Variables:\n-compile-command: \"xsltproc -o porting-howto.html docbook-xslt/docbook/html/docbook.xsl porting-howto.xml\"\n-End:\n--->"}]}