{"sha": "4852c3266ec0887316b9fbbb106b8540e3e948d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1MmMzMjY2ZWMwODg3MzE2YjlmYmJiMTA2Yjg1NDBlM2U5NDhkNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-13T10:33:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-13T10:35:01Z"}, "message": "remove almost all users of gimple_expr_code\n\nThis replaces the old-school gimple_expr_code with more selective\nfunctions throughout the compiler, in all cases making the code\nshorter or more clear.\n\n2020-11-13  Richard Biener  <rguenther@suse.de>\n\n\t* cfgexpand.c (gimple_assign_rhs_to_tree): Use\n\tgimple_assign_rhs_class.\n\t(expand_gimple_stmt_1): Likewise.\n\t* gimplify-me.c (gimple_regimplify_operands): Use\n\tgimple_assign_single_p.\n\t* ipa-icf-gimple.c (func_checker::compare_gimple_assign):\n\tRemove redundant compare.\n\t(func_checker::compare_gimple_cond): Use gimple_cond_code.\n\t* tree-ssa-tail-merge.c (gimple_equal_p): Likewise.\n\t* predict.c (predict_loops): Use gimple_assign_rhs_code.", "tree": {"sha": "dd05735207cada3ebd0d71d889e99d03a85c0267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd05735207cada3ebd0d71d889e99d03a85c0267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4852c3266ec0887316b9fbbb106b8540e3e948d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4852c3266ec0887316b9fbbb106b8540e3e948d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4852c3266ec0887316b9fbbb106b8540e3e948d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4852c3266ec0887316b9fbbb106b8540e3e948d6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82990836679f1972141a2f93666bd6d39323a435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82990836679f1972141a2f93666bd6d39323a435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82990836679f1972141a2f93666bd6d39323a435"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "1b7bdbc15be0711575ed486cdebae707c5efc2a2", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4852c3266ec0887316b9fbbb106b8540e3e948d6", "patch": "@@ -103,7 +103,7 @@ tree\n gimple_assign_rhs_to_tree (gimple *stmt)\n {\n   tree t;\n-  switch (get_gimple_rhs_class (gimple_expr_code (stmt)))\n+  switch (gimple_assign_rhs_class (stmt))\n     {\n     case GIMPLE_TERNARY_RHS:\n       t = build3 (gimple_assign_rhs_code (stmt),\n@@ -3741,11 +3741,10 @@ expand_gimple_stmt_1 (gimple *stmt)\n \t   of binary assigns must be a gimple reg.  */\n \n \tif (TREE_CODE (lhs) != SSA_NAME\n-\t    || get_gimple_rhs_class (gimple_expr_code (stmt))\n-\t       == GIMPLE_SINGLE_RHS)\n+\t    || gimple_assign_rhs_class (assign_stmt) == GIMPLE_SINGLE_RHS)\n \t  {\n \t    tree rhs = gimple_assign_rhs1 (assign_stmt);\n-\t    gcc_assert (get_gimple_rhs_class (gimple_expr_code (stmt))\n+\t    gcc_assert (gimple_assign_rhs_class (assign_stmt)\n \t\t\t== GIMPLE_SINGLE_RHS);\n \t    if (gimple_has_location (stmt) && CAN_HAVE_LOCATION_P (rhs)\n \t\t/* Do not put locations on possibly shared trees.  */"}, {"sha": "ee84c8bb194e3ec8c2a45f02712ae1729a697b58", "filename": "gcc/gimplify-me.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fgimplify-me.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fgimplify-me.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify-me.c?ref=4852c3266ec0887316b9fbbb106b8540e3e948d6", "patch": "@@ -230,10 +230,8 @@ gimple_regimplify_operands (gimple *stmt, gimple_stmt_iterator *gsi_p)\n \t  if (i == 1 && (is_gimple_call (stmt) || is_gimple_assign (stmt)))\n \t    gimplify_expr (&op, &pre, NULL, is_gimple_lvalue, fb_lvalue);\n \t  else if (i == 2\n-\t\t   && is_gimple_assign (stmt)\n-\t\t   && num_ops == 2\n-\t\t   && get_gimple_rhs_class (gimple_expr_code (stmt))\n-\t\t      == GIMPLE_SINGLE_RHS)\n+\t\t   && gimple_assign_single_p (stmt)\n+\t\t   && num_ops == 2)\n \t    gimplify_expr (&op, &pre, NULL,\n \t\t\t   rhs_predicate_for (gimple_assign_lhs (stmt)),\n \t\t\t   fb_rvalue);\n@@ -255,10 +253,8 @@ gimple_regimplify_operands (gimple *stmt, gimple_stmt_iterator *gsi_p)\n \t{\n \t  bool need_temp = false;\n \n-\t  if (is_gimple_assign (stmt)\n-\t      && num_ops == 2\n-\t      && get_gimple_rhs_class (gimple_expr_code (stmt))\n-\t\t == GIMPLE_SINGLE_RHS)\n+\t  if (gimple_assign_single_p (stmt)\n+\t      && num_ops == 2)\n \t    gimplify_expr (gimple_assign_rhs1_ptr (stmt), &pre, NULL,\n \t\t\t   rhs_predicate_for (gimple_assign_lhs (stmt)),\n \t\t\t   fb_rvalue);"}, {"sha": "b755d7ec847a78038bb4df19774f647b2e23c8c3", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=4852c3266ec0887316b9fbbb106b8540e3e948d6", "patch": "@@ -610,12 +610,6 @@ func_checker::compare_gimple_assign (gimple *s1, gimple *s2)\n   tree_code code1, code2;\n   unsigned i;\n \n-  code1 = gimple_expr_code (s1);\n-  code2 = gimple_expr_code (s2);\n-\n-  if (code1 != code2)\n-    return false;\n-\n   code1 = gimple_assign_rhs_code (s1);\n   code2 = gimple_assign_rhs_code (s2);\n \n@@ -652,8 +646,8 @@ func_checker::compare_gimple_cond (gimple *s1, gimple *s2)\n   tree t1, t2;\n   tree_code code1, code2;\n \n-  code1 = gimple_expr_code (s1);\n-  code2 = gimple_expr_code (s2);\n+  code1 = gimple_cond_code (s1);\n+  code2 = gimple_cond_code (s2);\n \n   if (code1 != code2)\n     return false;"}, {"sha": "3acbb86b75f99cb5e4d53955122fe0da77963334", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=4852c3266ec0887316b9fbbb106b8540e3e948d6", "patch": "@@ -2204,7 +2204,7 @@ predict_loops (void)\n \t     {\n \t       gimple *call_stmt = SSA_NAME_DEF_STMT (gimple_cond_lhs (stmt));\n \t       if (gimple_code (call_stmt) == GIMPLE_ASSIGN\n-\t\t   && gimple_expr_code (call_stmt) == NOP_EXPR\n+\t\t   && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (call_stmt))\n \t\t   && TREE_CODE (gimple_assign_rhs1 (call_stmt)) == SSA_NAME)\n \t\t call_stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (call_stmt));\n \t       if (gimple_call_internal_p (call_stmt, IFN_BUILTIN_EXPECT)"}, {"sha": "a4879fe1b7f01fbd895d79f885512afb638ec5d5", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4852c3266ec0887316b9fbbb106b8540e3e948d6/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=4852c3266ec0887316b9fbbb106b8540e3e948d6", "patch": "@@ -1189,8 +1189,8 @@ gimple_equal_p (same_succ *same_succ, gimple *s1, gimple *s2)\n       if (!gimple_operand_equal_value_p (t1, t2))\n \treturn false;\n \n-      code1 = gimple_expr_code (s1);\n-      code2 = gimple_expr_code (s2);\n+      code1 = gimple_cond_code (s1);\n+      code2 = gimple_cond_code (s2);\n       inv_cond = (bitmap_bit_p (same_succ->inverse, bb1->index)\n \t\t  != bitmap_bit_p (same_succ->inverse, bb2->index));\n       if (inv_cond)"}]}