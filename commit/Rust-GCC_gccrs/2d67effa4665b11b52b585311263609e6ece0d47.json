{"sha": "2d67effa4665b11b52b585311263609e6ece0d47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2N2VmZmE0NjY1YjExYjUyYjU4NTMxMTI2MzYwOWU2ZWNlMGQ0Nw==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2006-03-24T16:30:19Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2006-03-24T16:30:19Z"}, "message": "avr-protos.h (extra_constraint): Delete.\n\n\t* config/avr/avr-protos.h (extra_constraint): Delete.\n\t(extra_constraint_Q): New declaration.\n\t* config/avr/constraints.md: New file.\n\t* config/avr/avr.md: Include it.\n\t(REG_X, REG_Y, REG_Z, REG_W): New constants.\n\t(TMP_REGNO, ZERO_REGNO): Likewise.\n\t(UNSPEC_STRLEN, UNSPEC_INDEX_JMP): Likewise.\n\t* config/avr/avr.c (avr_reg_class_from_letter): Delete.\n\t(extra_constraint): Delete.\n\t(extra_constraint_Q): Test for memory constraint 'Q'.\n\t* config/avr/avr.h (REG_X,REG_Y,REG_Z,REG_W): Delete.\n\t(REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_LETTER_P): Delete.\n\t(CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT): Delete.\n\t(TMP_REGNO): Delete.\n\t(ZERO_REGNO): Delete.\n\nFrom-SVN: r112352", "tree": {"sha": "6a3877ee118858dafd539409fa586b2de8f331ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a3877ee118858dafd539409fa586b2de8f331ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d67effa4665b11b52b585311263609e6ece0d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d67effa4665b11b52b585311263609e6ece0d47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d67effa4665b11b52b585311263609e6ece0d47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d67effa4665b11b52b585311263609e6ece0d47/comments", "author": null, "committer": null, "parents": [{"sha": "8cb86b657cad001ff77e8dc5d74b3bb5f9f9a7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb86b657cad001ff77e8dc5d74b3bb5f9f9a7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb86b657cad001ff77e8dc5d74b3bb5f9f9a7f1"}], "stats": {"total": 270, "additions": 161, "deletions": 109}, "files": [{"sha": "82c4e6facb32d2a9f50f44031e7baf44b8f7ffc3", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=2d67effa4665b11b52b585311263609e6ece0d47", "patch": "@@ -1,6 +1,7 @@\n /* Prototypes for exported functions defined in avr.c\n    \n-   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006\n+   Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n    This file is part of GCC.\n@@ -92,7 +93,7 @@ extern void avr_output_addr_vec_elt (FILE *stream, int value);\n extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n \n extern enum reg_class preferred_reload_class (rtx x, enum reg_class class);\n-extern int extra_constraint (rtx x, int c);\n+extern int extra_constraint_Q (rtx x);\n extern rtx legitimize_address (rtx x, rtx oldx, enum machine_mode mode);\n extern int adjust_insn_length (rtx insn, int len);\n extern rtx avr_libcall_value (enum machine_mode mode);"}, {"sha": "0712a10d1647bf997eafe32365e67f1025fd65fc", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 24, "deletions": 66, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2d67effa4665b11b52b585311263609e6ece0d47", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for ATMEL AVR micro controllers\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -324,35 +324,6 @@ avr_regno_reg_class (int r)\n   return ALL_REGS;\n }\n \n-\n-/* A C expression which defines the machine-dependent operand\n-   constraint letters for register classes.  If C is such a\n-   letter, the value should be the register class corresponding to\n-   it.  Otherwise, the value should be `NO_REGS'.  The register\n-   letter `r', corresponding to class `GENERAL_REGS', will not be\n-   passed to this macro; you do not need to handle it.  */\n-\n-enum reg_class\n-avr_reg_class_from_letter  (int c)\n-{\n-  switch (c)\n-    {\n-    case 't' : return R0_REG;\n-    case 'b' : return BASE_POINTER_REGS;\n-    case 'e' : return POINTER_REGS;\n-    case 'w' : return ADDW_REGS;\n-    case 'd' : return LD_REGS;\n-    case 'l' : return NO_LD_REGS;\n-    case 'a' : return SIMPLE_LD_REGS;\n-    case 'x' : return POINTER_X_REGS;\n-    case 'y' : return POINTER_Y_REGS;\n-    case 'z' : return POINTER_Z_REGS;\n-    case 'q' : return STACK_REG;\n-    default: break;\n-    }\n-  return NO_REGS;\n-}\n-\n /* Return nonzero if FUNC is a naked function.  */\n \n static int\n@@ -5475,48 +5446,35 @@ avr_address_cost (rtx x)\n   return 4;\n }\n \n-/*  EXTRA_CONSTRAINT helper */\n+/* Test for extra memory constraint 'Q'.\n+   It's a memory address based on Y or Z pointer with valid displacement.  */\n \n int\n-extra_constraint (rtx x, int c)\n+extra_constraint_Q (rtx x)\n {\n-  if (c == 'Q'\n-      && GET_CODE (x) == MEM\n-      && GET_CODE (XEXP (x,0)) == PLUS)\n+  if (GET_CODE (XEXP (x,0)) == PLUS\n+      && REG_P (XEXP (XEXP (x,0), 0))\n+      && GET_CODE (XEXP (XEXP (x,0), 1)) == CONST_INT\n+      && (INTVAL (XEXP (XEXP (x,0), 1))\n+\t  <= MAX_LD_OFFSET (GET_MODE (x))))\n     {\n-\t  if (TARGET_ALL_DEBUG)\n-\t    {\n-\t      fprintf (stderr, (\"extra_constraint:\\n\"\n-\t\t\t\t\"reload_completed: %d\\n\"\n-\t\t\t\t\"reload_in_progress: %d\\n\"),\n-\t\t       reload_completed, reload_in_progress);\n-\t      debug_rtx (x);\n-\t    }\n-      if (GET_CODE (x) == MEM\n-\t  && GET_CODE (XEXP (x,0)) == PLUS\n-\t  && REG_P (XEXP (XEXP (x,0), 0))\n-\t  && GET_CODE (XEXP (XEXP (x,0), 1)) == CONST_INT\n-\t  && (INTVAL (XEXP (XEXP (x,0), 1))\n-\t      <= MAX_LD_OFFSET (GET_MODE (x))))\n+      rtx xx = XEXP (XEXP (x,0), 0);\n+      int regno = REGNO (xx);\n+      if (TARGET_ALL_DEBUG)\n \t{\n-\t  rtx xx = XEXP (XEXP (x,0), 0);\n-\t  int regno = REGNO (xx);\n-\t  if (TARGET_ALL_DEBUG)\n-\t    {\n-\t      fprintf (stderr, (\"extra_constraint:\\n\"\n-\t\t\t\t\"reload_completed: %d\\n\"\n-\t\t\t\t\"reload_in_progress: %d\\n\"),\n-\t\t       reload_completed, reload_in_progress);\n-\t      debug_rtx (x);\n-\t    }\n-\t  if (regno >= FIRST_PSEUDO_REGISTER)\n-\t    return 1;\t\t/* allocate pseudos */\n-\t  else if (regno == REG_Z || regno == REG_Y)\n-\t    return 1;\t\t/* strictly check */\n-\t  else if (xx == frame_pointer_rtx\n-\t\t   || xx == arg_pointer_rtx)\n-\t    return 1;\t\t/* XXX frame & arg pointer checks */\n+\t  fprintf (stderr, (\"extra_constraint:\\n\"\n+\t\t\t    \"reload_completed: %d\\n\"\n+\t\t\t    \"reload_in_progress: %d\\n\"),\n+\t\t   reload_completed, reload_in_progress);\n+\t  debug_rtx (x);\n \t}\n+      if (regno >= FIRST_PSEUDO_REGISTER)\n+\treturn 1;\t\t/* allocate pseudos */\n+      else if (regno == REG_Z || regno == REG_Y)\n+\treturn 1;\t\t/* strictly check */\n+      else if (xx == frame_pointer_rtx\n+\t       || xx == arg_pointer_rtx)\n+\treturn 1;\t\t/* XXX frame & arg pointer checks */\n     }\n   return 0;\n }"}, {"sha": "39b4d21493af89821d02b553ba6a3e6b6b63e379", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=2d67effa4665b11b52b585311263609e6ece0d47", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -206,11 +206,6 @@ enum reg_class {\n \t\t   \"GENERAL_REGS\", /* r0 - r31 */\t\t\\\n \t\t   \"ALL_REGS\" }\n \n-#define REG_X 26\n-#define REG_Y 28\n-#define REG_Z 30\n-#define REG_W 24\n-\n #define REG_CLASS_CONTENTS {\t\t\t\t\t\t\\\n   {0x00000000,0x00000000},\t/* NO_REGS */\t\t\t\t\\\n   {0x00000001,0x00000000},\t/* R0_REG */                            \\\n@@ -238,8 +233,6 @@ enum reg_class {\n \n #define INDEX_REG_CLASS NO_REGS\n \n-#define REG_CLASS_FROM_LETTER(C) avr_reg_class_from_letter(C)\n-\n #define REGNO_OK_FOR_BASE_P(r) (((r) < FIRST_PSEUDO_REGISTER\t\t\\\n \t\t\t\t && ((r) == REG_X\t\t\t\\\n \t\t\t\t     || (r) == REG_Y\t\t\t\\\n@@ -262,23 +255,6 @@ enum reg_class {\n \n #define CLASS_MAX_NREGS(CLASS, MODE)   class_max_nregs (CLASS, MODE)\n \n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\\\n-  ((C) == 'I' ? (VALUE) >= 0 && (VALUE) <= 63 :\t\t\t\\\n-   (C) == 'J' ? (VALUE) <= 0 && (VALUE) >= -63:\t\t\t\\\n-   (C) == 'K' ? (VALUE) == 2 :\t\t\t\t\t\\\n-   (C) == 'L' ? (VALUE) == 0 :\t\t\t\t\t\\\n-   (C) == 'M' ? (VALUE) >= 0 && (VALUE) <= 0xff :\t\t\\\n-   (C) == 'N' ? (VALUE) == -1:\t\t\t\t\t\\\n-   (C) == 'O' ? (VALUE) == 8 || (VALUE) == 16 || (VALUE) == 24:\t\\\n-   (C) == 'P' ? (VALUE) == 1 :\t\t\t\t\t\\\n-   0)\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) \\\n-  ((C) == 'G' ? (VALUE) == CONST0_RTX (SFmode)\t\\\n-   : 0)\n-\n-#define EXTRA_CONSTRAINT(x, c) extra_constraint(x, c)\n-\n #define STACK_PUSH_CODE POST_DEC\n \n #define STACK_GROWS_DOWNWARD\n@@ -841,10 +817,4 @@ extern int avr_case_values_threshold;\n #define OUT_AS2(a,b,c) output_asm_insn (AS2(a,b,c), operands)\n #define CR_TAB \"\\n\\t\"\n \n-/* Temporary register r0 */\n-#define TMP_REGNO 0\n-\n-/* zero register r1 */\n-#define ZERO_REGNO 1\n-\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG"}, {"sha": "97a000d5bb5a98050cd019b25f7af94f696e0dcb", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=2d67effa4665b11b52b585311263609e6ece0d47", "patch": "@@ -1,7 +1,7 @@\n ;; -*- Mode: Scheme -*-\n ;;   Machine description for GNU compiler,\n ;;   for ATMEL AVR micro controllers.\n-;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006\n ;;   Free Software Foundation, Inc.\n ;;   Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -36,8 +36,20 @@\n \n ;; UNSPEC usage:\n ;;  0  Length of a string, see \"strlenhi\".\n-;;  1  Read from a word address in program memory, see \"casesi\".\n-\n+;;  1  Jump by register pair Z or by table addressed by Z, see \"casesi\".\n+\n+(define_constants\n+  [(REG_X\t26)\n+   (REG_Y\t28)\n+   (REG_Z\t30)\n+   (REG_W\t24)\n+   (TMP_REGNO\t0)\t; temporary register r0\n+   (ZERO_REGNO\t1)\t; zero register r1\n+   (UNSPEC_STRLEN\t0)\n+   (UNSPEC_INDEX_JMP\t1)])\n+\n+(include \"constraints.md\")\n+  \n ;; Condition code settings.\n (define_attr \"cc\" \"none,set_czn,set_zn,set_n,compare,clobber\"\n   (const_string \"none\"))\n@@ -482,7 +494,8 @@\n     [(set (match_dup 4)\n \t  (unspec:HI [(match_operand:BLK 1 \"memory_operand\" \"\")\n \t\t      (match_operand:QI 2 \"const_int_operand\" \"\")\n-\t\t      (match_operand:HI 3 \"immediate_operand\" \"\")] 0))\n+\t\t      (match_operand:HI 3 \"immediate_operand\" \"\")]\n+\t\t     UNSPEC_STRLEN))\n      (set (match_dup 4) (plus:HI (match_dup 4)\n \t\t\t\t (const_int -1)))\n      (set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -503,7 +516,8 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=e\")\n \t(unspec:HI [(mem:BLK (match_operand:HI 1 \"register_operand\" \"%0\"))\n \t\t    (const_int 0)\n-\t\t    (match_operand:HI 2 \"immediate_operand\" \"i\")] 0))]\n+\t\t    (match_operand:HI 2 \"immediate_operand\" \"i\")]\n+\t\t   UNSPEC_STRLEN))]\n   \"\"\n   \"ld __tmp_reg__,%a0+\n \ttst __tmp_reg__\n@@ -2180,7 +2194,8 @@\n \n ;; Table made from \"rjmp\" instructions for <=8K devices.\n (define_insn \"*tablejump_rjmp\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r\")] 1))\n+  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r\")]\n+\t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n   \"!AVR_MEGA\"\n@@ -2192,7 +2207,8 @@\n \n ;; Not a prologue, but similar idea - move the common piece of code to libgcc.\n (define_insn \"*tablejump_lib\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")] 1))\n+  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n+\t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n   \"AVR_MEGA && TARGET_CALL_PROLOGUES\"\n@@ -2201,7 +2217,8 @@\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*tablejump_enh\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")] 1))\n+  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n+\t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n   \"AVR_MEGA && AVR_ENHANCED\"\n@@ -2215,7 +2232,8 @@\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*tablejump\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")] 1))\n+  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n+\t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n   \"AVR_MEGA\"\n@@ -2248,7 +2266,7 @@\n    (set (match_dup 6)\n \t(plus:HI (match_dup 6) (label_ref (match_operand:HI 3 \"\" \"\"))))\n \n-   (parallel [(set (pc) (unspec:HI [(match_dup 6)] 1))\n+   (parallel [(set (pc) (unspec:HI [(match_dup 6)] UNSPEC_INDEX_JMP))\n \t      (use (label_ref (match_dup 3)))\n \t      (clobber (match_dup 6))])]\n   \"\""}, {"sha": "eca5cbef292895d33a8ddf2874c50ba39926a0f8", "filename": "gcc/config/avr/constraints.md", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d67effa4665b11b52b585311263609e6ece0d47/gcc%2Fconfig%2Favr%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fconstraints.md?ref=2d67effa4665b11b52b585311263609e6ece0d47", "patch": "@@ -0,0 +1,105 @@\n+;; Constraint definitions for ATMEL AVR micro controllers.\n+;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;; Register constraints\n+\n+(define_register_constraint \"t\" \"R0_REG\"\n+  \"Temporary register r0\")\n+\n+(define_register_constraint \"b\" \"BASE_POINTER_REGS\"\n+  \"Base pointer registers (r28--r31)\")\n+\n+(define_register_constraint \"e\" \"POINTER_REGS\"\n+  \"Pointer registers (r26--r31)\")\n+\n+(define_register_constraint \"w\" \"ADDW_REGS\"\n+  \"Registers from r24 to r31.  These registers\n+   can be used in @samp{adiw} command.\")\n+\n+(define_register_constraint \"d\" \"LD_REGS\"\n+  \"Registers from r16 to r31.\")\n+\n+(define_register_constraint \"l\" \"NO_LD_REGS\"\n+  \"Registers from r0 to r15.\")\n+\n+(define_register_constraint \"a\" \"SIMPLE_LD_REGS\"\n+  \"Registers from r16 to r23.\")\n+\n+(define_register_constraint \"x\" \"POINTER_X_REGS\"\n+  \"Register pair X (r27:r26).\")\n+\n+(define_register_constraint \"y\" \"POINTER_Y_REGS\"\n+  \"Register pair Y (r29:r28).\")\n+\n+(define_register_constraint \"z\" \"POINTER_Z_REGS\"\n+  \"Register pair Z (r31:r30).\")\n+\n+(define_register_constraint \"q\" \"STACK_REG\"\n+  \"Stack pointer register (SPH:SPL).\")\n+\n+(define_constraint \"I\"\n+  \"Integer constant in the range 0 @dots{} 63.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 63\")))\n+\n+(define_constraint \"J\"\n+  \"Integer constant in the range -63 @dots{} 0.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival <= 0 && ival >= -63\")))\n+\n+(define_constraint \"K\"\n+  \"Integer constant 2.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 2\")))\n+\n+(define_constraint \"L\"\n+  \"Zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"M\"\n+  \"Integer constant in the range 0 @dots{} 0xff.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 0xff\")))\n+\n+(define_constraint \"N\"\n+  \"Constant integer @minus{}1.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == -1\")))\n+\n+(define_constraint \"O\"\n+  \"Constant integer 8, 16, or 24.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 8 || ival == 16 || ival == 24\")))\n+\n+(define_constraint \"P\"\n+  \"Constant integer 1.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 1\")))\n+\n+(define_constraint \"G\"\n+  \"Constant float 0.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"op == CONST0_RTX (SFmode)\")))\n+\n+(define_memory_constraint \"Q\"\n+  \"A memory address based on X or Y pointer with displacement.\"\n+  (and (match_code \"mem\")\n+       (match_test \"extra_constraint_Q (op)\")))"}]}