{"sha": "cba998bf036fc6cce686e76d800e62d516e39f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhOTk4YmYwMzZmYzZjY2U2ODZlNzZkODAwZTYyZDUxNmUzOWY2Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-07T00:30:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-07T00:30:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r166", "tree": {"sha": "17c2215e2fd319aea800e4ceb1d761a48e758eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17c2215e2fd319aea800e4ceb1d761a48e758eac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba998bf036fc6cce686e76d800e62d516e39f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba998bf036fc6cce686e76d800e62d516e39f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba998bf036fc6cce686e76d800e62d516e39f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba998bf036fc6cce686e76d800e62d516e39f6b/comments", "author": null, "committer": null, "parents": [{"sha": "033ee812c8a9423bf13f3dd44eb1b2056f66a3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033ee812c8a9423bf13f3dd44eb1b2056f66a3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033ee812c8a9423bf13f3dd44eb1b2056f66a3dd"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "a3f9184ca7258547e8435be6f5325680b1411bbf", "filename": "gcc/genrecog.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba998bf036fc6cce686e76d800e62d516e39f6b/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba998bf036fc6cce686e76d800e62d516e39f6b/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=cba998bf036fc6cce686e76d800e62d516e39f6b", "patch": "@@ -374,7 +374,7 @@ add_to_sequence (pattern, last, position)\n \t\t{\n \t\t  new->code = preds[i].codes[0];\n \t\t  if (! strcmp (\"const_int_operand\", new->tests))\n-\t\t    new->tests = 0;\n+\t\t    new->tests = 0, new->pred = -1;\n \t\t}\n \n \t      for (j = 0; j < NUM_RTX_CODE && preds[i].codes[j] != 0; j++)\n@@ -1040,6 +1040,8 @@ write_tree_1 (tree, prevpos, afterward, type)\n   for (p = tree; p; p = p->next)\n     {\n       enum machine_mode mode = p->enforce_mode ? p->mode : VOIDmode;\n+      int need_bracket;\n+      int wrote_bracket = 0;\n       int inner_indent;\n \n       if (p->success.first == 0 && p->insn_code_number < 0)\n@@ -1296,19 +1298,27 @@ write_tree_1 (tree, prevpos, afterward, type)\n       else\n \tuncond = 1;\n \n+      need_bracket = ! uncond;\n+\n       if (p->opno >= 0)\n \t{\n-\t  printf (\"%s{\\n%sro[%d] = x%d;\\n\",\n-\t\t  indents[inner_indent], indents[inner_indent + 2],\n-\t\t  p->opno, depth);\n-\t  inner_indent += 2;\n+\t  if (need_bracket)\n+\t    {\n+\t      printf (\"%s{\\n\", indents[inner_indent]);\n+\t      inner_indent += 2;\n+\t      wrote_bracket = 1;\n+\t      need_bracket = 0;\n+\t    }\n+\n+\t  printf (\"%sro[%d] = x%d;\\n\", indents[inner_indent], p->opno, depth);\n \t}\n \n       if (p->c_test)\n \t{\n \t  printf (\"%sif (%s)\\n\", indents[inner_indent], p->c_test);\n \t  inner_indent += 2;\n \t  uncond = 0;\n+\t  need_bracket = 1;\n \t}\n \n       if (p->insn_code_number >= 0)\n@@ -1320,7 +1330,7 @@ write_tree_1 (tree, prevpos, afterward, type)\n \t    {\n \t      if (p->num_clobbers_to_add)\n \t\t{\n-\t\t  if (p->opno < 0 || p->c_test)\n+\t\t  if (need_bracket)\n \t\t    {\n \t\t      printf (\"%s{\\n\", indents[inner_indent]);\n \t\t      inner_indent += 2;\n@@ -1331,7 +1341,7 @@ write_tree_1 (tree, prevpos, afterward, type)\n \t\t  printf (\"%sreturn %d;\\n\",\n \t\t\t  indents[inner_indent], p->insn_code_number);\n \n-\t\t  if (p->opno < 0 || p->c_test)\n+\t\t  if (need_bracket)\n \t\t    {\n \t\t      inner_indent -= 2;\n \t\t      printf (\"%s}\\n\", indents[inner_indent]);\n@@ -1346,28 +1356,34 @@ write_tree_1 (tree, prevpos, afterward, type)\n \tprintf (\"%sgoto L%d;\\n\", indents[inner_indent],\n \t\tp->success.first->number);\n \n-      if (p->opno >= 0)\n+      if (wrote_bracket)\n \tprintf (\"%s}\\n\", indents[inner_indent - 2]);\n     }\n \n   /* We have now tested all alternatives.  End any switches we have open\n-     and branch to the alternative node.  */\n+     and branch to the alternative node unless we know that we can't fall\n+     through to the branch.  */\n \n   if (switch_code != UNKNOWN)\n     {\n       printf (\"%s}\\n\", indents[indent - 2]);\n       indent -= 4;\n+      uncond = 0;\n     }\n \n   if (switch_mode != VOIDmode)\n     {\n       printf (\"%s}\\n\", indents[indent - 2]);\n       indent -= 4;\n+      uncond = 0;\n     }\n \n   if (indent != 2)\n     abort ();\n \n+  if (uncond)\n+    return;\n+\n   if (afterward)\n     {\n       change_state (prevpos, afterward->position, 2);\n@@ -1417,7 +1433,7 @@ same_modes (p, mode)\n      register enum machine_mode mode;\n {\n   for (; p; p = p->next)\n-    if (p->mode != mode || p->tests)\n+    if ((p->enforce_mode ? p->mode : VOIDmode) != mode)\n       return 0;\n \n   return 1;"}]}