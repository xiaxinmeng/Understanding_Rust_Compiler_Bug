{"sha": "9901ac6e89b708367ec23239200575a9cb6ae6b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwMWFjNmU4OWI3MDgzNjdlYzIzMjM5MjAwNTc1YTljYjZhZTZiNA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-12-10T10:13:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-12-10T10:13:36Z"}, "message": "gcc:\n\n\t* config/rs6000/rs6000.c\n\t(rs6000_darwin64_record_arg_advance_recurse): Name register increment\n\texplicitly.  (rs6000_darwin64_record_arg_recurse): Make sure we split\n\tlong doubles when we run out of regs.   Also flag that this requires\n\tstack and therefore cannot be returned by value.\n\t(rs6000_darwin64_record_arg): Update comment.\n\t(rs6000_function_value): Likewise.\n\nFrom-SVN: r167682", "tree": {"sha": "ff75dbd8f37fbc5871af7cdf05d19808f6b6e872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff75dbd8f37fbc5871af7cdf05d19808f6b6e872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9901ac6e89b708367ec23239200575a9cb6ae6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9901ac6e89b708367ec23239200575a9cb6ae6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9901ac6e89b708367ec23239200575a9cb6ae6b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9901ac6e89b708367ec23239200575a9cb6ae6b4/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f854c7881a1319ad3bda5da00dbb032fa62d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f854c7881a1319ad3bda5da00dbb032fa62d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f854c7881a1319ad3bda5da00dbb032fa62d9a"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "6828fcdcd0ead1a1fbec7cd6993690e3563b9373", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9901ac6e89b708367ec23239200575a9cb6ae6b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9901ac6e89b708367ec23239200575a9cb6ae6b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9901ac6e89b708367ec23239200575a9cb6ae6b4", "patch": "@@ -1,3 +1,13 @@\n+2010-12-10  Iain Sandoe <iains@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c\n+\t(rs6000_darwin64_record_arg_advance_recurse): Name register increment\n+\texplicitly.  (rs6000_darwin64_record_arg_recurse): Make sure we split\n+\tlong doubles when we run out of regs.   Also flag that this requires\n+\tstack and therefore cannot be returned by value.\n+\t(rs6000_darwin64_record_arg): Update comment.\n+\t(rs6000_function_value): Likewise.\n+\n 2010-12-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-parser.c (c_parser_objc_class_definition): Recognize"}, {"sha": "bc27f73b8f437a4f159b050e5ecd83f4117e2113", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9901ac6e89b708367ec23239200575a9cb6ae6b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9901ac6e89b708367ec23239200575a9cb6ae6b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9901ac6e89b708367ec23239200575a9cb6ae6b4", "patch": "@@ -8150,8 +8150,9 @@ rs6000_darwin64_record_arg_advance_recurse (CUMULATIVE_ARGS *cum,\n \t  rs6000_darwin64_record_arg_advance_recurse (cum, ftype, bitpos);\n \telse if (USE_FP_FOR_ARG_P (cum, mode, ftype))\n \t  {\n+\t    unsigned n_fpregs = (GET_MODE_SIZE (mode) + 7) >> 3;\n \t    rs6000_darwin64_record_arg_advance_flush (cum, bitpos, 0);\n-\t    cum->fregno += (GET_MODE_SIZE (mode) + 7) >> 3;\n+\t    cum->fregno += n_fpregs;\n \t    /* Single-precision floats present a special problem for\n \t       us, because they are smaller than an 8-byte GPR, and so\n \t       the structure-packing rules combined with the standard\n@@ -8186,7 +8187,7 @@ rs6000_darwin64_record_arg_advance_recurse (CUMULATIVE_ARGS *cum,\n \t\t  }\n \t      }\n \t    else\n-\t      cum->words += (GET_MODE_SIZE (mode) + 7) >> 3;\n+\t      cum->words += n_fpregs;\n \t  }\n \telse if (USE_ALTIVEC_FOR_ARG_P (cum, mode, type, 1))\n \t  {\n@@ -8612,6 +8613,7 @@ rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, const_tree type,\n \t  rs6000_darwin64_record_arg_recurse (cum, ftype, bitpos, rvec, k);\n \telse if (cum->named && USE_FP_FOR_ARG_P (cum, mode, ftype))\n \t  {\n+\t    unsigned n_fpreg = (GET_MODE_SIZE (mode) + 7) >> 3;\n #if 0\n \t    switch (mode)\n \t      {\n@@ -8622,6 +8624,14 @@ rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, const_tree type,\n \t      }\n #endif\n \t    rs6000_darwin64_record_arg_flush (cum, bitpos, rvec, k);\n+\t    if (cum->fregno + n_fpreg > FP_ARG_MAX_REG + 1)\n+\t      {\n+\t\tgcc_assert (cum->fregno == FP_ARG_MAX_REG\n+\t\t\t    && (mode == TFmode || mode == TDmode));\n+\t\t/* Long double or _Decimal128 split over regs and memory.  */\n+\t\tmode = DECIMAL_FLOAT_MODE_P (mode) ? DDmode : DFmode;\n+\t\tcum->use_stack=1;\n+\t      }\n \t    rvec[(*k)++]\n \t      = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t   gen_rtx_REG (mode, cum->fregno++),\n@@ -8679,7 +8689,7 @@ rs6000_darwin64_record_arg (CUMULATIVE_ARGS *orig_cum, const_tree type,\n      for the chunks of memory that go in int regs.  Note we start at\n      element 1; 0 is reserved for an indication of using memory, and\n      may or may not be filled in below. */\n-  rs6000_darwin64_record_arg_recurse (cum, type, 0, rvec, &k);\n+  rs6000_darwin64_record_arg_recurse (cum, type, /* startbit pos= */ 0, rvec, &k);\n   rs6000_darwin64_record_arg_flush (cum, typesize * BITS_PER_UNIT, rvec, &k);\n \n   /* If any part of the struct went on the stack put all of it there.\n@@ -8807,7 +8817,7 @@ rs6000_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   if (TARGET_MACHO && rs6000_darwin64_struct_check_p (mode, type))\n     {\n-      rtx rslt = rs6000_darwin64_record_arg (cum, type, named, false);\n+      rtx rslt = rs6000_darwin64_record_arg (cum, type, named, /*retval= */false);\n       if (rslt != NULL_RTX)\n \treturn rslt;\n       /* Else fall through to usual handling.  */\n@@ -26902,7 +26912,7 @@ rs6000_function_value (const_tree valtype,\n       valcum.vregno = ALTIVEC_ARG_MIN_REG;\n       /* Do a trial code generation as if this were going to be passed as\n \t an argument; if any part goes in memory, we return NULL.  */\n-      valret = rs6000_darwin64_record_arg (&valcum, valtype, true, true);\n+      valret = rs6000_darwin64_record_arg (&valcum, valtype, true, /* retval= */ true);\n       if (valret)\n \treturn valret;\n       /* Otherwise fall through to standard ABI rules.  */"}]}