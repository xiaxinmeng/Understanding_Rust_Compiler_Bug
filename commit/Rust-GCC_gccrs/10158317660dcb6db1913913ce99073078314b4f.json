{"sha": "10158317660dcb6db1913913ce99073078314b4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxNTgzMTc2NjBkY2I2ZGIxOTEzOTEzY2U5OTA3MzA3ODMxNGI0Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-23T10:30:49Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2015-10-23T10:30:49Z"}, "message": "fold-const.c (fold_binary_loc): Move Fold (A & ~B) - (A & B) into (A ^ B) - B to match.pd Move (X & ~Y) | (~X &...\n\n2015-10-23  Richard Biener  <rguenther@suse.de>\n\t    Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* fold-const.c (fold_binary_loc) : Move Fold (A & ~B) - (A & B)\n\tinto (A ^ B) - B to match.pd\n\tMove (X & ~Y) | (~X & Y) is X ^ Y to match.pd.\n\n\t* match.pd (minus (bit_and:cs @0 (bit_not @1)) (bit_and:s @0 @1)):\n\tNew simplifier.\n\t(minus (bit_and:s @0 INTEGER_CST@2) (bit_and:s @0 INTEGER_CST@1)):\n\tNew simplifier.\n\t(minus (bit_and:s @0 @1) (bit_and:cs @0 (bit_not @1))):\n\tNew simplifier.\n\t(bit_ior:c (bit_and:c @0 (bit_not @1)) (bit_and:c (bit_not @0) @1)):\n\tNew simplifier.\n\t(bit_ior:c (bit_and @0 INTEGER_CST@2) (bit_and (bit_not @0) \n\tINTEGER_CST@1)): New simplifier.\n\n\nCo-Authored-By: Naveen H.S <Naveen.Hurugalawadi@caviumnetworks.com>\n\nFrom-SVN: r229225", "tree": {"sha": "6edab16c40f866feae5870ec73f43a78ec0448f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6edab16c40f866feae5870ec73f43a78ec0448f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10158317660dcb6db1913913ce99073078314b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10158317660dcb6db1913913ce99073078314b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10158317660dcb6db1913913ce99073078314b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10158317660dcb6db1913913ce99073078314b4f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95fef24ff9a7ed0a90781fd153e797d086aa2647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fef24ff9a7ed0a90781fd153e797d086aa2647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fef24ff9a7ed0a90781fd153e797d086aa2647"}], "stats": {"total": 85, "additions": 41, "deletions": 44}, "files": [{"sha": "91b14eb0dc677714af798602ff98b751d944b936", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10158317660dcb6db1913913ce99073078314b4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10158317660dcb6db1913913ce99073078314b4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10158317660dcb6db1913913ce99073078314b4f", "patch": "@@ -1,3 +1,21 @@\n+2015-10-23  Richard Biener  <rguenther@suse.de>\n+\t    Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* fold-const.c (fold_binary_loc) : Move Fold (A & ~B) - (A & B)\n+\tinto (A ^ B) - B to match.pd\n+\tMove (X & ~Y) | (~X & Y) is X ^ Y to match.pd.\n+\n+\t* match.pd (minus (bit_and:cs @0 (bit_not @1)) (bit_and:s @0 @1)):\n+\tNew simplifier.\n+\t(minus (bit_and:s @0 INTEGER_CST@2) (bit_and:s @0 INTEGER_CST@1)):\n+\tNew simplifier.\n+\t(minus (bit_and:s @0 @1) (bit_and:cs @0 (bit_not @1))):\n+\tNew simplifier.\n+\t(bit_ior:c (bit_and:c @0 (bit_not @1)) (bit_and:c (bit_not @0) @1)):\n+\tNew simplifier.\n+\t(bit_ior:c (bit_and @0 INTEGER_CST@2) (bit_and (bit_not @0)\n+\tINTEGER_CST@1)): New simplifier.\n+\n 2015-10-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (integer_valued_real_p): Move to fold-const.c."}, {"sha": "c1dcdd658367e23bd7ea7a43500dd3c5d2269c4e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10158317660dcb6db1913913ce99073078314b4f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10158317660dcb6db1913913ce99073078314b4f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=10158317660dcb6db1913913ce99073078314b4f", "patch": "@@ -9649,28 +9649,6 @@ fold_binary_loc (location_t loc,\n \t\t\t    fold_convert_loc (loc, type,\n \t\t\t\t\t      TREE_OPERAND (arg0, 0)));\n \n-      if (! FLOAT_TYPE_P (type))\n-\t{\n-\t  /* Fold (A & ~B) - (A & B) into (A ^ B) - B, where B is\n-\t     any power of 2 minus 1.  */\n-\t  if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t      && TREE_CODE (arg1) == BIT_AND_EXPR\n-\t      && operand_equal_p (TREE_OPERAND (arg0, 0),\n-\t\t\t\t  TREE_OPERAND (arg1, 0), 0))\n-\t    {\n-\t      tree mask0 = TREE_OPERAND (arg0, 1);\n-\t      tree mask1 = TREE_OPERAND (arg1, 1);\n-\t      tree tem = fold_build1_loc (loc, BIT_NOT_EXPR, type, mask0);\n-\n-\t      if (operand_equal_p (tem, mask1, 0))\n-\t\t{\n-\t\t  tem = fold_build2_loc (loc, BIT_XOR_EXPR, type,\n-\t\t\t\t     TREE_OPERAND (arg0, 0), mask1);\n-\t\t  return fold_build2_loc (loc, MINUS_EXPR, type, tem, mask1);\n-\t\t}\n-\t    }\n-\t}\n-\n       /* Fold __complex__ ( x, 0 ) - __complex__ ( 0, y ) to\n \t __complex__ ( x, -y ).  This is not the same for SNaNs or if\n \t signed zeros are involved.  */\n@@ -9920,28 +9898,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t    arg1);\n \t}\n \n-      /* (X & ~Y) | (~X & Y) is X ^ Y */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && TREE_CODE (arg1) == BIT_AND_EXPR)\n-        {\n-\t  tree a0, a1, l0, l1, n0, n1;\n-\n-\t  a0 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 0));\n-\t  a1 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 1));\n-\n-\t  l0 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\t  l1 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n-\t  \n-\t  n0 = fold_build1_loc (loc, BIT_NOT_EXPR, type, l0);\n-\t  n1 = fold_build1_loc (loc, BIT_NOT_EXPR, type, l1);\n-\t  \n-\t  if ((operand_equal_p (n0, a0, 0)\n-\t       && operand_equal_p (n1, a1, 0))\n-\t      || (operand_equal_p (n0, a1, 0)\n-\t\t  && operand_equal_p (n1, a0, 0)))\n-\t    return fold_build2_loc (loc, BIT_XOR_EXPR, type, l0, n1);\n-\t}\n-\n       /* See if this can be simplified into a rotate first.  If that\n \t is unsuccessful continue in the association code.  */\n       goto bit_rotate;"}, {"sha": "d182f68f4a46fa2622f8b01747b7f95bfa8ee34d", "filename": "gcc/match.pd", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10158317660dcb6db1913913ce99073078314b4f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10158317660dcb6db1913913ce99073078314b4f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=10158317660dcb6db1913913ce99073078314b4f", "patch": "@@ -433,6 +433,29 @@ along with GCC; see the file COPYING3.  If not see\n  (bit_and:c (convert? @0) (convert? (bit_not @0)))\n   { build_zero_cst (type); })\n \n+/* Fold (A & ~B) - (A & B) into (A ^ B) - B.  */\n+(simplify\n+ (minus (bit_and:cs @0 (bit_not @1)) (bit_and:s @0 @1))\n+  (minus (bit_xor @0 @1) @1))\n+(simplify\n+ (minus (bit_and:s @0 INTEGER_CST@2) (bit_and:s @0 INTEGER_CST@1))\n+ (if (wi::bit_not (@2) == @1)\n+  (minus (bit_xor @0 @1) @1)))\n+\n+/* Fold (A & B) - (A & ~B) into B - (A ^ B).  */\n+(simplify\n+ (minus (bit_and:s @0 @1) (bit_and:cs @0 (bit_not @1)))\n+  (minus @1 (bit_xor @0 @1)))\n+\n+/* Simplify (X & ~Y) | (~X & Y) -> X ^ Y.  */\n+(simplify\n+ (bit_ior:c (bit_and:c @0 (bit_not @1)) (bit_and:c (bit_not @0) @1))\n+  (bit_xor @0 @1))\n+(simplify\n+ (bit_ior:c (bit_and @0 INTEGER_CST@2) (bit_and (bit_not @0) INTEGER_CST@1))\n+ (if (wi::bit_not (@2) == @1)\n+  (bit_xor @0 @1)))\n+\n /* X % Y is smaller than Y.  */\n (for cmp (lt ge)\n  (simplify"}]}