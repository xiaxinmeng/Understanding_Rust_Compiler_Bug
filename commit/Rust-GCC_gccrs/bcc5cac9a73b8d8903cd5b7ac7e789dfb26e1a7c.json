{"sha": "bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNjNWNhYzlhNzNiOGQ4OTAzY2Q1YjdhYzdlNzg5ZGZiMjZlMWE3Yw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-07T15:41:26Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-07T15:41:26Z"}, "message": "cpperror.c (cpp_file_line_for_message): Constify a char*.\n\n\t* cpperror.c (cpp_file_line_for_message): Constify a char*.\n\n\t* cppexp.c (parse_number, parse_charconst, cpp_lex,\n\tcpp_parse_expr): Add static prototypes.\n\t(parse_charconst): Don't cast away const-ness.\n\t(token): Constify a char*.\n\n\t* cppfiles.c (file_name_list, include_hash, find_include_file,\n\tfinclude, initialize_input_buffer): Constify a char*.\n\t(file_cleanup, find_position): Add static prototypes.\n\n\t* cpphash.c (macro_cleanup, macarg, timestamp, special_symbol,\n\tcollect_expansion): Add static prototypes.\n\t(cpp_install, create_definition, monthnames): Constify a char*.\n\n\t* cpphash.h (cpp_install): Likewise.\n\n\t* cppinit.c (known_suffixes, default_include,\n\tdump_special_to_buffer, NAME, cpp_start_read, cpp_finish): Likewise.\n\t(base_name, dump_special_to_buffer, initialize_dependency_output):\n\tAdd static prototypes.\n\n\t* cpplib.c (my_strerror): Constify a char*.\n\t(null_underflow, null_cleanup, skip_comment, copy_comment,\n\tcopy_rest_of_line, handle_directive, pass_thru_directive,\n\tget_directive_token, read_line_number, cpp_print_file_and_line,\n\tv_cpp_error, v_cpp_warning, v_cpp_error_with_line,\n\tv_cpp_warning_with_line, detect_if_not_defined,\n\tconsider_directive_while_skipping): Add static prototypes.\n\t(pass_thru_directive, check_macro_name, cpp_expand_to_buffer,\n\tcpp_pedwarn_with_file_and_line): Constify a char*.\n\n\t* cpplib.h (cpp_options, include_hash, progname, definition,\n\tcpp_pedwarn_with_file_and_line, cpp_expand_to_buffer,\n\tcheck_macro_name, cpp_pfatal_with_name, cpp_file_line_for_message,\n\tfind_include_file, deps_output, include_hash): Constify a char*.\n\n\t* cppmain.c (progname): Constify.\n\t(main): Add prototype.  Use return, not exit.\n\n\t* fix-header.c (fatal, add_symbols, lookup_std_proto, write_lbrac,\n\trecognized_macro, check_macro_names, read_scan_file, write_rbrac,\n\tinf_skip_spaces, inf_read_upto, inf_scan_ident, inf_scan_ident,\n\tcheck_protection): Add static prototype.\n\t(xfree): Remove.\n\t(progname, recognized_macrom, recognized_extern): Constify a char*.\n\t(main): Add prototype.\n\n\t* gen-protos.c (progname): Constify a char*.\n\nFrom-SVN: r29171", "tree": {"sha": "76546e83ed4adf19eeb9f69f1c550b82ef81184e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76546e83ed4adf19eeb9f69f1c550b82ef81184e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/comments", "author": null, "committer": null, "parents": [{"sha": "21cd906efe356578356ec1c36841629951681b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cd906efe356578356ec1c36841629951681b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cd906efe356578356ec1c36841629951681b44"}], "stats": {"total": 262, "additions": 181, "deletions": 81}, "files": [{"sha": "5409be5779641dbec29e47d48793662bf4c6a495", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -1,3 +1,55 @@\n+Tue Sep  7 11:39:41 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cpperror.c (cpp_file_line_for_message): Constify a char*.\n+\n+\t* cppexp.c (parse_number, parse_charconst, cpp_lex,\n+\tcpp_parse_expr): Add static prototypes.\n+\t(parse_charconst): Don't cast away const-ness.\n+\t(token): Constify a char*.\n+\n+\t* cppfiles.c (file_name_list, include_hash, find_include_file,\n+\tfinclude, initialize_input_buffer): Constify a char*.\n+\t(file_cleanup, find_position): Add static prototypes.\n+\n+\t* cpphash.c (macro_cleanup, macarg, timestamp, special_symbol,\n+\tcollect_expansion): Add static prototypes.\n+\t(cpp_install, create_definition, monthnames): Constify a char*.\n+\n+\t* cpphash.h (cpp_install): Likewise.\n+\n+\t* cppinit.c (known_suffixes, default_include,\n+\tdump_special_to_buffer, NAME, cpp_start_read, cpp_finish): Likewise.\n+\t(base_name, dump_special_to_buffer, initialize_dependency_output):\n+\tAdd static prototypes.\n+\n+\t* cpplib.c (my_strerror): Constify a char*.\n+\t(null_underflow, null_cleanup, skip_comment, copy_comment,\n+\tcopy_rest_of_line, handle_directive, pass_thru_directive,\n+\tget_directive_token, read_line_number, cpp_print_file_and_line,\n+\tv_cpp_error, v_cpp_warning, v_cpp_error_with_line,\n+\tv_cpp_warning_with_line, detect_if_not_defined,\n+\tconsider_directive_while_skipping): Add static prototypes.\n+\t(pass_thru_directive, check_macro_name, cpp_expand_to_buffer,\n+\tcpp_pedwarn_with_file_and_line): Constify a char*.\n+\n+\t* cpplib.h (cpp_options, include_hash, progname, definition,\n+\tcpp_pedwarn_with_file_and_line, cpp_expand_to_buffer,\n+\tcheck_macro_name, cpp_pfatal_with_name, cpp_file_line_for_message,\n+\tfind_include_file, deps_output, include_hash): Constify a char*.\n+\n+\t* cppmain.c (progname): Constify.\n+\t(main): Add prototype.  Use return, not exit.\n+\n+\t* fix-header.c (fatal, add_symbols, lookup_std_proto, write_lbrac,\n+\trecognized_macro, check_macro_names, read_scan_file, write_rbrac,\n+\tinf_skip_spaces, inf_read_upto, inf_scan_ident, inf_scan_ident,\n+\tcheck_protection): Add static prototype.\n+\t(xfree): Remove.\n+\t(progname, recognized_macrom, recognized_extern): Constify a char*.\n+\t(main): Add prototype.\n+\n+\t* gen-protos.c (progname): Constify a char*.\n+\n Tue Sep  7 00:47:52 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* emit-rtl.c (free_emit_status): Take decl as a parameter."}, {"sha": "99c5a5d913c91c8616d4f1a238de5bfd7ff5c402", "filename": "gcc/cpperror.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -81,7 +81,7 @@ cpp_print_containing_files (pfile)\n void\n cpp_file_line_for_message (pfile, filename, line, column)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n-     char *filename;\n+     const char *filename;\n      int line, column;\n {\n   if (column > 0)"}, {"sha": "f42e0b9a0752c5924bdf674627f6b0b77835c2e8", "filename": "gcc/cppexp.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -79,6 +79,10 @@ Written by Per Bothner 1994.  */\n static void integer_overflow PARAMS ((cpp_reader *));\n static HOST_WIDEST_INT left_shift PARAMS ((cpp_reader *, HOST_WIDEST_INT, int, unsigned HOST_WIDEST_INT));\n static HOST_WIDEST_INT right_shift PARAMS ((cpp_reader *, HOST_WIDEST_INT, int, unsigned HOST_WIDEST_INT));\n+static struct operation parse_number PARAMS ((cpp_reader *, U_CHAR *, U_CHAR *));\n+static struct operation parse_charconst PARAMS ((cpp_reader *, U_CHAR *, U_CHAR *));\n+static struct operation cpp_lex PARAMS ((cpp_reader *, int));\n+extern HOST_WIDEST_INT cpp_parse_expr PARAMS ((cpp_reader *));\n \n #define ERROR 299\n #define OROR 300\n@@ -325,7 +329,7 @@ parse_charconst (pfile, start, end)\n   /* If char type is signed, sign-extend the constant.  */\n   num_bits = num_chars * width;\n       \n-  if (cpp_lookup (pfile, (U_CHAR *)\"__CHAR_UNSIGNED__\",\n+  if (cpp_lookup (pfile, (const U_CHAR *)\"__CHAR_UNSIGNED__\",\n \t\t  sizeof (\"__CHAR_UNSIGNED__\")-1, -1)\n       || ((result >> (num_bits - 1)) & 1) == 0)\n     op.value = result & ((unsigned HOST_WIDEST_INT) ~0\n@@ -346,7 +350,7 @@ parse_charconst (pfile, start, end)\n \n \n struct token {\n-  char *operator;\n+  const char *operator;\n   int token;\n };\n "}, {"sha": "2aa2eebdeb0e0ef4a406db8793748e900cbb5a28", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -43,10 +43,14 @@ static char *remap_filename \t\tPROTO ((cpp_reader *, char *,\n \t\t\t\t\t\tstruct file_name_list *));\n static long read_and_prescan\t\tPROTO ((cpp_reader *, cpp_buffer *,\n \t\t\t\t\t\tint, size_t));\n-static struct file_name_list *actual_directory PROTO ((cpp_reader *, char *));\n-\n+static struct file_name_list *actual_directory PROTO ((cpp_reader *,\n+\t\t\t\t\t\t       const char *));\n static void initialize_input_buffer\tPROTO ((cpp_reader *, int,\n \t\t\t\t\t\tstruct stat *));\n+static int file_cleanup\t\t\tPROTO ((cpp_buffer *, cpp_reader *));\n+static void find_position\t\tPROTO ((U_CHAR *, U_CHAR *,\n+\t\t\t\t\t\tunsigned long *,\n+\t\t\t\t\t\tunsigned long *));\n \n #if 0\n static void hack_vms_include_specification PROTO ((char *));\n@@ -199,12 +203,12 @@ merge_include_chains (opts)\n struct include_hash *\n include_hash (pfile, fname, add)\n      cpp_reader *pfile;\n-     char *fname;\n+     const char *fname;\n      int add;\n {\n   unsigned int hash = 0;\n   struct include_hash *l, *m;\n-  char *f = fname;\n+  const char *f = fname;\n \n   while (*f)\n     hash += *f++;\n@@ -306,7 +310,7 @@ file_cleanup (pbuf, pfile)\n int\n find_include_file (pfile, fname, search_start, ihash, before)\n      cpp_reader *pfile;\n-     char *fname;\n+     const char *fname;\n      struct file_name_list *search_start;\n      struct include_hash **ihash;\n      int *before;\n@@ -715,7 +719,7 @@ finclude (pfile, fd, ihash)\n static struct file_name_list *\n actual_directory (pfile, fname)\n      cpp_reader *pfile;\n-     char *fname;\n+     const char *fname;\n {\n   char *last_slash, *dir;\n   size_t dlen;\n@@ -1151,7 +1155,7 @@ initialize_input_buffer (pfile, fd, st)\n void\n deps_output (pfile, string, spacer)\n      cpp_reader *pfile;\n-     char *string;\n+     const char *string;\n      int spacer;\n {\n   int size;"}, {"sha": "c75cad109c64c6a6c9fb08e550d1abcdd90444fd", "filename": "gcc/cpphash.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -34,6 +34,11 @@ static int change_newlines\t PARAMS ((U_CHAR *, int));\n static void push_macro_expansion PARAMS ((cpp_reader *,\n \t\t\t\t\t  U_CHAR *, int, HASHNODE *));\n static int unsafe_chars\t\t PARAMS ((int, int));\n+static int macro_cleanup\t PARAMS ((cpp_buffer *, cpp_reader *));\n+static enum cpp_token macarg\t PARAMS ((cpp_reader *, int));\n+static struct tm *timestamp\t PARAMS ((cpp_reader *));\n+static void special_symbol\t PARAMS ((HASHNODE *, cpp_reader *));\n+\n \n #define SKIP_WHITE_SPACE(p) do { while (is_hor_space[*p]) p++; } while (0)\n #define CPP_IS_MACRO_BUFFER(PBUF) ((PBUF)->data != NULL)\n@@ -61,6 +66,9 @@ struct arglist\n   char rest_args;\n };\n \n+static DEFINITION *collect_expansion PARAMS ((cpp_reader *, U_CHAR *, U_CHAR *,\n+\t\t\t\t\t      int, struct arglist *));\n+\n /* This structure represents one parsed argument in a macro call.\n    `raw' points to the argument text as written (`raw_length' is its length).\n    `expanded' points to the argument's macro-expansion\n@@ -203,15 +211,15 @@ delete_macro (hp)\n HASHNODE *\n cpp_install (pfile, name, len, type, value, hash)\n      cpp_reader *pfile;\n-     U_CHAR *name;\n+     const U_CHAR *name;\n      int len;\n      enum node_type type;\n      const char *value;\n      int hash;\n {\n   register HASHNODE *hp;\n   register int i, bucket;\n-  register U_CHAR *p;\n+  register const U_CHAR *p;\n \n   if (len < 0)\n     {\n@@ -594,7 +602,8 @@ create_definition (buf, limit, pfile, predefinition)\n   int sym_length;\t\t/* and how long it is */\n   int rest_args = 0;\n   long line, col;\n-  char *file = CPP_BUFFER (pfile) ? CPP_BUFFER (pfile)->nominal_fname : \"\";\n+  const char *file =\n+    CPP_BUFFER (pfile) ? CPP_BUFFER (pfile)->nominal_fname : \"\";\n   DEFINITION *defn;\n   int arglengths = 0;\t\t/* Accumulate lengths of arg names\n \t\t\t\t   plus number of args.  */\n@@ -883,7 +892,7 @@ timestamp (pfile)\n   return pfile->timebuf;\n }\n \n-static char *monthnames[] =\n+static const char * const monthnames[] =\n {\n   \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n   \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\","}, {"sha": "5422979c152f7094c6b85febc233111eb5e30b03", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -48,7 +48,7 @@ typedef struct hashnode HASHNODE;\n #define HASHSTEP(old, c) ((old << 2) + c)\n #define MAKE_POS(v) (v & 0x7fffffff) /* make number positive */\n \n-extern HASHNODE *cpp_install\t  PARAMS ((cpp_reader *, U_CHAR *, int,\n+extern HASHNODE *cpp_install\t  PARAMS ((cpp_reader *, const U_CHAR *, int,\n \t\t\t\t\t   enum node_type, const char *, int));\n extern int hashf\t\t  PARAMS ((const U_CHAR *, int, int));\n extern void delete_macro\t  PARAMS ((HASHNODE *));"}, {"sha": "e7d1426ccd596aebaa047c17f539f6243bfb3a52", "filename": "gcc/cppinit.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -85,7 +85,7 @@ extern char *version_string;\n #endif\n \n /* Suffix for object files, and known input-file extensions. */\n-static char *known_suffixes[] =\n+static const char * const known_suffixes[] =\n {\n   \".c\",  \".C\",   \".s\",   \".S\",   \".m\",\n   \".cc\", \".cxx\", \".cpp\", \".cp\",  \".c++\",\n@@ -113,8 +113,8 @@ static char *known_suffixes[] =\n \n static struct default_include\n {\n-  char *fname;\t\t\t/* The name of the directory.  */\n-  char *component;\t\t/* The component containing the directory\n+  const char *fname;\t\t/* The name of the directory.  */\n+  const char *component;\t/* The component containing the directory\n \t\t\t\t   (see update_path in prefix.c) */\n   int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n   int cxx_aware;\t\t/* Includes in this directory don't need to\n@@ -203,6 +203,9 @@ static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct cpp_pending *,\n \t\t\t\t\t\t char *, int));\n+static char *base_name\t\t\tPARAMS ((const char *));\n+static void dump_special_to_buffer\tPARAMS ((cpp_reader *, const char *));\n+static void initialize_dependency_output PARAMS ((cpp_reader *));\n \n /* Last argument to append_include_chain: chain to use */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n@@ -501,7 +504,7 @@ append_include_chain (pfile, pend, dir, path)\n static void\n dump_special_to_buffer (pfile, macro_name)\n      cpp_reader *pfile;\n-     char *macro_name;\n+     const char *macro_name;\n {\n   static char define_directive[] = \"#define \";\n   int macro_name_length = strlen (macro_name);\n@@ -614,7 +617,7 @@ static void\n initialize_builtins (pfile)\n      cpp_reader *pfile;\n {\n-#define NAME(str) (U_CHAR *)str, sizeof str - 1\n+#define NAME(str) (const U_CHAR *)str, sizeof str - 1\n   cpp_install (pfile, NAME(\"__TIME__\"),\t\t  T_TIME,\t0, -1);\n   cpp_install (pfile, NAME(\"__DATE__\"),\t\t  T_DATE,\t0, -1);\n   cpp_install (pfile, NAME(\"__FILE__\"),\t\t  T_FILE,\t0, -1);\n@@ -938,8 +941,8 @@ cpp_start_read (pfile, fname)\n \t      || (opts->cplusplus\n \t\t  && !opts->no_standard_cplusplus_includes))\n \t    {\n-\t      char *str = (char *) update_path (p->fname, p->component);\n-\t      str = xstrdup (str);  /* XXX Potential memory leak! */\n+\t      /* XXX Potential memory leak! */\n+\t      char *str = xstrdup (update_path (p->fname, p->component));\n \t      append_include_chain (pfile, opts->pending, str, SYSTEM);\n \t    }\n \t}\n@@ -1112,7 +1115,7 @@ cpp_finish (pfile)\n       /* Don't actually write the deps file if compilation has failed.  */\n       if (pfile->errors == 0)\n \t{\n-\t  char *deps_mode = opts->print_deps_append ? \"a\" : \"w\";\n+\t  const char *deps_mode = opts->print_deps_append ? \"a\" : \"w\";\n \t  if (opts->deps_file == 0)\n \t    deps_stream = stdout;\n \t  else if ((deps_stream = fopen (opts->deps_file, deps_mode)) == 0)"}, {"sha": "1c85ba791c5e07a7e0277c484522e35d23e10834", "filename": "gcc/cpplib.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -38,7 +38,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n /* Forward declarations.  */\n \n-static char *my_strerror\t\tPROTO ((int));\n+static const char *my_strerror\t\tPROTO ((int));\n static void validate_else\t\tPROTO ((cpp_reader *, const char *));\n static HOST_WIDEST_INT eval_if_expression\tPROTO ((cpp_reader *));\n \n@@ -86,6 +86,24 @@ static int do_sccs PARAMS ((cpp_reader *, const struct directive *));\n static int do_assert PARAMS ((cpp_reader *, const struct directive *));\n static int do_unassert PARAMS ((cpp_reader *, const struct directive *));\n static int do_warning PARAMS ((cpp_reader *, const struct directive *));\n+static enum cpp_token null_underflow PARAMS ((cpp_reader *));\n+static int null_cleanup PARAMS ((cpp_buffer *, cpp_reader *));\n+static int skip_comment PARAMS ((cpp_reader *, int));\n+static int copy_comment PARAMS ((cpp_reader *, int));\n+static void copy_rest_of_line PARAMS ((cpp_reader *));\n+static int handle_directive PARAMS ((cpp_reader *));\n+static void pass_thru_directive PARAMS ((const U_CHAR *, size_t, cpp_reader *,\n+\t\t\t\t\t const struct directive *));\n+static enum cpp_token get_directive_token PARAMS ((cpp_reader *));\n+static int read_line_number PARAMS ((cpp_reader *, int *));\n+static void cpp_print_file_and_line PARAMS ((cpp_reader *));\n+static void v_cpp_error PARAMS ((cpp_reader *, const char *, va_list));\n+static void v_cpp_warning PARAMS ((cpp_reader *, const char *, va_list));\n+static void v_cpp_error_with_line PARAMS ((cpp_reader *, int, int,\n+\t\t\t\t\t   const char *, va_list));\n+static void v_cpp_warning_with_line PARAMS ((cpp_reader *, int, int, const char *, va_list));\n+static U_CHAR *detect_if_not_defined PARAMS ((cpp_reader *));\n+static int consider_directive_while_skipping PARAMS ((cpp_reader *, IF_STACK_FRAME *));\n \n /* Here is the actual list of #-directives.\n    This table is ordered by frequency of occurrence; the numbers\n@@ -557,7 +575,7 @@ handle_directive (pfile)\n \n static void\n pass_thru_directive (buf, len, pfile, keyword)\n-     U_CHAR *buf;\n+     const U_CHAR *buf;\n      size_t len;\n      cpp_reader *pfile;\n      const struct directive *keyword;\n@@ -578,10 +596,10 @@ pass_thru_directive (buf, len, pfile, keyword)\n int\n check_macro_name (pfile, symname, assertion)\n      cpp_reader *pfile;\n-     U_CHAR *symname;\n+     const U_CHAR *symname;\n      int assertion;\n {\n-  U_CHAR *p;\n+  const U_CHAR *p;\n   int sym_length;\n \n   for (p = symname; is_idchar[*p]; p++)\n@@ -786,7 +804,7 @@ cpp_scan_buffer (pfile)\n void\n cpp_expand_to_buffer (pfile, buf, length)\n      cpp_reader *pfile;\n-     U_CHAR *buf;\n+     const U_CHAR *buf;\n      int length;\n {\n   register cpp_buffer *ip;\n@@ -3076,7 +3094,7 @@ parse_goto_mark (pfile)\n   ip->mark = -1;\n }\n \n-void\n+static void\n cpp_print_file_and_line (pfile)\n      cpp_reader *pfile;\n {\n@@ -3312,12 +3330,12 @@ cpp_pedwarn_with_line VPROTO ((cpp_reader * pfile, int line, int column,\n    giving specified file name and line number, not current.  */\n \n void\n-cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line,\n-\t\t\t\t\tconst char *msgid, ...))\n+cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, const char *file,\n+\t\t\t\t\tint line, const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n-  char *file;\n+  const char *file;\n   int line;\n   const char *msgid;\n #endif\n@@ -3327,7 +3345,7 @@ cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line,\n \n #ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n-  file = va_arg (ap, char *);\n+  file = va_arg (ap, const char *);\n   line = va_arg (ap, int);\n   msgid = va_arg (ap, const char *);\n #endif\n@@ -3344,11 +3362,11 @@ cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line,\n /* my_strerror - return the descriptive text associated with an\n    `errno' code.  */\n \n-static char *\n+static const char *\n my_strerror (errnum)\n      int errnum;\n {\n-  char *result;\n+  const char *result;\n \n #ifndef VMS\n #ifndef HAVE_STRERROR"}, {"sha": "619645f8c3bd0037fb108060aa37326a777f3a4d", "filename": "gcc/cpplib.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -327,7 +327,7 @@ struct cpp_options {\n   char *in_fname;\n \n   /* Name of output file, for error messages.  */\n-  char *out_fname;\n+  const char *out_fname;\n \n   struct file_name_map_list *map_list;\n \n@@ -551,14 +551,14 @@ struct include_hash\n   struct file_name_list *foundhere;\n   char *name;\t\t/* (partial) pathname of file */\n   char *nshort;\t\t/* name of file as referenced in #include */\n-  char *control_macro;\t/* macro, if any, preventing reinclusion - see\n-\t\t\t   redundant_include_p */\n+  const char *control_macro; /* macro, if any, preventing reinclusion - see\n+\t\t\t\tredundant_include_p */\n   char *buf, *limit;\t/* for file content cache, not yet implemented */\n };\n \n /* Name under which this program was invoked.  */\n \n-extern char *progname;\n+extern const char *progname;\n \n /* The structure of a node in the hash table.  The hash table\n    has entries for all tokens defined by #define commands (type T_MACRO),\n@@ -641,7 +641,7 @@ struct definition {\n \t\t\t\t/* came from the command line */\n   unsigned char *expansion;\n   int line;\t\t\t/* Line number of definition */\n-  char *file;\t\t\t/* File of definition */\n+  const char *file;\t\t/* File of definition */\n   char rest_args;\t\t/* Nonzero if last arg. absorbs the rest */\n   struct reflist {\n     struct reflist *next;\n@@ -711,7 +711,7 @@ extern void cpp_warning_with_line PVPROTO ((cpp_reader *, int, int, const char *\n   ATTRIBUTE_PRINTF_4;\n extern void cpp_pedwarn_with_line PVPROTO ((cpp_reader *, int, int, const char *, ...))\n   ATTRIBUTE_PRINTF_4;\n-extern void cpp_pedwarn_with_file_and_line PVPROTO ((cpp_reader *, char *, int, const char *, ...))\n+extern void cpp_pedwarn_with_file_and_line PVPROTO ((cpp_reader *, const char *, int, const char *, ...))\n   ATTRIBUTE_PRINTF_4;\n extern void cpp_message_from_errno PROTO ((cpp_reader *, int, const char *));\n extern void cpp_error_from_errno PROTO ((cpp_reader *, const char *));\n@@ -735,9 +735,10 @@ extern void skip_rest_of_line PARAMS ((cpp_reader *));\n extern void cpp_finish PARAMS ((cpp_reader *));\n \n extern void quote_string\t\tPARAMS ((cpp_reader *, const char *));\n-extern void cpp_expand_to_buffer\tPARAMS ((cpp_reader *, U_CHAR *, int));\n+extern void cpp_expand_to_buffer\tPARAMS ((cpp_reader *, const U_CHAR *,\n+\t\t\t\t\t\t int));\n extern void cpp_scan_buffer\t\tPARAMS ((cpp_reader *));\n-extern int check_macro_name\t\tPARAMS ((cpp_reader *, U_CHAR *, int));\n+extern int check_macro_name\t\tPARAMS ((cpp_reader *, const U_CHAR *, int));\n \n /* Last arg to output_line_command.  */\n enum file_change_code {same_file, enter_file, leave_file};\n@@ -749,22 +750,25 @@ extern void cpp_fatal PVPROTO ((cpp_reader *, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n extern void cpp_message PVPROTO ((cpp_reader *, int, const char *, ...))\n   ATTRIBUTE_PRINTF_3;\n-extern void cpp_pfatal_with_name PROTO ((cpp_reader *, const char *));\n-extern void cpp_file_line_for_message PROTO ((cpp_reader *, char *, int, int));\n+extern void cpp_pfatal_with_name PROTO ((cpp_reader *, const char *))\n+  ATTRIBUTE_NORETURN;\n+extern void cpp_file_line_for_message PROTO ((cpp_reader *, const char *,\n+\t\t\t\t\t      int, int));\n extern void cpp_print_containing_files PROTO ((cpp_reader *));\n extern void cpp_notice PVPROTO ((const char *msgid, ...)) ATTRIBUTE_PRINTF_1;\n \n /* In cppfiles.c */\n extern void simplify_pathname\t\tPROTO ((char *));\n extern void merge_include_chains\tPROTO ((struct cpp_options *));\n-extern int find_include_file\t\tPROTO ((cpp_reader *, char *,\n+extern int find_include_file\t\tPROTO ((cpp_reader *, const char *,\n \t\t\t\t\t\tstruct file_name_list *,\n \t\t\t\t\t\tstruct include_hash **,\n \t\t\t\t\t\tint *));\n extern int finclude\t\t\tPROTO ((cpp_reader *, int,\n \t\t\t\t\t        struct include_hash *));\n-extern void deps_output\t\t\tPROTO ((cpp_reader *, char *, int));\n-extern struct include_hash *include_hash PROTO ((cpp_reader *, char *, int));\n+extern void deps_output\t\t\tPROTO ((cpp_reader *,\n+\t\t\t\t\t\tconst char *, int));\n+extern struct include_hash *include_hash PROTO ((cpp_reader *, const char *, int));\n \n #ifndef INCLUDE_LEN_FUDGE\n #define INCLUDE_LEN_FUDGE 0"}, {"sha": "c0dec16d2c74a3c539d24162829180f1be131b04", "filename": "gcc/cppmain.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -32,12 +32,13 @@ extern char *getenv ();\n #include \"cpplib.h\"\n #include \"intl.h\"\n \n-char *progname;\n+const char *progname;\n \n cpp_reader parse_in;\n cpp_options options;\n \n \f\n+extern int main\t\t\t\tPARAMS ((int, char **));\n int\n main (argc, argv)\n      int argc;\n@@ -67,12 +68,12 @@ main (argc, argv)\n   if (argi < argc && ! CPP_FATAL_ERRORS (&parse_in))\n     cpp_fatal (&parse_in, \"Invalid option `%s'\", argv[argi]);\n   if (CPP_FATAL_ERRORS (&parse_in))\n-    exit (FATAL_EXIT_CODE);\n+    return (FATAL_EXIT_CODE);\n       \n   parse_in.show_column = 1;\n \n   if (! cpp_start_read (&parse_in, opts->in_fname))\n-    exit (FATAL_EXIT_CODE);\n+    return (FATAL_EXIT_CODE);\n \n   /* Now that we know the input file is valid, open the output.  */\n \n@@ -117,6 +118,6 @@ main (argc, argv)\n     cpp_pfatal_with_name (&parse_in, opts->out_fname);\n \n   if (parse_in.errors)\n-    exit (FATAL_EXIT_CODE);\n-  exit (SUCCESS_EXIT_CODE);\n+    return (FATAL_EXIT_CODE);\n+  return (SUCCESS_EXIT_CODE);\n }"}, {"sha": "c789e99784dc747620125584c8434e66887493aa", "filename": "gcc/fix-header.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -78,7 +78,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpphash.h\"\n \n static void v_fatal PROTO ((const char *, va_list)) ATTRIBUTE_NORETURN;\n-void fatal PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+static void fatal PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n \n sstring buf;\n \n@@ -187,7 +187,19 @@ struct symbol_list {\n struct symbol_list symbol_table[SYMBOL_TABLE_SIZE];\n int cur_symbol_table_size;\n \n-void\n+static void add_symbols PROTO ((symbol_flags, namelist));\n+static struct fn_decl *lookup_std_proto PROTO ((const char *, int));\n+static void write_lbrac PROTO ((void));\n+static void recognized_macro PROTO ((const char *));\n+static void check_macro_names PROTO ((cpp_reader *, namelist));\n+static void read_scan_file PROTO ((char *, int, char **));\n+static void write_rbrac PROTO ((void));\n+static int inf_skip_spaces PROTO ((int));\n+static int inf_read_upto PROTO ((sstring *, int));\n+static int inf_scan_ident PROTO ((sstring *, int));\n+static int check_protection PROTO ((int *, int *));\n+\n+static void\n add_symbols (flags, names)\n      symbol_flags flags;\n      namelist names;\n@@ -358,22 +370,13 @@ int seen_errno = 0;\n /* The following are only used when handling stdlib.h */\n int seen_EXIT_FAILURE = 0, seen_EXIT_SUCCESS = 0;\n \f\n-/* Wrapper around free, to avoid prototype clashes.  */\n-\n-void\n-xfree (ptr)\n-     char *ptr;\n-{\n-  free (ptr);\n-}\n-\n #define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free xfree\n+#define obstack_chunk_free free\n struct obstack scan_file_obstack;\n \n /* NOTE:  If you edit this, also edit gen-protos.c !! */\n \n-struct fn_decl *\n+static struct fn_decl *\n lookup_std_proto (name, name_length)\n      const char *name;\n      int name_length;\n@@ -397,7 +400,7 @@ lookup_std_proto (name, name_length)\n \n char *inc_filename;\n int inc_filename_length;\n-char *progname = \"fix-header\";\n+const char *progname = \"fix-header\";\n FILE *outf;\n sstring line;\n \n@@ -406,7 +409,7 @@ int lbrac_line, rbrac_line;\n int required_unseen_count = 0;\n int required_other = 0;\n \n-void \n+static void \n write_lbrac ()\n {\n   \n@@ -443,9 +446,9 @@ struct partial_proto required_dummy_proto, seen_dummy_proto;\n #define SET_SEEN(FN) ((FN)->partial = &seen_dummy_proto)\n #define SEEN(FN) ((FN)->partial == &seen_dummy_proto)\n \n-void\n+static void\n recognized_macro (fname)\n-     char *fname;\n+     const char *fname;\n {\n   /* The original include file defines fname as a macro.  */\n   struct fn_decl *fn = lookup_std_proto (fname, strlen (fname));\n@@ -496,8 +499,8 @@ recognized_macro (fname)\n void\n recognized_extern (name, name_length, type, type_length)\n      char *name;\n-     char *type;\n-     int name_length, type_length;\n+     char *type ATTRIBUTE_UNUSED;\n+     int name_length, type_length ATTRIBUTE_UNUSED;\n {\n   switch (special_file_handling)\n     {\n@@ -594,7 +597,7 @@ recognized_function (fname, fname_length,\n /* For any name in NAMES that is defined as a macro,\n    call recognized_macro on it.  */\n \n-void\n+static void\n check_macro_names (pfile, names)\n      cpp_reader *pfile;\n      namelist names;\n@@ -607,7 +610,7 @@ check_macro_names (pfile, names)\n     }\n }\n \n-void\n+static void\n read_scan_file (in_fname, argc, argv)\n      char *in_fname;\n      int argc;\n@@ -728,7 +731,7 @@ read_scan_file (in_fname, argc, argv)\n     }\n }\n \n-void\n+static void\n write_rbrac ()\n {\n   struct fn_decl *fn;\n@@ -871,7 +874,7 @@ write_rbrac ()\n #define INF_GET() (inf_ptr < inf_limit ? *(unsigned char *) inf_ptr++ : EOF)\n #define INF_UNGET(c) ((c)!=EOF && inf_ptr--)\n \n-int\n+static int\n inf_skip_spaces (c)\n      int c;\n {\n@@ -910,7 +913,7 @@ inf_skip_spaces (c)\n \n /* Read into STR from inf_buffer upto DELIM.  */\n \n-int\n+static int\n inf_read_upto (str, delim)\n      sstring *str;\n      int delim;\n@@ -928,7 +931,7 @@ inf_read_upto (str, delim)\n   return ch;\n }\n \n-int\n+static int\n inf_scan_ident (s, c)\n      register sstring *s;\n      int c;\n@@ -954,7 +957,7 @@ inf_scan_ident (s, c)\n    and setting *endif_line to the final #endif.\n    Otherwise return 0.  */\n \n-int\n+static int\n check_protection (ifndef_line, endif_line)\n      int *ifndef_line, *endif_line;\n {\n@@ -1059,6 +1062,8 @@ check_protection (ifndef_line, endif_line)\n   return 1;\n }\n \n+extern int main\t\t\tPROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -1314,7 +1319,7 @@ v_fatal (str, ap)\n   exit (FATAL_EXIT_CODE);\n }\n \n-void\n+static void\n fatal VPROTO ((const char *str, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "5c1f51c4cbe79f9c5b9979814d6dc92efb324a5a", "filename": "gcc/gen-protos.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fgen-protos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c/gcc%2Fgen-protos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgen-protos.c?ref=bcc5cac9a73b8d8903cd5b7ac7e789dfb26e1a7c", "patch": "@@ -23,7 +23,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #undef abort\n \n int verbose = 0;\n-char *progname;\n+const char *progname;\n \n #define HASH_SIZE 2503 /* a prime */\n int hash_tab[HASH_SIZE];"}]}