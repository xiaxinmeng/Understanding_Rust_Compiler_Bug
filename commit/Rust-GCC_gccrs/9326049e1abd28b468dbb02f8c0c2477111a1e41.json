{"sha": "9326049e1abd28b468dbb02f8c0c2477111a1e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyNjA0OWUxYWJkMjhiNDY4ZGJiMDJmOGMwYzI0NzcxMTFhMWU0MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-01T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-01T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "f22706da81bddd5c757a31cb82cc5bc5ea10e7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f22706da81bddd5c757a31cb82cc5bc5ea10e7f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9326049e1abd28b468dbb02f8c0c2477111a1e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9326049e1abd28b468dbb02f8c0c2477111a1e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9326049e1abd28b468dbb02f8c0c2477111a1e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9326049e1abd28b468dbb02f8c0c2477111a1e41/comments", "author": null, "committer": null, "parents": [{"sha": "237dde3d03c573eb13c0e765520ee4b713aa2c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237dde3d03c573eb13c0e765520ee4b713aa2c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237dde3d03c573eb13c0e765520ee4b713aa2c7e"}], "stats": {"total": 454, "additions": 453, "deletions": 1}, "files": [{"sha": "d147da722ecfdb2416bfcedc5d5e426bcd15436b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9326049e1abd28b468dbb02f8c0c2477111a1e41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9326049e1abd28b468dbb02f8c0c2477111a1e41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9326049e1abd28b468dbb02f8c0c2477111a1e41", "patch": "@@ -1,3 +1,282 @@\n+2021-04-30  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add\n+\tfloat_ml[as][q]_laneq builtin generator macros.\n+\t* config/aarch64/aarch64-simd.md (mul_laneq<mode>3): Define.\n+\t(aarch64_float_mla_laneq<mode>): Define.\n+\t(aarch64_float_mls_laneq<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmla_laneq_f32): Use RTL builtin\n+\tinstead of GCC vector extensions.\n+\t(vmlaq_laneq_f32): Likewise.\n+\t(vmls_laneq_f32): Likewise.\n+\t(vmlsq_laneq_f32): Likewise.\n+\n+2021-04-30  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add\n+\tfloat_ml[as]_lane builtin generator macros.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_mul3_elt<mode>):\n+\tRename to...\n+\t(mul_lane<mode>3): This, and re-order arguments.\n+\t(aarch64_float_mla_lane<mode>): Define.\n+\t(aarch64_float_mls_lane<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmla_lane_f32): Use RTL builtin\n+\tinstead of GCC vector extensions.\n+\t(vmlaq_lane_f32): Likewise.\n+\t(vmls_lane_f32): Likewise.\n+\t(vmlsq_lane_f32): Likewise.\n+\n+2021-04-30  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add float_ml[as]\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_float_mla<mode>):\n+\tDefine.\n+\t(aarch64_float_mls<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmla_f32): Use RTL builtin\n+\tinstead of relying on GCC vector extensions.\n+\t(vmla_f64): Likewise.\n+\t(vmlaq_f32): Likewise.\n+\t(vmlaq_f64): Likewise.\n+\t(vmls_f32): Likewise.\n+\t(vmls_f64): Likewise.\n+\t(vmlsq_f32): Likewise.\n+\t(vmlsq_f64): Likewise.\n+\t* config/aarch64/iterators.md: Define VDQF_DF mode iterator.\n+\n+2021-04-30  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add\n+\tfloat_ml[as]_n_builtin generator macros.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_mul3_elt_from_dup<mode>):\n+\tRename to...\n+\t(mul_n<mode>3): This, and re-order arguments.\n+\t(aarch64_float_mla_n<mode>): Define.\n+\t(aarch64_float_mls_n<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmla_n_f32): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlaq_n_f32): Likewise.\n+\t(vmls_n_f32): Likewise.\n+\t(vmlsq_n_f32): Likewise.\n+\n+2021-04-30  Jonathan Wright  <joanthan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add pmull[2]\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_pmullv8qi): Define.\n+\t(aarch64_pmull_hiv16qi_insn): Define.\n+\t(aarch64_pmull_hiv16qi): Define.\n+\t* config/aarch64/arm_neon.h (vmull_high_p8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmull_p8): Likewise.\n+\n+2021-04-30  Senthil Kumar Selvaraj  <saaadhu@gcc.gnu.org>\n+\n+\t* config/avr/avr.md: Adjust peepholes to match and\n+\tgenerate parallels with clobber of REG_CC.\n+\t(mov<mode>_insn): Rename to mov<mode>_insn_split.\n+\t(*mov<mode>_insn): Rename to mov<mode>_insn.\n+\n+2021-04-30  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* varasm.c (use_blocks_for_decl_p): Don't use section anchors\n+\tfor VAR_DECLs if -fdata-sections enabled.\n+\n+2021-04-30  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR bootstrap/100327\n+\t* config/rs6000/rs6000.c\n+\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Define.\n+\t(rs6000_libgcc_floating_mode_supported_p): New target hook.\n+\n+2021-04-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (class thread_jumps): Split out code\n+\tfrom here...\n+\t(class back_threader_registry): ...to here...\n+\t(class back_threader_profitability): ...and here...\n+\t(thread_jumps::thread_through_all_blocks): Remove argument.\n+\t(back_threader_registry::back_threader_registry): New.\n+\t(back_threader_registry::~back_threader_registry): New.\n+\t(back_threader_registry::thread_through_all_blocks): New.\n+\t(thread_jumps::profitable_jump_thread_path): Move from here...\n+\t(back_threader_profitability::profitable_path_p): ...to here.\n+\t(thread_jumps::find_taken_edge): New.\n+\t(thread_jumps::convert_and_register_current_path): Move...\n+\t(back_threader_registry::register_path): ...to here.\n+\t(thread_jumps::register_jump_thread_path_if_profitable): Move...\n+\t(thread_jumps::maybe_register_path): ...to here.\n+\t(thread_jumps::handle_phi): Call find_taken_edge and\n+\tmaybe_register_path.\n+\t(thread_jumps::handle_assignment): Same.\n+\t(thread_jumps::fsm_find_control_statement_thread_paths): Remove\n+\ttree argument to handle_phi and handle_assignment.\n+\t(thread_jumps::find_jump_threads_backwards): Set m_name.  Remove\n+\tset of m_speed_p and m_max_threaded_paths.\n+\t(pass_thread_jumps::execute): Remove second argument from\n+\tfind_jump_threads_backwards.\n+\t(pass_early_thread_jumps::execute): Same.\n+\n+2021-04-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-dom.c (class dom_jump_threader_simplifier): New.\n+\t(class dom_opt_dom_walker): Initialize some class variables.\n+\t(pass_dominator::execute): Pass evrp_range_analyzer and\n+\tdom_jump_threader_simplifier to dom_opt_dom_walker.\n+\tAdjust for some functions moving into classes.\n+\t(simplify_stmt_for_jump_threading): Adjust and move to...\n+\t(jump_threader_simplifier::simplify): ...here.\n+\t(dom_opt_dom_walker::before_dom_children): Adjust for\n+\tm_evrp_range_analyzer.\n+\t(dom_opt_dom_walker::after_dom_children): Remove x_vr_values hack.\n+\t(test_for_singularity): Place in dom_opt_dom_walker class.\n+\t(dom_opt_dom_walker::optimize_stmt): The argument\n+\tevrp_range_analyzer is now a class field.\n+\t* tree-ssa-threadbackward.c (class thread_jumps): Add m_registry.\n+\t(thread_jumps::thread_through_all_blocks): New.\n+\t(thread_jumps::convert_and_register_current_path): Use m_registry.\n+\t(pass_thread_jumps::execute): Adjust for thread_through_all_blocks\n+\tbeing in the threader class.\n+\t(pass_early_thread_jumps::execute): Same.\n+\t* tree-ssa-threadedge.c (threadedge_initialize_values): Move...\n+\t(jump_threader::jump_threader): ...here.\n+\t(threadedge_finalize_values): Move...\n+\t(jump_threader::~jump_threader): ...here.\n+\t(jump_threader::remove_jump_threads_including): New.\n+\t(jump_threader::thread_through_all_blocks): New.\n+\t(record_temporary_equivalences_from_phis): Move...\n+\t(jump_threader::record_temporary_equivalences_from_phis): ...here.\n+\t(record_temporary_equivalences_from_stmts_at_dest): Move...\n+\t(jump_threader::record_temporary_equivalences_from_stmts_at_dest):\n+\tHere...\n+\t(simplify_control_stmt_condition_1): Move to jump_threader class.\n+\t(simplify_control_stmt_condition): Move...\n+\t(jump_threader::simplify_control_stmt_condition): ...here.\n+\t(thread_around_empty_blocks): Move...\n+\t(jump_threader::thread_around_empty_blocks): ...here.\n+\t(thread_through_normal_block): Move...\n+\t(jump_threader::thread_through_normal_block): ...here.\n+\t(thread_across_edge): Move...\n+\t(jump_threader::thread_across_edge): ...here.\n+\t(thread_outgoing_edges): Move...\n+\t(jump_threader::thread_outgoing_edges): ...here.\n+\t* tree-ssa-threadedge.h: Move externally facing functings...\n+\t(class jump_threader): ...here...\n+\t(class jump_threader_simplifier): ...and here.\n+\t* tree-ssa-threadupdate.c (struct redirection_data): Remove comment.\n+\t(jump_thread_path_allocator::jump_thread_path_allocator): New.\n+\t(jump_thread_path_allocator::~jump_thread_path_allocator): New.\n+\t(jump_thread_path_allocator::allocate_thread_edge): New.\n+\t(jump_thread_path_allocator::allocate_thread_path): New.\n+\t(jump_thread_path_registry::jump_thread_path_registry): New.\n+\t(jump_thread_path_registry::~jump_thread_path_registry): New.\n+\t(jump_thread_path_registry::allocate_thread_edge): New.\n+\t(jump_thread_path_registry::allocate_thread_path): New.\n+\t(dump_jump_thread_path): Make extern.\n+\t(debug (const vec<jump_thread_edge *> &path)): New.\n+\t(struct removed_edges): Move to tree-ssa-threadupdate.h.\n+\t(struct thread_stats_d): Remove.\n+\t(remove_ctrl_stmt_and_useless_edges): Make static.\n+\t(lookup_redirection_data): Move...\n+\t(jump_thread_path_registry::lookup_redirection_data): ...here.\n+\t(ssa_redirect_edges): Make static.\n+\t(thread_block_1): Move...\n+\t(jump_thread_path_registry::thread_block_1): ...here.\n+\t(thread_block): Move...\n+\t(jump_thread_path_registry::thread_block): ...here.\n+\t(thread_through_loop_header):  Move...\n+\t(jump_thread_path_registry::thread_through_loop_header): ...here.\n+\t(mark_threaded_blocks): Move...\n+\t(jump_thread_path_registry::mark_threaded_blocks): ...here.\n+\t(debug_path): Move...\n+\t(jump_thread_path_registry::debug_path): ...here.\n+\t(debug_all_paths): Move...\n+\t(jump_thread_path_registry::dump): ..here.\n+\t(rewire_first_differing_edge): Move...\n+\t(jump_thread_path_registry::rewire_first_differing_edge): ...here.\n+\t(adjust_paths_after_duplication): Move...\n+\t(jump_thread_path_registry::adjust_paths_after_duplication): ...here.\n+\t(duplicate_thread_path): Move...\n+\t(jump_thread_path_registry::duplicate_thread_path): ..here.\n+\t(remove_jump_threads_including): Move...\n+\t(jump_thread_path_registry::remove_jump_threads_including): ...here.\n+\t(thread_through_all_blocks): Move to...\n+\t(jump_thread_path_registry::thread_through_all_blocks): ...here.\n+\t(delete_jump_thread_path): Remove.\n+\t(register_jump_thread): Move...\n+\t(jump_thread_path_registry::register_jump_thread): ...here.\n+\t* tree-ssa-threadupdate.h: Move externally facing functions...\n+\t(class jump_thread_path_allocator): ...here...\n+\t(class jump_thread_path_registry): ...and here.\n+\t(thread_through_all_blocks): Remove.\n+\t(struct removed_edges): New.\n+\t(register_jump_thread): Remove.\n+\t(remove_jump_threads_including): Remove.\n+\t(delete_jump_thread_path): Remove.\n+\t(remove_ctrl_stmt_and_useless_edges): Remove.\n+\t(free_dom_edge_info): New prototype.\n+\t* tree-vrp.c: Remove x_vr_values hack.\n+\t(class vrp_jump_threader_simplifier): New.\n+\t(vrp_jump_threader_simplifier::simplify): New.\n+\t(vrp_jump_threader::vrp_jump_threader): Adjust method signature.\n+\tRemove m_dummy_cond.\n+\tInstantiate m_simplifier and m_threader.\n+\t(vrp_jump_threader::thread_through_all_blocks): New.\n+\t(vrp_jump_threader::simplify_stmt): Remove.\n+\t(vrp_jump_threader::after_dom_children): Do not set m_dummy_cond.\n+\tRemove x_vr_values hack.\n+\t(execute_vrp): Adjust for thread_through_all_blocks being in a\n+\tclass.\n+\n+2021-04-30  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* genflags.c (gen_insn): Print failed expansion string.\n+\n+2021-04-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* expr.c (alignment_for_piecewise_move): Call mode_for_size\n+\twithout limit to MAX_FIXED_MODE_SIZE.\n+\n+2021-04-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* builtins.c (builtin_memset_gen_str): Don't use return from\n+\tsimplify_gen_subreg.\n+\n+2021-04-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98060\n+\t* config/i386/i386.md (*add<mode>3_carry_0r): New insn pattern.\n+\t(*addsi3_carry_zext_0r): Ditto.\n+\t(*sub<mode>3_carry_0): Ditto.\n+\t(*subsi3_carry_zext_0r): Ditto.\n+\t* config/i386/predicates.md (ix86_carry_flag_unset_operator):\n+\tNew predicate.\n+\t* config/i386/i386.c (ix86_rtx_costs) <case PLUS, case MINUS>:\n+\tAlso consider ix86_carry_flag_unset_operator to calculate\n+\tthe cost of adc/sbb insn.\n+\n+2021-04-30  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\tPR rtl-optimization/100225\n+\tPR rtl-optimization/84878\n+\t* modulo-sched.c (sms_schedule): Use note_stores to skip loops\n+\twhere we have an instruction which touches (writes) any hard\n+\tregister from df->regular_block_artificial_uses set.\n+\tAllow not-single-set instruction only right before basic block\n+\ttail.\n+\n+2021-04-30  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/riscv/riscv.opt (march=,mabi=): Negative itself.\n+\n+2021-04-30  LevyHsu  <admin@levyhsu.com>\n+\n+\t* config/riscv/riscv.c (riscv_min_arithmetic_precision): New.\n+\t* config/riscv/riscv.h (TARGET_MIN_ARITHMETIC_PRECISION): New.\n+\t* config/riscv/riscv.md (addv<mode>4, uaddv<mode>4): New.\n+\t(subv<mode>4, usubv<mode>4, mulv<mode>4, umulv<mode>4): New.\n+\n 2021-04-29  Alexandre Oliva  <oliva@adacore.com>\n \n \t* config.gcc: Merged x86 and x86_64 cpu_type-setting cases."}, {"sha": "e86ec869849c5a8edb771cb638c9a5caae108e11", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9326049e1abd28b468dbb02f8c0c2477111a1e41/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9326049e1abd28b468dbb02f8c0c2477111a1e41/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9326049e1abd28b468dbb02f8c0c2477111a1e41", "patch": "@@ -1 +1 @@\n-20210430\n+20210501"}, {"sha": "b26c655d42a3635deaef3cccca978824acdd26c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9326049e1abd28b468dbb02f8c0c2477111a1e41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9326049e1abd28b468dbb02f8c0c2477111a1e41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9326049e1abd28b468dbb02f8c0c2477111a1e41", "patch": "@@ -1,3 +1,31 @@\n+2021-04-30  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmla_float_not_fused.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmls_float_not_fused.c:\n+\tNew test.\n+\n+2021-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/98032\n+\t* g++.dg/pr98032.C: New testcase.\n+\n+2021-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96513\n+\t* gcc.dg/torture/pr96513.c: New testcase.\n+\n+2021-04-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98060\n+\t* gcc.target/i386/pr98060.c: New test.\n+\n+2021-04-30  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\tPR rtl-optimization/100225\n+\tPR rtl-optimization/84878\n+\t* gcc.dg/pr100225.c: New test.\n+\n 2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/82359"}, {"sha": "18a46caee6352dc66438f631e8a2c893d4b6e862", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9326049e1abd28b468dbb02f8c0c2477111a1e41/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9326049e1abd28b468dbb02f8c0c2477111a1e41/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9326049e1abd28b468dbb02f8c0c2477111a1e41", "patch": "@@ -1,3 +1,7 @@\n+2021-04-30  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/atomic_capture-3.c: New test.\n+\n 2021-04-29  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.c/pr81778.c: New test."}, {"sha": "b2c59bb51ab24bbbee9fed0755580b7d34fb0234", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9326049e1abd28b468dbb02f8c0c2477111a1e41/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9326049e1abd28b468dbb02f8c0c2477111a1e41/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9326049e1abd28b468dbb02f8c0c2477111a1e41", "patch": "@@ -1,3 +1,144 @@\n+2021-04-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__non_propating_cache): Define\n+\tas per P2328.\n+\t(join_view): Remove constraints on the value and reference types\n+\tof the wrapped iterator type as per P2328.\n+\t(join_view::_Iterator::_M_satisfy): Adjust as per P2328.\n+\t(join_view::_Iterator::operator++): Likewise.\n+\t(join_view::_M_inner): Use __non_propating_cache as per P2328.\n+\tRemove now-redundant use of __maybe_present_t.\n+\t* testsuite/std/ranges/adaptors/join.cc: Include <array>.\n+\t(test10): New test.\n+\n+2021-04-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (__cpp_lib_constexpr_string):\n+\tOnly define for C++17 and later.\n+\t* include/std/version (__cpp_lib_semaphore): Fix condition\n+\tto match the one in <semaphore>.\n+\n+2021-04-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_INT64_T): Delete.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Do not use GLIBCXX_CHECK_INT64_T.\n+\t* include/bits/postypes.h: Remove include of <stdint.h> and\n+\tdefinition/undefinition of the __STDC_LIMIT_MACROS and\n+\t__STDC_CONSTANT_MACROS macros.\n+\t(streamoff): Use __INT64_TYPE__ if defined.\n+\n+2021-04-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (split_view::_InnerIter::operator++):\n+\tDepend on _Base instead of _Vp directly, as per LWG 3532.\n+\n+2021-04-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_util.h (subrange::subrange): Avoid\n+\tlist-initialization in delegating constructor.\n+\t* include/std/ranges (single_view): Replace implicit guide\n+\twith explicit deduction guide that decays its argument.\n+\t(_Single::operator()): Avoid CTAD when constructing the\n+\tsingle_view object.\n+\t(_Iota::operator()): Avoid list-initialization.\n+\t(__detail::__can_filter_view, _Filter::operator()): Likewise.\n+\t(__detail::__can_transform_view, _Transform::operator()): Likewise.\n+\t(take_view::begin): Likewise.\n+\t(__detail::__can_take_view, _Take::operator()): Likewise.\n+\t(__detail::__can_take_while_view, _TakeWhile::operator()): Likewise.\n+\t(__detail::__can_drop_view, _Drop::operator()): Likewise.\n+\t(__detail::__can_drop_while_view, _DropWhile::operator()): Likewise.\n+\t(split_view::split_view): Use views::single when initializing\n+\t_M_pattern.\n+\t(__detail::__can_split_view, _Split::operator()): Avoid\n+\tlist-initialization.\n+\t(_Counted::operator()): Likewise.\n+\t* testsuite/std/ranges/p2367.cc: New test.\n+\n+2021-04-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60497\n+\t* include/bits/basic_ios.tcc (basic_ios::copyfmt): use\n+\tstd::addressof.\n+\t* include/bits/basic_string.tcc (basic_string::swap)\n+\t(basic_string::assign): Likewise.\n+\t* include/bits/deque.tcc (deque::operator=(const deque&)):\n+\tLikewise.\n+\t* include/bits/stl_tree.h (_Rb_tree::operator=(const * _Rb_tree&)):\n+\tLikewise.\n+\t* include/bits/vector.tcc (vector::operator=(const vector&)):\n+\tLikewise.\n+\n+2021-04-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/istream (operator>>(Istream&&, x&)): Simplify, as\n+\tper LWG 1203.\n+\t* include/std/ostream (operator<<(Ostream&&, const x&)):\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/lwg2499_neg.cc:\n+\tAdjust dg-error pattern.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499_neg.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/4.cc: Define\n+\tis_extractable trait to replace std::__is_extractable. Make it\n+\twork with rvalue streams as well as lvalues, to replace f() and\n+\tg() helper functions.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/6.cc:\n+\tDefine is_insertable trait to replace std::__is_insertable. Make\n+\tit work with rvalue streams as well as lvalues, to replace f()\n+\tand g() helper functions.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/6.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/io/dr2989.cc: Prune additional\n+\terrors from new constraints.\n+\t* testsuite/27_io/rvalue_streams-2.cc: Remove PR 80675 checks,\n+\twhich are no longer expected to compile.\n+\t* testsuite/27_io/rvalue_streams.cc: Adjust existing test.\n+\tVerify LWG 1203 changes.\n+\n+2021-04-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100285\n+\t* include/experimental/socket (__basic_socket_impl::set_option)\n+\t(__basic_socket_impl::get_option) [!_GLIBCXX_HAVE_SYS_SOCKET_H]:\n+\tJust set error code.\n+\t* testsuite/experimental/net/socket/socket_base.cc: CHeck\n+\tfor <sys/socket.h> not <socket.h>.\n+\n+2021-04-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100180\n+\tPR libstdc++/100286\n+\tPR libstdc++/100351\n+\t* testsuite/experimental/net/internet/address/v4/comparisons.cc:\n+\tUse new effective-target keyword.\n+\t* testsuite/experimental/net/internet/address/v4/cons.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/address/v4/creation.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/address/v4/members.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/address/v6/members.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/resolver/base.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/resolver/ops/lookup.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/resolver/ops/reverse.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/socket/opt.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/tcp.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/udp.cc:\n+\tLikewise.\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_net_ts_ip):\n+\tNew proc to check net_ts_ip et.\n+\n 2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/97930"}]}