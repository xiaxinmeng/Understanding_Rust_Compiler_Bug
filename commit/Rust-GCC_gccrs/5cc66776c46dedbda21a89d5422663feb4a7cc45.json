{"sha": "5cc66776c46dedbda21a89d5422663feb4a7cc45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjNjY3NzZjNDZkZWRiZGEyMWE4OWQ1NDIyNjYzZmViNGE3Y2M0NQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-11-09T19:25:01Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-11-09T19:25:01Z"}, "message": "PR c++/51043 - ICE in LTO\n\n\t* cp-tree.h (TYPE_ALIAS_P, TYPE_TEMPLATE_INFO): Don't crash on\n\tNULL TYPE_NAME.\n\nFrom-SVN: r181231", "tree": {"sha": "879f1208f4c187ae8a3fdfb36ce8df485d3a4b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/879f1208f4c187ae8a3fdfb36ce8df485d3a4b98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc66776c46dedbda21a89d5422663feb4a7cc45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc66776c46dedbda21a89d5422663feb4a7cc45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc66776c46dedbda21a89d5422663feb4a7cc45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc66776c46dedbda21a89d5422663feb4a7cc45/comments", "author": null, "committer": null, "parents": [{"sha": "e7a82751a55254b5c88748453415dc17b5ee9ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a82751a55254b5c88748453415dc17b5ee9ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a82751a55254b5c88748453415dc17b5ee9ae7"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "a545511f79ef65fca9bcce981691b7cd0890c126", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc66776c46dedbda21a89d5422663feb4a7cc45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc66776c46dedbda21a89d5422663feb4a7cc45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5cc66776c46dedbda21a89d5422663feb4a7cc45", "patch": "@@ -41,6 +41,10 @@\n \n 2011-11-09  Dodji Seketeli  <dodji@redhat.com>\n \n+\tPR c++/51043\n+\t* cp-tree.h (TYPE_ALIAS_P, TYPE_TEMPLATE_INFO): Don't crash on\n+\tNULL TYPE_NAME.\n+\n \tPR c++/51027\n \t* parser.c (cp_parser_alias_declaration): Require ';' at the end\n     \tof the declaration."}, {"sha": "b306976c62c9e4a9eed214b7c9941c51a22e3b76", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc66776c46dedbda21a89d5422663feb4a7cc45/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc66776c46dedbda21a89d5422663feb4a7cc45/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5cc66776c46dedbda21a89d5422663feb4a7cc45", "patch": "@@ -2550,8 +2550,9 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n /* Nonzero for a type which is an alias for another type; i.e, a type\n    which declaration was written 'using name-of-type =\n    another-type'.  */\n-#define TYPE_ALIAS_P(NODE) \\\n-  (TYPE_P (NODE) \\\n+#define TYPE_ALIAS_P(NODE)\t\t\t\\\n+  (TYPE_P (NODE)\t\t\t\t\\\n+   && TYPE_NAME (NODE)\t\t\t\t\\\n    && TYPE_DECL_ALIAS_P (TYPE_NAME (NODE)))\n \n /* For a class type: if this structure has many fields, we'll sort them\n@@ -2605,15 +2606,15 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    ->template_info)\n \n /* Template information for an ENUMERAL_, RECORD_, or UNION_TYPE.  */\n-#define TYPE_TEMPLATE_INFO(NODE)\t\t\t\\\n-  (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\\\n-   ? ENUM_TEMPLATE_INFO (NODE) :\t\t\t\\\n-   (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\\\n-    ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE) :\t\\\n-    ((CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))\t\\\n-     ? CLASSTYPE_TEMPLATE_INFO (NODE)\t\t\t\\\n-     : (DECL_LANG_SPECIFIC (TYPE_NAME (NODE))\t\t\\\n-\t? (DECL_TEMPLATE_INFO (TYPE_NAME (NODE)))\t\\\n+#define TYPE_TEMPLATE_INFO(NODE)\t\t\t\t\t\\\n+  (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\t\t\\\n+   ? ENUM_TEMPLATE_INFO (NODE) :\t\t\t\t\t\\\n+   (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n+    ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE) :\t\t\t\\\n+    ((CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))\t\t\t\\\n+     ? CLASSTYPE_TEMPLATE_INFO (NODE)\t\t\t\t\t\\\n+     : ((TYPE_NAME (NODE) && DECL_LANG_SPECIFIC (TYPE_NAME (NODE)))\t\\\n+\t? (DECL_TEMPLATE_INFO (TYPE_NAME (NODE)))\t\t\t\\\n \t: NULL_TREE))))\n \n /* Set the template information for an ENUMERAL_, RECORD_, or"}]}