{"sha": "4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5ZDdkOWQzNTk5MTYwYjdmZmNiNDk2YzAyOGQwNDYxZDljMTExMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:42:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:42:53Z"}, "message": "(reg_set_last): Allow old value to be a SUBREG.\n\nFrom-SVN: r2170", "tree": {"sha": "8eee28d2d49175a82198a75bc9eadf28435442e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eee28d2d49175a82198a75bc9eadf28435442e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9d7d9d3599160b7ffcb496c028d0461d9c1111/comments", "author": null, "committer": null, "parents": [{"sha": "95ac8e67bcb7a8a4454c7cf2e48ee1cbd639992b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ac8e67bcb7a8a4454c7cf2e48ee1cbd639992b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ac8e67bcb7a8a4454c7cf2e48ee1cbd639992b"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "5b0af9266497367c7068c14cae266ce9979c5b6c", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9d7d9d3599160b7ffcb496c028d0461d9c1111/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9d7d9d3599160b7ffcb496c028d0461d9c1111/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "patch": "@@ -779,8 +779,8 @@ reg_set_last_1 (x, pat)\n /* Return the last value to which REG was set prior to INSN.  If we can't\n    find it easily, return 0.\n \n-   We only return a REG or constant because it is too hard to check if a\n-   MEM remains unchanged.  */\n+   We only return a REG, SUBREG, or constant because it is too hard to\n+   check if a MEM remains unchanged.  */\n \n rtx\n reg_set_last (x, insn)\n@@ -818,7 +818,8 @@ reg_set_last (x, insn)\n \telse if (reg_set_last_value)\n \t  {\n \t    if (CONSTANT_P (reg_set_last_value)\n-\t\t|| (GET_CODE (reg_set_last_value) == REG\n+\t\t|| ((GET_CODE (reg_set_last_value) == REG\n+\t\t     || GET_CODE (reg_set_last_value) == SUBREG)\n \t\t    && ! reg_set_between_p (reg_set_last_value,\n \t\t\t\t\t    NEXT_INSN (insn), orig_insn)))\n \t      return reg_set_last_value;"}]}