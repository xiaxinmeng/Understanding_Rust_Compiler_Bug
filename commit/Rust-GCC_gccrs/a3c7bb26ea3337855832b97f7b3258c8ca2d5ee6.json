{"sha": "a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjN2JiMjZlYTMzMzc4NTU4MzJiOTdmN2IzMjU4YzhjYTJkNWVlNg==", "commit": {"author": {"name": "Adam Nemet", "email": "adambnemet@gmail.com", "date": "2009-11-21T19:25:35Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-11-21T19:25:35Z"}, "message": "mips-protos.h (mulsidi3_gen_fn): New typedef.\n\n\t* config/mips/mips-protos.h (mulsidi3_gen_fn): New typedef.\n\t(mips_mulsidi3_gen_fn): Declare new function.\n\t* config/mips/mips.c (mips_mulsidi3_gen_fn): New function.\n\t* config/mips/mips.md (<u>mulsidi3): Change condition to use\n\tmips_mulsidi3_gen_fn.  Use mips_mulsidi3_gen_fn to generate the\n\tinsn.\n\t(<u>mulsidi3_64bit): Don't match for ISA_HAS_DMUL3.\n\t(mulsidi3_64bit_dmul): New define_insn.\n\ntestsuite/\n\t* gcc.target/mips/mult-1.c: Forbid octeon.\n\t* gcc.target/mips/octeon-dmul-3.c: New test.\n\nFrom-SVN: r154410", "tree": {"sha": "a94d4a344ef4c13ac257b46ed42a75a781de5102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a94d4a344ef4c13ac257b46ed42a75a781de5102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/comments", "author": null, "committer": null, "parents": [{"sha": "36fd5b872b37c6767ed407172c240bfa3c296e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fd5b872b37c6767ed407172c240bfa3c296e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fd5b872b37c6767ed407172c240bfa3c296e4b"}], "stats": {"total": 101, "additions": 90, "deletions": 11}, "files": [{"sha": "20a2d09c31aa9cd504fbf47aafd386c8000c87b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -1,3 +1,14 @@\n+2009-11-21  Adam Nemet  <adambnemet@gmail.com>\n+\n+\t* config/mips/mips-protos.h (mulsidi3_gen_fn): New typedef.\n+\t(mips_mulsidi3_gen_fn): Declare new function.\n+\t* config/mips/mips.c (mips_mulsidi3_gen_fn): New function.\n+\t* config/mips/mips.md (<u>mulsidi3): Change condition to use\n+\tmips_mulsidi3_gen_fn.  Use mips_mulsidi3_gen_fn to generate the\n+\tinsn.\n+\t(<u>mulsidi3_64bit): Don't match for ISA_HAS_DMUL3.\n+\t(mulsidi3_64bit_dmul): New define_insn.\n+\n 2009-11-21  Ben Elliston  <bje@au.ibm.com>\n \n \t* gengtype-lex.l: Enable noinput flex option."}, {"sha": "e4fbb32b9591223e8979e123e5195601f3484900", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -346,4 +346,9 @@ extern void mips_final_prescan_insn (rtx, rtx *, int);\n extern int mips_trampoline_code_size (void);\n extern void mips_function_profiler (FILE *);\n \n+typedef rtx (*mulsidi3_gen_fn) (rtx, rtx, rtx);\n+#ifdef RTX_CODE\n+extern mulsidi3_gen_fn mips_mulsidi3_gen_fn (enum rtx_code);\n+#endif\n+\n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "eeff72d4b3378c4b055c551cb09a0d65f927c2f0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -15982,6 +15982,39 @@ mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n   if (mips_need_noat_wrapper_p (insn, opvec, noperands))\n     mips_pop_asm_switch (&mips_noat);\n }\n+\n+/* Return the function that is used to expand the <u>mulsidi3 pattern.\n+   EXT_CODE is the code of the extension used.  Return NULL if widening\n+   multiplication shouldn't be used.  */\n+\n+mulsidi3_gen_fn\n+mips_mulsidi3_gen_fn (enum rtx_code ext_code)\n+{\n+  bool signed_p;\n+\n+  signed_p = ext_code == SIGN_EXTEND;\n+  if (TARGET_64BIT)\n+    {\n+      /* Don't use widening multiplication with MULT when we have DMUL.  Even\n+\t with the extension of its input operands DMUL is faster.  Note that\n+\t the extension is not needed for signed multiplication.  In order to\n+\t ensure that we always remove the redundant sign-extension in this\n+\t case we still expand mulsidi3 for DMUL.  */\n+      if (ISA_HAS_DMUL3)\n+\treturn signed_p ? gen_mulsidi3_64bit_dmul : NULL;\n+      if (TARGET_FIX_R4000)\n+\treturn NULL;\n+      return signed_p ? gen_mulsidi3_64bit : gen_umulsidi3_64bit;\n+    }\n+  else\n+    {\n+      if (TARGET_FIX_R4000)\n+\treturn signed_p ? gen_mulsidi3_32bit_r4000 : gen_umulsidi3_32bit_r4000;\n+      if (ISA_HAS_DSPR2)\n+\treturn signed_p ? gen_mips_mult : gen_mips_multu;\n+      return signed_p ? gen_mulsidi3_32bit : gen_umulsidi3_32bit;\n+    }\n+}\n \f\n /* Return the size in bytes of the trampoline code, padded to\n    TRAMPOLINE_ALIGNMENT bits.  The static chain pointer and target"}, {"sha": "2179b8a46c68469445fb7da395660fe2397d8d4c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -1847,15 +1847,10 @@\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n-  \"!TARGET_64BIT || !TARGET_FIX_R4000\"\n+  \"mips_mulsidi3_gen_fn (<CODE>) != NULL\"\n {\n-  if (TARGET_64BIT)\n-    emit_insn (gen_<u>mulsidi3_64bit (operands[0], operands[1], operands[2]));\n-  else if (TARGET_FIX_R4000)\n-    emit_insn (gen_<u>mulsidi3_32bit_r4000 (operands[0], operands[1],\n-\t\t\t\t\t    operands[2]));\n-  else\n-    emit_insn (gen_<u>mulsidi3_32bit (operands[0], operands[1], operands[2]));\n+  mulsidi3_gen_fn fn = mips_mulsidi3_gen_fn (<CODE>);\n+  emit_insn (fn (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n@@ -1885,7 +1880,7 @@\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n    (clobber (match_scratch:TI 3 \"=x\"))\n    (clobber (match_scratch:DI 4 \"=d\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000 && !ISA_HAS_DMUL3\"\n   \"#\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")\n@@ -1961,6 +1956,17 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; See comment before the ISA_HAS_DMUL3 case in mips_mulsidi3_gen_fn.\n+(define_insn \"mulsidi3_64bit_dmul\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n+   (clobber (match_scratch:DI 3 \"=l\"))]\n+  \"TARGET_64BIT && ISA_HAS_DMUL3\"\n+  \"dmul\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul3\")\n+   (set_attr \"mode\" \"DI\")])\n+\n ;; Widening multiply with negation.\n (define_insn \"*muls<u>_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")"}, {"sha": "445691ab939ae036c77987f02ade7b7c717c1380", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -1,3 +1,8 @@\n+2009-11-21  Adam Nemet  <adambnemet@gmail.com>\n+\n+\t* gcc.target/mips/mult-1.c: Forbid octeon.\n+\t* gcc.target/mips/octeon-dmul-3.c: New test.\n+\n 2009-11-21  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.dg/tree-ssa/vrp47.c: Fix target check."}, {"sha": "43dd08c0b52177f024d5a856a13bb901fe0174a3", "filename": "gcc/testsuite/gcc.target/mips/mult-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-1.c?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -1,6 +1,6 @@\n /* For SI->DI widening multiplication we should use DINS to combine the two\n-   halves.  */\n-/* { dg-options \"-O -mgp64 isa_rev>=2\" } */\n+   halves.  For Octeon use DMUL with explicit widening.  */\n+/* { dg-options \"-O -mgp64 isa_rev>=2 forbid_cpu=octeon\" } */\n /* { dg-final { scan-assembler \"\\tdins\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tdsll\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tdsrl\\t\" } } */"}, {"sha": "01f0eefca8001260ac577b7ef051cdc119a40d1f", "filename": "gcc/testsuite/gcc.target/mips/octeon-dmul-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-3.c?ref=a3c7bb26ea3337855832b97f7b3258c8ca2d5ee6", "patch": "@@ -0,0 +1,19 @@\n+/* Use DMUL for widening multiplication too.  */\n+/* { dg-options \"-O -march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler-times \"\\tdmul\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\td?mult\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tdext\\t\" 2 } } */\n+\n+NOMIPS16 long long\n+f (int i, int j)\n+{\n+  i++;\n+  return (long long) i * j;\n+}\n+\n+NOMIPS16 unsigned long long\n+g (unsigned int i, unsigned int j)\n+{\n+  i++;\n+  return (unsigned long long) i * j;\n+}"}]}