{"sha": "4a8c733b470eb6b7b52722c8694af9395d7cffe1", "node_id": "C_kwDOANBUbNoAKDRhOGM3MzNiNDcwZWI2YjdiNTI3MjJjODY5NGFmOTM5NWQ3Y2ZmZTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-22T09:22:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-22T09:22:07Z"}, "message": "Merge #1401\n\n1401: macros: properly handles recursive macros r=CohenArthur a=liushuyu\n\n- macros: properly handles recursive macros\r\n\r\nFixes #1084\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "2466283a70318113d3c2a5e35a5f790425cc497d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2466283a70318113d3c2a5e35a5f790425cc497d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a8c733b470eb6b7b52722c8694af9395d7cffe1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2mw/CRBK7hj4Ov3rIwAAWRwIAAcIE8J3/6sGlqlqIc/vItnY\nQ4oPOVQAWX0rl9dMohuSfETKdyL/zrt5bFj9MPye+UX17QB7HBkd3+Q3fLmm7wMC\nYhVT10vlIsBOl4RZGRRkYQwrr+n1v+BINrw36MFLa+WKm35od+SjDeDboRPx0HtO\nh31ka3KmD/zoZxTAFWPChsCH4tpA73HNrytEeLZDwDV9sHWcliiGlU9awoIwPoaV\nQQrMhvEG2nPPAtBALZg1X7Ufwbb2Ok53cWtHOjr8YhhwQrUOsTHGl3dQsvefQP1f\nyUm3wsj7H/x+/fjbvwLHOzdhZuZPefSkkKF06NHR8Joc6AYK99ochfNCpqJ9d+c=\n=FomN\n-----END PGP SIGNATURE-----\n", "payload": "tree 2466283a70318113d3c2a5e35a5f790425cc497d\nparent 3f5fc214f4a53ac6c90e421814fcf049e56d3dc9\nparent 3ce22036e48a4f8805440abcd291ecd35d2ca468\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1658481727 +0000\ncommitter GitHub <noreply@github.com> 1658481727 +0000\n\nMerge #1401\n\n1401: macros: properly handles recursive macros r=CohenArthur a=liushuyu\n\n- macros: properly handles recursive macros\r\n\r\nFixes #1084\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8c733b470eb6b7b52722c8694af9395d7cffe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8c733b470eb6b7b52722c8694af9395d7cffe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8c733b470eb6b7b52722c8694af9395d7cffe1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9"}, {"sha": "3ce22036e48a4f8805440abcd291ecd35d2ca468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce22036e48a4f8805440abcd291ecd35d2ca468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce22036e48a4f8805440abcd291ecd35d2ca468"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "bbcf2cbadd018d801b6b1c24a9b78e3108496178", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=4a8c733b470eb6b7b52722c8694af9395d7cffe1", "patch": "@@ -402,10 +402,7 @@ AttrVisitor::visit (AST::MacroInvocation &macro_invoc)\n   // I don't think any macro token trees can be stripped in any way\n \n   // TODO: maybe have cfg! macro stripping behaviour here?\n-  if (macro_invoc.has_semicolon ())\n-    expander.expand_invoc_semi (macro_invoc);\n-  else\n-    expander.expand_invoc (macro_invoc);\n+  expander.expand_invoc (macro_invoc, macro_invoc.has_semicolon ());\n }\n \n void\n@@ -3434,8 +3431,17 @@ void\n AttrVisitor::maybe_expand_expr (std::unique_ptr<AST::Expr> &expr)\n {\n   auto fragment = expander.take_expanded_fragment (*this);\n-  if (fragment.should_expand ())\n-    expr = fragment.take_expression_fragment ();\n+  unsigned int original_depth = expander.expansion_depth;\n+  while (fragment.should_expand ())\n+    {\n+      expr = fragment.take_expression_fragment ();\n+      expander.expansion_depth++;\n+      auto new_fragment = expander.take_expanded_fragment (*this);\n+      if (new_fragment.is_error ())\n+\tbreak;\n+      fragment = std::move (new_fragment);\n+    }\n+  expander.expansion_depth = original_depth;\n }\n \n void"}, {"sha": "e27adf5de5e0fcd27dc0c0afd81a3fb4cfbd8ea7", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=4a8c733b470eb6b7b52722c8694af9395d7cffe1", "patch": "@@ -106,7 +106,7 @@ MacroExpander::expand_decl_macro (Location invoc_locus,\n }\n \n void\n-MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n+MacroExpander::expand_invoc (AST::MacroInvocation &invoc, bool has_semicolon)\n {\n   if (depth_exceeds_recursion_limit ())\n     {\n@@ -136,54 +136,19 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n \n   // lookup the rules for this macro\n   NodeId resolved_node = UNKNOWN_NODEID;\n-  bool found = resolver->get_macro_scope ().lookup (\n-    Resolver::CanonicalPath::new_seg (invoc.get_pattern_node_id (),\n-\t\t\t\t      invoc_data.get_path ().as_string ()),\n-    &resolved_node);\n-  if (!found)\n-    {\n-      rust_error_at (invoc.get_locus (), \"unknown macro 1\");\n-      return;\n-    }\n-\n-  // lookup the rules\n-  AST::MacroRulesDefinition *rules_def = nullptr;\n-  bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n-  rust_assert (ok);\n-\n-  auto fragment = AST::ASTFragment::create_error ();\n-\n-  if (rules_def->is_builtin ())\n-    fragment\n-      = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n+  NodeId source_node = UNKNOWN_NODEID;\n+  if (has_semicolon)\n+    source_node = invoc.get_macro_node_id ();\n   else\n-    fragment\n-      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, false);\n-\n-  set_expanded_fragment (std::move (fragment));\n-}\n-\n-// FIXME: Arthur: Refactor these two functions, they're really similar\n-void\n-MacroExpander::expand_invoc_semi (AST::MacroInvocation &invoc)\n-{\n-  if (depth_exceeds_recursion_limit ())\n-    {\n-      rust_error_at (invoc.get_locus (), \"reached recursion limit\");\n-      return;\n-    }\n-\n-  AST::MacroInvocData &invoc_data = invoc.get_invoc_data ();\n-\n-  // lookup the rules for this macro\n-  NodeId resolved_node = UNKNOWN_NODEID;\n+    source_node = invoc.get_pattern_node_id ();\n   auto seg\n-    = Resolver::CanonicalPath::new_seg (invoc.get_macro_node_id (),\n+    = Resolver::CanonicalPath::new_seg (source_node,\n \t\t\t\t\tinvoc_data.get_path ().as_string ());\n+\n   bool found = resolver->get_macro_scope ().lookup (seg, &resolved_node);\n   if (!found)\n     {\n-      rust_error_at (invoc.get_locus (), \"unknown macro 2: [%s]\",\n+      rust_error_at (invoc.get_locus (), \"unknown macro: [%s]\",\n \t\t     seg.get ().c_str ());\n       return;\n     }\n@@ -199,8 +164,8 @@ MacroExpander::expand_invoc_semi (AST::MacroInvocation &invoc)\n     fragment\n       = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n   else\n-    fragment\n-      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, true);\n+    fragment = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def,\n+\t\t\t\t  has_semicolon);\n \n   set_expanded_fragment (std::move (fragment));\n }"}, {"sha": "2c3380bebdbee415cc865b7376d2a694551bdb1f", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=4a8c733b470eb6b7b52722c8694af9395d7cffe1", "patch": "@@ -213,8 +213,7 @@ struct MacroExpander\n   /* Expands a macro invocation - possibly make both\n    * have similar duck-typed interface and use templates?*/\n   // should this be public or private?\n-  void expand_invoc (AST::MacroInvocation &invoc);\n-  void expand_invoc_semi (AST::MacroInvocation &invoc);\n+  void expand_invoc (AST::MacroInvocation &invoc, bool has_semicolon);\n \n   // Expands a single declarative macro.\n   AST::ASTFragment expand_decl_macro (Location locus,"}, {"sha": "8b06f875cc04a6f15320e6cdbda7f82535b15924", "filename": "gcc/testsuite/rust/compile/macro_return.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_return.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_return.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_return.rs?ref=4a8c733b470eb6b7b52722c8694af9395d7cffe1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-excess-errors \"....\" { xfail *-*-*-* *-*-* } }\n+// { dg-additional-options \"-w\" }\n \n macro_rules! add {\n     ($a:expr) => { $a };", "previous_filename": "gcc/testsuite/rust/compile/xfail/macro_return.rs"}, {"sha": "b0084e7b466afae4aa532f9e830a840d02dfa485", "filename": "gcc/testsuite/rust/compile/torture/macro_as_expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmacro_as_expr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8c733b470eb6b7b52722c8694af9395d7cffe1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmacro_as_expr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmacro_as_expr.rs?ref=4a8c733b470eb6b7b52722c8694af9395d7cffe1", "patch": "@@ -0,0 +1,14 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! add {\n+    ($a:expr) => { $a };\n+    ($a:expr, $($b:expr),+) => { $a + add!($($b),*) }\n+}\n+\n+fn main() -> i32 {\n+    if add!(add!(1, 2)) > add!(5) {\n+        add!(1, add!(2, 3), add!(4))\n+    } else {\n+        add!(5, add!(6, 7), add!(8), 9) + 10\n+    }\n+}"}]}