{"sha": "e74061a981cd8d62e366c6bc96454250e7da0450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0MDYxYTk4MWNkOGQ2MmUzNjZjNmJjOTY0NTQyNTBlN2RhMDQ1MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-01T09:50:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-04-01T09:50:06Z"}, "message": "i386.md: remove obsoleted comments.\n\n\t* i386.md: remove obsoleted comments.\n\t(adddi_?): Rename to adddi_?_rex64; disable for 32bit.\n\t(x86_movsicc_0_m1_rex64): Rename to x86_movdicc_0_m1_rex64;\n\tfix output template.\n\nFrom-SVN: r40982", "tree": {"sha": "813f462634c5c15329ffc13ca404e061e99b2300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/813f462634c5c15329ffc13ca404e061e99b2300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e74061a981cd8d62e366c6bc96454250e7da0450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74061a981cd8d62e366c6bc96454250e7da0450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74061a981cd8d62e366c6bc96454250e7da0450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74061a981cd8d62e366c6bc96454250e7da0450/comments", "author": null, "committer": null, "parents": [{"sha": "efb580646bd8f83d2087e858d317a389f89acdc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb580646bd8f83d2087e858d317a389f89acdc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb580646bd8f83d2087e858d317a389f89acdc5"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "8ec546a66fb83b9a6947ecb5188a612db116c009", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74061a981cd8d62e366c6bc96454250e7da0450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74061a981cd8d62e366c6bc96454250e7da0450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e74061a981cd8d62e366c6bc96454250e7da0450", "patch": "@@ -1,3 +1,10 @@\n+Sun Apr  1 11:49:05 CEST 2001  Jan Hubicka  <jH@suse.cz>\n+\n+\t* i386.md: remove obsoleted comments.\n+\t(adddi_?): Rename to adddi_?_rex64; disable for 32bit.\n+\t(x86_movsicc_0_m1_rex64): Rename to x86_movdicc_0_m1_rex64;\n+\tfix output template.\n+\n 2001-03-31  Marek Michalkiewicz  <marekm@linux.org.pl>\n \n \t* config/avr/libgcc.S (__mulhi3): Optimize previous change."}, {"sha": "e87ee2cdb358979b91f9862e39608ecca245e7fa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74061a981cd8d62e366c6bc96454250e7da0450/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74061a981cd8d62e366c6bc96454250e7da0450/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e74061a981cd8d62e366c6bc96454250e7da0450", "patch": "@@ -5134,7 +5134,6 @@\n \f\n ;; Add instructions\n \n-;; %%% define_expand from the very first?\n ;; %%% splits for addsidi3\n ;  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n ;\t(plus:DI (match_operand:DI 1 \"general_operand\" \"\")\n@@ -5473,12 +5472,13 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*adddi_3\"\n+(define_insn \"*adddi_3_rex64\"\n   [(set (reg 17)\n \t(compare (neg:DI (match_operand:DI 2 \"x86_64_general_operand\" \"rme\"))\n \t\t (match_operand:DI 1 \"x86_64_general_operand\" \"%0\")))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCZmode)\n+  \"TARGET_64BIT\n+   && ix86_match_ccmode (insn, CCZmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n@@ -5529,12 +5529,13 @@\n ; when negated.\n ; Also carry flag is reversed compared to cmp, so this converison is valid\n ; only for comparisons not depending on it.\n-(define_insn \"*adddi_4\"\n+(define_insn \"*adddi_4_rex64\"\n   [(set (reg 17)\n \t(compare (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t (match_operand:DI 2 \"x86_64_immediate_operand\" \"e\")))\n    (clobber (match_scratch:DI 0 \"=rm\"))]\n-  \"ix86_match_ccmode (insn, CCGCmode)\"\n+  \"TARGET_64BIT\n+   &&  ix86_match_ccmode (insn, CCGCmode)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -5566,14 +5567,15 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*adddi_5\"\n+(define_insn \"*adddi_5_rex64\"\n   [(set (reg 17)\n \t(compare\n \t  (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:DI 2 \"x86_64_general_operand\" \"rme\"))\n \t  (const_int 0)))\t\t\t\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n+  \"TARGET_64BIT\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n@@ -8936,8 +8938,6 @@\n \f\n ;; Negation instructions\n \n-;; %%% define_expand from the very first?\n-\n (define_expand \"negdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n@@ -14927,14 +14927,14 @@\n   \"TARGET_64BIT\"\n   \"if (!ix86_expand_int_movcc (operands)) FAIL; DONE;\")\n \n-(define_insn \"x86_movsicc_0_m1_rex64\"\n+(define_insn \"x86_movdicc_0_m1_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(if_then_else:DI (ltu (reg:CC 17) (const_int 0))\n \t  (const_int -1)\n \t  (const_int 0)))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT\"\n-  \"sbb{l}\\\\t%0, %0\"\n+  \"sbb{q}\\\\t%0, %0\"\n   ; Since we don't have the proper number of operands for an alu insn,\n   ; fill in all the blanks.\n   [(set_attr \"type\" \"alu\")\n@@ -14957,7 +14957,6 @@\n   [(set_attr \"type\" \"icmov\")\n    (set_attr \"mode\" \"DI\")])\n \n-\n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")"}]}