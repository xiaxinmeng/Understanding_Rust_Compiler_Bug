{"sha": "3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5OTllN2IyOGMxOWNlY2QwOTk3OWJjYmNkOThmZjZiM2FiZmViZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-03-19T10:18:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-03-19T10:18:25Z"}, "message": "re PR tree-optimization/43415 (Consumes large amounts of memory and time in PRE at -O3)\n\n2010-03-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43415\n\t* tree-ssa-pre.c (phi_translate): Split out worker to ...\n\t(phi_translate_1): ... this.\n\t(phi_translate): Move all caching here.  Cache all NARY\n\tand REFERENCE translations.\n\n\t* gcc.c-torture/compile/pr43415.c: New testcase.\n\nFrom-SVN: r157562", "tree": {"sha": "f4799da08f52a4ecbd0aef198ff7180baeea866f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4799da08f52a4ecbd0aef198ff7180baeea866f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a29d9e20cc394d235b23c673b15547e4736475f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29d9e20cc394d235b23c673b15547e4736475f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29d9e20cc394d235b23c673b15547e4736475f3"}], "stats": {"total": 117, "additions": 92, "deletions": 25}, "files": [{"sha": "ce98eb4f5940218c24e152a087f7274cdb0d172e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "patch": "@@ -1,3 +1,11 @@\n+2010-03-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43415\n+\t* tree-ssa-pre.c (phi_translate): Split out worker to ...\n+\t(phi_translate_1): ... this.\n+\t(phi_translate): Move all caching here.  Cache all NARY\n+\tand REFERENCE translations.\n+\n 2010-03-19  David S. Miller  <davem@davemloft.net>\n \n \tWith help from Eric Botcazou."}, {"sha": "09f644d2e7f70439c20147144bbbe289acb18488", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "patch": "@@ -1,3 +1,8 @@\n+2010-03-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43415\n+\t* gcc.c-torture/compile/pr43415.c: New testcase.\n+\n 2010-03-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/43106"}, {"sha": "c00e1c41ce9d8f13ec95c1247500e28e20309aa6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43415.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43415.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43415.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43415.c?ref=3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "patch": "@@ -0,0 +1,36 @@\n+int main()                                                                      \n+{                                                                               \n+  unsigned long long table[256];                                          \n+  unsigned int i;\n+  for (i=0; i<256; ++i) {\n+      unsigned long long j;\n+      unsigned char x=i;\n+      for (j=0; j<5; ++j) {\n+\t  x += x<<1;\n+\t  x ^= x>>1;\n+      }\n+      for (j=0; j<5; ++j) {\n+\t  x += x<<1;\n+\t  x ^= x>>1;\n+      }\n+      for (j=0; j<5; ++j) {\n+\t  x += x<<1;\n+\t  x ^= x>>1;\n+      }\n+      for (j=0; j<5; ++j) {\n+\t  x += x<<1;\n+\t  x ^= x>>1;\n+      }\n+      for (j=0; j<5; ++j) {\n+\t  x += x<<1;\n+\t  x ^= x>>1;\n+      }\n+      table[i] ^= (((unsigned long long)x)<<16);\n+  }\n+  for (i=0; i<256; ++i) {\n+      if ((table[i]&0xff)==i)\n+\treturn 1;\n+  }\n+  return 0;\n+}\n+"}, {"sha": "ecade3dd7958aabca029d2b1d576f6ab3340ef36", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e999e7b28c19cecd09979bcbcd98ff6b3abfebf/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3e999e7b28c19cecd09979bcbcd98ff6b3abfebf", "patch": "@@ -1471,32 +1471,18 @@ get_representative_for (const pre_expr e)\n \n \n \n+static pre_expr\n+phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n+\t       basic_block pred, basic_block phiblock);\n \n /* Translate EXPR using phis in PHIBLOCK, so that it has the values of\n    the phis in PRED.  Return NULL if we can't find a leader for each part\n    of the translated expression.  */\n \n static pre_expr\n-phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n-\t       basic_block pred, basic_block phiblock)\n+phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n+\t\t basic_block pred, basic_block phiblock)\n {\n-  pre_expr oldexpr = expr;\n-  pre_expr phitrans;\n-\n-  if (!expr)\n-    return NULL;\n-\n-  /* Constants contain no values that need translation.  */\n-  if (expr->kind == CONSTANT)\n-    return expr;\n-\n-  if (value_id_constant_p (get_expr_value_id (expr)))\n-    return expr;\n-\n-  phitrans = phi_trans_lookup (expr, pred);\n-  if (phitrans)\n-    return phitrans;\n-\n   switch (expr->kind)\n     {\n     case NARY:\n@@ -1584,7 +1570,6 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t      }\n \t    add_to_value (new_val_id, expr);\n \t  }\n-\tphi_trans_add (oldexpr, expr, pred);\n \treturn expr;\n       }\n       break;\n@@ -1765,7 +1750,6 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    add_to_value (new_val_id, expr);\n \t  }\n \tVEC_free (vn_reference_op_s, heap, newoperands);\n-\tphi_trans_add (oldexpr, expr, pred);\n \treturn expr;\n       }\n       break;\n@@ -1811,6 +1795,44 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n     }\n }\n \n+/* Wrapper around phi_translate_1 providing caching functionality.  */\n+\n+static pre_expr\n+phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n+\t       basic_block pred, basic_block phiblock)\n+{\n+  pre_expr phitrans;\n+\n+  if (!expr)\n+    return NULL;\n+\n+  /* Constants contain no values that need translation.  */\n+  if (expr->kind == CONSTANT)\n+    return expr;\n+\n+  if (value_id_constant_p (get_expr_value_id (expr)))\n+    return expr;\n+\n+  if (expr->kind != NAME)\n+    {\n+      phitrans = phi_trans_lookup (expr, pred);\n+      if (phitrans)\n+\treturn phitrans;\n+    }\n+\n+  /* Translate.  */\n+  phitrans = phi_translate_1 (expr, set1, set2, pred, phiblock);\n+\n+  /* Don't add empty translations to the cache.  Neither add\n+     translations of NAMEs as those are cheap to translate.  */\n+  if (phitrans\n+      && expr->kind != NAME)\n+    phi_trans_add (expr, phitrans, pred);\n+\n+  return phitrans;\n+}\n+\n+\n /* For each expression in SET, translate the values through phi nodes\n    in PHIBLOCK using edge PHIBLOCK->PRED, and store the resulting\n    expressions in DEST.  */\n@@ -1834,13 +1856,9 @@ phi_translate_set (bitmap_set_t dest, bitmap_set_t set, basic_block pred,\n     {\n       pre_expr translated;\n       translated = phi_translate (expr, set, NULL, pred, phiblock);\n-\n-      /* Don't add empty translations to the cache  */\n       if (!translated)\n \tcontinue;\n \n-      phi_trans_add (expr, translated, pred);\n-\n       /* We might end up with multiple expressions from SET being\n \t translated to the same value.  In this case we do not want\n \t to retain the NARY or REFERENCE expression but prefer a NAME"}]}