{"sha": "c249a7bc843dc407280d91a448d2e3f2e16370d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0OWE3YmM4NDNkYzQwNzI4MGQ5MWE0NDhkMmUzZjJlMTYzNzBkNw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2010-06-16T16:04:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2010-06-16T16:04:27Z"}, "message": "constraints.md (NEGint4): New constraint.\n\n        * config/rx/constraints.md (NEGint4): New constraint.\n        * config/rx/rx.md (attr cc): Add set_zsc.\n        (cbranchsf4): Only test for -fnon-call-exceptions if cfun has been\n        initialised.\n        (cmpsf): Likewise.\n        (call_internal): Clobber the cc0 register.\n        (call_value_internal): Likewise.\n        (cstoresi4): Likewise.\n        (movsieq): Likewise.\n        (movsine): Likewise.\n        (addsi3): Add alternative to handle small negative constants.\n        (sunsi3): Likewise.\n        (addsi3): Do not set the O bit in the cc0 register.\n        (adddi3): Likewise.\n        (subsi3): Likewise.\n        (subdi3): Likewise.\n        (andsi3): Reorder alternatives to prefer shorter forms.\n        (mulsi3): Likewise.\n        (iorsi3): Likewise.\n        (negsi2): Note that the cc0 flags are set.\n        (rotlsi3): Note that only the Z and S bits are set in cc0.\n        (lshrsi3): Likewise.\n        (ashlsi3): Likewise.\n        (subsf3): Use %Q for the MEM operand.\n        (fix_truncsfsi2): Likewise.\n        (floatsisf2): Likewise.\n        (bitset): Remove early clobber from destination.\n        (bitset_in_memory): Likewise.\n        (lrintsf2): Clobber the cc0 register.\n        * config/rx/rx.c (rx_notice_update_cc):\n        Handle CC_SET_ZSC.\n        (rx_print_operand): Handle %N.\n\nFrom-SVN: r160846", "tree": {"sha": "e8984b80519fe880dca217e1729114c5b76284f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8984b80519fe880dca217e1729114c5b76284f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c249a7bc843dc407280d91a448d2e3f2e16370d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c249a7bc843dc407280d91a448d2e3f2e16370d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c249a7bc843dc407280d91a448d2e3f2e16370d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c249a7bc843dc407280d91a448d2e3f2e16370d7/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f75aa51c0d09d5da97130d50623b4a5bc14b2b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75aa51c0d09d5da97130d50623b4a5bc14b2b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75aa51c0d09d5da97130d50623b4a5bc14b2b32"}], "stats": {"total": 205, "additions": 120, "deletions": 85}, "files": [{"sha": "fd598e19d5cb1d6b89abfdedfcbcbd39dd97ef76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c249a7bc843dc407280d91a448d2e3f2e16370d7", "patch": "@@ -1,3 +1,38 @@\n+2010-06-16  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/constraints.md (NEGint4): New constraint.\n+\t* config/rx/rx.md (attr cc): Add set_zsc.\n+\t(cbranchsf4): Only test for -fnon-call-exceptions if cfun has been\n+\tinitialised.\n+\t(cmpsf): Likewise.\n+\t(call_internal): Clobber the cc0 register.\n+\t(call_value_internal): Likewise.\n+\t(cstoresi4): Likewise.\n+\t(movsieq): Likewise.\n+\t(movsine): Likewise.\n+\t(addsi3): Add alternative to handle small negative constants.\n+\t(sunsi3): Likewise.\n+\t(addsi3): Do not set the O bit in the cc0 register.\n+\t(adddi3): Likewise.\n+\t(subsi3): Likewise.\n+\t(subdi3): Likewise.\n+\t(andsi3): Reorder alternatives to prefer shorter forms.\n+\t(mulsi3): Likewise.\n+\t(iorsi3): Likewise.\n+\t(negsi2): Note that the cc0 flags are set.\n+\t(rotlsi3): Note that only the Z and S bits are set in cc0.\n+\t(lshrsi3): Likewise.\n+\t(ashlsi3): Likewise.\n+\t(subsf3): Use %Q for the MEM operand.\n+\t(fix_truncsfsi2): Likewise.\n+\t(floatsisf2): Likewise.\n+\t(bitset): Remove early clobber from destination.\n+\t(bitset_in_memory): Likewise.\n+\t(lrintsf2): Clobber the cc0 register.\n+\t* config/rx/rx.c (rx_notice_update_cc):\n+\tHandle CC_SET_ZSC.\n+\t(rx_print_operand): Handle %N.\n+\n 2010-06-16  Jan Hubicka  <jh@suse.cz>\n \n \t* df-core.c (df_compact_blocks): Free problem_temps vector."}, {"sha": "b4b037d1a268069a3de25ac58bee8886ce1af96a", "filename": "gcc/config/rx/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2Fconfig%2Frx%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2Fconfig%2Frx%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Fconstraints.md?ref=c249a7bc843dc407280d91a448d2e3f2e16370d7", "patch": "@@ -63,6 +63,13 @@\n   )\n )\n \n+(define_constraint \"NEGint4\"\n+  \"@internal An signed 4-bit negative immediate value\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -15, -1)\")\n+  )\n+)\n+\n ;; This is used in arithmetic and logic instructions for\n ;; a source operand that lies in memory and which satisfies\n ;; rx_restricted_memory_address()."}, {"sha": "633b586d034fc8dbde6772f60ec8f3d49e8c47ce", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=c249a7bc843dc407280d91a448d2e3f2e16370d7", "patch": "@@ -484,6 +484,12 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \t}\n       break;\n \n+    case 'N':\n+      gcc_assert (CONST_INT_P (op));\n+      fprintf (file, \"#\");\n+      rx_print_integer (file, - INTVAL (op));\n+      break;\n+\n     case 'Q':\n       if (MEM_P (op))\n \t{\n@@ -1667,7 +1673,7 @@ rx_notice_update_cc (rtx body, rtx insn)\n     case CC_SET_ZSOC:\n       /* The insn sets all the condition code bits.  */\n       CC_STATUS_INIT;\n-      cc_status.value1 = SET_SRC (body);\n+      cc_status.value1 = SET_DEST (body);\n       break;\n     case CC_SET_ZSO:\n       /* Insn sets the Z,S and O flags, but not the C flag.  */\n@@ -1680,6 +1686,12 @@ rx_notice_update_cc (rtx body, rtx insn)\n \t bits being set here.  See gcc.c-torture/execute/20041210-1.c\n \t for an example of this in action.  */\n       break;\n+    case CC_SET_ZSC:\n+      /* Insn sets the Z,S and C flags, but not the O flag.  */\n+      CC_STATUS_INIT;\n+      cc_status.flags |= CC_NO_OVERFLOW;\n+      /* See comment above regarding cc_status.value1.  */\n+      break;\n     case CC_SET_ZS:\n       /* Insn sets the Z and S flags, but not the O or C flags.  */\n       CC_STATUS_INIT;"}, {"sha": "6fe2525947260bc87dc71b6171414d2991603869", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 65, "deletions": 84, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c249a7bc843dc407280d91a448d2e3f2e16370d7/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=c249a7bc843dc407280d91a448d2e3f2e16370d7", "patch": "@@ -92,7 +92,7 @@\n ;;   set_zso  - insn sets z,s,o to usable values;\n ;;   set_zsoc - insn sets z,s,o,c to usable values;\n ;;   clobber  - value of cc0 is unknown\n-(define_attr \"cc\" \"none,set_zs,set_zso,set_zsoc,clobber\" (const_string \"none\"))\n+(define_attr \"cc\" \"none,set_zs,set_zso,set_zsoc,set_zsc,clobber\" (const_string \"none\"))\n \n (define_attr \"length\" \"\" (const_int 8))\n \n@@ -176,7 +176,7 @@\n \t\t\t\t\t  [(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\"))\n \t\t      (pc)))]\n-  \"ALLOW_RX_FPU_INSNS && !cfun->can_throw_non_call_exceptions\"\n+  \"ALLOW_RX_FPU_INSNS && (cfun == NULL || !cfun->can_throw_non_call_exceptions)\"\n   \"\"\n )\n \n@@ -204,23 +204,23 @@\n   \"\"\n   {\n     rx_float_compare_mode = false;\n-    return \"cmp\\t%Q1, %Q0\";\n+    return \"cmp\\t%Q1, %0\";\n   }\n   [(set_attr \"cc\" \"set_zsoc\")\n    (set_attr \"timings\" \"11,11,11,11,11,11,33\")\n    (set_attr \"length\"  \"2,2,3,4,5,6,5\")]\n )\n \n ;; This pattern is disabled if the function can throw non-call exceptions,\n-;; it could generate a floating point exception, which would introduce an\n-;; edge into the flow graph between this insn and the conditional branch\n-;; insn to follow, thus breaking the cc0 relationship.  Run the g++ test\n-;; g++.dg/eh/080514-1.C to see this happen.\n+;; because it could generate a floating point exception, which would\n+;; introduce an edge into the flow graph between this insn and the\n+;; conditional branch insn to follow, thus breaking the cc0 relationship.\n+;; Run the g++ test g++.dg/eh/080514-1.C to see this happen.\n (define_insn \"cmpsf\"\n   [(set (cc0)\n \t(compare:CC (match_operand:SF 0 \"register_operand\"  \"r,r,r\")\n \t\t    (match_operand:SF 1 \"rx_source_operand\" \"r,i,Q\")))]\n-  \"ALLOW_RX_FPU_INSNS && !cfun->can_throw_non_call_exceptions\"\n+  \"ALLOW_RX_FPU_INSNS && (cfun == NULL || !cfun->can_throw_non_call_exceptions)\"\n   {\n     rx_float_compare_mode = true;\n     return \"fcmp\\t%1, %0\";\n@@ -391,6 +391,7 @@\n   jsr\\t%0\n   bsr\\t%A0\"\n   [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"clobber\")\n    (set_attr \"timings\" \"33\")]\n )\n \n@@ -418,6 +419,7 @@\n   jsr\\t%1\n   bsr\\t%A1\"\n   [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"clobber\")\n    (set_attr \"timings\" \"33\")]\n )\n \n@@ -616,7 +618,7 @@\n     rx_float_compare_mode = false;\n     return \"cmp\\t%Q3, %Q2\\n\\tsc%B1.L\\t%0\";\n   }\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"clobber\") ;; Because cc0 is set based on comparing ops 2 & 3 not the value in op 0.\n    (set_attr \"timings\" \"22,22,22,22,22,22,44\")\n    (set_attr \"length\"  \"5,5,6,7,8,9,8\")]\n )\n@@ -650,7 +652,7 @@\n   cmp\\t%Q4, %Q3\\n\\tstnz\\t%2, %0\n   cmp\\t%Q4, %Q3\\n\\tmov.l\\t%2, %0\\n\\tstz\\t%1, %0\n   cmp\\t%Q4, %Q3\\n\\tmov.l\\t%1, %0\\n\\tstnz\\t%2, %0\"\n-  [(set_attr \"cc\"      \"set_zsoc\")\n+  [(set_attr \"cc\"      \"clobber\") ;; See cstoresi4\n    (set_attr \"length\"  \"13,19,15\")\n    (set_attr \"timings\" \"22,33,33\")]\n )\n@@ -666,7 +668,7 @@\n   cmp\\t%Q4, %Q3\\n\\tstz\\t%2, %0\n   cmp\\t%Q4, %Q3\\n\\tmov.l\\t%2, %0\\n\\tstnz\\t%1, %0\n   cmp\\t%Q4, %Q3\\n\\tmov.l\\t%1, %0\\n\\tstz\\t%2, %0\"\n-  [(set_attr \"cc\"      \"set_zsoc\")\n+  [(set_attr \"cc\"      \"clobber\") ;; See cstoresi4\n    (set_attr \"length\"  \"13,19,15\")\n    (set_attr \"timings\" \"22,33,33\")]\n )\n@@ -686,17 +688,18 @@\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"\n-\t\t\t  \"=r,r,r,r,r,r,r,r,r,r,r,r\")\n+\t\t\t  \"=r,r,r,r,r,r,r,r,r,r,r,r,r\")\n \t(plus:SI (match_operand:SI\n \t\t  1 \"register_operand\"\n-\t\t  \"%0,0,0,0,0,0,r,r,r,r,r,0\")\n+\t\t  \"%0,0,0,0,0,0,0,r,r,r,r,r,0\")\n \t\t (match_operand:SI\n \t\t  2 \"rx_source_operand\"\n-\t\t  \"r,Uint04,Sint08,Sint16,Sint24,i,r,Sint08,Sint16,Sint24,i,Q\")))]\n+\t\t  \"r,Uint04,NEGint4,Sint08,Sint16,Sint24,i,r,Sint08,Sint16,Sint24,i,Q\")))]\n   \"\"\n   \"@\n   add\\t%2, %0\n   add\\t%2, %0\n+  sub\\t%N2, %0\n   add\\t%2, %0\n   add\\t%2, %0\n   add\\t%2, %0\n@@ -707,9 +710,9 @@\n   add\\t%2, %1, %0\n   add\\t%2, %1, %0\n   add\\t%Q2, %0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n-   (set_attr \"timings\" \"11,11,11,11,11,11,11,11,11,11,11,33\")\n-   (set_attr \"length\" \"2,2,3,4,5,6,3,3,4,5,6,5\")]\n+  [(set_attr \"cc\" \"set_zsc\") ;; See subsi3\n+   (set_attr \"timings\" \"11,11,11,11,11,11,11,11,11,11,11,11,33\")\n+   (set_attr \"length\" \"2,2,2,3,4,5,6,3,3,4,5,6,5\")]\n )\n \n (define_insn \"adddi3\"\n@@ -719,17 +722,17 @@\n \t\t\t\t   \"r,Sint08,Sint16,Sint24,i,Q\")))]\n   \"\"\n   \"add\\t%L2, %L0\\n\\tadc\\t%H2, %H0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"set_zsc\") ;; See subsi3\n    (set_attr \"timings\" \"22,22,22,22,22,44\")\n    (set_attr \"length\" \"5,7,9,11,13,11\")]\n )\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,0,Q\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")\n \t\t(match_operand:SI\n \t\t 2 \"rx_source_operand\"\n-\t\t \"r,Uint04,Sint08,Sint16,Sint24,i,r,Q,0\")))]\n+\t\t \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))]\n   \"\"\n   \"@\n   and\\t%2, %0\n@@ -738,12 +741,12 @@\n   and\\t%2, %0\n   and\\t%2, %0\n   and\\t%2, %0\n+  and\\t%1, %0\n   and\\t%2, %1, %0\n-  and\\t%Q2, %0\n-  and\\t%Q1, %0\"\n+  and\\t%Q2, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"11,11,11,11,11,11,11,33,33\")\n-   (set_attr \"length\" \"2,2,3,4,5,6,3,5,5\")]\n+   (set_attr \"length\" \"2,2,3,4,5,6,2,5,5\")]\n )\n \n ;; Byte swap (single 32-bit value).\n@@ -803,13 +806,7 @@\n \t\t\t\t  2 \"rx_source_operand\"\n \t\t\t\t  \"r,Sint08,Sint16,Sint24,i,Q\"))))]\n   \"! TARGET_BIG_ENDIAN_DATA\"\n-  \"@\n-  emul\\t%Q2, %0\n-  emul\\t%Q2, %0\n-  emul\\t%Q2, %0\n-  emul\\t%Q2, %0\n-  emul\\t%Q2, %0\n-  emul\\t%Q2, %0\"\n+  \"emul\\t%Q2, %0\"\n   [(set_attr \"length\" \"3,4,5,6,7,6\")   \n    (set_attr \"timings\" \"22,22,22,22,22,44\")]\n )\n@@ -826,9 +823,7 @@\n                  (zero_extend:DI (match_operand:SI 2 \"rx_compare_operand\"\n \t\t\t\t\t\t   \"r,Q\"))))]\n   \"! TARGET_BIG_ENDIAN_DATA\"\n-  \"@\n-  emulu\\t%Q2, %0\n-  emulu\\t%Q2, %0\"\n+  \"emulu\\t%Q2, %0\"\n   [(set_attr \"length\" \"3,6\")\n    (set_attr \"timings\" \"22,44\")]\n )\n@@ -850,35 +845,29 @@\n \t\t (match_operand:SI 2 \"rx_source_operand\"\n \t\t\t\t   \"r,Sint08,Sint16,Sint24,i,Q\")))]\n   \"\"\n-  \"@\n-  min\\t%Q2, %0\n-  min\\t%Q2, %0\n-  min\\t%Q2, %0\n-  min\\t%Q2, %0\n-  min\\t%Q2, %0\n-  min\\t%Q2, %0\"\n+  \"min\\t%Q2, %0\"\n   [(set_attr \"length\"  \"3,4,5,6,7,6\")\n    (set_attr \"timings\" \"11,11,11,11,11,33\")]\n )\n \n (define_insn \"mulsi3\"\n   [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n-        (mult:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,0,Q,r\")\n+        (mult:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,0,r,r\")\n                  (match_operand:SI 2 \"rx_source_operand\"\n \t\t\t\t   \"r,Uint04,Sint08,Sint16,Sint24,i,Q,0,r\")))]\n   \"\"\n   \"@\n+  mul\\t%2, %0\n+  mul\\t%2, %0\n+  mul\\t%2, %0\n+  mul\\t%2, %0\n+  mul\\t%2, %0\n   mul\\t%Q2, %0\n   mul\\t%Q2, %0\n-  mul\\t%Q2, %0\n-  mul\\t%Q2, %0\n-  mul\\t%Q2, %0\n-  mul\\t%Q2, %0\n-  mul\\t%Q2, %0\n-  mul\\t%Q1, %0\n-  mul\\t%Q2, %1, %0\"\n-  [(set_attr \"length\"  \"2,2,3,4,5,6,5,5,3\")\n-   (set_attr \"timings\" \"11,11,11,11,11,11,33,33,11\")]\n+  mul\\t%1, %0\n+  mul\\t%2, %1, %0\"\n+  [(set_attr \"length\"  \"2,2,3,4,5,6,5,2,3\")\n+   (set_attr \"timings\" \"11,11,11,11,11,11,33,11,11\")]\n )\n \n (define_insn \"negsi2\"\n@@ -890,7 +879,8 @@\n   \"@\n   neg\\t%0\n   neg\\t%1, %0\"\n-  [(set_attr \"length\" \"2,3\")]\n+  [(set_attr \"length\" \"2,3\")\n+   (set_attr \"cc\" \"set_zsoc\")]\n )\n \n (define_insn \"one_cmplsi2\"\n@@ -906,23 +896,23 @@\n \n (define_insn \"iorsi3\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,0,Q\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r,0\")\n \t        (match_operand:SI 2 \"rx_source_operand\"\n-\t\t\t\t  \"r,Uint04,Sint08,Sint16,Sint24,i,r,Q,0\")))]\n+\t\t\t\t  \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))]\n   \"\"\n   \"@\n   or\\t%2, %0\n   or\\t%2, %0\n   or\\t%2, %0\n   or\\t%2, %0\n   or\\t%2, %0\n-  or\\t%2, %0\n-  or\\t%2, %1, %0\n   or\\t%Q2, %0\n-  or\\t%Q1, %0\"\n+  or\\t%1, %0\n+  or\\t%2, %1, %0\n+  or\\t%Q2, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n-   (set_attr \"timings\" \"11,11,11,11,11,11,11,33,33\")\n-   (set_attr \"length\"  \"2,2,3,4,5,6,3,5,5\")]\n+   (set_attr \"timings\" \"11,11,11,11,11,11,11,11,33\")\n+   (set_attr \"length\"  \"2,2,3,4,5,6,2,3,5\")]\n )\n \n (define_insn \"rotlsi3\"\n@@ -954,7 +944,7 @@\n   shar\\t%2, %0\n   shar\\t%2, %0\n   shar\\t%2, %1, %0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"length\" \"3,2,3\")]\n )\n \n@@ -967,7 +957,7 @@\n   shlr\\t%2, %0\n   shlr\\t%2, %0\n   shlr\\t%2, %1, %0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"length\" \"3,2,3\")]\n )\n \n@@ -980,7 +970,7 @@\n   shll\\t%2, %0\n   shll\\t%2, %0\n   shll\\t%2, %1, %0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"length\" \"3,2,3\")]\n )\n \n@@ -995,7 +985,10 @@\n   add\\t%N2, %0\n   sub\\t%2, %1, %0\n   sub\\t%Q2, %0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"set_zsc\") ;; Note - we do not acknowledge that the SUB\n+   ;; instruction sets the Overflow flag because its interpretation is\n+   ;; different from comparing the result against zero.  Compile and run\n+   ;; gcc.c-torture/execute/cmpsi-1.c to see this.\n    (set_attr \"timings\" \"11,11,11,11,33\")\n    (set_attr \"length\" \"2,2,6,3,5\")]\n )\n@@ -1006,7 +999,7 @@\n \t\t  (match_operand:DI 2 \"rx_source_operand\" \"r,Q\")))]\n   \"\"\n   \"sub\\t%L2, %L0\\n\\tsbb\\t%H2, %H0\"\n-  [(set_attr \"cc\" \"set_zsoc\")\n+  [(set_attr \"cc\" \"set_zsc\") ;; See subsi3\n    (set_attr \"timings\" \"22,44\")\n    (set_attr \"length\" \"5,11\")]\n )\n@@ -1017,13 +1010,7 @@\n \t        (match_operand:SI 2 \"rx_source_operand\"\n \t\t\t\t  \"r,Sint08,Sint16,Sint24,i,Q\")))]\n   \"\"\n-  \"@\n-  xor\\t%Q2, %0\n-  xor\\t%Q2, %0\n-  xor\\t%Q2, %0\n-  xor\\t%Q2, %0\n-  xor\\t%Q2, %0\n-  xor\\t%Q2, %0\"\n+  \"xor\\t%Q2, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"11,11,11,11,11,33\")\n    (set_attr \"length\" \"3,4,5,6,7,6\")]\n@@ -1036,10 +1023,7 @@\n \t(plus:SF (match_operand:SF 1 \"register_operand\"  \"%0,0,0\")\n \t\t (match_operand:SF 2 \"rx_source_operand\"  \"r,F,Q\")))]\n   \"ALLOW_RX_FPU_INSNS\"\n-  \"@\n-  fadd\\t%2, %0\n-  fadd\\t%2, %0\n-  fadd\\t%2, %0\"\n+  \"fadd\\t%2, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"44,44,66\")\n    (set_attr \"length\" \"3,7,5\")]\n@@ -1061,10 +1045,7 @@\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"%0,0,0\")\n \t\t(match_operand:SF  2 \"rx_source_operand\" \"r,F,Q\")))]\n   \"ALLOW_RX_FPU_INSNS\"\n-  \"@\n-  fmul\\t%2, %0\n-  fmul\\t%2, %0\n-  fmul\\t%2, %0\"\n+  \"fmul\\t%2, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"33,33,55\")\n    (set_attr \"length\"  \"3,7,5\")]\n@@ -1075,7 +1056,7 @@\n \t(minus:SF (match_operand:SF 1 \"register_operand\"  \"0,0,0\")\n \t\t  (match_operand:SF 2 \"rx_source_operand\" \"r,F,Q\")))]\n   \"ALLOW_RX_FPU_INSNS\"\n-  \"fsub\\t%2, %0\"\n+  \"fsub\\t%Q2, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"44,44,66\")\n    (set_attr \"length\" \"3,7,5\")]\n@@ -1085,7 +1066,7 @@\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r\")\n \t(fix:SI (match_operand:SF 1 \"rx_compare_operand\" \"r,Q\")))]\n   \"ALLOW_RX_FPU_INSNS\"\n-  \"ftoi\\t%1, %0\"\n+  \"ftoi\\t%Q1, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"22,44\")\n    (set_attr \"length\" \"3,5\")]\n@@ -1095,7 +1076,7 @@\n   [(set (match_operand:SF           0 \"register_operand\"  \"=r,r\")\n \t(float:SF (match_operand:SI 1 \"rx_compare_operand\" \"r,Q\")))]\n   \"ALLOW_RX_FPU_INSNS\"\n-  \"itof\\t%1, %0\"\n+  \"itof\\t%Q1, %0\"\n   [(set_attr \"cc\" \"set_zs\")\n    (set_attr \"timings\" \"22,44\")\n    (set_attr \"length\" \"3,6\")]\n@@ -1109,7 +1090,7 @@\n ;; of three instructions at a time.\n \n (define_insn \"bitset\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+  [(set:SI (match_operand:SI 0 \"register_operand\" \"=r\")\n \t   (ior:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t   (ashift:SI (const_int 1)\n \t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"ri\"))))]\n@@ -1119,7 +1100,7 @@\n )\n \n (define_insn \"bitset_in_memory\"\n-  [(set:QI (match_operand:QI 0 \"memory_operand\" \"+m\")\n+  [(set:QI (match_operand:QI 0 \"memory_operand\" \"=m\")\n \t   (ior:QI (match_operand:QI 1 \"memory_operand\" \"0\")\n \t\t   (ashift:QI (const_int 1)\n \t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"ri\"))))]\n@@ -1661,7 +1642,7 @@\n \t\t   UNSPEC_BUILTIN_ROUND))]\n   \"\"\n   \"round\\t%1, %0\"\n-  [(set_attr \"cc\" \"set_zs\")\n+  [(set_attr \"cc\" \"clobber\")\n    (set_attr \"timings\" \"22,44\")   \n    (set_attr \"length\" \"3,5\")]\n )"}]}