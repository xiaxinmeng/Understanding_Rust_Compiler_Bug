{"sha": "97bbdb726aba76ead550e25061029cf0aa78671b", "node_id": "C_kwDOANBUbNoAKDk3YmJkYjcyNmFiYTc2ZWFkNTUwZTI1MDYxMDI5Y2YwYWE3ODY3MWI", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2023-01-02T15:18:02Z"}, "committer": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2023-01-02T15:18:02Z"}, "message": "Define __LIBGCC_DWARF_REG_SIZES_CONSTANT__ if DWARF register size is constant\n\nAnd use that to speed up the libgcc unwinder.\n\ngcc/\n\n\t* debug.h (dwarf_reg_sizes_constant): Declare.\n\t* dwarf2cfi.cc (dwarf_reg_sizes_constant): New function.\n\ngcc/c-family/\n\n\t* c-cppbuiltin.cc (__LIBGCC_DWARF_REG_SIZES_CONSTANT__):\n\tDefine if constant is known.\n\nlibgcc/\n\n\t* unwind-dw2.c (dwarf_reg_size): New function.\n\t(_Unwind_GetGR, _Unwind_SetGR, _Unwind_SetGRPtr)\n\t(_Unwind_SetSpColumn, uw_install_context_1): Use it.\n\t(uw_init_context_1): Do not initialize dwarf_reg_size_table\n\tif not in use.", "tree": {"sha": "03ebd3c211a0c1a51ac08db65a25a9285dfb516a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03ebd3c211a0c1a51ac08db65a25a9285dfb516a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97bbdb726aba76ead550e25061029cf0aa78671b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bbdb726aba76ead550e25061029cf0aa78671b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97bbdb726aba76ead550e25061029cf0aa78671b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bbdb726aba76ead550e25061029cf0aa78671b/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6cac2b44b384cd2091eaeaebeb3478c253a25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6cac2b44b384cd2091eaeaebeb3478c253a25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6cac2b44b384cd2091eaeaebeb3478c253a25d"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "011478c88dad3b2a083f2e5491c323a78b521e15", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bbdb726aba76ead550e25061029cf0aa78671b/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bbdb726aba76ead550e25061029cf0aa78671b/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=97bbdb726aba76ead550e25061029cf0aa78671b", "patch": "@@ -1521,6 +1521,12 @@ c_cpp_builtins (cpp_reader *pfile)\n #endif\n       builtin_define_with_int_value (\"__LIBGCC_DWARF_FRAME_REGISTERS__\",\n \t\t\t\t     DWARF_FRAME_REGISTERS);\n+      {\n+\tint value = dwarf_reg_sizes_constant ();\n+\tif (value > 0)\n+\t  builtin_define_with_int_value (\"__LIBGCC_DWARF_REG_SIZES_CONSTANT__\",\n+\t\t\t\t\t value);\n+      }\n #ifdef EH_RETURN_STACKADJ_RTX\n       cpp_define (pfile, \"__LIBGCC_EH_RETURN_STACKADJ_RTX__\");\n #endif"}, {"sha": "4fe9f3570acea99db35f37d226fd6f7ca9e09b42", "filename": "gcc/debug.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bbdb726aba76ead550e25061029cf0aa78671b/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bbdb726aba76ead550e25061029cf0aa78671b/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=97bbdb726aba76ead550e25061029cf0aa78671b", "patch": "@@ -245,6 +245,8 @@ extern const struct gcc_debug_hooks vmsdbg_debug_hooks;\n \n /* Dwarf2 frame information.  */\n \n+extern int dwarf_reg_sizes_constant ();\n+\n extern void dwarf2out_begin_prologue (unsigned int, unsigned int,\n \t\t\t\t      const char *);\n extern void dwarf2out_vms_end_prologue (unsigned int, const char *);"}, {"sha": "d5a27dc36c5da5226a3bc7349515b34acaa32329", "filename": "gcc/dwarf2cfi.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bbdb726aba76ead550e25061029cf0aa78671b/gcc%2Fdwarf2cfi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bbdb726aba76ead550e25061029cf0aa78671b/gcc%2Fdwarf2cfi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.cc?ref=97bbdb726aba76ead550e25061029cf0aa78671b", "patch": "@@ -334,6 +334,29 @@ generate_dwarf_reg_sizes (poly_uint16 *sizes)\n     targetm.init_dwarf_reg_sizes_extra (sizes);\n }\n \n+/* Return 0 if the DWARF register sizes are not constant, otherwise\n+   return the size constant.  */\n+\n+int\n+dwarf_reg_sizes_constant ()\n+{\n+  poly_uint16 *sizes = XALLOCAVEC (poly_uint16, DWARF_FRAME_REGISTERS);\n+  generate_dwarf_reg_sizes (sizes);\n+\n+  int result;\n+  for (unsigned int i = 0; i < DWARF_FRAME_REGISTERS; i++)\n+    {\n+      unsigned short value;\n+      if (!sizes[i].is_constant (&value))\n+\treturn 0;\n+      if (i == 0)\n+\tresult = value;\n+      else if (result != value)\n+\treturn 0;\n+    }\n+  return result;\n+}\n+\n /* Generate code to initialize the dwarf register size table located\n    at the provided ADDRESS.  */\n "}, {"sha": "c370121bb2945e0f05dfff03cd3f9fdb765e84c4", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bbdb726aba76ead550e25061029cf0aa78671b/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bbdb726aba76ead550e25061029cf0aa78671b/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=97bbdb726aba76ead550e25061029cf0aa78671b", "patch": "@@ -148,9 +148,25 @@ struct _Unwind_Context\n   char by_value[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n };\n \n+#ifdef __LIBGCC_DWARF_REG_SIZES_CONSTANT__\n+static inline unsigned char\n+dwarf_reg_size (int index __attribute__ ((__unused__)))\n+{\n+  return __LIBGCC_DWARF_REG_SIZES_CONSTANT__;\n+}\n+#else\n /* Byte size of every register managed by these routines.  */\n static unsigned char dwarf_reg_size_table[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n \n+\n+static inline unsigned char\n+dwarf_reg_size (unsigned index)\n+{\n+  gcc_assert (index < sizeof (dwarf_reg_size_table));\n+  return dwarf_reg_size_table[index];\n+}\n+#endif\n+\n \f\n /* Read unaligned data from the instruction buffer.  */\n \n@@ -232,8 +248,7 @@ _Unwind_GetGR (struct _Unwind_Context *context, int regno)\n #endif\n \n   index = DWARF_REG_TO_UNWIND_COLUMN (regno);\n-  gcc_assert (index < (int) sizeof(dwarf_reg_size_table));\n-  size = dwarf_reg_size_table[index];\n+  size = dwarf_reg_size (index);\n   val = context->reg[index];\n \n   if (_Unwind_IsExtendedContext (context) && context->by_value[index])\n@@ -280,8 +295,7 @@ _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n   void *ptr;\n \n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n-  gcc_assert (index < (int) sizeof(dwarf_reg_size_table));\n-  size = dwarf_reg_size_table[index];\n+  size = dwarf_reg_size (index);\n \n   if (_Unwind_IsExtendedContext (context) && context->by_value[index])\n     {\n@@ -329,9 +343,8 @@ _Unwind_SetGRValue (struct _Unwind_Context *context, int index,\n \t\t    _Unwind_Word val)\n {\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n-  gcc_assert (index < (int) sizeof(dwarf_reg_size_table));\n   /* Return column size may be smaller than _Unwind_Context_Reg_Val.  */\n-  gcc_assert (dwarf_reg_size_table[index] <= sizeof (_Unwind_Context_Reg_Val));\n+  gcc_assert (dwarf_reg_size (index) <= sizeof (_Unwind_Context_Reg_Val));\n \n   context->by_value[index] = 1;\n   context->reg[index] = _Unwind_Get_Unwind_Context_Reg_Val (val);\n@@ -1387,7 +1400,7 @@ static inline void\n _Unwind_SetSpColumn (struct _Unwind_Context *context, void *cfa,\n \t\t     _Unwind_SpTmp *tmp_sp)\n {\n-  int size = dwarf_reg_size_table[__builtin_dwarf_sp_column ()];\n+  int size = dwarf_reg_size (__builtin_dwarf_sp_column ());\n \n   if (size == sizeof(_Unwind_Ptr))\n     tmp_sp->ptr = (_Unwind_Ptr) cfa;\n@@ -1573,11 +1586,13 @@ uw_advance_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n     }\t\t\t\t\t\t\t\t\t   \\\n   while (0)\n \n+#ifndef __LIBGCC_DWARF_REG_SIZES_CONSTANT__\n static inline void\n init_dwarf_reg_size_table (void)\n {\n   __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n }\n+#endif\n \n static void __attribute__((noinline))\n uw_init_context_1 (struct _Unwind_Context *context,\n@@ -1596,16 +1611,18 @@ uw_init_context_1 (struct _Unwind_Context *context,\n   code = uw_frame_state_for (context, &fs);\n   gcc_assert (code == _URC_NO_REASON);\n \n-#if __GTHREADS\n+#ifndef __LIBGCC_DWARF_REG_SIZES_CONSTANT__\n+# if __GTHREADS\n   {\n     static __gthread_once_t once_regsizes = __GTHREAD_ONCE_INIT;\n     if (__gthread_once (&once_regsizes, init_dwarf_reg_size_table) != 0\n \t&& dwarf_reg_size_table[0] == 0)\n       init_dwarf_reg_size_table ();\n   }\n-#else\n+# else\n   if (dwarf_reg_size_table[0] == 0)\n     init_dwarf_reg_size_table ();\n+# endif\n #endif\n \n   /* Force the frame state to use the known cfa value.  */\n@@ -1682,20 +1699,20 @@ uw_install_context_1 (struct _Unwind_Context *current,\n \t{\n \t  _Unwind_Word w;\n \t  _Unwind_Ptr p;\n-\t  if (dwarf_reg_size_table[i] == sizeof (_Unwind_Word))\n+\t  if (dwarf_reg_size (i) == sizeof (_Unwind_Word))\n \t    {\n \t      w = (_Unwind_Internal_Ptr) t;\n \t      memcpy (c, &w, sizeof (_Unwind_Word));\n \t    }\n \t  else\n \t    {\n-\t      gcc_assert (dwarf_reg_size_table[i] == sizeof (_Unwind_Ptr));\n+\t      gcc_assert (dwarf_reg_size (i) == sizeof (_Unwind_Ptr));\n \t      p = (_Unwind_Internal_Ptr) t;\n \t      memcpy (c, &p, sizeof (_Unwind_Ptr));\n \t    }\n \t}\n       else if (t && c && t != c)\n-\tmemcpy (c, t, dwarf_reg_size_table[i]);\n+\tmemcpy (c, t, dwarf_reg_size (i));\n     }\n \n   /* If the current frame doesn't have a saved stack pointer, then we"}]}