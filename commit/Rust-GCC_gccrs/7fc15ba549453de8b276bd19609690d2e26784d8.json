{"sha": "7fc15ba549453de8b276bd19609690d2e26784d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjMTViYTU0OTQ1M2RlOGIyNzZiZDE5NjA5NjkwZDJlMjY3ODRkOA==", "commit": {"author": {"name": "Brooks Moses", "email": "bmoses@stanford.edu", "date": "2006-10-04T23:07:39Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-10-04T23:07:39Z"}, "message": "gfortran.texi: Consistently refer to the compiler as \"GNU Fortran\".\n\n2006-10-04  Brooks Moses  <bmoses@stanford.edu>\n\n\t* gfortran.texi: Consistently refer to the compiler as \"GNU\n\tFortran\".\n\t* intrinsic.texi: Ditto.\n\t* invoke.texi: Ditto.\n\nFrom-SVN: r117442", "tree": {"sha": "0aff06ce98038fedb98a2df1565e28efa6c20df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aff06ce98038fedb98a2df1565e28efa6c20df9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fc15ba549453de8b276bd19609690d2e26784d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc15ba549453de8b276bd19609690d2e26784d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc15ba549453de8b276bd19609690d2e26784d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc15ba549453de8b276bd19609690d2e26784d8/comments", "author": null, "committer": null, "parents": [{"sha": "4afc7adf84d37fa4d939711615d720d3b4ce00a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afc7adf84d37fa4d939711615d720d3b4ce00a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afc7adf84d37fa4d939711615d720d3b4ce00a0"}], "stats": {"total": 278, "additions": 143, "deletions": 135}, "files": [{"sha": "0125132eeaba5a94490cefcfb877f0efc0f4d41a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7fc15ba549453de8b276bd19609690d2e26784d8", "patch": "@@ -1,3 +1,10 @@\n+2006-10-04  Brooks Moses  <bmoses@stanford.edu>\n+\n+\t* gfortran.texi: Consistently refer to the compiler as \"GNU\n+\tFortran\".\n+\t* intrinsic.texi: Ditto.\n+\t* invoke.texi: Ditto.\n+\n 2006-10-04  Richard Henderson  <rth@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c4e76ec49cf8672150df25f389ccf7f81bdce613", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 76, "deletions": 75, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=7fc15ba549453de8b276bd19609690d2e26784d8", "patch": "@@ -5,7 +5,7 @@\n \n @include gcc-common.texi\n \n-@settitle The GNU Fortran 95 Compiler\n+@settitle The GNU Fortran Compiler\n \n @c Create a separate index for command line options\n @defcodeindex op\n@@ -63,10 +63,10 @@ texts being (a) (see below), and with the Back-Cover Texts being (b)\n @ifinfo\n @dircategory Software development\n @direntry\n-* gfortran: (gfortran).                  The GNU Fortran 95 Compiler.\n+* gfortran: (gfortran).                  The GNU Fortran Compiler.\n @end direntry\n This file documents the use and the internals of\n-the GNU Fortran 95 compiler, (@command{gfortran}).\n+the GNU Fortran compiler, (@command{gfortran}).\n \n Published by the Free Software Foundation\n 51 Franklin Street, Fifth Floor\n@@ -78,7 +78,7 @@ Boston, MA 02110-1301 USA\n \n @setchapternewpage odd\n @titlepage\n-@title Using GNU Fortran 95\n+@title Using GNU Fortran\n @sp 2\n @center The gfortran team\n @page\n@@ -103,13 +103,13 @@ Boston, MA 02110-1301, USA@*\n @cindex Introduction\n \n This manual documents the use of @command{gfortran}, \n-the GNU Fortran 95 compiler. You can find in this manual how to invoke\n+the GNU Fortran compiler. You can find in this manual how to invoke\n @command{gfortran}, as well as its features and incompatibilities.\n \n @ifset DEVELOPMENT\n @emph{Warning:} This document, and the compiler it describes, are still\n under development.  While efforts are made to keep it up-to-date, it might\n-not accurately reflect the status of the most recent @command{gfortran}.\n+not accurately reflect the status of the most recent GNU Fortran compiler.\n @end ifset\n \n @comment\n@@ -118,16 +118,16 @@ not accurately reflect the status of the most recent @command{gfortran}.\n @comment  better formatting.\n @comment\n @menu\n-* Getting Started::      What you should know about @command{gfortran}.\n-* GFORTRAN and GCC::     You can compile Fortran, C, or other programs.\n-* GFORTRAN and G77::     Why we chose to start from scratch.\n-* Invoking GFORTRAN::    Command options supported by @command{gfortran}.\n-* Project Status::       Status of @command{gfortran}, roadmap, proposed extensions.\n+* Getting Started::      What you should know about GNU Fortran.\n+* GNU Fortran and GCC::  You can compile Fortran, C, or other programs.\n+* GNU Fortran and G77::  Why we chose to start from scratch.\n+* Invoking GNU Fortran:: Command options supported by @command{gfortran}.\n+* Project Status::       Status of GNU Fortran, roadmap, proposed extensions.\n * Contributing::         How you can help.\n-* Standards::\t         Standards supported by @command{gfortran}\n+* Standards::\t         Standards supported by GNU Fortran.\n * Runtime::              Influencing runtime behavior with environment variables.\n-* Extensions::           Language extensions implemented by @command{gfortran}\n-* Intrinsic Procedures:: Intrinsic procedures supported by @command{gfortran}\n+* Extensions::           Language extensions implemented by GNU Fortran.\n+* Intrinsic Procedures:: Intrinsic procedures supported by GNU Fortran.\n * Copying::              GNU General Public License says\n                          how you can copy and share GNU Fortran.\n * GNU Free Documentation License::\n@@ -145,16 +145,16 @@ not accurately reflect the status of the most recent @command{gfortran}.\n @node Getting Started\n @chapter Getting Started\n \n-Gfortran is the GNU Fortran 95 compiler front end,\n+The GNU Fortran compiler front end was\n designed initially as a free replacement for,\n or alternative to, the unix @command{f95} command;\n @command{gfortran} is the command you'll use to invoke the compiler.\n \n-Gfortran is still in an early state of development.\n-@command{gfortran} can generate code for most constructs and expressions,\n+The GNU Fortran compiler is still in an early state of development.\n+It can generate code for most constructs and expressions,\n but much work remains to be done.\n \n-When @command{gfortran} is finished,\n+When the GNU Fortran compiler is finished,\n it will do everything you expect from any decent compiler: \n \n @itemize @bullet\n@@ -210,7 +210,7 @@ This machine code is organized into @dfn{modules} and is located\n and @dfn{linked} to the user program. \n @end itemize\n \n-Gfortran consists of several components:\n+The GNU Fortran compiler consists of several components:\n \n @itemize @bullet\n @item\n@@ -228,7 +228,7 @@ The @command{gfortran} command itself,\n which also might be installed as the\n system's @command{f95} command.\n @command{gfortran} is just another driver program,\n-but specifically for the Fortran 95 compiler only.\n+but specifically for the Fortran compiler only.\n The difference with @command{gcc} is that @command{gfortran}\n will automatically link the correct libraries to your program.\n \n@@ -245,7 +245,7 @@ and routines for interaction with files and the operating system.\n \n @item\n The Fortran compiler itself, (@command{f951}).\n-This is the gfortran parser and code generator,\n+This is the GNU Fortran parser and code generator,\n linked to and interfaced with the GCC backend library.\n @command{f951} ``translates'' the source code to\n assembler code.  You would typically not use this\n@@ -257,11 +257,11 @@ programs will call it for you.\n \n \n @c ---------------------------------------------------------------------\n-@c GFORTRAN and GCC\n+@c GNU Fortran and GCC\n @c ---------------------------------------------------------------------\n \n-@node GFORTRAN and GCC\n-@chapter GFORTRAN and GCC\n+@node GNU Fortran and GCC\n+@chapter GNU Fortran and GCC\n @cindex GNU Compiler Collection\n \n GCC used to be the GNU ``C'' Compiler,\n@@ -294,27 +294,27 @@ handed off too the back end which assembles the program unit.\n \n Different phases in this translation process can be,\n and in fact @emph{are} merged in many compiler front ends.\n-GNU Fortran 95 has a strict separation between the\n+GNU Fortran has a strict separation between the\n parser and code generator.\n \n-The goal of the gfortran project is to build a new front end for GCC.\n+The goal of the GNU Fortran project is to build a new front end for GCC.\n Specifically, a Fortran 95 front end.\n-In a non-gfortran installation,\n-@command{gcc} will not be able to compile Fortran 95 source code\n+In a non-@command{gfortran} installation,\n+@command{gcc} will not be able to compile Fortran source code\n (only the ``C'' front end has to be compiled if you want to build GCC,\n all other languages are optional).\n-If you build GCC with gfortran, @command{gcc} will recognize\n-@file{.f/.f90/.f95} source files and accepts Fortran 95 specific\n+If you build GCC with @command{gfortran}, @command{gcc} will recognize\n+@file{.f/.f90/.f95} source files and accepts Fortran specific\n command line options.\n \n \n \n @c ---------------------------------------------------------------------\n-@c GFORTRAN and G77\n+@c GNU Fortran and G77\n @c ---------------------------------------------------------------------\n \n-@node GFORTRAN and G77\n-@chapter GFORTRAN and G77\n+@node GNU Fortran and G77\n+@chapter GNU Fortran and G77\n @cindex Fortran 77\n @cindex G77\n \n@@ -359,10 +359,10 @@ and then build a Fortran 95 compiler out of it.\n @chapter Project Status\n \n @quotation\n-As soon as gfortran can parse all of the statements correctly,\n+As soon as @command{gfortran} can parse all of the statements correctly,\n it will be in the ``larva'' state.\n When we generate code, the ``puppa'' state.\n-When gfortran is done,\n+When @command{gfortran} is done,\n we'll see if it will be a beautiful butterfly,\n or just a big bug....\n \n@@ -374,7 +374,8 @@ the GCC homepage in March 18, 2000\n (even though Andy had already been working on it for a while,\n of course).\n \n-Gfortran is currently reaching the stage where is is able to compile real\n+The GNU Fortran compiler is currently reaching the stage where is is able to\n+compile real\n world programs.  However it is still under development and has many rough\n edges.\n \n@@ -389,19 +390,19 @@ edges.\n \n @table @emph\n @item Front end\n-This is the part of gfortran which parses a source file, verifies that it\n-is valid Fortran 95, performs compile time replacement of constants\n+This is the part of the GNU Fortran compiler which parses a source file, verifies that it\n+is valid Fortran, performs compile time replacement of constants\n (PARAMETER variables) and reads and generate module files. This is\n almost complete. Every Fortran 95 source should be accepted, and most\n none-Fortran 95 source should be rejected. If you find a source file where\n this is not true, please tell us. You can use the -fsyntax-only switch to\n-make gfortran quit after running the front end, effectively reducing it to\n+make @command{gfortran} quit after running the front end, effectively reducing it to\n a syntax checker.\n \n @item Middle end interface\n-These are the parts of gfortran that take the parse tree generated by the\n+These are the parts of GNU Fortran that take the parse tree generated by the\n front end and translate it to the GENERIC form required by the GCC back\n-end. Work is ongoing in these parts of gfortran, but a large part has\n+end. Work is ongoing in these parts of GNU Fortran, but a large part has\n already been completed.\n @end table\n \n@@ -429,7 +430,7 @@ Array intrinsics mostly work.\n @node Proposed Extensions\n @section Proposed Extensions\n \n-Here's a list of proposed extensions for @command{gfortran}, in no particular\n+Here's a list of proposed extensions for the GNU Fortran compiler, in no particular\n order.  Most of these are necessary to be fully compatible with\n existing Fortran compilers, but they are not part of the official\n J3 Fortran 95 standard.\n@@ -601,7 +602,7 @@ error is used. If the first letter is @samp{n}, @samp{N} or\n \n This environment variable controls where scratch files are\n created.  If this environment variable is missing,\n-gfortran searches for the environment variable @env{TMP}.  If\n+GNU Fortran searches for the environment variable @env{TMP}.  If\n this is also missing, the default is @file{/tmp}.\n \n @node GFORTRAN_UNBUFFERED_ALL\n@@ -648,7 +649,7 @@ be sure to quote spaces, as in\n @smallexample\n $ GFORTRAN_LIST_SEPARATOR='  ,  ' ./a.out\n @end smallexample\n-when @code{a.out} is the gfortran program that you want to run.\n+when @code{a.out} is the compiled Fortran program that you want to run.\n Default is a single space.\n \n @node GFORTRAN_CONVERT_UNIT\n@@ -726,11 +727,11 @@ setting a default data representation for the whole program.  The\n @chapter Extensions\n @cindex Extension\n \n-@command{gfortran} implements a number of extensions over standard\n+GNU Fortran implements a number of extensions over standard\n Fortran. This chapter contains information on their syntax and\n-meaning.  There are currently two categories of @command{gfortran}\n+meaning.  There are currently two categories of GNU Fortran\n extensions, those that provide functionality beyond that provided\n-by any standard, and those that are supported by @command{gfortran}\n+by any standard, and those that are supported by GNU Fortran\n purely for backward compatibility with legacy compilers.  By default,\n @option{-std=gnu} allows the compiler to accept both types of\n extensions, but to warn about the use of the latter.  Specifying\n@@ -759,7 +760,7 @@ of extensions, and @option{-std=legacy} allows both without warning.\n @section Old-style kind specifications\n @cindex Kind specifications\n \n-@command{gfortran} allows old-style kind specifications in\n+GNU Fortran allows old-style kind specifications in\n declarations. These look like:\n @smallexample\n       TYPESPEC*k x,y,z\n@@ -776,7 +777,7 @@ other words, it is equivalent to the standard conforming declaration\n @section Old-style variable initialization\n @cindex Initialization\n \n-@command{gfortran} allows old-style initialization of variables of the\n+GNU Fortran allows old-style initialization of variables of the\n form:\n @smallexample\n       INTEGER*4 i/1/,j/2/\n@@ -808,7 +809,7 @@ automatically acquire the @code{SAVE} attribute.\n @section Extensions to namelist\n @cindex Namelist\n \n-@command{gfortran} fully supports the Fortran 95 standard for namelist I/O\n+GNU Fortran fully supports the Fortran 95 standard for namelist I/O\n including array qualifiers, substrings and fully qualified derived types.\n The output from a namelist write is compatible with namelist read.  The\n output has all names in upper case and indentation to column 1 after the\n@@ -874,7 +875,7 @@ given the value 0.00 and succeeding elements will be 1.00 and 2.00.\n @section X format descriptor\n @cindex X format descriptor\n \n-To support legacy codes, @command{gfortran} permits the count field\n+To support legacy codes, GNU Fortran permits the count field\n of the X edit descriptor in FORMAT statements to be omitted.  When\n omitted, the count is implicitly assumed to be one.\n \n@@ -887,7 +888,7 @@ omitted, the count is implicitly assumed to be one.\n @section Commas in FORMAT specifications\n @cindex Commas in FORMAT specifications\n \n-To support legacy codes, @command{gfortran} allows the comma separator\n+To support legacy codes, GNU Fortran allows the comma separator\n to be omitted immediately before and after character string edit\n descriptors in FORMAT statements.\n \n@@ -901,7 +902,7 @@ descriptors in FORMAT statements.\n @section Missing period in FORMAT specifications\n @cindex Missing period in FORMAT specifications\n \n-To support legacy codes, @command{gfortran} allows missing periods in format\n+To support legacy codes, GNU Fortran allows missing periods in format\n specifications if and only if -std=legacy is given on the command line.  This\n is considered non-conforming code and is discouraged.\n \n@@ -915,22 +916,22 @@ is considered non-conforming code and is discouraged.\n @section I/O item lists\n @cindex I/O item lists\n \n-To support legacy codes, @command{gfortran} allows the input item list\n+To support legacy codes, GNU Fortran allows the input item list\n of the READ statement, and the output item lists of the WRITE and PRINT\n statements to start with a comma.\n \n @node Hexadecimal constants\n @section Hexadecimal constants\n @cindex Hexadecimal constants\n \n-As a GNU extension, @command{gfortran} allows hexadecimal constants to\n+As an extension, GNU Fortran allows hexadecimal constants to\n be specified using the X prefix, in addition to the standard Z prefix.\n BOZ literal constants can also be specified by adding a suffix to the string.\n For example, @code{Z'ABC'} and @code{'ABC'Z} are the same constant.\n \n The Fortran standard restricts the appearance of a BOZ literal constant to\n the @code{DATA} statement, and it is expected to be assigned to an \n-@code{INTEGER} variable.  @command{gfortran} permits a BOZ to appear\n+@code{INTEGER} variable.  GNU Fortran permits a BOZ literal to appear\n in any initialization expression as well as assignment statements.\n \n Attempts to use a BOZ literal constant to do a bitwise initialization of a\n@@ -951,14 +952,14 @@ a workaround for legacy code that initializes integers in this manner.\n @section Real array indices\n @cindex Real array indices\n \n-As a GNU extension, @command{gfortran} allows arrays to be indexed using\n+As an extension, GNU Fortran allows arrays to be indexed using\n real types, whose values are implicitly converted to integers.\n \n @node Unary operators\n @section Unary operators\n @cindex Unary operators\n \n-As a GNU extension, @command{gfortran} allows unary plus and unary\n+As an extension, GNU Fortran allows unary plus and unary\n minus operators to appear as the second operand of binary arithmetic\n operators without the need for parenthesis.\n \n@@ -970,8 +971,8 @@ operators without the need for parenthesis.\n @section Implicitly interconvert LOGICAL and INTEGER\n @cindex Implicitly interconvert LOGICAL and INTEGER\n \n-As a GNU extension for backwards compatibility with other compilers,\n-@command{gfortran} allows the implicit conversion of LOGICALs to INTEGERs\n+As an extension for backwards compatibility with other compilers,\n+GNU Fortran allows the implicit conversion of LOGICALs to INTEGERs\n and vice versa.  When converting from a LOGICAL to an INTEGER, the numeric\n value of @code{.FALSE.} is zero, and that of @code{.TRUE.} is one.  When\n converting from INTEGER to LOGICAL, the value zero is interpreted as\n@@ -991,7 +992,7 @@ or @samp{h}, and there must be an literal, unsigned, nonzero default integer\n constant indicating the number of characters in the string. Hollerith constants\n are stored as byte strings, one character per byte.\n \n-@command{gfortran} supports Hollerith constants. They can be used as the right\n+GNU Fortran supports Hollerith constants. They can be used as the right\n hands in the @code{DATA} statement and @code{ASSIGN} statement, also as the\n arguments. The left hands can be of Integer, Real, Complex and Logical type.\n The constant will be padded or truncated to fit the size of left hand.\n@@ -1105,7 +1106,7 @@ and also in any routine where a pointee is used, but any variable with\n which it shares storage is not used.  Code that violates these rules\n may not run as the user intends.  This is not a bug in the optimizer;\n any code that violates the aliasing rules is illegal.  (Note that this\n-is not unique to gfortran; any Fortran compiler that supports Cray\n+is not unique to GNU Fortran; any Fortran compiler that supports Cray\n pointers will ``incorrectly'' optimize code with illegal aliasing.)\n \n There are a number of restrictions on the attributes that can be\n@@ -1142,7 +1143,7 @@ will not change the base address of the array that was passed.\n @section CONVERT specifier\n @cindex CONVERT specifier\n \n-gfortran allows the conversion of unformatted data between little-\n+GNU Fortran allows the conversion of unformatted data between little-\n and big-endian representation to facilitate moving of data\n between different systems.  The conversion can be indicated with\n the @code{CONVERT} specifier on the @code{OPEN} statement.\n@@ -1173,8 +1174,8 @@ The value of the conversion can be queried by using\n @code{INTEGER} values of all supported kinds and for @code{REAL}\n on IEEE systems of kinds 4 and 8.  Conversion between different\n ``extended double'' types on different architectures such as\n-m68k and x86_64, which gfortran\n-supports as @code{REAL(KIND=10)} will probably not work.\n+m68k and x86_64, which GNU Fortran\n+supports as @code{REAL(KIND=10)}, will probably not work.\n \n @emph{Note that the values specified via the GFORTRAN_CONVERT_UNIT\n environment variable will override the CONVERT specifier in the\n@@ -1190,8 +1191,8 @@ portable.\n @section OpenMP\n @cindex OpenMP\n \n-gfortran attempts to be OpenMP Application Program Interface v2.5\n-compatible when invoked with the @code{-fopenmp} option.  gfortran\n+GNU Fortran attempts to be OpenMP Application Program Interface v2.5\n+compatible when invoked with the @code{-fopenmp} option.  GNU Fortran\n then generates parallelized code according to the OpenMP directives\n used in the source.  The OpenMP Fortran runtime library\n routines are provided both in a form of Fortran 90 module named\n@@ -1219,12 +1220,12 @@ to create it.\n We're always in need of more people helping out with ideas\n and comments, writing documentation and contributing code.\n \n-If you want to contribute to GNU Fortran 95,\n+If you want to contribute to GNU Fortran,\n have a look at the long lists of projects you can take on.\n Some of these projects are small,\n some of them are large;\n some are completely orthogonal to the rest of what is\n-happening on @command{gfortran},\n+happening on GNU Fortran,\n but others are ``mainstream'' projects in need of enthusiastic hackers.\n All of these projects are important!\n We'll eventually get around to the things here,\n@@ -1237,7 +1238,7 @@ but they are also things doable by someone who is willing and able.\n \n \n @node Contributors\n-@section Contributors to GNU Fortran 95\n+@section Contributors to GNU Fortran\n @cindex Contributors\n @cindex Credits\n @cindex Authors\n@@ -1247,7 +1248,7 @@ also the initiator of the whole project.  Thanks Andy!\n Most of the interface with GCC was written by @emph{Paul Brook}.\n \n The following individuals have contributed code and/or\n-ideas and significant help to the gfortran project\n+ideas and significant help to the GNU Fortran project\n (in no particular order):\n \n @itemize @minus\n@@ -1282,7 +1283,7 @@ ideas and significant help to the gfortran project\n The following people have contributed bug reports,\n smaller or larger patches,\n and much needed feedback and encouragement for the\n-@command{gfortran} project: \n+GNU Fortran project: \n \n @itemize @minus\n @item Erik Schnetter\n@@ -1291,7 +1292,7 @@ and much needed feedback and encouragement for the\n @end itemize\n \n Many other individuals have helped debug,\n-test and improve @command{gfortran} over the past few years,\n+test and improve the GNU Fortran compiler over the past few years,\n and we welcome you to do the same!\n If you already have done so,\n and you would like to see your name listed in the\n@@ -1335,7 +1336,7 @@ please contact a project maintainer.\n @chapter Standards\n @cindex Standards\n \n-The GNU Fortran 95 Compiler aims to be a conforming implementation of\n+The GNU Fortran compiler aims to be a conforming implementation of\n ISO/IEC 1539:1997 (Fortran 95).\n \n In the future it may also support other variants of and extensions to\n@@ -1349,7 +1350,7 @@ ISO Fortran 2003 and OpenMP.\n @node Fortran 2003 status\n @section Fortran 2003 status\n \n-Although @command{gfortran} focuses on implementing the Fortran 95\n+Although GNU Fortran focuses on implementing the Fortran 95\n standard for the time being, a few Fortran 2003 features are currently\n available.\n "}, {"sha": "31d1f1fb2389a25a4124936e7204f5c951df992a", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=7fc15ba549453de8b276bd19609690d2e26784d8", "patch": "@@ -1,7 +1,7 @@\n @ignore\n Copyright (C) 2005, 2006\n Free Software Foundation, Inc.\n-This is part of the GFORTRAN manual.   \n+This is part of the GNU Fortran manual.   \n For copying conditions, see the file gfortran.texi.\n \n Permission is granted to copy, distribute and/or modify this document\n@@ -247,7 +247,7 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n @node Introduction\n @section Introduction to intrinsic procedures\n \n-Gfortran provides a rich set of intrinsic procedures that includes all\n+GNU Fortran provides a rich set of intrinsic procedures that includes all\n the intrinsic procedures required by the Fortran 95 standard, a set of\n intrinsic procedures for backwards compatibility with Gnu Fortran 77\n (i.e., @command{g77}), and a small selection of intrinsic procedures\n@@ -256,7 +256,7 @@ description in either the Fortran 95 standard or the Fortran 2003 standard,\n is unintentional and the standard(s) should be considered authoritative.\n \n The enumeration of the @code{KIND} type parameter is processor defined in\n-the Fortran 95 standard.  Gfortran defines the default integer type and\n+the Fortran 95 standard.  GNU Fortran defines the default integer type and\n default real type by @code{INTEGER(KIND=4)} and @code{REAL(KIND=4)},\n respectively.  The standard mandates that both data types shall have\n another kind, which have more precision.  On typical target architectures\n@@ -272,7 +272,7 @@ Many of the intrinsics procedures take one or more optional arguments.\n This document follows the convention used in the Fortran 95 standard,\n and denotes such arguments by square brackets.\n \n-@command{Gfortran} offers the @option{-std=f95} and @option{-std=gnu} options,\n+GNU Fortran offers the @option{-std=f95} and @option{-std=gnu} options,\n which can be used to restrict the set of intrinsic procedures to a \n given standard.  By default, @command{gfortran} sets the @option{-std=gnu}\n option, and so all intrinsic procedures described here are accepted.  There\n@@ -386,7 +386,7 @@ end program test_abs\n @findex @code{ACCESS} \n @cindex file system functions\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -1867,7 +1867,7 @@ END PROGRAM\n @findex @code{CHMOD} \n @cindex file system functions\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -3343,7 +3343,7 @@ formatted output. Stream I/O should not be mixed with normal record-oriented\n (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n \n This intrinsic routine is provided for backwards compatibility with \n-GNU Fortran 77.  @command{Gfortran} provides the Fortran 2003 Stream facility.\n+@command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n \n@@ -3398,7 +3398,7 @@ Stream I/O should not be mixed with normal record-oriented (formatted or\n unformatted) I/O on the same unit; the results are unpredictable.\n \n This intrinsic routine is provided for backwards compatibility with \n-GNU Fortran 77.  @command{Gfortran} provides the Fortran 2003 Stream facility.\n+@command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n \n@@ -3571,7 +3571,7 @@ formatted output. Stream I/O should not be mixed with normal record-oriented\n (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n \n This intrinsic routine is provided for backwards compatibility with \n-GNU Fortran 77.  @command{Gfortran} provides the Fortran 2003 Stream facility.\n+@command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n \n@@ -3621,7 +3621,7 @@ output. Stream I/O should not be mixed with normal record-oriented\n (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n \n This intrinsic routine is provided for backwards compatibility with \n-GNU Fortran 77.  @command{Gfortran} provides the Fortran 2003 Stream facility.\n+@command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n \n@@ -3713,7 +3713,7 @@ end program test_fraction\n @item @emph{Description}:\n Frees memory previously allocated by @code{MALLOC()}. The @code{FREE}\n intrinsic is an extension intended to be used with Cray pointers, and is\n-provided in @command{gfortran} to allow user to compile legacy code. For\n+provided in GNU Fortran to allow user to compile legacy code. For\n new code using Fortran 95 pointers, the memory de-allocation intrinsic is\n @code{DEALLOCATE}.\n \n@@ -3773,7 +3773,7 @@ GNU extension\n @findex @code{FSEEK} \n @cindex file system functions\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -4111,7 +4111,7 @@ See @code{GETPID} for an example.\n @findex @code{GMTIME} \n @cindex time function\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -5280,7 +5280,7 @@ Elemental function\n @findex @code{LSHIFT} \n @cindex bit manipulation\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -5308,7 +5308,7 @@ Function\n @findex @code{LTIME} \n @cindex time function\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -5341,7 +5341,7 @@ Subroutine\n @code{MALLOC(SIZE)} allocates @var{SIZE} bytes of dynamic memory and\n returns the address of the allocated memory. The @code{MALLOC} intrinsic\n is an extension intended to be used with Cray pointers, and is provided\n-in @command{gfortran} to allow user to compile legacy code. For new code\n+in GNU Fortran to allow the user to compile legacy code. For new code\n using Fortran 95 pointers, the memory allocation intrinsic is\n @code{ALLOCATE}.\n \n@@ -6549,7 +6549,7 @@ The value returned is equal to\n @findex @code{RSHIFT} \n @cindex bit manipulation\n \n-Not yet implemented in gfortran.\n+Not yet implemented in GNU Fortran.\n \n @table @asis\n @item @emph{Description}:\n@@ -7273,7 +7273,7 @@ See @code{RAND} and @code{IRAND} for examples.\n The Fortran 2003 standard specifies the intrinsic @code{RANDOM_SEED} to\n initialize the pseudo-random numbers generator and @code{RANDOM_NUMBER}\n to generate pseudo-random numbers. Please note that in\n-@command{gfortran}, these two sets of intrinsics (@code{RAND},\n+GNU Fortran, these two sets of intrinsics (@code{RAND},\n @code{IRAND} and @code{SRAND} on the one hand, @code{RANDOM_NUMBER} and\n @code{RANDOM_SEED} on the other hand) access two independent\n pseudo-random number generators."}, {"sha": "50d3c33728e5c36205aa299dcded3b53ce516e2c", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc15ba549453de8b276bd19609690d2e26784d8/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=7fc15ba549453de8b276bd19609690d2e26784d8", "patch": "@@ -1,6 +1,6 @@\n @c Copyright (C) 2004, 2005, 2006\n @c Free Software Foundation, Inc.\n-@c This is part of the GFORTRAN manual.   \n+@c This is part of the GNU Fortran manual.   \n @c For copying conditions, see the file gfortran.texi.\n \n @ignore\n@@ -28,7 +28,7 @@ included in the gfdl(7) man page.\n @c man end\n @c Set file name and title for the man page.\n @setfilename gfortran\n-@settitle GNU Fortran 95 compiler.\n+@settitle GNU Fortran compiler.\n @c man begin SYNOPSIS\n gfortran [@option{-c}|@option{-S}|@option{-E}]\n          [@option{-g}] [@option{-pg}] [@option{-O}@var{level}]\n@@ -54,20 +54,20 @@ For instructions on reporting bugs, see\n @c man end\n @c man begin AUTHOR\n See the Info entry for @command{gfortran} for contributors to GCC and\n-GFORTRAN@.\n+GNU Fortran.\n @c man end\n @end ignore\n \n-@node Invoking GFORTRAN\n-@chapter GNU Fortran 95 Command Options\n-@cindex GNU Fortran 95 command options\n+@node Invoking GNU Fortran\n+@chapter GNU Fortran Command Options\n+@cindex GNU Fortran command options\n @cindex command options\n-@cindex options, GNU Fortran 95 command\n+@cindex options, @command{gfortran} command\n \n @c man begin DESCRIPTION\n \n The @command{gfortran} command supports all the options supported by the\n-@command{gcc} command.  Only options specific to gfortran are documented here.\n+@command{gcc} command.  Only options specific to GNU Fortran are documented here.\n \n @xref{Invoking GCC,,GCC Command Options,gcc,Using the GNU Compiler\n Collection (GCC)}, for information\n@@ -76,12 +76,12 @@ therefore, the @command{gfortran} command).\n \n @cindex options, negative forms\n @cindex negative forms of options\n-All @command{gcc} and @command{gfortran} options\n+All GCC and GNU Fortran options\n are accepted both by @command{gfortran} and by @command{gcc}\n (as well as any other drivers built at the same time,\n such as @command{g++}),\n-since adding @command{gfortran} to the @command{gcc} distribution\n-enables acceptance of @command{gfortran} options\n+since adding GNU Fortran to the GCC distribution\n+enables acceptance of GNU Fortran options\n by all of the relevant drivers.\n \n In some cases, options have positive and negative forms;\n@@ -101,7 +101,7 @@ one is not the default.\n * Runtime Options::     Influencing runtime behavior\n * Code Gen Options::    Specifying conventions for function calls, data layout\n                         and register usage.\n-* Environment Variables:: Env vars that affect GNU Fortran.\n+* Environment Variables:: Env vars that affect @command{gfortran}.\n @end menu\n \n @node Option Summary\n@@ -197,7 +197,7 @@ form is determined by the file extension.\n Accept all of the intrinsic procedures provided in libgfortran \n without regard to the setting of @option{-std}.  In particular, \n this option can be quite useful with @option{-std=f95}.  Additionally,\n-gfortran will ignore @option{-Wnonstd-intrinsics}.\n+@command{gfortran} will ignore @option{-Wnonstd-intrinsics}.\n \n @cindex option, -fd-lines-as-code\n @cindex -fd-lines-as-code, option\n@@ -315,7 +315,7 @@ in.\n @cindex options, -frange-check\n @item -frange-check\n Enable range checking on results of simplification of constant expressions\n-during compilation.  For example, by default, @command{gfortran} will give\n+during compilation.  For example, by default, GNU Fortran will give\n an overflow error at compile time when simplifying @code{a = EXP(1000)}.\n With @samp{-fno-range-check}, no error will be given and the variable @code{a}\n will be assigned the value @code{+Infinity}.  Similarly,\n@@ -366,12 +366,12 @@ Check the code for syntax errors, but don't do anything beyond that.\n @cindex -pedantic option\n @cindex options, -pedantic\n @item -pedantic\n-Issue warnings for uses of extensions to FORTRAN 95.\n+Issue warnings for uses of extensions to Fortran 95.\n @option{-pedantic} also applies to C-language constructs where they\n occur in GNU Fortran source files, such as use of @samp{\\e} in a\n character constant within a directive like @samp{#include}.\n \n-Valid FORTRAN 95 programs should compile properly with or without\n+Valid Fortran 95 programs should compile properly with or without\n this option.\n However, without this option, certain GNU extensions and traditional\n Fortran features are supported as well.\n@@ -380,7 +380,7 @@ With this option, many of them are rejected.\n Some users try to use @option{-pedantic} to check programs for conformance.\n They soon find that it does not do quite what they want---it finds some\n nonstandard practices, but not all.\n-However, improvements to @command{gfortran} in this area are welcome.\n+However, improvements to GNU Fortran in this area are welcome.\n \n This should be used in conjunction with -std=@var{std}.\n \n@@ -438,7 +438,7 @@ The following example will trigger the warning.\n Warn about missing ampersand in continued character constants. The warning is\n given with @option{-Wampersand}, @option{-pedantic}, @option{-std=f95}, and\n @option{-std=f2003}. Note: With no ampersand given in a continued character\n-constant, gfortran assumes continuation at the first non-comment,\n+constant, GNU Fortran assumes continuation at the first non-comment,\n non-whitespace character after the ampersand that initiated the continuation.\n \n \n@@ -522,7 +522,7 @@ Turns all warnings into errors.\n @cindex warnings, extra\n Turns on ``extra warnings'' and, if optimization is specified\n via @option{-O}, the @option{-Wuninitialized} option.\n-(This might change in future versions of @command{gfortran}\n+(This might change in future versions of GNU Fortran.)\n @end table\n \n @xref{Warning Options,,Options to Request or Suppress Warnings,\n@@ -538,14 +538,14 @@ Some of these have no effect when compiling programs written in Fortran.\n @cindex debugging information options\n \n GNU Fortran has various special options that are used for debugging\n-either your program or @command{gfortran}\n+either your program or the GNU Fortran compiler.\n \n @table @gcctabopt\n @cindex -fdump-parse-tree option\n @cindex option, -fdump-parse-tree\n @item -fdump-parse-tree\n Output the internal parse tree before starting code generation.  Only\n-really useful for debugging gfortran itself.\n+really useful for debugging the GNU Fortran compiler itself.\n @end table\n \n @table @gcctabopt\n@@ -576,7 +576,7 @@ debugging options.\n \n @cindex INCLUDE directive\n @cindex directive, INCLUDE\n-These options affect how @command{gfortran} searches\n+These options affect how GNU Fortran searches\n for files specified by the @code{INCLUDE} directive and where it searches\n for previously compiled modules.\n \n@@ -626,7 +626,7 @@ GCC options.\n @section Influencing runtime behavior\n @cindex runtime, options\n \n-These options affect the runtime behavior of @command{gfortran}.\n+These options affect the runtime behavior of programs compiled with GNU Fortran.\n @table @gcctabopt\n @cindex -fconvert=@var{conversion} option\n @item -fconvert=@var{conversion}\n@@ -723,18 +723,18 @@ the library implementations use the @command{-fno-f2c} calling conventions.\n Do not transform names of entities specified in the Fortran\n source file by appending underscores to them.\n \n-With @option{-funderscoring} in effect, @command{gfortran} appends one\n+With @option{-funderscoring} in effect, GNU Fortran appends one\n underscore to external names with no underscores.  This is done to ensure\n compatibility with code produced by many UNIX Fortran compilers.\n \n-@emph{Caution}: The default behavior of @command{gfortran} is\n+@emph{Caution}: The default behavior of GNU Fortran is\n incompatible with @command{f2c} and @command{g77}, please use the\n @option{-ff2c} option if you want object files compiled with\n-@option{gfortran} to be compatible with object code created with these\n+GNU Fortran to be compatible with object code created with these\n tools.\n \n Use of @option{-fno-underscoring} is not recommended unless you are\n-experimenting with issues such as integration of (GNU) Fortran into\n+experimenting with issues such as integration of GNU Fortran into\n existing system environments (vis-a-vis existing libraries, tools, and\n so on).\n \n@@ -761,13 +761,13 @@ i = j() + max_count(&my_var, &lvar);\n @end smallexample\n \n Use of @option{-fno-underscoring} allows direct specification of\n-user-defined names while debugging and when interfacing @command{gfortran}\n+user-defined names while debugging and when interfacing GNU Fortran\n code with other languages.\n \n Note that just because the names match does @emph{not} mean that the\n-interface implemented by @command{gfortran} for an external name matches the\n+interface implemented by GNU Fortran for an external name matches the\n interface implemented by some other language for that same name.\n-That is, getting code produced by @command{gfortran} to link to code produced\n+That is, getting code produced by GNU Fortran to link to code produced\n by some other compiler using this or any other method can be only a\n small part of the overall solution---getting the code generated by\n both compilers to agree on issues other than naming can require\n@@ -781,7 +781,7 @@ could make finding unresolved-reference bugs quite difficult in some\n cases---they might occur at program run time, and show up only as\n buggy behavior at run time.\n \n-In future versions of @command{gfortran} we hope to improve naming and linking\n+In future versions of GNU Fortran we hope to improve naming and linking\n issues so that debugging always involves using the names as they appear\n in the source, even if the names as seen by the linker are mangled to\n prevent accidental linking between procedures with incompatible\n@@ -797,10 +797,10 @@ interfaces.\n @cindex @command{f2c} calling convention\n @cindex @command{g77} calling convention\n @cindex libf2c calling convention\n-By default, @command{gfortran} appends an underscore to external\n-names.  If this option is used @command{gfortran} appends two\n+By default, GNU Fortran appends an underscore to external\n+names.  If this option is used GNU Fortran appends two\n underscores to names with underscores and one underscore to external names\n-with no underscores.  (@command{gfortran} also appends two underscores to\n+with no underscores.  GNU Fortran also appends two underscores to\n internal names with underscores to avoid naming collisions with external\n names.\n \n@@ -838,21 +838,21 @@ on the stack.\n \n This option currently only affects local arrays declared with constant\n bounds, and may not apply to all character variables.\n-Future versions of @command{gfortran} may improve this behavior.\n+Future versions of GNU Fortran may improve this behavior.\n \n The default value for @var{n} is 32768.\n \n @cindex -fpack-derived\n @item -fpack-derived\n @cindex Structure packing\n-This option tells gfortran to pack derived type members as closely as\n+This option tells GNU Fortran to pack derived type members as closely as\n possible.  Code compiled with this option is likely to be incompatible\n with code compiled without this option, and may execute slower.\n \n @cindex -frepack-arrays option\n @item -frepack-arrays\n @cindex Repacking arrays\n-In some circumstances @command{gfortran} may pass assumed shape array\n+In some circumstances GNU Fortran may pass assumed shape array\n sections via a descriptor describing a discontiguous area of memory.\n This option adds code to the function prologue to repack the data into\n a contiguous block at runtime.\n@@ -865,25 +865,25 @@ is discontiguous.\n @item -fshort-enums\n This option is provided for interoperability with C code that was\n compiled with the @command{-fshort-enums} option.  It will make\n-@command{gfortran} choose the smallest @code{INTEGER} kind a given\n+GNU Fortran choose the smallest @code{INTEGER} kind a given\n enumerator set will fit in, and give all its enumerators this kind.\n @end table\n \n @xref{Code Gen Options,,Options for Code Generation Conventions,\n gcc,Using the GNU Compiler Collection (GCC)}, for information on more options\n offered by the GBE\n-shared by @command{gfortran} @command{gcc} and other GNU compilers.\n+shared by @command{gfortran}, @command{gcc}, and other GNU compilers.\n \n \n @c man end\n \n @node Environment Variables\n-@section Environment Variables Affecting GNU Fortran\n+@section Environment Variables Affecting @command{gfortran}\n @cindex environment variables\n \n @c man begin ENVIRONMENT\n \n-GNU Fortran 95 currently does not make use of any environment\n+The @command{gfortran} compiler currently does not make use of any environment\n variables to control its operation above and beyond those\n that affect the operation of @command{gcc}.\n \n@@ -892,5 +892,5 @@ gcc,Using the GNU Compiler Collection (GCC)}, for information on environment\n variables.\n \n @xref{Runtime}, for environment variables that affect the\n-run-time behavior of @command{gfortran} programs.\n+run-time behavior of programs compiled with GNU Fortran.\n @c man end"}]}