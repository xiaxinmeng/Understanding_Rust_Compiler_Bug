{"sha": "a666df609a95f9a569b6d09472933ff898bd805d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY2NmRmNjA5YTk1ZjlhNTY5YjZkMDk0NzI5MzNmZjg5OGJkODA1ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-24T17:59:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-24T17:59:07Z"}, "message": "builtins.c (expand_cmpstr, [...]): New functions.\n\ngcc/\n\t* builtins.c (expand_cmpstr, expand_cmpstrn): New functions.\n\t(expand_builtin_strcmp, expand_builtin_strncmp): Use them.  Remove\n\treferences to HAVE_cmpstr{,n}si and CODE_FOR_cmpstr{,n}si.\n\t* config/m32c/blkmov.md (cmpstrsi): Fix predicates of operands 1 and 2.\n\tAdd predicates for operands 0 and 3.\n\t* config/rx/rx.md (cmpstrnsi): Remove force_operand for the length\n\toperand.\n\t* config/sh/sh.md (cmpstrnsi): Change the length predicate from\n\timmediate_operand to nonmemory_operand.\n\nFrom-SVN: r227140", "tree": {"sha": "01e0ebf619815811c0cf1ff97499b72c05541632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01e0ebf619815811c0cf1ff97499b72c05541632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a666df609a95f9a569b6d09472933ff898bd805d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a666df609a95f9a569b6d09472933ff898bd805d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a666df609a95f9a569b6d09472933ff898bd805d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a666df609a95f9a569b6d09472933ff898bd805d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "762613be3e563106eec05795785bd08d33466d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762613be3e563106eec05795785bd08d33466d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762613be3e563106eec05795785bd08d33466d7e"}], "stats": {"total": 163, "additions": 90, "deletions": 73}, "files": [{"sha": "e89afb3e68f22a1aca0a662c016c21d99e95b719", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a666df609a95f9a569b6d09472933ff898bd805d", "patch": "@@ -1,3 +1,15 @@\n+2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (expand_cmpstr, expand_cmpstrn): New functions.\n+\t(expand_builtin_strcmp, expand_builtin_strncmp): Use them.  Remove\n+\treferences to HAVE_cmpstr{,n}si and CODE_FOR_cmpstr{,n}si.\n+\t* config/m32c/blkmov.md (cmpstrsi): Fix predicates of operands 1 and 2.\n+\tAdd predicates for operands 0 and 3.\n+\t* config/rx/rx.md (cmpstrnsi): Remove force_operand for the length\n+\toperand.\n+\t* config/sh/sh.md (cmpstrnsi): Change the length predicate from\n+\timmediate_operand to nonmemory_operand.\n+\n 2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* df-scan.c (df_insn_info_init_fields): New function, split out"}, {"sha": "ea8ffe2ba6d54fea8a467226dbc30164d4840345", "filename": "gcc/builtins.c", "status": "modified", "additions": 72, "deletions": 67, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a666df609a95f9a569b6d09472933ff898bd805d", "patch": "@@ -3917,6 +3917,53 @@ expand_builtin_bzero (tree exp)\n \t\t\t\t     const0_rtx, VOIDmode, exp);\n }\n \n+/* Try to expand cmpstr operation ICODE with the given operands.\n+   Return the result rtx on success, otherwise return null.  */\n+\n+static rtx\n+expand_cmpstr (insn_code icode, rtx target, rtx arg1_rtx, rtx arg2_rtx,\n+\t       HOST_WIDE_INT align)\n+{\n+  machine_mode insn_mode = insn_data[icode].operand[0].mode;\n+\n+  if (target && (!REG_P (target) || HARD_REGISTER_P (target)))\n+    target = NULL_RTX;\n+\n+  struct expand_operand ops[4];\n+  create_output_operand (&ops[0], target, insn_mode);\n+  create_fixed_operand (&ops[1], arg1_rtx);\n+  create_fixed_operand (&ops[2], arg2_rtx);\n+  create_integer_operand (&ops[3], align);\n+  if (maybe_expand_insn (icode, 4, ops))\n+    return ops[0].value;\n+  return NULL_RTX;\n+}\n+\n+/* Try to expand cmpstrn operation ICODE with the given operands.\n+   ARG3_TYPE is the type of ARG3_RTX.  Return the result rtx on success,\n+   otherwise return null.  */\n+\n+static rtx\n+expand_cmpstrn (insn_code icode, rtx target, rtx arg1_rtx, rtx arg2_rtx,\n+\t\ttree arg3_type, rtx arg3_rtx, HOST_WIDE_INT align)\n+{\n+  machine_mode insn_mode = insn_data[icode].operand[0].mode;\n+\n+  if (target && (!REG_P (target) || HARD_REGISTER_P (target)))\n+    target = NULL_RTX;\n+\n+  struct expand_operand ops[5];\n+  create_output_operand (&ops[0], target, insn_mode);\n+  create_fixed_operand (&ops[1], arg1_rtx);\n+  create_fixed_operand (&ops[2], arg2_rtx);\n+  create_convert_operand_from (&ops[3], arg3_rtx, TYPE_MODE (arg3_type),\n+\t\t\t       TYPE_UNSIGNED (arg3_type));\n+  create_integer_operand (&ops[4], align);\n+  if (maybe_expand_insn (icode, 5, ops))\n+    return ops[0].value;\n+  return NULL_RTX;\n+}\n+\n /* Expand expression EXP, which is a call to the memcmp built-in function.\n    Return NULL_RTX if we failed and the caller should emit a normal call,\n    otherwise try to get the result in TARGET, if convenient (and in mode\n@@ -4019,15 +4066,15 @@ expand_builtin_strcmp (tree exp, ATTRIBUTE_UNUSED rtx target)\n   if (!validate_arglist (exp, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n-#if defined HAVE_cmpstrsi || defined HAVE_cmpstrnsi\n-  if (direct_optab_handler (cmpstr_optab, SImode) != CODE_FOR_nothing\n-      || direct_optab_handler (cmpstrn_optab, SImode) != CODE_FOR_nothing)\n+  insn_code cmpstr_icode = direct_optab_handler (cmpstr_optab, SImode);\n+  insn_code cmpstrn_icode = direct_optab_handler (cmpstrn_optab, SImode);\n+  if (cmpstr_icode != CODE_FOR_nothing || cmpstrn_icode != CODE_FOR_nothing)\n     {\n       rtx arg1_rtx, arg2_rtx;\n-      rtx result, insn = NULL_RTX;\n       tree fndecl, fn;\n       tree arg1 = CALL_EXPR_ARG (exp, 0);\n       tree arg2 = CALL_EXPR_ARG (exp, 1);\n+      rtx result = NULL_RTX;\n \n       unsigned int arg1_align = get_pointer_alignment (arg1) / BITS_PER_UNIT;\n       unsigned int arg2_align = get_pointer_alignment (arg2) / BITS_PER_UNIT;\n@@ -4043,33 +4090,17 @@ expand_builtin_strcmp (tree exp, ATTRIBUTE_UNUSED rtx target)\n       arg1_rtx = get_memory_rtx (arg1, NULL);\n       arg2_rtx = get_memory_rtx (arg2, NULL);\n \n-#ifdef HAVE_cmpstrsi\n       /* Try to call cmpstrsi.  */\n-      if (HAVE_cmpstrsi)\n-\t{\n-\t  machine_mode insn_mode\n-\t    = insn_data[(int) CODE_FOR_cmpstrsi].operand[0].mode;\n-\n-\t  /* Make a place to write the result of the instruction.  */\n-\t  result = target;\n-\t  if (! (result != 0\n-\t\t && REG_P (result) && GET_MODE (result) == insn_mode\n-\t\t && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n-\t    result = gen_reg_rtx (insn_mode);\n-\n-\t  insn = gen_cmpstrsi (result, arg1_rtx, arg2_rtx,\n-\t\t\t       GEN_INT (MIN (arg1_align, arg2_align)));\n-\t}\n-#endif\n-#ifdef HAVE_cmpstrnsi\n+      if (cmpstr_icode != CODE_FOR_nothing)\n+\tresult = expand_cmpstr (cmpstr_icode, target, arg1_rtx, arg2_rtx,\n+\t\t\t\tMIN (arg1_align, arg2_align));\n+\n       /* Try to determine at least one length and call cmpstrnsi.  */\n-      if (!insn && HAVE_cmpstrnsi)\n+      if (!result && cmpstrn_icode != CODE_FOR_nothing)\n \t{\n \t  tree len;\n \t  rtx arg3_rtx;\n \n-\t  machine_mode insn_mode\n-\t    = insn_data[(int) CODE_FOR_cmpstrnsi].operand[0].mode;\n \t  tree len1 = c_strlen (arg1, 1);\n \t  tree len2 = c_strlen (arg2, 1);\n \n@@ -4103,30 +4134,19 @@ expand_builtin_strcmp (tree exp, ATTRIBUTE_UNUSED rtx target)\n \t    len = len2;\n \n \t  /* If both arguments have side effects, we cannot optimize.  */\n-\t  if (!len || TREE_SIDE_EFFECTS (len))\n-\t    goto do_libcall;\n-\n-\t  arg3_rtx = expand_normal (len);\n-\n-\t  /* Make a place to write the result of the instruction.  */\n-\t  result = target;\n-\t  if (! (result != 0\n-\t\t && REG_P (result) && GET_MODE (result) == insn_mode\n-\t\t && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n-\t    result = gen_reg_rtx (insn_mode);\n-\n-\t  insn = gen_cmpstrnsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n-\t\t\t\tGEN_INT (MIN (arg1_align, arg2_align)));\n+\t  if (len && !TREE_SIDE_EFFECTS (len))\n+\t    {\n+\t      arg3_rtx = expand_normal (len);\n+\t      result = expand_cmpstrn (cmpstrn_icode, target, arg1_rtx,\n+\t\t\t\t       arg2_rtx, TREE_TYPE (len), arg3_rtx,\n+\t\t\t\t       MIN (arg1_align, arg2_align));\n+\t    }\n \t}\n-#endif\n \n-      if (insn)\n+      if (result)\n \t{\n-\t  machine_mode mode;\n-\t  emit_insn (insn);\n-\n \t  /* Return the value in the proper mode for this function.  */\n-\t  mode = TYPE_MODE (TREE_TYPE (exp));\n+\t  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n \t  if (GET_MODE (result) == mode)\n \t    return result;\n \t  if (target == 0)\n@@ -4137,16 +4157,12 @@ expand_builtin_strcmp (tree exp, ATTRIBUTE_UNUSED rtx target)\n \n       /* Expand the library call ourselves using a stabilized argument\n \t list to avoid re-evaluating the function's arguments twice.  */\n-#ifdef HAVE_cmpstrnsi\n-    do_libcall:\n-#endif\n       fndecl = get_callee_fndecl (exp);\n       fn = build_call_nofold_loc (EXPR_LOCATION (exp), fndecl, 2, arg1, arg2);\n       gcc_assert (TREE_CODE (fn) == CALL_EXPR);\n       CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n       return expand_call (fn, target, target == const0_rtx);\n     }\n-#endif\n   return NULL_RTX;\n }\n \n@@ -4167,21 +4183,19 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n   /* If c_strlen can determine an expression for one of the string\n      lengths, and it doesn't have side effects, then emit cmpstrnsi\n      using length MIN(strlen(string)+1, arg3).  */\n-#ifdef HAVE_cmpstrnsi\n-  if (HAVE_cmpstrnsi)\n+  insn_code cmpstrn_icode = direct_optab_handler (cmpstrn_optab, SImode);\n+  if (cmpstrn_icode != CODE_FOR_nothing)\n   {\n     tree len, len1, len2;\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n-    rtx result, insn;\n+    rtx result;\n     tree fndecl, fn;\n     tree arg1 = CALL_EXPR_ARG (exp, 0);\n     tree arg2 = CALL_EXPR_ARG (exp, 1);\n     tree arg3 = CALL_EXPR_ARG (exp, 2);\n \n     unsigned int arg1_align = get_pointer_alignment (arg1) / BITS_PER_UNIT;\n     unsigned int arg2_align = get_pointer_alignment (arg2) / BITS_PER_UNIT;\n-    machine_mode insn_mode\n-      = insn_data[(int) CODE_FOR_cmpstrnsi].operand[0].mode;\n \n     len1 = c_strlen (arg1, 1);\n     len2 = c_strlen (arg2, 1);\n@@ -4227,13 +4241,6 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     if (arg1_align == 0 || arg2_align == 0)\n       return NULL_RTX;\n \n-    /* Make a place to write the result of the instruction.  */\n-    result = target;\n-    if (! (result != 0\n-\t   && REG_P (result) && GET_MODE (result) == insn_mode\n-\t   && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n-      result = gen_reg_rtx (insn_mode);\n-\n     /* Stabilize the arguments in case gen_cmpstrnsi fails.  */\n     arg1 = builtin_save_expr (arg1);\n     arg2 = builtin_save_expr (arg2);\n@@ -4242,12 +4249,11 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     arg1_rtx = get_memory_rtx (arg1, len);\n     arg2_rtx = get_memory_rtx (arg2, len);\n     arg3_rtx = expand_normal (len);\n-    insn = gen_cmpstrnsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n-\t\t\t  GEN_INT (MIN (arg1_align, arg2_align)));\n-    if (insn)\n+    result = expand_cmpstrn (cmpstrn_icode, target, arg1_rtx, arg2_rtx,\n+\t\t\t     TREE_TYPE (len), arg3_rtx,\n+\t\t\t     MIN (arg1_align, arg2_align));\n+    if (result)\n       {\n-\temit_insn (insn);\n-\n \t/* Return the value in the proper mode for this function.  */\n \tmode = TYPE_MODE (TREE_TYPE (exp));\n \tif (GET_MODE (result) == mode)\n@@ -4267,7 +4273,6 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n     return expand_call (fn, target, target == const0_rtx);\n   }\n-#endif\n   return NULL_RTX;\n }\n "}, {"sha": "02ad3455bd1b8365276cb739c90f51325596195a", "filename": "gcc/config/m32c/blkmov.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fconfig%2Fm32c%2Fblkmov.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fconfig%2Fm32c%2Fblkmov.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fblkmov.md?ref=a666df609a95f9a569b6d09472933ff898bd805d", "patch": "@@ -178,10 +178,10 @@\n ;; 3 = alignment\n \n (define_expand \"cmpstrsi\"\n-  [(match_operand:HI 0 \"\" \"\")\n-   (match_operand 1 \"ap_operand\" \"\")\n-   (match_operand 2 \"ap_operand\" \"\")\n-   (match_operand 3 \"\" \"\")\n+  [(match_operand:HI 0 \"register_operand\" \"\")\n+   (match_operand 1 \"memory_operand\" \"\")\n+   (match_operand 2 \"memory_operand\" \"\")\n+   (match_operand 3 \"const_int_operand\" \"\")\n    ]\n   \"TARGET_A24\"\n   \"if (m32c_expand_cmpstr(operands)) DONE; FAIL;\""}, {"sha": "6faf7719a9a6e52cd0d80d11d249d5e66cd88e0f", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=a666df609a95f9a569b6d09472933ff898bd805d", "patch": "@@ -2315,7 +2315,7 @@\n   \n     emit_move_insn (str1, force_operand (XEXP (operands[1], 0), NULL_RTX));\n     emit_move_insn (str2, force_operand (XEXP (operands[2], 0), NULL_RTX));\n-    emit_move_insn (len, force_operand (operands[3], NULL_RTX));\n+    emit_move_insn (len, operands[3]);\n \n     emit_insn (gen_rx_cmpstrn (operands[0], operands[1], operands[2]));\n     DONE;"}, {"sha": "facce836def892571bfb63ad67b6b26f49b7acf6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a666df609a95f9a569b6d09472933ff898bd805d/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=a666df609a95f9a569b6d09472933ff898bd805d", "patch": "@@ -12731,7 +12731,7 @@ label:\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(compare:SI (match_operand:BLK 1 \"memory_operand\")\n \t\t    (match_operand:BLK 2 \"memory_operand\")))\n-   (use (match_operand:SI 3 \"immediate_operand\"))\n+   (use (match_operand:SI 3 \"nonmemory_operand\"))\n    (use (match_operand:SI 4 \"immediate_operand\"))]\n   \"TARGET_SH1 && optimize\"\n {"}]}