{"sha": "3c25856afeb80abfd75bdefaf77277f477cba7f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyNTg1NmFmZWI4MGFiZmQ3NWJkZWZhZjc3Mjc3ZjQ3N2NiYTdmMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T08:25:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T08:25:13Z"}, "message": "[multiple changes]\n\n2009-04-09  Pascal Obry  <obry@adacore.com>\n\n\t* a-cihama.adb, a-cihama.ads, a-coinve.adb, a-coorma.ads, a-cihase.adb,\n\ta-cihase.ads, a-cohama.adb, a-cohama.ads, a-coorse.adb, a-coorse.ads,\n\ta-coormu.adb, a-coormu.ads, a-cohase.adb, a-cohase.ads: Minor\n\treformatting.\n\n2009-04-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Overriding_Indicator): Do not generate warning on\n\tmissing overriding indicator if the new declaration is not seen as\n\tprimitive.\n\nFrom-SVN: r145804", "tree": {"sha": "0184736850e3694ca19a6ab3d02c504f5596cdca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0184736850e3694ca19a6ab3d02c504f5596cdca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c25856afeb80abfd75bdefaf77277f477cba7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c25856afeb80abfd75bdefaf77277f477cba7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c25856afeb80abfd75bdefaf77277f477cba7f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c25856afeb80abfd75bdefaf77277f477cba7f3/comments", "author": null, "committer": null, "parents": [{"sha": "76c597a1fc1b674e2afaaa483b925f3637eb0d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c597a1fc1b674e2afaaa483b925f3637eb0d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c597a1fc1b674e2afaaa483b925f3637eb0d48"}], "stats": {"total": 290, "additions": 142, "deletions": 148}, "files": [{"sha": "7650b76f5b8b6269ca416ddd2f1697b8d5067b29", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -1,3 +1,16 @@\n+2009-04-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-cihama.adb, a-cihama.ads, a-coinve.adb, a-coorma.ads, a-cihase.adb,\n+\ta-cihase.ads, a-cohama.adb, a-cohama.ads, a-coorse.adb, a-coorse.ads,\n+\ta-coormu.adb, a-coormu.ads, a-cohase.adb, a-cohase.ads: Minor\n+\treformatting.\n+\n+2009-04-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Overriding_Indicator): Do not generate warning on\n+\tmissing overriding indicator if the new declaration is not seen as\n+\tprimitive.\n+\n 2009-04-09  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_ch4.adb (Expand_Concatenate): Add circuitry to properly handle"}, {"sha": "5b79df9b69e6ff37c29df8ee1341a86d4c83b5ff", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -86,23 +86,21 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    -- Local Instantiations --\n    --------------------------\n \n-   package HT_Ops is\n-      new Ada.Containers.Hash_Tables.Generic_Operations\n-        (HT_Types          => HT_Types,\n-         Hash_Node         => Hash_Node,\n-         Next              => Next,\n-         Set_Next          => Set_Next,\n-         Copy_Node         => Copy_Node,\n-         Free              => Free);\n-\n-   package Key_Ops is\n-      new Hash_Tables.Generic_Keys\n-       (HT_Types  => HT_Types,\n-        Next      => Next,\n-        Set_Next  => Set_Next,\n-        Key_Type  => Key_Type,\n-        Hash      => Hash,\n-        Equivalent_Keys => Equivalent_Key_Node);\n+   package HT_Ops is new Ada.Containers.Hash_Tables.Generic_Operations\n+     (HT_Types  => HT_Types,\n+      Hash_Node => Hash_Node,\n+      Next      => Next,\n+      Set_Next  => Set_Next,\n+      Copy_Node => Copy_Node,\n+      Free      => Free);\n+\n+   package Key_Ops is new Hash_Tables.Generic_Keys\n+     (HT_Types        => HT_Types,\n+      Next            => Next,\n+      Set_Next        => Set_Next,\n+      Key_Type        => Key_Type,\n+      Hash            => Hash,\n+      Equivalent_Keys => Equivalent_Key_Node);\n \n    ---------\n    -- \"=\" --"}, {"sha": "eece9ca8e768505d5eba1f38a85dafb8e41ffdbd", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -276,9 +276,8 @@ private\n       Next    : Node_Access;\n    end record;\n \n-   package HT_Types is new Hash_Tables.Generic_Hash_Table_Types\n-     (Node_Type,\n-      Node_Access);\n+   package HT_Types is\n+      new Hash_Tables.Generic_Hash_Table_Types (Node_Type, Node_Access);\n \n    type Map is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n@@ -297,11 +296,10 @@ private\n    type Map_Access is access constant Map;\n    for Map_Access'Storage_Size use 0;\n \n-   type Cursor is\n-      record\n-         Container : Map_Access;\n-         Node      : Node_Access;\n-      end record;\n+   type Cursor is record\n+      Container : Map_Access;\n+      Node      : Node_Access;\n+   end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "a67395826d7ffa459908b6c94fef68cc14a82152", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -102,25 +102,23 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n    --------------------------\n \n    procedure Free_Element is\n-      new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n-\n-   package HT_Ops is\n-      new Hash_Tables.Generic_Operations\n-       (HT_Types  => HT_Types,\n-        Hash_Node => Hash_Node,\n-        Next      => Next,\n-        Set_Next  => Set_Next,\n-        Copy_Node => Copy_Node,\n-        Free      => Free);\n-\n-   package Element_Keys is\n-      new Hash_Tables.Generic_Keys\n-       (HT_Types  => HT_Types,\n-        Next      => Next,\n-        Set_Next  => Set_Next,\n-        Key_Type  => Element_Type,\n-        Hash      => Hash,\n-        Equivalent_Keys => Equivalent_Keys);\n+     new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n+\n+   package HT_Ops is new Hash_Tables.Generic_Operations\n+     (HT_Types  => HT_Types,\n+      Hash_Node => Hash_Node,\n+      Next      => Next,\n+      Set_Next  => Set_Next,\n+      Copy_Node => Copy_Node,\n+      Free      => Free);\n+\n+   package Element_Keys is new Hash_Tables.Generic_Keys\n+     (HT_Types        => HT_Types,\n+      Next            => Next,\n+      Set_Next        => Set_Next,\n+      Key_Type        => Element_Type,\n+      Hash            => Hash,\n+      Equivalent_Keys => Equivalent_Keys);\n \n    function Is_Equal is\n       new HT_Ops.Generic_Equal (Find_Equal_Key);"}, {"sha": "8ec9d87be6cfd858411e6770731e5646d9d6b9ca", "filename": "gcc/ada/a-cihase.ads", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -402,15 +402,13 @@ private\n \n    type Element_Access is access Element_Type;\n \n-   type Node_Type is\n-      limited record\n-         Element : Element_Access;\n-         Next    : Node_Access;\n-      end record;\n+   type Node_Type is limited record\n+      Element : Element_Access;\n+      Next    : Node_Access;\n+   end record;\n \n-   package HT_Types is new Hash_Tables.Generic_Hash_Table_Types\n-     (Node_Type,\n-      Node_Access);\n+   package HT_Types is\n+     new Hash_Tables.Generic_Hash_Table_Types (Node_Type, Node_Access);\n \n    type Set is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n@@ -429,11 +427,10 @@ private\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n-   type Cursor is\n-      record\n-         Container : Set_Access;\n-         Node      : Node_Access;\n-      end record;\n+   type Cursor is record\n+      Container : Set_Access;\n+      Node      : Node_Access;\n+   end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -447,9 +444,7 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor :=\n-                  (Container => null,\n-                   Node      => null);\n+   No_Element : constant Cursor := (Container => null, Node => null);\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;"}, {"sha": "5c2e872f42d540125b5a0bccbc02caa24cc0f1b1", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -82,23 +82,21 @@ package body Ada.Containers.Hashed_Maps is\n    -- Local Instantiations --\n    --------------------------\n \n-   package HT_Ops is\n-      new Hash_Tables.Generic_Operations\n-       (HT_Types          => HT_Types,\n-        Hash_Node         => Hash_Node,\n-        Next              => Next,\n-        Set_Next          => Set_Next,\n-        Copy_Node         => Copy_Node,\n-        Free              => Free);\n-\n-   package Key_Ops is\n-      new Hash_Tables.Generic_Keys\n-       (HT_Types  => HT_Types,\n-        Next      => Next,\n-        Set_Next  => Set_Next,\n-        Key_Type  => Key_Type,\n-        Hash      => Hash,\n-        Equivalent_Keys => Equivalent_Key_Node);\n+   package HT_Ops is new Hash_Tables.Generic_Operations\n+     (HT_Types  => HT_Types,\n+      Hash_Node => Hash_Node,\n+      Next      => Next,\n+      Set_Next  => Set_Next,\n+      Copy_Node => Copy_Node,\n+      Free      => Free);\n+\n+   package Key_Ops is new Hash_Tables.Generic_Keys\n+     (HT_Types        => HT_Types,\n+      Next            => Next,\n+      Set_Next        => Set_Next,\n+      Key_Type        => Key_Type,\n+      Hash            => Hash,\n+      Equivalent_Keys => Equivalent_Key_Node);\n \n    function Is_Equal is new HT_Ops.Generic_Equal (Find_Equal_Key);\n "}, {"sha": "d850f01ddfbcb1ac69288a5c461ef274b536a567", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -281,9 +281,8 @@ private\n       Next    : Node_Access;\n    end record;\n \n-   package HT_Types is new Hash_Tables.Generic_Hash_Table_Types\n-     (Node_Type,\n-      Node_Access);\n+   package HT_Types is\n+     new Hash_Tables.Generic_Hash_Table_Types (Node_Type, Node_Access);\n \n    type Map is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n@@ -315,11 +314,10 @@ private\n    type Map_Access is access constant Map;\n    for Map_Access'Storage_Size use 0;\n \n-   type Cursor is\n-      record\n-         Container : Map_Access;\n-         Node      : Node_Access;\n-      end record;\n+   type Cursor is record\n+      Container : Map_Access;\n+      Node      : Node_Access;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "c5d596676c913180ab1ee908a3ca3b8431fc9cb3", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -103,23 +103,21 @@ package body Ada.Containers.Hashed_Sets is\n    -- Local Instantiations --\n    --------------------------\n \n-   package HT_Ops is\n-      new Hash_Tables.Generic_Operations\n-       (HT_Types  => HT_Types,\n-        Hash_Node => Hash_Node,\n-        Next      => Next,\n-        Set_Next  => Set_Next,\n-        Copy_Node => Copy_Node,\n-        Free      => Free);\n-\n-   package Element_Keys is\n-      new Hash_Tables.Generic_Keys\n-       (HT_Types  => HT_Types,\n-        Next      => Next,\n-        Set_Next  => Set_Next,\n-        Key_Type  => Element_Type,\n-        Hash      => Hash,\n-        Equivalent_Keys => Equivalent_Keys);\n+   package HT_Ops is new Hash_Tables.Generic_Operations\n+     (HT_Types  => HT_Types,\n+      Hash_Node => Hash_Node,\n+      Next      => Next,\n+      Set_Next  => Set_Next,\n+      Copy_Node => Copy_Node,\n+      Free      => Free);\n+\n+   package Element_Keys is new Hash_Tables.Generic_Keys\n+     (HT_Types        => HT_Types,\n+      Next            => Next,\n+      Set_Next        => Set_Next,\n+      Key_Type        => Element_Type,\n+      Hash            => Hash,\n+      Equivalent_Keys => Equivalent_Keys);\n \n    function Is_Equal is\n       new HT_Ops.Generic_Equal (Find_Equal_Key);"}, {"sha": "72406c8c5ea7426b68598d4d4c0cb3d587568a54", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -42,8 +42,8 @@ generic\n \n    with function Hash (Element : Element_Type) return Hash_Type;\n \n-   with function Equivalent_Elements (Left, Right : Element_Type)\n-                                     return Boolean;\n+   with function Equivalent_Elements\n+          (Left, Right : Element_Type) return Boolean;\n \n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n@@ -402,15 +402,13 @@ private\n    type Node_Type;\n    type Node_Access is access Node_Type;\n \n-   type Node_Type is\n-      limited record\n-         Element : Element_Type;\n-         Next    : Node_Access;\n-      end record;\n+   type Node_Type is limited record\n+      Element : Element_Type;\n+      Next    : Node_Access;\n+   end record;\n \n-   package HT_Types is new Hash_Tables.Generic_Hash_Table_Types\n-     (Node_Type,\n-      Node_Access);\n+   package HT_Types is\n+     new Hash_Tables.Generic_Hash_Table_Types (Node_Type, Node_Access);\n \n    type Set is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n@@ -429,11 +427,10 @@ private\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n-   type Cursor is\n-      record\n-         Container : Set_Access;\n-         Node      : Node_Access;\n-      end record;\n+   type Cursor is record\n+      Container : Set_Access;\n+      Node      : Node_Access;\n+   end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "6a50f9f05419b25715a5792bcf3fd30a017556a1", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -26,7 +26,7 @@\n -- however invalidate  any other reasons why  the executable file  might be --\n -- covered by the  GNU Public License.                                      --\n --                                                                          --\n--- This unit has originally being developed by Matthew J Heaney.            --\n+-- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n with Ada.Containers.Generic_Array_Sort;\n@@ -996,14 +996,13 @@ package body Ada.Containers.Indefinite_Vectors is\n       -- Sort --\n       ----------\n \n-      procedure Sort (Container : in out Vector)\n-      is\n-         procedure Sort is\n-            new Generic_Array_Sort\n-             (Index_Type   => Index_Type,\n-              Element_Type => Element_Access,\n-              Array_Type   => Elements_Array,\n-              \"<\"          => Is_Less);\n+      procedure Sort (Container : in out Vector) is\n+\n+         procedure Sort is new Generic_Array_Sort\n+           (Index_Type   => Index_Type,\n+            Element_Type => Element_Access,\n+            Array_Type   => Elements_Array,\n+            \"<\"          => Is_Less);\n \n       --  Start of processing for Sort\n \n@@ -1045,15 +1044,15 @@ package body Ada.Containers.Indefinite_Vectors is\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1)\n    is\n-      N : constant Int := Int (Count);\n+      N               : constant Int := Int (Count);\n \n       First           : constant Int := Int (Index_Type'First);\n       New_Last_As_Int : Int'Base;\n       New_Last        : Index_Type;\n       New_Length      : UInt;\n       Max_Length      : constant UInt := UInt (Count_Type'Last);\n \n-      Dst : Elements_Access;\n+      Dst             : Elements_Access;\n \n    begin\n       if Before < Index_Type'First then\n@@ -1507,15 +1506,15 @@ package body Ada.Containers.Indefinite_Vectors is\n       Before    : Extended_Index;\n       Count     : Count_Type := 1)\n    is\n-      N : constant Int := Int (Count);\n+      N               : constant Int := Int (Count);\n \n       First           : constant Int := Int (Index_Type'First);\n       New_Last_As_Int : Int'Base;\n       New_Last        : Index_Type;\n       New_Length      : UInt;\n       Max_Length      : constant UInt := UInt (Count_Type'Last);\n \n-      Dst : Elements_Access;\n+      Dst             : Elements_Access;\n \n    begin\n       if Before < Index_Type'First then"}, {"sha": "699985c37d4032795c6f2ecbd80ea151d1e565ca", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -197,9 +197,8 @@ private\n       Element : Element_Type;\n    end record;\n \n-   package Tree_Types is new Red_Black_Trees.Generic_Tree_Types\n-     (Node_Type,\n-      Node_Access);\n+   package Tree_Types is\n+     new Red_Black_Trees.Generic_Tree_Types (Node_Type, Node_Access);\n \n    type Map is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;"}, {"sha": "64aa23a7aa1540e19e1bddacafd1eb422dad814e", "filename": "gcc/ada/a-coormu.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coormu.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -261,8 +261,7 @@ package body Ada.Containers.Ordered_Multisets is\n    -- Adjust --\n    ------------\n \n-   procedure Adjust is\n-      new Tree_Operations.Generic_Adjust (Copy_Tree);\n+   procedure Adjust is new Tree_Operations.Generic_Adjust (Copy_Tree);\n \n    procedure Adjust (Container : in out Set) is\n    begin"}, {"sha": "385011c75424aec786f9a0722d26f040cb031687", "filename": "gcc/ada/a-coormu.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coormu.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -436,9 +436,8 @@ private\n       Element : Element_Type;\n    end record;\n \n-   package Tree_Types is new Red_Black_Trees.Generic_Tree_Types\n-     (Node_Type,\n-      Node_Access);\n+   package Tree_Types is\n+     new Red_Black_Trees.Generic_Tree_Types (Node_Type, Node_Access);\n \n    type Set is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;"}, {"sha": "786826bebc4d6a16d034d8824c9f7c3b42cdf13c", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -258,8 +258,7 @@ package body Ada.Containers.Ordered_Sets is\n    -- Adjust --\n    ------------\n \n-   procedure Adjust is\n-      new Tree_Operations.Generic_Adjust (Copy_Tree);\n+   procedure Adjust is new Tree_Operations.Generic_Adjust (Copy_Tree);\n \n    procedure Adjust (Container : in out Set) is\n    begin\n@@ -286,8 +285,7 @@ package body Ada.Containers.Ordered_Sets is\n    -- Clear --\n    -----------\n \n-   procedure Clear is\n-      new Tree_Operations.Generic_Clear (Delete_Tree);\n+   procedure Clear is new Tree_Operations.Generic_Clear (Delete_Tree);\n \n    procedure Clear (Container : in out Set) is\n    begin"}, {"sha": "e4868ecf940c5381f5e4c8c46f286b8c79e3016d", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -248,9 +248,8 @@ private\n       Element : Element_Type;\n    end record;\n \n-   package Tree_Types is new Red_Black_Trees.Generic_Tree_Types\n-     (Node_Type,\n-      Node_Access);\n+   package Tree_Types is\n+     new Red_Black_Trees.Generic_Tree_Types (Node_Type, Node_Access);\n \n    type Set is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;"}, {"sha": "0b2af3448a68129b5a79b64b567cddda0944420f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c25856afeb80abfd75bdefaf77277f477cba7f3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3c25856afeb80abfd75bdefaf77277f477cba7f3", "patch": "@@ -4196,7 +4196,15 @@ package body Sem_Ch6 is\n             Set_Is_Overriding_Operation (Subp);\n          end if;\n \n-         if Style_Check and then not Must_Override (Spec) then\n+         --  If primitive flag is set, operation is overriding at the\n+         --  point of its declaration, so warn if necessary. Otherwise\n+         --  it may have been declared before the operation it overrides\n+         --  and no check is required.\n+\n+         if Style_Check\n+            and then not Must_Override (Spec)\n+            and then Is_Primitive\n+         then\n             Style.Missing_Overriding (Decl, Subp);\n          end if;\n "}]}