{"sha": "4853940ccb7949141793454476b7436c1a431598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1Mzk0MGNjYjc5NDkxNDE3OTM0NTQ0NzZiNzQzNmMxYTQzMTU5OA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-02-09T14:13:57Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-02-09T14:13:57Z"}, "message": "re PR middle-end/26134 (fold *(float*)(&complex_float_var) into REALPART_EXPR<complex_float_var>)\n\n2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/26134\n        * fold-const.c (fold_indirect_ref_1): Fold\n        \"*(foo *)&complexfoo\" to \"__real__ complexfoo\"\n        and \"((foo*)&complexfoo)[1]\" to \"__imag__ complexfoo\".\n2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/26134\n        * gcc.dg/tree-ssa/complex-3.c: New test.\n\nFrom-SVN: r110800", "tree": {"sha": "66b2befe15094d2b37c15fe8a652cdbf2492f627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b2befe15094d2b37c15fe8a652cdbf2492f627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4853940ccb7949141793454476b7436c1a431598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4853940ccb7949141793454476b7436c1a431598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4853940ccb7949141793454476b7436c1a431598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4853940ccb7949141793454476b7436c1a431598/comments", "author": null, "committer": null, "parents": [{"sha": "58e0c554fd7a78dad40f5b0ab705955cfd8bba43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e0c554fd7a78dad40f5b0ab705955cfd8bba43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e0c554fd7a78dad40f5b0ab705955cfd8bba43"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "57e720cb9ad6d6e6b8caa3c4de912205e5184024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4853940ccb7949141793454476b7436c1a431598/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4853940ccb7949141793454476b7436c1a431598/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4853940ccb7949141793454476b7436c1a431598", "patch": "@@ -1,3 +1,10 @@\n+2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/26134\n+\t* fold-const.c (fold_indirect_ref_1): Fold \n+\t\"*(foo *)&complexfoo\" to \"__real__ complexfoo\"\n+\tand \"((foo*)&complexfoo)[1]\" to \"__imag__ complexfoo\".\n+\n 2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* tree-flow-inline.h (var_can_have_subvars): "}, {"sha": "833cc4352dff5c9f8edc3f49bc4b0630ad610198", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4853940ccb7949141793454476b7436c1a431598/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4853940ccb7949141793454476b7436c1a431598/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4853940ccb7949141793454476b7436c1a431598", "patch": "@@ -11721,8 +11721,32 @@ fold_indirect_ref_1 (tree type, tree op0)\n \t    min_val = TYPE_MIN_VALUE (type_domain);\n \t  return build4 (ARRAY_REF, type, op, min_val, NULL_TREE, NULL_TREE);\n \t}\n+      /* *(foo *)&complexfoo => __real__ complexfoo */\n+      else if (TREE_CODE (optype) == COMPLEX_TYPE\n+\t       && type == TREE_TYPE (optype))\n+\treturn fold_build1 (REALPART_EXPR, type, op);\n     }\n \n+  /* ((foo*)&complexfoo)[1] => __imag__ complexfoo */\n+  if (TREE_CODE (sub) == PLUS_EXPR\n+      && TREE_CODE (TREE_OPERAND (sub, 1)) == INTEGER_CST)\n+    {\n+      tree op00 = TREE_OPERAND (sub, 0);\n+      tree op01 = TREE_OPERAND (sub, 1);\n+      tree op00type;\n+\n+      STRIP_NOPS (op00);\n+      op00type = TREE_TYPE (op00);\n+      if (TREE_CODE (op00) == ADDR_EXPR\n+ \t  && TREE_CODE (TREE_TYPE (op00type)) == COMPLEX_TYPE\n+\t  && type == TREE_TYPE (TREE_TYPE (op00type)))\n+\t{\n+\t  tree size = TYPE_SIZE_UNIT (type);\n+\t  if (tree_int_cst_equal (size, op01))\n+\t    return fold_build1 (IMAGPART_EXPR, type, TREE_OPERAND (op00, 0));\n+\t}\n+    }\n+  \n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n   if (TREE_CODE (TREE_TYPE (subtype)) == ARRAY_TYPE\n       && type == TREE_TYPE (TREE_TYPE (subtype)))"}, {"sha": "dd78250d0edce65378d2ffa618a9ba906d40fa29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4853940ccb7949141793454476b7436c1a431598/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4853940ccb7949141793454476b7436c1a431598/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4853940ccb7949141793454476b7436c1a431598", "patch": "@@ -1,3 +1,8 @@\n+2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/26134\n+\t* gcc.dg/tree-ssa/complex-3.c: New test.\n+\n 2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.c-torture/compile/volatile-1.c: New test."}, {"sha": "5f4b110c6f85be34dd4f73a55315a63475f1af68", "filename": "gcc/testsuite/gcc.dg/tree-ssa/complex-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4853940ccb7949141793454476b7436c1a431598/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4853940ccb7949141793454476b7436c1a431598/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-3.c?ref=4853940ccb7949141793454476b7436c1a431598", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef _Complex float COMPLEX_FLOAT;\n+float real_part(COMPLEX_FLOAT a)\n+{\n+  return *(float*)(&a);\n+}\n+\n+float real_part_2(COMPLEX_FLOAT a)\n+{\n+  return ((float*)(&a))[0];\n+}\n+\n+\n+float imag_part(COMPLEX_FLOAT a)\n+{\n+  return ((float*)(&a))[1];\n+}\n+\n+/* Test that the above gets optimized to REALPART_EXPR and IMAGPART_EXPR\n+   respectively. */\n+\n+/* { dg-final { scan-tree-dump-times \"REALPART_EXPR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"IMAGPART_EXPR\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}]}