{"sha": "27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhMjY5NGZiOTY4MzkwM2VkM2IxZTM5MDY2ZmJkNWJjMDVkNmUxNw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2006-01-11T21:29:59Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-01-11T21:29:59Z"}, "message": "nodfp-1.c: New test.\n\n\t* gcc.dg/nodfp-1.c: New test.\n\t* gcc.dg/compat/scalar-return-dfp_x.c: Likewise.\n\t* gcc.dg/compat/scalar-return-dfp_x.c: Likewise.\n\t* gcc.dg/compat/scalar-return-dfp_main.c: Likewise.\n\t* gcc.dg/compat/scalar-by-value-dfp_main.c: Likewise.\n\t* gcc.dg/compat/scalar-by-value-dfp_x.c: Likewise.\n\t* gcc.dg/compat/scalar-return-dfp_y.c: Likewise.\n\t* gcc.dg/compat/scalar-by-value-dfp_y.c: Likewise.\n\t* gcc.dg/debug/dwarf2/dwarf-float.c: Likewise.\n\t* gcc.dg/debug/dwarf2/dwarf-dfp.c: Likewise.\n\t* gcc.dg/format/dfp-scanf-1.c: Likewise.\n\t* gcc.dg/format/dfp-printf-1.c: Likewise.\n\t* gcc.dg/compat/struct-layout-1.exp: Use c-compat.exp.\n\t(compat_setup_dfp): New.\n\t* gcc.dg/compat/compat.exp: Use it.\n\t(compat-use-alt-compiler, compat-use-tst-compiler): Move to new file.\n\tMake some variables global, prepend \"compat_\" to their names.\n\t* gcc.dg/compat/struct-layout-1.h: Conditional DFP support.\n\t* gcc.dg/compat/struct-layout-1_generate.c: Ditto.\n\t* gcc.misc-tests/dectest.exp: New test driver for decTest.\n\t* lib/compat.exp (compat_skip_list): Make global, rename.\n\t* lib/c-compat.exp: New file.\n\t* lib/target-supports.exp (check_effective_target_dfp): New.\n\n\t* gcc.dg/dfp/dec-eval-method.c, gcc.dg/dfp/func-array.c,\n\tgcc.dg/dfp/convert-dfp-fold.c, gcc.dg/dfp/struct-union.c,\n\tgcc.dg/dfp/compare-rel.h, gcc.dg/dfp/convert-dfp-round.c,\n\tgcc.dg/dfp/func-struct.c, gcc.dg/dfp/constants-c99.c,\n\tgcc.dg/dfp/compare-eq-d32.c, gcc.dg/dfp/func-vararg-mixed.c,\n\tgcc.dg/dfp/compare-rel-d128.c, gcc.dg/dfp/operator-comma.c,\n\tgcc.dg/dfp/decfloat-constants.c, gcc.dg/dfp/operator-bitwise.c,\n\tgcc.dg/dfp/func-mixed.c, gcc.dg/dfp/compare-eq-dfp.c,\n\tgcc.dg/dfp/operator-assignment.c, gcc.dg/dfp/dfp-round.h,\n\tgcc.dg/dfp/modes.c, gcc.dg/dfp/keywords-c99.c, gcc.dg/dfp/nan-1.c,\n\tgcc.dg/dfp/loop-index.c, gcc.dg/dfp/compare-eq-d64.c,\n\tgcc.dg/dfp/convert-bfp.c, gcc.dg/dfp/usual-arith-conv-const.c,\n\tgcc.dg/dfp/convert-dfp.c, gcc.dg/dfp/compare-rel-const.c,\n\tgcc.dg/dfp/convert-int-fold.c, gcc.dg/dfp/keywords-pedantic.c,\n\tgcc.dg/dfp/compare-rel-d32.c, gcc.dg/dfp/call-by-value.c,\n\tgcc.dg/dfp/constants-hex.c, gcc.dg/dfp/func-scalar.c,\n\tgcc.dg/dfp/keywords-ignored-c99.c, gcc.dg/dfp/snan.c,\n\tgcc.dg/dfp/usual-arith-conv.c, gcc.dg/dfp/constants-pedantic.c,\n\tgcc.dg/dfp/operator-logical.c, gcc.dg/dfp/compare-eq-d128.c,\n\tgcc.dg/dfp/convert-bfp-fold.c, gcc.dg/dfp/ctypes.c,\n\tgcc.dg/dfp/convert-int.c, gcc.dg/dfp/keywords-c89.c,\n\tgcc.dg/dfp/constants.c, gcc.dg/dfp/compare-rel-dfp.c,\n\tgcc.dg/dfp/compare-eq-const.c, gcc.dg/dfp/cast-bad.c,\n\tgcc.dg/dfp/operator-arith-fold.c, gcc.dg/dfp/union-init.c,\n\tgcc.dg/dfp/struct-layout-1.c,\n\tgcc.dg/dfp/compare-eq.hgcc.dg/dfp/convert-int-saturate.c,\n\tgcc.dg/dfp/compare-rel-d64.c, gcc.dg/dfp/func-vararg-size0.c,\n\tgcc.dg/dfp/Wconversion-2.c, gcc.dg/dfp/nan-2.c,\n\tgcc.dg/dfp/operator-cond.c, gcc.dg/dfp/composite-type.c,\n\tgcc.dg/dfp/func-vararg-dfp.c,\n\tgcc.dg/dfp/dfp.expgcc.dg/dfp/keywords-reserved.c,\n\tgcc.dg/dfp/convert-complex.c, gcc.dg/dfp/Wbad-function-cast-1.c,\n\tgcc.dg/dfp/operator-unary.c, gcc.dg/dfp/altivec-types.c,\n\tgcc.dg/dfp/cast.c, gcc.dg/dfp/typespec.c,\n\tgcc.dg/dfp/wtr-conversion-1.c: New tests.\n\nCo-Authored-By: Ben Elliston <bje@au.ibm.com>\nCo-Authored-By: Jon Grimm <jgrimm2@us.ibm.com>\nCo-Authored-By: Yao Qi <qiyaoltc@cn.ibm.com>\n\nFrom-SVN: r109604", "tree": {"sha": "9aff0dc626b4d53c1ff32ce6d509433c47ba166d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aff0dc626b4d53c1ff32ce6d509433c47ba166d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/comments", "author": null, "committer": null, "parents": [{"sha": "fcfd0ebb149626fe2a44a65b8983c37911140e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfd0ebb149626fe2a44a65b8983c37911140e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfd0ebb149626fe2a44a65b8983c37911140e66"}], "stats": {"total": 6207, "additions": 6131, "deletions": 76}, "files": [{"sha": "14988a901155e98c9c9074495167b5b3ebe9253e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -1,3 +1,68 @@\n+2006-01-12  Janis Johnson <janis187@us.ibm.com>\n+\t    Yao Qi  <qiyaoltc@cn.ibm.com>\n+\t    Ben Elliston  <bje@au.ibm.com>\n+\t    Jon Grimm  <jgrimm2@us.ibm.com>\n+\n+\t* gcc.dg/nodfp-1.c: New test.\n+\t* gcc.dg/compat/scalar-return-dfp_x.c: Likewise.\n+\t* gcc.dg/compat/scalar-return-dfp_x.c: Likewise.\n+\t* gcc.dg/compat/scalar-return-dfp_main.c: Likewise.\n+\t* gcc.dg/compat/scalar-by-value-dfp_main.c: Likewise.\n+\t* gcc.dg/compat/scalar-by-value-dfp_x.c: Likewise.\n+\t* gcc.dg/compat/scalar-return-dfp_y.c: Likewise.\n+\t* gcc.dg/compat/scalar-by-value-dfp_y.c: Likewise.\n+\t* gcc.dg/debug/dwarf2/dwarf-float.c: Likewise.\n+\t* gcc.dg/debug/dwarf2/dwarf-dfp.c: Likewise.\n+\t* gcc.dg/format/dfp-scanf-1.c: Likewise.\n+\t* gcc.dg/format/dfp-printf-1.c: Likewise.\n+\t* gcc.dg/compat/struct-layout-1.exp: Use c-compat.exp.\n+\t(compat_setup_dfp): New.\n+\t* gcc.dg/compat/compat.exp: Use it.\n+\t(compat-use-alt-compiler, compat-use-tst-compiler): Move to new file.\n+\tMake some variables global, prepend \"compat_\" to their names.\n+\t* gcc.dg/compat/struct-layout-1.h: Conditional DFP support.\n+\t* gcc.dg/compat/struct-layout-1_generate.c: Ditto.\n+\t* gcc.misc-tests/dectest.exp: New test driver for decTest.\n+\t* lib/compat.exp (compat_skip_list): Make global, rename.\n+\t* lib/c-compat.exp: New file.\n+\t* lib/target-supports.exp (check_effective_target_dfp): New.\n+\n+\t* gcc.dg/dfp/dec-eval-method.c, gcc.dg/dfp/func-array.c,\n+\tgcc.dg/dfp/convert-dfp-fold.c, gcc.dg/dfp/struct-union.c,\n+\tgcc.dg/dfp/compare-rel.h, gcc.dg/dfp/convert-dfp-round.c,\n+\tgcc.dg/dfp/func-struct.c, gcc.dg/dfp/constants-c99.c,\n+\tgcc.dg/dfp/compare-eq-d32.c, gcc.dg/dfp/func-vararg-mixed.c,\n+\tgcc.dg/dfp/compare-rel-d128.c, gcc.dg/dfp/operator-comma.c,\n+\tgcc.dg/dfp/decfloat-constants.c, gcc.dg/dfp/operator-bitwise.c,\n+\tgcc.dg/dfp/func-mixed.c, gcc.dg/dfp/compare-eq-dfp.c,\n+\tgcc.dg/dfp/operator-assignment.c, gcc.dg/dfp/dfp-round.h,\n+\tgcc.dg/dfp/modes.c, gcc.dg/dfp/keywords-c99.c, gcc.dg/dfp/nan-1.c,\n+\tgcc.dg/dfp/loop-index.c, gcc.dg/dfp/compare-eq-d64.c,\n+\tgcc.dg/dfp/convert-bfp.c, gcc.dg/dfp/usual-arith-conv-const.c,\n+\tgcc.dg/dfp/convert-dfp.c, gcc.dg/dfp/compare-rel-const.c,\n+\tgcc.dg/dfp/convert-int-fold.c, gcc.dg/dfp/keywords-pedantic.c,\n+\tgcc.dg/dfp/compare-rel-d32.c, gcc.dg/dfp/call-by-value.c,\n+\tgcc.dg/dfp/constants-hex.c, gcc.dg/dfp/func-scalar.c,\n+\tgcc.dg/dfp/keywords-ignored-c99.c, gcc.dg/dfp/snan.c,\n+\tgcc.dg/dfp/usual-arith-conv.c, gcc.dg/dfp/constants-pedantic.c,\n+\tgcc.dg/dfp/operator-logical.c, gcc.dg/dfp/compare-eq-d128.c,\n+\tgcc.dg/dfp/convert-bfp-fold.c, gcc.dg/dfp/ctypes.c,\n+\tgcc.dg/dfp/convert-int.c, gcc.dg/dfp/keywords-c89.c,\n+\tgcc.dg/dfp/constants.c, gcc.dg/dfp/compare-rel-dfp.c,\n+\tgcc.dg/dfp/compare-eq-const.c, gcc.dg/dfp/cast-bad.c,\n+\tgcc.dg/dfp/operator-arith-fold.c, gcc.dg/dfp/union-init.c,\n+\tgcc.dg/dfp/struct-layout-1.c,\n+\tgcc.dg/dfp/compare-eq.hgcc.dg/dfp/convert-int-saturate.c,\n+\tgcc.dg/dfp/compare-rel-d64.c, gcc.dg/dfp/func-vararg-size0.c,\n+\tgcc.dg/dfp/Wconversion-2.c, gcc.dg/dfp/nan-2.c,\n+\tgcc.dg/dfp/operator-cond.c, gcc.dg/dfp/composite-type.c,\n+\tgcc.dg/dfp/func-vararg-dfp.c,\n+\tgcc.dg/dfp/dfp.expgcc.dg/dfp/keywords-reserved.c,\n+\tgcc.dg/dfp/convert-complex.c, gcc.dg/dfp/Wbad-function-cast-1.c,\n+\tgcc.dg/dfp/operator-unary.c, gcc.dg/dfp/altivec-types.c,\n+\tgcc.dg/dfp/cast.c, gcc.dg/dfp/typespec.c,\n+\tgcc.dg/dfp/wtr-conversion-1.c: New tests.\n+\t\n 2006-01-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/25734"}, {"sha": "0d07877a520582c61ffe5a6fa2e7760ac3de3f00", "filename": "gcc/testsuite/gcc.dg/compat/compat.exp", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -30,49 +30,27 @@ if $tracelevel then {\n }\n \n global GCC_UNDER_TEST\n+global ALT_CC_UNDER_TEST\n+global compat_save_gcc_under_test\n+global compat_use_alt\n+global compat_same_alt\n+global compat_have_dfp\n \n # Load procedures from common libraries. \n load_lib standard.exp\n load_lib gcc.exp\n \n-#\n-# compat-use-alt-compiler -- make the alternate compiler the default\n-# \n-proc compat-use-alt-compiler { } {\n-    global GCC_UNDER_TEST ALT_CC_UNDER_TEST\n-    global same_alt\n-\n-    # We don't need to do this if the alternate compiler is actually\n-    # the same as the compiler under test.\n-    if { $same_alt == 0 } then {\n-\tset GCC_UNDER_TEST $ALT_CC_UNDER_TEST\n-    }\n-}\n-\n-#\n-# compat-use-tst-compiler -- make compiler under test the default\n-#\n-proc compat-use-tst-compiler { } {\n-    global GCC_UNDER_TEST save_gcc_under_test\n-    global same_alt\n-\n-    # We don't need to do this if the alternate compiler is actually\n-    # the same as the compiler under test.\n-\n-    if { $same_alt == 0 } then {\n-\tset GCC_UNDER_TEST $save_gcc_under_test\n-    }\n-}\n+# Load the language-dependent compatibility support procedures.\n+load_lib c-compat.exp\n \n # Load the language-independent compabibility support procedures.\n-# This must be done after the compat-use-*-compiler definitions.\n load_lib compat.exp\n \n gcc_init\n \n # Save variables for the C compiler under test, which each test will\n # change a couple of times.  This must be done after calling gcc-init.\n-set save_gcc_under_test $GCC_UNDER_TEST\n+set compat_save_gcc_under_test $GCC_UNDER_TEST\n \n # Define an identifier for use with this suite to avoid name conflicts\n # with other compat tests running at the same time.\n@@ -82,23 +60,26 @@ set sid \"c_compat\"\n # variable is defined but is set to \"same\", that means we use the same\n # compiler twice, which is meaningful if the two parts of COMPAT_OPTIONS\n # are different.\n-set use_alt 0\n-set same_alt 0\n+set compat_use_alt 0\n+set compat_same_alt 0\n+\n if [info exists ALT_CC_UNDER_TEST] then {\n-    set use_alt 1\n+    set compat_use_alt 1\n     if [string match \"same\" $ALT_CC_UNDER_TEST] then {\n-\tset same_alt 1\n+\tset compat_same_alt 1\n     }\n }\n \n+compat_setup_dfp\n+\n # Main loop.\n foreach src [lsort [find $srcdir/$subdir *_main.c]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n     if ![runtest_file_p $runtests $src] then {\n \tcontinue\n     }\n \n-    compat-execute $src $sid $use_alt\n+    compat-execute $src $sid $compat_use_alt\n }\n \n # Restore the original compiler under test."}, {"sha": "7f81d6a37548c3190300a31f4ede356a7c9d9f57", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-dfp_main.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_main.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* Test passing scalars by value.  This test includes scalar types that\n+   are supported by va_arg.  */\n+\n+/* { dg-require-compat-dfp \"\" } */\n+\n+extern void scalar_by_value_dfp_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  scalar_by_value_dfp_x ();\n+  exit (0);\n+}"}, {"sha": "8f55671c3f4e03884ad6dcd30eb2208def390d06", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-dfp_x.c", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_x.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,170 @@\n+#include \"compat-common.h\"\n+\n+#define T(NAME, TYPE, INITVAL) \t\t\t\t\t\\\n+TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##NAME (TYPE *p, TYPE v);\t\t\t\\\n+extern void checkg##NAME (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16);\t\t\\\n+extern void testva##NAME (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+check##NAME (TYPE x, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (x != v + INITVAL)\t\t\t\t\t\t\\\n+    DEBUG_CHECK\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+\t      TYPE x05, TYPE x06, TYPE x07, TYPE x08)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##NAME (x01, g02##NAME, x02, g04##NAME,\t\t\t\\\n+\t      x03, g06##NAME, x04, g08##NAME,\t\t\t\\\n+\t      x05, g10##NAME, x06, g12##NAME,\t\t\t\\\n+\t      x07, g14##NAME, x08, g16##NAME);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##NAME (&g01##NAME,  1);\t\t\t\t\t\\\n+  init##NAME (&g02##NAME,  2);\t\t\t\t\t\\\n+  init##NAME (&g03##NAME,  3);\t\t\t\t\t\\\n+  init##NAME (&g04##NAME,  4);\t\t\t\t\t\\\n+  init##NAME (&g05##NAME,  5);\t\t\t\t\t\\\n+  init##NAME (&g06##NAME,  6);\t\t\t\t\t\\\n+  init##NAME (&g07##NAME,  7);\t\t\t\t\t\\\n+  init##NAME (&g08##NAME,  8);\t\t\t\t\t\\\n+  init##NAME (&g09##NAME,  9);\t\t\t\t\t\\\n+  init##NAME (&g10##NAME, 10);\t\t\t\t\t\\\n+  init##NAME (&g11##NAME, 11);\t\t\t\t\t\\\n+  init##NAME (&g12##NAME, 12);\t\t\t\t\t\\\n+  init##NAME (&g13##NAME, 13);\t\t\t\t\t\\\n+  init##NAME (&g14##NAME, 14);\t\t\t\t\t\\\n+  init##NAME (&g15##NAME, 15);\t\t\t\t\t\\\n+  init##NAME (&g16##NAME, 16);\t\t\t\t\t\\\n+  checkg##NAME ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test: \");\t\t\t\t\t\\\n+  test##NAME (g01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t      g05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t      g09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t      g13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" testva:\");\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (1,\t\t\t\t\t\t\\\n+\t\tg01##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (2,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (3,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (4,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (5,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (6,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (7,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (8,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (9,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (10,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (11,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (12,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (13,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (14,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (15,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME, g15##NAME);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##NAME (16,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test2: \");\t\t\t\t\t\\\n+  test2_##NAME (g01##NAME, g03##NAME, g05##NAME, g07##NAME,\t\\\n+\t\tg09##NAME, g11##NAME, g13##NAME, g15##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, _Decimal32, 1.2df)\n+T(d64, _Decimal64, 12.34dd)\n+T(d128, _Decimal128, 123.456dl)\n+\n+#undef T\n+\n+void\n+scalar_by_value_dfp_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "9b1f49f69bd3b3cf377622905e3319705f9ea451", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-dfp_y.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-dfp_y.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,89 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+extern TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+extern TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+extern TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+extern TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##NAME (TYPE x, TYPE v);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+init##NAME (TYPE *p, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *p = v + INITVAL;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (g01##NAME,  1);\t\t\t\t\t\\\n+  check##NAME (g02##NAME,  2);\t\t\t\t\t\\\n+  check##NAME (g03##NAME,  3);\t\t\t\t\t\\\n+  check##NAME (g04##NAME,  4);\t\t\t\t\t\\\n+  check##NAME (g05##NAME,  5);\t\t\t\t\t\\\n+  check##NAME (g06##NAME,  6);\t\t\t\t\t\\\n+  check##NAME (g07##NAME,  7);\t\t\t\t\t\\\n+  check##NAME (g08##NAME,  8);\t\t\t\t\t\\\n+  check##NAME (g09##NAME,  9);\t\t\t\t\t\\\n+  check##NAME (g10##NAME, 10);\t\t\t\t\t\\\n+  check##NAME (g11##NAME, 11);\t\t\t\t\t\\\n+  check##NAME (g12##NAME, 12);\t\t\t\t\t\\\n+  check##NAME (g13##NAME, 13);\t\t\t\t\t\\\n+  check##NAME (g14##NAME, 14);\t\t\t\t\t\\\n+  check##NAME (g15##NAME, 15);\t\t\t\t\t\\\n+  check##NAME (g16##NAME, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (x01,  1);\t\t\t\t\t\\\n+  check##NAME (x02,  2);\t\t\t\t\t\\\n+  check##NAME (x03,  3);\t\t\t\t\t\\\n+  check##NAME (x04,  4);\t\t\t\t\t\\\n+  check##NAME (x05,  5);\t\t\t\t\t\\\n+  check##NAME (x06,  6);\t\t\t\t\t\\\n+  check##NAME (x07,  7);\t\t\t\t\t\\\n+  check##NAME (x08,  8);\t\t\t\t\t\\\n+  check##NAME (x09,  9);\t\t\t\t\t\\\n+  check##NAME (x10, 10);\t\t\t\t\t\\\n+  check##NAME (x11, 11);\t\t\t\t\t\\\n+  check##NAME (x12, 12);\t\t\t\t\t\\\n+  check##NAME (x13, 13);\t\t\t\t\t\\\n+  check##NAME (x14, 14);\t\t\t\t\t\\\n+  check##NAME (x15, 15);\t\t\t\t\t\\\n+  check##NAME (x16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testva##NAME (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  check##NAME (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, _Decimal32, 1.2df)\n+T(d64, _Decimal64, 12.34dd)\n+T(d128, _Decimal128, 123.456dl)"}, {"sha": "eeb62869fffd09c71f998c51449b6bb764035c93", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-dfp_main.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_main.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* Test function return values.  This test includes scalar types that\n+   are supported by va_arg.  */\n+\n+/* { dg-require-compat-dfp \"\" } */\n+\n+extern void scalar_return_dfp_x(void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  scalar_return_dfp_x ();\n+  exit (0);\n+}"}, {"sha": "aee0a971737d75c159126c613e66117c228529ab", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-dfp_x.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_x.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,109 @@\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL) \t\t\t\t\t\\\n+TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##NAME (TYPE *p, TYPE v);\t\t\t\\\n+extern void checkg##NAME (void);\t\t\t\t\\\n+extern TYPE test0##NAME (void);\t\t\t\t\t\\\n+extern TYPE test1##NAME (TYPE);\t\t\t\t\t\\\n+extern TYPE testva##NAME (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+check##NAME (TYPE x, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (x != v)\t\t\t\t\t\t\t\\\n+    DEBUG_CHECK\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##NAME (&g01##NAME,  1);\t\t\t\t\t\\\n+  init##NAME (&g02##NAME,  2);\t\t\t\t\t\\\n+  init##NAME (&g03##NAME,  3);\t\t\t\t\t\\\n+  init##NAME (&g04##NAME,  4);\t\t\t\t\t\\\n+  init##NAME (&g05##NAME,  5);\t\t\t\t\t\\\n+  init##NAME (&g06##NAME,  6);\t\t\t\t\t\\\n+  init##NAME (&g07##NAME,  7);\t\t\t\t\t\\\n+  init##NAME (&g08##NAME,  8);\t\t\t\t\t\\\n+  init##NAME (&g09##NAME,  9);\t\t\t\t\t\\\n+  init##NAME (&g10##NAME, 10);\t\t\t\t\t\\\n+  init##NAME (&g11##NAME, 11);\t\t\t\t\t\\\n+  init##NAME (&g12##NAME, 12);\t\t\t\t\t\\\n+  init##NAME (&g13##NAME, 13);\t\t\t\t\t\\\n+  init##NAME (&g14##NAME, 14);\t\t\t\t\t\\\n+  init##NAME (&g15##NAME, 15);\t\t\t\t\t\\\n+  init##NAME (&g16##NAME, 16);\t\t\t\t\t\\\n+  checkg##NAME ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test0: \");\t\t\t\t\t\\\n+  rslt = test0##NAME ();\t\t\t\t\t\\\n+  check##NAME (rslt, g01##NAME);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test1: \");\t\t\t\t\t\\\n+  rslt = test1##NAME (g01##NAME);\t\t\t\t\\\n+  check##NAME (rslt, g01##NAME);\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      DEBUG_FPUTS (#NAME);\t\t\t\t\t\\\n+      DEBUG_FPUTS (\" testva:\");\t\t\t\t\t\\\n+      rslt = testva##NAME (1, g01##NAME);\t\t\t\\\n+      check##NAME (rslt, g01##NAME);\t\t\t\t\\\n+      rslt = testva##NAME (5, g01##NAME, g02##NAME, g03##NAME,\t\\\n+\t\t\t   g04##NAME, g05##NAME);\t\t\\\n+      check##NAME (rslt, g05##NAME);\t\t\t\t\\\n+      rslt = testva##NAME (9, g01##NAME, g02##NAME, g03##NAME,\t\\\n+\t\t\t   g04##NAME, g05##NAME, g06##NAME,\t\\\n+\t\t\t   g07##NAME, g08##NAME, g09##NAME);\t\\\n+      check##NAME (rslt, g09##NAME);\t\t\t\t\\\n+      rslt = testva##NAME (16, g01##NAME, g02##NAME, g03##NAME,\t\\\n+\t\t\t   g04##NAME, g05##NAME, g06##NAME,\t\\\n+\t\t\t   g07##NAME, g08##NAME, g09##NAME,\t\\\n+\t\t\t   g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\t\t   g13##NAME, g14##NAME, g15##NAME,\t\\\n+\t\t\t   g16##NAME);\t\t\t\t\\\n+      check##NAME (rslt, g16##NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, _Decimal32, 1.2df)\n+T(d64, _Decimal64, 12.34dd)\n+T(d128, _Decimal128, 123.456dl)\n+\n+#undef T\n+\n+void\n+scalar_return_dfp_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "5fd9373fb362681ec7a304041a895027beabd1a3", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-dfp_y.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-dfp_y.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,67 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+extern TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+extern TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+extern TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+extern TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##NAME (TYPE x, TYPE v);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+init##NAME (TYPE *p, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *p = v + INITVAL;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (g01##NAME,  1+INITVAL);\t\t\t\t\\\n+  check##NAME (g02##NAME,  2+INITVAL);\t\t\t\t\\\n+  check##NAME (g03##NAME,  3+INITVAL);\t\t\t\t\\\n+  check##NAME (g04##NAME,  4+INITVAL);\t\t\t\t\\\n+  check##NAME (g05##NAME,  5+INITVAL);\t\t\t\t\\\n+  check##NAME (g06##NAME,  6+INITVAL);\t\t\t\t\\\n+  check##NAME (g07##NAME,  7+INITVAL);\t\t\t\t\\\n+  check##NAME (g08##NAME,  8+INITVAL);\t\t\t\t\\\n+  check##NAME (g09##NAME,  9+INITVAL);\t\t\t\t\\\n+  check##NAME (g10##NAME, 10+INITVAL);\t\t\t\t\\\n+  check##NAME (g11##NAME, 11+INITVAL);\t\t\t\t\\\n+  check##NAME (g12##NAME, 12+INITVAL);\t\t\t\t\\\n+  check##NAME (g13##NAME, 13+INITVAL);\t\t\t\t\\\n+  check##NAME (g14##NAME, 14+INITVAL);\t\t\t\t\\\n+  check##NAME (g15##NAME, 15+INITVAL);\t\t\t\t\\\n+  check##NAME (g16##NAME, 16+INITVAL);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test0##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return g01##NAME;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test1##NAME (TYPE x01)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return x01;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+testva##NAME (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\\\n+    rslt = va_arg (ap, TYPE);\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\\\n+  return rslt;\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, _Decimal32, 1.2df)\n+T(d64, _Decimal64, 12.34dd)\n+T(d128, _Decimal128, 123.456dl)"}, {"sha": "46fdae6b2c8fc16423728d746ffb2451b7238da2", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -35,49 +35,26 @@ if $tracelevel then {\n }\n \n global GCC_UNDER_TEST\n+global compat_save_gcc_under_test\n+global compat_use_alt\n+global compat_same_alt\n+global compat_have_dfp\n \n # Load procedures from common libraries. \n load_lib standard.exp\n load_lib gcc.exp\n \n-#\n-# compat-use-alt-compiler -- make the alternate compiler the default\n-# \n-proc compat-use-alt-compiler { } {\n-    global GCC_UNDER_TEST ALT_CC_UNDER_TEST\n-    global same_alt\n-\n-    # We don't need to do this if the alternate compiler is actually\n-    # the same as the compiler under test.\n-    if { $same_alt == 0 } then {\n-\tset GCC_UNDER_TEST $ALT_CC_UNDER_TEST\n-    }\n-}\n-\n-#\n-# compat-use-tst-compiler -- make compiler under test the default\n-#\n-proc compat-use-tst-compiler { } {\n-    global GCC_UNDER_TEST save_gcc_under_test\n-    global same_alt\n-\n-    # We don't need to do this if the alternate compiler is actually\n-    # the same as the compiler under test.\n-\n-    if { $same_alt == 0 } then {\n-\tset GCC_UNDER_TEST $save_gcc_under_test\n-    }\n-}\n+# Load the language-dependent compabibility support procedures.\n+load_lib c-compat.exp\n \n # Load the language-independent compabibility support procedures.\n-# This must be done after the compat-use-*-compiler definitions.\n load_lib compat.exp\n \n gcc_init\n \n # Save variables for the C compiler under test, which each test will\n # change a couple of times.  This must be done after calling gcc-init.\n-set save_gcc_under_test $GCC_UNDER_TEST\n+set compat_save_gcc_under_test $GCC_UNDER_TEST\n \n # Define an identifier for use with this suite to avoid name conflicts\n # with other compat tests running at the same time.\n@@ -87,22 +64,31 @@ set sid \"c_compat\"\n # variable is defined but is set to \"same\", that means we use the same\n # compiler twice, which is meaningful if the two parts of COMPAT_OPTIONS\n # are different.\n-set use_alt 0\n-set same_alt 0\n+set compat_use_alt 0\n+set compat_same_alt 0\n+\n if [info exists ALT_CC_UNDER_TEST] then {\n-    set use_alt 1\n+    set compat_use_alt 1\n     if [string match \"same\" $ALT_CC_UNDER_TEST] then {\n-\tset same_alt 1\n+\tset compat_same_alt 1\n     }\n }\n \n+compat_setup_dfp\n+\n+if { $compat_have_dfp == 0 } {\n+    set skip_dfp \"-DSKIP_DECIMAL_FLOAT\"\n+} else {\n+    set skip_dfp \"\"\n+}\n+\n set tstobjdir \"$tmpdir/gcc.dg-struct-layout-1\"\n set generator \"$tmpdir/gcc.dg-struct-layout-1_generate\"\n \n set generator_src \"$srcdir/$subdir/struct-layout-1_generate.c\"\n set generator_src \"$generator_src $srcdir/$subdir/generate-random.c\"\n set generator_src \"$generator_src $srcdir/$subdir/generate-random_r.c\"\n-set generator_cmd \"-o $generator $generator_src\"\n+set generator_cmd \"-o $generator $skip_dfp $generator_src\"\n \n set status [remote_exec host \"$HOSTCC $HOSTCFLAGS $generator_cmd\"]\n set status [lindex $status 0]\n@@ -123,7 +109,7 @@ if { $status == 0 } then {\n \t\tcontinue\n \t    }\n \n-\t    compat-execute $src $sid $use_alt\n+\t    compat-execute $src $sid $compat_use_alt\n \t}\n     } else {\n \twarning \"Could not execute gcc.dg/compat/struct-layout-1 generator\""}, {"sha": "2891efbff3c9cc63cd5b5e048e7b05eb2fd833ad", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1.h", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.h?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -204,6 +204,11 @@ typedef _Complex unsigned long long int Tcullong;\n typedef float Tfloat;\n typedef double Tdouble;\n typedef long double Tldouble;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 TDecimal32;\n+typedef _Decimal64 TDecimal64;\n+typedef _Decimal128 TDecimal128;\n+#endif\n typedef _Complex float Tcfloat;\n typedef _Complex double Tcdouble;\n typedef _Complex long double Tcldouble;\n@@ -248,6 +253,11 @@ typedef _Complex unsigned long long int Talcullong atal;\n typedef float Talfloat atal;\n typedef double Taldouble atal;\n typedef long double Talldouble atal;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 TalDecimal32 atal;\n+typedef _Decimal64 TalDecimal64 atal;\n+typedef _Decimal128 TalDecimal128 atal;\n+#endif\n typedef _Complex float Talcfloat atal;\n typedef _Complex double Talcdouble atal;\n typedef _Complex long double Talcldouble atal;\n@@ -292,6 +302,11 @@ typedef _Complex unsigned long long int Tal1cullong atal1;\n typedef float Tal1float atal1;\n typedef double Tal1double atal1;\n typedef long double Tal1ldouble atal1;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Tal1Decimal32 atal1;\n+typedef _Decimal64 Tal1Decimal64 atal1;\n+typedef _Decimal128 Tal1Decimal128 atal1;\n+#endif\n typedef _Complex float Tal1cfloat atal1;\n typedef _Complex double Tal1cdouble atal1;\n typedef _Complex long double Tal1cldouble atal1;\n@@ -336,6 +351,11 @@ typedef _Complex unsigned long long int Tal2cullong atal2;\n typedef float Tal2float atal2;\n typedef double Tal2double atal2;\n typedef long double Tal2ldouble atal2;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Tal2Decimal32 atal2;\n+typedef _Decimal64 Tal2Decimal64 atal2;\n+typedef _Decimal128 Tal2Decimal128 atal2;\n+#endif\n typedef _Complex float Tal2cfloat atal2;\n typedef _Complex double Tal2cdouble atal2;\n typedef _Complex long double Tal2cldouble atal2;\n@@ -380,6 +400,11 @@ typedef _Complex unsigned long long int Tal4cullong atal4;\n typedef float Tal4float atal4;\n typedef double Tal4double atal4;\n typedef long double Tal4ldouble atal4;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Tal4Decimal32 atal4;\n+typedef _Decimal64 Tal4Decimal64 atal4;\n+typedef _Decimal128 Tal4Decimal128 atal4;\n+#endif\n typedef _Complex float Tal4cfloat atal4;\n typedef _Complex double Tal4cdouble atal4;\n typedef _Complex long double Tal4cldouble atal4;\n@@ -424,6 +449,11 @@ typedef _Complex unsigned long long int Tal8cullong atal8;\n typedef float Tal8float atal8;\n typedef double Tal8double atal8;\n typedef long double Tal8ldouble atal8;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Tal8Decimal32 atal8;\n+typedef _Decimal64 Tal8Decimal64 atal8;\n+typedef _Decimal128 Tal8Decimal128 atal8;\n+#endif\n typedef _Complex float Tal8cfloat atal8;\n typedef _Complex double Tal8cdouble atal8;\n typedef _Complex long double Tal8cldouble atal8;\n@@ -468,6 +498,11 @@ typedef _Complex unsigned long long int Tal16cullong atal16;\n typedef float Tal16float atal16;\n typedef double Tal16double atal16;\n typedef long double Tal16ldouble atal16;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Tal16Decimal32 atal16;\n+typedef _Decimal64 Tal16Decimal64 atal16;\n+typedef _Decimal128 Tal16Decimal128 atal16;\n+#endif\n typedef _Complex float Tal16cfloat atal16;\n typedef _Complex double Tal16cdouble atal16;\n typedef _Complex long double Tal16cldouble atal16;\n@@ -512,6 +547,11 @@ typedef _Complex unsigned long long int Talx1cullong atalx1;\n typedef float Talx1float atalx1;\n typedef double Talx1double atalx1;\n typedef long double Talx1ldouble atalx1;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Talx1Decimal32 atalx1;\n+typedef _Decimal64 Talx1Decimal64 atalx1;\n+typedef _Decimal128 Talx1Decimal128 atalx1;\n+#endif\n typedef _Complex float Talx1cfloat atalx1;\n typedef _Complex double Talx1cdouble atalx1;\n typedef _Complex long double Talx1cldouble atalx1;\n@@ -553,6 +593,11 @@ typedef _Complex unsigned long long int Talx2cullong atalx2;\n typedef float Talx2float atalx2;\n typedef double Talx2double atalx2;\n typedef long double Talx2ldouble atalx2;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Talx2Decimal32 atalx2;\n+typedef _Decimal64 Talx2Decimal64 atalx2;\n+typedef _Decimal128 Talx2Decimal128 atalx2;\n+#endif\n typedef _Complex float Talx2cfloat atalx2;\n typedef _Complex double Talx2cdouble atalx2;\n typedef _Complex long double Talx2cldouble atalx2;\n@@ -588,6 +633,11 @@ typedef _Complex unsigned long long int Talx4cullong atalx4;\n typedef float Talx4float atalx4;\n typedef double Talx4double atalx4;\n typedef long double Talx4ldouble atalx4;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal32 Talx4Decimal32 atalx4;\n+typedef _Decimal64 Talx4Decimal64 atalx4;\n+typedef _Decimal128 Talx4Decimal128 atalx4;\n+#endif\n typedef _Complex float Talx4cfloat atalx4;\n typedef _Complex double Talx4cdouble atalx4;\n typedef _Complex long double Talx4cldouble atalx4;\n@@ -618,6 +668,10 @@ typedef _Complex unsigned long long int Talx8cullong atalx8;\n #endif\n typedef double Talx8double atalx8;\n typedef long double Talx8ldouble atalx8;\n+#ifndef SKIP_DECIMAL_FLOAT\n+typedef _Decimal64 Talx8Decimal64 atalx8;\n+typedef _Decimal128 Talx8Decimal128 atalx8;\n+#endif\n typedef _Complex float Talx8cfloat atalx8;\n typedef _Complex double Talx8cdouble atalx8;\n typedef _Complex long double Talx8cldouble atalx8;"}, {"sha": "6af27d04adf21890353f0833ae79d7a0d1d54753", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -46,6 +46,7 @@ enum TYPE\n   TYPE_CUINT,\n   TYPE_FLOAT,\n   TYPE_CFLOAT,\n+  TYPE_DEC_FLOAT,\n   TYPE_SENUM,\n   TYPE_UENUM,\n   TYPE_PTR,\n@@ -82,7 +83,14 @@ struct types base_types[] = {\n { \"float\", TYPE_FLOAT, 0, 0 },\n { \"double\", TYPE_FLOAT, 0, 0 },\n { \"long double\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"_Decimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"_Decimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"_Decimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#define NTYPES1 21\n+#else\n #define NTYPES1 18\n+#endif\n { \"Tchar\", TYPE_UINT, 127, 'C' },\n { \"Tschar\", TYPE_INT, 127, 'C' },\n { \"Tuchar\", TYPE_UINT, 255, 'C' },\n@@ -103,6 +111,11 @@ struct types base_types[] = {\n { \"Tfloat\", TYPE_FLOAT, 0, 0 },\n { \"Tdouble\", TYPE_FLOAT, 0, 0 },\n { \"Tldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"TDecimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"TDecimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"TDecimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#endif\n { \"enum E0\", TYPE_UENUM, 0, ' ' },\n { \"enum E1\", TYPE_UENUM, 1, ' ' },\n { \"enum E2\", TYPE_SENUM, 3, ' ' },\n@@ -214,6 +227,11 @@ struct types attrib_types[] = {\n { \"Talfloat\", TYPE_FLOAT, 0, 0 },\n { \"Taldouble\", TYPE_FLOAT, 0, 0 },\n { \"Talldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"TalDecimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"TalDecimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"TalDecimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#endif\n { \"TalE0\", TYPE_UENUM, 0, ' ' },\n { \"TalE1\", TYPE_UENUM, 1, ' ' },\n { \"TalE2\", TYPE_SENUM, 3, ' ' },\n@@ -242,6 +260,11 @@ struct types attrib_types[] = {\n { \"Tal1float\", TYPE_FLOAT, 0, 0 },\n { \"Tal1double\", TYPE_FLOAT, 0, 0 },\n { \"Tal1ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Tal1Decimal32\", TYPE_DEC_FLOAT, 0, 0},\n+{ \"Tal1Decimal64\", TYPE_DEC_FLOAT, 0, 0},\n+{ \"Tal1Decimal128\", TYPE_DEC_FLOAT, 0, 0},\n+#endif\n { \"Tal1E0\", TYPE_UENUM, 0, ' ' },\n { \"Tal1E1\", TYPE_UENUM, 1, ' ' },\n { \"Tal1E2\", TYPE_SENUM, 3, ' ' },\n@@ -270,6 +293,11 @@ struct types attrib_types[] = {\n { \"Tal2float\", TYPE_FLOAT, 0, 0 },\n { \"Tal2double\", TYPE_FLOAT, 0, 0 },\n { \"Tal2ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Tal2Decimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal2Decimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal2Decimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#endif\n { \"Tal2E0\", TYPE_UENUM, 0, ' ' },\n { \"Tal2E1\", TYPE_UENUM, 1, ' ' },\n { \"Tal2E2\", TYPE_SENUM, 3, ' ' },\n@@ -298,6 +326,11 @@ struct types attrib_types[] = {\n { \"Tal4float\", TYPE_FLOAT, 0, 0 },\n { \"Tal4double\", TYPE_FLOAT, 0, 0 },\n { \"Tal4ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Tal4Decimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal4Decimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal4Decimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#endif\n { \"Tal4E0\", TYPE_UENUM, 0, ' ' },\n { \"Tal4E1\", TYPE_UENUM, 1, ' ' },\n { \"Tal4E2\", TYPE_SENUM, 3, ' ' },\n@@ -326,6 +359,11 @@ struct types attrib_types[] = {\n { \"Tal8float\", TYPE_FLOAT, 0, 0 },\n { \"Tal8double\", TYPE_FLOAT, 0, 0 },\n { \"Tal8ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Tal8Decimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal8Decimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal8Decimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#endif\n { \"Tal8E0\", TYPE_UENUM, 0, ' ' },\n { \"Tal8E1\", TYPE_UENUM, 1, ' ' },\n { \"Tal8E2\", TYPE_SENUM, 3, ' ' },\n@@ -354,6 +392,11 @@ struct types attrib_types[] = {\n { \"Tal16float\", TYPE_FLOAT, 0, 0 },\n { \"Tal16double\", TYPE_FLOAT, 0, 0 },\n { \"Tal16ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Tal16Decimal32\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal16Decimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Tal16Decimal128\", TYPE_DEC_FLOAT, 0, 0 },\n+#endif\n { \"Tal16E0\", TYPE_UENUM, 0, ' ' },\n { \"Tal16E1\", TYPE_UENUM, 1, ' ' },\n { \"Tal16E2\", TYPE_SENUM, 3, ' ' },\n@@ -472,6 +515,11 @@ struct types attrib_array_types[] = {\n { \"Talx1float\", TYPE_FLOAT, 0, 0 },\n { \"Talx1double\", TYPE_FLOAT, 0, 0 },\n { \"Talx1ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Talx1Decimal32\", TYPE_DEC_FLOAT, 0 ,0 },\n+{ \"Talx1Decimal64\", TYPE_DEC_FLOAT, 0 ,0 },\n+{ \"Talx1Decimal128\", TYPE_DEC_FLOAT, 0 ,0 },\n+#endif\n { \"Talx1E0\", TYPE_UENUM, 0, ' ' },\n { \"Talx1E1\", TYPE_UENUM, 1, ' ' },\n { \"Talx1E2\", TYPE_SENUM, 3, ' ' },\n@@ -496,6 +544,11 @@ struct types attrib_array_types[] = {\n { \"Talx2float\", TYPE_FLOAT, 0, 0 },\n { \"Talx2double\", TYPE_FLOAT, 0, 0 },\n { \"Talx2ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Talx2Decimal32\", TYPE_DEC_FLOAT, 0 , 0 },\n+{ \"Talx2Decimal64\", TYPE_DEC_FLOAT, 0 , 0 },\n+{ \"Talx2Decimal128\", TYPE_DEC_FLOAT, 0 , 0 },\n+#endif\n { \"Talx2E0\", TYPE_UENUM, 0, ' ' },\n { \"Talx2E1\", TYPE_UENUM, 1, ' ' },\n { \"Talx2E2\", TYPE_SENUM, 3, ' ' },\n@@ -518,6 +571,11 @@ struct types attrib_array_types[] = {\n { \"Talx4float\", TYPE_FLOAT, 0, 0 },\n { \"Talx4double\", TYPE_FLOAT, 0, 0 },\n { \"Talx4ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Talx4Decimal32\", TYPE_DEC_FLOAT, 0 , 0 },\n+{ \"Talx4Decimal64\", TYPE_DEC_FLOAT, 0 , 0 },\n+{ \"Talx4Decimal128\", TYPE_DEC_FLOAT, 0 , 0 },\n+#endif\n { \"Talx4E0\", TYPE_UENUM, 0, ' ' },\n { \"Talx4E1\", TYPE_UENUM, 1, ' ' },\n { \"Talx4E2\", TYPE_SENUM, 3, ' ' },\n@@ -536,7 +594,11 @@ struct types attrib_array_types[] = {\n { \"Taly8cptr\", TYPE_PTR, 0, 0 },\n { \"Taly8iptr\", TYPE_PTR, 0, 0 },\n { \"Talx8double\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx8ldouble\", TYPE_FLOAT, 0, 0 }\n+{ \"Talx8ldouble\", TYPE_FLOAT, 0, 0 },\n+#ifndef SKIP_DECIMAL_FLOAT\n+{ \"Talx8Decimal64\", TYPE_DEC_FLOAT, 0, 0 },\n+{ \"Talx8Decimal128\", TYPE_DEC_FLOAT, 0, 0 }\n+#endif\n #define NAATYPES2 (sizeof (attrib_array_types) / sizeof (attrib_array_types[0]))\n };\n struct types complex_attrib_array_types[] = {\n@@ -950,6 +1012,11 @@ output_FNB (char mode, struct entry *e)\n {\n   unsigned long long int l1, l2, m;\n   int signs = 0;\n+#ifndef SKIP_DECIMAL_FLOAT\n+  int suffix = 0;\n+  char DEC_SUFFIX[3][3]={\"DF\",\"DD\",\"DL\"};\n+#endif\n+  \n   const char *p, *q;\n \n   if (e->type->type == TYPE_OTHER)\n@@ -991,6 +1058,29 @@ output_FNB (char mode, struct entry *e)\n       fprintf (outfile, \"%s%f,%s%f\", (signs & 1) ? \"-\" : \"\",\n \t       ((double) l1) / 64, (signs & 2) ? \"-\" : \"\", ((double) l2) / 64);\n       break;\n+#ifndef SKIP_DECIMAL_FLOAT\n+    case TYPE_DEC_FLOAT:\n+      l1 &= 0xffffff;\n+      l2 &= 0xffffff;\n+      signs = generate_random () & 3;\n+      \n+      /* Get the suffix of Decimal Floting Points per \n+\t e->type->name.  Distinguish these three DFP types by\n+         e->type->name.  */\n+      if (strstr(e->type->name, \"Decimal32\")) suffix=0;\n+      else if (strstr(e->type->name, \"Decimal64\")) suffix=1;\n+      else if (strstr(e->type->name, \"Decimal128\")) suffix=2;\n+      else\n+\tabort ();\n+\n+      /* Formatted input/output specifiers for DFP types have not been\n+         implemented in GLIBC.  %f here used in fprintf is just to \n+         dump the numbers to outfile.  */\n+      fprintf (outfile, \"%s%f%s,%s%f%s\", \n+\t       (signs & 1) ? \"-\" : \"\", ((double) l1) / 64, DEC_SUFFIX[suffix], \n+\t       (signs & 2) ? \"-\" : \"\", ((double) l2) / 64, DEC_SUFFIX[suffix]);\n+      break;\n+#endif\n     case TYPE_CINT:\n       signs = generate_random () & 3;\n       l1 &= e->type->maxval;"}, {"sha": "ddb602250cef5d153461641a55cd87eaa1ecf459", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dwarf-dfp.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-dfp.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,16 @@\n+/* Verify the DWARF encoding of C99 decimal floating point types.  */\n+\n+/* { dg-do compile */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-O0 -gdwarf-2 -dA\" } */\n+/* { dg-final { scan-assembler \"0x10.*DW_AT_encoding\" } } */\n+/* { dg-final { scan-assembler \"0x4.*DW_AT_byte_size\" } } */\n+/* { dg-final { scan-assembler \"0x8.*DW_AT_byte_size\" } } */\n+/* { dg-final { scan-assembler \"0x10.*DW_AT_byte_size\" } } */\n+\n+void foo ()\n+{\n+  _Decimal32 f = 1.5df;\n+  _Decimal64 d = 1.5dd;\n+  _Decimal128 l = 1.5dl;\n+}"}, {"sha": "84d605fcd036bcc9041ea0183a0c9f9558260562", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dwarf-float.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-float.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* Verify the DWARF encoding of C99 floating point types.  */\n+\n+/* { dg-do compile */\n+/* { dg-options \"-O0 -gdwarf-2 -dA\" } */\n+/* { dg-final { scan-assembler \"0x4.*DW_AT_encoding\" } } */\n+/* { dg-final { scan-assembler \"0x4.*DW_AT_byte_size\" } } */\n+/* { dg-final { scan-assembler \"0x8.*DW_AT_byte_size\" } } */\n+/* { dg-final { scan-assembler \"0x10.*DW_AT_byte_size\" } } */\n+\n+void foo ()\n+{\n+  float f = 1.5f;\n+  double d = 1.5;\n+  long double l = 1.5l;\n+}"}, {"sha": "95e8ce19810264ebfc2073e77e2db59beedad4d1", "filename": "gcc/testsuite/gcc.dg/dfp/Wbad-function-cast-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWbad-function-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWbad-function-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWbad-function-cast-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,44 @@\n+/* Test operation of -Wbad-function-cast.  */\n+/* Based on gcc.dg/Wbad-function-cast-1.c.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wbad-function-cast\" } */\n+\n+int if1(void);\n+char if2(void);\n+long if3(void);\n+float rf1(void);\n+double rf2(void);\n+_Decimal32 rf3(void);\n+_Decimal64 rf4(void);\n+_Decimal128 rf5(void);\n+_Complex double cf(void);\n+\n+void\n+foo(void)\n+{\n+  /* Casts to void types are always OK.  */\n+  (void)rf3();\n+  (void)rf4();\n+  (void)rf5();\n+  (const void)rf3();\n+  /* Casts to the same type or similar types are OK.  */\n+  (_Decimal32)rf1();\n+  (_Decimal64)rf2();\n+  (_Decimal128)rf3();\n+  (_Decimal128)rf4();\n+  (_Decimal128)rf5();\n+  (float)rf3();\n+  (double)rf4();\n+  (long double)rf5();\n+   /* Casts to types with different TREE_CODE (which is how this\n+     warning has been defined) are not OK, except for casts to void\n+     types.  */\n+  (_Decimal32)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Decimal32'\" } */\n+  (_Decimal64)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Decimal64'\" } */\n+  (_Decimal128)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Decimal128'\" } */\n+  (int)rf3(); /* { dg-warning \"cast from function call of type '_Decimal32' to non-matching type 'int'\" } */\n+  (long)rf4(); /* { dg-warning \"cast from function call of type '_Decimal64' to non-matching type 'long int'\" } */\n+  (long int)rf5(); /* { dg-warning \"cast from function call of type '_Decimal128' to non-matching type 'long int'\" } */\n+  (_Decimal32)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Decimal32'\" } */\n+}"}, {"sha": "afc0b4dab2b60992228258a3ffadb8fd406fd0c5", "filename": "gcc/testsuite/gcc.dg/dfp/Wconversion-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWconversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWconversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWconversion-2.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,44 @@\n+/* Test messages for -Wconversion (based on gcc.dg/Wconversion-2.c).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wconversion\" } */\n+\n+void fsi(signed int);\n+void fd32(_Decimal32);\n+void fd64(_Decimal64);\n+void fd128(_Decimal128);\n+\n+struct s {\n+  void (*fsi)(signed int);\n+  void (*fd32)(_Decimal32);\n+  void (*fd64)(_Decimal64);\n+  void (*fd128)(_Decimal128);\n+} x;\n+\n+signed int si;\n+unsigned int ui;\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+\n+void\n+g (void)\n+{\n+  fsi(d32); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(d32); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fsi(d64); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(d64); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fsi(d128); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(d128); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fd32(si); /* { dg-warning \"warning: passing argument 1 of 'fd32' as floating rather than integer due to prototype\" } */\n+  x.fd32(si); /* { dg-warning \"warning: passing argument 1 of 'x.fd32' as floating rather than integer due to prototype\" } */  \n+  fd64(ui); /* { dg-warning \"warning: passing argument 1 of 'fd64' as floating rather than integer due to prototype\" } */\n+  x.fd64(ui); /* { dg-warning \"warning: passing argument 1 of 'x.fd64' as floating rather than integer due to prototype\" } */\n+  fd128(si); /* { dg-warning \"warning: passing argument 1 of 'fd128' as floating rather than integer due to prototype\" } */\n+  x.fd128(ui); /* { dg-warning \"warning: passing argument 1 of 'x.fd128' as floating rather than integer due to prototype\" } */  \n+  fd32(1.0); /* { dg-warning \"warning: passing argument 1 of 'fd32' as '_Decimal32' rather than 'double' due to prototype\" } */\n+  x.fd32(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.fd32' as '_Decimal32' rather than 'double' due to prototype\" } */\n+  fd64(1.0); /* { dg-warning \"warning: passing argument 1 of 'fd64' as '_Decimal64' rather than 'double' due to prototype\" } */\n+  x.fd64(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.fd64' as '_Decimal64' rather than 'double' due to prototype\" } */\n+  fd128(1.0); /* { dg-warning \"warning: passing argument 1 of 'fd128' as '_Decimal128' rather than 'double' due to prototype\" } */\n+  x.fd128(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.fd128' as '_Decimal128' rather than 'double' due to prototype\" } */\n+}"}, {"sha": "16c8fb059ae573954e9299ac1c60f6a541bc4a87", "filename": "gcc/testsuite/gcc.dg/dfp/altivec-types.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Faltivec-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Faltivec-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Faltivec-types.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* GNU extension: PowerPC AltiVec Built-in Functions.\n+   These should be rejected as invalid AltiVec types.  */\n+\n+__vector _Decimal32 vd32;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Decimal64 vd64;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Decimal128 vd128;\t\t/* { dg-error \"AltiVec types\" \"\" } */"}, {"sha": "1fba25f1d1a231564edd6dc24cd1f9dbc0bf1c1e", "filename": "gcc/testsuite/gcc.dg/dfp/call-by-value.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcall-by-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcall-by-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcall-by-value.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.9.1(9) Function definitions; parameter has automatic storage.\n+\n+   Test that actual parameters are passed by value and that modifications\n+   made within functions are lost on function return.  */\n+\n+extern void abort (void);\n+\n+int foo32 (_Decimal32 z)\n+{\n+  z = z + 1.0df;\n+}\n+\n+int foo64 (_Decimal64 z)\n+{\n+  z = z + 1.0dd;\n+}\n+\n+int foo128 (_Decimal128 z)\n+{\n+  z = z + 1.0dl;\n+}\n+\n+int\n+main ()\n+{\n+  _Decimal32 d32 = 1.1df;\n+  _Decimal64 d64 = 1.2dd;\n+  _Decimal128 d128 = 1.3dl;\n+\n+  foo32 (d32);\n+  if (d32 != 1.1df)\n+    abort ();\n+\n+  foo64 (d64);\n+  if (d64 != 1.2dd)\n+    abort ();\n+\n+  foo128 (d128);\n+  if (d128 != 1.3dl)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "e99180824fe44e4d999f8dd267fa010095317e1a", "filename": "gcc/testsuite/gcc.dg/dfp/cast-bad.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.4 Cast operators.\n+   Test invalid casts involving decimal float.  */\n+\n+struct s { _Decimal32 d32; } sv;\n+union u { _Decimal32 d32; } uv;\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+\n+_Decimal32* d32p;\n+_Decimal64* d64p;\n+_Decimal128* d128p;\n+\n+void\n+f (void)\n+{\n+  (_Decimal32 []) d32p; /* { dg-error \"cast specifies array type\" } */\n+  (_Decimal32 ()) d32p; /* { dg-error \"cast specifies function type\" } */\n+  (_Decimal64 []) d64p; /* { dg-error \"cast specifies array type\" } */\n+  (_Decimal64 ()) d64p; /* { dg-error \"cast specifies function type\" } */\n+  (_Decimal128 []) d128p; /* { dg-error \"cast specifies array type\" } */\n+  (_Decimal128 ()) d128p; /* { dg-error \"cast specifies function type\" } */\n+  \n+  (struct s) d32; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (union u) d32;\n+  (struct s) d64; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (union u) d64; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (struct s) d128; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (union u) d128; /* { dg-error \"cast to union type from type not present in union\" } */\n+\t\t\n+  (_Decimal32) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Decimal32) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Decimal64) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Decimal64) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Decimal128) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Decimal128) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+}"}, {"sha": "7b2b6d8351962687a1c07b8a2cc721fb5ad6c027", "filename": "gcc/testsuite/gcc.dg/dfp/cast.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.4 Cast operators.\n+   Test valid casts involving decimal float.  */\n+\n+extern void abort (void);\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+\n+static float f = 2.f;\n+static double d = 2.l;\n+\n+int\n+main (void)\n+{\n+  /* Casts between DFP types.  */\n+  d32 = 1.2df;\n+  d64 = 1.2dd;\n+  d128 = 1.2dl;\n+\n+  if (d32 != (_Decimal32) d64)\n+    abort ();\n+  if (d32 != (_Decimal32) d128)\n+    abort ();\n+\n+  if (d64 != (_Decimal64) d32)\n+    abort ();\n+  if (d64 != (_Decimal64) d128)\n+    abort ();\n+\n+  if (d128 != (_Decimal128) d32)\n+    abort ();\n+  if (d128 != (_Decimal128) d64)\n+    abort ();\n+\n+  /* Casts between generic and decimal floating point types.  Use a\n+     value that we can assume can be represented exactly in all\n+     representations. */\n+  \n+  d32 = 2.0df;\n+  d64 = 2.0dd;\n+  d128 = 2.0dl;\n+\n+  /* To generic floating types.  */\n+  if ((float) d32 != 2.0f)\n+    abort ();\n+  if ((double) d32 != 2.0l)\n+    abort ();\n+  if ((float) d64 != 2.0f)\n+    abort ();\n+  if ((double) d64 != 2.0l)\n+    abort ();\n+  if ((float) d128 != 2.0f)\n+    abort ();\n+  if ((double) d128 != 2.0l)\n+    abort ();\n+\n+  /* float to decimal floating types.  */\n+  if (d32 != (_Decimal32) f)\n+    abort ();\n+  if (d64 != (_Decimal64) f)\n+    abort ();\n+  if (d128 != (_Decimal128) f)\n+    abort ();\n+\n+  /* double to decimal floating types.  */\n+  if (d32 != (_Decimal32) d)\n+    abort ();\n+  if (d64 != (_Decimal64) d)\n+    abort ();\n+  if (d128 != (_Decimal128) d)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "55cb566154589d4deeec8ce667fed49f0024a882", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-const.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-const.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.9 Equality operators.\n+   Compare decimal float constants against each other. */\n+\n+extern void link_error (void);\n+\n+int\n+main ()\n+{\n+  /* Compare like-typed positive constants. */\n+  if (2.0df != 2.0df)\n+    link_error ();\n+\n+  /* Compare decimal float constants of different types. */\n+  if (500e-2dl != 0.05e2df)\n+    link_error ();\n+\n+  /* Binary floating point introduces errors to decimal values. */\n+  if (1.4 + 1.4 + 1.4 == 4.2)\n+    link_error ();\n+\n+  /* But, this looks more like what one would expect. */\n+  if (1.4dd + 1.4dd + 1.4dd != 4.2dd)\n+    link_error ();\n+\n+  return 0;\n+}"}, {"sha": "0635aa6a6b27d331384a9b1e95624085407e94ac", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-d128.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d128.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.9 Equality operators.\n+   Compare decimal float values against each other at runtime.  */\n+\n+#define WIDTH 128\n+#include \"compare-eq.h\"\n+\n+int main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "d006fbe223da84166ca6d6c184fc7a484ca7638c", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-d32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d32.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.9 Equality operators.\n+   Compare decimal float values against each other at runtime.  */\n+\n+#define WIDTH 32\n+#include \"compare-eq.h\"\n+\n+int main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "4f2367a497f581806462cb78b7a31d3bb6a96cd6", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-d64.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d64.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.9 Equality operators.\n+   Compare decimal float values against each other at runtime.  */\n+\n+#define WIDTH 64\n+#include \"compare-eq.h\"\n+\n+int main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "b5c302eaa2fa00d17ce671aef0ff1a9d17bacac7", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-dfp.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-dfp.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.9 Equality operators.\n+   Compare decimal float values against variables of different types.  */\n+\n+extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+\n+/* Use some typedefs of decimal float types, too.  */\n+typedef _Decimal32 SDtype;\n+typedef _Decimal64 DDtype;\n+typedef _Decimal128 TDtype;\n+\n+SDtype d32b;\n+DDtype d64b;\n+TDtype d128b;\n+\n+void\n+inits (void)\n+{\n+  d32 = 1.0df;\n+  d64 = 3.0dd;\n+  d128 = 5.0dl;\n+  d32b = -1.0df;\n+  d64b = -4.0dd;\n+  d128b = -6.0dl;\n+}\n+\n+void\n+compare_dfp (void)\n+{\n+  if ((d32 == d64) != 0) FAILURE\n+  if ((d32 != d128b) != 1) FAILURE\n+\n+  if ((d64 != d32) != 1) FAILURE\n+  if ((d64 == d128) != 0) FAILURE\n+\n+  if ((d128 != d32) != 1) FAILURE\n+  if ((d128 == d64) != 0) FAILURE\n+}\n+\n+int\n+main ()\n+{\n+  inits ();\n+\n+  compare_dfp ();\n+\n+  if (failcnt)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "809d642593c5ac422821d335dc72006029e1dca2", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq.h", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq.h?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,96 @@\n+/* Basic test of runtime equality comparisons using simple values that\n+   are not affected by rounding.  */\n+\n+#include <stdlib.h>\n+\n+static int failcnt;\n+\n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE(OP,KIND) \\\n+  { printf (\"failed at line %d: %s for %s values\\n\", __LINE__, OP, KIND); \\\n+    failcnt++; }\n+#else\n+#define FAILURE(OP,KIND) abort ();\n+#endif\n+\n+#ifndef WIDTH\n+#error define WIDTH as decimal float size in bytes\n+#endif\n+\n+#if WIDTH == 32\n+#define DTYPE _Decimal32\n+#define SUFFIX DF\n+#elif WIDTH == 64\n+#define DTYPE _Decimal64\n+#define SUFFIX DD\n+#elif WIDTH == 128\n+#define DTYPE _Decimal128\n+#define SUFFIX DL\n+#elif WIDTH == 0\n+/* This is for testing the test using a type known to work.  */\n+#define DTYPE double\n+#define SUFFIX\n+#else\n+#error invalid width for decimal float type\n+#endif\n+\n+DTYPE m_two = PASTE(-2.0, SUFFIX);\n+DTYPE m_one = PASTE(-1.0, SUFFIX);\n+DTYPE zero  = PASTE(0.0, SUFFIX);\n+DTYPE one   = PASTE(1.0, SUFFIX);\n+DTYPE two   = PASTE(2.0, SUFFIX);\n+\n+void\n+test_compares (void)\n+{\n+  DTYPE x = one;\n+  DTYPE y = zero;\n+  DTYPE z = m_one;\n+\n+  /* Equal to: comparisons against equal values.  */\n+\n+  if (! (x == one))   FAILURE (\"==\", \"equal\")\n+  if (! (y == zero))  FAILURE (\"==\", \"equal\")\n+  if (! (z == m_one)) FAILURE (\"==\", \"equal\")\n+\n+  /* Equal to: comparisons against lesser values.  */\n+\n+  if (x == m_one)     FAILURE (\"==\", \"lesser\")\n+  if (x == zero)      FAILURE (\"==\", \"lesser\")\n+  if (y == m_one)     FAILURE (\"==\", \"lesser\")\n+  if (z == m_two)     FAILURE (\"==\", \"lesser\")\n+\n+  /* Equal to: comparisons against greater values.  */\n+\n+  if (x == two)       FAILURE (\"==\", \"greater\")\n+  if (y == one)       FAILURE (\"==\", \"greater\")\n+  if (z == zero)      FAILURE (\"==\", \"greater\")\n+  if (z == one)       FAILURE (\"==\", \"greater\")\n+\n+  /* Not equal to: comparisons against equal values.  */\n+\n+  if (x != one)        FAILURE (\"!=\", \"equal\")\n+  if (y != zero)       FAILURE (\"!=\", \"equal\")\n+  if (z != m_one)      FAILURE (\"!=\", \"equal\")\n+\n+  /* Not equal to: comparisons against lesser values.  */\n+\n+  if (! (x != m_one))  FAILURE (\"!=\", \"lesser\")\n+  if (! (x != zero))   FAILURE (\"!=\", \"lesser\")\n+  if (! (y != m_one))  FAILURE (\"!=\", \"lesser\")\n+  if (! (z != m_two))  FAILURE (\"!=\", \"lesser\")\n+\n+  /* Not equal to: comparisons against greater values.  */\n+\n+  if (! (x != m_one)) FAILURE (\"!=\", \"greater\")\n+  if (! (x != zero))  FAILURE (\"!=\", \"greater\")\n+  if (! (y != m_one)) FAILURE (\"!=\", \"greater\")\n+  if (! (z != m_two)) FAILURE (\"!=\", \"greater\")\n+\n+  if (failcnt)\n+    abort ();\n+}"}, {"sha": "50fc9d81bd31f64165c9d62c9ddcc60f493d707a", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-const.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-const.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   Compare decimal float constants against each other. */\n+\n+extern void link_error (void);\n+\n+int\n+main ()\n+{\n+  /* Compare like-typed negative constants. */\n+  if (-2.0dl < -2.0dl)\n+    link_error ();\n+\n+  /* Compare like-typed constants. */\n+  if (-2.0dl >= .01dl)\n+    link_error ();\n+\n+  /* Compare like-typed constants. */\n+  if (0.2dd > 0.02e1dd)\n+    link_error ();\n+  \n+  /* Compare decimal float constants of different types. */\n+  if (-.000005dd >= -.0000049DL)\n+  link_error();\n+\n+  /* Test use gcc builtins for comparisons. */\n+  if (__builtin_isless(-2.0dl,-2.0dl))\n+    link_error();\n+\n+  if (__builtin_isgreaterequal(-2.0dl,.01dl))\n+    link_error();\n+\n+  if (!(__builtin_islessequal(-2.0dl, -2.0dd)))\n+    link_error();\n+\n+  if (!(__builtin_isgreater(2.0dl, -2.0dd)))\n+    link_error();\n+\n+  if (__builtin_islessequal(2.0df, __builtin_nand64(\"\")))\n+    link_error();\n+\n+  if (__builtin_islessgreater(2.0dd, __builtin_nand64(\"\")))\n+    link_error();\n+\n+  if (!__builtin_islessgreater(2.0dd, -2.0dd))\n+    link_error();\n+\n+  if (!__builtin_islessgreater(-3.0dd, 2.0dd))\n+    link_error();\n+\n+  if (__builtin_isunordered(1.1df, 0.003dd))\n+    link_error();\n+\n+  if (!__builtin_isunordered(-3.1df, __builtin_nand32(\"\")))\n+    link_error();\n+\n+  return 0;\n+}"}, {"sha": "db58f5b20edf1b0733bf167a1b11c755e7dbae41", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-d128.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d128.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   Compare decimal float values against each other at runtime.  */\n+\n+#define WIDTH 128\n+#include \"compare-rel.h\"\n+\n+int\n+main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "128e26494c7776269925dd94bd52558fcf2b5b8d", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-d32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d32.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   Compare decimal float values against each other at runtime.  */\n+\n+#define WIDTH 32\n+#include \"compare-rel.h\"\n+\n+int\n+main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "e1b9f95ca5501855c91b3faae265b28841ef2a19", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-d64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d64.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   Compare decimal float values against each other at runtime.  */\n+\n+#define WIDTH 64\n+#include \"compare-rel.h\"\n+\n+int\n+main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "f4fd6be87b7de4f59977b1270d6d59c7d309b5ce", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-dfp.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-dfp.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   Compare decimal float values against variables of different types.  */\n+\n+extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+\n+/* Use some typedefs of decimal float types, too.  */\n+typedef _Decimal32 SDtype;\n+typedef _Decimal64 DDtype;\n+typedef _Decimal128 TDtype;\n+\n+SDtype d32b;\n+DDtype d64b;\n+TDtype d128b;\n+\n+void\n+inits (void)\n+{\n+  d32 = 1.0df;\n+  d64 = 3.0dd;\n+  d128 = 5.0dl;\n+  d32b = -1.0df;\n+  d64b = -4.0dd;\n+  d128b = -6.0dl;\n+}\n+\n+void\n+compare_dfp (void)\n+{\n+  if ((d32 > d64) != 0) FAILURE\n+  if ((d32 >= d128b) != 1) FAILURE\n+\n+  if ((d64 < d32) != 0) FAILURE\n+  if ((d64 <= d128) != 1) FAILURE\n+\n+  if ((d128 > d32) != 1) FAILURE\n+  if ((d128 >= d64) != 1) FAILURE\n+}\n+\n+int\n+main ()\n+{\n+  inits ();\n+\n+  compare_dfp ();\n+\n+  if (failcnt)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "06b2559bdb59cb6c66215dfebeb6d54165c09672", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel.h", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel.h?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,136 @@\n+/* Basic test of runtime relational comparisons using simple values that\n+   are not affected by rounding.  */\n+\n+#include <stdlib.h>\n+\n+static int failcnt;\n+\n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE(OP,KIND) \\\n+  { printf (\"failed at line %d: %s for %s values\\n\", __LINE__, OP, KIND); \\\n+    failcnt++; }\n+#else\n+#define FAILURE(OP,KIND) abort ();\n+#endif\n+\n+#ifndef WIDTH\n+#error define WIDTH as decimal float size in bytes\n+#endif\n+\n+#if WIDTH == 32\n+#define DTYPE _Decimal32\n+#define SUFFIX DF\n+#elif WIDTH == 64\n+#define DTYPE _Decimal64\n+#define SUFFIX DD\n+#elif WIDTH == 128\n+#define DTYPE _Decimal128\n+#define SUFFIX DL\n+#elif WIDTH == 0\n+/* This is for testing the test using a type known to work.  */\n+#define DTYPE double\n+#define SUFFIX\n+#else\n+#error invalid width for decimal float type\n+#endif\n+\n+DTYPE m_two = PASTE(-2.0, SUFFIX);\n+DTYPE m_one = PASTE(-1.0, SUFFIX);\n+DTYPE zero  = PASTE(0.0, SUFFIX);\n+DTYPE one   = PASTE(1.0, SUFFIX);\n+DTYPE two   = PASTE(2.0, SUFFIX);\n+\n+void\n+test_compares (void)\n+{\n+  DTYPE x = one;\n+  DTYPE y = zero;\n+  DTYPE z = m_one;\n+\n+  /* Less than or equal to: comparisons against equal values.  */\n+\n+  if (! (x <= one))   FAILURE (\"<=\", \"equal\")\n+  if (! (y <= zero))  FAILURE (\"<=\", \"equal\")\n+  if (! (z <= m_one)) FAILURE (\"<=\", \"equal\")\n+\n+  /* Less than or equal to: comparisons against lesser values.  */\n+\n+  if (x <= m_one)     FAILURE (\"<=\", \"lesser\")\n+  if (x <= zero)      FAILURE (\"<=\", \"lesser\")\n+  if (y <= m_one)     FAILURE (\"<=\", \"lesser\")\n+  if (z <= m_two)     FAILURE (\"<=\", \"lesser\")\n+\n+  /* Less than or equal to: comparisons against greater values.  */\n+\n+  if (! (x <= two))   FAILURE (\"<=\", \"greater\")\n+  if (! (y <= one))   FAILURE (\"<=\", \"greater\")\n+  if (! (z <= zero))  FAILURE (\"<=\", \"greater\")\n+  if (! (z <= one))   FAILURE (\"<=\", \"greater\")\n+\n+  /* Less than: comparisons against equal values.  */\n+\n+  if (x < one)        FAILURE (\"<\", \"equal\")\n+  if (y < zero)       FAILURE (\"<\", \"equal\")\n+  if (z < m_one)      FAILURE (\"<\", \"equal\")\n+\n+  /* Less than: comparisons against lesser values.  */\n+\n+  if (x < m_one)      FAILURE (\"<\", \"lesser\")\n+  if (x < zero)       FAILURE (\"<\", \"lesser\")\n+  if (y < m_one)      FAILURE (\"<\", \"lesser\")\n+  if (z < m_two)      FAILURE (\"<\", \"lesser\")\n+\n+  /* Less than: comparisons against greater values.  */\n+\n+  if (! (x < two))    FAILURE (\"<\", \"greater\")\n+  if (! (y < one))    FAILURE (\"<\", \"greater\")\n+  if (! (z < zero))   FAILURE (\"<\", \"greater\")\n+  if (! (z < one))    FAILURE (\"<\", \"greater\")\n+\n+  /* Greater than or equal to: comparisons against equal values.  */\n+\n+  if (! (x >= one))   FAILURE (\">=\", \"equal\")\n+  if (! (y >= zero))  FAILURE (\">=\", \"equal\")\n+  if (! (z >= m_one)) FAILURE (\">=\", \"equal\")\n+\n+  /* Greater than or equal to: comparisons against lesser values.  */\n+\n+  if (! (x >= m_one)) FAILURE (\">=\", \"lesser\")\n+  if (! (x >= zero))  FAILURE (\">=\", \"lesser\")\n+  if (! (y >= m_one)) FAILURE (\">=\", \"lesser\")\n+  if (! (z >= m_two)) FAILURE (\">=\", \"lesser\")\n+\n+  /* Greater than or equal to: comparisons against greater values.  */\n+\n+  if (x >= two)       FAILURE (\">=\", \"greater\")\n+  if (y >= one)       FAILURE (\">=\", \"greater\")\n+  if (z >= zero)      FAILURE (\">=\", \"greater\")\n+  if (z >= one)       FAILURE (\">=\", \"greater\")\n+\n+  /* Greater than: comparisons against equal values.  */\n+\n+  if (x > one)        FAILURE (\">\", \"equal\")\n+  if (y > zero)       FAILURE (\">\", \"equal\")\n+  if (z > m_one)      FAILURE (\">\", \"equal\")\n+\n+  /* Greater than: comparisons against lesser values.  */\n+\n+  if (! (x > m_one))  FAILURE (\">\", \"lesser\")\n+  if (! (x > zero))   FAILURE (\">\", \"lesser\")\n+  if (! (y > m_one))  FAILURE (\">\", \"lesser\")\n+  if (! (z > m_two))  FAILURE (\">\", \"lesser\")\n+\n+  /* Greater than: comparisons against greater values.  */\n+\n+  if (x > two)        FAILURE (\">\", \"greater\")\n+  if (y > one)        FAILURE (\">\", \"greater\")\n+  if (z > zero)       FAILURE (\">\", \"greater\")\n+  if (z > one)        FAILURE (\">\", \"greater\")\n+\n+  if (failcnt)\n+    abort ();\n+}"}, {"sha": "56991add7f32a2f27b50af8ea52a0623b1568400", "filename": "gcc/testsuite/gcc.dg/dfp/composite-type.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O -Wall\" } */\n+\n+/* C99 6.2.7: Compatible type and composite type.  */\n+\n+#define DECIMAL_COMPOSITE_DECL(TYPE) \\\n+  _Decimal##TYPE g1_##TYPE(); \\\n+  _Decimal##TYPE g2_##TYPE(); \\\n+  _Decimal##TYPE (*h1_##TYPE)[2]; \\\n+  _Decimal##TYPE (*h2_##TYPE)[3]; \\\n+  _Decimal##TYPE (*h3_##TYPE)[4]; \\\n+  _Decimal##TYPE f1_##TYPE(_Decimal##TYPE(*)()); \\\n+  _Decimal##TYPE f1_##TYPE(_Decimal##TYPE(*)(_Decimal##TYPE*)); \\\n+  _Decimal##TYPE f1_##TYPE (_Decimal##TYPE(*g)(_Decimal##TYPE*)) \\\n+   { \\\n+     _Decimal##TYPE d##TYPE; \\\n+     d##TYPE = ((_Decimal##TYPE (*) (_Decimal##TYPE*)) g)(&d##TYPE); \\\n+     d##TYPE = ((_Decimal##TYPE (*) ()) g); \\\n+     return d##TYPE; \\\n+   } \\\n+   _Decimal##TYPE f2_##TYPE(_Decimal##TYPE(*)[]); \\\n+   _Decimal##TYPE f2_##TYPE(_Decimal##TYPE(*)[3]);\n+\n+#define DECIMAL_COMPOSITE_TEST(TYPE) \\\n+do \\\n+{ \\\n+ _Decimal##TYPE d##TYPE; \\\n+ d##TYPE = f1_##TYPE(g1_##TYPE); \\\n+ d##TYPE = f1_##TYPE(g2_##TYPE); \\\n+ d##TYPE = f2_##TYPE(h1_##TYPE); \\\n+ d##TYPE = f2_##TYPE(h2_##TYPE); \\\n+ d##TYPE = f2_##TYPE(h3_##TYPE); \\\n+} while(0)\n+ \n+DECIMAL_COMPOSITE_DECL(32);  /* { dg-error \"incompatible types in assignment\" } */\n+DECIMAL_COMPOSITE_DECL(64);  /* { dg-error \"incompatible types in assignment\" } */\n+DECIMAL_COMPOSITE_DECL(128); /* { dg-error \"incompatible types in assignment\" } */\n+\n+int main()\n+{\n+  DECIMAL_COMPOSITE_TEST(32);  /* { dg-warning \"incompatible pointer type\" } */\n+  DECIMAL_COMPOSITE_TEST(64);  /* { dg-warning \"incompatible pointer type\" } */\n+  DECIMAL_COMPOSITE_TEST(128); /* { dg-warning \"incompatible pointer type\" } */\n+\n+  return 0;\n+}"}, {"sha": "febf6f2d6362eb7932c6eeccc5e4655e29eb27e8", "filename": "gcc/testsuite/gcc.dg/dfp/constants-c99.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-c99.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* N1150 6: Constants.\n+   C99 6.4.4.2: Floating constants.  */\n+\n+_Decimal32 a = 1.1df;\t\t\t/* { dg-error \"error\" } */\n+_Decimal32 b = -.003DF;\t\t\t/* { dg-error \"error\" } */\n+_Decimal64 c = 11e-1dl;\t\t\t/* { dg-error \"error\" } */\n+_Decimal64 d = -.3DL;\t\t\t/* { dg-error \"error\" } */\n+_Decimal128 e = 000.3e0dl;\t\t/* { dg-error \"error\" } */\n+_Decimal128 f = 3000300030003e0DL;\t/* { dg-error \"error\" } */"}, {"sha": "936f0ed848140971f77efc831a2f25899bb41291", "filename": "gcc/testsuite/gcc.dg/dfp/constants-hex.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-hex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-hex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-hex.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 6: Constants.\n+   C99 6.4.4.2: Floating constants.\n+\n+   The df, dd, dl, DF, DD and DL suffixes shall not be used in a\n+   hexadecimal-floating-constant.  */\n+\n+_Decimal32 bad1 = 0x1.0p1df;   /* { dg-error \"invalid suffix\" \"hexadecimal floating constant\" } */\n+_Decimal32 bad2 = 0x1.0p1DF;   /* { dg-error \"invalid suffix\" \"hexadecimal floating constant\" } */\n+_Decimal64 bad3 = 0x2.0p-2dd;  /* { dg-error \"invalid suffix\" \"hexadecimal floating constant\" } */\n+_Decimal64 bad4 = 0x2.0p2DD;   /* { dg-error \"invalid suffix\" \"hexadecimal floating constant\" } */\n+_Decimal128 bad5 = 0x3.0p3dl;  /* { dg-error \"invalid suffix\" \"hexadecimal floating constant\" } */\n+_Decimal128 bad6 = 0x3.0p3DL;  /* { dg-error \"invalid suffix\" \"hexadecimal floating constant\" } */"}, {"sha": "540b768403545b276895e58b15b70f7661e5f192", "filename": "gcc/testsuite/gcc.dg/dfp/constants-pedantic.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+/* N1150 6: Constants.\n+   C99 6.4.4.2: Floating constants.  */\n+\n+_Decimal32 a = 1.1df;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal32 b = -.003DF;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal64 c = 11e-1dl;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal64 d = -.3DL;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal128 e = 000.3e0dl;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal128 f = 3000300030003e0DL;  /* { dg-warning \"GCC extension|ISO C\" } */"}, {"sha": "50045ed9cec46f37d96ce0937aaec0b89ba90945", "filename": "gcc/testsuite/gcc.dg/dfp/constants.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 6: Constants.\n+   C99 6.4.4.2: Floating constants.  */\n+\n+_Decimal32 a = 1.1df;\n+_Decimal32 b = -.003DF;\n+_Decimal64 c = 11e-1dl;\n+_Decimal64 d = -.3DL;\n+_Decimal128 e = 000.3e0dl;\n+_Decimal128 f = 3000300030003e0DL;"}, {"sha": "bb865075a942b09f2f40e551ce03726d010f56bb", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-fold.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-fold.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O\" } */\n+\n+/* N1150 5.2 Conversions among decimal floating types and between\n+   decimal floating types and generic floating types.\n+   C99 6.3.1.5(4) Conversions, arithmetic operands, real floating types.  */\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+float sf;\n+double df;\n+long double tf;\n+\n+extern void link_error (void);\n+\n+int\n+main ()\n+{\n+  /* Conversions from decimal float to binary float. */\n+\n+  /* Conversions from _Decimal32. */\n+  d32 = 2.0df;\n+  sf = d32;\n+  if (sf != 2.0f)\n+    link_error ();\n+\n+  df = d32;\n+  if (df != 2.0)\n+    link_error ();\n+\n+  tf = d32;\n+  if (tf != 2.0l)\n+    link_error ();\n+\n+  /* Conversions from _Decimal64. */\n+  d64 = -7.0dd;\n+  sf = d64;\n+  if (sf != -7.0f)\n+    link_error ();\n+  \n+  df = d64;\n+  if (df != -7.0)\n+    link_error ();\n+\n+  tf = d64;\n+  if (tf != -7.0l)\n+    link_error ();\n+\n+  /* Conversions from _Decimal128. */\n+  d128 = 30.0dl;\n+  sf = d128;\n+  if (sf != 30.0f)\n+    link_error ();\n+\n+  df = d128;\n+  if (df != 30.0)\n+    link_error ();\n+\n+  df = d128;\n+  if (df != 30.0l)\n+    link_error ();\n+\n+  /* Conversions from binary float to decimal float. */\n+  sf = 30.0f;\n+  d32 = sf;\n+  if (d32 != 30.0df)\n+    link_error ();\n+\n+  d64 = sf;\n+  if (d64 != 30.0dd)\n+    link_error ();\n+\n+  df = -2.0;\n+  d32 = df;\n+  if (d32 != -2.0df)\n+    link_error ();\n+\n+  d64 = df;\n+  if (d64 != -2.0dd)\n+    link_error ();\n+\n+  d128 = df;\n+  if (d128 != -2.0dl)\n+    link_error ();\n+  \n+  sf = 30.0f;\n+  d128 = sf;\n+  if (d128 != 30.0dl)\n+    link_error ();\n+\n+  tf = -22.0l;\n+  d32 = tf;\n+  if (d32 != -22.0df)\n+    link_error ();\n+\n+  d64 = tf;\n+  if (d64 != -22.0dd)\n+    link_error ();\n+\n+  d128 = tf;\n+  if (d128 != -22.0dl)\n+    link_error ();\n+\n+  /* 2**(-11) = 0.00048828125. */\n+  d128 = 0.000488281251dl;\n+  sf = d128;\n+  if (sf != 0.00048828125f)\n+    link_error ();\n+  /* 2**(-25) = 0.298023223876953125E-7.  */\n+  d128 = 2.98023223876953125E-8dl;\n+  df = d128;\n+  if (df < (2.9802322387695312e-08 - 0.00000000001)\n+      || df > (2.9802322387695312e-08 + 0.00000000001))\n+    link_error ();\n+\n+  return 0;\n+}"}, {"sha": "53efdd12b50ff32d94e4e7f7225e661ca9f35873", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 5.2 Conversions among decimal floating types and between\n+   decimal floating types and generic floating types.\n+   C99 6.3.1.5(4) Conversions, arithmetic operands, real floating types.  */\n+\n+volatile _Decimal32 d32;\n+volatile _Decimal64 d64;\n+volatile _Decimal128 d128;\n+volatile float sf;\n+volatile double df;\n+volatile long double tf;\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  /* Conversions from decimal float to binary float. */\n+\n+  /* Conversions from _Decimal32. */\n+  d32 = 2.0df;\n+  sf = d32;\n+  if (sf != 2.0f)\n+    abort ();\n+\n+  df = d32;\n+  if (df != 2.0)\n+    abort ();\n+\n+  tf = d32;\n+  if (tf != 2.0l)\n+    abort ();\n+\n+  /* Conversions from _Decimal64. */\n+  d64 = -7.0dd;\n+  sf = d64;\n+  if (sf != -7.0f)\n+    abort ();\n+  \n+  df = d64;\n+  if (df != -7.0)\n+    abort ();\n+\n+  tf = d64;\n+  if (tf != -7.0l)\n+    abort ();\n+\n+  /* Conversions from _Decimal128. */\n+  d128 = 30.0dl;\n+  sf = d128;\n+  if (sf != 30.0f)\n+    abort ();\n+\n+  df = d128;\n+  if (df != 30.0)\n+    abort ();\n+\n+  df = d128;\n+  if (df != 30.0l)\n+    abort ();\n+\n+  /* Conversions from binary float to decimal float. */\n+  sf = 30.0f;\n+  d32 = sf;\n+  if (d32 != 30.0df)\n+    abort ();\n+\n+  d64 = sf;\n+  if (d64 != 30.0dd)\n+    abort ();\n+\n+  df = -2.0;\n+  d32 = df;\n+  if (d32 != -2.0df)\n+    abort ();\n+\n+  d64 = df;\n+  if (d64 != -2.0dd)\n+    abort ();\n+\n+  d128 = df;\n+  if (d128 != -2.0dl)\n+    abort ();\n+  \n+  sf = 30.0f;\n+  d128 = sf;\n+  if (d128 != 30.0dl)\n+    abort ();\n+\n+  tf = -22.0l;\n+  d32 = tf;\n+  if (d32 != -22.0df)\n+    abort ();\n+\n+  d64 = tf;\n+  if (d64 != -22.0dd)\n+    abort ();\n+\n+  d128 = tf;\n+  if (d128 != -22.0dl)\n+    abort ();\n+\n+  /* 2**(-11) = 0.00048828125. */\n+  d128 = 0.000488281251dl;\n+  sf = d128;\n+  if (sf != 0.00048828125f)\n+    abort ();\n+  /* 2**(-25) = 0.298023223876953125E-7.  */\n+  d128 = 2.98023223876953125E-8dl;\n+  df = d128;\n+  if (df < (2.9802322387695312e-08 - 0.00000000001)\n+      || df > (2.9802322387695312e-08 + 0.00000000001))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "5600dd4c742d4078ffa6bba7f32e8bcf86108286", "filename": "gcc/testsuite/gcc.dg/dfp/convert-complex.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+/* N1150 5.3 Conversions between decimal floating and complex.\n+   C99 6.3.1.7 Conversions, arithmetic operands, real and complex.  */\n+\n+extern void abort(void);\n+static int failcnt;\n+                                                                                \n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+int\n+main ()\n+{\n+  _Complex float cf;\n+  _Complex double cd;\n+  _Complex long double cld;\n+\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+\n+  cf = 2.0f *  __extension__ 1i + 3.0f;\n+  cd = 2.0 * __extension__ 1i + 3.0;\n+  cld = 2.0l * __extension__ 1i + 3.0l;\n+\n+  /* Convert complex to decimal floating.  */\n+  d32 = cf;\n+  d64 = cd;\n+  d128 = cld;\n+\n+  if (d32 != 3.0DF)\n+    FAILURE\n+  if (d64 != 3.0dd)\n+    FAILURE\n+  if (d128 != 3.0dl)\n+    FAILURE\n+\n+  /* Convert decimal floating to complex.  */\n+  d32 = 2.5DF;\n+  d64 = 1.5DD;\n+  d128 = 2.5DL;\n+\n+  cf = d32;\n+  cd = d64;\n+  cld = d128;\n+ \n+  /* N1107 5.3 Conversions between decimal floating and complex. \n+     When a value of decimal floating type converted to a complex\n+     type, the real part of the complex result value is undermined\n+     by the rules of conversions in N1107 5.2 and the imaginary part\n+     of the complex result value is zero.  */\n+\n+  if (__real__ cf != 2.5f)\n+    FAILURE\n+  if (__real__ cd !=1.5)\n+    FAILURE\n+  if (__real__ cld !=  2.5)\n+    FAILURE\n+  if (__imag__ cf != 0.0f)\n+    FAILURE\n+  if (__imag__ cd != 0.0)\n+    FAILURE\n+  if (__imag__ cld != 0.0l)\n+    FAILURE\n+\n+  /*  Verify that the conversions from DFP types to complex is\n+      determined by the rules of conversion to the real part.  */\n+\n+  /*  Convert _Decimal64 to _Complex float.  */\n+  d64 = 0.125dl;\n+  cf = d64;\n+  if (__real__ cf != 0.125f)\n+    FAILURE\n+  /*  Convert _Decimal128 to _Complex double.  */\n+  d128 = 1.25E-7dl;\n+  cd = d128;\n+  if (__real__ cd != 1.25E-7)\n+    FAILURE\n+\n+  /*  Verify that conversion from complex to decimal floating types\n+      results in the value of the real part converted to the result\n+      type according to the rules of conversion between those types.  */\n+\n+  /*  Convert _Complex float to decimal float types.  */\n+  cf = 2.0f *  __extension__ 1i + 2.25f;\n+  d32 = cf;\n+  d64 = cf;\n+  d128 = cf;\n+  if (d32 != 2.25DF)\n+    FAILURE\n+  if (d64 != 2.25DD)\n+    FAILURE\n+  if (d128 != 2.25DL)\n+    FAILURE\n+\n+  /*  Convert _Complex double to decimal float types.  */\n+  cd = 2.0 *  __extension__ 1i + 1.25;\n+  d32 = cd;\n+  d64 = cd;\n+  d128 = cd;\n+  if (d32 != 1.25DF)\n+    FAILURE\n+  if (d64 != 1.25DD)\n+    FAILURE\n+  if (d128 != 1.25DL)\n+    FAILURE\n+\n+  /*  Convert _Complex long double to decimal float types.  */\n+  cld = 2.0l *  __extension__ 1i + 0.0625l;\n+  d32 = cld;\n+  d64 = cld;\n+  d128 = cld;\n+  if (d32 != 0.0625DF)\n+    FAILURE\n+  if (d64 != 0.0625DD)\n+    FAILURE\n+  if (d128 != 0.0625DL)\n+    FAILURE\n+\n+  return 0;\n+}"}, {"sha": "e87bfc6273955476d9bf749718dbab64cfc346d0", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp-fold.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O\" } */\n+\n+/* N1150 5.2 Conversions among decimal floating types and between\n+   decimal floating types and generic floating types.\n+   C99 6.3.1.5(3) New.  */\n+\n+extern void link_error ();\n+\n+int\n+main ()\n+{\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+\n+  /* Conversions to larger types.  */\n+  d32 = 123.4df;\n+  d64 = d32;\n+  if (d64 != 123.4dd)\n+    link_error ();\n+  d128 = d32;\n+  if (d128 != 123.4dl)\n+    link_error ();\n+  d64 = 345.678dd;\n+  d128 = d64;\n+  if (d128 != 345.678dl)\n+    link_error ();\n+\n+  /* Conversions to smaller types for which the value fits.  */\n+  d64 = 3456.789dd;\n+  d32 = d64;\n+  if (d32 != 3456.789df)\n+    link_error ();\n+  d128 = 123.4567dl;\n+  d32 = d128;\n+  if (d32 != 123.4567dl)\n+    link_error ();\n+\n+  d128 = 1234567890.123456dl;\n+  d64 = d128;\n+  if (d64 != 1234567890.123456dd)\n+    link_error ();\n+\n+  return 0;\n+}"}, {"sha": "50f616a18017f7b783735d6eecccbbdfd41cb831", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp-round.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-round.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-round.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-round.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,137 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -std=gnu99\" } */\n+\n+/* N1150 5.2: Conversions among decimal floating types and between\n+   decimal floating types and generic floating types.\n+   C99 6.3.1.5(3) New.\n+\n+   Perform conversions between DFP types in which the assigned value\n+   cannot be represented exactly in the result and must be rounded\n+   correctly according to the current rounding mode.\n+\n+   Normally this would not be part of compiler testing, but conversions\n+   are currently handled in libgcc via decNumber.  */\n+\n+#include \"dfp-round.h\"\n+\n+extern void abort (void);\n+static int failcnt = 0;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+\n+_Decimal32 d64_to_d32 (_Decimal64 d) { return d; }\n+_Decimal64 d128_to_d64 (_Decimal128 d) { return d; }\n+_Decimal32 d128_to_d32 (_Decimal128 d) { return d; }\n+\n+int\n+do_d64_to_d32 (_Decimal64 orig, _Decimal32 exp)\n+{\n+  d64 = orig;\n+  d32 = d64_to_d32 (d64);\n+  return (d32 == exp);\n+}\n+\n+int\n+do_d128_to_d32 (_Decimal128 orig, _Decimal32 exp)\n+{\n+  d128 = orig;\n+  d32 = d128_to_d32 (d128);\n+  return (d32 == exp);\n+}\n+\n+int\n+do_d128_to_d64 (_Decimal128 orig, _Decimal64 exp)\n+{\n+  d128 = orig;\n+  d64 = d128_to_d64 (d128);\n+  return (d64 == exp);\n+}\n+\n+int\n+main ()\n+{\n+  DFP_SETROUND (FE_DEC_DOWNWARD);\n+  if (!do_d64_to_d32 (1.1111125dd, 1.111112df)) FAILURE\n+  if (!do_d64_to_d32 (1.1111135dd, 1.111113df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111125dd, -1.111113df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111135dd, -1.111114df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111125dl, 1.111112df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111135dl, 1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111125dl, -1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111135dl, -1.111114df)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111125dl, 1.111111111111112dd)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111135dl, 1.111111111111113dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111125dl, -1.111111111111113dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111135dl, -1.111111111111114dd)) FAILURE\n+\n+  DFP_SETROUND (FE_DEC_TONEAREST);\n+  if (!do_d64_to_d32 (1.1111125dd, 1.111112df)) FAILURE\n+  if (!do_d64_to_d32 (1.1111135dd, 1.111114df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111125dd, -1.111112df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111135dd, -1.111114df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111125dl, 1.111112df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111135dl, 1.111114df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111125dl, -1.111112df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111135dl, -1.111114df)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111125dl, 1.111111111111112dd)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111135dl, 1.111111111111114dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111125dl, -1.111111111111112dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111135dl, -1.111111111111114dd)) FAILURE\n+  \n+  DFP_SETROUND (FE_DEC_TONEARESTFROMZERO);\n+  if (!do_d64_to_d32 (1.1111125dd, 1.111113df)) FAILURE\n+  if (!do_d64_to_d32 (1.1111135dd, 1.111114df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111125dd, -1.111113df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111135dd, -1.111114df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111125dl, 1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111135dl, 1.111114df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111125dl, -1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111135dl, -1.111114df)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111125dl, 1.111111111111113dd)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111135dl, 1.111111111111114dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111125dl, -1.111111111111113dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111135dl, -1.111111111111114dd)) FAILURE\n+  \n+  DFP_SETROUND (FE_DEC_TOWARDZERO);\n+  if (!do_d64_to_d32 (1.1111125dd, 1.111112df)) FAILURE\n+  if (!do_d64_to_d32 (1.1111135dd, 1.111113df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111125dd, -1.111112df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111135dd, -1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111125dl, 1.111112df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111135dl, 1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111125dl, -1.111112df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111135dl, -1.111113df)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111125dl, 1.111111111111112dd)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111135dl, 1.111111111111113dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111125dl, -1.111111111111112dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111135dl, -1.111111111111113dd)) FAILURE\n+\n+  DFP_SETROUND (FE_DEC_UPWARD);\n+  if (!do_d64_to_d32 (1.1111125dd, 1.111113df)) FAILURE\n+  if (!do_d64_to_d32 (1.1111135dd, 1.111114df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111125dd, -1.111112df)) FAILURE\n+  if (!do_d64_to_d32 (-1.1111135dd, -1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111125dl, 1.111113df)) FAILURE\n+  if (!do_d128_to_d32 (1.1111135dl, 1.111114df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111125dl, -1.111112df)) FAILURE\n+  if (!do_d128_to_d32 (-1.1111135dl, -1.111113df)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111125dl, 1.111111111111113dd)) FAILURE\n+  if (!do_d128_to_d64 (1.1111111111111135dl, 1.111111111111114dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111125dl, -1.111111111111112dd)) FAILURE\n+  if (!do_d128_to_d64 (-1.1111111111111135dl, -1.111111111111113dd)) FAILURE\n+  \n+  if (failcnt)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5fbbaade258073cdad4708a204956812f225778b", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* N1150 5.2 Conversions among decimal floating types and between\n+   decimal floating types and generic floating types.\n+   C99 6.3.1.5(3) New.\n+\n+   Test various conversions involving decimal floating types. */\n+\n+#include <decfloat.h>\n+\n+extern void abort (void);\n+\n+volatile _Decimal32 d32;\n+volatile _Decimal64 d64;\n+volatile _Decimal128 d128;\n+\n+int\n+main ()\n+{\n+  /* Conversions to larger types.  */\n+  d32 = 123.4df;\n+  d64 = d32;\n+  if (d64 != 123.4dd)\n+    abort ();\n+  d128 = d32;\n+  if (d128 != 123.4dl)\n+    abort ();\n+  d64 = 345.678dd;\n+  d128 = d64;\n+  if (d128 != 345.678dl)\n+    abort ();\n+\n+  /* Conversions to smaller types for which the value fits.  */\n+  d64 = 3456.789dd;\n+  d32 = d64;\n+  if (d32 != 3456.789df)\n+    abort ();\n+  d128 = 123.4567dl;\n+  d32 = d128;\n+  if (d32 != 123.4567dl)\n+    abort ();\n+\n+  d128 = 1234567890.123456dl;\n+  d64 = d128;\n+  if (d64 != 1234567890.123456dd)\n+    abort ();\n+\n+  /* Test demotion to non-representable decimal floating type. */\n+\n+  /* Assumes a default rounding mode of 'near'.  This uses the rules\n+     describe in the 27 July 2005 draft of IEEE 754r, which are much\n+     more clear that what's described in draft 5 of N1107.  */\n+\n+  /* Rounds to what _Decimal32 can handle.  */\n+  d64 = 9.99999949E96DD;\n+  d32 = d64;\n+  if (d32 != DEC32_MAX)\n+    abort();\n+\n+  /* Rounds to more than _Decimal32 can handle.  */\n+  d64 = 9.9999995E96DD;\n+  d32 = d64;\n+  if (d32 != __builtin_infd32())\n+    abort();\n+\n+  /* Rounds to what _Decimal32 can handle.  */\n+  d128 = 9.99999949E96DD;\n+  d32 = d128;\n+  if (d32 != DEC32_MAX)\n+    abort();\n+\n+  /* Rounds to more than _Decimal32 can handle.  */\n+  d128= 9.9999995E96DD;\n+  d32 = d128;\n+  if (d32 != __builtin_infd32())\n+    abort();\n+\n+  /* Rounds to what _Decimal64 can handle.  */\n+  d128 = 9.99999999999999949E384DL;\n+  d64 = d128;\n+  if (d64 != DEC64_MAX)\n+    abort();\n+\n+  /* Rounds to more than _Decimal64 can handle.  */\n+  d128 = 9.9999999999999995E384DL;\n+  d64 = d128;\n+  if (d64 != __builtin_infd64())\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "38516ed059f09025707345833f173543f5db2056", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-fold.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-fold.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,166 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O\" } */\n+\n+/* N1150 5.1 Conversion between decimal floating integer.\n+   C99 6.3.1.4(1a) New.\n+   These should all be folded at compile time.  */\n+\n+extern void link_error (void);\n+\n+int\n+main ()\n+{\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+  unsigned int ui;\n+  unsigned long ul;\n+  unsigned long long ull;\n+  int si;\n+  long sl;\n+  long long sll;\n+  _Bool b;\n+\n+  /* C99 Section 6.7.2 Type specifiers.  Type _Bool is \n+     mentioned in this section.  Conversions between \n+     _Bool and DFP types.  */\n+\n+  /* Decimal float to unsigned integer.  */\n+  d32 = 456.789df;\n+  d64 = 23.456789dd;\n+  d128 = 1234.5678dl;\n+\n+  ui = d32;\n+  if (ui != 456U)\n+    link_error ();\n+  ul = d32;\n+  if (ul != 456UL)\n+    link_error ();\n+  ull = d32;\n+  if (ull != 456ULL)\n+    link_error ();\n+\n+  ui = d64;\n+  if (ui != 23U)\n+    link_error ();\n+  ul = d64;\n+  if (ul != 23UL)\n+    link_error ();\n+  ull = d64;\n+  if (ull != 23ULL)\n+    link_error ();\n+\n+  ui = d128;\n+  if (ui != 1234U)\n+    link_error ();\n+  ul = d128;\n+  if (ul != 1234UL)\n+    link_error ();\n+  ull = d128;\n+  if (ull != 1234ULL)\n+    link_error ();\n+\n+  /* Decimal float to signed integer.  */\n+\n+  /* Decimal float to _Bool.  */\n+  d32 = 1.23df;\n+  d64 = -3.4dd;\n+  d128 = 0.00003dl;\n+\n+  b = d32;\n+  if (!b)\n+    link_error ();\n+  b = d64;\n+  if (!b)\n+    link_error ();\n+  b = d128;\n+  if (!b)\n+    link_error ();\n+\n+  /* Unsigned integer to decimal float.  */\n+  ui = 987U;\n+  ul = 345678UL;\n+  ull = 1234567ULL;\n+\n+  d32 = ui;\n+  if (d32 != 987.0df)\n+    link_error ();\n+  d32 = ul;\n+  if (d32 != 345678.0df)\n+    link_error ();\n+  d32 = ull;\n+  if (d32 != 1234567.df)\n+    link_error ();\n+\n+  d64 = ui;\n+  if (d64 != 987.0dd)\n+    link_error ();\n+  d64 = ul;\n+  if (d64 != 345678.0dd)\n+    link_error ();\n+  d64 = ull;\n+  if (d64 != 1234567.dd)\n+    link_error ();\n+\n+  d128 = ui;\n+  if (d128 != 987.0dl)\n+    link_error ();\n+  d128 = ul;\n+  if (d128 != 345678.0dl)\n+    link_error ();\n+  d128 = ull;\n+  if (d128 != 1234567.dl)\n+    link_error ();\n+\n+  /* Signed integer to decimal float.  */\n+  si = -987;\n+  sl = -345678;\n+  sll = -1234567;\n+\n+  d32 = si;\n+  if (d32 != -987.0df)\n+    link_error ();\n+  d32 = sl;\n+  if (d32 != -345678.0df)\n+    link_error ();\n+  d32 = sll;\n+  if (d32 != -1234567.df)\n+    link_error ();\n+\n+  d64 = si;\n+  if (d64 != -987.0dd)\n+    link_error ();\n+  d64 = sl;\n+  if (d64 != -345678.0dd)\n+    link_error ();\n+  d64 = sll;\n+  if (d64 != -1234567.dd)\n+    link_error ();\n+\n+  d128 = si;\n+  if (d128 != -987.0dl)\n+    link_error ();\n+  d128 = sl;\n+  if (d128 != -345678.0dl)\n+    link_error ();\n+  d128 = sll;\n+  if (d128 != -1234567.dl)\n+    link_error ();\n+\n+  /* _Bool to decimal float.  */\n+  d32 = 0.0DF;\n+  d64 = 0.0DD;\n+  d128 = 0.0DL;\n+  \n+  b = d32;\n+  if (b)\n+    link_error ();\n+  b = d64;\n+  if (b)\n+    link_error ();\n+  b = d128;\n+  if (b)\n+    link_error ();\n+\n+  return 0;\n+}"}, {"sha": "3b7b5ca0e71af13ad2e085a4018d0e90e44f5cab", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-saturate.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 5.1 Conversion between decimal floating integer.\n+   C99 6.3.1.4(1a) New.\n+   Test integer saturation.  */\n+\n+#include <decfloat.h>\n+#include <limits.h>\n+\n+extern void abort (void);\n+\n+volatile _Decimal32 d32;\n+volatile _Decimal64 d64;\n+volatile _Decimal128 d128;\n+\n+volatile signed int si;\n+volatile unsigned int usi;\n+volatile unsigned long long udi;\n+\n+int\n+main ()\n+{\n+\n+  /* Unsigned.  */\n+  usi = DEC32_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (usi != UINT_MAX)\n+    abort ();\n+\n+  usi = DEC64_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (usi != UINT_MAX)\n+    abort ();\n+\n+  usi = DEC128_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (usi != UINT_MAX)\n+    abort ();\n+\n+  /* Signed.  */\n+  si = DEC32_MAX;\t/* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (si != INT_MAX)\n+    abort ();\n+\n+  si = DEC64_MAX;   /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (si != INT_MAX)\n+    abort ();\n+\n+  si = DEC128_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (si != INT_MAX)\n+    abort ();\n+\n+  si = - DEC32_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (si != INT_MIN)\n+    abort ();\n+\n+  si = - DEC64_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (si != INT_MIN)\n+    abort ();\n+\n+  si = - DEC128_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  if (si != INT_MIN)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "bab206836533a73abbd2f90b5fea4989a1e9fbea", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,194 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* N1150 5.1 Conversion between decimal floating integer.\n+   C99 6.3.1.4(1a) New.  */\n+\n+extern void abort (void);\n+\n+_Decimal32 d32;\n+_Decimal64 d64;\n+_Decimal128 d128;\n+unsigned int ui;\n+unsigned long ul;\n+unsigned long long ull;\n+int si;\n+long sl;\n+long long sll;\n+_Bool b;\n+\n+void\n+init_dfp_1 (void)\n+{\n+  d32 = 456.789df;\n+  d64 = 23.456789dd;\n+  d128 = 1234.5678dl;\n+}\n+void\n+init_dfp_2 (void)\n+{\n+  d32 = 1.23df;\n+  d64 = -3.4dd;\n+  d128 = 0.00003dl;\n+}\n+\n+void\n+init_dfp_3 (void)\n+{\n+  d32 = 0.0DF;\n+  d64 = 0.0DD;\n+  d128 = 0.0DL;\n+}\n+\n+void\n+init_unsigned_int (void)\n+{\n+  ui = 987U;\n+  ul = 345678UL;\n+  ull = 1234567ULL;\n+}\n+\n+void\n+init_signed_int (void)\n+{\n+  si = -987;\n+  sl = -345678;\n+  sll = -1234567;\n+}\n+\n+int\n+main ()\n+{\n+  /* C99 Section 6.7.2 Type specifiers.  Type _Bool is \n+     mentioned in this section.  Conversions between \n+     _Bool and DFP types.  */\n+\n+  /* Decimal float to unsigned integer.  */\n+  init_dfp_1 ();\n+\n+  ui = d32;\n+  if (ui != 456U)\n+    abort ();\n+  ul = d32;\n+  if (ul != 456UL)\n+    abort ();\n+  ull = d32;\n+  if (ull != 456ULL)\n+    abort ();\n+\n+  ui = d64;\n+  if (ui != 23U)\n+    abort ();\n+  ul = d64;\n+  if (ul != 23UL)\n+    abort ();\n+  ull = d64;\n+  if (ull != 23ULL)\n+    abort ();\n+\n+  ui = d128;\n+  if (ui != 1234U)\n+    abort ();\n+  ul = d128;\n+  if (ul != 1234UL)\n+    abort ();\n+  ull = d128;\n+  if (ull != 1234ULL)\n+    abort ();\n+\n+  /* Decimal float to signed integer.  */\n+\n+  /* Decimal float to _Bool.  */\n+  init_dfp_2 ();\n+\n+  b = d32;\n+  if (!b)\n+    abort ();\n+  b = d64;\n+  if (!b)\n+    abort ();\n+  b = d128;\n+  if (!b)\n+    abort ();\n+\n+  /* Unsigned integer to decimal float.  */\n+  init_unsigned_int ();\n+\n+  d32 = ui;\n+  if (d32 != 987.0df)\n+    abort ();\n+  d32 = ul;\n+  if (d32 != 345678.0df)\n+    abort ();\n+  d32 = ull;\n+  if (d32 != 1234567.df)\n+    abort ();\n+\n+  d64 = ui;\n+  if (d64 != 987.0dd)\n+    abort ();\n+  d64 = ul;\n+  if (d64 != 345678.0dd)\n+    abort ();\n+  d64 = ull;\n+  if (d64 != 1234567.dd)\n+    abort ();\n+\n+  d128 = ui;\n+  if (d128 != 987.0dl)\n+    abort ();\n+  d128 = ul;\n+  if (d128 != 345678.0dl)\n+    abort ();\n+  d128 = ull;\n+  if (d128 != 1234567.dl)\n+    abort ();\n+\n+  /* Signed integer to decimal float.  */\n+  init_signed_int ();\n+\n+  d32 = si;\n+  if (d32 != -987.0df)\n+    abort ();\n+  d32 = sl;\n+  if (d32 != -345678.0df)\n+    abort ();\n+  d32 = sll;\n+  if (d32 != -1234567.df)\n+    abort ();\n+\n+  d64 = si;\n+  if (d64 != -987.0dd)\n+    abort ();\n+  d64 = sl;\n+  if (d64 != -345678.0dd)\n+    abort ();\n+  d64 = sll;\n+  if (d64 != -1234567.dd)\n+    abort ();\n+\n+  d128 = si;\n+  if (d128 != -987.0dl)\n+    abort ();\n+  d128 = sl;\n+  if (d128 != -345678.0dl)\n+    abort ();\n+  d128 = sll;\n+  if (d128 != -1234567.dl)\n+    abort ();\n+\n+  /* _Bool to decimal float.  */\n+  init_dfp_3 ();\n+  \n+  b = d32;\n+  if (b)\n+    abort ();\n+  b = d64;\n+  if (b)\n+    abort ();\n+  b = d128;\n+  if (b)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6afacd5173d4248dc3af243de17b843f08b1d8e7", "filename": "gcc/testsuite/gcc.dg/dfp/ctypes.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fctypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fctypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fctypes.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 3: Decimal floating types.\n+   C99 6.7.2: Type specifiers  */\n+\n+/* Test for the existence of the types.  */\n+_Decimal32 sd1;\n+_Decimal64 dd2;\n+_Decimal128 td3;\n+\n+#define ARRAY_SIZE      7\n+\n+static _Decimal32 d32[ARRAY_SIZE];\n+static _Decimal64 d64[ARRAY_SIZE];\n+static _Decimal128 d128[ARRAY_SIZE];\n+\n+extern _Decimal32 ext_d32[ARRAY_SIZE];\n+extern _Decimal64 ext_d64[ARRAY_SIZE];\n+extern _Decimal128 ext_d128[ARRAY_SIZE];\n+\n+/* Test sizes for these types.  */\n+int ssize[sizeof (_Decimal32) == 4 ? 1 : -1];\n+int dsize[sizeof (_Decimal64) == 8 ? 1 : -1];\n+int tsize[sizeof (_Decimal128) == 16 ? 1 : -1];\n+\n+int salign = __alignof (_Decimal32);\n+int dalign = __alignof (_Decimal64);\n+int talign = __alignof (_Decimal128);\n+\n+/* sizeof operator applied on an array of DFP types is n times the\n+   size of a single variable of this type.  */\n+\n+int d32_array_size [sizeof(d32) == ARRAY_SIZE * sizeof(sd1) ? 1 : -1];\n+int d64_array_size [sizeof(d64) == ARRAY_SIZE * sizeof(dd2) ? 1 : -1];\n+int d128_array_size [sizeof(d128) == ARRAY_SIZE * sizeof(td3)? 1 : -1];\n+\n+/* Likewise for extern qualified arrays.  */\n+\n+int ext_d32_array_size [sizeof(ext_d32) == ARRAY_SIZE * sizeof(sd1) ? 1 : -1];\n+int ext_d64_array_size [sizeof(ext_d64) == ARRAY_SIZE * sizeof(dd2) ? 1 : -1];\n+int ext_d128_array_size [sizeof(ext_d128) == ARRAY_SIZE * sizeof(td3)? 1 : -1];\n+\n+void f()\n+{\n+  _Decimal32 d32[ARRAY_SIZE];\n+  _Decimal64 d64[ARRAY_SIZE];\n+  _Decimal128 d128[ARRAY_SIZE];\n+\n+  int d32_array_size [sizeof(d32) == ARRAY_SIZE * sizeof(_Decimal32) ? 1 : -1];\n+  int d64_array_size [sizeof(d64) == ARRAY_SIZE * sizeof(_Decimal64) ? 1 : -1];\n+  int d128_array_size [sizeof(d128) == ARRAY_SIZE * sizeof(_Decimal128)? 1 : -1];\n+}"}, {"sha": "e1ccbb794c02e233794dd7457e5eeb816538d493", "filename": "gcc/testsuite/gcc.dg/dfp/dec-eval-method.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdec-eval-method.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdec-eval-method.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdec-eval-method.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+                                                                                \n+/* N1107 4: Characteristics of decimal floating types <decfloat.h>.\n+   C99 5.2.4.2.2a[2] (New).\n+\n+   Verify that __DEC_EVAL_METHOD__ is defined; it will be used to define\n+   DEC_EVAL_METHOD in <decfloat.h>.  */\n+\n+int i;\n+#ifndef __DEC_EVAL_METHOD__\n+#error __DEC_EVAL_METHOD__ is not defined\n+#endif"}, {"sha": "af17cb9beaea751a828b9b6058a15dab9218eea8", "filename": "gcc/testsuite/gcc.dg/dfp/decfloat-constants.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 4: Characteristics of decimal floating types <decfloat.h>.\n+   C99 5.2.4.2.2a[3]: New.\n+\n+   Verify constants about range of decimal float and three components of\n+   decimal float defined in decfloat.h.  */\n+\n+/* Make sure we are exporting the right values to decfloat.h. */\n+#include <decfloat.h>\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+  if (DEC32_MANT_DIG != 7) abort();\n+  if (DEC64_MANT_DIG != 16) abort();\n+  if (DEC128_MANT_DIG != 34) abort();\n+\n+  if (DEC32_MIN_EXP != -95) abort();\n+  if (DEC64_MIN_EXP != -383) abort();\n+  if (DEC128_MIN_EXP != -6143) abort();\n+\n+  if (DEC32_MAX_EXP != 96) abort();\n+  if (DEC64_MAX_EXP != 384) abort();\n+  if (DEC128_MAX_EXP != 6144) abort();\n+\n+  if (DEC32_MAX != 9.999999E96DF) abort();\n+  if (DEC64_MAX != 9.999999999999999E384DD) abort();\n+  if (DEC128_MAX != 9.999999999999999999999999999999999E6144DL) abort();\n+\n+  if (DEC32_EPSILON != 1E-6DF) abort();\n+  if (DEC64_EPSILON != 1E-15DD) abort();\n+  if (DEC128_EPSILON != 1E-33DL) abort();\n+  \n+  if (DEC32_MIN != 1E-95DF) abort();\n+  if (DEC32_MIN != 1E-383DD) abort();\n+  if (DEC128_MIN != 1E-6143DL) abort();\n+\n+  if (DEC32_DEN != 0.000001E-95DF) abort();\n+  if (DEC64_DEN != 0.000000000000001E-383DD) abort();\n+  if (DEC128_DEN != 0.000000000000000000000000000000001E-6143DL) abort();\n+\n+  return 0;\n+}"}, {"sha": "63a72cc95d5d168f9f0297b2c7fd3814b85d2795", "filename": "gcc/testsuite/gcc.dg/dfp/dfp-round.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-round.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-round.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-round.h?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,14 @@\n+/* This is very temporary; right now it gets functions in libgcc that\n+   pass on the rounding mode to decNumber, but later it can be replaced\n+   with Official Stuff.  */\n+\n+#define FE_DEC_DOWNWARD 0\n+#define FE_DEC_TONEAREST 1\n+#define FE_DEC_TONEARESTFROMZERO 2\n+#define FE_DEC_TOWARDZERO 3\n+#define FE_DEC_UPWARD 4\n+\n+extern void __dfp_set_round (int);\n+#define DFP_SETROUND(M) __dfp_set_round(M)\n+extern int __dfp_get_round (void);\n+#define DFP_GETROUND __dfp_get_round()"}, {"sha": "fcaecffc3d9cc4af86ca6ad73781250a751c32ed", "filename": "gcc/testsuite/gcc.dg/dfp/dfp.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,41 @@\n+#   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Skip these tests for targets that don't support this extension.\n+if { ![check_effective_target_dfp] } {\n+    return;\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+        \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "e71410f032c0480fdbd62609c240809948697123", "filename": "gcc/testsuite/gcc.dg/dfp/func-array.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing array elements involving decimal floating point types. */\n+\n+extern void abort (void);\n+\n+/* A handful of functions that return the Nth _Decimal32 argument of\n+   an incoming array.  */\n+\n+_Decimal32\n+arg0_32 (_Decimal32 args[])\n+{\n+  return args[0];\n+}\n+\n+_Decimal32\n+arg1_32 (_Decimal32 args[])\n+{\n+  return args[1];\n+}\n+\n+_Decimal32\n+arg2_32 (_Decimal32 args[])\n+{\n+  return args[2];\n+}\n+\n+_Decimal32\n+arg3_32 (_Decimal32 args[])\n+{\n+  return args[3];\n+}\n+\n+_Decimal32\n+arg4_32 (_Decimal32 args[])\n+{\n+  return args[4];\n+}\n+\n+_Decimal32\n+arg5_32 (_Decimal32 args[])\n+{\n+  return args[5];\n+}\n+\t\n+\f\n+/* A handful of functions that return the Nth _Decimal64 argument of\n+   an incoming array.  */\n+\n+_Decimal64\n+arg0_64 (_Decimal64 args[])\n+{\n+  return args[0];\n+}\n+\n+_Decimal64\n+arg1_64 (_Decimal64 args[])\n+{\n+  return args[1];\n+}\n+\n+_Decimal64\n+arg2_64 (_Decimal64 args[])\n+{\n+  return args[2];\n+}\n+\n+_Decimal64\n+arg3_64 (_Decimal64 args[])\n+{\n+  return args[3];\n+}\n+\n+_Decimal64\n+arg4_64 (_Decimal64 args[])\n+{\n+  return args[4];\n+}\n+\n+_Decimal64\n+arg5_64 (_Decimal64 args[])\n+{\n+  return args[5];\n+}\n+\n+\f\n+/* A handful of functions that return the Nth _Decimal128 argument of\n+   an incoming array.  */\n+\n+_Decimal128\n+arg0_128 (_Decimal128 args[])\n+{\n+  return args[0];\n+}\n+\n+_Decimal128\n+arg1_128 (_Decimal128 args[])\n+{\n+  return args[1];\n+}\n+\n+_Decimal128\n+arg2_128 (_Decimal128 args[])\n+{\n+  return args[2];\n+}\n+\n+_Decimal128\n+arg3_128 (_Decimal128 args[])\n+{\n+  return args[3];\n+}\n+\n+_Decimal128\n+arg4_128 (_Decimal128 args[])\n+{\n+  return args[4];\n+}\n+\n+_Decimal128\n+arg5_128 (_Decimal128 args[])\n+{\n+  return args[5];\n+}\n+\n+\f\n+int main()\n+{\n+  _Decimal32 d32[] = { 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df };\n+  _Decimal64 d64[] = { 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd };\n+  _Decimal128 d128[] = { 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl };\n+\n+  /* _Decimal32 variants.  */\n+  if (arg0_32 (d32) != 0.0df) abort ();\n+  if (arg1_32 (d32) != 1.0df) abort ();\n+  if (arg2_32 (d32) != 2.0df) abort ();\n+  if (arg3_32 (d32) != 3.0df) abort ();\n+  if (arg4_32 (d32) != 4.0df) abort ();\n+  if (arg5_32 (d32) != 5.0df) abort ();\n+\n+  /* _Decimal64 variants.  */\n+  if (arg0_64 (d64) != 0.0dd) abort ();\n+  if (arg1_64 (d64) != 1.0dd) abort ();\n+  if (arg2_64 (d64) != 2.0dd) abort ();\n+  if (arg3_64 (d64) != 3.0dd) abort ();\n+  if (arg4_64 (d64) != 4.0dd) abort ();\n+  if (arg5_64 (d64) != 5.0dd) abort ();\n+\n+  /* _Decimal128 variants.  */\n+  if (arg0_128 (d128) != 0.0dl) abort ();\n+  if (arg1_128 (d128) != 1.0dl) abort ();\n+  if (arg2_128 (d128) != 2.0dl) abort ();\n+  if (arg3_128 (d128) != 3.0dl) abort ();\n+  if (arg4_128 (d128) != 4.0dl) abort ();\n+  if (arg5_128 (d128) != 5.0dl) abort ();\n+\n+  return 0;\n+}"}, {"sha": "c5d9650c1e2e9dcc0a6daec0e40f7774c7d8d057", "filename": "gcc/testsuite/gcc.dg/dfp/func-mixed.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,175 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -Wall\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test scalar passing and return values involving decimal floating\n+   point types.  */\n+\n+extern void abort (void);\n+\n+/* A handful of functions that return their Nth _Decimal32\n+   argument with mixed types in parameter list.  */\n+\n+_Decimal32\n+arg0_32 (_Decimal32 arg0, int arg1, unsigned int arg2,\n+       float arg3, double  arg4, long double arg5)\n+{\n+  return arg0;\n+}\n+\n+_Decimal32\n+arg1_32 (int arg0, _Decimal32 arg1, unsigned int arg2,\n+       float arg3, double arg4, long double arg5)\n+{\n+  return arg1;\n+}\n+\n+_Decimal32\n+arg2_32 (int arg0, unsigned int arg1, _Decimal32 arg2,\n+       float arg3, double arg4, long double arg5)\n+{\n+  return arg2;\n+}\n+\n+\n+_Decimal32\n+arg3_32 (int arg0, unsigned int arg1, float arg2,\n+       _Decimal32 arg3, double arg4, long double arg5)\n+{\n+  return arg3;\n+}\n+\n+_Decimal32\n+arg4_32 (int arg0, unsigned int arg1, float arg2,\n+       double arg3, _Decimal32 arg4, long double arg5)\n+{\n+  return arg4;\n+}\n+\n+_Decimal32\n+arg5_32 (int arg0, unsigned int arg1, float arg2,\n+       double arg3, long double arg4, _Decimal32 arg5)\n+{\n+  return arg5;\n+}\n+\n+/* A handful of functions that return their Nth _Decimal64\n+   argument with mixed types in parameter list.  */\n+\n+_Decimal64\n+arg0_64 (_Decimal64 arg0, int arg1, unsigned int arg2,\n+         float arg3, double  arg4, long double arg5)\n+{\n+  return arg0;\n+}\n+\n+_Decimal64\n+arg1_64 (int arg0, _Decimal64 arg1, unsigned int arg2,\n+         float arg3, double arg4, long double arg5)\n+{\n+  return arg1;\n+}\n+\n+_Decimal64\n+arg2_64 (int arg0, unsigned int arg1, _Decimal64 arg2,\n+         float arg3, double arg4, long double arg5)\n+{\n+  return arg2;\n+}\n+\n+_Decimal64\n+arg3_64 (int arg0, unsigned int arg1, float arg2,\n+         _Decimal64 arg3, double arg4, long double arg5)\n+{\n+  return arg3;\n+}\n+\n+_Decimal64\n+arg4_64 (int arg0, unsigned int arg1, float arg2,\n+         float arg3, _Decimal64 arg4, long double arg5)\n+{\n+  return arg4;\n+}\n+\n+_Decimal64\n+arg5_64 (int arg0, unsigned int arg1, float arg2,\n+         double arg3, long double arg4, _Decimal64 arg5)\n+{\n+  return arg5;\n+}\n+\n+/* A handful of functions that return their Nth _Decimal128\n+   argument with mixed types in parameter list.  */\n+\n+_Decimal128\n+arg0_128 (_Decimal128 arg0, int arg1, unsigned int arg2,\n+         float arg3, double  arg4, long double arg5)\n+{\n+  return arg0;\n+}\n+_Decimal32\n+arg1_128 (int arg0, _Decimal128 arg1, unsigned int arg2,\n+         float arg3, double arg4, long double arg5)\n+{\n+  return arg1;\n+}\n+\n+_Decimal128\n+arg2_128 (int arg0, unsigned int arg1, _Decimal128 arg2,\n+         float arg3, double arg4, long double arg5)\n+{\n+  return arg2;\n+}\n+\n+_Decimal128\n+arg3_128 (int arg0, unsigned int arg1, float arg2,\n+         _Decimal128 arg3, double arg4, long double arg5)\n+{\n+  return arg3;\n+}\n+\n+_Decimal128\n+arg4_128 (int arg0, unsigned int arg1, float arg2,\n+         float arg3, _Decimal32 arg4, long double arg5)\n+{\n+  return arg4;\n+}\n+\n+_Decimal128\n+arg5_128 (int arg0, unsigned int arg1, float arg2,\n+         double arg3, long double arg4, _Decimal128 arg5)\n+{\n+  return arg5;\n+}\n+\n+\n+\n+int\n+main ()\n+{\n+  /* _Decimal32 variants.  */\n+  if (arg0_32 (0.0df, -1, 2, 3.0f, 4.0, 5.0ld) != 0.0df) abort ();\n+  if (arg1_32 (0, 1.0df, 2, 3.0f, 4.0, 5.0ld) != 1.0df) abort ();\n+  if (arg2_32 (0, -1, 2.0df, 3.0f, 4.0, 5.0ld) != 2.0df) abort ();\n+  if (arg3_32 (0, -1, 2.0f, 3.0df, 4.0, 5.0ld) != 3.0df) abort ();\n+  if (arg4_32 (0, -1, 2.0f, 3.0, 4.0df, 5.0ld) != 4.0df) abort ();\n+  if (arg5_32 (0, -1, 2.0f, 3.0, 4.0ld, 5.0df) != 5.0df) abort ();\n+\n+  /* _Decimal64 variants.  */\n+  if (arg0_64 (0.0dd, -1, 2, 3.0f, 4.0, 5.0ld) != 0.0dd) abort ();\n+  if (arg1_64 (0, 1.0dd, 2, 3.0f, 4.0, 5.0ld) != 1.0dd) abort ();\n+  if (arg2_64 (0, -1, 2.0dd, 3.0f, 4.0, 5.0ld) != 2.0dd) abort ();\n+  if (arg3_64 (0, -1, 2.0f, 3.0dd, 4.0, 5.0ld) != 3.0dd) abort ();\n+  if (arg4_64 (0, -1, 2.0f, 3.0, 4.0dd, 5.0ld) != 4.0dd) abort ();\n+  if (arg5_64 (0, -1, 2.0f, 3.0, 4.0ld, 5.0dd) != 5.0dd) abort ();\n+\n+  /* _Decimal128 variants.  */\n+  if (arg0_128 (0.0dl, -1, 2, 3.0f, 4.0, 5.0ld) != 0.0dl) abort ();\n+  if (arg1_128 (0, 1.0dl, 2, 3.0f, 4.0, 5.0ld) != 1.0dl) abort ();\n+  if (arg2_128 (0, -1, 2.0dl, 3.0f, 4.0, 5.0ld) != 2.0dl) abort ();\n+  if (arg3_128 (0, -1, 2.0f, 3.0dl, 4.0, 5.0ld) != 3.0dl) abort ();\n+  if (arg4_128 (0, -1, 2.0f, 3.0, 4.0dl, 5.0ld) != 4.0dl) abort ();\n+  if (arg5_128 (0, -1, 2.0f, 3.0, 4.0ld, 5.0dl) != 5.0dl) abort ();\n+\n+  return 0;\n+}"}, {"sha": "743411e56cc8e9d8402ad325203a757ac994356d", "filename": "gcc/testsuite/gcc.dg/dfp/func-scalar.c", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,195 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test scalar passing and return values involving decimal floating\n+   point types.  */\n+\n+extern void abort (void);\n+\n+/* A handful of functions that return their Nth _Decimal32\n+   argument.  */\n+\n+_Decimal32\n+arg0_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg0;\n+}\n+\n+_Decimal32\n+arg1_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal32\n+arg2_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal32\n+arg3_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal32\n+arg4_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal32\n+arg5_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg5;\n+}\n+\t\n+\f\n+/* A handful of functions that return their Nth _Decimal64\n+   argument.  */\n+\n+_Decimal64\n+arg0_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg0;\n+}\n+\t\n+_Decimal64\n+arg1_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal64\n+arg2_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal64\n+arg3_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal64\n+arg4_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal64\n+arg5_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg5;\n+}\n+\t\n+\f\n+/* A handful of functions that return their Nth _Decimal128\n+   argument.  */\n+\n+_Decimal128\n+arg0_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg0;\n+}\n+\t\n+_Decimal128\n+arg1_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal128\n+arg2_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal128\n+arg3_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal128\n+arg4_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal128\n+arg5_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg5;\n+}\n+\n+\n+\f\n+int\n+main ()\n+{\n+  /* _Decimal32 variants.  */\n+  if (arg0_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 0.0df)\n+    abort ();\n+  if (arg1_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 1.0df)\n+    abort ();\n+  if (arg2_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 2.0df)\n+    abort ();\n+  if (arg3_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 3.0df)\n+    abort ();\n+  if (arg4_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 4.0df)\n+    abort ();\n+  if (arg5_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 5.0df)\n+    abort ();\n+\n+  /* _Decimal64 variants.  */\n+  if (arg0_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 0.0dd)\n+    abort ();\n+  if (arg1_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 1.0dd)\n+    abort ();\n+  if (arg2_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 2.0dd)\n+    abort ();\n+  if (arg3_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 3.0dd)\n+    abort ();\n+  if (arg4_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 4.0dd)\n+    abort ();\n+  if (arg5_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 5.0dd)\n+    abort ();\n+\n+  /* _Decimal128 variants.  */\n+  if (arg0_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 0.0dl)\n+    abort ();\n+  if (arg1_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 1.0dl)\n+    abort ();\n+  if (arg2_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 2.0dl)\n+    abort ();\n+  if (arg3_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 3.0dl)\n+    abort ();\n+  if (arg4_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 4.0dl)\n+    abort ();\n+  if (arg5_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 5.0dl)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "5f1be13223a1cc030ce235d2c8a8a43835ecfd1a", "filename": "gcc/testsuite/gcc.dg/dfp/func-struct.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test structure passing and return values involving decimal floating\n+   point types.  */\n+\n+extern void abort (void);\n+\n+struct example\n+{\n+  _Decimal128 d128;\n+  char dummy1;\n+  _Decimal64 d64;\n+  char dummy2;\n+  _Decimal32 d32;\n+} nums = { 1.0dl, 'a', 2.0dd, 'b', 3.0df };\n+\n+_Decimal32\n+d32_field (struct example s)\n+{\n+  return s.d32;\n+}\n+\n+_Decimal64\n+d64_field (struct example s)\n+{\n+  return s.d64;\n+}\n+\n+_Decimal128\n+d128_field (struct example s)\n+{\n+  return s.d128;\n+}\n+\n+char\n+dummy1_field (struct example s)\n+{\n+  return s.dummy1;\n+}\n+\n+char\n+dummy2_field (struct example s)\n+{\n+  return s.dummy2;\n+}\n+\n+_Decimal32\n+ptr_d32_field (struct example *s)\n+{\n+  return s->d32;\n+}\n+\n+_Decimal64\n+ptr_d64_field (struct example *s)\n+{\n+  return s->d64;\n+}\n+\n+_Decimal128\n+ptr_d128_field (struct example *s)\n+{\n+  return s->d128;\n+}\n+\n+char\n+ptr_dummy1_field (struct example *s)\n+{\n+  return s->dummy1;\n+}\n+\n+char\n+ptr_dummy2_field (struct example *s)\n+{\n+  return s->dummy2;\n+}\n+\n+\f\n+int\n+main ()\n+{\n+  if (d32_field (nums) != 3.0df) abort ();\n+  if (d64_field (nums) != 2.0dd) abort ();\n+  if (d128_field (nums) != 1.0dl) abort ();\n+  if (dummy1_field (nums) != 'a') abort ();\n+  if (dummy2_field (nums) != 'b') abort ();\n+\n+  if (ptr_d32_field (&nums) != 3.0df) abort ();\n+  if (ptr_d64_field (&nums) != 2.0dd) abort ();\n+  if (ptr_d128_field (&nums) != 1.0dl) abort ();\n+  if (ptr_dummy1_field (&nums) != 'a') abort ();\n+  if (ptr_dummy2_field (&nums) != 'b') abort ();\n+\n+  return 0;\n+}"}, {"sha": "07340edcee31e487840b179ee82732a8aae58dac", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-dfp.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing varargs of the decimal float types.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+static _Decimal32\n+vararg32 (unsigned arg, ...)\n+{\n+  int i;\n+  va_list ap;\n+  _Decimal32 result;\n+\n+  va_start (ap, arg);\n+  for (i = 0; i <= arg; i++)\n+    result = va_arg (ap, _Decimal32);\n+  va_end (ap);\n+  return result;\n+}\n+\n+static _Decimal64\n+vararg64 (unsigned arg, ...)\n+{\n+  int i;\n+  va_list ap;\n+  _Decimal64 result;\n+\n+  va_start (ap, arg);\n+  for (i = 0; i <= arg; i++)\n+    result = va_arg (ap, _Decimal64);\n+  va_end (ap);\n+  return result;\n+}\n+\n+static _Decimal128\n+vararg128 (unsigned arg, ...)\n+{\n+  int i;\n+  va_list ap;\n+  _Decimal128 result;\n+\n+  va_start (ap, arg);\n+  for (i = 0; i <= arg; i++)\n+    result = va_arg (ap, _Decimal128);\n+  va_end (ap);\n+  return result;\n+}\n+\n+\f\n+int main()\n+{\n+  /* _Decimal32 variants.  */\n+  if (vararg32 (0, 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 0.0df)\n+    abort ();\n+  if (vararg32 (1, 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 1.0df)\n+    abort ();\n+  if (vararg32 (2, 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 2.0df)\n+    abort ();\n+  if (vararg32 (3, 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 3.0df)\n+    abort ();\n+  if (vararg32 (4, 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 4.0df)\n+    abort ();\n+  if (vararg32 (5, 0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 5.0df)\n+    abort ();\n+\n+  /* _Decimal64 variants.  */\n+  if (vararg64 (0, 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 0.0dd)\n+    abort ();\n+  if (vararg64 (1, 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 1.0dd)\n+    abort ();\n+  if (vararg64 (2, 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 2.0dd)\n+    abort ();\n+  if (vararg64 (3, 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 3.0dd)\n+    abort ();\n+  if (vararg64 (4, 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 4.0dd)\n+    abort ();\n+  if (vararg64 (5, 0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 5.0dd)\n+    abort ();\n+\n+  /* _Decimal128 variants.  */\n+  if (vararg128 (0, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 0.0dl)\n+    abort ();\n+  if (vararg128 (1, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 1.0dl)\n+    abort ();\n+  if (vararg128 (2, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 2.0dl)\n+    abort ();\n+  if (vararg128 (3, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 3.0dl)\n+    abort ();\n+  if (vararg128 (4, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 4.0dl)\n+    abort ();\n+  if (vararg128 (5, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 5.0dl)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6ee882de5ef7e0c7362f6afbeb6f4e3481c05beb", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-mixed.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing varargs of the combination of decimal float types and\n+   other types.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+/* Supposing the list of varying number of arguments is:\n+   unsigned int, _Decimal128, double, _Decimal32, _Decimal64.  */\n+\n+static _Decimal32\n+vararg_d32 (unsigned arg, ...)\n+{\n+  va_list ap;\n+  _Decimal32 result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  va_arg (ap, _Decimal128);\n+  va_arg (ap, double);\n+  result = va_arg (ap, _Decimal32);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static _Decimal32\n+vararg_d64 (unsigned arg, ...)\n+{\n+  va_list ap;\n+  _Decimal64 result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  va_arg (ap, _Decimal128);\n+  va_arg (ap, double);\n+  va_arg (ap, _Decimal32);\n+  result = va_arg (ap, _Decimal64);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static _Decimal128\n+vararg_d128 (unsigned arg, ...)\n+{\n+  va_list ap;\n+  _Decimal128 result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  result = va_arg (ap, _Decimal128);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static unsigned int\n+vararg_int (unsigned arg, ...)\n+{\n+  va_list ap;\n+  unsigned int result;\n+\n+  va_start (ap, arg);\n+\n+  result = va_arg (ap, unsigned int);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static double\n+vararg_double (unsigned arg, ...)\n+{\n+  va_list ap;\n+  float result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  va_arg (ap, _Decimal128);\n+  result = va_arg (ap, double);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+\n+int\n+main ()\n+{\n+  if (vararg_d32 (3, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 3.0df) abort ();\n+  if (vararg_d64 (4, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 4.0dd) abort ();\n+  if (vararg_d128 (1, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 1.0dl) abort ();\n+  if (vararg_int (0, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 0) abort ();\n+  if (vararg_double (2, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 2.0) abort ();\n+\n+  return 0;\n+}"}, {"sha": "674a522d140b04f9d63cbec8f148a21e6f25e1a7", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-size0.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-size0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-size0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-size0.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+struct S1\n+{\n+  struct\n+  {\n+    _Decimal64 e;\n+  } b[0];\n+};\n+\n+/* Test handling vararg parameters whose size is 0.  */\n+\n+int check_var(int z,...)\n+{\n+  double d;\n+  struct S1 s1;\n+  long long result;\n+  va_list ap;\n+  va_start (ap, z);\n+  d = va_arg (ap, double);\n+  s1 = va_arg (ap, struct S1);\n+  result = va_arg (ap, long long);\n+  va_end (ap);\n+  return (result == 2LL);\n+\n+}\n+\n+int\n+main ()\n+{\n+  struct S1 s1;\n+  struct S1 a1[5];\n+\n+  if (check_var(5, 1.0, s1, 2LL, a1[2], a1[2]) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "43fb5a95b41519cf3d233e09355f6a26ba767806", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-c89.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c89.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89\" } */\n+\n+/* Decimal float keywords are not recognized in C89 mode.  */\n+\n+_Decimal32 x;\t\t/* { dg-error \"error\" } */\n+_Decimal64 y;\t\t/* { dg-error \"error\" } */\n+_Decimal128 z;\t\t/* { dg-error \"error\" } */"}, {"sha": "bc242667e968a4da502c3a41ca357902d6dba9c0", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-c99.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c99.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Decimal float keywords are not recognized in C99 mode.  */\n+\n+_Decimal32 x;\t\t/* { dg-error \"error\" } */\n+_Decimal64 y;\t\t/* { dg-error \"error\" } */\n+_Decimal128 z;\t\t/* { dg-error \"error\" } */"}, {"sha": "a4258aaa8ae655745b90568d80531b9c948b4cc1", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-ignored-c99.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-ignored-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-ignored-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-ignored-c99.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Decimal float keywords are not reserved for c99.  */\n+\n+int _Decimal32 (void)\n+{\n+  return 0;\n+}\n+\n+int foo (int i)\n+{\n+  int _Decimal64 = i * 2;\n+  return _Decimal64;\n+}"}, {"sha": "9492c7985550627591257a89bb030f8936cc82f4", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-pedantic.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-pedantic.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+/* Decimal float is a GCC extension.  */\n+\n+_Decimal32 x;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal64 y;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal128 z;\t\t/* { dg-warning \"GCC extension|ISO C\" } */"}, {"sha": "5929cf089ff3c8f12543170ba731420111c82940", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-reserved.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 3: Decimal floating types.\n+   C99 6.4.1(2): Keywords.\n+   Decimal float keywords cannot be used in other contexts.  */\n+\n+int _Decimal32 (void)\t\t/* { dg-error \"error\" } */\n+{\n+  return 0;\n+}\n+\n+int foo (int i)\n+{\n+  int _Decimal64 = i * 2;\t/* { dg-error \"error\" } */\n+  return _Decimal64;\t\t/* { dg-error \"error\" } */\n+}"}, {"sha": "511d70cd4b071240e3c3d23eb1d7c83f21c06f52", "filename": "gcc/testsuite/gcc.dg/dfp/loop-index.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Floop-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Floop-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Floop-index.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.8.5.2: The for statement.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+void\n+f32 (void)\n+{\n+  _Decimal32 d;\n+  int i;\n+\n+  for (d = 1.1df, i=0; d <= 1.5df; d += 0.1df)\n+    i++;\n+\n+  if (i != 5)\n+    abort();\n+}\n+\n+void\n+f64 (void)\n+{\n+  _Decimal64 d;\n+  int i;\n+\n+  for (d = 1.1dd, i=0; d <= 1.5dd; d += 0.1dd)\n+    i++;\n+\n+  if (i != 5)\n+    abort();\n+}\n+\n+void\n+f128 (void)\n+{\n+  _Decimal128 d;\n+  int i;\n+\n+  for (d = 1.1dl, i=0; d <= 1.5dl; d += 0.1dl)\n+    i++;\n+\n+  if (i != 5)\n+    abort();\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  f32 ();\n+  f64 ();\n+  f128 ();\n+  \n+  return (0);\n+}"}, {"sha": "ff2382b1c750791d33d1f6b84e9c90740ce978ff", "filename": "gcc/testsuite/gcc.dg/dfp/modes.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fmodes.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef float decimal32  __attribute__ ((mode (SD)));\n+typedef float decimal64  __attribute__ ((mode (DD)));\n+typedef float decimal128 __attribute__ ((mode (TD)));\n+\n+int ssize[sizeof (decimal32) == 4 ? 1 : -1];\n+int dsize[sizeof (decimal64) == 8 ? 1 : -1];\n+int tsize[sizeof (decimal128) == 16 ? 1 : -1];\n+\n+int salign = __alignof (decimal32);\n+int dalign = __alignof (decimal64);\n+int talign = __alignof (decimal128);\n+"}, {"sha": "8f2f20860484197dbf8af4086193594452f379c5", "filename": "gcc/testsuite/gcc.dg/dfp/nan-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 4: Characteristics of decimal floating types (not explicit)\n+   C99 5.2.4.2.2: Characteristics of floating types.\n+   A few simple checks on arithmetic operations. */\n+\n+extern void abort (void);\n+\n+int main()\n+{\n+  /* Some possibly non-obvious tests, but most logical\n+     operations on NaN return false, including NaN == NaN. */\n+  if (__builtin_nand32(\"\") == __builtin_nand32(\"\"))\n+    abort();\n+\n+  if (__builtin_nand64(\"\") == __builtin_nand64(\"\"))\n+    abort();\n+\n+  if (__builtin_nand128(\"\") == __builtin_nand128(\"\"))\n+    abort();\n+  \n+  if (!(__builtin_nand32(\"\") != __builtin_nand32(\"\")))\n+    abort();\n+\n+  if (!(__builtin_nand64(\"\") != __builtin_nand64(\"\")))\n+    abort();\n+\n+  if (!(__builtin_nand128(\"\") != __builtin_nand128(\"\")))\n+    abort();\n+\n+  if (__builtin_nand32(\"\") > __builtin_nand32(\"\"))\n+    abort();\n+\n+  if (__builtin_nand64(\"\") >= __builtin_nand64(\"\"))\n+    abort();\n+\n+  if (__builtin_nand128(\"\") <  __builtin_nand128(\"\"))\n+    abort();\n+\n+  if (-__builtin_nand128(\"\") <  +__builtin_nand128(\"\"))\n+    abort();\n+\n+  /* 0.0/0.0 => NaN, but NaN != NaN.  */\n+  if (0.0df/0.0dl == __builtin_nand32(\"\"))\n+    abort();\n+\n+  /* 0.0 * INF => NaN.  */\n+  if (!__builtin_isnand32 (0.0df * __builtin_infd32()))\n+    abort ();\n+\n+  if (!__builtin_isnand64 (0.0dd * __builtin_infd64()))\n+    abort ();\n+\n+  if (!__builtin_isnand128 (0.0dd * __builtin_infd128()))\n+    abort ();\n+\n+  /* INF - INF => NaN.  */\n+  if (!__builtin_isnand32 (__builtin_infd32() - __builtin_infd32()))\n+    abort ();\n+\n+  if (!__builtin_isnand64 (__builtin_infd64() - __builtin_infd64()))\n+    abort ();\n+\n+  if (!__builtin_isnand128 (__builtin_infd128() - __builtin_infd128()))\n+    abort ();\n+\n+  /* INF/INF => NaN.  */\n+  if (!__builtin_isnand32 (__builtin_infd32()/__builtin_infd32()) )\n+    abort ();\n+\n+  if (!__builtin_isnand64 (__builtin_infd64()/__builtin_infd64()) )\n+    abort ();\n+\n+  if (!__builtin_isnand128 (__builtin_infd128()/__builtin_infd128()) )\n+    abort ();\n+  \n+  /* 0.0/0.0 => NaN, but NaN != NaN.  */\n+  if ((0.0dd/0.0df) == (0.0dd/0.0df))\n+    abort();\n+\n+  if (__builtin_nand32(\"\") <  __builtin_infd32())\n+    abort();\n+\n+  if (__builtin_nand32(\"\") >=  __builtin_infd32())\n+    abort();\n+\n+  /* Fixme: Add sqrtdf(-x.df) test when sqrt is supported. */\n+\n+  if (!__builtin_isnand32(__builtin_nand32(\"\")))\n+    abort();\n+\n+  if (!__builtin_isnand64(__builtin_nand64(\"\")))\n+    abort();\n+\n+  if (!__builtin_isnand128(__builtin_nand128(\"\")))\n+    abort();\n+\n+  if (!__builtin_isnand128(8.0df * __builtin_nand128(\"\")))\n+    abort();\n+\n+  if (!__builtin_isnand32(8.1dl - __builtin_nand32(\"\")))\n+    abort();\n+\n+  if (!__builtin_isnand128(__builtin_nand64(\"\") + __builtin_nand128(\"\")))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "848861449fae56d435000235fa2d807ad661a1dc", "filename": "gcc/testsuite/gcc.dg/dfp/nan-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-2.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 4: Characteristics of decimal floating types (not explicit)\n+   C99 5.2.4.2.2: Characteristics of floating types.\n+   A few simple checks on arithmetic operations.  Based on nan-1.c with\n+   the consideration of negative zero.  */\n+\n+extern void abort (void);\n+\n+int main()\n+{\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+\n+  /* Verify that division by negative zero produces a negative infinity \n+     result.  */\n+  d32 = 123.45f;\n+  if (d32/-0.0df != -__builtin_infd32())\n+    abort();\n+  if (123.45df/-0.0df != -__builtin_infd32())\n+    abort();\n+  \n+  d64 = 123.45f;\n+  if (d64/-0.0dd != -__builtin_infd64())\n+    abort();\n+  if (123.45dd/-0.0dd !=  -__builtin_infd64())\n+    abort();\n+\n+  d128 = 123.45f;\n+  if (d128/-0.0dl != -__builtin_infd64())\n+    abort();\n+  if (123.45dl/-0.0dl != -__builtin_infd128())\n+    abort();\n+\n+  d32 = 0.0df;\n+  if (!__builtin_isnand32(-(d32/-0.0df)))\n+    abort();\n+  if (!__builtin_isnand32(-(0.0df/-0.0df)))\n+    abort();\n+\n+  d64 = 0.0dd;\n+  if (!__builtin_isnand64(-(d64/-0.0dd)))\n+    abort();\n+  if (!__builtin_isnand64(-(0.0dd/-0.0dd)))\n+    abort();\n+\n+  d128 = 0.0dl;\n+  if (!__builtin_isnand128(-(d128/-0.0dl)))\n+    abort();\n+  if (!__builtin_isnand128(-(0.0dl/-0.0dl)))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "d7531046fefbe6638f5d5796edf27ad1ccc538b8", "filename": "gcc/testsuite/gcc.dg/dfp/operator-arith-fold.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-arith-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-arith-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-arith-fold.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O\" } */\n+\n+/* C99 6.5.5: Multiplicative operators.\n+   C99 6.5.6: Additive operators.  */\n+\n+extern void link_error (void);\n+\n+int\n+main ()\n+{\n+  _Decimal32 d32_1, d32_2;\n+\n+  /* Compare like-typed positive constants. */\n+  if (2.99df + 5.1df != 8.09df)\n+    link_error ();\n+\n+  if (5.77df - 2.22dd != 3.55df)\n+    link_error ();\n+\n+  if (2.0dl * 3.7dd * -2 != -14.8df)\n+    link_error ();\n+\n+  if (.18df / -.2df + 1 != 1.e-1dd)\n+    link_error ();\n+\n+  d32_1 = 3.0df;\n+  d32_2 = 1.0df;\n+\n+  if (!__builtin_constant_p (d32_1 + 0.2df))\n+    link_error ();\n+\n+  if (!__builtin_constant_p (1.0df / 3.0df))\n+    link_error ();\n+\n+  if (!__builtin_constant_p (d32_2 / d32_1))\n+    link_error ();\n+\n+  d32_2 = 2.0df;\n+  if (!__builtin_constant_p (d32_2 / d32_1))\n+    link_error ();\n+\n+  return 0;\n+}"}, {"sha": "79f91b47aafa32233c79b0bf3cda3540d9679282", "filename": "gcc/testsuite/gcc.dg/dfp/operator-assignment.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.16 Assignment operators.\n+   Verify the compound assignment operator for decimal float types,\n+   using it with other decimal float types, integers, and other binary\n+   float types cast to decimal float types.  */\n+\n+extern void abort (void);\n+\n+#define OPERATE(OPRD1,OPRT,OPRD2,RLT)\t\t\\\n+  if (( OPRD1 OPRT OPRD2 )!= RLT)\t\t\\\n+    abort ();\n+\n+#define DECIMAL_COMPOUND_ASSIGNMENT(TYPE, OPRD)\t\\\n+{\t\t\t\t\t\t\\\n+  _Decimal##TYPE d = OPRD;\t\t\t\\\n+  OPERATE(d,+=,1,(OPRD + 1));\t\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,0,OPRD);\t\t\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,(-1),(OPRD - 1));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,d32a,(OPRD + d32a));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,d64a,(OPRD + d64a));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,d128a,(OPRD + d128a));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,(_Decimal##TYPE)1.1,(OPRD + (_Decimal##TYPE)1.1));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,+=,(_Decimal##TYPE)2.2f,(OPRD + (_Decimal##TYPE)2.2f));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,-=,1,(OPRD - 1));\t\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,-=,0,OPRD);\t\t\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,-=,(-1),(OPRD + 1));\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,-=,d32a,OPRD-d32a);\t\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,-=,d64a,OPRD-d64a);\t\t\\\n+  d = OPRD;\t\t\t\t\\\n+  OPERATE(d,-=,d128a,OPRD-d128a);\t\\\n+}\n+\n+int\n+main ()\n+{\n+  _Decimal32 d32 = 1.23456fd, d32a = 1.2df;\n+  _Decimal64 d64 = 23.456789dd, d64a = 2.8dd;\n+  _Decimal128 d128 = 345.67890123456789ld, d128a = 4.7dl;\n+\n+  DECIMAL_COMPOUND_ASSIGNMENT(32, d32);\n+  DECIMAL_COMPOUND_ASSIGNMENT(64, d64);\n+  DECIMAL_COMPOUND_ASSIGNMENT(128, d128);\n+\n+  return 0;\n+}"}, {"sha": "8523cb91a5f5678b3e155d10fa90df8d0b27b400", "filename": "gcc/testsuite/gcc.dg/dfp/operator-bitwise.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-bitwise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-bitwise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-bitwise.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.10: Bitwise AND operator.\n+   C99 6.5.11: Bitwise exclusive OR operator.\n+   C99 6.5.12: Bitwise inclusive OR operator.\n+\n+   Test that these operators do not accept decimal float operands.  */\n+\n+extern void abort (void);\n+\n+#define OPERATE(OPRD1,OPRT,OPRD2)\t\t\\\n+do\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  OPRD1 OPRT OPRD2;\t\t\t\t\\\n+} while (0)\n+\n+\n+\n+#define DECIMAL_BITWISE_OPERATOR(OPRT,OPRD)\t\\\n+do\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+OPERATE(OPRD,OPRT,1);\t\t\t\t\\\n+OPERATE(OPRD,OPRT,0);\t\t\t\t\\\n+OPERATE(OPRD,OPRT,0x15);\t\t\t\\\n+OPERATE(0,OPRT,OPRD);\t\t\t\t\\\n+OPERATE(1,OPRT,OPRD);\t\t\t\t\\\n+OPERATE(0x15,OPRT,OPRD);\t\t\t\\\n+} while (0)\n+\n+void operator_notfor_decimal()\n+{\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+\n+  /* C99 Section 6.5.7 Bitwise shift operators.  Operands must have\n+     integer type (which the decimal float types are not).  */\n+\n+  d32 << 1;   /* { dg-error \"invalid operands to binary\" } */\n+  d32 >> 1;   /* { dg-error \"invalid operands to binary\" } */\n+  d64 << 1;   /* { dg-error \"invalid operands to binary\" } */\n+  d64 >> 1;   /* { dg-error \"invalid operands to binary\" } */\n+  d128 << 1;  /* { dg-error \"invalid operands to binary\" } */\n+  d128 >> 1;  /* { dg-error \"invalid operands to binary\" } */\n+\n+  DECIMAL_BITWISE_OPERATOR(&,d32); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(&,d64); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(&,d128); /* { dg-error \"invalid operands to binary\" } */\n+\n+  /* C99 Section 6.5.{10,11,12} Bitwise operator.  Constraints: Each of\n+   the operands shall have integer type.  DFP type is reject by compiler\n+   when bitwise operation is performed.  */\n+\n+  DECIMAL_BITWISE_OPERATOR(&,d32); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(&,d64); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(&,d128); /* { dg-error \"invalid operands to binary\" } */\n+\n+  DECIMAL_BITWISE_OPERATOR(|,d32); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(|,d64); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(|,d128); /* { dg-error \"invalid operands to binary\" } */\n+\n+  DECIMAL_BITWISE_OPERATOR(^,d32); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(^,d64); /* { dg-error \"invalid operands to binary\" } */\n+  DECIMAL_BITWISE_OPERATOR(^,d128); /* { dg-error \"invalid operands to binary\" } */\n+}"}, {"sha": "764e176945622d311e5be454d916a07c44b4568d", "filename": "gcc/testsuite/gcc.dg/dfp/operator-comma.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-comma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-comma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-comma.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.17: Comma operator.\n+   Test with decimal float operands.  */\n+\n+extern void abort (void);\n+static int failcnt = 0;\n+                                                                                \n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+volatile _Decimal32 d32a, d32b, d32c;\n+volatile _Decimal64 d64a, d64b, d64c;\n+volatile _Decimal128 d128a, d128b, d128c;\n+\n+void\n+init ()\n+{\n+  d32b = 123.456e94df;\n+  d64b = 12.3456789012345e383dd;\n+  d128b = 12345.6789012345678901e4000dl;\n+\n+  d32c = 1.3df;\n+  d64c = 1.2dd;\n+  d128c = 1.1dl;\n+}\n+\n+int\n+main ()\n+{\n+  d32a = (d32b, d32c);\n+  if (d32a != d32c)\n+    FAILURE\n+  d64a = (d64b, 7.89dd, d64c);\n+  if (d64a != d64c)\n+    FAILURE\n+  d128a = (45678.987654dl, d128c, d128b);\n+  if (d128a != d128b)\n+    FAILURE\n+  d128a = (d32b, d64b, d128b);\n+  if (d128a != d128b)\n+    FAILURE\n+  d32a = (d32b, 12, d64c);\n+  if (d32a != d64c)\n+    FAILURE;\n+  d64a = (d64b, d32b, 12);\n+  if (d64a != 12.0dd)\n+    FAILURE;\n+\n+  return 0;\n+}"}, {"sha": "cade2dce1d9f351003e1d3e9fe34ac4fba2a0912", "filename": "gcc/testsuite/gcc.dg/dfp/operator-cond.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-cond.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.15 Conditional operator.\n+   Test with decimal float operands.  */\n+\n+extern void abort (void);\n+static int failcnt = 0;\n+                                                                                \n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+volatile _Decimal32 d32a, d32b, d32c;\n+volatile _Decimal64 d64a, d64b, d64c;\n+volatile _Decimal128 d128a, d128b, d128c;\n+volatile int i, yes, no;\n+\n+void\n+init ()\n+{\n+  d32b = 123.456e94df;\n+  d64b = 12.3456789012345e383dd;\n+  d128b = 12345.6789012345678901e4000dl;\n+\n+  d32c = 1.3df;\n+  d64c = 1.2dd;\n+  d128c = 1.1dl;\n+\n+  i = 2;\n+  yes = 1;\n+  no = 0;\n+}\n+\n+int\n+main ()\n+{\n+  /* Operands and the result are all the same decimal float type.  */\n+  d32a = yes ? d32b : d32c;\n+  if (d32a != d32b)\n+    FAILURE\n+  d64a = no ? d64b : d64c;\n+  if (d64a != d64b)\n+    FAILURE\n+  d128a = yes ? d128b : d128c;\n+  if (d128a != d128b)\n+    FAILURE\n+\n+  /* Operand types are different.  */\n+  d128a = yes ? d32b : d64b;\n+  if (d128a != d32b)\n+    FAILURE\n+  d128a = yes ? d128b : d64b;\n+  if (d128a != d128b)\n+    FAILURE\n+  d128a = no ? d32b : d128b;\n+  if (d128a != d128b)\n+    FAILURE\n+\n+  return 0;\n+}"}, {"sha": "5130b113e983773cd1738e01662eb17def0848c9", "filename": "gcc/testsuite/gcc.dg/dfp/operator-logical.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-logical.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-logical.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-logical.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 Logical AND operator.\n+   C99 Logical OR operator.\n+   Test with decimal float operands.  */\n+\n+extern void abort (void);\n+\n+#define OPERATE(OPRD1,OPRT,OPRD2,RLT)\t\\\n+do\t\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  if (( (OPRD1) OPRT (OPRD2) )!= RLT)\t\\\n+    abort ();\t\t\t\t\\\n+} while (0)\n+\n+#define DECIMAL_LOGICAL_OR(OPRD)\t\\\n+do\t\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  OPRD = 1.0;\t\t\t\t\\\n+  OPERATE(1,||,OPRD,1);\t\t\t\\\n+  OPERATE(0,||,OPRD,1);\t\t\t\\\n+  OPERATE(OPRD,||,1,1);\t\t\t\\\n+  OPERATE(OPRD,||,0,1);\t\t\t\\\n+  OPRD = 0.0;\t\t\t\t\\\n+  OPERATE(1,||,OPRD,1);\t\t\t\\\n+  OPERATE(0,||,OPRD,0);\t\t\t\\\n+  OPERATE(OPRD,||,1,1);\t\t\t\\\n+  OPERATE(OPRD,||,0,0);\t\t\t\\\n+} while (0)\n+\n+#define DECIMAL_LOGICAL_AND(OPRD)\t\\\n+do\t\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  OPRD = 1.0;\t\t\t\t\\\n+  OPERATE(1,&&,OPRD,1);\t\t\t\\\n+  OPERATE(0,&&,OPRD,0);\t\t\t\\\n+  OPERATE(OPRD,&&,1,1);\t\t\t\\\n+  OPERATE(OPRD,&&,0,0);\t\t\t\\\n+  OPRD = 0.0;\t\t\t\t\\\n+  OPERATE(1,&&,OPRD,0);\t\t\t\\\n+  OPERATE(0,&&,OPRD,0);\t\t\t\\\n+  OPERATE(OPRD,&&,1,0);\t\t\t\\\n+  OPERATE(OPRD,&&,0,0);\t\t\t\\\n+} while (0)\n+\n+int\n+main ()\n+{\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+\n+  /* C99 Section 6.5.{13,14} Logical operator.  Constraints Each of the\n+     operands shall have scalar type.  DFP types would obey this.  */\n+  DECIMAL_LOGICAL_OR (d32);\n+  DECIMAL_LOGICAL_AND (d32);\n+\n+  DECIMAL_LOGICAL_OR (d64);\n+  DECIMAL_LOGICAL_AND (d64);\n+\n+  DECIMAL_LOGICAL_OR (d128);\n+  DECIMAL_LOGICAL_AND (d128);\n+\n+  return 0;\n+}"}, {"sha": "c3f67f6939b47421dbc136e7d9109e9cdbb03c98", "filename": "gcc/testsuite/gcc.dg/dfp/operator-unary.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-unary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-unary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-unary.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.3 Unary operators.  */\n+\n+extern void abort (void);\n+\n+#define AUTO_INCREASE_DECREASE(TYPE,SUFFIX)   \t\t\\\n+do                                            \t\t\\\n+{                                             \t\t\\\n+  _Decimal##TYPE in_de_d##TYPE = 0.0##SUFFIX;         \t\\\n+  if (in_de_d##TYPE++) abort ();              \t\t\\\n+  if (--in_de_d##TYPE) abort ();              \t\t\\\n+  if (++in_de_d##TYPE == 0.0##SUFFIX) abort (); \t\\\n+  if (in_de_d##TYPE-- == 0.0##SUFFIX) abort (); \t\\\n+} while(0)\n+\n+#define UNARY_OPERATOR(TYPE,SUFFIX)           \t\t\\\n+do                                            \t\t\\\n+{                                             \t\t\\\n+ _Decimal##TYPE unary_d##TYPE = 1.0##SUFFIX;  \t\t\\\n+ _Decimal##TYPE* unary_dp##TYPE;              \t\t\\\n+ /*  & operator.  */                          \t\t\\\n+ unary_dp##TYPE = &(unary_d##TYPE);           \t\t\\\n+ /*  * operator.  */                          \t\t\\\n+ unary_d##TYPE = *(unary_dp##TYPE);           \t\t\\\n+ /*  - operator.  */                          \t\t\\\n+ unary_d##TYPE = -unary_d##TYPE;              \t\t\\\n+ if (unary_d##TYPE != -1.0##SUFFIX) abort ();         \t\\\n+ /*  + operator.  */                          \t\t\\\n+ unary_d##TYPE = +unary_d##TYPE;              \t\t\\\n+ if (unary_d##TYPE != -1.0##SUFFIX) abort ();         \t\\\n+ if (!unary_d##TYPE) abort (); /*! operator.  */ \t\\\n+} while (0)\n+\n+int\n+main ()\n+{\n+  /*  C99 6.5.3.1 Prefix increment and decrement operators. */\n+  AUTO_INCREASE_DECREASE(32, DF);\n+  AUTO_INCREASE_DECREASE(64, DD);\n+  AUTO_INCREASE_DECREASE(128, DL);\n+\n+  /*  C99 6.5.3 Unary operators.  */\n+  UNARY_OPERATOR(32, DF);\n+  UNARY_OPERATOR(64, DD);\n+  UNARY_OPERATOR(128, DL);\n+\n+  /*  C99 6.5.3 Unary operators for zero values.  */\n+  if (- +0.df != -0.df) abort ();\n+  if (+ -0.df != -0.df) abort ();\n+  if (- -0.df != +0.df) abort ();\n+\n+  return 0;\n+}"}, {"sha": "26ea259461101ab72cff09f12df33f2df0fe872c", "filename": "gcc/testsuite/gcc.dg/dfp/snan.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsnan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsnan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsnan.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+/* FIXME: this test needs to be conditional to systems with POSIX signals.  */\n+\n+#include <signal.h>\n+\n+extern void exit(int status);\n+extern void abort(void);\n+\n+void go_quietly (int arg)\n+{\n+  exit (0);\n+}\n+\n+int main()\n+{\n+  _Decimal32 d = 1.5df;\n+\n+  /* Enable signaling NaNs using a scaffolding libgcc function.  */\n+  __dfp_enable_traps ();\n+  signal (SIGFPE, go_quietly);\n+\n+  d = d / 0.0df;\n+\n+  /* Never reached.  */\n+  abort ();\n+  return 0;\n+}"}, {"sha": "abb532771da5b52e8aed8d8b6998936a56d8e6a0", "filename": "gcc/testsuite/gcc.dg/dfp/struct-layout-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-layout-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-layout-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-layout-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+struct S1\n+{\n+  _Decimal64 a[0];\n+};\n+\n+struct S2\n+{\n+  struct\n+  {\n+    _Decimal64 e;\n+  } b[0];\n+};\n+\n+struct S3\n+{\n+  union\n+  {\n+    _Decimal64 c;\n+  } a[0];\n+};\n+\n+struct S4\n+{\n+  int a[0];\n+  _Decimal64 b[0];\n+};\n+\n+struct S5\n+{\n+  union\n+  {\n+    _Decimal64 c[0];\n+  } a;\n+};\n+\n+static int failcnt = 0;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE do                             \\\n+{ printf (\"failed at line %d\\n\", __LINE__);    \\\n+  failcnt++;                                   \\\n+}while(0)\n+#else\n+#define FAILURE abort ()\n+#endif\n+\n+int check_var (int z, ...)\n+{\n+  long long result;\n+  va_list ap;\n+  va_start (ap, z);\n+  va_arg (ap, struct S1);\n+  result = va_arg (ap, long long);\n+  va_end (ap);\n+\n+  return (result == 2LL);\n+}\n+\n+int main ()\n+{\n+  struct S1 s1;\n+  struct S2 s2;\n+  struct S3 s3;\n+  struct S4 s4;\n+  struct S5 s5;\n+\n+  if (check_var (2, s1, 2LL) == 0)\n+    FAILURE;\n+  if (check_var (2, s2, 2LL) == 0)\n+    FAILURE;\n+  if (check_var (2, s3, 2LL) == 0)\n+    FAILURE;\n+  if (check_var (2, s4, 2LL) == 0)\n+    FAILURE;\n+  if (check_var (2, s5, 2LL) == 0)\n+    FAILURE;\n+\n+  if (failcnt)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "88589260c7752431048fcf5a6249acb0b3c803ec", "filename": "gcc/testsuite/gcc.dg/dfp/struct-union.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-union.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-union.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-union.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wall\" } */\n+\n+/* C99 6.5.2.3 Structure and union members.\n+   If the first expression has qualified type, the result has the so-qualified \n+   version of the type of the designated member.  */\n+\n+struct s {_Decimal32 d32; const _Decimal64 d64;};\n+struct sv { volatile _Decimal32 d32; volatile _Decimal64 d64; };\n+union u \n+{\n+  const _Decimal64 d64; \n+  _Decimal32 d32; \n+  const struct s cs;\n+};\n+\n+struct s s;\n+struct sv sv;\n+const struct s cs;\n+\n+union u u;\n+const union u cu;\n+\n+struct s g (struct s s)\n+{\n+  return s;\n+}\n+\n+union u h (union u u)\n+{\n+  return u;\n+}\n+\n+void f()\n+{\n+  cs.d32 = 1.23dd; /* { dg-error \"assignment of read-only variable\" } */\n+  cs.d64 = 1.23df; /* { dg-error \"assignment of read-only variable\" } */\n+  s.d64 = 1.23df;  /* { dg-error \"assignment of read-only member\" } */\n+\n+  s.d32 = 1.23dd;\n+  u.d32 = 1.23dd;\n+\n+  u.d64 = 1.23df;    /* { dg-error \"assignment of read-only member\" } */\n+  u.cs.d32 = 1.23dd; /* { dg-error \"assignment of read-only member\" } */\n+  u.cs.d64 = 1.23df; /* { dg-error \"assignment of read-only member\" } */\n+  \n+  cu.d32 = 1.23dd;   /* { dg-error \"assignment of read-only variable\" } */\n+\n+  cu.d64 = 1.23df;    /* { dg-error \"assignment of read-only variable\" } */\n+  cu.cs.d32 = 1.23dd; /* { dg-error \"assignment of read-only variable\" } */\n+  cu.cs.d64 = 1.23df; /* { dg-error \"assignment of read-only variable\" } */\n+\n+  /* f().x is a valid postfix expression but is not an lvalue if \n+     function f() returning a structure or union.  */\n+  g(s).d32 = 1.23dd;  /* { dg-error \"lvalue required\" } */\n+  h(u).d64 = 1.23df;  /* { dg-error \"lvalue required\" } */\n+\n+  /* Test assignment to volatile structure members.  */\n+  sv.d32 = 1.1df;\n+  sv.d64 = 1.1dd;\n+}\n+"}, {"sha": "77540a01d081b412990475f37e5e423a0603974a", "filename": "gcc/testsuite/gcc.dg/dfp/typespec.c", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,303 @@\n+/* Test for valid and invalid combinations of type specifiers.\n+   Based off gcc.dg/test-spec-1.c */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef char type;\n+void _Decimal32 *x0;  /* { dg-error \"error\" \"void _Decimal32\" } */\n+void _Decimal64 *x1;  /* { dg-error \"error\" \"void _Decimal64\" } */\n+void _Decimal128 *x2; /* { dg-error \"error\" \"void _Decimal128\" } */\n+char _Decimal32 *x3;  /* { dg-error \"error\" \"char _Decimal32\" } */\n+char _Decimal64 *x4;  /* { dg-error \"error\" \"char _Decimal64\" } */\n+char _Decimal128 *x5;  /* { dg-error \"error\" \"char _Decimal128\" } */\n+short _Decimal32 *x6; /* { dg-error \"error\" \"short _Decimal32\" } */\n+short _Decimal64 *x7; /* { dg-error \"error\" \"short _Decimal64\" } */\n+short _Decimal128 *x8; /* { dg-error \"error\" \"short _Decimal128\" } */\n+int _Decimal32 *x9;   /* { dg-error \"error\" \"int _Decimal32\" } */\n+int _Decimal64 *x10;  /* { dg-error \"error\" \"int _Decimal64\" } */\n+int _Decimal128 *x11; /* { dg-error \"error\" \"int _Decimal128\" } */\n+long _Decimal32 *x12;   /* { dg-error \"error\" \"long _Decimal32\" } */\n+long _Decimal64 *x13;  /* { dg-error \"error\" \"long _Decimal64\" } */\n+long _Decimal128 *x14; /* { dg-error \"error\" \"long _Decimal128\" } */\n+float _Decimal32 *x15;   /* { dg-error \"error\" \"float _Decimal32\" } */\n+float _Decimal64 *x16;  /* { dg-error \"error\" \"float _Decimal64\" } */\n+float _Decimal128 *x17; /* { dg-error \"error\" \"float _Decimal128\" } */\n+double _Decimal32 *x18;   /* { dg-error \"error\" \"double _Decimal32\" } */\n+double _Decimal64 *x19;  /* { dg-error \"error\" \"double _Decimal64\" } */\n+double _Decimal128 *x20; /* { dg-error \"error\" \"double _Decimal128\" } */\n+signed _Decimal32 *x21;   /* { dg-error \"error\" \"signed _Decimal32\" } */\n+signed _Decimal64 *x22;  /* { dg-error \"error\" \"signed _Decimal64\" } */\n+signed _Decimal128 *x23; /* { dg-error \"error\" \"signed _Decimal128\" } */\n+_Bool _Decimal32 *x24;   /* { dg-error \"error\" \"_Bool _Decimal32\" } */\n+_Bool _Decimal64 *x25;  /* { dg-error \"error\" \"_Bool _Decimal64\" } */\n+_Bool _Decimal128 *x26; /* { dg-error \"error\" \"_Bool _Decimal128\" } */\n+int _Decimal32 *x27;   /* { dg-error \"error\" \"int _Decimal32\" } */\n+int _Decimal64 *x28;  /* { dg-error \"error\" \"int _Decimal64\" } */\n+int _Decimal128 *x29; /* { dg-error \"error\" \"int _Decimal128\" } */\n+type _Decimal32 *x30;   /* { dg-error \"error\" \"type _Decimal32\" } */\n+type _Decimal64 *x31;  /* { dg-error \"error\" \"type _Decimal64\" } */\n+type _Decimal128 *x32; /* { dg-error \"error\" \"type _Decimal128\" } */\n+char signed _Decimal32 *x33;  /* { dg-error \"error\" \"char signed _Decimal32\" } */\n+char signed _Decimal64 *x34;  /* { dg-error \"error\" \"char signed _Decimal64\" } */\n+char signed _Decimal128 *x35; /* { dg-error \"error\" \"char signed _Decimal128\" } */\n+char unsigned _Decimal32 *x36; /* { dg-error \"error\" \"char unsigned _Decimal32\" } */\n+char unsigned _Decimal64 *x37; /* { dg-error \"error\" \"char unsigned _Decimal64\" } */\n+char unsigned _Decimal128 *x38; /* { dg-error \"error\" \"char unsigned _Decimal128\" } */\n+short _Decimal32 *x39;  /* { dg-error \"error\" \"short _Decimal32\" } */\n+short _Decimal64 *x40;  /* { dg-error \"error\" \"short _Decimal64\" } */\n+short _Decimal128 *x41; /* { dg-error \"error\" \"short _Decimal128\" } */\n+short signed _Decimal32 *x42;  /* { dg-error \"error\" \"short signed _Decimal32\" } */\n+short signed _Decimal64 *x43;  /* { dg-error \"error\" \"short signed _Decimal64\" } */\n+short signed _Decimal128 *x44; /* { dg-error \"error\" \"short signed _Decimal128\" } */\n+short unsigned _Decimal32 *x45;  /* { dg-error \"error\" \"short unsigned _Decimal32\" } */\n+short unsigned _Decimal64 *x46;  /* { dg-error \"error\" \"short unsigned _Decimal64\" } */\n+short unsigned _Decimal128 *x47; /* { dg-error \"error\" \"short unsigned _Decimal128\" } */\n+_Decimal32 short*x48;  /* { dg-error \"error\" \"_Decimal32 short\" } */\n+_Decimal64 short*x49;  /* { dg-error \"error\" \"_Decimal64 short\" } */\n+_Decimal128 short*x50; /* { dg-error \"error\" \"_Decimal128 short\" } */\n+_Decimal32 short signed*x51;  /* { dg-error \"error\" \"_Decimal32 short signed\" } */\n+_Decimal64 short signed*x52;  /* { dg-error \"error\" \"_Decimal64 short signed\" } */\n+_Decimal128 short signed*x53; /* { dg-error \"error\" \"_Decimal128 short signed\" } */\n+_Decimal32 short unsigned*x54;  /* { dg-error \"error\" \"_Decimal32 short unsigned\" } */\n+_Decimal64 short unsigned*x55;  /* { dg-error \"error\" \"_Decimal64 short unsigned\" } */\n+_Decimal128 short unsigned*x56; /* { dg-error \"error\" \"_Decimal128 short unsigned\" } */\n+_Decimal32 long*x57;  /* { dg-error \"error\" \"_Decimal32 long\" } */\n+_Decimal64 long*x58;  /* { dg-error \"error\" \"_Decimal64 long\" } */\n+_Decimal128 long*x59; /* { dg-error \"error\" \"_Decimal128 long\" } */\n+_Decimal32 long signed*x60;  /* { dg-error \"error\" \"_Decimal32 long signed\" } */\n+_Decimal64 long signed*x61;  /* { dg-error \"error\" \"_Decimal64 long signed\" } */\n+_Decimal128 long signed*x62; /* { dg-error \"error\" \"_Decimal128 long signed\" } */\n+_Decimal32 long unsigned*x63;  /* { dg-error \"error\" \"_Decimal32 long unsigned\" } */\n+_Decimal64 long unsigned*x64;  /* { dg-error \"error\" \"_Decimal64 long unsigned\" } */\n+_Decimal128 long unsigned*x65; /* { dg-error \"error\" \"_Decimal128 long unsigned\" } */\n+_Decimal32 signed long*x66;  /* { dg-error \"error\" \"_Decimal32 signed long\" } */\n+_Decimal64 signed long*x67;  /* { dg-error \"error\" \"_Decimal64 signed long\" } */\n+_Decimal128 signed long*x68; /* { dg-error \"error\" \"_Decimal128 signed long\" } */\n+_Decimal32 signed short*x69;  /* { dg-error \"error\" \"_Decimal32 signed short\" } */\n+_Decimal64 signed short*x70;  /* { dg-error \"error\" \"_Decimal64 signed short\" } */\n+_Decimal128 signed short*x71; /* { dg-error \"error\" \"_Decimal128 signed short\" } */\n+int signed _Decimal32 *x72;  /* { dg-error \"error\" \"int signed _Decimal32\" } */\n+int signed _Decimal64 *x73;  /* { dg-error \"error\" \"int signed _Decimal64\" } */\n+int signed _Decimal128 *x74;  /* { dg-error \"error\" \"int signed _Decimal128\" } */\n+int unsigned _Decimal32 *x75;  /* { dg-error \"error\" \"int unsigned _Decimal32\" } */\n+int unsigned _Decimal64 *x76;  /* { dg-error \"error\" \"int unsigned _Decimal64\" } */\n+int unsigned _Decimal128 *x77; /* { dg-error \"error\" \"int unsigned _Decimal128\" } */\n+long int _Decimal32 *x78;  /* { dg-error \"error\" \"long int _Decimal32\" } */\n+long int _Decimal64 *x79;  /* { dg-error \"error\" \"long int _Decimal64\" } */\n+long int _Decimal128 *x80; /* { dg-error \"error\" \"long int _Decimal128\" } */\n+long long _Decimal32 *x81;  /* { dg-error \"error\" \"long long _Decimal32\" } */\n+long long _Decimal64 *x82;  /* { dg-error \"error\" \"long long _Decimal64\" } */\n+long long _Decimal128 *x83; /* { dg-error \"error\" \"long long _Decimal128\" } */\n+long double _Decimal32 *x84;  /* { dg-error \"error\" \"long double _Decimal32\" } */\n+long double _Decimal64 *x85;  /* { dg-error \"error\" \"long double _Decimal64\" } */\n+long double _Decimal128 *x86; /* { dg-error \"error\" \"long double _Decimal128\" } */\n+long signed _Decimal32 *x87;  /* { dg-error \"error\" \"long signed _Decimal32\" } */\n+long signed _Decimal64 *x88;  /* { dg-error \"error\" \"long signed _Decimal64\" } */\n+long signed _Decimal128 *x89; /* { dg-error \"error\" \"long signed _Decimal128\" } */\n+long unsigned _Decimal32 *x90;  /* { dg-error \"error\" \"long unsigned _Decimal32\" } */\n+long unsigned _Decimal64 *x91;  /* { dg-error \"error\" \"long unsigned _Decimal64\" } */\n+long unsigned _Decimal128 *x92; /* { dg-error \"error\" \"long unsigned _Decimal128\" } */\n+double long _Decimal32 *x93;  /* { dg-error \"error\" \"double long _Decimal32\" } */\n+double long _Decimal64 *x94;  /* { dg-error \"error\" \"double long _Decimal64\" } */\n+double long _Decimal128 *x95; /* { dg-error \"error\" \"double long _Decimal128\" } */\n+signed char _Decimal32 *x96;   /* { dg-error \"error\" \"signed char _Decimal32\" } */\n+signed char _Decimal64 *x97;  /* { dg-error \"error\" \"signed char _Decimal64\" } */\n+signed char _Decimal128 *x98; /* { dg-error \"error\" \"signed char _Decimal128\" } */\n+signed short _Decimal32 *x99;   /* { dg-error \"error\" \"signed short _Decimal32\" } */\n+signed short _Decimal64 *x100;  /* { dg-error \"error\" \"signed short _Decimal64\" } */\n+signed short _Decimal128 *x101; /* { dg-error \"error\" \"signed short _Decimal128\" } */\n+signed int _Decimal32 *x102;  /* { dg-error \"error\" \"signed int _Decimal32\" } */\n+signed int _Decimal64 *x103;  /* { dg-error \"error\" \"signed int _Decimal64\" } */\n+signed int _Decimal128 *x104; /* { dg-error \"error\" \"signed int _Decimal128\" } */\n+signed long _Decimal32 *105x; /* { dg-error \"error\" \"signed long _Decimal32\" } */\n+signed long _Decimal64 *x107; /* { dg-error \"error\" \"signed long _Decimal64\" } \\*/\n+signed long _Decimal128 *x107; /* { dg-error \"error\" \"signed long _Decimal128\" } \\*/\n+unsigned char _Decimal32 *x108; /* { dg-error \"error\" \"unsigned char _Decimal32\" } */\n+unsigned char _Decimal64 *x109; /* { dg-error \"error\" \"unsigned char _Decimal64\" } */\n+unsigned char _Decimal128 *x110; /* { dg-error \"error\" \"unsigned char _Decimal128\" } */\n+unsigned short _Decimal32 *x111; /* { dg-error \"error\" \"unsigned short _Decimal32\" } */\n+unsigned short _Decimal64 *x112; /* { dg-error \"error\" \"unsigned short _Decimal64\" } */\n+unsigned short _Decimal128 *x113; /* { dg-error \"error\" \"unsigned short _Decimal128\" } */\n+unsigned int _Decimal32 *x114; /* { dg-error \"error\" \"unsigned int _Decimal32\" } */\n+unsigned int _Decimal64 *x115; /* { dg-error \"error\" \"unsigned int _Decimal64\" } */\n+unsigned int _Decimal128 *x116; /* { dg-error \"error\" \"unsigned int _Decimal128\" } */\n+unsigned long _Decimal32 *x117; /* { dg-error \"error\" \"unsigned long _Decimal32\" } */\n+unsigned long _Decimal64 *x118; /* { dg-error \"error\" \"unsigned long _Decimal64\" } */\n+unsigned long _Decimal128 *x119; /* { dg-error \"error\" \"unsigned long _Decimal128\" } */\n+short int signed _Decimal32 *x120; /* { dg-error \"error\" \"short int signed _Decimal32\" } */\n+short int signed _Decimal64 *x121; /* { dg-error \"error\" \"short int signed _Decimal64\" } */\n+short int signed _Decimal128 *x122; /* { dg-error \"error\" \"short int signed _Decimal128\" } */\n+short int unsigned _Decimal32 *x123; /* { dg-error \"error\" \"short int unsigned _Decimal32\" } */\n+short int unsigned _Decimal64 *x124; /* { dg-error \"error\" \"short int unsigned _Decimal64\" } */\n+short int unsigned _Decimal128 *x125; /* { dg-error \"error\" \"short int unsigned _Decimal128\" } */\n+short signed int _Decimal32 *x126; /* { dg-error \"error\" \"short signed int _Decimal32\" } */\n+short signed int _Decimal64 *x127; /* { dg-error \"error\" \"short signed int _Decimal64\" } */\n+short signed int _Decimal128 *x128; /* { dg-error \"error\" \"short signed int _Decimal128\" } */\n+short unsigned int _Decimal32 *x129; /* { dg-error \"error\" \"short unsigned int _Decimal32\" } */\n+short unsigned int _Decimal64 *x130; /* { dg-error \"error\" \"short unsigned int _Decimal64\" } */\n+short unsigned int _Decimal128 *x131; /* { dg-error \"error\" \"short unsigned int _Decimal128\" } */\n+int short signed _Decimal32 *x132; /* { dg-error \"error\" \"int short signed _Decimal32\" } */\n+int short signed _Decimal64 *x133; /* { dg-error \"error\" \"int short signed _Decimal64\" } */\n+int short signed _Decimal128 *x134; /* { dg-error \"error\" \"int short signed _Decimal128\" } */\n+int short unsigned _Decimal32 *x135; /* { dg-error \"error\" \"int short unsigned _Decimal32\" } */\n+int short unsigned _Decimal64 *x136; /* { dg-error \"error\" \"int short unsigned _Decimal64\" } */\n+int short unsigned _Decimal128 *x137; /* { dg-error \"error\" \"int short unsigned _Decimal128\" } */\n+int long long _Decimal32 *x138; /* { dg-error \"error\" \"int long long _Decimal32\" } */\n+int long long _Decimal64 *x139; /* { dg-error \"error\" \"int long long _Decimal64\" } */\n+int long long _Decimal128 *x140; /* { dg-error \"error\" \"int long long _Decimal128\" } */\n+int long signed _Decimal32 *x141; /* { dg-error \"error\" \"int long signed _Decimal32\" } */\n+int long signed _Decimal64 *x142; /* { dg-error \"error\" \"int long signed _Decimal64\" } */\n+int long signed _Decimal128 *x143; /* { dg-error \"error\" \"int long signed _Decimal128\" } */\n+int long unsigned _Decimal32 *x144; /* { dg-error \"error\" \"int long unsigned _Decimal32\" } */\n+int long unsigned _Decimal64 *x145; /* { dg-error \"error\" \"int long unsigned _Decimal64\" } */\n+int long unsigned _Decimal128 *x146; /* { dg-error \"error\" \"int long unsigned _Decimal128\" } */\n+int signed short _Decimal32 *x147; /* { dg-error \"error\" \"int signed short _Decimal32\" } */\n+int signed short _Decimal64 *x148; /* { dg-error \"error\" \"int signed short _Decimal64\" } */\n+int signed short _Decimal128 *x149; /* { dg-error \"error\" \"int signed short _Decimal128\" } */\n+int signed long _Decimal32 *x150; /* { dg-error \"error\" \"int signed long _Decimal32\" } */\n+int signed long _Decimal64 *x151; /* { dg-error \"error\" \"int signed long _Decimal64\" } */\n+int signed long _Decimal128 *x152; /* { dg-error \"error\" \"int signed long _Decimal128\" } */\n+int unsigned short _Decimal32 *x153; /* { dg-error \"error\" \"int unsigned short _Decimal32\" } */\n+int unsigned short _Decimal64 *x154; /* { dg-error \"error\" \"int unsigned short _Decimal64\" } */\n+int unsigned short _Decimal128 *x155; /* { dg-error \"error\" \"int unsigned short _Decimal128\" } */\n+int unsigned long _Decimal32 *x156; /* { dg-error \"error\" \"int unsigned long _Decimal32\" } */\n+int unsigned long _Decimal64 *x157; /* { dg-error \"error\" \"int unsigned long _Decimal64\" } */\n+int unsigned long _Decimal128 *x158; /* { dg-error \"error\" \"int unsigned long _Decimal128\" } */\n+long int long _Decimal32 *x159; /* { dg-error \"error\" \"long int long _Decimal32\" } */\n+long int long _Decimal64 *x160; /* { dg-error \"error\" \"long int long _Decimal64\" } */\n+long int long _Decimal128 *x161; /* { dg-error \"error\" \"long int long _Decimal128\" } */\n+long int signed _Decimal32 *x162; /* { dg-error \"error\" \"long int signed _Decimal32\" } */\n+long int signed _Decimal64 *x163; /* { dg-error \"error\" \"long int signed _Decimal64\" } */\n+long int signed _Decimal128 *x164; /* { dg-error \"error\" \"long int signed _Decimal128\" } */\n+long int unsigned _Decimal32 *x165; /* { dg-error \"error\" \"long int unsigned _Decimal32\" } */\n+long int unsigned _Decimal64 *x166; /* { dg-error \"error\" \"long int unsigned _Decimal64\" } */\n+long int unsigned _Decimal128 *x167; /* { dg-error \"error\" \"long int unsigned _Decimal128\" } */\n+long long int _Decimal32 *x168; /* { dg-error \"error\" \"long long int _Decimal32\" } */\n+long long int _Decimal64 *x169; /* { dg-error \"error\" \"long long int _Decimal64\" } */\n+long long int _Decimal128 *x170; /* { dg-error \"error\" \"long long int _Decimal128\" } */\n+long long signed _Decimal32 *x171; /* { dg-error \"error\" \"long long signed _Decimal32\" } */\n+long long signed _Decimal64 *x172; /* { dg-error \"error\" \"long long signed _Decimal64\" } */\n+long long signed _Decimal128 *x172; /* { dg-error \"error\" \"long long signed _Decimal128\" } */\n+long long unsigned _Decimal32 *x175; /* { dg-error \"error\" \"long long unsigned _Decimal32\" } */\n+long long unsigned _Decimal64 *x176; /* { dg-error \"error\" \"long long unsigned _Decimal64\" } */\n+long long unsigned _Decimal128 *x177; /* { dg-error \"error\" \"long long unsigned _Decimal128\" } */\n+long signed int _Decimal32 *x178; /* { dg-error \"error\" \"long signed int _Decimal32\" } */\n+long signed int _Decimal64 *x179; /* { dg-error \"error\" \"long signed int _Decimal64\" } */\n+long signed int _Decimal128 *x180; /* { dg-error \"error\" \"long signed int _Decimal128\" } */\n+long unsigned int _Decimal32 *x181; /* { dg-error \"error\" \"long unsigned int _Decimal32\" } */\n+long unsigned int _Decimal64 *x182; /* { dg-error \"error\" \"long unsigned int _Decimal64\" } */\n+long unsigned int _Decimal128 *x183; /* { dg-error \"error\" \"long unsigned int _Decimal128\" } */\n+long unsigned long _Decimal32 *x184; /* { dg-error \"error\" \"long unsigned long _Decimal32\" } */\n+long unsigned long _Decimal64 *x185; /* { dg-error \"error\" \"long unsigned long _Decimal64\" } */\n+long unsigned long _Decimal128 *x186; /* { dg-error \"error\" \"long unsigned long _Decimal128\" } */\n+signed short int _Decimal32 *x187; /* { dg-error \"error\" \"signed short int _Decimal32\" } */\n+signed short int _Decimal64 *x188; /* { dg-error \"error\" \"signed short int _Decimal64\" } */\n+signed short int _Decimal128 *x189; /* { dg-error \"error\" \"signed short int _Decimal128\" } */\n+signed int short _Decimal32 *x190; /* { dg-error \"error\" \"signed int short _Decimal32\" } */\n+signed int short _Decimal64 *x191; /* { dg-error \"error\" \"signed int short _Decimal64\" } */\n+signed int short _Decimal128 *x191; /* { dg-error \"error\" \"signed int short _Decimal128\" } */\n+signed int long _Decimal32 *x192; /* { dg-error \"error\" \"signed int long _Decimal32\" } */\n+signed int long _Decimal64 *x193; /* { dg-error \"error\" \"signed int long _Decimal64\" } */\n+signed int long _Decimal128 *x194; /* { dg-error \"error\" \"signed int long _Decimal128\" } */\n+signed long int _Decimal32 *x195; /* { dg-error \"error\" \"signed long int _Decimal32\" } */\n+signed long int _Decimal64 *x196; /* { dg-error \"error\" \"signed long int _Decimal64\" } */\n+signed long int _Decimal128 *x197; /* { dg-error \"error\" \"signed long int _Decimal128\" } */\n+signed long long _Decimal32 *x198; /* { dg-error \"error\" \"signed long long _Decimal32\" } */\n+signed long long _Decimal64 *x199; /* { dg-error \"error\" \"signed long long _Decimal64\" } */\n+signed long long _Decimal128 *x200; /* { dg-error \"error\" \"signed long long _Decimal128\" } */\n+unsigned short int _Decimal32 *x201; /* { dg-error \"error\" \"unsigned short int _Decimal32\" } */\n+unsigned short int _Decimal64 *x202; /* { dg-error \"error\" \"unsigned short int _Decimal64\" } */\n+unsigned short int _Decimal128 *x203; /* { dg-error \"error\" \"unsigned short int _Decimal128\" } */\n+unsigned int short _Decimal32 *x204; /* { dg-error \"error\" \"unsigned int short _Decimal32\" } */\n+unsigned int short _Decimal64 *x205; /* { dg-error \"error\" \"unsigned int short _Decimal64\" } */\n+unsigned int short _Decimal128 *x206; /* { dg-error \"error\" \"unsigned int short _Decimal128\" } */\n+unsigned int long _Decimal32 *x207; /* { dg-error \"error\" \"unsigned int long _Decimal32\" } */\n+unsigned int long _Decimal64 *x208; /* { dg-error \"error\" \"unsigned int long _Decimal64\" } */\n+unsigned int long _Decimal128 *x209; /* { dg-error \"error\" \"unsigned int long _Decimal128\" } */\n+unsigned long int _Decimal32 *x210; /* { dg-error \"error\" \"unsigned long int _Decimal32\" } */\n+unsigned long int _Decimal64 *x211; /* { dg-error \"error\" \"unsigned long int _Decimal64\" } */\n+unsigned long int _Decimal128 *x212; /* { dg-error \"error\" \"unsigned long int _Decimal128\" } */\n+unsigned long long _Decimal32 *x213; /* { dg-error \"error\" \"unsigned long long _Decimal32\" } */\n+unsigned long long _Decimal64 *x214; /* { dg-error \"error\" \"unsigned long long _Decimal64\" } */\n+unsigned long long _Decimal128 *x215; /* { dg-error \"error\" \"unsigned long long _Decimal128\" } */\n+int long long signed _Decimal32 *x216; /* { dg-error \"error\" \"int long long signed _Decimal32\" } */\n+int long long signed _Decimal64 *x217; /* { dg-error \"error\" \"int long long signed _Decimal64\" } */\n+int long long signed _Decimal128 *x218; /* { dg-error \"error\" \"int long long signed _Decimal128\" } */\n+int long long unsigned _Decimal32 *x219; /* { dg-error \"error\" \"int long long unsigned _Decimal32\" } */\n+int long long unsigned _Decimal64 *x220; /* { dg-error \"error\" \"int long long unsigned _Decimal64\" } */\n+int long long unsigned _Decimal128 *x221; /* { dg-error \"error\" \"int long long unsigned _Decimal128\" } */\n+int long signed long _Decimal32 *x222; /* { dg-error \"error\" \"int long signed long _Decimal32\" } */\n+int long signed long _Decimal64 *x223; /* { dg-error \"error\" \"int long signed long _Decimal64\" } */\n+int long signed long _Decimal128 *x224; /* { dg-error \"error\" \"int long signed long _Decimal128\" } */\n+int long unsigned long _Decimal32 *x226; /* { dg-error \"error\" \"int long unsigned long _Decimal32\" } */\n+int long unsigned long _Decimal64 *x227; /* { dg-error \"error\" \"int long unsigned long _Decimal64\" } */\n+int long unsigned long _Decimal128 *x228; /* { dg-error \"error\" \"int long unsigned long _Decimal128\" } */\n+int signed long long _Decimal32 *x229; /* { dg-error \"error\" \"int signed long long _Decimal32\" } */\n+int signed long long _Decimal64 *x230; /* { dg-error \"error\" \"int signed long long _Decimal64\" } */\n+int signed long long _Decimal128 *x231; /* { dg-error \"error\" \"int signed long long _Decimal128\" } */\n+int unsigned long long _Decimal32 *x232; /* { dg-error \"error\" \"int unsigned long long _Decimal32\" } */\n+int unsigned long long _Decimal64 *x233; /* { dg-error \"error\" \"int unsigned long long _Decimal64\" } */\n+int unsigned long long _Decimal128 *x234; /* { dg-error \"error\" \"int unsigned long long _Decimal128\" } */\n+long int long signed _Decimal32 *x235; /* { dg-error \"error\" \"long int long signed _Decimal32\" } */\n+long int long signed _Decimal64 *x236; /* { dg-error \"error\" \"long int long signed _Decimal64\" } */\n+long int long signed _Decimal128 *x237; /* { dg-error \"error\" \"long int long signed _Decimal128\" } */\n+long int long unsigned _Decimal32 *x238; /* { dg-error \"error\" \"long int long unsigned _Decimal32\" } */\n+long int long unsigned _Decimal64 *x239; /* { dg-error \"error\" \"long int long unsigned _Decimal64\" } */\n+long int long unsigned _Decimal128 *x240; /* { dg-error \"error\" \"long int long unsigned _Decimal128\" } */\n+long int signed long _Decimal32 *x241; /* { dg-error \"error\" \"long int signed long _Decimal32\" } */\n+long int signed long _Decimal64 *x242; /* { dg-error \"error\" \"long int signed long _Decimal64\" } */\n+long int signed long _Decimal128 *x243; /* { dg-error \"error\" \"long int signed long _Decimal128\" } */\n+long int unsigned long _Decimal32 *x244; /* { dg-error \"error\" \"long int unsigned long _Decimal32\" } */\n+long int unsigned long _Decimal64 *x245; /* { dg-error \"error\" \"long int unsigned long _Decimal64\" } */\n+long int unsigned long _Decimal128 *x246; /* { dg-error \"error\" \"long int unsigned long _Decimal128\" } */\n+long long int signed _Decimal32 *x247; /* { dg-error \"error\" \"long long int signed _Decimal32\" } */\n+long long int signed _Decimal64 *x248; /* { dg-error \"error\" \"long long int signed _Decimal64\" } */\n+long long int signed _Decimal128 *x249; /* { dg-error \"error\" \"long long int signed _Decimal128\" } */\n+long long int unsigned _Decimal32 *x250; /* { dg-error \"error\" \"long long int unsigned _Decimal32\" } */\n+long long int unsigned _Decimal64 *x251; /* { dg-error \"error\" \"long long int unsigned _Decimal64\" } */\n+long long int unsigned _Decimal128 *x252; /* { dg-error \"error\" \"long long int unsigned _Decimal128\" } */\n+long long signed int _Decimal32 *x253; /* { dg-error \"error\" \"long long signed int _Decimal32\" } */\n+long long signed int _Decimal64 *x254; /* { dg-error \"error\" \"long long signed int _Decimal64\" } */\n+long long signed int _Decimal128 *x255; /* { dg-error \"error\" \"long long signed int _Decimal128\" } */\n+long long unsigned int _Decimal32 *x256; /* { dg-error \"error\" \"long long unsigned int _Decimal32\" } */\n+long long unsigned int _Decimal64 *x257; /* { dg-error \"error\" \"long long unsigned int _Decimal64\" } */\n+long long unsigned int _Decimal128 *x258; /* { dg-error \"error\" \"long long unsigned int _Decimal128\" } */\n+long signed int long _Decimal32 *x259; /* { dg-error \"error\" \"long signed int long _Decimal32\" } */\n+long signed int long _Decimal64 *x260; /* { dg-error \"error\" \"long signed int long _Decimal64\" } */\n+long signed int long _Decimal128 *x261; /* { dg-error \"error\" \"long signed int long _Decimal128\" } */\n+long signed long int _Decimal32 *x262; /* { dg-error \"error\" \"long signed long int _Decimal32\" } */\n+long signed long int _Decimal64 *x263; /* { dg-error \"error\" \"long signed long int _Decimal64\" } */\n+long signed long int _Decimal128 *x264; /* { dg-error \"error\" \"long signed long int _Decimal128\" } */\n+long unsigned int long _Decimal32 *x265; /* { dg-error \"error\" \"long unsigned int long _Decimal32\" } */\n+long unsigned int long _Decimal64 *x266; /* { dg-error \"error\" \"long unsigned int long _Decimal64\" } */\n+long unsigned int long _Decimal128 *x267; /* { dg-error \"error\" \"long unsigned int long _Decimal128\" } */\n+long unsigned long int _Decimal32 *x268; /* { dg-error \"error\" \"long unsigned long int _Decimal32\" } */\n+long unsigned long int _Decimal64 *x269; /* { dg-error \"error\" \"long unsigned long int _Decimal64\" } */\n+long unsigned long int _Decimal128 *x270; /* { dg-error \"error\" \"long unsigned long int _Decimal128\" } */\n+signed long long int _Decimal32 *x271; /* { dg-error \"error\" \"signed long long int _Decimal32\" } */\n+signed long long int _Decimal64 *x272; /* { dg-error \"error\" \"signed long long int _Decimal64\" } */\n+signed long long int _Decimal128 *x273; /* { dg-error \"error\" \"signed long long int _Decimal128\" } */\n+unsigned int long long _Decimal32 *x274; /* { dg-error \"error\" \"unsigned int long long _Decimal32\" } */\n+unsigned int long long _Decimal64 *x275; /* { dg-error \"error\" \"unsigned int long long _Decimal64\" } */\n+unsigned int long long _Decimal128 *x276; /* { dg-error \"error\" \"unsigned int long long _Decimal128\" } */\n+unsigned long int long _Decimal32 *x277; /* { dg-error \"error\" \"unsigned long int long _Decimal32\" } */\n+unsigned long int long _Decimal64 *x278; /* { dg-error \"error\" \"unsigned long int long _Decimal64\" } */\n+unsigned long int long _Decimal128 *x279; /* { dg-error \"error\" \"unsigned long int long _Decimal128\" } */\n+unsigned long long int _Decimal32 *x280; /* { dg-error \"error\" \"unsigned long long int _Decimal32\" } */\n+unsigned long long int _Decimal64 *x281; /* { dg-error \"error\" \"unsigned long long int _Decimal64\" } */\n+unsigned long long int _Decimal128 *x282; /* { dg-error \"error\" \"unsigned long long int _Decimal128\" } */\n+\n+_Complex _Decimal32 *x283; /* { dg-error \"error\" \"_Complex _Decimal32\" } */\n+_Complex _Decimal64 *x284; /* { dg-error \"error\" \"_Complex _Decimal64\" } */\n+_Complex _Decimal128 *x285; /* { dg-error \"error\" \"_Complex _Decimal128\" } */\n+\n+_Decimal32 _Complex *x286; /* { dg-error \"error\" \"_Decimal32 _Complex\" } */\n+_Decimal64 _Complex *x287; /* { dg-error \"error\" \"_Decimal64 _Complex\" } */\n+_Decimal128 _Complex *x288; /* { dg-error \"error\" \"_Decimal128 _Complex\" } */\n+\n+unsigned _Decimal32 *x289; /* { dg-error \"error\" \"unsigned _Decimal32\" } */\n+unsigned _Decimal64 *x290; /* { dg-error \"error\" \"unsigned _Decimal64\" } */\n+unsigned _Decimal128 *x291; /* { dg-error \"error\" \"unsigned _Decimal128\" } */\n+signed _Decimal32 *x292; /* { dg-error \"error\" \"signed _Decimal32\" } */\n+signed _Decimal64 *x293; /* { dg-error \"error\" \"signed _Decimal64\" } */\n+signed _Decimal128 *x294; /* { dg-error \"error\" \"signed _Decimal128\" } */"}, {"sha": "e4078470cfa89a725cdf2af794f028cc0993d889", "filename": "gcc/testsuite/gcc.dg/dfp/union-init.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Funion-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Funion-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Funion-init.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Cast to union is a GNU C extension.  */\n+\n+extern void abort (void);\n+\n+union u\n+{\n+  _Decimal128 d128;\n+  double d;\n+};\n+\n+union n\n+{\n+  double d;\n+  _Decimal64 d64;\n+};\n+\n+int main ()\n+{\n+  static union u u1 = { 0.0dl };\n+  static union u u2 = { 4.2dl };\n+  static union u u4 = { 0.0 };\n+\n+  static union n n1 = { 2.2dd };\n+  static union n n2 = { 3.25 };\n+\n+  _Decimal128 d128;\n+  _Decimal64 d64;\n+  double d;\n+  \n+  if (u1.d128 != 0.0dl)\n+    abort ();\n+\n+  if (u2.d128 != 4.2dl)\n+    abort ();\n+\n+  /* cast decimal floating point to union type.  */\n+  d128 = 1.23dl;\n+  d64 = 4.56dd;\n+  d = 3.25;\n+\n+  u4 = (union u) d128;\n+  if (u4.d128 != 1.23dl)\n+    abort ();\n+  \n+  u4 = (union u) d;\n+  if (u4.d != 3.25)\n+    abort ();\n+\n+  n1 = (union n) d64;\n+  if (n1.d64 != 4.56dd)\n+    abort ();\n+  \n+  n1 = (union n)d;\n+  if (n1.d != 3.25)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "3f06e4753ffd6a62be2f8977b75080bec1d6a988", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv-const.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-const.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Test various conversions involving decimal floating types. */\n+\n+/* Assertion that constant C is of type T.  */\n+#define ASSERT_CONST_TYPE(C, T)                 \\\n+        do {                                    \\\n+          typedef T type;                       \\\n+          typedef type **typepp;                \\\n+          typedef __typeof__((C)) ctype;        \\\n+          typedef ctype **ctypepp;              \\\n+          typepp x = 0;                         \\\n+          ctypepp y = 0;                        \\\n+          x = y;                                \\\n+          y = x;                                \\\n+        } while (0)\n+\n+int\n+main ()\n+{\n+  ASSERT_CONST_TYPE (3 + 2.1df, _Decimal32); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+  ASSERT_CONST_TYPE (1.3df + 2, _Decimal32); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+  ASSERT_CONST_TYPE (56U - 55.0dd, _Decimal64); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+  ASSERT_CONST_TYPE (5 * .2DL, _Decimal128); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+  ASSERT_CONST_TYPE (.88dl / 2L, _Decimal128); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+  ASSERT_CONST_TYPE (.114df - 1.6dd, _Decimal64); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+  ASSERT_CONST_TYPE (3L - 1 + .55df, _Decimal32); /* { dg-bogus \"assignment from incompatible pointer type\" } */\n+\n+  return 0;\n+}"}, {"sha": "0c97b6ccf80e48b5d6880135ceb5c025962de0b8", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* N1150 5.4: Usual arithmetic conversions.\n+   C99 6.3.1.8[1] (New).\n+\n+   Test arithmetic operators with different decimal float types, and\n+   between decimal float types and integer types.  */\n+\n+extern void abort (void);\n+static int failcnt = 0;\n+                                                                                \n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+volatile _Decimal32 d32a, d32b, d32c;\n+volatile _Decimal64 d64a, d64b, d64c;\n+volatile _Decimal128 d128a, d128b, d128c;\n+volatile int i;\n+\n+void\n+init ()\n+{\n+  d32b = 123.456e94df;\n+  d64b = 12.3456789012345e383dd;\n+  d128b = 12345.6789012345678901e4000dl;\n+\n+  d32c = 1.3df;\n+  d64c = 1.2dd;\n+  d128c = 1.1dl;\n+\n+  i = 2;\n+}\n+\n+int\n+main ()\n+{\n+  init ();\n+\n+  /* Usual arithmetic conversions between decimal float types; addition.  */\n+  d128a = d128b + d32b;\n+  if (d128a < d128b)\n+    FAILURE\n+  d128a = d32b + d128b;\n+  if (d128a < d128b)\n+    FAILURE\n+  d128a = d128b + d64b;\n+  if (d128a < d128b)\n+    FAILURE\n+  d128a = d64b + d128b;\n+  if (d128a < d128b)\n+    FAILURE\n+  d64a = d64b + d32b;\n+  if (d64a < d64b)\n+    FAILURE\n+  d64a = d32b + d64b;\n+  if (d64a < d64b)\n+    FAILURE\n+\n+  /* Usual arithmetic conversions between decimal float types;\n+     multiplication.  */\n+  d128a = d128b * d32c;\n+  if (d128a < d128b)\n+    FAILURE\n+  d128a = d32c * d128b;\n+  if (d128a < d128b)\n+    FAILURE\n+  d128a = d128b * d64c;\n+  if (d128a < d128b)\n+    FAILURE\n+  d128a = d64c * d128b;\n+  if (d128a < d128b)\n+    FAILURE\n+  d64a = d64b * d32c;\n+  if (d64a < d64b)\n+    FAILURE\n+  d64a = d32c * d64b;\n+  if (d64a < d64b)\n+    FAILURE\n+\n+  /* Usual arithmetic conversions between decimal float and integer types.  */\n+  d32a = d32c + i;\n+  if (d32a != d32c + 2.0df)\n+    FAILURE\n+  d32a = d32c - i;\n+  if (d32a != d32c - 2.0df)\n+    FAILURE\n+  d32a = i * d32c;\n+  if (d32a != d32c + d32c)\n+    FAILURE\n+  d32a = d32c / i;\n+  if (d32a != d32c / 2.0df)\n+    FAILURE\n+\n+  d64a = i + d64c;\n+  if (d64a != d64c + 2.0dd)\n+    FAILURE\n+  d64a = d64c - i;\n+  if (d64a != d64c - 2.0dd)\n+    FAILURE\n+  d64a = d64c * i;\n+  if (d64a != d64c + d64c)\n+    FAILURE\n+  d64a = d64c / i;\n+  if (d64a != d64c / 2.0dd)\n+    FAILURE\n+\n+  d128a = d128c + i;\n+  if (d128a != d128c + 2.0dl)\n+    FAILURE\n+  d128a = d128c - i;\n+  if (d128a != d128c - 2.0dl)\n+    FAILURE\n+  d128a = i * d128c;\n+  if (d128a != d128c + d128c)\n+    FAILURE\n+  d128a = d128c / i;\n+  if (d128a != d128c / 2.0dl)\n+    FAILURE\n+\n+  return 0;\n+}"}, {"sha": "0994c65783e95f3bf4dab7e6e8f70c749eb8da10", "filename": "gcc/testsuite/gcc.dg/dfp/wtr-conversion-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwtr-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwtr-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwtr-conversion-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,75 @@\n+/* Test for -Wtraditional warnings on conversions by prototypes.\n+   Note, gcc should omit these warnings in system header files.\n+   Based on gcc.dg/wtr-conversion-1.c  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wtraditional\" } */\n+\n+extern void foo_i (int);\n+extern void foo_f (float);\n+extern void foo_ld (long double);\n+extern void foo_d32 (_Decimal32);\n+extern void foo_d64 (_Decimal64);\n+extern void foo_d128 (_Decimal128);\n+\n+extern int i;\n+extern float f;\n+extern long double ld;\n+extern _Decimal32 d32;\n+extern _Decimal64 d64;\n+extern _Decimal128 d128;\n+\n+void\n+testfunc1 ()\n+{\n+  foo_i (i);\n+  foo_i (d32); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_i (d64); /* { dg-warning \"as integer rather than floating\" \"prototype convDersion warning\" } */\n+  foo_i (d128); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_d32 (i); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_d32 (f); /* { dg-warning \"as '_Decimal32' rather than 'float'\" \"prototype conversion warning\" } */\n+  foo_d32 (ld); /* { dg-warning \"as '_Decimal32' rather than 'long double'\" \"prototype conversion warning\" } */\n+  foo_d32 (d64); /* { dg-warning \"as '_Decimal32' rather than '_Decimal64'\" \"prototype conversion warning\" } */\n+  foo_d32 (d128); /* { dg-warning \"as '_Decimal32' rather than '_Decimal128'\" \"prototype conversion warning\" } */\n+  foo_d64 (i); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_d64 (f); /* { dg-warning \"as '_Decimal64' rather than 'float'\" \"prototype conversion warning\" } */\n+  foo_d64 (ld); /* { dg-warning \"as '_Decimal64' rather than 'long double'\" \"prototype conversion warning\" } */\n+  foo_d64 (d32); /* { dg-bogus \"as '_Decimal64' rather than '_Decimal32'\" \"prototype conversion warning\" } */\n+  foo_d64 (d128); /* { dg-warning \"as '_Decimal64' rather than '_Decimal128'\" \"prototype conversion warning\" } */\n+  foo_d128 (i); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_d128 (f); /* { dg-warning \"as '_Decimal128' rather than 'float'\" \"prototype conversion warning\" } */\n+  foo_d128 (ld); /* { dg-warning \"as '_Decimal128' rather than 'long double'\" \"prototype conversion warning\" } */\n+  foo_d128 (d32); /* { dg-bogus \"as '_Decimal128' rather than '_Decimal32'\" \"prototype conversion warning\" } */\n+  foo_d128 (d64); /* { dg-bogus \"as '_Decimal128' rather than '_Decimal64'\" \"prototype conversion warning\" } */\n+  foo_d128 (d128); /* { dg-bogus \"as '_Decimal128' rather than '_Decimal'\" \"prototype conversion warning\" } */\n+}\n+  \n+# 54 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+void\n+testfunc2 ()\n+{\n+  foo_i (i);\n+  foo_i (d32);\n+  foo_i (d64);\n+  foo_i (d128);\n+  foo_d32 (i);\n+  foo_d32 (f);\n+  foo_d32 (ld);\n+  foo_d32 (d32);\n+  foo_d32 (d64);\n+  foo_d32 (d128);\n+  foo_d64 (i);\n+  foo_d64 (f);\n+  foo_d64 (ld);\n+  foo_d64 (d32);\n+  foo_d64 (d64);\n+  foo_d64 (d128);\n+  foo_d128 (i);\n+  foo_d128 (f);\n+  foo_d128 (ld);\n+  foo_d128 (d32);\n+  foo_d128 (d64);\n+  foo_d128 (d128);\n+}"}, {"sha": "505e4c72f025462b6e90fd107cf322b1f46d0f81", "filename": "gcc/testsuite/gcc.dg/format/dfp-printf-1.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,122 @@\n+/* Test for printf formats for Decimal Floating Point types.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-Wformat\" } */\n+\n+extern int printf (const char *restrict, ...);\n+\n+void\n+foo (_Decimal32 x, _Decimal64 y, _Decimal128 z, int i, unsigned int j,\n+     double d, char *p)\n+{\n+  /* See ISO/IEC DTR 24732 subclause 9.3 (currently Working Draft 5 from\n+      2005-03-06).  */\n+  /* Formatted input/output specifiers.  */\n+\n+  /* Check lack of warnings for valid usage.  */\n+\n+  printf (\"%Hf\\n\", x);\n+  printf (\"%HF\\n\", x);\n+  printf (\"%He\\n\", x);\n+  printf (\"%HE\\n\", x);\n+  printf (\"%Hg\\n\", x);\n+  printf (\"%HG\\n\", x);\n+\n+  printf (\"%Df\\n\", y);\n+  printf (\"%DF\\n\", y);\n+  printf (\"%De\\n\", y);\n+  printf (\"%DE\\n\", y);\n+  printf (\"%Dg\\n\", y);\n+  printf (\"%DG\\n\", y);\n+\n+  printf (\"%DDf\\n\", z);\n+  printf (\"%DDF\\n\", z);\n+  printf (\"%DDe\\n\", z);\n+  printf (\"%DDE\\n\", z);\n+  printf (\"%DDg\\n\", z);\n+  printf (\"%DDG\\n\", z);\n+\n+  printf (\"%DG%DDE%HF%DDe%He%HE%DF%DDF%De%DDG%HG%Df%Hg%DE%DDf%Dg%DDg%Hf\\n\",\n+           y, z, x, z, x, x, y, z, y, z, x, y, x, y, z, y, z, x);\n+\n+  /* Check warnings for type mismatches.  */\n+\n+  printf (\"%Hf\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%HF\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%He\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%HE\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%Hg\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%HG\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%Hf\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%HF\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%He\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%HE\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%Hg\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  printf (\"%HG\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+\n+  printf (\"%Df\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%DF\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%De\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%DE\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%Dg\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%DG\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%Df\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%DF\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%De\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%DE\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%Dg\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  printf (\"%DG\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+\n+  printf (\"%DDf\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDF\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDe\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDE\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDg\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDG\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDf\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDF\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDe\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDE\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDg\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%DDG\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+\n+  /* Check for warnings for bad use of H, D, and DD length specifiers.  */\n+\n+  printf (\"%Hd\\n\", i);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hi\\n\", i);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Ho\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hu\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hx\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%HX\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Ha\\n\", d);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%HA\\n\", d);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hc\\n\", i);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hs\\n\", p);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hp\\n\", p);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  printf (\"%Hn\\n\", p);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+\n+  /* Sanity checks for flags, field width, and precision in formats for\n+     DFP types.  */\n+\n+  printf (\"%-Hf\\n\", x);\n+  printf (\"%+HF\\n\", x);\n+  printf (\"% He\\n\", x);\n+  printf (\"%#HE\\n\", x);\n+  printf (\"%0Hg\\n\", x);\n+  printf (\"%#0HG\\n\", x);\n+\n+  printf (\"%0#Df\\n\", y);\n+  printf (\"%0DF\\n\", y);\n+  printf (\"%#De\\n\", y);\n+  printf (\"%-#DE\\n\", y);\n+  printf (\"%-#0Dg\\n\", y);  /* { dg-warning \"flag ignored\" \"ignore flag\" } */\n+  printf (\"%0+ DG\\n\", y);  /* { dg-warning \"flag ignored\" \"ignore flag\" } */\n+\n+  printf (\"%DDf\\n\", z);\n+  printf (\"%0DDF\\n\", z);\n+  printf (\"%#0DDe\\n\", z);\n+  printf (\"%+DDE\\n\", z);\n+  printf (\"%0-#DDg\\n\", z); /* { dg-warning \"flag ignored\" \"ignore flag\" } */\n+  printf (\"% DDG\\n\", z);\n+}"}, {"sha": "6b010a40c8e68f622befe534828208f1d59c465b", "filename": "gcc/testsuite/gcc.dg/format/dfp-scanf-1.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-scanf-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,99 @@\n+/* Test for scanf formats for Decimal Floating Point types.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-Wformat\" } */\n+\n+\n+#include \"format.h\"\n+\n+void\n+voo (_Decimal32 *x, _Decimal64 *y, _Decimal128 *z, int *i, unsigned int *j,\n+     double *d, char **p)\n+{\n+  /* See ISO/IEC DTR 24732 subclause 9.3 (currently Working Draft 5 from\n+      2005-03-06).  */\n+  /* Formatted input/output specifiers.  */\n+\n+  /* Check lack of warnings for valid usage.  */\n+\n+  scanf (\"%Hf\", x);\n+  scanf (\"%HF\", x);\n+  scanf (\"%He\", x);\n+  scanf (\"%HE\", x);\n+  scanf (\"%Hg\", x);\n+  scanf (\"%HG\", x);\n+\n+  scanf (\"%Df\", y);\n+  scanf (\"%DF\", y);\n+  scanf (\"%De\", y);\n+  scanf (\"%DE\", y);\n+  scanf (\"%Dg\", y);\n+  scanf (\"%DG\", y);\n+\n+  scanf (\"%DDf\", z);\n+  scanf (\"%DDF\", z);\n+  scanf (\"%DDe\", z);\n+  scanf (\"%DDE\", z);\n+  scanf (\"%DDg\", z);\n+  scanf (\"%DDG\", z);\n+\n+  scanf (\"%DG%DDE%HF%DDe%He%HE%DF%DDF%De%DDG%HG%Df%Hg%DE%DDf%Dg%DDg%Hf\\n\",\n+           y, z, x, z, x, x, y, z, y, z, x, y, x, y, z, y, z, x);\n+\n+  /* Check warnings for type mismatches.  */\n+\n+  scanf (\"%Hf\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%HF\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%He\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%HE\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%Hg\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%HG\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%Hf\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%HF\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%He\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%HE\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%Hg\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%HG\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+\n+  scanf (\"%Df\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%DF\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%De\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%DE\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%Dg\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%DG\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%Df\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%DF\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%De\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%DE\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%Dg\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%DG\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+\n+  scanf (\"%DDf\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDF\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDe\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDE\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDg\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDG\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDf\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDF\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDe\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDE\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDg\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDG\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+\n+  /* Check for warnings for bad use of H, D, and DD length specifiers.  */\n+\n+  scanf (\"%Hd\\n\", i);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hi\\n\", i);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Ho\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hu\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hx\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%HX\\n\", j);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Ha\\n\", d);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%HA\\n\", d);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hc\\n\", i);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hs\\n\", p);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hp\\n\", p);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+  scanf (\"%Hn\\n\", p);\t/* { dg-warning \"length\" \"bad use of %H\" } */\n+}"}, {"sha": "55019d8c27abf536eb46a16bc8f5837319b0adda", "filename": "gcc/testsuite/gcc.dg/nodfp-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fnodfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.dg%2Fnodfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnodfp-1.c?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target {! dfp} } } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+_Decimal32 x;\t/* { dg-error \"not supported\" \"reject decimal float\" } */\n+_Decimal64 y;\t/* { dg-error \"not supported\" \"reject decimal float\" } */\n+_Decimal128 z;\t/* { dg-error \"not supported\" \"reject decimal float\" } */"}, {"sha": "0c561e1c5a0b995d7754bd06075d8a47f577a5e2", "filename": "gcc/testsuite/gcc.misc-tests/dectest.exp", "status": "added", "additions": 531, "deletions": 0, "changes": 531, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdectest.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdectest.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdectest.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,531 @@\n+# Copyright 2005 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# DejaGnu test driver around Mike Cowlishaw's testsuite for decimal\n+# decimal arithmetic (\"dectest\").  See:\n+#    <http://www2.hursley.ibm.com/decimal/dectest.html>.\n+#\n+# Contributed by Ben Elliston <bje@au.ibm.com>.\n+\n+set TORTURE_OPTIONS [list {} -O1 -O2 -O3 -msoft-float]\n+\n+# On x86 and x86-64 systems, -Os makes the stack alignment too small,\n+# leading to segmentation faults when executing SSE instructions.\n+# Force the alignment of the stack to 2^4 (16) bytes.\n+\n+if {[istarget i?86-*-linux-gnu] || [istarget x86_64-*-linux-gnu]} {\n+    lappend TORTURE_OPTIONS {-Os -mpreferred-stack-boundary=4}\n+} else {\n+    lappend TORTURE_OPTIONS {-Os}\n+}\n+\n+proc target-specific-flags {} {\n+  set result \"-frounding-math \"\n+  return $result\n+}\n+  \n+# Load support procs (borrow these from c-torture).\n+load_lib c-torture.exp\n+load_lib target-supports.exp\n+\n+# Skip these tests for targets that don't support this extension.\n+if { ![check_effective_target_dfp] } {\n+    return\n+}\n+\n+# The list format is [coefficient, max-exponent, min-exponent].\n+set properties(_Decimal32) [list 7 96 -95]\n+set properties(_Decimal64) [list 16 384 -383]\n+set properties(_Decimal128) [list 34 6144 -6143]\n+\n+# Operations implemented by the compiler.\n+set operators(add) {+}\n+set operators(compare) {==}\n+set operators(divide) {/}\n+set operators(multiply) {*}\n+set operators(subtract) {-}\n+set operators(minus) {-}\n+set operators(plus) {+}\n+set operators(apply) {}\n+\n+# Operations imlemented by the library.\n+set libfuncs(abs) fabsl\n+set libfuncs(squareroot) sqrtl\n+set libfuncs(max) fmaxl\n+set libfuncs(min) fminl\n+set libfuncs(quantize) quantize\n+set libfuncs(samequantum) samequantum\n+set libfuncs(power) powl\n+set libfuncs(toSci) unknown\n+set libfuncs(tosci) unknown\n+set libfuncs(toEng) unknown\n+set libfuncs(toeng) unknown\n+set libfuncs(divideint) unknown\n+set libfuncs(rescale) unknown\n+set libfuncs(remainder) unknown\n+set libfuncs(remaindernear) unknown\n+set libfuncs(normalize) unknown\n+set libfuncs(tointegral) unknown\n+set libfuncs(trim) unknown\n+\n+# Run all of the tests listed in TESTCASES by invoking df-run-test on\n+# each.  Skip tests that not included by the user invoking runtest\n+# with the foo.exp=test.c syntax.\n+\n+proc dfp-run-tests { testcases } {\n+    global runtests\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of\n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] continue\n+\tdfp-run-test $test\n+    }\n+}\n+\n+# Run a single test case named by TESTCASE.\n+# Called for each test by dfp-run-tests.\n+\n+proc dfp-run-test { testcase } {\n+    set fd [open $testcase r]\n+    while {[gets $fd line] != -1} {\n+\tswitch -regexp -- $line {\n+\t    {^[ \\t]*--.*$} {\n+\t\t# Ignore comments.\n+\t    }\n+\t    {^[ \\t]*$} {\n+\t\t# Ignore blank lines.\n+\t    }\n+\t    {^[ \\t]*[^:]*:[^:]*} {\n+\t\tregsub -- {[ \\t]*--.*$} $line {} line\n+\t\tprocess-directive $line\n+\t    }\n+\t    default {\n+\t\tprocess-test-case $testcase $line\n+\t    }\n+\t}\n+    }\n+    close $fd\n+}\n+\n+# Return the appropriate constant from <fenv.h> for MODE.\n+\n+proc c-rounding-mode { mode } { \n+    switch [string tolower $mode] {\n+\t\"floor\"\t\t{ return 0 } # FE_DEC_DOWNWARD\n+\t\"half_even\"\t{ return 1 } # FE_DEC_TONEARESTFROMZERO\n+\t\"half_up\"\t{ return 2 } # FE_DEC_TONEAREST\n+\t\"down\"\t\t{ return 3 } # FE_DEC_TOWARDZERO\n+\t\"ceiling\"\t{ return 4 } # FE_DEC_UPWARD\n+    }\n+    error \"unsupported rounding mode ($mode)\"\n+}\n+\n+# Return a string of C code that forms the preamble to perform the\n+# test named ID.\n+\n+proc c-test-preamble { id } {\n+    append result \"/* Machine generated test case for $id */\\n\"\n+    append result \"\\n\"\n+    append result \"\\#include <assert.h>\\n\"\n+    append result \"\\#include <fenv.h>\\n\"\n+    append result \"\\#include <math.h>\\n\"\n+    append result \"\\n\"\n+    append result \"int main ()\\n\"\n+    append result \"\\{\"\n+    return $result\n+}\n+\n+# Return a string of C code that forms the postable to the test named ID.\n+\n+proc c-test-postamble { id } {\n+    return \"\\}\"\n+}\n+\n+# Generate a C unary expression that applies OPERATION to OP.\n+\n+proc c-unary-expression {operation op} {\n+    global operators\n+    global libfuncs\n+    if [catch {set result \"$operators($operation) $op\"}] {\n+\t# If operation isn't in the operators or libfuncs arrays,\n+\t# we'll throw an error.  That's what we want.\n+\t# FIXME: append d32, etc. here.\n+\tset result \"$libfuncs($operation) ($op)\"\n+    }\n+    return $result\n+}\n+\n+# Generate a C binary expression that applies OPERATION to OP1 and OP2.\n+\n+proc c-binary-expression {operation op1 op2} {\n+    global operators\n+    global libfuncs\n+    if [catch {set result \"$op1 $operators($operation) $op2\"}] {\n+\t# If operation isn't in the operators or libfuncs arrays,\n+\t# we'll throw an error.  That's what we want.\n+\tset result \"$libfuncs($operation) ($op1, $op2)\"\n+    }\n+    return $result\n+}\n+\n+# Return the most appropriate C type (_Decimal32, etc) for this test.\n+\n+proc c-decimal-type { } {\n+    global directives\n+    if [catch {set precision $directives(precision)}] {\n+\tset precision \"_Decimal128\"\n+    }  \n+    if { $precision == 7 } {\n+\tset result \"_Decimal32\"\n+    } elseif {$precision == 16} {\n+\tset result \"_Decimal64\"\n+    } elseif {$precision == 34} {\n+\tset result \"_Decimal128\"\n+    } else {\n+\terror \"Unsupported precision\"\n+    }\n+    return $result\n+}\n+\n+# Return the size of the most appropriate C type, in bytes.\n+\n+proc c-sizeof-decimal-type { } {\n+    switch [c-decimal-type] {\n+\t\"_Decimal32\"    { return 4 }\n+\t\"_Decimal64\"    { return 8 }\n+\t\"_Decimal128\"   { return 16 }\n+    }\n+    error \"Unsupported precision\"\n+}\n+\n+# Return the right literal suffix for CTYPE.\n+\n+proc c-type-suffix { ctype } {\n+    switch $ctype {\n+        \"_Decimal32\"   { return \"df\" }\n+        \"_Decimal64\"   { return \"dd\" }\n+        \"_Decimal128\"  { return \"dl\" }\n+        \"float\"        { return \"f\" }\n+\t\"long double\"  { return \"l\" }\n+    }\n+    return \"\"\n+}\n+\n+proc nan-p { operand } {\n+    if {[string match \"NaN*\" $operand] || [string match \"-NaN*\" $operand]} {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+proc infinity-p { operand } {\n+    if {[string match \"Inf*\" $operand] || [string match \"-Inf*\" $operand]} {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+proc isnan-builtin-name { } {\n+    set bits [expr [c-sizeof-decimal-type] * 8]\n+    return \"__builtin_isnand$bits\"\n+}\n+\n+proc isinf-builtin-name { } {\n+    set bits [expr [c-sizeof-decimal-type] * 8]\n+    return \"__builtin_isinfd$bits\"\n+}\n+\n+# Return a string that declares a C union containing the decimal type\n+# and an unsigned char array of the right size.\n+\n+proc c-union-decl { } {\n+    append result \"  union {\\n\"\n+    append result \"    [c-decimal-type] d;\\n\"\n+    append result \"    unsigned char bytes\\[[c-sizeof-decimal-type]\\];\\n\"\n+    append result \"  } u;\"\n+    return $result\n+}\n+\n+proc transform-hex-constant {value} {\n+    regsub \\# $value {} value\n+    regsub -all (\\.\\.) $value {0x\\1, } bytes\n+    return [list $bytes]\n+}\n+\n+# Create a C program file (named using ID) containing a test for a\n+# binary OPERATION on OP1 and OP2 that expects RESULT and CONDITIONS.\n+\n+proc make-c-test {testcase id operation result conditions op1 {op2 \"NONE\"}} {\n+    global directives\n+    set filename ${id}.c\n+    set outfd [open $filename w]\n+\n+    puts $outfd [c-test-preamble $id]\n+    puts $outfd [c-union-decl]\n+    if {[string compare $result ?] != 0} {\n+\tif {[string index $result 0] == \"\\#\"} {\n+\t    puts $outfd \"  static unsigned char compare\\[[c-sizeof-decimal-type]\\] = [transform-hex-constant $result];\"\n+\t}\n+    }\n+    if {[string compare $op2 NONE] == 0} {\n+\tif {[string index $op1 0] == \"\\#\"} {\n+\t    puts $outfd \"  static unsigned char fill\\[[c-sizeof-decimal-type]\\] = [transform-hex-constant $op1];\"\n+\t}\n+    }\n+\n+    puts $outfd \"\"\n+    puts $outfd \"  /*  FIXME: Set rounding mode with fesetround() once in libc.  */\"\n+    puts $outfd \"  __dfp_set_round ([c-rounding-mode $directives(rounding)]);\"\n+    puts $outfd \"\"\n+\n+    # Build the expression to be tested.\n+    if {[string compare $op2 NONE] == 0} {\n+\tif {[string index $op1 0] == \"\\#\"} {\n+\t    puts $outfd \"  memcpy (u.bytes, fill, [c-sizeof-decimal-type]);\"\n+\t} else {\n+\t    puts $outfd \"  u.d = [c-unary-expression $operation [c-operand $op1]];\"\n+\t}\n+    } else {\n+\tputs $outfd \"  u.d = [c-binary-expression $operation [c-operand $op1] [c-operand $op2]];\"\n+    }\n+\n+    # Test the result.\n+    if {[string compare $result ?] != 0} {\n+\t# Not an undefined result ..\n+\tif {[string index $result 0] == \"\\#\"} {\n+\t    # Handle hex comparisons.\n+\t    puts $outfd \"  return memcmp (u.bytes, compare, [c-sizeof-decimal-type]);\"\n+\t} elseif {[nan-p $result]} {\n+\t    puts $outfd \"  return ![isnan-builtin-name] (u.d);\"\n+\t} elseif {[infinity-p $result]} {\n+\t    puts $outfd \"  return ![isinf-builtin-name] (u.d);\"\n+\t} else {\n+\t    # Ordinary values.\n+\t    puts $outfd \"  return !(u.d == [c-operand $result]);\"\n+\t}\n+    } else {\n+\tputs $outfd \"  return 0;\"\n+    }\n+\n+    puts $outfd [c-test-postamble $id]\n+    close $outfd\n+    return $filename\n+}\n+\n+# Is the test supported for this target?\n+\n+proc supported-p { id op } {\n+    global directives\n+    global libfuncs\n+\n+    # Ops that are unsupported.  Many of these tests fail because they\n+    # do not tolerate the C front-end rounding the value of floating\n+    # point literals to suit the type of the constant.  Otherwise, by\n+    # treating the `apply' operator like C assignment, some of them do\n+    # pass.\n+    switch -- $op {\n+\tapply\t\t{ return 0 }\n+    }\n+\n+    # Ditto for the following miscellaneous tests.\n+    switch $id {\n+\taddx1130\t{ return 0 }\n+\taddx1131\t{ return 0 }\n+\taddx1132\t{ return 0 }\n+\taddx1133\t{ return 0 }\n+\taddx1134\t{ return 0 }\n+\taddx1135\t{ return 0 }\n+\taddx1136\t{ return 0 }\n+\taddx1138\t{ return 0 }\n+\taddx1139\t{ return 0 }\n+\taddx1140\t{ return 0 }\n+\taddx1141\t{ return 0 }\n+\taddx1142\t{ return 0 }\n+\taddx1151\t{ return 0 }\n+\taddx1152\t{ return 0 }\n+\taddx1153\t{ return 0 }\n+\taddx1154\t{ return 0 }\n+\taddx1160\t{ return 0 }\n+\taddx690\t\t{ return 0 }\n+\tmulx263\t\t{ return 0 }\n+\tsubx947\t\t{ return 0 }\n+    }\n+\n+    if [info exist libfuncs($op)] {\n+\t# No library support for now.\n+\treturn 0\n+    }\n+    if [catch {c-rounding-mode $directives(rounding)}] {\n+\t# Unsupported rounding mode.\n+\treturn 0\n+    }\n+    if [catch {c-decimal-type}] {\n+\t# Unsupported precision.\n+\treturn 0\n+    }\n+    return 1\n+}\n+\n+# Break LINE into a list of tokens.  Be sensitive to quoting.\n+# There has to be a better way to do this :-|\n+\n+proc tokenize { line } {\n+    set quoting 0\n+    set tokens [list]\n+\n+    foreach char [split $line {}] {\n+\tif {!$quoting} {\n+\t    if { [info exists token] && $char == \" \" } {\n+\t\tif {[string compare \"$token\" \"--\"] == 0} {\n+\t\t    # Only comments remain.\n+\t\t    return $tokens\n+\t\t}\n+\t\tlappend tokens $token\n+\t\tunset token\n+\t    } else {\n+\t\tif {![info exists token] && $char == \"'\" } {\n+\t\t    set quoting 1\n+\t\t} else {\n+\t\t    if { $char != \" \" } {\n+\t\t\tappend token $char\n+\t\t    }\n+\t\t}\n+\t    }\n+\t} else {\n+\t    # Quoting.\n+\t    if { $char == \"'\" } {\n+\t\tset quoting 0\n+\t\tif [info exists token] {\n+\t\t    lappend tokens $token\n+\t\t    unset token\n+\t\t} else {\n+\t\t    lappend tokens {}\n+\t\t}\n+\t    } else {\n+\t\tappend token $char\n+\t    }\n+\t}\n+    }\n+    # Flush any residual token.\n+    if {[info exists token] && [string compare $token \"--\"]} {\n+\tlappend tokens $token\n+    }\n+    return $tokens\n+}\n+\n+# Process a directive in LINE.\n+\n+proc process-directive { line } {\n+    global directives\n+    set keyword [string tolower [string trim [lindex [split $line :] 0]]]\n+    set value [string tolower [string trim [lindex [split $line :] 1]]]\n+    set directives($keyword) $value\n+}\n+\n+# Produce a C99-valid floating point literal.\n+\n+proc c-operand {operand} {\n+    set bits [expr 8 * [c-sizeof-decimal-type]]\n+\n+    switch -glob -- $operand {\n+\t\"Inf*\"\t\t{ return \"__builtin_infd${bits} ()\" }\n+\t\"-Inf*\"\t\t{ return \"- __builtin_infd${bits} ()\" }\n+    \t\"NaN*\"\t\t{ return \"__builtin_nand${bits} (\\\"\\\")\" }\n+\t\"-NaN*\"\t\t{ return \"- __builtin_nand${bits} (\\\"\\\")\" }\n+\t\"sNaN*\"\t\t{ return \"__builtin_nand${bits} (\\\"\\\")\" }\n+\t\"-sNaN*\"\t{ return \"- __builtin_nand${bits} (\\\"\\\")\" }\n+    }\n+\n+    if {[string first . $operand] < 0 && \\\n+\t    [string first E $operand] < 0 && \\\n+\t    [string first e $operand] < 0} {\n+\tappend operand .\n+    }\n+    set suffix [c-type-suffix [c-decimal-type]]\n+    return [append operand $suffix]\n+}\n+\n+# Process an arithmetic test in LINE from TESTCASE.\n+\n+proc process-test-case { testcase line } {\n+    set testfile [file tail $testcase]\n+\n+    # Compress multiple spaces down to one.\n+    regsub -all {  *} $line { } line\n+\n+    set args [tokenize $line]\n+    if {[llength $args] < 5} {\n+\terror \"Skipping invalid test: $line\"\n+\treturn\n+    }\n+    \n+    set id [string trim [lindex $args 0]]\n+    set operation [string trim [lindex $args 1]]\n+    set operand1 [string trim [lindex $args 2]]\n+    \n+    if { [string compare [lindex $args 3] -> ] == 0 } {\n+\t# Unary operation.\n+\tset operand2 NONE\n+\tset result_index 4\n+\tset cond_index 5\n+    } else {\n+\t# Binary operation.\n+\tset operand2 [string trim [lindex $args 3]]\n+\tif { [string compare [lindex $args 4] -> ] != 0 } {\n+\t    warning \"Skipping invalid test: $line\"\n+\t    return\n+\t}\n+\tset result_index 5\n+\tset cond_index 6\n+    }\n+\n+    set result [string trim [lindex $args $result_index]]\n+    set conditions [list]\n+    for { set i $cond_index } { $i < [llength $args] } { incr i } {\n+\tlappend conditions [string tolower [lindex $args $i]]\n+    }\n+    \n+    # If this test is unsupported, say so.\n+    if ![supported-p $id $operation] {\n+\tunsupported \"$testfile ($id)\"\n+\treturn\n+    }\n+\n+    if {[string compare $operand1 \\#] == 0 || \\\n+\t    [string compare $operand2 \\#] == 0} {\n+\tunsupported \"$testfile ($id), null reference\"\n+ \treturn\n+    }\n+\n+    # Construct a C program and then compile/execute it on the target.\n+    # Grab some stuff from the c-torture.exp test driver for this.\n+\n+    set cprog [make-c-test $testfile $id $operation $result $conditions $operand1 $operand2]\n+    c-torture-execute $cprog [target-specific-flags]\n+}\n+\n+### Script mainline:\n+\n+if [catch {set testdir $env(DECTEST)}] {\n+    # If $DECTEST is unset, skip this test driver altogether.\n+    return\n+}\n+\n+note \"Using tests in $testdir\"\n+dfp-run-tests [lsort [glob -nocomplain $testdir/*.decTest]]\n+unset testdir"}, {"sha": "527058d445f33870bf72d28807703c7ce8a4114b", "filename": "gcc/testsuite/lib/c-compat.exp", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-compat.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -0,0 +1,110 @@\n+#   Copyright (C) 2002, 2003, 2005, 02005 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# gcc-patches@gcc.gnu.org\n+\n+# Globals.\n+\n+global compat_use_alt\n+global compat_same_alt\n+global compat_have_dfp\n+global compat_skip_list\n+\n+# This file defines procs for determining features supported by both C\n+# compilers for compatibility tests.\n+\n+load_lib target-supports.exp\n+\n+#\n+# compat-use-alt-compiler -- make the alternate compiler the default\n+# \n+proc compat-use-alt-compiler { } {\n+    global GCC_UNDER_TEST ALT_CC_UNDER_TEST\n+    global compat_same_alt\n+\n+    # We don't need to do this if the alternate compiler is actually\n+    # the same as the compiler under test.\n+    if { $compat_same_alt == 0 } then {\n+\tset GCC_UNDER_TEST $ALT_CC_UNDER_TEST\n+    }\n+}\n+\n+#\n+# compat-use-tst-compiler -- make compiler under test the default\n+#\n+proc compat-use-tst-compiler { } {\n+    global GCC_UNDER_TEST compat_save_gcc_under_test\n+    global compat_same_alt\n+\n+    # We don't need to do this if the alternate compiler is actually\n+    # the same as the compiler under test.\n+\n+    if { $compat_same_alt == 0 } then {\n+\tset GCC_UNDER_TEST $compat_save_gcc_under_test\n+    }\n+}\n+\n+# Find out whether both compilers support decimal float types.\n+proc compat_setup_dfp { } {\n+    global compat_use_alt\n+    global compat_same_alt\n+    global compat_have_dfp\n+\n+    verbose \"compat_setup_dfp: $compat_use_alt $compat_same_alt\" 2\n+    set compat_have_dfp 1\n+    # If there is an alternate compiler, does it support decimal float types?\n+    if { $compat_use_alt == 1 && $compat_same_alt == 0 } {\n+\tcompat-use-alt-compiler\n+\tset compat_have_dfp [check_dfp]\n+\tcompat-use-tst-compiler\n+\tverbose \"compat_have_dfp for alt compiler: $compat_have_dfp\" 2\n+    }\n+    # Does the compiler under test support it?\n+    if { $compat_have_dfp == 1 } {\n+\tset compat_have_dfp [check_dfp]\n+\tverbose \"compat_have_dfp for tst compiler: $compat_have_dfp\" 2\n+    }\n+\n+    # If decimal float is not supported, add it to the skip list, which\n+    # affects code in the header files.\n+    if { $compat_have_dfp == 0 } {\n+\tglobal compat_skip_list\n+\tlappend compat_skip_list \"DECIMAL_FLOAT\"\n+    }\n+}\n+\n+# Return 1 if the compiler supports decimal float types, 0 otherwise.\n+#\n+# Don't use check_effective_target since this will differ depending\n+# on the compiler, not the target.\n+#\n+proc check_dfp { } {\n+    set result [string match \"\" [get_compiler_messages dfp2 object {\n+\t_Decimal32 x; _Decimal64 y; _Decimal128 z;\n+    }]]\n+    return $result\n+}\n+\n+# If either compiler does not support decimal float types, skip this test.\n+\n+proc dg-require-compat-dfp { args } {\n+    global compat_have_dfp\n+    if { $compat_have_dfp == 0 } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+    }\n+}"}, {"sha": "86a437fe40ba409d3c60453f571de3f4f5381fdf", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -62,7 +62,8 @@ if ![info exists COMPAT_SKIPS] {\n     set COMPAT_SKIPS [list {}]\n }\n \n-set skip_list $COMPAT_SKIPS\n+global compat_skip_list\n+set compat_skip_list $COMPAT_SKIPS\n \n load_lib dg.exp\n load_lib gcc-dg.exp\n@@ -81,10 +82,10 @@ proc compat-obj { source dest optall optfile optstr xfaildata } {\n     global testcase\n     global tool\n     global compiler_conditional_xfail_data\n-    global skip_list\n+    global compat_skip_list\n \n     # Add the skip specifiers.\n-    foreach skip $skip_list {\n+    foreach skip $compat_skip_list {\n \tif { ![string match $skip \"\"] } {\n \t    lappend optall \"-DSKIP_$skip\"\n \t}"}, {"sha": "04ead2034806195ddc258934ef066b393085b627", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2694fb9683903ed3b1e39066fbd5bc05d6e17/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=27a2694fb9683903ed3b1e39066fbd5bc05d6e17", "patch": "@@ -1055,6 +1055,25 @@ proc check_effective_target_lp64 { } {\n     return $et_lp64_saved\n }\n \n+# Return 1 if the target supports Decimal Floating Point, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_dfp { } {\n+    global et_dfp_saved\n+\n+    if [info exists et_dfp_saved] {\n+\tverbose \"check_effective_target_dfp: using cached result\" 2\n+    } else {\n+\tverbose \"check_effective_target_dfp: compiling source\" 2\n+\tset et_dfp_saved [string match \"\" [get_compiler_messages dfp object {\n+\t    _Decimal32 x; _Decimal64 y; _Decimal128 z;\n+\t}]]\n+    }\n+    verbose \"check_effective_target_dfp: returning $et_dfp_saved\" 2\n+    return $et_dfp_saved\n+}\n+\n # Return 1 if the target needs a command line argument to enable a SIMD\n # instruction set.\n #"}]}