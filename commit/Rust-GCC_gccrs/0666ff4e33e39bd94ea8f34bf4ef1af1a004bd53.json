{"sha": "0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2NmZmNGUzM2UzOWJkOTRlYThmMzRiZjRlZjFhZjFhMDA0YmQ1Mw==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-01-14T10:16:01Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-01-14T10:16:01Z"}, "message": "re PR rtl-optimization/42294 (ICE in code_motion_path_driver for 416.gamess)\n\n        PR rtl-optimization/42294\n        * sel-sched.c (try_replace_dest_reg): When chosen register\n        and original register is the same, do not bail out early, but\n        still check all original insns for validity of replacing destination\n        register.  Set EXPR_TARGET_AVAILABLE to 1 before leaving function\n        in this case.\n\nFrom-SVN: r155889", "tree": {"sha": "b6b0f57b7fe8c4e2385e76f5fba5877465ba91fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b0f57b7fe8c4e2385e76f5fba5877465ba91fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/comments", "author": null, "committer": null, "parents": [{"sha": "5f8d50239ba11866a5e0251975142fee6632ab2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8d50239ba11866a5e0251975142fee6632ab2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8d50239ba11866a5e0251975142fee6632ab2f"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "b4ebd0b20a3dc420d76efb83d55b29ca39f5d988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "patch": "@@ -1,3 +1,12 @@\n+2010-01-14  Andrey Belevantsev <abel@ispras.ru>\n+\n+\tPR rtl-optimization/42294\n+\t* sel-sched.c (try_replace_dest_reg): When chosen register\n+\tand original register is the same, do not bail out early, but\n+\tstill check all original insns for validity of replacing destination\n+\tregister.  Set EXPR_TARGET_AVAILABLE to 1 before leaving function\n+\tin this case.\n+\n 2010-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/42721"}, {"sha": "27c0f21ea3b38db9a7fd0db62764e868ea8cda26", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "patch": "@@ -1642,14 +1642,6 @@ collect_unavailable_regs_from_bnds (expr_t expr, blist_t bnds, regset used_regs,\n static bool\n try_replace_dest_reg (ilist_t orig_insns, rtx best_reg, expr_t expr)\n {\n-  if (expr_dest_regno (expr) == REGNO (best_reg))\n-    {\n-      EXPR_TARGET_AVAILABLE (expr) = 1;\n-      return true;\n-    }\n-\n-  gcc_assert (orig_insns);\n-\n   /* Try whether we'll be able to generate the insn\n      'dest := best_reg' at the place of the original operation.  */\n   for (; orig_insns; orig_insns = ILIST_NEXT (orig_insns))\n@@ -1658,14 +1650,19 @@ try_replace_dest_reg (ilist_t orig_insns, rtx best_reg, expr_t expr)\n \n       gcc_assert (EXPR_SEPARABLE_P (INSN_EXPR (orig_insn)));\n \n-      if (!replace_src_with_reg_ok_p (orig_insn, best_reg)\n-\t  || !replace_dest_with_reg_ok_p (orig_insn, best_reg))\n+      if (REGNO (best_reg) != REGNO (INSN_LHS (orig_insn))\n+\t  && (! replace_src_with_reg_ok_p (orig_insn, best_reg)\n+\t      || ! replace_dest_with_reg_ok_p (orig_insn, best_reg)))\n \treturn false;\n     }\n \n   /* Make sure that EXPR has the right destination\n      register.  */\n-  replace_dest_with_reg_in_expr (expr, best_reg);\n+  if (expr_dest_regno (expr) != REGNO (best_reg))\n+    replace_dest_with_reg_in_expr (expr, best_reg);\n+  else\n+    EXPR_TARGET_AVAILABLE (expr) = 1;\n+\n   return true;\n }\n "}, {"sha": "a407fb72536371fc3ed5fe2aeac94c997fdd342f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "patch": "@@ -1,3 +1,8 @@\n+2010-01-14  Alexander Monakov <amonakov@ispras.ru>\n+\n+        PR rtl-optimization/42294\n+        * gcc.dg/pr42249.c: New.\n+\n 2010-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/42721"}, {"sha": "21708749d5afda8659ed849433de5f674d33d31c", "filename": "gcc/testsuite/gcc.dg/pr42249.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42249.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42249.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42249.c?ref=0666ff4e33e39bd94ea8f34bf4ef1af1a004bd53", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fselective-scheduling -fsel-sched-pipelining\" } */\n+\n+typedef struct TypHeader\n+{\n+  unsigned long size;\n+  struct TypHeader **ptr;\n+} *TypHandle;\n+\n+extern TypHandle NewBag (unsigned int type, unsigned long size);\n+typedef unsigned long TypPoint32;\n+\n+TypHandle\n+QuoPP (TypHandle hdL, TypHandle hdR)\n+{\n+  TypHandle hdC;\n+  unsigned long degC;\n+  TypPoint32 *ptC;\n+  unsigned long degL;\n+  TypPoint32 *ptL;\n+  unsigned long degR;\n+  TypPoint32 *ptR;\n+  unsigned long p;\n+\n+  degL = ((hdL)->size) / sizeof (TypPoint32);\n+  degR = ((hdR)->size) / sizeof (TypPoint32);\n+  degC = degL < degR ? degR : degL;\n+  hdC = NewBag (9, (unsigned long) (degC * sizeof (TypPoint32)));\n+  ptC = (TypPoint32 *) ((TypHandle *) ((hdC)->ptr));\n+\n+  for (p = 0; p < degC; p++)\n+    ptC[(((p) < (degR)) ? (ptR)[(p)] : (p))] =\n+      ((((((p) < (degL)) ? (ptL)[(p)] : (p))) <\n+        (degR)) ? (ptR)[((((p) < (degL)) ? (ptL)[(p)] : (p)))]\n+       : ((((p) < (degL)) ? (ptL)[(p)] : (p))));\n+}\n+"}]}