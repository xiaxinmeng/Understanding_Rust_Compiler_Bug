{"sha": "c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3ZGM2OGU1N2FjZjAxYzdhYzhjMzEzNDBhZDk0Yzk4YjJlNTIxNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-25T00:28:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-25T00:28:51Z"}, "message": "except.c (expand_throw): Use cp_finish_decl for the throw temp.\n\n\t* except.c (expand_throw): Use cp_finish_decl for the throw temp.\n\t* cvt.c (build_up_reference): Pass DIRECT_BIND down into\n\tcp_finish_decl.\n\t* init.c (expand_default_init): Check for DIRECT_BIND instead of\n\tDECL_ARTIFICIAL.\nFixes Sec15/1/P15140.C, g++.eh/ctor1.C.\n\t* call.c (build_over_call): Use build_decl.\n\t* except.c (expand_throw): Just use convert, not\n\tbuild_reinterpret_cast.\nFixes Sec15/P15113.C.\n\nFrom-SVN: r23845", "tree": {"sha": "cf3cbdee8f712a2f2011ea2b09eae4a9ea25960f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf3cbdee8f712a2f2011ea2b09eae4a9ea25960f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/comments", "author": null, "committer": null, "parents": [{"sha": "c4c2aca36127b4a7c4cfa949227e2e2810a9c004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c2aca36127b4a7c4cfa949227e2e2810a9c004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c2aca36127b4a7c4cfa949227e2e2810a9c004"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "0861bb4c31b26295d2887c29e681e241c7616e47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "patch": "@@ -1,5 +1,16 @@\n 1998-11-24  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* except.c (expand_throw): Use cp_finish_decl for the throw temp.\n+\t* cvt.c (build_up_reference): Pass DIRECT_BIND down into\n+\tcp_finish_decl.\n+\t* init.c (expand_default_init): Check for DIRECT_BIND instead of\n+\tDECL_ARTIFICIAL.\n+\n+\t* call.c (build_over_call): Use build_decl.\n+\n+\t* except.c (expand_throw): Just use convert, not\n+\tbuild_reinterpret_cast.\n+\n \t* lex.c (handle_generic_pragma): Use token_buffer.\n \n \t* decl.c (check_tag_decl): Don't complain about null friend decl."}, {"sha": "f3097e922ab43d5a602d8cbaa21bf471827b40d7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "patch": "@@ -3412,8 +3412,7 @@ build_over_call (cand, args, flags)\n \t    return arg;\n \t  else if (TYPE_HAS_TRIVIAL_INIT_REF (DECL_CONTEXT (fn)))\n \t    {\n-\t      val = build (VAR_DECL, DECL_CONTEXT (fn));\n-\t      layout_decl (val, 0);\n+\t      val = build_decl (VAR_DECL, NULL_TREE, DECL_CONTEXT (fn));\n \t      val = build (TARGET_EXPR, DECL_CONTEXT (fn), val, arg, 0, 0);\n \t      TREE_SIDE_EFFECTS (val) = 1;\n \t      return val;"}, {"sha": "af2f4191e5ab6738bcb35241714bee75f6cf4285", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "patch": "@@ -354,11 +354,13 @@ build_up_reference (type, arg, flags)\n \t  DECL_ARTIFICIAL (arg) = 1;\n \t}\n       DECL_INITIAL (arg) = targ;\n-      cp_finish_decl (arg, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n+      cp_finish_decl (arg, targ, NULL_TREE, 0,\n+\t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n     }\n   else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))\n     {\n       tree slot = build_decl (VAR_DECL, NULL_TREE, argtype);\n+      DECL_ARTIFICIAL (slot) = 1;\n       arg = build (TARGET_EXPR, argtype, slot, arg, NULL_TREE, NULL_TREE);\n       TREE_SIDE_EFFECTS (arg) = 1;\n     }"}, {"sha": "7da22cdd73e543f321d5bae1a475f826dfab2774", "filename": "gcc/cp/except.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "patch": "@@ -687,7 +687,8 @@ process_start_catch_block (declspecs, declarator)\n       decl = pushdecl (decl);\n \n       start_decl_1 (decl);\n-      cp_finish_decl (decl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n+      cp_finish_decl (decl, init, NULL_TREE, 0,\n+\t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n     }\n   else\n     {\n@@ -1027,13 +1028,11 @@ expand_throw (exp)\n \t     ourselves into expand_call.  */\n \t  if (TREE_SIDE_EFFECTS (exp))\n \t    {\n-\t      tree temp = build (VAR_DECL, TREE_TYPE (exp));\n+\t      tree temp = build_decl (VAR_DECL, NULL_TREE, TREE_TYPE (exp));\n \t      DECL_ARTIFICIAL (temp) = 1;\n-\t      layout_decl (temp, 0);\n \t      DECL_RTL (temp) = assign_temp (TREE_TYPE (exp), 2, 0, 1);\n-\t      expand_expr (build (INIT_EXPR, TREE_TYPE (exp), temp, exp),\n-\t\t\t   NULL_RTX, VOIDmode, 0);\n-\t      expand_decl_cleanup (NULL_TREE, maybe_build_cleanup (temp));\n+\t      DECL_INITIAL (temp) = exp;\n+\t      cp_finish_decl (temp, exp, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n \t      exp = temp;\n \t    }\n #endif\n@@ -1072,7 +1071,7 @@ expand_throw (exp)\n \n       /* Cast EXP to `void *' so that it will match the prototype for\n \t __cp_push_exception.  */\n-      exp = build_reinterpret_cast (ptr_type_node, exp);\n+      exp = convert (ptr_type_node, exp);\n \n       if (cleanup == NULL_TREE)\n \t{"}, {"sha": "07a405fe088b59921676ec0fde53403b853ad615", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37dc68e57acf01c7ac8c31340ad94c98b2e5214/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c37dc68e57acf01c7ac8c31340ad94c98b2e5214", "patch": "@@ -1138,14 +1138,13 @@ expand_default_init (binfo, true_exp, exp, init, flags)\n       if (true_exp != exp)\n \tabort ();\n \n-      /* We special-case TARGET_EXPRs here to avoid an error about\n-\t private copy constructors for temporaries bound to reference vars.\n-\t If the TARGET_EXPR represents a call to a function that has\n-\t permission to create such objects, a reference can bind directly\n-\t to the return value.  An object variable must be initialized\n-\t via the copy constructor, even if the call is elided.  */\n-      if (! (TREE_CODE (exp) == VAR_DECL && DECL_ARTIFICIAL (exp)\n-\t     && TREE_CODE (init) == TARGET_EXPR && TREE_TYPE (init) == type))\n+      if (flags & DIRECT_BIND)\n+\t/* Do nothing.  We hit this in two cases:  Reference initialization,\n+\t   where we aren't initializing a real variable, so we don't want\n+\t   to run a new constructor; and catching an exception, where we\n+\t   have already built up the constructor call so we could wrap it\n+\t   in an exception region.  */;\n+      else\n \tinit = ocp_convert (type, init, CONV_IMPLICIT|CONV_FORCE_TEMP, flags);\n \n       if (TREE_CODE (init) == TRY_CATCH_EXPR)"}]}