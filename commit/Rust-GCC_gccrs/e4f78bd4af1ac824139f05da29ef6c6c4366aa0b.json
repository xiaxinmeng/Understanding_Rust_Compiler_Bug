{"sha": "e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmNzhiZDRhZjFhYzgyNDEzOWYwNWRhMjllZjZjNmM0MzY2YWEwYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-07-15T21:50:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-07-15T21:50:51Z"}, "message": "re PR middle-end/15885 (wrong va_start warning (and code))\n\n        * cp-lang.c (cxx_types_compatible_p): To the middle-end,\n        references and pointers are compatible.\n\n        PR middle-end/15885\n        * gimplify.c (gimplify_arg): New fn, split out from...\n        (gimplify_call_expr): Here.  Special-case BUILT_IN_VA_START.\n\nFrom-SVN: r84782", "tree": {"sha": "f820294f653da18ebccc79a5d1540ab7b4b21ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f820294f653da18ebccc79a5d1540ab7b4b21ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/comments", "author": null, "committer": null, "parents": [{"sha": "bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2f7bb864e8e75db8114c76c36db761e0d65f7e"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "8c1b4a8b88c5223cf3e38be4c8c46afdae679e4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "patch": "@@ -1,3 +1,9 @@\n+2004-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR middle-end/15885\n+\t* gimplify.c (gimplify_arg): New fn, split out from...\n+\t(gimplify_call_expr): Here.  Special-case BUILT_IN_VA_START.\n+\n 2004-07-15  Roman Zippel  <zippel@linux-m68k.org>\n \n \t* config/m68k/m68k.c (output_move_qimode): Abort on an attempt to \n@@ -12,14 +18,14 @@\n \n 2004-07-15  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.md (\"bunordered\"): Disable for e500.\n-        (\"bordered\"): Same.\n+\t* config/rs6000/rs6000.md (\"bunordered\"): Disable for e500.\n+\t(\"bordered\"): Same.\n \n 2004-07-15  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.md (\"*cceq_ior_compare\"): Allow\n-        unconditionally.\n-        * config/rs6000/spe.md (\"e500_cceq_ior_compare\"): Remove.\n+\t* config/rs6000/rs6000.md (\"*cceq_ior_compare\"): Allow\n+\tunconditionally.\n+\t* config/rs6000/spe.md (\"e500_cceq_ior_compare\"): Remove.\n \n 2004-07-15  Richard Sandiford  <rsandifo@redhat.com>\n \n@@ -59,7 +65,7 @@\n \n \t* print-tree.c (print_node): Fix casts last change.\n \n-2004-07-15  Paul Brook  <paul@codesourcery.com>\n+2004-07-15  Paul Brook\t<paul@codesourcery.com>\n \n \t* dwarf2out.c (dwarf2out_begin_prologue): Rename IA64_UNWIND_INFO\n \tto TARGET_UNWIND_INFO.\n@@ -95,7 +101,7 @@\n \tUse alias set 0 for memory, do proper mode calculations and adjust\n \taddress for memories.\n \n-2004-07-14  Per Bothner  <per@bothner.com>\n+2004-07-14  Per Bothner\t <per@bothner.com>\n \n \t* input.h:  If USE_MAPPED_LOCATION, define separate expanded_location\n \tstructure with extra column field.\n@@ -124,10 +130,10 @@\n \t* config/sh/sh.c (sh_gimplify_va_arg_expr): Likewise.\n \t* config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n \n-2004-07-14  Mike Stump  <mrs@apple.com>\n+2004-07-14  Mike Stump\t<mrs@apple.com>\n \n \t* config/darwin.h (WINT_TYPE): Define to be int to match\n-        system header files.\n+\tsystem header files.\n \n 2004-07-14  Bob Wilson  <bob.wilson@acm.org>\n "}, {"sha": "830fc4b69febcc7fcebb778f5274bf027cf70dba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "patch": "@@ -1,3 +1,8 @@\n+2004-07-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-lang.c (cxx_types_compatible_p): To the middle-end,\n+\treferences and pointers are compatible.\n+\n 2004-07-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (xref_basetypes): Refactor.\n@@ -16,7 +21,7 @@\n \n 2004-07-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* class.c(finish_struct_bits): Don't set TYPE_HAS_CONVERSION here.\n+\t* class.c (finish_struct_bits): Don't set TYPE_HAS_CONVERSION here.\n \t* decl.c (xref_basetypes): Set it here.\n \n \t* class.c (check_bases): Don't set CLASSTYPE_NON_AGGREGATE here."}, {"sha": "b6e933fede6f8b9ce75fd877d42fed3aafdb31b4", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "patch": "@@ -317,9 +317,23 @@ cp_var_mod_type_p (tree type, tree fn)\n   return false;\n }\n \n+/* This compares two types for equivalence (\"compatible\" in C-based languages).\n+   This routine should only return 1 if it is sure.  It should not be used\n+   in contexts where erroneously returning 0 causes problems.  */\n+\n static int cxx_types_compatible_p (tree x, tree y)\n {\n-  return same_type_ignoring_top_level_qualifiers_p (x, y);\n+  if (same_type_ignoring_top_level_qualifiers_p (x, y))\n+    return 1;\n+\n+  /* Once we get to the middle-end, references and pointers are\n+     interchangeable.  FIXME should we try to replace all references with\n+     pointers?  */\n+  if (POINTER_TYPE_P (x) && POINTER_TYPE_P (y)\n+      && same_type_p (TREE_TYPE (x), TREE_TYPE (y)))\n+    return 1;\n+\n+  return 0;\n }\n \n /* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed"}, {"sha": "642cff9b81eccaa4e6478f1549851959f189ab48", "filename": "gcc/gimplify.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "patch": "@@ -1788,6 +1788,31 @@ gimplify_self_mod_expr (tree *expr_p, tree *pre_p, tree *post_p,\n     }\n }\n \n+/* Subroutine of gimplify_call_expr:  Gimplify a single argument.  */\n+\n+static enum gimplify_status\n+gimplify_arg (tree *expr_p, tree *pre_p)\n+{\n+  bool (*test) (tree);\n+  fallback_t fb;\n+\n+  /* In general, we allow lvalues for function arguments to avoid\n+     extra overhead of copying large aggregates out of even larger\n+     aggregates into temporaries only to copy the temporaries to\n+     the argument list.  Make optimizers happy by pulling out to\n+     temporaries those types that fit in registers.  */\n+  if (is_gimple_reg_type (TREE_TYPE (*expr_p)))\n+    test = is_gimple_val, fb = fb_rvalue;\n+  else\n+    test = is_gimple_lvalue, fb = fb_either;\n+\n+  /* There is a sequence point before a function call.  Side effects in\n+     the argument list must occur before the actual call. So, when\n+     gimplifying arguments, force gimplify_expr to use an internal\n+     post queue which is then appended to the end of PRE_P.  */\n+  return gimplify_expr (expr_p, pre_p, NULL, test, fb);\n+}\n+\n /* Gimplify the CALL_EXPR node pointed by EXPR_P.  PRE_P points to the\n    list where side effects that must happen before *EXPR_P should be stored.\n    WANT_VALUE is true if the result of the call is desired.  */\n@@ -1847,6 +1872,11 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n \t  *expr_p = new;\n \t  return GS_OK;\n \t}\n+\n+      if (DECL_FUNCTION_CODE (decl) == BUILT_IN_VA_START)\n+\t/* Avoid gimplifying the second argument to va_start, which needs\n+\t   to be the plain PARM_DECL.  */\n+\treturn gimplify_arg (&TREE_VALUE (TREE_OPERAND (*expr_p, 1)), pre_p);\n     }\n \n   /* There is a sequence point before the call, so any side effects in\n@@ -1861,24 +1891,8 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n        arglist = TREE_CHAIN (arglist))\n     {\n       enum gimplify_status t;\n-      bool (*test) (tree);\n-      fallback_t fb;\n-\n-      /* In general, we allow lvalues for function arguments to avoid\n-\t extra overhead of copying large aggregates out of even larger\n-\t aggregates into temporaries only to copy the temporaries to\n-\t the argument list.  Make optimizers happy by pulling out to\n-\t temporaries those types that fit in registers.  */\n-      if (is_gimple_reg_type (TREE_TYPE (TREE_VALUE (arglist))))\n-\ttest = is_gimple_val, fb = fb_rvalue;\n-      else\n-\ttest = is_gimple_lvalue, fb = fb_either;\n \n-      /* There is a sequence point before a function call.  Side effects in\n-\t the argument list must occur before the actual call. So, when\n-\t gimplifying arguments, force gimplify_expr to use an internal\n-\t post queue which is then appended to the end of PRE_P.  */\n-      t = gimplify_expr (&TREE_VALUE (arglist), pre_p, NULL, test, fb);\n+      t = gimplify_arg (&TREE_VALUE (arglist), pre_p);\n \n       if (t == GS_ERROR)\n \tret = GS_ERROR;"}]}