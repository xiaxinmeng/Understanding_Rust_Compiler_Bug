{"sha": "f989ed67ff0a648714f13bb11194d0dbcce39fbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4OWVkNjdmZjBhNjQ4NzE0ZjEzYmIxMTE5NGQwZGJjY2UzOWZiZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-09-17T07:09:50Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-09-17T07:09:50Z"}, "message": "Makefile.am (CFILES): Add cxxfilt.c.\n\nbinutils:\n\t* Makefile.am (CFILES): Add cxxfilt.c.\n\t(cxxfilt_SOURCES): Now just cxxfilt.c $(BULIBS).\n\t(cxxfilt_LDADD): Delete.\n\tRemove all references to underscore.c.\n\tRegen dependencies.\n\t* configure.in: Define TARGET_PREPENDS_UNDERSCORE in\n\tconfig.h from $UNDERSCORE, rather than AC_SUBSTing it.\n\t* binutils/cxxfilt.c: Moved here from gcc/cp, minor\n\tadjustments to fit into binutils framework.\n\t* configure, config.in, Makefile.in, doc/Makefile.in: Regenerate.\n\ngcc/cp:\n\t* Make-lang.in: Remove all references to the demangler.\n\t* cxxfilt.c: Moved to binutils.\n\nFrom-SVN: r57235", "tree": {"sha": "fea7d6b7d65d18af1e876800e6f11882deefeabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fea7d6b7d65d18af1e876800e6f11882deefeabd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f989ed67ff0a648714f13bb11194d0dbcce39fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f989ed67ff0a648714f13bb11194d0dbcce39fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f989ed67ff0a648714f13bb11194d0dbcce39fbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f989ed67ff0a648714f13bb11194d0dbcce39fbe/comments", "author": null, "committer": null, "parents": [{"sha": "26ad77f1732451be616ebe941ddda6a2ac882039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ad77f1732451be616ebe941ddda6a2ac882039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ad77f1732451be616ebe941ddda6a2ac882039"}], "stats": {"total": 353, "additions": 15, "deletions": 338}, "files": [{"sha": "ddf626125140c5cff66e53893714e602607fd10d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f989ed67ff0a648714f13bb11194d0dbcce39fbe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f989ed67ff0a648714f13bb11194d0dbcce39fbe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f989ed67ff0a648714f13bb11194d0dbcce39fbe", "patch": "@@ -1,3 +1,8 @@\n+2002-09-17  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Make-lang.in: Remove all references to the demangler.\n+\t* cxxfilt.c: Moved to binutils.\n+\n 2002-09-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/7718\n@@ -123,7 +128,7 @@\n \t* class.c (layout_virtual_bases): Warn about bugs in G++ that\n \tresult in incorrect object layouts.\n \t(layout_class_type): Likewise.\n-\t\n+\n 2002-08-24  Matt Austern  <austern@apple.com>\n \n \t* tree.c (lvalue_p_1): Add argument for whether casts of lvalues\n@@ -132,7 +137,7 @@\n \t(lvalue_p): Ditto.\n \t(non_cast_lvalue_or_else): New.\n \t* tree.h: Declare it.\n-        * typeck.c (build_unary_op): Use non_cast_lvalue_or_else.\n+\t* typeck.c (build_unary_op): Use non_cast_lvalue_or_else.\n \n 2002-08-22  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -221,7 +226,7 @@\n \t* search.c (adjust_result_of_qualified_name_lookup): New function.\n \t* typeck.c (qualify_type_recursive): Use TYPE_PTRMEM_* rather than\n \taccessing OFFSET_TYPEs directly.\n-\t\n+\n 2002-08-08  Mike Stump  <mrs@apple.com>\n \n \t* call.c (add_builtin_candidate): legal -> valid, illegal -> invalid.\n@@ -541,8 +546,8 @@\n \n \t* call.c (build_over_call): Likewise.\n \t(cp_convert_parm_for_inlining): New fn.\n-        (convert_for_arg_passing): New fn.\n-        (convert_default_arg, build_over_call): Use it.\n+\t(convert_for_arg_passing): New fn.\n+\t(convert_default_arg, build_over_call): Use it.\n \t(type_passed_as): New fn.\n \t* pt.c (tsubst_decl): Use it.\n \t* decl2.c (cp_build_parm_decl): New fn.\n@@ -944,8 +949,8 @@\n 2002-06-20  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/6747\n-        * typeck.c (mark_addressable): Don't test TREE_ADDRESSABLE early.\n-        Call put_var_into_stack.\n+\t* typeck.c (mark_addressable): Don't test TREE_ADDRESSABLE early.\n+\tCall put_var_into_stack.\n \n 2002-06-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "0ec886d5a197d4b98e3ae89348163a6cbbb2082f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f989ed67ff0a648714f13bb11194d0dbcce39fbe/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f989ed67ff0a648714f13bb11194d0dbcce39fbe/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f989ed67ff0a648714f13bb11194d0dbcce39fbe", "patch": "@@ -40,17 +40,12 @@\n # Actual names to use when installing a native compiler.\n CXX_INSTALL_NAME = `echo c++|sed '$(program_transform_name)'`\n GXX_INSTALL_NAME = `echo g++|sed '$(program_transform_name)'`\n-DEMANGLER_INSTALL_NAME = `echo c++filt|sed '$(program_transform_name)'`\n CXX_TARGET_INSTALL_NAME = $(target_alias)-`echo c++|sed '$(program_transform_name)'`\n GXX_TARGET_INSTALL_NAME = $(target_alias)-`echo g++|sed '$(program_transform_name)'`\n \n # Actual names to use when installing a cross-compiler.\n CXX_CROSS_NAME = `echo c++|sed '$(program_transform_cross_name)'`\n GXX_CROSS_NAME = `echo g++|sed '$(program_transform_cross_name)'`\n-DEMANGLER_CROSS_NAME = `echo c++filt|sed '$(program_transform_cross_name)'`\n-\n-# The name to use for the demangler program.\n-DEMANGLER_PROG = c++filt$(exeext)\n \n #\f\n # Define the names for selecting c++ in LANGUAGES.\n@@ -81,14 +76,6 @@ g++-cross$(exeext): g++$(exeext)\n \t-rm -f g++-cross$(exeext)\n \tcp g++$(exeext) g++-cross$(exeext)\n \n-# The demangler.\n-cp/cxxfilt.o: cp/cxxfilt.c $(DEMANGLE_H) $(CONFIG_H) $(SYSTEM_H) version.h\n-\n-# Apparently OpenVM needs the -o to be at the beginning of the link line.\n-$(DEMANGLER_PROG): cp/cxxfilt.o version.o $(LIBDEPS)\n-\t$(CC) -o $@ $(ALL_CFLAGS) $(LDFLAGS) \\\n-\t  cp/cxxfilt.o version.o $(LIBS)\n-\n # The compiler itself.\n # Shared with C front end:\n CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \\\n@@ -135,9 +122,9 @@ gt-cp-tree.h : s-gtype; @true\n # Build hooks:\n \n c++.all.build: g++$(exeext)\n-c++.all.cross: g++-cross$(exeext) $(DEMANGLER_PROG)\n+c++.all.cross: g++-cross$(exeext)\n c++.start.encap: g++$(exeext)\n-c++.rest.encap: $(DEMANGLER_PROG)\n+c++.rest.encap:\n \n c++.info: \n c++.dvi:\n@@ -177,17 +164,6 @@ c++.install-common: installdirs\n \t    rm -f $(bindir)/$(CXX_TARGET_INSTALL_NAME)$(exeext); \\\n \t    $(LN) $(bindir)/$(CXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_TARGET_INSTALL_NAME)$(exeext); \\\n \t  fi ; \\\n-\t  if [ x$(DEMANGLER_PROG) != x ] && [ -x \"$(DEMANGLER_PROG)\" ]; then \\\n-\t    if [ -f g++-cross$(exeext) ] ; then \\\n-\t      rm -f $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \\\n-\t      $(INSTALL_PROGRAM) $(DEMANGLER_PROG) $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \\\n-\t      chmod a+x $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \\\n-\t    else \\\n-\t      rm -f $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \\\n-\t      $(INSTALL_PROGRAM) $(DEMANGLER_PROG) $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \\\n-\t      chmod a+x $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \\\n-\t    fi ; \\\n-\t  fi ; \\\n \tfi\n \n c++.install-info: \n@@ -210,8 +186,6 @@ c++.uninstall:\n \t-rm -rf $(bindir)/$(CXX_CROSS_NAME)$(exeext)\n \t-rm -rf $(bindir)/$(GXX_INSTALL_NAME)$(exeext)\n \t-rm -rf $(bindir)/$(GXX_CROSS_NAME)$(exeext)\n-\t-rm -rf $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext)\n-\t-rm -rf $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext)\n \t-rm -rf $(man1dir)/$(GXX_INSTALL_NAME)$(man1ext)\n \t-rm -rf $(man1dir)/$(GXX_CROSS_NAME)$(man1ext)\n #\f\n@@ -220,7 +194,7 @@ c++.uninstall:\n # We just have to delete files specific to us.\n \n c++.mostlyclean:\n-\t-rm -f cp/*$(objext) $(DEMANGLER_PROG)\n+\t-rm -f cp/*$(objext)\n \t-rm -f cp/*$(coverageexts)\n c++.clean:\n c++.distclean:"}, {"sha": "c9ae0e4902550798114b979ea6d90ec32a277406", "filename": "gcc/cp/cxxfilt.c", "status": "removed", "additions": 0, "deletions": 302, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ad77f1732451be616ebe941ddda6a2ac882039/gcc%2Fcp%2Fcxxfilt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ad77f1732451be616ebe941ddda6a2ac882039/gcc%2Fcp%2Fcxxfilt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxxfilt.c?ref=26ad77f1732451be616ebe941ddda6a2ac882039", "patch": "@@ -1,302 +0,0 @@\n-/* Demangler for GNU C++ - main program\n-   Copyright 1989, 1991, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002 Free Software Foundation, Inc.\n-   Written by James Clark (jjc@jclark.uucp)\n-   Rewritten by Fred Fish (fnf@cygnus.com) for ARM and Lucid demangling\n-   Modified by Satish Pai (pai@apollo.hp.com) for HP demangling\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"demangle.h\"\n-#include \"getopt.h\"\n-#include \"version.h\"\n-\n-static const char *program_name;\n-static int flags = DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE;\n-\n-static void demangle_it PARAMS ((char *));\n-static void usage PARAMS ((FILE *, int)) ATTRIBUTE_NORETURN;\n-static void fatal PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n-static void print_demangler_list PARAMS ((FILE *));\n-\n-static void\n-demangle_it (mangled_name)\n-     char *mangled_name;\n-{\n-  char *result;\n-\n-  /* For command line args, also try to demangle type encodings.  */\n-  result = cplus_demangle (mangled_name, flags | DMGL_TYPES);\n-  if (result == NULL)\n-    {\n-      printf (\"%s\\n\", mangled_name);\n-    }\n-  else\n-    {\n-      printf (\"%s\\n\", result);\n-      free (result);\n-    }\n-}\n-\n-static void \n-print_demangler_list (stream)\n-     FILE *stream;\n-{\n-  const struct demangler_engine *demangler; \n-\n-  fprintf (stream, \"{%s\", libiberty_demanglers->demangling_style_name);\n-  \n-  for (demangler = libiberty_demanglers + 1;\n-       demangler->demangling_style != unknown_demangling;\n-       ++demangler)\n-    fprintf (stream, \",%s\", demangler->demangling_style_name);\n-\n-  fprintf (stream, \"}\");\n-}\n-\n-static void\n-usage (stream, status)\n-     FILE *stream;\n-     int status;\n-{\n-  fprintf (stream, \"\\\n-Usage: %s [-_] [-n] [--strip-underscores] [--no-strip-underscores] \\n\",\n-\t   program_name);\n-\n-  fprintf (stream, \"\\\n-       [-s \");\n-  print_demangler_list (stream);\n-  fprintf (stream, \"]\\n\");\n-\n-  fprintf (stream, \"\\\n-       [--format \");\n-  print_demangler_list (stream);\n-  fprintf (stream, \"]\\n\");\n-\n-  fprintf (stream, \"\\\n-       [--help] [--version] [arg...]\\n\");\n-  exit (status);\n-}\n-\n-#define MBUF_SIZE 32767\n-char mbuffer[MBUF_SIZE];\n-\n-int strip_underscore = 0;\n-\n-static const struct option long_options[] = {\n-  {\"strip-underscores\", no_argument, 0, '_'},\n-  {\"format\", required_argument, 0, 's'},\n-  {\"help\", no_argument, 0, 'h'},\n-  {\"no-strip-underscores\", no_argument, 0, 'n'},\n-  {\"version\", no_argument, 0, 'v'},\n-  {0, no_argument, 0, 0}\n-};\n-\n-static const char *\n-standard_symbol_characters PARAMS ((void));\n-\n-static const char *\n-hp_symbol_characters PARAMS ((void));\n-\n-/* Return the string of non-alnum characters that may occur \n-   as a valid symbol component, in the standard assembler symbol\n-   syntax.  */\n-\n-static const char *\n-standard_symbol_characters ()\n-{\n-  return \"_$.\";\n-}\n-\n-\n-/* Return the string of non-alnum characters that may occur\n-   as a valid symbol name component in an HP object file.\n-\n-   Note that, since HP's compiler generates object code straight from\n-   C++ source, without going through an assembler, its mangled\n-   identifiers can use all sorts of characters that no assembler would\n-   tolerate, so the alphabet this function creates is a little odd.\n-   Here are some sample mangled identifiers offered by HP:\n-\n-\ttypeid*__XT24AddressIndExpClassMember_\n-\t[Vftptr]key:__dt__32OrdinaryCompareIndExpClassMemberFv\n-\t__ct__Q2_9Elf64_Dyn18{unnamed.union.#1}Fv\n-\n-   This still seems really weird to me, since nowhere else in this\n-   file is there anything to recognize curly brackets, parens, etc.\n-   I've talked with Srikanth <srikanth@cup.hp.com>, and he assures me\n-   this is right, but I still strongly suspect that there's a\n-   misunderstanding here.\n-\n-   If we decide it's better for c++filt to use HP's assembler syntax\n-   to scrape identifiers out of its input, here's the definition of\n-   the symbol name syntax from the HP assembler manual:\n-\n-       Symbols are composed of uppercase and lowercase letters, decimal\n-       digits, dollar symbol, period (.), ampersand (&), pound sign(#) and\n-       underscore (_). A symbol can begin with a letter, digit underscore or\n-       dollar sign. If a symbol begins with a digit, it must contain a\n-       non-digit character.\n-\n-   So have fun.  */\n-static const char *\n-hp_symbol_characters ()\n-{\n-  return \"_$.<>#,*&[]:(){}\";\n-}\n-\n-extern int main PARAMS ((int, char **));\n-\n-int\n-main (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  char *result;\n-  int c;\n-  const char *valid_symbols;\n-  enum demangling_styles style = auto_demangling;\n-\n-  program_name = argv[0];\n-\n-  strip_underscore = (USER_LABEL_PREFIX[0] == '_');\n-\n-  while ((c = getopt_long (argc, argv, \"_ns:\", long_options, (int *) 0)) != EOF)\n-    {\n-      switch (c)\n-\t{\n-\tcase '?':\n-\t  usage (stderr, 1);\n-\t  break;\n-\tcase 'h':\n-\t  usage (stdout, 0);\n-\tcase 'n':\n-\t  strip_underscore = 0;\n-\t  break;\n-\tcase 'v':\n-\t  printf (\"GNU %s (C++ demangler), version %s\\n\",\n-\t\t  program_name, version_string);\n-\t  return (0);\n-\tcase '_':\n-\t  strip_underscore = 1;\n-\t  break;\n-\tcase 's':\n-\t  {\n-\t    style = cplus_demangle_name_to_style (optarg);\n-\t    if (style == unknown_demangling)\n-\t      {\n-\t\tfprintf (stderr, \"%s: unknown demangling style `%s'\\n\",\n-\t\t\t program_name, optarg);\n-\t\treturn (1);\n-\t      }\n-\t    else\n-\t      cplus_demangle_set_style (style);\n-\t  }\n-\t  break;\n-\t}\n-    }\n-\n-  if (optind < argc)\n-    {\n-      for ( ; optind < argc; optind++)\n-\t{\n-\t  demangle_it (argv[optind]);\n-\t}\n-    }\n-  else\n-    {\n-      switch (current_demangling_style)\n-\t{\n-\tcase gnu_demangling:\n-\tcase lucid_demangling:\n-\tcase arm_demangling:\n-\tcase java_demangling:\n-\tcase edg_demangling:\n-\tcase gnat_demangling:\n-\tcase gnu_v3_demangling:\n-\tcase auto_demangling:\n-\t  valid_symbols = standard_symbol_characters ();\n-\t  break;\n-\tcase hp_demangling:\n-\t  valid_symbols = hp_symbol_characters ();\n-\t  break;\n-\tdefault:\n-\t  /* Folks should explicitly indicate the appropriate alphabet for\n-\t     each demangling.  Providing a default would allow the\n-\t     question to go unconsidered.  */\n-\t  fatal (\"Internal error: no symbol alphabet for current style\");\n-\t}\n-\n-      for (;;)\n-\t{\n-\t  int i = 0;\n-\t  c = getchar ();\n-\t  /* Try to read a label.  */\n-\t  while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))\n-\t    {\n-\t      if (i >= MBUF_SIZE-1)\n-\t\tbreak;\n-\t      mbuffer[i++] = c;\n-\t      c = getchar ();\n-\t    }\n-\t  if (i > 0)\n-\t    {\n-\t      int skip_first = 0;\n-\n-\t      mbuffer[i] = 0;\n-\t      if (mbuffer[0] == '.' || mbuffer[0] == '$')\n-\t\t++skip_first;\n-\t      if (strip_underscore && mbuffer[skip_first] == '_')\n-\t\t++skip_first;\n-\n-\t      if (skip_first > i)\n-\t\tskip_first = i;\n-\n-\t      flags |= (int) style;\n-\t      result = cplus_demangle (mbuffer + skip_first, flags);\n-\t      if (result)\n-\t\t{\n-\t\t  if (mbuffer[0] == '.')\n-\t\t    putc ('.', stdout);\n-\t\t  fputs (result, stdout);\n-\t\t  free (result);\n-\t\t}\n-\t      else\n-\t\tfputs (mbuffer, stdout);\n-\n-\t      fflush (stdout);\n-\t    }\n-\t  if (c == EOF)\n-\t    break;\n-\t  putchar (c);\n-\t  fflush (stdout);\n-\t}\n-    }\n-\n-  return (0);\n-}\n-\n-static void\n-fatal (str)\n-     const char *str;\n-{\n-  fprintf (stderr, \"%s: %s\\n\", program_name, str);\n-  exit (1);\n-}"}]}