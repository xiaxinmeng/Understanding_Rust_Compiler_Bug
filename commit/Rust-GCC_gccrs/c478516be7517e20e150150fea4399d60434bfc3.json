{"sha": "c478516be7517e20e150150fea4399d60434bfc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3ODUxNmJlNzUxN2UyMGUxNTAxNTBmZWE0Mzk5ZDYwNDM0YmZjMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2015-09-08T16:46:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-08T16:46:16Z"}, "message": "re PR other/67457 (segfault in libbacktrace)\n\n\tPR other/67457\n\t* backtrace.c: #include \"internal.h\".\n\t(struct backtrace_data): Add can_alloc field.\n\t(unwind): If can_alloc is false, don't try to get file/line\n\tinformation.\n\t(backtrace_full): Set can_alloc field in bdata.\n\t* alloc.c (backtrace_alloc): Don't call error_callback if it is\n\tNULL.\n\t* mmap.c (backtrace_alloc): Likewise.\n\t* internal.h: Update comments for backtrace_alloc and\n\tbacktrace_free.\n\nFrom-SVN: r227533", "tree": {"sha": "eae6d20512a5643294e17bfb41e704ab2559be16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae6d20512a5643294e17bfb41e704ab2559be16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c478516be7517e20e150150fea4399d60434bfc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c478516be7517e20e150150fea4399d60434bfc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c478516be7517e20e150150fea4399d60434bfc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c478516be7517e20e150150fea4399d60434bfc3/comments", "author": null, "committer": null, "parents": [{"sha": "2eab96661b6c08679ffd4a084f59f3935cfcddb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eab96661b6c08679ffd4a084f59f3935cfcddb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eab96661b6c08679ffd4a084f59f3935cfcddb9"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "fb7e8b0aa793da9dfccab54951f07cda659a731d", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=c478516be7517e20e150150fea4399d60434bfc3", "patch": "@@ -1,3 +1,17 @@\n+2015-09-08  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR other/67457\n+\t* backtrace.c: #include \"internal.h\".\n+\t(struct backtrace_data): Add can_alloc field.\n+\t(unwind): If can_alloc is false, don't try to get file/line\n+\tinformation.\n+\t(backtrace_full): Set can_alloc field in bdata.\n+\t* alloc.c (backtrace_alloc): Don't call error_callback if it is\n+\tNULL.\n+\t* mmap.c (backtrace_alloc): Likewise.\n+\t* internal.h: Update comments for backtrace_alloc and\n+\tbacktrace_free.\n+\n 2015-09-08  Ian Lance Taylor  <iant@google.com>\n \n \tPR other/67457"}, {"sha": "772d3bfb8ad28f27bc5a8dba9440d4d253c72b9b", "filename": "libbacktrace/alloc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Falloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Falloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Falloc.c?ref=c478516be7517e20e150150fea4399d60434bfc3", "patch": "@@ -44,7 +44,8 @@ POSSIBILITY OF SUCH DAMAGE.  */\n    backtrace functions may not be safely invoked from a signal\n    handler.  */\n \n-/* Allocate memory like malloc.  */\n+/* Allocate memory like malloc.  If ERROR_CALLBACK is NULL, don't\n+   report an error.  */\n \n void *\n backtrace_alloc (struct backtrace_state *state ATTRIBUTE_UNUSED,\n@@ -55,7 +56,10 @@ backtrace_alloc (struct backtrace_state *state ATTRIBUTE_UNUSED,\n \n   ret = malloc (size);\n   if (ret == NULL)\n-    error_callback (data, \"malloc\", errno);\n+    {\n+      if (error_callback)\n+\terror_callback (data, \"malloc\", errno);\n+    }\n   return ret;\n }\n "}, {"sha": "d675e1e10629ef4ece3d03385e2df49d3fff25d6", "filename": "libbacktrace/backtrace.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fbacktrace.c?ref=c478516be7517e20e150150fea4399d60434bfc3", "patch": "@@ -34,6 +34,7 @@ POSSIBILITY OF SUCH DAMAGE.  */\n \n #include \"unwind.h\"\n #include \"backtrace.h\"\n+#include \"internal.h\"\n \n /* The main backtrace_full routine.  */\n \n@@ -53,6 +54,8 @@ struct backtrace_data\n   void *data;\n   /* Value to return from backtrace_full.  */\n   int ret;\n+  /* Whether there is any memory available.  */\n+  int can_alloc;\n };\n \n /* Unwind library callback routine.  This is passed to\n@@ -80,8 +83,11 @@ unwind (struct _Unwind_Context *context, void *vdata)\n   if (!ip_before_insn)\n     --pc;\n \n-  bdata->ret = backtrace_pcinfo (bdata->state, pc, bdata->callback,\n-\t\t\t\t bdata->error_callback, bdata->data);\n+  if (!bdata->can_alloc)\n+    bdata->ret = bdata->callback (bdata->data, pc, NULL, 0, NULL);\n+  else\n+    bdata->ret = backtrace_pcinfo (bdata->state, pc, bdata->callback,\n+\t\t\t\t   bdata->error_callback, bdata->data);\n   if (bdata->ret != 0)\n     return _URC_END_OF_STACK;\n \n@@ -96,13 +102,26 @@ backtrace_full (struct backtrace_state *state, int skip,\n \t\tbacktrace_error_callback error_callback, void *data)\n {\n   struct backtrace_data bdata;\n+  void *p;\n \n   bdata.skip = skip + 1;\n   bdata.state = state;\n   bdata.callback = callback;\n   bdata.error_callback = error_callback;\n   bdata.data = data;\n   bdata.ret = 0;\n+\n+  /* If we can't allocate any memory at all, don't try to produce\n+     file/line information.  */\n+  p = backtrace_alloc (state, 4096, NULL, NULL);\n+  if (p == NULL)\n+    bdata.can_alloc = 0;\n+  else\n+    {\n+      backtrace_free (state, p, 4096, NULL, NULL);\n+      bdata.can_alloc = 1;\n+    }\n+\n   _Unwind_Backtrace (unwind, &bdata);\n   return bdata.ret;\n }"}, {"sha": "b139e50f9e8c7052c79c104e8f4af5ec41cd9dc8", "filename": "libbacktrace/internal.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Finternal.h?ref=c478516be7517e20e150150fea4399d60434bfc3", "patch": "@@ -201,13 +201,15 @@ extern int backtrace_close (int descriptor,\n extern void backtrace_qsort (void *base, size_t count, size_t size,\n \t\t\t     int (*compar) (const void *, const void *));\n \n-/* Allocate memory.  This is like malloc.  */\n+/* Allocate memory.  This is like malloc.  If ERROR_CALLBACK is NULL,\n+   this does not report an error, it just returns NULL.  */\n \n extern void *backtrace_alloc (struct backtrace_state *state, size_t size,\n \t\t\t      backtrace_error_callback error_callback,\n \t\t\t      void *data) ATTRIBUTE_MALLOC;\n \n-/* Free memory allocated by backtrace_alloc.  */\n+/* Free memory allocated by backtrace_alloc.  If ERROR_CALLBACK is\n+   NULL, this does not report an error.  */\n \n extern void backtrace_free (struct backtrace_state *state, void *mem,\n \t\t\t    size_t size,"}, {"sha": "1910cb1f9eb4a4d704899553e9517d91ba35738f", "filename": "libbacktrace/mmap.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Fmmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c478516be7517e20e150150fea4399d60434bfc3/libbacktrace%2Fmmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fmmap.c?ref=c478516be7517e20e150150fea4399d60434bfc3", "patch": "@@ -77,7 +77,8 @@ backtrace_free_locked (struct backtrace_state *state, void *addr, size_t size)\n     }\n }\n \n-/* Allocate memory like malloc.  */\n+/* Allocate memory like malloc.  If ERROR_CALLBACK is NULL, don't\n+   report an error.  */\n \n void *\n backtrace_alloc (struct backtrace_state *state,\n@@ -140,7 +141,10 @@ backtrace_alloc (struct backtrace_state *state,\n       page = mmap (NULL, asksize, PROT_READ | PROT_WRITE,\n \t\t   MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n       if (page == MAP_FAILED)\n-\terror_callback (data, \"mmap\", errno);\n+\t{\n+\t  if (error_callback)\n+\t    error_callback (data, \"mmap\", errno);\n+\t}\n       else\n \t{\n \t  size = (size + 7) & ~ (size_t) 7;"}]}