{"sha": "8a88c2763a4845fda6fd11e3cc6bcdc53de97597", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4OGMyNzYzYTQ4NDVmZGE2ZmQxMWUzY2M2YmNkYzUzZGU5NzU5Nw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2008-09-01T12:35:24Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2008-09-01T12:35:24Z"}, "message": "* config/ia64/ia64.c (TARGET_ADDRESS_COST): Update.\n\nFrom-SVN: r139861", "tree": {"sha": "bc06a4109a4156953f293febbb27664906979956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc06a4109a4156953f293febbb27664906979956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a88c2763a4845fda6fd11e3cc6bcdc53de97597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a88c2763a4845fda6fd11e3cc6bcdc53de97597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a88c2763a4845fda6fd11e3cc6bcdc53de97597", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a88c2763a4845fda6fd11e3cc6bcdc53de97597/comments", "author": null, "committer": null, "parents": [{"sha": "756f763b0bae99a148db1b2b9dfb11bc51b384f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756f763b0bae99a148db1b2b9dfb11bc51b384f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756f763b0bae99a148db1b2b9dfb11bc51b384f0"}], "stats": {"total": 176, "additions": 90, "deletions": 86}, "files": [{"sha": "2ae2644657c34fe83ae479c1ec982e42b5286ade", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 85, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a88c2763a4845fda6fd11e3cc6bcdc53de97597/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a88c2763a4845fda6fd11e3cc6bcdc53de97597/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a88c2763a4845fda6fd11e3cc6bcdc53de97597", "patch": "@@ -1,3 +1,7 @@\n+2008-09-01  Andreas Schwab  <schwab@suse.de>\n+\n+\t* config/ia64/ia64.c (TARGET_ADDRESS_COST): Update.\n+\n 2008-09-01  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (arm_no_early_mul_dep): Handle multiply-subtract.\n@@ -28,10 +32,10 @@\n \t* config/bfin/bfin.h (MOVE_RATIO): Update.\n \n 2008-08-31  Andrey Belevantsev  <abel@ispras.ru>\n-        Dmitry Melnik  <dm@ispras.ru>\n-        Dmitry Zhurikhin  <zhur@ispras.ru>\n-        Alexander Monakov  <amonakov@ispras.ru>\n-        Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\tDmitry Melnik  <dm@ispras.ru>\n+\tDmitry Zhurikhin  <zhur@ispras.ru>\n+\tAlexander Monakov  <amonakov@ispras.ru>\n+\tMaxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* sel-sched.h, sel-sched-dump.h, sel-sched-ir.h, sel-sched.c,\n \tsel-sched-dump.c, sel-sched-ir.c: New files.\n@@ -57,7 +61,7 @@\n     \t* cse.c (hash_rtx_cb): New.\n \t(hash_rtx): Use it.\n \t* dbgcnt.def (sel_sched_cnt, sel_sched_region_cnt,\n-\tsel_sched_insn_cnt): New counters. \n+\tsel_sched_insn_cnt): New counters.\n \t* final.c (compute_alignments): Export.  Free dominance info after loop_optimizer_finalize.\n \t* genattr.c (main): Output maximal_insn_latency prototype.\n \t* genautomata.c (output_default_latencies): New. Factor its code from ...\n@@ -87,7 +91,7 @@\n \t* rtl.h (rtx_equal_p_cb, hash_rtx_cb): Declare.\n \t(remove_free_INSN_LIST_NODE, remove_free_EXPR_LIST_node,\n \tdebug_bb_n_slim, debug_bb_slim,    print_rtl_slim): Likewise.\n-\t* vecprim.h: Add a vector type for unsigned int. \n+\t* vecprim.h: Add a vector type for unsigned int.\n \t* haifa-sched.c: Include vecprim.h and cfgloop.h.\n \t(issue_rate, sched_verbose_param, note_list, dfa_state_size,\n \tready_try, cycle_issued_insns, spec_info): Make global.\n@@ -112,7 +116,7 @@\n \t(ready_lastpos, ready_element, ready_sort, reemit_notes,\n \tfind_fallthru_edge): Make global, remove static prototypes.\n \t(max_issue): Make global.  Add privileged_n and state parameters.  Use\n-\tthem.  \n+\tthem.\n \t(extend_global, extend_all): Removed.\n \t(init_before_recovery): Add new param.  Fix the handling of the case\n \twhen we insert a recovery code before the EXIT which has a predecessor\n@@ -181,11 +185,11 @@\n \t(sched_split_block): New hook.\n \t(sched_split_block_1): New function.\n \t(sched_create_empty_bb): New hook.\n-\t(sched_create_empty_bb_1): New function.\t\n+\t(sched_create_empty_bb_1): New function.\n \t(common_sched_info, ready): New global variables.\n \t(current_sched_info_var): Remove.\n-\t(move_block_after_check): Use common_sched_info.\t\t\n-\t(haifa_luid_for_non_insn): New static function.\t\n+\t(move_block_after_check): Use common_sched_info.\n+\t(haifa_luid_for_non_insn): New static function.\n \t(init_before_recovery): Use haifa_init_only_bb instead of\n \tadd_block.\n \t(increase_insn_priority): New.\n@@ -221,7 +225,7 @@\n \t(add_insn_mem_dependence, flush_pending_lists): Adjust for readonly\n \tcontexts.\n \t(remove_from_dependence_list, remove_from_both_dependence_lists): New.\n-\t(remove_from_deps): New. Use the above functions.\t\n+\t(remove_from_deps): New. Use the above functions.\n \t(cur_insn, can_start_lhs_rhs_p): New static variables.\n \t(add_or_update_back_dep_1): Initialize present_dep_type.\n \t(haifa_start_insn, haifa_finish_insn, haifa_note_reg_set,\n@@ -347,7 +351,7 @@\n \textend_rgns, deps_join rgn_setup_common_sched_info,\n \trgn_setup_sched_infos, debug_regions, debug_region, dump_region_dot,\n \tdump_region_dot_file, haifa_sched_init, haifa_sched_finish): Export.\n-\t(get_rgn_sched_max_insns_priority, sel_add_to_insn_priority, \n+\t(get_rgn_sched_max_insns_priority, sel_add_to_insn_priority,\n \tincrease_insn_priority): Likewise.\n \t* sched-rgn.c: Include sel-sched.h.\n \t(ref_counts): New static variable.  Use it ...\n@@ -430,7 +434,7 @@\n \t(struct _rs6000_sched_context): New.\n \t(rs6000_sched_reorder2): Do not modify INSN_PRIORITY for selective\n \tscheduling.\n-\t(rs6000_sched_finish): Do not run for selective scheduling. \n+\t(rs6000_sched_finish): Do not run for selective scheduling.\n \n 2008-08-31  Jan Hubicka  <jh@suse.cz>\n \n@@ -1286,7 +1290,7 @@\n \tpatterns.\n \n 2008-08-28  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n-            Andrew Pinski  <pinskia@gcc.gnu.org>\n+\t    Andrew Pinski  <pinskia@gcc.gnu.org>\n \n \tPR 18050\n \t* c-common.c (verify_tree): Fix handling of ADDR_EXPR.\n@@ -2046,7 +2050,7 @@\n \tattribute.\n \n \t* config/v850/v850.h (IRA_COVER_CLASSES): Define.\n-\t* config/v850/v850.md (return): Remove frame size restriction.\t\n+\t* config/v850/v850.md (return): Remove frame size restriction.\n \n \t* config/mcore/mcore.h (IRA_COVER_CLASSES): Define.\n \n@@ -2076,43 +2080,43 @@\n 2008-08-28  Ira Rosen  <irar@il.ibm.com>\n \n \t* target.h (struct vectorize): Add new target builtin.\n-\t* tree-vectorizer.c (destroy_loop_vec_info): Call \n+\t* tree-vectorizer.c (destroy_loop_vec_info): Call\n \tvect_free_slp_instance instead of vect_free_slp_node.\n \t* tree-vectorizer.h (enum slp_load_perm_type): New.\n \t(struct _slp_instance): Add new fields.\n \t(SLP_INSTANCE_LOAD_PERMUTATION): New.\n \t(SLP_INSTANCE_LOADS): New.\n \t(vect_free_slp_tree): Remove.\n-\t(vect_free_slp_instance): Declare.        \n+\t(vect_free_slp_instance): Declare.\n \t(SLP_TREE_LOADS_PERM_TYPE, TARG_VEC_PERMUTE_COST): New.\n \t(vectorizable_load): Add argument.\n \t(vect_transform_slp_perm_load): New.\n-\t* tree-vect-analyze.c (vect_analyze_operations): Add an argument to \n+\t* tree-vect-analyze.c (vect_analyze_operations): Add an argument to\n \tvectorizable_load.\n \t(vect_get_place_in_interleaving_chain): New function.\n \t(vect_free_slp_tree): Make static.\n \t(vect_free_slp_instance): New function.\n-\t(vect_build_slp_tree): Add new arguments. Allow load permutations and \n+\t(vect_build_slp_tree): Add new arguments. Allow load permutations and\n \tcollect the load location in the interleaving chain.\n \t(vect_supported_slp_permutation_p): New function.\n \t(vect_supported_load_permutation_p): Likewise.\n \t(vect_analyze_slp_instance): In case of loads permutation, call\n-\tvect_supported_load_permutation_p to check that the permutation is \n+\tvect_supported_load_permutation_p to check that the permutation is\n \tsupported.\n \t* target-def.h (TARGET_VECTORIZE_BUILTIN_VEC_PERM): New.\n \t* tree-vect-transform.c (vect_transform_stmt): Add new argument.\n \t(vect_create_mask_and_perm): New function.\n \t(vect_get_mask_element, vect_transform_slp_perm_load): Likewise.\n-\t(vectorizable_load): Add an argument. Don't keep the created vectors  \n-\tstatements in the node if permutation is required. Call \n+\t(vectorizable_load): Add an argument. Don't keep the created vectors\n+\tstatements in the node if permutation is required. Call\n \tvect_transform_slp_perm_load to generate the permutation.\n-\t(vect_transform_stmt): Add new argument. Call vectorizable_load with \n+\t(vect_transform_stmt): Add new argument. Call vectorizable_load with\n \tadditional argument.\n-\t(vect_schedule_slp_instance): In case of loads permutation, allocate  \n-\tvectorized statements structure for all the related SLP nodes. Call \n+\t(vect_schedule_slp_instance): In case of loads permutation, allocate\n+\tvectorized statements structure for all the related SLP nodes. Call\n \tvect_transform_stmt with addditional argument.\n-\t(vect_transform_loop): Call vect_transform_stmt with correct arguments. \n-\t* config/spu/spu.c (spu_builtin_vec_perm): New. \n+\t(vect_transform_loop): Call vect_transform_stmt with correct arguments.\n+\t* config/spu/spu.c (spu_builtin_vec_perm): New.\n \t(TARGET_VECTORIZE_BUILTIN_VEC_PERM): Redefine.\n \t* config/spu/spu.h (TARG_VEC_PERMUTE_COS): Define.\n \t* config/rs6000/rs6000.c (rs6000_builtin_vec_perm): New.\n@@ -2262,11 +2266,11 @@\n \t* tree-pass.h (pass_ira): New external variable declaration.\n \n \t* reload.h: Add 2008 to the Copyright.\n-    \n+\n \t* cfgloopanal.c: Include params.h.\n \t(estimate_reg_pressure_cost): Decrease cost for IRA optimization\n \tmode.\n-    \n+\n \t* params.h (IRA_MAX_LOOPS_NUM): New macro.\n \n \t* toplev.c (ira.h): New include.\n@@ -2282,7 +2286,7 @@\n \t* regs.h (contains_reg_of_mode, move_cost, may_move_in_cost,\n \tmay_move_out_cost): New external variable declarations.\n \t(move_table): New typedef.\n-    \n+\n \t* caller-save.c: Include headers output.h and ira.h.\n \t(no_caller_save_reg_set): New global variable.\n \t(save_slots_num, save_slots): New variables.\n@@ -2301,7 +2305,7 @@\n \t(mark_set_regs): Process pseudo-register too.\n \t(insert_one_insn): Put the insn after bb note in a empty basic\n \tblock.  Add insn check.\n-    \n+\n \t* global.c (eliminable_regset): Make it external.\n \t(mark_elimination): Use DF_LR_IN for IRA.\n \t(pseudo_for_reload_consideration_p): New.\n@@ -2347,7 +2351,7 @@\n \tsetup_reg_classes): New function prototypes.\n \t(eliminable_regset): New external variable declaration.\n \t(build_insn_chain, update_equiv_regs): New function prototypes.\n-    \n+\n \t* Makefile.in (IRA_INT_H): New definition.\n \t(OBJS-common): Add ira.o, ira-build.o, ira-costs.o,\n \tira-conflicts.o, ira-color.o, ira-emit.o, and ira-lives.o.\n@@ -2392,9 +2396,9 @@\n \t(substitute, gen_reload_chain_without_interm_reg_p): New\n \tfunctions.\n \t(reloads_conflict): Use gen_reload_chain_without_interm_reg_p.\n-    \n+\n \t* testsuite/gcc.dg/20080410-1.c: New file.\n-\t\n+\n \t* config/s390/s390.h (IRA_COVER_CLASSES,\n \tIRA_HARD_REGNO_ADD_COST_MULTIPLIER): Define.\n \n@@ -2407,9 +2411,9 @@\n \t* config/rs6000/rs6000.h (IRA_COVER_CLASSES): Ditto.\n \n \t* config/arm/arm.h (IRA_COVER_CLASSES): Ditto.\n-    \n+\n \t* config/alpha/alpha.h (IRA_COVER_CLASSES): Ditto.\n-    \n+\n \t2008-08-24  Jeff Law  <law@redhat.com>\n \t* ira.c (setup_reg_class_intersect_union): Prefer smallest class\n \twhen ignoring unavailable registers.\n@@ -2629,7 +2633,7 @@\n \n \tPR 35648\n \t* doc/invoke.texi (Wwrite-strings): Clarify description.\n-\t\n+\n 2008-08-23  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/37174\n@@ -2644,7 +2648,7 @@\n \t(*ashlqi3): Rename from ashlqi3 insn pattern.\n \t(ashlqi3): New expanders.\n \t(*lshrqi3): Rename from lshrqi3 insn pattern.\n-\t(lshrqi3): New expanders.\t\n+\t(lshrqi3): New expanders.\n \t(ashlqi3_const4, ashlqi3_const5, ashlqi3_const6, lshrqi3_const4,\n \tlshrqi3_const5, lshrqi3_const6): New splitters.\n \t(andi, ashlqi3_l_const4, ashlqi3_l_const5, ashlqi3_l_const6,\n@@ -2710,7 +2714,7 @@\n \tPR 30457\n \t* builtins.c (fold_builtin_next_arg): Add warning about undefined\n \tbehaviour.\n-\t\n+\n 2008-08-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-tree.h (grokfield): New argument.\n@@ -2778,7 +2782,7 @@\n \n \t2008-05-05  Kenneth Zadeck <zadeck@naturalbridge.com>\n \t\t    Jan Hubicka  <jh@suse.cz>\n-\t\n+\n \t* ipa-pure-const.c\n \t(init_state, finish_state, set_function_state, generate_summary):\n \tNew functions.\n@@ -2792,7 +2796,7 @@\n \t2008-07-15  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* tree-pass.h (pass_ipa_reference): Make into ipa_opt_pass.\n-\t* ipa-reference.c (init_function_info, generate_summary, \n+\t* ipa-reference.c (init_function_info, generate_summary,\n \tpropagate): New functions.\n \t(analyze_function):  Call init_function_info.\n \t(static_execute): Stripped into generate_summary and propagate.\n@@ -2873,12 +2877,12 @@\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* value-prof.c (check_counter): Revert wrong call to error.\n-\t\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* profile.c: Update calls to inform.\n \t* value-prof.c: Update calls to inform.\n-\t\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* diagnostic.c (inform): Add an explicit location_t parameter.\n@@ -2999,27 +3003,27 @@\n \t(supportable_narrowing_operation): Likewise.\n \t(vectorizable_type_promotion): Add an argument.\n \t(vectorizable_type_demotion): Likewise.\n-\t* tree-vect-analyze.c (vect_analyze_operations): Call \n+\t* tree-vect-analyze.c (vect_analyze_operations): Call\n \tvectorizable_type_promotion and vectorizable_type_demotion with\n \tadditional argument.\n \t(vect_get_and_check_slp_defs): Detect patterns.\n \t(vect_build_slp_tree): Add an argument, don't fail in case of multiple\n-\ttypes. \n+\ttypes.\n \t(vect_analyze_slp_instance): Don't fail in case of multiple types. Call\n \tvect_build_slp_tree with correct arguments. Calculate unrolling factor\n \taccording to the smallest type in the loop.\n \t(vect_detect_hybrid_slp_stmts): Include statements from patterns.\n-\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Call \n-\tsupportable_widening_operation with correct arguments. \n-\t* tree-vect-transform.c (vect_get_slp_defs): Allocate output vector \n+\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Call\n+\tsupportable_widening_operation with correct arguments.\n+\t* tree-vect-transform.c (vect_get_slp_defs): Allocate output vector\n \toperands lists according to the number of vector statements in left\n \tor right node, if exists.\n \t(vect_gen_widened_results_half): Remove unused argument.\n-\t(vectorizable_conversion): Call supportable_widening_operation, \n+\t(vectorizable_conversion): Call supportable_widening_operation,\n \tsupportable_narrowing_operation, and vect_gen_widened_results_half\n-\twith correct arguments. \n+\twith correct arguments.\n \t(vectorizable_assignment): Change documentation, support multiple\n-\ttypes in SLP. \n+\ttypes in SLP.\n \t(vectorizable_operation): Likewise.\n \t(vect_get_loop_based_defs): New function.\n \t(vect_create_vectorized_demotion_stmts): Likewise.\n@@ -3029,11 +3033,11 @@\n \t(vect_create_vectorized_promotion_stmts): New function.\n \t(vectorizable_type_promotion): Support loop-aware SLP and general\n \tmulti-step conversion. Call vect_create_vectorized_promotion_stmts\n-\tfor transformation.\t\n+\tfor transformation.\n \t(vectorizable_store): Change documentation, support multiple\n-\ttypes in SLP. \n+\ttypes in SLP.\n \t(vectorizable_load): Likewise.\n-\t(vect_transform_stmt): Pass SLP_NODE to \n+\t(vect_transform_stmt): Pass SLP_NODE to\n \tvectorizable_type_promotion and vectorizable_type_demotion.\n \t(vect_schedule_slp_instance): Move here the calculation of number\n \tof vectorized statements for each node from...\n@@ -3044,7 +3048,7 @@\n 2008-08-19  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR bootstrap/37152\n-\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Change = \n+\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Change =\n \tto == in assert statement.\n \t(vectorizable_reduction): Fix typo.\n \n@@ -3102,7 +3106,7 @@\n \t* gimple.c (gimple_assign_unary_nop_p): Likewise.\n \t* tree-vect-transform.c (vectorizable_type_demotion)\n \t(vectorizable_type_promotion): Likewise.\n-\t* tree-inline.c (expand_call_inline): \n+\t* tree-inline.c (expand_call_inline):\n \t* tree-ssa-forwprop.c (get_prop_source_stmt, can_propagate_from)\n \t(forward_propagate_addr_expr_1, forward_propagate_comparison)\n \t(tree_ssa_forward_propagate_single_use_vars): Likewise.\n@@ -3115,10 +3119,10 @@\n \t* tree.h (CONVERT_EXPR_P): Likewise.\n \t* tree.c (simple_cst_equal, iterative_hash_expr): Likewise.\n \t* tree-ssa-loop-im.c (rewrite_bittest): Likewise.\n-\t* tree-vrp.c: \n+\t* tree-vrp.c:\n \t(register_edge_assert_for_2, extract_range_from_unary_expr)\n \t(register_edge_assert_for_1): Likewise.\n-\t\n+\n 2008-08-18  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* real.h (dconst_e, dconst_third, dconst_sqrt2, dconst_e_ptr,\n@@ -3269,7 +3273,7 @@\n \n 2008-08-16  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n-\t* config/avr/avr.c (avr_override_options): Reduce value of \n+\t* config/avr/avr.c (avr_override_options): Reduce value of\n \tPARAM_INLINE_CALL_COST.\n \n 2008-08-15  Eric Botcazou  <ebotcazou@adacore.com>\n@@ -3314,7 +3318,7 @@\n \tPR c/28152\n \t* c-parser.c (c_lex_one_token): Do not store the canonical spelling\n \tfor keywords.\n-\t\n+\n 2008-08-14  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-transform.c (vect_create_epilog_for_reduction): Takes an\n@@ -3323,15 +3327,15 @@\n \t(get_initial_def_for_induction): Fix printout.\n \t(vect_get_vec_def_for_stmt_copy): Support case where the\n \tvec_stmt_for_operand is a phi node.\n-\t(vectorizable_reduction): Support reduction when duplication is needed \n+\t(vectorizable_reduction): Support reduction when duplication is needed\n \tdue to data-types of different sizes in the loop.\n-\t(vectorizable_call): Remove restriction to not vectorize in case we \n+\t(vectorizable_call): Remove restriction to not vectorize in case we\n \thave data-types of different sizes in the loop.\n \t(vectorizable_conversion): Likewise.\n \t(vectorizable_operation): Likewise.\n \t(vectorizable_type_demotion): Likewise.\n \t(vectorizable_type_promotion): Likewise.\n-\t(vectorizable_induction): Add restriction to not vectorize in case \n+\t(vectorizable_induction): Add restriction to not vectorize in case\n \twe have data-types of different sizes in the loop.\n \n 2008-08-14  Christophe Saout  <christophe@saout.de>\n@@ -3428,7 +3432,7 @@\n 2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* toplev.h (pedwarn_at): Fix declaration.\n-\t\n+\n 2008-08-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/sparc/linux64.h (LINK_ARCH32_SPEC, LINK_ARCH64_SPEC,\n@@ -3452,7 +3456,7 @@\n \t* c-common.c (conversion_warning): Use a switch. Ignore boolean\n \texpressions except for conversions to signed:1 bitfields. Handle\n \tCOND_EXPR with constant operands.\n-\t\n+\n 2008-08-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/15255\n@@ -3630,7 +3634,7 @@\n \t(supportable_widening_operation): Add two arguments. Support double\n \ttype conversions.\n \t(supportable_narrowing_operation): Likewise.\n-\t* tree-vectorizer.h (supportable_widening_operation): Add two \n+\t* tree-vectorizer.h (supportable_widening_operation): Add two\n \targuments.\n \t(supportable_narrowing_operation): Likewise.\n \t* tree-vect-patterns.c (vect_recog_widen_mult_pattern) : Call\n@@ -3906,21 +3910,21 @@\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 36901\n-\t* diagnostic.def (DK_PEDWARN, DK_PERMERROR): New.  \n+\t* diagnostic.def (DK_PEDWARN, DK_PERMERROR): New.\n \t* diagnostic.c (pedantic_warning_kind, permissive_error_kind):\n \tMoved from diagnostic.h\n \t(diagnostic_report_diagnostic): Return bool. Handle DK_PEDWARN and\n \tDK_PERMERROR.\n \t(emit_diagnostic): New.\n \t(warning0, pedwarn0): Delete.\n-\t(warning, warning_at, pedwarn, permerror): Return bool.  \n+\t(warning, warning_at, pedwarn, permerror): Return bool.\n \t* diagnostic.h (pedantic_warning_kind, permissive_error_kind):\n \tMoved to diagnostic.c.\n \t(struct diagnostic_context): Use correct type for\n \tclassify_diagnostic.\n \t(diagnostic_report_diagnostic): Update declaration.\n \t(emit_diagnostic): Declare.\n-\t* errors.c (warning): Return bool.  \n+\t* errors.c (warning): Return bool.\n \t* errors.h (warning): Update declaration.\n \t* toplev.h (warning0, pedwarn0): Delete.\n \t(warning, warning_at, pedwarn, permerror): Return bool.\n@@ -3929,17 +3933,17 @@\n \tinform. Update all calls.\n \t(diagnose_mismatched_decls): Check return value of warning/pedwarn\n \tbefore giving informative note.\n-\t(implicit_decl_warning): Likewise.  \n-\t* c-typeck.c (build_function_call): Likewise.  \n-\t* tree-sssa.c (warn_uninit): Likewise.  \n+\t(implicit_decl_warning): Likewise.\n+\t* c-typeck.c (build_function_call): Likewise.\n+\t* tree-sssa.c (warn_uninit): Likewise.\n \t* builtins.c (gimplify_va_arg_expr): Likewise.\n \n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 7651\n \t* doc/invoke.texi (-Wextra): Move warning from here...\n \t(-Wuninitialized): ... to here.\n-\t\n+\n 2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 28875\n@@ -3957,7 +3961,7 @@\n \t(Wunused-parameter): Likewise.\n \t(Wunused-value): Likewise.\n \t(Wunused-variable): Likewise.\n-\t\n+\n 2008-08-08  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* doc/invoke.texi: Add cpu_type power7.\n@@ -3984,7 +3988,7 @@\n \t(rs6000_expand_builtin): Add case for ALTIVEC_BUILTIN_VCTUXS\n \tand ALTIVEC_BUILTIN_VCTSXS.\n \t(rs6000_builtin_mul_widen_even. rs6000_builtin_mul_widen_odd): Fix\n-\tformatting. \n+\tformatting.\n \n 2008-08-08  Richard Guenther  <rguenther@suse.de>\n \n@@ -4027,10 +4031,10 @@\n \t* c-common.c (c_common_reswords): Also warn about keyword \"bool\".\n \n 2008-08-07  Bob Wilson  <bob.wilson@acm.org>\n-\t\n+\n \t* config/xtensa/xtensa.c (xtensa_copy_incoming_a7): Copy incoming\n \tvalue in a6 after the set_frame_ptr insn.\n-\t\n+\n 2008-08-07  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/37033\n@@ -4066,7 +4070,7 @@\n 2008-08-07  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/37048\n-\t* i386.md (single stringop patterns): Enable unconditionally. \n+\t* i386.md (single stringop patterns): Enable unconditionally.\n \n 2008-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -4121,7 +4125,7 @@\n \tPR 26785\n \t* diagnostic.c (permerror_at): New.\n \t* toplev.h (permerror_at): Declare.\n-\t\n+\n 2008-08-06  Victor Kaplansky  <victork@il.ibm.com>\n \t    Ira Rosen  <irar@il.ibm.com>\n \n@@ -4140,7 +4144,7 @@\n \t* c-common.c (warn_for_sign_compare): New. Handle separately the\n \tcase that 'constant' is zero.\n \t* c-typeck.c (build_binary_op): Move code to c-common.c\n-\t\n+\n 2008-08-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config/alpha/alpha.c (alpha_preferred_reload_class,\n@@ -4360,13 +4364,13 @@\n 2008-08-05  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/t-xtensa: Remove dependency for gt-xtensa.h.\n-\t\n+\n 2008-08-05  Bob Wilson  <bob.wilson@acm.org>\n-\t\n+\n \t* config/xtensa/xtensa.c (xtensa_va_start): Unshare valist.\n \t(xtensa_gimplify_va_arg_expr): Unshare valist, orig_ndx, ndx, array,\n \tva_size, and type_size.\n-\t\n+\n 2008-08-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37016\n@@ -4407,7 +4411,7 @@\n \t(dwarf2out_end_epilogue): Emit .cfi_endproc.\n \t(output_loc_operands_raw, output_loc_sequence_raw): New.\n \t(output_cfa_loc_raw): New.\n-\t\n+\n 2008-08-05  Paul Brook  <paul@codesourcery.com>\n \n \t* doc/invoke.texi: Document new ARM -mfpu= and -mcpu= options.\n@@ -4890,7 +4894,7 @@\n \tand generate prologue code accordingly.\n \t(ix86_expand_epilogue): Generate epilogue code wrt stack\n \trealignment is really needed or not.\n-\t\n+\n \t* config/i386/i386.h (MAIN_STACK_BOUNDARY): New.\n \t(ABI_STACK_BOUNDARY): Likewise.\n \t(PREFERRED_STACK_BOUNDARY_DEFAULT): Likewise."}, {"sha": "672651b536871ffd7196458dd7563564451d9530", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a88c2763a4845fda6fd11e3cc6bcdc53de97597/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a88c2763a4845fda6fd11e3cc6bcdc53de97597/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8a88c2763a4845fda6fd11e3cc6bcdc53de97597", "patch": "@@ -408,7 +408,7 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n \n #undef TARGET_UNSPEC_MAY_TRAP_P\n #define TARGET_UNSPEC_MAY_TRAP_P ia64_unspec_may_trap_p"}]}