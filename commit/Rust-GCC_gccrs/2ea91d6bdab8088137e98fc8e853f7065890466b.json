{"sha": "2ea91d6bdab8088137e98fc8e853f7065890466b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhOTFkNmJkYWI4MDg4MTM3ZTk4ZmM4ZTg1M2Y3MDY1ODkwNDY2Yg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2011-06-09T23:45:45Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2011-06-09T23:45:45Z"}, "message": "re PR rtl-optimization/49154 (build fails on cris-elf in libgcc: ICE in setup_pressure_classes, at ira.c:902)\n\n\tPR rtl-optimization/49154\n\t* config/cris/cris.h (FIXED_REGISTERS): Include CRIS_CC0_REGNUM.\n\t(enum reg_class): Add SRP_REGS and MOF_SRP_REGS.\n\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS, REGNO_REG_CLASS)\n\t(PREFERRED_RELOAD_CLASS, SECONDARY_RELOAD_CLASS): Adjust to fit.\n\t* config/cris/cris.h (cris_register_move_cost): Remove\n\t!TARGET_V32 code.  Tweak comments.\n\nFrom-SVN: r174870", "tree": {"sha": "e52d14e15ccb9a8356416f69c7df4ab557422b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52d14e15ccb9a8356416f69c7df4ab557422b26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea91d6bdab8088137e98fc8e853f7065890466b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea91d6bdab8088137e98fc8e853f7065890466b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea91d6bdab8088137e98fc8e853f7065890466b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea91d6bdab8088137e98fc8e853f7065890466b/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cf4fb5a36f89586c9446b5d4db29a19bd06531b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf4fb5a36f89586c9446b5d4db29a19bd06531b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf4fb5a36f89586c9446b5d4db29a19bd06531b"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "61891204d8d4748798931e81120a3000d4d73fc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea91d6bdab8088137e98fc8e853f7065890466b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea91d6bdab8088137e98fc8e853f7065890466b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ea91d6bdab8088137e98fc8e853f7065890466b", "patch": "@@ -1,3 +1,13 @@\n+2011-06-10  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR rtl-optimization/49154\n+\t* config/cris/cris.h (FIXED_REGISTERS): Include CRIS_CC0_REGNUM.\n+\t(enum reg_class): Add SRP_REGS and MOF_SRP_REGS.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS, REGNO_REG_CLASS)\n+\t(PREFERRED_RELOAD_CLASS, SECONDARY_RELOAD_CLASS): Adjust to fit.\n+\t* config/cris/cris.h (cris_register_move_cost): Remove\n+\t!TARGET_V32 code.  Tweak comments.\n+\n 2011-06-09  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphbuild.c (record_eh_tables): Mark personality function as having"}, {"sha": "159b31bf7f4c9f8fdd4acb46ea48e801af97db32", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea91d6bdab8088137e98fc8e853f7065890466b/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea91d6bdab8088137e98fc8e853f7065890466b/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=2ea91d6bdab8088137e98fc8e853f7065890466b", "patch": "@@ -1360,24 +1360,11 @@ static int\n cris_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t reg_class_t from, reg_class_t to)\n {\n-  if (!TARGET_V32)\n-    {\n-      /* Pretend that classes that we don't support are ALL_REGS, so\n-\t we give them the highest cost.  */\n-      if (from != SPECIAL_REGS && from != MOF_REGS\n-\t  && from != GENERAL_REGS && from != GENNONACR_REGS)\n-\tfrom = ALL_REGS;\n-\n-      if (to != SPECIAL_REGS && to != MOF_REGS\n-\t  && to != GENERAL_REGS && to != GENNONACR_REGS)\n-\tto = ALL_REGS;\n-    }\n-\n   /* Can't move to and from a SPECIAL_REGS register, so we have to say\n      their move cost within that class is higher.  How about 7?  That's 3\n      for a move to a GENERAL_REGS register, 3 for the move from the\n      GENERAL_REGS register, and 1 for the increased register pressure.\n-     Also, it's higher than the memory move cost, which is in order.  \n+     Also, it's higher than the memory move cost, as it should.\n      We also do this for ALL_REGS, since we don't want that class to be\n      preferred (even to memory) at all where GENERAL_REGS doesn't fit.\n      Whenever it's about to be used, it's for SPECIAL_REGS.  If we don't\n@@ -1386,13 +1373,15 @@ cris_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n      GENERAL_REGS left to allocate.  This is because the fall-back when\n      the most preferred register class isn't available, isn't the next\n      (or next good) wider register class, but the *most widest* register\n-     class.  */\n+     class.  FIXME: pre-IRA comment, perhaps obsolete now.  */\n \n   if ((reg_classes_intersect_p (from, SPECIAL_REGS)\n        && reg_classes_intersect_p (to, SPECIAL_REGS))\n       || from == ALL_REGS || to == ALL_REGS)\n     return 7;\n \n+  /* Make moves to/from SPECIAL_REGS slightly more expensive, as we\n+     generally prefer GENERAL_REGS.  */\n   if (reg_classes_intersect_p (from, SPECIAL_REGS)\n       || reg_classes_intersect_p (to, SPECIAL_REGS))\n     return 3;"}, {"sha": "872165ed796bbb51024162e3718f85c59f80af26", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea91d6bdab8088137e98fc8e853f7065890466b/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea91d6bdab8088137e98fc8e853f7065890466b/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=2ea91d6bdab8088137e98fc8e853f7065890466b", "patch": "@@ -418,7 +418,7 @@ extern int cris_cpu_version;\n    registers are fixed at the moment.  The faked argument pointer register\n    is fixed too.  */\n #define FIXED_REGISTERS \\\n- {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0}\n+ {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1}\n \n /* Register r9 is used for structure-address, r10-r13 for parameters,\n    r10- for return values.  */\n@@ -488,17 +488,17 @@ extern int cris_cpu_version;\n \n /* Node: Register Classes */\n \n-/* FIXME: A separate class for the return register would make sense.\n-\n-   We need a separate register class to handle register allocation for\n+/* We need a separate register class to handle register allocation for\n    ACR, since it can't be used for post-increment.\n \n    It's not obvious, but having subunions of all movable-between\n-   register classes does really help register allocation.  */\n+   register classes does really help register allocation (pre-IRA\n+   comment).  */\n enum reg_class\n   {\n     NO_REGS,\n-    ACR_REGS, MOF_REGS, CC0_REGS, SPECIAL_REGS,\n+    ACR_REGS, MOF_REGS, SRP_REGS, CC0_REGS,\n+    MOF_SRP_REGS, SPECIAL_REGS,\n     SPEC_ACR_REGS, GENNONACR_REGS,\n     SPEC_GENNONACR_REGS, GENERAL_REGS,\n     ALL_REGS,\n@@ -509,7 +509,8 @@ enum reg_class\n \n #define REG_CLASS_NAMES\t\t\t\t\t\t\\\n   {\"NO_REGS\",\t\t\t\t\t\t\t\\\n-   \"ACR_REGS\", \"MOF_REGS\", \"CC0_REGS\", \"SPECIAL_REGS\",\t\t\\\n+   \"ACR_REGS\", \"MOF_REGS\", \"SRP_REGS\", \"CC0_REGS\",\t\t\\\n+   \"MOF_SRP_REGS\", \"SPECIAL_REGS\",\t\t\t\t\\\n    \"SPEC_ACR_REGS\", \"GENNONACR_REGS\", \"SPEC_GENNONACR_REGS\",\t\\\n    \"GENERAL_REGS\", \"ALL_REGS\"}\n \n@@ -522,7 +523,10 @@ enum reg_class\n    {0},\t\t\t\t\t\t\\\n    {1 << CRIS_ACR_REGNUM},\t\t\t\\\n    {1 << CRIS_MOF_REGNUM},\t\t\t\\\n+   {1 << CRIS_SRP_REGNUM},\t\t\t\\\n    {1 << CRIS_CC0_REGNUM},\t\t\t\\\n+   {(1 << CRIS_MOF_REGNUM)\t\t\t\\\n+    | (1 << CRIS_SRP_REGNUM)},\t\t\t\\\n    {CRIS_SPECIAL_REGS_CONTENTS},\t\t\\\n    {CRIS_SPECIAL_REGS_CONTENTS\t\t\t\\\n     | (1 << CRIS_ACR_REGNUM)},\t\t\t\\\n@@ -539,8 +543,8 @@ enum reg_class\n #define REGNO_REG_CLASS(REGNO)\t\t\t\\\n   ((REGNO) == CRIS_ACR_REGNUM ? ACR_REGS :\t\\\n    (REGNO) == CRIS_MOF_REGNUM ? MOF_REGS :\t\\\n+   (REGNO) == CRIS_SRP_REGNUM ? SRP_REGS :\t\\\n    (REGNO) == CRIS_CC0_REGNUM ? CC0_REGS :\t\\\n-   (REGNO) == CRIS_SRP_REGNUM ? SPECIAL_REGS :\t\\\n    GENERAL_REGS)\n \n #define BASE_REG_CLASS GENERAL_REGS\n@@ -590,6 +594,7 @@ enum reg_class\n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\\\n  ((CLASS) != ACR_REGS\t\t\t\t\\\n   && (CLASS) != MOF_REGS\t\t\t\\\n+  && (CLASS) != SRP_REGS\t\t\t\\\n   && (CLASS) != CC0_REGS\t\t\t\\\n   && (CLASS) != SPECIAL_REGS\t\t\t\\\n   ? GENERAL_REGS : (CLASS))\n@@ -601,7 +606,7 @@ enum reg_class\n    the effect that any X that isn't a special-register is treated as\n    a non-empty intersection with GENERAL_REGS.  */\n #define SECONDARY_RELOAD_CLASS(CLASS, MODE, X)\t\t\t\t\\\n- ((((CLASS) == SPECIAL_REGS || (CLASS) == MOF_REGS)\t\t\t\\\n+ ((reg_class_subset_p (CLASS, SPECIAL_REGS)\t\t\t\t\\\n    && ((GET_MODE_SIZE (MODE) < 4 && MEM_P (X))\t\t\t\t\\\n        || !reg_classes_intersect_p (REGNO_REG_CLASS (true_regnum (X)),\t\\\n \t\t\t\t    GENERAL_REGS)))\t\t\t\\"}]}