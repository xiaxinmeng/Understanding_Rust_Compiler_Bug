{"sha": "1e964774aec65472d7a0741d7faa6a884295fc81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5NjQ3NzRhZWM2NTQ3MmQ3YTA3NDFkN2ZhYTZhODg0Mjk1ZmM4MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-28T12:43:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-28T12:43:53Z"}, "message": "i386: Don't use ix86_tune_ctrl_string in parse_mtune_ctrl_str\n\nThere are\n\nstatic void\nparse_mtune_ctrl_str (bool dump)\n{\n  if (!ix86_tune_ctrl_string)\n    return;\n\nparse_mtune_ctrl_str is only called from set_ix86_tune_features, which\nis only called from ix86_function_specific_restore and\nix86_option_override_internal.  parse_mtune_ctrl_str shouldn't use\nix86_tune_ctrl_string which is defined with global_options.  Instead,\nopts should be passed to parse_mtune_ctrl_str.\n\n\tPR target/91399\n\t* config/i386/i386-options.c (set_ix86_tune_features): Add an\n\targument of a pointer to struct gcc_options and pass it to\n\tparse_mtune_ctrl_str.\n\t(ix86_function_specific_restore): Pass opts to\n\tset_ix86_tune_features.\n\t(ix86_option_override_internal): Likewise.\n\t(parse_mtune_ctrl_str): Add an argument of a pointer to struct\n\tgcc_options and use it for x_ix86_tune_ctrl_string.", "tree": {"sha": "b54dbcfecf7aea5236863494e0780e7f0dc259ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54dbcfecf7aea5236863494e0780e7f0dc259ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e964774aec65472d7a0741d7faa6a884295fc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e964774aec65472d7a0741d7faa6a884295fc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e964774aec65472d7a0741d7faa6a884295fc81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e964774aec65472d7a0741d7faa6a884295fc81/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928605936939d4364b5019b2bdda63612fbc4fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928605936939d4364b5019b2bdda63612fbc4fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928605936939d4364b5019b2bdda63612fbc4fdb"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "2a000e5f31fa7e062e72193cf674d5b6a695c982", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e964774aec65472d7a0741d7faa6a884295fc81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e964774aec65472d7a0741d7faa6a884295fc81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e964774aec65472d7a0741d7faa6a884295fc81", "patch": "@@ -1,3 +1,15 @@\n+2020-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/91399\n+\t* config/i386/i386-options.c (set_ix86_tune_features): Add an\n+\targument of a pointer to struct gcc_options and pass it to\n+\tparse_mtune_ctrl_str.\n+\t(ix86_function_specific_restore): Pass opts to\n+\tset_ix86_tune_features.\n+\t(ix86_option_override_internal): Likewise.\n+\t(parse_mtune_ctrl_str): Add an argument of a pointer to struct\n+\tgcc_options and use it for x_ix86_tune_ctrl_string.\n+\n 2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/87763"}, {"sha": "e0be493253411939843c1f6d1f67c4bf64d27147", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e964774aec65472d7a0741d7faa6a884295fc81/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e964774aec65472d7a0741d7faa6a884295fc81/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=1e964774aec65472d7a0741d7faa6a884295fc81", "patch": "@@ -741,7 +741,8 @@ ix86_option_override_internal (bool main_args_p,\n \t\t\t       struct gcc_options *opts,\n \t\t\t       struct gcc_options *opts_set);\n static void\n-set_ix86_tune_features (enum processor_type ix86_tune, bool dump);\n+set_ix86_tune_features (struct gcc_options *opts,\n+\t\t\tenum processor_type ix86_tune, bool dump);\n \n /* Restore the current options */\n \n@@ -810,7 +811,7 @@ ix86_function_specific_restore (struct gcc_options *opts,\n \n   /* Recreate the tune optimization tests */\n   if (old_tune != ix86_tune)\n-    set_ix86_tune_features (ix86_tune, false);\n+    set_ix86_tune_features (opts, ix86_tune, false);\n }\n \n /* Adjust target options after streaming them in.  This is mainly about\n@@ -1538,13 +1539,13 @@ ix86_parse_stringop_strategy_string (char *strategy_str, bool is_memset)\n    print the features that are explicitly set.  */\n \n static void\n-parse_mtune_ctrl_str (bool dump)\n+parse_mtune_ctrl_str (struct gcc_options *opts, bool dump)\n {\n-  if (!ix86_tune_ctrl_string)\n+  if (!opts->x_ix86_tune_ctrl_string)\n     return;\n \n   char *next_feature_string = NULL;\n-  char *curr_feature_string = xstrdup (ix86_tune_ctrl_string);\n+  char *curr_feature_string = xstrdup (opts->x_ix86_tune_ctrl_string);\n   char *orig = curr_feature_string;\n   int i;\n   do\n@@ -1583,7 +1584,8 @@ parse_mtune_ctrl_str (bool dump)\n    processor type.  */\n \n static void\n-set_ix86_tune_features (enum processor_type ix86_tune, bool dump)\n+set_ix86_tune_features (struct gcc_options *opts,\n+\t\t\tenum processor_type ix86_tune, bool dump)\n {\n   unsigned HOST_WIDE_INT ix86_tune_mask = HOST_WIDE_INT_1U << ix86_tune;\n   int i;\n@@ -1605,7 +1607,7 @@ set_ix86_tune_features (enum processor_type ix86_tune, bool dump)\n                  ix86_tune_features[i] ? \"on\" : \"off\");\n     }\n \n-  parse_mtune_ctrl_str (dump);\n+  parse_mtune_ctrl_str (opts, dump);\n }\n \n \n@@ -2364,7 +2366,7 @@ ix86_option_override_internal (bool main_args_p,\n       XDELETEVEC (s);\n     }\n \n-  set_ix86_tune_features (ix86_tune, opts->x_ix86_dump_tunes);\n+  set_ix86_tune_features (opts, ix86_tune, opts->x_ix86_dump_tunes);\n \n   ix86_recompute_optlev_based_flags (opts, opts_set);\n "}]}