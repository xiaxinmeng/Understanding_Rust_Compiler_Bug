{"sha": "c60d77d4db7aec48e2fb0997400c4d1177b726aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYwZDc3ZDRkYjdhZWM0OGUyZmIwOTk3NDAwYzRkMTE3N2I3MjZhYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-02-19T20:07:47Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-02-19T20:07:47Z"}, "message": "check.c (gfc_check_int): improve checking of optional kind\n\n\t* check.c (gfc_check_int): improve checking of optional kind\n\t* simplify.c (gfc_simplify_int): Change BT_REAL to BT_INTEGER\n\n\t* gfortran.dg/int_1.f90: New test.\n\nFrom-SVN: r95290", "tree": {"sha": "46ab6a34befac7343839d934610e531bf1570828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ab6a34befac7343839d934610e531bf1570828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c60d77d4db7aec48e2fb0997400c4d1177b726aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60d77d4db7aec48e2fb0997400c4d1177b726aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60d77d4db7aec48e2fb0997400c4d1177b726aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60d77d4db7aec48e2fb0997400c4d1177b726aa/comments", "author": null, "committer": null, "parents": [{"sha": "04c90eea0779dd173baa01b96aed683fec326207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c90eea0779dd173baa01b96aed683fec326207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c90eea0779dd173baa01b96aed683fec326207"}], "stats": {"total": 195, "additions": 192, "deletions": 3}, "files": [{"sha": "f4a36405f6a8a697c44ccf408112566e9796ff75", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c60d77d4db7aec48e2fb0997400c4d1177b726aa", "patch": "@@ -1,3 +1,8 @@\n+2005-02-19  Steven G. Kargl  <kargls@comcast.net>\n+  \n+\t* check.c (gfc_check_int): improve checking of optional kind\n+\t* simplify.c (gfc_simplify_int): Change BT_REAL to BT_INTEGER\n+\n 2005-02-19  Steven G. Kargl  <kargls@comcast.net>\n   \n \t* check.c (gfc_check_achar): New function"}, {"sha": "281db8885242a051944c629a6f7a0da85ad419c8", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=c60d77d4db7aec48e2fb0997400c4d1177b726aa", "patch": "@@ -946,10 +946,18 @@ gfc_check_index (gfc_expr * string, gfc_expr * substring, gfc_expr * back)\n try\n gfc_check_int (gfc_expr * x, gfc_expr * kind)\n {\n-  if (numeric_check (x, 0) == FAILURE\n-      || kind_check (kind, 1, BT_INTEGER) == FAILURE)\n+  if (numeric_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind != NULL)\n+    {\n+      if (type_check (kind, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n+      if (scalar_check (kind, 1) == FAILURE)\n+\treturn FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "0290b8463706697086db5a6fc5f4c877c93035f9", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=c60d77d4db7aec48e2fb0997400c4d1177b726aa", "patch": "@@ -1473,7 +1473,7 @@ gfc_simplify_int (gfc_expr * e, gfc_expr * k)\n   gfc_expr *rpart, *rtrunc, *result;\n   int kind;\n \n-  kind = get_kind (BT_REAL, k, \"INT\", gfc_default_real_kind);\n+  kind = get_kind (BT_INTEGER, k, \"INT\", gfc_default_integer_kind);\n   if (kind == -1)\n     return &gfc_bad_expr;\n "}, {"sha": "1f6d05c451196e44fc0b48ef42a2f376d3b5e083", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c60d77d4db7aec48e2fb0997400c4d1177b726aa", "patch": "@@ -1,3 +1,7 @@\n+2005-02-19  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.dg/int_1.f90: New test.\n+\n 2005-02-19  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/cpp/mac-eol-at-eof.c: New test."}, {"sha": "4e381220a72ebb9c0e309acff8784929d860e376", "filename": "gcc/testsuite/gfortran.dg/int_1.f90", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60d77d4db7aec48e2fb0997400c4d1177b726aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_1.f90?ref=c60d77d4db7aec48e2fb0997400c4d1177b726aa", "patch": "@@ -0,0 +1,172 @@\n+! { dg-do run }\n+!\n+! 13.7.53    INT(A [, KIND])\n+!\n+! Description.  Convert to integer type.\n+! Class.       Elemental function.\n+! Arguments.\n+!    A               shall be of type integer, real, or complex,\n+!                    or a boz-literal-constant .\n+!    KIND (optional) shall be a scalar integer initialization expression.\n+!\n+! Result Characteristics. Integer. If KIND is present, the kind type\n+!    parameter is that specified by the value of KIND; otherwise, the\n+!    kind type parameter is that of default integer type.\n+!\n+! Result Value.\n+!\n+!    Case (1):  If A is of type integer, INT (A) = A.\n+!\n+!    Case (2):  If A is of type real, there are two cases:\n+!      (a) if |A| < 1, INT (A) has the value 0\n+!      (b) if |A| .ge. 1, INT (A) is the integer whose magnitude is the\n+!          largest integer that does not exceed the magnitude of A and\n+!          whose sign is the same as the sign of A.\n+!\n+!    Case (3):  If A is of type complex, INT(A) = INT(REAL(A, KIND(A))).\n+!\n+!    Case (4):  If A is a boz-literal-constant, it is treated as if it were\n+!               an int-literal-constant with a kind-param that specifies the\n+!               representation method with the largest decimal exponent range\n+!               supported by the processor.\n+!\n+!    Example. INT (\ufffd3.7) has the value \ufffd3.\n+!\n+module mykinds\n+   integer, parameter :: ik1 = selected_int_kind(2)\n+   integer, parameter :: ik2 = selected_int_kind(4)\n+   integer, parameter :: ik4 = selected_int_kind(9)\n+   integer, parameter :: ik8 = selected_int_kind(18)\n+   integer, parameter :: sp = selected_real_kind(6,30)\n+   integer, parameter :: dp = selected_real_kind(15,300)\n+   integer, parameter :: ck = kind('a')\n+end module mykinds\n+\n+program test_int\n+\n+   use mykinds\n+\n+   integer(ik1) i1\n+   integer(ik2) i2\n+   integer(ik4) i4\n+   integer(ik8) i8\n+   real(sp) r4\n+   real(dp) r8\n+   complex(sp) c4\n+   complex(dp) c8\n+   !\n+   ! Case 1\n+   !\n+   i1 = int(-3)\n+   i2 = int(-3)\n+   i4 = int(-3)\n+   i8 = int(-3)\n+   if (i1 /= -3_ik1 .or. i2 /= -3_ik2) call abort\n+   if (i4 /= -3_ik4 .or. i8 /= -3_ik8) call abort\n+\n+   i1 = int(5,  ik1)\n+   i2 = int(i1, ik2)\n+   i4 = int(i1, ik4)\n+   i8 = int(i1, ik8)\n+   if (i1 /= 5_ik1 .or. i2 /= 5_ik2) call abort\n+   if (i4 /= 5_ik4 .or. i8 /= 5_ik8) call abort\n+\n+   i8 = int(10, ik8)\n+   i1 = int(i8, ik1)\n+   i2 = int(i8, ik2)\n+   i4 = int(i8, ik4)\n+   if (i1 /= 10_ik1 .or. i2 /= 10_ik2) call abort\n+   if (i4 /= 10_ik4 .or. i8 /= 10_ik8) call abort\n+   !\n+   ! case 2(b)\n+   !\n+   r4 = -3.7_sp\n+   i1 = int(r4,  ik1)\n+   i2 = int(r4, ik2)\n+   i4 = int(r4, ik4)\n+   i8 = int(r4, ik8)\n+   if (i1 /= -3_ik1 .or. i2 /= -3_ik2) call abort\n+   if (i4 /= -3_ik4 .or. i8 /= -3_ik8) call abort\n+\n+   r8 = -3.7_dp\n+   i1 = int(r8,  ik1)\n+   i2 = int(r8, ik2)\n+   i4 = int(r8, ik4)\n+   i8 = int(r8, ik8)\n+   if (i1 /= -3_ik1 .or. i2 /= -3_ik2) call abort\n+   if (i4 /= -3_ik4 .or. i8 /= -3_ik8) call abort\n+   !\n+   ! Case 2(a)\n+   !\n+   r4 = -3.7E-1_sp\n+   i1 = int(r4, ik1)\n+   i2 = int(r4, ik2)\n+   i4 = int(r4, ik4)\n+   i8 = int(r4, ik8)\n+   if (i1 /= 0_ik1 .or. i2 /= 0_ik2) call abort\n+   if (i4 /= 0_ik4 .or. i8 /= 0_ik8) call abort\n+\n+   r8 = -3.7E-1_dp\n+   i1 = int(r8, ik1)\n+   i2 = int(r8, ik2)\n+   i4 = int(r8, ik4)\n+   i8 = int(r8, ik8)\n+   if (i1 /= 0_ik1 .or. i2 /= 0_ik2) call abort\n+   if (i4 /= 0_ik4 .or. i8 /= 0_ik8) call abort\n+   !\n+   ! Case 3\n+   !\n+   c4 = (-3.7E-1_sp,3.7E-1_sp)\n+   i1 = int(c4, ik1)\n+   i2 = int(c4, ik2)\n+   i4 = int(c4, ik4)\n+   i8 = int(c4, ik8)\n+   if (i1 /= 0_ik1 .or. i2 /= 0_ik2) call abort\n+   if (i4 /= 0_ik4 .or. i8 /= 0_ik8) call abort\n+\n+   c8 = (-3.7E-1_dp,3.7E-1_dp)\n+   i1 = int(c8, ik1)\n+   i2 = int(c8, ik2)\n+   i4 = int(c8, ik4)\n+   i8 = int(c8, ik8)\n+   if (i1 /= 0_ik1 .or. i2 /= 0_ik2) call abort\n+   if (i4 /= 0_ik4 .or. i8 /= 0_ik8) call abort\n+\n+   c4 = (-3.7_sp,3.7_sp)\n+   i1 = int(c4, ik1)\n+   i2 = int(c4, ik2)\n+   i4 = int(c4, ik4)\n+   i8 = int(c4, ik8)\n+   if (i1 /= -3_ik1 .or. i2 /= -3_ik2) call abort\n+   if (i4 /= -3_ik4 .or. i8 /= -3_ik8) call abort\n+\n+   c8 = (3.7_dp,3.7_dp)\n+   i1 = int(c8, ik1)\n+   i2 = int(c8, ik2)\n+   i4 = int(c8, ik4)\n+   i8 = int(c8, ik8)\n+   if (i1 /= 3_ik1 .or. i2 /= 3_ik2) call abort\n+   if (i4 /= 3_ik4 .or. i8 /= 3_ik8) call abort\n+   !\n+   ! Case 4\n+   !\n+   i1 = int(b'0011', ik1)\n+   i2 = int(b'0011', ik2)\n+   i4 = int(b'0011', ik4)\n+   i8 = int(b'0011', ik8)\n+   if (i1 /= 3_ik1 .or. i2 /= 3_ik2) call abort\n+   if (i4 /= 3_ik4 .or. i8 /= 3_ik8) call abort\n+   i1 = int(o'0011', ik1)\n+   i2 = int(o'0011', ik2)\n+   i4 = int(o'0011', ik4)\n+   i8 = int(o'0011', ik8)\n+   if (i1 /= 9_ik1 .or. i2 /= 9_ik2) call abort\n+   if (i4 /= 9_ik4 .or. i8 /= 9_ik8) call abort\n+   i1 = int(z'0011', ik1)\n+   i2 = int(z'0011', ik2)\n+   i4 = int(z'0011', ik4)\n+   i8 = int(z'0011', ik8)\n+   if (i1 /= 17_ik1 .or. i2 /= 17_ik2) call abort\n+   if (i4 /= 17_ik4 .or. i8 /= 17_ik8) call abort\n+   \n+end program test_int"}]}