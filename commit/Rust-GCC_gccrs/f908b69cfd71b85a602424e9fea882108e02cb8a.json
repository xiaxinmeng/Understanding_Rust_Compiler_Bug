{"sha": "f908b69cfd71b85a602424e9fea882108e02cb8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwOGI2OWNmZDcxYjg1YTYwMjQyNGU5ZmVhODgyMTA4ZTAyY2I4YQ==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-04-10T09:20:19Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-05-19T06:31:58Z"}, "message": "RISC-V: Handle implied extension for -march parser.\n\n  - Implied rule are introduced into latest RISC-V ISA spec.\n\n  - Only implemented D implied F-extension. Zicsr and Zifence are not\n    implement yet, so the rule not included in this patch.\n\n  - Pass preprocessed arch string to arch.\n\n  - Verified with binutils 2.30 and 2.34.\n\ngcc/ChangeLog\n\n\t* common/config/riscv/riscv-common.c (riscv_implied_info_t): New.\n\t(riscv_implied_info): New.\n\t(riscv_subset_list): Add handle_implied_ext.\n\t(riscv_subset_list::to_string): New parameter version_p to\n\tcontrol output format.\n\t(riscv_subset_list::handle_implied_ext): New.\n\t(riscv_subset_list::parse_std_ext): Call handle_implied_ext.\n\t(riscv_arch_str): New parameter version_p to control output format.\n\t(riscv_expand_arch): New.\n\t* config/riscv/riscv-protos.h (riscv_arch_str): New parameter,\n\tversion_p.\n\t* config/riscv/riscv.h (riscv_expand_arch): New,\n\t(EXTRA_SPEC_FUNCTIONS): Define.\n\t(ASM_SPEC): Transform -march= via riscv_expand_arch.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/riscv/arch-6.c: New.\n\t* gcc.target/riscv/attribute-11.c: New.\n\t* gcc.target/riscv/attribute-12.c: New.", "tree": {"sha": "606cae2c4bff55c2eb092bdccfd1ab1d3e38601a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/606cae2c4bff55c2eb092bdccfd1ab1d3e38601a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f908b69cfd71b85a602424e9fea882108e02cb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f908b69cfd71b85a602424e9fea882108e02cb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f908b69cfd71b85a602424e9fea882108e02cb8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f908b69cfd71b85a602424e9fea882108e02cb8a/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1a9763a1f635d2687ebd5009dd61d4fd0ab5fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1a9763a1f635d2687ebd5009dd61d4fd0ab5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1a9763a1f635d2687ebd5009dd61d4fd0ab5fb"}], "stats": {"total": 134, "additions": 122, "deletions": 12}, "files": [{"sha": "d63a0fc1e57fbf5adb85102e31401fb1fbd15500", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -1,3 +1,20 @@\n+2020-05-19  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_implied_info_t): New.\n+\t(riscv_implied_info): New.\n+\t(riscv_subset_list): Add handle_implied_ext.\n+\t(riscv_subset_list::to_string): New parameter version_p to\n+\tcontrol output format.\n+\t(riscv_subset_list::handle_implied_ext): New.\n+\t(riscv_subset_list::parse_std_ext): Call handle_implied_ext.\n+\t(riscv_arch_str): New parameter version_p to control output format.\n+\t(riscv_expand_arch): New.\n+\t* config/riscv/riscv-protos.h (riscv_arch_str): New parameter,\n+\tversion_p.\n+\t* config/riscv/riscv.h (riscv_expand_arch): New,\n+\t(EXTRA_SPEC_FUNCTIONS): Define.\n+\t(ASM_SPEC): Transform -march= via riscv_expand_arch.\n+\n 2020-05-19  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* riscv-common.c (parse_sv_or_non_std_ext): Rename to"}, {"sha": "2df93460165b2fdf4211456b999e7a8270931b73", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 75, "deletions": 10, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -44,6 +44,20 @@ struct riscv_subset_t\n   struct riscv_subset_t *next;\n };\n \n+/* Type for implied ISA info.  */\n+struct riscv_implied_info_t\n+{\n+  const char *ext;\n+  const char *implied_ext;\n+};\n+\n+/* Implied ISA info, must end with NULL sentinel.  */\n+riscv_implied_info_t riscv_implied_info[] =\n+{\n+  {\"d\", \"f\"},\n+  {NULL, NULL}\n+};\n+\n /* Subset list.  */\n class riscv_subset_list\n {\n@@ -73,6 +87,8 @@ class riscv_subset_list\n   const char *parse_multiletter_ext (const char *, const char *,\n \t\t\t\t     const char *);\n \n+  void handle_implied_ext (const char *, int, int);\n+\n public:\n   ~riscv_subset_list ();\n \n@@ -82,7 +98,7 @@ class riscv_subset_list\n \t\t\t  int major_version = RISCV_DONT_CARE_VERSION,\n \t\t\t  int minor_version = RISCV_DONT_CARE_VERSION) const;\n \n-  std::string to_string () const;\n+  std::string to_string (bool) const;\n \n   unsigned xlen() const {return m_xlen;};\n \n@@ -140,10 +156,11 @@ riscv_subset_list::add (const char *subset, int major_version,\n   m_tail = s;\n }\n \n-/* Convert subset info to string with explicit version info.  */\n+/* Convert subset info to string with explicit version info,\n+   VERSION_P to determine append version info or not.  */\n \n std::string\n-riscv_subset_list::to_string () const\n+riscv_subset_list::to_string (bool version_p) const\n {\n   std::ostringstream oss;\n   oss << \"rv\" << m_xlen;\n@@ -153,14 +170,20 @@ riscv_subset_list::to_string () const\n \n   while (subset != NULL)\n     {\n-      if (!first)\n+      /* For !version_p, we only separate extension with underline for\n+\t multi-letter extension.  */\n+      if (!first &&\n+\t  (version_p || subset->name.length() > 1))\n \toss << '_';\n       first = false;\n \n-      oss << subset->name\n-\t  << subset->major_version\n-\t  << 'p'\n-\t  << subset->minor_version;\n+      oss << subset->name;\n+\n+      if (version_p)\n+\toss  << subset->major_version\n+\t     << 'p'\n+\t     << subset->minor_version;\n+\n       subset = subset->next;\n     }\n \n@@ -394,11 +417,38 @@ riscv_subset_list::parse_std_ext (const char *p)\n \n       subset[0] = std_ext;\n \n+      handle_implied_ext (subset, major_version, minor_version);\n+\n       add (subset, major_version, minor_version);\n     }\n   return p;\n }\n \n+\n+/* Check any implied extensions for EXT with version\n+   MAJOR_VERSION.MINOR_VERSION.  */\n+void\n+riscv_subset_list::handle_implied_ext (const char *ext,\n+\t\t\t\t       int major_version,\n+\t\t\t\t       int minor_version)\n+{\n+  riscv_implied_info_t *implied_info;\n+  for (implied_info = &riscv_implied_info[0];\n+       implied_info->ext;\n+       ++implied_info)\n+    {\n+      if (strcmp (ext, implied_info->ext) != 0)\n+\tcontinue;\n+\n+      /* Skip if implied extension already present.  */\n+      if (lookup (implied_info->implied_ext))\n+\tcontinue;\n+\n+      /* TODO: Implied extension might use different version.  */\n+      add (implied_info->implied_ext, major_version, minor_version);\n+    }\n+}\n+\n /* Parsing function for multi-letter extensions.\n \n    Return Value:\n@@ -530,10 +580,10 @@ riscv_subset_list::parse (const char *arch, location_t loc)\n /* Return the current arch string.  */\n \n std::string\n-riscv_arch_str ()\n+riscv_arch_str (bool version_p)\n {\n   gcc_assert (current_subset_list);\n-  return current_subset_list->to_string ();\n+  return current_subset_list->to_string (version_p);\n }\n \n /* Parse a RISC-V ISA string into an option mask.  Must clear or set all arch\n@@ -600,6 +650,21 @@ riscv_handle_option (struct gcc_options *opts,\n     }\n }\n \n+/* Expand arch string with implied extensions.  */\n+\n+const char *\n+riscv_expand_arch (int argc ATTRIBUTE_UNUSED,\n+\t\t   const char **argv)\n+{\n+  static char *_arch_buf;\n+  gcc_assert (argc == 1);\n+  int flags;\n+  location_t loc = UNKNOWN_LOCATION;\n+  riscv_parse_arch_string (argv[0], &flags, loc);\n+  _arch_buf = xstrdup (riscv_arch_str (false).c_str ());\n+  return _arch_buf;\n+}\n+\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options riscv_option_optimization_table[] =\n   {"}, {"sha": "2f3ca99710b6137a4d53af75637e2450828a6d77", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -87,7 +87,7 @@ extern tree riscv_builtin_decl (unsigned int, bool);\n extern void riscv_init_builtins (void);\n \n /* Routines implemented in riscv-common.c.  */\n-extern std::string riscv_arch_str ();\n+extern std::string riscv_arch_str (bool version_p = true);\n \n extern bool riscv_hard_regno_rename_ok (unsigned, unsigned);\n "}, {"sha": "cbcd5749bed47daef4ff20101e8c6006e907e782", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -40,6 +40,11 @@ along with GCC; see the file COPYING3.  If not see\n #define RISCV_TUNE_STRING_DEFAULT \"rocket\"\n #endif\n \n+extern const char *riscv_expand_arch (int argc, const char **argv);\n+\n+# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n+  { \"riscv_expand_arch\", riscv_expand_arch },\n+\n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-arch is ignored if -march is specified.\n    --with-abi is ignored if -mabi is specified.\n@@ -59,7 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_SPEC \"\\\n %(subtarget_asm_debugging_spec) \\\n %{\" FPIE_OR_FPIC_SPEC \":-fpic} \\\n-%{march=*} \\\n+%{march=*:-march=%:riscv_expand_arch(%*)} \\\n %{mabi=*} \\\n %(subtarget_asm_spec)\"\n "}, {"sha": "a8eaabf2b272c4038126790e3e5543ee02bc598c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -1,3 +1,9 @@\n+2020-05-19  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/arch-6.c: New.\n+\t* gcc.target/riscv/attribute-11.c: New.\n+\t* gcc.target/riscv/attribute-12.c: New.\n+\n 2020-05-19  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* gcc.target/riscv/arch-3.c: Adjust option."}, {"sha": "b36dccbf46b9b18b0abdf136d1115b5f66d60ff0", "filename": "gcc/testsuite/gcc.target/riscv/arch-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-6.c?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -march=rv32id -mabi=ilp32\" } */\n+int foo()\n+{\n+}"}, {"sha": "a8649508b2fe4eb794e4a2a1e7d8e178fbd8d797", "filename": "gcc/testsuite/gcc.target/riscv/attribute-11.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-11.c?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32id -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_f2p0_d2p0\\\"\" } } */"}, {"sha": "df27fc3234d4ed47730b761cfc575a0f557ee59a", "filename": "gcc/testsuite/gcc.target/riscv/attribute-12.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f908b69cfd71b85a602424e9fea882108e02cb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-12.c?ref=f908b69cfd71b85a602424e9fea882108e02cb8a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32ifd -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_f2p0_d2p0\\\"\" } } */"}]}