{"sha": "d1a296c11ab091c896267dee5a3d831731fd3143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhMjk2YzExYWIwOTFjODk2MjY3ZGVlNWEzZDgzMTczMWZkMzE0Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-07-19T17:20:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-07-19T17:20:26Z"}, "message": "check.c (gfc_check_cshift,gfc_check_eoshift,gfc_check_unpack): Add rank checks for cshift's shift and eoshift's shift and boundary args.\n\n2008-07-19  Tobias Burnus  <burnus@net-b.de>\n\n        * check.c (gfc_check_cshift,gfc_check_eoshift,gfc_check_unpack): Add\n        rank checks for cshift's shift and eoshift's shift and boundary args.\n        (gfc_check_unpack): Add rank and shape tests for unpack.\n\n2008-07-19  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/intrinsic_argument_conformance_2.f90: New.\n        * gfortran.dg/zero_sized_1.f90: Fix conformance bugs.\n\nFrom-SVN: r137983", "tree": {"sha": "ff18b3e0b7885ebb943b679a3de17f7ce56abf8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff18b3e0b7885ebb943b679a3de17f7ce56abf8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a296c11ab091c896267dee5a3d831731fd3143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a296c11ab091c896267dee5a3d831731fd3143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a296c11ab091c896267dee5a3d831731fd3143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a296c11ab091c896267dee5a3d831731fd3143/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b901ac47fb235195a14d401567b0b2677ad8a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b901ac47fb235195a14d401567b0b2677ad8a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b901ac47fb235195a14d401567b0b2677ad8a03"}], "stats": {"total": 127, "additions": 118, "deletions": 9}, "files": [{"sha": "6077028231ac3a6a6cf412e042e699fcc4191ac5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d1a296c11ab091c896267dee5a3d831731fd3143", "patch": "@@ -1,3 +1,9 @@\n+2008-07-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_cshift,gfc_check_eoshift,gfc_check_unpack): Add rank\n+\tchecks for cshift's shift and eoshift's shift and boundary args.\n+\t(gfc_check_unpack): Add rank and shape tests for unpack.\n+\n 2008-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gfortran.h (new): Remove macro."}, {"sha": "4132d83a78599d26e62340cb214216962954e9c9", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=d1a296c11ab091c896267dee5a3d831731fd3143", "patch": "@@ -876,11 +876,16 @@ gfc_check_cshift (gfc_expr *array, gfc_expr *shift, gfc_expr *dim)\n       if (scalar_check (shift, 1) == FAILURE)\n \treturn FAILURE;\n     }\n-  else\n+  else if (shift->rank != array->rank - 1 && shift->rank != 0)\n     {\n-      /* TODO: more requirements on shift parameter.  */\n+      gfc_error (\"SHIFT argument at %L of CSHIFT must have rank %d or be a \"\n+\t\t \"scalar\", &shift->where, array->rank - 1);\n+      return FAILURE;\n     }\n \n+  /* TODO: Add shape conformance check between array (w/o dimension dim)\n+     and shift. */\n+\n   if (dim_check (dim, 2, true) == FAILURE)\n     return FAILURE;\n \n@@ -1037,17 +1042,45 @@ gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n       if (scalar_check (shift, 2) == FAILURE)\n \treturn FAILURE;\n     }\n-  else\n+  else if (shift->rank != array->rank - 1 && shift->rank != 0)\n     {\n-      /* TODO: more weird restrictions on shift.  */\n+      gfc_error (\"SHIFT argument at %L of EOSHIFT must have rank %d or be a \"\n+\t\t \"scalar\", &shift->where, array->rank - 1);\n+      return FAILURE;\n     }\n \n+  /* TODO: Add shape conformance check between array (w/o dimension dim)\n+     and shift. */\n+\n   if (boundary != NULL)\n     {\n       if (same_type_check (array, 0, boundary, 2) == FAILURE)\n \treturn FAILURE;\n \n-      /* TODO: more restrictions on boundary.  */\n+      if (array->rank == 1)\n+\t{\n+\t  if (scalar_check (boundary, 2) == FAILURE)\n+\t    return FAILURE;\n+\t}\n+      else if (boundary->rank != array->rank - 1 && boundary->rank != 0)\n+\t{\n+\t  gfc_error (\"BOUNDARY argument at %L of EOSHIFT must have rank %d or be \"\n+\t\t     \"a scalar\", &boundary->where, array->rank - 1);\n+\t  return FAILURE;\n+\t}\n+\n+      if (shift->rank == boundary->rank)\n+\t{\n+\t  int i;\n+\t  for (i = 0; i < shift->rank; i++)\n+\t    if (! identical_dimen_shape (shift, i, boundary, i))\n+\t      {\n+\t\tgfc_error (\"Different shape in dimension %d for SHIFT and \"\n+\t\t\t   \"BOUNDARY arguments of EOSHIFT at %L\", shift->rank,\n+\t\t\t   &boundary->where);\n+\t\treturn FAILURE;\n+\t      }\n+\t}\n     }\n \n   if (dim_check (dim, 4, true) == FAILURE)\n@@ -2886,6 +2919,25 @@ gfc_check_unpack (gfc_expr *vector, gfc_expr *mask, gfc_expr *field)\n   if (same_type_check (vector, 0, field, 2) == FAILURE)\n     return FAILURE;\n \n+  if (mask->rank != field->rank && field->rank != 0)\n+    {\n+      gfc_error (\"FIELD argument at %L of UNPACK must have the same rank as \"\n+\t\t \"MASK or be a scalar\", &field->where);\n+      return FAILURE;\n+    }\n+\n+  if (mask->rank == field->rank)\n+    {\n+      int i;\n+      for (i = 0; i < field->rank; i++)\n+\tif (! identical_dimen_shape (mask, i, field, i))\n+\t{\n+\t  gfc_error (\"Different shape in dimension %d for MASK and FIELD \"\n+\t\t     \"arguments of UNPACK at %L\", mask->rank, &field->where);\n+\t  return FAILURE;\n+\t}\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "105edc4ccf4d639174904d89ba949054addbde23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1a296c11ab091c896267dee5a3d831731fd3143", "patch": "@@ -1,3 +1,8 @@\n+2008-07-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/intrinsic_argument_conformance_2.f90: New.\n+\t* gfortran.dg/zero_sized_1.f90: Fix conformance bugs.\n+\n 2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n \n \t* g++.dg/ext/utf-array.C: Fix broken merge/checkin."}, {"sha": "44a4b39f742e9813e2cdcb38726f4d419c8e3333", "filename": "gcc/testsuite/gfortran.dg/intrinsic_argument_conformance_2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_2.f90?ref=d1a296c11ab091c896267dee5a3d831731fd3143", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! Some CSHIFT, EOSHIFT and UNPACK conformance tests\n+!\n+program main\n+  implicit none\n+  real, dimension(1)   :: a1, b1, c1\n+  real, dimension(1,1) :: a2, b2, c2\n+  real, dimension(1,0) :: a, b, c\n+  real :: tempn(1), tempv(5)\n+  real,allocatable :: foo(:)\n+  allocate(foo(0))\n+  tempn = 2.0\n+\n+  a1 = 0\n+  a2 = 0\n+  c1 = 0\n+  a2 = 0\n+\n+  b1 = cshift (a1,1)\n+  b1 = cshift (a1,(/1/)) ! { dg-error \"must be a scalar\" }\n+  b1 = eoshift (a1,1)\n+  b2 = eoshift (a1,c1(1)) ! { dg-error \"must be INTEGER\" }\n+  b1 = eoshift (a1,(/1/)) ! { dg-error \"must be a scalar\" }\n+  b1 = eoshift (a1,1,boundary=c1) ! { dg-error \"must be a scalar\" }\n+  b1 = eoshift (a1,(/1/), boundary=c2) ! { dg-error \"must be a scalar\" }\n+\n+  b2 = cshift (a2,1)\n+  b2 = cshift (a2,(/1/))\n+  b2 = cshift (a2,reshape([1],[1,1])) ! { dg-error \"have rank 1 or be a scalar\" }\n+  b2 = eoshift (a2,1)\n+  b2 = eoshift (a2,c1) ! { dg-error \"must be INTEGER\" }\n+  b2 = eoshift (a2,(/1/))\n+  b2 = eoshift (a2,reshape([1],[1,1]), boundary=c1) ! { dg-error \"have rank 1 or be a scalar\" }\n+  b2 = eoshift (a2,1,boundary=c2(:,:)) ! { dg-error \"have rank 1 or be a scalar\" }\n+  b2 = eoshift (a2,(/1/), boundary=c2(:,:)) ! { dg-error \"have rank 1 or be a scalar\" }\n+\n+  b = eoshift (a,(/1/), boundary=c(1,:)) ! { dg-error \"Different shape in dimension 1\" }\n+\n+  if (any(eoshift(foo,dim=1,shift=1,boundary=(/42.0,-7.0/))/= 0)) call abort() ! { dg-error \"must be a scalar\" }\n+  if (any(eoshift(tempn(2:1),dim=1,shift=1,boundary=(/42.0,-7.0/))/= 0)) call abort() ! { dg-error \"must be a scalar\" }\n+\n+  if (any(unpack(tempv,tempv(1:0)/=0,tempv) /= -47)) call abort() ! { dg-error \"Different shape\" }\n+  if (any(unpack(tempv(5:4),tempv(1:0)/=0,tempv) /= -47)) call abort() ! { dg-error \"Different shape\" }\n+end program main"}, {"sha": "5461fb1a7f09f16d82b1450a1cc5256b6e6ca2ba", "filename": "gcc/testsuite/gfortran.dg/zero_sized_1.f90", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a296c11ab091c896267dee5a3d831731fd3143/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90?ref=d1a296c11ab091c896267dee5a3d831731fd3143", "patch": "@@ -49,8 +49,8 @@ subroutine test_eoshift\n   if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=1,boundary=42.0)/= 0)) call abort\n   if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=2,boundary=42.0)/= 0)) call abort\n \n-  if (any(eoshift(foo,dim=1,shift=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n-  if (any(eoshift(tempn(2:1),dim=1,shift=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n+  if (any(eoshift(foo,dim=1,shift=1,boundary=42.0)/= 0)) call abort\n+  if (any(eoshift(tempn(2:1),dim=1,shift=1,boundary=-7.0)/= 0)) call abort\n   if (any(eoshift(bar,shift=(/1,-1/),dim=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n   if (any(eoshift(bar,shift=(/1,-1/),dim=2,boundary=(/42.0,-7.0/))/= 0)) call abort\n   if (any(eoshift(gee,shift=(/1,-1/),dim=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n@@ -159,15 +159,17 @@ subroutine test_pack\n subroutine test_unpack\n   integer :: tempn(1,5), tempv(5)\n   integer,allocatable :: foo(:,:), bar(:)\n+  integer :: zero\n   tempn = 2 \n   tempv = 5\n+  zero = 0\n   allocate(foo(0,1:7),bar(0:-1))\n   if (any(unpack(tempv,tempv/=0,tempv) /= 5) .or. &\n       size(unpack(tempv,tempv/=0,tempv)) /= 5) call abort\n   if (any(unpack(tempv(1:0),tempv/=0,tempv) /= 5) .or. &\n       size(unpack(tempv(1:0),tempv/=0,tempv)) /= 5) call abort\n-  if (any(unpack(tempv,tempv(1:0)/=0,tempv) /= -47)) call abort\n-  if (any(unpack(tempv(5:4),tempv(1:0)/=0,tempv) /= -47)) call abort\n+  if (any(unpack(tempv,tempv(1:zero)/=0,tempv) /= -47)) call abort\n+  if (any(unpack(tempv(5:4),tempv(1:zero)/=0,tempv) /= -47)) call abort\n   if (any(unpack(bar,foo==foo,foo) /= -47)) call abort\n   deallocate(foo,bar)\n end"}]}