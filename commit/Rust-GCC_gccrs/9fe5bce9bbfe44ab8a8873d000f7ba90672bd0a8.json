{"sha": "9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlNWJjZTliYmZlNDRhYjhhODg3M2QwMDBmN2JhOTA2NzJiZDBhOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-04-25T21:18:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-04-25T21:18:26Z"}, "message": "(movstrsi): Comment out.\n\nFrom-SVN: r4220", "tree": {"sha": "2de6eb78500cd35828858b09d2d1cb1dc87ea8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2de6eb78500cd35828858b09d2d1cb1dc87ea8ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8/comments", "author": null, "committer": null, "parents": [{"sha": "09aa65598b8246bd1aa136802017a7f190aba022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09aa65598b8246bd1aa136802017a7f190aba022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09aa65598b8246bd1aa136802017a7f190aba022"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "dd341001b84bb61a7be8bf30a4f153395a5d05c6", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=9fe5bce9bbfe44ab8a8873d000f7ba90672bd0a8", "patch": "@@ -1028,50 +1028,52 @@\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"2\")])\n \n+;; ??? We get better code without it.  See output_block_move in sparc.c.\n+\n ;; The definition of this insn does not really explain what it does,\n ;; but it should suffice\n ;; that anything generated as this insn will be recognized as one\n ;; and that it will not successfully combine with anything.\n-(define_expand \"movstrsi\"\n-  [(parallel [(set (mem:BLK (match_operand:BLK 0 \"general_operand\" \"\"))\n-\t\t   (mem:BLK (match_operand:BLK 1 \"general_operand\" \"\")))\n-\t      (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n-\t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n-\t      (clobber (match_dup 0))\n-\t      (clobber (match_dup 1))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (reg:SI 0))\n-\t      (clobber (reg:SI 1))])]\n-  \"\"\n-  \"\n-{\n-  /* If the size isn't known, don't emit inline code.  output_block_move\n-     would output code that's much slower than the library function.\n-     Also don't output code for large blocks.  */\n-  if (GET_CODE (operands[2]) != CONST_INT\n-      || GET_CODE (operands[3]) != CONST_INT\n-      || INTVAL (operands[2]) / INTVAL (operands[3]) > 16)\n-    FAIL;\n+;(define_expand \"movstrsi\"\n+;  [(parallel [(set (mem:BLK (match_operand:BLK 0 \"general_operand\" \"\"))\n+;\t\t   (mem:BLK (match_operand:BLK 1 \"general_operand\" \"\")))\n+;\t      (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n+;\t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n+;\t      (clobber (match_dup 0))\n+;\t      (clobber (match_dup 1))\n+;\t      (clobber (match_scratch:SI 4 \"\"))\n+;\t      (clobber (reg:SI 0))\n+;\t      (clobber (reg:SI 1))])]\n+;  \"\"\n+;  \"\n+;{\n+;  /* If the size isn't known, don't emit inline code.  output_block_move\n+;     would output code that's much slower than the library function.\n+;     Also don't output code for large blocks.  */\n+;  if (GET_CODE (operands[2]) != CONST_INT\n+;      || GET_CODE (operands[3]) != CONST_INT\n+;      || INTVAL (operands[2]) / INTVAL (operands[3]) > 16)\n+;    FAIL;\n+;\n+;  operands[0] = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n+;  operands[1] = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n+;  operands[2] = force_not_mem (operands[2]);\n+;}\")\n \n-  operands[0] = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n-  operands[1] = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n-  operands[2] = force_not_mem (operands[2]);\n-}\")\n-\n-(define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+r\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+r\")))\n-   (use (match_operand:SI 2 \"nonmemory_operand\" \"rn\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_dup 0))\n-   (clobber (match_dup 1))\n-   (clobber (match_scratch:SI 4 \"=&r\"))\n-   (clobber (reg:SI 0))\n-   (clobber (reg:SI 1))]\n-  \"\"\n-  \"* return output_block_move (operands);\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"6\")])\n+;(define_insn \"\"\n+;  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+r\"))\n+;\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+r\")))\n+;   (use (match_operand:SI 2 \"nonmemory_operand\" \"rn\"))\n+;   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+;   (clobber (match_dup 0))\n+;   (clobber (match_dup 1))\n+;   (clobber (match_scratch:SI 4 \"=&r\"))\n+;   (clobber (reg:SI 0))\n+;   (clobber (reg:SI 1))]\n+;  \"\"\n+;  \"* return output_block_move (operands);\"\n+;  [(set_attr \"type\" \"multi\")\n+;   (set_attr \"length\" \"6\")])\n \f\n ;; Floating point move insns\n "}]}