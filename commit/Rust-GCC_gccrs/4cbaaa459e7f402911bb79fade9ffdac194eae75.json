{"sha": "4cbaaa459e7f402911bb79fade9ffdac194eae75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiYWFhNDU5ZTdmNDAyOTExYmI3OWZhZGU5ZmZkYWMxOTRlYWU3NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-04-09T11:15:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-04-09T11:15:44Z"}, "message": "re PR libstdc++/65147 (alignment of std::atomic object is not correct)\n\n2015-04-09  Jonathan Wakely  <jwakely@redhat.com>\n\t    Richard Henderson  <rth@redhat.com>\n\n\tPR libstdc++/65147\n\t* include/bits/atomic_base.h (__atomic_base<_ITp>): Increase\n\talignment.\n\t* include/std/atomic (atomic): For types with a power of two size set\n\talignment to at least the size.\n\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error line number.\n\t* testsuite/29_atomics/atomic/65147.cc: New.\n\t* testsuite/29_atomics/atomic_integral/65147.cc: New.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r221945", "tree": {"sha": "08378587f17bd9383cc0c800075734789ef3b5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08378587f17bd9383cc0c800075734789ef3b5a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cbaaa459e7f402911bb79fade9ffdac194eae75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbaaa459e7f402911bb79fade9ffdac194eae75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbaaa459e7f402911bb79fade9ffdac194eae75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbaaa459e7f402911bb79fade9ffdac194eae75/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba99d8a035e95aa93eb2fc56739f63c36582213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba99d8a035e95aa93eb2fc56739f63c36582213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba99d8a035e95aa93eb2fc56739f63c36582213"}], "stats": {"total": 93, "additions": 80, "deletions": 13}, "files": [{"sha": "335b2444eec317b4a5bdf63b10fe053e84ce27db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4cbaaa459e7f402911bb79fade9ffdac194eae75", "patch": "@@ -1,3 +1,15 @@\n+2015-04-09  Jonathan Wakely  <jwakely@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\tPR libstdc++/65147\n+\t* include/bits/atomic_base.h (__atomic_base<_ITp>): Increase\n+\talignment.\n+\t* include/std/atomic (atomic): For types with a power of two size set\n+\talignment to at least the size.\n+\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error line number.\n+\t* testsuite/29_atomics/atomic/65147.cc: New.\n+\t* testsuite/29_atomics/atomic_integral/65147.cc: New.\n+\n 2015-04-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/abi/post/solaris2.10/baseline_symbols.txt: Regenerate."}, {"sha": "79769cf46d80cf7a5f2b17ba7d080790fe3ec506", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=4cbaaa459e7f402911bb79fade9ffdac194eae75", "patch": "@@ -240,7 +240,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       typedef _ITp \t__int_type;\n \n-      __int_type \t_M_i;\n+      static constexpr int _S_alignment =\n+\tsizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);\n+\n+      alignas(_S_alignment) __int_type _M_i;\n \n     public:\n       __atomic_base() noexcept = default;"}, {"sha": "125e37a2838ae74de7df3d2e7a90b3eb3aef0152", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=4cbaaa459e7f402911bb79fade9ffdac194eae75", "patch": "@@ -165,18 +165,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct atomic\n     {\n     private:\n-      // Align 1/2/4/8/16-byte types the same as integer types of that size.\n-      // This matches the alignment effects of the C11 _Atomic qualifier.\n+      // Align 1/2/4/8/16-byte types to at least their size.\n       static constexpr int _S_min_alignment\n-\t= sizeof(_Tp) == sizeof(char)\t   ? alignof(char)\n-\t: sizeof(_Tp) == sizeof(short)\t   ? alignof(short)\n-\t: sizeof(_Tp) == sizeof(int)\t   ? alignof(int)\n-\t: sizeof(_Tp) == sizeof(long)\t   ? alignof(long)\n-\t: sizeof(_Tp) == sizeof(long long) ? alignof(long long)\n-#ifdef _GLIBCXX_USE_INT128\n-\t: sizeof(_Tp) == sizeof(__int128)  ? alignof(__int128)\n-#endif\n-\t: 0;\n+\t= (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16\n+\t? 0 : sizeof(_Tp);\n \n       static constexpr int _S_alignment\n         = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);"}, {"sha": "d3fa23d664490e74ad1a6a5c05cb64b0a41312eb", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/60695.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc?ref=4cbaaa459e7f402911bb79fade9ffdac194eae75", "patch": "@@ -27,4 +27,4 @@ struct X {\n   char stuff[0]; // GNU extension, type has zero size\n };\n \n-std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 189 }\n+std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 181 }"}, {"sha": "e05ec173c319affca6b16cbb5e0011fbbffac057", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/65147.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F65147.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F65147.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F65147.cc?ref=4cbaaa459e7f402911bb79fade9ffdac194eae75", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <atomic>\n+\n+struct S16 {\n+   char c[16];\n+};\n+\n+static_assert( alignof(std::atomic<S16>) >= 16,\n+    \"atomic<S16> must be aligned to at least its size\" );"}, {"sha": "a5f5b748bc42eb054de5afb968f0d68a4a082b93", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/65147.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2F65147.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbaaa459e7f402911bb79fade9ffdac194eae75/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2F65147.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2F65147.cc?ref=4cbaaa459e7f402911bb79fade9ffdac194eae75", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <atomic>\n+\n+static_assert( alignof(std::atomic<char>) >= sizeof(char),\n+    \"atomic<char> must be aligned to at least its size\" );\n+static_assert( alignof(std::atomic<short>) >= sizeof(short),\n+    \"atomic<short> must be aligned to at least its size\" );\n+static_assert( alignof(std::atomic<int>) >= sizeof(int),\n+    \"atomic<int> must be aligned to at least its size\" );\n+static_assert( alignof(std::atomic<long>) >= sizeof(long),\n+    \"atomic<long> must be aligned to at least its size\" );\n+static_assert( alignof(std::atomic<long long>) >= sizeof(long long),\n+    \"atomic<long long> must be aligned to at least its size\" );"}]}