{"sha": "c2f94a898f16d790e21533a6e0d345c23dd379a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmOTRhODk4ZjE2ZDc5MGUyMTUzM2E2ZTBkMzQ1YzIzZGQzNzlhMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-01-14T22:54:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-06T07:51:20Z"}, "message": "[Ada] Crash on if_expression used as index of discriminant-dependent array\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_If_Expression): If the context of the\n\texpression is an indexed_component, resolve the expression and\n\tits dependent_expressions with the base type of the index, to\n\tensure that an index check is generated when resolving the\n\tenclosing indexxed_component, and avoid an improper use of\n\tdiscriminants out of scope, when the index type is\n\tdiscriminant-dependent.", "tree": {"sha": "b8670e74409b7cff80753b552d4c1ecb292f6769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8670e74409b7cff80753b552d4c1ecb292f6769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2f94a898f16d790e21533a6e0d345c23dd379a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f94a898f16d790e21533a6e0d345c23dd379a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f94a898f16d790e21533a6e0d345c23dd379a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f94a898f16d790e21533a6e0d345c23dd379a0/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afab03da75f6b5e11087738d71aeb8c3efa40f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afab03da75f6b5e11087738d71aeb8c3efa40f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afab03da75f6b5e11087738d71aeb8c3efa40f1c"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "88d294efefb6bdb1fd7e6d6beae892bcf374d8b8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f94a898f16d790e21533a6e0d345c23dd379a0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f94a898f16d790e21533a6e0d345c23dd379a0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c2f94a898f16d790e21533a6e0d345c23dd379a0", "patch": "@@ -9095,6 +9095,16 @@ package body Sem_Res is\n       --  that the context in general allows sliding, while a qualified\n       --  expression forces equality of bounds.\n \n+      Result_Type  : Entity_Id := Typ;\n+      --  So in most cases the type of the If_Expression and of its\n+      --  dependent expressions is that of the context. However, if\n+      --  the expression is the index of an Indexed_Component, we must\n+      --  ensure that a proper index check is applied, rather than a\n+      --  range check on the index type (which might be discriminant\n+      --  dependent). In this case we resolve with the base type of the\n+      --  index type, and the index check is generated in the resolution\n+      --  of the indexed_component above.\n+\n       -----------------\n       -- Apply_Check --\n       -----------------\n@@ -9118,10 +9128,10 @@ package body Sem_Res is\n          else\n             Rewrite (Expr,\n               Make_Qualified_Expression (Loc,\n-                Subtype_Mark => New_Occurrence_Of (Typ, Loc),\n+                Subtype_Mark => New_Occurrence_Of (Result_Type, Loc),\n                 Expression   => Relocate_Node (Expr)));\n \n-            Analyze_And_Resolve (Expr, Typ);\n+            Analyze_And_Resolve (Expr, Result_Type);\n          end if;\n       end Apply_Check;\n \n@@ -9140,6 +9150,12 @@ package body Sem_Res is\n          return;\n       end if;\n \n+      if Nkind (Parent (N)) = N_Indexed_Component\n+        or else Nkind (Parent (Parent (N))) = N_Indexed_Component\n+      then\n+         Result_Type := Base_Type (Typ);\n+      end if;\n+\n       Then_Expr := Next (Condition);\n \n       if No (Then_Expr) then\n@@ -9149,7 +9165,7 @@ package body Sem_Res is\n       Else_Expr := Next (Then_Expr);\n \n       Resolve (Condition, Any_Boolean);\n-      Resolve (Then_Expr, Typ);\n+      Resolve (Then_Expr, Result_Type);\n       Apply_Check (Then_Expr);\n \n       --  If ELSE expression present, just resolve using the determined type\n@@ -9163,7 +9179,7 @@ package body Sem_Res is\n             Resolve (Else_Expr, Any_Real);\n \n          else\n-            Resolve (Else_Expr, Typ);\n+            Resolve (Else_Expr, Result_Type);\n          end if;\n \n          Apply_Check (Else_Expr);\n@@ -9187,15 +9203,15 @@ package body Sem_Res is\n       elsif Root_Type (Typ) = Standard_Boolean then\n          Else_Expr :=\n            Convert_To (Typ, New_Occurrence_Of (Standard_True, Sloc (N)));\n-         Analyze_And_Resolve (Else_Expr, Typ);\n+         Analyze_And_Resolve (Else_Expr, Result_Type);\n          Append_To (Expressions (N), Else_Expr);\n \n       else\n          Error_Msg_N (\"can only omit ELSE expression in Boolean case\", N);\n          Append_To (Expressions (N), Error);\n       end if;\n \n-      Set_Etype (N, Typ);\n+      Set_Etype (N, Result_Type);\n \n       if not Error_Posted (N) then\n          Eval_If_Expression (N);"}]}