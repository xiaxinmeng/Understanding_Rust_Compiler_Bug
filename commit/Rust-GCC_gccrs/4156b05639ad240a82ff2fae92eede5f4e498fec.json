{"sha": "4156b05639ad240a82ff2fae92eede5f4e498fec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1NmIwNTYzOWFkMjQwYTgyZmYyZmFlOTJlZWRlNWY0ZTQ5OGZlYw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T10:57:39Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T10:57:39Z"}, "message": "S/390: arch13: Support 32 bit fp-int vector converts\n\ngcc/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.md (\"xde\"): Extend mode attribute to vector\n\ttypes.\n\t* config/s390/vector.md (VX_VEC_CONV_BFP, VX_VEC_CONV_INT): New\n\tmode iterators.\n\t(\"floatv2div2df2\", \"floatunsv2div2df2\", \"fix_truncv2dfv2di2\")\n\t(\"fixuns_truncv2dfv2di2\"): Enhance with mode iterator to also\n\tsupport 32 bit fp-int conversions. Rename to ...\n\t(\"float<VX_VEC_CONV_INT:mode><VX_VEC_CONV_BFP:mode>2\")\n\t(\"floatuns<VX_VEC_CONV_INT:mode><VX_VEC_CONV_BFP:mode>2\")\n\t(\"fix_trunc<VX_VEC_CONV_BFP:mode><VX_VEC_CONV_INT:mode>2\")\n\t(\"fixuns_trunc<VX_VEC_CONV_BFP:mode><VX_VEC_CONV_INT:mode>2\"):\n\t... to these.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/arch13/fp-signedint-convert-1.c: New test.\n\t* gcc.target/s390/arch13/fp-unsignedint-convert-1.c: New test.\n\nFrom-SVN: r270081", "tree": {"sha": "b6b0072702427033eac50ddbf5dbbc4e7aed24e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b0072702427033eac50ddbf5dbbc4e7aed24e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4156b05639ad240a82ff2fae92eede5f4e498fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4156b05639ad240a82ff2fae92eede5f4e498fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4156b05639ad240a82ff2fae92eede5f4e498fec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4156b05639ad240a82ff2fae92eede5f4e498fec/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "618eef38d9d18342930fbc960e5b9c23e6185b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618eef38d9d18342930fbc960e5b9c23e6185b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618eef38d9d18342930fbc960e5b9c23e6185b40"}], "stats": {"total": 124, "additions": 99, "deletions": 25}, "files": [{"sha": "feb62e22e70d065b2635e349a591fb03dbaa86d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4156b05639ad240a82ff2fae92eede5f4e498fec", "patch": "@@ -1,3 +1,18 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"xde\"): Extend mode attribute to vector\n+\ttypes.\n+\t* config/s390/vector.md (VX_VEC_CONV_BFP, VX_VEC_CONV_INT): New\n+\tmode iterators.\n+\t(\"floatv2div2df2\", \"floatunsv2div2df2\", \"fix_truncv2dfv2di2\")\n+\t(\"fixuns_truncv2dfv2di2\"): Enhance with mode iterator to also\n+\tsupport 32 bit fp-int conversions. Rename to ...\n+\t(\"float<VX_VEC_CONV_INT:mode><VX_VEC_CONV_BFP:mode>2\")\n+\t(\"floatuns<VX_VEC_CONV_INT:mode><VX_VEC_CONV_BFP:mode>2\")\n+\t(\"fix_trunc<VX_VEC_CONV_BFP:mode><VX_VEC_CONV_INT:mode>2\")\n+\t(\"fixuns_trunc<VX_VEC_CONV_BFP:mode><VX_VEC_CONV_INT:mode>2\"):\n+\t... to these.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_rtx_costs): Do not add extra costs for"}, {"sha": "d227b26f061c6c45f442cf83de8aec402ccf9a3a", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=4156b05639ad240a82ff2fae92eede5f4e498fec", "patch": "@@ -700,7 +700,7 @@\n \n ;; In FP templates, a string like \"lt<de>br\" will expand to \"ltxbr\" in\n ;; TF/TDmode, \"ltdbr\" in DF/DDmode, and \"ltebr\" in SF/SDmode.\n-(define_mode_attr xde [(TF \"x\") (DF \"d\") (SF \"e\") (TD \"x\") (DD \"d\") (SD \"e\")])\n+(define_mode_attr xde [(TF \"x\") (DF \"d\") (SF \"e\") (TD \"x\") (DD \"d\") (SD \"e\") (V4SF \"e\") (V2DF \"d\")])\n \n ;; In FP templates, a <dee> in \"m<dee><bt>r\" will expand to \"mx<bt>r\" in\n ;; TF/TDmode, \"md<bt>r\" in DF/DDmode, \"mee<bt>r\" in SFmode and \"me<bt>r in"}, {"sha": "440af6dec979d3e0e7fda1f3dca78d5f4a377f99", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=4156b05639ad240a82ff2fae92eede5f4e498fec", "patch": "@@ -68,6 +68,10 @@\n \n (define_mode_iterator V_128_NOSINGLE [V16QI V8HI V4SI V4SF V2DI V2DF])\n \n+; 32 bit int<->fp vector conversion instructions are available since VXE2 (arch13).\n+(define_mode_iterator VX_VEC_CONV_BFP [V2DF (V4SF \"TARGET_VXE2\")])\n+(define_mode_iterator VX_VEC_CONV_INT [V2DI (V4SI \"TARGET_VXE2\")])\n+\n ; Empty string for all but TImode.  This is used to hide the TImode\n ; expander name in case it is defined already.  See addti3 for an\n ; example.\n@@ -1993,48 +1997,52 @@\n \n ; op2: inexact exception not suppressed (IEEE 754 2008)\n ; op3: according to current rounding mode\n-\n-(define_insn \"floatv2div2df2\"\n-  [(set (match_operand:V2DF             0 \"register_operand\" \"=v\")\n-\t(float:V2DF (match_operand:V2DI 1 \"register_operand\"  \"v\")))]\n-  \"TARGET_VX\"\n-  \"vcdgb\\t%v0,%v1,0,0\"\n+; vcdgb, vcefb\n+(define_insn \"float<VX_VEC_CONV_INT:mode><VX_VEC_CONV_BFP:mode>2\"\n+  [(set (match_operand:VX_VEC_CONV_BFP                        0 \"register_operand\" \"=v\")\n+\t(float:VX_VEC_CONV_BFP (match_operand:VX_VEC_CONV_INT 1 \"register_operand\"  \"v\")))]\n+  \"TARGET_VX\n+   && GET_MODE_UNIT_SIZE (<VX_VEC_CONV_INT:MODE>mode) == GET_MODE_UNIT_SIZE (<VX_VEC_CONV_BFP:MODE>mode)\"\n+  \"vc<VX_VEC_CONV_BFP:xde><VX_VEC_CONV_INT:bhfgq>b\\t%v0,%v1,0,0\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; unsigned integer to floating point\n \n ; op2: inexact exception not suppressed (IEEE 754 2008)\n ; op3: according to current rounding mode\n-\n-(define_insn \"floatunsv2div2df2\"\n-  [(set (match_operand:V2DF                      0 \"register_operand\" \"=v\")\n-\t(unsigned_float:V2DF (match_operand:V2DI 1 \"register_operand\"  \"v\")))]\n-  \"TARGET_VX\"\n-  \"vcdlgb\\t%v0,%v1,0,0\"\n+; vcdlgb, vcelfb\n+(define_insn \"floatuns<VX_VEC_CONV_INT:mode><VX_VEC_CONV_BFP:mode>2\"\n+  [(set (match_operand:VX_VEC_CONV_BFP                                 0 \"register_operand\" \"=v\")\n+\t(unsigned_float:VX_VEC_CONV_BFP (match_operand:VX_VEC_CONV_INT 1 \"register_operand\"  \"v\")))]\n+  \"TARGET_VX\n+   && GET_MODE_UNIT_SIZE (<VX_VEC_CONV_INT:MODE>mode) == GET_MODE_UNIT_SIZE (<VX_VEC_CONV_BFP:MODE>mode)\"\n+  \"vc<VX_VEC_CONV_BFP:xde>l<VX_VEC_CONV_INT:bhfgq>b\\t%v0,%v1,0,0\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; floating point to signed integer\n \n ; op2: inexact exception not suppressed (IEEE 754 2008)\n ; op3: rounding mode 5 (round towards 0 C11 6.3.1.4)\n-\n-(define_insn \"fix_truncv2dfv2di2\"\n-  [(set (match_operand:V2DI           0 \"register_operand\" \"=v\")\n-\t(fix:V2DI (match_operand:V2DF 1 \"register_operand\"  \"v\")))]\n-  \"TARGET_VX\"\n-  \"vcgdb\\t%v0,%v1,0,5\"\n+; vcgdb, vcfeb\n+(define_insn \"fix_trunc<VX_VEC_CONV_BFP:mode><VX_VEC_CONV_INT:mode>2\"\n+  [(set (match_operand:VX_VEC_CONV_INT                      0 \"register_operand\" \"=v\")\n+\t(fix:VX_VEC_CONV_INT (match_operand:VX_VEC_CONV_BFP 1 \"register_operand\"  \"v\")))]\n+  \"TARGET_VX\n+   && GET_MODE_UNIT_SIZE (<VX_VEC_CONV_INT:MODE>mode) == GET_MODE_UNIT_SIZE (<VX_VEC_CONV_BFP:MODE>mode)\"\n+  \"vc<VX_VEC_CONV_INT:bhfgq><VX_VEC_CONV_BFP:xde>b\\t%v0,%v1,0,5\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; floating point to unsigned integer\n \n ; op2: inexact exception not suppressed (IEEE 754 2008)\n ; op3: rounding mode 5 (round towards 0 C11 6.3.1.4)\n-\n-(define_insn \"fixuns_truncv2dfv2di2\"\n-  [(set (match_operand:V2DI                    0 \"register_operand\" \"=v\")\n-\t(unsigned_fix:V2DI (match_operand:V2DF 1 \"register_operand\"  \"v\")))]\n-  \"TARGET_VX\"\n-  \"vclgdb\\t%v0,%v1,0,5\"\n+; vclgdb, vclfeb\n+(define_insn \"fixuns_trunc<VX_VEC_CONV_BFP:mode><VX_VEC_CONV_INT:mode>2\"\n+  [(set (match_operand:VX_VEC_CONV_INT                               0 \"register_operand\" \"=v\")\n+\t(unsigned_fix:VX_VEC_CONV_INT (match_operand:VX_VEC_CONV_BFP 1 \"register_operand\"  \"v\")))]\n+  \"TARGET_VX\n+   && GET_MODE_UNIT_SIZE (<VX_VEC_CONV_INT:MODE>mode) == GET_MODE_UNIT_SIZE (<VX_VEC_CONV_BFP:MODE>mode)\"\n+  \"vcl<VX_VEC_CONV_INT:bhfgq><VX_VEC_CONV_BFP:xde>b\\t%v0,%v1,0,5\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; reduc_smin"}, {"sha": "a86d26a5458e2d8a35a711a966ccd5588b4eec48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4156b05639ad240a82ff2fae92eede5f4e498fec", "patch": "@@ -1,3 +1,8 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/arch13/fp-signedint-convert-1.c: New test.\n+\t* gcc.target/s390/arch13/fp-unsignedint-convert-1.c: New test.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/arch13/sel-1.c: New test."}, {"sha": "9801da86cf360821f041fe8d91ae6b18155d3e5c", "filename": "gcc/testsuite/gcc.target/s390/arch13/fp-signedint-convert-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Ffp-signedint-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Ffp-signedint-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Ffp-signedint-convert-1.c?ref=4156b05639ad240a82ff2fae92eede5f4e498fec", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-compile } */\n+\n+typedef int __attribute__((vector_size(16))) v4si;\n+typedef float __attribute__((vector_size(16))) v4sf;\n+\n+v4si\n+toint (v4sf a)\n+{\n+  v4si out = (v4si){ (int)a[0], (int)a[1], (int)a[2], (int)a[3] };\n+  return out;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcfeb\\t%v24,%v24,0,5\" 1 } } */\n+\n+v4sf\n+tofloat (v4si a)\n+{\n+  v4sf out = (v4sf){ (float)a[0], (float)a[1], (float)a[2], (float)a[3] };\n+  return out;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcefb\\t%v24,%v24,0,0\" 1 } } */"}, {"sha": "b93b95daf2521f06ac4452c768efa52f96b5bd4b", "filename": "gcc/testsuite/gcc.target/s390/arch13/fp-unsignedint-convert-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Ffp-unsignedint-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4156b05639ad240a82ff2fae92eede5f4e498fec/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Ffp-unsignedint-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Ffp-unsignedint-convert-1.c?ref=4156b05639ad240a82ff2fae92eede5f4e498fec", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-compile } */\n+\n+typedef unsigned int __attribute__((vector_size(16))) v4si;\n+typedef float __attribute__((vector_size(16))) v4sf;\n+\n+v4si\n+touint (v4sf a)\n+{\n+  v4si out = (v4si){ (unsigned int)a[0], (unsigned int)a[1],\n+\t\t     (unsigned int)a[2], (unsigned int)a[3] };\n+  return out;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vclfeb\\t%v24,%v24,0,5\" 1 } } */\n+\n+v4sf\n+tofloat (v4si a)\n+{\n+  v4sf out = (v4sf){ (float)a[0], (float)a[1],\n+\t\t     (float)a[2], (float)a[3] };\n+  return out;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcelfb\\t%v24,%v24,0,0\" 1 } } */"}]}