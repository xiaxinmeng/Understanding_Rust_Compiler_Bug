{"sha": "11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "node_id": "C_kwDOANBUbNoAKDExZDBhMmFmMzM5MTBjNmQyNDNlNzI2NWZiN2VhMDRkMmJjODliMjU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-29T02:01:42Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-29T09:46:00Z"}, "message": "Optimize _Float16 usage for non AVX512FP16.\n\n1. No memory is needed to move HI/HFmode between GPR and SSE registers\nunder TARGET_SSE2 and above, pinsrw/pextrw are used for them w/o\nAVX512FP16.\n2. Use gen_sse2_pinsrph/gen_vec_setv4sf_0 to replace\nix86_expand_vector_set in extendhfsf2/truncsfhf2 so that redundant\ninitialization cound be eliminated.\n\ngcc/ChangeLog:\n\n\tPR target/102811\n\t* config/i386/i386.c (inline_secondary_memory_needed): HImode\n\tmove between GPR and SSE registers is supported under\n\tTARGET_SSE2 and above.\n\t* config/i386/i386.md (extendhfsf2): Optimize expander.\n\t(truncsfhf2): Ditto.\n\t* config/i386/sse.md (sse2p4_1): Adjust attr for V8HFmode to\n\talign with V8HImode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102811-2.c: New test.\n\t* gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c: Add new\n\tscan-assembler-times.", "tree": {"sha": "7440f7df96b33f56d7fec5987da2a6e0b1e3899c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7440f7df96b33f56d7fec5987da2a6e0b1e3899c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "2657e7817ae5a6c90ea578b8f2a11f2fcb408713", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "patch": "@@ -19437,8 +19437,9 @@ inline_secondary_memory_needed (machine_mode mode, reg_class_t class1,\n       if (msize > UNITS_PER_WORD)\n \treturn true;\n \n-      /* In addition to SImode moves, AVX512FP16 also enables HImode moves.  */\n-      int minsize = GET_MODE_SIZE (TARGET_AVX512FP16 ? HImode : SImode);\n+      /* In addition to SImode moves, HImode moves are supported for SSE2 and above,\n+\t Use vmovw with AVX512FP16, or pinsrw/pextrw without AVX512FP16.  */\n+      int minsize = GET_MODE_SIZE (TARGET_SSE2 ? HImode : SImode);\n \n       if (msize < minsize)\n \treturn true;"}, {"sha": "a384dae23e2dd4fc97591470679ec0d1a64798c2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "patch": "@@ -4608,9 +4608,18 @@\n   if (!TARGET_AVX512FP16)\n     {\n       rtx res = gen_reg_rtx (V4SFmode);\n-      rtx tmp = force_reg (V8HFmode, CONST0_RTX (V8HFmode));\n+      rtx tmp = gen_reg_rtx (V8HFmode);\n+      rtx zero = force_reg (V8HFmode, CONST0_RTX (V8HFmode));\n \n-      ix86_expand_vector_set (false, tmp, operands[1], 0);\n+      if (TARGET_AVX2)\n+\t{\n+\t  rtx dup = gen_reg_rtx (V8HFmode);\n+\t  emit_move_insn (dup, gen_rtx_VEC_DUPLICATE (V8HFmode, operands[1]));\n+\t  emit_move_insn (tmp, gen_rtx_VEC_MERGE (V8HFmode, dup,\n+\t\t\t\t\t\t  zero, const1_rtx));\n+\t}\n+      else\n+\temit_insn (gen_sse2_pinsrph (tmp, zero, operands[1], const1_rtx));\n       emit_insn (gen_vcvtph2ps (res, gen_lowpart (V8HImode, tmp)));\n       emit_move_insn (operands[0], gen_lowpart (SFmode, res));\n       DONE;\n@@ -4824,9 +4833,10 @@\n     if (!TARGET_AVX512FP16)\n     {\n       rtx res = gen_reg_rtx (V8HFmode);\n-      rtx tmp = force_reg (V4SFmode, CONST0_RTX (V4SFmode));\n+      rtx tmp = gen_reg_rtx (V4SFmode);\n+      rtx zero = force_reg (V4SFmode, CONST0_RTX (V4SFmode));\n \n-      ix86_expand_vector_set (false, tmp, operands[1], 0);\n+      emit_insn (gen_vec_setv4sf_0 (tmp, zero, operands[1]));\n       emit_insn (gen_vcvtps2ph (gen_lowpart (V8HImode, res), tmp, GEN_INT (4)));\n       emit_move_insn (operands[0], gen_lowpart (HFmode, res));\n       DONE;"}, {"sha": "b371b140eb13ee76900bea48e2d4d844a85153ef", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "patch": "@@ -17272,7 +17272,7 @@\n    (V2DI \"TARGET_SSE4_1 && TARGET_64BIT\")])\n \n (define_mode_attr sse2p4_1\n-  [(V16QI \"sse4_1\") (V8HI \"sse2\") (V8HF \"sse4_1\")\n+  [(V16QI \"sse4_1\") (V8HI \"sse2\") (V8HF \"sse2\")\n    (V4SI \"sse4_1\") (V2DI \"sse4_1\")])\n \n (define_mode_attr pinsr_evex_isa"}, {"sha": "9a6c432c866617f746f61501a0d893f3c5fa1261", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr102811.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr102811.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr102811.c?ref=11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mf16c -mno-avx512fp16\" } */\n-/* { dg-final { scan-assembler-times \"vpxor\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpxor\\[ \\\\t\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]\" 1 } } */\n /* { dg-final { scan-assembler-not \"__truncsfhf2\\[ \\\\t\\]\"} } */"}, {"sha": "e511c665ae8a0702c08c58c27953b89b8c64afb7", "filename": "gcc/testsuite/gcc.target/i386/pr102811-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d0a2af33910c6d243e7265fb7ea04d2bc89b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-2.c?ref=11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mf16c -mno-avx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"pextrw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pinsrw\" 1 } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\(%rsp\\\\\\)\"} } */\n+short test (_Float16 a)\n+{\n+  union{\n+    short b;\n+    _Float16 a;}u;\n+  u.a = a;\n+  return u.b;\n+}\n+\n+_Float16 test1 (short a)\n+{\n+  union{\n+    _Float16 b;\n+    short a;}u;\n+  u.a = a;\n+  return u.b;\n+}"}]}