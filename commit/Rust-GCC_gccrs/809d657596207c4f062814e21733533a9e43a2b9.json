{"sha": "809d657596207c4f062814e21733533a9e43a2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5ZDY1NzU5NjIwN2M0ZjA2MjgxNGUyMTczMzUzM2E5ZTQzYTJiOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-10T01:37:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-10T01:37:06Z"}, "message": "(assemble_variable): Consistently use DECL_SIZE for everything.\n\nFrom-SVN: r9145", "tree": {"sha": "92361cf7e5194ef74e2fc842c864b96e46851517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92361cf7e5194ef74e2fc842c864b96e46851517"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809d657596207c4f062814e21733533a9e43a2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809d657596207c4f062814e21733533a9e43a2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809d657596207c4f062814e21733533a9e43a2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809d657596207c4f062814e21733533a9e43a2b9/comments", "author": null, "committer": null, "parents": [{"sha": "e2041e684f68944f31b8724fbeca1653729db857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2041e684f68944f31b8724fbeca1653729db857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2041e684f68944f31b8724fbeca1653729db857"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "537d9b272f48d5968414a92a84c2d7b433063a39", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809d657596207c4f062814e21733533a9e43a2b9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809d657596207c4f062814e21733533a9e43a2b9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=809d657596207c4f062814e21733533a9e43a2b9", "patch": "@@ -1031,19 +1031,16 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   TREE_ASM_WRITTEN (decl) = 1;\n \n-  /* If storage size is erroneously variable, just continue.\n-     Error message was already made.  */\n+  app_disable ();\n \n-  if (DECL_SIZE (decl))\n+  if (! dont_output_data)\n     {\n       if (TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n \tgoto finish;\n \n-      app_disable ();\n-\n       /* This is better than explicit arithmetic, since it avoids overflow.  */\n       size_tree = size_binop (CEIL_DIV_EXPR,\n-\t\t\t      DECL_SIZE (decl), size_int (BITS_PER_UNIT));\n+\t\t\t  DECL_SIZE (decl), size_int (BITS_PER_UNIT));\n \n       if (TREE_INT_CST_HIGH (size_tree) != 0)\n \t{\n@@ -1311,11 +1308,10 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     {\n       if (DECL_INITIAL (decl))\n \t/* Output the actual data.  */\n-\toutput_constant (DECL_INITIAL (decl),\n-\t\t\t int_size_in_bytes (TREE_TYPE (decl)));\n+\toutput_constant (DECL_INITIAL (decl), TREE_INT_CST_LOW (size_tree));\n       else\n \t/* Leave space for it.  */\n-\tassemble_zeros (int_size_in_bytes (TREE_TYPE (decl)));\n+\tassemble_zeros (TREE_INT_CST_LOW (size_tree));\n     }\n \n  finish:"}]}