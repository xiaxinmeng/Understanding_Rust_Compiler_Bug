{"sha": "8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhZTc2YmU1ZjFlZDlhMGFkZmQ2YTc0ZGQ3Y2IzNGYwMzFiYWM0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-25T15:16:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-25T15:16:49Z"}, "message": "basic_string.h (_Rep::_M_is_safe): Move to basic_string as _M_disjunct, adjust to take only __s.\n\n2004-10-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (_Rep::_M_is_safe): Move to\n\tbasic_string as _M_disjunct, adjust to take only __s.\n\t* include/bits/basic_string.tcc: Adjust consistently callers.\n\nFrom-SVN: r89534", "tree": {"sha": "aa6a327e1de2d3dcc3e3de76651e41357abf8fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa6a327e1de2d3dcc3e3de76651e41357abf8fbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/comments", "author": null, "committer": null, "parents": [{"sha": "4c7c0c70e3aecf557e968d3d0941e21f1f875f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7c0c70e3aecf557e968d3d0941e21f1f875f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7c0c70e3aecf557e968d3d0941e21f1f875f83"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "74f87faf2d1cab9cb48084df760856763e684b45", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "patch": "@@ -1,3 +1,9 @@\n+2004-10-25  Paolo Carlini  <pcarlini@suse.de>\n+\t\n+\t* include/bits/basic_string.h (_Rep::_M_is_safe): Move to\n+\tbasic_string as _M_disjunct, adjust to take only __s.\n+\t* include/bits/basic_string.tcc: Adjust consistently callers. \n+\n 2004-10-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (assign(const _CharT*, size_type)):"}, {"sha": "817123365cc76ea4968299718dadbf318144d039", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "patch": "@@ -185,14 +185,6 @@ namespace std\n \t_M_is_shared() const\n         { return this->_M_refcount > 0; }\n \n-\t// True if source and destination do not overlap.\n-\tbool\n-\t_M_is_safe(const _CharT* __data, const _CharT* __s) const\n-\t{\n-\t  return (less<const _CharT*>()(__s, __data)\n-\t\t  || less<const _CharT*>()(__data + this->_M_length, __s));\n-\t}\n-\n         void\n \t_M_set_leaked()\n         { this->_M_refcount = -1; }\n@@ -325,6 +317,14 @@ namespace std\n \treturn __testoff ? __off : this->size() - __pos;\n       }\n \n+      // True if _Rep and source do not overlap.\n+      bool\n+      _M_disjunct(const _CharT* __s) const\n+      {\n+\treturn (less<const _CharT*>()(__s, _M_data())\n+\t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));\n+      }\n+\n       // When __n = 1 way faster than the general multichar\n       // traits_type::copy/move/assign.\n       static void"}, {"sha": "9e59e2c6b50dc834498da5d535f38f227637f662", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=8eae76be5f1ed9a0adfd6a74dd7cb34f031bac4a", "patch": "@@ -246,7 +246,7 @@ namespace std\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       _M_check_length(this->size(), __n, \"basic_string::assign\");\n-      if (_M_rep()->_M_is_safe(_M_data(), __s) || _M_rep()->_M_is_shared())\n+      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())\n \treturn _M_replace_safe(size_type(0), this->size(), __s, __n);\n       else\n \t{\n@@ -273,7 +273,7 @@ namespace std\n \t  const size_type __len = __n + this->size();\n \t  if (__len > this->capacity() || _M_rep()->_M_is_shared())\n \t    {\n-\t      if (_M_rep()->_M_is_safe(_M_data(), __s))\n+\t      if (_M_disjunct(__s))\n \t\tthis->reserve(__len);\n \t      else\n \t\t{\n@@ -314,7 +314,7 @@ namespace std\n        __glibcxx_requires_string_len(__s, __n);\n        _M_check(__pos, \"basic_string::insert\");\n        _M_check_length(size_type(0), __n, \"basic_string::insert\");\n-       if (_M_rep()->_M_is_safe(_M_data(), __s) || _M_rep()->_M_is_shared())\n+       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())\n          return _M_replace_safe(__pos, size_type(0), __s, __n);\n        else\n          {\n@@ -348,7 +348,7 @@ namespace std\n        __n1 = _M_limit(__pos, __n1);\n        _M_check_length(__n1, __n2, \"basic_string::replace\");\n        bool __left;\n-       if (_M_rep()->_M_is_safe(_M_data(), __s) || _M_rep()->_M_is_shared())\n+       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())\n          return _M_replace_safe(__pos, __n1, __s, __n2);\n        else if ((__left = __s + __n2 <= _M_data() + __pos)\n \t\t|| _M_data() + __pos + __n1 <= __s)"}]}