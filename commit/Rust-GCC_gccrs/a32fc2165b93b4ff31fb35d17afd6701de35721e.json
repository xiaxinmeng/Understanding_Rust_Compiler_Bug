{"sha": "a32fc2165b93b4ff31fb35d17afd6701de35721e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyZmMyMTY1YjkzYjRmZjMxZmIzNWQxN2FmZDY3MDFkZTM1NzIxZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-10-11T16:30:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-10-11T16:30:45Z"}, "message": "alpha-passes.def: New file.\n\n\t* config/alpha/alpha-passes.def: New file.\n\t* config/alpha/t-alpha: New file.\n\t* config/alpha/alpha-protos.h (gcc::context, rtl_opt_pass): Declare.\n\t(make_pass_handle_trap_shadows): New prototype.\n\t(make_pass_align_insns): Ditto.\n\t* config/alpha/alpha.c (alpha_option_override): Don't register\n\tpasses here.\n\t* config.gcc (alpha*-*-*) Add alpha/t-alpha to tmake_file.\n\nFrom-SVN: r240996", "tree": {"sha": "19b10bcf8eed18910727210af7824f766fed214b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19b10bcf8eed18910727210af7824f766fed214b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a32fc2165b93b4ff31fb35d17afd6701de35721e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32fc2165b93b4ff31fb35d17afd6701de35721e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32fc2165b93b4ff31fb35d17afd6701de35721e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32fc2165b93b4ff31fb35d17afd6701de35721e/comments", "author": null, "committer": null, "parents": [{"sha": "66d76fc91e78c98c75ad9ef7f11758fc68988172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d76fc91e78c98c75ad9ef7f11758fc68988172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d76fc91e78c98c75ad9ef7f11758fc68988172"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "b94c6e792857ee71b2b3f7d0170bfbc3cd6f46fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a32fc2165b93b4ff31fb35d17afd6701de35721e", "patch": "@@ -1,3 +1,14 @@\n+2016-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha-passes.def: New file.\n+\t* config/alpha/t-alpha: New file.\n+\t* config/alpha/alpha-protos.h (gcc::context, rtl_opt_pass): Declare.\n+\t(make_pass_handle_trap_shadows): New prototype.\n+\t(make_pass_align_insns): Ditto.\n+\t* config/alpha/alpha.c (alpha_option_override): Don't register\n+\tpasses here.\n+\t* config.gcc (alpha*-*-*) Add alpha/t-alpha to tmake_file.\n+\n 2016-10-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/77924\n@@ -229,7 +240,7 @@\n \n 2016-10-10  Jeff Law  <law@redhat.com>\n \n-        PR tree-optimization/71947\n+\tPR tree-optimization/71947\n \t* tree-ssa-dom.c (cprop_into_stmt): Avoid replacing A with B, then\n \tB with A within a single statement.\n \n@@ -524,12 +535,16 @@\n \n \t* config/aarch64/aarch64-arches.def (AARCH64_ARCH): #undef at the end.\n \t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Likewise.\n-\t* config/aarch64/aarch64-fusion-pairs.def (AARCH64_FUSION_PAIR): Likewise.\n-\t* config/aarch64/aarch64-option-extensions.def (AARCH64_OPT_EXTENSION): Likewise.\n-\t* config/aarch64/aarch64-tuning-flags.def (AARCH64_EXTRA_TUNING_OPTION): Likewise.\n+\t* config/aarch64/aarch64-fusion-pairs.def (AARCH64_FUSION_PAIR):\n+\tLikewise.\n+\t* config/aarch64/aarch64-option-extensions.def (AARCH64_OPT_EXTENSION):\n+\tLikewise.\n+\t* config/aarch64/aarch64-tuning-flags.def (AARCH64_EXTRA_TUNING_OPTION):\n+\tLikewise.\n \t* config/aarch64/aarch64-opts.h (AARCH64_CORE): Don't #undef here.\n \t(AARCH64_ARCH): Likewise.\n-\t* common/config/aarch64/aarch64-common.c (AARCH64_OPT_EXTENSION): Likewise.\n+\t* common/config/aarch64/aarch64-common.c (AARCH64_OPT_EXTENSION):\n+\tLikewise.\n \t(AARCH64_CORE): Likewise.\n \t(AARCH64_ARCH): Likewise.\n \t* config/aarch64/aarch64-protos.h (AARCH64_FUSION_PAIR): Likewise."}, {"sha": "2143d632fd25892e3633abafe17eee9326b1efd8", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a32fc2165b93b4ff31fb35d17afd6701de35721e", "patch": "@@ -972,27 +972,30 @@ aarch64*-*-linux*)\n \t;;\n alpha*-*-linux*)\n \ttm_file=\"elfos.h ${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n-\ttmake_file=\"${tmake_file} alpha/t-linux\"\n+\ttmake_file=\"${tmake_file} alpha/t-linux alpha/t-alpha\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n \t;;\n alpha*-*-freebsd*)\n \ttm_file=\"elfos.h ${tm_file} ${fbsd_tm_file} alpha/elf.h alpha/freebsd.h\"\n+\ttmake_file=\"${tmake_file} alpha/t-alpha\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n \t;;\n alpha*-*-netbsd*)\n \ttm_file=\"elfos.h ${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n+\ttmake_file=\"${tmake_file} alpha/t-alpha\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt \\\n \t\t       alpha/elf.opt\"\n \t;;\n alpha*-*-openbsd*)\n \ttm_defines=\"${tm_defines} OBSD_HAS_DECLARE_FUNCTION_NAME OBSD_HAS_DECLARE_FUNCTION_SIZE OBSD_HAS_DECLARE_OBJECT\"\n \ttm_file=\"elfos.h alpha/alpha.h alpha/elf.h openbsd.h openbsd-stdint.h alpha/openbsd.h openbsd-libpthread.h\"\n+\ttmake_file=\"${tmake_file} alpha/t-alpha\"\n \textra_options=\"${extra_options} openbsd.opt alpha/elf.opt\"\n \t# default x-alpha is only appropriate for dec-osf.\n \t;;\n alpha*-dec-*vms*)\n \ttm_file=\"${tm_file} vms/vms.h alpha/vms.h\"\n-\ttmake_file=\"${tmake_file} alpha/t-vms\"\n+\ttmake_file=\"${tmake_file} alpha/t-vms alpha/t-alpha\"\n \t;;\n arc*-*-elf*)\n \textra_headers=\"arc-simd.h\""}, {"sha": "d960e7cfc06ae7dc7c972e129221139a455624da", "filename": "gcc/config/alpha/alpha-passes.def", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Falpha-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Falpha-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-passes.def?ref=a32fc2165b93b4ff31fb35d17afd6701de35721e", "patch": "@@ -0,0 +1,21 @@\n+/* Description of target passes for DEC Alpha\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+  INSERT_PASS_BEFORE (pass_shorten_branches, 1, pass_align_insns);\n+  INSERT_PASS_AFTER (pass_convert_to_eh_region_ranges, 1, pass_handle_trap_shadows);"}, {"sha": "b02c951c122dfdf5341567284440eedf532d7228", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=a32fc2165b93b4ff31fb35d17afd6701de35721e", "patch": "@@ -112,3 +112,9 @@ extern rtx unicosmk_add_call_info_word (rtx);\n extern bool some_small_symbolic_operand_int (rtx);\n extern int tls_symbolic_operand_1 (rtx, int, int);\n extern rtx resolve_reload_operand (rtx);\n+\n+namespace gcc { class context; }\n+class rtl_opt_pass;\n+\n+extern rtl_opt_pass *make_pass_handle_trap_shadows (gcc::context *);\n+extern rtl_opt_pass *make_pass_align_insns (gcc::context *);"}, {"sha": "7f5396725b0c40ff9ee2a0850014bf5f12ce406e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a32fc2165b93b4ff31fb35d17afd6701de35721e", "patch": "@@ -374,18 +374,6 @@ alpha_option_override (void)\n       64, 64, 16*1024 }\n   };\n \n-  opt_pass *pass_handle_trap_shadows = make_pass_handle_trap_shadows (g);\n-  struct register_pass_info handle_trap_shadows_info\n-    = { pass_handle_trap_shadows, \"eh_ranges\",\n-\t1, PASS_POS_INSERT_AFTER\n-      };\n-\n-  opt_pass *pass_align_insns = make_pass_align_insns (g);\n-  struct register_pass_info align_insns_info\n-    = { pass_align_insns, \"shorten\",\n-\t1, PASS_POS_INSERT_BEFORE\n-      };\n-\n   int const ct_size = ARRAY_SIZE (cpu_table);\n   int line_size = 0, l1_size = 0, l2_size = 0;\n   int i;\n@@ -610,9 +598,6 @@ alpha_option_override (void)\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n \n-  /* This needs to be done at start up.  It's convenient to do it here.  */\n-  register_pass (&handle_trap_shadows_info);\n-  register_pass (&align_insns_info);\n }\n \n /* Implement targetm.override_options_after_change.  */"}, {"sha": "f9b0a24c4d80c57735d426c27d5dae989ec76047", "filename": "gcc/config/alpha/t-alpha", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Ft-alpha", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fc2165b93b4ff31fb35d17afd6701de35721e/gcc%2Fconfig%2Falpha%2Ft-alpha", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-alpha?ref=a32fc2165b93b4ff31fb35d17afd6701de35721e", "patch": "@@ -0,0 +1,19 @@\n+# Copyright (C) 2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+PASSES_EXTRA += $(srcdir)/config/alpha/alpha-passes.def"}]}