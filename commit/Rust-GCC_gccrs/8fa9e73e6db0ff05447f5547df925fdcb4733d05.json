{"sha": "8fa9e73e6db0ff05447f5547df925fdcb4733d05", "node_id": "C_kwDOANBUbNoAKDhmYTllNzNlNmRiMGZmMDU0NDdmNTU0N2RmOTI1ZmRjYjQ3MzNkMDU", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-20T00:23:58Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-23T00:09:29Z"}, "message": "Fortran: Fix testcases that violate C838, + revealed ICE\n\nThe three test cases fixed in this patch violated F2018 C838, which\nonly allows passing an assumed-rank argument to an assumed-rank dummy.\nWrapping the call in \"select rank\" revealed a null pointer dereference\nwhich is fixed by guarding the use of the result of\nGFC_DECL_SAVED_DESCRIPTOR similar to what is already done elsewhere.\n\n2021-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n\ngcc/fortran/\n\t* trans-stmt.c (trans_associate_var): Check that result of\n\tGFC_DECL_SAVED_DESCRIPTOR is not null before using it.\n\ngcc/testsuite/\n\t* gfortran.dg/assumed_rank_18.f90 (g): Wrap call to h in\n\tselect rank.\n\t* gfortran.dg/assumed_type_10.f90 (test_array): Likewise for\n\tcall to test_lib.\n\t* gfortran.dg/assumed_type_11.f90 (test_array): Likewise.", "tree": {"sha": "b1d036675945e2d88c1498ea51db041f2d847f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1d036675945e2d88c1498ea51db041f2d847f66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa9e73e6db0ff05447f5547df925fdcb4733d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa9e73e6db0ff05447f5547df925fdcb4733d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa9e73e6db0ff05447f5547df925fdcb4733d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa9e73e6db0ff05447f5547df925fdcb4733d05/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83aac698835edcdb3e6d96b856bef1c5f92e5e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83aac698835edcdb3e6d96b856bef1c5f92e5e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83aac698835edcdb3e6d96b856bef1c5f92e5e24"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "a8ff473510f0015214c781b0a4dcac229a362011", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=8fa9e73e6db0ff05447f5547df925fdcb4733d05", "patch": "@@ -1788,9 +1788,10 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t  /* Go straight to the class data.  */\n \t  if (sym2->attr.dummy && !sym2->attr.optional)\n \t    {\n-\t      class_decl = DECL_LANG_SPECIFIC (sym2->backend_decl) ?\n-\t\t\t   GFC_DECL_SAVED_DESCRIPTOR (sym2->backend_decl) :\n-\t\t\t   sym2->backend_decl;\n+\t      class_decl = sym2->backend_decl;\n+\t      if (DECL_LANG_SPECIFIC (class_decl)\n+\t\t  && GFC_DECL_SAVED_DESCRIPTOR (class_decl))\n+\t\tclass_decl = GFC_DECL_SAVED_DESCRIPTOR (class_decl);\n \t      if (POINTER_TYPE_P (TREE_TYPE (class_decl)))\n \t\tclass_decl = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t\t\t  class_decl);"}, {"sha": "0bc419ac6d7e601400db3e8c8ee5fb5625ee4ed8", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_18.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_18.f90?ref=8fa9e73e6db0ff05447f5547df925fdcb4733d05", "patch": "@@ -7,7 +7,10 @@ program p\n contains\n    subroutine g(x)\n       real :: x(..)\n-      call h(x)\n+      select rank (x)\n+        rank (1)\n+          call h(x)\n+      end select\n    end\n    subroutine h(x)\n       real :: x(*)"}, {"sha": "a8bbf2d343ea0fe3cbf4e206428b5a69b53309a1", "filename": "gcc/testsuite/gfortran.dg/assumed_type_10.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_10.f90?ref=8fa9e73e6db0ff05447f5547df925fdcb4733d05", "patch": "@@ -31,7 +31,10 @@ subroutine test_32 (a, len)\n   subroutine test_array (a)\n     use iso_c_binding, only: c_size_t\n     class(*), dimension(..), target :: a\n-    call test_lib (a, int (sizeof (a), kind=c_size_t))\n+    select rank (a)\n+      rank (1)\n+        call test_lib (a, int (sizeof (a), kind=c_size_t))\n+    end select\n   end subroutine\n \n end module"}, {"sha": "391fa0de8f22284cba80a5d4e6467a9d16058e1a", "filename": "gcc/testsuite/gfortran.dg/assumed_type_11.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa9e73e6db0ff05447f5547df925fdcb4733d05/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_11.f90?ref=8fa9e73e6db0ff05447f5547df925fdcb4733d05", "patch": "@@ -31,7 +31,10 @@ subroutine test_32 (a, len)\n   subroutine test_array (a)\n     use iso_c_binding, only: c_size_t\n     class(*), dimension(..), target :: a\n-    call test_lib (a, int (sizeof (a), kind=c_size_t))\n+    select rank (a)\n+      rank (1)\n+        call test_lib (a, int (sizeof (a), kind=c_size_t))\n+    end select\n   end subroutine\n \n end module"}]}