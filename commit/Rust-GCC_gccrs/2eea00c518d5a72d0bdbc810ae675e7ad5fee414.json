{"sha": "2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlYTAwYzUxOGQ1YTcyZDBiZGJjODEwYWU2NzVlN2FkNWZlZTQxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-27T09:04:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-27T09:04:31Z"}, "message": "c++: Avoid calls in non-evaluated contexts affect whether function can or can't throw [PR94326]\n\nThe following testcase FAILs -fcompare-debug, because if we emit a\n-Wreturn-local-addr warning, we tsubst decltype in order to print the\nwarning and as that function could throw, set_flags_from_callee during that\nsets cp_function_chain->can_throw and later on we don't set TREE_NOTHROW\non foo.  While with -w or -Wno-return-local-addr, tsubst isn't called during\nthe warning_at, cp_function_chain->can_throw is kept clear and TREE_NOTHROW\nis set on foo.\nIt isn't just a matter of the warning though, in\nint foo ();\nint bar () { return sizeof (foo ()); }\nint baz () { return sizeof (int); }\nI don't really see why we should mark only baz as TREE_NOTHROW and not bar\ntoo, when neither can really throw.\n\n2020-03-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94326\n\t* call.c (set_flags_from_callee): Don't update\n\tcp_function_chain->can_throw or current_function_returns_abnormally\n\tif cp_unevaluated_operand.\n\n\t* g++.dg/other/pr94326.C: New test.", "tree": {"sha": "849b1af02a1b827954270c6978e5478019366807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/849b1af02a1b827954270c6978e5478019366807"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72809d6fe8e085440403ce125c51d01d6e7512b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72809d6fe8e085440403ce125c51d01d6e7512b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72809d6fe8e085440403ce125c51d01d6e7512b0"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "5b8c5e329db41441a56dd4b9929d38a52bafe07d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "patch": "@@ -1,5 +1,10 @@\n 2020-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/94326\n+\t* call.c (set_flags_from_callee): Don't update\n+\tcp_function_chain->can_throw or current_function_returns_abnormally\n+\tif cp_unevaluated_operand.\n+\n \tPR c++/94339\n \t* cvt.c (ocp_convert): Handle COMPOUND_EXPR by recursion on the second\n \toperand and creating a new COMPOUND_EXPR if anything changed."}, {"sha": "02220ffb3a15a04cdb07164357049a5dcaae97b7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "patch": "@@ -333,11 +333,14 @@ set_flags_from_callee (tree call)\n \t   && internal_fn_flags (CALL_EXPR_IFN (call)) & ECF_NOTHROW)\n     nothrow = true;\n \n-  if (!nothrow && at_function_scope_p () && cfun && cp_function_chain)\n-    cp_function_chain->can_throw = 1;\n+  if (cfun && cp_function_chain && !cp_unevaluated_operand)\n+    {\n+      if (!nothrow && at_function_scope_p ())\n+\tcp_function_chain->can_throw = 1;\n \n-  if (decl && TREE_THIS_VOLATILE (decl) && cfun && cp_function_chain)\n-    current_function_returns_abnormally = 1;\n+      if (decl && TREE_THIS_VOLATILE (decl))\n+\tcurrent_function_returns_abnormally = 1;\n+    }\n \n   TREE_NOTHROW (call) = nothrow;\n }"}, {"sha": "5f9b164d4863caa85375caa0e2be66fd92c5ab0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "patch": "@@ -1,5 +1,8 @@\n 2020-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/94326\n+\t* g++.dg/other/pr94326.C: New test.\n+\n \tPR c++/94339\n \t* g++.dg/other/pr94339.C: New test.\n \t* g++.dg/ext/attr-copy-2.C: Comment out failing tests due to PR94346."}, {"sha": "4069c038d529cb1ee9429e495f9bd7bd2cae3d2c", "filename": "gcc/testsuite/g++.dg/other/pr94326.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr94326.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eea00c518d5a72d0bdbc810ae675e7ad5fee414/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr94326.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr94326.C?ref=2eea00c518d5a72d0bdbc810ae675e7ad5fee414", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/94326\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fcompare-debug\" }\n+\n+template <typename = int> struct A {\n+  const int &foo() { return 0; }\t// { dg-warning \"returning reference to temporary\" }\n+  template <typename _Kt> void bar(_Kt) { foo(); }\n+};\n+struct B {\n+  A<> b;\n+  template <typename _Kt> auto baz(_Kt p1) -> decltype(b.bar(p1)) {\n+    b.bar(p1);\n+  }\n+};\n+struct C {};\n+void operator<(C, int) {\n+  B a;\n+  a.baz(C{});\n+}"}]}