{"sha": "7858300e044409a95307ea40622812190032015b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1ODMwMGUwNDQ0MDlhOTUzMDdlYTQwNjIyODEyMTkwMDMyMDE1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T15:07:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T15:07:01Z"}, "message": "[multiple changes]\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Process_Atomic_Independent_Shared_Volatile):\n\tDon't allow Atomic and Volatile_Full_Access for the same entity.\n\n2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Implement new\n\tsemantics and safety checks specified in AI12-0151.\n\nFrom-SVN: r223075", "tree": {"sha": "88032bb42689cd7a69384a90164029e4048d55ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88032bb42689cd7a69384a90164029e4048d55ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7858300e044409a95307ea40622812190032015b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7858300e044409a95307ea40622812190032015b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7858300e044409a95307ea40622812190032015b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7858300e044409a95307ea40622812190032015b/comments", "author": null, "committer": null, "parents": [{"sha": "c8d3b4ff3f469a3553c0e5d27b5d25dd03bf34e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d3b4ff3f469a3553c0e5d27b5d25dd03bf34e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d3b4ff3f469a3553c0e5d27b5d25dd03bf34e0"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "8d396da5774814f60d753e7aa4635862eb20e161", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7858300e044409a95307ea40622812190032015b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7858300e044409a95307ea40622812190032015b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7858300e044409a95307ea40622812190032015b", "patch": "@@ -1,3 +1,13 @@\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Process_Atomic_Independent_Shared_Volatile):\n+\tDon't allow Atomic and Volatile_Full_Access for the same entity.\n+\n+2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Implement new\n+\tsemantics and safety checks specified in AI12-0151.\n+\n 2015-05-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* sem_ch10.adb (Sem_Ch10.Analyze_Proper_Body): Generate SCOs"}, {"sha": "dea8acffe8e6fc5632a19bd5397af53e875ce7e1", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7858300e044409a95307ea40622812190032015b/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7858300e044409a95307ea40622812190032015b/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=7858300e044409a95307ea40622812190032015b", "patch": "@@ -1746,16 +1746,32 @@ package body Sem_Ch5 is\n    begin\n       Enter_Name (Def_Id);\n \n-      if Present (Subt) then\n-         Analyze (Subt);\n-\n-         --  Save type of subtype indication for subsequent check\n+      --  AI12-0151 specifies that when the subtype indication is present, it\n+      --  must statically match the type of the array or container element.\n+      --  To simplify this check, we introduce a subtype declaration with the\n+      --  given subtype indication when it carries a constraint, and rewrite\n+      --  the original as a reference to the created subtype entity.\n \n+      if Present (Subt) then\n          if Nkind (Subt) = N_Subtype_Indication then\n-            Bas := Entity (Subtype_Mark (Subt));\n+            declare\n+               S    : constant Entity_Id := Make_Temporary (Sloc (Subt), 'S');\n+               Decl : constant Node_Id :=\n+                        Make_Subtype_Declaration (Loc,\n+                          Defining_Identifier => S,\n+                          Subtype_Indication  => New_Copy_Tree (Subt));\n+            begin\n+               Insert_Before (Parent (Parent (N)), Decl);\n+               Analyze (Decl);\n+               Rewrite (Subt, New_Occurrence_Of (S, Sloc (Subt)));\n+            end;\n          else\n-            Bas := Entity (Subt);\n+            Analyze (Subt);\n          end if;\n+\n+         --  Save entity of subtype indication for subsequent check\n+\n+         Bas := Entity (Subt);\n       end if;\n \n       Preanalyze_Range (Iter_Name);\n@@ -1771,7 +1787,7 @@ package body Sem_Ch5 is\n       if Of_Present (N) then\n          Set_Related_Expression (Def_Id, Iter_Name);\n \n-         --  For a container, the iterator is specified through the aspect.\n+         --  For a container, the iterator is specified through the aspect\n \n          if not Is_Array_Type (Etype (Iter_Name)) then\n             declare\n@@ -1961,8 +1977,26 @@ package body Sem_Ch5 is\n          if Of_Present (N) then\n             Set_Etype (Def_Id, Component_Type (Typ));\n \n+            --  AI12-0151 stipulates that the container cannot be a component\n+            --  that depends on a discriminant if the enclosing object is\n+            --  mutable, to prevent a modification of the container in the\n+            --  course of an iteration.\n+\n+            if Is_Entity_Name (Iter_Name)\n+              and then Nkind (Original_Node (Iter_Name)) = N_Selected_Component\n+              and then Is_Dependent_Component_Of_Mutable_Object\n+                         (Renamed_Object (Entity (Iter_Name)))\n+            then\n+               Error_Msg_N\n+                 (\"container cannot be a discriminant-dependent \"\n+                  & \"component of a mutable object\", N);\n+            end if;\n+\n             if Present (Subt)\n-              and then Base_Type (Bas) /= Base_Type (Component_Type (Typ))\n+              and then\n+                (Base_Type (Bas) /= Base_Type (Component_Type (Typ))\n+                  or else\n+                    not Subtypes_Statically_Match (Bas, Component_Type (Typ)))\n             then\n                Error_Msg_N\n                  (\"subtype indication does not match component type\", Subt);\n@@ -1979,7 +2013,7 @@ package body Sem_Ch5 is\n             if Ada_Version >= Ada_2012 then\n                Error_Msg_NE\n                  (\"\\if& is meant to designate an element of the array, use OF\",\n-                    N, Def_Id);\n+                  N, Def_Id);\n             end if;\n \n             --  Prevent cascaded errors\n@@ -2035,7 +2069,9 @@ package body Sem_Ch5 is\n                      --  the element type of the container.\n \n                      if Present (Subt)\n-                       and then not Covers (Bas, Etype (Def_Id))\n+                       and then (not Covers (Bas, Etype (Def_Id))\n+                                  or else not Subtypes_Statically_Match\n+                                                (Bas, Etype (Def_Id)))\n                      then\n                         Error_Msg_N\n                           (\"subtype indication does not match element type\","}, {"sha": "a4e7db52dad01daadba351404a86695a3da9cf9f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7858300e044409a95307ea40622812190032015b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7858300e044409a95307ea40622812190032015b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7858300e044409a95307ea40622812190032015b", "patch": "@@ -5866,6 +5866,18 @@ package body Sem_Prag is\n \n          Check_Duplicate_Pragma (E);\n \n+         --  Check Atomic and VFA used together\n+\n+         if (Is_Atomic (E) and then Prag_Id = Pragma_Volatile_Full_Access)\n+           or else (Has_Volatile_Full_Access (E)\n+                     and then (Prag_Id = Pragma_Atomic\n+                                 or else\n+                               Prag_Id = Pragma_Shared))\n+         then\n+            Error_Pragma\n+              (\"cannot have Volatile_Full_Access and Atomic for same entity\");\n+         end if;\n+\n          --  Now check appropriateness of the entity\n \n          if Is_Type (E) then"}]}