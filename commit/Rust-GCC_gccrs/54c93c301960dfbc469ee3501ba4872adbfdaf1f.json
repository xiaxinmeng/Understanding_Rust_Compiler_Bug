{"sha": "54c93c301960dfbc469ee3501ba4872adbfdaf1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjOTNjMzAxOTYwZGZiYzQ2OWVlMzUwMWJhNDg3MmFkYmZkYWYxZg==", "commit": {"author": {"name": "Ansgar Esztermann", "email": "ansgar@thphy.uni-duesseldorf.de", "date": "2002-09-08T03:20:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-08T03:20:35Z"}, "message": "c-typeck.c (c_tree_expr_nonnegative_p): New function.\n\n        * c-typeck.c (c_tree_expr_nonnegative_p): New function.\n\t(build_binary_op): Call c_tree_expr_nonnegative_p rather than\n\ttree_expr_nonnegative_p.\n\t(build_conditional_expr): Likewise.\n        * c-tree.h (c_tree_expr_nonnegative_p): Declare.\n\n        * gcc.dg/compare2.c: Remove xfail from cases 10 and 12.\n\nFrom-SVN: r56927", "tree": {"sha": "2fe21d185b6128b532ce398c3d0354ca265c03ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fe21d185b6128b532ce398c3d0354ca265c03ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c93c301960dfbc469ee3501ba4872adbfdaf1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c93c301960dfbc469ee3501ba4872adbfdaf1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c93c301960dfbc469ee3501ba4872adbfdaf1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c93c301960dfbc469ee3501ba4872adbfdaf1f/comments", "author": null, "committer": null, "parents": [{"sha": "3aa4cad77f095ed61e5e7b803f54c0047bcee380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa4cad77f095ed61e5e7b803f54c0047bcee380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa4cad77f095ed61e5e7b803f54c0047bcee380"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "6fc185ae9843a81581e2c81d901685a25d3c42c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54c93c301960dfbc469ee3501ba4872adbfdaf1f", "patch": "@@ -1,3 +1,11 @@\n+2002-09-07  Ansgar Esztermann  <ansgar@thphy.uni-duesseldorf.de>\n+\n+\t* c-typeck.c (c_tree_expr_nonnegative_p): New function.\n+\t(build_binary_op): Call c_tree_expr_nonnegative_p rather than\n+\ttree_expr_nonnegative_p.  \n+\t(build_conditional_expr): Likewise.\n+\t* c-tree.h (c_tree_expr_nonnegative_p): Declare.\n+\n 2002-09-07  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.def (inf, inff, infl): Mark const.\n@@ -53,7 +61,7 @@\n \n Fri Sep  6 13:10:08 2002  Jeffrey A Law  (law@redhat.com)\n \n-        * pentium.md (pentium-firstvboth): Fix typo.\n+\t* pentium.md (pentium-firstvboth): Fix typo.\n \n 2002-09-06\tDhananjay Deshpande <dhananjayd@kpit.com>\n \n@@ -525,7 +533,7 @@ Tue Sep  3 11:32:14 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \tPR objc/5956:\n \t* objc/objc-act.c (build_typed_selector_reference): Fix typo which\n \twas causing the new selector never to match the existing ones \n-        (Patch by Alexander Malmberg <alexander@malmberg.org>). \n+\t(Patch by Alexander Malmberg <alexander@malmberg.org>). \n \n 2002-09-03  Graham Stott  <graham.stott@btinternet.com>\n \n@@ -834,17 +842,17 @@ Tue Aug 27 23:03:52 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \talready been defined, and emit a warning if not.\n \n 2002-08-27  Nick Clifton  <nickc@redhat.com>\n-            Catherine Moore  <clm@redhat.com>\n-            Jim Wilson  <wilson@cygnus.com>\n-\n-        * config.gcc: Add v850e-*-* target.\n-        Add --with-cpu= support for v850.\n-        * config/v850/lib1funcs.asm: Add v850e callt functions.\n-        * config/v850/v850.h: Add support for v850e target.\n-        * config/v850/v850.c: Add functions to support v850e target.\n-        * config/v850/v850-protos.h: Add prototypes for new functions in v850.c.\n-        * config/v850/v850.md: Add patterns for v850e instructions.\n-        * doc/invoke.texi: Document new v850e command line switches.\n+\t    Catherine Moore  <clm@redhat.com>\n+\t    Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config.gcc: Add v850e-*-* target.\n+\tAdd --with-cpu= support for v850.\n+\t* config/v850/lib1funcs.asm: Add v850e callt functions.\n+\t* config/v850/v850.h: Add support for v850e target.\n+\t* config/v850/v850.c: Add functions to support v850e target.\n+\t* config/v850/v850-protos.h: Add prototypes for new functions in v850.c.\n+\t* config/v850/v850.md: Add patterns for v850e instructions.\n+\t* doc/invoke.texi: Document new v850e command line switches.\n \n Tue Aug 27 18:30:47 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t\t\t  Aldy Hernandez <aldyh at redhat dot com>"}, {"sha": "531cc2845595cd67b7eeb9c1dd27d4c153bc3348", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=54c93c301960dfbc469ee3501ba4872adbfdaf1f", "patch": "@@ -268,6 +268,7 @@ extern tree build_array_ref                     PARAMS ((tree, tree));\n extern tree build_external_ref\t\t\tPARAMS ((tree, int));\n extern tree parser_build_binary_op              PARAMS ((enum tree_code,\n \t\t\t\t\t\t\t tree, tree));\n+extern int c_tree_expr_nonnegative_p          \tPARAMS ((tree));\n extern void readonly_warning\t\t\tPARAMS ((tree, const char *));\n extern tree build_conditional_expr              PARAMS ((tree, tree, tree));\n extern tree build_compound_expr                 PARAMS ((tree));"}, {"sha": "4c6c8bacdf842ea00049cf0d030284f977ffaed0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=54c93c301960dfbc469ee3501ba4872adbfdaf1f", "patch": "@@ -2463,7 +2463,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t     constant expression involving such literals or a\n \t\t     conditional expression involving such literals)\n \t\t     and it is non-negative.  */\n-\t\t  if (tree_expr_nonnegative_p (sop))\n+\t\t  if (c_tree_expr_nonnegative_p (sop))\n \t\t    /* OK */;\n \t\t  /* Do not warn if the comparison is an equality operation,\n \t\t     the unsigned quantity is an integral constant, and it\n@@ -2579,6 +2579,27 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n   }\n }\n \f\n+\n+/* Return true if `t' is known to be non-negative.  */\n+\n+int\n+c_tree_expr_nonnegative_p (t)\n+     tree t;\n+{\n+  if (TREE_CODE (t) == STMT_EXPR)\n+    {\n+      t=COMPOUND_BODY (STMT_EXPR_STMT (t));\n+\n+      /* Find the last statement in the chain, ignoring the final\n+\t     * scope statement */\n+      while (TREE_CHAIN (t) != NULL_TREE \n+             && TREE_CODE (TREE_CHAIN (t)) != SCOPE_STMT)\n+        t=TREE_CHAIN (t);\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0));\n+    }\n+  return tree_expr_nonnegative_p (t);\n+}\n+\n /* Return a tree for the difference of pointers OP0 and OP1.\n    The resulting tree has type int.  */\n \n@@ -3406,8 +3427,8 @@ build_conditional_expr (ifexp, op1, op2)\n \t      /* Do not warn if the signed quantity is an unsuffixed\n \t\t integer literal (or some static constant expression\n \t\t involving such literals) and it is non-negative.  */\n-\t      else if ((unsigned_op2 && tree_expr_nonnegative_p (op1))\n-\t\t       || (unsigned_op1 && tree_expr_nonnegative_p (op2)))\n+\t      else if ((unsigned_op2 && c_tree_expr_nonnegative_p (op1))\n+\t\t       || (unsigned_op1 && c_tree_expr_nonnegative_p (op2)))\n \t\t/* OK */;\n \t      else\n \t\twarning (\"signed and unsigned type in conditional expression\");"}, {"sha": "d382457b3bc3b5ded4de647864c7e945fbc3a6c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54c93c301960dfbc469ee3501ba4872adbfdaf1f", "patch": "@@ -1,3 +1,7 @@\n+2002-09-07  Ansgar Esztermann  <ansgar@thphy.uni-duesseldorf.de>\n+\n+\t* gcc.dg/compare2.c: Remove xfail from cases 10 and 12.\n+\n 2002-09-05  Ziemowit Laski <zlaski@apple.com>\n \n \t* objc.dg/proto-lossage-1.m: New test.\n@@ -80,7 +84,7 @@ Tue Aug 27 22:23:22 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n 2002-08-26  Ziemowit Laski  <zlaski@apple.com>\n \n-        * objc.dg/super-class-2.m: New test.\n+\t* objc.dg/super-class-2.m: New test.\n \n 2002-08-24  Matt Austern  <austern@apple.com>\n \n@@ -186,7 +190,7 @@ Tue Aug 27 22:23:22 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n 2002-08-06  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * testsuite/gcc.dg/tls/diag-3.c: New.\n+\t* testsuite/gcc.dg/tls/diag-3.c: New.\n \n 2002-08-07  Gabriel Dos Reis  <gdr@nerim.net>\n \n@@ -231,7 +235,7 @@ Tue Aug 27 22:23:22 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n 2002-08-01  Benjamin Kosnik   <bkoz@redhat.com>\n \n-        * g++.old-deja/g++.abi/ptrflags.C (expect): Change\n+\t* g++.old-deja/g++.abi/ptrflags.C (expect): Change\n \t__qualifier_flags to __flags.\n \n 2002-07-31  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "0625eb9c3f65f10ef2637e65ff167dcb162877e3", "filename": "gcc/testsuite/gcc.dg/compare2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c93c301960dfbc469ee3501ba4872adbfdaf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c?ref=54c93c301960dfbc469ee3501ba4872adbfdaf1f", "patch": "@@ -26,11 +26,11 @@ void f(int x, unsigned int y)\n \n   /* Statement expression.  */\n   x > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 9\" } */\n-  y > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 10\" { xfail *-*-* } } */\n+  y > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 10\" } */\n \n   /* Statement expression with recursive ?: .  */\n   x > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 11\" } */\n-  y > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 12\" { xfail *-*-* } } */\n+  y > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 12\" } */\n \n   /* Statement expression with signed ?:.  */\n   x > ({tf; tf?64:-1;}); /* { dg-bogus \"signed and unsigned\" \"case 13\" } */"}]}