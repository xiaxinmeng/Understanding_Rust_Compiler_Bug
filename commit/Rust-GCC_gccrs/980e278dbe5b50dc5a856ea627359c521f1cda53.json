{"sha": "980e278dbe5b50dc5a856ea627359c521f1cda53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwZTI3OGRiZTViNTBkYzVhODU2ZWE2MjczNTljNTIxZjFjZGE1Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-24T08:14:13Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-25T01:17:18Z"}, "message": "Revert x86_order_regs_for_local_alloc changes in r12-1669.\n\nStill put general regs as first alloca order.\n\ngcc/ChangeLog:\n\n\tPR target/101185\n\t* config/i386/i386.c (x86_order_regs_for_local_alloc):\n\tRevert r12-1669.\n\ngcc/testsuite/ChangeLog\n\n\tPR target/101185\n\t* gcc.target/i386/bitwise_mask_op-3.c: Add xfail to\n\ttemporarily avoid regression, eventually xfail should be\n\tremoved.", "tree": {"sha": "d796a9dd35fefb21c37d5667f330d8fe22870b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d796a9dd35fefb21c37d5667f330d8fe22870b78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980e278dbe5b50dc5a856ea627359c521f1cda53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980e278dbe5b50dc5a856ea627359c521f1cda53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980e278dbe5b50dc5a856ea627359c521f1cda53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980e278dbe5b50dc5a856ea627359c521f1cda53/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa8327e86eba9a5ad6dacb4db505e3451854976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa8327e86eba9a5ad6dacb4db505e3451854976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa8327e86eba9a5ad6dacb4db505e3451854976"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "c71c9e666a4ed97f7a9746508b33343f7b7e4d6b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980e278dbe5b50dc5a856ea627359c521f1cda53/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980e278dbe5b50dc5a856ea627359c521f1cda53/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=980e278dbe5b50dc5a856ea627359c521f1cda53", "patch": "@@ -20476,15 +20476,6 @@ x86_order_regs_for_local_alloc (void)\n    int pos = 0;\n    int i;\n \n-   /* When allocano cost of GENERAL_REGS is same as MASK_REGS, allocate\n-      MASK_REGS first since it has already been disparaged. This is for\n-      testcase bitwise_mask_op3.c where the input is allocated as mask\n-      registers, then mask bitwise instructions should be used there.\n-      Refer to pr101142.  */\n-   /* Mask register.  */\n-   for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n-     reg_alloc_order [pos++] = i;\n-\n    /* First allocate the local general purpose registers.  */\n    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n      if (GENERAL_REGNO_P (i) && call_used_or_fixed_reg_p (i))\n@@ -20511,6 +20502,10 @@ x86_order_regs_for_local_alloc (void)\n    for (i = FIRST_EXT_REX_SSE_REG; i <= LAST_EXT_REX_SSE_REG; i++)\n      reg_alloc_order [pos++] = i;\n \n+   /* Mask register.  */\n+   for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n+     reg_alloc_order [pos++] = i;\n+\n    /* x87 registers.  */\n    if (TARGET_SSE_MATH)\n      for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)"}, {"sha": "352c49d6c6b1d5dbb6d1a827541ca84fe4bfd88a", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980e278dbe5b50dc5a856ea627359c521f1cda53/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980e278dbe5b50dc5a856ea627359c521f1cda53/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c?ref=980e278dbe5b50dc5a856ea627359c521f1cda53", "patch": "@@ -12,7 +12,7 @@ foo_orb (__m512i a, __m512i b)\n   foo = m1 | m2;\n }\n \n-/* { dg-final { scan-assembler-times \"korb\\[\\t \\]\" \"1\" } }  */\n+/* { dg-final { scan-assembler-times \"korb\\[\\t \\]\" \"1\" { xfail *-*-* } } }  */\n \n void\n foo_xorb (__m512i a, __m512i b)\n@@ -22,7 +22,7 @@ foo_xorb (__m512i a, __m512i b)\n   foo = m1 ^ m2;\n }\n \n-/* { dg-final { scan-assembler-times \"kxorb\\[\\t \\]\" \"1\" } }  */\n+/* { dg-final { scan-assembler-times \"kxorb\\[\\t \\]\" \"1\" { xfail *-*-* } } }  */\n \n void\n foo_andb (__m512i a, __m512i b)\n@@ -40,4 +40,4 @@ foo_andnb (__m512i a, __m512i b)\n   foo = m1 & ~m2;\n }\n \n-/* { dg-final { scan-assembler-times \"kmovb\\[\\t \\]\" \"4\"} }  */\n+/* { dg-final { scan-assembler-times \"kmovb\\[\\t \\]\" \"4\" { xfail *-*-* } } }  */"}]}