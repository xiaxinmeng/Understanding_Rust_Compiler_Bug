{"sha": "6fd2e66a091023edaf55d874189ab63ec8568398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZkMmU2NmEwOTEwMjNlZGFmNTVkODc0MTg5YWI2M2VjODU2ODM5OA==", "commit": {"author": {"name": "Ilya Verbin", "email": "ilya.verbin@intel.com", "date": "2015-10-08T19:04:43Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2015-10-08T19:04:43Z"}, "message": "liboffloadmic: Add missed checks for malloc and strdup return values\n\nliboffloadmic/\n\t* runtime/offload_engine.cpp (Engine::init_process): Use strdup instead\n\tof sizeof+malloc+sprintf, check for return value.\n\t* runtime/offload_env.cpp (MicEnvVar::get_env_var_kind): Check for\n\tstrdup return value.\n\t* runtime/offload_host.cpp (__offload_init_library_once): Check for\n\tstrdup return value.  Fix size calculation of COI_HOST_THREAD_AFFINITY.\n\t* runtime/emulator/coi_device.cpp (COIProcessWaitForShutdown): Check for\n\tmalloc return value.\n\nFrom-SVN: r228622", "tree": {"sha": "cc473b0ce992a6b6a8004d8e0c64c388b612ddd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc473b0ce992a6b6a8004d8e0c64c388b612ddd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fd2e66a091023edaf55d874189ab63ec8568398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd2e66a091023edaf55d874189ab63ec8568398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd2e66a091023edaf55d874189ab63ec8568398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd2e66a091023edaf55d874189ab63ec8568398/comments", "author": null, "committer": null, "parents": [{"sha": "bc8642d6cef0782bc3181ade2ba577e53bcefc15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8642d6cef0782bc3181ade2ba577e53bcefc15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8642d6cef0782bc3181ade2ba577e53bcefc15"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "d25d41841210f91d0181fc413af086c9c2976998", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=6fd2e66a091023edaf55d874189ab63ec8568398", "patch": "@@ -1,3 +1,14 @@\n+2015-10-08  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* runtime/offload_engine.cpp (Engine::init_process): Use strdup instead\n+\tof sizeof+malloc+sprintf, check for return value.\n+\t* runtime/offload_env.cpp (MicEnvVar::get_env_var_kind): Check for\n+\tstrdup return value.\n+\t* runtime/offload_host.cpp (__offload_init_library_once): Check for\n+\tstrdup return value.  Fix size calculation of COI_HOST_THREAD_AFFINITY.\n+\t* runtime/emulator/coi_device.cpp (COIProcessWaitForShutdown): Check for\n+\tmalloc return value.\n+\n 2015-09-29  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* plugin/libgomp-plugin-intelmic.cpp (OFFLOAD_ACTIVE_WAIT_ENV): New"}, {"sha": "983fec05b29f899cc0788b9e75519d11a95a1067", "filename": "liboffloadmic/runtime/emulator/coi_device.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Femulator%2Fcoi_device.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Femulator%2Fcoi_device.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fruntime%2Femulator%2Fcoi_device.cpp?ref=6fd2e66a091023edaf55d874189ab63ec8568398", "patch": "@@ -362,7 +362,8 @@ SYMBOL_VERSION (COIProcessWaitForShutdown, 1) ()\n \tcase CMD_PIPELINE_CREATE:\n \t  {\n \t    /* Receive data from host.  */\n-\t    uint32_t *pipeline_num = (uint32_t *) malloc (sizeof (uint32_t));\n+\t    uint32_t *pipeline_num;\n+\t    MALLOC (uint32_t *, pipeline_num, sizeof (uint32_t));\n \t    READ (pipe_host2tgt, pipeline_num, sizeof (*pipeline_num));\n \n \t    /* Create a new thread for the pipeline.  */"}, {"sha": "4a88546877de3191fe921a28e5d9b6a577ae4218", "filename": "liboffloadmic/runtime/offload_engine.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Foffload_engine.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Foffload_engine.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fruntime%2Foffload_engine.cpp?ref=6fd2e66a091023edaf55d874189ab63ec8568398", "patch": "@@ -173,8 +173,9 @@ void Engine::init_process(void)\n             // use putenv instead of setenv as Windows has no setenv.\n             // Note: putenv requires its argument can't be freed or modified.\n             // So no free after call to putenv or elsewhere.\n-            char * env_var = (char*) malloc(sizeof(\"COI_DMA_CHANNEL_COUNT=2\"));\n-            sprintf(env_var, \"COI_DMA_CHANNEL_COUNT=2\");\n+            char * env_var = strdup(\"COI_DMA_CHANNEL_COUNT=2\");\n+\t    if (env_var == NULL)\n+\t      LIBOFFLOAD_ERROR(c_malloc);\n             putenv(env_var);  \n         }\n     }"}, {"sha": "ac33b67894220549e61f647b0bc2b4debdec3c28", "filename": "liboffloadmic/runtime/offload_env.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Foffload_env.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Foffload_env.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fruntime%2Foffload_env.cpp?ref=6fd2e66a091023edaf55d874189ab63ec8568398", "patch": "@@ -212,10 +212,14 @@ MicEnvVarKind MicEnvVar::get_env_var_kind(\n             *env_var_name_length = 3;\n             *env_var_name = *env_var_def = c;\n             *env_var_def = strdup(*env_var_def);\n+\t    if (*env_var_def == NULL)\n+\t      LIBOFFLOAD_ERROR(c_malloc);\n             return  c_mic_var;\n         }\n         *env_var_def = c + strlen(\"ENV=\");\n         *env_var_def = strdup(*env_var_def);\n+\tif (*env_var_def == NULL)\n+\t  LIBOFFLOAD_ERROR(c_malloc);\n         return c_mic_card_env;\n     }\n     if (isalpha(*c)) {\n@@ -229,6 +233,8 @@ MicEnvVarKind MicEnvVar::get_env_var_kind(\n         return c_no_mic;\n     }\n     *env_var_def = strdup(*env_var_def);\n+    if (*env_var_def == NULL)\n+      LIBOFFLOAD_ERROR(c_malloc);\n     return card_is_set? c_mic_card_var : c_mic_var;\n }\n "}, {"sha": "eec457d386a8023bce909d02d781f58697da780e", "filename": "liboffloadmic/runtime/offload_host.cpp", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Foffload_host.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd2e66a091023edaf55d874189ab63ec8568398/liboffloadmic%2Fruntime%2Foffload_host.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fruntime%2Foffload_host.cpp?ref=6fd2e66a091023edaf55d874189ab63ec8568398", "patch": "@@ -5173,6 +5173,8 @@ static void __offload_init_library_once(void)\n         if (strcasecmp(env_var, \"none\") != 0) {\n             // value is composed of comma separated physical device indexes\n             char *buf = strdup(env_var);\n+\t    if (buf == NULL)\n+\t      LIBOFFLOAD_ERROR(c_malloc);\n             char *str, *ptr;\n             for (str = strtok_r(buf, \",\", &ptr); str != 0;\n                  str = strtok_r(0, \",\", &ptr)) {\n@@ -5245,7 +5247,9 @@ static void __offload_init_library_once(void)\n     if (env_var != 0) {\n         char * new_env_var =\n                    (char*) malloc(sizeof(\"COI_HOST_THREAD_AFFINITY=\") +\n-                                  sizeof(env_var) + 1);\n+                                  strlen(env_var));\n+\tif (new_env_var == NULL)\n+\t  LIBOFFLOAD_ERROR(c_malloc);\n         sprintf(new_env_var, \"COI_HOST_THREAD_AFFINITY=%s\", env_var);\n         putenv(new_env_var);\n     }\n@@ -5254,6 +5258,8 @@ static void __offload_init_library_once(void)\n     env_var = getenv(\"MIC_LD_LIBRARY_PATH\");\n     if (env_var != 0) {\n         mic_library_path = strdup(env_var);\n+\tif (mic_library_path == NULL)\n+\t  LIBOFFLOAD_ERROR(c_malloc);\n     }\n \n \n@@ -5262,6 +5268,8 @@ static void __offload_init_library_once(void)\n     const char *base_name = \"offload_main\";\n     if (mic_library_path != 0) {\n         char *buf = strdup(mic_library_path);\n+\tif (buf == NULL)\n+\t  LIBOFFLOAD_ERROR(c_malloc);\n         char *try_name = (char*) alloca(strlen(mic_library_path) +\n                 strlen(base_name) + 2);\n         char *dir, *ptr;\n@@ -5275,6 +5283,8 @@ static void __offload_init_library_once(void)\n             struct stat st;\n             if (stat(try_name, &st) == 0 && S_ISREG(st.st_mode)) {\n                 mic_device_main = strdup(try_name);\n+\t\tif (mic_device_main == NULL)\n+\t\t  LIBOFFLOAD_ERROR(c_malloc);\n                 break;\n             }\n         }\n@@ -5345,6 +5355,8 @@ static void __offload_init_library_once(void)\n     env_var = getenv(\"MIC_PROXY_FS_ROOT\");\n     if (env_var != 0 && *env_var != '\\0') {\n         mic_proxy_fs_root = strdup(env_var);\n+\tif (mic_proxy_fs_root == NULL)\n+\t  LIBOFFLOAD_ERROR(c_malloc);\n     }\n \n     // Prepare environment for the target process using the following"}]}