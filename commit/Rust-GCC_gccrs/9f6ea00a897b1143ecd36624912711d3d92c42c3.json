{"sha": "9f6ea00a897b1143ecd36624912711d3d92c42c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2ZWEwMGE4OTdiMTE0M2VjZDM2NjI0OTEyNzExZDNkOTJjNDJjMw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-08-14T08:47:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:47:24Z"}, "message": "exp_ch9.adb (Build_Protected_Entry): Propagate the original source location to allow the correct generation of...\n\n2007-08-14  Javier Miranda  <miranda@adacore.com>\n\t    Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb (Build_Protected_Entry): Propagate the original source\n\tlocation to allow the correct generation of errors in case of\n\trestrictions applied to the expanded code.\n\t(Expand_Entry_Barrier): Remove all generated renamings for a barrier\n\tfunction if the condition does not reference them.\n\t(Expand_Entry_Body_Declarations): Mark the index constant as having a\n\tvalid value.\n\nFrom-SVN: r127448", "tree": {"sha": "ac83d1f5c9320482eab4b0f309d6556eb05de459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac83d1f5c9320482eab4b0f309d6556eb05de459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f6ea00a897b1143ecd36624912711d3d92c42c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ea00a897b1143ecd36624912711d3d92c42c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6ea00a897b1143ecd36624912711d3d92c42c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ea00a897b1143ecd36624912711d3d92c42c3/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa5147f00a99f736c4c75871979f738241579084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5147f00a99f736c4c75871979f738241579084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5147f00a99f736c4c75871979f738241579084"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "764d6430ca2860f11fe9ed9526b647928e97d41f", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6ea00a897b1143ecd36624912711d3d92c42c3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6ea00a897b1143ecd36624912711d3d92c42c3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=9f6ea00a897b1143ecd36624912711d3d92c42c3", "patch": "@@ -1002,7 +1002,7 @@ package body Exp_Ch9 is\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n               Statements => New_List (\n-                Make_Return_Statement (Loc,\n+                Make_Simple_Return_Statement (Loc,\n                   Expression => Condition (Ent_Formals)))));\n       Set_Is_Entry_Barrier_Function (EBF);\n       return EBF;\n@@ -1370,7 +1370,7 @@ package body Exp_Ch9 is\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements =>\n                    New_List (\n-                     Make_Return_Statement (Loc,\n+                     Make_Simple_Return_Statement (Loc,\n                         Make_Function_Call (Loc,\n                           Name =>\n                             Make_Selected_Component (Loc,\n@@ -1787,7 +1787,7 @@ package body Exp_Ch9 is\n          Cond  : Node_Id;\n          Stats : constant List_Id :=\n                    New_List (\n-                     Make_Return_Statement (Loc,\n+                     Make_Simple_Return_Statement (Loc,\n                        Expression => Make_Integer_Literal (Loc, Index + 1)));\n \n       begin\n@@ -1879,7 +1879,7 @@ package body Exp_Ch9 is\n          --  correspondence between entry queue and entry body.\n \n          Ret :=\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression => Make_Identifier (Loc, Name_uE));\n \n       else\n@@ -1915,7 +1915,7 @@ package body Exp_Ch9 is\n          if Index = 1 then\n             Decls := New_List;\n             Ret :=\n-              Make_Return_Statement (Loc,\n+              Make_Simple_Return_Statement (Loc,\n                 Expression => Make_Integer_Literal (Loc, 1));\n \n          elsif Nkind (Ret) = N_If_Statement then\n@@ -2083,8 +2083,13 @@ package body Exp_Ch9 is\n \n       if Debug_Generated_Code then\n          Han_Loc := End_Loc;\n+\n+      --  Otherwise we propagate the original source location to allow the\n+      --  correct generation of errors in case of restrictions applied to\n+      --  the expanded code.\n+\n       else\n-         Han_Loc := No_Location;\n+         Han_Loc := Sloc (N);\n       end if;\n \n       Edef :=\n@@ -2521,11 +2526,11 @@ package body Exp_Ch9 is\n                     Name => Make_Identifier (Loc,\n                       Chars (Defining_Unit_Name (N_Op_Spec))),\n                     Parameter_Associations => Uactuals));\n-            Return_Stmt := Make_Return_Statement (Loc,\n+            Return_Stmt := Make_Simple_Return_Statement (Loc,\n               Expression => New_Reference_To (R, Loc));\n \n          else\n-            Unprot_Call := Make_Return_Statement (Loc,\n+            Unprot_Call := Make_Simple_Return_Statement (Loc,\n               Expression => Make_Function_Call (Loc,\n                 Name =>\n                   Make_Identifier (Loc,\n@@ -4352,6 +4357,18 @@ package body Exp_Ch9 is\n       --  scope.\n \n       if Is_Entity_Name (Cond) then\n+\n+         --  A small optimization of useless renamings. If the scope of the\n+         --  entity of the condition is not the barrier function, then the\n+         --  condition does not reference any of the generated renamings\n+         --  within the function.\n+\n+         if Expander_Active\n+           and then Scope (Entity (Cond)) /= Func\n+         then\n+            Set_Declarations (B_F, Empty_List);\n+         end if;\n+\n          if Entity (Cond) = Standard_False\n               or else\n             Entity (Cond) = Standard_True\n@@ -4402,9 +4419,20 @@ package body Exp_Ch9 is\n            Entry_Index_Specification (Entry_Body_Formal_Part (N));\n \n          if Present (Index_Spec) then\n-            Set_Entry_Index_Constant (\n-              Defining_Identifier (Index_Spec),\n-              Make_Defining_Identifier (Loc, New_Internal_Name ('J')));\n+            declare\n+               Index_Con : constant Entity_Id :=\n+                             Make_Defining_Identifier (Loc,\n+                               Chars => New_Internal_Name ('J'));\n+            begin\n+               --  Mark the index constant as having a valid value since it\n+               --  will act as a renaming of the original entry index which\n+               --  is known to be valid.\n+\n+               Set_Is_Known_Valid (Index_Con);\n+\n+               Set_Entry_Index_Constant\n+                 (Defining_Identifier (Index_Spec), Index_Con);\n+            end;\n          end if;\n       end if;\n    end Expand_Entry_Body_Declarations;\n@@ -6724,7 +6752,7 @@ package body Exp_Ch9 is\n \n             Stmts :=\n               New_List (\n-                Make_Return_Statement (Loc,\n+                Make_Simple_Return_Statement (Loc,\n                   Expression =>\n                     Make_Function_Call (Loc,\n                       Name =>\n@@ -7911,7 +7939,7 @@ package body Exp_Ch9 is\n \n          --  Build the return statement to skip the rest of the entry body\n \n-         Skip_Stat := Make_Return_Statement (Loc);\n+         Skip_Stat := Make_Simple_Return_Statement (Loc);\n \n       else\n          --  If the requeue is within a task, find the end label of the\n@@ -8474,7 +8502,7 @@ package body Exp_Ch9 is\n             Add_Accept (Alt);\n \n          elsif Nkind (Alt) = N_Delay_Alternative then\n-            Delay_Count   := Delay_Count + 1;\n+            Delay_Count := Delay_Count + 1;\n \n             --  If the delays are relative delays, the delay expressions have\n             --  type Standard_Duration. Otherwise they must have some time type\n@@ -8491,7 +8519,7 @@ package body Exp_Ch9 is\n                   null;\n                else\n                   Error_Msg_NE (\n-                    \"& is not a time type ('R'M 9.6(6))\",\n+                    \"& is not a time type (RM 9.6(6))\",\n                        Expression (Delay_Statement (Alt)), Time_Type);\n                   Time_Type := Standard_Duration;\n                   Set_Etype (Expression (Delay_Statement (Alt)), Any_Type);"}]}