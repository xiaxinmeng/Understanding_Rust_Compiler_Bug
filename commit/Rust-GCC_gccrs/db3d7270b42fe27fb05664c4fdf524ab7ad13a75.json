{"sha": "db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "node_id": "C_kwDOANBUbNoAKGRiM2Q3MjcwYjQyZmUyN2ZiMDU2NjRjNGZkZjUyNGFiN2FkMTNhNzU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-08T08:58:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-08T08:58:56Z"}, "message": "openmp: Fix up declare target handling for vars with DECL_LOCAL_DECL_ALIAS [PR102640]\n\nThe introduction of DECL_LOCAL_DECL_ALIAS and push_local_extern_decl_alias\nin r11-3699-g4e62aca0e0520e4ed2532f2d8153581190621c1a broke the following\ntestcase.  The following patch fixes it by treating similarly not just\nthe variable to or link clause is put on, but also its DECL_LOCAL_DECL_ALIAS\nif any.  If it hasn't been created yet, when it is created it will copy\nattributes and therefore should get it for free, and as it is an extern,\nnothing more than attributes is needed for it.\n\n2021-10-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102640\ngcc/cp/\n\t* parser.c (handle_omp_declare_target_clause): New function.\n\t(cp_parser_omp_declare_target): Use it.\ngcc/testsuite/\n\t* c-c++-common/gomp/pr102640.c: New test.", "tree": {"sha": "67c3a282e927e6b783050f4fc0525954be83edde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c3a282e927e6b783050f4fc0525954be83edde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3d7270b42fe27fb05664c4fdf524ab7ad13a75/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90285ce98f3c69f275c05397f7c74d22462edc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90285ce98f3c69f275c05397f7c74d22462edc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90285ce98f3c69f275c05397f7c74d22462edc05"}], "stats": {"total": 176, "additions": 117, "deletions": 59}, "files": [{"sha": "c7005eb1a8feb2a2589424aee8aec48b680ef055", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 73, "deletions": 59, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3d7270b42fe27fb05664c4fdf524ab7ad13a75/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3d7270b42fe27fb05664c4fdf524ab7ad13a75/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "patch": "@@ -45505,6 +45505,71 @@ cp_parser_late_parsing_omp_declare_simd (cp_parser *parser, tree attrs)\n   return attrs;\n }\n \n+/* Helper for cp_parser_omp_declare_target, handle one to or link clause\n+   on #pragma omp declare target.  Return false if errors were reported.  */\n+\n+static bool\n+handle_omp_declare_target_clause (tree c, tree t, int device_type)\n+{\n+  tree at1 = lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (t));\n+  tree at2 = lookup_attribute (\"omp declare target link\", DECL_ATTRIBUTES (t));\n+  tree id;\n+  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINK)\n+    {\n+      id = get_identifier (\"omp declare target link\");\n+      std::swap (at1, at2);\n+    }\n+  else\n+    id = get_identifier (\"omp declare target\");\n+  if (at2)\n+    {\n+      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\"%qD specified both in declare target %<link%> and %<to%>\"\n+\t\t\" clauses\", t);\n+      return false;\n+    }\n+  if (!at1)\n+    {\n+      DECL_ATTRIBUTES (t) = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+      if (TREE_CODE (t) != FUNCTION_DECL && !is_global_var (t))\n+\treturn true;\n+\n+      symtab_node *node = symtab_node::get (t);\n+      if (node != NULL)\n+\t{\n+\t  node->offloadable = 1;\n+\t  if (ENABLE_OFFLOADING)\n+\t    {\n+\t      g->have_offload = true;\n+\t      if (is_a <varpool_node *> (node))\n+\t\tvec_safe_push (offload_vars, t);\n+\t    }\n+\t}\n+    }\n+  if (TREE_CODE (t) != FUNCTION_DECL)\n+    return true;\n+  if ((device_type & OMP_CLAUSE_DEVICE_TYPE_HOST) != 0)\n+    {\n+      tree at3 = lookup_attribute (\"omp declare target host\",\n+\t\t\t\t   DECL_ATTRIBUTES (t));\n+      if (at3 == NULL_TREE)\n+\t{\n+\t  id = get_identifier (\"omp declare target host\");\n+\t  DECL_ATTRIBUTES (t) = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t}\n+    }\n+  if ((device_type & OMP_CLAUSE_DEVICE_TYPE_NOHOST) != 0)\n+    {\n+      tree at3 = lookup_attribute (\"omp declare target nohost\",\n+\t\t\t\t   DECL_ATTRIBUTES (t));\n+      if (at3 == NULL_TREE)\n+\t{\n+\t  id = get_identifier (\"omp declare target nohost\");\n+\t  DECL_ATTRIBUTES (t) = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t}\n+    }\n+  return true;\n+}\n \n /* OpenMP 4.0:\n    # pragma omp declare target new-line\n@@ -45557,67 +45622,16 @@ cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n     {\n       if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEVICE_TYPE)\n \tcontinue;\n-      tree t = OMP_CLAUSE_DECL (c), id;\n-      tree at1 = lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (t));\n-      tree at2 = lookup_attribute (\"omp declare target link\",\n-\t\t\t\t   DECL_ATTRIBUTES (t));\n+      tree t = OMP_CLAUSE_DECL (c);\n       only_device_type = false;\n-      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINK)\n-\t{\n-\t  id = get_identifier (\"omp declare target link\");\n-\t  std::swap (at1, at2);\n-\t}\n-      else\n-\tid = get_identifier (\"omp declare target\");\n-      if (at2)\n-\t{\n-\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t    \"%qD specified both in declare target %<link%> and %<to%>\"\n-\t\t    \" clauses\", t);\n-\t  continue;\n-\t}\n-      if (!at1)\n-\t{\n-\t  DECL_ATTRIBUTES (t) = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n-\t  if (TREE_CODE (t) != FUNCTION_DECL && !is_global_var (t))\n-\t    continue;\n-\n-\t  symtab_node *node = symtab_node::get (t);\n-\t  if (node != NULL)\n-\t    {\n-\t      node->offloadable = 1;\n-\t      if (ENABLE_OFFLOADING)\n-\t\t{\n-\t\t  g->have_offload = true;\n-\t\t  if (is_a <varpool_node *> (node))\n-\t\t    vec_safe_push (offload_vars, t);\n-\t\t}\n-\t    }\n-\t}\n-      if (TREE_CODE (t) != FUNCTION_DECL)\n+      if (!handle_omp_declare_target_clause (c, t, device_type))\n \tcontinue;\n-      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_HOST) != 0)\n-\t{\n-\t  tree at3 = lookup_attribute (\"omp declare target host\",\n-\t\t\t\t       DECL_ATTRIBUTES (t));\n-\t  if (at3 == NULL_TREE)\n-\t    {\n-\t      id = get_identifier (\"omp declare target host\");\n-\t      DECL_ATTRIBUTES (t)\n-\t\t= tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n-\t    }\n-\t}\n-      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_NOHOST) != 0)\n-\t{\n-\t  tree at3 = lookup_attribute (\"omp declare target nohost\",\n-\t\t\t\t       DECL_ATTRIBUTES (t));\n-\t  if (at3 == NULL_TREE)\n-\t    {\n-\t      id = get_identifier (\"omp declare target nohost\");\n-\t      DECL_ATTRIBUTES (t)\n-\t\t= tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n-\t    }\n-\t}\n+      if (VAR_OR_FUNCTION_DECL_P (t)\n+\t  && DECL_LOCAL_DECL_P (t)\n+\t  && DECL_LANG_SPECIFIC (t)\n+\t  && DECL_LOCAL_DECL_ALIAS (t))\n+\thandle_omp_declare_target_clause (c, DECL_LOCAL_DECL_ALIAS (t),\n+\t\t\t\t\t  device_type);\n     }\n   if (device_type && only_device_type)\n     warning_at (OMP_CLAUSE_LOCATION (clauses), 0,"}, {"sha": "00ebab9c628fee6d4a1506512f3ade02d0e92d12", "filename": "gcc/testsuite/c-c++-common/gomp/pr102640.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3d7270b42fe27fb05664c4fdf524ab7ad13a75/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr102640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3d7270b42fe27fb05664c4fdf524ab7ad13a75/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr102640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr102640.c?ref=db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "patch": "@@ -0,0 +1,44 @@\n+/* PR c++/102640 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fdump-tree-gimple -fdump-tree-omplower\" } */\n+/* Verify var[123] are mapped without any copying, because they are\n+   mentioned in declare target directive to clauses.  */\n+/* { dg-final { scan-tree-dump-not \"firstprivate\\\\\\(var\\[123]\\\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \".omp_data_arr.\\[0-9]*.var\" \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-not \".omp_data_i->var\" \"omplower\" } } */\n+\n+void\n+foo (void)\n+{\n+  extern int var1;\n+  #pragma omp declare target to (var1)\n+\n+  #pragma omp target\n+  var1++;\n+}\n+\n+int\n+bar (int x)\n+{\n+  extern int var2;\n+  #pragma omp declare target to (var2)\n+  if (x)\n+    return var2;\n+  #pragma omp target\n+  var2++;\n+  return -1;\n+}\n+#pragma omp declare target to (bar)\n+\n+#pragma omp declare target\n+int\n+baz (int x)\n+{\n+  extern int var3;\n+  if (x)\n+    return var3;\n+  #pragma omp target\n+  var3++;\n+  return -1;\n+}\n+#pragma omp end declare target"}]}