{"sha": "677a9668542f145e5105e761acb0dc8a6458b8a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3YTk2Njg1NDJmMTQ1ZTUxMDVlNzYxYWNiMGRjOGE2NDU4YjhhNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-04-03T22:45:55Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-04-03T22:45:55Z"}, "message": "rs6000.md (addsi3, [...]): Use no_new_pseudos.\n\n        * rs6000.md (addsi3, iorsi3, xorsi3, adddi3, iordi3, xordi3,\n        movsi_got, movsi, movsf): Use no_new_pseudos.\n        * rs6000.c (rs6000_got_register): Likewise.\n        (offsettable_mem_opereand): Use || not |.\n\nFrom-SVN: r26165", "tree": {"sha": "0765d75a413f717a5b26b299abdd5c12c80c3051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0765d75a413f717a5b26b299abdd5c12c80c3051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/677a9668542f145e5105e761acb0dc8a6458b8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677a9668542f145e5105e761acb0dc8a6458b8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677a9668542f145e5105e761acb0dc8a6458b8a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677a9668542f145e5105e761acb0dc8a6458b8a6/comments", "author": null, "committer": null, "parents": [{"sha": "d343abd2e8d39a39aa08396417b1d5f3067685c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d343abd2e8d39a39aa08396417b1d5f3067685c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d343abd2e8d39a39aa08396417b1d5f3067685c9"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "fc1c7a84e96e5a6ef930be15091114c2822d5c7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677a9668542f145e5105e761acb0dc8a6458b8a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677a9668542f145e5105e761acb0dc8a6458b8a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=677a9668542f145e5105e761acb0dc8a6458b8a6", "patch": "@@ -1,3 +1,10 @@\n+Sat Apr  3 23:46:13 1999  David Edelsohn  <edelsohn@gnu.org>\n+\t\n+\t* rs6000.md (addsi3, iorsi3, xorsi3, adddi3, iordi3, xordi3,\n+\tmovsi_got, movsi, movsf): Use no_new_pseudos.\n+\t* rs6000.c (rs6000_got_register): Likewise.\n+\t(offsettable_mem_opereand): Use || not |.\n+\n Sat Apr  3 22:02:56 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* acconfig.h (ENABLE_CHECKING): Remove redundant #undef."}, {"sha": "e0c8640bccbcba2e06a7d166d708f475e1912995", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677a9668542f145e5105e761acb0dc8a6458b8a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677a9668542f145e5105e761acb0dc8a6458b8a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=677a9668542f145e5105e761acb0dc8a6458b8a6", "patch": "@@ -854,7 +854,7 @@ offsettable_mem_operand (op, mode)\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == MEM)\n-\t  && offsettable_address_p (reload_completed | reload_in_progress,\n+\t  && offsettable_address_p (reload_completed || reload_in_progress,\n \t\t\t\t    mode, XEXP (op, 0)));\n }\n \n@@ -2335,10 +2335,11 @@ struct rtx_def *\n rs6000_got_register (value)\n      rtx value;\n {\n-  if (!current_function_uses_pic_offset_table || !pic_offset_table_rtx)\n+  if (! current_function_uses_pic_offset_table || ! pic_offset_table_rtx)\n     {\n-      if (reload_in_progress || reload_completed)\n-\tfatal_insn (\"internal error -- needed new GOT register during reload phase to load:\", value);\n+      if (no_new_pseudos)\n+\tfatal_insn (\"internal error -- needed new GOT register during reload phase to load:\",\n+\t\t    value);\n \n       current_function_uses_pic_offset_table = 1;\n       pic_offset_table_rtx = gen_rtx_REG (Pmode, GOT_TOC_REGNUM);"}, {"sha": "ea7c153263d98ec7d930d30e6c935c5d7648d7d9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677a9668542f145e5105e761acb0dc8a6458b8a6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677a9668542f145e5105e761acb0dc8a6458b8a6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=677a9668542f145e5105e761acb0dc8a6458b8a6", "patch": "@@ -895,10 +895,10 @@\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT && !add_operand (operands[2], SImode))\n+  if (GET_CODE (operands[2]) == CONST_INT\n+\t\t&& ! add_operand (operands[2], SImode))\n     {\n-      rtx tmp = ((reload_in_progress || reload_completed\n-\t\t  || rtx_equal_p (operands[0], operands[1]))\n+      rtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (SImode));\n \n       HOST_WIDE_INT low = INTVAL (operands[2]) & 0xffff;\n@@ -1953,11 +1953,10 @@\n   \"\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && !logical_operand (operands[2], SImode))\n+      && ! logical_operand (operands[2], SImode))\n     {\n       HOST_WIDE_INT value = INTVAL (operands[2]);\n-      rtx tmp = ((reload_in_progress || reload_completed\n-\t\t  || rtx_equal_p (operands[0], operands[1]))\n+      rtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (SImode));\n \n       emit_insn (gen_iorsi3 (tmp, operands[1],\n@@ -2061,11 +2060,10 @@\n   \"\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && !logical_operand (operands[2], SImode))\n+      && ! logical_operand (operands[2], SImode))\n     {\n       HOST_WIDE_INT value = INTVAL (operands[2]);\n-      rtx tmp = ((reload_in_progress || reload_completed\n-\t\t  || rtx_equal_p (operands[0], operands[1]))\n+      rtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (SImode));\n \n       emit_insn (gen_xorsi3 (tmp, operands[1],\n@@ -4798,10 +4796,9 @@\n     }\n   else\n     if (GET_CODE (operands[2]) == CONST_INT\n-\t&& !add_operand (operands[2], DImode))\n+\t&& ! add_operand (operands[2], DImode))\n       {\n-\trtx tmp = ((reload_in_progress || reload_completed\n-\t\t    || rtx_equal_p (operands[0], operands[1]))\n+\trtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n \t\t   ? operands[0] : gen_reg_rtx (DImode));\n \n \tHOST_WIDE_INT low = INTVAL (operands[2]) & 0xffff;\n@@ -5489,11 +5486,10 @@\n   \"\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && !logical_operand (operands[2], DImode))\n+      && ! logical_operand (operands[2], DImode))\n     {\n       HOST_WIDE_INT value = INTVAL (operands[2]);\n-      rtx tmp = ((reload_in_progress || reload_completed\n-\t\t  || rtx_equal_p (operands[0], operands[1]))\n+      rtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (DImode));\n \n       emit_insn (gen_iordi3 (tmp, operands[1],\n@@ -5558,11 +5554,10 @@\n   \"\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && !logical_operand (operands[2], DImode))\n+      && ! logical_operand (operands[2], DImode))\n     {\n       HOST_WIDE_INT value = INTVAL (operands[2]);\n-      rtx tmp = ((reload_in_progress || reload_completed\n-\t\t  || rtx_equal_p (operands[0], operands[1]))\n+      rtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (DImode));\n \n       emit_insn (gen_xordi3 (tmp, operands[1],\n@@ -5796,9 +5791,7 @@\n       value = INTVAL (offset);\n       if (value != 0)\n \t{\n-\t  rtx tmp = ((reload_in_progress || reload_completed)\n-\t\t     ? operands[0]\n-\t\t     : gen_reg_rtx (Pmode));\n+\t  rtx tmp = (no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode));\n \t  emit_insn (gen_movsi_got (tmp, operands[1]));\n \t  emit_insn (gen_addsi3 (operands[0], tmp, offset));\n \t  DONE;\n@@ -5885,14 +5878,13 @@\n       DONE;\n     }\n \n-  if (TARGET_ELF && TARGET_NO_TOC && !TARGET_64BIT\n-      && !flag_pic\n+  if (TARGET_ELF && TARGET_NO_TOC && ! TARGET_64BIT\n+      && ! flag_pic\n       && CONSTANT_P (operands[1])\n       && GET_CODE (operands[1]) != HIGH\n       && GET_CODE (operands[1]) != CONST_INT)\n     {\n-      rtx target = (reload_completed || reload_in_progress)\n-\t\t\t? operands[0] : gen_reg_rtx (SImode);\n+      rtx target = (no_new_pseudos ? operands[0] : gen_reg_rtx (SImode));\n \n       /* If this is a function address on -mcall-aixdesc or -mcall-nt,\n \t convert it to the address of the descriptor.  */\n@@ -5918,18 +5910,17 @@\n \n   if (GET_CODE (operands[1]) == CONST\n       && DEFAULT_ABI == ABI_NT\n-      && !side_effects_p (operands[0]))\n+      && ! side_effects_p (operands[0]))\n     {\n       rtx const_term = const0_rtx;\n       rtx sym = eliminate_constant_term (XEXP (operands[1], 0), &const_term);\n       if (sym && GET_CODE (const_term) == CONST_INT\n \t  && (GET_CODE (sym) == SYMBOL_REF || GET_CODE (sym) == LABEL_REF))\n \t{\n \t  unsigned HOST_WIDE_INT value = INTVAL (const_term);\n-\t  int new_reg_p = (flag_expensive_optimizations\n-\t\t\t   && !reload_completed\n-\t\t\t   && !reload_in_progress);\n-\t  rtx tmp1 = (new_reg_p && value != 0) ? gen_reg_rtx (SImode) : operands[0];\n+\t  int new_reg_p = (flag_expensive_optimizations && ! no_new_pseudos);\n+\t  rtx tmp1 = ((new_reg_p && value != 0)\n+\t\t      ? gen_reg_rtx (SImode) : operands[0]);\n \n \t  emit_insn (gen_movsi (tmp1, sym));\n \t  if (INTVAL (const_term) != 0)\n@@ -5940,7 +5931,7 @@\n \trs6000_fatal_bad_address (operands[1]);\n     }\n \n-  if ((!TARGET_WINDOWS_NT || DEFAULT_ABI != ABI_NT)\n+  if ((! TARGET_WINDOWS_NT || DEFAULT_ABI != ABI_NT)\n       && CONSTANT_P (operands[1])\n       && GET_CODE (operands[1]) != CONST_INT\n       && GET_CODE (operands[1]) != HIGH\n@@ -6161,8 +6152,7 @@\n \t  && (FP_REGNO_P (REGNO (operands[1]))\n \t      || REGNO (operands[1]) >= FIRST_PSEUDO_REGISTER))\n \t{\n-\t  rtx newreg\n-\t    = reload_in_progress ? operands[1] : gen_reg_rtx (SFmode);\n+\t  rtx newreg = (no_new_pseudos ? operands[1] : gen_reg_rtx (SFmode));\n \t  emit_insn (gen_aux_truncdfsf2 (newreg, operands[1]));\n \t  operands[1] = newreg;\n \t}"}]}