{"sha": "5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzNGFhYTlmMGIzN2VhMzcyY2IxODVmZTdhYTZjMjZmZTBhNGMyZQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-11T17:46:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-11T17:46:10Z"}, "message": "Merge #425\n\n425: Basic implementation of legacy symbol mangling r=philberty a=philberty\n\n    Implement basic rustc legacy symbol mangling\r\n    \r\n    Rust supports two different symbol mangling methods legacy and V0. V0 is\r\n    the goal but its not yet stable. This implements the legacy method but\r\n    with a dummy hash value since it requires a sip128 implementation to\r\n    generate the apropriate hash which can be done in a sperate change.\r\n    \r\n    This change allows us to actually assemble generic functions and avoid\r\n    bad symbol duplications.\r\n    \r\n    Addresses #305\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "95c03868e9d05a84000e29187e2e5ccba431cd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95c03868e9d05a84000e29187e2e5ccba431cd35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmsLiCRBK7hj4Ov3rIwAAClcIAKg8+MpwxWxcbUzsfEQY9hg0\nZKngqv871HKenewOHnKCOnvAnW1YQev4NDq4qnBIvE6we5vIqVUZA1etNkmzHeyv\nQwQEaue65wSTJHygOxuzNk9FinQnkIqZ7zWpGhBD8TXh74pWhlS9LiOd4+pRSc+l\nd6nTPQ9W5Zx39Mmf3duIDvGLfY195o7wYnzoNswlsFKB4mPyUX0jt0PfBHmwxSs/\nzIHUCbcaeApodUqdOYNgUycXgSjZRal7N5K7IDrX1LXtw1RISBevBmN228Vv36TB\nQOjzsDFs5fuGhSvJvMLthTSan19clqL3GN7+01KnTzu9TeUtWMS1kCtZ9I58HNk=\n=p1gz\n-----END PGP SIGNATURE-----\n", "payload": "tree 95c03868e9d05a84000e29187e2e5ccba431cd35\nparent 299d98d8e6fcb8d014b299adc426d93cf0c8050f\nparent 58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620755170 +0000\ncommitter GitHub <noreply@github.com> 1620755170 +0000\n\nMerge #425\n\n425: Basic implementation of legacy symbol mangling r=philberty a=philberty\n\n    Implement basic rustc legacy symbol mangling\r\n    \r\n    Rust supports two different symbol mangling methods legacy and V0. V0 is\r\n    the goal but its not yet stable. This implements the legacy method but\r\n    with a dummy hash value since it requires a sip128 implementation to\r\n    generate the apropriate hash which can be done in a sperate change.\r\n    \r\n    This change allows us to actually assemble generic functions and avoid\r\n    bad symbol duplications.\r\n    \r\n    Addresses #305\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299d98d8e6fcb8d014b299adc426d93cf0c8050f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299d98d8e6fcb8d014b299adc426d93cf0c8050f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299d98d8e6fcb8d014b299adc426d93cf0c8050f"}, {"sha": "58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5"}], "stats": {"total": 174, "additions": 140, "deletions": 34}, "files": [{"sha": "7db4ea20d67f54e622f7b66379d847a92f3fab9e", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -258,6 +258,11 @@ class Context\n     return pop;\n   }\n \n+  std::string mangle_item (const std::string &name) const;\n+\n+  std::string mangle_impl_item (const TyTy::BaseType *self,\n+\t\t\t\tconst std::string &name) const;\n+\n private:\n   ::Backend *backend;\n   Resolver::Resolver *resolver;"}, {"sha": "f2caa2e1d3837c94838f1cd1bbc760758ae91cba", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -112,15 +112,17 @@ class CompileInherentImplItem : public HIRCompileBase\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n     unsigned int flags = 0;\n-    std::string fn_identifier\n-      = self->get_name () + \"_\" + function.get_function_name ();\n \n     // if its the main fn or pub visibility mark its as DECL_PUBLIC\n     // please see https://github.com/Rust-GCC/gccrs/pull/137\n     if (function.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string asm_name = fn_identifier;\n+    std::string fn_identifier\n+      = self->get_name () + \"_\" + function.get_function_name ();\n+    std::string asm_name\n+      = ctx->mangle_impl_item (self, function.get_function_name ());\n+\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n@@ -291,15 +293,17 @@ class CompileInherentImplItem : public HIRCompileBase\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n     unsigned int flags = 0;\n-    std::string fn_identifier\n-      = self->get_name () + \"_\" + method.get_method_name ();\n \n     // if its the main fn or pub visibility mark its as DECL_PUBLIC\n     // please see https://github.com/Rust-GCC/gccrs/pull/137\n     if (method.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string asm_name = fn_identifier;\n+    std::string fn_identifier\n+      = self->get_name () + \"_\" + method.get_method_name ();\n+    std::string asm_name\n+      = ctx->mangle_impl_item (self, method.get_method_name ());\n+\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n \t\t\t\t       asm_name, flags, method.get_locus ());"}, {"sha": "5a7d846fd494672cae04848ccd75fae6e3de59ff", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -53,8 +53,7 @@ class CompileItem : public HIRCompileBase\n     Bexpression *value = CompileExpr::Compile (var.get_expr (), ctx);\n \n     std::string name = var.get_identifier ();\n-    // FIXME need name mangling\n-    std::string asm_name = \"__\" + var.get_identifier ();\n+    std::string asm_name = ctx->mangle_item (name);\n \n     bool is_external = false;\n     bool is_hidden = false;\n@@ -147,21 +146,11 @@ class CompileItem : public HIRCompileBase\n \n     std::string ir_symbol_name = function.get_function_name ();\n     std::string asm_name = function.get_function_name ();\n-    if (!is_main_fn)\n-      {\n-\t// FIXME need name mangling\n-\tif (concrete == nullptr)\n-\t  asm_name = \"__\" + function.get_function_name ();\n-\telse\n-\t  {\n-\t    ir_symbol_name\n-\t      = function.get_function_name () + fntype->subst_as_string ();\n \n-\t    asm_name = \"__\" + function.get_function_name ();\n-\t    for (auto &sub : fntype->get_substs ())\n-\t      asm_name += \"G\" + sub.as_string ();\n-\t  }\n-      }\n+    // we don't mangle the main fn since we haven't implemented the main shim\n+    // yet\n+    if (!is_main_fn)\n+      asm_name = ctx->mangle_item (ir_symbol_name);\n \n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,"}, {"sha": "9dd3b57bbe9da47a5c11dc70102ebc86ecebe7a0", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -413,5 +413,73 @@ HIRCompileBase::compile_function_body (\n     }\n }\n \n+// Mr Mangle time\n+\n+static const std::string kMangledSymbolPrefix = \"_ZN\";\n+static const std::string kMangledSymbolDelim = \"E\";\n+static const std::string kMangledGenericDelim = \"$C$\";\n+static const std::string kMangledSubstBegin = \"$LT$\";\n+static const std::string kMangledSubstEnd = \"$GT$\";\n+\n+static std::string\n+mangle_name (const std::string &name)\n+{\n+  return std::to_string (name.size ()) + name;\n+}\n+\n+static std::string\n+dummy_hash ()\n+{\n+  return \"h0123456789abcdef\";\n+}\n+\n+static std::string\n+mangle_self (const TyTy::BaseType *self)\n+{\n+  if (self->get_kind () != TyTy::TypeKind::ADT)\n+    return mangle_name (self->get_name ());\n+\n+  const TyTy::ADTType *s = static_cast<const TyTy::ADTType *> (self);\n+  std::string buf = s->get_identifier ();\n+\n+  if (s->has_subsititions_defined ())\n+    {\n+      buf += kMangledSubstBegin;\n+\n+      const std::vector<TyTy::SubstitutionParamMapping> &params\n+\t= s->get_substs ();\n+      for (size_t i = 0; i < params.size (); i++)\n+\t{\n+\t  const TyTy::SubstitutionParamMapping &sub = params.at (i);\n+\t  buf += sub.as_string ();\n+\n+\t  if ((i + 1) < params.size ())\n+\t    buf += kMangledGenericDelim;\n+\t}\n+\n+      buf += kMangledSubstEnd;\n+    }\n+\n+  return mangle_name (buf);\n+}\n+\n+std::string\n+Context::mangle_item (const std::string &name) const\n+{\n+  const std::string &crate_name = mappings->get_current_crate_name ();\n+  return kMangledSymbolPrefix + mangle_name (crate_name) + mangle_name (name)\n+\t + mangle_name (dummy_hash ()) + kMangledSymbolDelim;\n+}\n+\n+std::string\n+Context::mangle_impl_item (const TyTy::BaseType *self,\n+\t\t\t   const std::string &name) const\n+{\n+  const std::string &crate_name = mappings->get_current_crate_name ();\n+  return kMangledSymbolPrefix + mangle_name (crate_name) + mangle_self (self)\n+\t + mangle_name (name) + mangle_name (dummy_hash ())\n+\t + kMangledSymbolDelim;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "5e9746fc7269246659626ae62a36f6a7e1defcb3", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -70,6 +70,10 @@ const char *kHIRDumpFile = \"gccrs.hir.dump\";\n const char *kHIRTypeResolutionDumpFile = \"gccrs.type-resolution.dump\";\n const char *kTargetOptionsDumpFile = \"gccrs.target-options.dump\";\n \n+// FIME in the imports/visibility milestone - this needs to be command line\n+// option\n+const std::string kDefaultCrateName = \"TestCrate\";\n+\n // Implicitly enable a target_feature (and recursively enable dependencies).\n void\n Session::implicitly_enable_feature (std::string feature_name)\n@@ -445,6 +449,10 @@ Session::enable_dump (std::string arg)\n void\n Session::parse_files (int num_files, const char **files)\n {\n+  auto mappings = Analysis::Mappings::get ();\n+  CrateNum crate_num = mappings->setup_crate_mappings (kDefaultCrateName);\n+  mappings->set_current_crate (crate_num);\n+\n   for (int i = 0; i < num_files; i++)\n     {\n       printf (\"Attempting to parse file: %s\\n\", files[i]);"}, {"sha": "aa709ecf21e1f060f90d097ce901f7b7a35aba90", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -618,6 +618,11 @@ class SubstitutionRef\n \n   std::vector<SubstitutionParamMapping> &get_substs () { return substitutions; }\n \n+  const std::vector<SubstitutionParamMapping> &get_substs () const\n+  {\n+    return substitutions;\n+  }\n+\n   std::vector<SubstitutionParamMapping> clone_substs ()\n   {\n     std::vector<SubstitutionParamMapping> clone;"}, {"sha": "3a0cbb10ec1686461aa11e853caa49288c26266c", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -107,7 +107,7 @@ Mappings::get ()\n {\n   static std::unique_ptr<Mappings> instance;\n   if (!instance)\n-    instance = std::move (std::unique_ptr<Mappings> (new Mappings ()));\n+    instance = std::unique_ptr<Mappings> (new Mappings ());\n \n   return instance.get ();\n }\n@@ -125,18 +125,23 @@ Mappings::set_current_crate (CrateNum crateNum)\n }\n \n CrateNum\n-Mappings::get_current_crate ()\n+Mappings::setup_crate_mappings (std::string crate_name)\n {\n-  // HACK\n-  if (hirIdIter.find (currentCrateNum) == hirIdIter.end ())\n-    {\n-      hirIdIter[currentCrateNum] = UNKNOWN_HIRID;\n-      nodeIdIter[currentCrateNum] = UNKNOWN_NODEID;\n-      localIdIter[currentCrateNum] = UNKNOWN_LOCAL_DEFID;\n-      nodeIdToHirMappings[currentCrateNum] = {};\n-      locations[currentCrateNum] = {};\n-    }\n+  CrateNum crate_num = get_next_crate_num ();\n \n+  hirIdIter[crate_num] = UNKNOWN_HIRID;\n+  nodeIdIter[crate_num] = UNKNOWN_NODEID;\n+  localIdIter[crate_num] = UNKNOWN_LOCAL_DEFID;\n+  nodeIdToHirMappings[crate_num] = {};\n+  locations[crate_num] = {};\n+  crate_names[crate_num] = crate_name;\n+\n+  return crate_num;\n+}\n+\n+CrateNum\n+Mappings::get_current_crate () const\n+{\n   return currentCrateNum;\n }\n "}, {"sha": "a198be6db9359ab0f5083c3763e5afd5651cb349", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=5134aaa9f0b37ea372cb185fe7aa6c26fe0a4c2e", "patch": "@@ -83,7 +83,26 @@ class Mappings\n \n   CrateNum get_next_crate_num ();\n   void set_current_crate (CrateNum crateNum);\n-  CrateNum get_current_crate ();\n+  CrateNum get_current_crate () const;\n+  CrateNum setup_crate_mappings (std::string crate_name);\n+\n+  bool get_crate_name (CrateNum crate_num, std::string &name) const\n+  {\n+    auto it = crate_names.find (crate_num);\n+    if (it == crate_names.end ())\n+      return false;\n+\n+    name.assign (it->second);\n+    return true;\n+  }\n+\n+  std::string get_current_crate_name () const\n+  {\n+    std::string name;\n+    bool ok = get_crate_name (get_current_crate (), name);\n+    rust_assert (ok);\n+    return name;\n+  }\n \n   NodeId get_next_node_id () { return get_next_node_id (get_current_crate ()); }\n   NodeId get_next_node_id (CrateNum crateNum);\n@@ -212,6 +231,9 @@ class Mappings\n \n   // all hirid nodes\n   std::map<CrateNum, std::set<HirId> > hirNodesWithinCrate;\n+\n+  // crate names\n+  std::map<CrateNum, std::string> crate_names;\n };\n \n } // namespace Analysis"}]}