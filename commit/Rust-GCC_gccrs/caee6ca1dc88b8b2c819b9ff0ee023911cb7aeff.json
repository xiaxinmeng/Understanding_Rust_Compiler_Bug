{"sha": "caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FlZTZjYTFkYzg4YjhiMmM4MTliOWZmMGVlMDIzOTExY2I3YWVmZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-01-04T18:25:14Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-01-04T18:25:14Z"}, "message": "re PR tree-optimization/42398 (internal compiler error: in sra_modify_expr, at tree-sra.c:2175)\n\n2010-01-04  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/42398\n\t* tree-sra.c (struct access): Removed flag grp_different_types.\n\t(dump_access): Do not dump the removed flag.\n\t(sort_and_splice_var_accesses): Do not set the removed flag.\n\t(sra_modify_expr): Check for type compatibility directly.\n\n\t* testsuite/gcc.c-torture/compile/pr42398.c: New test.\n\nFrom-SVN: r155631", "tree": {"sha": "2bd5e799a71fd4bad1be6baf56c1c08859e98e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd5e799a71fd4bad1be6baf56c1c08859e98e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "438789ffe3864516f7b30b532894b2e64f016165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438789ffe3864516f7b30b532894b2e64f016165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438789ffe3864516f7b30b532894b2e64f016165"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "e622c8f35129c21c51945200efc4ff40e07b7a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "patch": "@@ -1,3 +1,11 @@\n+2010-01-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42398\n+\t* tree-sra.c (struct access): Removed flag grp_different_types.\n+\t(dump_access): Do not dump the removed flag.\n+\t(sort_and_splice_var_accesses): Do not set the removed flag.\n+\t(sra_modify_expr): Check for type compatibility directly.\n+\n 2010-01-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/42366"}, {"sha": "603f62977350ad37802ab01118dd7ca234c423d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "patch": "@@ -1,3 +1,8 @@\n+2010-01-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42398\n+\t* gcc.c-torture/compile/pr42398.c: New test.\n+\n 2010-01-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42555"}, {"sha": "a33bebf7929debdf05d2073485d7c692d9fe8d9c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr42398.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42398.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42398.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42398.c?ref=caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "patch": "@@ -0,0 +1,6 @@\n+int ptrace_setregs(void)\n+{\n+  union { unsigned int l; int t; } __gu_tmp;\n+  __asm__ __volatile__(\"\" : \"=r\" (__gu_tmp.l));\n+  return __gu_tmp.t;\n+}"}, {"sha": "f45169277e7608a8b23c5c2154bfbd67103bf07a", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=caee6ca1dc88b8b2c819b9ff0ee023911cb7aeff", "patch": "@@ -199,10 +199,6 @@ struct access\n      BIT_FIELD_REF?  */\n   unsigned grp_partial_lhs : 1;\n \n-  /* Does this group contain accesses to different types? (I.e. through a union\n-     or a similar mechanism).  */\n-  unsigned grp_different_types : 1;\n-\n   /* Set when a scalar replacement should be created for this variable.  We do\n      the decision and creation at different places because create_tmp_var\n      cannot be called from within FOR_EACH_REFERENCED_VAR. */\n@@ -343,14 +339,12 @@ dump_access (FILE *f, struct access *access, bool grp)\n     fprintf (f, \", grp_write = %d, grp_read = %d, grp_hint = %d, \"\n \t     \"grp_covered = %d, grp_unscalarizable_region = %d, \"\n \t     \"grp_unscalarized_data = %d, grp_partial_lhs = %d, \"\n-\t     \"grp_different_types = %d, grp_to_be_replaced = %d, \"\n-\t     \"grp_maybe_modified = %d, \"\n+\t     \"grp_to_be_replaced = %d, grp_maybe_modified = %d, \"\n \t     \"grp_not_necessarilly_dereferenced = %d\\n\",\n \t     access->grp_write, access->grp_read, access->grp_hint,\n \t     access->grp_covered, access->grp_unscalarizable_region,\n \t     access->grp_unscalarized_data, access->grp_partial_lhs,\n-\t     access->grp_different_types, access->grp_to_be_replaced,\n-\t     access->grp_maybe_modified,\n+\t     access->grp_to_be_replaced, access->grp_maybe_modified,\n \t     access->grp_not_necessarilly_dereferenced);\n   else\n     fprintf (f, \", write = %d, grp_partial_lhs = %d\\n\", access->write,\n@@ -1434,7 +1428,6 @@ sort_and_splice_var_accesses (tree var)\n       bool grp_read = !access->write;\n       bool multiple_reads = false;\n       bool grp_partial_lhs = access->grp_partial_lhs;\n-      bool grp_different_types = false;\n       bool first_scalar = is_gimple_reg_type (access->type);\n       bool unscalarizable_region = access->grp_unscalarizable_region;\n \n@@ -1466,7 +1459,6 @@ sort_and_splice_var_accesses (tree var)\n \t\tgrp_read = true;\n \t    }\n \t  grp_partial_lhs |= ac2->grp_partial_lhs;\n-\t  grp_different_types |= !types_compatible_p (access->type, ac2->type);\n \t  unscalarizable_region |= ac2->grp_unscalarizable_region;\n \t  relink_to_new_repr (access, ac2);\n \n@@ -1485,7 +1477,6 @@ sort_and_splice_var_accesses (tree var)\n       access->grp_read = grp_read;\n       access->grp_hint = multiple_reads;\n       access->grp_partial_lhs = grp_partial_lhs;\n-      access->grp_different_types = grp_different_types;\n       access->grp_unscalarizable_region = unscalarizable_region;\n       if (access->first_link)\n \tadd_access_to_work_queue (access);\n@@ -2141,11 +2132,9 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write,\n \n          We also want to use this when accessing a complex or vector which can\n          be accessed as a different type too, potentially creating a need for\n-         type conversion  (see PR42196).  */\n-      if (!is_gimple_reg_type (type)\n-\t  || (access->grp_different_types\n-\t      && (TREE_CODE (type) == COMPLEX_TYPE\n-\t\t  || TREE_CODE (type) == VECTOR_TYPE)))\n+         type conversion (see PR42196) and when scalarized unions are involved\n+         in assembler statements (see PR42398).  */\n+      if (!useless_type_conversion_p (type, access->type))\n \t{\n \t  tree ref = access->base;\n \t  bool ok;\n@@ -2176,10 +2165,7 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write,\n \t    }\n \t}\n       else\n-\t{\n-\t  gcc_assert (useless_type_conversion_p (type, access->type));\n-\t  *expr = repl;\n-\t}\n+\t*expr = repl;\n       sra_stats.exprs++;\n     }\n "}]}