{"sha": "209ee62421fdeb177bdac29e670bc9b930bef4a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5ZWU2MjQyMWZkZWIxNzdiZGFjMjllNjcwYmM5YjkzMGJlZjRhMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-06T12:13:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-06T12:13:47Z"}, "message": "Remove redundant static assertions in [meta.unary.prop] traits\n\nThe type property predicates that are implemented by a compiler builtin\nalready do the right checks in the compiler. The checks for complete\ntype or unbounded arrays were wrong for these types anyway.\n\n\t* include/std/type_traits (is_empty, is_polymorphic, is_final)\n\t(is_abstract, is_aggregate): Remove static_assert.\n\t* testsuite/20_util/is_abstract/incomplete_neg.cc: Check for error\n\tfrom builtin only.\n\t* testsuite/20_util/is_aggregate/incomplete_neg.cc: Likewise. Add\n\tmissing -std=gnu++17 option.\n\t* testsuite/20_util/is_empty/incomplete_neg.cc: New test.\n\t* testsuite/20_util/is_final/incomplete_neg.cc: New test.\n\t* testsuite/20_util/is_polymorphic/incomplete_neg.cc: Check for error\n\tfrom builtin only.\n\nFrom-SVN: r272000", "tree": {"sha": "a96dc1ea03015db9f91d556938797031d7cef0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a96dc1ea03015db9f91d556938797031d7cef0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/209ee62421fdeb177bdac29e670bc9b930bef4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209ee62421fdeb177bdac29e670bc9b930bef4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209ee62421fdeb177bdac29e670bc9b930bef4a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209ee62421fdeb177bdac29e670bc9b930bef4a3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061a745005d69e44d6ff50e3ee7fd5b21194c6ac"}], "stats": {"total": 116, "additions": 88, "deletions": 28}, "files": [{"sha": "3dd82b637ff6c5b7fcb26f34ce0b8164aa0195a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,5 +1,16 @@\n 2019-06-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/type_traits (is_empty, is_polymorphic, is_final)\n+\t(is_abstract, is_aggregate): Remove static_assert.\n+\t* testsuite/20_util/is_abstract/incomplete_neg.cc: Check for error\n+\tfrom builtin only.\n+\t* testsuite/20_util/is_aggregate/incomplete_neg.cc: Likewise. Add\n+\tmissing -std=gnu++17 option.\n+\t* testsuite/20_util/is_empty/incomplete_neg.cc: New test.\n+\t* testsuite/20_util/is_final/incomplete_neg.cc: New test.\n+\t* testsuite/20_util/is_polymorphic/incomplete_neg.cc: Check for error\n+\tfrom builtin only.\n+\n \t* testsuite/18_support/set_terminate.cc: Do not run for C++98 mode.\n \t* testsuite/18_support/set_unexpected.cc: Likewise.\n \t* testsuite/20_util/is_nothrow_invocable/value.cc: Test converting to"}, {"sha": "e53d3c8d53543ab0762e5f83ad3af3720ea66655", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -746,40 +746,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct is_empty\n     : public integral_constant<bool, __is_empty(_Tp)>\n-    {\n-      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n-\t\"template argument must be a complete class or an unbounded array\");\n-    };\n+    { };\n \n   /// is_polymorphic\n   template<typename _Tp>\n     struct is_polymorphic\n     : public integral_constant<bool, __is_polymorphic(_Tp)>\n-    {\n-      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n-\t\"template argument must be a complete class or an unbounded array\");\n-    };\n+    { };\n \n #if __cplusplus >= 201402L\n #define __cpp_lib_is_final 201402L\n   /// is_final\n   template<typename _Tp>\n     struct is_final\n     : public integral_constant<bool, __is_final(_Tp)>\n-    {\n-      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n-\t\"template argument must be a complete class or an unbounded array\");\n-    };\n+    { };\n #endif\n \n   /// is_abstract\n   template<typename _Tp>\n     struct is_abstract\n     : public integral_constant<bool, __is_abstract(_Tp)>\n-    {\n-      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n-\t\"template argument must be a complete class or an unbounded array\");\n-    };\n+    { };\n \n   template<typename _Tp,\n \t   bool = is_arithmetic<_Tp>::value>\n@@ -3174,10 +3162,7 @@ template <typename _From, typename _To>\n   template<typename _Tp>\n     struct is_aggregate\n     : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>\n-    {\n-      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n-\t\"template argument must be a complete class or an unbounded array\");\n-    };\n+    { };\n \n   /// is_aggregate_v\n   template<typename _Tp>"}, {"sha": "a2a73d01a066ab1e91e2fed1cf4683398cc643fe", "filename": "libstdc++-v3/testsuite/20_util/is_abstract/incomplete_neg.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_abstract%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_abstract%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_abstract%2Fincomplete_neg.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,7 +1,5 @@\n // { dg-do compile { target c++11 } }\n-// { dg-prune-output \"invalid use of incomplete type\" }\n-// { dg-prune-output \"must be a complete\" }\n-//\n+\n // Copyright (C) 2019 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -19,6 +17,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// Expect the compiler builtin to do the completeness check.\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n+\n #include <type_traits>\n \n class X;"}, {"sha": "eff3f64c476022f350747c1251eb950f2ace8e8a", "filename": "libstdc++-v3/testsuite/20_util/is_aggregate/incomplete_neg.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Fincomplete_neg.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,5 +1,6 @@\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile { target c++17 } }\n-//\n+\n // Copyright (C) 2019 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -17,7 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+// Expect the compiler builtin to do the completeness check.\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n \n #include <type_traits>\n "}, {"sha": "3bacefbab7e68a072a554888a5be7bb7853f3e46", "filename": "libstdc++-v3/testsuite/20_util/is_empty/incomplete_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_empty%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_empty%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_empty%2Fincomplete_neg.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Expect the compiler builtin to do the completeness check.\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_empty<X>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "0727c090a83c9fbe3f085afe9fc1792734533fb9", "filename": "libstdc++-v3/testsuite/20_util/is_final/incomplete_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_final%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_final%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_final%2Fincomplete_neg.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++14 } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Expect the compiler builtin to do the completeness check.\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_final<X>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "618c4fa7a9a1b99f11b1d51a2849eb3a082bb000", "filename": "libstdc++-v3/testsuite/20_util/is_polymorphic/incomplete_neg.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_polymorphic%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_polymorphic%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_polymorphic%2Fincomplete_neg.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,7 +1,5 @@\n // { dg-do compile { target c++11 } }\n-// { dg-prune-output \"invalid use of incomplete type\" }\n-// { dg-prune-output \"must be a complete\" }\n-//\n+\n // Copyright (C) 2019 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -19,6 +17,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// Expect the compiler builtin to do the completeness check.\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n+\n #include <type_traits>\n \n class X;"}]}