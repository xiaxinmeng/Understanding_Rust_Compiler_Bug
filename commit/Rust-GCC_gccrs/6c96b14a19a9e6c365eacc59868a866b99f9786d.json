{"sha": "6c96b14a19a9e6c365eacc59868a866b99f9786d", "node_id": "C_kwDOANBUbNoAKDZjOTZiMTRhMTlhOWU2YzM2NWVhY2M1OTg2OGE4NjZiOTlmOTc4NmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-28T14:56:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-30T13:16:06Z"}, "message": "libstdc++: Fix experimental::filesystem::status on Windows [PR88881]\n\nAlthough the Filesystem TS isn't properly supported on Windows (unlike\nthe C++17 Filesystem lib), most tests do pass. Two of the failures are\ndue to PR 88881 which was only fixed for std::filesystem not the TS.\nThis applies the fix to the TS implementation too.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/88881\n\t* src/filesystem/ops.cc (has_trailing_slash): New helper\n\tfunction.\n\t(fs::status): Strip trailing slashes.\n\t(fs::symlink_status): Likewise.\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tClean the environment before each test and use TMP instead of\n\tTMPDIR so the test passes on Windows.", "tree": {"sha": "7d80b214df5310faec35fc1ca6d14c0c2504e2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d80b214df5310faec35fc1ca6d14c0c2504e2f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c96b14a19a9e6c365eacc59868a866b99f9786d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c96b14a19a9e6c365eacc59868a866b99f9786d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c96b14a19a9e6c365eacc59868a866b99f9786d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c96b14a19a9e6c365eacc59868a866b99f9786d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa22c9c7a979655efaff888138107324afc510c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa22c9c7a979655efaff888138107324afc510c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa22c9c7a979655efaff888138107324afc510c5"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "896a4918ace86b75633404f3808caecc5f03a0b4", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c96b14a19a9e6c365eacc59868a866b99f9786d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c96b14a19a9e6c365eacc59868a866b99f9786d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=6c96b14a19a9e6c365eacc59868a866b99f9786d", "patch": "@@ -1176,13 +1176,43 @@ fs::space(const path& p, error_code& ec) noexcept\n   return info;\n }\n \n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+static bool has_trailing_slash(const fs::path& p)\n+{\n+  wchar_t c = p.native().back();\n+  return c == '/' || c == L'\\\\';\n+}\n+#endif\n+\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n fs::file_status\n fs::status(const fs::path& p, error_code& ec) noexcept\n {\n   file_status status;\n+\n+  auto str = p.c_str();\n+\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  // stat() fails if there's a trailing slash (PR 88881)\n+  path p2;\n+  if (p.has_relative_path() && has_trailing_slash(p))\n+    {\n+      __try\n+\t{\n+\t  p2 = p.parent_path();\n+\t  str = p2.c_str();\n+\t}\n+      __catch(const bad_alloc&)\n+\t{\n+\t  ec = std::make_error_code(std::errc::not_enough_memory);\n+\t  return status;\n+\t}\n+      str = p2.c_str();\n+    }\n+#endif\n+\n   stat_type st;\n-  if (posix::stat(p.c_str(), &st))\n+  if (posix::stat(str, &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());\n@@ -1205,8 +1235,30 @@ fs::file_status\n fs::symlink_status(const fs::path& p, std::error_code& ec) noexcept\n {\n   file_status status;\n+\n+  auto str = p.c_str();\n+\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  // stat() fails if there's a trailing slash (PR 88881)\n+  path p2;\n+  if (p.has_relative_path() && has_trailing_slash(p))\n+    {\n+      __try\n+\t{\n+\t  p2 = p.parent_path();\n+\t  str = p2.c_str();\n+\t}\n+      __catch(const bad_alloc&)\n+\t{\n+\t  ec = std::make_error_code(std::errc::not_enough_memory);\n+\t  return status;\n+\t}\n+      str = p2.c_str();\n+    }\n+#endif\n+\n   stat_type st;\n-  if (posix::lstat(p.c_str(), &st))\n+  if (posix::lstat(str, &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());"}, {"sha": "c2945c908663301211cc3cad7ba6b2e1008d4a40", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c96b14a19a9e6c365eacc59868a866b99f9786d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c96b14a19a9e6c365eacc59868a866b99f9786d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=6c96b14a19a9e6c365eacc59868a866b99f9786d", "patch": "@@ -105,6 +105,8 @@ test03()\n   if (!__gnu_test::permissions_are_testable())\n     return;\n \n+  clean_env();\n+\n   auto p = __gnu_test::nonexistent_path();\n   create_directories(p/\"tmp\");\n   permissions(p, fs::perms::none);\n@@ -129,8 +131,10 @@ test03()\n void\n test04()\n {\n+  clean_env();\n+\n   __gnu_test::scoped_file f;\n-  set_env(\"TMPDIR\", f.path.string());\n+  set_env(\"TMP\", f.path.string());\n   std::error_code ec;\n   auto r = fs::temp_directory_path(ec);\n   VERIFY( ec == std::make_error_code(std::errc::not_a_directory) );"}]}