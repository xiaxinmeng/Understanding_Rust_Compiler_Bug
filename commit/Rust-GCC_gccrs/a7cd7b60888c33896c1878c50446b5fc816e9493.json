{"sha": "a7cd7b60888c33896c1878c50446b5fc816e9493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdjZDdiNjA4ODhjMzM4OTZjMTg3OGM1MDQ0NmI1ZmM4MTZlOTQ5Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-21T10:47:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-21T10:47:37Z"}, "message": "tuple (__conv_types, [...]): Remove.\n\n2011-11-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (__conv_types, __one_by_one_convertible,\n\t__all_convertible): Remove.\n\t(tuple<>::tuple(_UElements&&...),\n\ttuple<>::tuple(const tuple<_UElements...>&),\n\ttuple<>::tuple(tuple<_UElements...>&&)): Remove wa for c++/48322.\n\nFrom-SVN: r181555", "tree": {"sha": "93d8d398d8d09efcd9f1f8a24bd57e5d7f5b95ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93d8d398d8d09efcd9f1f8a24bd57e5d7f5b95ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7cd7b60888c33896c1878c50446b5fc816e9493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cd7b60888c33896c1878c50446b5fc816e9493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7cd7b60888c33896c1878c50446b5fc816e9493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cd7b60888c33896c1878c50446b5fc816e9493/comments", "author": null, "committer": null, "parents": [{"sha": "5436efaa0f3e0893c3aebd2b373d37f9a7a654f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5436efaa0f3e0893c3aebd2b373d37f9a7a654f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5436efaa0f3e0893c3aebd2b373d37f9a7a654f8"}], "stats": {"total": 63, "additions": 16, "deletions": 47}, "files": [{"sha": "5d5fc1d7fc525c2a759edddbff68571f541f943f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cd7b60888c33896c1878c50446b5fc816e9493/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cd7b60888c33896c1878c50446b5fc816e9493/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a7cd7b60888c33896c1878c50446b5fc816e9493", "patch": "@@ -1,3 +1,11 @@\n+2011-11-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (__conv_types, __one_by_one_convertible,\n+\t__all_convertible): Remove.\n+\t(tuple<>::tuple(_UElements&&...),\n+\ttuple<>::tuple(const tuple<_UElements...>&),\n+\ttuple<>::tuple(tuple<_UElements...>&&)): Remove wa for c++/48322.\n+\n 2011-11-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48322"}, {"sha": "282d4509d3af9b599817cdb4ae1b69e745f66f03", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cd7b60888c33896c1878c50446b5fc816e9493/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cd7b60888c33896c1878c50446b5fc816e9493/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a7cd7b60888c33896c1878c50446b5fc816e9493", "patch": "@@ -69,35 +69,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __add_r_ref<_Tp&>\n     { typedef _Tp& type; };\n \n-  // To work around c++/49225 aka c++/48322.\n-  template<typename...>\n-    struct __conv_types { };\n-\n-  template<typename _Tuple1, typename _Tuple2>\n-    struct __one_by_one_convertible\n-    : public false_type { };\n-\n-  template<typename _Tp, typename _Up>\n-    struct __one_by_one_convertible<__conv_types<_Tp>, __conv_types<_Up>>\n-    : public is_convertible<_Tp, _Up>::type { };\n-\n-  template<typename _T1, typename... _TR, typename _U1, typename... _UR>\n-    struct __one_by_one_convertible<__conv_types<_T1, _TR...>,\n-                                    __conv_types<_U1, _UR...>>\n-    : public __and_<is_convertible<_T1, _U1>,\n-                    __one_by_one_convertible<__conv_types<_TR...>,\n-                                             __conv_types<_UR...>>>::type\n-    { };\n-\n-  template<typename _Tuple1, typename _Tuple2>\n-    struct __all_convertible;\n-\n-  template<typename... _TTypes, typename... _UTypes>\n-    struct __all_convertible<__conv_types<_TTypes...>,\n-                             __conv_types<_UTypes...>>\n-    : public __one_by_one_convertible<__conv_types<_TTypes...>,\n-                                      __conv_types<_UTypes...>>::type { };\n-\n   template<std::size_t _Idx, typename _Head, bool _IsEmpty>\n     struct _Head_base;\n \n@@ -407,13 +378,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr tuple(const _Elements&... __elements)\n       : _Inherited(__elements...) { }\n \n-      template<typename... _UElements,\n-\t       typename = typename enable_if<sizeof...(_UElements)\n-\t\t\t\t\t     == sizeof...(_Elements)>::type,\n-\t       typename = typename\n-\t         enable_if<__all_convertible<__conv_types<_UElements...>,\n-\t\t\t\t\t     __conv_types<_Elements...> >::value\n-\t\t\t   >::type>\n+      template<typename... _UElements, typename = typename\n+        enable_if<__and_<is_convertible<_UElements,\n+\t\t\t\t\t_Elements>...>::value>::type>\n \texplicit\n         constexpr tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n@@ -423,21 +390,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr tuple(tuple&&) = default; \n \n       template<typename... _UElements, typename = typename\n-\tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n-\t\t\t\t\t   == sizeof...(_Elements)>,\n-\t\t\t __all_convertible<__conv_types<const _UElements&...>,\n-\t\t\t\t\t   __conv_types<_Elements...>>\n-                         >::value>::type>\n+        enable_if<__and_<is_convertible<const _UElements&,\n+\t\t\t\t\t_Elements>...>::value>::type>\n         constexpr tuple(const tuple<_UElements...>& __in)\n         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n         { }\n \n       template<typename... _UElements, typename = typename\n-\tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n-\t\t\t\t\t   == sizeof...(_Elements)>,\n-\t\t\t __all_convertible<__conv_types<_UElements...>,\n-\t\t\t\t\t   __conv_types<_Elements...>>\n-\t\t\t >::value>::type>\n+        enable_if<__and_<is_convertible<_UElements,\n+\t\t\t\t\t_Elements>...>::value>::type>\n         constexpr tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n "}, {"sha": "73a0d0f702974a33e769b48839bf1f74015a75a3", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cd7b60888c33896c1878c50446b5fc816e9493/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cd7b60888c33896c1878c50446b5fc816e9493/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=a7cd7b60888c33896c1878c50446b5fc816e9493", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"no matching function\" \"\" { target *-*-* } 141 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 112 }"}]}