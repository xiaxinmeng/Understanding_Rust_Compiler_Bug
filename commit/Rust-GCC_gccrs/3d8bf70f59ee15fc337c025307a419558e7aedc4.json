{"sha": "3d8bf70f59ee15fc337c025307a419558e7aedc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4YmY3MGY1OWVlMTVmYzMzN2MwMjUzMDdhNDE5NTU4ZTdhZWRjNA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2005-11-21T20:53:27Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2005-11-21T20:53:27Z"}, "message": "optabs.c (expand_abs_nojump): Use SCALAR_FLOAT_MODE_P instead of explicitly testing GET_MODE_CLASS (x) ==...\n\n\t* optabs.c (expand_abs_nojump): Use SCALAR_FLOAT_MODE_P instead of\n\texplicitly testing GET_MODE_CLASS (x) == MODE_FLOAT.\n\t* genopinit.c (gen_insn): Likewise.\n\t* reload.c (find_equiv_reg): Likewise.\n\t* loop.c (load_mems): Likewise.\n\t* rtlanal.c (may_trap_p_1, canonicalize_condition): Likewise.\n\t* cse.c (find_comparison_args, fold_rtx): Likewise.\n\t* dwarf2out.c (add_const_value_attribute): Likewise.\n\t* expr.c (convert_move): Likewise.\n\t* recog.c (general_operand, register_operand): Likewise.\n\t* reg-stack.c (replace_reg): Likewise.\n\t* tree-vect-generic.c (type_for_widest_vector_mode): Likewise.\n\t* c-common.c (handle_vector_size_attribute): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n\t(simplify_binary_operation_1): Likewise.\n\t(simplify_const_binary_operation): Likewise.\n\t(simplify_relational_operation): Likewise.\n\t(simplify_const_relational_operation): Likewise.\n\t(simplify_immed_subreg): Likewise.\n\t* emit-rtl.c (gen_lowpart_common): Likewise.\n\t* expmed.c (expand_mult): Likewise.\n\t* stor-layout.c (layout_type): Likewise.\n\nFrom-SVN: r107322", "tree": {"sha": "b1c6ffb314a145e36beb4e77266fa8a7e304a015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c6ffb314a145e36beb4e77266fa8a7e304a015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8bf70f59ee15fc337c025307a419558e7aedc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8bf70f59ee15fc337c025307a419558e7aedc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8bf70f59ee15fc337c025307a419558e7aedc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8bf70f59ee15fc337c025307a419558e7aedc4/comments", "author": null, "committer": null, "parents": [{"sha": "9cfda6fa545e5be0b860644df1b4579f168ec26f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfda6fa545e5be0b860644df1b4579f168ec26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfda6fa545e5be0b860644df1b4579f168ec26f"}], "stats": {"total": 97, "additions": 60, "deletions": 37}, "files": [{"sha": "528e7a86638434be025b63ca3a7516d43e4daf85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -1,3 +1,28 @@\n+2005-11-22  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* optabs.c (expand_abs_nojump): Use SCALAR_FLOAT_MODE_P instead of\n+\texplicitly testing GET_MODE_CLASS (x) == MODE_FLOAT.\n+\t* genopinit.c (gen_insn): Likewise.\n+\t* reload.c (find_equiv_reg): Likewise.\n+\t* loop.c (load_mems): Likewise.\n+\t* rtlanal.c (may_trap_p_1, canonicalize_condition): Likewise.\n+\t* cse.c (find_comparison_args, fold_rtx): Likewise.\n+\t* dwarf2out.c (add_const_value_attribute): Likewise.\n+\t* expr.c (convert_move): Likewise.\n+\t* recog.c (general_operand, register_operand): Likewise.\n+\t* reg-stack.c (replace_reg): Likewise.\n+\t* tree-vect-generic.c (type_for_widest_vector_mode): Likewise.\n+\t* c-common.c (handle_vector_size_attribute): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n+\t(simplify_binary_operation_1): Likewise.\n+\t(simplify_const_binary_operation): Likewise.\n+\t(simplify_relational_operation): Likewise.\n+\t(simplify_const_relational_operation): Likewise.\n+\t(simplify_immed_subreg): Likewise.\n+\t* emit-rtl.c (gen_lowpart_common): Likewise.\n+\t* expmed.c (expand_mult): Likewise.\n+\t* stor-layout.c (layout_type): Likewise.\n+\n 2005-11-21  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/24951"}, {"sha": "bdaa9ccd460638297f95e1fee7f15a9f070ed4c8", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -5164,7 +5164,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n   orig_mode = TYPE_MODE (type);\n \n   if (TREE_CODE (type) == RECORD_TYPE\n-      || (GET_MODE_CLASS (orig_mode) != MODE_FLOAT\n+      || (!SCALAR_FLOAT_MODE_P (orig_mode)\n \t  && GET_MODE_CLASS (orig_mode) != MODE_INT)\n       || !host_integerp (TYPE_SIZE_UNIT (type), 1))\n     {"}, {"sha": "8ec610f48255bc28bed9209ea5e33b509b0a3ed4", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -3088,7 +3088,7 @@ find_comparison_args (enum rtx_code code, rtx *parg1, rtx *parg2,\n \t      || (GET_MODE_CLASS (GET_MODE (arg1)) == MODE_INT\n \t\t  && code == LT && STORE_FLAG_VALUE == -1)\n #ifdef FLOAT_STORE_FLAG_VALUE\n-\t      || (GET_MODE_CLASS (GET_MODE (arg1)) == MODE_FLOAT\n+\t      || (SCALAR_FLOAT_MODE_P (arg1)\n \t\t  && (fsfv = FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)),\n \t\t      REAL_VALUE_NEGATIVE (fsfv)))\n #endif\n@@ -3098,7 +3098,7 @@ find_comparison_args (enum rtx_code code, rtx *parg1, rtx *parg2,\n \t\t   || (GET_MODE_CLASS (GET_MODE (arg1)) == MODE_INT\n \t\t       && code == GE && STORE_FLAG_VALUE == -1)\n #ifdef FLOAT_STORE_FLAG_VALUE\n-\t\t   || (GET_MODE_CLASS (GET_MODE (arg1)) == MODE_FLOAT\n+\t\t   || (SCALAR_FLOAT_MODE_P (arg1)\n \t\t       && (fsfv = FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)),\n \t\t\t   REAL_VALUE_NEGATIVE (fsfv)))\n #endif\n@@ -3161,7 +3161,7 @@ find_comparison_args (enum rtx_code code, rtx *parg1, rtx *parg2,\n \t\t\t      << (GET_MODE_BITSIZE (inner_mode) - 1))))\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t   || (code == LT\n-\t\t       && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n+\t\t       && SCALAR_FLOAT_MODE_P (inner_mode)\n \t\t       && (fsfv = FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)),\n \t\t\t   REAL_VALUE_NEGATIVE (fsfv)))\n #endif\n@@ -3181,7 +3181,7 @@ find_comparison_args (enum rtx_code code, rtx *parg1, rtx *parg2,\n \t\t\t       << (GET_MODE_BITSIZE (inner_mode) - 1))))\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t    || (code == GE\n-\t\t\t&& GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n+\t\t\t&& SCALAR_FLOAT_MODE_P (inner_mode)\n \t\t\t&& (fsfv = FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)),\n \t\t\t    REAL_VALUE_NEGATIVE (fsfv)))\n #endif\n@@ -3946,7 +3946,7 @@ fold_rtx (rtx x, rtx insn)\n \t  enum machine_mode mode_arg1;\n \n #ifdef FLOAT_STORE_FLAG_VALUE\n-\t  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\t  if (SCALAR_FLOAT_MODE (mode))\n \t    {\n \t      true_rtx = (CONST_DOUBLE_FROM_REAL_VALUE\n \t\t\t  (FLOAT_STORE_FLAG_VALUE (mode), mode));\n@@ -4061,7 +4061,7 @@ fold_rtx (rtx x, rtx insn)\n \t      rtx true_rtx = const_true_rtx, false_rtx = const0_rtx;\n \n #ifdef FLOAT_STORE_FLAG_VALUE\n-\t      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\t      if (SCALAR_FLOAT_MODE_P (mode))\n \t\t{\n \t\t  true_rtx = (CONST_DOUBLE_FROM_REAL_VALUE\n \t\t\t  (FLOAT_STORE_FLAG_VALUE (mode), mode));"}, {"sha": "803898e03ed35209692a2c39d443c9aa233e844b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -9787,7 +9787,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       {\n \tenum machine_mode mode = GET_MODE (rtl);\n \n-\tif (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\tif (SCALAR_FLOAT_MODE_P (mode))\n \t  {\n \t    unsigned int length = GET_MODE_SIZE (mode);\n \t    unsigned char *array = ggc_alloc (length);"}, {"sha": "d17258795fb4edbe5119094a61fdc2ce407b05a0", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -1162,7 +1162,7 @@ gen_lowpart_common (enum machine_mode mode, rtx x)\n     return 0;\n \n   /* Don't allow generating paradoxical FLOAT_MODE subregs.  */\n-  if (GET_MODE_CLASS (mode) == MODE_FLOAT && msize > xsize)\n+  if (SCALAR_FLOAT_MODE_P (mode) && msize > xsize)\n     return 0;\n \n   offset = subreg_lowpart_offset (mode, innermode);"}, {"sha": "58f179eacdc3b1fcba3025f6bb84b39be10c2994", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -3155,7 +3155,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \n   /* Expand x*2.0 as x+x.  */\n   if (GET_CODE (op1) == CONST_DOUBLE\n-      && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+      && SCALAR_FLOAT_MODE_P (mode))\n     {\n       REAL_VALUE_TYPE d;\n       REAL_VALUE_FROM_CONST_DOUBLE (d, op1);"}, {"sha": "44ef18223f03d87bcf8d1074c7414605c66f068c", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -349,8 +349,8 @@ convert_move (rtx to, rtx from, int unsignedp)\n {\n   enum machine_mode to_mode = GET_MODE (to);\n   enum machine_mode from_mode = GET_MODE (from);\n-  int to_real = GET_MODE_CLASS (to_mode) == MODE_FLOAT;\n-  int from_real = GET_MODE_CLASS (from_mode) == MODE_FLOAT;\n+  int to_real = SCALAR_FLOAT_MODE_P (to_mode);\n+  int from_real = SCALAR_FLOAT_MODE_P (from_mode);\n   enum insn_code code;\n   rtx libcall;\n "}, {"sha": "0c4a397667ecc67f0d9e36ee97cbf85c692e9b9f", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -354,7 +354,7 @@ gen_insn (rtx insn)\n \t  case 'I':  case 'F':  case 'N':\n \t    break;\n \t  case 'V':\n-            if (GET_MODE_CLASS (m1) == MODE_FLOAT)\n+\t    if (SCALAR_FLOAT_MODE_P (m1))\n               printf (\"v\");\n             break;\n \t  case 'a':"}, {"sha": "0de77beab36278660b5c85f9aa63af44cb9226dc", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -10816,7 +10816,7 @@ load_mems (const struct loop *loop)\n \t}\n \n       if (flag_float_store && written\n-\t  && GET_MODE_CLASS (GET_MODE (mem)) == MODE_FLOAT)\n+\t  && SCALAR_FLOAT_MODE_P (GET_MODE (mem)))\n \tloop_info->mems[i].optimize = 0;\n \n       /* If this MEM is written to, we must be sure that there"}, {"sha": "6b681a350c1242cfbef7b36f4543d7c2a3d4862c", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -2641,7 +2641,7 @@ expand_abs_nojump (enum machine_mode mode, rtx op0, rtx target,\n     return temp;\n \n   /* For floating point modes, try clearing the sign bit.  */\n-  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+  if (SCALAR_FLOAT_MODE_P (mode))\n     {\n       temp = expand_absneg_bit (ABS, mode, op0, target);\n       if (temp)"}, {"sha": "ece44f792bdb522851c2bc495dae2544683dbb72", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -1003,7 +1003,7 @@ general_operand (rtx op, enum machine_mode mode)\n \n       /* FLOAT_MODE subregs can't be paradoxical.  Combine will occasionally\n \t create such rtl, and we must reject it.  */\n-      if (GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n+      if (SCALAR_FLOAT_MODE_P (GET_MODE (op))\n \t  && GET_MODE_SIZE (GET_MODE (op)) > GET_MODE_SIZE (GET_MODE (sub)))\n \treturn 0;\n \n@@ -1087,7 +1087,7 @@ register_operand (rtx op, enum machine_mode mode)\n \n       /* FLOAT_MODE subregs can't be paradoxical.  Combine will occasionally\n \t create such rtl, and we must reject it.  */\n-      if (GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n+      if (SCALAR_FLOAT_MODE_P (GET_MODE (op))\n \t  && GET_MODE_SIZE (GET_MODE (op)) > GET_MODE_SIZE (GET_MODE (sub)))\n \treturn 0;\n "}, {"sha": "2811a6b7d6074069b4568a60bb3fbfe23aa2b3a0", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -690,7 +690,7 @@ replace_reg (rtx *reg, int regno)\n   gcc_assert (regno <= LAST_STACK_REG);\n   gcc_assert (STACK_REG_P (*reg));\n \n-  gcc_assert (GET_MODE_CLASS (GET_MODE (*reg)) == MODE_FLOAT\n+  gcc_assert (SCALAR_FLOAT_MODE_P (GET_MODE (*reg))\n \t      || GET_MODE_CLASS (GET_MODE (*reg)) == MODE_COMPLEX_FLOAT);\n \n   *reg = FP_MODE_REG (regno, GET_MODE (*reg));"}, {"sha": "1c1a441c345200e595c5d92647e39c933eaa3488", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -6518,7 +6518,7 @@ find_equiv_reg (rtx goal, rtx insn, enum reg_class class, int other,\n       enum rtx_code code = GET_CODE (XEXP (goal, 0));\n       if (MEM_VOLATILE_P (goal))\n \treturn 0;\n-      if (flag_float_store && GET_MODE_CLASS (GET_MODE (goal)) == MODE_FLOAT)\n+      if (flag_float_store && SCALAR_FLOAT_MODE_P (GET_MODE (goal)))\n \treturn 0;\n       /* An address with side effects must be reexecuted.  */\n       switch (code)\n@@ -6609,8 +6609,7 @@ find_equiv_reg (rtx goal, rtx insn, enum reg_class class, int other,\n \t\t\t       = true_regnum (valtry = SET_DEST (pat))) >= 0)\n \t\t\t  || (REG_P (SET_DEST (pat))\n \t\t\t      && GET_CODE (XEXP (tem, 0)) == CONST_DOUBLE\n-\t\t\t      && (GET_MODE_CLASS (GET_MODE (XEXP (tem, 0)))\n-\t\t\t\t  == MODE_FLOAT)\n+\t\t\t      && SCALAR_FLOAT_MODE_P (GET_MODE (XEXP (tem, 0)))\n \t\t\t      && GET_CODE (goal) == CONST_INT\n \t\t\t      && 0 != (goaltry\n \t\t\t\t       = operand_subword (XEXP (tem, 0), 0, 0,\n@@ -6624,8 +6623,7 @@ find_equiv_reg (rtx goal, rtx insn, enum reg_class class, int other,\n \t\t\t\t\t\t\t  NULL_RTX))\n \t\t      && REG_P (SET_DEST (pat))\n \t\t      && GET_CODE (XEXP (tem, 0)) == CONST_DOUBLE\n-\t\t      && (GET_MODE_CLASS (GET_MODE (XEXP (tem, 0)))\n-\t\t\t  == MODE_FLOAT)\n+\t\t      && SCALAR_FLOAT_MODE_P (GET_MODE (XEXP (tem, 0)))\n \t\t      && GET_CODE (goal) == CONST_INT\n \t\t      && 0 != (goaltry = operand_subword (XEXP (tem, 0), 1, 0,\n \t\t\t\t\t\t\t  VOIDmode))"}, {"sha": "1248d470e33bb87f710d7a8ed1d126ab114a9564", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -2155,7 +2155,7 @@ may_trap_p_1 (rtx x, bool unaligned_mems)\n     case UMOD:\n       if (HONOR_SNANS (GET_MODE (x)))\n \treturn 1;\n-      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n+      if (SCALAR_FLOAT_MODE_P (GET_MODE (x)))\n \treturn flag_trapping_math;\n       if (!CONSTANT_P (XEXP (x, 1)) || (XEXP (x, 1) == const0_rtx))\n \treturn 1;\n@@ -2212,7 +2212,7 @@ may_trap_p_1 (rtx x, bool unaligned_mems)\n \n     default:\n       /* Any floating arithmetic may trap.  */\n-      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n+      if (SCALAR_FLOAT_MODE_P (GET_MODE (x))\n \t  && flag_trapping_math)\n \treturn 1;\n     }\n@@ -4683,7 +4683,7 @@ canonicalize_condition (rtx insn, rtx cond, int reverse, rtx *earliest,\n \t\t\t\t<< (GET_MODE_BITSIZE (inner_mode) - 1))))\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t     || (code == LT\n-\t\t\t && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n+\t\t\t && SCALAR_FLOAT_MODE_P (inner_mode)\n \t\t\t && (fsfv = FLOAT_STORE_FLAG_VALUE (inner_mode),\n \t\t\t     REAL_VALUE_NEGATIVE (fsfv)))\n #endif\n@@ -4703,7 +4703,7 @@ canonicalize_condition (rtx insn, rtx cond, int reverse, rtx *earliest,\n \t\t\t\t<< (GET_MODE_BITSIZE (inner_mode) - 1))))\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t     || (code == GE\n-\t\t\t && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n+\t\t\t && SCALAR_FLOAT_MODE_P (inner_mode)\n \t\t\t && (fsfv = FLOAT_STORE_FLAG_VALUE (inner_mode),\n \t\t\t     REAL_VALUE_NEGATIVE (fsfv)))\n #endif"}, {"sha": "e9a5d1af5585663c819b812881c379f6c6bf32a1", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -983,7 +983,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n     }\n \n   else if (GET_CODE (op) == CONST_DOUBLE\n-\t   && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\t   && SCALAR_FLOAT_MODE_P (mode))\n     {\n       REAL_VALUE_TYPE d, t;\n       REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n@@ -1029,7 +1029,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n     }\n \n   else if (GET_CODE (op) == CONST_DOUBLE\n-\t   && GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n+\t   && SCALAR_FLOAT_MODE_P (GET_MODE (op))\n \t   && GET_MODE_CLASS (mode) == MODE_INT\n \t   && width <= 2*HOST_BITS_PER_WIDE_INT && width > 0)\n     {\n@@ -1610,7 +1610,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n       /* x*2 is x+x and x*(-1) is -x */\n       if (GET_CODE (trueop1) == CONST_DOUBLE\n-\t  && GET_MODE_CLASS (GET_MODE (trueop1)) == MODE_FLOAT\n+\t  && SCALAR_FLOAT_MODE_P (GET_MODE (trueop1))\n \t  && GET_MODE (op0) == mode)\n \t{\n \t  REAL_VALUE_TYPE d;\n@@ -1792,7 +1792,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n     case DIV:\n       /* Handle floating point and integers separately.  */\n-      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+      if (SCALAR_FLOAT_MODE_P (mode))\n \t{\n \t  /* Maybe change 0.0 / x to 0.0.  This transformation isn't\n \t     safe for modes with NaNs, since 0.0 / 0.0 will then be\n@@ -2146,7 +2146,7 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n       return gen_rtx_CONST_VECTOR (mode, v);\n     }\n \n-  if (GET_MODE_CLASS (mode) == MODE_FLOAT\n+  if (SCALAR_FLOAT_MODE_P (mode)\n       && GET_CODE (op0) == CONST_DOUBLE\n       && GET_CODE (op1) == CONST_DOUBLE\n       && mode == GET_MODE (op0) && mode == GET_MODE (op1))\n@@ -2890,7 +2890,7 @@ simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n   tem = simplify_const_relational_operation (code, cmp_mode, op0, op1);\n   if (tem)\n     {\n-      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+      if (SCALAR_FLOAT_MODE_P (mode))\n \t{\n           if (tem == const0_rtx)\n             return CONST0_RTX (mode);\n@@ -3108,7 +3108,7 @@ simplify_const_relational_operation (enum rtx_code code,\n      the result.  */\n   else if (GET_CODE (trueop0) == CONST_DOUBLE\n \t   && GET_CODE (trueop1) == CONST_DOUBLE\n-\t   && GET_MODE_CLASS (GET_MODE (trueop0)) == MODE_FLOAT)\n+\t   && SCALAR_FLOAT_MODE_P (GET_MODE (trueop0)))\n     {\n       REAL_VALUE_TYPE d0, d1;\n \n@@ -3642,7 +3642,7 @@ simplify_immed_subreg (enum machine_mode outermode, rtx op,\n \t      long tmp[max_bitsize / 32];\n \t      int bitsize = GET_MODE_BITSIZE (GET_MODE (el));\n \n-\t      gcc_assert (GET_MODE_CLASS (GET_MODE (el)) == MODE_FLOAT);\n+\t      gcc_assert (SCALAR_FLOAT_MODE_P (GET_MODE (el)));\n \t      gcc_assert (bitsize <= elem_bitsize);\n \t      gcc_assert (bitsize % value_bit == 0);\n "}, {"sha": "97104d1af6ba06fd52c412ca89b42a35f24e90dd", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -1645,7 +1645,7 @@ layout_type (tree type)\n \t    enum machine_mode mode;\n \n \t    /* First, look for a supported vector type.  */\n-\t    if (GET_MODE_CLASS (innermode) == MODE_FLOAT)\n+\t    if (SCALAR_FLOAT_MODE_P (innermode))\n \t      mode = MIN_MODE_VECTOR_FLOAT;\n \t    else\n \t      mode = MIN_MODE_VECTOR_INT;"}, {"sha": "cc834e4f23196d9234f5e76e47fefd359270970a", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8bf70f59ee15fc337c025307a419558e7aedc4/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=3d8bf70f59ee15fc337c025307a419558e7aedc4", "patch": "@@ -348,7 +348,7 @@ type_for_widest_vector_mode (enum machine_mode inner_mode, optab op)\n   enum machine_mode best_mode = VOIDmode, mode;\n   int best_nunits = 0;\n \n-  if (GET_MODE_CLASS (inner_mode) == MODE_FLOAT)\n+  if (SCALAR_FLOAT_MODE_P (inner_mode))\n     mode = MIN_MODE_VECTOR_FLOAT;\n   else\n     mode = MIN_MODE_VECTOR_INT;"}]}