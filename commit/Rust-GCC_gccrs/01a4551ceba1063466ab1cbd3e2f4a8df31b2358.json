{"sha": "01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFhNDU1MWNlYmExMDYzNDY2YWIxY2JkM2UyZjRhOGRmMzFiMjM1OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-11-29T21:08:02Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-11-29T21:08:02Z"}, "message": "PR tree-optimization/78512 - [7 Regression] r242674 miscompiles Linux kernel\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/78512\n\t* config/linux.h (TARGET_PRINTF_POINTER_FORMAT): Remove.\n\t* config/rs6000/linux.h: Same.\n\t* config/rs6000/linux64.h: Same.\n\t* config/sol2.h: Same.\n\t* config/sol2.c (solaris_printf_pointer_format): Remove.\n\t* doc/tm.texi.in (TARGET_PRINTF_POINTER_FORMAT): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* gimple-ssa-sprintf.c (format_pointer): Rempove.\n\t(pass_sprintf_length::compute_format_length): Return bool.\n\t(pass_sprintf_length::handle_gimple_call): Adjust.\n\t* target.def (printf_pointer_format): Remove.\n\t* targhooks.c (default_printf_pointer_format): Remove.\n\t(linux_printf_pointer_format): Same.\n\t* targhooks.h (default_printf_pointer_format): Remove.\n\t(linux_printf_pointer_format, solaris_printf_pointer_format): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/78512\n\t* gcc.dg/tree-ssa/builtin-sprintf-6.c: Add test cases.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Remove test cases.\n\nFrom-SVN: r242975", "tree": {"sha": "5fbc744df1a8f6439838b03be9b6d394153c091e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fbc744df1a8f6439838b03be9b6d394153c091e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a918548079a2af0db87abf7611aac4ab4b691c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a918548079a2af0db87abf7611aac4ab4b691c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a918548079a2af0db87abf7611aac4ab4b691c39"}], "stats": {"total": 285, "additions": 92, "deletions": 193}, "files": [{"sha": "256d121c77dd52b5a73031b1b31eef34a24aca53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -1,3 +1,22 @@\n+2016-11-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78512\n+\t* config/linux.h (TARGET_PRINTF_POINTER_FORMAT): Remove.\n+\t* config/rs6000/linux.h: Same.\n+\t* config/rs6000/linux64.h: Same.\n+\t* config/sol2.h: Same.\n+\t* config/sol2.c (solaris_printf_pointer_format): Remove.\n+\t* doc/tm.texi.in (TARGET_PRINTF_POINTER_FORMAT): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* gimple-ssa-sprintf.c (format_pointer): Rempove.\n+\t(pass_sprintf_length::compute_format_length): Return bool.\n+\t(pass_sprintf_length::handle_gimple_call): Adjust.\n+\t* target.def (printf_pointer_format): Remove.\n+\t* targhooks.c (default_printf_pointer_format): Remove.\n+\t(linux_printf_pointer_format): Same.\n+\t* targhooks.h (default_printf_pointer_format): Remove.\n+\t(linux_printf_pointer_format, solaris_printf_pointer_format): Same.\n+\n 2016-11-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (UNSPEC_MASKOP): Move from i386.md."}, {"sha": "9aeeb948f55040986aac7bfcedeb1f3e82cea738", "filename": "gcc/config/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -208,8 +208,3 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define TARGET_LIBC_HAS_FUNCTION linux_libc_has_function\n \n #endif\n-\n-/* The format string to which \"%p\" corresponds (same in Glibc and\n-   uClibc.  */\n-#undef TARGET_PRINTF_POINTER_FORMAT\n-#define TARGET_PRINTF_POINTER_FORMAT linux_printf_pointer_format"}, {"sha": "ac9296d79ec8edc92c570a7d39855e03d79431be", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -138,7 +138,3 @@\n   || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)\n #define RS6000_GLIBC_ATOMIC_FENV 1\n #endif\n-\n-/* The format string to which \"%p\" corresponds.  */\n-#undef TARGET_PRINTF_POINTER_FORMAT\n-#define TARGET_PRINTF_POINTER_FORMAT linux_printf_pointer_format"}, {"sha": "0101ec0ac698fad979b6d0c55abd763a7074c7ab", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -640,7 +640,3 @@ extern int dot_symbols;\n    enabling the __float128 keyword.  */\n #undef\tTARGET_FLOAT128_ENABLE_TYPE\n #define TARGET_FLOAT128_ENABLE_TYPE 1\n-\n-/* The format string to which \"%p\" corresponds.  */\n-#undef TARGET_PRINTF_POINTER_FORMAT\n-#define TARGET_PRINTF_POINTER_FORMAT linux_printf_pointer_format"}, {"sha": "97f92e6c91f731131d8c6e0c34e5c65de68c8a24", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -31,9 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"output.h\"\n \n-#undef TARGET_PRINTF_POINTER_FORMAT\n-#define TARGET_PRINTF_POINTER_FORMAT solaris_printf_pointer_format\n-\n tree solaris_pending_aligns, solaris_pending_inits, solaris_pending_finis;\n \n /* Attach any pending attributes for DECL to the list in *ATTRIBUTES.\n@@ -301,14 +298,3 @@ solaris_override_options (void)\n   if (!HAVE_LD_EH_FRAME_CIEV3 && !global_options_set.x_dwarf_version)\n     dwarf_version = 2;\n }\n-\n-/* Solaris libc formats pointers as if by \"%zx\" with the pound ('#')\n-   format flag having the same meaning as in the integer directive.  */\n-\n-const char*\n-solaris_printf_pointer_format (tree, const char **flags)\n-{\n-  *flags = \"#\";\n-\n-  return \"%zx\";\n-}"}, {"sha": "50f2b383a1b7007c1d7654fbcbea56c1395a7d0d", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -440,10 +440,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION default_libc_has_function\n \n-/* The format string to which \"%p\" corresponds.  */\n-#undef TARGET_LIBC_PRINTF_POINTER_FORMAT\n-#define TARGET_LIBC_PRINTF_POINTER_FORMAT solaris_libc_printf_pointer_format\n-\n extern GTY(()) tree solaris_pending_aligns;\n extern GTY(()) tree solaris_pending_inits;\n extern GTY(()) tree solaris_pending_finis;"}, {"sha": "cdf5f482f346638de3da4a0e85d5c1f02a905fd9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -5422,10 +5422,6 @@ In either case, it remains possible to select code-generation for the alternate\n scheme, by means of compiler command line switches.\n @end defmac\n \n-@deftypefn {Target Hook} {const char*} TARGET_PRINTF_POINTER_FORMAT (tree, const char **@var{flags})\n-Determine the target @code{printf} implementation format string that the most closely corresponds to the @code{%p} format directive.  The object pointed to by the @var{flags} is set to a string consisting of recognized format flags such as the @code{'#'} character.\n-@end deftypefn\n-\n @node Addressing Modes\n @section Addressing Modes\n @cindex addressing modes"}, {"sha": "bbf53c966ee580d43c14a37e57d96f943f761969", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -4106,8 +4106,6 @@ In either case, it remains possible to select code-generation for the alternate\n scheme, by means of compiler command line switches.\n @end defmac\n \n-@hook TARGET_PRINTF_POINTER_FORMAT\n-\n @node Addressing Modes\n @section Addressing Modes\n @cindex addressing modes"}, {"sha": "732bc42a7673afc6edbf074aec89f7bc96d62b45", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 29, "deletions": 90, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -72,7 +72,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"realmpfr.h\"\n #include \"target.h\"\n-#include \"targhooks.h\"\n \n #include \"cpplib.h\"\n #include \"input.h\"\n@@ -126,7 +125,7 @@ class pass_sprintf_length : public gimple_opt_pass\n   void handle_gimple_call (gimple_stmt_iterator*);\n \n   struct call_info;\n-  void compute_format_length (const call_info &, format_result *);\n+  bool compute_format_length (const call_info &, format_result *);\n };\n \n bool\n@@ -759,83 +758,12 @@ build_intmax_type_nodes (tree *pintmax, tree *puintmax)\n     }\n }\n \n-static fmtresult\n-format_integer (const conversion_spec &, tree);\n-\n-/* Return a range representing the minimum and maximum number of bytes\n-   that the conversion specification SPEC will write on output for the\n-   pointer argument ARG when non-null.  ARG may be null (for vararg\n-   functions).  */\n-\n-static fmtresult\n-format_pointer (const conversion_spec &spec, tree arg)\n-{\n-  fmtresult res;\n-\n-  /* Determine the target's integer format corresponding to \"%p\".  */\n-  const char *flags;\n-  const char *pfmt = targetm.printf_pointer_format (arg, &flags);\n-  if (!pfmt)\n-    {\n-      /* The format couldn't be determined.  */\n-      res.range.min = res.range.max = HOST_WIDE_INT_M1U;\n-      return res;\n-    }\n-\n-  if (pfmt [0] == '%')\n-    {\n-      /* Format the pointer using the integer format string.  */\n-      conversion_spec pspec = spec;\n-\n-      /* Clear flags that are not listed as recognized.  */\n-      for (const char *pf = \"+ #0\"; *pf; ++pf)\n-\t{\n-\t  if (!strchr (flags, *pf))\n-\t    pspec.clear_flag (*pf);\n-\t}\n-\n-      /* Set flags that are specified in the format string.  */\n-      bool flag_p = true;\n-      do\n-\t{\n-\t  switch (*++pfmt)\n-\t    {\n-\t    case '+': case ' ': case '#': case '0':\n-\t      pspec.set_flag (*pfmt);\n-\t      break;\n-\t    default:\n-\t      flag_p = false;\n-\t    }\n-\t}\n-      while (flag_p);\n-\n-      /* Set the appropriate length modifier taking care to clear\n-       the one that may be set (Glibc's %p accepts but ignores all\n-       the integer length modifiers).  */\n-      switch (*pfmt)\n-\t{\n-\tcase 'l': pspec.modifier = FMT_LEN_l; ++pfmt; break;\n-\tcase 't': pspec.modifier = FMT_LEN_t; ++pfmt; break;\n-\tcase 'z': pspec.modifier = FMT_LEN_z; ++pfmt; break;\n-\tdefault: pspec.modifier = FMT_LEN_none;\n-\t}\n-\n-      pspec.force_flags = 1;\n-      pspec.specifier = *pfmt++;\n-      gcc_assert (*pfmt == '\\0');\n-      return format_integer (pspec, arg);\n-    }\n-\n-  /* The format is a plain string such as Glibc's \"(nil)\".  */\n-  res.range.min = res.range.max = strlen (pfmt);\n-  return res;\n-}\n-\n /* Set *PWIDTH and *PPREC according to the width and precision specified\n    in SPEC.  Each is set to HOST_WIDE_INT_MIN when the corresponding\n    field is specified but unknown, to zero for width and -1 for precision,\n    respectively when it's not specified, or to a non-negative value\n    corresponding to the known value.  */\n+\n static void\n get_width_and_precision (const conversion_spec &spec,\n \t\t\t HOST_WIDE_INT *pwidth, HOST_WIDE_INT *pprec)\n@@ -867,7 +795,6 @@ get_width_and_precision (const conversion_spec &spec,\n   *pprec = prec;\n }\n \n-\n /* Return a range representing the minimum and maximum number of bytes\n    that the conversion specification SPEC will write on output for the\n    integer argument ARG when non-null.  ARG may be null (for vararg\n@@ -2257,9 +2184,12 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \n /* Compute the length of the output resulting from the call to a formatted\n    output function described by INFO and store the result of the call in\n-   *RES.  Issue warnings for detected past the end writes.  */\n+   *RES.  Issue warnings for detected past the end writes.  Return true\n+   if the complete format string has been processed and *RES can be relied\n+   on, false otherwise (e.g., when a unknown or unhandled directive was seen\n+   that caused the processing to be terminated early).  */\n \n-void\n+bool\n pass_sprintf_length::compute_format_length (const call_info &info,\n \t\t\t\t\t    format_result *res)\n {\n@@ -2299,7 +2229,7 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n       if (0 && *pf == 0)\n \t{\n \t  /* Incomplete directive.  */\n-\t  return;\n+\t  return false;\n \t}\n \n       conversion_spec spec = conversion_spec ();\n@@ -2322,10 +2252,10 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n \t{\n \t  /* Similarly to the block above, this could be either a POSIX\n \t     positional argument or a width, depending on what follows.  */\n-\t  if (argno < gimple_call_num_args (info.callstmt))\n-\t    spec.star_width = gimple_call_arg (info.callstmt, argno++);\n-\t  else\n-\t    return;\n+\t  if (gimple_call_num_args (info.callstmt) <= argno)\n+\t    return false;\n+\n+\t  spec.star_width = gimple_call_arg (info.callstmt, argno++);\n \t  ++pf;\n \t}\n \n@@ -2344,7 +2274,7 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n \t  if (dollar == 0\n \t      || dollar == info.argidx\n \t      || dollar > gimple_call_num_args (info.callstmt))\n-\t    return;\n+\t    return false;\n \n \t  --dollar;\n \n@@ -2411,7 +2341,7 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n \t\t estimate the upper bound on the size of the output\n \t\t based on the number of digits it probably isn't worth\n \t\t continuing.  */\n-\t      return;\n+\t      return false;\n \t    }\n \t}\n \n@@ -2520,11 +2450,14 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n \t  break;\n \n \tcase 'p':\n-\t  spec.fmtfunc = format_pointer;\n-\t  break;\n+\t  /* The %p output is implementation-defined.  It's possible\n+\t     to determine this format but due to extensions (especially\n+\t     those of the Linux kernel -- see bug 78512) the first %p\n+\t     in the format string disables any further processing.  */\n+\t  return false;\n \n \tcase 'n':\n-\t  return;\n+\t  break;\n \n \tcase 'c':\n \tcase 'S':\n@@ -2533,7 +2466,8 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n \t  break;\n \n \tdefault:\n-\t  return;\n+\t  /* Unknown conversion specification.  */\n+\t  return false;\n \t}\n \n       spec.specifier = *pf++;\n@@ -2552,6 +2486,9 @@ pass_sprintf_length::compute_format_length (const call_info &info,\n \n       ::format_directive (info, res, dir, dirlen, spec, arg);\n     }\n+\n+  /* Complete format string was processed (with or without warnings).  */\n+  return true;\n }\n \n /* Return the size of the object referenced by the expression DEST if\n@@ -2893,13 +2830,15 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n   /* The result is the number of bytes output by the formatted function,\n      including the terminating NUL.  */\n   format_result res = format_result ();\n-  compute_format_length (info, &res);\n+\n+  bool success = compute_format_length (info, &res);\n \n   /* When optimizing and the printf return value optimization is enabled,\n      attempt to substitute the computed result for the return value of\n      the call.  Avoid this optimization when -frounding-math is in effect\n      and the format string contains a floating point directive.  */\n-  if (optimize > 0\n+  if (success\n+      && optimize > 0\n       && flag_printf_return_value\n       && (!flag_rounding_math || !res.floating))\n     try_substitute_return_value (gsi, info, res);"}, {"sha": "ac3470ee6f200742e349a7495bf3060820242298", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -3381,12 +3381,6 @@ greater than 128 and a multiple of 32.\",\n  machine_mode, (int n, bool extended),\n  default_floatn_mode)\n \n-DEFHOOK\n-(printf_pointer_format,\n- \"Determine the target @code{printf} implementation format string that the most closely corresponds to the @code{%p} format directive.  The object pointed to by the @var{flags} is set to a string consisting of recognized format flags such as the @code{'#'} character.\",\n- const char*, (tree, const char **flags),\n- default_printf_pointer_format)\n-\n /* Compute cost of moving data from a register of class FROM to one of\n    TO, using MODE.  */\n DEFHOOK"}, {"sha": "5d3e91ef3adbb11ebabc0af5310eb7fc2d189f6d", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -1512,36 +1512,6 @@ no_c99_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n   return false;\n }\n \n-/* Return the format string to which \"%p\" corresponds.  By default,\n-   assume it corresponds to the C99 \"%zx\" format and set *FLAGS to\n-   the empty string to indicate that format flags have no effect.\n-   An example of an implementation that matches this description\n-   is AIX.  */\n-\n-const char*\n-default_printf_pointer_format (tree, const char **flags)\n-{\n-  *flags = \"\";\n-\n-  return \"%zx\";\n-}\n-\n-/* For Glibc and uClibc targets also define the hook here because\n-   otherwise it would have to be duplicated in each target's .c file\n-   (such as in bfin/bfin.c and c6x/c6x.c, etc.)\n-   Glibc and uClibc format pointers as if by \"%zx\" except for the null\n-   pointer which outputs \"(nil)\".  It ignores the pound ('#') format\n-   flag but interprets the space and plus flags the same as in the integer\n-   directive.  */\n-\n-const char*\n-linux_printf_pointer_format (tree arg, const char **flags)\n-{\n-  *flags = \" +\";\n-\n-  return arg && integer_zerop (arg) ? \"(nil)\" : \"%#zx\";\n-}\n-\n tree\n default_builtin_tm_load_store (tree ARG_UNUSED (type))\n {"}, {"sha": "3a9271f379faf35f21712b18d280b848e4946602", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -191,10 +191,6 @@ extern bool default_libc_has_function (enum function_class);\n extern bool no_c99_libc_has_function (enum function_class);\n extern bool gnu_libc_has_function (enum function_class);\n \n-extern const char* default_printf_pointer_format (tree, const char **);\n-extern const char* linux_printf_pointer_format (tree, const char **);\n-extern const char* solaris_printf_pointer_format (tree, const char **);\n-\n extern tree default_builtin_tm_load_store (tree);\n \n extern int default_memory_move_cost (machine_mode, reg_class_t, bool);"}, {"sha": "982d47cd2644779f4cfcc4080111e962f6c71f2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -1,3 +1,9 @@\n+2016-11-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78512\n+\t* gcc.dg/tree-ssa/builtin-sprintf-6.c: Add test cases.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Remove test cases.\n+\n 2016-11-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/avx512f-kmovw-1.c (avx512f_test):"}, {"sha": "4c412344c8aa256b92d5ac90759f12536932b7d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-6.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-6.c?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -1,9 +1,11 @@\n /* PR middle-end/78476 - snprintf(0, 0, ...) with known arguments not\n    optimized away\n+   PR middle-end/78512 - r242674 miscompiles Linux kernel\n    A negative test complementing builtin-sprintf-5.c to verify that calls\n    to the function that do not return a constant are not optimized away.\n+   Test also verifies that unknown directives prevent the optimization.\n    { dg-compile }\n-   { dg-options \"-O2 -fdump-tree-optimized\" }\n+   { dg-options \"-O2 -Wformat -fdump-tree-optimized\" }\n    { dg-require-effective-target int32plus } */\n \n #define CONCAT(a, b) a ## b\n@@ -48,10 +50,25 @@ void test_arg_int (int width, int prec, int i, int n)\n \n   T (\"%i\", R (1, 10));\n \n+  T (\"%'i\", 1234567);\n+\n   for (i = -n; i != n; ++i)\n     T (\"%*x\", n, i);\n }\n \n+/* Support for %p was removed in response to PR middle-end/78512 due\n+   to the Linux kernel relying on GCC builtins while at the same time\n+   providing a large number of extensions to the %p directive that\n+   interfere with the optimization.  Verify that %p disables it.  */\n+\n+void test_arg_ptr (int width, int prec, int i)\n+{\n+  T (\"%p\", (void*)0);\n+  T (\"p=%p\", (void*)0);\n+  T (\"%s=%p\", \"p=\", (void*)0);\n+  T (\"%i%p\", 123, (void*)0);\n+}\n+\n void test_arg_string (int width, int prec, const char *s)\n {\n   T (\"%-s\", s);\n@@ -69,5 +86,24 @@ void test_arg_string (int width, int prec, const char *s)\n   T (\"%*.*s\", width, prec, \"123\");\n }\n \n+void test_invalid_directive (void)\n+{\n+  T (\"%\");        /* { dg-warning \"spurious trailing .%.\" } */\n+  T (\"abc%\");     /* { dg-warning \"spurious trailing .%.\" } */\n+\n+  T (\"%2$i\");     /* { dg-warning \"operand number out of range\" } */\n+  T (\"abc%2$i\");  /* { dg-warning \"operand number out of range\" } */\n+\n+  T (\"%=i\", 0);   /* { dg-warning \"unknown conversion type character .=.\" } */\n+  /* { dg-warning \"too many arguments\" \"\" { target *-*-* } .-1 } */\n+\n+  T (\"%*i\", \"\", 0); /* { dg-warning \"field width specifier .\\\\*. expects argument of type .int.\" } */\n+  T (\"%.*i\", \"\", 0); /* { dg-warning \"field precision specifier .\\\\.\\\\*. expects argument of type .int.\" } */\n+  T (\"%.*.i\", 0);   /* { dg-warning \"unknown conversion type character .\\\\..\" } */\n+  T (\"%Q\");       /* { dg-warning \"unknown conversion type character .Q.\" } */\n+  T (\"abc%Q\");    /* { dg-warning \"unknown conversion type character .Q.\" } */\n+}\n \n-/* { dg-final { scan-tree-dump-times \"snprintf\" 27 \"optimized\"} } */\n+/* Use 'grep \"^ *T (\" builtin-sprintf-6.c  | wc -l' to determine\n+   the count for the directive below.\n+   { dg-final { scan-tree-dump-times \"snprintf\" 42 \"optimized\"} } */"}, {"sha": "4b0813effe6506920066973b5ed322952ffe5ba1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-1.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a4551ceba1063466ab1cbd3e2f4a8df31b2358/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c?ref=01a4551ceba1063466ab1cbd3e2f4a8df31b2358", "patch": "@@ -99,30 +99,6 @@ void test_sprintf_c_const (void)\n   T (-1, \"%*cX\", INT_MAX,     '1'); /* { dg-warning \"output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n }\n \n-/* Exercise the \"%p\" directive with constant arguments.  */\n-\n-void test_sprintf_p_const (void)\n-{\n-  /* GLIBC and uClibc format null pointers as \"(nil)\".  Sane implementations\n-     format null pointers as 0 or 0x0 and so the following will only be\n-     diagnosed on the former targets.  */\n-  T (5, \"%p\",     (void*)0);\n-  /* { dg-warning \"nul past the end\" \"(nil)\" { target *-linux-gnu *-*-uclinux } .-1 } */\n-\n-  /* The exact output for %p is unspecified by C.  Two formats are known:\n-     same as %tx (for example AIX) and same as %#tx (for example Solaris).  */\n-  T (0, \"%p\",     (void*)0x1);    /* { dg-warning \".%p. directive writing . bytes? into a region of size 0\" } */\n-  T (1, \"%p\",     (void*)0x12);   /* { dg-warning \".%p. directive writing . bytes? into a region of size 1\" } */\n-  T (2, \"%p\",     (void*)0x123);  /* { dg-warning \".%p. directive writing . bytes? into a region of size 2\" } */\n-\n-  /* GLIBC and uClibc treat the ' ' flag with the \"%p\" directive the same\n-     as with signed integer conversions (i.e., it prepends a space).  Other\n-     known implementations ignore it.  */\n-  T (6, \"% p\",    (void*)0x234);  /* { dg-warning \". . flag used with .%p.\" } */\n-  /* { dg-warning \"nul past the end\" \"Glibc %p\" { target *-linux-gnu } .-1 } */\n-  /* { dg-warning \"nul past the end\" \"Generic %p\" { target *-*-uclinux } .-2 } */\n-}\n-\n /* Verify that no warning is issued for calls that write into a flexible\n    array member whose size isn't known.  Also verify that calls that use\n    a flexible array member as an argument to the \"%s\" directive do not"}]}