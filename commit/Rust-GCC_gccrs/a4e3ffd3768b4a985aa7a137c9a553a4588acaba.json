{"sha": "a4e3ffd3768b4a985aa7a137c9a553a4588acaba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlM2ZmZDM3NjhiNGE5ODVhYTdhMTM3YzlhNTUzYTQ1ODhhY2FiYQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-25T21:38:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-25T21:38:24Z"}, "message": "Merge #593\n\n593: Support RangeFrom ([x..]) and RangeFromTo ([x..y]) in the parser r=philberty a=dkm\n\nParsing the .. (DOT_DOT) operator to get a range had two\r\nissues. Trying to compile:\r\n\r\n  let block = [1,2,3,4,5];\r\n  let _rf = &block[1..];\r\n  let _rt = &block[..3];\r\n  let _rft = &block[2..4];\r\n\r\nrange.rs:4:23: error: found unexpected token \u2018]\u2019 in null denotation\r\n    4 |   let _rf = &block[1..];\r\n      |                       ^\r\nrange.rs:4:24: error: expecting \u2018]\u2019 but \u2018;\u2019 found\r\n    4 |   let _rf = &block[1..];\r\n      |                        ^\r\n\r\nSince .. can represent either a range from or a range from-to it can\r\nbe followed by an expression or not. We do have a hack in our\r\npratt-parser so that it is allowed to return a nullptr. But even in\r\nthat case it will have swallowed the next token. Add another hack to\r\nthe pratt-parser so that if the next token is one that cannot start an\r\nexpression and the caller allows a nullptr return then don't skip the\r\ntoken and return immediately.\r\n\r\nAfter this patch we can parse the above range expressions, but we\r\nstill don't handle them fully:\r\n\r\nrange.rs:4:20: fatal error: Failed to lower expr: [1..]\r\n    4 |   let _rf = &block[1..];\r\n      |                    ^\r\n\r\nRanges are actually syntactic sugar for std::ops::Range[From|To].\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "2f97968a556041560f023ed7e5443f92e29f72df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f97968a556041560f023ed7e5443f92e29f72df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e3ffd3768b4a985aa7a137c9a553a4588acaba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/dnQCRBK7hj4Ov3rIwAAz+kIAJTAs+nEdLfoC93xHfift3I4\ni70NJtrPeyvnNiB/h5fFPPI6E10FwSeHLIxdhdb2Hqunx7kUhuTzx7c/vrbqIEmz\nPqnfLwgvf4te03/IT4HRrxiA0JEViqCrsVHAQAZuvu4LlcKDIgj4vTzOykqYzf6+\noyjZJ67FDy3SU3o5FN/xGnqceMJYAlAM1iuoOCDW+ThX4fV/lNk61j7ic/JoYdWZ\nZ8jaDmZ+HTXgl96rY9Ktp3GebJfoBUOULmkgM6wIWK66WyFzrjYYoC+/jTVZvFaU\n4GxC4zrSzUh9AczL7qe4hctEpu/9yvyhRxVuX/1oWXtFKMioQ86CVOTmm91Uwis=\n=bgcv\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f97968a556041560f023ed7e5443f92e29f72df\nparent 4447dba7c8a9126a9701ddc8ae02cc1425e1fa77\nparent f2ce41608ae0f55e6910756054cddf08aa3678ff\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627249104 +0000\ncommitter GitHub <noreply@github.com> 1627249104 +0000\n\nMerge #593\n\n593: Support RangeFrom ([x..]) and RangeFromTo ([x..y]) in the parser r=philberty a=dkm\n\nParsing the .. (DOT_DOT) operator to get a range had two\r\nissues. Trying to compile:\r\n\r\n  let block = [1,2,3,4,5];\r\n  let _rf = &block[1..];\r\n  let _rt = &block[..3];\r\n  let _rft = &block[2..4];\r\n\r\nrange.rs:4:23: error: found unexpected token \u2018]\u2019 in null denotation\r\n    4 |   let _rf = &block[1..];\r\n      |                       ^\r\nrange.rs:4:24: error: expecting \u2018]\u2019 but \u2018;\u2019 found\r\n    4 |   let _rf = &block[1..];\r\n      |                        ^\r\n\r\nSince .. can represent either a range from or a range from-to it can\r\nbe followed by an expression or not. We do have a hack in our\r\npratt-parser so that it is allowed to return a nullptr. But even in\r\nthat case it will have swallowed the next token. Add another hack to\r\nthe pratt-parser so that if the next token is one that cannot start an\r\nexpression and the caller allows a nullptr return then don't skip the\r\ntoken and return immediately.\r\n\r\nAfter this patch we can parse the above range expressions, but we\r\nstill don't handle them fully:\r\n\r\nrange.rs:4:20: fatal error: Failed to lower expr: [1..]\r\n    4 |   let _rf = &block[1..];\r\n      |                    ^\r\n\r\nRanges are actually syntactic sugar for std::ops::Range[From|To].\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e3ffd3768b4a985aa7a137c9a553a4588acaba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e3ffd3768b4a985aa7a137c9a553a4588acaba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e3ffd3768b4a985aa7a137c9a553a4588acaba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77"}, {"sha": "f2ce41608ae0f55e6910756054cddf08aa3678ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ce41608ae0f55e6910756054cddf08aa3678ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ce41608ae0f55e6910756054cddf08aa3678ff"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "340fea7020171d081f27ea138d70dcdb6c44c589", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e3ffd3768b4a985aa7a137c9a553a4588acaba/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e3ffd3768b4a985aa7a137c9a553a4588acaba/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=a4e3ffd3768b4a985aa7a137c9a553a4588acaba", "patch": "@@ -12348,6 +12348,18 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n \t\t\t\t\tParseRestrictions restrictions)\n {\n   const_TokenPtr current_token = lexer.peek_token ();\n+  // Special hack because we are allowed to return nullptr, in that case we\n+  // don't want to skip the token, since we don't actually parse it. But if\n+  // null isn't allowed it indicates an error, and we want to skip past that.\n+  // So return early if it is one of the tokens that ends an expression\n+  // (or at least cannot start a new expression).\n+  if (restrictions.expr_can_be_null)\n+    {\n+      TokenId id = current_token->get_id ();\n+      if (id == SEMICOLON || id == RIGHT_PAREN || id == RIGHT_CURLY\n+\t  || id == RIGHT_SQUARE)\n+\treturn nullptr;\n+    }\n   lexer.skip_token ();\n \n   // parse null denotation (unary part of expression)\n@@ -14036,6 +14048,9 @@ Parser<ManagedTokenSource>::parse_led_range_exclusive_expr (\n {\n   // FIXME: this probably parses expressions accidently or whatever\n   // try parsing RHS (as tok has already been consumed in parse_expression)\n+  // Can be nullptr, in which case it is a RangeFromExpr, otherwise a\n+  // RangeFromToExpr.\n+  restrictions.expr_can_be_null = true;\n   std::unique_ptr<AST::Expr> right\n     = parse_expr (LBP_DOT_DOT, AST::AttrVec (), restrictions);\n "}]}