{"sha": "faf63e396340307be88e36e86b1d30d0f8d88b14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmNjNlMzk2MzQwMzA3YmU4OGUzNmU4NmIxZDMwZDBmOGQ4OGIxNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-11-26T01:52:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-11-26T01:52:19Z"}, "message": "target.h (targetm.vectorize.builtin_vec_perm_ok): New.\n\n\t* target.h (targetm.vectorize.builtin_vec_perm_ok): New.\n\t* target-def.h (TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK): New.\n\t* hooks.h, hooks.c (hook_bool_tree_tree_true): New.\n\t* tree-vect-slp.c (vect_create_mask_and_perm): Don't create\n\tthe vector constant here...\n\t(vect_transform_slp_perm_load): ... do it here instead.  Validate\n\tthat the permutation vector is implementable by the target.\n\nFrom-SVN: r154665", "tree": {"sha": "9f56190fd9a03a09fedb53a42e51c8395d059720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f56190fd9a03a09fedb53a42e51c8395d059720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faf63e396340307be88e36e86b1d30d0f8d88b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf63e396340307be88e36e86b1d30d0f8d88b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf63e396340307be88e36e86b1d30d0f8d88b14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf63e396340307be88e36e86b1d30d0f8d88b14/comments", "author": null, "committer": null, "parents": [{"sha": "dac29646db44bc8d782bc07f07b577e0ba22d684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac29646db44bc8d782bc07f07b577e0ba22d684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac29646db44bc8d782bc07f07b577e0ba22d684"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "625e1686c0017b0618303683cb64eac1b5ca44e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faf63e396340307be88e36e86b1d30d0f8d88b14", "patch": "@@ -1,3 +1,13 @@\n+2009-11-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.h (targetm.vectorize.builtin_vec_perm_ok): New.\n+\t* target-def.h (TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK): New.\n+\t* hooks.h, hooks.c (hook_bool_tree_tree_true): New.\n+\t* tree-vect-slp.c (vect_create_mask_and_perm): Don't create\n+\tthe vector constant here...\n+\t(vect_transform_slp_perm_load): ... do it here instead.  Validate\n+\tthat the permutation vector is implementable by the target.\n+\n 2009-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/sysv4.opt (mregnames): Change Var to rs6000_regnames."}, {"sha": "fd3c837fffe54dbcc363879e5e8261d5eae2f920", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=faf63e396340307be88e36e86b1d30d0f8d88b14", "patch": "@@ -220,6 +220,12 @@ hook_bool_tree_tree_false (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+bool\n+hook_bool_tree_tree_true (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n bool\n hook_bool_tree_bool_false (tree a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n {"}, {"sha": "38296da2af945357dc712295e5dec7959d22ed28", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=faf63e396340307be88e36e86b1d30d0f8d88b14", "patch": "@@ -50,6 +50,7 @@ extern bool hook_bool_rtx_int_int_intp_bool_false (rtx, int, int, int *, bool);\n extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n extern bool hook_bool_size_t_constcharptr_int_true (size_t, const char *, int);\n extern bool hook_bool_tree_tree_false (tree, tree);\n+extern bool hook_bool_tree_tree_true (tree, tree);\n extern bool hook_bool_tree_bool_false (tree, bool);\n \n extern void hook_void_void (void);"}, {"sha": "0fe5d1339d444e4e2864de65cf8c7f0e6481e8fd", "filename": "gcc/target-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=faf63e396340307be88e36e86b1d30d0f8d88b14", "patch": "@@ -391,6 +391,8 @@\n #define TARGET_VECTOR_ALIGNMENT_REACHABLE \\\n   default_builtin_vector_alignment_reachable\n #define TARGET_VECTORIZE_BUILTIN_VEC_PERM 0\n+#define TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK \\\n+  hook_bool_tree_tree_true\n #define TARGET_SUPPORT_VECTOR_MISALIGNMENT \\\n   default_builtin_support_vector_misalignment\n \n@@ -405,7 +407,8 @@\n     TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST,\t\t\t\\\n     TARGET_VECTOR_ALIGNMENT_REACHABLE,                                  \\\n     TARGET_VECTORIZE_BUILTIN_VEC_PERM,\t\t\t\t\t\\\n-    TARGET_SUPPORT_VECTOR_MISALIGNMENT\t\t\t\t\\\n+    TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK,\t\t\t\t\\\n+    TARGET_SUPPORT_VECTOR_MISALIGNMENT\t\t\t\t\t\\\n   }\n \n #define TARGET_DEFAULT_TARGET_FLAGS 0"}, {"sha": "e5df4ef0597f4b0e9335a05c669b4e23e1377b92", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=faf63e396340307be88e36e86b1d30d0f8d88b14", "patch": "@@ -490,6 +490,10 @@ struct gcc_target\n \n     /* Target builtin that implements vector permute.  */\n     tree (* builtin_vec_perm) (tree, tree*);\n+\n+    /* Return true if a vector created for builtin_vec_perm is valid.  */\n+    bool (* builtin_vec_perm_ok) (tree, tree);\n+\n     /* Return true if the target supports misaligned store/load of a\n        specific factor denoted in the third parameter.  The last parameter\n        is true if the access is defined in a packed struct.  */"}, {"sha": "76227aa14a997db7dc8c3be43e79303ed92ec702", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf63e396340307be88e36e86b1d30d0f8d88b14/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=faf63e396340307be88e36e86b1d30d0f8d88b14", "patch": "@@ -1630,28 +1630,19 @@ vect_get_slp_defs (slp_tree slp_node, VEC (tree,heap) **vec_oprnds0,\n \n static inline void\n vect_create_mask_and_perm (gimple stmt, gimple next_scalar_stmt,\n-                           int *mask_array, int mask_nunits,\n-                           tree mask_element_type, tree mask_type,\n-                           int first_vec_indx, int second_vec_indx,\n+                           tree mask, int first_vec_indx, int second_vec_indx,\n                            gimple_stmt_iterator *gsi, slp_tree node,\n                            tree builtin_decl, tree vectype,\n                            VEC(tree,heap) *dr_chain,\n                            int ncopies, int vect_stmts_counter)\n {\n-  tree t = NULL_TREE, mask_vec, mask, perm_dest;\n+  tree perm_dest;\n   gimple perm_stmt = NULL;\n   stmt_vec_info next_stmt_info;\n   int i, group_size, stride, dr_chain_size;\n   tree first_vec, second_vec, data_ref;\n   VEC (tree, heap) *params = NULL;\n \n-  /* Create a vector mask.  */\n-  for (i = mask_nunits - 1; i >= 0; --i)\n-    t = tree_cons (NULL_TREE, build_int_cst (mask_element_type, mask_array[i]),\n-                   t);\n-  mask_vec = build_vector (mask_type, t);\n-  mask = vect_init_vector (stmt, mask_vec, mask_type, NULL);\n-\n   group_size = VEC_length (gimple, SLP_TREE_SCALAR_STMTS (node));\n   stride = SLP_TREE_NUMBER_OF_VEC_STMTS (node) / ncopies;\n   dr_chain_size = VEC_length (tree, dr_chain);\n@@ -1890,7 +1881,28 @@ vect_transform_slp_perm_load (gimple stmt, VEC (tree, heap) *dr_chain,\n \n               if (index == mask_nunits)\n                 {\n-                  index = 0;\n+\t\t  tree mask_vec = NULL;\n+\n+\t\t  while (--index >= 0)\n+\t\t    {\n+\t\t      tree t = build_int_cst (mask_element_type, mask[index]);\n+\t\t      mask_vec = tree_cons (NULL, t, mask_vec);\n+\t\t    }\n+\t\t  mask_vec = build_vector (mask_type, mask_vec);\n+\t\t  index = 0;\n+\n+\t\t  if (!targetm.vectorize.builtin_vec_perm_ok (vectype,\n+\t\t\t\t\t\t\t      mask_vec))\n+\t\t    {\n+\t\t      if (vect_print_dump_info (REPORT_DETAILS))\n+\t\t\t{\n+\t\t\t  fprintf (vect_dump, \"unsupported vect permute \");\n+\t\t\t  print_generic_expr (vect_dump, mask_vec, 0);\n+\t\t\t}\n+\t\t      free (mask);\n+\t\t      return false;\n+\t\t    }\n+\n                   if (!analyze_only)\n                     {\n                       if (need_next_vector)\n@@ -1903,10 +1915,9 @@ vect_transform_slp_perm_load (gimple stmt, VEC (tree, heap) *dr_chain,\n                                 SLP_TREE_SCALAR_STMTS (node), scalar_index++);\n \n                       vect_create_mask_and_perm (stmt, next_scalar_stmt,\n-                               mask, mask_nunits, mask_element_type, mask_type,\n-                               first_vec_index, second_vec_index, gsi, node,\n-                               builtin_decl, vectype, dr_chain, ncopies,\n-                               vect_stmts_counter++);\n+                               mask_vec, first_vec_index, second_vec_index,\n+\t\t\t       gsi, node, builtin_decl, vectype, dr_chain,\n+\t\t\t       ncopies, vect_stmts_counter++);\n                     }\n                 }\n             }"}]}