{"sha": "ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1NzMyMTE3YTNjMThlMWJhM2RjMzY3MGU2OTMzZjNjNzk1ZGZjZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-07-06T12:51:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-07-06T12:51:03Z"}, "message": "sparc.c (get_pc_symbol): Rename into add_pc_to_pic_symbol.\n\n\t* config/sparc/sparc.c (get_pc_symbol): Rename into\n\tadd_pc_to_pic_symbol.\n\t(get_pc_symbol_name): Rename into add_pc_to_pic_symbol_name.\n\t(load_pic_register): Account for previous changes.\n\tUse reg_names.  Don't create the label twice.\n\t* config/sparc/sparc.md (UNSPEC_GET_PC): Rename into\n\tUNSPEC_LOAD_PCREL_SYM.\n\t(get_pc): Rename into load_pcrel_sym.  Add predicate to\n\toperands.  Remove condition.\n\nFrom-SVN: r84151", "tree": {"sha": "e5f6c05be89760609fbf122854a81ff757f979ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5f6c05be89760609fbf122854a81ff757f979ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fddabb2c2261f782c6545104c36958b0eef1e3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddabb2c2261f782c6545104c36958b0eef1e3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fddabb2c2261f782c6545104c36958b0eef1e3b6"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "a14897b88ace2fd1d01cbbabe743764d78cb026c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "patch": "@@ -1,3 +1,15 @@\n+2004-07-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (get_pc_symbol): Rename into\n+\tadd_pc_to_pic_symbol.\n+\t(get_pc_symbol_name): Rename into add_pc_to_pic_symbol_name.\n+\t(load_pic_register): Account for previous changes.\n+\tUse reg_names.  Don't create the label twice.\n+\t* config/sparc/sparc.md (UNSPEC_GET_PC): Rename into\n+\tUNSPEC_LOAD_PCREL_SYM.\n+\t(get_pc): Rename into load_pcrel_sym.  Add predicate to\n+\toperands.  Remove condition.\n+\n 2004-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* dbxout.c (dbxout_type): Don't test whether the binfo slot of"}, {"sha": "64a207d46d4132e68c3019e02d3814727f23f2ce", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "patch": "@@ -3059,8 +3059,8 @@ sparc_cannot_force_const_mem (rtx x)\n static GTY(()) rtx global_offset_table;\n \n /* The function we use to get at it.  */\n-static GTY(()) rtx get_pc_symbol;\n-static GTY(()) char get_pc_symbol_name[256];\n+static GTY(()) rtx add_pc_to_pic_symbol;\n+static GTY(()) char add_pc_to_pic_symbol_name[256];\n \n /* Ensure that we are not using patterns that are not OK with PIC.  */\n \n@@ -3643,33 +3643,33 @@ legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED, enum machine_mode mode)\n static void\n load_pic_register (void)\n {\n-  /* Labels to get the PC in the prologue of this function.  */\n   int orig_flag_pic = flag_pic;\n \n-  /* If we haven't emitted the special get_pc helper function, do so now.  */\n-  if (get_pc_symbol_name[0] == 0)\n+  /* If we haven't emitted the special helper function, do so now.  */\n+  if (add_pc_to_pic_symbol_name[0] == 0)\n     {\n+      const char *pic_name = reg_names[REGNO (pic_offset_table_rtx)];\n       int align;\n \n-      ASM_GENERATE_INTERNAL_LABEL (get_pc_symbol_name, \"LGETPC\", 0);\n+      ASM_GENERATE_INTERNAL_LABEL (add_pc_to_pic_symbol_name, \"LADDPC\", 0);\n       text_section ();\n \n       align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n       if (align > 0)\n \tASM_OUTPUT_ALIGN (asm_out_file, align);\n-      (*targetm.asm_out.internal_label) (asm_out_file, \"LGETPC\", 0);\n-      fputs (\"\\tretl\\n\\tadd\\t%o7, %l7, %l7\\n\", asm_out_file);\n+      ASM_OUTPUT_LABEL (asm_out_file, add_pc_to_pic_symbol_name);\n+      fprintf (asm_out_file, \"\\tjmp %%o7+8\\n\\t add\\t%%o7, %s, %s\\n\",\n+\t       pic_name, pic_name);\n     }\n \n   /* Initialize every time through, since we can't easily\n      know this to be permanent.  */\n   global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n-  get_pc_symbol = gen_rtx_SYMBOL_REF (Pmode, get_pc_symbol_name);\n-  flag_pic = 0;\n-\n-  emit_insn (gen_get_pc (pic_offset_table_rtx, global_offset_table,\n-\t\t\t get_pc_symbol));\n+  add_pc_to_pic_symbol = gen_rtx_SYMBOL_REF (Pmode, add_pc_to_pic_symbol_name);\n \n+  flag_pic = 0;\n+  emit_insn (gen_load_pcrel_sym (pic_offset_table_rtx, global_offset_table,\n+\t\t\t\t add_pc_to_pic_symbol));\n   flag_pic = orig_flag_pic;\n \n   /* Need to emit this whether or not we obey regdecls,"}, {"sha": "021ddd164b1f3b11bdd1b7d6533be3157edb1511", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5732117a3c18e1ba3dc3670e6933f3c795dfcf/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ef5732117a3c18e1ba3dc3670e6933f3c795dfcf", "patch": "@@ -27,7 +27,7 @@\n (define_constants\n   [(UNSPEC_MOVE_PIC\t\t0)\n    (UNSPEC_UPDATE_RETURN\t1)\n-   (UNSPEC_GET_PC\t\t2)\n+   (UNSPEC_LOAD_PCREL_SYM\t2)\n    (UNSPEC_MOVE_PIC_LABEL\t5)\n    (UNSPEC_SETH44\t\t6)\n    (UNSPEC_SETM44\t\t7)\n@@ -1664,17 +1664,19 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"reg\")])\n \f\n-;; Load program counter insns.\n+;; Load in operand 0 the (absolute) address of operand 1, which is a symbolic\n+;; value subject to a PC-relative relocation.  Operand 2 is a helper function\n+;; that adds the PC value at the call point to operand 0.\n \n-(define_insn \"get_pc\"\n-  [(clobber (reg:SI 15))\n-   (set (match_operand 0 \"register_operand\" \"=r\")\n-\t(unspec [(match_operand 1 \"\" \"\") (match_operand 2 \"\" \"\")] UNSPEC_GET_PC))]\n-  \"flag_pic && REGNO (operands[0]) == 23\"\n+(define_insn \"load_pcrel_sym\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(unspec [(match_operand 1 \"symbolic_operand\" \"\")\n+\t\t (match_operand 2 \"call_operand_address\" \"\")] UNSPEC_LOAD_PCREL_SYM))\n+   (clobber (reg:SI 15))]\n+  \"\"\n   \"sethi\\t%%hi(%a1-4), %0\\n\\tcall\\t%a2\\n\\tadd\\t%0, %%lo(%a1+4), %0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"3\")])\n-\n \f\n ;; Move instructions\n "}]}