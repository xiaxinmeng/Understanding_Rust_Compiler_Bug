{"sha": "6e40e4814884d3e9243ce4b58ad7d92e2606cfe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0MGU0ODE0ODg0ZDNlOTI0M2NlNGI1OGFkN2Q5MmUyNjA2Y2ZlMw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-03-15T16:01:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-15T16:01:51Z"}, "message": "exp_tss.ads, [...] (Find_Inherited_TSS): New subprogram...\n\n2005-03-08  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_tss.ads, exp_tss.adb (Find_Inherited_TSS): New subprogram, moved\n\there from exp_attr so it can be shared between exp_attr and exp_dist.\n\t(TSS_Names): Renamed from OK_TSS_Names. This array contains the list of\n\tall TSS names, not a subset thereof, and the previous name introduced\n\tan unnecessarily confusion that a distinction might exist between\n\t\"OK\" TSS names and some \"not OK\" TSS names.\n\nFrom-SVN: r96497", "tree": {"sha": "b15a4e5da3fd768c2a54e3cad4fe67dbd4e28dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15a4e5da3fd768c2a54e3cad4fe67dbd4e28dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3/comments", "author": null, "committer": null, "parents": [{"sha": "4ee27193ec6d9e19751d24c8302f051ac979cad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee27193ec6d9e19751d24c8302f051ac979cad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee27193ec6d9e19751d24c8302f051ac979cad6"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "50d96053817453a9e11e2f33eb1de91484e5cc49", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=6e40e4814884d3e9243ce4b58ad7d92e2606cfe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -97,6 +97,41 @@ package body Exp_Tss is\n       Prepend_Elmt (TSS, TSS_Elist (FN));\n    end Copy_TSS;\n \n+   ------------------------\n+   -- Find_Inherited_TSS --\n+   ------------------------\n+\n+   function Find_Inherited_TSS\n+     (Typ : Entity_Id;\n+      Nam : TSS_Name_Type) return Entity_Id\n+   is\n+      Btyp : Entity_Id := Typ;\n+      Proc : Entity_Id;\n+\n+   begin\n+      loop\n+         Btyp := Base_Type (Btyp);\n+         Proc :=  TSS (Btyp, Nam);\n+\n+         exit when Present (Proc)\n+           or else not Is_Derived_Type (Btyp);\n+\n+         --  If Typ is a derived type, it may inherit attributes from some\n+         --  ancestor.\n+\n+         Btyp := Etype (Btyp);\n+      end loop;\n+\n+      if No (Proc) then\n+\n+         --  If nothing else, use the TSS of the root type\n+\n+         Proc := TSS (Base_Type (Underlying_Type (Typ)), Nam);\n+      end if;\n+\n+      return Proc;\n+   end Find_Inherited_TSS;\n+\n    -----------------------\n    -- Get_TSS_Name_Type --\n    -----------------------\n@@ -112,8 +147,8 @@ package body Exp_Tss is\n       if C1 in 'A' .. 'Z' and then C2 in 'A' .. 'Z' then\n          Nm := (C1, C2);\n \n-         for J in OK_TSS_Names'Range loop\n-            if Nm = OK_TSS_Names (J) then\n+         for J in TSS_Names'Range loop\n+            if Nm = TSS_Names (J) then\n                return Nm;\n             end if;\n          end loop;"}, {"sha": "de3a20f6e688689adc42ee9b8ffd147392951cc9", "filename": "gcc/ada/exp_tss.ads", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3/gcc%2Fada%2Fexp_tss.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e40e4814884d3e9243ce4b58ad7d92e2606cfe3/gcc%2Fada%2Fexp_tss.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.ads?ref=6e40e4814884d3e9243ce4b58ad7d92e2606cfe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,21 +77,27 @@ package Exp_Tss is\n    TSS_Deep_Finalize      : constant TNT := \"DF\";  -- Deep Finalize\n    TSS_Deep_Initialize    : constant TNT := \"DI\";  -- Deep Initialize\n    TSS_Composite_Equality : constant TNT := \"EQ\";  -- Composite Equality\n+   TSS_From_Any           : constant TNT := \"FA\";  -- PolyORB/DSA From_Any\n    TSS_Init_Proc          : constant TNT := \"IP\";  -- Initialization Procedure\n-   TSS_RAS_Access         : constant TNT := \"RA\";  -- RAs type access\n-   TSS_RAS_Dereference    : constant TNT := \"RD\";  -- RAs type deference\n+   TSS_RAS_Access         : constant TNT := \"RA\";  -- RAS type access\n+   TSS_RAS_Dereference    : constant TNT := \"RD\";  -- RAS type deference\n    TSS_Rep_To_Pos         : constant TNT := \"RP\";  -- Rep to Pos conversion\n    TSS_Slice_Assign       : constant TNT := \"SA\";  -- Slice assignment\n    TSS_Stream_Input       : constant TNT := \"SI\";  -- Stream Input attribute\n    TSS_Stream_Output      : constant TNT := \"SO\";  -- Stream Output attribute\n    TSS_Stream_Read        : constant TNT := \"SR\";  -- Stream Read attribute\n    TSS_Stream_Write       : constant TNT := \"SW\";  -- Stream Write attribute\n+   TSS_To_Any             : constant TNT := \"TA\";  -- PolyORB/DSA To_Any\n+   TSS_TypeCode           : constant TNT := \"TC\";  -- PolyORB/DSA TypeCode\n \n-   OK_TSS_Names : constant array (Natural range <>) of TSS_Name_Type :=\n+   --  The array below contains all valid TSS names\n+\n+   TSS_Names : constant array (Natural range <>) of TSS_Name_Type :=\n      (TSS_Deep_Adjust,\n       TSS_Deep_Finalize,\n       TSS_Deep_Initialize,\n       TSS_Composite_Equality,\n+      TSS_From_Any,\n       TSS_Init_Proc,\n       TSS_RAS_Access,\n       TSS_RAS_Dereference,\n@@ -100,7 +106,9 @@ package Exp_Tss is\n       TSS_Stream_Input,\n       TSS_Stream_Output,\n       TSS_Stream_Read,\n-      TSS_Stream_Write);\n+      TSS_Stream_Write,\n+      TSS_To_Any,\n+      TSS_TypeCode);\n \n    TSS_Null : constant TNT := \"  \";\n    --  Dummy entry used to indicated that this is not really a TSS\n@@ -206,4 +214,11 @@ package Exp_Tss is\n    --  is used to test for the presence of an init proc in cases where\n    --  a null init proc is considered equivalent to no init proc.\n \n+   function Find_Inherited_TSS\n+     (Typ : Entity_Id;\n+      Nam : TSS_Name_Type) return Entity_Id;\n+   --  Returns the TSS of name Nam of Typ, or of its closest ancestor defining\n+   --  such a TSS. Empty is returned is neither Typ nor any of its ancestors\n+   --  have such a TSS.\n+\n end Exp_Tss;"}]}