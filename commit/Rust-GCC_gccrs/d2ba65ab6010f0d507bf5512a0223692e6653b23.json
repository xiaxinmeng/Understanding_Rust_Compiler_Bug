{"sha": "d2ba65ab6010f0d507bf5512a0223692e6653b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiYTY1YWI2MDEwZjBkNTA3YmY1NTEyYTAyMjM2OTJlNjY1M2IyMw==", "commit": {"author": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2021-08-12T18:32:16Z"}, "committer": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2021-08-12T18:36:42Z"}, "message": "Evaluate type arguments of sizeof that are structs of variable size [PR101838]\n\nEvaluate type arguments of sizeof for all types of variable size\nand not just for VLAs. This fixes PR101838 and some issues related\nto PR29970 where statement expressions need to be evaluated so that\nthe size is well defined.\n\n2021-08-12  Martin Uecker  <muecker@gwdg.de>\n\ngcc/c/\n\tPR c/101838\n\tPR c/29970\n\t* c-typeck.c (c_expr_sizeof_type): Evaluate\n\tsize expressions for structs of variable size.\n\ngcc/testsuite/\n\tPR c/101838\n\t* gcc.dg/vla-stexp-2.c: New test.", "tree": {"sha": "149c369c841cfd45b3e81ec9e6510b0ab867c6f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/149c369c841cfd45b3e81ec9e6510b0ab867c6f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2ba65ab6010f0d507bf5512a0223692e6653b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ba65ab6010f0d507bf5512a0223692e6653b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ba65ab6010f0d507bf5512a0223692e6653b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ba65ab6010f0d507bf5512a0223692e6653b23/comments", "author": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34cd97ff94bdb43e8c9de150f1d89527fc42138e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cd97ff94bdb43e8c9de150f1d89527fc42138e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cd97ff94bdb43e8c9de150f1d89527fc42138e"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "eb5c87dc57a716bc29bae4f85901332fcad64b99", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba65ab6010f0d507bf5512a0223692e6653b23/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba65ab6010f0d507bf5512a0223692e6653b23/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=d2ba65ab6010f0d507bf5512a0223692e6653b23", "patch": "@@ -3022,8 +3022,14 @@ c_expr_sizeof_type (location_t loc, struct c_type_name *t)\n   c_last_sizeof_loc = loc;\n   ret.original_code = SIZEOF_EXPR;\n   ret.original_type = NULL;\n+  if (type == error_mark_node)\n+    {\n+      ret.value = error_mark_node;\n+      ret.original_code = ERROR_MARK;\n+    }\n+  else\n   if ((type_expr || TREE_CODE (ret.value) == INTEGER_CST)\n-      && c_vla_type_p (type))\n+      && C_TYPE_VARIABLE_SIZE (type))\n     {\n       /* If the type is a [*] array, it is a VLA but is represented as\n \t having a size of zero.  In such a case we must ensure that"}, {"sha": "176f400ce3716fe89213c0309ba80c219ac07558", "filename": "gcc/testsuite/gcc.dg/vla-stexp-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba65ab6010f0d507bf5512a0223692e6653b23/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba65ab6010f0d507bf5512a0223692e6653b23/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-2.c?ref=d2ba65ab6010f0d507bf5512a0223692e6653b23", "patch": "@@ -0,0 +1,33 @@\n+/* PR101838 */\n+/* { dg-do run } */\n+/* { dg-options \"-Wpedantic -O0\" } */\n+\n+\n+int bar0(\n+\tint (*a)[*],\n+\tint (*b)[sizeof(*a)]\n+);\n+\n+\n+int bar(\n+\tstruct f { \t\t/* { dg-warning \"will not be visible outside of this definition\" } */\n+\t\tint a[*]; } v,\t/* { dg-warning \"variably modified type\" } */\n+\tint (*b)[sizeof(struct f)]\t// should not warn about zero size\n+);\n+\n+int foo(void)\n+{\n+\tint n = 0;\n+\treturn sizeof(typeof(*({ n = 10; struct foo { \t/* { dg-warning \"braced-groups\" } */\n+\t\t\t\t\tint x[n]; \t/* { dg-warning \"variably modified type\" } */\n+\t} x; &x; })));\n+}\n+\n+\n+int main()\n+{\n+\tif (sizeof(struct foo { int x[10]; }) != foo())\n+\t\t__builtin_abort();\n+\n+\treturn 0;\n+}"}]}