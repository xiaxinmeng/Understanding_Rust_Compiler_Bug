{"sha": "a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmYWQ4ZmU2Yzg0ZGUyNzJmMmE1NmQ0NjJlNjdkNTNjOWY0YTczZA==", "commit": {"author": {"name": "Alejandro Martinez", "email": "alejandro.martinezvicente@arm.com", "date": "2019-05-07T16:34:20Z"}, "committer": {"name": "Alejandro Martinez", "email": "alejandro@gcc.gnu.org", "date": "2019-05-07T16:34:20Z"}, "message": "This patch adds support to vectorize sum of abslolute differences (SAD_EXPR)\nusing SVE.\n\nGiven this input code:\n\nint\nsum_abs (uint8_t *restrict x, uint8_t *restrict y, int n)\n{\n  int sum = 0;\n\n  for (int i = 0; i < n; i++)\n    {\n      sum += __builtin_abs (x[i] - y[i]);\n    }\n\n  return sum;\n}\n\nThe resulting SVE code is:\n\n0000000000000000 <sum_abs>:\n   0:\t7100005f \tcmp\tw2, #0x0\n   4:\t5400026d \tb.le\t50 <sum_abs+0x50>\n   8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   c:\t93407c42 \tsxtw\tx2, w2\n  10:\t2538c002 \tmov\tz2.b, #0\n  14:\t25221fe0 \twhilelo\tp0.b, xzr, x2\n  18:\t2538c023 \tmov\tz3.b, #1\n  1c:\t2518e3e1 \tptrue\tp1.b\n  20:\ta4034000 \tld1b\t{z0.b}, p0/z, [x0, x3]\n  24:\ta4034021 \tld1b\t{z1.b}, p0/z, [x1, x3]\n  28:\t0430e3e3 \tincb\tx3\n  2c:\t0520c021 \tsel\tz1.b, p0, z1.b, z0.b\n  30:\t25221c60 \twhilelo\tp0.b, x3, x2\n  34:\t040d0420 \tuabd\tz0.b, p1/m, z0.b, z1.b\n  38:\t44830402 \tudot\tz2.s, z0.b, z3.b\n  3c:\t54ffff21 \tb.ne\t20 <sum_abs+0x20>  // b.any\n  40:\t2598e3e0 \tptrue\tp0.s\n  44:\t04812042 \tuaddv\td2, p0, z2.s\n  48:\t1e260040 \tfmov\tw0, s2\n  4c:\td65f03c0 \tret\n  50:\t1e2703e2 \tfmov\ts2, wzr\n  54:\t1e260040 \tfmov\tw0, s2\n  58:\td65f03c0 \tret\n\nNotice how udot is used inside a fully masked loop.\n\n\ngcc/Changelog:\n\n2019-05-07  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n\n\t* config/aarch64/aarch64-sve.md (<su>abd<mode>_3): New define_expand.\n\t(aarch64_<su>abd<mode>_3): Likewise.\n\t(*aarch64_<su>abd<mode>_3): New define_insn.\n\t(<sur>sad<vsi2qi>): New define_expand.\n\t* config/aarch64/iterators.md: Added MAX_OPP attribute.\n\t* tree-vect-loop.c (use_mask_by_cond_expr_p): Add SAD_EXPR.\n\t(build_vect_cond_expr): Likewise.\n\ngcc/testsuite/Changelog:\n \n2019-05-07  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n\n\t* gcc.target/aarch64/sve/sad_1.c: New test for sum of absolute\n\tdifferences.\n\nFrom-SVN: r270975", "tree": {"sha": "9f0ff9561477c22ee099d09330ce742f5830d9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f0ff9561477c22ee099d09330ce742f5830d9a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/comments", "author": null, "committer": null, "parents": [{"sha": "0a59215131c02dee4c8829f93d1ee678647614da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a59215131c02dee4c8829f93d1ee678647614da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a59215131c02dee4c8829f93d1ee678647614da"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "d55adb244864169b4b7152a2b3eb98c443aed802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "patch": "@@ -1,3 +1,13 @@\n+2019-05-07  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<su>abd<mode>_3): New define_expand.\n+\t(aarch64_<su>abd<mode>_3): Likewise.\n+\t(*aarch64_<su>abd<mode>_3): New define_insn.\n+\t(<sur>sad<vsi2qi>): New define_expand.\n+\t* config/aarch64/iterators.md: Added MAX_OPP attribute.\n+\t* tree-vect-loop.c (use_mask_by_cond_expr_p): Add SAD_EXPR.\n+\t(build_vect_cond_expr): Likewise.\n+\n 2019-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* cfgexpand.c (asm_clobber_reg_is_valid): Reject"}, {"sha": "e94801d9f8690f90181b8a63c8fac4857fbe16d5", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "patch": "@@ -3148,3 +3148,64 @@\n    movprfx\\t%0, %3\\;<sur>dot\\\\t%0.<Vetype>, %1.<Vetype_fourth>, %2.<Vetype_fourth>\"\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n+\n+;; Helper expander for aarch64_<su>abd<mode>_3 to save the callers\n+;; the hassle of constructing the other arm of the MINUS.\n+(define_expand \"<su>abd<mode>_3\"\n+  [(use (match_operand:SVE_I 0 \"register_operand\"))\n+   (USMAX:SVE_I (match_operand:SVE_I 1 \"register_operand\")\n+\t\t(match_operand:SVE_I 2 \"register_operand\"))]\n+  \"TARGET_SVE\"\n+  {\n+    rtx pred = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    rtx other_arm = gen_rtx_<MAX_OPP> (<MODE>mode, operands[1], operands[2]);\n+    emit_insn (gen_aarch64_<su>abd<mode>_3 (operands[0], pred, operands[1],\n+\t\t\t\t\t    operands[2], other_arm));\n+    DONE;\n+  }\n+)\n+\n+;; Predicated integer absolute difference.\n+(define_insn \"aarch64_<su>abd<mode>_3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (USMAX:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operator 4 \"aarch64_<max_opp>\"\n+\t       [(match_dup 2)\n+\t\t(match_dup 3)]))]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Emit a sequence to produce a sum-of-absolute-differences of the inputs in\n+;; operands 1 and 2.  The sequence also has to perform a widening reduction of\n+;; the difference into a vector and accumulate that into operand 3 before\n+;; copying that into the result operand 0.\n+;; Perform that with a sequence of:\n+;; MOV\t\tones.b, #1\n+;; [SU]ABD\tdiff.b, p0/m, op1.b, op2.b\n+;; MOVPRFX\top0, op3\t// If necessary\n+;; UDOT\t\top0.s, diff.b, ones.b\n+\n+(define_expand \"<sur>sad<vsi2qi>\"\n+  [(use (match_operand:SVE_SDI 0 \"register_operand\"))\n+   (unspec:<VSI2QI> [(use (match_operand:<VSI2QI> 1 \"register_operand\"))\n+\t\t    (use (match_operand:<VSI2QI> 2 \"register_operand\"))] ABAL)\n+   (use (match_operand:SVE_SDI 3 \"register_operand\"))]\n+  \"TARGET_SVE\"\n+  {\n+    rtx ones = force_reg (<VSI2QI>mode, CONST1_RTX (<VSI2QI>mode));\n+    rtx diff = gen_reg_rtx (<VSI2QI>mode);\n+    emit_insn (gen_<sur>abd<vsi2qi>_3 (diff, operands[1], operands[2]));\n+    emit_insn (gen_udot_prod<vsi2qi> (operands[0], diff, ones, operands[3]));\n+    DONE;\n+  }\n+)"}, {"sha": "20aa0e9d2b80192ff7ffbac00d1bae79026a8753", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "patch": "@@ -1060,6 +1060,9 @@\n ;; Map smax to smin and umax to umin.\n (define_code_attr max_opp [(smax \"smin\") (umax \"umin\")])\n \n+;; Same as above, but louder.\n+(define_code_attr MAX_OPP [(smax \"SMIN\") (umax \"UMIN\")])\n+\n ;; The number of subvectors in an SVE_STRUCT.\n (define_mode_attr vector_count [(VNx32QI \"2\") (VNx16HI \"2\")\n \t\t\t\t(VNx8SI  \"2\") (VNx4DI  \"2\")"}, {"sha": "ae3e09aae465782d23966616791444e8838701d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "patch": "@@ -1,3 +1,8 @@\n+2019-05-07  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\t* gcc.target/aarch64/sve/sad_1.c: New test for sum of absolute\n+\tdifferences.\n+\n 2019-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/asm-7.c: New test."}, {"sha": "e7bf64a57b169bac67afcbdfbe9c588260be80e4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sad_1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsad_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsad_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsad_1.c?ref=a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_SAD(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+TYPE1 __attribute__ ((noinline, noclone))\t\t\t\t\\\n+sum_abs_##TYPE1##_##TYPE2 (TYPE2 *restrict x, TYPE2 *restrict y, int n)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE1 sum = 0;\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      sum += __builtin_abs (x[i] - y[i]);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return sum;\t\t\t\t\t\t\t\t\\\n+}\n+\n+DEF_SAD(int32_t, uint8_t)\n+DEF_SAD(int32_t, int8_t)\n+DEF_SAD(int64_t, uint16_t)\n+DEF_SAD(int64_t, int16_t)\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tudot\\tz[0-9]+\\.s, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tudot\\tz[0-9]+\\.d, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */"}, {"sha": "057a87426779881064cddcfae5213c290365951d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fad8fe6c84de272f2a56d462e67d53c9f4a73d/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a9fad8fe6c84de272f2a56d462e67d53c9f4a73d", "patch": "@@ -5973,6 +5973,7 @@ use_mask_by_cond_expr_p (enum tree_code code, internal_fn cond_fn,\n   switch (code)\n     {\n     case DOT_PROD_EXPR:\n+    case SAD_EXPR:\n       return true;\n \n     default:\n@@ -6002,6 +6003,17 @@ build_vect_cond_expr (enum tree_code code, tree vop[3], tree mask,\n \tbreak;\n       }\n \n+    case SAD_EXPR:\n+      {\n+\ttree vectype = TREE_TYPE (vop[1]);\n+\ttree masked_op1 = make_temp_ssa_name (vectype, NULL, \"masked_op1\");\n+\tgassign *select = gimple_build_assign (masked_op1, VEC_COND_EXPR,\n+\t\t\t\t\t       mask, vop[1], vop[0]);\n+\tgsi_insert_before (gsi, select, GSI_SAME_STMT);\n+\tvop[1] = masked_op1;\n+\tbreak;\n+      }\n+\n     default:\n       gcc_unreachable ();\n     }"}]}