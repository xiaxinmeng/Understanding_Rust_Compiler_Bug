{"sha": "e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJjNzY4YjY0NDBhNzZjNTg1MGNlOWZjZjVlNGU3YzM5NWY3NTBkYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-19T13:19:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-19T13:19:01Z"}, "message": "re PR tree-optimization/69352 (profiledbootstrap failure with --with-build-config=bootstrap-lto)\n\n2016-01-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69352\n\t* tree-ssa-scopedtables.c (avail_expr_hash): Check for size == -1.\n\t(equal_mem_array_ref_p): Constrain size and max size properly.\n\tCompare the reverse flag.\n\n\t* gcc.dg/torture/pr69352.c: New testcase.\n\nFrom-SVN: r232557", "tree": {"sha": "0f5dc0fcb1d195f9aea40cb224df6113c27ccc84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f5dc0fcb1d195f9aea40cb224df6113c27ccc84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d20c47fc8613b26cd7d2c28996474bf910d865c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20c47fc8613b26cd7d2c28996474bf910d865c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20c47fc8613b26cd7d2c28996474bf910d865c5"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "fbf3e767137ae31326ce2c995f0c708d31b666d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "patch": "@@ -1,3 +1,10 @@\n+2016-01-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69352\n+\t* tree-ssa-scopedtables.c (avail_expr_hash): Check for size == -1.\n+\t(equal_mem_array_ref_p): Constrain size and max size properly.\n+\tCompare the reverse flag.\n+\n 2016-01-19  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* ira.c (ira): Update regstat data if we deleted insns."}, {"sha": "2a606599f3ca234cff1bcc07499118b731566c20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "patch": "@@ -1,3 +1,8 @@\n+2016-01-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69352\n+\t* gcc.dg/torture/pr69352.c: New testcase.\n+\n 2016-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/68955"}, {"sha": "ad718b9e644d7af04b1cc73107ba02dc067a8d68", "filename": "gcc/testsuite/gcc.dg/torture/pr69352.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69352.c?ref=e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+\n+int a[10][14], b, c, d, e, f, g, h, i;\n+void bar (void);\n+int\n+foo (int x)\n+{\n+  unsigned j;\n+  int k = 0, l;\n+  int m;\n+  if (h)\n+    m = 12;\n+  else\n+    m = 13;\n+  if (a[x][m])\n+    l = (long) foo;\n+  a[x][i] = l;\n+  while (c)\n+    {\n+      if (b)\n+\t{\n+\t  if (f)\n+\t    k = 1;\n+\t  bar ();\n+\t}\n+      for (; d;)\n+\tj++;\n+    }\n+  while (c)\n+    {\n+      if (a[x][12])\n+\t{\n+\t  if (g)\n+\t    k = 1;\n+\t  j++;\n+\t}\n+      c = e;\n+    }\n+  return k;\n+}"}, {"sha": "c421f435f20759ff0c2e379e7f7c1c240402f0ef", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c768b6440a76c5850ce9fcf5e4e7c395f750db/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=e2c768b6440a76c5850ce9fcf5e4e7c395f750db", "patch": "@@ -225,7 +225,8 @@ avail_expr_hash (class expr_hash_elt *p)\n \t\t\t\t\t       &reverse);\n \t  /* Strictly, we could try to normalize variable-sized accesses too,\n \t    but here we just deal with the common case.  */\n-\t  if (size == max_size)\n+\t  if (size != -1\n+\t      && size == max_size)\n \t    {\n \t      enum tree_code code = MEM_REF;\n \t      hstate.add_object (code);\n@@ -261,15 +262,22 @@ equal_mem_array_ref_p (tree t0, tree t1)\n   bool rev0;\n   HOST_WIDE_INT off0, sz0, max0;\n   tree base0 = get_ref_base_and_extent (t0, &off0, &sz0, &max0, &rev0);\n+  if (sz0 == -1\n+      || sz0 != max0)\n+    return false;\n \n   bool rev1;\n   HOST_WIDE_INT off1, sz1, max1;\n   tree base1 = get_ref_base_and_extent (t1, &off1, &sz1, &max1, &rev1);\n+  if (sz1 == -1\n+      || sz1 != max1)\n+    return false;\n+\n+  if (rev0 != rev1)\n+    return false;\n \n-  /* Types were compatible, so these are sanity checks.  */\n+  /* Types were compatible, so this is a sanity check.  */\n   gcc_assert (sz0 == sz1);\n-  gcc_assert (max0 == max1);\n-  gcc_assert (rev0 == rev1);\n \n   return (off0 == off1) && operand_equal_p (base0, base1, 0);\n }"}]}