{"sha": "22234f56d2395ae470961d3eb5fdc65a7597af9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyMzRmNTZkMjM5NWFlNDcwOTYxZDNlYjVmZGM2NWE3NTk3YWY5YQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-02-18T22:02:39Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-02-18T22:02:39Z"}, "message": "re PR preprocessor/14103 (ICEs on \"gcc -E -imacros foo.h baz.c\")\n\n\n\t* cpphash.h (struct cpp_buffer):  Restore return_at_eof field.  This\n\tpartly reverts my 2003-10-01 change, because we're back to logically\n\tincluding <command line> inside the main line.\n\t* cpplex.c (_cpp_get_fresh_line):  Check return_at_eof field.\n\t* cppmacro.c (cpp_scan_nooutput):  Set return_at_eof of current buffer.\n\tFixes PR preprocessor/14103.\n\n\t* cppfiles.c (_cpp_stack_include):  When appropriate decrement\n\tline_table's highest_location, fixing LAST_SOURCE_LINE_LOCATION.\n\t(cpp_push_include):  Don't need to increment pfile's line field.\n\t* line-map.h (LAST_SOURCE_LINE_LOCATION):  Only decrement by 1.\n\n\t* c-ppoutput.c (print struct):  New first_time field.\n\t(init_pp_output):  Set print.first_time.\n\t(pp_file_change):  Use print.first_time, rather than MAIN_FILE_P,\n\twhich is set also for (say) <command line>.  Clear print.first_time.\n\n\t* cppfiles.c (struct _cpp_file):  Comment and type for pch field\n\tdoes not match the code, so fix both.\n\t(should_stack_file):  Inline include_pch_p function.\n\t(include_pch_p):  Remove pointless function.\n\n\t* cpphash.h (struct cpp_buffer):  Remove unused search_cached field.\n\nFrom-SVN: r78049", "tree": {"sha": "e807c23671fa4dd53228ec168fcfa7e99628f896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e807c23671fa4dd53228ec168fcfa7e99628f896"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22234f56d2395ae470961d3eb5fdc65a7597af9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22234f56d2395ae470961d3eb5fdc65a7597af9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22234f56d2395ae470961d3eb5fdc65a7597af9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22234f56d2395ae470961d3eb5fdc65a7597af9a/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a6d9a81c7415f0efb61a18f5bd4890286a1c003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6d9a81c7415f0efb61a18f5bd4890286a1c003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6d9a81c7415f0efb61a18f5bd4890286a1c003"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "59750e81aa782e46412d7d3374d70bde5d61e67c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -1,3 +1,29 @@\n+2004-02-18  Per Bothner  <per@bothner.com>\n+\n+\t* cpphash.h (struct cpp_buffer):  Restore return_at_eof field.  This\n+\tpartly reverts my 2003-10-01 change, because we're back to logically\n+\tincluding <command line> inside the main line.\n+\t* cpplex.c (_cpp_get_fresh_line):  Check return_at_eof field.\n+\t* cppmacro.c (cpp_scan_nooutput):  Set return_at_eof of current buffer.\n+\tFixes PR preprocessor/14103.\n+\n+\t* cppfiles.c (_cpp_stack_include):  When appropriate decrement\n+\tline_table's highest_location, fixing LAST_SOURCE_LINE_LOCATION.\n+\t(cpp_push_include):  Don't need to increment pfile's line field.\n+\t* line-map.h (LAST_SOURCE_LINE_LOCATION):  Only decrement by 1.\n+\n+\t* c-ppoutput.c (print struct):  New first_time field.\n+\t(init_pp_output):  Set print.first_time.\n+\t(pp_file_change):  Use print.first_time, rather than MAIN_FILE_P,\n+\twhich is set also for (say) <command line>.  Clear print.first_time.\n+\n+\t* cppfiles.c (struct _cpp_file):  Comment and type for pch field\n+\tdoes not match the code, so fix both.\n+\t(should_stack_file):  Inline include_pch_p function.\n+\t(include_pch_p):  Remove pointless function.\n+\n+\t* cpphash.h (struct cpp_buffer):  Remove unused search_cached field.\n+\n 2004-02-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (four define_peephole2's): Use"}, {"sha": "24be879acb3a4ffd046ef26d494c5d83f7a24050", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -36,6 +36,7 @@ static struct\n   const cpp_token *source;\t/* Source token for spacing.  */\n   int src_line;\t\t\t/* Line number currently being written.  */\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n+  bool first_time;\t\t/* pp_file_change hasn't been called yet. */\n } print;\n \n /* General output routines.  */\n@@ -118,6 +119,7 @@ init_pp_output (FILE *out_stream)\n   print.printed = 0;\n   print.prev = 0;\n   print.outf = out_stream;\n+  print.first_time = 1;\n }\n \n /* Writes out the preprocessed file, handling spacing and paste\n@@ -365,12 +367,12 @@ pp_file_change (const struct line_map *map)\n \n   if (map != NULL)\n     {\n-      /* First time?  */\n-      if (MAIN_FILE_P (map))\n+      if (print.first_time)\n \t{\n \t  /* Avoid printing foo.i when the main file is foo.c.  */\n \t  if (!cpp_get_options (parse_in)->preprocessed)\n \t    print_line (map->start_location, flags);\n+\t  print.first_time = 0;\n \t}\n       else\n \t{"}, {"sha": "3a42e78639b1620e77ed79697e2b3f49f1baa9b9", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -109,11 +109,8 @@ struct _cpp_file\n   /* If BUFFER above contains the true contents of the file.  */\n   bool buffer_valid;\n \n-  /* 0: file not known to be a PCH.\n-     1: file is a PCH (on return from find_include_file).\n-     2: file is not and never will be a valid precompiled header.\n-     3: file is always a valid precompiled header.  */\n-  uchar pch;\n+  /* File is a PCH (on return from find_include_file). */\n+  bool pch;\n };\n \n /* A singly-linked list for all searches for a given file name, with\n@@ -180,7 +177,6 @@ static void read_name_map (cpp_dir *dir);\n static char *remap_filename (cpp_reader *pfile, _cpp_file *file);\n static char *append_file_to_dir (const char *fname, cpp_dir *dir);\n static bool validate_pch (cpp_reader *, _cpp_file *file, const char *pchname);\n-static bool include_pch_p (_cpp_file *file);\n static int pchf_adder (void **slot, void *data);\n static int pchf_save_compare (const void *e1, const void *e2);\n static int pchf_compare (const void *d_p, const void *e_p);\n@@ -577,7 +573,7 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n     return false;\n \n   /* Handle PCH files immediately; don't stack them.  */\n-  if (include_pch_p (file))\n+  if (file->pch)\n     {\n       pfile->cb.read_pch (pfile, file->path, file->fd, file->pchname);\n       close (file->fd);\n@@ -747,13 +743,25 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n \t\t    enum include_type type)\n {\n   struct cpp_dir *dir;\n+  _cpp_file *file;\n \n   dir = search_path_head (pfile, fname, angle_brackets, type);\n   if (!dir)\n     return false;\n \n-  return _cpp_stack_file (pfile, _cpp_find_file (pfile, fname, dir, false),\n-\t\t     type == IT_IMPORT);\n+  file = _cpp_find_file (pfile, fname, dir, false);\n+\n+  /* Compensate for the increment in linemap_add.  In the case of a\n+     normal #include, we're currently at the start of the line\n+     *following* the #include.  A separate source_location for this\n+     location makes no sense (until we do the LC_LEAVE), and\n+     complicates LAST_SOURCE_LINE_LOCATION.  This does not apply if we\n+     found a PCH file (in which case linemap_add is not called) or we\n+     were included from the command-line.  */\n+  if (! file->pch && file->err_no == 0 && type != IT_CMDLINE)\n+    pfile->line_table->highest_location--;\n+\n+  return _cpp_stack_file (pfile, file, type == IT_IMPORT);\n }\n \n /* Could not open FILE.  The complication is dependency output.  */\n@@ -1032,8 +1040,6 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n bool\n cpp_push_include (cpp_reader *pfile, const char *fname)\n {\n-  /* Make the command line directive take up a line.  */\n-  pfile->line++;\n   return _cpp_stack_include (pfile, fname, false, IT_CMDLINE);\n }\n \n@@ -1228,13 +1234,6 @@ remap_filename (cpp_reader *pfile, _cpp_file *file)\n     }\n }\n \n-/* Return true if FILE is usable by PCH.  */\n-static bool\n-include_pch_p (_cpp_file *file)\n-{\n-  return file->pch & 1;\n-}\n-\n /* Returns true if PCHNAME is a valid PCH file for FILE.  */\n static bool\n validate_pch (cpp_reader *pfile, _cpp_file *file, const char *pchname)"}, {"sha": "4e86bf37d5b320ae3e9d14f5c882d8fd63bcb9e6", "filename": "gcc/cpphash.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -310,9 +310,10 @@ struct cpp_buffer\n      buffers.  */\n   unsigned int from_stage3 : 1;\n \n-  /* Nonzero means that the directory to start searching for \"\"\n-     include files has been calculated and stored in \"dir\" below.  */\n-  unsigned char search_cached;\n+  /* At EOF, a buffer is automatically popped.  If RETURN_AT_EOF is\n+     true, a CPP_EOF token is then returned.  Otherwise, the next\n+     token from the enclosing buffer is returned.  */\n+  unsigned int return_at_eof : 1;\n \n   /* One for a system header, two for a C system header file that therefore\n      needs to be extern \"C\" protected in C++, and zero otherwise.  */"}, {"sha": "9912aac559cf9f8c8f3c8e6e5f11311874815b10", "filename": "gcc/cpplex.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -747,6 +747,8 @@ _cpp_lex_token (cpp_reader *pfile)\n bool\n _cpp_get_fresh_line (cpp_reader *pfile)\n {\n+  int return_at_eof;\n+\n   /* We can't get a new line until we leave the current directive.  */\n   if (pfile->state.in_directive)\n     return false;\n@@ -779,9 +781,10 @@ _cpp_get_fresh_line (cpp_reader *pfile)\n \t\t\t       CPP_BUF_COLUMN (buffer, buffer->cur),\n \t\t\t       \"no newline at end of file\");\n \t}\n- \n+\n+      return_at_eof = buffer->return_at_eof;\n       _cpp_pop_buffer (pfile);\n-      if (pfile->buffer == NULL)\n+      if (pfile->buffer == NULL || return_at_eof)\n \treturn false;\n     }\n }"}, {"sha": "f4e885740b4255ee59d9ffe2cd72f5f2a048e122", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -1138,6 +1138,10 @@ cpp_sys_macro_p (cpp_reader *pfile)\n void\n cpp_scan_nooutput (cpp_reader *pfile)\n {\n+  /* Request a CPP_EOF token at the end of this file, rather than\n+     transparently continuing with the including file.  */\n+  pfile->buffer->return_at_eof = true;\n+\n   if (CPP_OPTION (pfile, traditional))\n     while (_cpp_read_logical_line_trad (pfile))\n       ;"}, {"sha": "a3933a349e25d55c9b585248c9d0da3800f4a17a", "filename": "gcc/line-map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22234f56d2395ae470961d3eb5fdc65a7597af9a/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=22234f56d2395ae470961d3eb5fdc65a7597af9a", "patch": "@@ -147,7 +147,7 @@ extern void linemap_print_containing_files (struct line_maps *,\n #define LAST_SOURCE_LINE(MAP) \\\n   SOURCE_LINE (MAP, LAST_SOURCE_LINE_LOCATION (MAP))\n #define LAST_SOURCE_LINE_LOCATION(MAP) \\\n-  ((((MAP)[1].start_location - 2 - (MAP)->start_location) \\\n+  ((((MAP)[1].start_location - 1 - (MAP)->start_location) \\\n     & ~((1 << (MAP)->column_bits) - 1))\t\t\t  \\\n    + (MAP)->start_location)\n "}]}