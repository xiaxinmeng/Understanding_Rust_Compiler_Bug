{"sha": "fe8475c500939011b90504304aec61bf6f48ac7d", "node_id": "C_kwDOANBUbNoAKGZlODQ3NWM1MDA5MzkwMTFiOTA1MDQzMDRhZWM2MWJmNmY0OGFjN2Q", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-22T08:32:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-22T09:37:35Z"}, "message": "bootstrap/102681 - properly CSE PHIs with default def args\n\nThe PR shows that we fail to CSE PHIs containing (different)\ndefault definitions due to the fact on how we now handle\non-demand build of VN_INFO.  The following fixes this in the\nsame way the PHI visitation code does.\n\nOn gcc.dg/ubsan/pr81981.c this causes one expected warning to be\nelided since the uninit pass sees the change\n\n   <bb 4> [local count: 1073741824]:\n   # u$0_2 = PHI <u$0_5(D)(3), i_3(D)(5)>\n-  # cstore_11 = PHI <t$0_6(D)(3), i_3(D)(5)>\n   v = u$0_2;\n-  return cstore_11;\n+  return u$0_2;\n\nand thus only one of the conditionally uninitialized uses (the\nother became dead).  I have XFAILed the missing diagnostic,\nI don't see a way to preserve that.\n\n2021-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR bootstrap/102681\n\t* tree-ssa-sccvn.c (vn_phi_insert): For undefined SSA args\n\trecord VN_TOP.\n\t(vn_phi_lookup): Likewise.\n\n\t* gcc.dg/tree-ssa/ssa-fre-97.c: New testcase.\n\t* gcc.dg/ubsan/pr81981.c: XFAIL one case.", "tree": {"sha": "a80c3e0baa42ea49570b930bb3ba4e2509ef8bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a80c3e0baa42ea49570b930bb3ba4e2509ef8bac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe8475c500939011b90504304aec61bf6f48ac7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8475c500939011b90504304aec61bf6f48ac7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8475c500939011b90504304aec61bf6f48ac7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8475c500939011b90504304aec61bf6f48ac7d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5c540662e08de72c849bad992fea468e3b6017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5c540662e08de72c849bad992fea468e3b6017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5c540662e08de72c849bad992fea468e3b6017"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "2f09c8baeb8c41c7e7256008aa47a3a488a7ac17", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-97.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8475c500939011b90504304aec61bf6f48ac7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8475c500939011b90504304aec61bf6f48ac7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-97.c?ref=fe8475c500939011b90504304aec61bf6f48ac7d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* ethread threading does not yet catch this but it might at some point.  */\n+/* { dg-options \"-O -fdump-tree-fre1-details -fno-thread-jumps\" } */\n+\n+int foo (int b, int x)\n+{\n+  int i, j;\n+  if (b)\n+    i = x;\n+  if (b)\n+    j = x;\n+  return j == i;\n+}\n+\n+/* Even with different undefs we should CSE a PHI node with the\n+   same controlling condition.  */\n+\n+/* { dg-final { scan-tree-dump \"Replaced redundant PHI node\" \"fre1\" } } */\n+/* { dg-final { scan-tree-dump \"return 1;\" \"fre1\" } } */"}, {"sha": "d201efb3f65fd8af6d3b8189cb4122ba4b66f49b", "filename": "gcc/testsuite/gcc.dg/ubsan/pr81981.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8475c500939011b90504304aec61bf6f48ac7d/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr81981.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8475c500939011b90504304aec61bf6f48ac7d/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr81981.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr81981.c?ref=fe8475c500939011b90504304aec61bf6f48ac7d", "patch": "@@ -16,6 +16,6 @@ foo (int i)\n       u[0] = i;\n     }\n \n-  v = u[0];\t\t/* { dg-warning \"may be used uninitialized\" } */\n+  v = u[0];\t\t/* { dg-warning \"may be used uninitialized\" \"\" { xfail *-*-* } } */\n   return t[0];\t\t/* { dg-warning \"may be used uninitialized\" } */\n }"}, {"sha": "893b1d0ddaad452255a96d78c28619ceb27ae514", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8475c500939011b90504304aec61bf6f48ac7d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8475c500939011b90504304aec61bf6f48ac7d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=fe8475c500939011b90504304aec61bf6f48ac7d", "patch": "@@ -4499,7 +4499,12 @@ vn_phi_lookup (gimple *phi, bool backedges_varying_p)\n       tree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n       if (TREE_CODE (def) == SSA_NAME\n \t  && (!backedges_varying_p || !(e->flags & EDGE_DFS_BACK)))\n-\tdef = SSA_VAL (def);\n+\t{\n+\t  if (ssa_undefined_value_p (def, false))\n+\t    def = VN_TOP;\n+\t  else\n+\t    def = SSA_VAL (def);\n+\t}\n       vp1->phiargs[e->dest_idx] = def;\n     }\n   vp1->type = TREE_TYPE (gimple_phi_result (phi));\n@@ -4543,7 +4548,12 @@ vn_phi_insert (gimple *phi, tree result, bool backedges_varying_p)\n       tree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n       if (TREE_CODE (def) == SSA_NAME\n \t  && (!backedges_varying_p || !(e->flags & EDGE_DFS_BACK)))\n-\tdef = SSA_VAL (def);\n+\t{\n+\t  if (ssa_undefined_value_p (def, false))\n+\t    def = VN_TOP;\n+\t  else\n+\t    def = SSA_VAL (def);\n+\t}\n       vp1->phiargs[e->dest_idx] = def;\n     }\n   vp1->value_id = VN_INFO (result)->value_id;"}]}