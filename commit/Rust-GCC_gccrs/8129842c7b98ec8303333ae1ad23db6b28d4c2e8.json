{"sha": "8129842c7b98ec8303333ae1ad23db6b28d4c2e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyOTg0MmM3Yjk4ZWM4MzAzMzMzYWUxYWQyM2RiNmIyOGQ0YzJlOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T01:03:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T01:03:55Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r772", "tree": {"sha": "60a663743b4551bd27c4246998831bbd67c09eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60a663743b4551bd27c4246998831bbd67c09eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8129842c7b98ec8303333ae1ad23db6b28d4c2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8129842c7b98ec8303333ae1ad23db6b28d4c2e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8129842c7b98ec8303333ae1ad23db6b28d4c2e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8129842c7b98ec8303333ae1ad23db6b28d4c2e8/comments", "author": null, "committer": null, "parents": [{"sha": "41e8363acf2a026687701e26310894a76866d047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e8363acf2a026687701e26310894a76866d047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e8363acf2a026687701e26310894a76866d047"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "963da43aa84f261905b8b00cb33ebab4f84aff83", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8129842c7b98ec8303333ae1ad23db6b28d4c2e8/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8129842c7b98ec8303333ae1ad23db6b28d4c2e8/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8129842c7b98ec8303333ae1ad23db6b28d4c2e8", "patch": "@@ -358,11 +358,10 @@ emit_call_1 (funexp, funtype, stack_size, struct_value_size, next_arg_reg,\n    If IGNORE is nonzero, then we ignore the value of the function call.  */\n \n rtx\n-expand_call (exp, target, ignore, modifier)\n+expand_call (exp, target, ignore)\n      tree exp;\n      rtx target;\n      int ignore;\n-     enum expand_modifier modifier;\n {\n   /* List of actual parameters.  */\n   tree actparms = TREE_OPERAND (exp, 1);"}, {"sha": "bd4d3b62ef0a7a118e8dc5342cde0f6c69b57099", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8129842c7b98ec8303333ae1ad23db6b28d4c2e8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8129842c7b98ec8303333ae1ad23db6b28d4c2e8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8129842c7b98ec8303333ae1ad23db6b28d4c2e8", "patch": "@@ -2791,6 +2791,11 @@ safe_from_p (x, exp)\n \t  exp_rtl = SAVE_EXPR_RTL (exp);\n \t  break;\n \n+\tcase BIND_EXPR:\n+\t  /* The only operand we look at is operand 1.  The rest aren't\n+\t     part of the expression.  */\n+\t  return safe_from_p (x, TREE_OPERAND (exp, 1));\n+\n \tcase METHOD_CALL_EXPR:\n \t  /* This takes a rtx argument, but shouldn't appear here. */\n \t  abort ();\n@@ -3503,7 +3508,7 @@ expand_expr (exp, target, tmode, modifier)\n \t just return the result we got.  */\n       if (CALL_EXPR_RTL (exp) != 0)\n \treturn CALL_EXPR_RTL (exp);\n-      return expand_call (exp, target, ignore, modifier);\n+      return expand_call (exp, target, ignore);\n \n     case NON_LVALUE_EXPR:\n     case NOP_EXPR:\n@@ -4799,7 +4804,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n           /* The argument was not in the domain; do this via library call.\n \t     Pop the arguments right away in case the call gets deleted. */\n \t  NO_DEFER_POP;\n-          expand_call (exp, target, 0, 0);\n+          expand_call (exp, target, 0);\n \t  OK_DEFER_POP;\n \n           /* Branch around open coded version */\n@@ -5536,7 +5541,7 @@ preexpand_calls (exp)\n       if (TREE_CODE (TREE_OPERAND (exp, 0)) != ADDR_EXPR\n \t  || TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)) != FUNCTION_DECL\n \t  || ! DECL_BUILT_IN (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))\n-\tCALL_EXPR_RTL (exp) = expand_call (exp, 0, 0, 0);\n+\tCALL_EXPR_RTL (exp) = expand_call (exp, 0, 0);\n       return;\n \n     case COMPOUND_EXPR:"}]}