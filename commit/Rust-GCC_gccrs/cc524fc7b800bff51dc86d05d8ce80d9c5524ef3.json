{"sha": "cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1MjRmYzdiODAwYmZmNTFkYzg2ZDA1ZDhjZTgwZDljNTUyNGVmMw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-09T13:42:17Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-09T13:42:17Z"}, "message": "tree-flow.h (tm_restart_node, gimple_df): Move to gimple-ssa.h.\n\n\n\n\t* tree-flow.h (tm_restart_node, gimple_df): Move to gimple-ssa.h.\n\t(struct int_tree_map): Move to tree-hasher.h\n\t(SCALE, LABEL, PERCENT): Move to gimple.h\n\t* tree-flow-inline.h: Delete.  Move functions to other files.\n\t(unmodifiable_var_p, ref_contains_array_ref): Unused, so delete.\n\t* gimple-ssa.h (tm_restart_node, gimple_df): Relocate from tree-flow.h.\n\t(gimple_in_ssa_p, gimple_vop): Relocate from tree-flow-inline.h\n\t* gimple.h (imple_stmt_max_uid, set_gimple_stmt_max_uid,\n\tinc_gimple_stmt_max_uid, get_lineno): Relocate from tree-flow-inline.h.\n\t(SCALE, LABEL, PERCENT): Relocate from tree-flow.h\n\t* tree-hasher.h: Don't include tree-flow.h.\n\t(struct int_tree_map): Relocate from tree-flow.h.\n\t* tree-sra.c (contains_view_convert_expr_p): Relocate from\n\ttree-flow-inline.h and make static.\n\t* tree-ssa-alias.h (ranges_overlap_p): Relocate from tree-flow-inline.h.\n\t* tree-ssa-operands.c (gimple_ssa_operands): Relocate from\n\ttree-flow-inline.h and make static.\n\t* tree.h (is_global_var, may_be_aliased): Relocate from\n\ttree-flow-inline.h.\n\t* Makefile.in (GTFILES): Remove tree-flow.h and add gimple-ssa.h.\n\t* value-prof.c: No longer include tree-flow-inline.h.\n\t* tree-switch-conversion.c: No longer include tree-flow-inline.h.\n\nFrom-SVN: r203318", "tree": {"sha": "40318ce4bf8ae61fbdc6507579e982b6008fb23f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40318ce4bf8ae61fbdc6507579e982b6008fb23f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/comments", "author": null, "committer": null, "parents": [{"sha": "713438778be52a0cb0533fad271c05481435b519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713438778be52a0cb0533fad271c05481435b519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713438778be52a0cb0533fad271c05481435b519"}], "stats": {"total": 506, "additions": 234, "deletions": 272}, "files": [{"sha": "0ef409b8728915b1b54d3b923b0c57eacdd79bcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -1,3 +1,28 @@\n+2013-10-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-flow.h (tm_restart_node, gimple_df): Move to gimple-ssa.h.\n+\t(struct int_tree_map): Move to tree-hasher.h\n+\t(SCALE, LABEL, PERCENT): Move to gimple.h\n+\t* tree-flow-inline.h: Delete.  Move functions to other files.\n+\t(unmodifiable_var_p, ref_contains_array_ref): Unused, so delete.\n+\t* gimple-ssa.h (tm_restart_node, gimple_df): Relocate from tree-flow.h.\n+\t(gimple_in_ssa_p, gimple_vop): Relocate from tree-flow-inline.h\n+\t* gimple.h (imple_stmt_max_uid, set_gimple_stmt_max_uid,\n+\tinc_gimple_stmt_max_uid, get_lineno): Relocate from tree-flow-inline.h.\n+\t(SCALE, LABEL, PERCENT): Relocate from tree-flow.h\n+\t* tree-hasher.h: Don't include tree-flow.h.\n+\t(struct int_tree_map): Relocate from tree-flow.h.\n+\t* tree-sra.c (contains_view_convert_expr_p): Relocate from\n+\ttree-flow-inline.h and make static.\n+\t* tree-ssa-alias.h (ranges_overlap_p): Relocate from tree-flow-inline.h.\n+\t* tree-ssa-operands.c (gimple_ssa_operands): Relocate from\n+\ttree-flow-inline.h and make static.\n+\t* tree.h (is_global_var, may_be_aliased): Relocate from\n+\ttree-flow-inline.h.\n+\t* Makefile.in (GTFILES): Remove tree-flow.h and add gimple-ssa.h.\n+\t* value-prof.c: No longer include tree-flow-inline.h.\n+\t* tree-switch-conversion.c: No longer include tree-flow-inline.h.\n+\n 2013-10-09  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-flow.h: Move some protoypes.  Include new tree-ssa-loop.h."}, {"sha": "4e396aab9d9347e81226b3a5896744250deedbd8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -2241,7 +2241,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(srcdir)/gimple.h $(srcdir)/gimple.c \\\n-  $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \\\n+  $(srcdir)/tree-mudflap.c $(srcdir)/gimple-ssa.h \\\n   $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \\\n   $(srcdir)/tree-cfg.c \\\n   $(srcdir)/tree-dfa.c \\"}, {"sha": "f764efc64b203ee25cf90d7e366198abda29932f", "filename": "gcc/gimple-ssa.h", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Fgimple-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Fgimple-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa.h?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -21,6 +21,88 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GIMPLE_SSA_H\n #define GCC_GIMPLE_SSA_H\n \n+/* This structure is used to map a gimple statement to a label,\n+   or list of labels to represent transaction restart.  */\n+\n+struct GTY(()) tm_restart_node {\n+  gimple stmt;\n+  tree label_or_list;\n+};\n+\n+/* Gimple dataflow datastructure. All publicly available fields shall have\n+   gimple_ accessor defined, all publicly modifiable fields should have\n+   gimple_set accessor.  */\n+struct GTY(()) gimple_df {\n+  /* A vector of all the noreturn calls passed to modify_stmt.\n+     cleanup_control_flow uses it to detect cases where a mid-block\n+     indirect call has been turned into a noreturn call.  When this\n+     happens, all the instructions after the call are no longer\n+     reachable and must be deleted as dead.  */\n+  vec<gimple, va_gc> *modified_noreturn_calls;\n+\n+  /* Array of all SSA_NAMEs used in the function.  */\n+  vec<tree, va_gc> *ssa_names;\n+\n+  /* Artificial variable used for the virtual operand FUD chain.  */\n+  tree vop;\n+\n+  /* The PTA solution for the ESCAPED artificial variable.  */\n+  struct pt_solution escaped;\n+\n+  /* A map of decls to artificial ssa-names that point to the partition\n+     of the decl.  */\n+  struct pointer_map_t * GTY((skip(\"\"))) decls_to_pointers;\n+\n+  /* Free list of SSA_NAMEs.  */\n+  vec<tree, va_gc> *free_ssanames;\n+\n+  /* Hashtable holding definition for symbol.  If this field is not NULL, it\n+     means that the first reference to this variable in the function is a\n+     USE or a VUSE.  In those cases, the SSA renamer creates an SSA name\n+     for this variable with an empty defining statement.  */\n+  htab_t GTY((param_is (union tree_node))) default_defs;\n+\n+  /* True if there are any symbols that need to be renamed.  */\n+  unsigned int ssa_renaming_needed : 1;\n+\n+  /* True if all virtual operands need to be renamed.  */\n+  unsigned int rename_vops : 1;\n+\n+  /* True if the code is in ssa form.  */\n+  unsigned int in_ssa_p : 1;\n+\n+  /* True if IPA points-to information was computed for this function.  */\n+  unsigned int ipa_pta : 1;\n+\n+  struct ssa_operands ssa_operands;\n+\n+  /* Map gimple stmt to tree label (or list of labels) for transaction\n+     restart and abort.  */\n+  htab_t GTY ((param_is (struct tm_restart_node))) tm_restart;\n+};\n+\n+\n+/* Return true when gimple SSA form was built.\n+   gimple_in_ssa_p is queried by gimplifier in various early stages before SSA\n+   infrastructure is initialized.  Check for presence of the datastructures\n+   at first place.  */\n+static inline bool\n+gimple_in_ssa_p (const struct function *fun)\n+{\n+  return fun && fun->gimple_df && fun->gimple_df->in_ssa_p;\n+}\n+\n+/* Inline functions for manipulating various data structures defined in\n+   tree-flow.h.  See tree-flow.h for documentation.  */\n+\n+/* Artificial variable used for the virtual operand FUD chain.  */\n+static inline tree\n+gimple_vop (const struct function *fun)\n+{\n+  gcc_checking_assert (fun && fun->gimple_df);\n+  return fun->gimple_df->vop;\n+}\n+\n /* Return the set of VUSE operand for statement G.  */\n \n static inline use_operand_p"}, {"sha": "e8e98ad701e3b7fbfc4d145698403e1a1a92d23b", "filename": "gcc/gimple.h", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -1028,6 +1028,27 @@ is_gimple_sizepos (tree expr)\n \t  || CONTAINS_PLACEHOLDER_P (expr));\n }                                        \n \n+/* Get the number of the next statement uid to be allocated.  */\n+static inline unsigned int\n+gimple_stmt_max_uid (struct function *fn)\n+{\n+  return fn->last_stmt_uid;\n+}\n+\n+/* Set the number of the next statement uid to be allocated.  */\n+static inline void\n+set_gimple_stmt_max_uid (struct function *fn, unsigned int maxid)\n+{\n+  fn->last_stmt_uid = maxid;\n+}\n+\n+/* Set the number of the next statement uid to be allocated.  */\n+static inline unsigned int\n+inc_gimple_stmt_max_uid (struct function *fn)\n+{\n+  return fn->last_stmt_uid++;\n+}\n+\n extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n \t\t\t\t\t   bool (*) (tree), fallback_t);\n extern void gimplify_type_sizes (tree, gimple_seq *);\n@@ -1055,6 +1076,7 @@ extern tree gimple_boolify (tree);\n extern gimple_predicate rhs_predicate_for (tree);\n extern tree canonicalize_cond_expr_cond (tree);\n extern void dump_decl_set (FILE *, bitmap);\n+extern bool gimple_can_coalesce_p (tree, tree);\n extern bool nonfreeing_call_p (gimple);\n \n /* In omp-low.c.  */\n@@ -1077,9 +1099,6 @@ extern tree gimple_assign_rhs_to_tree (gimple);\n /* In builtins.c  */\n extern bool validate_gimple_arglist (const_gimple, ...);\n \n-/* In tree-ssa-coalesce.c */\n-extern bool gimple_can_coalesce_p (tree, tree);\n-\n /* Return the first node in GIMPLE sequence S.  */\n \n static inline gimple_seq_node\n@@ -3910,6 +3929,23 @@ gimple_debug_source_bind_set_value (gimple dbg, tree value)\n   gimple_set_op (dbg, 1, value);\n }\n \n+/* Return the line number for EXPR, or return -1 if we have no line\n+   number information for it.  */\n+static inline int\n+get_lineno (const_gimple stmt)\n+{\n+  location_t loc;\n+\n+  if (!stmt)\n+    return -1;\n+\n+  loc = gimple_location (stmt);\n+  if (loc == UNKNOWN_LOCATION)\n+    return -1;\n+\n+  return LOCATION_LINE (loc);\n+}\n+\n /* Return a pointer to the body for the OMP statement GS.  */\n \n static inline gimple_seq *\n@@ -5431,4 +5467,16 @@ gimple_seq_set_location (gimple_seq seq, location_t loc)\n     gimple_set_location (gsi_stmt (i), loc);\n }\n \n+/* Macros for showing usage statistics.  */\n+#define SCALE(x) ((unsigned long) ((x) < 1024*10\t\\\n+\t\t  ? (x)\t\t\t\t\t\\\n+\t\t  : ((x) < 1024*1024*10\t\t\t\\\n+\t\t     ? (x) / 1024\t\t\t\\\n+\t\t     : (x) / (1024*1024))))\n+\n+#define LABEL(x) ((x) < 1024*10 ? 'b' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n+\n+#define PERCENT(x,y) ((float)(x) * 100.0 / (float)(y))\n+\n+\n #endif  /* GCC_GIMPLE_H */"}, {"sha": "8243f29774748a2067669cc71d1fd819989644cd", "filename": "gcc/tree-flow-inline.h", "status": "removed", "additions": 0, "deletions": 182, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713438778be52a0cb0533fad271c05481435b519/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713438778be52a0cb0533fad271c05481435b519/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=713438778be52a0cb0533fad271c05481435b519", "patch": "@@ -1,182 +0,0 @@\n-/* Inline functions for tree-flow.h\n-   Copyright (C) 2001-2013 Free Software Foundation, Inc.\n-   Contributed by Diego Novillo <dnovillo@redhat.com>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef _TREE_FLOW_INLINE_H\n-#define _TREE_FLOW_INLINE_H 1\n-\n-/* Inline functions for manipulating various data structures defined in\n-   tree-flow.h.  See tree-flow.h for documentation.  */\n-\n-/* Return true when gimple SSA form was built.\n-   gimple_in_ssa_p is queried by gimplifier in various early stages before SSA\n-   infrastructure is initialized.  Check for presence of the datastructures\n-   at first place.  */\n-static inline bool\n-gimple_in_ssa_p (const struct function *fun)\n-{\n-  return fun && fun->gimple_df && fun->gimple_df->in_ssa_p;\n-}\n-\n-/* Artificial variable used for the virtual operand FUD chain.  */\n-static inline tree\n-gimple_vop (const struct function *fun)\n-{\n-  gcc_checking_assert (fun && fun->gimple_df);\n-  return fun->gimple_df->vop;\n-}\n-\n-/* Get the number of the next statement uid to be allocated.  */\n-static inline unsigned int\n-gimple_stmt_max_uid (struct function *fn)\n-{\n-  return fn->last_stmt_uid;\n-}\n-\n-/* Set the number of the next statement uid to be allocated.  */\n-static inline void\n-set_gimple_stmt_max_uid (struct function *fn, unsigned int maxid)\n-{\n-  fn->last_stmt_uid = maxid;\n-}\n-\n-/* Set the number of the next statement uid to be allocated.  */\n-static inline unsigned int\n-inc_gimple_stmt_max_uid (struct function *fn)\n-{\n-  return fn->last_stmt_uid++;\n-}\n-\n-/* Return the line number for EXPR, or return -1 if we have no line\n-   number information for it.  */\n-static inline int\n-get_lineno (const_gimple stmt)\n-{\n-  location_t loc;\n-\n-  if (!stmt)\n-    return -1;\n-\n-  loc = gimple_location (stmt);\n-  if (loc == UNKNOWN_LOCATION)\n-    return -1;\n-\n-  return LOCATION_LINE (loc);\n-}\n-\n-\n-/* Return true if T (assumed to be a DECL) is a global variable.\n-   A variable is considered global if its storage is not automatic.  */\n-\n-static inline bool\n-is_global_var (const_tree t)\n-{\n-  return (TREE_STATIC (t) || DECL_EXTERNAL (t));\n-}\n-\n-\n-/* Return true if VAR may be aliased.  A variable is considered as\n-   maybe aliased if it has its address taken by the local TU\n-   or possibly by another TU and might be modified through a pointer.  */\n-\n-static inline bool\n-may_be_aliased (const_tree var)\n-{\n-  return (TREE_CODE (var) != CONST_DECL\n-\t  && !((TREE_STATIC (var) || TREE_PUBLIC (var) || DECL_EXTERNAL (var))\n-\t       && TREE_READONLY (var)\n-\t       && !TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (var)))\n-\t  && (TREE_PUBLIC (var)\n-\t      || DECL_EXTERNAL (var)\n-\t      || TREE_ADDRESSABLE (var)));\n-}\n-\n-/* Return true if VAR cannot be modified by the program.  */\n-\n-static inline bool\n-unmodifiable_var_p (const_tree var)\n-{\n-  if (TREE_CODE (var) == SSA_NAME)\n-    var = SSA_NAME_VAR (var);\n-\n-  return TREE_READONLY (var) && (TREE_STATIC (var) || DECL_EXTERNAL (var));\n-}\n-\n-/* Return true if REF, a handled component reference, has an ARRAY_REF\n-   somewhere in it.  */\n-\n-static inline bool\n-ref_contains_array_ref (const_tree ref)\n-{\n-  gcc_checking_assert (handled_component_p (ref));\n-\n-  do {\n-    if (TREE_CODE (ref) == ARRAY_REF)\n-      return true;\n-    ref = TREE_OPERAND (ref, 0);\n-  } while (handled_component_p (ref));\n-\n-  return false;\n-}\n-\n-/* Return true if REF has an VIEW_CONVERT_EXPR somewhere in it.  */\n-\n-static inline bool\n-contains_view_convert_expr_p (const_tree ref)\n-{\n-  while (handled_component_p (ref))\n-    {\n-      if (TREE_CODE (ref) == VIEW_CONVERT_EXPR)\n-\treturn true;\n-      ref = TREE_OPERAND (ref, 0);\n-    }\n-\n-  return false;\n-}\n-\n-/* Return true, if the two ranges [POS1, SIZE1] and [POS2, SIZE2]\n-   overlap.  SIZE1 and/or SIZE2 can be (unsigned)-1 in which case the\n-   range is open-ended.  Otherwise return false.  */\n-\n-static inline bool\n-ranges_overlap_p (unsigned HOST_WIDE_INT pos1,\n-\t\t  unsigned HOST_WIDE_INT size1,\n-\t\t  unsigned HOST_WIDE_INT pos2,\n-\t\t  unsigned HOST_WIDE_INT size2)\n-{\n-  if (pos1 >= pos2\n-      && (size2 == (unsigned HOST_WIDE_INT)-1\n-\t  || pos1 < (pos2 + size2)))\n-    return true;\n-  if (pos2 >= pos1\n-      && (size1 == (unsigned HOST_WIDE_INT)-1\n-\t  || pos2 < (pos1 + size1)))\n-    return true;\n-\n-  return false;\n-}\n-\n-/* Accessor to tree-ssa-operands.c caches.  */\n-static inline struct ssa_operands *\n-gimple_ssa_operands (const struct function *fun)\n-{\n-  return &fun->gimple_df->ssa_operands;\n-}\n-\n-#endif /* _TREE_FLOW_INLINE_H  */"}, {"sha": "1f0fb3e199c1b2618f28b2699ee70cb57830e73c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -37,87 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-into-ssa.h\"\n #include \"tree-ssa-loop.h\"\n \n-/* This structure is used to map a gimple statement to a label,\n-   or list of labels to represent transaction restart.  */\n-\n-struct GTY(()) tm_restart_node {\n-  gimple stmt;\n-  tree label_or_list;\n-};\n-\n-/* Gimple dataflow datastructure. All publicly available fields shall have\n-   gimple_ accessor defined in tree-flow-inline.h, all publicly modifiable\n-   fields should have gimple_set accessor.  */\n-struct GTY(()) gimple_df {\n-  /* A vector of all the noreturn calls passed to modify_stmt.\n-     cleanup_control_flow uses it to detect cases where a mid-block\n-     indirect call has been turned into a noreturn call.  When this\n-     happens, all the instructions after the call are no longer\n-     reachable and must be deleted as dead.  */\n-  vec<gimple, va_gc> *modified_noreturn_calls;\n-\n-  /* Array of all SSA_NAMEs used in the function.  */\n-  vec<tree, va_gc> *ssa_names;\n-\n-  /* Artificial variable used for the virtual operand FUD chain.  */\n-  tree vop;\n-\n-  /* The PTA solution for the ESCAPED artificial variable.  */\n-  struct pt_solution escaped;\n-\n-  /* A map of decls to artificial ssa-names that point to the partition\n-     of the decl.  */\n-  struct pointer_map_t * GTY((skip(\"\"))) decls_to_pointers;\n-\n-  /* Free list of SSA_NAMEs.  */\n-  vec<tree, va_gc> *free_ssanames;\n-\n-  /* Hashtable holding definition for symbol.  If this field is not NULL, it\n-     means that the first reference to this variable in the function is a\n-     USE or a VUSE.  In those cases, the SSA renamer creates an SSA name\n-     for this variable with an empty defining statement.  */\n-  htab_t GTY((param_is (union tree_node))) default_defs;\n-\n-  /* True if there are any symbols that need to be renamed.  */\n-  unsigned int ssa_renaming_needed : 1;\n-\n-  /* True if all virtual operands need to be renamed.  */\n-  unsigned int rename_vops : 1;\n-\n-  /* True if the code is in ssa form.  */\n-  unsigned int in_ssa_p : 1;\n-\n-  /* True if IPA points-to information was computed for this function.  */\n-  unsigned int ipa_pta : 1;\n-\n-  struct ssa_operands ssa_operands;\n-\n-  /* Map gimple stmt to tree label (or list of labels) for transaction\n-     restart and abort.  */\n-  htab_t GTY ((param_is (struct tm_restart_node))) tm_restart;\n-};\n-\n-static inline int get_lineno (const_gimple);\n-\n-/*---------------------------------------------------------------------------\n-\t\t\t      Global declarations\n----------------------------------------------------------------------------*/\n-struct int_tree_map {\n-  unsigned int uid;\n-  tree to;\n-};\n-\n-/* Macros for showing usage statistics.  */\n-#define SCALE(x) ((unsigned long) ((x) < 1024*10\t\\\n-\t\t  ? (x)\t\t\t\t\t\\\n-\t\t  : ((x) < 1024*1024*10\t\t\t\\\n-\t\t     ? (x) / 1024\t\t\t\\\n-\t\t     : (x) / (1024*1024))))\n-\n-#define LABEL(x) ((x) < 1024*10 ? 'b' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n-\n-#define PERCENT(x,y) ((float)(x) * 100.0 / (float)(y))\n-\n /*---------------------------------------------------------------------------\n \t\t\t      OpenMP Region Tree\n ---------------------------------------------------------------------------*/\n@@ -323,6 +242,4 @@ void warn_function_noreturn (tree);\n /* In tree-parloops.c  */\n bool parallelized_function_p (tree);\n \n-#include \"tree-flow-inline.h\"\n-\n #endif /* _TREE_FLOW_H  */"}, {"sha": "ac4bb6e17b0a315e510d43a2395352aefe885330", "filename": "gcc/tree-hasher.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-hasher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-hasher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-hasher.h?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -22,7 +22,11 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_HASHER_H 1\n \n #include \"hash-table.h\"\n-#include \"tree-flow.h\"\n+\n+struct int_tree_map {\n+  unsigned int uid;\n+  tree to;\n+};\n \n /* Hashtable helpers.  */\n "}, {"sha": "82520bafcdbebb07efd1d87be28f4b9b8e16c5ac", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -1009,6 +1009,21 @@ completely_scalarize_var (tree var)\n   completely_scalarize_record (var, var, 0, var);\n }\n \n+/* Return true if REF has an VIEW_CONVERT_EXPR somewhere in it.  */\n+\n+static inline bool\n+contains_view_convert_expr_p (const_tree ref)\n+{\n+  while (handled_component_p (ref))\n+    {\n+      if (TREE_CODE (ref) == VIEW_CONVERT_EXPR)\n+\treturn true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+\n+  return false;\n+}\n+\n /* Search the given tree for a declaration by skipping handled components and\n    exclude it from the candidates.  */\n "}, {"sha": "831cffebecba627b0831f1394f4cef20b0d80744", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -141,5 +141,28 @@ extern void dump_pta_stats (FILE *);\n \n extern GTY(()) struct pt_solution ipa_escaped_pt;\n \n+/* Return true, if the two ranges [POS1, SIZE1] and [POS2, SIZE2]\n+   overlap.  SIZE1 and/or SIZE2 can be (unsigned)-1 in which case the\n+   range is open-ended.  Otherwise return false.  */\n+\n+static inline bool\n+ranges_overlap_p (unsigned HOST_WIDE_INT pos1,\n+\t\t  unsigned HOST_WIDE_INT size1,\n+\t\t  unsigned HOST_WIDE_INT pos2,\n+\t\t  unsigned HOST_WIDE_INT size2)\n+{\n+  if (pos1 >= pos2\n+      && (size2 == (unsigned HOST_WIDE_INT)-1\n+\t  || pos1 < (pos2 + size2)))\n+    return true;\n+  if (pos2 >= pos1\n+      && (size1 == (unsigned HOST_WIDE_INT)-1\n+\t  || pos2 < (pos1 + size1)))\n+    return true;\n+\n+  return false;\n+}\n+\n+\n \n #endif /* TREE_SSA_ALIAS_H  */"}, {"sha": "603f7975bcb79eda55eac3f9649ce9e834975b4a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -122,6 +122,13 @@ static void get_expr_operands (gimple, tree *, int);\n /* Number of functions with initialized ssa_operands.  */\n static int n_initialized = 0;\n \n+/* Accessor to tree-ssa-operands.c caches.  */\n+static inline struct ssa_operands *\n+gimple_ssa_operands (const struct function *fun)\n+{\n+  return &fun->gimple_df->ssa_operands;\n+}\n+\n \n /*  Return true if the SSA operands cache is active.  */\n "}, {"sha": "04beab6bf754018ec8ecb6ac68104e5b4c833a1d", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -32,7 +32,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"tree-ssa.h\"\n-#include \"tree-flow-inline.h\"\n #include \"tree-ssa-operands.h\"\n #include \"tree-pass.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "fa9d6059c4bfdb7c456aa02095d5f7bf1f8d24a1", "filename": "gcc/tree.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -4951,6 +4951,31 @@ builtin_decl_implicit_p (enum built_in_function fncode)\n \t  && builtin_info.implicit_p[uns_fncode]);\n }\n \n+/* Return true if T (assumed to be a DECL) is a global variable.\n+   A variable is considered global if its storage is not automatic.  */\n+\n+static inline bool\n+is_global_var (const_tree t)\n+{\n+  return (TREE_STATIC (t) || DECL_EXTERNAL (t));\n+}\n+\n+/* Return true if VAR may be aliased.  A variable is considered as\n+   maybe aliased if it has its address taken by the local TU\n+   or possibly by another TU and might be modified through a pointer.  */\n+\n+static inline bool\n+may_be_aliased (const_tree var)\n+{\n+  return (TREE_CODE (var) != CONST_DECL\n+\t  && !((TREE_STATIC (var) || TREE_PUBLIC (var) || DECL_EXTERNAL (var))\n+\t       && TREE_READONLY (var)\n+\t       && !TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (var)))\n+\t  && (TREE_PUBLIC (var)\n+\t      || DECL_EXTERNAL (var)\n+\t      || TREE_ADDRESSABLE (var)));\n+}\n+\n /* For anonymous aggregate types, we need some sort of name to\n    hold on to.  In practice, this should not appear, but it should\n    not be harmful if it does.  */"}, {"sha": "b19aefbfdd88a997caf3f35d66c4d70c92bfac5e", "filename": "gcc/value-prof.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc524fc7b800bff51dc86d05d8ce80d9c5524ef3/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=cc524fc7b800bff51dc86d05d8ce80d9c5524ef3", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"ggc.h\"\n #include \"tree-ssa.h\"\n-#include \"tree-flow-inline.h\"\n #include \"diagnostic.h\"\n #include \"gimple-pretty-print.h\"\n #include \"coverage.h\""}]}