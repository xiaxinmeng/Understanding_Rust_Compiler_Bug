{"sha": "2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2NTVhMGE0ZmQ5OWQyMjIxYTA1ZjVjYjk2NzQwZTc4ZTRlZmRlYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-09-27T04:25:34Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-09-27T04:25:34Z"}, "message": "inclhack.def (solaris_mutex_init_2): Remove test for PTHREAD_RWLOCK_INITIALIZER.\n\n\t* inclhack.def (solaris_mutex_init_2): Remove test for\n\tPTHREAD_RWLOCK_INITIALIZER.\n\t(solaris_rwlock_init_1): New.\n\t* tests/base/pthread.h: Update.\n\n\t* inclhack.def (solaris_once_init_1): New.\n\t* tests/base/pthread.h: Adjust for new fix.\n\t\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r117244", "tree": {"sha": "42a64537c4a224b5d30ca4f1b8fd71c927c48937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a64537c4a224b5d30ca4f1b8fd71c927c48937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/comments", "author": null, "committer": null, "parents": [{"sha": "66c975fe00d4b8ba935509358a02aee9d5038627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c975fe00d4b8ba935509358a02aee9d5038627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c975fe00d4b8ba935509358a02aee9d5038627"}], "stats": {"total": 181, "additions": 172, "deletions": 9}, "files": [{"sha": "4c311cf4a355182dce02980ada00b05ad787525f", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "patch": "@@ -1,3 +1,15 @@\n+2006-09-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* inclhack.def (solaris_mutex_init_2): Remove test for\n+\tPTHREAD_RWLOCK_INITIALIZER.\n+\t(solaris_rwlock_init_1): New.\n+\t* tests/base/pthread.h: Update.\n+\n+\t* inclhack.def (solaris_once_init_1): New.\n+\t* tests/base/pthread.h: Adjust for new fix.\n+\t\n+\t* fixincl.x: Regenerate.\n+\n 2006-07-17  Roger Sayle  <roger@eyesopen.com>\n \n \t* tests/base/errno.h: New file."}, {"sha": "cd1b3c5206bab36ecf644931c9d7d9d6457c3096", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 97, "deletions": 5, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Thursday June 22, 2006 at 03:07:03 PM PDT\n+ * It has been AutoGen-ed  Tuesday September 26, 2006 at 11:56:29 AM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Jun 22 15:07:03 PDT 2006\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Tue Sep 26 11:56:29 EDT 2006\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 196 fixup descriptions.\n+ * This file contains 198 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -5496,6 +5496,86 @@ static const char* apzSolaris_Mutex_Init_2Patch[] = {\n     \"(^#define[ \\t]+PTHREAD_(MUTEX|COND)_INITIALIZER[ \\t]+\\\\{.*),[ \\t]*0\\\\}(|[ \\t].*)$\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Rwlock_Init_1 fix\n+ */\n+tSCC zSolaris_Rwlock_Init_1Name[] =\n+     \"solaris_rwlock_init_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Rwlock_Init_1List[] =\n+  \"|pthread.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Rwlock_Init_1Machs[] = {\n+        \"*-*-solaris*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Rwlock_Init_1Select0[] =\n+       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_RWLOCK_INIT_1_TEST_CT  1\n+static tTestDesc aSolaris_Rwlock_Init_1Tests[] = {\n+  { TT_EGREP,    zSolaris_Rwlock_Init_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Rwlock_Init_1\n+ */\n+static const char* apzSolaris_Rwlock_Init_1Patch[] = {\n+    \"format\",\n+    \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\\\n+%0\\n\\\n+#else\\n\\\n+%1{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}\\n\\\n+#endif\",\n+    \"(^#define[ \\t]+PTHREAD_RWLOCK_INITIALIZER[ \\t]+)\\\\{0, 0, 0, \\\\{0, 0, 0\\\\}, \\\\{0, 0\\\\}, \\\\{0, 0\\\\}\\\\}[ \\t]*$\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Once_Init_1 fix\n+ */\n+tSCC zSolaris_Once_Init_1Name[] =\n+     \"solaris_once_init_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Once_Init_1List[] =\n+  \"|pthread.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Once_Init_1Machs[] = {\n+        \"*-*-solaris*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Once_Init_1Select0[] =\n+       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_ONCE_INIT_1_TEST_CT  1\n+static tTestDesc aSolaris_Once_Init_1Tests[] = {\n+  { TT_EGREP,    zSolaris_Once_Init_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Once_Init_1\n+ */\n+static const char* apzSolaris_Once_Init_1Patch[] = {\n+    \"format\",\n+    \"%1{%2}%3\",\n+    \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{)([^}]+)(\\\\})[ \\t]*$\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Socket fix\n@@ -7977,9 +8057,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          239\n+#define REGEX_COUNT          241\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            196\n+#define FIX_COUNT            198\n \n /*\n  *  Enumerate the fixes\n@@ -8118,6 +8198,8 @@ typedef enum {\n     SOLARIS_MATH_9_FIXIDX,\n     SOLARIS_MUTEX_INIT_1_FIXIDX,\n     SOLARIS_MUTEX_INIT_2_FIXIDX,\n+    SOLARIS_RWLOCK_INIT_1_FIXIDX,\n+    SOLARIS_ONCE_INIT_1_FIXIDX,\n     SOLARIS_SOCKET_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n     SOLARIS_UNISTD_FIXIDX,\n@@ -8849,6 +8931,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_MUTEX_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Mutex_Init_2Tests,   apzSolaris_Mutex_Init_2Patch, 0 },\n \n+  {  zSolaris_Rwlock_Init_1Name,    zSolaris_Rwlock_Init_1List,\n+     apzSolaris_Rwlock_Init_1Machs,\n+     SOLARIS_RWLOCK_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Rwlock_Init_1Tests,   apzSolaris_Rwlock_Init_1Patch, 0 },\n+\n+  {  zSolaris_Once_Init_1Name,    zSolaris_Once_Init_1List,\n+     apzSolaris_Once_Init_1Machs,\n+     SOLARIS_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Once_Init_1Tests,   apzSolaris_Once_Init_1Patch, 0 },\n+\n   {  zSolaris_SocketName,    zSolaris_SocketList,\n      apzSolaris_SocketMachs,\n      SOLARIS_SOCKET_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "04e6aa1cc7f8dd5f27356c9aeea32ca54001e309", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "patch": "@@ -2983,9 +2983,53 @@ fix = {\n     test_text =\n     '#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"'\"\\n\"\n     \"#define PTHREAD_MUTEX_INITIALIZER\\t{{{0},0}, {{{0}}}, 0}\\n\"\n-    \"#define PTHREAD_COND_INITIALIZER\\t{{{0}, 0}, 0}\\t/* DEFAULTCV */\\n\"\n-    \"#define PTHREAD_RWLOCK_INITIALIZER\\t\"\n-             \"{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}\";\n+    \"#define PTHREAD_COND_INITIALIZER\\t{{{0}, 0}, 0}\\t/* DEFAULTCV */\";\n+};\n+\n+\n+/*\n+ * Sun Solaris defines PTHREAD_RWLOCK_INITIALIZER with a \"0\" for some\n+ *  fields of the pthread_rwlock_t structure, which are of type\n+ *  upad64_t, which itself is typedef'd to int64_t, but with __STDC__\n+ *  defined (e.g. by -ansi) it is a union. So change the initializer\n+ *  to \"{0}\" instead.\n+ */\n+fix = {\n+    hackname = solaris_rwlock_init_1;\n+    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files = pthread.h;\n+    mach = '*-*-solaris*';\n+    c_fix = format;\n+    c_fix_arg = \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\"\n+                \"%0\\n\"\n+                \"#else\\n\"\n+                \"%1{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}\\n\"\n+                \"#endif\";\n+    c_fix_arg = \"(^#define[ \\t]+PTHREAD_RWLOCK_INITIALIZER[ \\t]+)\"\n+                \"\\\\{0, 0, 0, \\\\{0, 0, 0\\\\}, \\\\{0, 0\\\\}, \\\\{0, 0\\\\}\\\\}[ \\t]*$\";\n+\n+    test_text =\n+    '#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"'\"\\n\"\n+    \"#define PTHREAD_RWLOCK_INITIALIZER\\t{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}\";\n+};\n+\n+\n+/*\n+ * Sun Solaris defines PTHREAD_ONCE_INIT as an array containing a\n+ * structure.  As such, it need two levels of brackets, but only\n+ * contains one.  Wrap the macro definition in an extra layer.\n+ */\n+fix = {\n+    hackname = solaris_once_init_1;\n+    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files = pthread.h;\n+    mach = '*-*-solaris*';\n+    c_fix = format;\n+    c_fix_arg = \"%1{%2}%3\";\n+    c_fix_arg = \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{)([^}]+)(\\\\})[ \\t]*$\";\n+    test_text =\n+    '#pragma ident\t\"@(#)pthread.h\t1.37\t04/09/28 SMI\"'\"\\n\"\n+    \"#define PTHREAD_ONCE_INIT\\t{0, 0, 0, PTHREAD_ONCE_NOTDONE}\";\n };\n \n "}, {"sha": "8b7f97b0b9c3d16d6e00086e5acd8c1d7094e341", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b655a0a4fd99d2221a05f5cb96740e78e4efdeb/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=2b655a0a4fd99d2221a05f5cb96740e78e4efdeb", "patch": "@@ -94,10 +94,25 @@ extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n #else\n #define PTHREAD_COND_INITIALIZER\t{{{0}, 0}, {0}}\t/* DEFAULTCV */\n #endif\n-#define PTHREAD_RWLOCK_INITIALIZER\t{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}\n #endif  /* SOLARIS_MUTEX_INIT_2_CHECK */\n \n \n+#if defined( SOLARIS_RWLOCK_INIT_1_CHECK )\n+#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n+#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n+#define PTHREAD_RWLOCK_INITIALIZER\t{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}\n+#else\n+#define PTHREAD_RWLOCK_INITIALIZER\t{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}\n+#endif\n+#endif  /* SOLARIS_RWLOCK_INIT_1_CHECK */\n+\n+\n+#if defined( SOLARIS_ONCE_INIT_1_CHECK )\n+#pragma ident\t\"@(#)pthread.h\t1.37\t04/09/28 SMI\"\n+#define PTHREAD_ONCE_INIT\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\n+#endif  /* SOLARIS_ONCE_INIT_1_CHECK */\n+\n+\n #if defined( THREAD_KEYWORD_CHECK )\n extern int pthread_create (pthread_t *__restrict __thr,\n extern int pthread_kill (pthread_t __thr, int __signo);"}]}