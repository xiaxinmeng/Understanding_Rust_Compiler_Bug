{"sha": "207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3YWFlZGE5ZDNmOTVhODgxMjJiM2M0MjY0Y2Q5M2NhN2Y5ZjYzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:51:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:51:44Z"}, "message": "[multiple changes]\n\n2012-03-07  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-taprop-vms.adb (Create_Task): set thread name.\n\t* s-osinte-vms.ads (pthread_attr_setname_np): Declare.\n\n2012-03-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* g-trasym.adb: Minor reformatting.\n\n2012-03-07  Robert Dewar  <dewar@adacore.com>\n\n\t* a-ngrear.ads: Minor addition of ??? comment.\n\nFrom-SVN: r185052", "tree": {"sha": "cd7eed821e38c977c60f90628dafbe7922293a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd7eed821e38c977c60f90628dafbe7922293a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/comments", "author": null, "committer": null, "parents": [{"sha": "e761d11c7d31ef7adc8b58865fe7627d154cec3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e761d11c7d31ef7adc8b58865fe7627d154cec3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e761d11c7d31ef7adc8b58865fe7627d154cec3e"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "1403e2874d704650e3b98eb9b8eba186ea8540ce", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "patch": "@@ -1,3 +1,16 @@\n+2012-03-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-taprop-vms.adb (Create_Task): set thread name.\n+\t* s-osinte-vms.ads (pthread_attr_setname_np): Declare.\n+\n+2012-03-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* g-trasym.adb: Minor reformatting.\n+\n+2012-03-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-ngrear.ads: Minor addition of ??? comment.\n+\n 2012-03-07  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch4.adb (Apply_Accessibility_Check): Call"}, {"sha": "f8499969a0a8cbe36ba13e76a21858b6a26ca42a", "filename": "gcc/ada/a-ngrear.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fa-ngrear.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fa-ngrear.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngrear.ads?ref=207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "patch": "@@ -125,6 +125,9 @@ private\n    --  front end always inline these, the expense of the unconstrained returns\n    --  can be avoided.\n \n+   --  Confusing comment above, why does the front end always inline\n+   --  these functions ???\n+\n    pragma Inline (\"+\");\n    pragma Inline (\"-\");\n    pragma Inline (\"*\");"}, {"sha": "2957ae087f07335845894132ae5fe7a25d53d3c5", "filename": "gcc/ada/g-trasym.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fg-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fg-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.adb?ref=207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2011, AdaCore                     --\n+--                     Copyright (C) 1999-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,12 +42,10 @@ package body GNAT.Traceback.Symbolic is\n    -- Symbolic_Traceback --\n    ------------------------\n \n-   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String\n-   is\n+   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String is\n    begin\n       if Traceback'Length = 0 then\n          return \"\";\n-\n       else\n          declare\n             Img : String := System.Address_Image (Traceback (Traceback'First));\n@@ -70,8 +68,7 @@ package body GNAT.Traceback.Symbolic is\n       end if;\n    end Symbolic_Traceback;\n \n-   function Symbolic_Traceback (E : Exception_Occurrence) return String\n-   is\n+   function Symbolic_Traceback (E : Exception_Occurrence) return String is\n    begin\n       return Symbolic_Traceback (Tracebacks (E));\n    end Symbolic_Traceback;"}, {"sha": "e24980e4f23db3546740897a78ba392ad98b6f5e", "filename": "gcc/ada/s-osinte-vms.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fs-osinte-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fs-osinte-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vms.ads?ref=207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "patch": "@@ -520,6 +520,12 @@ package System.OS_Interface is\n       sched_param : int) return int;\n    pragma Import (C, pthread_attr_setschedparam, \"PTHREAD_ATTR_SETSCHEDPARAM\");\n \n+   function pthread_attr_setname_np\n+     (attr : access pthread_attr_t;\n+      name : System.Address;\n+      mbz  : System.Address) return int;\n+   pragma Import (C, pthread_attr_setname_np, \"PTHREAD_ATTR_SETNAME_NP\");\n+\n    function sched_yield return int;\n \n    --------------------------"}, {"sha": "3c500c5ccd7eaa9503a9fc0292d83d6f5a4f8692", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207aaeda9d3f95a88122b3c4264cd93ca7f9f63a/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=207aaeda9d3f95a88122b3c4264cd93ca7f9f63a", "patch": "@@ -780,6 +780,7 @@ package body System.Task_Primitives.Operations is\n       function Thread_Body_Access is new\n         Ada.Unchecked_Conversion (System.Aux_DEC.Short_Address, Thread_Body);\n \n+      Task_Name : String (1 .. System.Parameters.Max_Task_Image_Length + 1);\n    begin\n       --  Since the initial signal mask of a thread is inherited from the\n       --  creator, we need to set our local signal mask to mask all signals\n@@ -809,6 +810,18 @@ package body System.Task_Primitives.Operations is\n           (Attributes'Access, PTHREAD_EXPLICIT_SCHED);\n       pragma Assert (Result = 0);\n \n+      if T.Common.Task_Image_Len > 0 then\n+         --  Set thread name to ease debugging\n+\n+         Task_Name (1 .. T.Common.Task_Image_Len) :=\n+           T.Common.Task_Image (1 .. T.Common.Task_Image_Len);\n+         Task_Name (T.Common.Task_Image_Len + 1) := ASCII.NUL;\n+\n+         Result := pthread_attr_setname_np\n+           (Attributes'Access, Task_Name'Address, Null_Address);\n+         pragma Assert (Result = 0);\n+      end if;\n+\n       --  Note: the use of Unrestricted_Access in the following call is needed\n       --  because otherwise we have an error of getting a access-to-volatile\n       --  value which points to a non-volatile object. But in this case it is"}]}