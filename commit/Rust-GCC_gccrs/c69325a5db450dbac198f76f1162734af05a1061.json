{"sha": "c69325a5db450dbac198f76f1162734af05a1061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5MzI1YTVkYjQ1MGRiYWMxOThmNzZmMTE2MjczNGFmMDVhMTA2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-10T10:17:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-10T10:17:46Z"}, "message": "sccvn: Fix up push_partial_def little-endian bitfield handling [PR97764]\n\nThis patch fixes a thinko in the left-endian push_partial_def path.\nAs the testcase shows, we have 3 bitfields in the struct,\nbitoff  bitsize\n0       3\n3       28\n31      1\nthe corresponding read is the byte at offset 3 (i.e. 24 bits)\nand push_partial_def first handles the full store ({}) to all bits\nand then is processing the store to the middle bitfield with value of -1.\nHere are the interesting spots:\n  pd.offset -= offseti;\nthis adjusts the pd to { -21, 28 }, the (for little-endian lowest) 21\nbits aren't interesting to us, we only care about the upper 7.\n          len = native_encode_expr (pd.rhs, this_buffer, bufsize,\n                                    MAX (0, -pd.offset) / BITS_PER_UNIT);\nnative_encode_expr has the offset parameter in bytes and we tell it\nthat we aren't interested in the first (lowest) two bytes of the number.\nIt encodes 0xff, 0xff with len == 2 then.\n      HOST_WIDE_INT size = pd.size;\n      if (pd.offset < 0)\n        size -= ROUND_DOWN (-pd.offset, BITS_PER_UNIT);\nwe get 28 - 16, i.e. 12 - the 16 is subtracting those 2 bytes that we\nomitted in native_encode_expr.\n          size = MIN (size, (HOST_WIDE_INT) needed_len * BITS_PER_UNIT);\nneeded_len is how many bytes the read at most needs, and that is 1,\nso we get size 8 and copy all 8 bits (i.e. a single byte plus nothing)\nfrom the native_encode_expr filled this_buffer; this incorrectly sets\nthe byte to 0xff when we want 0x7f.  The above line is correct for the\npd.offset >= 0 case when we don't skip anything, but for the pd.offset < 0\ncase we need to subtract also the remainder of the bits we aren't interested\nin (the code shifts the bytes by that number of bits).\nIf it weren't for the big-endian path, we could as well do\n      if (pd.offset < 0)\n        size += pd.offset;\nbut the big-endian path needs it differently.\nWith the following patch, amnt is 3 and we subtract from 12 the (8 - 3)\nbits and thus get the 7 which is the value we want.\n\n2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97764\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): For\n\tlittle-endian stores with negative pd.offset, subtract\n\tBITS_PER_UNIT - amnt from size if amnt is non-zero.\n\n\t* gcc.c-torture/execute/pr97764.c: New test.", "tree": {"sha": "5749ddd4cf4919e42e465e58ae6a2a479c43c12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5749ddd4cf4919e42e465e58ae6a2a479c43c12c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c69325a5db450dbac198f76f1162734af05a1061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69325a5db450dbac198f76f1162734af05a1061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69325a5db450dbac198f76f1162734af05a1061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69325a5db450dbac198f76f1162734af05a1061/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d59593105d3b1e38e49f96b74fd81e4e5038c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d59593105d3b1e38e49f96b74fd81e4e5038c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d59593105d3b1e38e49f96b74fd81e4e5038c7f"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "4ceaab8e87eb15886ea3e20761a1f1ea5ae3c7ca", "filename": "gcc/testsuite/gcc.c-torture/execute/pr97764.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69325a5db450dbac198f76f1162734af05a1061/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97764.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69325a5db450dbac198f76f1162734af05a1061/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97764.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97764.c?ref=c69325a5db450dbac198f76f1162734af05a1061", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/97764 */\n+/* { dg-require-effective-target int32plus } */\n+\n+struct S { int b : 3; int c : 28; int d : 1; };\n+\n+int\n+main ()\n+{\n+  struct S e = {};\n+  e.c = -1;\n+  if (e.d)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8c93e515b6cef1569cdebc1b22d74354d03df3ad", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69325a5db450dbac198f76f1162734af05a1061/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69325a5db450dbac198f76f1162734af05a1061/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=c69325a5db450dbac198f76f1162734af05a1061", "patch": "@@ -2039,12 +2039,12 @@ vn_walk_cb_data::push_partial_def (pd_data pd,\n \t}\n       else\n \t{\n-\t  size = MIN (size, (HOST_WIDE_INT) needed_len * BITS_PER_UNIT);\n \t  if (pd.offset >= 0)\n \t    {\n \t      /* LSB of this_buffer[0] byte should be at pd.offset bits\n \t\t in buffer.  */\n \t      unsigned int msk;\n+\t      size = MIN (size, (HOST_WIDE_INT) needed_len * BITS_PER_UNIT);\n \t      amnt = pd.offset % BITS_PER_UNIT;\n \t      if (amnt)\n \t\tshift_bytes_in_array_left (this_buffer, len + 1, amnt);\n@@ -2073,6 +2073,9 @@ vn_walk_cb_data::push_partial_def (pd_data pd,\n \t  else\n \t    {\n \t      amnt = (unsigned HOST_WIDE_INT) pd.offset % BITS_PER_UNIT;\n+\t      if (amnt)\n+\t\tsize -= BITS_PER_UNIT - amnt;\n+\t      size = MIN (size, (HOST_WIDE_INT) needed_len * BITS_PER_UNIT);\n \t      if (amnt)\n \t\tshift_bytes_in_array_left (this_buffer, len + 1, amnt);\n \t    }"}]}