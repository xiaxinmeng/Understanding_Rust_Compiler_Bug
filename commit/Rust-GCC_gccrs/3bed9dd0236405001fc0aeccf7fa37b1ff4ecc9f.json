{"sha": "3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlZDlkZDAyMzY0MDUwMDFmYzBhZWNjZjdmYTM3YjFmZjRlY2M5Zg==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-07-08T21:08:52Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-08T21:08:52Z"}, "message": "re PR fortran/17711 (Wrong operator name in error message)\n\ngcc/fortran:\n2007-07-08  Daniel Franke  <franke.daniel@gmail.com>\n\t    Tobias Schl\u00c3\u00bcter <tobias.schlueter@physik.uni-muenchen.de>\n\n\tPR fortran/17711\n\t* gfortran.h (gfc_intrinsic_op): Added INTRINSIC_EQ_OS,\n\tINTRINSIC_NE_OS, INTRINSIC_GT_OS, INTRINSIC_GE_OS, \n\tINTRINSIC_LT_OS and INTRINSIC_LE_OS.\n\t* arith.c (eval_intrinsic, eval_type_intrinsic0): Likewise.\n\t* arith.h (gfc_eq, gfc_ne, gfc_gt, gfc_ge, gfc_lt, gfc_le):\n\tAdded gfc_intrinsic_op as third argument type.\n\t* dump-parse-tree.c (gfc_show_expr): Account for new enum values.\n\t* expr.c (simplify_intrinsic_op, check_intrinsic_op): Likewise.\n\t* interface.c (check_operator_interface): Likewise.\n\t(gfc_check_interfaces): Added cross-checks for FORTRAN 77 and \n\tFortran 90 style operators using new enum values.\n\t(gfc_extend_expr): Likewise.\n\t(gfc_add_interface): Likewise.\n\t* match.c (intrinsic_operators): Distinguish FORTRAN 77 style\n\toperators from Fortran 90 style operators using new enum values.\n\t* matchexp.c (match_level_4): Account for new enum values.\n\t* module.c (mio_expr): Likewise.\n\t* resolve.c (resolve_operator): Deal with new enum values, fix\n\tinconsistent error messages.\n\t* trans-expr.c (gfc_conv_expr_op): Account for new enum values.\n\ngcc/testsuite:\n2007-07-08  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/17711\n\t* gfortran.dg/operator_4.f90: New test.\n\t* gfortran.dg/operator_5.f90: New test.\n\t* gfortran.dg/logical_comp.f90: Adjusted error messages.\n\t* gfortran.dg/module_md5_1.f90: Adjusted MD5 sum.\n\n\nCo-Authored-By: Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n\nFrom-SVN: r126468", "tree": {"sha": "a93c7993fbd8df93d9b727f1a469eb1a7ed79a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a93c7993fbd8df93d9b727f1a469eb1a7ed79a38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "376397285d1564cb838083028fa24286cd101ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376397285d1564cb838083028fa24286cd101ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376397285d1564cb838083028fa24286cd101ca6"}], "stats": {"total": 577, "additions": 515, "deletions": 62}, "files": [{"sha": "6066312cc5f3c613eb7568aaf9deb54fbc87d80a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -1,3 +1,28 @@\n+2007-07-08  Daniel Franke  <franke.daniel@gmail.com>\n+\t    Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/17711\n+\t* gfortran.h (gfc_intrinsic_op): Added INTRINSIC_EQ_OS,\n+\tINTRINSIC_NE_OS, INTRINSIC_GT_OS, INTRINSIC_GE_OS, \n+\tINTRINSIC_LT_OS and INTRINSIC_LE_OS.\n+\t* arith.c (eval_intrinsic, eval_type_intrinsic0): Likewise.\n+\t* arith.h (gfc_eq, gfc_ne, gfc_gt, gfc_ge, gfc_lt, gfc_le):\n+\tAdded gfc_intrinsic_op as third argument type.\n+\t* dump-parse-tree.c (gfc_show_expr): Account for new enum values.\n+\t* expr.c (simplify_intrinsic_op, check_intrinsic_op): Likewise.\n+\t* interface.c (check_operator_interface): Likewise.\n+\t(gfc_check_interfaces): Added cross-checks for FORTRAN 77 and \n+\tFortran 90 style operators using new enum values.\n+\t(gfc_extend_expr): Likewise.\n+\t(gfc_add_interface): Likewise.\n+\t* match.c (intrinsic_operators): Distinguish FORTRAN 77 style\n+\toperators from Fortran 90 style operators using new enum values.\n+\t* matchexp.c (match_level_4): Account for new enum values.\n+\t* module.c (mio_expr): Likewise.\n+\t* resolve.c (resolve_operator): Deal with new enum values, fix\n+\tinconsistent error messages.\n+\t* trans-expr.c (gfc_conv_expr_op): Account for new enum values.\n+\n 2007-07-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32669"}, {"sha": "5de69d08df0704dd9016a17832d98b71171b36a1", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -1539,9 +1539,13 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \n     /* Additional restrictions for ordering relations.  */\n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n       if (op1->ts.type == BT_COMPLEX || op2->ts.type == BT_COMPLEX)\n \t{\n \t  temp.ts.type = BT_LOGICAL;\n@@ -1551,7 +1555,9 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \n     /* Fall through  */\n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n       if (op1->ts.type == BT_CHARACTER && op2->ts.type == BT_CHARACTER)\n \t{\n \t  unary = 0;\n@@ -1584,7 +1590,10 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \n       if (operator == INTRINSIC_EQ || operator == INTRINSIC_NE\n \t  || operator == INTRINSIC_GE || operator == INTRINSIC_GT\n-\t  || operator == INTRINSIC_LE || operator == INTRINSIC_LT)\n+\t  || operator == INTRINSIC_LE || operator == INTRINSIC_LT\n+\t  || operator == INTRINSIC_EQ_OS || operator == INTRINSIC_NE_OS\n+\t  || operator == INTRINSIC_GE_OS || operator == INTRINSIC_GT_OS\n+\t  || operator == INTRINSIC_LE_OS || operator == INTRINSIC_LT_OS)\n \t{\n \t  temp.ts.type = BT_LOGICAL;\n \t  temp.ts.kind = gfc_default_logical_kind;\n@@ -1668,11 +1677,17 @@ eval_type_intrinsic0 (gfc_intrinsic_op operator, gfc_expr *op)\n   switch (operator)\n     {\n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n       op->ts.type = BT_LOGICAL;\n       op->ts.kind = gfc_default_logical_kind;\n       break;\n@@ -1861,44 +1876,44 @@ gfc_neqv (gfc_expr *op1, gfc_expr *op2)\n \n \n gfc_expr *\n-gfc_eq (gfc_expr *op1, gfc_expr *op2)\n+gfc_eq (gfc_expr *op1, gfc_expr *op2, gfc_intrinsic_op op)\n {\n-  return eval_intrinsic_f3 (INTRINSIC_EQ, gfc_arith_eq, op1, op2);\n+  return eval_intrinsic_f3 (op, gfc_arith_eq, op1, op2);\n }\n \n \n gfc_expr *\n-gfc_ne (gfc_expr *op1, gfc_expr *op2)\n+gfc_ne (gfc_expr *op1, gfc_expr *op2, gfc_intrinsic_op op)\n {\n-  return eval_intrinsic_f3 (INTRINSIC_NE, gfc_arith_ne, op1, op2);\n+  return eval_intrinsic_f3 (op, gfc_arith_ne, op1, op2);\n }\n \n \n gfc_expr *\n-gfc_gt (gfc_expr *op1, gfc_expr *op2)\n+gfc_gt (gfc_expr *op1, gfc_expr *op2, gfc_intrinsic_op op)\n {\n-  return eval_intrinsic_f3 (INTRINSIC_GT, gfc_arith_gt, op1, op2);\n+  return eval_intrinsic_f3 (op, gfc_arith_gt, op1, op2);\n }\n \n \n gfc_expr *\n-gfc_ge (gfc_expr *op1, gfc_expr *op2)\n+gfc_ge (gfc_expr *op1, gfc_expr *op2, gfc_intrinsic_op op)\n {\n-  return eval_intrinsic_f3 (INTRINSIC_GE, gfc_arith_ge, op1, op2);\n+  return eval_intrinsic_f3 (op, gfc_arith_ge, op1, op2);\n }\n \n \n gfc_expr *\n-gfc_lt (gfc_expr *op1, gfc_expr *op2)\n+gfc_lt (gfc_expr *op1, gfc_expr *op2, gfc_intrinsic_op op)\n {\n-  return eval_intrinsic_f3 (INTRINSIC_LT, gfc_arith_lt, op1, op2);\n+  return eval_intrinsic_f3 (op, gfc_arith_lt, op1, op2);\n }\n \n \n gfc_expr *\n-gfc_le (gfc_expr *op1, gfc_expr *op2)\n+gfc_le (gfc_expr *op1, gfc_expr *op2, gfc_intrinsic_op op)\n {\n-  return eval_intrinsic_f3 (INTRINSIC_LE, gfc_arith_le, op1, op2);\n+  return eval_intrinsic_f3 (op, gfc_arith_le, op1, op2);\n }\n \n "}, {"sha": "6a8c00656a0c7fcf146ef42ec15c42a61f5297c5", "filename": "gcc/fortran/arith.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Farith.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Farith.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.h?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -57,12 +57,12 @@ gfc_expr *gfc_or (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_not (gfc_expr *);\n gfc_expr *gfc_eqv (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_neqv (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_eq (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_ne (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_gt (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_ge (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_lt (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_le (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_eq (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n+gfc_expr *gfc_ne (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n+gfc_expr *gfc_gt (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n+gfc_expr *gfc_ge (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n+gfc_expr *gfc_lt (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n+gfc_expr *gfc_le (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n \n /* Convert strings to literal constants.  */\n gfc_expr *gfc_convert_integer (const char *, int, int, locus *);"}, {"sha": "f81bf04684bce3dbd45e0242302356e5157f927a", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -472,21 +472,27 @@ gfc_show_expr (gfc_expr *p)\n \t  gfc_status (\"NEQV \");\n \t  break;\n \tcase INTRINSIC_EQ:\n+\tcase INTRINSIC_EQ_OS:\n \t  gfc_status (\"= \");\n \t  break;\n \tcase INTRINSIC_NE:\n-\t  gfc_status (\"<> \");\n+\tcase INTRINSIC_NE_OS:\n+\t  gfc_status (\"/= \");\n \t  break;\n \tcase INTRINSIC_GT:\n+\tcase INTRINSIC_GT_OS:\n \t  gfc_status (\"> \");\n \t  break;\n \tcase INTRINSIC_GE:\n+\tcase INTRINSIC_GE_OS:\n \t  gfc_status (\">= \");\n \t  break;\n \tcase INTRINSIC_LT:\n+\tcase INTRINSIC_LT_OS:\n \t  gfc_status (\"< \");\n \t  break;\n \tcase INTRINSIC_LE:\n+\tcase INTRINSIC_LE_OS:\n \t  gfc_status (\"<= \");\n \t  break;\n \tcase INTRINSIC_NOT:"}, {"sha": "d90dd214355139819df1297f6d528c453c744a89", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -766,13 +766,15 @@ gfc_is_constant_expr (gfc_expr *e)\n static try\n simplify_intrinsic_op (gfc_expr *p, int type)\n {\n+  gfc_intrinsic_op op;\n   gfc_expr *op1, *op2, *result;\n \n   if (p->value.op.operator == INTRINSIC_USER)\n     return SUCCESS;\n \n   op1 = p->value.op.op1;\n   op2 = p->value.op.op2;\n+  op  = p->value.op.operator;\n \n   if (gfc_simplify_expr (op1, type) == FAILURE)\n     return FAILURE;\n@@ -787,7 +789,7 @@ simplify_intrinsic_op (gfc_expr *p, int type)\n   p->value.op.op1 = NULL;\n   p->value.op.op2 = NULL;\n \n-  switch (p->value.op.operator)\n+  switch (op)\n     {\n     case INTRINSIC_PARENTHESES:\n       result = gfc_parentheses (op1);\n@@ -826,27 +828,33 @@ simplify_intrinsic_op (gfc_expr *p, int type)\n       break;\n \n     case INTRINSIC_EQ:\n-      result = gfc_eq (op1, op2);\n+    case INTRINSIC_EQ_OS:\n+      result = gfc_eq (op1, op2, op);\n       break;\n \n     case INTRINSIC_NE:\n-      result = gfc_ne (op1, op2);\n+    case INTRINSIC_NE_OS:\n+      result = gfc_ne (op1, op2, op);\n       break;\n \n     case INTRINSIC_GT:\n-      result = gfc_gt (op1, op2);\n+    case INTRINSIC_GT_OS:\n+      result = gfc_gt (op1, op2, op);\n       break;\n \n     case INTRINSIC_GE:\n-      result = gfc_ge (op1, op2);\n+    case INTRINSIC_GE_OS:\n+      result = gfc_ge (op1, op2, op);\n       break;\n \n     case INTRINSIC_LT:\n-      result = gfc_lt (op1, op2);\n+    case INTRINSIC_LT_OS:\n+      result = gfc_lt (op1, op2, op);\n       break;\n \n     case INTRINSIC_LE:\n-      result = gfc_le (op1, op2);\n+    case INTRINSIC_LE_OS:\n+      result = gfc_le (op1, op2, op);\n       break;\n \n     case INTRINSIC_NOT:\n@@ -1731,11 +1739,17 @@ check_intrinsic_op (gfc_expr *e, try (*check_function) (gfc_expr *))\n       break;\n \n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n       if ((*check_function) (op2) == FAILURE)\n \treturn FAILURE;\n       "}, {"sha": "42edcd1468e16119b907f6a3e66fc397c2407eb7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -198,10 +198,14 @@ typedef enum\n   INTRINSIC_UMINUS, INTRINSIC_PLUS, INTRINSIC_MINUS, INTRINSIC_TIMES,\n   INTRINSIC_DIVIDE, INTRINSIC_POWER, INTRINSIC_CONCAT,\n   INTRINSIC_AND, INTRINSIC_OR, INTRINSIC_EQV, INTRINSIC_NEQV,\n+  /* ==, /=, >, >=, <, <=  */\n   INTRINSIC_EQ, INTRINSIC_NE, INTRINSIC_GT, INTRINSIC_GE,\n-  INTRINSIC_LT, INTRINSIC_LE, INTRINSIC_NOT, INTRINSIC_USER,\n-  INTRINSIC_ASSIGN, INTRINSIC_PARENTHESES,\n-  GFC_INTRINSIC_END /* Sentinel */\n+  INTRINSIC_LT, INTRINSIC_LE, \n+  /* .EQ., .NE., .GT., .GE., .LT., .LE. (OS = Old-Style)  */\n+  INTRINSIC_EQ_OS, INTRINSIC_NE_OS, INTRINSIC_GT_OS, INTRINSIC_GE_OS,\n+  INTRINSIC_LT_OS, INTRINSIC_LE_OS, \n+  INTRINSIC_NOT, INTRINSIC_USER, INTRINSIC_ASSIGN, \n+  INTRINSIC_PARENTHESES, GFC_INTRINSIC_END /* Sentinel */\n }\n gfc_intrinsic_op;\n "}, {"sha": "b46e11477109a6afa52344b470fcab15c167c8e2", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 177, "deletions": 8, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -659,7 +659,9 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n   switch (operator)\n   {\n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n       if (t1 == BT_CHARACTER && t2 == BT_CHARACTER)\n \tgoto bad_repl;\n       /* Fall through.  */\n@@ -674,9 +676,13 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n       break;\n \n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n       if (t1 == BT_CHARACTER && t2 == BT_CHARACTER)\n \tgoto bad_repl;\n       if ((t1 == BT_INTEGER || t1 == BT_REAL)\n@@ -1124,12 +1130,81 @@ gfc_check_interfaces (gfc_namespace *ns)\n \n       check_operator_interface (ns->operator[i], i);\n \n-      for (ns2 = ns->parent; ns2; ns2 = ns2->parent)\n-\tif (check_interface1 (ns->operator[i], ns2->operator[i], 0,\n-\t\t\t      interface_name, true))\n-\t  break;\n+      for (ns2 = ns; ns2; ns2 = ns2->parent)\n+\t{\n+\t  if (check_interface1 (ns->operator[i], ns2->operator[i], 0,\n+\t\t\t\tinterface_name, true))\n+\t    goto done;\n+\n+\t  switch (i)\n+\t    {\n+\t      case INTRINSIC_EQ:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_EQ_OS],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_EQ_OS:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_EQ],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_NE:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_NE_OS],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_NE_OS:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_NE],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_GT:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_GT_OS],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_GT_OS:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_GT],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_GE:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_GE_OS],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_GE_OS:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_GE],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_LT:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_LT_OS],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_LT_OS:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_LT],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_LE:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_LE_OS],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      case INTRINSIC_LE_OS:\n+\t\tif (check_interface1 (ns->operator[i], ns2->operator[INTRINSIC_LE],\n+\t\t\t\t      0, interface_name, true)) goto done;\n+\t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n+            }\n+\t}\n     }\n \n+done:\n   gfc_current_ns = old_ns;\n }\n \n@@ -2199,7 +2274,56 @@ gfc_extend_expr (gfc_expr *e)\n     {\n       for (ns = gfc_current_ns; ns; ns = ns->parent)\n \t{\n-\t  sym = gfc_search_interface (ns->operator[i], 0, &actual);\n+\t  /* Due to the distinction between '==' and '.eq.' and friends, one has\n+\t     to check if either is defined.  */\n+\t  switch (i)\n+\t    {\n+\t      case INTRINSIC_EQ:\n+\t      case INTRINSIC_EQ_OS:\n+\t\tsym = gfc_search_interface (ns->operator[INTRINSIC_EQ], 0, &actual);\n+\t\tif (sym == NULL)\n+\t\t  sym = gfc_search_interface (ns->operator[INTRINSIC_EQ_OS], 0, &actual);\n+\t\tbreak;\n+\n+\t      case INTRINSIC_NE:\n+\t      case INTRINSIC_NE_OS:\n+\t\tsym = gfc_search_interface (ns->operator[INTRINSIC_NE], 0, &actual);\n+\t\tif (sym == NULL)\n+\t\t  sym = gfc_search_interface (ns->operator[INTRINSIC_NE_OS], 0, &actual);\n+\t\tbreak;\n+\n+\t      case INTRINSIC_GT:\n+\t      case INTRINSIC_GT_OS:\n+\t\tsym = gfc_search_interface (ns->operator[INTRINSIC_GT], 0, &actual);\n+\t\tif (sym == NULL)\n+\t\t  sym = gfc_search_interface (ns->operator[INTRINSIC_GT_OS], 0, &actual);\n+\t\tbreak;\n+\n+\t      case INTRINSIC_GE:\n+\t      case INTRINSIC_GE_OS:\n+\t\tsym = gfc_search_interface (ns->operator[INTRINSIC_GE], 0, &actual);\n+\t\tif (sym == NULL)\n+\t\t  sym = gfc_search_interface (ns->operator[INTRINSIC_GE_OS], 0, &actual);\n+\t\tbreak;\n+\n+\t      case INTRINSIC_LT:\n+\t      case INTRINSIC_LT_OS:\n+\t\tsym = gfc_search_interface (ns->operator[INTRINSIC_LT], 0, &actual);\n+\t\tif (sym == NULL)\n+\t\t  sym = gfc_search_interface (ns->operator[INTRINSIC_LT_OS], 0, &actual);\n+\t\tbreak;\n+\n+\t      case INTRINSIC_LE:\n+\t      case INTRINSIC_LE_OS:\n+\t\tsym = gfc_search_interface (ns->operator[INTRINSIC_LE], 0, &actual);\n+\t\tif (sym == NULL)\n+\t\t  sym = gfc_search_interface (ns->operator[INTRINSIC_LE_OS], 0, &actual);\n+\t\tbreak;\n+\n+\t      default:\n+\t\tsym = gfc_search_interface (ns->operator[i], 0, &actual);\n+\t    }\n+\n \t  if (sym != NULL)\n \t    break;\n \t}\n@@ -2330,9 +2454,54 @@ gfc_add_interface (gfc_symbol *new)\n \n     case INTERFACE_INTRINSIC_OP:\n       for (ns = current_interface.ns; ns; ns = ns->parent)\n-\tif (check_new_interface (ns->operator[current_interface.op], new)\n-\t    == FAILURE)\n-\t  return FAILURE;\n+\tswitch (current_interface.op)\n+\t  {\n+\t    case INTRINSIC_EQ:\n+\t    case INTRINSIC_EQ_OS:\n+\t      if (check_new_interface (ns->operator[INTRINSIC_EQ], new) == FAILURE ||\n+\t          check_new_interface (ns->operator[INTRINSIC_EQ_OS], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t      break;\n+\n+\t    case INTRINSIC_NE:\n+\t    case INTRINSIC_NE_OS:\n+\t      if (check_new_interface (ns->operator[INTRINSIC_NE], new) == FAILURE ||\n+\t          check_new_interface (ns->operator[INTRINSIC_NE_OS], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t      break;\n+\n+\t    case INTRINSIC_GT:\n+\t    case INTRINSIC_GT_OS:\n+\t      if (check_new_interface (ns->operator[INTRINSIC_GT], new) == FAILURE ||\n+\t          check_new_interface (ns->operator[INTRINSIC_GT_OS], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t      break;\n+\n+\t    case INTRINSIC_GE:\n+\t    case INTRINSIC_GE_OS:\n+\t      if (check_new_interface (ns->operator[INTRINSIC_GE], new) == FAILURE ||\n+\t          check_new_interface (ns->operator[INTRINSIC_GE_OS], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t      break;\n+\n+\t    case INTRINSIC_LT:\n+\t    case INTRINSIC_LT_OS:\n+\t      if (check_new_interface (ns->operator[INTRINSIC_LT], new) == FAILURE ||\n+\t          check_new_interface (ns->operator[INTRINSIC_LT_OS], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t      break;\n+\n+\t    case INTRINSIC_LE:\n+\t    case INTRINSIC_LE_OS:\n+\t      if (check_new_interface (ns->operator[INTRINSIC_LE], new) == FAILURE ||\n+\t          check_new_interface (ns->operator[INTRINSIC_LE_OS], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t      break;\n+\n+\t    default:\n+\t      if (check_new_interface (ns->operator[current_interface.op], new) == FAILURE)\n+\t\treturn FAILURE;\n+\t  }\n \n       head = &current_interface.ns->operator[current_interface.op];\n       break;"}, {"sha": "18b943d042723079fbe715380a94dba2fd8ed0d8", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -44,17 +44,17 @@ mstring intrinsic_operators[] = {\n     minit (\".or.\", INTRINSIC_OR),\n     minit (\".eqv.\", INTRINSIC_EQV),\n     minit (\".neqv.\", INTRINSIC_NEQV),\n-    minit (\".eq.\", INTRINSIC_EQ),\n+    minit (\".eq.\", INTRINSIC_EQ_OS),\n     minit (\"==\", INTRINSIC_EQ),\n-    minit (\".ne.\", INTRINSIC_NE),\n+    minit (\".ne.\", INTRINSIC_NE_OS),\n     minit (\"/=\", INTRINSIC_NE),\n-    minit (\".ge.\", INTRINSIC_GE),\n+    minit (\".ge.\", INTRINSIC_GE_OS),\n     minit (\">=\", INTRINSIC_GE),\n-    minit (\".le.\", INTRINSIC_LE),\n+    minit (\".le.\", INTRINSIC_LE_OS),\n     minit (\"<=\", INTRINSIC_LE),\n-    minit (\".lt.\", INTRINSIC_LT),\n+    minit (\".lt.\", INTRINSIC_LT_OS),\n     minit (\"<\", INTRINSIC_LT),\n-    minit (\".gt.\", INTRINSIC_GT),\n+    minit (\".gt.\", INTRINSIC_GT_OS),\n     minit (\">\", INTRINSIC_GT),\n     minit (\".not.\", INTRINSIC_NOT),\n     minit (\"parens\", INTRINSIC_PARENTHESES),"}, {"sha": "f681e66a29414811abe6fb0b4bd33e2e5dbc2220", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -628,7 +628,9 @@ match_level_4 (gfc_expr **result)\n     }\n \n   if (i != INTRINSIC_EQ && i != INTRINSIC_NE && i != INTRINSIC_GE\n-      && i != INTRINSIC_LE && i != INTRINSIC_LT && i != INTRINSIC_GT)\n+      && i != INTRINSIC_LE && i != INTRINSIC_LT && i != INTRINSIC_GT\n+      && i != INTRINSIC_EQ_OS && i != INTRINSIC_NE_OS && i != INTRINSIC_GE_OS\n+      && i != INTRINSIC_LE_OS && i != INTRINSIC_LT_OS && i != INTRINSIC_GT_OS)\n     {\n       gfc_current_locus = old_loc;\n       *result = left;\n@@ -649,27 +651,33 @@ match_level_4 (gfc_expr **result)\n   switch (i)\n     {\n     case INTRINSIC_EQ:\n-      r = gfc_eq (left, right);\n+    case INTRINSIC_EQ_OS:\n+      r = gfc_eq (left, right, i);\n       break;\n \n     case INTRINSIC_NE:\n-      r = gfc_ne (left, right);\n+    case INTRINSIC_NE_OS:\n+      r = gfc_ne (left, right, i);\n       break;\n \n     case INTRINSIC_LT:\n-      r = gfc_lt (left, right);\n+    case INTRINSIC_LT_OS:\n+      r = gfc_lt (left, right, i);\n       break;\n \n     case INTRINSIC_LE:\n-      r = gfc_le (left, right);\n+    case INTRINSIC_LE_OS:\n+      r = gfc_le (left, right, i);\n       break;\n \n     case INTRINSIC_GT:\n-      r = gfc_gt (left, right);\n+    case INTRINSIC_GT_OS:\n+      r = gfc_gt (left, right, i);\n       break;\n \n     case INTRINSIC_GE:\n-      r = gfc_ge (left, right);\n+    case INTRINSIC_GE_OS:\n+      r = gfc_ge (left, right, i);\n       break;\n \n     default:"}, {"sha": "701da3fdbb24d8bbdbb00f74ce9b3d27e6edae79", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -2610,12 +2610,18 @@ static const mstring intrinsics[] =\n     minit (\"OR\", INTRINSIC_OR),\n     minit (\"EQV\", INTRINSIC_EQV),\n     minit (\"NEQV\", INTRINSIC_NEQV),\n-    minit (\"EQ\", INTRINSIC_EQ),\n-    minit (\"NE\", INTRINSIC_NE),\n-    minit (\"GT\", INTRINSIC_GT),\n-    minit (\"GE\", INTRINSIC_GE),\n-    minit (\"LT\", INTRINSIC_LT),\n-    minit (\"LE\", INTRINSIC_LE),\n+    minit (\"==\", INTRINSIC_EQ),\n+    minit (\"EQ\", INTRINSIC_EQ_OS),\n+    minit (\"/=\", INTRINSIC_NE),\n+    minit (\"NE\", INTRINSIC_NE_OS),\n+    minit (\">\", INTRINSIC_GT),\n+    minit (\"GT\", INTRINSIC_GT_OS),\n+    minit (\">=\", INTRINSIC_GE),\n+    minit (\"GE\", INTRINSIC_GE_OS),\n+    minit (\"<\", INTRINSIC_LT),\n+    minit (\"LT\", INTRINSIC_LT_OS),\n+    minit (\"<=\", INTRINSIC_LE),\n+    minit (\"LE\", INTRINSIC_LE_OS),\n     minit (\"NOT\", INTRINSIC_NOT),\n     minit (\"PARENTHESES\", INTRINSIC_PARENTHESES),\n     minit (NULL, -1)\n@@ -2734,11 +2740,17 @@ mio_expr (gfc_expr **ep)\n \tcase INTRINSIC_EQV:\n \tcase INTRINSIC_NEQV:\n \tcase INTRINSIC_EQ:\n+\tcase INTRINSIC_EQ_OS:\n \tcase INTRINSIC_NE:\n+\tcase INTRINSIC_NE_OS:\n \tcase INTRINSIC_GT:\n+\tcase INTRINSIC_GT_OS:\n \tcase INTRINSIC_GE:\n+\tcase INTRINSIC_GE_OS:\n \tcase INTRINSIC_LT:\n+\tcase INTRINSIC_LT_OS:\n \tcase INTRINSIC_LE:\n+\tcase INTRINSIC_LE_OS:\n \t  mio_expr (&e->value.op.op1);\n \t  mio_expr (&e->value.op.op2);\n \t  break;"}, {"sha": "97bcc853c720c4882340f73cfb7d5ad944fd1e0f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -2715,14 +2715,18 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n-      sprintf (msg, _(\"Operand of .NOT. operator at %%L is %s\"),\n+      sprintf (msg, _(\"Operand of .not. operator at %%L is %s\"),\n \t       gfc_typename (&op1->ts));\n       goto bad_op;\n \n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n       if (op1->ts.type == BT_COMPLEX || op2->ts.type == BT_COMPLEX)\n \t{\n \t  strcpy (msg, _(\"COMPLEX quantities cannot be compared at %L\"));\n@@ -2732,7 +2736,9 @@ resolve_operator (gfc_expr *e)\n       /* Fall through...  */\n \n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n       if (op1->ts.type == BT_CHARACTER && op2->ts.type == BT_CHARACTER)\n \t{\n \t  e->ts.type = BT_LOGICAL;\n@@ -2752,7 +2758,7 @@ resolve_operator (gfc_expr *e)\n       if (op1->ts.type == BT_LOGICAL && op2->ts.type == BT_LOGICAL)\n \tsprintf (msg,\n \t\t _(\"Logicals at %%L must be compared with %s instead of %s\"),\n-\t\t e->value.op.operator == INTRINSIC_EQ ? \".EQV.\" : \".NEQV.\",\n+\t\t e->value.op.operator == INTRINSIC_EQ ? \".eqv.\" : \".neqv.\",\n \t\t gfc_op2string (e->value.op.operator));\n       else\n \tsprintf (msg,\n@@ -2799,11 +2805,17 @@ resolve_operator (gfc_expr *e)\n     case INTRINSIC_EQV:\n     case INTRINSIC_NEQV:\n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n \n       if (op1->rank == 0 && op2->rank == 0)\n \te->rank = 0;\n@@ -6691,6 +6703,29 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t\t}\n \t     }\n \t}\n+\n+      /* PUBLIC interfaces may expose PRIVATE procedures that take types\n+\t PRIVATE to the containing module.  */\n+      for (iface = sym->generic; iface; iface = iface->next)\n+\t{\n+\t  for (arg = iface->sym->formal; arg; arg = arg->next)\n+\t    {\n+\t      if (arg->sym\n+\t\t  && arg->sym->ts.type == BT_DERIVED\n+\t\t  && !arg->sym->ts.derived->attr.use_assoc\n+\t\t  && !gfc_check_access (arg->sym->ts.derived->attr.access,\n+\t\t\t\t\targ->sym->ts.derived->ns->default_access))\n+\t\t{\n+\t\t  gfc_error_now (\"Procedure '%s' in PUBLIC interface '%s' at %L takes \"\n+\t\t\t\t \"dummy arguments of '%s' which is PRIVATE\",\n+\t\t\t\t iface->sym->name, sym->name, &iface->sym->declared_at,\n+\t\t\t\t gfc_typename(&arg->sym->ts));\n+\t\t  /* Stop this message from recurring.  */\n+\t\t  arg->sym->ts.derived->attr.access = ACCESS_PUBLIC;\n+\t\t  return FAILURE;\n+\t\t}\n+\t     }\n+\t}\n     }\n \n   /* An external symbol may not have an initializer because it is taken to be"}, {"sha": "e1a3a8c454cb3edaf7e4ed60c828b44aa83a86ea", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -1102,38 +1102,44 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n       /* EQV and NEQV only work on logicals, but since we represent them\n          as integers, we can use EQ_EXPR and NE_EXPR for them in GIMPLE.  */\n     case INTRINSIC_EQ:\n+    case INTRINSIC_EQ_OS:\n     case INTRINSIC_EQV:\n       code = EQ_EXPR;\n       checkstring = 1;\n       lop = 1;\n       break;\n \n     case INTRINSIC_NE:\n+    case INTRINSIC_NE_OS:\n     case INTRINSIC_NEQV:\n       code = NE_EXPR;\n       checkstring = 1;\n       lop = 1;\n       break;\n \n     case INTRINSIC_GT:\n+    case INTRINSIC_GT_OS:\n       code = GT_EXPR;\n       checkstring = 1;\n       lop = 1;\n       break;\n \n     case INTRINSIC_GE:\n+    case INTRINSIC_GE_OS:\n       code = GE_EXPR;\n       checkstring = 1;\n       lop = 1;\n       break;\n \n     case INTRINSIC_LT:\n+    case INTRINSIC_LT_OS:\n       code = LT_EXPR;\n       checkstring = 1;\n       lop = 1;\n       break;\n \n     case INTRINSIC_LE:\n+    case INTRINSIC_LE_OS:\n       code = LE_EXPR;\n       checkstring = 1;\n       lop = 1;"}, {"sha": "c983b9223950b21e9c4bda12553212590a6e65ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -1,3 +1,11 @@\n+2007-07-08  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/17711\n+\t* gfortran.dg/operator_4.f90: New test.\n+\t* gfortran.dg/operator_5.f90: New test.\n+\t* gfortran.dg/logical_comp.f90: Adjusted error messages.\n+\t* gfortran.dg/module_md5_1.f90: Adjusted MD5 sum.\n+\n 2007-07-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32669"}, {"sha": "208cc4a9e660e9569d9729e7240f94620459244c", "filename": "gcc/testsuite/gfortran.dg/logical_comp.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Flogical_comp.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Flogical_comp.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogical_comp.f90?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -4,6 +4,6 @@\n \n program foo\n   logical :: b\n-  b = b .eq. b  ! { dg-error \".EQV. instead of .eq.\" }\n-  b = b .ne. b  ! { dg-error \".NEQV. instead of .ne.\" }\n+  b = b .eq. b  ! { dg-error \".eqv. instead of .eq.\" }\n+  b = b .ne. b  ! { dg-error \".neqv. instead of .ne.\" }\n end program"}, {"sha": "3c4efb0950fcd499100235ab26b4dc9be3a02b96", "filename": "gcc/testsuite/gfortran.dg/module_md5_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -10,5 +10,5 @@ program test\n   use foo\n   print *, pi\n end program test\n-! { dg-final { scan-module \"foo\" \"MD5:1a6374d65e99c0175c42016a649f79db\" } }\n+! { dg-final { scan-module \"foo\" \"MD5:22d65c2e261759ab63cb7db9d0a8882b\" } }\n ! { dg-final { cleanup-modules \"foo\" } }"}, {"sha": "39cd7ebdf01e28585b6303e9eb37c9f26bec56bf", "filename": "gcc/testsuite/gfortran.dg/operator_4.f90", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_4.f90?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -0,0 +1,100 @@\n+! PR 17711 : Verify error message text meets operator in source\n+! { dg-do compile }\n+\n+MODULE mod_t\n+  type :: t\n+    integer :: x\n+  end type\n+\n+  INTERFACE OPERATOR(==)\n+    MODULE PROCEDURE t_eq\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(/=)\n+    MODULE PROCEDURE t_ne\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(>)\n+    MODULE PROCEDURE t_gt\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(>=)\n+    MODULE PROCEDURE t_ge\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(<)\n+    MODULE PROCEDURE t_lt\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(<=)\n+    MODULE PROCEDURE t_le\n+  END INTERFACE\n+\n+CONTAINS\n+  LOGICAL FUNCTION t_eq(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_eq = (this%x == other%x)\n+  END FUNCTION\n+\n+  LOGICAL FUNCTION t_ne(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_ne = (this%x /= other%x)\n+  END FUNCTION\n+\n+  LOGICAL FUNCTION t_gt(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_gt = (this%x > other%x)\n+  END FUNCTION\n+\n+  LOGICAL FUNCTION t_ge(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_ge = (this%x >= other%x)\n+  END FUNCTION\n+\n+  LOGICAL FUNCTION t_lt(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_lt = (this%x < other%x)\n+  END FUNCTION\n+\n+  LOGICAL FUNCTION t_le(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_le = (this%x <= other%x)\n+  END FUNCTION\n+END MODULE\n+\n+PROGRAM pr17711\n+  USE mod_t\n+\n+  LOGICAL :: A\n+  INTEGER :: B\n+  TYPE(t) :: C\n+\n+  A = (A == B)   ! { dg-error \"comparison operator '=='\" }\n+  A = (A.EQ.B)   ! { dg-error \"comparison operator '.eq.'\" }\n+  A = (A /= B)   ! { dg-error \"comparison operator '/='\" }\n+  A = (A.NE.B)   ! { dg-error \"comparison operator '.ne.'\" }\n+  A = (A <= B)   ! { dg-error \"comparison operator '<='\" }\n+  A = (A.LE.B)   ! { dg-error \"comparison operator '.le.'\" }\n+  A = (A <  B)   ! { dg-error \"comparison operator '<'\" }\n+  A = (A.LT.B)   ! { dg-error \"comparison operator '.lt.'\" }\n+  A = (A >= B)   ! { dg-error \"comparison operator '>='\" }\n+  A = (A.GE.B)   ! { dg-error \"comparison operator '.ge.'\" }\n+  A = (A >  B)   ! { dg-error \"comparison operator '>'\" }\n+  A = (A.GT.B)   ! { dg-error \"comparison operator '.gt.'\" }\n+\n+  ! this should also work with user defined operators\n+  A = (A == C)   ! { dg-error \"comparison operator '=='\" }\n+  A = (A.EQ.C)   ! { dg-error \"comparison operator '.eq.'\" }\n+  A = (A /= C)   ! { dg-error \"comparison operator '/='\" }\n+  A = (A.NE.C)   ! { dg-error \"comparison operator '.ne.'\" }\n+  A = (A <= C)   ! { dg-error \"comparison operator '<='\" }\n+  A = (A.LE.C)   ! { dg-error \"comparison operator '.le.'\" }\n+  A = (A <  C)   ! { dg-error \"comparison operator '<'\" }\n+  A = (A.LT.C)   ! { dg-error \"comparison operator '.lt.'\" }\n+  A = (A >= C)   ! { dg-error \"comparison operator '>='\" }\n+  A = (A.GE.C)   ! { dg-error \"comparison operator '.ge.'\" }\n+  A = (A >  C)   ! { dg-error \"comparison operator '>'\" }\n+  A = (A.GT.C)   ! { dg-error \"comparison operator '.gt.'\" }\n+END PROGRAM\n+\n+! { dg-final { cleanup-modules \"mod_t\" } }"}, {"sha": "6ce77c8dc4dde845b7d4796c60e685abd211e6a1", "filename": "gcc/testsuite/gfortran.dg/operator_5.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_5.f90?ref=3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do compile }\n+! { dg-options \"-c\" }\n+\n+MODULE mod_t\n+  type :: t\n+    integer :: x\n+  end type\n+\n+  ! user defined operator\n+  INTERFACE OPERATOR(.FOO.)\n+    MODULE PROCEDURE t_foo\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(.FOO.)\n+    MODULE PROCEDURE t_foo                  ! { dg-error \"already present\" }\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(.FOO.)\n+    MODULE PROCEDURE t_bar                  ! { dg-error \"Ambiguous interfaces\" }\n+  END INTERFACE\n+\n+  ! intrinsic operator\n+  INTERFACE OPERATOR(==)\n+    MODULE PROCEDURE t_foo\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(.eq.)\n+    MODULE PROCEDURE t_foo                  ! { dg-error \"already present\" }\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(==)\n+    MODULE PROCEDURE t_bar                  ! { dg-error \"Ambiguous interfaces\" }\n+  END INTERFACE\n+\n+  INTERFACE OPERATOR(.eq.)\n+    MODULE PROCEDURE t_bar                  ! { dg-error \"already present\" }\n+  END INTERFACE\n+\n+CONTAINS\n+  LOGICAL FUNCTION t_foo(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_foo = .FALSE.\n+  END FUNCTION\n+\n+  LOGICAL FUNCTION t_bar(this, other)\n+    TYPE(t), INTENT(in) :: this, other\n+    t_bar = .FALSE.\n+  END FUNCTION\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"mod_t\" } }"}]}