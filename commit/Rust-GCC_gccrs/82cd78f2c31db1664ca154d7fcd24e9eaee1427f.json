{"sha": "82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "node_id": "C_kwDOANBUbNoAKDgyY2Q3OGYyYzMxZGIxNjY0Y2ExNTRkN2ZjZDI0ZTllYWVlMTQyN2Y", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-20T07:05:23Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-20T09:09:04Z"}, "message": "Restore --param=max-fsm-thread-length\n\nThe removal of --param=max-fsm-thread-length is causing code\nexplosion.  I thought that --param=max-fsm-thread-path-insns was a\nbetter gague for path profitability than raw BB length, but it turns\nout that we don't take into account PHIs when estimating the number of\nstatements.\n\nIn this PR, we have a sequence of very large PHIs that have us\ntraversing extremely large paths that blow up the compilation.\n\nWe could fix this a couple of different ways.  We could avoid\ntraversing more than a certain number of PHI arguments, or ignore\nlarge PHIs altogether.  The old implementation certainly had this\nknob, and we could cut things off before we even got to the ranger.\nWe could also adjust the instruction estimation to take into account\nPHIs, but I'm sure we'll mess something else in the process ;-).\n\nThe easiest thing to do is just restore the knob.\n\nAt a later time we could tweak this further, for instance,\ndisregarding empty blocks in the count.  BTW, this is the reason I\ndidn't chop things off in the lowlevel registry for all threaders: the\nforward threader can't really explore too deep paths, but it could\ntheoretically get there while threading over empty blocks.\n\nThis fixes 102814, 102852, and I bet it solves the Linux kernel cross\ncompile issue.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102814\n\t* doc/invoke.texi: Document --param=max-fsm-thread-length.\n\t* params.opt: Add --param=max-fsm-thread-length.\n\t* tree-ssa-threadbackward.c\n\t(back_threader_profitability::profitable_path_p): Fail on paths\n\tlonger than max-fsm-thread-length.", "tree": {"sha": "005002bc31dd4a788170d865251da1297a50f8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005002bc31dd4a788170d865251da1297a50f8dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "972ee845f54839e9bd2e4611bb268d75440f3845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/972ee845f54839e9bd2e4611bb268d75440f3845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/972ee845f54839e9bd2e4611bb268d75440f3845"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "c93d822431f70db97882f864fa65797e63402e1e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "patch": "@@ -14468,6 +14468,9 @@ Emit instrumentation calls to __tsan_func_entry() and __tsan_func_exit().\n Maximum number of instructions to copy when duplicating blocks on a\n finite state automaton jump thread path.\n \n+@item max-fsm-thread-length\n+Maximum number of basic blocks on a jump thread path.\n+\n @item parloops-chunk-size\n Chunk size of omp schedule for loops parallelized by parloops.\n "}, {"sha": "83b3db6fea6b8fa030bb3a34f2379061d5b05532", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "patch": "@@ -533,6 +533,10 @@ The maximum number of nested indirect inlining performed by early inliner.\n Common Joined UInteger Var(param_max_fields_for_field_sensitive) Param\n Maximum number of fields in a structure before pointer analysis treats the structure as a single variable.\n \n+-param=max-fsm-thread-length=\n+Common Joined UInteger Var(param_max_fsm_thread_length) Init(10) IntegerRange(1, 999999) Param Optimization\n+Maximum number of basic blocks on a jump thread path.\n+\n -param=max-fsm-thread-path-insns=\n Common Joined UInteger Var(param_max_fsm_thread_path_insns) Init(100) IntegerRange(1, 999999) Param Optimization\n Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path."}, {"sha": "e378adbbf53eb288b5ef5ab617c08b2351cdf3db", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82cd78f2c31db1664ca154d7fcd24e9eaee1427f/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=82cd78f2c31db1664ca154d7fcd24e9eaee1427f", "patch": "@@ -620,6 +620,15 @@ back_threader_profitability::profitable_path_p (const vec<basic_block> &m_path,\n   if (m_path.length () <= 1)\n       return false;\n \n+  if (m_path.length () > (unsigned) param_max_fsm_thread_length)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"  FAIL: Jump-thread path not considered: \"\n+\t\t \"the number of basic blocks on the path \"\n+\t\t \"exceeds PARAM_MAX_FSM_THREAD_LENGTH.\\n\");\n+      return false;\n+    }\n+\n   int n_insns = 0;\n   gimple_stmt_iterator gsi;\n   loop_p loop = m_path[0]->loop_father;"}]}