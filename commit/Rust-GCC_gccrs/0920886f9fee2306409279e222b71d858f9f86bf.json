{"sha": "0920886f9fee2306409279e222b71d858f9f86bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyMDg4NmY5ZmVlMjMwNjQwOTI3OWUyMjJiNzFkODU4ZjlmODZiZg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-02-07T19:02:39Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-02-07T19:02:39Z"}, "message": "re PR java/25535 (gcj broken on 64-bit big-endian systems)\n\n2006-02-07  Andrew Haley  <aph@redhat.com>\n\n        * expr.c (expand_invoke): (BC mode.)  If we find a method in a\n        class other than the one in which we expected to find it, ignore\n        the result.\n\n        PR java/25535\n        * constants.c (build_constants_constructor): move initializer into\n        first halfword on a 6-bit big-endian machine.\n\nFrom-SVN: r110710", "tree": {"sha": "cc429bbca658b2915a15d04fbecf3596b8c31b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc429bbca658b2915a15d04fbecf3596b8c31b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0920886f9fee2306409279e222b71d858f9f86bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0920886f9fee2306409279e222b71d858f9f86bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0920886f9fee2306409279e222b71d858f9f86bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0920886f9fee2306409279e222b71d858f9f86bf/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7935dc1bc3c1e806da0f6d2be8d9eae8dd0bdb08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7935dc1bc3c1e806da0f6d2be8d9eae8dd0bdb08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7935dc1bc3c1e806da0f6d2be8d9eae8dd0bdb08"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "bc5a579d213c838c1db41f8424acb34c7f9d645e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0920886f9fee2306409279e222b71d858f9f86bf/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0920886f9fee2306409279e222b71d858f9f86bf/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0920886f9fee2306409279e222b71d858f9f86bf", "patch": "@@ -1,3 +1,13 @@\n+2006-02-07  Andrew Haley  <aph@redhat.com>\n+\n+\t* expr.c (expand_invoke): (BC mode.)  If we find a method in a\n+\tclass other than the one in which we expected to find it, ignore\n+\tthe result.\n+\n+\tPR java/25535\n+\t* constants.c (build_constants_constructor): move initializer into\n+\tfirst halfword on a 6-bit big-endian machine.\n+ \n 2006-02-04  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/25676:"}, {"sha": "5d2f6785356afddc34cedffa58ae5bb7c73e991b", "filename": "gcc/java/constants.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0920886f9fee2306409279e222b71d858f9f86bf/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0920886f9fee2306409279e222b71d858f9f86bf/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=0920886f9fee2306409279e222b71d858f9f86bf", "patch": "@@ -1,5 +1,5 @@\n /* Handle the constant pool of the Java(TM) Virtual Machine.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -480,7 +480,15 @@ build_constants_constructor (void)\n       case CONSTANT_Fieldref:\n       case CONSTANT_NameAndType:\n \t{\n-\t  jword temp = outgoing_cpool->data[i].w;\n+\t  unsigned HOST_WIDE_INT temp = outgoing_cpool->data[i].w;\n+\n+\t  /* Make sure that on a 64-bit big-endian machine this\n+\t     32-bit jint appears in the first word.  \n+\t     FIXME: This is a kludge.  The field we're initializing is\n+\t     not a scalar but a union, and that's how we should\n+\t     represent it in the compiler.  We should fix this.  */\n+\t  if (BYTES_BIG_ENDIAN && BITS_PER_WORD > 32)\n+\t    temp <<= BITS_PER_WORD - 32;\n \n \t  tags_list\n \t    = tree_cons (NULL_TREE, "}, {"sha": "52f7e488b32fd005f6cd254fdd020a6921a4273b", "filename": "gcc/java/expr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0920886f9fee2306409279e222b71d858f9f86bf/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0920886f9fee2306409279e222b71d858f9f86bf/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=0920886f9fee2306409279e222b71d858f9f86bf", "patch": "@@ -2271,6 +2271,17 @@ expand_invoke (int opcode, int method_ref_index, int nargs ATTRIBUTE_UNUSED)\n   else\n     method = lookup_java_method (self_type, method_name, method_signature);\n \n+  /* We've found a method in a class other than the one in which it\n+     was wanted.  This can happen if, for instance, we're trying to\n+     compile invokespecial super.equals().  \n+     FIXME: This is a kludge.  Rather than nullifying the result, we\n+     should change lookup_java_method() so that it doesn't search the\n+     superclass chain when we're BC-compiling.  */\n+  if (! flag_verify_invocations\n+      && method\n+      && self_type != DECL_CONTEXT (method))\n+    method = NULL_TREE;\n+\n   /* We've found a method in an interface, but this isn't an interface\n      call.  */\n   if (opcode != OPCODE_invokeinterface"}]}