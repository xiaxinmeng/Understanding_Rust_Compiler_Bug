{"sha": "cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I2YjkxMWE2MzcyNGQ1ZWZkNWI0OGI5YWUwZGFjMDljMzA2MGU4NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-07T13:42:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-07T13:42:52Z"}, "message": "re PR tree-optimization/42956 (internal compiler error: Segmentation fault with -O1)\n\n2010-02-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/42956\n\t* gimplify.c (gimple_fold_indirect_ref): Avoid generating\n\tnew ARRAY_REFs on variable size element or minimal index arrays.\n\tComplete.\n\t* tree-ssa-loop-ivopts.c (find_interesting_uses_address): Use\n\tgimple_fold_indirect_ref.\n\n\t* gcc.c-torture/compile/pr42956.c: New testcase.\n\nFrom-SVN: r156571", "tree": {"sha": "0fbca980303c232d16d4c5e497733ca6ff9c94ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fbca980303c232d16d4c5e497733ca6ff9c94ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f41e0f10464c060e928927c5272a360c31a48093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41e0f10464c060e928927c5272a360c31a48093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41e0f10464c060e928927c5272a360c31a48093"}], "stats": {"total": 122, "additions": 118, "deletions": 4}, "files": [{"sha": "c05b65858a73ca3de4a34886d35bb6ece920c388", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "patch": "@@ -1,3 +1,12 @@\n+2010-02-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42956\n+\t* gimplify.c (gimple_fold_indirect_ref): Avoid generating\n+\tnew ARRAY_REFs on variable size element or minimal index arrays.\n+\tComplete.\n+\t* tree-ssa-loop-ivopts.c (find_interesting_uses_address): Use\n+\tgimple_fold_indirect_ref.\n+\n 2010-02-06  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/42957"}, {"sha": "91dabd1aa92c271c5bf74381009f90c281c559f1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 66, "deletions": 3, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "patch": "@@ -3935,7 +3935,7 @@ gimple_fold_indirect_ref (tree t)\n   tree sub = t;\n   tree subtype;\n \n-  STRIP_USELESS_TYPE_CONVERSION (sub);\n+  STRIP_NOPS (sub);\n   subtype = TREE_TYPE (sub);\n   if (!POINTER_TYPE_P (subtype))\n     return NULL_TREE;\n@@ -3950,18 +3950,80 @@ gimple_fold_indirect_ref (tree t)\n \n       /* *(foo *)&fooarray => fooarray[0] */\n       if (TREE_CODE (optype) == ARRAY_TYPE\n+\t  && TREE_CODE (TYPE_SIZE (TREE_TYPE (optype))) == INTEGER_CST\n \t  && useless_type_conversion_p (type, TREE_TYPE (optype)))\n        {\n          tree type_domain = TYPE_DOMAIN (optype);\n          tree min_val = size_zero_node;\n          if (type_domain && TYPE_MIN_VALUE (type_domain))\n            min_val = TYPE_MIN_VALUE (type_domain);\n-         return build4 (ARRAY_REF, type, op, min_val, NULL_TREE, NULL_TREE);\n+\t if (TREE_CODE (min_val) == INTEGER_CST)\n+\t   return build4 (ARRAY_REF, type, op, min_val, NULL_TREE, NULL_TREE);\n        }\n+      /* *(foo *)&complexfoo => __real__ complexfoo */\n+      else if (TREE_CODE (optype) == COMPLEX_TYPE\n+               && useless_type_conversion_p (type, TREE_TYPE (optype)))\n+        return fold_build1 (REALPART_EXPR, type, op);\n+      /* *(foo *)&vectorfoo => BIT_FIELD_REF<vectorfoo,...> */\n+      else if (TREE_CODE (optype) == VECTOR_TYPE\n+               && useless_type_conversion_p (type, TREE_TYPE (optype)))\n+        {\n+          tree part_width = TYPE_SIZE (type);\n+          tree index = bitsize_int (0);\n+          return fold_build3 (BIT_FIELD_REF, type, op, part_width, index);\n+        }\n+    }\n+\n+  /* ((foo*)&vectorfoo)[1] => BIT_FIELD_REF<vectorfoo,...> */\n+  if (TREE_CODE (sub) == POINTER_PLUS_EXPR\n+      && TREE_CODE (TREE_OPERAND (sub, 1)) == INTEGER_CST)\n+    {\n+      tree op00 = TREE_OPERAND (sub, 0);\n+      tree op01 = TREE_OPERAND (sub, 1);\n+      tree op00type;\n+\n+      STRIP_NOPS (op00);\n+      op00type = TREE_TYPE (op00);\n+      if (TREE_CODE (op00) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_TYPE (op00type)) == VECTOR_TYPE\n+\t  && useless_type_conversion_p (type, TREE_TYPE (TREE_TYPE (op00type))))\n+\t{\n+\t  HOST_WIDE_INT offset = tree_low_cst (op01, 0);\n+\t  tree part_width = TYPE_SIZE (type);\n+\t  unsigned HOST_WIDE_INT part_widthi\n+\t    = tree_low_cst (part_width, 0) / BITS_PER_UNIT;\n+\t  unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n+\t  tree index = bitsize_int (indexi);\n+\t  if (offset / part_widthi\n+\t      <= TYPE_VECTOR_SUBPARTS (TREE_TYPE (op00type)))\n+\t    return fold_build3 (BIT_FIELD_REF, type, TREE_OPERAND (op00, 0),\n+\t\t\t\tpart_width, index);\n+\t}\n+    }\n+\n+  /* ((foo*)&complexfoo)[1] => __imag__ complexfoo */\n+  if (TREE_CODE (sub) == POINTER_PLUS_EXPR\n+      && TREE_CODE (TREE_OPERAND (sub, 1)) == INTEGER_CST)\n+    {\n+      tree op00 = TREE_OPERAND (sub, 0);\n+      tree op01 = TREE_OPERAND (sub, 1);\n+      tree op00type;\n+\n+      STRIP_NOPS (op00);\n+      op00type = TREE_TYPE (op00);\n+      if (TREE_CODE (op00) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_TYPE (op00type)) == COMPLEX_TYPE\n+\t  && useless_type_conversion_p (type, TREE_TYPE (TREE_TYPE (op00type))))\n+\t{\n+\t  tree size = TYPE_SIZE_UNIT (type);\n+\t  if (tree_int_cst_equal (size, op01))\n+\t    return fold_build1 (IMAGPART_EXPR, type, TREE_OPERAND (op00, 0));\n+\t}\n     }\n \n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n   if (TREE_CODE (TREE_TYPE (subtype)) == ARRAY_TYPE\n+      && TREE_CODE (TYPE_SIZE (TREE_TYPE (TREE_TYPE (subtype)))) == INTEGER_CST\n       && useless_type_conversion_p (type, TREE_TYPE (TREE_TYPE (subtype))))\n     {\n       tree type_domain;\n@@ -3973,7 +4035,8 @@ gimple_fold_indirect_ref (tree t)\n       type_domain = TYPE_DOMAIN (TREE_TYPE (sub));\n       if (type_domain && TYPE_MIN_VALUE (type_domain))\n         min_val = TYPE_MIN_VALUE (type_domain);\n-      return build4 (ARRAY_REF, type, sub, min_val, NULL_TREE, NULL_TREE);\n+      if (TREE_CODE (min_val) == INTEGER_CST)\n+\treturn build4 (ARRAY_REF, type, sub, min_val, NULL_TREE, NULL_TREE);\n     }\n \n   return NULL_TREE;"}, {"sha": "f9508f05933d74a1ae31588527a09a86e8bb7d7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "patch": "@@ -1,3 +1,8 @@\n+2010-02-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42956\n+\t* gcc.c-torture/compile/pr42956.c: New testcase.\n+\n 2010-02-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/42742"}, {"sha": "f592d4be4d7e3f026f4508893690240f87085bda", "filename": "gcc/testsuite/gcc.c-torture/compile/pr42956.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42956.c?ref=cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "patch": "@@ -0,0 +1,33 @@\n+typedef const int cint;\n+typedef struct {\n+} Bounds;\n+int ndim_, ncomp_, selectedcomp_, nregions_;\n+void *voidregion_;\n+typedef struct {\n+    double diff, err, spread;\n+} Errors;\n+typedef const Errors cErrors;\n+void Split(int iregion, int depth, int xregion)\n+{\n+  typedef struct {\n+      double avg, err, spread, chisq;\n+      double xmin[ndim_], xmax[ndim_];\n+  } Result;\n+  typedef struct region {\n+      Result result[ncomp_];\n+  } Region;\n+  Errors errors[ncomp_];\n+  int comp, ireg, xreg;\n+  for( ireg = iregion, xreg = xregion; ireg < nregions_; ireg = xreg++ )\n+    {\n+      Result *result = ((Region *)voidregion_)[ireg].result;\n+      for( comp = 0; comp < ncomp_; ++comp )\n+\t{\n+\t  Result *r = &result[comp];\n+\t  cErrors *e = &errors[comp];\n+\t  double c = e->diff;\n+\t  if( r->err > 0 ) r->err = r->err*e->err + c;\n+\t}\n+    }\n+}\n+"}, {"sha": "436e6ce8fc47cf37bdfcf751f2f3a5613a795604", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6b911a63724d5efd5b48b9ae0dac09c3060e85/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=cb6b911a63724d5efd5b48b9ae0dac09c3060e85", "patch": "@@ -1686,7 +1686,11 @@ find_interesting_uses_address (struct ivopts_data *data, gimple stmt, tree *op_p\n \t  while (handled_component_p (*ref))\n \t    ref = &TREE_OPERAND (*ref, 0);\n \t  if (TREE_CODE (*ref) == INDIRECT_REF)\n-\t    *ref = fold_indirect_ref (*ref);\n+\t    {\n+\t      tree tem = gimple_fold_indirect_ref (TREE_OPERAND (*ref, 0));\n+\t      if (tem)\n+\t\t*ref = tem;\n+\t    }\n \t}\n     }\n "}]}