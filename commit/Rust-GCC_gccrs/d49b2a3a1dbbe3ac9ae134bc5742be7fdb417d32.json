{"sha": "d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32", "node_id": "C_kwDOANBUbNoAKGQ0OWIyYTNhMWRiYmUzYWM5YWUxMzRiYzU3NDJiZTdmZGI0MTdkMzI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-15T12:42:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-15T17:42:52Z"}, "message": "middle-end/108086 - avoid quadraticness in copy_edges_for_bb\n\nFor the testcase in PR108086 it's visible that we split blocks\nmultiple times when inlining and that causes us to adjust the\nblock tail stmt BBs multiple times, once for each split.  The\nfix is to walk backwards and split from the tail instead.\n\nFor a reduced testcase this improves compile-time at -O by 4%.\n\n\tPR middle-end/108086\n\t* tree-inline.cc (copy_edges_for_bb): Walk stmts backwards for\n\tsplitting the block to avoid quadratic behavior with setting\n\tstmts BB on multliple splits.", "tree": {"sha": "82a998e3764579fc4352b58094d71049624dfbd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82a998e3764579fc4352b58094d71049624dfbd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f101e32e2fb616633722fb552779f537e9a9891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f101e32e2fb616633722fb552779f537e9a9891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f101e32e2fb616633722fb552779f537e9a9891"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "0360f1f1e57ca1de75eb951d56359054b6134ecf", "filename": "gcc/tree-inline.cc", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32/gcc%2Ftree-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32/gcc%2Ftree-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.cc?ref=d49b2a3a1dbbe3ac9ae134bc5742be7fdb417d32", "patch": "@@ -2569,13 +2569,17 @@ copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n \t  && !old_edge->src->aux)\n \tnew_bb->count -= old_edge->count ().apply_scale (num, den);\n \n-  for (si = gsi_start_bb (new_bb); !gsi_end_p (si);)\n+  /* Walk stmts from end to start so that splitting will adjust the BB\n+     pointer for each stmt at most once, even when we split the block\n+     multiple times.  */\n+  bool seen_nondebug = false;\n+  for (si = gsi_last_bb (new_bb); !gsi_end_p (si);)\n     {\n       bool can_throw, nonlocal_goto;\n       gimple *copy_stmt = gsi_stmt (si);\n \n       /* Do this before the possible split_block.  */\n-      gsi_next (&si);\n+      gsi_prev (&si);\n \n       /* If this tree could throw an exception, there are two\n          cases where we need to add abnormal edge(s): the\n@@ -2595,25 +2599,23 @@ copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n \n       if (can_throw || nonlocal_goto)\n \t{\n-\t  if (!gsi_end_p (si))\n-\t    {\n-\t      while (!gsi_end_p (si) && is_gimple_debug (gsi_stmt (si)))\n-\t\tgsi_next (&si);\n-\t      if (gsi_end_p (si))\n-\t\tneed_debug_cleanup = true;\n-\t    }\n-\t  if (!gsi_end_p (si))\n-\t    /* Note that bb's predecessor edges aren't necessarily\n-\t       right at this point; split_block doesn't care.  */\n+\t  /* If there's only debug insns after copy_stmt don't split\n+\t     the block but instead mark the block for cleanup.  */\n+\t  if (!seen_nondebug)\n+\t    need_debug_cleanup = true;\n+\t  else\n \t    {\n+\t      /* Note that bb's predecessor edges aren't necessarily\n+\t\t right at this point; split_block doesn't care.  */\n \t      edge e = split_block (new_bb, copy_stmt);\n-\n-\t      new_bb = e->dest;\n-\t      new_bb->aux = e->src->aux;\n-\t      si = gsi_start_bb (new_bb);\n+\t      e->dest->aux = new_bb->aux;\n+\t      seen_nondebug = false;\n \t    }\n \t}\n \n+      if (!is_gimple_debug (copy_stmt))\n+\tseen_nondebug = true;\n+\n       bool update_probs = false;\n \n       if (gimple_code (copy_stmt) == GIMPLE_EH_DISPATCH)"}]}