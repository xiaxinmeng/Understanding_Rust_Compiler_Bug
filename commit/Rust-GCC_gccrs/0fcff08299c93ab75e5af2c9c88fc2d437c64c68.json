{"sha": "0fcff08299c93ab75e5af2c9c88fc2d437c64c68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjZmYwODI5OWM5M2FiNzVlNWFmMmM5Yzg4ZmMyZDQzN2M2NGM2OA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@wrs.com", "date": "1998-12-04T00:28:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-12-04T00:28:34Z"}, "message": "gthr-vxworks.h (__ehdtor): Fix memory leak.\n\n        * gthr-vxworks.h (__ehdtor): Fix memory leak.  The delete hook\n        runs in the context of the deleter, not the deletee, so we must\n        use taskVarGet to find the correct memory to free.\n        (__gthread_key_create): Initialize the task\n        variable subsystem so that the task variable is still active when\n        the delete hook is run.\n\nFrom-SVN: r24079", "tree": {"sha": "110b6dc685ee9f0842de2dda6c788f9d5ffd6539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/110b6dc685ee9f0842de2dda6c788f9d5ffd6539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fcff08299c93ab75e5af2c9c88fc2d437c64c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcff08299c93ab75e5af2c9c88fc2d437c64c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcff08299c93ab75e5af2c9c88fc2d437c64c68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcff08299c93ab75e5af2c9c88fc2d437c64c68/comments", "author": null, "committer": null, "parents": [{"sha": "9f643ff81def49d34790b78d4ce68fe2b1bac4c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f643ff81def49d34790b78d4ce68fe2b1bac4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f643ff81def49d34790b78d4ce68fe2b1bac4c0"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "1231b9fbebb4d8cfd32774dd62582b636f06c946", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcff08299c93ab75e5af2c9c88fc2d437c64c68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcff08299c93ab75e5af2c9c88fc2d437c64c68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fcff08299c93ab75e5af2c9c88fc2d437c64c68", "patch": "@@ -1,3 +1,12 @@\n+Thu Dec  3 11:19:50 1998  Mike Stump  <mrs@wrs.com>\n+\n+\t* gthr-vxworks.h (__ehdtor): Fix memory leak.  The delete hook\n+\truns in the context of the deleter, not the deletee, so we must\n+\tuse taskVarGet to find the correct memory to free.\n+\t(__gthread_key_create): Initialize the task\n+\tvariable subsystem so that the task variable is still active when\n+\tthe delete hook is run.\n+\n 1998-12-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* pdp11.h (TARGET_40_PLUS): Fix typo."}, {"sha": "6d51ded2cdadd031c512887d209f6a19a28eef7b", "filename": "gcc/gthr-vxworks.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcff08299c93ab75e5af2c9c88fc2d437c64c68/gcc%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcff08299c93ab75e5af2c9c88fc2d437c64c68/gcc%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-vxworks.h?ref=0fcff08299c93ab75e5af2c9c88fc2d437c64c68", "patch": "@@ -60,11 +60,16 @@ extern __gthread_key_t eh_context_key;\n    don't map well enough onto VxWorks.  */\n \n static void\n-__ehdtor ()\n+__ehdtor (void *pTcb)\n {\n-  if (eh_context_key)\n-    free ((void*)eh_context_key);\n-  eh_context_key = 0;\n+  int tid = (int) pTcb;\n+  void *p = (void*)taskVarGet(tid, &eh_context_key);\n+  if (p != (void*)-1)\n+    {\n+      if (p)\n+\tfree (p);\n+      taskVarSet(tid, &eh_context_key, 0);\n+    }\n }\n \n /* This only works for the code in libgcc2.c.  */\n@@ -74,6 +79,11 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n {\n   *key = 0;\n \n+  /* Do this first so that the task variables are visible during the\n+     running of the delete hook.  */\n+\n+  taskVarInit();\n+\n   /* We don't have a way to track dtor here, so instead, we\n      register a generic routine that can cleanup any task.  */\n "}]}