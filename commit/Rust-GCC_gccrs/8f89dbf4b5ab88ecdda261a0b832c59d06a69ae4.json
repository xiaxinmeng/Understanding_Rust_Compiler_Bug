{"sha": "8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4OWRiZjRiNWFiODhlY2RkYTI2MWEwYjgzMmM1OWQwNmE2OWFlNA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@doctor.moo.mud.org", "date": "2002-09-20T21:00:07Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2002-09-20T21:00:07Z"}, "message": "configure.in: Rearrange.\n\n2002-09-20  Nathanael Nerode <neroden@doctor.moo.mud.org>\n\n\t* configure.in: Rearrange.\n\nFrom-SVN: r57369", "tree": {"sha": "710084ace61a8fe46725464c2d119a728d8cd1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/710084ace61a8fe46725464c2d119a728d8cd1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4/comments", "author": null, "committer": null, "parents": [{"sha": "1f7422bdbc180bed1bcfbd978dc21dde9f3fca5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7422bdbc180bed1bcfbd978dc21dde9f3fca5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7422bdbc180bed1bcfbd978dc21dde9f3fca5d"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "7d8e8b4c1d787b1a12bfb662d6ef2634bb54cbc3", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4", "patch": "@@ -1,3 +1,7 @@\n+2002-09-20  Nathanael Nerode <neroden@doctor.moo.mud.org>\n+\n+\t* configure.in: Rearrange.\n+\n 2002-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "697e1094b7819d6f2045f0665f8e1a64befa7f31", "filename": "configure.in", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=8f89dbf4b5ab88ecdda261a0b832c59d06a69ae4", "patch": "@@ -1127,25 +1127,6 @@ if test -n \"${host_makefile_frag}\" ; then\n   host_makefile_frag=mh-frag\n fi\n \n-# If we aren't going to be using gcc, see if we can extract a definition\n-# of CC from the fragment.\n-# Actually, use the 'pre-extracted' version above.\n-if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n-  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-  found=\n-  for dir in $PATH; do\n-    test -z \"$dir\" && dir=.\n-    if test -f $dir/gcc; then\n-      found=yes\n-      break\n-    fi\n-  done\n-  IFS=\"$save_ifs\"\n-  if test -z \"${found}\" && test -n \"${tentative_cc}\" ; then\n-    CC=$tentative_cc\n-  fi\n-fi\n-\n case \"${target}\" in\n   v810*)\n     target_makefile_frag=\"config/mt-v810\"\n@@ -1282,6 +1263,25 @@ case \"${host}\" in\n     ;;\n esac\n \n+# If we aren't going to be using gcc, see if we can extract a definition\n+# of CC from the fragment.\n+# Actually, use the 'pre-extracted' version above.\n+if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n+  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+  found=\n+  for dir in $PATH; do\n+    test -z \"$dir\" && dir=.\n+    if test -f $dir/gcc; then\n+      found=yes\n+      break\n+    fi\n+  done\n+  IFS=\"$save_ifs\"\n+  if test -z \"${found}\" && test -n \"${tentative_cc}\" ; then\n+    CC=$tentative_cc\n+  fi\n+fi\n+\n # post-target:\n \n # Make sure that the compiler is able to generate an executable.  If it"}]}