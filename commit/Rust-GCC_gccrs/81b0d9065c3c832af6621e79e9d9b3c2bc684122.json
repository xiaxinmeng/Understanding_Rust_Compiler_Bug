{"sha": "81b0d9065c3c832af6621e79e9d9b3c2bc684122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiMGQ5MDY1YzNjODMyYWY2NjIxZTc5ZTlkOWIzYzJiYzY4NDEyMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-06T16:12:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-06T16:12:43Z"}, "message": "re PR lto/65302 (LTO: ICE internal compiler error: verify_flow_info failed)\n\n\n\tPR ipa/65302\n\t* value-prof.c (gimple_ic): Pure dead eh edges when needed.\n\t* g++.dg/lto/pr65302_1.C: New testcase.\n\t* g++.dg/lto/pr65302_0.C: New testcase.\n\nFrom-SVN: r221244", "tree": {"sha": "74556e0f51c29f9e930705dfea92110492ad162c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74556e0f51c29f9e930705dfea92110492ad162c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b0d9065c3c832af6621e79e9d9b3c2bc684122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b0d9065c3c832af6621e79e9d9b3c2bc684122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b0d9065c3c832af6621e79e9d9b3c2bc684122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b0d9065c3c832af6621e79e9d9b3c2bc684122/comments", "author": null, "committer": null, "parents": [{"sha": "2c7f8ba5553336092ad3ac0a3a610ee9fedaf3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7f8ba5553336092ad3ac0a3a610ee9fedaf3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c7f8ba5553336092ad3ac0a3a610ee9fedaf3b1"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "e25298c55c86d6543f74ec3babe6be0afbe0eb58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81b0d9065c3c832af6621e79e9d9b3c2bc684122", "patch": "@@ -1,3 +1,8 @@\n+2015-03-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65302\n+\t* value-prof.c (gimple_ic): Pure dead eh edges when needed.\n+\n 2015-03-06  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/64928"}, {"sha": "c7de0b16813b18070a32e31f637af03b1162a844", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81b0d9065c3c832af6621e79e9d9b3c2bc684122", "patch": "@@ -1,3 +1,8 @@\n+2015-03-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/lto/pr65302_1.C: New testcase.\n+\t* g++.dg/lto/pr65302_0.C: New testcase.\n+\n 2015-03-06  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/arm/atomic-comp-swap-release-acquire.c: Add"}, {"sha": "2298afd9d96c628e021522231a066950c19058b5", "filename": "gcc/testsuite/g++.dg/lto/pr65302_0.C", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_0.C?ref=81b0d9065c3c832af6621e79e9d9b3c2bc684122", "patch": "@@ -0,0 +1,99 @@\n+// { dg-lto-do link }\n+// { dg-lto-options { { -flto -O2 } } }\n+// { dg-extra-ld-options \"-r -nostdlib -O0\" }\n+\n+class CstringStorageReference {\n+  public:\n+  ~CstringStorageReference ();\n+};\n+class Cstring {\n+  CstringStorageReference m_stringRef;\n+ public:\n+  Cstring (const char *str, int l = 0);\n+  unsigned int getLength () const;\n+};\n+class ZEvent_Component { };\n+class ZEvent_Data { };\n+class ZEvent_Interrupt { };\n+class ZEvent_Mouse { };\n+class ZEvent_Key { };\n+class ZEventHandler {\n+  virtual void HandleEvent (const ZEvent_Component & event);\n+  virtual void HandleEvent (const ZEvent_Mouse & event);\n+  virtual void HandleEvent (const ZEvent_Key & event);\n+  virtual void HandleEvent (const ZEvent_Interrupt & event);\n+  virtual void HandleEvent (const ZEvent_Data & event);\n+};\n+enum ZHorizontalAlignment { HA_Left };\n+enum ZVerticalAlignment { VA_Baseline };\n+struct ZDevicePointStruct { };\n+struct ZDeviceRectangleStruct { };\n+struct ZDeviceCircleStruct { };\n+class ZOutputDevice;\n+class Foo;\n+class ZRubberBand {\n+ public:\n+  ZOutputDevice * getOutputDevice ();\n+};\n+class ZRubberBand2P : public ZRubberBand {\n+  virtual void Init ();\n+  Foo *mp_graphicContext;\n+  int m_textAscent;\n+  int m_OkButtonWidth;\n+  int m_OkButtonHeight;\n+};\n+class ZColor { };\n+class ZViewPort2D { };\n+class ZCursor;\n+class ZPixmap;\n+class ZOutputDevice:public ZEventHandler {\n+public:\n+  typedef ZHorizontalAlignment THorizontalAlignment;\n+  typedef ZVerticalAlignment TVerticalAlignment;\n+  virtual const char *MyName () const { return \"\"; }\n+  virtual ~ ZOutputDevice ();\n+  virtual Cstring getTitle () const;\n+  virtual void setTitle (const Cstring &) { }\n+  virtual void Init ();\n+  virtual void shutdown ();\n+  virtual void minimize ();\n+  virtual void normalize ();\n+  virtual void raiseToTop ();\n+  virtual ZViewPort2D GetViewPort () const;\n+  virtual void setBackgroundColor (const ZColor & color) = 0;\n+  virtual void Clear () = 0;\n+  virtual void Flush (int forced) = 0;\n+  virtual void dismissCache () { }\n+  virtual int GetDeviceWidth () const = 0;\n+  virtual int GetDeviceHeight () const = 0;\n+  virtual Foo *CreateGraphicContext () = 0;\n+  virtual ZCursor *createCursor (const ZPixmap &, int, int) { return __null; }\n+  virtual void DrawLine (const Foo & gc, int x1, int y1, int x2, int y2) = 0;\n+  virtual void DrawLines (const Foo & gc, const ZDevicePointStruct * points, unsigned int count) = 0;\n+  virtual void FillPolygon (const Foo & gc, const ZDevicePointStruct * points, unsigned int count) = 0;\n+  virtual void DrawPoint (const Foo & gc, int x1, int y1) = 0;\n+  virtual void DrawPoints (const Foo & gc, const ZDevicePointStruct * points, unsigned int count) = 0;\n+  virtual void DrawRectangle (const Foo & gc, int x, int y, int width, int height) = 0;\n+  virtual void DrawRectangles (const Foo & gc, const ZDeviceRectangleStruct * rectangles, unsigned int count) = 0;\n+  virtual void FillRectangle (const Foo & gc, int x, int y, int width, int height) = 0;\n+  virtual void FillRectangles (const Foo & gc, const ZDeviceRectangleStruct * rectangles, unsigned int count) = 0;\n+  virtual void DrawCircle (const Foo & gc, int x, int y, int radius) = 0;\n+  virtual void DrawCircles (const Foo & gc, const ZDeviceCircleStruct * circle, unsigned int count) = 0;\n+  virtual void FillCircle (const Foo & gc, int x, int y, int radius) = 0;\n+  virtual void FillCircles (const Foo & gc, const ZDeviceCircleStruct * circle, unsigned int count) = 0;\n+  virtual void DrawString (const Foo & gc, int xx, int yy, const Cstring & theString, THorizontalAlignment horAlign = HA_Left, TVerticalAlignment verAlign = VA_Baseline) = 0;\n+  virtual void getStringBounds (const Foo & gc, const Cstring & theString, int & width, int & height, int & ascent) const;\n+};\n+template < class T > class EMaskContentVector\n+{\n+  signed m_freelist_idx:32;\n+  EMaskContentVector (const EMaskContentVector < T > &, void *buf);\n+};\n+template < class T > EMaskContentVector <\n+  T >::EMaskContentVector (const EMaskContentVector < T > &elem, void *buf):\n+m_freelist_idx (-1)\n+{\n+}\n+void ZRubberBand2P::Init () {\n+  getOutputDevice ()->getStringBounds (*mp_graphicContext, Cstring (\"Ok\"), m_OkButtonWidth, m_OkButtonHeight, m_textAscent);\n+}"}, {"sha": "b2ccc2a90bc57e80ba40c9276eed42783fcddb7c", "filename": "gcc/testsuite/g++.dg/lto/pr65302_1.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_1.C?ref=81b0d9065c3c832af6621e79e9d9b3c2bc684122", "patch": "@@ -0,0 +1,83 @@\n+#pragma implementation\n+#pragma interface\n+class CstringStorageReference {\n+  public:\n+  ~CstringStorageReference ();\n+};\n+class Cstring {\n+  CstringStorageReference m_stringRef;\n+ public:\n+  Cstring (const char *str, int l = 0);\n+  unsigned int getLength () const;\n+};\n+inline unsigned int\n+Cstring::getLength () const { };\n+class ZEvent_Component { };\n+class ZEvent_Data { };\n+class ZEvent_Interrupt { };\n+class ZEvent_Mouse { };\n+class ZEvent_Key { };\n+class ZEventHandler\n+{\n+  virtual void HandleEvent (const ZEvent_Component & event);\n+  virtual void HandleEvent (const ZEvent_Mouse & event);\n+  virtual void HandleEvent (const ZEvent_Key & event);\n+  virtual void HandleEvent (const ZEvent_Interrupt & event);\n+  virtual void HandleEvent (const ZEvent_Data & event);\n+};\n+class ZColor { };\n+class ZViewPort2D { };\n+enum ZVerticalAlignment { VA_Baseline };\n+struct ZDevicePointStruct { };\n+class ZCursor;\n+class ZPixmap;\n+class Foo;\n+class ZOutputDevice : public ZEventHandler {\n+ public:\n+  typedef ZVerticalAlignment TVerticalAlignment;\n+  virtual const char *MyName () const { }\n+  virtual ~ ZOutputDevice ();\n+  virtual Cstring getTitle () const;\n+  virtual void setTitle (const Cstring &) { }\n+  virtual void Init ();\n+  virtual void shutdown ();\n+  virtual void minimize ();\n+  virtual void normalize ();\n+  virtual void raiseToTop ();\n+  virtual ZViewPort2D GetViewPort () const;\n+  virtual void setBackgroundColor (const ZColor & color) = 0;\n+  virtual void Clear () = 0;\n+  virtual void Flush (int forced) = 0;\n+  virtual void dismissCache () { }\n+  virtual int GetDeviceWidth () const = 0;\n+  virtual int GetDeviceHeight () const = 0;\n+  virtual Foo *CreateGraphicContext () = 0;\n+  virtual ZCursor *createCursor (const ZPixmap &, int, int) { }\n+  virtual void DrawLine (const Foo & gc, int x1, int y2) = 0;\n+  virtual void DrawLines (const Foo & gc, const ZDevicePointStruct * points,\n+\t\t\t  unsigned int count) = 0;\n+};\n+class ZOutputDevicePS :public ZOutputDevice\n+{\n+  virtual void FillPolygon (const Foo & gc, unsigned int count);\n+  virtual void DrawPoint (const Foo & gc, int x1, int y1);\n+  virtual void DrawPoints (const Foo & gc, const ZDevicePointStruct * points,\n+\t\t\t   unsigned int count);\n+  virtual void DrawRectangle (const Foo & gc, int x, int height);\n+  virtual void DrawRectangles (const Foo & gc, unsigned int count);\n+  virtual void FillRectangle (const Foo & gc, int x, int height);\n+  virtual void FillRectangles (const Foo & gc, unsigned int count);\n+  virtual void DrawCircle (const Foo & gc, int x, int y, int radius);\n+  virtual void DrawCircles (const Foo & gc, unsigned int count);\n+  virtual void FillCircle (const Foo & gc, int x, int y, int radius);\n+  virtual void FillCircles (const Foo & gc, unsigned int count);\n+  virtual void DrawString (const Foo & gc, int xx, int yy,\n+\t\t\t   TVerticalAlignment verAlign);\n+  virtual void getStringBounds (const Foo & gc, const Cstring & theString,\n+\t\t\t\tint & width, int & height, int & acsent) const;\n+};\n+void\n+ZOutputDevicePS::getStringBounds (const Foo &, const Cstring & theString,\n+\t\t\t\t   int & width, int & height, int & ascent) const {\n+  width = theString.getLength () * 8;\n+}"}, {"sha": "b16bce8746a9552c3a91c1ebf4c5aaf36a9c5f85", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b0d9065c3c832af6621e79e9d9b3c2bc684122/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=81b0d9065c3c832af6621e79e9d9b3c2bc684122", "patch": "@@ -1576,6 +1576,8 @@ gimple_ic (gcall *icall_stmt, struct cgraph_node *direct_call,\n \t\t     PHI_ARG_DEF_FROM_EDGE (phi, e_eh));\n \t  }\n        }\n+  if (!stmt_could_throw_p (dcall_stmt))\n+    gimple_purge_dead_eh_edges (dcall_bb);\n   return dcall_stmt;\n }\n "}]}