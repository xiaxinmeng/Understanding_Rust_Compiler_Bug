{"sha": "ba4f5530c475eadd2a7edb46b6c1c9d5f9267501", "node_id": "C_kwDOANBUbNoAKGJhNGY1NTMwYzQ3NWVhZGQyYTdlZGI0NmI2YzFjOWQ1ZjkyNjc1MDE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-22T11:54:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-22T17:48:20Z"}, "message": "libstdc++: Use rvalues in std::string::resize_and_overwrite (LWG 3645)\n\nPreviously the C++23 draft required that the callback arguments were\nlvalues, which was overvable by the callback. LWG 3645 removes that\noverspecification, so we can pass rvalues and the user can't modify\nour local variables. I've used auto(p) to produce rvalues, which is only\nsupported since Clang 15, but I think that's OK for a C++23 feature.\n\nWhile making this change I noticed that we weren't correctly enforcing\nthe requirement that the callback returns an integer-like type. Add\nbetter assertions for the type and value.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.tcc (basic_string::resize_and_overwrite):\n\tPass rvalues to the callback, as now allowed by LWG 3645.\n\tEnforce preconditions on the return value.\n\t* testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc:\n\tAdjust.", "tree": {"sha": "54b92cfef4f51a49eeeb4dbb505d4a3fcc56f1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b92cfef4f51a49eeeb4dbb505d4a3fcc56f1dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4f4ce6a5dcefc5c97a8d05461653cbf536b745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4f4ce6a5dcefc5c97a8d05461653cbf536b745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4f4ce6a5dcefc5c97a8d05461653cbf536b745"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "99fdbeee5ad95092d170af27c4bc01f091cde6dc", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=ba4f5530c475eadd2a7edb46b6c1c9d5f9267501", "patch": "@@ -592,9 +592,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tsize_type _M_r;\n       };\n       _Terminator __term{this};\n-      const size_type __n2 [[maybe_unused]] = __n;\n-      __term._M_r = std::move(__op)(__p, __n);\n-      _GLIBCXX_DEBUG_ASSERT(__term._M_r >= 0 && __term._M_r <= __n2);\n+      auto __r = std::move(__op)(auto(__p), auto(__n));\n+      static_assert(ranges::__detail::__is_integer_like<decltype(__r)>);\n+      _GLIBCXX_DEBUG_ASSERT(__r >= 0 && __r <= __n);\n+      __term._M_r = size_type(__r);\n+      if (__term._M_r > __n)\n+\t__builtin_unreachable();\n     }\n #endif // C++23\n "}, {"sha": "f716030dad7f5e8a647bdb0e1edcff0a372ff2d2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4f5530c475eadd2a7edb46b6c1c9d5f9267501/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc?ref=ba4f5530c475eadd2a7edb46b6c1c9d5f9267501", "patch": "@@ -84,9 +84,11 @@ test03()\n   VERIFY( s == std::string(42, 'a') );\n   VERIFY( s[42] == '\\0' );\n \n-  s.resize_and_overwrite(0, [](auto&& p, auto&& n) {\n-    static_assert( std::is_same_v<decltype(p), char*&> );\n-    static_assert( std::is_same_v<decltype(n), std::string::size_type&> );\n+  s.resize_and_overwrite(0, [](auto p, auto n) {\n+    // N.B. these requirements were relaxed by LWG 3645:\n+    // resize_and_overwrite is overspecified to call its callback with lvalues\n+    static_assert( std::is_same_v<decltype(p), char*> );\n+    static_assert( std::is_same_v<decltype(n), std::string::size_type> );\n     return 0;\n   });\n }"}]}