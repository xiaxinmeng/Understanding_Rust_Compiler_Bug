{"sha": "a24f02ffdb51513c05369f600dfff62329a6c8a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI0ZjAyZmZkYjUxNTEzYzA1MzY5ZjYwMGRmZmY2MjMyOWE2YzhhMQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2017-09-18T02:25:10Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-09-18T02:25:10Z"}, "message": "[RS6000] PR81996, __builtin_return_address(0) fails\n\nrs6000_return_addr assumes that the stack link is at frame+0, which is\ntrue for count>0.  For count==0, rs6000_return_addr is called with\nframe==frame_pointer_rtx and the stack link is *not* at frame+0 if\n-fstack-protector-all or -fsanitize=address because rs6000.h sets\nFRAME_GROWS_DOWNWARD for those options.\n\n\tPR target/81996\n\t* gcc/config/rs6000/rs6000.c (rs6000_return_addr): Use\n\tstack_pointer_rtx for count 0.  Update comments.  Break up\n\tlarge rtl expression.\n\nFrom-SVN: r252901", "tree": {"sha": "0b9349065d60fb914971689fffdd7e3e7c0de184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b9349065d60fb914971689fffdd7e3e7c0de184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a24f02ffdb51513c05369f600dfff62329a6c8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24f02ffdb51513c05369f600dfff62329a6c8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24f02ffdb51513c05369f600dfff62329a6c8a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24f02ffdb51513c05369f600dfff62329a6c8a1/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f26a27f300a72e89e4314adc95182f5433754033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26a27f300a72e89e4314adc95182f5433754033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26a27f300a72e89e4314adc95182f5433754033"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "43812c29af8e383594bc5f2d2d91895ab747cb7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24f02ffdb51513c05369f600dfff62329a6c8a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24f02ffdb51513c05369f600dfff62329a6c8a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a24f02ffdb51513c05369f600dfff62329a6c8a1", "patch": "@@ -1,3 +1,10 @@\n+2017-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/81996\n+\t* gcc/config/rs6000/rs6000.c (rs6000_return_addr): Use\n+\tstack_pointer_rtx for count 0.  Update comments.  Break up\n+\tlarge rtl expression.\n+\n 2017-09-17  Daniel Santos  <daniel.santos@pobox.com>\n \n \tconfig/i386/i386.c: (xlogue_layout::STUB_NAME_MAX_LEN): Increase to 20"}, {"sha": "bc1c4db5db47a312817d910a5539ab6888305a3e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24f02ffdb51513c05369f600dfff62329a6c8a1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24f02ffdb51513c05369f600dfff62329a6c8a1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a24f02ffdb51513c05369f600dfff62329a6c8a1", "patch": "@@ -25009,24 +25009,23 @@ debug_stack_info (rs6000_stack_t *info)\n rtx\n rs6000_return_addr (int count, rtx frame)\n {\n-  /* Currently we don't optimize very well between prolog and body\n-     code and for PIC code the code can be actually quite bad, so\n-     don't try to be too clever here.  */\n+  /* We can't use get_hard_reg_initial_val for LR when count == 0 if LR\n+     is trashed by the prologue, as it is for PIC on ABI_V4 and Darwin.  */\n   if (count != 0\n       || ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_DARWIN) && flag_pic))\n     {\n       cfun->machine->ra_needs_full_frame = 1;\n \n-      return\n-\tgen_rtx_MEM\n-\t  (Pmode,\n-\t   memory_address\n-\t   (Pmode,\n-\t    plus_constant (Pmode,\n-\t\t\t   copy_to_reg\n-\t\t\t   (gen_rtx_MEM (Pmode,\n-\t\t\t\t\t memory_address (Pmode, frame))),\n-\t\t\t   RETURN_ADDRESS_OFFSET)));\n+      if (count == 0)\n+\t/* FRAME is set to frame_pointer_rtx by the generic code, but that\n+\t   is good for loading 0(r1) only when !FRAME_GROWS_DOWNWARD.  */\n+\tframe = stack_pointer_rtx;\n+      rtx prev_frame_addr = memory_address (Pmode, frame);\n+      rtx prev_frame = copy_to_reg (gen_rtx_MEM (Pmode, prev_frame_addr));\n+      rtx lr_save_off = plus_constant (Pmode,\n+\t\t\t\t       prev_frame, RETURN_ADDRESS_OFFSET);\n+      rtx lr_save_addr = memory_address (Pmode, lr_save_off);\n+      return gen_rtx_MEM (Pmode, lr_save_addr);\n     }\n \n   cfun->machine->ra_need_lr = 1;"}]}