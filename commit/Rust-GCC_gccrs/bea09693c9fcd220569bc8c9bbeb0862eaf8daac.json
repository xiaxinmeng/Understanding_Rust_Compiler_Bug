{"sha": "bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhMDk2OTNjOWZjZDIyMDU2OWJjOGM5YmJlYjA4NjJlYWY4ZGFhYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-06-05T12:53:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-06-05T12:53:52Z"}, "message": "call.c (build_user_type_conversion_1): Set ICS_USER_FLAG and ICS_BAD_FLAG on created conversion.\n\ncp:\n\t* call.c (build_user_type_conversion_1): Set ICS_USER_FLAG and\n\tICS_BAD_FLAG on created conversion.\n\t(compare_ics): Break out rank.\ntestsuite:\n\t* g++.old-deja/g++.other/conv7.C: New test.\n\nFrom-SVN: r42907", "tree": {"sha": "8f692d3a97ff18f16f19e7b81c5e5b61d15efcfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f692d3a97ff18f16f19e7b81c5e5b61d15efcfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/comments", "author": null, "committer": null, "parents": [{"sha": "8f7550cae830626a17bad0d31f89a9c6aa6a99f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7550cae830626a17bad0d31f89a9c6aa6a99f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7550cae830626a17bad0d31f89a9c6aa6a99f0"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "f4e08d603f39163285480ed54be134ce694ecd2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "patch": "@@ -1,3 +1,9 @@\n+2001-06-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* call.c (build_user_type_conversion_1): Set ICS_USER_FLAG and\n+\tICS_BAD_FLAG on created conversion.\n+\t(compare_ics): Break out rank.\n+\n 2001-06-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (xref_tag): Remove extraneous %s on dependent name"}, {"sha": "f2478ed5e6ed0dee4ead0a004bd9513b578b1b84", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "patch": "@@ -2521,9 +2521,10 @@ build_user_type_conversion_1 (totype, expr, flags)\n      (DECL_CONSTRUCTOR_P (cand->fn)\n       ? totype : non_reference (TREE_TYPE (TREE_TYPE (cand->fn)))),\n      expr, build_ptr_wrapper (cand));\n-  ICS_USER_FLAG (cand->second_conv) = 1;\n+  \n+  ICS_USER_FLAG (cand->second_conv) = ICS_USER_FLAG (*p) = 1;\n   if (cand->viable == -1)\n-    ICS_BAD_FLAG (cand->second_conv) = 1;\n+    ICS_BAD_FLAG (cand->second_conv) = ICS_BAD_FLAG (*p) = 1;\n \n   return cand;\n }\n@@ -4799,6 +4800,7 @@ compare_ics (ics1, ics2)\n   tree deref_from_type2 = NULL_TREE;\n   tree deref_to_type1 = NULL_TREE;\n   tree deref_to_type2 = NULL_TREE;\n+  int rank1, rank2;\n \n   /* REF_BINDING is non-zero if the result of the conversion sequence\n      is a reference type.   In that case TARGET_TYPE is the\n@@ -4828,13 +4830,17 @@ compare_ics (ics1, ics2)\n      --a user-defined conversion sequence (_over.ics.user_) is a\n        better conversion sequence than an ellipsis conversion sequence\n        (_over.ics.ellipsis_).  */\n-  if (ICS_RANK (ics1) > ICS_RANK (ics2))\n+  rank1 = ICS_RANK (ics1);\n+  rank2 = ICS_RANK (ics2);\n+  \n+  if (rank1 > rank2)\n     return -1;\n-  else if (ICS_RANK (ics1) < ICS_RANK (ics2))\n+  else if (rank1 < rank2)\n     return 1;\n \n-  if (ICS_RANK (ics1) == BAD_RANK)\n+  if (rank1 == BAD_RANK)\n     {\n+      /* XXX Isn't this an extension? */\n       /* Both ICS are bad.  We try to make a decision based on what\n \t would have happenned if they'd been good.  */\n       if (ICS_USER_FLAG (ics1) > ICS_USER_FLAG (ics2)"}, {"sha": "0732fb38b072990c565f7e660196aee95d7488c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "patch": "@@ -1,3 +1,7 @@\n+2001-06-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/conv7.C: New test.\n+\n 2001-06-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c-torture/compile/20010605-2.c: New test."}, {"sha": "0a7e76dfe3f8be55877d3d54c812ba7e94df6b0d", "filename": "gcc/testsuite/g++.old-deja/g++.other/conv7.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea09693c9fcd220569bc8c9bbeb0862eaf8daac/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv7.C?ref=bea09693c9fcd220569bc8c9bbeb0862eaf8daac", "patch": "@@ -0,0 +1,45 @@\n+// Build don't link:\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 5 May 2001 <nathan@codesourcery.com>\n+\n+// Bug 2726. We ICE'd trying to say something about possibly confusing\n+// conversion overload resolution.\n+\n+class foo\n+{\n+};\n+\n+template<class T>\n+class bar\n+{\n+public:\n+    operator const T&() const ;\n+    operator T&() ;\n+\n+};\n+\n+\n+template<class T, class Ref, class NodePtr, class ListPtr>\n+class iterator_template\n+{\n+public:\n+    iterator_template();\n+    Ref operator*() const;\n+\n+};\n+\n+struct IdlDeclarator\n+{\n+};\n+\n+typedef bar< IdlDeclarator > IdlDeclarator_bar;\n+int\n+yyparse()\n+\n+{\n+\n+  iterator_template<IdlDeclarator_bar,IdlDeclarator_bar&,foo*,foo*> declIter;\n+  const IdlDeclarator& declarator = *declIter; // WARNING - choosing\n+  return 1;\n+}"}]}