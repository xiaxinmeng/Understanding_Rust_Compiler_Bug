{"sha": "4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQyZWNkOTYwYTBjMGU3NjU2MDQzYjljMTYyZmNhYzZkN2U1YWMzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-20T08:49:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-20T08:49:24Z"}, "message": "builtins: Fix up two bugs in access_ref::inform_access [PR98721]\n\nThe following patch fixes two bugs in the access_ref::inform_access function\n(plus some formatting nits).\n\nThe first problem is that ref can be various things, e.g. *_DECL, or\nSSA_NAME, or IDENTIFIER_NODE.  And allocfn is non-NULL only if ref is\n(at least originally) an SSA_NAME initialized to the result of some\nallocator function (but not e.g. __builtin_alloca_with_align which is\nhandled differently).\n\nA few lines above the last hunk of this patch in builtins.c, the code uses\n  if (mode == access_read_write || mode == access_write_only)\n    {\n      if (allocfn == NULL_TREE)\n        {\n          if (*offstr)\n            inform (loc, \"at offset %s into destination object %qE of size %s\",\n                    offstr, ref, sizestr);\n          else\n            inform (loc, \"destination object %qE of size %s\", ref, sizestr);\n          return;\n        }\n\n      if (*offstr)\n        inform (loc,\n                \"at offset %s into destination object of size %s \"\n                \"allocated by %qE\", offstr, sizestr, allocfn);\n      else\n        inform (loc, \"destination object of size %s allocated by %qE\",\n                sizestr, allocfn);\n      return;\n    }\nso if allocfn is NULL, it prints whatever ref is, if it is non-NULL,\nit prints instead the allocation function.  But strangely the hunk\na few lines below wasn't consistent with that and instead printed the\nfirst form only if DECL_P (ref) and would ICE if ref wasn't a decl but\nstill allocfn was NULL.  Fixed by making it consistent what the code does\nearlier.\n\nAnother bug is that the code earlier contains an ugly hack for VLAs and was\nassuming that SSA_NAME_IDENTIFIER must be non-NULL on the lhs of\n__builtin_alloca_with_align.  While that is likely true for the cases where\nthe compiler emits this builtin for VLAs (and it will also be true that\nthe name of the VLA in that case can be taken from that identifier up to the\nfirst .), the builtin is user accessible as the testcase shows, so one can\nhave any other SSA_NAME in there.  I think it would be better to add some\nmore reliable way how to identify VLA names corresponding to\n__builtin_alloca_with_align allocations, perhaps internal fn or whatever,\nbut that is beyond the scope of this patch.\n\n2021-01-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98721\n\t* builtins.c (access_ref::inform_access): Don't assume\n\tSSA_NAME_IDENTIFIER must be non-NULL.  Print messages about\n\tobject whenever allocfn is NULL, rather than only when DECL_P\n\tis true.  Use %qE instead of %qD for that.  Formatting fixes.\n\n\t* gcc.dg/pr98721-1.c: New test.\n\t* gcc.dg/pr98721-2.c: New test.", "tree": {"sha": "282fd5887cb76e4bfc61cc771bad7057faed3065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/282fd5887cb76e4bfc61cc771bad7057faed3065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34599780d0de72faf5719ea08d11a061722b9d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34599780d0de72faf5719ea08d11a061722b9d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34599780d0de72faf5719ea08d11a061722b9d19"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "0aed008687ccc9ca81f5f1d340b3d7c4a1fa2990", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "patch": "@@ -4414,8 +4414,8 @@ access_ref::inform_access (access_mode mode) const\n \t MAXREF on which the result is based.  */\n       const offset_int orng[] =\n \t{\n-\t offrng[0] - maxref.offrng[0],\n-\t wi::smax (offrng[1] - maxref.offrng[1], offrng[0]),\n+\t  offrng[0] - maxref.offrng[0],\n+\t  wi::smax (offrng[1] - maxref.offrng[1], offrng[0]),\n \t};\n \n       /* Add the final PHI's offset to that of each of the arguments\n@@ -4493,12 +4493,15 @@ access_ref::inform_access (access_mode mode) const\n \t      /* Strip the SSA_NAME suffix from the variable name and\n \t\t recreate an identifier with the VLA's original name.  */\n \t      ref = gimple_call_lhs (stmt);\n-\t      ref = SSA_NAME_IDENTIFIER (ref);\n-\t      const char *id = IDENTIFIER_POINTER (ref);\n-\t      size_t len = strcspn (id, \".$\");\n-\t      if (!len)\n-\t\tlen = strlen (id);\n-\t      ref = get_identifier_with_length (id, len);\n+\t      if (SSA_NAME_IDENTIFIER (ref))\n+\t\t{\n+\t\t  ref = SSA_NAME_IDENTIFIER (ref);\n+\t\t  const char *id = IDENTIFIER_POINTER (ref);\n+\t\t  size_t len = strcspn (id, \".$\");\n+\t\t  if (!len)\n+\t\t    len = strlen (id);\n+\t\t  ref = get_identifier_with_length (id, len);\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -4557,13 +4560,13 @@ access_ref::inform_access (access_mode mode) const\n       return;\n     }\n \n-  if (DECL_P (ref))\n+  if (allocfn == NULL_TREE)\n     {\n       if (*offstr)\n-\tinform (loc, \"at offset %s into source object %qD of size %s\",\n+\tinform (loc, \"at offset %s into source object %qE of size %s\",\n \t\toffstr, ref, sizestr);\n       else\n-\tinform (loc, \"source object %qD of size %s\", ref,  sizestr);\n+\tinform (loc, \"source object %qE of size %s\", ref, sizestr);\n \n       return;\n     }"}, {"sha": "868b071afc5148b06554eaaafaaf7542a1e94f9c", "filename": "gcc/testsuite/gcc.dg/pr98721-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-1.c?ref=4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/98721 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int n)\n+{\n+  if (n <= 0)\n+    {\n+      char vla[n];\t\t\t/* { dg-message \"source object 'vla' of size 0\" } */\n+      return __builtin_strlen (vla);\t/* { dg-warning \"'__builtin_strlen' reading 1 or more bytes from a region of size 0\" } */\n+    }\n+  return -1;\n+}"}, {"sha": "c8ca542352fcd89d20cc14c1dfe2caf33ad04840", "filename": "gcc/testsuite/gcc.dg/pr98721-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-2.c?ref=4d2ecd960a0c0e7656043b9c162fcac6d7e5ac3f", "patch": "@@ -0,0 +1,8 @@\n+/* PR tree-optimization/98721 */\n+/* { dg-do compile } */\n+\n+int\n+foo (void)\n+{\n+  return __builtin_strlen (__builtin_alloca_with_align (0, 16));\t/* { dg-warning \"'__builtin_strlen' reading 1 or more bytes from a region of size 0\" } */\n+}\t/* { dg-message \"source object '<unknown>' of size 0\" \"\" { target *-*-* } .-1 } */"}]}