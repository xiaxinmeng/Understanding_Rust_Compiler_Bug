{"sha": "7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyM2M4N2M5M2YzZWFmYTVjMjJkMWY0ZjUyNzExZDk3ZjNhNDMyOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-11-13T04:46:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-11-13T04:46:20Z"}, "message": "decl2.c (min_vis_expr_r, [...]): New.\n\n\t* decl2.c (min_vis_expr_r, expr_visibility): New.\n\nWe weren't properly constraining visibility based on names that appear in\nthe mangled representation of expressions.  This was made more obvious\nby the upcoming unevaluated lambdas patch.\n\n\t(min_vis_r): Call expr_visibility.\n\t(constrain_visibility_for_template): Likewise.\n\nFrom-SVN: r266054", "tree": {"sha": "5a2ab00adb89fb212cae894ad79731ed185c08de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a2ab00adb89fb212cae894ad79731ed185c08de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "79c162c75b05e38c904157753f99c5a17b8a94bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "patch": "@@ -1,5 +1,9 @@\n 2018-11-12  Jason Merrill  <jason@redhat.com>\n \n+\t* decl2.c (min_vis_expr_r, expr_visibility): New.\n+\t(min_vis_r): Call expr_visibility.\n+\t(constrain_visibility_for_template): Likewise.\n+\n \tImplement P0722R3, destroying operator delete.\n \t* call.c (std_destroying_delete_t_p, destroying_delete_p): New.\n \t(aligned_deallocation_fn_p, usual_deallocation_fn_p): Use"}, {"sha": "74b9f4ee826bfde93159559c9da88094ac15b18a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 62, "deletions": 15, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "patch": "@@ -2238,6 +2238,9 @@ maybe_emit_vtables (tree ctype)\n \n enum { VISIBILITY_ANON = VISIBILITY_INTERNAL+1 };\n \n+static int expr_visibility (tree);\n+static int type_visibility (tree);\n+\n /* walk_tree helper function for type_visibility.  */\n \n static tree\n@@ -2257,9 +2260,55 @@ min_vis_r (tree *tp, int *walk_subtrees, void *data)\n   else if (CLASS_TYPE_P (*tp)\n \t   && CLASSTYPE_VISIBILITY (*tp) > *vis_p)\n     *vis_p = CLASSTYPE_VISIBILITY (*tp);\n+  else if (TREE_CODE (*tp) == ARRAY_TYPE\n+\t   && uses_template_parms (TYPE_DOMAIN (*tp)))\n+    {\n+      int evis = expr_visibility (TYPE_MAX_VALUE (TYPE_DOMAIN (*tp)));\n+      if (evis > *vis_p)\n+\t*vis_p = evis;\n+    }\n   return NULL;\n }\n \n+/* walk_tree helper function for expr_visibility.  */\n+\n+static tree\n+min_vis_expr_r (tree *tp, int */*walk_subtrees*/, void *data)\n+{\n+  int *vis_p = (int *)data;\n+  int tpvis = VISIBILITY_DEFAULT;\n+\n+  switch (TREE_CODE (*tp))\n+    {\n+    case CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n+    case STATIC_CAST_EXPR:\n+    case REINTERPRET_CAST_EXPR:\n+    case CONST_CAST_EXPR:\n+    case DYNAMIC_CAST_EXPR:\n+    case NEW_EXPR:\n+    case CONSTRUCTOR:\n+      tpvis = type_visibility (TREE_TYPE (*tp));\n+      break;\n+\n+    case VAR_DECL:\n+    case FUNCTION_DECL:\n+      if (! TREE_PUBLIC (*tp))\n+\ttpvis = VISIBILITY_ANON;\n+      else\n+\ttpvis = DECL_VISIBILITY (*tp);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  if (tpvis > *vis_p)\n+    *vis_p = tpvis;\n+\n+  return NULL_TREE;\n+}\n+\n /* Returns the visibility of TYPE, which is the minimum visibility of its\n    component types.  */\n \n@@ -2271,6 +2320,18 @@ type_visibility (tree type)\n   return vis;\n }\n \n+/* Returns the visibility of an expression EXPR that appears in the signature\n+   of a function template, which is the minimum visibility of names that appear\n+   in its mangling.  */\n+\n+static int\n+expr_visibility (tree expr)\n+{\n+  int vis = VISIBILITY_DEFAULT;\n+  cp_walk_tree_without_duplicates (&expr, min_vis_expr_r, &vis);\n+  return vis;\n+}\n+\n /* Limit the visibility of DECL to VISIBILITY, if not explicitly\n    specified (or if VISIBILITY is static).  If TMPL is true, this\n    constraint is for a template argument, and takes precedence\n@@ -2329,21 +2390,7 @@ constrain_visibility_for_template (tree decl, tree targs)\n       if (TYPE_P (arg))\n \tvis = type_visibility (arg);\n       else\n-\t{\n-\t  if (REFERENCE_REF_P (arg))\n-\t    arg = TREE_OPERAND (arg, 0);\n-\t  if (TREE_TYPE (arg))\n-\t    STRIP_NOPS (arg);\n-\t  if (TREE_CODE (arg) == ADDR_EXPR)\n-\t    arg = TREE_OPERAND (arg, 0);\n-\t  if (VAR_OR_FUNCTION_DECL_P (arg))\n-\t    {\n-\t      if (! TREE_PUBLIC (arg))\n-\t\tvis = VISIBILITY_ANON;\n-\t      else\n-\t\tvis = DECL_VISIBILITY (arg);\n-\t    }\n-\t}\n+\tvis = expr_visibility (arg);\n       if (vis)\n \tconstrain_visibility (decl, vis, true);\n     }"}, {"sha": "c3b1286ba4ca8924485c9e34a14c635ec12ce562", "filename": "gcc/testsuite/g++.dg/abi/no-linkage-expr1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fno-linkage-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c23c87c93f3eafa5c22d1f4f52711d97f3a4329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fno-linkage-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fno-linkage-expr1.C?ref=7c23c87c93f3eafa5c22d1f4f52711d97f3a4329", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler-not \"weak.*_Z\" } }\n+\n+using P = struct {}*;\n+\n+template <int N>\n+void f(int(*)[((P)0, N)]) {}\n+\n+template <int N>\n+struct A { };\n+\n+template <int N>\n+void g(A<((P)0,N)>) {}\n+\n+int main()\n+{\n+  f<1>(0);\n+  g<1>({});\n+}"}]}