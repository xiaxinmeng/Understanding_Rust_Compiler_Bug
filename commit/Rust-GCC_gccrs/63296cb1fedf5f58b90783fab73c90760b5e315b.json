{"sha": "63296cb1fedf5f58b90783fab73c90760b5e315b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyOTZjYjFmZWRmNWY1OGI5MDc4M2ZhYjczYzkwNzYwYjVlMzE1Yg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-06-29T15:21:42Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-06-29T15:21:42Z"}, "message": "s390.c (s390_decompose_address): Accept invalid displacements for addresses containing frame_pointer_rtx or...\n\n2005-06-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_decompose_address): Accept invalid\n\tdisplacements for addresses containing frame_pointer_rtx or\n\tvirtual_stack_vars_rtx.\n\t(s390_frame_info): Replaced use of STARTING_FRAME_OFFSET.\n\t(s390_initial_elimination_offset): New offset when eliminating the\n\tsoft frame pointer.\n\t* config/s390/s390.h (FRAME_GROWS_DOWNWARD): Defined as 1.\n\t(STARTING_FRAME_OFFSET, STACK_DYNAMIC_OFFSET): Definitions changed.\n\nFrom-SVN: r101422", "tree": {"sha": "b5fd9a7daafd083c53f429f31a0adcc661a4cd5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5fd9a7daafd083c53f429f31a0adcc661a4cd5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63296cb1fedf5f58b90783fab73c90760b5e315b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63296cb1fedf5f58b90783fab73c90760b5e315b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63296cb1fedf5f58b90783fab73c90760b5e315b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63296cb1fedf5f58b90783fab73c90760b5e315b/comments", "author": null, "committer": null, "parents": [{"sha": "a65da37d5b360c62f632e008a5c717f60a07b4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65da37d5b360c62f632e008a5c717f60a07b4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65da37d5b360c62f632e008a5c717f60a07b4be"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "151a7c83b5b79c903cfd18755052b9e039b5aad3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63296cb1fedf5f58b90783fab73c90760b5e315b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63296cb1fedf5f58b90783fab73c90760b5e315b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63296cb1fedf5f58b90783fab73c90760b5e315b", "patch": "@@ -1,3 +1,14 @@\n+2005-06-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_decompose_address): Accept invalid\n+\tdisplacements for addresses containing frame_pointer_rtx or\n+\tvirtual_stack_vars_rtx.\n+\t(s390_frame_info): Replaced use of STARTING_FRAME_OFFSET.\n+\t(s390_initial_elimination_offset): New offset when eliminating the \n+\tsoft frame pointer.\n+\t* config/s390/s390.h (FRAME_GROWS_DOWNWARD): Defined as 1.\n+\t(STARTING_FRAME_OFFSET, STACK_DYNAMIC_OFFSET): Definitions changed.\n+\n 2006-06-28  Ziemowit Laski  <zlaski@apple.com>\n \n \t* c-common.c (flag_next_runtime): Move..."}, {"sha": "1dfefc5369c03f161ec140140b66268ecfacbded", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63296cb1fedf5f58b90783fab73c90760b5e315b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63296cb1fedf5f58b90783fab73c90760b5e315b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=63296cb1fedf5f58b90783fab73c90760b5e315b", "patch": "@@ -1490,19 +1490,22 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n   /* Validate displacement.  */\n   if (!disp)\n     {\n-      /* If the argument pointer or the return address pointer are involved,\n-\t the displacement will change later anyway as the virtual registers get\n-\t eliminated.  This could make a valid displacement invalid, but it is \n-\t more likely to make an invalid displacement valid, because we sometimes\n-\t access the register save area via negative offsets to one of those \n-\t registers.\n+      /* If virtual registers are involved, the displacement will change later \n+\t anyway as the virtual registers get eliminated.  This could make a \n+\t valid displacement invalid, but it is more likely to make an invalid \n+\t displacement valid, because we sometimes access the register save area \n+\t via negative offsets to one of those registers.\n \t Thus we don't check the displacement for validity here.  If after\n \t elimination the displacement turns out to be invalid after all,\n \t this is fixed up by reload in any case.  */\n       if (base != arg_pointer_rtx \n \t  && indx != arg_pointer_rtx \n \t  && base != return_address_pointer_rtx \n-\t  && indx != return_address_pointer_rtx)\n+\t  && indx != return_address_pointer_rtx\n+\t  && base != frame_pointer_rtx \n+\t  && indx != frame_pointer_rtx\n+\t  && base != virtual_stack_vars_rtx \n+\t  && indx != virtual_stack_vars_rtx)\n \tif (!DISP_IN_RANGE (offset))\n \t  return false;\n     }\n@@ -5865,7 +5868,8 @@ s390_frame_info (void)\n     return;\n \n   if (!TARGET_PACKED_STACK)\n-    cfun_frame_layout.frame_size += (STARTING_FRAME_OFFSET\n+    cfun_frame_layout.frame_size += (STACK_POINTER_OFFSET\n+\t\t\t\t     + current_function_outgoing_args_size\n \t\t\t\t     + cfun_frame_layout.high_fprs * 8);\n   else\n     {\n@@ -6008,7 +6012,9 @@ s390_initial_elimination_offset (int from, int to)\n   switch (from)\n     {\n     case FRAME_POINTER_REGNUM:\n-      offset = 0;\n+      offset = (get_frame_size() \n+\t\t+ STACK_POINTER_OFFSET\n+\t\t+ current_function_outgoing_args_size);\n       break;\n \n     case ARG_POINTER_REGNUM:"}, {"sha": "42119a467b1554aa57fd1b28f52f572c69a14e75", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63296cb1fedf5f58b90783fab73c90760b5e315b/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63296cb1fedf5f58b90783fab73c90760b5e315b/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=63296cb1fedf5f58b90783fab73c90760b5e315b", "patch": "@@ -506,7 +506,7 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n    are accessed by positive offsets, and function arguments are stored at\n    increasing addresses.  */\n #define STACK_GROWS_DOWNWARD\n-/* #define FRAME_GROWS_DOWNWARD 0 */\n+#define FRAME_GROWS_DOWNWARD 1\n /* #undef ARGS_GROW_DOWNWARD */\n \n /* The basic stack layout looks like this: the stack pointer points\n@@ -518,13 +518,13 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n #define STACK_POINTER_OFFSET (TARGET_64BIT ? 160 : 96)\n \n /* Offset within stack frame to start allocating local variables at.  */\n-extern int current_function_outgoing_args_size;\n-#define STARTING_FRAME_OFFSET \\\n-     (STACK_POINTER_OFFSET + current_function_outgoing_args_size)\n+#define STARTING_FRAME_OFFSET 0\n \n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'.  */\n-#define STACK_DYNAMIC_OFFSET(FUNDECL) (STARTING_FRAME_OFFSET)\n+extern int current_function_outgoing_args_size;\n+#define STACK_DYNAMIC_OFFSET(FUNDECL) \\\n+  (STACK_POINTER_OFFSET + current_function_outgoing_args_size)\n \n /* Offset of first parameter from the argument pointer register value.\n    We have a fake argument pointer register that points directly to"}]}