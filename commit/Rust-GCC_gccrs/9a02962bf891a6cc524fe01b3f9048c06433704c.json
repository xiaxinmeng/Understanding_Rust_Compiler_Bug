{"sha": "9a02962bf891a6cc524fe01b3f9048c06433704c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwMjk2MmJmODkxYTZjYzUyNGZlMDFiM2Y5MDQ4YzA2NDMzNzA0Yw==", "commit": {"author": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-04-27T02:23:56Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-04-27T02:23:56Z"}, "message": "Missing file from last commit!\n\nChangeLog:\n\n2010-04-27  Dave Korn  <dave.korn.cygwin@gmail.com>\n\n\tPR lto/42776\n\t* configure.ac (--enable-lto): Refactor handling so libelf tests\n\tare only performed inside then-clause of ACX_ELF_TARGET_IFELSE,\n\tand allow LTO to be explicitly enabled on non-ELF platforms that\n\tare known to support it inside else-clause.\n\t* configure: Regenerate.\n\nFrom-SVN: r158763", "tree": {"sha": "a52bcf7a6a56306807837f1da93a1cb381ccbb22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52bcf7a6a56306807837f1da93a1cb381ccbb22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a02962bf891a6cc524fe01b3f9048c06433704c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a02962bf891a6cc524fe01b3f9048c06433704c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a02962bf891a6cc524fe01b3f9048c06433704c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a02962bf891a6cc524fe01b3f9048c06433704c/comments", "author": null, "committer": null, "parents": [{"sha": "3bec79c52e613995dd3b07b119a67cd7ad3d72a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bec79c52e613995dd3b07b119a67cd7ad3d72a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bec79c52e613995dd3b07b119a67cd7ad3d72a8"}], "stats": {"total": 189, "additions": 99, "deletions": 90}, "files": [{"sha": "603045c8def7b92165cdfabc00a2fbaa608fb74f", "filename": "configure", "status": "modified", "additions": 99, "deletions": 90, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a02962bf891a6cc524fe01b3f9048c06433704c/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a02962bf891a6cc524fe01b3f9048c06433704c/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=9a02962bf891a6cc524fe01b3f9048c06433704c", "patch": "@@ -5997,95 +5997,7 @@ fi\n \n \n \n-\n-\n-target_elf=no\n-case $target in\n-  *-darwin* | *-aix* | *-cygwin* | *-mingw* | *-aout* | *-*coff* | \\\n-  *-msdosdjgpp* | *-netware* | *-vms* | *-wince* | *-*-pe* | \\\n-  alpha*-dec-osf* | *-interix* | hppa[12]*-*-hpux*)\n-    target_elf=no\n-    ;;\n-  *)\n-    target_elf=yes\n-    ;;\n-esac\n-\n-if test $target_elf = yes; then :\n-\n-else\n-  if test x\"$default_enable_lto\" = x\"yes\" ; then\n-  enable_lto=no\n-else\n-  if test x\"$enable_lto\" = x\"yes\"; then\n-    as_fn_error \"LTO support requires an ELF target.\" \"$LINENO\" 5\n-  fi\n-fi\n-default_enable_lto=no\n-fi\n-\n-\n-if test x\"$enable_lto\" = x\"yes\" ; then\n-  # Make sure that libelf.h and gelf.h are available.\n-\n-# Check whether --with-libelf was given.\n-if test \"${with_libelf+set}\" = set; then :\n-  withval=$with_libelf;\n-fi\n-\n-\n-\n-# Check whether --with-libelf_include was given.\n-if test \"${with_libelf_include+set}\" = set; then :\n-  withval=$with_libelf_include;\n-fi\n-\n-\n-\n-# Check whether --with-libelf_lib was given.\n-if test \"${with_libelf_lib+set}\" = set; then :\n-  withval=$with_libelf_lib;\n-fi\n-\n-\n-  saved_CFLAGS=\"$CFLAGS\"\n-  saved_CPPFLAGS=\"$CPPFLAGS\"\n-  saved_LIBS=\"$LIBS\"\n-\n-  case $with_libelf in\n-    \"\")\n-      libelflibs=\"-lelf\"\n-      libelfinc=\"-I/usr/include/libelf\"\n-      ;;\n-    *)\n-      libelflibs=\"-L$with_libelf/lib -lelf\"\n-      libelfinc=\"-I$with_libelf/include -I$with_libelf/include/libelf\"\n-      LIBS=\"$libelflibs $LIBS\"\n-      ;;\n-  esac\n-\n-  if test \"x$with_libelf_include\" != x; then\n-    libelfinc=\"-I$with_libelf_include\"\n-  fi\n-\n-  if test \"x$with_libelf_lib\" != x; then\n-    libelflibs=\"-L$with_libelf_lib -lelf\"\n-    LIBS=\"$libelflibs $LIBS\"\n-  fi\n-\n-  if test \"x$with_libelf$with_libelf_include$with_libelf_lib\" = x \\\n-     && test -d ${srcdir}/libelf; then\n-    libelflibs='-L$$r/$(HOST_SUBDIR)/libelf/lib -lelf '\n-    libelfinc='-D__LIBELF_INTERNAL__ -I$$r/$(HOST_SUBDIR)/libelf/lib -I$$s/libelf/lib'\n-    LIBS=\"$libelflibs $LIBS\"\n-\n- else\n-\n-  CFLAGS=\"$CFLAGS $libelfinc\"\n-  CPPFLAGS=\"$CPPFLAGS $libelfinc\"\n-  LIBS=\"$LIBS $libelflibs\"\n-\n-  ac_ext=c\n+ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n@@ -6483,7 +6395,83 @@ fi\n done\n \n \n-for ac_header in libelf.h\n+\n+\n+\n+target_elf=no\n+case $target in\n+  *-darwin* | *-aix* | *-cygwin* | *-mingw* | *-aout* | *-*coff* | \\\n+  *-msdosdjgpp* | *-netware* | *-vms* | *-wince* | *-*-pe* | \\\n+  alpha*-dec-osf* | *-interix* | hppa[12]*-*-hpux*)\n+    target_elf=no\n+    ;;\n+  *)\n+    target_elf=yes\n+    ;;\n+esac\n+\n+if test $target_elf = yes; then :\n+  if test x\"$enable_lto\" = x\"yes\" ; then\n+  # Make sure that libelf.h and gelf.h are available.\n+\n+# Check whether --with-libelf was given.\n+if test \"${with_libelf+set}\" = set; then :\n+  withval=$with_libelf;\n+fi\n+\n+\n+\n+# Check whether --with-libelf_include was given.\n+if test \"${with_libelf_include+set}\" = set; then :\n+  withval=$with_libelf_include;\n+fi\n+\n+\n+\n+# Check whether --with-libelf_lib was given.\n+if test \"${with_libelf_lib+set}\" = set; then :\n+  withval=$with_libelf_lib;\n+fi\n+\n+\n+  saved_CFLAGS=\"$CFLAGS\"\n+  saved_CPPFLAGS=\"$CPPFLAGS\"\n+  saved_LIBS=\"$LIBS\"\n+\n+  case $with_libelf in\n+    \"\")\n+      libelflibs=\"-lelf\"\n+      libelfinc=\"-I/usr/include/libelf\"\n+      ;;\n+    *)\n+      libelflibs=\"-L$with_libelf/lib -lelf\"\n+      libelfinc=\"-I$with_libelf/include -I$with_libelf/include/libelf\"\n+      LIBS=\"$libelflibs $LIBS\"\n+      ;;\n+  esac\n+\n+  if test \"x$with_libelf_include\" != x; then\n+    libelfinc=\"-I$with_libelf_include\"\n+  fi\n+\n+  if test \"x$with_libelf_lib\" != x; then\n+    libelflibs=\"-L$with_libelf_lib -lelf\"\n+    LIBS=\"$libelflibs $LIBS\"\n+  fi\n+\n+  if test \"x$with_libelf$with_libelf_include$with_libelf_lib\" = x \\\n+     && test -d ${srcdir}/libelf; then\n+    libelflibs='-L$$r/$(HOST_SUBDIR)/libelf/lib -lelf '\n+    libelfinc='-D__LIBELF_INTERNAL__ -I$$r/$(HOST_SUBDIR)/libelf/lib -I$$s/libelf/lib'\n+    LIBS=\"$libelflibs $LIBS\"\n+\n+ else\n+\n+  CFLAGS=\"$CFLAGS $libelfinc\"\n+  CPPFLAGS=\"$CPPFLAGS $libelfinc\"\n+  LIBS=\"$LIBS $libelflibs\"\n+\n+  for ac_header in libelf.h\n do :\n   ac_fn_c_check_header_mongrel \"$LINENO\" \"libelf.h\" \"ac_cv_header_libelf_h\" \"$ac_includes_default\"\n if test \"x$ac_cv_header_libelf_h\" = x\"\"yes; then :\n@@ -6668,6 +6656,27 @@ to specify its location.\" \"$LINENO\" 5\n \n \n fi\n+else\n+  if test x\"$default_enable_lto\" = x\"yes\" ; then\n+    # On non-ELF platforms, LTO must be explicitly enabled.\n+    enable_lto=no\n+  else\n+  # Apart from ELF platforms, only Windows supports LTO so far.  It\n+  # would also be nice to check the binutils support, but we don't\n+  # have gcc_GAS_CHECK_FEATURE available here.  For now, we'll just\n+  # warn during gcc/ subconfigure; unless you're bootstrapping with\n+  # -flto it won't be needed until after installation anyway.\n+    case $target in\n+      *-cygwin*|*-mingw*) ;;\n+      *) if test x\"$enable_lto\" = x\"yes\"; then\n+\tas_fn_error \"LTO support is not enabled for this target.\" \"$LINENO\" 5\n+        fi\n+      ;;\n+    esac\n+  fi\n+  default_enable_lto=no\n+fi\n+\n \n \n # By default, C is the only stage 1 language."}]}