{"sha": "9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "node_id": "C_kwDOANBUbNoAKDlhN2YxNGVmOWI2YjI4N2Q5OWI4MjQwY2RiNDNlOGZlMDg5ZWE5YjM", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-01T23:00:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-02T00:20:05Z"}, "message": "cris: Don't discriminate against ALL_REGS in TARGET_REGISTER_MOVE_COST\n\nWhen the tightest class including both SPECIAL_REGS and GENERAL_REGS\nis ALL_REGS, artificially special-casing for *either* to or from, hits\nartificially hard.  This gets the port back to the code quality before\nthe previous patch (\"cris: Remove CRIS v32 ACR artefacts\") - except\nfor_vfprintf_r and _vfiprintf_r in newlib (still .8 and .4% larger).\n\ngcc:\n\t* config/cris/cris.cc (cris_register_move_cost): Remove special pre-ira\n\textra cost for ALL_REGS.", "tree": {"sha": "da12153432dacadcd04aa234024527b1d7435fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da12153432dacadcd04aa234024527b1d7435fa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e35bc4910e291d8676c69b08fb88fa51ba528e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e35bc4910e291d8676c69b08fb88fa51ba528e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e35bc4910e291d8676c69b08fb88fa51ba528e"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "4f977221f4590bca18e17c8b7de54b45c2e41fb5", "filename": "gcc/config/cris/cris.cc", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3/gcc%2Fconfig%2Fcris%2Fcris.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3/gcc%2Fconfig%2Fcris%2Fcris.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.cc?ref=9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "patch": "@@ -1683,20 +1683,10 @@ cris_register_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n      their move cost within that class is higher.  How about 7?  That's 3\n      for a move to a GENERAL_REGS register, 3 for the move from the\n      GENERAL_REGS register, and 1 for the increased register pressure.\n-     Also, it's higher than the memory move cost, as it should.\n-     We also do this for ALL_REGS, since we don't want that class to be\n-     preferred (even to memory) at all where GENERAL_REGS doesn't fit.\n-     Whenever it's about to be used, it's for SPECIAL_REGS.  If we don't\n-     present a higher cost for ALL_REGS than memory, a SPECIAL_REGS may be\n-     used when a GENERAL_REGS should be used, even if there are call-saved\n-     GENERAL_REGS left to allocate.  This is because the fall-back when\n-     the most preferred register class isn't available, isn't the next\n-     (or next good) wider register class, but the *most widest* register\n-     class.  FIXME: pre-IRA comment, perhaps obsolete now.  */\n-\n-  if ((reg_classes_intersect_p (from, SPECIAL_REGS)\n-       && reg_classes_intersect_p (to, SPECIAL_REGS))\n-      || from == ALL_REGS || to == ALL_REGS)\n+     Also, it's higher than the memory move cost, as it should be.  */\n+\n+  if (reg_classes_intersect_p (from, SPECIAL_REGS)\n+      && reg_classes_intersect_p (to, SPECIAL_REGS))\n     return 7;\n \n   /* Make moves to/from SPECIAL_REGS slightly more expensive, as we"}]}