{"sha": "a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmNWE2NWNkOGYxYmY4YTllOThjMGZjMWZhMTMwNWM4MjQ2ZTRjOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T18:49:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T18:49:22Z"}, "message": "Initial revision\n\nFrom-SVN: r1911", "tree": {"sha": "34d6f4f5af65239a95adb8b39e40e261bce31b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d6f4f5af65239a95adb8b39e40e261bce31b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9/comments", "author": null, "committer": null, "parents": [{"sha": "e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "671abb8aca8e90ddbf20b418b90ec8422146db2b", "filename": "gcc/getpwd.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9/gcc%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9/gcc%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetpwd.c?ref=a9f5a65cd8f1bf8a9e98c0fc1fa1305c8246e4c9", "patch": "@@ -0,0 +1,92 @@\n+/* getpwd.c - get the working directory */\n+\n+#include \"config.h\"\n+\n+#include <errno.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+\n+#ifndef errno\n+extern int errno;\n+#endif\n+\n+/* Virtually every UN*X system now in common use (except for pre-4.3-tahoe\n+   BSD systems) now provides getcwd as called for by POSIX.  Allow for\n+   the few exceptions to the general rule here.  */\n+\n+#if !(defined (POSIX) || defined (USG) || defined (VMS))\n+#include <sys/param.h>\n+extern char *getwd ();\n+#define getcwd(buf,len) getwd(buf)\n+#define GUESSPATHLEN (MAXPATHLEN + 1)\n+#else /* (defined (USG) || defined (VMS)) */\n+extern char *getcwd ();\n+/* We actually use this as a starting point, not a limit.  */\n+#define GUESSPATHLEN 100\n+#endif /* (defined (USG) || defined (VMS)) */\n+\n+char *getenv ();\n+char *xmalloc ();\n+\n+#ifndef VMS\n+\n+/* Get the working directory.  Use the PWD environment variable if it's\n+   set correctly, since this is faster and gives more uniform answers\n+   to the user.  Yield the working directory if successful; otherwise,\n+   yield 0 and set errno.  */\n+\n+char *\n+getpwd ()\n+{\n+  static char *pwd;\n+  static int failure_errno;\n+\n+  char *p = pwd;\n+  size_t s;\n+  struct stat dotstat, pwdstat;\n+\n+  if (!p && !(errno = failure_errno))\n+    {\n+      if (! ((p = getenv (\"PWD\")) != 0\n+\t     && *p == '/'\n+\t     && stat (p, &pwdstat) == 0\n+\t     && stat (\".\", &dotstat) == 0\n+\t     && dotstat.st_ino == pwdstat.st_ino\n+\t     && dotstat.st_dev == pwdstat.st_dev))\n+\n+\t/* The shortcut didn't work.  Try the slow, ``sure'' way.  */\n+\tfor (s = GUESSPATHLEN;  ! getcwd (p = xmalloc (s), s);  s *= 2)\n+\t  {\n+\t    int e = errno;\n+\t    free (p);\n+\t    if (e != ERANGE)\n+\t      {\n+\t\terrno = failure_errno = e;\n+\t\tp = 0;\n+\t\tbreak;\n+\t      }\n+\t  }\n+\n+      /* Cache the result.  This assumes that the program does\n+\t not invoke chdir between calls to getpwd.  */\n+      pwd = p;\n+    }\n+  return p;\n+}\n+\n+#else\t/* VMS */\n+\n+#ifndef MAXPATHLEN\n+#define MAXPATHLEN 255\n+#endif\n+\n+char *\n+getpwd ()\n+{\n+  static char *pwd = 0;\n+\n+  if (!pwd) pwd = getcwd (xmalloc (MAXPATHLEN+1), MAXPATHLEN+1);\n+  return pwd;\n+}\n+\n+#endif\t/* VMS */"}]}