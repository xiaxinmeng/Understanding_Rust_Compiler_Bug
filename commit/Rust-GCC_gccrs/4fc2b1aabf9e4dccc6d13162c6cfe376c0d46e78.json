{"sha": "4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZjMmIxYWFiZjllNGRjY2M2ZDEzMTYyYzZjZmUzNzZjMGQ0NmU3OA==", "commit": {"author": {"name": "Stephen Thomas", "email": "stephen.thomas@arm.com", "date": "2010-01-28T08:35:59Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2010-01-28T08:35:59Z"}, "message": "Fix bswap patterns for trunk.\n\nCommitted by Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n2010-01-28 Stephen Thomas <stephen.thomas@arm.com>\n\n        * config/arm/arm.md (bswapsi2): Add support for bswapsi2.\n        (arm_rev): New.\n        (arm_legacy_rev): Likewise.\n        (thumb_legacy_rev): Likewise.\n\n\n2010-01-28 Stephen Thomas <stephen.thomas@arm.com>\n\n        * testsuite/gcc.dg/optimize-bswap*.c: Add ARM target\n\nFrom-SVN: r156313", "tree": {"sha": "2eb322ebb2eaff5ee4f63a7a3b9fc71c32ed9ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eb322ebb2eaff5ee4f63a7a3b9fc71c32ed9ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/comments", "author": null, "committer": null, "parents": [{"sha": "c2776306a854bad213d112b4f1323402af694b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2776306a854bad213d112b4f1323402af694b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2776306a854bad213d112b4f1323402af694b16"}], "stats": {"total": 116, "additions": 114, "deletions": 2}, "files": [{"sha": "211407f95466aeb51b24fc469e35b5314b445936", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "patch": "@@ -1,3 +1,10 @@\n+2010-01-28  Stephen Thomas  <stephen.thomas@arm.com>\n+\n+\t* config/arm/arm.md (bswapsi2): Add support for bswapsi2.\n+\t(arm_rev): New.\n+\t(arm_legacy_rev): Likewise.\n+\t(thumb_legacy_rev): Likewise.\n+\n 2010-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (mem_loc_descriptor): Remove special casing of"}, {"sha": "f50bf0bd2630bdebc360d9dbf37e20cc96a3cfed", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "patch": "@@ -11194,6 +11194,107 @@\n    (set_attr \"length\" \"4\")]\n )\n \n+(define_insn \"arm_rev\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_EITHER && arm_arch6\"\n+  \"rev\\t%0, %1\"\n+  [(set (attr \"length\")\n+        (if_then_else (eq_attr \"is_thumb\" \"yes\")\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))]\n+)\n+\n+(define_expand \"arm_legacy_rev\"\n+  [(set (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t(xor:SI (rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t\t     (const_int 16))\n+\t\t(match_dup 1)))\n+   (set (match_dup 2)\n+\t(lshiftrt:SI (match_dup 2)\n+\t\t     (const_int 8)))\n+   (set (match_operand:SI 3 \"s_register_operand\" \"\")\n+\t(rotatert:SI (match_dup 1)\n+\t\t     (const_int 8)))\n+   (set (match_dup 2)\n+\t(and:SI (match_dup 2)\n+\t\t(const_int -65281)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(xor:SI (match_dup 3)\n+\t\t(match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"\"\n+)\n+\n+;; Reuse temporaries to keep register pressure down.\n+(define_expand \"thumb_legacy_rev\"\n+  [(set (match_operand:SI 2 \"s_register_operand\" \"\")\n+     (ashift:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+                (const_int 24)))\n+   (set (match_operand:SI 3 \"s_register_operand\" \"\")\n+     (lshiftrt:SI (match_dup 1)\n+\t\t  (const_int 24)))\n+   (set (match_dup 3)\n+     (ior:SI (match_dup 3)\n+\t     (match_dup 2)))\n+   (set (match_operand:SI 4 \"s_register_operand\" \"\")\n+     (const_int 16))\n+   (set (match_operand:SI 5 \"s_register_operand\" \"\")\n+     (rotatert:SI (match_dup 1)\n+\t\t  (match_dup 4)))\n+   (set (match_dup 2)\n+     (ashift:SI (match_dup 5)\n+                (const_int 24)))\n+   (set (match_dup 5)\n+     (lshiftrt:SI (match_dup 5)\n+\t\t  (const_int 24)))\n+   (set (match_dup 5)\n+     (ior:SI (match_dup 5)\n+\t     (match_dup 2)))\n+   (set (match_dup 5)\n+     (rotatert:SI (match_dup 5)\n+\t\t  (match_dup 4)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+     (ior:SI (match_dup 5)\n+             (match_dup 3)))]\n+  \"TARGET_THUMB\"\n+  \"\"\n+)\n+\n+(define_expand \"bswapsi2\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  \t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+\"TARGET_EITHER\"\n+\"\n+  if (!arm_arch6)\n+    {\n+      if (!optimize_size)\n+\t{\n+\t  rtx op2 = gen_reg_rtx (SImode);\n+\t  rtx op3 = gen_reg_rtx (SImode);\n+\n+\t  if (TARGET_THUMB)\n+\t    {\n+\t      rtx op4 = gen_reg_rtx (SImode);\n+\t      rtx op5 = gen_reg_rtx (SImode);\n+\n+\t      emit_insn (gen_thumb_legacy_rev (operands[0], operands[1],\n+\t\t\t\t\t       op2, op3, op4, op5));\n+\t    }\n+\t  else\n+\t    {\n+\t      emit_insn (gen_arm_legacy_rev (operands[0], operands[1],\n+\t\t\t\t\t     op2, op3));\n+\t    }\n+\n+\t  DONE;\n+\t}\n+      else\n+\tFAIL;\n+    }\n+  \"\n+)\n+\n ;; Load the FPA co-processor patterns\n (include \"fpa.md\")\n ;; Load the Maverick co-processor patterns"}, {"sha": "99ed3a5aab7bd5e4bcc2303b1cb5ba025748e91f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "patch": "@@ -1,3 +1,7 @@\n+2010-01-27  Stephen Thomas  <stephen.thomas@arm.com>\n+\n+        * testsuite/gcc.dg/optimize-bswap*.c: Add ARM target\n+\n 2010-01-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/42878"}, {"sha": "315ea6c253d7bc0f04831c9ca60b76aff0ae2850", "filename": "gcc/testsuite/gcc.dg/optimize-bswapdi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c?ref=4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n /* { dg-require-effective-target stdint_types } */\n /* { dg-require-effective-target lp64 } */\n /* { dg-options \"-O2 -fdump-tree-bswap\" } */"}, {"sha": "35f53ba76cf9f43c77373515238c638a21f6b5ee", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c?ref=4fc2b1aabf9e4dccc6d13162c6cfe376c0d46e78", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target alpha*-*-* i?86-*-* powerpc*-*-* rs6000-*-* x86_64-*-* s390*-*-* } } */\n+/* { dg-do compile { target arm*-*-* alpha*-*-* i?86-*-* powerpc*-*-* rs6000-*-* x86_64-*-* s390*-*-* } } */\n /* { dg-require-effective-target stdint_types } */\n /* { dg-options \"-O2 -fdump-tree-bswap\" } */\n "}]}