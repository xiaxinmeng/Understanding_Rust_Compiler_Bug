{"sha": "8af5168bae5245ada9e40d353925bcdbfef54fed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmNTE2OGJhZTUyNDVhZGE5ZTQwZDM1MzkyNWJjZGJmZWY1NGZlZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T23:49:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T23:49:12Z"}, "message": "(frame_offset, get_frame_size): Make HOST_WIDE_INT.\n\nFrom-SVN: r13243", "tree": {"sha": "09549633e1a1df5653aa814ed91f3f9b7c0a9ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09549633e1a1df5653aa814ed91f3f9b7c0a9ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8af5168bae5245ada9e40d353925bcdbfef54fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af5168bae5245ada9e40d353925bcdbfef54fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af5168bae5245ada9e40d353925bcdbfef54fed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af5168bae5245ada9e40d353925bcdbfef54fed/comments", "author": null, "committer": null, "parents": [{"sha": "2a8e278c94d800022aa097bbae2eb65ed66811c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8e278c94d800022aa097bbae2eb65ed66811c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8e278c94d800022aa097bbae2eb65ed66811c9"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "b37ea70313cca94003b6ed5383d8f2861457c44a", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af5168bae5245ada9e40d353925bcdbfef54fed/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af5168bae5245ada9e40d353925bcdbfef54fed/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8af5168bae5245ada9e40d353925bcdbfef54fed", "patch": "@@ -263,7 +263,7 @@ rtx arg_pointer_save_area;\n /* Offset to end of allocated area of stack frame.\n    If stack grows down, this is the address of the last stack slot allocated.\n    If stack grows up, this is the address for the next slot.  */\n-int frame_offset;\n+HOST_WIDE_INT frame_offset;\n \n /* List (chain of TREE_LISTs) of static chains for containing functions.\n    Each link has a FUNCTION_DECL in the TREE_PURPOSE and a reg rtx\n@@ -633,7 +633,7 @@ void pop_function_context ()\n    This size counts from zero.  It is not rounded to STACK_BOUNDARY;\n    the caller may have to do that.  */\n \n-int\n+HOST_WIDE_INT\n get_frame_size ()\n {\n #ifdef FRAME_GROWS_DOWNWARD"}]}