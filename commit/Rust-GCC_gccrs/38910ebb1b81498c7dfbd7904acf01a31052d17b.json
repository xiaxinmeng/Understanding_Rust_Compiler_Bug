{"sha": "38910ebb1b81498c7dfbd7904acf01a31052d17b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5MTBlYmIxYjgxNDk4YzdkZmJkNzkwNGFjZjAxYTMxMDUyZDE3Yg==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2003-12-26T16:13:01Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-26T16:13:01Z"}, "message": "2003-12-26  Guilhem Lavaux  <guilhem@kaffe.org>\n            Mark Wielaard  <mark@klomp.org>\n\n\t* gnu/java/rmi/server/UnicastConnectionManager.java\n\t(startScavenger): Set the client connection manager to daemon\n\tstate because it may block clients until TIMEOUT is reached\n\twhen they are exiting.\n\n\t* gnu/java/rmi/RMIVoidValue.java: New file for a class representing\n\ta void return.\n\n\t* gnu/java/rmi/server/UnicastRemoteCall.java\n\t(DummyOutputStream): Add a boolean before each written field to\n\tknow whether it is a primitive.\n\t(releaseOutputStream): Flush parameters at write time.\n\n\t* gnu/java/rmi/server/UnicastServerRef.java\n\t(incomingMessageCall): Return a RMIVoidValue if no value is to be\n\treturned.\n\n\t* gnu/java/rmi/server/UnicastServer.java\n\t(incomingMessageCall): Do not write a returned object if it is\n\ta RMIVoidValue.\n\nCo-Authored-By: Mark Wielaard <mark@klomp.org>\n\nFrom-SVN: r75033", "tree": {"sha": "84dc4a18f5caccf1c8cec629cbe0024e43eb4af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84dc4a18f5caccf1c8cec629cbe0024e43eb4af0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38910ebb1b81498c7dfbd7904acf01a31052d17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38910ebb1b81498c7dfbd7904acf01a31052d17b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38910ebb1b81498c7dfbd7904acf01a31052d17b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38910ebb1b81498c7dfbd7904acf01a31052d17b/comments", "author": null, "committer": null, "parents": [{"sha": "4d42522958f2df6273535420af2b6b7b0e954ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d42522958f2df6273535420af2b6b7b0e954ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d42522958f2df6273535420af2b6b7b0e954ac7"}], "stats": {"total": 186, "additions": 153, "deletions": 33}, "files": [{"sha": "68a94764d38072b3cc3b9abd2f24b1c96a3943c2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=38910ebb1b81498c7dfbd7904acf01a31052d17b", "patch": "@@ -1,3 +1,27 @@\n+2003-12-26  Guilhem Lavaux  <guilhem@kaffe.org>\n+            Mark Wielaard  <mark@klomp.org>\n+\n+\t* gnu/java/rmi/server/UnicastConnectionManager.java\n+\t(startScavenger): Set the client connection manager to daemon\n+\tstate because it may block clients until TIMEOUT is reached\n+\twhen they are exiting.\n+\n+\t* gnu/java/rmi/RMIVoidValue.java: New file for a class representing\n+\ta void return.\n+\n+\t* gnu/java/rmi/server/UnicastRemoteCall.java\n+\t(DummyOutputStream): Add a boolean before each written field to\n+\tknow whether it is a primitive.\n+\t(releaseOutputStream): Flush parameters at write time.\n+\n+\t* gnu/java/rmi/server/UnicastServerRef.java\n+\t(incomingMessageCall): Return a RMIVoidValue if no value is to be\n+\treturned.\n+\n+\t* gnu/java/rmi/server/UnicastServer.java\n+\t(incomingMessageCall): Do not write a returned object if it is\n+\ta RMIVoidValue.\n+\n 2003-12-25  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* libltdl/ltdl.c (HAVE_DYLD): Remove ifdef conditional for "}, {"sha": "7829fc601380b420f14ec88cb8271da1ed50c68a", "filename": "libjava/gnu/java/rmi/server/RMIVoidValue.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIVoidValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIVoidValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIVoidValue.java?ref=38910ebb1b81498c7dfbd7904acf01a31052d17b", "patch": "@@ -0,0 +1,51 @@\n+/* RMIVoidValue.java\n+  Copyright (c) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.rmi.server;\n+\n+/**\n+ * Package private class used to indicate a void return type.\n+ * INSTANCE is the only object of this class ever made.\n+ */\n+final class RMIVoidValue\n+{\n+  static RMIVoidValue INSTANCE = new RMIVoidValue();\n+\n+  private RMIVoidValue()\n+  {\n+  }\n+}"}, {"sha": "3b9aa40e0b8fc2e40935e654c897f24015a9b158", "filename": "libjava/gnu/java/rmi/server/UnicastConnectionManager.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java?ref=38910ebb1b81498c7dfbd7904acf01a31052d17b", "patch": "@@ -152,6 +152,9 @@ public void run(){\n             if (debug) System.out.println(\"************* exit scavenger.\");\n         }\n     });\n+    // As it is used for client connection, we may put this thread\n+    // in daemon state to prevent the VM from blocking when exiting.\n+    scavenger.setDaemon(true);\n     scavenger.start();\n }\n "}, {"sha": "2d7d6d4a9ff1287776940b59b49b1157293737e9", "filename": "libjava/gnu/java/rmi/server/UnicastRemoteCall.java", "status": "modified", "additions": 69, "deletions": 30, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java?ref=38910ebb1b81498c7dfbd7904acf01a31052d17b", "patch": "@@ -65,6 +65,7 @@\n   private long hash;\n   private Vector vec;\n   private int ptr;\n+  private ObjID objid;\n \n   private ObjectOutput oout;\n   private ObjectInput oin;\n@@ -86,22 +87,7 @@\n     this.conn = conn;\n     this.opnum = opnum;\n     this.hash = hash;\n-    \n-    // signal the call when constructing\n-    try\n-      {\n-\tDataOutputStream dout = conn.getDataOutputStream();\n-\tdout.write(MESSAGE_CALL);\n-\t\n-\toout = conn.getObjectOutputStream();\n-\tobjid.write(oout);\n-\toout.writeInt(opnum);\n-\toout.writeLong(hash);\n-      }\n-    catch(IOException ex)\n-      {\n-\tthrow new MarshalException(\"Try to write header but failed.\", ex);\n-      }\n+    this.objid = objid;\n   }\n   \n   UnicastConnection getConnection()\n@@ -111,22 +97,43 @@ UnicastConnection getConnection()\n   \n   public ObjectOutput getOutputStream() throws IOException\n   {\n-    if (conn != null)\n-      {\n-\tif(oout == null)\n-\t  return (oout = conn.getObjectOutputStream());\n-\telse\n-\t  return oout;\n-      }\n-    else\n-      {\n-\tvec = new Vector();\n-\treturn (new DummyObjectOutputStream());\n-      }\n+    if (vec == null)\n+      vec = new Vector();\n+    return (new DummyObjectOutputStream());\n   }\n \n   public void releaseOutputStream() throws IOException\n   {\n+    if (vec != null)\n+      {\n+\toout = conn.getObjectOutputStream();\n+\t\n+\tfor (int i = 0; i < vec.size(); i += 2)\n+\t  {\n+\t    boolean primitive = ((Boolean)vec.elementAt(i)).booleanValue();\n+\t    Object data = vec.elementAt(i+1);\n+\n+\t    // No type, this is\n+\t    if (!primitive)\n+\t      oout.writeObject(data);\n+\t    else\n+\t      {\n+\t\tif (data instanceof Boolean)\n+\t\t  oout.writeBoolean(((Boolean)data).booleanValue());\n+\t\telse if (data instanceof Character)\n+\t\t  oout.writeChar(((Character)data).charValue());\n+\t\telse if (data instanceof Byte)\n+\t\t  oout.writeByte(((Byte)data).byteValue());\n+\t\telse if (data instanceof Short)\n+\t\t  oout.writeShort(((Short)data).shortValue());\n+\t\telse if (data instanceof Integer)\n+\t\t  oout.writeInt(((Integer)data).intValue());\n+\t\telse if (data instanceof Long)\n+\t\t  oout.writeLong(((Long)data).longValue());\n+\t      }\n+\t  }\n+\tvec = null;\n+      }\n     if(oout != null)\n       oout.flush();\n   }\n@@ -163,6 +170,23 @@ public void executeCall() throws Exception\n   {\n     byte returncode;\n     ObjectInput oin;\n+    \n+    // signal the call when constructing\n+    try\n+      {\n+\tDataOutputStream dout = conn.getDataOutputStream();\n+\tdout.write(MESSAGE_CALL);\n+\t\n+\toout = conn.getObjectOutputStream();\n+\tobjid.write(oout);\n+\toout.writeInt(opnum);\n+\toout.writeLong(hash);\n+      }\n+    catch(IOException ex)\n+      {\n+\tthrow new MarshalException(\"Try to write header but failed.\", ex);\n+      }\n+\n     try\n       {\n \treleaseOutputStream();\n@@ -211,9 +235,15 @@ public void done() throws IOException\n     // conn.disconnect();\n   }\n \n+  boolean isReturnValue()\n+  {\n+    return vec.size() > 0;\n+  }\n+  \n   Object returnValue()\n   {\n-    return (vec.size() > 0 ? vec.elementAt(0) : null);\n+    // This is not the first one (Boolean) but the second.\n+    return vec.elementAt(1);\n   }\n \n   Object[] getArguments()\n@@ -256,46 +286,55 @@ private class DummyObjectOutputStream implements ObjectOutput\n \n     public void writeBoolean(boolean v) throws IOException\n     {\n-      vec.addElement(new Boolean(v));\n+      vec.addElement(Boolean.TRUE);\n+      vec.addElement(Boolean.valueOf(v));\n     }\n \n     public void writeByte(int v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Byte((byte) v));\n     }\n \n     public void writeChar(int v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Character((char) v));\n     }\n \n     public void writeDouble(double v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Double(v));\n     }\n \n     public void writeFloat(float v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Float(v));\n     }\n \n     public void writeInt(int v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Integer(v));\n     }\n \n     public void writeLong(long v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Long(v));\n     }\n \n     public void writeShort(int v) throws IOException\n     {\n+      vec.addElement(Boolean.TRUE);\n       vec.addElement(new Short((short) v));\n     }\n \n     public void writeObject(Object obj) throws IOException\n     {\n+      vec.addElement(Boolean.FALSE);\n       vec.addElement(obj);\n     }\n "}, {"sha": "fb6ec1f35a5e61ebef712becf2c7b3316597162d", "filename": "libjava/gnu/java/rmi/server/UnicastServer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java?ref=38910ebb1b81498c7dfbd7904acf01a31052d17b", "patch": "@@ -144,7 +144,7 @@ private static void incomingMessageCall(UnicastConnection conn) throws IOExcepti\n \t(new UID()).write(out);\n \tif(returnval != null && returncls != null)\n \t    ((RMIObjectOutputStream)out).writeValue(returnval, returncls);\n-\telse\n+\telse if (!(returnval instanceof RMIVoidValue))\n \t    out.writeObject(returnval);\n \n \tout.flush();"}, {"sha": "b004927502fbe024abe8f5a24cf028f9223b7d93", "filename": "libjava/gnu/java/rmi/server/UnicastServerRef.java", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38910ebb1b81498c7dfbd7904acf01a31052d17b/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java?ref=38910ebb1b81498c7dfbd7904acf01a31052d17b", "patch": "@@ -254,8 +254,11 @@ public Object incomingMessageCall(UnicastConnection conn, int method, long hash)\n \t\t\tthrow new NoSuchMethodException();\n \t\t}\n \t\tUnicastRemoteCall call = new UnicastRemoteCall(conn);\n-\t\tskel.dispatch(myself, call, method, hash);\n-\t\treturn (call.returnValue());\n+\t\tskel.dispatch(myself, call, method, hash);\t\t  \n+\t\tif (!call.isReturnValue())\n+\t\t  return RMIVoidValue.INSTANCE;\n+\t\telse\n+\t\t  return (call.returnValue());\n \t}\n }\n "}]}