{"sha": "78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhN2RjOTAzMmU5NmY2YTUwN2Q5NmJjN2YzOTk5ZmYzYzliNGM0Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-04-11T17:49:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-04-11T17:49:47Z"}, "message": "libiberty.h (fopen_unlocked, [...]): Provide prototypes for new functions.\n\ninclude:\n\t* libiberty.h (fopen_unlocked, fdopen_unlocked, freopen_unlocked):\n\tProvide prototypes for new functions.\n\nlibiberty:\n\t* Makefile.in (CFILES): Add fopen_unlocked.c.\n\t(REQUIRED_OFILES): Add ./fopen_unlocked.o.\n\tRegenerate dependencies.\n\n\t* configure.ac: Check for stdio_ext.h and __fsetlocking.\n\n\t* fopen_unlocked.c: New file.\n\n\t* functions.texi, configure, config.in: Regenerate.\n\nFrom-SVN: r97977", "tree": {"sha": "8e8edab22bf94fe76378e62b5c438e2c2d1f8b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8edab22bf94fe76378e62b5c438e2c2d1f8b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/comments", "author": null, "committer": null, "parents": [{"sha": "f5f7d171c3f8dfff5d7751d8b9b4718f7c1dbd66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f7d171c3f8dfff5d7751d8b9b4718f7c1dbd66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f7d171c3f8dfff5d7751d8b9b4718f7c1dbd66"}], "stats": {"total": 179, "additions": 172, "deletions": 7}, "files": [{"sha": "8a771799ff2f4a2f5cae684a9bd88172316745db", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -1,3 +1,8 @@\n+2005-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (fopen_unlocked, fdopen_unlocked, freopen_unlocked):\n+\tProvide prototypes for new functions.\n+\n 2005-03-29  Ian Lance Taylor  <ian@airs.com>\n \n \t* libiberty.h: Fix indentation."}, {"sha": "80aee8b946061ef57c66eea4104f643831305a1e", "filename": "include/libiberty.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -48,6 +48,14 @@ extern \"C\" {\n \n #include <stdio.h>\n \n+/* Open and return a FILE pointer.  If the OS supports it, ensure that\n+   the stream is setup to avoid any multi-threaded locking.  Otherwise\n+   return the FILE pointer unchanged.  */\n+\n+extern FILE *fopen_unlocked (const char *path, const char *mode);\n+extern FILE *fdopen_unlocked (int fildes, const char *mode);\n+extern FILE *freopen_unlocked (const char *path, const char *mode, FILE *stream);\n+\n /* Build an argument vector from a string.  Allocates memory using\n    malloc.  Use freeargv to free the vector.  */\n "}, {"sha": "df6106e8c6030c6409241e61ecf09a3bd8a6d202", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -1,3 +1,15 @@\n+2005-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (CFILES): Add fopen_unlocked.c.\n+\t(REQUIRED_OFILES): Add ./fopen_unlocked.o.\n+\tRegenerate dependencies.\n+\n+\t* configure.ac: Check for stdio_ext.h and __fsetlocking.\n+\n+\t* fopen_unlocked.c: New file.\n+\n+\t* functions.texi, configure, config.in: Regenerate.\n+\n 2005-04-04  Ian Lance Taylor  <ian@airs.com>\n \n \t* testsuite/test-pexecute.c (TEST_PEX_RUN): Move variable"}, {"sha": "680401514756984cf366ab964a122470ac6b63b4", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -132,6 +132,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \t cp-demint.c cplus-dem.c\t\t\t\t\t\\\n \tdyn-string.c\t\t\t\t\t\t\t\\\n \tfdmatch.c ffs.c fibheap.c floatformat.c fnmatch.c\t\t\\\n+\t fopen_unlocked.c\t\t\t\t\t\t\\\n \tgetcwd.c getopt.c getopt1.c getpagesize.c getpwd.c getruntime.c\t\\\n          gettimeofday.c                                                 \\\n \thashtab.c hex.c\t\t\t\t\t\t\t\\\n@@ -165,6 +166,7 @@ REQUIRED_OFILES = ./regex.o ./cplus-dem.o ./cp-demangle.o ./md5.o\t\\\n \t./choose-temp.o ./concat.o ./cp-demint.o\t\t\t\\\n \t./dyn-string.o\t\t\t\t\t\t\t\\\n \t./fdmatch.o ./fibheap.o ./floatformat.o ./fnmatch.o\t\t\\\n+\t ./fopen_unlocked.o\t\t\t\t\t\t\\\n \t./getopt.o ./getopt1.o ./getpwd.o ./getruntime.o\t\t\\\n \t./hashtab.o ./hex.o\t\t\t\t\t\t\\\n \t./lbasename.o ./lrealpath.o\t\t\t\t\t\\\n@@ -584,6 +586,13 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/fnmatch.c $(OUTPUT_OPTION)\n \n+./fopen_unlocked.o: $(srcdir)/fopen_unlocked.c config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/fopen_unlocked.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/fopen_unlocked.c $(OUTPUT_OPTION)\n+\n ./getcwd.o: $(srcdir)/getcwd.c config.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/getcwd.c -o pic/$@; \\\n@@ -1041,7 +1050,7 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/vsprintf.c $(OUTPUT_OPTION)\n \n-./waitpid.o: $(srcdir)/waitpid.c config.h\n+./waitpid.o: $(srcdir)/waitpid.c config.h $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/waitpid.c -o pic/$@; \\\n \telse true; fi"}, {"sha": "d50aff9895e54bfc03b25d4cec75531864173422", "filename": "libiberty/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -151,6 +151,9 @@\n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H\n \n+/* Define to 1 if you have the <stdio_ext.h> header file. */\n+#undef HAVE_STDIO_EXT_H\n+\n /* Define to 1 if you have the <stdlib.h> header file. */\n #undef HAVE_STDLIB_H\n \n@@ -322,6 +325,9 @@\n /* Define if you have the _system_configuration variable. */\n #undef HAVE__SYSTEM_CONFIGURATION\n \n+/* Define to 1 if you have the `__fsetlocking' function. */\n+#undef HAVE___FSETLOCKING\n+\n /* Define if the host machine stores words of multi-word integers in\n    big-endian order. */\n #undef HOST_WORDS_BIG_ENDIAN"}, {"sha": "adc096285665111054bbfe9d9ef5b7a4a549fad2", "filename": "libiberty/configure", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -3540,7 +3540,8 @@ host_makefile_frag=${frag}\n \n \n \n-for ac_header in sys/file.h sys/param.h limits.h stdlib.h malloc.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h sys/sysctl.h sys/systemcfg.h stdint.h\n+\n+for ac_header in sys/file.h sys/param.h limits.h stdlib.h malloc.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h sys/sysctl.h sys/systemcfg.h stdint.h stdio_ext.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n@@ -4818,7 +4819,7 @@ vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic sysmp\"\n-checkfuncs=\"$checkfuncs getsysinfo table sysctl wait3 wait4\"\n+checkfuncs=\"$checkfuncs getsysinfo table sysctl wait3 wait4 __fsetlocking\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -4888,6 +4889,7 @@ if test \"x\" = \"y\"; then\n \n \n \n+\n \n \n for ac_func in asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n@@ -4898,7 +4900,7 @@ for ac_func in asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\\n   sysconf times sbrk gettimeofday ffs snprintf vsnprintf \\\n   pstat_getstatic pstat_getdynamic sysmp getsysinfo table sysctl wait3 wait4 \\\n-  realpath canonicalize_file_name\n+  realpath canonicalize_file_name __fsetlocking\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5"}, {"sha": "cd31f6a1a5953059edb041d1683e465e6cb36664", "filename": "libiberty/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -159,7 +159,7 @@ AC_SUBST_FILE(host_makefile_frag)\n # It's OK to check for header files.  Although the compiler may not be\n # able to link anything, it had better be able to at least compile\n # something.\n-AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h malloc.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h sys/sysctl.h sys/systemcfg.h stdint.h)\n+AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h malloc.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h sys/sysctl.h sys/systemcfg.h stdint.h stdio_ext.h)\n AC_HEADER_SYS_WAIT\n AC_HEADER_TIME\n \n@@ -268,7 +268,7 @@ vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic sysmp\"\n-checkfuncs=\"$checkfuncs getsysinfo table sysctl wait3 wait4\"\n+checkfuncs=\"$checkfuncs getsysinfo table sysctl wait3 wait4 __fsetlocking\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -281,7 +281,7 @@ if test \"x\" = \"y\"; then\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\\n   sysconf times sbrk gettimeofday ffs snprintf vsnprintf \\\n   pstat_getstatic pstat_getdynamic sysmp getsysinfo table sysctl wait3 wait4 \\\n-  realpath canonicalize_file_name)\n+  realpath canonicalize_file_name __fsetlocking)\n   AC_DEFINE(HAVE_SYS_ERRLIST, 1, [Define if you have the sys_errlist variable.])\n   AC_DEFINE(HAVE_SYS_NERR,    1, [Define if you have the sys_nerr variable.])\n   AC_DEFINE(HAVE_SYS_SIGLIST, 1, [Define if you have the sys_siglist variable.])"}, {"sha": "b193dfd908183a0b41100198364e9c6c3ecbca97", "filename": "libiberty/fopen_unlocked.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Ffopen_unlocked.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Ffopen_unlocked.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffopen_unlocked.c?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -0,0 +1,93 @@\n+/* Implement fopen_unlocked and related functions.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If\n+not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/*\n+\n+@deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n+\n+Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n+operating system supports it, ensure that the stream is setup to avoid\n+any multi-threaded locking.  Otherwise return the @code{FILE} pointer\n+unchanged.\n+\n+@end deftypefn\n+\n+@deftypefn Extension FILE * fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n+\n+Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n+operating system supports it, ensure that the stream is setup to avoid\n+any multi-threaded locking.  Otherwise return the @code{FILE} pointer\n+unchanged.\n+\n+@end deftypefn\n+\n+@deftypefn Extension FILE * freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n+\n+Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n+operating system supports it, ensure that the stream is setup to avoid\n+any multi-threaded locking.  Otherwise return the @code{FILE} pointer\n+unchanged.\n+\n+@end deftypefn\n+\n+*/\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include <stdio.h>\n+#ifdef HAVE_STDIO_EXT_H\n+#include <stdio_ext.h>\n+#endif\n+\n+#include \"libiberty.h\"\n+\n+FILE *\n+fopen_unlocked (const char *path, const char *mode)\t\t\n+{\n+  FILE *const fp = fopen (path, mode);\n+#if defined(HAVE___FSETLOCKING) && defined(FSETLOCKING_BYCALLER)\n+  if (fp)\n+    __fsetlocking (fp, FSETLOCKING_BYCALLER);\n+#endif\n+  return fp;\n+}\n+\n+FILE *\n+fdopen_unlocked (int fildes, const char *mode)\n+{\n+  FILE *const fp = fdopen (fildes, mode);\n+#if defined(HAVE___FSETLOCKING) && defined(FSETLOCKING_BYCALLER)\n+  if (fp)\n+    __fsetlocking (fp, FSETLOCKING_BYCALLER);\n+#endif\n+  return fp;\n+}\n+\n+FILE *\n+freopen_unlocked (const char *path, const char *mode, FILE *stream)\n+{\n+  FILE *const fp = freopen (path, mode, stream);\n+#if defined(HAVE___FSETLOCKING) && defined(FSETLOCKING_BYCALLER)\n+  if (fp)\n+    __fsetlocking (fp, FSETLOCKING_BYCALLER);\n+#endif\n+  return fp;\n+}"}, {"sha": "47d40ec49f7bddf04249df5503d9c668f178dde1", "filename": "libiberty/functions.texi", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=78a7dc9032e96f6a507d96bc7f3999ff3c9b4c42", "patch": "@@ -362,6 +362,16 @@ and inode numbers.\n \n @end deftypefn\n \n+@c fopen_unlocked.c:32\n+@deftypefn Extension FILE * fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n+\n+Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n+operating system supports it, ensure that the stream is setup to avoid\n+any multi-threaded locking.  Otherwise return the @code{FILE} pointer\n+unchanged.\n+\n+@end deftypefn\n+\n @c ffs.c:3\n @deftypefn Supplemental int ffs (int @var{valu})\n \n@@ -421,6 +431,16 @@ Ignores case when performing the comparison.\n \n @end deftypefn\n \n+@c fopen_unlocked.c:23\n+@deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n+\n+Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n+operating system supports it, ensure that the stream is setup to avoid\n+any multi-threaded locking.  Otherwise return the @code{FILE} pointer\n+unchanged.\n+\n+@end deftypefn\n+\n @c argv.c:94\n @deftypefn Extension void freeargv (char **@var{vector})\n \n@@ -431,6 +451,16 @@ itself.\n \n @end deftypefn\n \n+@c fopen_unlocked.c:41\n+@deftypefn Extension FILE * freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n+\n+Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n+operating system supports it, ensure that the stream is setup to avoid\n+any multi-threaded locking.  Otherwise return the @code{FILE} pointer\n+unchanged.\n+\n+@end deftypefn\n+\n @c getruntime.c:82\n @deftypefn Replacement long get_run_time (void)\n "}]}