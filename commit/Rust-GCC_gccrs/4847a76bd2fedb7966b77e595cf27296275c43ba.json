{"sha": "4847a76bd2fedb7966b77e595cf27296275c43ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0N2E3NmJkMmZlZGI3OTY2Yjc3ZTU5NWNmMjcyOTYyNzVjNDNiYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-11T09:16:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-06-11T09:16:37Z"}, "message": "[Ada] Remove obsolete code in Errout\n\nThis just removes obsolete code.  No functional changes.\n\n2018-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* errout.adb (Special_Msg_Delete): Remove handling of Atomic and VFA.\n\nFrom-SVN: r261397", "tree": {"sha": "acbf4ccdc9dfe0daabc30dcecc57fb2198edb52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acbf4ccdc9dfe0daabc30dcecc57fb2198edb52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4847a76bd2fedb7966b77e595cf27296275c43ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4847a76bd2fedb7966b77e595cf27296275c43ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4847a76bd2fedb7966b77e595cf27296275c43ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4847a76bd2fedb7966b77e595cf27296275c43ba/comments", "author": null, "committer": null, "parents": [{"sha": "c4ca0af40b65c91c99036d339c93ed938b3f0cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ca0af40b65c91c99036d339c93ed938b3f0cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ca0af40b65c91c99036d339c93ed938b3f0cc2"}], "stats": {"total": 35, "additions": 4, "deletions": 31}, "files": [{"sha": "32724994207a4b33927964ecf1a608cfcecdccaf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4847a76bd2fedb7966b77e595cf27296275c43ba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4847a76bd2fedb7966b77e595cf27296275c43ba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4847a76bd2fedb7966b77e595cf27296275c43ba", "patch": "@@ -1,3 +1,7 @@\n+2018-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* errout.adb (Special_Msg_Delete): Remove handling of Atomic and VFA.\n+\n 2018-06-11  Nicolas Roche  <roche@adacore.com>\n \n \t* libgnat/s-valuti.adb (Bad_Value): Ensure that we do not generate a"}, {"sha": "17a86f033cc3a11aacf9530013dcc2afdd7ec264", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4847a76bd2fedb7966b77e595cf27296275c43ba/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4847a76bd2fedb7966b77e595cf27296275c43ba/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=4847a76bd2fedb7966b77e595cf27296275c43ba", "patch": "@@ -3257,37 +3257,6 @@ package body Errout is\n       if Debug_Flag_OO then\n          return False;\n \n-      --  Processing for \"atomic access cannot be guaranteed\"\n-\n-      elsif Msg = \"atomic access to & cannot be guaranteed\" then\n-\n-         --  When an atomic object refers to a non-atomic type in the same\n-         --  scope, we implicitly make the type atomic. In the non-error case\n-         --  this is surely safe (and in fact prevents an error from occurring\n-         --  if the type is not atomic by default). But if the object cannot be\n-         --  made atomic, then we introduce an extra junk message by this\n-         --  manipulation, which we get rid of here.\n-\n-         --  We identify this case by the fact that it references a type for\n-         --  which Is_Atomic is set, but there is no Atomic pragma setting it.\n-\n-         if Is_Type (E)\n-           and then Is_Atomic (E)\n-           and then No (Get_Rep_Pragma (E, Name_Atomic))\n-         then\n-            return True;\n-         end if;\n-\n-      --  Similar processing for \"volatile full access cannot be guaranteed\"\n-\n-      elsif Msg = \"volatile full access to & cannot be guaranteed\" then\n-         if Is_Type (E)\n-           and then Is_Volatile_Full_Access (E)\n-           and then No (Get_Rep_Pragma (E, Name_Volatile_Full_Access))\n-         then\n-            return True;\n-         end if;\n-\n       --  Processing for \"Size too small\" messages\n \n       elsif Msg = \"size for& too small, minimum allowed is ^\" then"}]}