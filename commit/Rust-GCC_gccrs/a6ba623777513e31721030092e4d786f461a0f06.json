{"sha": "a6ba623777513e31721030092e4d786f461a0f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiYTYyMzc3NzUxM2UzMTcyMTAzMDA5MmU0ZDc4NmY0NjFhMGYwNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-04T14:50:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-04T14:50:11Z"}, "message": "re PR tree-optimization/92345 (ICE in vec<_stmt_vec_info*, va_heap, vl_embed>::space (vect_get_and_check_slp_defs))\n\n2019-11-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92345\n\t* tree-vect-loop.c (vect_is_simple_reduction): Return whether\n\twe produced a reduction chain.\n\t(vect_analyze_scalar_cycles_1): Do not add reduction chains to\n\tLOOP_VINFO_REDUCTIONS.\n\n\t* gcc.dg/torture/pr92345.c: New testcase.\n\nFrom-SVN: r277782", "tree": {"sha": "50191fd7a90f87d35c5946d77884152bb82d1e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50191fd7a90f87d35c5946d77884152bb82d1e39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6ba623777513e31721030092e4d786f461a0f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ba623777513e31721030092e4d786f461a0f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ba623777513e31721030092e4d786f461a0f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ba623777513e31721030092e4d786f461a0f06/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7237f93eb3aaecb27800ce1688ece4c4cbcb790b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7237f93eb3aaecb27800ce1688ece4c4cbcb790b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7237f93eb3aaecb27800ce1688ece4c4cbcb790b"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "ae177e25f1f345ef1774ea4fd558b62be0f3e028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ba623777513e31721030092e4d786f461a0f06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ba623777513e31721030092e4d786f461a0f06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6ba623777513e31721030092e4d786f461a0f06", "patch": "@@ -1,3 +1,11 @@\n+2019-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92345\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Return whether\n+\twe produced a reduction chain.\n+\t(vect_analyze_scalar_cycles_1): Do not add reduction chains to\n+\tLOOP_VINFO_REDUCTIONS.\n+\n 2019-11-04  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphclones.c (cgraph_node::create_version_clone): Do not"}, {"sha": "a44eca595dc10282ab123ac0caa7eeca57838193", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ba623777513e31721030092e4d786f461a0f06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ba623777513e31721030092e4d786f461a0f06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6ba623777513e31721030092e4d786f461a0f06", "patch": "@@ -1,3 +1,8 @@\n+2019-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92345\n+\t* gcc.dg/torture/pr92345.c: New testcase.\n+\n 2019-11-04  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/tiny-printf.c: New test."}, {"sha": "331615b13d1c32e3cec50c39a4d87ce0acf1e302", "filename": "gcc/testsuite/gcc.dg/torture/pr92345.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ba623777513e31721030092e4d786f461a0f06/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92345.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ba623777513e31721030092e4d786f461a0f06/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92345.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92345.c?ref=a6ba623777513e31721030092e4d786f461a0f06", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+long int x1;\n+int fr;\n+\n+int\n+us (int sk, int jx)\n+{\n+  while (sk < 1)\n+    {\n+      jx *= 2;\n+      fr += x1 + 1;\n+      ++sk;\n+    }\n+\n+  return jx;\n+}"}, {"sha": "9d31381fac13dd8f65673512e8206d170c9050be", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ba623777513e31721030092e4d786f461a0f06/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ba623777513e31721030092e4d786f461a0f06/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a6ba623777513e31721030092e4d786f461a0f06", "patch": "@@ -155,7 +155,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static void vect_estimate_min_profitable_iters (loop_vec_info, int *, int *);\n static stmt_vec_info vect_is_simple_reduction (loop_vec_info, stmt_vec_info,\n-\t\t\t\t\t       bool *);\n+\t\t\t\t\t       bool *, bool *);\n \n /* Subroutine of vect_determine_vf_for_stmt that handles only one\n    statement.  VECTYPE_MAYBE_SET_P is true if STMT_VINFO_VECTYPE\n@@ -489,7 +489,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, class loop *loop)\n   tree init, step;\n   auto_vec<stmt_vec_info, 64> worklist;\n   gphi_iterator gsi;\n-  bool double_reduc;\n+  bool double_reduc, reduc_chain;\n \n   DUMP_VECT_SCOPE (\"vect_analyze_scalar_cycles\");\n \n@@ -561,7 +561,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, class loop *loop)\n \t\t  && STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n \n       stmt_vec_info reduc_stmt_info\n-\t= vect_is_simple_reduction (loop_vinfo, stmt_vinfo, &double_reduc);\n+\t= vect_is_simple_reduction (loop_vinfo, stmt_vinfo, &double_reduc,\n+\t\t\t\t    &reduc_chain);\n       if (reduc_stmt_info)\n         {\n \t  STMT_VINFO_REDUC_DEF (stmt_vinfo) = reduc_stmt_info;\n@@ -596,7 +597,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, class loop *loop)\n                   /* Store the reduction cycles for possible vectorization in\n                      loop-aware SLP if it was not detected as reduction\n \t\t     chain.  */\n-\t\t  if (! REDUC_GROUP_FIRST_ELEMENT (reduc_stmt_info))\n+\t\t  if (! reduc_chain)\n \t\t    LOOP_VINFO_REDUCTIONS (loop_vinfo).safe_push\n \t\t      (reduc_stmt_info);\n                 }\n@@ -2854,14 +2855,15 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \n static stmt_vec_info\n vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n-\t\t\t  bool *double_reduc)\n+\t\t\t  bool *double_reduc, bool *reduc_chain_p)\n {\n   gphi *phi = as_a <gphi *> (phi_info->stmt);\n   gimple *phi_use_stmt = NULL;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n \n   *double_reduc = false;\n+  *reduc_chain_p = false;\n   STMT_VINFO_REDUC_TYPE (phi_info) = TREE_CODE_REDUCTION;\n \n   tree phi_name = PHI_RESULT (phi);\n@@ -3036,6 +3038,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t  LOOP_VINFO_REDUCTION_CHAINS (loop_info).safe_push (reduc_chain[0]);\n \t  REDUC_GROUP_SIZE (reduc_chain[0]) = reduc_chain.length ();\n \n+\t  *reduc_chain_p = true;\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t    \"reduction: detected reduction chain\\n\");"}]}