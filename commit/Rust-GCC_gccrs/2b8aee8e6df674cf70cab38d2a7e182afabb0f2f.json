{"sha": "2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4YWVlOGU2ZGY2NzRjZjcwY2FiMzhkMmE3ZTE4MmFmYWJiMGYyZg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2008-11-03T16:35:13Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2008-11-03T16:35:13Z"}, "message": "re PR bootstrap/36908 (bootstrap forever with BOOT_CFLAGS=\"-O2 -ftree-loop-distribution\")\n\n2008-11-03  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/36908\n\t* testsuite/gcc.dg/tree-ssa/pr36908.c: New.\n\t* tree-loop-distribution.c (number_of_rw_in_rdg): New.\n\t(number_of_rw_in_partition): New.\n\t(partition_contains_all_rw): New.\n\t(ldist_gen): Do not distribute when one of the partitions\n\tcontains all the memory operations.\n\nFrom-SVN: r141550", "tree": {"sha": "75cc50bc2dd573fa0fb793f5893a75c402a2f445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75cc50bc2dd573fa0fb793f5893a75c402a2f445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede7cba0dd81777994a1d22b582ddb785b949224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede7cba0dd81777994a1d22b582ddb785b949224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede7cba0dd81777994a1d22b582ddb785b949224"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "4ecb1e12998390d82a8092babc2beff66f803b96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "patch": "@@ -1,3 +1,13 @@\n+2008-11-03  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/36908\n+\t* testsuite/gcc.dg/tree-ssa/pr36908.c: New.\n+\t* tree-loop-distribution.c (number_of_rw_in_rdg): New.\n+\t(number_of_rw_in_partition): New.\n+\t(partition_contains_all_rw): New.\n+\t(ldist_gen): Do not distribute when one of the partitions\n+\tcontains all the memory operations.\n+\n 2008-11-03  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* cfghooks.c (split_block): Set BB_IRREDUCIBLE_LOOP and"}, {"sha": "a135bcff238146ec0a9f339761f70a18e19fa339", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr36908.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36908.c?ref=2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-distribution\" } */\n+#define NULL ((void *)0)\n+\n+typedef unsigned int size_t;\n+extern void *foo(size_t nelem, size_t elsize);\n+extern void bar (char*, ...);\n+\n+typedef struct alt_state *alt_state_t;\n+typedef struct state *state_t;\n+\n+struct alt_state\n+{\n+  alt_state_t next_alt_state;\n+};\n+\n+static alt_state_t first_free_alt_state = NULL;\n+\n+static void\n+free_alt_state (alt_state_t alt_state)\n+{\n+  if (alt_state == NULL)\n+    return;\n+  alt_state->next_alt_state = first_free_alt_state;\n+  first_free_alt_state = alt_state;\n+}\n+\n+/* The function frees list started with node ALT_STATE_LIST.  */\n+static void\n+free_alt_states (alt_state_t alt_states_list)\n+{\n+  alt_state_t curr_alt_state;\n+  alt_state_t next_alt_state;\n+\n+  for (curr_alt_state = alt_states_list;\n+       curr_alt_state != NULL;\n+       curr_alt_state = next_alt_state)\n+    {\n+      next_alt_state = curr_alt_state->next_alt_state;\n+      free_alt_state (curr_alt_state);\n+    }\n+}\n+\n+int \n+main (void)\n+{\n+  int i;\n+  alt_state_t state, act_state;\n+\n+  act_state = state = foo (1, sizeof (struct alt_state));\n+  for (i = 0; i < 2; i ++)\n+  {\n+    act_state->next_alt_state = foo (1, sizeof (struct alt_state));\n+    act_state = act_state->next_alt_state;\n+  }\n+\n+  free_alt_states (state);\n+\n+  for (act_state = first_free_alt_state;\n+       act_state != NULL;\n+       act_state = act_state->next_alt_state)\n+       bar (\"going from %p to %p\\n\", act_state, act_state->next_alt_state);\n+\n+  return 0;\n+}"}, {"sha": "bd6a9322500d8f86593a39a7cd692f6f80d60e1d", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "patch": "@@ -945,6 +945,64 @@ debug_rdg_partitions (VEC (bitmap, heap) *partitions)\n   dump_rdg_partitions (stderr, partitions);\n }\n \n+/* Returns the number of read and write operations in the RDG.  */\n+\n+static int\n+number_of_rw_in_rdg (struct graph *rdg)\n+{\n+  int i, res = 0;\n+\n+  for (i = 0; i < rdg->n_vertices; i++)\n+    {\n+      if (RDG_MEM_WRITE_STMT (rdg, i))\n+\t++res;\n+\n+      if (RDG_MEM_READS_STMT (rdg, i))\n+\t++res;\n+    }\n+\n+  return res;\n+}\n+\n+/* Returns the number of read and write operations in a PARTITION of\n+   the RDG.  */\n+\n+static int\n+number_of_rw_in_partition (struct graph *rdg, bitmap partition)\n+{\n+  int res = 0;\n+  unsigned i;\n+  bitmap_iterator ii;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (partition, 0, i, ii)\n+    {\n+      if (RDG_MEM_WRITE_STMT (rdg, i))\n+\t++res;\n+\n+      if (RDG_MEM_READS_STMT (rdg, i))\n+\t++res;\n+    }\n+\n+  return res;\n+}\n+\n+/* Returns true when one of the PARTITIONS contains all the read or\n+   write operations of RDG.  */\n+\n+static bool\n+partition_contains_all_rw (struct graph *rdg, VEC (bitmap, heap) *partitions)\n+{\n+  int i;\n+  bitmap partition;\n+  int nrw = number_of_rw_in_rdg (rdg);\n+\n+  for (i = 0; VEC_iterate (bitmap, partitions, i, partition); i++)\n+    if (nrw == number_of_rw_in_partition (rdg, partition))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Generate code from STARTING_VERTICES in RDG.  Returns the number of\n    distributed loops.  */\n \n@@ -992,7 +1050,8 @@ ldist_gen (struct loop *loop, struct graph *rdg,\n   BITMAP_FREE (processed);\n   nbp = VEC_length (bitmap, partitions);\n \n-  if (nbp <= 1)\n+  if (nbp <= 1\n+      || partition_contains_all_rw (rdg, partitions))\n     goto ldist_done;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}]}