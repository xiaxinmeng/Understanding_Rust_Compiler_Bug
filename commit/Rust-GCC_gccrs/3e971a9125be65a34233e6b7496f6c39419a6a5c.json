{"sha": "3e971a9125be65a34233e6b7496f6c39419a6a5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5NzFhOTEyNWJlNjVhMzQyMzNlNmI3NDk2ZjZjMzk0MTlhNmE1Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:23:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:23:09Z"}, "message": "dwarf2out.c (resolve_one_addr): Remove unused data parameter.\n\ngcc/\n\t* dwarf2out.c (resolve_one_addr): Remove unused data parameter.\n\tReturn a bool, inverting the result so that 0/false means \"not ok\".\n\tUse FOR_EACH_SUBRTX_PTR instead of for_each_rtx to iterate over\n\tsubrtxes of a CONST.\n\t(mem_loc_descriptor, add_const_value_attribute)\n\t(resolve_addr_in_expr): Update calls accordingly.\n\nFrom-SVN: r214637", "tree": {"sha": "887b69ff61cbb47203e3e703141bdf806ab32625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/887b69ff61cbb47203e3e703141bdf806ab32625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e971a9125be65a34233e6b7496f6c39419a6a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e971a9125be65a34233e6b7496f6c39419a6a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e971a9125be65a34233e6b7496f6c39419a6a5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e971a9125be65a34233e6b7496f6c39419a6a5c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4ba89ffcaad2f331a0fcc5d236f0b114afde8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ba89ffcaad2f331a0fcc5d236f0b114afde8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ba89ffcaad2f331a0fcc5d236f0b114afde8cc"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "cd9fb2c75cac82d73d976b1e9cbbd0a2171e5ec3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e971a9125be65a34233e6b7496f6c39419a6a5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e971a9125be65a34233e6b7496f6c39419a6a5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e971a9125be65a34233e6b7496f6c39419a6a5c", "patch": "@@ -1,3 +1,12 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* dwarf2out.c (resolve_one_addr): Remove unused data parameter.\n+\tReturn a bool, inverting the result so that 0/false means \"not ok\".\n+\tUse FOR_EACH_SUBRTX_PTR instead of for_each_rtx to iterate over\n+\tsubrtxes of a CONST.\n+\t(mem_loc_descriptor, add_const_value_attribute)\n+\t(resolve_addr_in_expr): Update calls accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* dwarf2out.c: Include rtl-iter.h."}, {"sha": "39b28a9ec4cab7e0d4ee6e5baeeb5bfaee9ab372", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e971a9125be65a34233e6b7496f6c39419a6a5c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e971a9125be65a34233e6b7496f6c39419a6a5c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3e971a9125be65a34233e6b7496f6c39419a6a5c", "patch": "@@ -3158,7 +3158,7 @@ static dw_loc_descr_ref multiple_reg_loc_descriptor (rtx, rtx,\n static dw_loc_descr_ref based_loc_descr (rtx, HOST_WIDE_INT,\n \t\t\t\t\t enum var_init_status);\n static int is_based_loc (const_rtx);\n-static int resolve_one_addr (rtx *, void *);\n+static bool resolve_one_addr (rtx *);\n static dw_loc_descr_ref concat_loc_descriptor (rtx, rtx,\n \t\t\t\t\t       enum var_init_status);\n static dw_loc_descr_ref loc_descriptor (rtx, enum machine_mode mode,\n@@ -13220,7 +13220,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       break;\n \n     case CONST_STRING:\n-      resolve_one_addr (&rtl, NULL);\n+      resolve_one_addr (&rtl);\n       goto symref;\n \n     default:\n@@ -15275,7 +15275,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       if (dwarf_version >= 4 || !dwarf_strict)\n \t{\n \t  dw_loc_descr_ref loc_result;\n-\t  resolve_one_addr (&rtl, NULL);\n+\t  resolve_one_addr (&rtl);\n \trtl_addr:\n           loc_result = new_addr_loc_descr (rtl, dtprel_false);\n \t  add_loc_descr (&loc_result, new_loc_descr (DW_OP_stack_value, 0, 0));\n@@ -23111,11 +23111,11 @@ move_marked_base_types (void)\n }\n \n /* Helper function for resolve_addr, attempt to resolve\n-   one CONST_STRING, return non-zero if not successful.  Similarly verify that\n+   one CONST_STRING, return true if successful.  Similarly verify that\n    SYMBOL_REFs refer to variables emitted in the current CU.  */\n \n-static int\n-resolve_one_addr (rtx *addr, void *data ATTRIBUTE_UNUSED)\n+static bool\n+resolve_one_addr (rtx *addr)\n {\n   rtx rtl = *addr;\n \n@@ -23128,15 +23128,15 @@ resolve_one_addr (rtx *addr, void *data ATTRIBUTE_UNUSED)\n \t= build_array_type (char_type_node, build_index_type (tlen));\n       rtl = lookup_constant_def (t);\n       if (!rtl || !MEM_P (rtl))\n-\treturn 1;\n+\treturn false;\n       rtl = XEXP (rtl, 0);\n       if (GET_CODE (rtl) == SYMBOL_REF\n \t  && SYMBOL_REF_DECL (rtl)\n \t  && !TREE_ASM_WRITTEN (SYMBOL_REF_DECL (rtl)))\n-\treturn 1;\n+\treturn false;\n       vec_safe_push (used_rtx_array, rtl);\n       *addr = rtl;\n-      return 0;\n+      return true;\n     }\n \n   if (GET_CODE (rtl) == SYMBOL_REF\n@@ -23145,17 +23145,21 @@ resolve_one_addr (rtx *addr, void *data ATTRIBUTE_UNUSED)\n       if (TREE_CONSTANT_POOL_ADDRESS_P (rtl))\n \t{\n \t  if (!TREE_ASM_WRITTEN (DECL_INITIAL (SYMBOL_REF_DECL (rtl))))\n-\t    return 1;\n+\t    return false;\n \t}\n       else if (!TREE_ASM_WRITTEN (SYMBOL_REF_DECL (rtl)))\n-\treturn 1;\n+\treturn false;\n     }\n \n-  if (GET_CODE (rtl) == CONST\n-      && for_each_rtx (&XEXP (rtl, 0), resolve_one_addr, NULL))\n-    return 1;\n+  if (GET_CODE (rtl) == CONST)\n+    {\n+      subrtx_ptr_iterator::array_type array;\n+      FOR_EACH_SUBRTX_PTR (iter, array, &XEXP (rtl, 0), ALL)\n+\tif (!resolve_one_addr (*iter))\n+\t  return false;\n+    }\n \n-  return 0;\n+  return true;\n }\n \n /* For STRING_CST, return SYMBOL_REF of its constant pool entry,\n@@ -23267,7 +23271,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n     switch (loc->dw_loc_opc)\n       {\n       case DW_OP_addr:\n-\tif (resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n+\tif (!resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr))\n \t  {\n \t    if ((prev == NULL\n \t\t || prev->dw_loc_opc == DW_OP_piece\n@@ -23286,7 +23290,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n             || (loc->dw_loc_opc == DW_OP_GNU_const_index && loc->dtprel))\n           {\n             rtx rtl = loc->dw_loc_oprnd1.val_entry->addr.rtl;\n-            if (resolve_one_addr (&rtl, NULL))\n+            if (!resolve_one_addr (&rtl))\n               return false;\n             remove_addr_table_entry (loc->dw_loc_oprnd1.val_entry);\n             loc->dw_loc_oprnd1.val_entry =\n@@ -23296,7 +23300,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n       case DW_OP_const4u:\n       case DW_OP_const8u:\n \tif (loc->dtprel\n-\t    && resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n+\t    && !resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr))\n \t  return false;\n \tbreak;\n       case DW_OP_plus_uconst:\n@@ -23314,7 +23318,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \tbreak;\n       case DW_OP_implicit_value:\n \tif (loc->dw_loc_oprnd2.val_class == dw_val_class_addr\n-\t    && resolve_one_addr (&loc->dw_loc_oprnd2.v.val_addr, NULL))\n+\t    && !resolve_one_addr (&loc->dw_loc_oprnd2.v.val_addr))\n \t  return false;\n \tbreak;\n       case DW_OP_GNU_implicit_pointer:\n@@ -23571,7 +23575,7 @@ resolve_addr (dw_die_ref die)\n \tbreak;\n       case dw_val_class_addr:\n \tif (a->dw_attr == DW_AT_const_value\n-\t    && resolve_one_addr (&a->dw_attr_val.v.val_addr, NULL))\n+\t    && !resolve_one_addr (&a->dw_attr_val.v.val_addr))\n \t  {\n             if (AT_index (a) != NOT_INDEXED)\n               remove_addr_table_entry (a->dw_attr_val.val_entry);"}]}