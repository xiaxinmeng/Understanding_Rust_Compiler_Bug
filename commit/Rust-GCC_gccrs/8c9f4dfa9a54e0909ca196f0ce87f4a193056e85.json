{"sha": "8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5ZjRkZmE5YTU0ZTA5MDljYTE5NmYwY2U4N2Y0YTE5MzA1NmU4NQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2011-01-05T20:52:36Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-01-05T20:52:36Z"}, "message": "safe_base.h (_Safe_iterator_base::_M_unlink): New.\n\n2011-01-05  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n        * include/debug/safe_base.h (_Safe_iterator_base::_M_unlink): New.\n        * include/src/debug.cc: Use latter\n        * include/debug/forward_list (forward_list<>::_M_swap):  Fix to\n        correctly handle before_begin iterators.\n        * testsuite/23_containers/forward_list/debug/swap.cc: Remove now \n        useless _GLIBCXX_DEBUG checks.\n\nFrom-SVN: r168528", "tree": {"sha": "1bbd4deacf934478dc41ff8f89fda6c2024ef42e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bbd4deacf934478dc41ff8f89fda6c2024ef42e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/comments", "author": null, "committer": null, "parents": [{"sha": "819edd94966ac12f49a0dbbc7d8139fe4e854056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819edd94966ac12f49a0dbbc7d8139fe4e854056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819edd94966ac12f49a0dbbc7d8139fe4e854056"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "3e6e524d7d3bbbc3bd69fcf376a2aeace41a941e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "patch": "@@ -1,3 +1,12 @@\n+2011-01-05  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* include/debug/safe_base.h (_Safe_iterator_base::_M_unlink): New.\n+\t* include/src/debug.cc: Use latter\n+\t* include/debug/forward_list (forward_list<>::_M_swap):  Fix to\n+\tcorrectly handle before_begin iterators.\n+\t* testsuite/23_containers/forward_list/debug/swap.cc: Remove now\n+\tuseless _GLIBCXX_DEBUG checks.\n+\n 2011-01-04  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR libstdc++/47145"}, {"sha": "09b0b8659f445a1f7d9133e9a9a69f6c2370dd49", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "patch": "@@ -600,8 +600,80 @@ namespace __debug\n \t\t   && __it != this->_M_base().cend();\n \t  });\n       }\n+      typedef __gnu_debug::_Safe_iterator_base _Safe_iterator_base;\n+      static void\n+      _M_swap_aux(forward_list& __lhs,\n+\t\t  _Safe_iterator_base*& __lhs_iterators,\n+\t\t  forward_list& __rhs,\n+\t\t  _Safe_iterator_base*& __rhs_iterators);\n+      void _M_swap(forward_list& __list);\n     };\n \n+   template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    _M_swap_aux(forward_list<_Tp, _Alloc>& __lhs,\n+\t\t__gnu_debug::_Safe_iterator_base*& __lhs_iterators,\n+\t\tforward_list<_Tp, _Alloc>& __rhs,\n+\t\t__gnu_debug::_Safe_iterator_base*& __rhs_iterators)\n+    {\n+      using __gnu_debug::_Safe_iterator_base;\n+      _Safe_iterator_base* __bbegin_its = 0;\n+      _Safe_iterator_base* __last_bbegin = 0;\n+      for (_Safe_iterator_base* __iter = __lhs_iterators; __iter;)\n+\t{\n+\t  // Even iterator are casted to const_iterator, not a problem.\n+\t  const_iterator* __victim = static_cast<const_iterator*>(__iter);\n+\t  __iter = __iter->_M_next;\n+\t  if (__victim->base() == __rhs._M_base().cbefore_begin())\n+\t    {\n+\t      __victim->_M_unlink();\n+\t      if (__lhs_iterators == __victim)\n+\t\t__lhs_iterators = __victim->_M_next;\n+\t      if (__bbegin_its)\n+\t\t{\n+\t\t  __victim->_M_next = __bbegin_its;\n+\t\t  __bbegin_its->_M_prior = __victim;\n+\t\t}\n+\t      else\n+\t\t__last_bbegin = __victim;\n+\t      __bbegin_its = __victim;\n+\t    }\n+\t  else\n+\t    __victim->_M_sequence = &__lhs;\n+\t}\n+\n+      if (__bbegin_its)\n+\t{\n+\t  if (__rhs_iterators)\n+\t    {\n+\t      __rhs_iterators->_M_prior = __last_bbegin;\n+\t      __last_bbegin->_M_next = __rhs_iterators;\n+\t    }\n+\t  __rhs_iterators = __bbegin_its;\n+\t}\n+    }\n+\n+  /* Special forward_list _M_swap version that do not swap the\n+   * before-begin ownership.*/\n+  template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    _M_swap(forward_list<_Tp, _Alloc>& __list)\n+    {\n+      __gnu_cxx::__scoped_lock sentry(this->_M_get_mutex());\n+      std::swap(this->_M_iterators, __list._M_iterators);\n+      std::swap(this->_M_const_iterators, __list._M_const_iterators);\n+      // Useless, always 1 on forward_list\n+      //std::swap(this->_M_version, __list._M_version);\n+      _Safe_iterator_base* __this_its = this->_M_iterators;\n+      _M_swap_aux(__list, __list._M_iterators, *this, this->_M_iterators);\n+      _Safe_iterator_base* __this_const_its = this->_M_const_iterators;\n+      _M_swap_aux(__list, __list._M_const_iterators, *this, this->_M_const_iterators);\n+      _M_swap_aux(*this, __this_its, __list, __list._M_iterators);\n+      _M_swap_aux(*this, __this_const_its, __list, __list._M_const_iterators);\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     bool\n     operator==(const forward_list<_Tp, _Alloc>& __lx,"}, {"sha": "1348004cb57c2ea6786627cc0d70d5639bec6881", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "patch": "@@ -146,6 +146,16 @@ namespace __gnu_debug\n     /** Reset all member variables */\n     void\n     _M_reset() throw ();\n+\n+    /** Unlink itself */\n+    void\n+    _M_unlink() throw ()\n+    {\n+      if (_M_prior)\n+\t_M_prior->_M_next = _M_next;\n+      if (_M_next)\n+\t_M_next->_M_prior = _M_prior;\n+    }\n   };\n \n   /**"}, {"sha": "9074dfb07388cccbf327c51a75f2ee9389b0496b", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "patch": "@@ -257,11 +257,7 @@ namespace __gnu_debug\n   _M_detach_single(_Safe_iterator_base* __it) throw ()\n   {\n     // Remove __it from this sequence's list\n-    if (__it->_M_prior)\n-      __it->_M_prior->_M_next = __it->_M_next;\n-    if (__it->_M_next)\n-      __it->_M_next->_M_prior = __it->_M_prior;\n-\t\n+    __it->_M_unlink();\n     if (_M_const_iterators == __it)\n       _M_const_iterators = __it->_M_next;\n     if (_M_iterators == __it)"}, {"sha": "486bfcf072489e595b6da1ef33cc6640eb2f6336", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/swap.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9f4dfa9a54e0909ca196f0ce87f4a193056e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fswap.cc?ref=8c9f4dfa9a54e0909ca196f0ce87f4a193056e85", "patch": "@@ -54,10 +54,8 @@ test01()\n   // before-begin iterator is not transfered:\n   // TODO: Validate with LWG group how before begin should be\n   // treated.\n-#if !_GLIBCXX_DEBUG\n   VERIFY( fit == fl1_its[0] );\n-#endif\n-  // All others are, even paste-the-end one:\n+  // All other iterators are, even paste-the-end ones:\n   for (size_t i = 1; i != fl2_its.size(); ++i)\n   {\n     VERIFY( ++fit == fl2_its[i] );\n@@ -66,9 +64,7 @@ test01()\n   fit = fl2.before_begin();\n   // TODO: Validate with LWG group how before begin should be\n   // treated.\n-#if !_GLIBCXX_DEBUG\n   VERIFY( fit == fl2_its[0] );\n-#endif\n   for (size_t i = 1; i != fl1_its.size(); ++i)\n   {\n     VERIFY( ++fit == fl1_its[i] );"}]}