{"sha": "1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY0NmIwOWYzYjkxN2ExMzVhMTUwODRjY2QxYThjZTQxZGRmM2QzOA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2018-01-11T08:52:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:52:20Z"}, "message": "[Ada] Update gnatpp documentation after engine change\n\n2018-01-11  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Rewrite gnatpp documentation\n\tto match what the Libadalang-based version does.\n\t* doc/gnat_ugn/about_this_guide.rst: Update reference.\n\nFrom-SVN: r256500", "tree": {"sha": "a7d4e692a8d23958aaaf8e0c563b5a63c7f87de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d4e692a8d23958aaaf8e0c563b5a63c7f87de0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7460ccc71d2058f493068e2d02ff8af082887d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7460ccc71d2058f493068e2d02ff8af082887d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7460ccc71d2058f493068e2d02ff8af082887d6a"}], "stats": {"total": 696, "additions": 447, "deletions": 249}, "files": [{"sha": "4a92bf96d03dd38bbd37a58ec0fc58bf94e5dfd7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "patch": "@@ -1,3 +1,9 @@\n+2018-01-11  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Rewrite gnatpp documentation\n+\tto match what the Libadalang-based version does.\n+\t* doc/gnat_ugn/about_this_guide.rst: Update reference.\n+\n 2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Uses_SS): A controlled type requires the secondary stack"}, {"sha": "e3037210ac8cd8acacb36d55f0be3defc6423b44", "filename": "gcc/ada/doc/gnat_ugn/about_this_guide.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst?ref=1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "patch": "@@ -146,7 +146,7 @@ the new document structure.\n     - :ref:`The_Ada-to-XML_Converter_gnat2xml`\n     - :ref:`The_Coding_Standard_Verifier_gnatcheck`\n     - :ref:`The_GNAT_Metrics_Tool_gnatmetric`\n-    - :ref:`The_GNAT_Pretty-Printer_gnatpp`\n+    - :ref:`The_GNAT_Pretty_Printer_gnatpp`\n     - :ref:`The_Body_Stub_Generator_gnatstub`\n     - :ref:`The_Unit_Test_Generator_gnattest`\n "}, {"sha": "74dbe4ea836709deadc2be10cb4f0b1a3d2299d9", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 440, "deletions": 248, "changes": 688, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1646b09f3b917a135a15084ccd1a8ce41ddf3d38/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=1646b09f3b917a135a15084ccd1a8ce41ddf3d38", "patch": "@@ -19,7 +19,7 @@ This chapter describes a number of utility programs:\n   * :ref:`The_Ada-to-XML_Converter_gnat2xml`\n   * :ref:`The_Coding_Standard_Verifier_gnatcheck`\n   * :ref:`The_GNAT_Metrics_Tool_gnatmetric`\n-  * :ref:`The_GNAT_Pretty-Printer_gnatpp`\n+  * :ref:`The_GNAT_Pretty_Printer_gnatpp`\n   * :ref:`The_Body_Stub_Generator_gnatstub`\n   * :ref:`The_Unit_Test_Generator_gnattest`\n   * :ref:`The_Backtrace_Symbolizer_gnatsymbolize`\n@@ -2798,59 +2798,47 @@ Alternatively, you may run the script using the following command line:\n \n .. only:: PRO or GPL\n \n-   .. _The_GNAT_Pretty-Printer_gnatpp:\n+   .. _The_GNAT_Pretty_Printer_gnatpp:\n \n-   The GNAT Pretty-Printer ``gnatpp``\n+   The GNAT Pretty Printer ``gnatpp``\n    ==================================\n \n    .. index:: ! gnatpp\n-   .. index:: Pretty-Printer\n+   .. index:: pretty printer\n \n-   The ``gnatpp`` tool is an ASIS-based utility\n-   for source reformatting / pretty-printing.\n-   It takes an Ada source file as input and generates a reformatted\n-   version as output.\n-   You can specify various style directives via switches; e.g.,\n-   identifier case conventions, rules of indentation, and comment layout.\n+   This documentation is for the new libadalang-based version\n+   of ``gnatpp``, which replaces the ASIS-based version.\n+\n+   The ``gnatpp`` tool is a utility for source reformatting / pretty\n+   printing.  It takes an Ada source file as input and generates a\n+   reformatted version as output.  You can specify various style\n+   directives via switches; e.g., identifier case conventions, rules of\n+   indentation, and comment layout.\n \n    ``gnatpp`` is a project-aware tool\n    (see :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n    the project-related switches).  The project file package that can specify\n    ``gnatpp`` switches is named ``Pretty_Printer``.\n \n-   To produce a reformatted file, ``gnatpp`` invokes the Ada\n-   compiler and generates and uses the ASIS tree for the input source;\n-   thus the input must be legal Ada code, and the tool should have all the\n-   information needed to compile the input source. To provide this information,\n-   you may specify as a tool parameter the project file the input source belongs to.\n-   Another possibility is to specify the source search\n-   path and needed configuration files in ``-cargs`` section of ``gnatpp``\n-   call, see the description of the ``gnatpp`` switches below.\n-\n-   ``gnatpp`` cannot process sources that contain preprocessing directives.\n+   ``gnatpp`` cannot process sources that contain preprocessing\n+   directives.\n \n    The ``gnatpp`` command has the form\n \n      ::\n \n-        $ gnatpp [ switches ] filename [ -cargs gcc_switches ]\n+        $ gnatpp [ switches ] filename\n \n    where\n \n    * ``switches`` is an optional sequence of switches defining such properties as\n      the formatting rules, the source search path, and the destination for the\n      output source file\n \n-   * ``filename`` is the name (including the extension) of the source file to\n-     reformat; wildcards or several file names on the same gnatpp command are\n-     allowed. The file name may contain path information; it does not have to\n-     follow the GNAT file naming rules\n-\n-   * ``gcc_switches`` is a list of switches for\n-     ``gcc``. They will be passed on to all compiler invocations made by\n-     ``gnatpp`` to generate the ASIS trees. Here you can provide\n-     ``-I`` switches to form the source search path,\n-     use the ``-gnatec`` switch to set the configuration file, etc.\n+   * ``filename`` is the name of the source file to reformat; wildcards\n+     or several file names on the same gnatpp command are allowed. The\n+     file name may contain path information; it does not have to follow\n+     the GNAT file naming rules\n \n \n    .. _Switches_for_gnatpp:\n@@ -2892,15 +2880,15 @@ Alternatively, you may run the script using the following command line:\n      * ``at`` keywords in the component clauses in record representation clauses.\n \n \n-   .. index:: -A0 (gnatpp)\n-   .. index:: -A1 (gnatpp)\n+   .. index:: --no-alignment (gnatpp)\n+   .. index:: --alignment (gnatpp)\n \n \n-   :switch:`-A0`\n+   :switch:`--no-alignment`\n      Set alignment to OFF\n \n \n-   :switch:`-A1`\n+   :switch:`--alignment`\n      Set alignment to ON\n \n    .. _Casing_Control:\n@@ -2922,144 +2910,158 @@ Alternatively, you may run the script using the following command line:\n    following an underscore, are converted to their uppercase forms;\n    all the other letters are converted to their lowercase forms.\n \n-   .. index:: -a (gnatpp)\n+   (Note: the casing switches are not yet fully supported in the\n+   libadalang-based version of gnatpp.)\n \n+   .. index:: --name-case-as-declared (gnatpp)\n \n-   :switch:`-aL`\n-     Attribute designators are lower case\n-\n-\n-   :switch:`-aU`\n-     Attribute designators are upper case\n-\n+   :switch:`--name-case-as-declared`\n+     Name casing for defining occurrences are as they appear in the source file\n+     (this is the default)\n \n-   :switch:`-aM`\n-     Attribute designators are mixed case (this is the default)\n+   .. index:: --name-upper-case (gnatpp)\n \n-   .. index:: -k (gnatpp)\n+   :switch:`--name-upper-case`\n+     Names are in upper case\n \n+   .. index:: --name-lower-case (gnatpp)\n \n-   :switch:`-kL`\n-     Keywords (technically, these are known in Ada as *reserved words*) are\n-     lower case (this is the default)\n+   :switch:`--name-lower-case`\n+     Names are in lower case\n \n+   .. index:: --name-mixed-case (gnatpp)\n \n-   :switch:`-kU`\n-     Keywords are upper case\n+   :switch:`--name-mixed-case`\n+     Names are in mixed case\n \n-   .. index:: -n (gnatpp)\n+   .. index:: --attribute-lower-case (gnatpp)\n \n+   :switch:`--attribute-lower-case`\n+     Attribute designators are lower case\n \n-   :switch:`-nD`\n-     Name casing for defining occurrences are as they appear in the source file\n-     (this is the default)\n+   .. index:: --attribute-upper-case (gnatpp)\n \n+   :switch:`--attribute-upper-case`\n+     Attribute designators are upper case\n \n-   :switch:`-nU`\n-     Names are in upper case\n+   .. index:: --attribute-mixed-case (gnatpp)\n \n+   :switch:`--attribute-mixed-case`\n+     Attribute designators are mixed case (this is the default)\n \n-   :switch:`-nL`\n-     Names are in lower case\n+   .. index:: --keyword-lower-case (gnatpp)\n \n+   :switch:`--keyword-lower-case`\n+     Keywords (technically, these are known in Ada as *reserved words*) are\n+     lower case (this is the default)\n \n-   :switch:`-nM`\n-     Names are in mixed case\n+   .. index:: --keyword-upper-case (gnatpp)\n \n-   .. index:: -ne (gnatpp)\n+   :switch:`--keyword-upper-case`\n+     Keywords are upper case\n \n+   .. index:: --enum-case-as-declared (gnatpp)\n \n-   :switch:`-neD`\n+   :switch:`--enum-case-as-declared`\n      Enumeration literal casing for defining occurrences are as they appear in the\n      source file. Overrides -n casing setting.\n \n+   .. index:: --enum-upper-case (gnatpp)\n \n-   :switch:`-neU`\n+   :switch:`--enum-upper-case`\n      Enumeration literals are in upper case.  Overrides -n casing\n      setting.\n \n+   .. index:: --enum-lower-case (gnatpp)\n \n-   :switch:`-neL`\n+   :switch:`--enum-lower-case`\n      Enumeration literals are in lower case. Overrides -n casing\n      setting.\n \n+   .. index:: --enum-mixed-case (gnatpp)\n \n-   :switch:`-neM`\n+   :switch:`--enum-mixed-case`\n      Enumeration literals are in mixed case. Overrides -n casing\n      setting.\n \n-   .. index:: -nt (gnatpp)\n-\n+   .. index:: --type-case-as-declared (gnatpp)\n \n-   :switch:`-ntD`\n+   :switch:`--type-case-as-declared`\n      Names introduced by type and subtype declarations are always\n      cased as they appear in the declaration in the source file.\n      Overrides -n casing setting.\n \n+   .. index:: --type-upper-case (gnatpp)\n \n-   :switch:`-ntU`\n+   :switch:`--type-upper-case`\n      Names introduced by type and subtype declarations are always in\n      upper case. Overrides -n casing setting.\n \n+   .. index:: --type-lower-case (gnatpp)\n \n-   :switch:`-ntL`\n+   :switch:`--type-lower-case`\n      Names introduced by type and subtype declarations are always in\n      lower case. Overrides -n casing setting.\n \n+   .. index:: --type-mixed-case (gnatpp)\n \n-   :switch:`-ntM`\n+   :switch:`--type-mixed-case`\n      Names introduced by type and subtype declarations are always in\n      mixed case. Overrides -n casing setting.\n \n+   .. index:: --number-upper-case (gnatpp)\n \n-   :switch:`-nnU`\n+   :switch:`--number-upper-case`\n      Names introduced by number declarations are always in\n      upper case. Overrides -n casing setting.\n \n+   .. index:: --number-lower-case (gnatpp)\n \n-   :switch:`-nnL`\n+   :switch:`--number-lower-case`\n      Names introduced by number declarations are always in\n      lower case. Overrides -n casing setting.\n \n+   .. index:: --number-mixed-case (gnatpp)\n \n-   :switch:`-nnM`\n+   :switch:`--number-mixed-case`\n      Names introduced by number declarations are always in\n      mixed case. Overrides -n casing setting.\n \n-   .. index:: -p (gnatpp)\n-\n+   .. index:: --pragma-lower-case (gnatpp)\n \n-   :switch:`-pL`\n+   :switch:`--pragma-lower-case`\n      Pragma names are lower case\n \n+   .. index:: --pragma-upper-case (gnatpp)\n \n-   :switch:`-pU`\n+   :switch:`--pragma-upper-case`\n      Pragma names are upper case\n \n+   .. index:: --pragma-mixed-case (gnatpp)\n \n-   :switch:`-pM`\n+   :switch:`--pragma-mixed-case`\n      Pragma names are mixed case (this is the default)\n \n \n-   .. index:: -D (gnatpp)\n+   .. index:: --dictionary (gnatpp)\n \n-   :switch:`-D{file}`\n+   :switch:`--dictionary={file}`\n      Use ``file`` as a *dictionary file* that defines\n      the casing for a set of specified names,\n      thereby overriding the effect on these names by\n      any explicit or implicit\n      -n switch.\n      To supply more than one dictionary file,\n-     use several ``-D`` switches.\n+     use several ``--dictionary`` switches.\n \n      ``gnatpp`` implicitly uses a *default dictionary file*\n      to define the casing for the Ada predefined names and\n      the names declared in the GNAT libraries.\n \n \n-   .. index:: -D- (gnatpp)\n+   .. index:: --dictionary=- (gnatpp)\n \n-   :switch:`-D-`\n+   :switch:`--dictionary=-`\n      Do not use the default dictionary file;\n      instead, use the casing\n      defined by a ``-n`` switch and any explicit\n@@ -3068,8 +3070,8 @@ Alternatively, you may run the script using the following command line:\n    The structure of a dictionary file, and details on the conventions\n    used in the default dictionary file, are defined in :ref:`Name_Casing`.\n \n-   The :switch:`-D-` and\n-   :switch:`-D{file}` switches are mutually\n+   The :switch:`--dictionary=-` and\n+   :switch:`--dictionary={file}` switches are mutually\n    compatible.\n \n    This group of ``gnatpp`` switches controls the layout of comments and\n@@ -3080,24 +3082,24 @@ Alternatively, you may run the script using the following command line:\n    .. index:: -c (gnatpp)\n \n \n-   :switch:`-c0`\n+   :switch:`--comments-unchanged`\n      All comments remain unchanged.\n \n \n-   :switch:`-c1`\n+   :switch:`--comments-gnat-indentation`\n      GNAT-style comment line indentation.\n      This is the default.\n \n \n-   :switch:`-c3`\n+   :switch:`--comments-gnat-beginning`\n      GNAT-style comment beginning.\n \n \n-   :switch:`-c4`\n+   :switch:`--comments-fill`\n      Fill comment blocks.\n \n \n-   :switch:`-c5`\n+   :switch:`--comments-special`\n      Keep unchanged special form comments.\n      This is the default.\n \n@@ -3142,6 +3144,7 @@ Alternatively, you may run the script using the following command line:\n    :switch:`--use-on-new-line`\n      Start each USE clause in a context clause from a separate line.\n \n+\n    .. index:: --insert-blank-lines (gnatpp)\n \n \n@@ -3156,10 +3159,14 @@ Alternatively, you may run the script using the following command line:\n      Preserve blank lines in the input. By default, gnatpp will squeeze\n      multiple blank lines down to one.\n \n+   .. index:: --preserve-line-breaks (gnatpp)\n+\n+   :switch:`--preserve-line-breaks`\n+     Preserve line breaks in the input, to the extent possible.\n \n-   The ``-c`` switches are compatible with one another, except that\n-   the ``-c0`` switch disables all other comment formatting\n-   switches.\n+   The ``--comments`` switches are compatible with one another, except\n+   that the ``--comments-unchanged`` switch disables all other comment\n+   formatting switches.\n \n \n    .. _General_Text_Layout_Control:\n@@ -3169,21 +3176,21 @@ Alternatively, you may run the script using the following command line:\n \n    These switches allow control over line length and indentation.\n \n-   .. index:: -M (gnatpp)\n+   .. index:: --max-line-length (gnatpp)\n \n-   :switch:`-M{nnn}`\n+   :switch:`--max-line-length={nnn}`\n      Maximum line length, ``nnn`` from 32...256, the default value is 79\n \n \n-   .. index:: -i (gnatpp)\n+   .. index:: --indentation (gnatpp)\n \n-   :switch:`-i{nnn}`\n+   :switch:`--indentation={nnn}`\n      Indentation level, ``nnn`` from 1...9, the default value is 3\n \n \n-   .. index:: -cl (gnatpp)\n+   .. index:: --indent-continuation (gnatpp)\n \n-   :switch:`-cl{nnn}`\n+   :switch:`--indent-continuation={nnn}`\n      Indentation level for continuation lines (relative to the line being\n      continued), ``nnn`` from 1...9.\n      The default\n@@ -3232,9 +3239,9 @@ Alternatively, you may run the script using the following command line:\n      '(' and ':'. This also turns off alignment.\n \n \n-   .. index:: -ff (gnatpp)\n+   .. index:: --ff-after-pragma-page (gnatpp)\n \n-   :switch:`-ff`\n+   :switch:`--ff-after-pragma-page`\n      Insert a Form Feed character after a pragma Page.\n \n \n@@ -3255,6 +3262,32 @@ Alternatively, you may run the script using the following command line:\n      a new line. If ``nnn`` is 0, and :switch:`--no-separate-is` was not specified, then\n      the ``is`` is placed on a separate line. This feature is disabled by default.\n \n+   .. index:: --vertical-enum-types (gnatpp)\n+\n+   :switch:`--vertical-enum-types`\n+     Format enumeration type declarations \"vertically\", e.g. each\n+     enumeration literal goes on a separate line.\n+\n+   .. index:: --vertical-array-types (gnatpp)\n+\n+   :switch:`--vertical-array-types`\n+     Format array type declarations \"vertically\", e.g. for\n+     multidimensional arrays, each index_subtype_definition or\n+     discrete_subtype_definition goes on a separate line.\n+\n+   .. index:: --vertical-named-aggregates (gnatpp)\n+\n+   :switch:`--vertical-named-aggregates`\n+     Format aggregates \"vertically\" if named notation is used for all\n+     component_associations, e.g. each component_association\n+     goes on a separate line.\n+\n+   .. index:: --vertical-case-alternatives (gnatpp)\n+\n+   :switch:`--vertical-case-alternatives`\n+     Format case statements, case expressions, and variant parts with\n+     additional line breaks.\n+\n \n    .. _Setting_the_Source_Search_Path:\n \n@@ -3283,103 +3316,92 @@ Alternatively, you may run the script using the following command line:\n    Output File Control\n    ^^^^^^^^^^^^^^^^^^^\n \n-   By default the output is sent to a file whose name is obtained by appending\n-   the :file:`.pp` suffix to the name of the input file.\n-   If the file with this name already exists, it is overwritten.\n-   Thus if the input file is :file:`my_ada_proc.adb` then\n-   ``gnatpp`` will produce :file:`my_ada_proc.adb.pp`\n-   as output file.\n+   By default the output overwrites the input file.\n    The output may be redirected by the following switches:\n \n \n+   .. index:: --replace (gnatpp)\n+\n+   :switch:`--replace`\n+     This is the default.\n+     Replace the input source file with the reformatted output without\n+     creating any backup copy of the input source.\n+\n+\n    .. index:: --output-dir (gnatpp)\n \n    :switch:`--output-dir={dir}`\n-     Generate output file in directory :file:`dir` with the same name as the input\n-     file. If :file:`dir` is the same as the directory containing the input file,\n-     the input file is not processed; use ``-rnb``\n-     if you want to update the input file in place.\n+     Generate output file in directory :file:`dir` with the same name as\n+     the input file. If :file:`dir` is the same as the directory\n+     containing the input file, the input file is not processed; use\n+     ``--replace`` if you want to update the input file in\n+     place.\n \n \n-   .. index:: -pipe (gnatpp)\n+   .. index:: --pipe (gnatpp)\n \n-   :switch:`-pipe`\n+   :switch:`--pipe`\n      Send the output to ``Standard_Output``\n \n \n-   .. index:: -o (gnatpp)\n+   .. index:: --output (gnatpp)\n \n-   :switch:`-o {output_file}`\n+   :switch:`--output={output_file}`\n      Write the output into ``output_file``.\n      If ``output_file`` already exists, ``gnatpp`` terminates without\n      reading or processing the input file.\n \n \n-   .. index:: -of (gnatpp)\n+   .. index:: --output-force (gnatpp)\n \n-   :switch:`-of {output_file}`\n+   :switch:`--output-force={output_file}`\n      Write the output into ``output_file``, overwriting the existing file\n      (if one is present).\n \n \n-   .. index:: -r (gnatpp)\n+   .. index:: --replace-backup (gnatpp)\n \n-   :switch:`-r`\n+   :switch:`--replace-backup`\n      Replace the input source file with the reformatted output, and copy the\n      original input source into the file whose name is obtained by appending the\n      :file:`.npp` suffix to the name of the input file.\n      If a file with this name already exists, ``gnatpp`` terminates without\n      reading or processing the input file.\n \n \n-   .. index:: -rf (gnatpp)\n+   .. index:: --replace-force-backup (gnatpp)\n \n-   :switch:`-rf`\n-     Like ``-r`` except that if the file with the specified name\n+   :switch:`--replace-force-backup`\n+     Like ``--replace-backup`` except that if the file with the specified name\n      already exists, it is overwritten.\n \n \n-   .. index:: -rnb (gnatpp)\n+   .. index:: --end-of-line (gnatpp)\n \n-   :switch:`-rnb`\n-     Replace the input source file with the reformatted output without\n-     creating any backup copy of the input source.\n-\n-\n-   .. index:: --eol (gnatpp)\n-\n-   :switch:`--eol={xxx}`\n-     Specifies the line-ending style of the reformatted output file. The ``xxx``\n-     string specified with the switch may be:\n+   :switch:`--end-of-line={xxx}`\n+     Specifies the line-ending style of the reformatted output file. The\n+     ``xxx`` string specified with the switch may be:\n \n      * *dos* - MS DOS style, lines end with CR LF characters*\n      * *crlf*  - the same as *dos*\n      * *unix* - UNIX style, lines end with LF character*\n      * *lf* -  the same as *unix*\n \n-   .. index:: -W (gnatpp)\n+   .. index:: --wide-character-encoding (gnatpp)\n \n-   :switch:`-W{e}`\n-     Specify the wide character encoding method for the input and output files.\n-     ``e`` is one of the following:\n-\n-     * *h* - Hex encoding\n-\n-     * *u* - Upper half encoding\n-\n-     * *s* - Shift/JIS encoding\n-\n-     * *e* - EUC encoding\n+   :switch:`--wide-character-encoding={e}`\n+     Specify the wide character encoding method for the input and output\n+     files. ``e`` is one of the following:\n \n      * *8* - UTF-8 encoding\n \n      * *b* - Brackets encoding (default value)\n \n-   Options ``-o`` and ``-of`` are allowed only if the call to gnatpp\n-   contains only one file to reformat.\n+   Options ``--output-file`` and ``--output-force`` are allowed only if\n+   the call to gnatpp contains only one file to reformat.\n \n-   Option ``--eol`` and ``-W`` cannot be used together\n-   with the ``-pipe`` option.\n+   Option ``--end-of-line`` and ``--wide-character-encoding`` cannot be used together\n+   with the ``--pipe`` option.\n \n \n    .. _Other_gnatpp_Switches:\n@@ -3414,14 +3436,14 @@ Alternatively, you may run the script using the following command line:\n \n    :switch:`-U`\n      If a project file is specified and no argument source is explicitly\n-     specified (either directly or by means of ``-files`` option), process\n+     specified (either directly or by means of ``--files`` option), process\n      all the units of the closure of the argument project. Otherwise this option\n      has no effect.\n \n \n    :switch:`-U {main_unit}`\n      If a project file is specified and no argument source is explicitly\n-     specified (either directly or by means of ``-files`` option), process\n+     specified (either directly or by means of ``--files`` option), process\n      the closure of units rooted at ``main_unit``. Otherwise this option\n      has no effect.\n \n@@ -3450,6 +3472,8 @@ Alternatively, you may run the script using the following command line:\n      compiles files that need to be recompiled. A project file is required\n      in this mode, and the gnat driver (as in *gnat pretty*) is not\n      supported.\n+     (Note: this switch is not yet supported in the libadalang-based\n+     version of gnatpp.)\n \n \n    .. index:: --pp-off  (gnatpp)\n@@ -3466,9 +3490,9 @@ Alternatively, you may run the script using the following command line:\n      of the default ``--!pp on``.\n \n \n-   .. index:: -files (gnatpp)\n+   .. index:: --files (gnatpp)\n \n-   :switch:`-files {filename}`\n+   :switch:`--files={filename}`\n      Take as arguments the files listed in text file ``file``.\n      Text file ``file`` may contain empty lines that are ignored.\n      Each nonempty line should contain the name of an existing file.\n@@ -3481,44 +3505,27 @@ Alternatively, you may run the script using the following command line:\n      Do not process the sources listed in a specified file. This option cannot\n      be used in incremental mode.\n \n-   .. index:: -j (gnatpp)\n+   .. index:: --jobs (gnatpp)\n \n-   :switch:`-j{n}`\n-     Without ``--incremental``, use *n* processes to carry out the\n-     tree creations (internal representations of the argument sources). On\n-     a multiprocessor machine this speeds up processing of big sets of\n-     argument sources. If *n* is 0, then the maximum number of parallel\n-     tree creations is the number of core processors on the platform. This\n-     option cannot be used together with the :switch:`-r`,\n-     :switch:`-rf` or\n-     :switch:`-rnb` options.\n+   :switch:`--jobs={n}`\n+     With ``--incremental``, use *n* ``gnatpp`` processes to perform\n+     pretty printing in parallel. If *n* is 0, then the maximum number\n+     processes is the number of core processors on the platform.\n \n-     With ``--incremental``, use *n* ``gnatpp`` processes to\n-     perform pretty-printing in parallel. *n* = 0 means the same as\n-     above. In this case, the :switch:`-r`,\n-     :switch:`-rf` and\n-     :switch:`-rnb` options are allowed.\n \n-   .. index:: -t (gnatpp)\n+   .. index:: --verbose (gnatpp)\n \n-\n-   :switch:`-t`\n-     Print out execution time.\n-\n-\n-   .. index:: -v (gnatpp)\n-\n-   :switch:`-v`\n+   :switch:`--verbose`\n      Verbose mode\n \n \n-   .. index:: -q (gnatpp)\n+   .. index:: --quiet (gnatpp)\n \n-   :switch:`-q`\n+   :switch:`--quiet`\n      Quiet mode\n \n    If a project file is specified and no argument source is explicitly\n-   specified (either directly or by means of ``-files`` option), and no\n+   specified (either directly or by means of ``--files`` option), and no\n    ``-U`` is specified, then the set of processed sources is\n    all the immediate units of the argument project.\n \n@@ -3612,42 +3619,40 @@ Alternatively, you may run the script using the following command line:\n      the same line.\n \n    A whole-line comment is indented according to the surrounding code,\n-   with some exceptions.\n-   Comments that start in column 1 are kept there.\n-   If possible, comments are not moved so far to the right that the maximum\n-   line length is exceeded.\n-   The ``-c0`` option\n-   turns off comment formatting.\n-   Special-form comments such as SPARK-style ``--#...`` are left alone.\n+   with some exceptions.  Comments that start in column 1 are kept\n+   there.  If possible, comments are not moved so far to the right that\n+   the maximum line length is exceeded.  The ``--comments-unchanged``\n+   option turns off comment formatting.  Special-form comments such as\n+   SPARK-style ``--#...`` are left alone.\n \n    For an end-of-line comment, ``gnatpp`` tries to leave the same\n    number of spaces between the end of the preceding Ada code and the\n    beginning of the comment as appear in the original source.\n \n-   The ``-c3`` switch\n-   (GNAT style comment beginning) has the following\n-   effect:\n+   The ``--comments-gnat-beginning`` switch (GNAT style comment\n+   beginning) has the following effect:\n \n      * For each whole-line comment that does not end with two hyphens,\n-       ``gnatpp`` inserts spaces if necessary after the starting two hyphens\n-       to ensure that there are at least two spaces between these hyphens and the\n-       first non-blank character of the comment.\n-\n-   The ``-c4`` switch specifies that\n-   whole-line comments that form a paragraph will be filled in typical\n-   word processor style (that is, moving words between lines to make the\n-   lines other than the last similar in length ).\n-\n-   The ``--comments-only`` switch specifies that only the comments\n-   are formatted; the rest of the program text is left alone. The\n-   comments are formatted according to the -c3 and -c4 switches; other\n-   formatting switches are ignored. For example,\n-   ``--comments-only -c4`` means to fill comment paragraphs, and do nothing else.\n-   Likewise,\n-   ``--comments-only -c3`` ensures comments start with at least two\n-   spaces after ``--``, and ``--comments-only -c3 -c4`` does\n-   both. If ``--comments-only`` is given without ``-c3`` or\n-   ``-c4``, then gnatpp doesn't format anything.\n+       ``gnatpp`` inserts spaces if necessary after the starting two\n+       hyphens to ensure that there are at least two spaces between\n+       these hyphens and the first non-blank character of the comment.\n+\n+   The ``--comments-fill`` switch specifies that whole-line comments\n+   that form a paragraph will be filled in typical word processor style\n+   (that is, moving words between lines to make the lines other than the\n+   last similar in length ).\n+\n+   The ``--comments-only`` switch specifies that only the comments are\n+   formatted; the rest of the program text is left alone. The comments\n+   are formatted according to the ``--comments-gnat-beginning`` and\n+   ``--comments-fill`` switches; other formatting switches are ignored. For\n+   example, ``--comments-only --comments-fill`` means to fill comment\n+   paragraphs, and do nothing else.  Likewise, ``--comments-only\n+   --comments-gnat-beginning`` ensures comments start with at least two\n+   spaces after ``--``, and ``--comments-only --comments-gnat-beginning\n+   --comments-fill`` does both. If ``--comments-only`` is given without\n+   ``--comments-gnat-beginning`` or ``--comments-fill``, then gnatpp\n+   doesn't format anything.\n \n \n    .. _Name_Casing:\n@@ -3658,49 +3663,42 @@ Alternatively, you may run the script using the following command line:\n    ``gnatpp`` always converts the usage occurrence of a (simple) name to\n    the same casing as the corresponding defining identifier.\n \n-   You control the casing for defining occurrences via the\n-   ``-n`` switch.\n-   With ``-nD`` ('as declared', which is the default),\n-   defining occurrences appear exactly as in the source file\n-   where they are declared.\n-   The other values for this switch --\n-   ``-nU``,\n-   ``-nL``,\n-   ``-nM`` --\n-   result in\n-   upper, lower, or mixed case, respectively.\n-   If ``gnatpp`` changes the casing of a defining\n-   occurrence, it analogously changes the casing of all the\n-   usage occurrences of this name.\n-\n-   If the defining occurrence of a name is not in the source compilation unit\n-   currently being processed by ``gnatpp``, the casing of each reference to\n-   this name is changed according to the value of the ``-n``\n-   switch (subject to the dictionary file mechanism described below).\n-   Thus ``gnatpp`` acts as though the ``-n`` switch\n-   had affected the\n-   casing for the defining occurrence of the name.\n+   You control the casing for defining occurrences via the ``--name...``\n+   switches.  With ``--name-case-as-declared``, which is the default,\n+   defining occurrences appear exactly as in the source file where they\n+   are declared.  The other values for this switch --\n+   ``--name-upper-case``, ``--name-lower-case``, ``--name-mixed-case``\n+   -- result in upper, lower, or mixed case, respectively.  If\n+   ``gnatpp`` changes the casing of a defining occurrence, it\n+   analogously changes the casing of all the usage occurrences of this\n+   name.\n+\n+   If the defining occurrence of a name is not in the source compilation\n+   unit currently being processed by ``gnatpp``, the casing of each\n+   reference to this name is changed according to the switch (subject to\n+   the dictionary file mechanism described below).  Thus ``gnatpp`` acts\n+   as though the switch had affected the casing for the defining\n+   occurrence of the name.\n \n    The options\n-   :switch:`-a{x}`,\n-   :switch:`-k{x}`,\n-   :switch:`-ne{x}`,\n-   :switch:`-nt{x}`,\n-   :switch:`-nn{x}`, and\n-   :switch:`-p{x}`\n+   :switch:`--attribute...`,\n+   :switch:`--keyword...`,\n+   :switch:`--enum...`,\n+   :switch:`--type...`,\n+   :switch:`--number...`, and\n+   :switch:`--pragma...`\n    allow finer-grained control over casing for\n    attributes, keywords, enumeration literals,\n    types, named numbers and pragmas, respectively.\n-   :switch:`-nt{x}` covers subtypes and\n-   task and protected bodies as well.\n+   :switch:`--type...` cover subtypes as well.\n \n    Some names may need to be spelled with casing conventions that are not\n    covered by the upper-, lower-, and mixed-case transformations.\n    You can arrange correct casing by placing such names in a\n    *dictionary file*,\n-   and then supplying a ``-D`` switch.\n+   and then supplying a ``--dictionary`` switch.\n    The casing of names from dictionary files overrides\n-   any ``-n`` switch.\n+   any ``--name...`` switch.\n \n    To handle the casing of Ada predefined names and the names from GNAT libraries,\n    ``gnatpp`` assumes a default dictionary file.\n@@ -3709,15 +3707,15 @@ Alternatively, you may run the script using the following command line:\n    The name of each entity in the GNAT libraries is spelled with the same casing\n    as is used in the declaration of that entity.\n \n-   The ``-D-`` switch suppresses the use of\n+   The ``--dictionary=-`` switch suppresses the use of\n    the default dictionary file. Instead, the casing for predefined and\n    GNAT-defined names will be established by the\n    ``-n`` switch or explicit dictionary files. For\n    example, by default the names ``Ada.Text_IO`` and\n    ``GNAT.OS_Lib`` will appear as just shown, even in the presence of\n-   a ``-nU`` switch.  To ensure that even\n+   a ``--name-upper-case`` switch.  To ensure that even\n    such names are rendered in uppercase, additionally supply the\n-   -D- switch (or else place these names\n+   --dictionary=- switch (or else place these names\n    in upper case in a dictionary file).\n \n    A dictionary file is a plain text file; each line in this file can be\n@@ -3740,7 +3738,7 @@ Alternatively, you may run the script using the following command line:\n    comment; any amount of white space is allowed before the string.\n \n    If a dictionary file is passed as\n-   the value of a :switch:`-D{file}` switch\n+   the value of a :switch:`--dictionary={file}` switch\n    then for every\n    simple name and every identifier, ``gnatpp`` checks if the dictionary\n    defines the casing for the name or for some of its parts (the term 'subword'\n@@ -3796,7 +3794,7 @@ Alternatively, you may run the script using the following command line:\n \n      ::\n \n-        $ gnatpp -nM -D dict1 -D dict2 test.adb\n+        $ gnatpp --name-mixed-case --dictionary=dict1 --dictionary=dict2 test.adb\n \n    then we will get the following name casing in the ``gnatpp`` output:\n \n@@ -3812,6 +3810,200 @@ Alternatively, you may run the script using the following command line:\n            Name2_NAME3_Name4 := Name4_NAME3_Name2 > NAME1;\n         end Test;\n \n+   Legacy Switches\n+   ^^^^^^^^^^^^^^^\n+\n+   Some switches have a short form, mostly for legacy reasons,\n+   as shown below.\n+\n+   .. index:: -n (gnatpp)\n+\n+   :switch:`-nD`\n+     :switch:`--name-case-as-declared`\n+\n+   :switch:`-nU`\n+     :switch:`--name-upper-case`\n+\n+   :switch:`-nL`\n+     :switch:`--name-lower-case`\n+\n+   :switch:`-nM`\n+     :switch:`--name-mixed-case`\n+\n+   .. index:: -a (gnatpp)\n+\n+   :switch:`-aL`\n+     :switch:`--attribute-lower-case`\n+\n+   :switch:`-aU`\n+     :switch:`--attribute-upper-case`\n+\n+   :switch:`-aM`\n+     :switch:`--attribute-mixed-case`\n+\n+   .. index:: -k (gnatpp)\n+\n+   :switch:`-kL`\n+     :switch:`--keyword-lower-case`\n+\n+   :switch:`-kU`\n+     :switch:`--keyword-upper-case`\n+\n+   .. index:: -ne (gnatpp)\n+\n+   :switch:`-neD`\n+     :switch:`--enum-case-as-declared`\n+\n+   :switch:`-neU`\n+     :switch:`--enum-upper-case`\n+\n+   :switch:`-neL`\n+     :switch:`--enum-lower-case`\n+\n+   :switch:`-neM`\n+     :switch:`--enum-mixed-case`\n+\n+   .. index:: -nt (gnatpp)\n+\n+   :switch:`-ntD`\n+     :switch:`--type-case-as-declared`\n+\n+   :switch:`-ntU`\n+     :switch:`--type-upper-case`\n+\n+   :switch:`-ntL`\n+     :switch:`--type-lower-case`\n+\n+   :switch:`-ntM`\n+     :switch:`--type-mixed-case`\n+\n+   :switch:`-nnU`\n+     :switch:`--number-upper-case`\n+\n+   :switch:`-nnL`\n+     :switch:`--number-lower-case`\n+\n+   :switch:`-nnM`\n+     :switch:`--number-mixed-case`\n+\n+   .. index:: -p (gnatpp)\n+\n+   :switch:`-pL`\n+     :switch:`--pragma-lower-case`\n+\n+   :switch:`-pU`\n+     :switch:`--pragma-upper-case`\n+\n+   :switch:`-pM`\n+     :switch:`--pragma-mixed-case`\n+\n+   .. index:: -D (gnatpp)\n+\n+   :switch:`-D{file}`\n+     :switch:`--dictionary={file}`\n+\n+   .. index:: -D- (gnatpp)\n+\n+   :switch:`-D-`\n+     :switch:`--dictionary=-`\n+\n+   .. index:: -c (gnatpp)\n+\n+   :switch:`-c0`\n+     :switch:`--comments-unchanged`\n+\n+   :switch:`-c1`\n+     :switch:`--comments-gnat-indentation`\n+\n+   :switch:`-c3`\n+     :switch:`--comments-gnat-beginning`\n+\n+   :switch:`-c4`\n+     :switch:`--comments-fill`\n+\n+   :switch:`-c5`\n+     :switch:`--comments-special`\n+\n+   .. index:: -M (gnatpp)\n+\n+   :switch:`-M{nnn}`\n+     :switch:`--max-line-length={nnn}`\n+\n+   .. index:: -i (gnatpp)\n+\n+   :switch:`-i{nnn}`\n+     :switch:`--indentation={nnn}`\n+\n+   .. index:: -cl (gnatpp)\n+\n+   :switch:`-cl{nnn}`\n+     :switch:`--indent-continuation={nnn}`\n+\n+   .. index:: -ff (gnatpp)\n+\n+   :switch:`-ff`\n+     :switch:`--ff-after-pragma-page`\n+\n+   .. index:: -pipe (gnatpp)\n+\n+   :switch:`-pipe`\n+     :switch:`--pipe`\n+\n+   .. index:: -o (gnatpp)\n+\n+   :switch:`-o {output-file}`\n+     :switch:`--output={output-file}`\n+\n+   .. index:: -of (gnatpp)\n+\n+   :switch:`-of {output-file}`\n+     :switch:`--output-force={output-file}`\n+\n+   .. index:: -r (gnatpp)\n+\n+   :switch:`-rnb`\n+     :switch:`--replace`\n+\n+   :switch:`-r`\n+     :switch:`--replace-backup`\n+\n+   .. index:: -rf (gnatpp)\n+\n+   :switch:`-rf`\n+     :switch:`--replace-force-backup`\n+\n+   .. index:: -rnb (gnatpp)\n+\n+   .. index:: --eol (gnatpp)\n+\n+   :switch:`--eol={xxx}`\n+     :switch:`--end-of-line={xxx}`\n+\n+   .. index:: -W (gnatpp)\n+\n+   :switch:`-W{e}`\n+     :switch:`--wide-character-encoding={e}`\n+\n+   .. index:: -files (gnatpp)\n+\n+   :switch:`-files {filename}`\n+     :switch:`--files={filename}`\n+\n+   .. index:: -j (gnatpp)\n+\n+   :switch:`-j{n}`\n+     :switch:`--jobs={n}`\n+\n+   .. index:: -v (gnatpp)\n+\n+   :switch:`-v`\n+     :switch:`--verbose`\n+\n+   .. index:: -q (gnatpp)\n+\n+   :switch:`-q`\n+     :switch:`--quiet`\n+\n \n .. only:: PRO or GPL\n "}]}