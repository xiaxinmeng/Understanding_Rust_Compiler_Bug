{"sha": "576c9028f00d275eb9beb66ab2116383759130bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc2YzkwMjhmMDBkMjc1ZWI5YmViNjZhYjIxMTYzODM3NTkxMzBiYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-01-18T19:54:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-18T19:54:44Z"}, "message": "200x-xx-xx Kazu Hirata <kazu@codesourcery.com> Richard Sandiford <richard@codesourcery.com>\n\ngcc/\n200x-xx-xx  Kazu Hirata  <kazu@codesourcery.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* doc/tm.texi (TARGET_FUNCTION_VALUE): Expand documentation of\n\tparallels.\n\t* calls.c (expand_call): If the return value is a PARALLEL,\n\textract its first member.\n\t* config/m68k/linux.h (FUNCTION_EXTRA_EPILOGUE): Remove.\n\t* config/m68k/m68k.c (m68k_output_function_epilogue): Don't\n\tuse FUNCTION_EXTRA_EPILOGUE.\n\t(m68k_function_value): Return a PARALLEL if the return value\n\tis of a pointer type.\n\t* config/m68k/netbsd-elf.h (current_function_returns_pointer)\n\t(FUNCTION_EXTRA_EPILOGUE): Remove.\n\t* config/m68k/m68k.md (D0_REG): New constant.\n\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\n\nFrom-SVN: r120929", "tree": {"sha": "f226a49f2943bd53650b7a718323a484610cf83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f226a49f2943bd53650b7a718323a484610cf83f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/576c9028f00d275eb9beb66ab2116383759130bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576c9028f00d275eb9beb66ab2116383759130bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576c9028f00d275eb9beb66ab2116383759130bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576c9028f00d275eb9beb66ab2116383759130bb/comments", "author": null, "committer": null, "parents": [{"sha": "dfd050746b226f24b1e4ae35ad06d71ecd77bd04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd050746b226f24b1e4ae35ad06d71ecd77bd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd050746b226f24b1e4ae35ad06d71ecd77bd04"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "f433dc58047128d861921b77136a8bde410c5de6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -1,3 +1,19 @@\n+2007-01-18  Kazu Hirata  <kazu@codesourcery.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/tm.texi (TARGET_FUNCTION_VALUE): Expand documentation of\n+\tparallels.\n+\t* calls.c (expand_call): If the return value is a PARALLEL,\n+\textract its first member.\n+\t* config/m68k/linux.h (FUNCTION_EXTRA_EPILOGUE): Remove.\n+\t* config/m68k/m68k.c (m68k_output_function_epilogue): Don't\n+\tuse FUNCTION_EXTRA_EPILOGUE.\n+\t(m68k_function_value): Return a PARALLEL if the return value\n+\tis of a pointer type.\n+\t* config/m68k/netbsd-elf.h (current_function_returns_pointer)\n+\t(FUNCTION_EXTRA_EPILOGUE): Remove.\n+\t* config/m68k/m68k.md (D0_REG): New constant.\n+\n 2007-01-18  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/m68k/m68k.c (m68k_output_function_epilogue): Don't"}, {"sha": "0ca03f8e587bb19d74db93f0b2daa123c1b1220a", "filename": "gcc/calls.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -2566,6 +2566,19 @@ expand_call (tree exp, rtx target, int ignore)\n \t  else\n \t    valreg = hard_function_value (TREE_TYPE (exp), fndecl, fntype,\n \t\t\t\t\t  (pass == 0));\n+\n+\t  /* If VALREG is a PARALLEL whose first member has a zero\n+\t     offset, use that.  This is for targets such as m68k that\n+\t     return the same value in multiple places.  */\n+\t  if (GET_CODE (valreg) == PARALLEL)\n+\t    {\n+\t      rtx elem = XVECEXP (valreg, 0, 0);\n+\t      rtx where = XEXP (elem, 0);\n+\t      rtx offset = XEXP (elem, 1);\n+\t      if (offset == const0_rtx\n+\t\t  && GET_MODE (where) == GET_MODE (valreg))\n+\t\tvalreg = where;\n+\t    }\n \t}\n \n       /* Precompute all register parameters.  It isn't safe to compute anything"}, {"sha": "2c72d4999f23baa15f7afbf3364411a1ba594ad3", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -179,20 +179,6 @@ Boston, MA 02110-1301, USA.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n   m68k_function_value (VALTYPE, FUNC)\n \n-/* For compatibility with the large body of existing code which does\n-   not always properly declare external functions returning pointer\n-   types, the m68k/SVR4 convention is to copy the value returned for\n-   pointer functions from a0 to d0 in the function epilogue, so that\n-   callers that have neglected to properly declare the callee can\n-   still find the correct return value.  */\n-\n-#define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (current_function_returns_pointer\t\t\t\t\t\\\n-      && ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))\t\\\n-    asm_fprintf (FILE, \"\\tmove.l %Ra0,%Rd0\\n\");\t\t\t\t\\\n-} while (0);\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.\n    For m68k/SVR4 look for integer values in d0, pointer values in d0"}, {"sha": "81dded19b9809e32f2a126a1bc542eafb2489fff", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -1057,10 +1057,6 @@ m68k_output_function_epilogue (FILE *stream,\n   if (insn && GET_CODE (insn) == BARRIER)\n     return;\n \n-#ifdef FUNCTION_EXTRA_EPILOGUE\n-  FUNCTION_EXTRA_EPILOGUE (stream, size);\n-#endif\n-\n   fsize = current_frame.size;\n \n   /* FIXME: leaf_function_p below is too strong.\n@@ -3894,9 +3890,26 @@ m68k_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n     break;\n   }\n \n-  /* If the function returns a pointer, push that into %a0 */\n-  if (POINTER_TYPE_P (valtype))\n-    return gen_rtx_REG (mode, 8);\n+  /* If the function returns a pointer, push that into %a0.  */\n+  if (func && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (func))))\n+    /* For compatibility with the large body of existing code which\n+       does not always properly declare external functions returning\n+       pointer types, the m68k/SVR4 convention is to copy the value\n+       returned for pointer functions from a0 to d0 in the function\n+       epilogue, so that callers that have neglected to properly\n+       declare the callee can still find the correct return value in\n+       d0.  */\n+    return gen_rtx_PARALLEL\n+      (mode,\n+       gen_rtvec (2,\n+\t\t  gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t     gen_rtx_REG (mode, A0_REG),\n+\t\t\t\t     const0_rtx),\n+\t\t  gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t     gen_rtx_REG (mode, D0_REG),\n+\t\t\t\t     const0_rtx)));\n+  else if (POINTER_TYPE_P (valtype))\n+    return gen_rtx_REG (mode, A0_REG);\n   else\n-    return gen_rtx_REG (mode, 0);\n+    return gen_rtx_REG (mode, D0_REG);\n }"}, {"sha": "8481fcd94d09e5d4f123bae5daa05b4c98663aa3", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -124,7 +124,8 @@\n \n ;; Registers by name.\n (define_constants\n-  [(A0_REG\t\t8)\n+  [(D0_REG\t\t0)\n+   (A0_REG\t\t8)\n    (SP_REG\t\t15)\n   ])\n "}, {"sha": "c67f6f8fc4a2dad83ed6f8b104e90fac2cc017c4", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -273,24 +273,6 @@ while (0)\n   m68k_function_value (VALTYPE, FUNC)\n \n \n-/* For compatibility with the large body of existing code which does\n-   not always properly declare external functions returning pointer\n-   types, the m68k/SVR4 convention is to copy the value returned for\n-   pointer functions from a0 to d0 in the function epilogue, so that\n-   callers that have neglected to properly declare the callee can\n-   still find the correct return value.  */\n-\n-extern int current_function_returns_pointer;\n-#define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE) \t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (current_function_returns_pointer\t\t\t\t\\\n-\t&& ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))\t\\\n-      asm_fprintf (FILE, \"\\tmove.l %Ra0,%Rd0\\n\");\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.\n    For m68k/SVR4 look for integer values in d0, pointer values in d0"}, {"sha": "ad707798a8f9ec46857f1017ae6256ddbba9a78a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576c9028f00d275eb9beb66ab2116383759130bb/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=576c9028f00d275eb9beb66ab2116383759130bb", "patch": "@@ -4107,7 +4107,12 @@ place regardless of mode.)  The value of the expression is usually a\n @code{reg} RTX for the hard register where the return value is stored.\n The value can also be a @code{parallel} RTX, if the return value is in\n multiple places.  See @code{FUNCTION_ARG} for an explanation of the\n-@code{parallel} form.\n+@code{parallel} form.   Note that the callee will populate every\n+location specified in the @code{parallel}, but if the first element of\n+the @code{parallel} contains the whole return value, callers will use\n+that element as the canonical location and ignore the others.  The m68k\n+port uses this type of @code{parallel} to return pointers in both\n+@samp{%a0} (the canonical location) and @samp{%d0}.\n \n If @code{TARGET_PROMOTE_FUNCTION_RETURN} returns true, you must apply\n the same promotion rules specified in @code{PROMOTE_MODE} if"}]}