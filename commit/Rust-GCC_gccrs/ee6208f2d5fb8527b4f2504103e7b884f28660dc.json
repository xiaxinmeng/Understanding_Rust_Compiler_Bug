{"sha": "ee6208f2d5fb8527b4f2504103e7b884f28660dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2MjA4ZjJkNWZiODUyN2I0ZjI1MDQxMDNlN2I4ODRmMjg2NjBkYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:25:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:25:03Z"}, "message": "[multiple changes]\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatcmd.adb: Minor error msg changes (no upper case letter\n\tat start).\n\t* sem_ch12.adb, sem_ch5.adb, sem_res.adb, sem_util.adb: Minor\n\treformatting.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Debug flag -gnatd.G inhibits static elab tracing\n\tvia generic formals.\n\t* sem_elab.adb (Is_Call_Of_Generic_Formal): Return False if\n\t-gnatd.G is set.\n\n2014-05-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_pakd.adb (Revert_Storage_Order): Renamed from Byte_Swap to\n\tmore accurately describe that this subprogram needs to come into\n\tplay also in cases where no byte swapping is involved, because\n\tit also takes care of some required shifts (left-justification\n\tof values).\n\n2014-05-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Check_Component_Storage_Order): Indicate whether\n\ta Scalar_Storage_Order attribute definition is present for the\n\tcomponent's type.\n\t(Freeze_Record_Type): Suppress junk warnings\n\tabout purportedly junk Bit_Order / Scalar_Storage_Order attribute\n\tdefinitions.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Put back call\n\tto Kill_Elaboration_Checks.\n\n2014-05-21  Gary Dismukes  <dismukes@adacore.com>\n\n\t* layout.adb (Assoc_Add): Suppress the optimization of the (E\n\t- C1) + C2 case, when the expression type is unsigned and C1 <\n\tC2, to avoid creating a negative literal when folding.\n\nFrom-SVN: r210709", "tree": {"sha": "fc9372ea1961f0fc2146f7fc3b05bddb860bea35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc9372ea1961f0fc2146f7fc3b05bddb860bea35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6208f2d5fb8527b4f2504103e7b884f28660dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6208f2d5fb8527b4f2504103e7b884f28660dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6208f2d5fb8527b4f2504103e7b884f28660dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6208f2d5fb8527b4f2504103e7b884f28660dc/comments", "author": null, "committer": null, "parents": [{"sha": "ea26c8e414ff21cc2dccf2a65476931c636c8147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea26c8e414ff21cc2dccf2a65476931c636c8147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea26c8e414ff21cc2dccf2a65476931c636c8147"}], "stats": {"total": 316, "additions": 202, "deletions": 114}, "files": [{"sha": "c74abd053035df52c2d7e77971bf0a524bdbae97", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -1,3 +1,45 @@\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatcmd.adb: Minor error msg changes (no upper case letter\n+\tat start).\n+\t* sem_ch12.adb, sem_ch5.adb, sem_res.adb, sem_util.adb: Minor\n+\treformatting.\n+\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Debug flag -gnatd.G inhibits static elab tracing\n+\tvia generic formals.\n+\t* sem_elab.adb (Is_Call_Of_Generic_Formal): Return False if\n+\t-gnatd.G is set.\n+\n+2014-05-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_pakd.adb (Revert_Storage_Order): Renamed from Byte_Swap to\n+\tmore accurately describe that this subprogram needs to come into\n+\tplay also in cases where no byte swapping is involved, because\n+\tit also takes care of some required shifts (left-justification\n+\tof values).\n+\n+2014-05-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Check_Component_Storage_Order): Indicate whether\n+\ta Scalar_Storage_Order attribute definition is present for the\n+\tcomponent's type.\n+\t(Freeze_Record_Type): Suppress junk warnings\n+\tabout purportedly junk Bit_Order / Scalar_Storage_Order attribute\n+\tdefinitions.\n+\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Put back call\n+\tto Kill_Elaboration_Checks.\n+\n+2014-05-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb (Assoc_Add): Suppress the optimization of the (E\n+\t- C1) + C2 case, when the expression type is unsigned and C1 <\n+\tC2, to avoid creating a negative literal when folding.\n+\n 2014-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Freeze_Record_Type): Update the use of"}, {"sha": "8399a2c99000e186e595f1c1addc819f205b9e0c", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -124,7 +124,7 @@ package body Debug is\n    --  d.D\n    --  d.E  Turn selected errors into warnings\n    --  d.F  Debug mode for GNATprove\n-   --  d.G\n+   --  d.G  Ignore calls through generic formal parameters for elaboration\n    --  d.H\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode\n    --  d.J  Disable parallel SCIL generation mode\n@@ -623,6 +623,11 @@ package body Debug is\n    --  d.F  Sets GNATprove_Mode to True. This allows debugging the frontend in\n    --       the special mode used by GNATprove.\n \n+   --  d.G  Previously the compiler ignored calls via generic formal parameters\n+   --       when doing the analysis for the static elaboration model. This is\n+   --       now fixed, but we provide this debug flag to revert to the previous\n+   --       situation of ignoring such calls to aid in transition.\n+\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode.\n    --       The default of ignoring representation clauses for enumeration\n    --       types in CodePeer is good for the majority of Ada code, but in some"}, {"sha": "9569979960acfc0adff7e6fcf9fd26f032e82997", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -543,25 +543,19 @@ package body Exp_Pakd is\n    --  array type on the fly). Such actions are inserted into the tree\n    --  directly using Insert_Action.\n \n-   function Byte_Swap\n-     (N             : Node_Id;\n-      Left_Justify  : Boolean := False;\n-      Right_Justify : Boolean := False) return Node_Id;\n-   --  Wrap N in a call to a byte swapping function, with appropriate type\n-   --  conversions. If Left_Justify is set True, the value is left justified\n-   --  before swapping. If Right_Justify is set True, the value is right\n-   --  justified after swapping. The Etype of the returned node is an\n-   --  integer type of an appropriate power-of-2 size.\n-\n-   ---------------\n-   -- Byte_Swap --\n-   ---------------\n-\n-   function Byte_Swap\n-     (N             : Node_Id;\n-      Left_Justify  : Boolean := False;\n-      Right_Justify : Boolean := False) return Node_Id\n-   is\n+   function Revert_Storage_Order (N : Node_Id) return Node_Id;\n+   --  Perform appropriate justification and byte ordering adjustments for N,\n+   --  an element of a packed array type, when both the component type and\n+   --  the enclosing packed array type have reverse scalar storage order.\n+   --  On little-endian targets, the value is left justified before byte\n+   --  swapping. The Etype of the returned expression is an integer type of\n+   --  an appropriate power-of-2 size.\n+\n+   --------------------------\n+   -- Revert_Storage_Order --\n+   --------------------------\n+\n+   function Revert_Storage_Order (N : Node_Id) return Node_Id is\n       Loc     : constant Source_Ptr := Sloc (N);\n       T       : constant Entity_Id := Etype (N);\n       T_Size  : constant Uint := RM_Size (T);\n@@ -571,16 +565,21 @@ package body Exp_Pakd is\n       Swap_T  : Entity_Id;\n       --  Swapping function\n \n-      Arg     : Node_Id;\n-      Swapped : Node_Id;\n-      Shift   : Uint;\n+      Arg      : Node_Id;\n+      Adjusted : Node_Id;\n+      Shift    : Uint;\n \n    begin\n       if T_Size <= 8 then\n+\n+         --  Array component size is less than a byte: no swapping needed\n+\n          Swap_F := Empty;\n          Swap_T := RTE (RE_Unsigned_8);\n \n       else\n+         --  Select byte swapping function depending on array component size\n+\n          if T_Size <= 16 then\n             Swap_RE := RE_Bswap_16;\n \n@@ -600,32 +599,25 @@ package body Exp_Pakd is\n \n       Arg := RJ_Unchecked_Convert_To (Swap_T, N);\n \n-      if Left_Justify and then Shift > Uint_0 then\n+      if not Bytes_Big_Endian and then Shift > Uint_0 then\n          Arg :=\n            Make_Op_Shift_Left (Loc,\n              Left_Opnd  => Arg,\n              Right_Opnd => Make_Integer_Literal (Loc, Shift));\n       end if;\n \n       if Present (Swap_F) then\n-         Swapped :=\n+         Adjusted :=\n            Make_Function_Call (Loc,\n              Name                   => New_Occurrence_Of (Swap_F, Loc),\n              Parameter_Associations => New_List (Arg));\n       else\n-         Swapped := Arg;\n-      end if;\n-\n-      if Right_Justify and then Shift > Uint_0 then\n-         Swapped :=\n-           Make_Op_Shift_Right (Loc,\n-             Left_Opnd  => Swapped,\n-             Right_Opnd => Make_Integer_Literal (Loc, Shift));\n+         Adjusted := Arg;\n       end if;\n \n-      Set_Etype (Swapped, Swap_T);\n-      return Swapped;\n-   end Byte_Swap;\n+      Set_Etype (Adjusted, Swap_T);\n+      return Adjusted;\n+   end Revert_Storage_Order;\n \n    ------------------------------\n    -- Compute_Linear_Subscript --\n@@ -2095,15 +2087,10 @@ package body Exp_Pakd is\n          --  it back to its expected endianness after extraction.\n \n          if Reverse_Storage_Order (Atyp)\n-           and then Esize (Atyp) > 8\n            and then (Is_Record_Type (Ctyp) or else Is_Array_Type (Ctyp))\n            and then Reverse_Storage_Order (Ctyp)\n          then\n-            Arg :=\n-              Byte_Swap\n-                (Arg,\n-                 Left_Justify  => not Bytes_Big_Endian,\n-                 Right_Justify => False);\n+            Arg := Revert_Storage_Order (Arg);\n          end if;\n \n          --  We needed to analyze this before we do the unchecked convert"}, {"sha": "e091cea30763583a9f0d972328e2304357ba6e36", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 79, "deletions": 38, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -90,16 +90,19 @@ package body Freeze is\n    --  performed only after the object has been frozen.\n \n    procedure Check_Component_Storage_Order\n-     (Encl_Type : Entity_Id;\n-      Comp      : Entity_Id;\n-      ADC       : Node_Id);\n+     (Encl_Type        : Entity_Id;\n+      Comp             : Entity_Id;\n+      ADC              : Node_Id;\n+      Comp_ADC_Present : out Boolean);\n    --  For an Encl_Type that has a Scalar_Storage_Order attribute definition\n    --  clause, verify that the component type has an explicit and compatible\n    --  attribute/aspect. For arrays, Comp is Empty; for records, it is the\n    --  entity of the component under consideration. For an Encl_Type that\n    --  does not have a Scalar_Storage_Order attribute definition clause,\n    --  verify that the component also does not have such a clause.\n-   --  ADC is the attribute definition clause if present (or Empty).\n+   --  ADC is the attribute definition clause if present (or Empty). On return,\n+   --  Comp_ADC_Present is set True if the component has a Scalar_Storage_Order\n+   --  attribute definition clause.\n \n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased\n@@ -1070,9 +1073,10 @@ package body Freeze is\n    -----------------------------------\n \n    procedure Check_Component_Storage_Order\n-     (Encl_Type : Entity_Id;\n-      Comp      : Entity_Id;\n-      ADC       : Node_Id)\n+     (Encl_Type        : Entity_Id;\n+      Comp             : Entity_Id;\n+      ADC              : Node_Id;\n+      Comp_ADC_Present : out Boolean)\n    is\n       Comp_Type : Entity_Id;\n       Comp_ADC  : Node_Id;\n@@ -1124,12 +1128,13 @@ package body Freeze is\n       Comp_ADC := Get_Attribute_Definition_Clause\n                     (First_Subtype (Comp_Type),\n                      Attribute_Scalar_Storage_Order);\n+      Comp_ADC_Present := Present (Comp_ADC);\n \n       --  Case of enclosing type not having explicit SSO: component cannot\n       --  have it either.\n \n       if No (ADC) then\n-         if Present (Comp_ADC) then\n+         if Comp_ADC_Present then\n             Error_Msg_N\n               (\"composite type must have explicit scalar storage order\",\n                Err_Node);\n@@ -2350,14 +2355,19 @@ package body Freeze is\n \n             --  Check for scalar storage order\n \n-            Check_Component_Storage_Order\n-              (Encl_Type => Arr,\n-               Comp      => Empty,\n-               ADC       => Get_Attribute_Definition_Clause\n-                              (First_Subtype (Arr),\n-                               Attribute_Scalar_Storage_Order));\n+            declare\n+               Dummy : Boolean;\n+            begin\n+               Check_Component_Storage_Order\n+                 (Encl_Type        => Arr,\n+                  Comp             => Empty,\n+                  ADC              => Get_Attribute_Definition_Clause\n+                                        (First_Subtype (Arr),\n+                                         Attribute_Scalar_Storage_Order),\n+                  Comp_ADC_Present => Dummy);\n+            end;\n \n-            --  Processing that is done only for subtypes\n+         --  Processing that is done only for subtypes\n \n          else\n             --  Acquire alignment from base type\n@@ -2549,8 +2559,8 @@ package body Freeze is\n       procedure Freeze_Record_Type (Rec : Entity_Id) is\n          Comp : Entity_Id;\n          IR   : Node_Id;\n-         ADC  : Node_Id;\n          Prev : Entity_Id;\n+         ADC  : Node_Id;\n \n          Junk : Boolean;\n          pragma Warnings (Off, Junk);\n@@ -2560,6 +2570,9 @@ package body Freeze is\n          --  stack. Needed for the analysis of delayed aspects specified to the\n          --  components of Rec.\n \n+         SSO_ADC : Node_Id;\n+         --  Scalar_Storage_Order attribute definition clause for the record\n+\n          Unplaced_Component : Boolean := False;\n          --  Set True if we find at least one component with no component\n          --  clause (used to warn about useless Pack pragmas).\n@@ -2574,6 +2587,10 @@ package body Freeze is\n          --  is used to prevent Implicit_Packing of the record, since packing\n          --  cannot modify the size of alignment of an aliased component.\n \n+         SSO_ADC_Component : Boolean := False;\n+         --  Set True if we find at least one component whose type has a\n+         --  Scalar_Storage_Order attribute definition clause.\n+\n          All_Scalar_Components : Boolean := True;\n          --  Set False if we encounter a component of a non-scalar type\n \n@@ -3014,56 +3031,80 @@ package body Freeze is\n             Next_Entity (Comp);\n          end loop;\n \n-         ADC := Get_Attribute_Definition_Clause\n-                  (Rec, Attribute_Scalar_Storage_Order);\n+         SSO_ADC := Get_Attribute_Definition_Clause\n+                      (Rec, Attribute_Scalar_Storage_Order);\n+\n+         --  Check consistent attribute setting on component types\n+\n+         declare\n+            Comp_ADC_Present : Boolean;\n+         begin\n+            Comp := First_Component (Rec);\n+            while Present (Comp) loop\n+               Check_Component_Storage_Order\n+                 (Encl_Type        => Rec,\n+                  Comp             => Comp,\n+                  ADC              => SSO_ADC,\n+                  Comp_ADC_Present => Comp_ADC_Present);\n+               SSO_ADC_Component := SSO_ADC_Component or Comp_ADC_Present;\n+               Next_Component (Comp);\n+            end loop;\n+         end;\n \n-         if Present (ADC) then\n+         if Present (SSO_ADC) then\n \n             --  Check compatibility of Scalar_Storage_Order with Bit_Order, if\n             --  the former is specified.\n \n             if Reverse_Bit_Order (Rec) /= Reverse_Storage_Order (Rec) then\n \n-               --  Note: report error on Rec, not on ADC, as ADC may apply to\n-               --  an ancestor type.\n+               --  Note: report error on Rec, not on SSO_ADC, as ADC may apply\n+               --  to some ancestor type.\n \n-               Error_Msg_Sloc := Sloc (ADC);\n+               Error_Msg_Sloc := Sloc (SSO_ADC);\n                Error_Msg_N\n                  (\"scalar storage order for& specified# inconsistent with \"\n                   & \"bit order\", Rec);\n             end if;\n \n-            --  Warn if there is a Scalar_Storage_Order but no component clause\n-            --  (or pragma Pack).\n+            --  Warn if there is an Scalar_Storage_Order attribute definition\n+            --  clause but no component clause, no component that itself has\n+            --  such an attribute definition, and no pragma Pack.\n \n-            if not (Placed_Component or else Is_Packed (Rec)) then\n+            if not (Placed_Component\n+                      or else\n+                    SSO_ADC_Component\n+                      or else\n+                    Is_Packed (Rec))\n+            then\n                Error_Msg_N\n                  (\"??scalar storage order specified but no component clause\",\n-                  ADC);\n+                  SSO_ADC);\n             end if;\n          end if;\n \n-         --  Check consistent attribute setting on component types\n-\n-         Comp := First_Component (Rec);\n-         while Present (Comp) loop\n-            Check_Component_Storage_Order\n-              (Encl_Type => Rec, Comp => Comp, ADC => ADC);\n-            Next_Component (Comp);\n-         end loop;\n-\n-         --  Deal with Bit_Order aspect specifying a non-default bit order\n+         --  Deal with Bit_Order aspect\n \n          ADC := Get_Attribute_Definition_Clause (Rec, Attribute_Bit_Order);\n \n          if Present (ADC) and then Base_Type (Rec) = Rec then\n-            if not (Placed_Component or else Is_Packed (Rec)) then\n+            if not (Placed_Component\n+                      or else\n+                    Present (SSO_ADC)\n+                      or else\n+                    Is_Packed (Rec))\n+            then\n+               --  Warn if clause has no effect when no component clause is\n+               --  present, but suppress warning if the Bit_Order is required\n+               --  due to the presence of a Scalar_Storage_Order attribute.\n+\n                Error_Msg_N\n                  (\"??bit order specification has no effect\", ADC);\n                Error_Msg_N\n                  (\"\\??since no component clauses were specified\", ADC);\n \n-            --  Here is where we do the processing for reversed bit order\n+            --  Here is where we do the processing to adjust component clauses\n+            --  for reversed bit order.\n \n             elsif Reverse_Bit_Order (Rec)\n               and then not Reverse_Storage_Order (Rec)"}, {"sha": "50bc3ad3568192389553c1a8b0774aa55bc4b621", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -1527,7 +1527,7 @@ begin\n          if Command_List (The_Command).VMS_Only then\n             Non_VMS_Usage;\n             Fail\n-              (\"Command \"\"\"\n+              (\"command \"\"\"\n                & Command_List (The_Command).Cname.all\n                & \"\"\" can only be used on VMS\");\n          end if;\n@@ -1542,13 +1542,13 @@ begin\n \n             begin\n                Alternate := Alternate_Command'Value\n-                 (Argument (Command_Arg));\n+                              (Argument (Command_Arg));\n                The_Command := Corresponding_To (Alternate);\n \n             exception\n                when Constraint_Error =>\n                   Non_VMS_Usage;\n-                  Fail (\"Unknown command: \" & Argument (Command_Arg));\n+                  Fail (\"unknown command: \" & Argument (Command_Arg));\n             end;\n       end;\n \n@@ -1578,12 +1578,9 @@ begin\n \n                   exception\n                      when others =>\n-                        Put\n-                          (Standard_Error, \"Cannot open argument file \"\"\");\n-                        Put\n-                          (Standard_Error,\n-                           The_Arg (The_Arg'First + 1 .. The_Arg'Last));\n-\n+                        Put (Standard_Error, \"Cannot open argument file \"\"\");\n+                        Put (Standard_Error,\n+                             The_Arg (The_Arg'First + 1 .. The_Arg'Last));\n                         Put_Line (Standard_Error, \"\"\"\");\n                         raise Error_Exit;\n                   end;\n@@ -1816,7 +1813,7 @@ begin\n                         end case;\n                      else\n                         Fail (\"invalid verbosity level: \"\n-                                & Argv (Argv'First + 3 .. Argv'Last));\n+                              & Argv (Argv'First + 3 .. Argv'Last));\n                      end if;\n \n                      Remove_Switch (Arg_Num);\n@@ -2104,13 +2101,13 @@ begin\n             end if;\n          end;\n \n-         if        The_Command = Bind\n-           or else The_Command = Link\n-           or else The_Command = Elim\n+         if The_Command = Bind or else\n+            The_Command = Link or else\n+            The_Command = Elim\n          then\n             if Project.Object_Directory.Name = No_Path then\n-               Fail (\"project \" & Get_Name_String (Project.Display_Name) &\n-                     \" has no object directory\");\n+               Fail (\"project \" & Get_Name_String (Project.Display_Name)\n+                     & \" has no object directory\");\n             end if;\n \n             Change_Dir (Get_Name_String (Project.Object_Directory.Name));"}, {"sha": "fe8ea04faa56be1b2dc9a623e698dc4a2eeba66c", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -353,7 +353,7 @@ package body Layout is\n \n       elsif Nkind (L) = N_Op_Subtract then\n \n-         --  (C1 - E) + C2 = (C1 + C2) + E\n+         --  (C1 - E) + C2 = (C1 + C2) - E\n \n          if Compile_Time_Known_Value (Sinfo.Left_Opnd (L)) then\n             Rewrite_Integer\n@@ -363,7 +363,14 @@ package body Layout is\n \n          --  (E - C1) + C2 = E - (C1 - C2)\n \n-         elsif Compile_Time_Known_Value (Sinfo.Right_Opnd (L)) then\n+         --  If the type is unsigned, then only do the optimization if\n+         --  C1 >= C2, to avoid creating a negative literal that can't be\n+         --  used with the unsigned type.\n+\n+         elsif Compile_Time_Known_Value (Sinfo.Right_Opnd (L))\n+           and then (not Is_Unsigned_Type (Etype (Sinfo.Right_Opnd (L)))\n+                       or else Expr_Value (Sinfo.Right_Opnd (L)) >= R)\n+         then\n             Rewrite_Integer\n               (Sinfo.Right_Opnd (L),\n                Expr_Value (Sinfo.Right_Opnd (L)) - R);"}, {"sha": "2d7487667bc4f2a72dac72e99d95b42dfef46c05", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -10070,7 +10070,6 @@ package body Sem_Ch12 is\n \n          Set_Corresponding_Spec (Act_Body, Act_Decl_Id);\n          Check_Generic_Actuals (Act_Decl_Id, False);\n-\n          Check_Initialized_Types;\n \n          --  Install primitives hidden at the point of the instantiation but"}, {"sha": "db7e98516ca02b90d2cca2c43da772b78cda71ec", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -1875,7 +1875,6 @@ package body Sem_Ch5 is\n                   if No (Elt) then\n                      Error_Msg_N\n                        (\"missing Element primitive for iteration\", N);\n-\n                   else\n                      Set_Etype (Def_Id, Etype (Elt));\n                   end if;"}, {"sha": "43cd4fde82f1f1e1dd00b29b01c7ea58c0d5a2f2", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -2505,26 +2505,25 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n-      --  At this point, we used to have the following, but we removed it\n-      --  because it was certainly wrong for generic formal parameters in\n-      --  at least some cases, causing elaboration checks to be skipped.\n-      --  Possibly it is helpful in some other cases, but it caused no\n-      --  regressions to remove it completely.\n-\n       --  There is no need for elaboration checks on the new entity, which may\n       --  be called before the next freezing point where the body will appear.\n       --  Elaboration checks refer to the real entity, not the one created by\n       --  the renaming declaration.\n \n-      --  Set_Kill_Elaboration_Checks (New_S, True);\n+      Set_Kill_Elaboration_Checks (New_S, True);\n+\n+      --  If we had a previous error, indicate a completely is present to stop\n+      --  junk cascaded messages, but don't take any further action.\n \n       if Etype (Nam) = Any_Type then\n          Set_Has_Completion (New_S);\n          return;\n \n+      --  Case where name has the form of a selected component\n+\n       elsif Nkind (Nam) = N_Selected_Component then\n \n-         --  A prefix of the form  A.B can designate an entry of task A, a\n+         --  A name which has the form A.B can designate an entry of task A, a\n          --  protected operation of protected object A, or finally a primitive\n          --  operation of object A. In the later case, A is an object of some\n          --  tagged type, or an access type that denotes one such. To further\n@@ -2573,6 +2572,8 @@ package body Sem_Ch8 is\n             end if;\n          end;\n \n+      --  Case where name is an explicit dereference X.all\n+\n       elsif Nkind (Nam) = N_Explicit_Dereference then\n \n          --  Renamed entity is designated by access_to_subprogram expression.\n@@ -2581,14 +2582,21 @@ package body Sem_Ch8 is\n          Analyze_Renamed_Dereference (N, New_S, Present (Rename_Spec));\n          return;\n \n+      --  Indexed component\n+\n       elsif Nkind (Nam) = N_Indexed_Component then\n          Analyze_Renamed_Family_Member (N, New_S, Present (Rename_Spec));\n          return;\n \n+      --  Character literal\n+\n       elsif Nkind (Nam) = N_Character_Literal then\n          Analyze_Renamed_Character (N, New_S, Present (Rename_Spec));\n          return;\n \n+      --  Only remaining case is where we have a non-entity name, or a\n+      --  renaming of some other non-overloadable entity.\n+\n       elsif not Is_Entity_Name (Nam)\n         or else not Is_Overloadable (Entity (Nam))\n       then"}, {"sha": "7f494d85183e3a32a2897fc621d92f03b3dc0df4", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -552,6 +552,10 @@ package body Sem_Elab is\n       begin\n          return Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n \n+           --  Always return False if debug flag -gnatd.G is set\n+\n+           and then not Debug_Flag_Dot_GG\n+\n            --  For now, we detect this by looking for the strange identifier\n            --  node, whose Chars reflect the name of the generic formal, but\n            --  the Chars of the Entity references the generic actual.\n@@ -564,10 +568,12 @@ package body Sem_Elab is\n \n    begin\n       --  If the call is known to be within a local Suppress Elaboration\n-      --  pragma, nothing to check. This can happen in task bodies.\n+      --  pragma, nothing to check. This can happen in task bodies. But\n+      --  we ignore this for a call to a generic formal.\n \n       if Nkind (N) in N_Subprogram_Call\n         and then No_Elaboration_Check (N)\n+        and then not Is_Call_Of_Generic_Formal\n       then\n          return;\n       end if;"}, {"sha": "c1f9f8c4deb77db92b9f9e89e4010599ce97519a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -6583,8 +6583,7 @@ package body Sem_Res is\n         and then Is_SPARK_Volatile (E)\n         and then Comes_From_Source (E)\n         and then\n-          (Async_Writers_Enabled (E)\n-             or else Effective_Reads_Enabled (E))\n+          (Async_Writers_Enabled (E) or else Effective_Reads_Enabled (E))\n       then\n          --  The volatile object can appear on either side of an assignment\n "}, {"sha": "84570fb9cf449ffcd9e01f2725a937c8acb630f6", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6208f2d5fb8527b4f2504103e7b884f28660dc/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ee6208f2d5fb8527b4f2504103e7b884f28660dc", "patch": "@@ -7500,9 +7500,7 @@ package body Sem_Util is\n \n          elsif Property = Name_Effective_Writes\n            and then\n-             (Present (EW)\n-                or else\n-             (No (AR) and then No (AW) and then No (ER)))\n+             (Present (EW) or else (No (AR) and then No (AW) and then No (ER)))\n          then\n             return True;\n "}]}