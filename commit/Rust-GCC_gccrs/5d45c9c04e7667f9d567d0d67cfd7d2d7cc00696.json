{"sha": "5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0NWM5YzA0ZTc2NjdmOWQ1NjdkMGQ2N2NmZDdkMmQ3Y2MwMDY5Ng==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2014-11-26T11:05:20Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2014-11-26T11:05:20Z"}, "message": "PR debug/38757 continued. Handle C11, C++11 and C++14.\n\nAdd experimental (minimal) DWARFv5 support.\n\nThis change depends on the new DWARFv5 constants mentioned in the\nfollowing draft: http://dwarfstd.org/doc/dwarf5.20141029.pdf\n\ngcc/ChangeLog\n\n\t* doc/invoke.texi (-gdwarf-@{version}): Mention experimental DWARFv5.\n\t* opts.c (common_handle_option): Accept -gdwarf-5.\n\t* dwarf2out.c (is_cxx): Add DW_LANG_C_plus_plus_11 and\n\tDW_LANG_C_plus_plus_14.\n\t(lower_bound_default): Likewise. Plus DW_LANG_C11.\n\t(gen_compile_unit_die): Output DW_LANG_C_plus_plus_11,\n\tDW_LANG_C_plus_plus_14 or DW_LANG_C11.\n\t(output_compilation_unit_header): Output at most a DWARFv4 header.\n\t(output_skeleton_debug_sections): Likewise.\n\t(output_line_info): Likewise.\n\t(output_aranges): Document header version number.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.dg/debug/dwarf2/lang-c11.c: New test.\n\t* gcc.dg/debug/dwarf2/lang-c11-d4-strict.c: Likewise.\n\t* g++.dg/debug/dwarf2/lang-cpp11.C: Likewise.\n\t* g++.dg/debug/dwarf2/lang-cpp14.C: Likewise.\n\t* g++.dg/debug/dwarf2/lang-cpp98.C: Likewise.\n\ninclude/ChangeLog\n\n\t* dwarf2.h: Add DW_LANG_C_plus_plus_11, DW_LANG_C11 and\n\tDW_LANG_C_plus_plus_14.\n\nFrom-SVN: r218077", "tree": {"sha": "946dce63764472eaf25cff837a0273a79deafc59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946dce63764472eaf25cff837a0273a79deafc59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/comments", "author": null, "committer": null, "parents": [{"sha": "b8a8c4723c3fe55e696787cd7a961bc2085eb762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a8c4723c3fe55e696787cd7a961bc2085eb762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a8c4723c3fe55e696787cd7a961bc2085eb762"}], "stats": {"total": 113, "additions": 101, "deletions": 12}, "files": [{"sha": "8dd1ab758019343e700e96abf5458dca2a385f44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -1,3 +1,17 @@\n+2014-11-21  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* doc/invoke.texi (-gdwarf-@{version}): Mention experimental DWARFv5.\n+\t* opts.c (common_handle_option): Accept -gdwarf-5.\n+\t* dwarf2out.c (is_cxx): Add DW_LANG_C_plus_plus_11 and\n+\tDW_LANG_C_plus_plus_14.\n+\t(lower_bound_default): Likewise. Plus DW_LANG_C11.\n+\t(gen_compile_unit_die): Output DW_LANG_C_plus_plus_11,\n+\tDW_LANG_C_plus_plus_14 or DW_LANG_C11.\n+\t(output_compilation_unit_header): Output at most a DWARFv4 header.\n+\t(output_skeleton_debug_sections): Likewise.\n+\t(output_line_info): Likewise.\n+\t(output_aranges): Document header version number.\n+\n 2014-11-26  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.c (get_symbol_constant_value): Allow all"}, {"sha": "d7bce2a6b0f8bb151df9d80e064ff31741bb0489", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -5407,8 +5407,8 @@ assembler (GAS) to fail with an error.\n @item -gdwarf-@var{version}\n @opindex gdwarf-@var{version}\n Produce debugging information in DWARF format (if that is supported).\n-The value of @var{version} may be either 2, 3 or 4; the default version\n-for most targets is 4.\n+The value of @var{version} may be either 2, 3, 4 or 5; the default version\n+for most targets is 4.  DWARF Version 5 is only experimental.\n \n Note that with DWARF Version 2, some ports require and always\n use some non-conflicting DWARF 3 extensions in the unwind tables."}, {"sha": "25f0e7d3e26fa19ca06195638193b7b84921ad48", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -4684,7 +4684,8 @@ is_cxx (void)\n {\n   unsigned int lang = get_AT_unsigned (comp_unit_die (), DW_AT_language);\n \n-  return lang == DW_LANG_C_plus_plus || lang == DW_LANG_ObjC_plus_plus;\n+  return (lang == DW_LANG_C_plus_plus || lang == DW_LANG_ObjC_plus_plus\n+\t  || lang == DW_LANG_C_plus_plus_11 || lang == DW_LANG_C_plus_plus_14);\n }\n \n /* Return TRUE if the language is Java.  */\n@@ -8966,7 +8967,9 @@ output_die (dw_die_ref die)\n static void\n output_compilation_unit_header (void)\n {\n-  int ver = dwarf_version;\n+  /* We don't support actual DWARFv5 units yet, we just use some\n+     DWARFv5 draft DIE tags in DWARFv4 format.  */\n+  int ver = dwarf_version < 5 ? dwarf_version : 4;\n \n   if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n     dw2_asm_output_data (4, 0xffffffff,\n@@ -9109,6 +9112,10 @@ add_top_level_skeleton_die_attrs (dw_die_ref die)\n static void\n output_skeleton_debug_sections (dw_die_ref comp_unit)\n {\n+  /* We don't support actual DWARFv5 units yet, we just use some\n+     DWARFv5 draft DIE tags in DWARFv4 format.  */\n+  int ver = dwarf_version < 5 ? dwarf_version : 4;\n+\n   /* These attributes will be found in the full debug_info section.  */\n   remove_AT (comp_unit, DW_AT_producer);\n   remove_AT (comp_unit, DW_AT_language);\n@@ -9128,7 +9135,7 @@ output_skeleton_debug_sections (dw_die_ref comp_unit)\n                        - DWARF_INITIAL_LENGTH_SIZE\n                        + size_of_die (comp_unit),\n                       \"Length of Compilation Unit Info\");\n-  dw2_asm_output_data (2, dwarf_version, \"DWARF version number\");\n+  dw2_asm_output_data (2, ver, \"DWARF version number\");\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_abbrev_section_label,\n                          debug_abbrev_section,\n                          \"Offset Into Abbrev. Section\");\n@@ -9481,7 +9488,7 @@ output_aranges (unsigned long aranges_length)\n       \"Initial length escape value indicating 64-bit DWARF extension\");\n   dw2_asm_output_data (DWARF_OFFSET_SIZE, aranges_length,\n \t\t       \"Length of Address Ranges Info\");\n-  /* Version number for aranges is still 2, even in DWARF3.  */\n+  /* Version number for aranges is still 2, even up to DWARF5.  */\n   dw2_asm_output_data (2, 2, \"DWARF Version\");\n   if (dwarf_split_debug_info)\n     dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_info_section_label,\n@@ -10156,7 +10163,8 @@ static void\n output_line_info (bool prologue_only)\n {\n   char l1[20], l2[20], p1[20], p2[20];\n-  int ver = dwarf_version;\n+  /* We don't support DWARFv5 line tables yet.  */\n+  int ver = dwarf_version < 5 ? dwarf_version : 4;\n   bool saw_one = false;\n   int opc;\n \n@@ -16402,7 +16410,10 @@ lower_bound_default (void)\n     case DW_LANG_C:\n     case DW_LANG_C89:\n     case DW_LANG_C99:\n+    case DW_LANG_C11:\n     case DW_LANG_C_plus_plus:\n+    case DW_LANG_C_plus_plus_11:\n+    case DW_LANG_C_plus_plus_14:\n     case DW_LANG_ObjC:\n     case DW_LANG_ObjC_plus_plus:\n     case DW_LANG_Java:\n@@ -16746,6 +16757,7 @@ add_prototyped_attribute (dw_die_ref die, tree func_type)\n     case DW_LANG_C:\n     case DW_LANG_C89:\n     case DW_LANG_C99:\n+    case DW_LANG_C11:\n     case DW_LANG_ObjC:\n       if (prototype_p (func_type))\n \tadd_AT_flag (die, DW_AT_prototyped, 1);\n@@ -19595,15 +19607,30 @@ gen_compile_unit_die (const char *filename)\n \n   language = DW_LANG_C;\n   if (strncmp (language_string, \"GNU C\", 5) == 0\n-      && (language_string[5] == 0 || ISDIGIT (language_string[5])))\n+      && ISDIGIT (language_string[5]))\n     {\n       language = DW_LANG_C89;\n       if (dwarf_version >= 3 || !dwarf_strict)\n-\tif (strcmp (language_string, \"GNU C99\") == 0)\n-\t  language = DW_LANG_C99;\n+\t{\n+\t  if (strcmp (language_string, \"GNU C89\") != 0)\n+\t    language = DW_LANG_C99;\n+\n+\t  if (dwarf_version >= 5 /* || !dwarf_strict */)\n+\t    if (strcmp (language_string, \"GNU C11\") == 0)\n+\t      language = DW_LANG_C11;\n+\t}\n     }\n   else if (strncmp (language_string, \"GNU C++\", 7) == 0)\n-    language = DW_LANG_C_plus_plus;\n+    {\n+      language = DW_LANG_C_plus_plus;\n+      if (dwarf_version >= 5 /* || !dwarf_strict */)\n+\t{\n+\t  if (strcmp (language_string, \"GNU C++11\") == 0)\n+\t    language = DW_LANG_C_plus_plus_11;\n+\t  else if (strcmp (language_string, \"GNU C++14\") == 0)\n+\t    language = DW_LANG_C_plus_plus_14;\n+\t}\n+    }\n   else if (strcmp (language_string, \"GNU F77\") == 0)\n     language = DW_LANG_Fortran77;\n   else if (strcmp (language_string, \"GNU Pascal\") == 0)"}, {"sha": "3a0ed61e59372414fe32c74634693f117151ddde", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -1992,7 +1992,7 @@ common_handle_option (struct gcc_options *opts,\n       \n       /* FALLTHRU */\n     case OPT_gdwarf_:\n-      if (value < 2 || value > 4)\n+      if (value < 2 || value > 5)\n \terror_at (loc, \"dwarf version %d is not supported\", value);\n       else\n \topts->x_dwarf_version = value;"}, {"sha": "187204615794c03ef814dd18115cd529b3ee17ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -1,3 +1,11 @@\n+2014-11-21  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* gcc.dg/debug/dwarf2/lang-c11.c: New test.\n+\t* gcc.dg/debug/dwarf2/lang-c11-d4-strict.c: Likewise.\n+\t* g++.dg/debug/dwarf2/lang-cpp11.C: Likewise.\n+\t* g++.dg/debug/dwarf2/lang-cpp14.C: Likewise.\n+\t* g++.dg/debug/dwarf2/lang-cpp98.C: Likewise.\n+\n 2014-11-24  Mark Wielaard  <mjw@redhat.com>\n \n \t* g++.dg/debug/dwarf2/noreturn-function.C: New test."}, {"sha": "8079c0e1752c812c6637c7704497007f44cc8cff", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/lang-cpp11.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp11.C?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++11 -gdwarf-5 -dA\" }\n+// DW_LANG_C_plus_plus_11 = 0x001a\n+// { dg-final { scan-assembler \"0x1a.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "448ec7c0a3067f09e49746c7f7b80c98e3f3cba8", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/lang-cpp14.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp14.C?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++14 -gdwarf-5 -dA\" }\n+// DW_LANG_C_plus_plus_14 = 0x0021\n+// { dg-final { scan-assembler \"0x21.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "065cc18264e40b6affb5ce4aed23f5f3445f3667", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/lang-cpp98.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flang-cpp98.C?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++98 -g -dA\" }\n+// DW_LANG_C_plus_plus = 0x0004\n+// { dg-final { scan-assembler \"0x4.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "accc13f18b57ca78146b74b8eb1cad5286ef22c7", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/lang-c11-d4-strict.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c11-d4-strict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c11-d4-strict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c11-d4-strict.c?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c11 -gdwarf-4 -gstrict-dwarf -dA\" }\n+// We cannot produce DW_LANG_C11 = 0x001d because strict-dwarf.\n+// So expect DW_LANG_C99 = 0x000c\n+// { dg-final { scan-assembler \"0xc.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "f14c49fd3d336fa7ca01df19e3b9a9cddf10c927", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/lang-c11.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c11.c?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c11 -gdwarf-5 -dA\" }\n+// DW_LANG_C11 = 0x001d\n+// { dg-final { scan-assembler \"0x1d.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "e0baca9c10d91b351dbb25701290efd9bbfe7c5c", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -1,3 +1,8 @@\n+2014-11-21  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* dwarf2.h: Add DW_LANG_C_plus_plus_11, DW_LANG_C11 and\n+\tDW_LANG_C_plus_plus_14.\n+\n 2014-11-25  Mark Wielaard  <mjw@redhat.com>\n \n \t* dwarf2.def (DW_AT_noreturn): New DWARF5 attribute."}, {"sha": "ca440dd42b535ad9665afdc73a57f8da7be4e690", "filename": "include/dwarf2.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/include%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696/include%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.h?ref=5d45c9c04e7667f9d567d0d67cfd7d2d7cc00696", "patch": "@@ -309,6 +309,10 @@ enum dwarf_source_language\n     /* DWARF 5.  */\n     DW_LANG_Go = 0x0016,\n \n+    DW_LANG_C_plus_plus_11 = 0x001a, /* dwarf5.20141029.pdf DRAFT */\n+    DW_LANG_C11 = 0x001d,\n+    DW_LANG_C_plus_plus_14 = 0x0021,\n+\n     DW_LANG_lo_user = 0x8000,\t/* Implementation-defined range start.  */\n     DW_LANG_hi_user = 0xffff,\t/* Implementation-defined range start.  */\n "}]}