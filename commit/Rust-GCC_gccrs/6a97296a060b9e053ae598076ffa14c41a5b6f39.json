{"sha": "6a97296a060b9e053ae598076ffa14c41a5b6f39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5NzI5NmEwNjBiOWUwNTNhZTU5ODA3NmZmYTE0YzQxYTViNmYzOQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-09-22T11:40:12Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-09-22T11:40:12Z"}, "message": "fold-const.c (fold): Avoid non INTEGER_TYPEs when widening operands in an integer comparison.\n\n\n\t* fold-const.c (fold): Avoid non INTEGER_TYPEs when widening\n\toperands in an integer comparison.\n\t* tree-cfg.c (find_taken_edge): Call fold() to determine\n\twhether the predicate is known.\n\nFrom-SVN: r87855", "tree": {"sha": "72b9739f89b8a8c1be1a8932e4dea6cccbb6d17e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72b9739f89b8a8c1be1a8932e4dea6cccbb6d17e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a97296a060b9e053ae598076ffa14c41a5b6f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a97296a060b9e053ae598076ffa14c41a5b6f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a97296a060b9e053ae598076ffa14c41a5b6f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a97296a060b9e053ae598076ffa14c41a5b6f39/comments", "author": null, "committer": null, "parents": [{"sha": "3b620440d3041539ea0150599073d829cea2982d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b620440d3041539ea0150599073d829cea2982d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b620440d3041539ea0150599073d829cea2982d"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "115f39bd7a4c64a0c69c6e33eb13c680a0578756", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a97296a060b9e053ae598076ffa14c41a5b6f39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a97296a060b9e053ae598076ffa14c41a5b6f39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a97296a060b9e053ae598076ffa14c41a5b6f39", "patch": "@@ -1,3 +1,10 @@\n+2004-09-22  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* fold-const.c (fold): Avoid non INTEGER_TYPEs when widening\n+\toperands in an integer comparison.\n+\t* tree-cfg.c (find_taken_edge): Call fold() to determine\n+\twhether the predicate is known.\n+\n 2004-09-22  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* aclocal.m4: Import AM_PROG_CC_C_O and AM_AUX_DIR_EXPAND."}, {"sha": "c762fada3fe34e850063b90d121683bbe6e6dcd0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a97296a060b9e053ae598076ffa14c41a5b6f39/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a97296a060b9e053ae598076ffa14c41a5b6f39/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6a97296a060b9e053ae598076ffa14c41a5b6f39", "patch": "@@ -8290,6 +8290,7 @@ fold (tree expr)\n \t       && (t1 = get_unwidened (arg1, TREE_TYPE (tem))) != 0\n \t       && (TREE_TYPE (t1) == TREE_TYPE (tem)\n \t\t   || (TREE_CODE (t1) == INTEGER_CST\n+\t\t       && TREE_CODE (TREE_TYPE (tem)) == INTEGER_TYPE\n \t\t       && int_fits_type_p (t1, TREE_TYPE (tem)))))\n \treturn fold (build2 (code, type, tem,\n \t\t\t     fold_convert (TREE_TYPE (tem), t1)));"}, {"sha": "51c4bed904857b459f28e347f1fa528308fac96c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a97296a060b9e053ae598076ffa14c41a5b6f39/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a97296a060b9e053ae598076ffa14c41a5b6f39/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6a97296a060b9e053ae598076ffa14c41a5b6f39", "patch": "@@ -2001,22 +2001,9 @@ find_taken_edge (basic_block bb, tree val)\n   gcc_assert (is_ctrl_stmt (stmt));\n \n   /* If VAL is a predicate of the form N RELOP N, where N is an\n-     SSA_NAME, we can always determine its truth value (except when\n-     doing floating point comparisons that may involve NaNs).  */\n-  if (val\n-      && COMPARISON_CLASS_P (val)\n-      && TREE_OPERAND (val, 0) == TREE_OPERAND (val, 1)\n-      && TREE_CODE (TREE_OPERAND (val, 0)) == SSA_NAME\n-      && (TREE_CODE (TREE_TYPE (TREE_OPERAND (val, 0))) != REAL_TYPE\n-\t  || !HONOR_NANS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (val, 0))))))\n-    {\n-      enum tree_code code = TREE_CODE (val);\n-\n-      if (code == EQ_EXPR || code == LE_EXPR || code == GE_EXPR)\n-\tval = boolean_true_node;\n-      else if (code == LT_EXPR || code == GT_EXPR || code == NE_EXPR)\n-\tval = boolean_false_node;\n-    }\n+     SSA_NAME, we can usually determine its truth value.  */\n+  if (val && COMPARISON_CLASS_P (val))\n+    val = fold (val);\n \n   /* If VAL is not a constant, we can't determine which edge might\n      be taken.  */"}]}