{"sha": "cdb884681d2b2f835e4457d84648b82d55e71262", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RiODg0NjgxZDJiMmY4MzVlNDQ1N2Q4NDY0OGI4MmQ1NWU3MTI2Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-08T04:00:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-08T04:00:50Z"}, "message": "dwarf2.h (enum dwarf_location_atom): Add INTERNAL_DW_OP_tls_addr.\n\n./:\t* dwarf2.h (enum dwarf_location_atom): Add\n\tINTERNAL_DW_OP_tls_addr.\n\t* dwarf2out.c (INTERNAL_DW_OP_tls_addr): Don't #define.\n\n\t* c-common.c (c_do_switch_warnings): Don't exit early for -Wswitch\n\twith no default node.  Change warning with %H to warning_at.\n\tDon't clear warn_switch around case checking.\n\t* doc/invoke.texi (Warning Options): Clarify distinction between\n\t-Wswitch and -Wswitch-enum.\njava/:\n\t* jcf-parse.c (handle_constant): Change local variable 'kind' to\n\tunsigned int.\ntestsuite/:\n\t* g++.dg/warn/Wswitch-3.C: New testcase.\n\t* gcc.dg/Wswitch.c: Adjust for -Wswitch change.\n\t* gcc.dg/Wswitch-enum-error.c: Likewise.\n\t* gcc.dg/Wswitch-error.c: Likewise.\n\nFrom-SVN: r148270", "tree": {"sha": "4bd535229794d01698a0f16070f3eb455edc1fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bd535229794d01698a0f16070f3eb455edc1fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdb884681d2b2f835e4457d84648b82d55e71262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb884681d2b2f835e4457d84648b82d55e71262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdb884681d2b2f835e4457d84648b82d55e71262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb884681d2b2f835e4457d84648b82d55e71262/comments", "author": null, "committer": null, "parents": [{"sha": "36b31e072b92b7ba2c91b01a49b370abe6b12498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b31e072b92b7ba2c91b01a49b370abe6b12498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b31e072b92b7ba2c91b01a49b370abe6b12498"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "80751b59adedce0292ab5dafecec8e35c62706db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -1,3 +1,15 @@\n+2009-06-07  Ian Lance Taylor  <iant@google.com>\n+\n+\t* dwarf2.h (enum dwarf_location_atom): Add\n+\tINTERNAL_DW_OP_tls_addr.\n+\t* dwarf2out.c (INTERNAL_DW_OP_tls_addr): Don't #define.\n+\n+\t* c-common.c (c_do_switch_warnings): Don't exit early for -Wswitch\n+\twith no default node.  Change warning with %H to warning_at.\n+\tDon't clear warn_switch around case checking.\n+\t* doc/invoke.texi (Warning Options): Clarify distinction between\n+\t-Wswitch and -Wswitch-enum.\n+\n 2009-06-07  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* tree-pass.h (TODO_update_ssa_any): Document internal use only."}, {"sha": "b26662da18ce4781e1d8daf81c583b092e30fd78", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -5425,7 +5425,6 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n   splay_tree_node default_node;\n   splay_tree_node node;\n   tree chain;\n-  int saved_warn_switch;\n \n   if (!warn_switch && !warn_switch_enum && !warn_switch_default)\n     return;\n@@ -5439,15 +5438,15 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n   if (!type || TREE_CODE (type) != ENUMERAL_TYPE)\n     return;\n \n-  /* If the switch expression was an enumerated type, check that\n-     exactly all enumeration literals are covered by the cases.\n-     The check is made when -Wswitch was specified and there is no\n-     default case, or when -Wswitch-enum was specified.  */\n-\n-  if (!warn_switch_enum\n-      && !(warn_switch && !default_node))\n+  /* From here on, we only care about -Wswitch and -Wswitch-enum.  */\n+  if (!warn_switch_enum && !warn_switch)\n     return;\n \n+  /* Check the cases.  Warn about case values which are not members of\n+     the enumerated type.  For -Wswitch-enum, or for -Wswitch when\n+     there is no default case, check that exactly all enumeration\n+     literals are covered by the cases.  */\n+\n   /* Clearing COND if it is not an integer constant simplifies\n      the tests inside the loop below.  */\n   if (TREE_CODE (cond) != INTEGER_CST)\n@@ -5498,13 +5497,15 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n \tcontinue;\n \n       /* If there is a default_node, the only relevant option is\n-\t Wswitch-enum. Otherwise, if both are enabled then we prefer\n+\t Wswitch-enum.  Otherwise, if both are enabled then we prefer\n \t to warn using -Wswitch because -Wswitch is enabled by -Wall\n \t while -Wswitch-enum is explicit.  */\n-      warning ((default_node || !warn_switch) \n-\t       ? OPT_Wswitch_enum : OPT_Wswitch,\n-\t       \"%Henumeration value %qE not handled in switch\",\n-\t       &switch_location, TREE_PURPOSE (chain));\n+      warning_at (switch_location,\n+\t\t  (default_node || !warn_switch\n+\t\t   ? OPT_Wswitch_enum\n+\t\t   : OPT_Wswitch),\n+\t\t  \"enumeration value %qE not handled in switch\",\n+\t\t  TREE_PURPOSE (chain));\n     }\n \n   /* Warn if there are case expressions that don't correspond to\n@@ -5516,16 +5517,7 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n      every disjoint case label, with CASE_LOW_SEEN and CASE_HIGH_SEEN\n      above.  This scan also resets those fields.  */\n \n-  /* If there is a default_node, the only relevant option is\n-     Wswitch-enum. Otherwise, if both are enabled then we prefer\n-     to warn using -Wswitch because -Wswitch is enabled by -Wall\n-     while -Wswitch-enum is explicit.  */\n-  saved_warn_switch = warn_switch;\n-  if (default_node)\n-    warn_switch = 0;\n   splay_tree_foreach (cases, match_case_to_enum, type);\n-  warn_switch = saved_warn_switch;\n-\n }\n \n /* Finish an expression taking the address of LABEL (an"}, {"sha": "c669c21175f2323e93c1695b678392424857503b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -3174,7 +3174,8 @@ Warn whenever a @code{switch} statement has an index of enumerated type\n and lacks a @code{case} for one or more of the named codes of that\n enumeration.  (The presence of a @code{default} label prevents this\n warning.)  @code{case} labels outside the enumeration range also\n-provoke warnings when this option is used.\n+provoke warnings when this option is used (even if there is a\n+@code{default} label).\n This warning is enabled by @option{-Wall}.\n \n @item -Wswitch-default\n@@ -3189,7 +3190,10 @@ case.\n Warn whenever a @code{switch} statement has an index of enumerated type\n and lacks a @code{case} for one or more of the named codes of that\n enumeration.  @code{case} labels outside the enumeration range also\n-provoke warnings when this option is used.\n+provoke warnings when this option is used.  The only difference\n+between @option{-Wswitch} and this option is that this option gives a\n+warning about an omitted enumeration code even if there is a\n+@code{default} label.\n \n @item -Wsync-nand @r{(C and C++ only)}\n @opindex Wsync-nand"}, {"sha": "1b3a397b87dcb1d56eec3dad616af59e4a7f6f00", "filename": "gcc/dwarf2.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2.h?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -562,7 +562,13 @@ enum dwarf_location_atom\n     DW_OP_HP_fltconst8   = 0xe3,\n     DW_OP_HP_mod_range   = 0xe4,\n     DW_OP_HP_unmod_range = 0xe5,\n-    DW_OP_HP_tls         = 0xe6\n+    DW_OP_HP_tls         = 0xe6,\n+\n+    /* Used internally in dwarf2out.c to distinguish DW_OP_addr with a\n+       direct symbol relocation from DW_OP_addr with a dtp-relative\n+       symbol relocation.  */\n+    INTERNAL_DW_OP_tls_addr = 0x103\n+\n   };\n \n /* Type encodings.  */"}, {"sha": "617be8008e9e9170396c77eeb2f131ec1aeeaaf4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -3758,11 +3758,6 @@ struct GTY(()) dwarf_file_data {\n   int emitted_number;\n };\n \n-/* We need some way to distinguish DW_OP_addr with a direct symbol\n-   relocation from DW_OP_addr with a dtp-relative symbol relocation.  */\n-#define INTERNAL_DW_OP_tls_addr\t\t(0x100 + DW_OP_addr)\n-\n-\n typedef struct dw_val_struct *dw_val_ref;\n typedef struct die_struct *dw_die_ref;\n typedef const struct die_struct *const_dw_die_ref;"}, {"sha": "3c3a23f1fbe1915747620ffb242585f5aa6d2d6d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -1,3 +1,8 @@\n+2009-06-07  Ian Lance Taylor  <iant@google.com>\n+\n+\t* jcf-parse.c (handle_constant): Change local variable 'kind' to\n+\tunsigned int.\n+\n 2009-06-01  Ian Lance Taylor  <iant@google.com>\n \n \t* jcf-io.c (find_class): Use CONST_CAST."}, {"sha": "f28acb041cd2b89e91f8da2e5d604900e95a5c86", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -498,7 +498,7 @@ handle_long_constant (JCF *jcf, CPool *cpool, enum cpool_tag kind,\n static uint16\n handle_constant (JCF *jcf, int index, enum cpool_tag purpose)\n {\n-  enum cpool_tag kind;\n+  unsigned int kind;\n   CPool *cpool = cpool_for_class (output_class);\n   \n   if (index == 0)\n@@ -507,7 +507,7 @@ handle_constant (JCF *jcf, int index, enum cpool_tag purpose)\n   if (! CPOOL_INDEX_IN_RANGE (&jcf->cpool, index))\n     error (\"<constant pool index %d not in range>\", index);\n   \n-  kind = (enum cpool_tag) JPOOL_TAG (jcf, index);\n+  kind = JPOOL_TAG (jcf, index);\n \n   if ((kind & ~CONSTANT_ResolvedFlag) != purpose)\n     {\n@@ -555,12 +555,12 @@ handle_constant (JCF *jcf, int index, enum cpool_tag purpose)\n       break;\n \n     case CONSTANT_Long:\n-      index = handle_long_constant (jcf, cpool, kind, index, \n+      index = handle_long_constant (jcf, cpool, CONSTANT_Long, index,\n \t\t\t\t    WORDS_BIG_ENDIAN);\n       break;\n       \n     case CONSTANT_Double:\n-      index = handle_long_constant (jcf, cpool, kind, index, \n+      index = handle_long_constant (jcf, cpool, CONSTANT_Double, index,\n \t\t\t\t    FLOAT_WORDS_BIG_ENDIAN);\n       break;\n "}, {"sha": "dbb97e1881ea75cfbca1bd8817eaa5cdff011281", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -1,3 +1,10 @@\n+2009-06-07  Ian Lance Taylor  <iant@google.com>\n+\n+\t* g++.dg/warn/Wswitch-3.C: New testcase.\n+\t* gcc.dg/Wswitch.c: Adjust for -Wswitch change.\n+\t* gcc.dg/Wswitch-enum-error.c: Likewise.\n+\t* gcc.dg/Wswitch-error.c: Likewise.\n+\n 2009-06-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/40008"}, {"sha": "df1f8956dadd35cc314dac2131f0693e221a9ac6", "filename": "gcc/testsuite/g++.dg/warn/Wswitch-3.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-3.C?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch\" } */\n+\n+enum E { A, B, C, D, E, F };\n+\n+int\n+f1 (enum E e)\n+{\n+  switch (e)\n+    {\n+    case A: return 1;\n+    case B: return 2;\n+    case C: return 3;\n+    case D: return 4;\n+    case E: return 5;\n+    case F: return 6;\n+    case 7: return 7;\t/* { dg-warning \"not in enumerated type\" } */\n+    }\n+  return 0;\n+}\n+\n+int\n+f2 (enum E e)\n+{\n+  switch (e)\n+    {\n+    case A: return 1;\n+    case B: return 2;\n+    case C: return 3;\n+    case D: return 4;\n+    case E: return 5;\n+    case F: return 6;\n+    case 7: return 7;\t/* { dg-warning \"not in enumerated type\" } */\n+    default: return 8;\n+    }\n+  return 0;\n+}"}, {"sha": "383a29fba9d14efe5595205d7602fa37e0bc5484", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum-error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -56,7 +56,7 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     {\n     case e1: return 1;\n     case e2: return 2;\n-    case 3: return 3; /* { dg-error \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n+    case 3: return 3; /* { dg-warning \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n     default: break;\n     }\n   return 0;"}, {"sha": "31e32957963a9fe42c84abda3e158b20e2d04a31", "filename": "gcc/testsuite/gcc.dg/Wswitch-error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -56,7 +56,7 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     {\n     case e1: return 1;\n     case e2: return 2;\n-    case 3: return 3; /* { dg-warning \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n+    case 3: return 3; /* { dg-error \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n     default: break;\n     }\n   return 0;"}, {"sha": "9b43ed445b3e35f7ee03f36193bfd62377d4bda2", "filename": "gcc/testsuite/gcc.dg/Wswitch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb884681d2b2f835e4457d84648b82d55e71262/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c?ref=cdb884681d2b2f835e4457d84648b82d55e71262", "patch": "@@ -56,8 +56,8 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     {\n     case e1: return 1;\n     case e2: return 2;\n-    case 3: return 3;\n+    case 3: return 3; /* { dg-warning \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n     default: break;\n-    } /* Since there is a default, no warning about ``case 3'' */\n+    }\n   return 0;\n }"}]}