{"sha": "10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlMTU0ZGZkN2U0ZTYxZjEyMDVhMzY0ZDA3ZWMwNzg5Yzg1YmZkMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2009-09-17T07:52:40Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-09-17T07:52:40Z"}, "message": "cfglayout.c (fixup_reorder_chain): Accept conditional jumps without a fallthrough edge.\n\n2009-09-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* cfglayout.c (fixup_reorder_chain): Accept conditional jumps\n\twithout a fallthrough edge.\n\n2009-09-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.c-torture/compile/20090917-1.c: New testcase.\n\nFrom-SVN: r151790", "tree": {"sha": "4514b02eb3f66a3122257eb620cf2f322e1a4902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4514b02eb3f66a3122257eb620cf2f322e1a4902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/comments", "author": null, "committer": null, "parents": [{"sha": "bbc1e3ba53a28e618d2763b19c16c60621148b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc1e3ba53a28e618d2763b19c16c60621148b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc1e3ba53a28e618d2763b19c16c60621148b01"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "6e4f28fa624922a81e55589eebd68ec72ed53bf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "patch": "@@ -1,3 +1,8 @@\n+2009-09-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* cfglayout.c (fixup_reorder_chain): Accept conditional jumps\n+\twithout a fallthrough edge.\n+\n 2009-09-16  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/m32c.c (m32c_emit_epilogue): Check for R8C or M16C"}, {"sha": "d6d1b3ab697a182ea8f4070df2a4d5b3343942dd", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "patch": "@@ -787,6 +787,17 @@ fixup_reorder_chain (void)\n \t{\n \t  if (any_condjump_p (bb_end_insn))\n \t    {\n+\t      /* This might happen if the conditional jump has side\n+\t\t effects and could therefore not be optimized away.\n+\t\t Make the basic block to end with a barrier in order\n+\t\t to prevent rtl_verify_flow_info from complaining.  */\n+\t      if (!e_fall)\n+\t\t{\n+\t\t  gcc_assert (!onlyjump_p (bb_end_insn));\n+\t\t  bb->il.rtl->footer = emit_barrier_after (bb_end_insn);\n+\t\t  continue;\n+\t\t}\n+\n \t      /* If the old fallthru is still next, nothing to do.  */\n \t      if (bb->aux == e_fall->dest\n \t\t  || e_fall->dest == EXIT_BLOCK_PTR)"}, {"sha": "1a24f25c706c1c62cea21dcfc66825d5f99e76f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "patch": "@@ -1,3 +1,7 @@\n+2009-09-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.c-torture/compile/20090917-1.c: New testcase.\n+\n 2009-09-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gfortran.dg/default_format_denormal_2.f90: Add ieee options."}, {"sha": "2b8c37148bdf35d55939c121af7403bbae17e35e", "filename": "gcc/testsuite/gcc.c-torture/compile/20090917-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090917-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e154dfd7e4e61f1205a364d07ec0789c85bfd3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090917-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090917-1.c?ref=10e154dfd7e4e61f1205a364d07ec0789c85bfd3", "patch": "@@ -0,0 +1,55 @@\n+typedef int *loop_p;\n+typedef struct VEC_loop_p_base\n+{\n+  unsigned num;\n+  loop_p vec[1];\n+}\n+VEC_loop_p_base;\n+\n+__inline__ int\n+VEC_loop_p_base_iterate (const VEC_loop_p_base * vec_, unsigned ix_,\n+\t\t\t loop_p * ptr)\n+{\n+  if (vec_ && ix_ < vec_->num)\n+    {\n+      *ptr = vec_->vec[ix_];\n+      return 1;\n+    }\n+  else\n+    {\n+      return 0;\n+    }\n+}\n+\n+typedef struct VEC_loop_p_heap\n+{\n+  VEC_loop_p_base base;\n+}\n+VEC_loop_p_heap;\n+\n+\n+static __inline__ int\n+am_vector_index_for_loop (VEC_loop_p_heap * loop_nest, int loop_num)\n+{\n+  int i;\n+  loop_p l;\n+\n+  for (i = 0;\n+       VEC_loop_p_base_iterate ((loop_nest) ? &(loop_nest)->base : 0, i,\n+\t\t\t\t&(l)); i++)\n+    if (l == loop_num)\n+      return i;\n+\n+  __builtin_unreachable ();\n+}\n+\n+unsigned char\n+build_access_matrix (unsigned max)\n+{\n+  unsigned i;\n+  for (i = 0; i < max; i++)\n+    {\n+      if (am_vector_index_for_loop (foo (), 0))\n+\treturn 0;\n+    }\n+}"}]}