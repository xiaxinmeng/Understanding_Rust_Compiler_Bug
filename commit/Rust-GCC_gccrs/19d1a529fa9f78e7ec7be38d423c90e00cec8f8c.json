{"sha": "19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkMWE1MjlmYTlmNzhlN2VjN2JlMzhkNDIzYzkwZTAwY2VjOGY4Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-09T09:42:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-10T08:12:39Z"}, "message": "tree-optimization/101801 - rework generic vector vectorization more\n\nThis builds ontop of the vect_worthwhile_without_simd_p refactoring\ndone earlier.  It was wrong in dropping the appearant double checks\nfor operation support since the optab check can happen with an\ninteger vector emulation mode and thus succeed but vector lowering\nmight not actually support the operation on word_mode.\n\nThe following patch adds a vect_emulated_vector_p helper and\nre-instantiates the check where it was previously.  It also adds\nappropriate costing of the scalar stmts emitted by vector lowering\nto vectorizable_operation which should be the only place such\noperations are synthesized.  I've also cared for the case where\nthe vector mode is supported but the operation is not (though\nI think this will be unlikely given we're talking about plus, minus\nand negate).\n\nThis fixes the observed FAIL of gcc.dg/tree-ssa/gen-vect-11b.c\nwith -m32 where we end up vectorizing a multiplication that ends up\nbeing teared down to scalars again by vector lowering.\n\nI'm not super happy about all the other places where we're now\nand previously feeding scalar modes to optab checks where we\nwant to know whether we can vectorize sth but well.\n\n2021-09-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101801\n\tPR tree-optimization/101819\n\t* tree-vectorizer.h (vect_emulated_vector_p): Declare.\n\t* tree-vect-loop.c (vect_emulated_vector_p): New function.\n\t(vectorizable_reduction): Re-instantiate a check for emulated\n\toperations.\n\t* tree-vect-stmts.c (vectorizable_shift): Likewise.\n\t(vectorizable_operation): Likewise.  Cost emulated vector\n\toperations according to the scalar sequence synthesized by\n\tvector lowering.", "tree": {"sha": "c5e6b9af9e2a7ff5e69dc0a769e1d541dca81037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e6b9af9e2a7ff5e69dc0a769e1d541dca81037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb169406cdc9e044eaec500dd742c2fed40f5488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb169406cdc9e044eaec500dd742c2fed40f5488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb169406cdc9e044eaec500dd742c2fed40f5488"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "995d143dbbd73317d394cc2f897afae953576c85", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "patch": "@@ -7234,6 +7234,14 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \t      dump_printf (MSG_NOTE, \"proceeding using word mode.\\n\");\n         }\n \n+      if (vect_emulated_vector_p (vectype_in)\n+\t  && !vect_can_vectorize_without_simd_p (code))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf (MSG_NOTE, \"using word mode not possible.\\n\");\n+\t  return false;\n+\t}\n+\n       /* lane-reducing operations have to go through vect_transform_reduction.\n          For the other cases try without the single cycle optimization.  */\n       if (!ok)\n@@ -7936,6 +7944,16 @@ vectorizable_phi (vec_info *,\n   return true;\n }\n \n+/* Return true if VECTYPE represents a vector that requires lowering\n+   by the vector lowering pass.  */\n+\n+bool\n+vect_emulated_vector_p (tree vectype)\n+{\n+  return (!VECTOR_MODE_P (TYPE_MODE (vectype))\n+\t  && (!VECTOR_BOOLEAN_TYPE_P (vectype)\n+\t      || TYPE_PRECISION (TREE_TYPE (vectype)) != 1));\n+}\n \n /* Return true if we can emulate CODE on an integer mode representation\n    of a vector.  */"}, {"sha": "5a5a4dab3f2c9b918c5664f740086d7a51e97026", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "patch": "@@ -5682,15 +5682,11 @@ vectorizable_shift (vec_info *vinfo,\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                          \"op not supported by target.\\n\");\n-      /* Check only during analysis.  */\n-      if (maybe_ne (GET_MODE_SIZE (vec_mode), UNITS_PER_WORD)\n-\t  || (!vec_stmt\n-\t      && !vect_can_vectorize_without_simd_p (code)))\n-        return false;\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_NOTE, vect_location,\n-                         \"proceeding using word mode.\\n\");\n+      return false;\n     }\n+  /* vector lowering cannot optimize vector shifts using word arithmetic.  */\n+  if (vect_emulated_vector_p (vectype))\n+    return false;\n \n   if (!vec_stmt) /* transformation not required.  */\n     {\n@@ -6076,6 +6072,7 @@ vectorizable_operation (vec_info *vinfo,\n \t\t\t  != CODE_FOR_nothing);\n     }\n \n+  bool using_emulated_vectors_p = vect_emulated_vector_p (vectype);\n   if (!target_support_p)\n     {\n       if (dump_enabled_p ())\n@@ -6088,6 +6085,15 @@ vectorizable_operation (vec_info *vinfo,\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n                          \"proceeding using word mode.\\n\");\n+      using_emulated_vectors_p = true;\n+    }\n+\n+  if (using_emulated_vectors_p\n+      && !vect_can_vectorize_without_simd_p (code))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf (MSG_NOTE, \"using word mode not possible.\\n\");\n+      return false;\n     }\n \n   int reduc_idx = STMT_VINFO_REDUC_IDX (stmt_info);\n@@ -6134,6 +6140,29 @@ vectorizable_operation (vec_info *vinfo,\n       DUMP_VECT_SCOPE (\"vectorizable_operation\");\n       vect_model_simple_cost (vinfo, stmt_info,\n \t\t\t      ncopies, dt, ndts, slp_node, cost_vec);\n+      if (using_emulated_vectors_p)\n+\t{\n+\t  /* The above vect_model_simple_cost call handles constants\n+\t     in the prologue and (mis-)costs one of the stmts as\n+\t     vector stmt.  See tree-vect-generic.c:do_plus_minus/do_negate\n+\t     for the actual lowering that will be applied.  */\n+\t  unsigned n\n+\t    = slp_node ? SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node) : ncopies;\n+\t  switch (code)\n+\t    {\n+\t    case PLUS_EXPR:\n+\t      n *= 5;\n+\t      break;\n+\t    case MINUS_EXPR:\n+\t      n *= 6;\n+\t      break;\n+\t    case NEGATE_EXPR:\n+\t      n *= 4;\n+\t      break;\n+\t    default:;\n+\t    }\n+\t  record_stmt_cost (cost_vec, n, scalar_stmt, stmt_info, 0, vect_body);\n+\t}\n       return true;\n     }\n "}, {"sha": "9c2c29d61fae5e651a112b103482131e3d646fb6", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d1a529fa9f78e7ec7be38d423c90e00cec8f8c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=19d1a529fa9f78e7ec7be38d423c90e00cec8f8c", "patch": "@@ -2061,6 +2061,7 @@ extern bool vectorizable_lc_phi (loop_vec_info, stmt_vec_info,\n \t\t\t\t gimple **, slp_tree);\n extern bool vectorizable_phi (vec_info *, stmt_vec_info, gimple **, slp_tree,\n \t\t\t      stmt_vector_for_cost *);\n+extern bool vect_emulated_vector_p (tree);\n extern bool vect_can_vectorize_without_simd_p (tree_code);\n extern int vect_get_known_peeling_cost (loop_vec_info, int, int *,\n \t\t\t\t\tstmt_vector_for_cost *,"}]}