{"sha": "b8911cb870585c08881d3c424cb1e508e99b9ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5MTFjYjg3MDU4NWMwODg4MWQzYzQyNGNiMWU1MDhlOTliOWFjZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-06-15T15:23:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-06-15T15:23:40Z"}, "message": "re PR c++/70202 (ICE on invalid code on x86_64-linux-gnu in build_simple_base_path, at cp/class.c:579)\n\n/cp\n2016-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70202\n\t* decl.c (xref_basetypes): Revert r117839 changes; add fix-up\n\tcode at the end of the for loop; also revert r159637 changes,\n\tadd back the gcc_assert.\n\t* cp-tree.h (xref_basetypes): Adjust declaration.\n\t* parser.c (cp_parser_class_head): Adjust xref_basetypes call.\n\n/testsuite\n2016-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70202\n\t* g++.dg/inherit/crash6.C: New.\n\t* g++.dg/inherit/union2.C: Likewise.\n\t* g++.dg/inherit/virtual12.C: Likewise.\n\t* g++.dg/inherit/virtual13.C: Likewise.\n\t* g++.dg/inherit/virtual1.C: Tweak dg-* tests.\n\nFrom-SVN: r237482", "tree": {"sha": "89a4417c638d49e00e1541ed152672f46de1394d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89a4417c638d49e00e1541ed152672f46de1394d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8911cb870585c08881d3c424cb1e508e99b9ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8911cb870585c08881d3c424cb1e508e99b9ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8911cb870585c08881d3c424cb1e508e99b9ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8911cb870585c08881d3c424cb1e508e99b9ace/comments", "author": null, "committer": null, "parents": [{"sha": "75dc52c674f0d70ae8cca6b0381270b3efd3a0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75dc52c674f0d70ae8cca6b0381270b3efd3a0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75dc52c674f0d70ae8cca6b0381270b3efd3a0fb"}], "stats": {"total": 129, "additions": 94, "deletions": 35}, "files": [{"sha": "7e68d0541970164a88cbd7623610c5de6b370c72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -1,3 +1,12 @@\n+2016-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70202\n+\t* decl.c (xref_basetypes): Revert r117839 changes; add fix-up\n+\tcode at the end of the for loop; also revert r159637 changes,\n+\tadd back the gcc_assert.\n+\t* cp-tree.h (xref_basetypes): Adjust declaration.\n+\t* parser.c (cp_parser_class_head): Adjust xref_basetypes call.\n+\n 2016-06-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* search.c: Include spellcheck-tree.h rather than spellcheck.h."}, {"sha": "5b87bb391d9697c93337ee8e8e7463cc20afb6b4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -5788,7 +5788,7 @@ extern int grok_ctor_properties\t\t\t(const_tree, const_tree);\n extern bool grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n-extern bool xref_basetypes\t\t\t(tree, tree);\n+extern void xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree, tree, tree, tree, bool, bool *);\n extern void finish_enum_value_list\t\t(tree);\n extern void finish_enum\t\t\t\t(tree);"}, {"sha": "1aa5e523cb33f01684e425db1d5921a3911a39be", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -12879,12 +12879,9 @@ xref_tag_from_type (tree old, tree id, tag_scope scope)\n /* Create the binfo hierarchy for REF with (possibly NULL) base list\n    BASE_LIST.  For each element on BASE_LIST the TREE_PURPOSE is an\n    access_* node, and the TREE_VALUE is the type of the base-class.\n-   Non-NULL TREE_TYPE indicates virtual inheritance.  \n- \n-   Returns true if the binfo hierarchy was successfully created,\n-   false if an error was detected. */\n+   Non-NULL TREE_TYPE indicates virtual inheritance.  */\n \n-bool\n+void\n xref_basetypes (tree ref, tree base_list)\n {\n   tree *basep;\n@@ -12897,7 +12894,7 @@ xref_basetypes (tree ref, tree base_list)\n   tree igo_prev; /* Track Inheritance Graph Order.  */\n \n   if (ref == error_mark_node)\n-    return false;\n+    return;\n \n   /* The base of a derived class is private by default, all others are\n      public.  */\n@@ -12941,11 +12938,7 @@ xref_basetypes (tree ref, tree base_list)\n \n   /* The binfo slot should be empty, unless this is an (ill-formed)\n      redefinition.  */\n-  if (TYPE_BINFO (ref) && !TYPE_SIZE (ref))\n-    {\n-      error (\"redefinition of %q#T\", ref);\n-      return false;\n-    }\n+  gcc_assert (!TYPE_BINFO (ref) || TYPE_SIZE (ref));\n \n   gcc_assert (TYPE_MAIN_VARIANT (ref) == ref);\n \n@@ -12965,19 +12958,13 @@ xref_basetypes (tree ref, tree base_list)\n       CLASSTYPE_NON_AGGREGATE (ref) = 1;\n \n       if (TREE_CODE (ref) == UNION_TYPE)\n-        {\n-\t  error (\"derived union %qT invalid\", ref);\n-          return false;\n-        }\n+\terror (\"derived union %qT invalid\", ref);\n     }\n \n   if (max_bases > 1)\n     {\n       if (TYPE_FOR_JAVA (ref))\n-        {\n-\t  error (\"Java class %qT cannot have multiple bases\", ref);\n-          return false;\n-        }\n+\terror (\"Java class %qT cannot have multiple bases\", ref);\n       else\n \twarning (OPT_Wmultiple_inheritance,\n \t\t \"%qT defined with multiple direct bases\", ref);\n@@ -12988,10 +12975,7 @@ xref_basetypes (tree ref, tree base_list)\n       vec_alloc (CLASSTYPE_VBASECLASSES (ref), max_vbases);\n \n       if (TYPE_FOR_JAVA (ref))\n-        {\n-\t  error (\"Java class %qT cannot have virtual bases\", ref);\n-          return false;\n-        }\n+\terror (\"Java class %qT cannot have virtual bases\", ref);\n       else if (max_dvbases)\n \twarning (OPT_Wvirtual_inheritance,\n \t\t \"%qT defined with direct virtual base\", ref);\n@@ -13014,7 +12998,7 @@ xref_basetypes (tree ref, tree base_list)\n \t{\n \t  error (\"base type %qT fails to be a struct or class type\",\n \t\t basetype);\n-\t  return false;\n+\t  goto dropped_base;\n \t}\n \n       if (TYPE_FOR_JAVA (basetype) && (current_lang_depth () == 0))\n@@ -13048,7 +13032,7 @@ xref_basetypes (tree ref, tree base_list)\n \t    error (\"recursive type %qT undefined\", basetype);\n \t  else\n \t    error (\"duplicate base type %qT invalid\", basetype);\n-\t  return false;\n+\t  goto dropped_base;\n \t}\n \n       if (PACK_EXPANSION_P (TREE_VALUE (base_list)))\n@@ -13064,8 +13048,25 @@ xref_basetypes (tree ref, tree base_list)\n \n       BINFO_BASE_APPEND (binfo, base_binfo);\n       BINFO_BASE_ACCESS_APPEND (binfo, access);\n+      continue;\n+\n+    dropped_base:\n+      /* Update max_vbases to reflect the reality that we are dropping\n+\t this base:  if it reaches zero we want to undo the vec_alloc\n+\t above to avoid inconsistencies during error-recovery: eg, in\n+\t build_special_member_call, CLASSTYPE_VBASECLASSES non null\n+\t and vtt null (c++/27952).  */\n+      if (via_virtual)\n+\tmax_vbases--;\n+      if (CLASS_TYPE_P (basetype))\n+\tmax_vbases\n+\t  -= vec_safe_length (CLASSTYPE_VBASECLASSES (basetype));\n     }\n \n+  if (CLASSTYPE_VBASECLASSES (ref)\n+      && max_vbases == 0)\n+    vec_free (CLASSTYPE_VBASECLASSES (ref));\n+\n   if (vec_safe_length (CLASSTYPE_VBASECLASSES (ref)) < max_vbases)\n     /* If we didn't get max_vbases vbases, we must have shared at\n        least one of them, and are therefore diamond shaped.  */\n@@ -13096,8 +13097,6 @@ xref_basetypes (tree ref, tree base_list)\n \telse\n \t  break;\n     }\n-\n-  return true;\n }\n \n \f"}, {"sha": "a9c636b7f41fb9c4fa3a9f79f7987b7449659458", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -22050,9 +22050,8 @@ cp_parser_class_head (cp_parser* parser,\n \n   /* If we're really defining a class, process the base classes.\n      If they're invalid, fail.  */\n-  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)\n-      && !xref_basetypes (type, bases))\n-    type = NULL_TREE;\n+  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+    xref_basetypes (type, bases);\n \n  done:\n   /* Leave the scope given by the nested-name-specifier.  We will"}, {"sha": "d9dd04db11833bbeabe572048ac6bbb2aefe3ab7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -1,3 +1,12 @@\n+2016-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70202\n+\t* g++.dg/inherit/crash6.C: New.\n+\t* g++.dg/inherit/union2.C: Likewise.\n+\t* g++.dg/inherit/virtual12.C: Likewise.\n+\t* g++.dg/inherit/virtual13.C: Likewise.\n+\t* g++.dg/inherit/virtual1.C: Tweak dg-* tests.\n+\n 2016-06-15  Uros Bizjak  <ubizjak@gmail.com>\n \n         * gcc.dg/torture/float128-nan.c: Include stdint.h to define uint64_t."}, {"sha": "bce999ccbe5a40aef42d4883b6eca607fc666036", "filename": "gcc/testsuite/g++.dg/inherit/crash6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash6.C?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/70202\n+\n+class A\n+{\n+  virtual void foo () { }\n+};\n+class B : public A, A { };  // { dg-error \"duplicate base type\" }\n+\n+B b1, &b2 = b1;\n+A a = b2;"}, {"sha": "e3a9130480aa7494539aa12d353d619d54d7cc1a", "filename": "gcc/testsuite/g++.dg/inherit/union2.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Funion2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Funion2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Funion2.C?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -0,0 +1,3 @@\n+struct A { };\n+union U : A { };  // { dg-error \"derived union 'U' invalid\" }\n+U u;"}, {"sha": "ed597e2a3d7ff69ce39a481155963211932404bd", "filename": "gcc/testsuite/g++.dg/inherit/virtual1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -1,12 +1,12 @@\n-//PR c++/27952\n+// PR c++/27952\n \n struct A\n {\n     virtual ~A() {}\n };\n \n-struct B : A, virtual A {};     // { dg-error \"duplicate base|forward declaration\" }\n+struct B : A, virtual A {};     // { dg-error \"duplicate base\" }\n \n-struct C : A, B {};             // { dg-error \"duplicate base|invalid use\" }\n+struct C : A, B {};             // { dg-message \"direct base 'A' inaccessible\" }\n \n-C c;                            // { dg-error \"aggregate\" }\n+C c;"}, {"sha": "3e96d2e1e742df8927c1fcca03a73864a178f482", "filename": "gcc/testsuite/g++.dg/inherit/virtual12.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual12.C?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/70202\n+\n+union U { };\n+\n+struct A\n+{\n+  virtual ~A() {}\n+};\n+\n+struct B : A, virtual U { };  // { dg-error \"base type 'U' fails\" }\n+\n+struct C : A, B {};  // { dg-message \"direct base 'A' inaccessible\" }\n+\n+C c;"}, {"sha": "ca504eb60c4e37b9f515cf7f8efeb156ae93fc07", "filename": "gcc/testsuite/g++.dg/inherit/virtual13.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8911cb870585c08881d3c424cb1e508e99b9ace/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual13.C?ref=b8911cb870585c08881d3c424cb1e508e99b9ace", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/70202\n+\n+struct D { };\n+\n+union U : virtual D { };  // { dg-error \"derived union\" }\n+\n+struct A\n+{\n+  virtual ~A() {}\n+};\n+\n+struct B : A, virtual U { };  // { dg-error \"base type 'U' fails\" }\n+\n+struct C : A, B {};  // { dg-message \"direct base 'A' inaccessible\" }\n+\n+C c;"}]}