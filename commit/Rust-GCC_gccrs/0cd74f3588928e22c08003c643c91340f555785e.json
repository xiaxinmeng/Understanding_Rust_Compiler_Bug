{"sha": "0cd74f3588928e22c08003c643c91340f555785e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkNzRmMzU4ODkyOGUyMmMwODAwM2M2NDNjOTEzNDBmNTU1Nzg1ZQ==", "commit": {"author": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2020-04-02T17:50:11Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2020-04-02T17:50:11Z"}, "message": "Fix fortran/85982 ICE in resolve_component.\n\n2020-04-01  Fritz Reese  <foreese@gcc.gnu.org>\n\n\tPR fortran/85982\n\t* fortran/decl.c (match_attr_spec): Lump COMP_STRUCTURE/COMP_MAP into\n\tattribute checking used by TYPE.\n\n2020-04-01  Fritz Reese  <foreese@gcc.gnu.org>\n\n\tPR fortran/85982\n\t* gfortran.dg/dec_structure_28.f90: New test.", "tree": {"sha": "386c43fde7ab6c62a0f116de465f979b7cca98df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386c43fde7ab6c62a0f116de465f979b7cca98df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd74f3588928e22c08003c643c91340f555785e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd74f3588928e22c08003c643c91340f555785e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd74f3588928e22c08003c643c91340f555785e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd74f3588928e22c08003c643c91340f555785e/comments", "author": null, "committer": null, "parents": [{"sha": "3ab216a4d2f14be1f37350260142c91fabce834a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab216a4d2f14be1f37350260142c91fabce834a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab216a4d2f14be1f37350260142c91fabce834a"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "27fac2cacca384fefa762feb5491dcb7dd541742", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd74f3588928e22c08003c643c91340f555785e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd74f3588928e22c08003c643c91340f555785e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cd74f3588928e22c08003c643c91340f555785e", "patch": "@@ -1,3 +1,9 @@\n+2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>\n+\n+\tPR fortran/85982\n+\t* fortran/decl.c (match_attr_spec): Lump COMP_STRUCTURE/COMP_MAP into\n+\tattribute checking used by TYPE.\n+\n 2020-04-02  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/92676"}, {"sha": "ea309089ac9bc74e9b14a6aad102d3f7541cfa07", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd74f3588928e22c08003c643c91340f555785e/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd74f3588928e22c08003c643c91340f555785e/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0cd74f3588928e22c08003c643c91340f555785e", "patch": "@@ -5408,24 +5408,31 @@ match_attr_spec (void)\n       if (d == DECL_STATIC && seen[DECL_SAVE])\n \tcontinue;\n \n-      if (gfc_current_state () == COMP_DERIVED\n+      if (gfc_comp_struct (gfc_current_state ())\n \t  && d != DECL_DIMENSION && d != DECL_CODIMENSION\n \t  && d != DECL_POINTER   && d != DECL_PRIVATE\n \t  && d != DECL_PUBLIC && d != DECL_CONTIGUOUS && d != DECL_NONE)\n \t{\n+\t  bool is_derived = gfc_current_state () == COMP_DERIVED;\n \t  if (d == DECL_ALLOCATABLE)\n \t    {\n-\t      if (!gfc_notify_std (GFC_STD_F2003, \"ALLOCATABLE \"\n-\t\t\t\t   \"attribute at %C in a TYPE definition\"))\n+\t      if (!gfc_notify_std (GFC_STD_F2003, is_derived\n+\t\t\t\t   ? G_(\"ALLOCATABLE attribute at %C in a \"\n+\t\t\t\t\t\"TYPE definition\")\n+\t\t\t\t   : G_(\"ALLOCATABLE attribute at %C in a \"\n+\t\t\t\t\t\"STRUCTURE definition\")))\n \t\t{\n \t\t  m = MATCH_ERROR;\n \t\t  goto cleanup;\n \t\t}\n \t    }\n \t  else if (d == DECL_KIND)\n \t    {\n-\t      if (!gfc_notify_std (GFC_STD_F2003, \"KIND \"\n-\t\t\t\t   \"attribute at %C in a TYPE definition\"))\n+\t      if (!gfc_notify_std (GFC_STD_F2003, is_derived\n+\t\t\t\t   ? G_(\"KIND attribute at %C in a \"\n+\t\t\t\t\t\"TYPE definition\")\n+\t\t\t\t   : G_(\"KIND attribute at %C in a \"\n+\t\t\t\t\t\"STRUCTURE definition\")))\n \t\t{\n \t\t  m = MATCH_ERROR;\n \t\t  goto cleanup;\n@@ -5448,8 +5455,11 @@ match_attr_spec (void)\n \t    }\n \t  else if (d == DECL_LEN)\n \t    {\n-\t      if (!gfc_notify_std (GFC_STD_F2003, \"LEN \"\n-\t\t\t\t   \"attribute at %C in a TYPE definition\"))\n+\t      if (!gfc_notify_std (GFC_STD_F2003, is_derived\n+\t\t\t\t   ? G_(\"LEN attribute at %C in a \"\n+\t\t\t\t\t\"TYPE definition\")\n+\t\t\t\t   : G_(\"LEN attribute at %C in a \"\n+\t\t\t\t\t\"STRUCTURE definition\")))\n \t\t{\n \t\t  m = MATCH_ERROR;\n \t\t  goto cleanup;\n@@ -5472,8 +5482,10 @@ match_attr_spec (void)\n \t    }\n \t  else\n \t    {\n-\t      gfc_error (\"Attribute at %L is not allowed in a TYPE definition\",\n-\t\t\t &seen_at[d]);\n+\t      gfc_error (is_derived ? G_(\"Attribute at %L is not allowed in a \"\n+\t\t\t\t\t \"TYPE definition\")\n+\t\t\t\t    : G_(\"Attribute at %L is not allowed in a \"\n+\t\t\t\t\t \"STRUCTURE definition\"), &seen_at[d]);\n \t      m = MATCH_ERROR;\n \t      goto cleanup;\n \t    }"}, {"sha": "050cecd61592ea4ad91e5598dfb5d95b79c2c480", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd74f3588928e22c08003c643c91340f555785e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd74f3588928e22c08003c643c91340f555785e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cd74f3588928e22c08003c643c91340f555785e", "patch": "@@ -1,3 +1,8 @@\n+2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>\n+\n+\tPR fortran/85982\n+\t* gfortran.dg/dec_structure_28.f90: New test.\n+\n 2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.dg/dtio_35.f90: New."}, {"sha": "bab08b2d5c3899b64e73440f60b7406dcb18ca14", "filename": "gcc/testsuite/gfortran.dg/dec_structure_28.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd74f3588928e22c08003c643c91340f555785e/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd74f3588928e22c08003c643c91340f555785e/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_28.f90?ref=0cd74f3588928e22c08003c643c91340f555785e", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-structure -fdec-static\" }\n+!\n+! PR fortran/85982\n+!\n+! Test a regression wherein some component attributes were erroneously accepted\n+! within a DEC structure.\n+!\n+\n+structure /s/\n+  integer :: a\n+  integer, intent(in) :: b ! { dg-error \"is not allowed\" }\n+  integer, intent(out) :: c ! { dg-error \"is not allowed\" }\n+  integer, intent(inout) :: d ! { dg-error \"is not allowed\" }\n+  integer, dimension(1,1) :: e ! OK\n+  integer, external, pointer :: f ! { dg-error \"is not allowed\" }\n+  integer, intrinsic :: f ! { dg-error \"is not allowed\" }\n+  integer, optional :: g ! { dg-error \"is not allowed\" }\n+  integer, parameter :: h ! { dg-error \"is not allowed\" }\n+  integer, protected :: i ! { dg-error \"is not allowed\" }\n+  integer, private :: j ! { dg-error \"is not allowed\" }\n+  integer, static :: k ! { dg-error \"is not allowed\" }\n+  integer, automatic :: l ! { dg-error \"is not allowed\" }\n+  integer, public :: m ! { dg-error \"is not allowed\" }\n+  integer, save :: n ! { dg-error \"is not allowed\" }\n+  integer, target :: o ! { dg-error \"is not allowed\" }\n+  integer, value :: p ! { dg-error \"is not allowed\" }\n+  integer, volatile :: q ! { dg-error \"is not allowed\" }\n+  integer, bind(c) :: r ! { dg-error \"is not allowed\" }\n+  integer, asynchronous :: t ! { dg-error \"is not allowed\" }\n+  character(len=3) :: v ! OK\n+  integer(kind=4) :: w ! OK\n+end structure\n+\n+end"}]}