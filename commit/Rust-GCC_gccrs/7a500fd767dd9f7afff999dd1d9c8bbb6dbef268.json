{"sha": "7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1MDBmZDc2N2RkOWY3YWZmZjk5OWRkMWQ5YzhiYmI2ZGJlZjI2OA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-21T14:52:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:52:11Z"}, "message": "[Ada] Spurious error on early call region of tagged type\n\nThis patch corrects the part of the access-before-elaboration mechanism which\nensures that the freeze node of a tagged type is within the early call region\nof all its overriding bodies to ignore predefined primitives.\n\n------------\n-- Source --\n------------\n\n--  pack.ads\n\npackage Pack with SPARK_Mode is\n   type Parent_Typ is tagged null record;\n   procedure Prim (Obj : Parent_Typ);\n\n   type Deriv_Typ is new Parent_Typ with private;\n   overriding procedure Prim (Obj : Deriv_Typ);\n\nprivate\n   type Deriv_Typ is new Parent_Typ with null record;\nend Pack;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gcc -c pack.ads\n\n2018-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_cg.adb: Remove with and use clause for Exp_Disp.\n\t* exp_ch9.adb: Remove with and use clause for Exp_Disp.\n\t* exp_disp.adb (Is_Predefined_Dispatching_Operation): Moved to Sem_Util.\n\t(Is_Predefined_Interface_Primitive): Moved to Sem_Util.\n\t(Is_Predefined_Internal_Operation): Moved to Sem_Util.\n\t* exp_disp.ads (Is_Predefined_Dispatching_Operation): Moved to Sem_Util.\n\t(Is_Predefined_Interface_Primitive): Moved to Sem_Util.\n\t(Is_Predefined_Internal_Operation): Moved to Sem_Util.\n\t* exp_dist.adb: Remove with and use clause for Exp_Disp.\n\t* freeze.adb: Remove with and use clause for Exp_Disp.\n\t* sem_cat.adb: Remove with and use clause for Exp_Disp.\n\t* sem_ch6.adb: Remove with and use clause for Exp_Disp.\n\t* sem_ch12.adb: Remove with and use clause for Exp_Disp.\n\t* sem_elab.adb (Check_Overriding_Primitive): Do not process predefined\n\tprimitives.\n\t* sem_util.adb: Remove with and use clause for Exp_Disp.\n\t(Is_Predefined_Dispatching_Operation): Moved from Exp_Disp.\n\t(Is_Predefined_Interface_Primitive): Moved from Exp_Disp.\n\t(Is_Predefined_Internal_Operation): Moved from Exp_Disp.\n\t* sem_util.ads (Is_Predefined_Dispatching_Operation): Moved from\n\tExp_Disp.\n\t(Is_Predefined_Interface_Primitive): Moved from Exp_Disp.\n\t(Is_Predefined_Internal_Operation): Moved from Exp_Disp.\n\nFrom-SVN: r260467", "tree": {"sha": "2c1e0db9a2c40a807091e17cfed381bea58ab551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c1e0db9a2c40a807091e17cfed381bea58ab551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "516057d379930306bc240b7b2b4eedb2c9bb1aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516057d379930306bc240b7b2b4eedb2c9bb1aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516057d379930306bc240b7b2b4eedb2c9bb1aeb"}], "stats": {"total": 270, "additions": 148, "deletions": 122}, "files": [{"sha": "5f56158c1c2bc7d7b1a0e7676b9801f38d4ff181", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -1,3 +1,29 @@\n+2018-04-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_cg.adb: Remove with and use clause for Exp_Disp.\n+\t* exp_ch9.adb: Remove with and use clause for Exp_Disp.\n+\t* exp_disp.adb (Is_Predefined_Dispatching_Operation): Moved to Sem_Util.\n+\t(Is_Predefined_Interface_Primitive): Moved to Sem_Util.\n+\t(Is_Predefined_Internal_Operation): Moved to Sem_Util.\n+\t* exp_disp.ads (Is_Predefined_Dispatching_Operation): Moved to Sem_Util.\n+\t(Is_Predefined_Interface_Primitive): Moved to Sem_Util.\n+\t(Is_Predefined_Internal_Operation): Moved to Sem_Util.\n+\t* exp_dist.adb: Remove with and use clause for Exp_Disp.\n+\t* freeze.adb: Remove with and use clause for Exp_Disp.\n+\t* sem_cat.adb: Remove with and use clause for Exp_Disp.\n+\t* sem_ch6.adb: Remove with and use clause for Exp_Disp.\n+\t* sem_ch12.adb: Remove with and use clause for Exp_Disp.\n+\t* sem_elab.adb (Check_Overriding_Primitive): Do not process predefined\n+\tprimitives.\n+\t* sem_util.adb: Remove with and use clause for Exp_Disp.\n+\t(Is_Predefined_Dispatching_Operation): Moved from Exp_Disp.\n+\t(Is_Predefined_Interface_Primitive): Moved from Exp_Disp.\n+\t(Is_Predefined_Internal_Operation): Moved from Exp_Disp.\n+\t* sem_util.ads (Is_Predefined_Dispatching_Operation): Moved from\n+\tExp_Disp.\n+\t(Is_Predefined_Interface_Primitive): Moved from Exp_Disp.\n+\t(Is_Predefined_Internal_Operation): Moved from Exp_Disp.\n+\n 2018-04-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Valid_Conversion): Improve error message on an illegal"}, {"sha": "00f029b10fd3e6c954222d526d8da867eae73e17", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -26,7 +26,6 @@\n with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n-with Exp_Disp; use Exp_Disp;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Tss;  use Exp_Tss;\n with Lib;      use Lib;"}, {"sha": "981c0ee7e1f5f7b80b555cc5f1045dfa81ce9fc9", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -31,7 +31,6 @@ with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch11; use Exp_Ch11;\n with Exp_Dbug; use Exp_Dbug;\n-with Exp_Disp; use Exp_Disp;\n with Exp_Sel;  use Exp_Sel;\n with Exp_Smem; use Exp_Smem;\n with Exp_Tss;  use Exp_Tss;"}, {"sha": "c9181e592334c5c95f4b40c4615976290d4ea8b3", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -2177,89 +2177,6 @@ package body Exp_Disp is\n         and then Is_Dispatch_Table_Entity (Etype (Name (N)));\n    end Is_Expanded_Dispatching_Call;\n \n-   -----------------------------------------\n-   -- Is_Predefined_Dispatching_Operation --\n-   -----------------------------------------\n-\n-   function Is_Predefined_Dispatching_Operation\n-     (E : Entity_Id) return Boolean\n-   is\n-      TSS_Name : TSS_Name_Type;\n-\n-   begin\n-      if not Is_Dispatching_Operation (E) then\n-         return False;\n-      end if;\n-\n-      Get_Name_String (Chars (E));\n-\n-      --  Most predefined primitives have internally generated names. Equality\n-      --  must be treated differently; the predefined operation is recognized\n-      --  as a homogeneous binary operator that returns Boolean.\n-\n-      if Name_Len > TSS_Name_Type'Last then\n-         TSS_Name := TSS_Name_Type (Name_Buffer (Name_Len - TSS_Name'Length + 1\n-                                     .. Name_Len));\n-         if        Chars (E) = Name_uSize\n-           or else TSS_Name  = TSS_Stream_Read\n-           or else TSS_Name  = TSS_Stream_Write\n-           or else TSS_Name  = TSS_Stream_Input\n-           or else TSS_Name  = TSS_Stream_Output\n-           or else\n-             (Chars (E) = Name_Op_Eq\n-                and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n-           or else Chars (E) = Name_uAssign\n-           or else TSS_Name  = TSS_Deep_Adjust\n-           or else TSS_Name  = TSS_Deep_Finalize\n-           or else Is_Predefined_Interface_Primitive (E)\n-         then\n-            return True;\n-         end if;\n-      end if;\n-\n-      return False;\n-   end Is_Predefined_Dispatching_Operation;\n-\n-   ---------------------------------------\n-   -- Is_Predefined_Internal_Operation  --\n-   ---------------------------------------\n-\n-   function Is_Predefined_Internal_Operation\n-     (E : Entity_Id) return Boolean\n-   is\n-      TSS_Name : TSS_Name_Type;\n-\n-   begin\n-      if not Is_Dispatching_Operation (E) then\n-         return False;\n-      end if;\n-\n-      Get_Name_String (Chars (E));\n-\n-      --  Most predefined primitives have internally generated names. Equality\n-      --  must be treated differently; the predefined operation is recognized\n-      --  as a homogeneous binary operator that returns Boolean.\n-\n-      if Name_Len > TSS_Name_Type'Last then\n-         TSS_Name :=\n-           TSS_Name_Type\n-             (Name_Buffer (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n-\n-         if Nam_In (Chars (E), Name_uSize, Name_uAssign)\n-           or else\n-             (Chars (E) = Name_Op_Eq\n-               and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n-           or else TSS_Name  = TSS_Deep_Adjust\n-           or else TSS_Name  = TSS_Deep_Finalize\n-           or else Is_Predefined_Interface_Primitive (E)\n-         then\n-            return True;\n-         end if;\n-      end if;\n-\n-      return False;\n-   end Is_Predefined_Internal_Operation;\n-\n    -------------------------------------\n    -- Is_Predefined_Dispatching_Alias --\n    -------------------------------------\n@@ -2272,25 +2189,6 @@ package body Exp_Disp is\n         and then Is_Predefined_Dispatching_Operation (Ultimate_Alias (Prim));\n    end Is_Predefined_Dispatching_Alias;\n \n-   ---------------------------------------\n-   -- Is_Predefined_Interface_Primitive --\n-   ---------------------------------------\n-\n-   function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean is\n-   begin\n-      --  In VM targets we don't restrict the functionality of this test to\n-      --  compiling in Ada 2005 mode since in VM targets any tagged type has\n-      --  these primitives.\n-\n-      return (Ada_Version >= Ada_2005 or else not Tagged_Type_Expansion)\n-        and then Nam_In (Chars (E), Name_uDisp_Asynchronous_Select,\n-                                    Name_uDisp_Conditional_Select,\n-                                    Name_uDisp_Get_Prim_Op_Kind,\n-                                    Name_uDisp_Get_Task_Id,\n-                                    Name_uDisp_Requeue,\n-                                    Name_uDisp_Timed_Select);\n-   end Is_Predefined_Interface_Primitive;\n-\n    ----------------------------------------\n    -- Make_Disp_Asynchronous_Select_Body --\n    ----------------------------------------"}, {"sha": "4a22d20f39ce3bb1f8d2f0ca31f1f3c9674c6330", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -258,18 +258,6 @@ package Exp_Disp is\n    function Is_Expanded_Dispatching_Call (N : Node_Id) return Boolean;\n    --  Returns true if N is the expanded code of a dispatching call\n \n-   function Is_Predefined_Dispatching_Operation (E : Entity_Id) return Boolean;\n-   --  Ada 2005 (AI-251): Determines if E is a predefined primitive operation\n-\n-   function Is_Predefined_Internal_Operation (E : Entity_Id) return Boolean;\n-   --  Similar to the previous one, but excludes stream operations, because\n-   --  these may be overridden, and need extra formals, like user-defined\n-   --  operations.\n-\n-   function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean;\n-   --  Ada 2005 (AI-345): Returns True if E is one of the predefined primitives\n-   --  required to implement interfaces.\n-\n    function Make_DT (Typ : Entity_Id; N : Node_Id := Empty) return List_Id;\n    --  Expand the declarations for the Dispatch Table. The node N is the\n    --  declaration that forces the generation of the table. It is used to place"}, {"sha": "546b56f2e17224db244c04859f1469a00d3f42ab", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -27,7 +27,6 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Exp_Atag; use Exp_Atag;\n-with Exp_Disp; use Exp_Disp;\n with Exp_Strm; use Exp_Strm;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;"}, {"sha": "0df747b911854f8a0f58f6c936f580178287dcee", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -33,7 +33,6 @@ with Elists;    use Elists;\n with Errout;    use Errout;\n with Exp_Ch3;   use Exp_Ch3;\n with Exp_Ch7;   use Exp_Ch7;\n-with Exp_Disp;  use Exp_Disp;\n with Exp_Pakd;  use Exp_Pakd;\n with Exp_Util;  use Exp_Util;\n with Exp_Tss;   use Exp_Tss;"}, {"sha": "70ea9cf6169b8b3dcf3eb6e6e9c79151a3547a09", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -28,7 +28,6 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n-with Exp_Disp; use Exp_Disp;\n with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;"}, {"sha": "8f7ba5cb01aeacb7f7cfbd8006cdd2da9f720be9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -30,7 +30,6 @@ with Einfo;     use Einfo;\n with Elists;    use Elists;\n with Errout;    use Errout;\n with Expander;  use Expander;\n-with Exp_Disp;  use Exp_Disp;\n with Fname;     use Fname;\n with Fname.UF;  use Fname.UF;\n with Freeze;    use Freeze;"}, {"sha": "dd0af492f8b59b92bc5945786ef5ff9abf08b203", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -36,7 +36,6 @@ with Exp_Ch6;   use Exp_Ch6;\n with Exp_Ch7;   use Exp_Ch7;\n with Exp_Ch9;   use Exp_Ch9;\n with Exp_Dbug;  use Exp_Dbug;\n-with Exp_Disp;  use Exp_Disp;\n with Exp_Tss;   use Exp_Tss;\n with Exp_Util;  use Exp_Util;\n with Freeze;    use Freeze;"}, {"sha": "4987f93b9a8bd3a1fa17456213036e2079d4bffc", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -2525,6 +2525,13 @@ package body Sem_Elab is\n          Region    : Node_Id;\n \n       begin\n+         --  Nothing to do for predefined primitives because they are artifacts\n+         --  of tagged type expansion and cannot override source primitives.\n+\n+         if Is_Predefined_Dispatching_Operation (Prim) then\n+            return;\n+         end if;\n+\n          Body_Id := Corresponding_Body (Prim_Decl);\n \n          --  Nothing to do when the primitive does not have a corresponding"}, {"sha": "52fd14f3619e12cb56a27fdea85ec58be44bee43", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -34,7 +34,6 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Erroutc;  use Erroutc;\n with Exp_Ch11; use Exp_Ch11;\n-with Exp_Disp; use Exp_Disp;\n with Exp_Util; use Exp_Util;\n with Fname;    use Fname;\n with Freeze;   use Freeze;\n@@ -16094,6 +16093,109 @@ package body Sem_Util is\n       end if;\n    end Is_Potentially_Unevaluated;\n \n+   -----------------------------------------\n+   -- Is_Predefined_Dispatching_Operation --\n+   -----------------------------------------\n+\n+   function Is_Predefined_Dispatching_Operation\n+     (E : Entity_Id) return Boolean\n+   is\n+      TSS_Name : TSS_Name_Type;\n+\n+   begin\n+      if not Is_Dispatching_Operation (E) then\n+         return False;\n+      end if;\n+\n+      Get_Name_String (Chars (E));\n+\n+      --  Most predefined primitives have internally generated names. Equality\n+      --  must be treated differently; the predefined operation is recognized\n+      --  as a homogeneous binary operator that returns Boolean.\n+\n+      if Name_Len > TSS_Name_Type'Last then\n+         TSS_Name :=\n+           TSS_Name_Type\n+             (Name_Buffer (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n+\n+         if Nam_In (Chars (E), Name_uAssign, Name_uSize)\n+           or else\n+             (Chars (E) = Name_Op_Eq\n+               and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n+           or else TSS_Name = TSS_Deep_Adjust\n+           or else TSS_Name = TSS_Deep_Finalize\n+           or else TSS_Name = TSS_Stream_Input\n+           or else TSS_Name = TSS_Stream_Output\n+           or else TSS_Name = TSS_Stream_Read\n+           or else TSS_Name = TSS_Stream_Write\n+           or else Is_Predefined_Interface_Primitive (E)\n+         then\n+            return True;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Is_Predefined_Dispatching_Operation;\n+\n+   ---------------------------------------\n+   -- Is_Predefined_Interface_Primitive --\n+   ---------------------------------------\n+\n+   function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean is\n+   begin\n+      --  In VM targets we don't restrict the functionality of this test to\n+      --  compiling in Ada 2005 mode since in VM targets any tagged type has\n+      --  these primitives.\n+\n+      return (Ada_Version >= Ada_2005 or else not Tagged_Type_Expansion)\n+        and then Nam_In (Chars (E), Name_uDisp_Asynchronous_Select,\n+                                    Name_uDisp_Conditional_Select,\n+                                    Name_uDisp_Get_Prim_Op_Kind,\n+                                    Name_uDisp_Get_Task_Id,\n+                                    Name_uDisp_Requeue,\n+                                    Name_uDisp_Timed_Select);\n+   end Is_Predefined_Interface_Primitive;\n+\n+   ---------------------------------------\n+   -- Is_Predefined_Internal_Operation  --\n+   ---------------------------------------\n+\n+   function Is_Predefined_Internal_Operation\n+     (E : Entity_Id) return Boolean\n+   is\n+      TSS_Name : TSS_Name_Type;\n+\n+   begin\n+      if not Is_Dispatching_Operation (E) then\n+         return False;\n+      end if;\n+\n+      Get_Name_String (Chars (E));\n+\n+      --  Most predefined primitives have internally generated names. Equality\n+      --  must be treated differently; the predefined operation is recognized\n+      --  as a homogeneous binary operator that returns Boolean.\n+\n+      if Name_Len > TSS_Name_Type'Last then\n+         TSS_Name :=\n+           TSS_Name_Type\n+             (Name_Buffer (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n+\n+         if Nam_In (Chars (E), Name_uSize, Name_uAssign)\n+           or else\n+             (Chars (E) = Name_Op_Eq\n+               and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n+           or else TSS_Name = TSS_Deep_Adjust\n+           or else TSS_Name = TSS_Deep_Finalize\n+           or else Is_Predefined_Interface_Primitive (E)\n+         then\n+            return True;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Is_Predefined_Internal_Operation;\n+\n    --------------------------------\n    -- Is_Preelaborable_Aggregate --\n    --------------------------------"}, {"sha": "5007bb644874ece5aab9760e5010007f50b5ed4a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a500fd767dd9f7afff999dd1d9c8bbb6dbef268/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7a500fd767dd9f7afff999dd1d9c8bbb6dbef268", "patch": "@@ -1842,6 +1842,18 @@ package Sem_Util is\n    --  persistent. A private type is potentially persistent if the full type\n    --  is potentially persistent.\n \n+   function Is_Predefined_Dispatching_Operation (E : Entity_Id) return Boolean;\n+   --  Ada 2005 (AI-251): Determines if E is a predefined primitive operation\n+\n+   function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean;\n+   --  Ada 2005 (AI-345): Returns True if E is one of the predefined primitives\n+   --  required to implement interfaces.\n+\n+   function Is_Predefined_Internal_Operation (E : Entity_Id) return Boolean;\n+   --  Similar to the previous one, but excludes stream operations, because\n+   --  these may be overridden, and need extra formals, like user-defined\n+   --  operations.\n+\n    function Is_Preelaborable_Aggregate (Aggr : Node_Id) return Boolean;\n    --  Determine whether aggregate Aggr violates the restrictions of\n    --  preelaborable constructs as defined in ARM 10.2.1(5-9)."}]}