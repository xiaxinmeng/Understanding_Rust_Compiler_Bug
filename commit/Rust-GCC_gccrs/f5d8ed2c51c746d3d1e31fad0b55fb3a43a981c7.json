{"sha": "f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkOGVkMmM1MWM3NDZkM2QxZTMxZmFkMGI1NWZiM2E0M2E5ODFjNw==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2007-09-12T08:48:44Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-09-12T08:48:44Z"}, "message": "tree-vect-analyze.c (vect_analyze_data_ref_dependence): Distinguish between positive and negative dependence distance using DDR_REVERSED_P.\n\n\t* tree-vect-analyze.c (vect_analyze_data_ref_dependence): Distinguish\n\tbetween positive and negative dependence distance using DDR_REVERSED_P.\n\nFrom-SVN: r128420", "tree": {"sha": "dc82958fed7fc3a20d97d4f7113b549d2c444dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc82958fed7fc3a20d97d4f7113b549d2c444dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7323b6643e2f929f49b68582217e9a9b2182df57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7323b6643e2f929f49b68582217e9a9b2182df57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7323b6643e2f929f49b68582217e9a9b2182df57"}], "stats": {"total": 128, "additions": 111, "deletions": 17}, "files": [{"sha": "2c1b6d5c3a1c730c21cfcbb629657ac1ca906365", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -1,3 +1,9 @@\n+2007-09-12  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/32377\n+\t* tree-vect-analyze.c (vect_analyze_data_ref_dependence): Distinguish\n+\tbetween positive and negative dependence distance using DDR_REVERSED_P.\n+\n 2007-09-12  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/33373"}, {"sha": "cce7b21c2e49649b6d00e53476ed0ec63e226ee1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -1,3 +1,13 @@\n+2007-09-12  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/32377\n+\t* gcc.dg/vect/no-vfa-vect-102a.c: Change the test to check positive\n+\tdependence distance.\n+\t* gcc.dg/vect/vect-outer-5.c, gcc.dg/vect/no-vfa-vect-102.c,\n+\tgcc.dg/vect/vect-104.c, no-vfa-vect-dv-2.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-depend-1.c,\n+\tgfortran.dg/vect/no-vfa-pr32377.f90: New.\n+\n 2007-09-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/33382"}, {"sha": "e49633e02536cc1b805afbfdc9fa76a6816b03f7", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -32,13 +32,13 @@ int main1 (int x, int y) {\n   /* Not vectorizable: distance 1.  */\n   for (i = 0; i < N - 1; i++)\n     {\n-       *((int *)p + x + i) = *((int *)p + x + i + 1);\n+       *((int *)p + x + i + 1) = *((int *)p + x + i);\n     }\n \n   /* check results: */\n   for (i = 0; i < N; i++)\n     {\n-       if (p->a[i] != b[i])\n+       if (p->a[i] != 1) \n          abort();\n     }\n   return 0;"}, {"sha": "da8afaa1a7d4c4c49486ddba57329720eff51c9d", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -32,13 +32,13 @@ int main1 (int x, int y) {\n   /* Not vectorizable: distance 1.  */\n   for (i = 0; i < N - 1; i++)\n     {\n-       p->a[x + i] = p->a[x + i + 1];\n+       p->a[x + i + 1] = p->a[x + i];\n     }\n \n   /* check results: */\n   for (i = 0; i < N; i++)\n     {\n-       if (p->a[i] != b[i])\n+       if (p->a[i] != 1)\n          abort();\n     }\n   return 0;"}, {"sha": "b8731a0475f3655629872b42183710a9f8dd66da", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-1.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 17\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+  int ia[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48};\n+  int res[N] = {12,24,36,48,60,72,84,96,108,120,132,144,156,168,180,192,48};\n+\n+  /* Not vectorizable due to data dependence: dependence distance 1.  */ \n+  for (i = 0; i < N - 1; i++)\n+    {\n+      ia[i+1] = ia[i] * 4;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N - 1; i++)\n+    {\n+      if (ia[i] != 0)\n+        abort ();\n+    } \n+\n+  /* Vectorizable. Dependence distance -1.  */\n+  for (i = 0; i < N - 1; i++)\n+    {\n+      ib[i] = ib[i+1] * 4;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N - 1; i++)\n+    {\n+      if (ib[i] != res[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"dependence distance >= VF or negative\" 1 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "1a49ef26911adf98803072f24851c57c949fa7ad", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-dv-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-dv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-dv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-dv-2.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -15,6 +15,7 @@ int main ()\n   int B[N];\n   int C[N];\n   int D[N];\n+  int E[N] = {0,1,2,0};\n \n   int i, j;\n \n@@ -57,13 +58,13 @@ int main ()\n   /* Not vectorizable */\n   for (i = 0; i < 4; i++)\n     {\n-      C[i] = C[i+3];\n+      C[i+3] = C[i];\n     }\n \n   /* check results:  */\n   for (i = 0; i < 4; i++)\n     {\n-      if (C[i] != D[i+3])\n+      if (C[i] != E[i])\n \tabort ();\n     }\n "}, {"sha": "5ea2f801a2857116925185c22224392b53c45b24", "filename": "gcc/testsuite/gcc.dg/vect/vect-104.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -14,7 +14,7 @@ struct extraction\n \n static int a[N][N] = {{1,2,3},{4,5,6},{7,8,9}};\n static int b[N][N] = {{17,24,7},{0,2,3},{4,31,82}};\n-static int c[N][N] = {{1,2,3},{4,6,8},{8,9,9}};\n+static int c[N][N] = {{1,2,3},{4,5,5},{5,5,5}};\n volatile int foo;\n \n __attribute__ ((noinline))\n@@ -39,7 +39,7 @@ int main1 (int x) {\n   {\n     for (j = 0; j < N; j++)\n     {\n-       *((int *)p + x + i + j) = *((int *)p + x + i + j + 1);\n+       *((int *)p + x + i + j + 1) = *((int *)p + x + i + j);\n     }\n   }\n "}, {"sha": "c9fc1e0f40b6389ae84a77edff48d5891e8c84cd", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-5.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -1,5 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n \n+#include <stdio.h>\n #include <stdarg.h>\n #include <signal.h>\n #include \"tree-vect.h\"\n@@ -16,6 +17,7 @@ int main1 ()\n   float B[N] __attribute__ ((__aligned__(16)));\n   float C[N] __attribute__ ((__aligned__(16)));\n   float D[N] __attribute__ ((__aligned__(16)));\n+  float E[4] = {0,1,2,480};\n   float s;\n \n   int i, j;\n@@ -53,16 +55,13 @@ int main1 ()\n       s = 0;\n       for (j=0; j<N; j+=4)\n \ts += C[j];\n-      B[i] = B[i+3] + s;\n+      B[i+3] = B[i] + s;\n     }\n \n   /* check results:  */\n   for (i = 0; i < 4; i++)\n     {\n-      s = 0;\n-      for (j=0; j<N; j+=4)\n-\ts += C[j];\n-      if (B[i] != D[i+3] + s)\n+      if (B[i] != E[i])\n \tabort ();\n     }\n "}, {"sha": "4842190c4ec9fa4c3576f8f6f29287e9fa2f3d9f", "filename": "gcc/testsuite/gfortran.dg/vect/no-vfa-pr32377.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fno-vfa-pr32377.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fno-vfa-pr32377.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fno-vfa-pr32377.f90?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+\n+subroutine s243(ntimes,ld,n,ctime,dtime,a,b,c,d,e,aa,bb,cc)\n+      \n+integer ntimes,ld,n,i,nl\n+real a(n),b(n),c(n),d(n),e(n),aa(ld,n),bb(ld,n),cc(ld,n)\n+real t1,t2,chksum,ctime,dtime,cs1d\n+  b(:n-1)= b(:n-1)+(c(:n-1)+e(:n-1))*d(:n-1)\n+  a(:n-1)= b(:n-1)+a(2:n)*d(:n-1)\n+  return\n+end\n+\n+! Currently only the first loop gets vectorized. \n+! For the second loop vectorization fails because of \n+! \"affine-affine test failed: missing iteration counts.\"\n+! See PR 32377 for more details.    \n+\n+! { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail *-*-* }  } }\n+! { dg-final { cleanup-tree-dump \"vect\" } }\n+"}, {"sha": "c9f559be7cd30c586d1dde3fa4562bf1c292ddf3", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=f5d8ed2c51c746d3d1e31fad0b55fb3a43a981c7", "patch": "@@ -1212,12 +1212,15 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n           continue;\n \t}\n \n-      if (abs (dist) >= vectorization_factor)\n+      if (abs (dist) >= vectorization_factor \n+          || (dist > 0 && DDR_REVERSED_P (ddr)))\n \t{\n-\t  /* Dependence distance does not create dependence, as far as vectorization\n-\t     is concerned, in this case.  */\n+\t  /* Dependence distance does not create dependence, as far as \n+\t     vectorization is concerned, in this case. If DDR_REVERSED_P the \n+\t     order of the data-refs in DDR was reversed (to make distance\n+\t     vector positive), and the actual distance is negative.  */\n \t  if (vect_print_dump_info (REPORT_DR_DETAILS))\n-\t    fprintf (vect_dump, \"dependence distance >= VF.\");\n+\t    fprintf (vect_dump, \"dependence distance >= VF or negative.\");\n \t  continue;\n \t}\n "}]}