{"sha": "024da3094e3bac0ed63bf0955e70557e61fc17f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0ZGEzMDk0ZTNiYWMwZWQ2M2JmMDk1NWU3MDU1N2U2MWZjMTdmOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-08T20:27:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-08T20:27:11Z"}, "message": "re PR c++/63485 (ICE: canonical types differ for identical types A<const wchar_t [3]>::type and const char_type [3])\n\n\tPR c++/63485\n\t* tree.c (build_cplus_array_type): Look for a type with no\n\ttypedef-name or attributes.\n\nFrom-SVN: r216012", "tree": {"sha": "fdd80a0b18875b8093c9d38891fa6b1311ac41d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdd80a0b18875b8093c9d38891fa6b1311ac41d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/024da3094e3bac0ed63bf0955e70557e61fc17f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024da3094e3bac0ed63bf0955e70557e61fc17f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/024da3094e3bac0ed63bf0955e70557e61fc17f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024da3094e3bac0ed63bf0955e70557e61fc17f9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f193c7230cb09fac61b03a1a5f090bc978ccff73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f193c7230cb09fac61b03a1a5f090bc978ccff73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f193c7230cb09fac61b03a1a5f090bc978ccff73"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "975193d6a127a4fd215db44894117327f362a525", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024da3094e3bac0ed63bf0955e70557e61fc17f9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024da3094e3bac0ed63bf0955e70557e61fc17f9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=024da3094e3bac0ed63bf0955e70557e61fc17f9", "patch": "@@ -1,5 +1,9 @@\n 2014-10-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/63485\n+\t* tree.c (build_cplus_array_type): Look for a type with no\n+\ttypedef-name or attributes.\n+\n \t* call.c (call_copy_ctor): New.\n \t(build_over_call): Use it to avoid infinite recursion on invalid code.\n "}, {"sha": "5b11d5cc8f003222c709db0a349b86411479d293", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024da3094e3bac0ed63bf0955e70557e61fc17f9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024da3094e3bac0ed63bf0955e70557e61fc17f9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=024da3094e3bac0ed63bf0955e70557e61fc17f9", "patch": "@@ -853,7 +853,9 @@ build_cplus_array_type (tree elt_type, tree index_type)\n     {\n       tree m = t;\n       for (t = m; t; t = TYPE_NEXT_VARIANT (t))\n-\tif (TREE_TYPE (t) == elt_type)\n+\tif (TREE_TYPE (t) == elt_type\n+\t    && TYPE_NAME (t) == NULL_TREE\n+\t    && TYPE_ATTRIBUTES (t) == NULL_TREE)\n \t  break;\n       if (!t)\n \t{"}, {"sha": "e43cb9d965ac2d5017125d95b2eb7a4d78054e79", "filename": "gcc/testsuite/g++.dg/template/array29.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024da3094e3bac0ed63bf0955e70557e61fc17f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024da3094e3bac0ed63bf0955e70557e61fc17f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray29.C?ref=024da3094e3bac0ed63bf0955e70557e61fc17f9", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/63485\n+\n+template <typename C> struct A\n+{\n+  typedef C type;\n+};\n+template <class> class B\n+{\n+};\n+template <class Range> void as_literal (Range &);\n+template <typename> struct C\n+{\n+  typedef wchar_t char_type;\n+  const char_type on_full_year_placeholder[3];\n+  void\n+  on_extended_iso_date ()\n+  {\n+    B<A<wchar_t const[3]>::type> a;\n+    as_literal (on_full_year_placeholder);\n+  }\n+};\n+template <typename> struct date_time_format_parser_callback : C<wchar_t>\n+{\n+};\n+template <typename BaseT> struct D\n+{\n+  typedef typename BaseT::char_type char_type;\n+  char_type\n+  parse (const char_type *, const char_type *,\n+         typename BaseT::callback_type p3)\n+  {\n+    p3.on_extended_iso_date ();\n+  }\n+};\n+struct F\n+{\n+  typedef date_time_format_parser_callback<wchar_t> callback_type;\n+  typedef wchar_t char_type;\n+};\n+template <typename CharT, typename ParserT, typename CallbackT>\n+void\n+parse_format (CharT *p1, ParserT p2, CallbackT p3)\n+{\n+  CharT p = p2.parse (&p, p1, p3);\n+}\n+template <typename CharT>\n+void\n+parse_date_time_format (const CharT *, const CharT *p2,\n+                        date_time_format_parser_callback<CharT> &p3)\n+{\n+  D<F> b;\n+  parse_format (p2, b, p3);\n+}\n+template void\n+parse_date_time_format (const wchar_t *, const wchar_t *,\n+                        date_time_format_parser_callback<wchar_t> &);"}]}