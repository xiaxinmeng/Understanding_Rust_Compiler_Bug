{"sha": "75555da78d42ce001a9bc680036ac8a43589e444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1NTVkYTc4ZDQyY2UwMDFhOWJjNjgwMDM2YWM4YTQzNTg5ZTQ0NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-07T21:21:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-07T21:21:57Z"}, "message": "[multiple changes]\n\n\n2000-07-07   brent verner  <brent@rcfile.org>\n\n\t* testsuite/27_io/istream_unformatted.cc (test05): New test.\n\n2000-07-07  Benjamin Kosnik  <bkoz@gnu.org>\n\n\t* bits/istream.tcc (istream::getline): Minor tweaks.\n\nFrom-SVN: r34913", "tree": {"sha": "7515d1f91f1fae7752b729d907ed6efec514d40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7515d1f91f1fae7752b729d907ed6efec514d40a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75555da78d42ce001a9bc680036ac8a43589e444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75555da78d42ce001a9bc680036ac8a43589e444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75555da78d42ce001a9bc680036ac8a43589e444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75555da78d42ce001a9bc680036ac8a43589e444/comments", "author": null, "committer": null, "parents": [{"sha": "dd1ee41e67d4814d49786a12b2a51136bf0442c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1ee41e67d4814d49786a12b2a51136bf0442c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1ee41e67d4814d49786a12b2a51136bf0442c2"}], "stats": {"total": 162, "additions": 129, "deletions": 33}, "files": [{"sha": "d2438e1eb0d4fdd0ba661d91275554a6177e8ed7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75555da78d42ce001a9bc680036ac8a43589e444/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75555da78d42ce001a9bc680036ac8a43589e444/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75555da78d42ce001a9bc680036ac8a43589e444", "patch": "@@ -1,3 +1,11 @@\n+2000-07-07   brent verner  <brent@rcfile.org> \n+\n+\t* testsuite/27_io/istream_unformatted.cc (test05): New test.\n+\n+2000-07-07  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* bits/istream.tcc (istream::getline): Minor tweaks.\n+\n 2000-07-07  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* docs/download.html:  Mention gcc_update."}, {"sha": "370bbe789636f99fe73088c4ea73a50182a8cbf0", "filename": "libstdc++-v3/bits/istream.tcc", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75555da78d42ce001a9bc680036ac8a43589e444/libstdc%2B%2B-v3%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75555da78d42ce001a9bc680036ac8a43589e444/libstdc%2B%2B-v3%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fistream.tcc?ref=75555da78d42ce001a9bc680036ac8a43589e444", "patch": "@@ -503,10 +503,9 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  const int_type __eof = traits_type::eof();\n-\t  int_type __bufval;\n  \t  try {\n-\t    __bufval = this->rdbuf()->sbumpc();\n+\t    const int_type __eof = traits_type::eof();\n+\t    int_type __bufval = this->rdbuf()->sbumpc();\n \t    // 27.6.1.1 paragraph 3\n \t    if (__bufval != __eof)\n \t      {\n@@ -537,10 +536,10 @@ namespace std {\n       if (__cerb && __n > 1) \n \t{\n \t  try {\n-\t    int_type __idelim = traits_type::to_int_type(__delim);\n+\t    const int_type __idelim = traits_type::to_int_type(__delim);\n+\t    const int_type __eof = traits_type::eof();\n \t    __streambuf_type* __sb = this->rdbuf();\n \t    int_type __c = __sb->sbumpc();\t\n-\t    const int_type __eof = traits_type::eof();\n \t    bool __testdelim = __c == __idelim;\n \t    bool __testeof =  __c == __eof;\n \t    \n@@ -580,12 +579,12 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  __streambuf_type* __this_sb = this->rdbuf();\n \t  int_type __c;\n+\t  __streambuf_type* __this_sb = this->rdbuf();\n \t  try {\n-\t    int_type __idelim = traits_type::to_int_type(__delim);\n-\t    __c = __this_sb->sbumpc();\n+\t    const int_type __idelim = traits_type::to_int_type(__delim);\n \t    const int_type __eof = traits_type::eof();\t      \n+\t    __c = __this_sb->sbumpc();\n \t    bool __testdelim = __c == __idelim;\n \t    bool __testeof =  __c == __eof;\n \t    bool __testput = true;\n@@ -627,30 +626,49 @@ namespace std {\n       if (__cerb) \n \t{\n \t  try {\n-\t    int_type __idelim = traits_type::to_int_type(__delim);\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    int_type __c = __sb->sbumpc();\n+\t    const int_type __idelim = traits_type::to_int_type(__delim);\n \t    const int_type __eof = traits_type::eof();\n-\t    bool __testdelim = __c == __idelim;\n-\t    bool __testeof =  __c == __eof;\n-\t    \n-\t    while (_M_gcount < __n - 1 && !__testeof && !__testdelim)\n+\t    __streambuf_type* __sb = this->rdbuf();\n+\t    bool __testdelim = false;\n+\t    bool __testeof = false;\n+\n+\t    // This is completely idiotic, but attempts to recreate\n+\t    // the smoke-filled air of the committee meeting where\n+\t    // getline was defined. It's unspecified for __n == 1,\n+\t    // what happens to the extracted char if it is not a\n+\t    // delimiter or EOF. Assume it's not extracted, for the\n+\t    // time being. . . \n+\t    if (__n == 1)\n \t      {\n-\t\t*__s++ = traits_type::to_char_type(__c);\n-\t\t++_M_gcount;\n-\t\t__c = __sb->sbumpc();\n-\t\t__testeof = __c == __eof;\n+\t\tint_type __c = __sb->sgetc();\n \t\t__testdelim = __c == __idelim;\n+\t\t__testeof = __c == __eof;\n+\t\tif (__testdelim)\n+\t\t  {\n+\t\t    ++_M_gcount;\n+\t\t    __sb->sbumpc();\n+\t\t  }\n \t      }\n-\t    if (_M_gcount == __n - 1 && !__testeof && !__testdelim)\n+\t    else\n \t      {\n-\t\t__sb->sputbackc(traits_type::to_char_type(__c));\n-\t\tthis->setstate(ios_base::failbit);\n-\t      }\t    \n-\t    if (__testdelim)\n-\t      ++_M_gcount;\n+\t\twhile (_M_gcount < __n - 1 && !__testdelim && !__testeof)\n+\t\t  {\n+\t\t    int_type __c = __sb->sbumpc();\n+\t\t    __testdelim = __c == __idelim;\n+\t\t    __testeof = __c == __eof;\n+\t\t    if (__testdelim)\n+\t\t      ++_M_gcount;\n+\t\t    else if (!__testeof)\n+\t\t      {\n+\t\t\t*__s++ = traits_type::to_char_type(__c);\n+\t\t\t++_M_gcount;\n+\t\t      }\n+\t\t  }\n+\t      }\n \t    if (__testeof)\n \t      this->setstate(ios_base::eofbit);\n+\t    else if (!__testdelim && _M_gcount == __n - 1)\n+\t      this->setstate(ios_base::failbit);\n \t  }\n \t  catch(exception& __fail){\n \t    // 27.6.1.3 paragraph 1\n@@ -661,7 +679,7 @@ namespace std {\n \t  }\n \t}\n       *__s = char_type(NULL);\n-      if (!_M_gcount || _M_gcount == __n - 1)\n+      if (!_M_gcount)\n \tthis->setstate(ios_base::failbit);\n       return *this;\n     }\n@@ -676,10 +694,10 @@ namespace std {\n       if (__cerb && __n > 0) \n \t{\n \t  try {\n-\t    int_type __idelim = traits_type::to_int_type(__delim);\n+\t    const int_type __idelim = traits_type::to_int_type(__delim);\n+\t    const int_type __eof = traits_type::eof();\n \t    __streambuf_type* __sb = this->rdbuf();\n \t    int_type __c = __sb->sbumpc();\t\n-\t    const int_type __eof = traits_type::eof();\n \t    bool __testdelim = __c == __idelim;\n \t    bool __testeof =  __c == __eof;\n \t    \t\t\n@@ -743,9 +761,9 @@ namespace std {\n \t  if (__n > 0)\n \t    {\n \t      try {\n+\t\tconst int_type __eof = traits_type::eof();\n \t\t__streambuf_type* __sb = this->rdbuf();\n \t\tint_type __c = __sb->sbumpc();\t\n-\t\tconst int_type __eof = traits_type::eof();\n \t\tbool __testeof =  __c == __eof;\n \t\t\n \t\twhile (_M_gcount < __n - 1 && !__testeof)\n@@ -847,12 +865,12 @@ namespace std {\n     basic_istream<_CharT, _Traits>::\n     unget(void)\n     {\n-      const int_type __eof = traits_type::eof();\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n \t  try {\n+\t    const int_type __eof = traits_type::eof();\n \t    __streambuf_type* __sb = this->rdbuf();\n \t    if (!__sb || __eof == __sb->sungetc())\n \t      this->setstate(ios_base::badbit);\t\t    "}, {"sha": "56b86a58346a767e06ceb7e4997cb2b3acb7198f", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75555da78d42ce001a9bc680036ac8a43589e444/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75555da78d42ce001a9bc680036ac8a43589e444/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=75555da78d42ce001a9bc680036ac8a43589e444", "patch": "@@ -24,7 +24,10 @@\n #include <sstream>\n #include <fstream>\n #ifdef DEBUG_ASSERT\n-  #include <assert.h>\n+#include <cassert>\n+#  define VERIFY(fn) assert(fn)\n+#else\n+#  define VERIFY(fn) \n #endif\n \n bool test01() {\n@@ -317,7 +320,7 @@ bool test03(void)\n }\n \n // http://sourceware.cygnus.com/ml/libstdc++/2000-q1/msg00177.html\n-void test06()\n+void test04()\n {\n   bool test = true;\n \n@@ -345,12 +348,79 @@ void test06()\n #endif\n }\n \n+// http://sourceware.cygnus.com/ml/libstdc++/2000-07/msg00003.html\n+bool test05()\n+{\n+\n+  const char* charray = \"\n+a\n+aa\n+aaa\n+aaaa\n+aaaaa\n+aaaaaa\n+aaaaaaa\n+aaaaaaaa\n+aaaaaaaaa\n+aaaaaaaaaa\n+aaaaaaaaaaa\n+aaaaaaaaaaaa\n+aaaaaaaaaaaaa\n+aaaaaaaaaaaaaa\n+\";\n+\n+  bool test = true;\n+  const std::streamsize it = 5;\n+  std::streamsize br = 0;\n+  char tmp[it];\n+  std::stringbuf sb(charray, std::ios_base::in);\n+  std::istream ifs(&sb);\n+  std::streamsize blen = strlen(charray);\n+  VERIFY(ifs);\n+  while(ifs.getline(tmp, it) || ifs.gcount())\n+    {\n+      br += ifs.gcount();\n+      if(ifs.eof())\n+        {\n+          // Just sanity checks to make sure we've extracted the same\n+          // number of chars that were in the file.\n+          VERIFY(br == blen);\n+          // Also, we should only set the failbit if we could\n+          // _extract_ no chars from the stream, i.e. the first read\n+          // returned EOF. \n+          VERIFY(ifs.fail() && ifs.gcount() == 0);\n+        }\n+      else if(ifs.fail())\n+        {\n+\t  // either\n+\t  // -> extracted no characters\n+\t  // or\n+\t  // -> n - 1 characters are stored\n+          VERIFY(strlen(tmp) == it - 1);\n+          ifs.clear(ifs.rdstate() & ~std::ios::failbit);\n+          VERIFY(ifs);\n+          continue;\n+        }\n+      else \n+        {\n+\t  // -> strlen(__s) < n - 1 \n+\t  // -> delimiter was seen -> gcount() > strlen(__s)\n+          VERIFY(ifs.gcount() > strlen(tmp));\n+          VERIFY(it - 1 > strlen(tmp));\n+          continue;\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n-  test06();\n+  test04();\n+  test05();\n   return 0;\n }\n "}]}