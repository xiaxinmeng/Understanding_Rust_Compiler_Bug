{"sha": "142cd70f506a783ba163de1d61ebf5a8bf28ad73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQyY2Q3MGY1MDZhNzgzYmExNjNkZTFkNjFlYmY1YThiZjI4YWQ3Mw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-04-24T08:25:28Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-04-24T08:25:28Z"}, "message": "s390.md (\"*cmp<mode>_ccs_0_ibm\", [...]): Insn definitions removed.\n\n2007-04-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.md (\"*cmp<mode>_ccs_0_ibm\", \"*cmp<mode>_ccs_ibm\",\n\t\"fix_trunc<BFP:mode><GPR:mode>2_ieee\", \"fix_truncdfsi2_ibm\",\n\t\"floatsidf2_ibm\", \"floatsisf2\", \"truncdfsf2_ieee\", \"truncdfsf2_ibm\",\n\t\"*trunctfdf2_ieee\", \"*trunctfdf2_ibm\", \"*trunctfsf2_ieee\",\n\t\"*trunctfsf2_ibm\", \"extendsfdf2_ieee\", \"extendsfdf2_ibm\",\n\t\"*extenddftf2_ieee\", \"*extenddftf2_ibm\", \"*extendsftf2_ieee\",\n\t\"*extendsftf2_ibm\", \"*add<mode>3\", \"*add<mode>3_ibm\", \"*sub<mode>3_ibm\",\n\t\"*mul<mode>3\", \"*mul<mode>3_ibm\", \"*div<mode>3\", \"*div<mode>3_ibm\",\n\t\"*neg<mode>2_ibm\", \"*abs<mode>2_ibm\"): Insn definitions removed.\n\t(\"fix_trunc<BFP:mode><GPR:mode>2_bfp\", \"floatsi<mode>2\",\n\t\"truncdfsf2\", \"trunctf<mode>2\", \"add<mode>3\", \"sub<mode>3\",\n\t\"mul<mode>3\", \"div<mode>3\"): Insn definitions added.\n\t(\"fixuns_trunc<BFP:mode><GPR:mode>2\", \"fix_trunc<mode>di2\",\n\t\"fix_trunc<mode>si2\"): gen_fix_trunc<BFP:mode><GPR:mode>2_ieee renamed\n\tto gen_fix_trunc<BFP:mode><GPR:mode>2_bfp.\n\t(\"fix_truncdfsi2\", \"floatsitf2\", \"truncdfsf2\", \"trunctfdf2\",\n\t\"trunctfsf2\", \"extendsfdf2\", \"extenddftf2\", \"extendsftf2\", \"add<mode>3\",\n\t\"sub<mode>3\", \"mul<mode>3\", \"div<mode>3\"): Expander removed.\n\t(\"fix_trunc<mode>si2\", \"extend<DSF:mode><BFP:mode>2\"): Expander added.\n\t* config/s390/s390.h (TARGET_IBM_FLOAT, TARGET_IEEE_FLOAT,\n\tTARGET_FLOAT_FORMAT): Macro definitions removed.\n\t(FP_REGNO_P): No special case for !TARGET_IEEE_FLOAT anymore.\n\t* config/s390/s390.c (struct processor_costs, z900_cost, z990_cost,\n\tz9_109_cost): Remove fields for hexfloat instructions: dxr, ddr and der.\n\t(s390_rtx_costs): Remove !TARGET_IEEE_FLOAT special branches.\n\t(s390_gen_rtx_const_DI): Function removed.\n\t* config/s390/s390-protos.h (s390_gen_rtx_const_DI): Prototype removed.\n\nFrom-SVN: r124097", "tree": {"sha": "f8c0df76838531316375b36e89ca11943e8977eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c0df76838531316375b36e89ca11943e8977eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/142cd70f506a783ba163de1d61ebf5a8bf28ad73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142cd70f506a783ba163de1d61ebf5a8bf28ad73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/142cd70f506a783ba163de1d61ebf5a8bf28ad73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142cd70f506a783ba163de1d61ebf5a8bf28ad73/comments", "author": null, "committer": null, "parents": [{"sha": "aeed4133ae44ea4861779bfa96b22fcd8c951102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeed4133ae44ea4861779bfa96b22fcd8c951102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeed4133ae44ea4861779bfa96b22fcd8c951102"}], "stats": {"total": 615, "additions": 103, "deletions": 512}, "files": [{"sha": "fc6f3bc5fc649df66ea109e729d35eab0beae571", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=142cd70f506a783ba163de1d61ebf5a8bf28ad73", "patch": "@@ -1,3 +1,33 @@\n+2007-04-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"*cmp<mode>_ccs_0_ibm\", \"*cmp<mode>_ccs_ibm\",\n+\t\"fix_trunc<BFP:mode><GPR:mode>2_ieee\", \"fix_truncdfsi2_ibm\",\n+\t\"floatsidf2_ibm\", \"floatsisf2\", \"truncdfsf2_ieee\", \"truncdfsf2_ibm\",\n+\t\"*trunctfdf2_ieee\", \"*trunctfdf2_ibm\", \"*trunctfsf2_ieee\",\n+\t\"*trunctfsf2_ibm\", \"extendsfdf2_ieee\", \"extendsfdf2_ibm\",\n+\t\"*extenddftf2_ieee\", \"*extenddftf2_ibm\", \"*extendsftf2_ieee\",\n+\t\"*extendsftf2_ibm\", \"*add<mode>3\", \"*add<mode>3_ibm\", \"*sub<mode>3_ibm\",\n+\t\"*mul<mode>3\", \"*mul<mode>3_ibm\", \"*div<mode>3\", \"*div<mode>3_ibm\",\n+\t\"*neg<mode>2_ibm\", \"*abs<mode>2_ibm\"): Insn definitions removed.\n+\t(\"fix_trunc<BFP:mode><GPR:mode>2_bfp\", \"floatsi<mode>2\",\n+\t\"truncdfsf2\", \"trunctf<mode>2\", \"add<mode>3\", \"sub<mode>3\",\n+\t\"mul<mode>3\", \"div<mode>3\"): Insn definitions added.\n+\t(\"fixuns_trunc<BFP:mode><GPR:mode>2\", \"fix_trunc<mode>di2\",\n+\t\"fix_trunc<mode>si2\"): gen_fix_trunc<BFP:mode><GPR:mode>2_ieee renamed\n+\tto gen_fix_trunc<BFP:mode><GPR:mode>2_bfp.\n+\t(\"fix_truncdfsi2\", \"floatsitf2\", \"truncdfsf2\", \"trunctfdf2\",\n+\t\"trunctfsf2\", \"extendsfdf2\", \"extenddftf2\", \"extendsftf2\", \"add<mode>3\",\n+\t\"sub<mode>3\", \"mul<mode>3\", \"div<mode>3\"): Expander removed.\n+\t(\"fix_trunc<mode>si2\", \"extend<DSF:mode><BFP:mode>2\"): Expander added.\n+\t* config/s390/s390.h (TARGET_IBM_FLOAT, TARGET_IEEE_FLOAT,\n+\tTARGET_FLOAT_FORMAT): Macro definitions removed.\n+\t(FP_REGNO_P): No special case for !TARGET_IEEE_FLOAT anymore.\n+\t* config/s390/s390.c (struct processor_costs, z900_cost, z990_cost,\n+\tz9_109_cost): Remove fields for hexfloat instructions: dxr, ddr and der.\n+\t(s390_rtx_costs): Remove !TARGET_IEEE_FLOAT special branches.\n+\t(s390_gen_rtx_const_DI): Function removed.\n+\t* config/s390/s390-protos.h (s390_gen_rtx_const_DI): Prototype removed.\n+\n 2007-04-24  Richard Sandiford  <richard@codesourcery.com>\n \n \t* optabs.c (set_conv_libfunc): Prefer libgcc2's __ffsMM2 functions"}, {"sha": "2c866000e3a9019992b96d2babf33341e4867989", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=142cd70f506a783ba163de1d61ebf5a8bf28ad73", "patch": "@@ -107,7 +107,6 @@ extern void print_operand (FILE *, rtx, int);\n extern void s390_output_pool_entry (rtx, enum machine_mode, unsigned int);\n extern void s390_trampoline_template (FILE *);\n extern void s390_initialize_trampoline (rtx, rtx, rtx);\n-extern rtx s390_gen_rtx_const_DI (int, int);\n extern int s390_agen_dep_p (rtx, rtx);\n extern rtx s390_load_got (void);\n extern rtx s390_get_thread_pointer (void);"}, {"sha": "1721971fb1eff9d15787aa3fa57d9db8de52d661", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=142cd70f506a783ba163de1d61ebf5a8bf28ad73", "patch": "@@ -81,11 +81,8 @@ struct processor_costs\n   const int maebr;    /* cost of multiply and add in SFmode.  */\n   /* division */\n   const int dxbr;\n-  const int dxr;\n   const int ddbr;\n-  const int ddr;\n   const int debr;\n-  const int der;\n   const int dlgr;\n   const int dlr;\n   const int dr;\n@@ -118,11 +115,8 @@ struct processor_costs z900_cost =\n   COSTS_N_INSNS (18),    /* MADBR */\n   COSTS_N_INSNS (13),    /* MAEBR */\n   COSTS_N_INSNS (134),   /* DXBR */\n-  COSTS_N_INSNS (135),   /* DXR */\n   COSTS_N_INSNS (30),    /* DDBR */\n-  COSTS_N_INSNS (30),    /* DDR  */\n   COSTS_N_INSNS (27),    /* DEBR */\n-  COSTS_N_INSNS (26),    /* DER  */\n   COSTS_N_INSNS (220),   /* DLGR */\n   COSTS_N_INSNS (34),    /* DLR */\n   COSTS_N_INSNS (34),    /* DR */\n@@ -153,11 +147,8 @@ struct processor_costs z990_cost =\n   COSTS_N_INSNS (1),     /* MADBR */\n   COSTS_N_INSNS (1),     /* MAEBR */\n   COSTS_N_INSNS (60),    /* DXBR */\n-  COSTS_N_INSNS (72),    /* DXR */\n   COSTS_N_INSNS (40),    /* DDBR */\n-  COSTS_N_INSNS (44),    /* DDR  */\n-  COSTS_N_INSNS (26),    /* DDBR */\n-  COSTS_N_INSNS (28),    /* DER  */\n+  COSTS_N_INSNS (26),    /* DEBR */\n   COSTS_N_INSNS (176),   /* DLGR */\n   COSTS_N_INSNS (31),    /* DLR */\n   COSTS_N_INSNS (31),    /* DR */\n@@ -188,11 +179,8 @@ struct processor_costs z9_109_cost =\n   COSTS_N_INSNS (1),     /* MADBR */\n   COSTS_N_INSNS (1),     /* MAEBR */\n   COSTS_N_INSNS (60),    /* DXBR */\n-  COSTS_N_INSNS (72),    /* DXR */\n   COSTS_N_INSNS (40),    /* DDBR */\n-  COSTS_N_INSNS (37),    /* DDR  */\n-  COSTS_N_INSNS (26),    /* DDBR */\n-  COSTS_N_INSNS (28),    /* DER  */\n+  COSTS_N_INSNS (26),    /* DEBR */\n   COSTS_N_INSNS (30),    /* DLGR */\n   COSTS_N_INSNS (23),    /* DLR */\n   COSTS_N_INSNS (23),    /* DR */\n@@ -2185,7 +2173,7 @@ s390_rtx_costs (rtx x, int code, int outer_code, int *total)\n       /* Check for multiply and add.  */\n       if ((GET_MODE (x) == DFmode || GET_MODE (x) == SFmode)\n \t  && GET_CODE (XEXP (x, 0)) == MULT\n-\t  && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD)\n+\t  && TARGET_HARD_FLOAT && TARGET_FUSED_MADD)\n \t{\n \t  /* This is the multiply and add case.  */\n \t  if (GET_MODE (x) == DFmode)\n@@ -2292,24 +2280,15 @@ s390_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t*total = s390_cost->dlr;\n       else if (GET_MODE (x) == SFmode)\n \t{\n-\t  if (TARGET_IEEE_FLOAT)\n-\t    *total = s390_cost->debr;\n-\t  else /* TARGET_IBM_FLOAT */\n-\t    *total = s390_cost->der;\n+\t  *total = s390_cost->debr;\n \t}\n       else if (GET_MODE (x) == DFmode)\n \t{\n-\t  if (TARGET_IEEE_FLOAT)\n-\t    *total = s390_cost->ddbr;\n-\t  else /* TARGET_IBM_FLOAT */\n-\t    *total = s390_cost->ddr;\n+\t  *total = s390_cost->ddbr;\n \t}\n       else if (GET_MODE (x) == TFmode)\n \t{\n-\t  if (TARGET_IEEE_FLOAT)\n-\t    *total = s390_cost->dxbr;\n-\t  else /* TARGET_IBM_FLOAT */\n-\t    *total = s390_cost->dxr;\n+\t  *total = s390_cost->dxbr;\n \t}\n       return false;\n \n@@ -8389,28 +8368,6 @@ s390_initialize_trampoline (rtx addr, rtx fnaddr, rtx cxt)\n \t\t   plus_constant (addr, (TARGET_64BIT ? 24 : 12)))), fnaddr);\n }\n \n-/* Return rtx for 64-bit constant formed from the 32-bit subwords\n-   LOW and HIGH, independent of the host word size.  */\n-\n-rtx\n-s390_gen_rtx_const_DI (int high, int low)\n-{\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-  HOST_WIDE_INT val;\n-  val = (HOST_WIDE_INT)high;\n-  val <<= 32;\n-  val |= (HOST_WIDE_INT)low;\n-\n-  return GEN_INT (val);\n-#else\n-#if HOST_BITS_PER_WIDE_INT >= 32\n-  return immed_double_const ((HOST_WIDE_INT)low, (HOST_WIDE_INT)high, DImode);\n-#else\n-  gcc_unreachable ();\n-#endif\n-#endif\n-}\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}, {"sha": "f95dae2605d65f71315756944ebc42c64e400cab", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=142cd70f506a783ba163de1d61ebf5a8bf28ad73", "patch": "@@ -103,10 +103,6 @@ extern enum processor_flags s390_arch_flags;\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* ??? Once this actually works, it could be made a runtime option.  */\n-#define TARGET_IBM_FLOAT           0\n-#define TARGET_IEEE_FLOAT          1\n-\n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_DEFAULT             (MASK_64BIT | MASK_ZARCH)\n #else\n@@ -225,10 +221,6 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n   (LEVEL == SAVE_FUNCTION ? VOIDmode    \\\n   : LEVEL == SAVE_NONLOCAL ? (TARGET_64BIT ? OImode : TImode) : Pmode)\n \n-/* Define target floating point format.  */\n-#define TARGET_FLOAT_FORMAT \\\n-  (TARGET_IEEE_FLOAT? IEEE_FLOAT_FORMAT : IBM_FLOAT_FORMAT)\n-\n \n /* Type layout.  */\n \n@@ -285,7 +277,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n /* Standard register usage.  */\n #define GENERAL_REGNO_P(N)\t((int)(N) >= 0 && (N) < 16)\n #define ADDR_REGNO_P(N)\t\t((N) >= 1 && (N) < 16)\n-#define FP_REGNO_P(N)\t\t((N) >= 16 && (N) < (TARGET_IEEE_FLOAT? 32 : 20))\n+#define FP_REGNO_P(N)\t\t((N) >= 16 && (N) < 32)\n #define CC_REGNO_P(N)\t\t((N) == 33)\n #define FRAME_REGNO_P(N)\t((N) == 32 || (N) == 34 || (N) == 35)\n #define ACCESS_REGNO_P(N)\t((N) == 36 || (N) == 37)"}, {"sha": "4190535e62c31516cccb57e9695af03ca6d24e32", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 66, "deletions": 453, "changes": 519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142cd70f506a783ba163de1d61ebf5a8bf28ad73/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=142cd70f506a783ba163de1d61ebf5a8bf28ad73", "patch": "@@ -796,46 +796,23 @@\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:FP 0 \"register_operand\" \"f\")\n                  (match_operand:FP 1 \"const0_operand\"   \"\")))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lt<xde><bt>r\\t%0,%0\"\n    [(set_attr \"op_type\" \"RRE\")\n     (set_attr \"type\"  \"fsimp<bfp>\")])\n \n-; ltxr, ltdr, lter\n-(define_insn \"*cmp<mode>_ccs_0_ibm\"\n-  [(set (reg CC_REGNUM)\n-        (compare (match_operand:BFP 0 \"register_operand\" \"f\")\n-                 (match_operand:BFP 1 \"const0_operand\" \"\")))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"lt<xde>r\\t%0,%0\"\n-   [(set_attr \"op_type\" \"<RRe>\")\n-    (set_attr \"type\"  \"fsimp<mode>\")])\n-\n ; cxtr, cxbr, cdbr, cebr, cxb, cdb, ceb, cxbtr, cdbtr\n (define_insn \"*cmp<mode>_ccs\"\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:FP 0 \"register_operand\" \"f,f\")\n                  (match_operand:FP 1 \"general_operand\"  \"f,<Rf>\")))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"@\n    c<xde><bt>r\\t%0,%1\n    c<xde>b\\t%0,%1\"\n    [(set_attr \"op_type\" \"RRE,RXE\")\n     (set_attr \"type\"  \"fsimp<bfp>\")])\n \n-; cxr, cdr, cer, cx, cd, ce\n-(define_insn \"*cmp<mode>_ccs_ibm\"\n-  [(set (reg CC_REGNUM)\n-        (compare (match_operand:BFP 0 \"register_operand\" \"f,f\")\n-                 (match_operand:BFP 1 \"general_operand\" \"f,<Rf>\")))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   c<xde>r\\t%0,%1\n-   c<xde>\\t%0,%1\"\n-   [(set_attr \"op_type\" \"<RRe>,<RXe>\")\n-    (set_attr \"type\"  \"fsimp<mode>\")])\n-\n-\n ;;\n ;;- Move instructions.\n ;;\n@@ -2304,7 +2281,7 @@\n                      UNSPEC_TDC_INSN))\n    (set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (unspec:SI [(reg:CCZ CC_REGNUM)] UNSPEC_CCZ_TO_INT))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n {\n   operands[2] = GEN_INT (S390_TDC_INFINITY);\n })\n@@ -2318,7 +2295,7 @@\n   [(set (reg:CCZ CC_REGNUM)\n         (unspec:CCZ [(match_operand:BFP 0 \"register_operand\" \"f\") \n                      (match_operand:SI 1 \"const_int_operand\")] UNSPEC_TDC_INSN))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"tc<xde>b\\t%0,%1\"\n    [(set_attr \"op_type\" \"RXE\")\n     (set_attr \"type\"  \"fsimp<mode>\")])\n@@ -3265,7 +3242,7 @@\n (define_expand \"fixuns_trunc<BFP:mode><GPR:mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"\")\n         (unsigned_fix:GPR (match_operand:BFP 1 \"register_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n {\n   rtx label1 = gen_label_rtx ();\n   rtx label2 = gen_label_rtx ();\n@@ -3281,12 +3258,12 @@\n   emit_jump_insn (gen_blt (label1));\n   emit_insn (gen_sub<BFP:mode>3 (temp, operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (sub, <BFP:MODE>mode)));\n-  emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_ieee (operands[0], temp,\n+  emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0], temp,\n \tGEN_INT (7)));\n   emit_jump (label2);\n \n   emit_label (label1);\n-  emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_ieee (operands[0],\n+  emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0],\n \toperands[1], GEN_INT (5)));\n   emit_label (label2);\n   DONE;\n@@ -3295,21 +3272,21 @@\n (define_expand \"fix_trunc<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (fix:DI (match_operand:DSF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_64BIT && TARGET_HARD_FLOAT\"\n {\n   operands[1] = force_reg (<MODE>mode, operands[1]);\n-  emit_insn (gen_fix_trunc<mode>di2_ieee (operands[0], operands[1],\n+  emit_insn (gen_fix_trunc<mode>di2_bfp (operands[0], operands[1],\n       GEN_INT (5)));\n   DONE;\n })\n \n ; cgxbr, cgdbr, cgebr, cfxbr, cfdbr, cfebr\n-(define_insn \"fix_trunc<BFP:mode><GPR:mode>2_ieee\"\n+(define_insn \"fix_trunc<BFP:mode><GPR:mode>2_bfp\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n         (fix:GPR (match_operand:BFP 1 \"register_operand\" \"f\")))\n    (unspec:GPR [(match_operand:GPR 2 \"immediate_operand\" \"K\")] UNSPEC_ROUND)\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"c<GPR:gf><BFP:xde>br\\t%0,%h2,%1\"\n   [(set_attr \"op_type\" \"RRE\")\n    (set_attr \"type\"    \"ftoi\")])\n@@ -3351,254 +3328,72 @@\n \t\t   (fix:GPR (match_operand:TF 1 \"register_operand\" \"\")))\n \t      (unspec:GPR [(const_int 5)] UNSPEC_ROUND)\n \t      (clobber (reg:CC CC_REGNUM))])]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\")\n-\n-;\n-; fix_truncdfsi2 instruction pattern(s).\n-;\n-\n-(define_expand \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-{\n-  if (TARGET_IBM_FLOAT)\n-    {\n-      /* This is the algorithm from POP chapter A.5.7.2.  */\n-\n-      rtx temp   = assign_stack_local (BLKmode, 8, BITS_PER_WORD);\n-      rtx two31r = s390_gen_rtx_const_DI (0x4f000000, 0x08000000);\n-      rtx two32  = s390_gen_rtx_const_DI (0x4e000001, 0x00000000);\n-\n-      operands[1] = force_reg (DFmode, operands[1]);\n-      emit_insn (gen_fix_truncdfsi2_ibm (operands[0], operands[1],\n-\t\t\t\t\t two31r, two32, temp));\n-    }\n-  else\n-    {\n-      operands[1] = force_reg (DFmode, operands[1]);\n-      emit_insn (gen_fix_truncdfsi2_ieee (operands[0], operands[1], GEN_INT (5)));\n-    }\n-\n-  DONE;\n-})\n-\n-(define_insn \"fix_truncdfsi2_ibm\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"+f\")))\n-   (use (match_operand:DI 2 \"immediate_operand\" \"m\"))\n-   (use (match_operand:DI 3 \"immediate_operand\" \"m\"))\n-   (use (match_operand:BLK 4 \"memory_operand\" \"m\"))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-{\n-   output_asm_insn (\"sd\\t%1,%2\", operands);\n-   output_asm_insn (\"aw\\t%1,%3\", operands);\n-   output_asm_insn (\"std\\t%1,%4\", operands);\n-   output_asm_insn (\"xi\\t%N4,128\", operands);\n-   return \"l\\t%0,%N4\";\n-}\n-  [(set_attr \"length\" \"20\")])\n+  \"\")\n \n ;\n-; fix_truncsfsi2 instruction pattern(s).\n+; fix_trunc(df|sf)si2 instruction pattern(s).\n ;\n \n-(define_expand \"fix_truncsfsi2\"\n+(define_expand \"fix_trunc<mode>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n+        (fix:SI (match_operand:DSF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n {\n-  if (TARGET_IBM_FLOAT)\n-    {\n-      /* Convert to DFmode and then use the POP algorithm.  */\n-      rtx temp = gen_reg_rtx (DFmode);\n-      emit_insn (gen_extendsfdf2 (temp, operands[1]));\n-      emit_insn (gen_fix_truncdfsi2 (operands[0], temp));\n-    }\n-  else\n-    {\n-      operands[1] = force_reg (SFmode, operands[1]);\n-      emit_insn (gen_fix_truncsfsi2_ieee (operands[0], operands[1], GEN_INT (5)));\n-    }\n-\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n+  emit_insn (gen_fix_trunc<mode>si2_bfp (operands[0], operands[1], GEN_INT (5)));\n   DONE;\n })\n \n ;\n-; float(si|di)(tf|df|sf)2 instruction pattern(s).\n+; float(si|di)(tf|df|sf|td|dd)2 instruction pattern(s).\n ;\n \n ; cxgbr, cdgbr, cegbr, cxgtr, cdgtr\n (define_insn \"floatdi<mode>2\"\n   [(set (match_operand:FP 0 \"register_operand\" \"=f\")\n         (float:FP (match_operand:DI 1 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_64BIT && TARGET_HARD_FLOAT\"\n   \"c<xde>g<bt>r\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")\n    (set_attr \"type\"    \"itof\" )])\n \n ; cxfbr, cdfbr, cefbr\n-(define_insn \"floatsi<mode>2_ieee\"\n+(define_insn \"floatsi<mode>2\"\n   [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (float:BFP (match_operand:SI 1 \"register_operand\" \"d\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"c<xde>fbr\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")\n    (set_attr \"type\"   \"itof\" )])\n \n \n-;\n-; floatsi(tf|df)2 instruction pattern(s).\n-;\n-\n-(define_expand \"floatsitf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-        (float:TF (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\")\n-\n-(define_expand \"floatsidf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-        (float:DF (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-{\n-  if (TARGET_IBM_FLOAT)\n-    {\n-      /* This is the algorithm from POP chapter A.5.7.1.  */\n-\n-      rtx temp  = assign_stack_local (BLKmode, 8, BITS_PER_WORD);\n-      rtx two31 = s390_gen_rtx_const_DI (0x4e000000, 0x80000000);\n-\n-      emit_insn (gen_floatsidf2_ibm (operands[0], operands[1], two31, temp));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"floatsidf2_ibm\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (float:DF (match_operand:SI 1 \"register_operand\" \"d\")))\n-   (use (match_operand:DI 2 \"immediate_operand\" \"m\"))\n-   (use (match_operand:BLK 3 \"memory_operand\" \"m\"))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-{\n-   output_asm_insn (\"st\\t%1,%N3\", operands);\n-   output_asm_insn (\"xi\\t%N3,128\", operands);\n-   output_asm_insn (\"mvc\\t%O3(4,%R3),%2\", operands);\n-   output_asm_insn (\"ld\\t%0,%3\", operands);\n-   return \"sd\\t%0,%2\";\n-}\n-  [(set_attr \"length\" \"20\")])\n-\n-;\n-; floatsisf2 instruction pattern(s).\n-;\n-\n-(define_expand \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-        (float:SF (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-{\n-  if (TARGET_IBM_FLOAT)\n-    {\n-      /* Use the POP algorithm to convert to DFmode and then truncate.  */\n-      rtx temp = gen_reg_rtx (DFmode);\n-      emit_insn (gen_floatsidf2 (temp, operands[1]));\n-      emit_insn (gen_truncdfsf2 (operands[0], temp));\n-      DONE;\n-    }\n-})\n-\n ;\n ; truncdfsf2 instruction pattern(s).\n ;\n \n-(define_expand \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-        (float_truncate:SF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n-(define_insn \"truncdfsf2_ieee\"\n+(define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n         (float_truncate:SF (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"ledbr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"   \"ftruncdf\")])\n \n-(define_insn \"truncdfsf2_ibm\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-        (float_truncate:SF (match_operand:DF 1 \"nonimmediate_operand\" \"f,R\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   ler\\t%0,%1\n-   le\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR,RX\")\n-   (set_attr \"type\"   \"floadsf\")])\n-\n ;\n-; trunctfdf2 instruction pattern(s).\n+; trunctf(df|sf)2 instruction pattern(s).\n ;\n \n-(define_expand \"trunctfdf2\"\n-  [(parallel \n-    [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t  (float_truncate:DF (match_operand:TF 1 \"register_operand\" \"\")))\n-     (clobber (match_scratch:TF 2 \"=f\"))])]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n-(define_insn \"*trunctfdf2_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (float_truncate:DF (match_operand:TF 1 \"register_operand\" \"f\")))\n+; ldxbr, lexbr\n+(define_insn \"trunctf<mode>2\"\n+  [(set (match_operand:DSF 0 \"register_operand\" \"=f\")\n+        (float_truncate:DSF (match_operand:TF 1 \"register_operand\" \"f\")))\n    (clobber (match_scratch:TF 2 \"=f\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"ldxbr\\t%2,%1\\;ldr\\t%0,%2\"\n+  \"TARGET_HARD_FLOAT\"\n+  \"l<xde>xbr\\t%2,%1\\;l<xde>r\\t%0,%2\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"type\"   \"ftrunctf\")])   \n \n-(define_insn \"*trunctfdf2_ibm\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (float_truncate:DF (match_operand:TF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:TF 2 \"=f\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"ldxr\\t%2,%1\\;ldr\\t%0,%2\"\n-  [(set_attr \"length\"  \"4\")\n-   (set_attr \"type\"   \"ftrunctf\")])\n-\n-;\n-; trunctfsf2 instruction pattern(s).\n-;\n-\n-(define_expand \"trunctfsf2\"\n-  [(parallel \n-    [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t  (float_truncate:SF (match_operand:TF 1 \"register_operand\" \"f\")))\n-     (clobber (match_scratch:TF 2 \"=f\"))])]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n-(define_insn \"*trunctfsf2_ieee\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (float_truncate:SF (match_operand:TF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:TF 2 \"=f\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"lexbr\\t%2,%1\\;ler\\t%0,%2\"\n-  [(set_attr \"length\"  \"6\")\n-   (set_attr \"type\"   \"ftrunctf\")])\n-\n-(define_insn \"*trunctfsf2_ibm\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (float_truncate:SF (match_operand:TF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:TF 2 \"=f\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"lexr\\t%2,%1\\;ler\\t%0,%2\"\n-  [(set_attr \"length\"  \"6\")\n-   (set_attr \"type\"   \"ftrunctf\")])\n-\n ;\n ; trunctddd2 and truncddsd2 instruction pattern(s).\n ;\n@@ -3621,101 +3416,20 @@\n    (set_attr \"type\"    \"fsimptf\")])\n \n ;\n-; extendsfdf2 instruction pattern(s).\n-;\n-\n-(define_expand \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-{\n-  if (TARGET_IBM_FLOAT)\n-    {\n-      emit_insn (gen_extendsfdf2_ibm (operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"extendsfdf2_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\"  \"f,R\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"@\n-   ldebr\\t%0,%1\n-   ldeb\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"   \"fsimpsf, floadsf\")])\n-\n-(define_insn \"extendsfdf2_ibm\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"f,R\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   sdr\\t%0,%0\\;ler\\t%0,%1\n-   sdr\\t%0,%0\\;le\\t%0,%1\"\n-  [(set_attr \"length\"   \"4,6\")\n-   (set_attr \"type\"     \"floadsf\")])\n-\n-;\n-; extenddftf2 instruction pattern(s).\n+; extend(sf|df)(df|tf)2 instruction pattern(s).\n ;\n \n-(define_expand \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-        (float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n-(define_insn \"*extenddftf2_ieee\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-        (float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"f,R\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"@\n-   lxdbr\\t%0,%1\n-   lxdb\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"   \"fsimptf, floadtf\")])\n-\n-(define_insn \"*extenddftf2_ibm\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-        (float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"f,R\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   lxdr\\t%0,%1\n-   lxd\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"   \"fsimptf, floadtf\")])\n-\n-;\n-; extendsftf2 instruction pattern(s).\n-;\n-\n-(define_expand \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-        (float_extend:TF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n-(define_insn \"*extendsftf2_ieee\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-        (float_extend:TF (match_operand:SF 1 \"nonimmediate_operand\" \"f,R\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"@\n-   lxebr\\t%0,%1\n-   lxeb\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"   \"fsimptf, floadtf\")])\n-\n-(define_insn \"*extendsftf2_ibm\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-        (float_extend:TF (match_operand:SF 1 \"nonimmediate_operand\" \"f,R\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n+; ldebr, ldeb, lxdbr, lxdb, lxebr, lxeb\n+(define_insn \"extend<DSF:mode><BFP:mode>2\"\n+  [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n+        (float_extend:BFP (match_operand:DSF 1 \"nonimmediate_operand\"  \"f,R\")))]\n+  \"TARGET_HARD_FLOAT\n+   && GET_MODE_SIZE (<BFP:MODE>mode) > GET_MODE_SIZE (<DSF:MODE>mode)\"\n   \"@\n-   lxer\\t%0,%1\n-   lxe\\t%0,%1\"\n+   l<BFP:xde><DSF:xde>br\\t%0,%1\n+   l<BFP:xde><DSF:xde>b\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"   \"fsimptf, floadtf\")])\n+   (set_attr \"type\"   \"fsimp<BFP:mode>, fload<BFP:mode>\")])\n \n ;\n ; extendddtd2 and extendsddd2 instruction pattern(s).\n@@ -4063,22 +3777,13 @@\n ; add(tf|df|sf|td|dd)3 instruction pattern(s).\n ;\n \n-(define_expand \"add<mode>3\"\n-  [(parallel\n-    [(set (match_operand:FP 0 \"register_operand\" \"\")\n-          (plus:FP (match_operand:FP 1 \"nonimmediate_operand\" \"\")\n-                    (match_operand:FP 2 \"general_operand\" \"\")))\n-     (clobber (reg:CC CC_REGNUM))])]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n ; axbr, adbr, aebr, axb, adb, aeb, adtr, axtr\n-(define_insn \"*add<mode>3\"\n+(define_insn \"add<mode>3\"\n   [(set (match_operand:FP 0 \"register_operand\"              \"=f,   f\")\n         (plus:FP (match_operand:FP 1 \"nonimmediate_operand\" \"%<f0>,0\")\n \t\t (match_operand:FP 2 \"general_operand\"      \" f,<Rf>\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    a<xde><bt>r\\t%0,<op1>%2\n    a<xde>b\\t%0,%2\"\n@@ -4093,7 +3798,7 @@\n \t\t (match_operand:FP 3 \"const0_operand\" \"\")))\n    (set (match_operand:FP 0 \"register_operand\" \"=f,f\")\n \t(plus:FP (match_dup 1) (match_dup 2)))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"@\n    a<xde><bt>r\\t%0,<op1>%2\n    a<xde>b\\t%0,%2\"\n@@ -4107,26 +3812,13 @@\n \t\t\t   (match_operand:FP 2 \"general_operand\"      \" f,<Rf>\"))\n \t\t (match_operand:FP 3 \"const0_operand\" \"\")))\n    (clobber (match_scratch:FP 0 \"=f,f\"))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"@\n    a<xde><bt>r\\t%0,<op1>%2\n    a<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n    (set_attr \"type\"     \"fsimp<bfp>\")])\n \n-; axr, adr, aer, ax, ad, ae\n-(define_insn \"*add<mode>3_ibm\"\n-  [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n-        (plus:BFP (match_operand:BFP 1 \"nonimmediate_operand\" \"%0,0\")\n-                  (match_operand:BFP 2 \"general_operand\" \"f,<Rf>\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   a<xde>r\\t%0,%2\n-   a<xde>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"<RRe>,<RXe>\")\n-   (set_attr \"type\"     \"fsimp<mode>\")])\n-\n \n ;;\n ;;- Subtract instructions.\n@@ -4406,22 +4098,13 @@\n ; sub(tf|df|sf|td|dd)3 instruction pattern(s).\n ;\n \n-(define_expand \"sub<mode>3\"\n-  [(parallel\n-    [(set (match_operand:FP 0 \"register_operand\" \"\")\n-          (minus:FP (match_operand:FP 1 \"register_operand\" \"\")\n-                     (match_operand:FP 2 \"general_operand\" \"\")))\n-     (clobber (reg:CC CC_REGNUM))])]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n ; sxbr, sdbr, sebr, sxb, sdb, seb, sxtr, sdtr\n-(define_insn \"*sub<mode>3\"\n+(define_insn \"sub<mode>3\"\n   [(set (match_operand:FP 0 \"register_operand\"            \"=f,  f\")\n         (minus:FP (match_operand:FP 1 \"register_operand\" \"<f0>,0\")\n-                   (match_operand:FP 2 \"general_operand\"  \"f,<Rf>\")))\n+                  (match_operand:FP 2 \"general_operand\"  \"f,<Rf>\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    s<xde><bt>r\\t%0,<op1>%2\n    s<xde>b\\t%0,%2\"\n@@ -4432,11 +4115,11 @@\n (define_insn \"*sub<mode>3_cc\"\n   [(set (reg CC_REGNUM)\n \t(compare (minus:FP (match_operand:FP 1 \"nonimmediate_operand\" \"<f0>,0\")\n-\t\t\t    (match_operand:FP 2 \"general_operand\"      \"f,<Rf>\"))\n+                           (match_operand:FP 2 \"general_operand\"      \"f,<Rf>\"))\n \t\t (match_operand:FP 3 \"const0_operand\" \"\")))\n    (set (match_operand:FP 0 \"register_operand\" \"=f,f\")\n \t(minus:FP (match_dup 1) (match_dup 2)))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"@\n    s<xde><bt>r\\t%0,<op1>%2\n    s<xde>b\\t%0,%2\"\n@@ -4450,26 +4133,13 @@\n \t\t\t   (match_operand:FP 2 \"general_operand\"      \"f,<Rf>\"))\n \t\t (match_operand:FP 3 \"const0_operand\" \"\")))\n    (clobber (match_scratch:FP 0 \"=f,f\"))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"@\n    s<xde><bt>r\\t%0,<op1>%2\n    s<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n    (set_attr \"type\"     \"fsimp<bfp>\")])\n \n-; sxr, sdr, ser, sx, sd, se\n-(define_insn \"*sub<mode>3_ibm\"\n-  [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n-        (minus:BFP (match_operand:BFP 1 \"register_operand\" \"0,0\")\n-                   (match_operand:BFP 2 \"general_operand\" \"f,<Rf>\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   s<xde>r\\t%0,%2\n-   s<xde>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"<RRe>,<RXe>\")\n-   (set_attr \"type\"     \"fsimp<mode>\")])\n-\n \n ;;\n ;;- Conditional add/subtract instructions.\n@@ -4716,44 +4386,25 @@\n ; mul(tf|df|sf|td|dd)3 instruction pattern(s).\n ;\n \n-(define_expand \"mul<mode>3\"\n-  [(set (match_operand:FP 0 \"register_operand\" \"\")\n-        (mult:FP (match_operand:FP 1 \"nonimmediate_operand\" \"\")\n-                  (match_operand:FP 2 \"general_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n ; mxbr mdbr, meebr, mxb, mxb, meeb, mdtr, mxtr\n-(define_insn \"*mul<mode>3\"\n+(define_insn \"mul<mode>3\"\n   [(set (match_operand:FP 0 \"register_operand\"              \"=f,f\")\n         (mult:FP (match_operand:FP 1 \"nonimmediate_operand\" \"%<f0>,0\")\n                  (match_operand:FP 2 \"general_operand\"      \"f,<Rf>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    m<xdee><bt>r\\t%0,<op1>%2\n    m<xdee>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n    (set_attr \"type\"     \"fmul<bfp>\")])\n \n-; mxr, mdr, mer, mx, md, me\n-(define_insn \"*mul<mode>3_ibm\"\n-  [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n-        (mult:BFP (match_operand:BFP 1 \"nonimmediate_operand\" \"%0,0\")\n-                  (match_operand:BFP 2 \"general_operand\" \"f,<Rf>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   m<xde>r\\t%0,%2\n-   m<xde>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"<RRe>,<RXe>\")\n-   (set_attr \"type\"     \"fmul<mode>\")])\n-\n ; maxbr, madbr, maebr, maxb, madb, maeb\n (define_insn \"*fmadd<mode>\"\n   [(set (match_operand:DSF 0 \"register_operand\" \"=f,f\")\n \t(plus:DSF (mult:DSF (match_operand:DSF 1 \"register_operand\" \"%f,f\")\n \t\t\t    (match_operand:DSF 2 \"nonimmediate_operand\"  \"f,R\"))\n \t\t (match_operand:DSF 3 \"register_operand\" \"0,0\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n   \"@\n    ma<xde>br\\t%0,%1,%2\n    ma<xde>b\\t%0,%1,%2\"\n@@ -4766,7 +4417,7 @@\n \t(minus:DSF (mult:DSF (match_operand:DSF 1 \"register_operand\" \"f,f\")\n \t\t\t     (match_operand:DSF 2 \"nonimmediate_operand\"  \"f,R\"))\n \t\t (match_operand:DSF 3 \"register_operand\" \"0,0\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n   \"@\n    ms<xde>br\\t%0,%1,%2\n    ms<xde>b\\t%0,%1,%2\"\n@@ -5195,37 +4846,18 @@\n ; div(df|sf)3 instruction pattern(s).\n ;\n \n-(define_expand \"div<mode>3\"\n-  [(set (match_operand:FP 0 \"register_operand\" \"\")\n-        (div:FP (match_operand:FP 1 \"register_operand\" \"\")\n-                 (match_operand:FP 2 \"general_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"\")\n-\n ; dxbr, ddbr, debr, dxb, ddb, deb, ddtr, dxtr\n-(define_insn \"*div<mode>3\"\n+(define_insn \"div<mode>3\"\n   [(set (match_operand:FP 0 \"register_operand\"          \"=f,f\")\n         (div:FP (match_operand:FP 1 \"register_operand\" \"<f0>,0\")\n                  (match_operand:FP 2 \"general_operand\"  \"f,<Rf>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    d<xde><bt>r\\t%0,<op1>%2\n    d<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n    (set_attr \"type\"     \"fdiv<bfp>\")])\n \n-; dxr, ddr, der, dx, dd, de\n-(define_insn \"*div<mode>3_ibm\"\n-  [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n-        (div:BFP (match_operand:BFP 1 \"register_operand\" \"0,0\")\n-                 (match_operand:BFP 2 \"general_operand\" \"f,<Rf>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"@\n-   d<xde>r\\t%0,%2\n-   d<xde>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"<RRe>,<RXe>\")\n-   (set_attr \"type\"     \"fdiv<mode>\")])\n-\n \n ;;\n ;;- And instructions.\n@@ -6209,7 +5841,7 @@\n                  (match_operand:BFP 2 \"const0_operand\" \"\")))\n    (set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (neg:BFP (match_dup 1)))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lc<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6220,7 +5852,7 @@\n         (compare (neg:BFP (match_operand:BFP 1 \"register_operand\" \"f\"))\n                  (match_operand:BFP 2 \"const0_operand\" \"\")))\n    (clobber (match_scratch:BFP 0 \"=f\"))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lc<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6239,21 +5871,11 @@\n   [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (neg:BFP (match_operand:BFP 1 \"register_operand\" \"f\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"lc<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n \n-; lcxr, lcdr, lcer\n-(define_insn \"*neg<mode>2_ibm\"\n-  [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n-        (neg:BFP (match_operand:BFP 1 \"register_operand\" \"f\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"lc<xde>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"<RRe>\")\n-   (set_attr \"type\"     \"fsimp<mode>\")])\n-\n \n ;;\n ;;- Absolute value instructions.\n@@ -6332,7 +5954,7 @@\n                  (match_operand:BFP 2 \"const0_operand\" \"\")))\n    (set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (abs:BFP (match_dup 1)))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lp<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6343,7 +5965,7 @@\n         (compare (abs:BFP (match_operand:BFP 1 \"register_operand\" \"f\"))\n                  (match_operand:BFP 2 \"const0_operand\" \"\")))\n    (clobber (match_scratch:BFP 0 \"=f\"))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lp<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6362,20 +5984,11 @@\n   [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (abs:BFP (match_operand:BFP 1 \"register_operand\" \"f\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"lp<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n \n-; lpxr, lpdr, lper\n-(define_insn \"*abs<mode>2_ibm\"\n-  [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n-        (abs:BFP (match_operand:BFP 1 \"register_operand\" \"f\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"lp<xde>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"<RRe>\")\n-   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ;;\n ;;- Negated absolute value instructions\n@@ -6447,7 +6060,7 @@\n                  (match_operand:BFP 2 \"const0_operand\" \"\")))\n    (set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (neg:BFP (abs:BFP (match_dup 1))))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"ln<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6458,7 +6071,7 @@\n         (compare (neg:BFP (abs:BFP (match_operand:BFP 1 \"register_operand\" \"f\")))\n                  (match_operand:BFP 2 \"const0_operand\" \"\")))\n    (clobber (match_scratch:BFP 0 \"=f\"))]\n-  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"ln<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6477,7 +6090,7 @@\n   [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n         (neg:BFP (abs:BFP (match_operand:BFP 1 \"register_operand\" \"f\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"ln<xde>br\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n@@ -6509,7 +6122,7 @@\n (define_insn \"sqrt<mode>2\"\n   [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n \t(sqrt:BFP (match_operand:BFP 1 \"general_operand\" \"f,<Rf>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    sq<xde>br\\t%0,%1\n    sq<xde>b\\t%0,%1\""}]}