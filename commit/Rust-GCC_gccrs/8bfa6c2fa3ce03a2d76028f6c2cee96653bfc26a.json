{"sha": "8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmYTZjMmZhM2NlMDNhMmQ3NjAyOGY2YzJjZWU5NjY1M2JmYzI2YQ==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2008-05-20T12:47:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:47:03Z"}, "message": "2008-05-20  Vincent Celier  <celier@adacore.com>\n\n\t* gnatname.adb\n\t(Scan_Args): Rewrite to take into account new switch --and to separate\n\targuments into sections.\n\t(Gnatname): Call Prj.Makr.Initialize, then Prj.Makr.Process for each\n\tsection, then Finalize.\n\nFrom-SVN: r135629", "tree": {"sha": "5ec5160e064936afb50062b8843142999562f98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ec5160e064936afb50062b8843142999562f98d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d677afa9583e31ef0eae98998b29f884fd409d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d677afa9583e31ef0eae98998b29f884fd409d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d677afa9583e31ef0eae98998b29f884fd409d72"}], "stats": {"total": 525, "additions": 373, "deletions": 152}, "files": [{"sha": "dbd7f509312fac8e1fe95ecdbe952147628c46c3", "filename": "gcc/ada/gnatname.adb", "status": "modified", "additions": 373, "deletions": 152, "changes": 525, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a/gcc%2Fada%2Fgnatname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a/gcc%2Fada%2Fgnatname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatname.adb?ref=8bfa6c2fa3ce03a2d76028f6c2cee96653bfc26a", "patch": "@@ -23,6 +23,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Command_Line;  use Ada.Command_Line;\n+with Ada.Text_IO;       use Ada.Text_IO;\n+\n+with GNAT.Dynamic_Tables;\n+with GNAT.OS_Lib;       use GNAT.OS_Lib;\n+\n with Hostparm;\n with Opt;\n with Osint;    use Osint;\n@@ -32,13 +38,12 @@ with Prj.Makr;\n with Switch;   use Switch;\n with Table;\n \n-with Ada.Command_Line;  use Ada.Command_Line;\n-with Ada.Text_IO;       use Ada.Text_IO;\n-with GNAT.Command_Line; use GNAT.Command_Line;\n-with GNAT.OS_Lib;       use GNAT.OS_Lib;\n+with System.Regexp; use System.Regexp;\n \n procedure Gnatname is\n \n+   Subdirs_Switch : constant String := \"--subdirs=\";\n+\n    Usage_Output : Boolean := False;\n    --  Set to True when usage is output, to avoid multiple output\n \n@@ -61,43 +66,30 @@ procedure Gnatname is\n    --  Set to True by -c or -P switch.\n    --  Used to detect multiple -c/-P switches.\n \n-   package Excluded_Patterns is new Table.Table\n+   package Patterns is new GNAT.Dynamic_Tables\n      (Table_Component_Type => String_Access,\n       Table_Index_Type     => Natural,\n       Table_Low_Bound      => 0,\n       Table_Initial        => 10,\n-      Table_Increment      => 100,\n-      Table_Name           => \"Gnatname.Excluded_Patterns\");\n-   --  Table to accumulate the negative patterns\n-\n-   package Foreign_Patterns is new Table.Table\n-     (Table_Component_Type => String_Access,\n+      Table_Increment      => 100);\n+   --  Table to accumulate the patterns\n+\n+   type Argument_Data is record\n+      Directories       : Patterns.Instance;\n+      Name_Patterns     : Patterns.Instance;\n+      Excluded_Patterns : Patterns.Instance;\n+      Foreign_Patterns  : Patterns.Instance;\n+   end record;\n+\n+   package Arguments is new Table.Table\n+     (Table_Component_Type => Argument_Data,\n       Table_Index_Type     => Natural,\n       Table_Low_Bound      => 0,\n       Table_Initial        => 10,\n       Table_Increment      => 100,\n-      Table_Name           => \"Gnatname.Foreign_Patterns\");\n+      Table_Name           => \"Gnatname.Arguments\");\n    --  Table to accumulate the foreign patterns\n \n-   package Patterns is new Table.Table\n-     (Table_Component_Type => String_Access,\n-      Table_Index_Type     => Natural,\n-      Table_Low_Bound      => 0,\n-      Table_Initial        => 10,\n-      Table_Increment      => 100,\n-      Table_Name           => \"Gnatname.Patterns\");\n-   --  Table to accumulate the name patterns\n-\n-   package Source_Directories is new Table.Table\n-     (Table_Component_Type => String_Access,\n-      Table_Index_Type     => Natural,\n-      Table_Low_Bound      => 0,\n-      Table_Initial        => 10,\n-      Table_Increment      => 100,\n-      Table_Name           => \"Gnatname.Source_Directories\");\n-   --  Table to accumulate the source directories specified directly with -d\n-   --  or indirectly with -D.\n-\n    package Preprocessor_Switches is new Table.Table\n      (Table_Component_Type => String_Access,\n       Table_Index_Type     => Natural,\n@@ -129,8 +121,8 @@ procedure Gnatname is\n \n    procedure Add_Source_Directory (S : String) is\n    begin\n-      Source_Directories.Increment_Last;\n-      Source_Directories.Table (Source_Directories.Last) := new String'(S);\n+      Patterns.Append\n+        (Arguments.Table (Arguments.Last).Directories, new String'(S));\n    end Add_Source_Directory;\n \n    ---------------------\n@@ -157,7 +149,7 @@ procedure Gnatname is\n \n    exception\n       when Name_Error =>\n-         Fail (\"cannot open source directory \"\"\" & From_File & '\"');\n+         Fail (\"cannot open source directory file \"\"\" & From_File & '\"');\n    end Get_Directories;\n \n    --------------------\n@@ -181,103 +173,282 @@ procedure Gnatname is\n \n       procedure Check_Version_And_Help is new Check_Version_And_Help_G (Usage);\n \n-      --  Start of processing for Scan_Args\n+      Project_File_Name_Expected : Boolean;\n \n-   begin\n-      --  First check for --version or --help\n+      Pragmas_File_Expected : Boolean;\n \n-      Check_Version_And_Help (\"GNATNAME\", \"2001\");\n+      Directory_Expected : Boolean;\n \n-      --  Now scan the other switches\n-\n-      Initialize_Option_Scan;\n+      Dir_File_Name_Expected : Boolean;\n \n-      --  Scan options first\n+      Foreign_Pattern_Expected : Boolean;\n \n-      loop\n-         case Getopt\n-           (\"-subdirs=! c: d: gnatep=! gnatep! gnateD! eL D: h P: v x: f:\")\n-         is\n-            when ASCII.NUL =>\n-               exit;\n+      Excluded_Pattern_Expected : Boolean;\n \n-            when '-' =>\n-               Subdirs := new String'(Parameter);\n-\n-            when 'c' =>\n-               if File_Set then\n-                  Fail (\"only one -P or -c switch may be specified\");\n-               end if;\n+      procedure Check_Regular_Expression (S : String);\n+      --  Compile string S into a Regexp. Fail if any error.\n \n-               File_Set := True;\n-               File_Path := new String'(Parameter);\n-               Create_Project := False;\n+      -----------------------------\n+      -- Check_Regular_Expression--\n+      -----------------------------\n \n-            when 'd' =>\n-               Add_Source_Directory (Parameter);\n-\n-            when 'D' =>\n-               Get_Directories (Parameter);\n+      procedure Check_Regular_Expression (S : String) is\n+         Dummy : Regexp;\n+         pragma Warnings (Off, Dummy);\n+      begin\n+         Dummy := Compile (S, Glob => True);\n+      exception\n+         when Error_In_Regexp =>\n+            Fail (\"invalid regular expression \"\"\", S, \"\"\"\");\n+      end Check_Regular_Expression;\n+   begin\n+      --  First check for --version or --help\n \n-            when 'e' =>\n-               Opt.Follow_Links_For_Files := True;\n+      Check_Version_And_Help (\"GNATNAME\", \"2001\");\n \n-            when 'f' =>\n-               Foreign_Patterns.Increment_Last;\n-               Foreign_Patterns.Table (Foreign_Patterns.Last) :=\n-                 new String'(Parameter);\n+      --  Now scan the other switches\n \n-            when 'g' =>\n-               Preprocessor_Switches.Increment_Last;\n-               Preprocessor_Switches.Table (Preprocessor_Switches.Last) :=\n-                 new String'('-' & Full_Switch & Parameter);\n+      Project_File_Name_Expected := False;\n+      Pragmas_File_Expected      := False;\n+      Directory_Expected         := False;\n+      Dir_File_Name_Expected     := False;\n+      Foreign_Pattern_Expected   := False;\n+      Excluded_Pattern_Expected  := False;\n+      for Next_Arg in 1 .. Argument_Count loop\n+         declare\n+            Next_Argv : constant String := Argument (Next_Arg);\n+            Arg       : String (1 .. Next_Argv'Length) := Next_Argv;\n \n-            when 'h' =>\n-               Usage_Needed := True;\n+         begin\n+            if Arg'Length > 0 then\n+               if Project_File_Name_Expected then\n+                  --  -P xxx\n+\n+                  if Arg (1) = '-' then\n+                     Fail (\"project file name missing\");\n+\n+                  else\n+                     File_Set       := True;\n+                     File_Path      := new String'(Arg);\n+                     Project_File_Name_Expected := False;\n+                  end if;\n+\n+               elsif Pragmas_File_Expected then\n+                  --  -c file\n+\n+                  File_Set := True;\n+                  File_Path := new String'(Arg);\n+                  Create_Project := False;\n+                  Pragmas_File_Expected := False;\n+\n+               elsif Directory_Expected then\n+                  --  -d xxx\n+\n+                  Add_Source_Directory (Arg);\n+                  Directory_Expected := False;\n+\n+               elsif Dir_File_Name_Expected then\n+                  --  -D xxx\n+\n+                  Get_Directories (Arg);\n+                  Dir_File_Name_Expected := False;\n+\n+               elsif Foreign_Pattern_Expected then\n+                  --  -f xxx\n+\n+                  Patterns.Append\n+                    (Arguments.Table (Arguments.Last).Foreign_Patterns,\n+                     new String'(Arg));\n+                  Check_Regular_Expression (Arg);\n+                  Foreign_Pattern_Expected := False;\n+\n+               elsif Excluded_Pattern_Expected then\n+                  --  -x xxx\n+\n+                  Patterns.Append\n+                    (Arguments.Table (Arguments.Last).Excluded_Patterns,\n+                     new String'(Arg));\n+                  Check_Regular_Expression (Arg);\n+                  Excluded_Pattern_Expected := False;\n+\n+               elsif Arg = \"--and\" then\n+\n+                  --  There must be at least one Ada pattern or one foreign\n+                  --  pattern for the previous section.\n+\n+                  if Patterns.Last\n+                    (Arguments.Table (Arguments.Last).Name_Patterns) = 0\n+                    and then\n+                      Patterns.Last\n+                        (Arguments.Table (Arguments.Last).Foreign_Patterns) = 0\n+                  then\n+                     Usage;\n+                     return;\n+                  end if;\n+\n+                  --  If no directory were specified for the previous section,\n+                  --  then the directory is the project directory.\n+\n+                  if Patterns.Last\n+                    (Arguments.Table (Arguments.Last).Directories) = 0\n+                  then\n+                     Patterns.Append\n+                       (Arguments.Table (Arguments.Last).Directories,\n+                        new String'(\".\"));\n+                  end if;\n+\n+                  --  Add another component in table Arguments and initialize\n+                  --  it.\n+\n+                  Arguments.Increment_Last;\n+\n+                  Patterns.Init\n+                    (Arguments.Table (Arguments.Last).Directories);\n+                  Patterns.Set_Last\n+                    (Arguments.Table (Arguments.Last).Directories, 0);\n+                  Patterns.Init\n+                    (Arguments.Table (Arguments.Last).Name_Patterns);\n+                  Patterns.Set_Last\n+                    (Arguments.Table (Arguments.Last).Name_Patterns, 0);\n+                  Patterns.Init\n+                    (Arguments.Table (Arguments.Last).Excluded_Patterns);\n+                  Patterns.Set_Last\n+                    (Arguments.Table (Arguments.Last).Excluded_Patterns, 0);\n+                  Patterns.Init\n+                    (Arguments.Table (Arguments.Last).Foreign_Patterns);\n+                  Patterns.Set_Last\n+                    (Arguments.Table (Arguments.Last).Foreign_Patterns, 0);\n+\n+               elsif Arg'Length > Subdirs_Switch'Length\n+                 and then Arg (1 .. Subdirs_Switch'Length) = Subdirs_Switch\n+               then\n+                  Subdirs :=\n+                    new String'(Arg (Subdirs_Switch'Length + 1 .. Arg'Last));\n+\n+               elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-c\" then\n+                  if File_Set then\n+                     Fail (\"only one -P or -c switch may be specified\");\n+                  end if;\n+\n+                  if Arg'Length = 2 then\n+                     Pragmas_File_Expected := True;\n+\n+                     if Next_Arg = Argument_Count then\n+                        Fail (\"configuration pragmas file name missing\");\n+                     end if;\n+\n+                  else\n+                     File_Set := True;\n+                     File_Path := new String'(Arg (3 .. Arg'Last));\n+                     Create_Project := False;\n+                  end if;\n+\n+               elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-d\" then\n+                  if Arg'Length = 2 then\n+                     Directory_Expected := True;\n+\n+                     if Next_Arg = Argument_Count then\n+                        Fail (\"directory name missing\");\n+                     end if;\n+\n+                  else\n+                     Add_Source_Directory (Arg (3 .. Arg'Last));\n+                  end if;\n+\n+               elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-D\" then\n+                  if Arg'Length = 2 then\n+                     Dir_File_Name_Expected := True;\n+\n+                     if Next_Arg = Argument_Count then\n+                        Fail (\"directory list file name missing\");\n+                     end if;\n+\n+                  else\n+                     Get_Directories (Arg (3 .. Arg'Last));\n+                  end if;\n+\n+               elsif Arg = \"-eL\" then\n+                  Opt.Follow_Links_For_Files := True;\n+\n+               elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-f\" then\n+                  if Arg'Length = 2 then\n+                     Foreign_Pattern_Expected := True;\n+\n+                     if Next_Arg = Argument_Count then\n+                        Fail (\"foreign pattern missing\");\n+                     end if;\n+\n+                  else\n+                     Patterns.Append\n+                       (Arguments.Table (Arguments.Last).Foreign_Patterns,\n+                        new String'(Arg (3 .. Arg'Last)));\n+                     Check_Regular_Expression (Arg (3 .. Arg'Last));\n+                  end if;\n+\n+               elsif Arg'Length > 7 and then\n+                 (Arg  (1 .. 7) = \"-gnatep\" or else Arg (1 .. 7) = \"-gnateD\")\n+               then\n+\n+                  Preprocessor_Switches.Append (new String'(Arg));\n+\n+               elsif Arg = \"-h\" then\n+                  Usage_Needed := True;\n+\n+               elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-P\" then\n+                  if File_Set then\n+                     Fail (\"only one -c or -P switch may be specified\");\n+                  end if;\n+\n+                  if Arg'Length = 2 then\n+                     if Next_Arg = Argument_Count then\n+                        Fail (\"project file name missing\");\n+\n+                     else\n+                        Project_File_Name_Expected := True;\n+                     end if;\n+\n+                  else\n+                     File_Set       := True;\n+                     File_Path      := new String'(Arg (3 .. Arg'Last));\n+                  end if;\n+\n+                  Create_Project := True;\n+\n+               elsif Arg = \"-v\" then\n+                  if Opt.Verbose_Mode then\n+                     Very_Verbose := True;\n+                  else\n+                     Opt.Verbose_Mode := True;\n+                  end if;\n+\n+               elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-x\" then\n+                  if Arg'Length = 2 then\n+                     Excluded_Pattern_Expected := True;\n \n-            when 'P' =>\n-               if File_Set then\n-                  Fail (\"only one -c or -P switch may be specified\");\n-               end if;\n+                     if Next_Arg = Argument_Count then\n+                        Fail (\"excluded pattern missing\");\n+                     end if;\n \n-               File_Set       := True;\n-               File_Path      := new String'(Parameter);\n-               Create_Project := True;\n+                  else\n+                     Patterns.Append\n+                       (Arguments.Table (Arguments.Last).Excluded_Patterns,\n+                        new String'(Arg (3 .. Arg'Last)));\n+                     Check_Regular_Expression (Arg (3 .. Arg'Last));\n+                  end if;\n+\n+               elsif Arg (1) = '-' then\n+                  Fail (\"wrong switch: \" & Arg);\n \n-            when 'v' =>\n-               if Opt.Verbose_Mode then\n-                  Very_Verbose := True;\n                else\n-                  Opt.Verbose_Mode := True;\n+                  Canonical_Case_File_Name (Arg);\n+                  Patterns.Append\n+                    (Arguments.Table (Arguments.Last).Name_Patterns,\n+                     new String'(Arg));\n+                  Check_Regular_Expression (Arg);\n                end if;\n-\n-            when 'x' =>\n-               Excluded_Patterns.Increment_Last;\n-               Excluded_Patterns.Table (Excluded_Patterns.Last) :=\n-                 new String'(Parameter);\n-\n-            when others =>\n-               null;\n-         end case;\n-      end loop;\n-\n-      --  Now, get the name patterns, if any\n-\n-      loop\n-         declare\n-            S : String := Get_Argument (Do_Expansion => False);\n-\n-         begin\n-            exit when S = \"\";\n-            Canonical_Case_File_Name (S);\n-            Patterns.Increment_Last;\n-            Patterns.Table (Patterns.Last) := new String'(S);\n+            end if;\n          end;\n       end loop;\n-\n-   exception\n-      when Invalid_Switch =>\n-         Fail (\"invalid switch \" & Full_Switch);\n    end Scan_Args;\n \n    -----------\n@@ -292,12 +463,16 @@ procedure Gnatname is\n          Write_Str (\"Usage: \");\n          Osint.Write_Program_Name;\n          Write_Line (\" [switches] naming-pattern [naming-patterns]\");\n+         Write_Line (\"   {--and [switches] naming-pattern [naming-patterns]}\");\n          Write_Eol;\n          Write_Line (\"switches:\");\n \n          Write_Line (\"  --subdirs=dir real obj/lib/exec dirs are subdirs\");\n          Write_Eol;\n \n+         Write_Line (\"  --and        use different patterns\");\n+         Write_Eol;\n+\n          Write_Line (\"  -cfile       create configuration pragmas file\");\n          Write_Line (\"  -ddir        use dir as one of the source \" &\n                      \"directories\");\n@@ -339,8 +514,8 @@ begin\n \n                   PATH         : constant String :=\n                                    Absolute_Dir &\n-                  Path_Separator &\n-                  Getenv (\"PATH\").all;\n+                                   Path_Separator &\n+                                   Getenv (\"PATH\").all;\n \n                begin\n                   Setenv (\"PATH\", PATH);\n@@ -354,10 +529,17 @@ begin\n \n    --  Initialize tables\n \n-   Excluded_Patterns.Set_Last (0);\n-   Foreign_Patterns.Set_Last (0);\n-   Patterns.Set_Last (0);\n-   Source_Directories.Set_Last (0);\n+   Arguments.Set_Last (0);\n+   Arguments.Increment_Last;\n+   Patterns.Init (Arguments.Table (1).Directories);\n+   Patterns.Set_Last (Arguments.Table (1).Directories, 0);\n+   Patterns.Init (Arguments.Table (1).Name_Patterns);\n+   Patterns.Set_Last (Arguments.Table (1).Name_Patterns, 0);\n+   Patterns.Init (Arguments.Table (1).Excluded_Patterns);\n+   Patterns.Set_Last (Arguments.Table (1).Excluded_Patterns, 0);\n+   Patterns.Init (Arguments.Table (1).Foreign_Patterns);\n+   Patterns.Set_Last (Arguments.Table (1).Foreign_Patterns, 0);\n+\n    Preprocessor_Switches.Set_Last (0);\n \n    --  Get the arguments\n@@ -372,9 +554,12 @@ begin\n       Usage;\n    end if;\n \n-   --  If no pattern was specified, print the usage and return\n+   --  If no Ada or foreign pattern was specified, print the usage and return\n \n-   if Patterns.Last = 0 and Foreign_Patterns.Last = 0 then\n+   if Patterns.Last (Arguments.Table (Arguments.Last).Name_Patterns) = 0\n+      and then\n+      Patterns.Last (Arguments.Table (Arguments.Last).Foreign_Patterns) = 0\n+   then\n       Usage;\n       return;\n    end if;\n@@ -384,55 +569,91 @@ begin\n    --  information, the current directory is the directory of the specified\n    --  file.\n \n-   if Source_Directories.Last = 0 then\n-      Source_Directories.Increment_Last;\n-      Source_Directories.Table (Source_Directories.Last) := new String'(\".\");\n+   if Patterns.Last\n+     (Arguments.Table (Arguments.Last).Directories) = 0\n+   then\n+      Patterns.Append\n+        (Arguments.Table (Arguments.Last).Directories, new String'(\".\"));\n    end if;\n \n+   --  Initialize\n+\n    declare\n-      Directories   : Argument_List (1 .. Integer (Source_Directories.Last));\n-      Name_Patterns : Argument_List (1 .. Integer (Patterns.Last));\n-      Excl_Patterns : Argument_List (1 .. Integer (Excluded_Patterns.Last));\n-      Frgn_Patterns : Argument_List (1 .. Integer (Foreign_Patterns.Last));\n       Prep_Switches : Argument_List\n                         (1 .. Integer (Preprocessor_Switches.Last));\n \n    begin\n-      --  Build the Directories and Name_Patterns arguments\n-\n-      for Index in Directories'Range loop\n-         Directories (Index) := Source_Directories.Table (Index);\n-      end loop;\n-\n-      for Index in Name_Patterns'Range loop\n-         Name_Patterns (Index) := Patterns.Table (Index);\n-      end loop;\n-\n-      for Index in Excl_Patterns'Range loop\n-         Excl_Patterns (Index) := Excluded_Patterns.Table (Index);\n-      end loop;\n-\n-      for Index in Frgn_Patterns'Range loop\n-         Frgn_Patterns (Index) := Foreign_Patterns.Table (Index);\n-      end loop;\n-\n       for Index in Prep_Switches'Range loop\n          Prep_Switches (Index) := Preprocessor_Switches.Table (Index);\n       end loop;\n \n-      --  Call Prj.Makr.Make where the real work is done\n-\n-      Prj.Makr.Make\n+      Prj.Makr.Initialize\n         (File_Path         => File_Path.all,\n          Project_File      => Create_Project,\n-         Directories       => Directories,\n-         Name_Patterns     => Name_Patterns,\n-         Excluded_Patterns => Excl_Patterns,\n-         Foreign_Patterns  => Frgn_Patterns,\n          Preproc_Switches  => Prep_Switches,\n          Very_Verbose      => Very_Verbose);\n    end;\n \n+   --  Process each section successively\n+\n+   for J in 1 .. Arguments.Last loop\n+      declare\n+         Directories   : Argument_List\n+           (1 .. Integer\n+                   (Patterns.Last (Arguments.Table (J).Directories)));\n+         Name_Patterns : Prj.Makr.Regexp_List\n+           (1 .. Integer\n+                   (Patterns.Last (Arguments.Table (J).Name_Patterns)));\n+         Excl_Patterns : Prj.Makr.Regexp_List\n+           (1 .. Integer\n+                   (Patterns.Last (Arguments.Table (J).Excluded_Patterns)));\n+         Frgn_Patterns : Prj.Makr.Regexp_List\n+           (1 .. Integer\n+                   (Patterns.Last (Arguments.Table (J).Foreign_Patterns)));\n+\n+      begin\n+         --  Build the Directories and Patterns arguments\n+\n+         for Index in Directories'Range loop\n+            Directories (Index) :=\n+              Arguments.Table (J).Directories.Table (Index);\n+         end loop;\n+\n+         for Index in Name_Patterns'Range loop\n+            Name_Patterns (Index) :=\n+              Compile\n+                (Arguments.Table (J).Name_Patterns.Table (Index).all,\n+                 Glob => True);\n+         end loop;\n+\n+         for Index in Excl_Patterns'Range loop\n+            Excl_Patterns (Index) :=\n+              Compile\n+                (Arguments.Table (J).Excluded_Patterns.Table (Index).all,\n+                 Glob => True);\n+         end loop;\n+\n+         for Index in Frgn_Patterns'Range loop\n+            Frgn_Patterns (Index) :=\n+              Compile\n+                (Arguments.Table (J).Foreign_Patterns.Table (Index).all,\n+                 Glob => True);\n+         end loop;\n+\n+         --  Call Prj.Makr.Process where the real work is done\n+\n+         Prj.Makr.Process\n+           (Directories       => Directories,\n+            Name_Patterns     => Name_Patterns,\n+            Excluded_Patterns => Excl_Patterns,\n+            Foreign_Patterns  => Frgn_Patterns);\n+      end;\n+   end loop;\n+\n+   --  Finalize\n+\n+   Prj.Makr.Finalize;\n+\n    if Opt.Verbose_Mode then\n       Write_Eol;\n    end if;"}]}