{"sha": "6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxYWJiNWM1ODU2OWU5NjU1YjFmOTJmZDBkOGU5ZDJlMjljOWM0Zg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-04-06T12:17:33Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-04-06T12:17:33Z"}, "message": "dump-parse-tree.c: Use fprintf, fputs and fputc instead of gfc_status and gfc_status_char.\n\n\t* dump-parse-tree.c: Use fprintf, fputs and fputc instead of\n\tgfc_status and gfc_status_char. Remove gfc_ prefix of the gfc_show_*\n\tfunctions and make them static. Add new gfc_dump_parse_tree\n\tfunction.\n\t* gfortran.h (gfc_option_t): Rename verbose into dump_parse_tree.\n\t(gfc_status, gfc_status_char): Delete prototypes.\n\t* error.c (gfc_status, gfc_status_char): Remove functions.\n\t* scanner.c (gfc_new_file): Use printf instead of gfc_status.\n\t* options.c (gfc_init_options): Rename verbose into dump_parse_tree.\n\t(gfc_handle_module_path_options): Use gfc_fatal_error instead of\n\tgfc_status and exit.\n\t(gfc_handle_option): Rename verbose into dump_parse_tree.\n\nFrom-SVN: r133958", "tree": {"sha": "7fa1aa756360ffed20f125a333e3becf3e5e661e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa1aa756360ffed20f125a333e3becf3e5e661e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bde5bc4681ac3713d54d6511cfb6000be57114f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bde5bc4681ac3713d54d6511cfb6000be57114f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bde5bc4681ac3713d54d6511cfb6000be57114f"}], "stats": {"total": 1278, "additions": 618, "deletions": 660}, "files": [{"sha": "eaec1f5d29b86aad40de1d9bc6fe456e114e0ed3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "patch": "@@ -1,3 +1,18 @@\n+2008-04-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c: Use fprintf, fputs and fputc instead of\n+\tgfc_status and gfc_status_char. Remove gfc_ prefix of the gfc_show_*\n+\tfunctions and make them static. Add new gfc_dump_parse_tree\n+\tfunction.\n+\t* gfortran.h (gfc_option_t): Rename verbose into dump_parse_tree.\n+\t(gfc_status, gfc_status_char): Delete prototypes.\n+\t* error.c (gfc_status, gfc_status_char): Remove functions.\n+\t* scanner.c (gfc_new_file): Use printf instead of gfc_status.\n+\t* options.c (gfc_init_options): Rename verbose into dump_parse_tree.\n+\t(gfc_handle_module_path_options): Use gfc_fatal_error instead of\n+\tgfc_status and exit.\n+\t(gfc_handle_option): Rename verbose into dump_parse_tree.\n+\n 2008-04-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n@@ -49,7 +64,7 @@\n \n 2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * f95-lang.c (insert_block): Kill.\n+\t* f95-lang.c (insert_block): Kill.\n \n 2008-04-01  George Helffrich <george@gcc.gnu.org>\n "}, {"sha": "c195dcf977ffebf5d672711efc7db70e1d388945", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 594, "deletions": 600, "changes": 1194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "patch": "@@ -37,6 +37,16 @@ along with GCC; see the file COPYING3.  If not see\n /* Keep track of indentation for symbol tree dumps.  */\n static int show_level = 0;\n \n+/* The file handle we're dumping to is kept in a static variable.  This\n+   is not too cool, but it avoids a lot of passing it around.  */\n+static FILE *dumpfile;\n+\n+/* Forward declaration of some of the functions.  */\n+static void show_expr (gfc_expr *p);\n+static void show_code_node (int, gfc_code *);\n+static void show_namespace (gfc_namespace *ns);\n+\n+\n /* Do indentation for a specific level.  */\n \n static inline void\n@@ -45,12 +55,12 @@ code_indent (int level, gfc_st_label *label)\n   int i;\n \n   if (label != NULL)\n-    gfc_status (\"%-5d \", label->value);\n+    fprintf (dumpfile, \"%-5d \", label->value);\n   else\n-    gfc_status (\"      \");\n+    fputs (\"      \", dumpfile);\n \n   for (i = 0; i < 2 * level; i++)\n-    gfc_status_char (' ');\n+    fputc (' ', dumpfile);\n }\n \n \n@@ -60,78 +70,78 @@ code_indent (int level, gfc_st_label *label)\n static inline void\n show_indent (void)\n {\n-  gfc_status (\"\\n\");\n+  fputc ('\\n', dumpfile);\n   code_indent (show_level, NULL);\n }\n \n \n /* Show type-specific information.  */\n \n-void\n-gfc_show_typespec (gfc_typespec *ts)\n+static void\n+show_typespec (gfc_typespec *ts)\n {\n-  gfc_status (\"(%s \", gfc_basic_typename (ts->type));\n+  fprintf (dumpfile, \"(%s \", gfc_basic_typename (ts->type));\n \n   switch (ts->type)\n     {\n     case BT_DERIVED:\n-      gfc_status (\"%s\", ts->derived->name);\n+      fprintf (dumpfile, \"%s\", ts->derived->name);\n       break;\n \n     case BT_CHARACTER:\n-      gfc_show_expr (ts->cl->length);\n+      show_expr (ts->cl->length);\n       break;\n \n     default:\n-      gfc_status (\"%d\", ts->kind);\n+      fprintf (dumpfile, \"%d\", ts->kind);\n       break;\n     }\n \n-  gfc_status (\")\");\n+  fputc (')', dumpfile);\n }\n \n \n /* Show an actual argument list.  */\n \n-void\n-gfc_show_actual_arglist (gfc_actual_arglist *a)\n+static void\n+show_actual_arglist (gfc_actual_arglist *a)\n {\n-  gfc_status (\"(\");\n+  fputc ('(', dumpfile);\n \n   for (; a; a = a->next)\n     {\n-      gfc_status_char ('(');\n+      fputc ('(', dumpfile);\n       if (a->name != NULL)\n-\tgfc_status (\"%s = \", a->name);\n+\tfprintf (dumpfile, \"%s = \", a->name);\n       if (a->expr != NULL)\n-\tgfc_show_expr (a->expr);\n+\tshow_expr (a->expr);\n       else\n-\tgfc_status (\"(arg not-present)\");\n+\tfputs (\"(arg not-present)\", dumpfile);\n \n-      gfc_status_char (')');\n+      fputc (')', dumpfile);\n       if (a->next != NULL)\n-\tgfc_status (\" \");\n+\tfputc (' ', dumpfile);\n     }\n \n-  gfc_status (\")\");\n+  fputc (')', dumpfile);\n }\n \n \n /* Show a gfc_array_spec array specification structure.  */\n \n-void\n-gfc_show_array_spec (gfc_array_spec *as)\n+static void\n+show_array_spec (gfc_array_spec *as)\n {\n   const char *c;\n   int i;\n \n   if (as == NULL)\n     {\n-      gfc_status (\"()\");\n+      fputs (\"()\", dumpfile);\n       return;\n     }\n \n-  gfc_status (\"(%d\", as->rank);\n+  fprintf (dumpfile, \"(%d\", as->rank);\n \n   if (as->rank != 0)\n     {\n@@ -142,37 +152,37 @@ gfc_show_array_spec (gfc_array_spec *as)\n \tcase AS_ASSUMED_SIZE:  c = \"AS_ASSUMED_SIZE\";  break;\n \tcase AS_ASSUMED_SHAPE: c = \"AS_ASSUMED_SHAPE\"; break;\n \tdefault:\n-\t  gfc_internal_error (\"gfc_show_array_spec(): Unhandled array shape \"\n+\t  gfc_internal_error (\"show_array_spec(): Unhandled array shape \"\n \t\t\t      \"type.\");\n       }\n-      gfc_status (\" %s \", c);\n+      fprintf (dumpfile, \" %s \", c);\n \n       for (i = 0; i < as->rank; i++)\n \t{\n-\t  gfc_show_expr (as->lower[i]);\n-\t  gfc_status_char (' ');\n-\t  gfc_show_expr (as->upper[i]);\n-\t  gfc_status_char (' ');\n+\t  show_expr (as->lower[i]);\n+\t  fputc (' ', dumpfile);\n+\t  show_expr (as->upper[i]);\n+\t  fputc (' ', dumpfile);\n \t}\n     }\n \n-  gfc_status (\")\");\n+  fputc (')', dumpfile);\n }\n \n \n /* Show a gfc_array_ref array reference structure.  */\n \n-void\n-gfc_show_array_ref (gfc_array_ref * ar)\n+static void\n+show_array_ref (gfc_array_ref * ar)\n {\n   int i;\n \n-  gfc_status_char ('(');\n+  fputc ('(', dumpfile);\n \n   switch (ar->type)\n     {\n     case AR_FULL:\n-      gfc_status (\"FULL\");\n+      fputs (\"FULL\", dumpfile);\n       break;\n \n     case AR_SECTION:\n@@ -186,106 +196,106 @@ gfc_show_array_ref (gfc_array_ref * ar)\n \t     bound and the stride, if they're present.  */\n   \n \t  if (ar->start[i] != NULL)\n-\t    gfc_show_expr (ar->start[i]);\n+\t    show_expr (ar->start[i]);\n \n \t  if (ar->dimen_type[i] == DIMEN_RANGE)\n \t    {\n-\t      gfc_status_char (':');\n+\t      fputc (':', dumpfile);\n \n \t      if (ar->end[i] != NULL)\n-\t\tgfc_show_expr (ar->end[i]);\n+\t\tshow_expr (ar->end[i]);\n \n \t      if (ar->stride[i] != NULL)\n \t\t{\n-\t\t  gfc_status_char (':');\n-\t\t  gfc_show_expr (ar->stride[i]);\n+\t\t  fputc (':', dumpfile);\n+\t\t  show_expr (ar->stride[i]);\n \t\t}\n \t    }\n \n \t  if (i != ar->dimen - 1)\n-\t    gfc_status (\" , \");\n+\t    fputs (\" , \", dumpfile);\n \t}\n       break;\n \n     case AR_ELEMENT:\n       for (i = 0; i < ar->dimen; i++)\n \t{\n-\t  gfc_show_expr (ar->start[i]);\n+\t  show_expr (ar->start[i]);\n \t  if (i != ar->dimen - 1)\n-\t    gfc_status (\" , \");\n+\t    fputs (\" , \", dumpfile);\n \t}\n       break;\n \n     case AR_UNKNOWN:\n-      gfc_status (\"UNKNOWN\");\n+      fputs (\"UNKNOWN\", dumpfile);\n       break;\n \n     default:\n-      gfc_internal_error (\"gfc_show_array_ref(): Unknown array reference\");\n+      gfc_internal_error (\"show_array_ref(): Unknown array reference\");\n     }\n \n-  gfc_status_char (')');\n+  fputc (')', dumpfile);\n }\n \n \n /* Show a list of gfc_ref structures.  */\n \n-void\n-gfc_show_ref (gfc_ref *p)\n+static void\n+show_ref (gfc_ref *p)\n {\n   for (; p; p = p->next)\n     switch (p->type)\n       {\n       case REF_ARRAY:\n-\tgfc_show_array_ref (&p->u.ar);\n+\tshow_array_ref (&p->u.ar);\n \tbreak;\n \n       case REF_COMPONENT:\n-\tgfc_status (\" %% %s\", p->u.c.component->name);\n+\tfprintf (dumpfile, \" %% %s\", p->u.c.component->name);\n \tbreak;\n \n       case REF_SUBSTRING:\n-\tgfc_status_char ('(');\n-\tgfc_show_expr (p->u.ss.start);\n-\tgfc_status_char (':');\n-\tgfc_show_expr (p->u.ss.end);\n-\tgfc_status_char (')');\n+\tfputc ('(', dumpfile);\n+\tshow_expr (p->u.ss.start);\n+\tfputc (':', dumpfile);\n+\tshow_expr (p->u.ss.end);\n+\tfputc (')', dumpfile);\n \tbreak;\n \n       default:\n-\tgfc_internal_error (\"gfc_show_ref(): Bad component code\");\n+\tgfc_internal_error (\"show_ref(): Bad component code\");\n       }\n }\n \n \n /* Display a constructor.  Works recursively for array constructors.  */\n \n-void\n-gfc_show_constructor (gfc_constructor *c)\n+static void\n+show_constructor (gfc_constructor *c)\n {\n   for (; c; c = c->next)\n     {\n       if (c->iterator == NULL)\n-\tgfc_show_expr (c->expr);\n+\tshow_expr (c->expr);\n       else\n \t{\n-\t  gfc_status_char ('(');\n-\t  gfc_show_expr (c->expr);\n+\t  fputc ('(', dumpfile);\n+\t  show_expr (c->expr);\n \n-\t  gfc_status_char (' ');\n-\t  gfc_show_expr (c->iterator->var);\n-\t  gfc_status_char ('=');\n-\t  gfc_show_expr (c->iterator->start);\n-\t  gfc_status_char (',');\n-\t  gfc_show_expr (c->iterator->end);\n-\t  gfc_status_char (',');\n-\t  gfc_show_expr (c->iterator->step);\n+\t  fputc (' ', dumpfile);\n+\t  show_expr (c->iterator->var);\n+\t  fputc ('=', dumpfile);\n+\t  show_expr (c->iterator->start);\n+\t  fputc (',', dumpfile);\n+\t  show_expr (c->iterator->end);\n+\t  fputc (',', dumpfile);\n+\t  show_expr (c->iterator->step);\n \n-\t  gfc_status_char (')');\n+\t  fputc (')', dumpfile);\n \t}\n \n       if (c->next != NULL)\n-\tgfc_status (\" , \");\n+\tfputs (\" , \", dumpfile);\n     }\n }\n \n@@ -295,60 +305,56 @@ show_char_const (const char *c, int length)\n {\n   int i;\n \n-  gfc_status_char ('\\'');\n+  fputc ('\\'', dumpfile);\n   for (i = 0; i < length; i++)\n     {\n       if (c[i] == '\\'')\n-\tgfc_status (\"''\");\n+\tfputs (\"''\", dumpfile);\n       else if (ISPRINT (c[i]))\n-\tgfc_status_char (c[i]);\n+\tfputc (c[i], dumpfile);\n       else\n-\t{\n-\t  gfc_status (\"' // ACHAR(\");\n-\t  printf (\"%d\", c[i]);\n-\t  gfc_status (\") // '\");\n-\t}\n+\tfprintf (dumpfile, \"' // ACHAR(%d) // '\", c[i]);\n     }\n-  gfc_status_char ('\\'');\n+  fputc ('\\'', dumpfile);\n }\n \n /* Show an expression.  */\n \n-void\n-gfc_show_expr (gfc_expr *p)\n+static void\n+show_expr (gfc_expr *p)\n {\n   const char *c;\n   int i;\n \n   if (p == NULL)\n     {\n-      gfc_status (\"()\");\n+      fputs (\"()\", dumpfile);\n       return;\n     }\n \n   switch (p->expr_type)\n     {\n     case EXPR_SUBSTRING:\n       show_char_const (p->value.character.string, p->value.character.length);\n-      gfc_show_ref (p->ref);\n+      show_ref (p->ref);\n       break;\n \n     case EXPR_STRUCTURE:\n-      gfc_status (\"%s(\", p->ts.derived->name);\n-      gfc_show_constructor (p->value.constructor);\n-      gfc_status_char (')');\n+      fprintf (dumpfile, \"%s(\", p->ts.derived->name);\n+      show_constructor (p->value.constructor);\n+      fputc (')', dumpfile);\n       break;\n \n     case EXPR_ARRAY:\n-      gfc_status (\"(/ \");\n-      gfc_show_constructor (p->value.constructor);\n-      gfc_status (\" /)\");\n+      fputs (\"(/ \", dumpfile);\n+      show_constructor (p->value.constructor);\n+      fputs (\" /)\", dumpfile);\n \n-      gfc_show_ref (p->ref);\n+      show_ref (p->ref);\n       break;\n \n     case EXPR_NULL:\n-      gfc_status (\"NULL()\");\n+      fputs (\"NULL()\", dumpfile);\n       break;\n \n     case EXPR_CONSTANT:\n@@ -358,20 +364,20 @@ gfc_show_expr (gfc_expr *p)\n \t  mpz_out_str (stdout, 10, p->value.integer);\n \n \t  if (p->ts.kind != gfc_default_integer_kind)\n-\t    gfc_status (\"_%d\", p->ts.kind);\n+\t    fprintf (dumpfile, \"_%d\", p->ts.kind);\n \t  break;\n \n \tcase BT_LOGICAL:\n \t  if (p->value.logical)\n-\t    gfc_status (\".true.\");\n+\t    fputs (\".true.\", dumpfile);\n \t  else\n-\t    gfc_status (\".false.\");\n+\t    fputs (\".false.\", dumpfile);\n \t  break;\n \n \tcase BT_REAL:\n \t  mpfr_out_str (stdout, 10, 0, p->value.real, GFC_RND_MODE);\n \t  if (p->ts.kind != gfc_default_real_kind)\n-\t    gfc_status (\"_%d\", p->ts.kind);\n+\t    fprintf (dumpfile, \"_%d\", p->ts.kind);\n \t  break;\n \n \tcase BT_CHARACTER:\n@@ -380,273 +386,264 @@ gfc_show_expr (gfc_expr *p)\n \t  break;\n \n \tcase BT_COMPLEX:\n-\t  gfc_status (\"(complex \");\n+\t  fputs (\"(complex \", dumpfile);\n \n \t  mpfr_out_str (stdout, 10, 0, p->value.complex.r, GFC_RND_MODE);\n \t  if (p->ts.kind != gfc_default_complex_kind)\n-\t    gfc_status (\"_%d\", p->ts.kind);\n+\t    fprintf (dumpfile, \"_%d\", p->ts.kind);\n \n-\t  gfc_status (\" \");\n+\t  fputc (' ', dumpfile);\n \n \t  mpfr_out_str (stdout, 10, 0, p->value.complex.i, GFC_RND_MODE);\n \t  if (p->ts.kind != gfc_default_complex_kind)\n-\t    gfc_status (\"_%d\", p->ts.kind);\n+\t    fprintf (dumpfile, \"_%d\", p->ts.kind);\n \n-\t  gfc_status (\")\");\n+\t  fputc (')', dumpfile);\n \t  break;\n \n \tcase BT_HOLLERITH:\n-\t  gfc_status (\"%dH\", p->representation.length);\n+\t  fprintf (dumpfile, \"%dH\", p->representation.length);\n \t  c = p->representation.string;\n \t  for (i = 0; i < p->representation.length; i++, c++)\n \t    {\n-\t      gfc_status_char (*c);\n+\t      fputc (*c, dumpfile);\n \t    }\n \t  break;\n \n \tdefault:\n-\t  gfc_status (\"???\");\n+\t  fputs (\"???\", dumpfile);\n \t  break;\n \t}\n \n       if (p->representation.string)\n \t{\n-\t  gfc_status (\" {\");\n+\t  fputs (\" {\", dumpfile);\n \t  c = p->representation.string;\n \t  for (i = 0; i < p->representation.length; i++, c++)\n \t    {\n-\t      gfc_status (\"%.2x\", (unsigned int) *c);\n+\t      fprintf (dumpfile, \"%.2x\", (unsigned int) *c);\n \t      if (i < p->representation.length - 1)\n-\t\tgfc_status_char (',');\n+\t\tfputc (',', dumpfile);\n \t    }\n-\t  gfc_status_char ('}');\n+\t  fputc ('}', dumpfile);\n \t}\n \n       break;\n \n     case EXPR_VARIABLE:\n       if (p->symtree->n.sym->ns && p->symtree->n.sym->ns->proc_name)\n-\tgfc_status (\"%s:\", p->symtree->n.sym->ns->proc_name->name);\n-      gfc_status (\"%s\", p->symtree->n.sym->name);\n-      gfc_show_ref (p->ref);\n+\tfprintf (dumpfile, \"%s:\", p->symtree->n.sym->ns->proc_name->name);\n+      fprintf (dumpfile, \"%s\", p->symtree->n.sym->name);\n+      show_ref (p->ref);\n       break;\n \n     case EXPR_OP:\n-      gfc_status (\"(\");\n+      fputc ('(', dumpfile);\n       switch (p->value.op.operator)\n \t{\n \tcase INTRINSIC_UPLUS:\n-\t  gfc_status (\"U+ \");\n+\t  fputs (\"U+ \", dumpfile);\n \t  break;\n \tcase INTRINSIC_UMINUS:\n-\t  gfc_status (\"U- \");\n+\t  fputs (\"U- \", dumpfile);\n \t  break;\n \tcase INTRINSIC_PLUS:\n-\t  gfc_status (\"+ \");\n+\t  fputs (\"+ \", dumpfile);\n \t  break;\n \tcase INTRINSIC_MINUS:\n-\t  gfc_status (\"- \");\n+\t  fputs (\"- \", dumpfile);\n \t  break;\n \tcase INTRINSIC_TIMES:\n-\t  gfc_status (\"* \");\n+\t  fputs (\"* \", dumpfile);\n \t  break;\n \tcase INTRINSIC_DIVIDE:\n-\t  gfc_status (\"/ \");\n+\t  fputs (\"/ \", dumpfile);\n \t  break;\n \tcase INTRINSIC_POWER:\n-\t  gfc_status (\"** \");\n+\t  fputs (\"** \", dumpfile);\n \t  break;\n \tcase INTRINSIC_CONCAT:\n-\t  gfc_status (\"// \");\n+\t  fputs (\"// \", dumpfile);\n \t  break;\n \tcase INTRINSIC_AND:\n-\t  gfc_status (\"AND \");\n+\t  fputs (\"AND \", dumpfile);\n \t  break;\n \tcase INTRINSIC_OR:\n-\t  gfc_status (\"OR \");\n+\t  fputs (\"OR \", dumpfile);\n \t  break;\n \tcase INTRINSIC_EQV:\n-\t  gfc_status (\"EQV \");\n+\t  fputs (\"EQV \", dumpfile);\n \t  break;\n \tcase INTRINSIC_NEQV:\n-\t  gfc_status (\"NEQV \");\n+\t  fputs (\"NEQV \", dumpfile);\n \t  break;\n \tcase INTRINSIC_EQ:\n \tcase INTRINSIC_EQ_OS:\n-\t  gfc_status (\"= \");\n+\t  fputs (\"= \", dumpfile);\n \t  break;\n \tcase INTRINSIC_NE:\n \tcase INTRINSIC_NE_OS:\n-\t  gfc_status (\"/= \");\n+\t  fputs (\"/= \", dumpfile);\n \t  break;\n \tcase INTRINSIC_GT:\n \tcase INTRINSIC_GT_OS:\n-\t  gfc_status (\"> \");\n+\t  fputs (\"> \", dumpfile);\n \t  break;\n \tcase INTRINSIC_GE:\n \tcase INTRINSIC_GE_OS:\n-\t  gfc_status (\">= \");\n+\t  fputs (\">= \", dumpfile);\n \t  break;\n \tcase INTRINSIC_LT:\n \tcase INTRINSIC_LT_OS:\n-\t  gfc_status (\"< \");\n+\t  fputs (\"< \", dumpfile);\n \t  break;\n \tcase INTRINSIC_LE:\n \tcase INTRINSIC_LE_OS:\n-\t  gfc_status (\"<= \");\n+\t  fputs (\"<= \", dumpfile);\n \t  break;\n \tcase INTRINSIC_NOT:\n-\t  gfc_status (\"NOT \");\n+\t  fputs (\"NOT \", dumpfile);\n \t  break;\n \tcase INTRINSIC_PARENTHESES:\n-\t  gfc_status (\"parens\");\n+\t  fputs (\"parens\", dumpfile);\n \t  break;\n \n \tdefault:\n \t  gfc_internal_error\n-\t    (\"gfc_show_expr(): Bad intrinsic in expression!\");\n+\t    (\"show_expr(): Bad intrinsic in expression!\");\n \t}\n \n-      gfc_show_expr (p->value.op.op1);\n+      show_expr (p->value.op.op1);\n \n       if (p->value.op.op2)\n \t{\n-\t  gfc_status (\" \");\n-\t  gfc_show_expr (p->value.op.op2);\n+\t  fputc (' ', dumpfile);\n+\t  show_expr (p->value.op.op2);\n \t}\n \n-      gfc_status (\")\");\n+      fputc (')', dumpfile);\n       break;\n \n     case EXPR_FUNCTION:\n       if (p->value.function.name == NULL)\n \t{\n-\t  gfc_status (\"%s[\", p->symtree->n.sym->name);\n-\t  gfc_show_actual_arglist (p->value.function.actual);\n-\t  gfc_status_char (']');\n+\t  fprintf (dumpfile, \"%s[\", p->symtree->n.sym->name);\n+\t  show_actual_arglist (p->value.function.actual);\n+\t  fputc (']', dumpfile);\n \t}\n       else\n \t{\n-\t  gfc_status (\"%s[[\", p->value.function.name);\n-\t  gfc_show_actual_arglist (p->value.function.actual);\n-\t  gfc_status_char (']');\n-\t  gfc_status_char (']');\n+\t  fprintf (dumpfile, \"%s[[\", p->value.function.name);\n+\t  show_actual_arglist (p->value.function.actual);\n+\t  fputc (']', dumpfile);\n+\t  fputc (']', dumpfile);\n \t}\n \n       break;\n \n     default:\n-      gfc_internal_error (\"gfc_show_expr(): Don't know how to show expr\");\n+      gfc_internal_error (\"show_expr(): Don't know how to show expr\");\n     }\n }\n \n-/* Show an expression for diagnostic purposes. */\n-void\n-gfc_show_expr_n (const char * msg, gfc_expr *e)\n-{\n-  if (msg)\n-    gfc_status (msg);\n-  gfc_show_expr (e);\n-  gfc_status_char ('\\n');\n-}\n-\n /* Show symbol attributes.  The flavor and intent are followed by\n    whatever single bit attributes are present.  */\n \n-void\n-gfc_show_attr (symbol_attribute *attr)\n+static void\n+show_attr (symbol_attribute *attr)\n {\n \n-  gfc_status (\"(%s %s %s %s %s\", gfc_code2string (flavors, attr->flavor),\n-\t      gfc_intent_string (attr->intent),\n-\t      gfc_code2string (access_types, attr->access),\n-\t      gfc_code2string (procedures, attr->proc),\n-\t      gfc_code2string (save_status, attr->save));\n+  fprintf (dumpfile, \"(%s %s %s %s %s\",\n+\t   gfc_code2string (flavors, attr->flavor),\n+\t   gfc_intent_string (attr->intent),\n+\t   gfc_code2string (access_types, attr->access),\n+\t   gfc_code2string (procedures, attr->proc),\n+\t   gfc_code2string (save_status, attr->save));\n \n   if (attr->allocatable)\n-    gfc_status (\" ALLOCATABLE\");\n+    fputs (\" ALLOCATABLE\", dumpfile);\n   if (attr->dimension)\n-    gfc_status (\" DIMENSION\");\n+    fputs (\" DIMENSION\", dumpfile);\n   if (attr->external)\n-    gfc_status (\" EXTERNAL\");\n+    fputs (\" EXTERNAL\", dumpfile);\n   if (attr->intrinsic)\n-    gfc_status (\" INTRINSIC\");\n+    fputs (\" INTRINSIC\", dumpfile);\n   if (attr->optional)\n-    gfc_status (\" OPTIONAL\");\n+    fputs (\" OPTIONAL\", dumpfile);\n   if (attr->pointer)\n-    gfc_status (\" POINTER\");\n+    fputs (\" POINTER\", dumpfile);\n   if (attr->protected)\n-    gfc_status (\" PROTECTED\");\n+    fputs (\" PROTECTED\", dumpfile);\n   if (attr->value)\n-    gfc_status (\" VALUE\");\n+    fputs (\" VALUE\", dumpfile);\n   if (attr->volatile_)\n-    gfc_status (\" VOLATILE\");\n+    fputs (\" VOLATILE\", dumpfile);\n   if (attr->threadprivate)\n-    gfc_status (\" THREADPRIVATE\");\n+    fputs (\" THREADPRIVATE\", dumpfile);\n   if (attr->target)\n-    gfc_status (\" TARGET\");\n+    fputs (\" TARGET\", dumpfile);\n   if (attr->dummy)\n-    gfc_status (\" DUMMY\");\n+    fputs (\" DUMMY\", dumpfile);\n   if (attr->result)\n-    gfc_status (\" RESULT\");\n+    fputs (\" RESULT\", dumpfile);\n   if (attr->entry)\n-    gfc_status (\" ENTRY\");\n+    fputs (\" ENTRY\", dumpfile);\n   if (attr->is_bind_c)\n-    gfc_status (\" BIND(C)\");\n+    fputs (\" BIND(C)\", dumpfile);\n \n   if (attr->data)\n-    gfc_status (\" DATA\");\n+    fputs (\" DATA\", dumpfile);\n   if (attr->use_assoc)\n-    gfc_status (\" USE-ASSOC\");\n+    fputs (\" USE-ASSOC\", dumpfile);\n   if (attr->in_namelist)\n-    gfc_status (\" IN-NAMELIST\");\n+    fputs (\" IN-NAMELIST\", dumpfile);\n   if (attr->in_common)\n-    gfc_status (\" IN-COMMON\");\n+    fputs (\" IN-COMMON\", dumpfile);\n \n   if (attr->abstract)\n-    gfc_status (\" ABSTRACT INTERFACE\");\n+    fputs (\" ABSTRACT INTERFACE\", dumpfile);\n   if (attr->function)\n-    gfc_status (\" FUNCTION\");\n+    fputs (\" FUNCTION\", dumpfile);\n   if (attr->subroutine)\n-    gfc_status (\" SUBROUTINE\");\n+    fputs (\" SUBROUTINE\", dumpfile);\n   if (attr->implicit_type)\n-    gfc_status (\" IMPLICIT-TYPE\");\n+    fputs (\" IMPLICIT-TYPE\", dumpfile);\n \n   if (attr->sequence)\n-    gfc_status (\" SEQUENCE\");\n+    fputs (\" SEQUENCE\", dumpfile);\n   if (attr->elemental)\n-    gfc_status (\" ELEMENTAL\");\n+    fputs (\" ELEMENTAL\", dumpfile);\n   if (attr->pure)\n-    gfc_status (\" PURE\");\n+    fputs (\" PURE\", dumpfile);\n   if (attr->recursive)\n-    gfc_status (\" RECURSIVE\");\n+    fputs (\" RECURSIVE\", dumpfile);\n \n-  gfc_status (\")\");\n+  fputc (')', dumpfile);\n }\n \n \n /* Show components of a derived type.  */\n \n-void\n-gfc_show_components (gfc_symbol *sym)\n+static void\n+show_components (gfc_symbol *sym)\n {\n   gfc_component *c;\n \n   for (c = sym->components; c; c = c->next)\n     {\n-      gfc_status (\"(%s \", c->name);\n-      gfc_show_typespec (&c->ts);\n+      fprintf (dumpfile, \"(%s \", c->name);\n+      show_typespec (&c->ts);\n       if (c->pointer)\n-\tgfc_status (\" POINTER\");\n+\tfputs (\" POINTER\", dumpfile);\n       if (c->dimension)\n-\tgfc_status (\" DIMENSION\");\n-      gfc_status_char (' ');\n-      gfc_show_array_spec (c->as);\n+\tfputs (\" DIMENSION\", dumpfile);\n+      fputc (' ', dumpfile);\n+      show_array_spec (c->as);\n       if (c->access)\n-\tgfc_status (\" %s\", gfc_code2string (access_types, c->access));\n-      gfc_status (\")\");\n+\tfprintf (dumpfile, \" %s\", gfc_code2string (access_types, c->access));\n+      fputc (')', dumpfile);\n       if (c->next != NULL)\n-\tgfc_status_char (' ');\n+\tfputc (' ', dumpfile);\n     }\n }\n \n@@ -656,8 +653,8 @@ gfc_show_components (gfc_symbol *sym)\n    specific interfaces associated with a generic symbol is done within\n    that symbol.  */\n \n-void\n-gfc_show_symbol (gfc_symbol *sym)\n+static void\n+show_symbol (gfc_symbol *sym)\n {\n   gfc_formal_arglist *formal;\n   gfc_interface *intr;\n@@ -667,78 +664,67 @@ gfc_show_symbol (gfc_symbol *sym)\n \n   show_indent ();\n \n-  gfc_status (\"symbol %s \", sym->name);\n-  gfc_show_typespec (&sym->ts);\n-  gfc_show_attr (&sym->attr);\n+  fprintf (dumpfile, \"symbol %s \", sym->name);\n+  show_typespec (&sym->ts);\n+  show_attr (&sym->attr);\n \n   if (sym->value)\n     {\n       show_indent ();\n-      gfc_status (\"value: \");\n-      gfc_show_expr (sym->value);\n+      fputs (\"value: \", dumpfile);\n+      show_expr (sym->value);\n     }\n \n   if (sym->as)\n     {\n       show_indent ();\n-      gfc_status (\"Array spec:\");\n-      gfc_show_array_spec (sym->as);\n+      fputs (\"Array spec:\", dumpfile);\n+      show_array_spec (sym->as);\n     }\n \n   if (sym->generic)\n     {\n       show_indent ();\n-      gfc_status (\"Generic interfaces:\");\n+      fputs (\"Generic interfaces:\", dumpfile);\n       for (intr = sym->generic; intr; intr = intr->next)\n-\tgfc_status (\" %s\", intr->sym->name);\n+\tfprintf (dumpfile, \" %s\", intr->sym->name);\n     }\n \n   if (sym->result)\n     {\n       show_indent ();\n-      gfc_status (\"result: %s\", sym->result->name);\n+      fprintf (dumpfile, \"result: %s\", sym->result->name);\n     }\n \n   if (sym->components)\n     {\n       show_indent ();\n-      gfc_status (\"components: \");\n-      gfc_show_components (sym);\n+      fputs (\"components: \", dumpfile);\n+      show_components (sym);\n     }\n \n   if (sym->formal)\n     {\n       show_indent ();\n-      gfc_status (\"Formal arglist:\");\n+      fputs (\"Formal arglist:\", dumpfile);\n \n       for (formal = sym->formal; formal; formal = formal->next)\n \t{\n \t  if (formal->sym != NULL)\n-\t    gfc_status (\" %s\", formal->sym->name);\n+\t    fprintf (dumpfile, \" %s\", formal->sym->name);\n \t  else\n-\t    gfc_status (\" [Alt Return]\");\n+\t    fputs (\" [Alt Return]\", dumpfile);\n \t}\n     }\n \n   if (sym->formal_ns)\n     {\n       show_indent ();\n-      gfc_status (\"Formal namespace\");\n-      gfc_show_namespace (sym->formal_ns);\n+      fputs (\"Formal namespace\", dumpfile);\n+      show_namespace (sym->formal_ns);\n     }\n \n-  gfc_status_char ('\\n');\n-}\n-\n-\n-/* Show a symbol for diagnostic purposes. */\n-void\n-gfc_show_symbol_n (const char * msg, gfc_symbol *sym)\n-{\n-  if (msg)\n-    gfc_status (msg);\n-  gfc_show_symbol (sym);\n-  gfc_status_char ('\\n');\n+  fputc ('\\n', dumpfile);\n }\n \n \n@@ -751,10 +737,10 @@ show_uop (gfc_user_op *uop)\n   gfc_interface *intr;\n \n   show_indent ();\n-  gfc_status (\"%s:\", uop->name);\n+  fprintf (dumpfile, \"%s:\", uop->name);\n \n   for (intr = uop->operator; intr; intr = intr->next)\n-    gfc_status (\" %s\", intr->sym->name);\n+    fprintf (dumpfile, \" %s\", intr->sym->name);\n }\n \n \n@@ -790,17 +776,17 @@ show_common (gfc_symtree *st)\n   gfc_symbol *s;\n \n   show_indent ();\n-  gfc_status (\"common: /%s/ \", st->name);\n+  fprintf (dumpfile, \"common: /%s/ \", st->name);\n \n   s = st->n.common->head;\n   while (s)\n     {\n-      gfc_status (\"%s\", s->name);\n+      fprintf (dumpfile, \"%s\", s->name);\n       s = s->common_next;\n       if (s)\n-\tgfc_status (\", \");\n+\tfputs (\", \", dumpfile);\n     }\n-  gfc_status_char ('\\n');\n+  fputc ('\\n', dumpfile);\n }    \n \n \n@@ -810,44 +796,41 @@ static void\n show_symtree (gfc_symtree *st)\n {\n   show_indent ();\n-  gfc_status (\"symtree: %s  Ambig %d\", st->name, st->ambiguous);\n+  fprintf (dumpfile, \"symtree: %s  Ambig %d\", st->name, st->ambiguous);\n \n   if (st->n.sym->ns != gfc_current_ns)\n-    gfc_status (\" from namespace %s\", st->n.sym->ns->proc_name->name);\n+    fprintf (dumpfile, \" from namespace %s\", st->n.sym->ns->proc_name->name);\n   else\n-    gfc_show_symbol (st->n.sym);\n+    show_symbol (st->n.sym);\n }\n \n \n /******************* Show gfc_code structures **************/\n \n \n-\n-static void gfc_show_code_node (int, gfc_code *);\n-\n /* Show a list of code structures.  Mutually recursive with\n-   gfc_show_code_node().  */\n+   show_code_node().  */\n \n-void\n-gfc_show_code (int level, gfc_code *c)\n+static void\n+show_code (int level, gfc_code *c)\n {\n   for (; c; c = c->next)\n-    gfc_show_code_node (level, c);\n+    show_code_node (level, c);\n }\n \n-void\n-gfc_show_namelist (gfc_namelist *n)\n+static void\n+show_namelist (gfc_namelist *n)\n {\n   for (; n->next; n = n->next)\n-    gfc_status (\"%s,\", n->sym->name);\n-  gfc_status (\"%s\", n->sym->name);\n+    fprintf (dumpfile, \"%s,\", n->sym->name);\n+  fprintf (dumpfile, \"%s\", n->sym->name);\n }\n \n /* Show a single OpenMP directive node and everything underneath it\n    if necessary.  */\n \n static void\n-gfc_show_omp_node (int level, gfc_code *c)\n+show_omp_node (int level, gfc_code *c)\n {\n   gfc_omp_clauses *omp_clauses = NULL;\n   const char *name = NULL;\n@@ -871,7 +854,7 @@ gfc_show_omp_node (int level, gfc_code *c)\n     default:\n       gcc_unreachable ();\n     }\n-  gfc_status (\"!$OMP %s\", name);\n+  fprintf (dumpfile, \"!$OMP %s\", name);\n   switch (c->op)\n     {\n     case EXEC_OMP_DO:\n@@ -886,14 +869,14 @@ gfc_show_omp_node (int level, gfc_code *c)\n       break;\n     case EXEC_OMP_CRITICAL:\n       if (c->ext.omp_name)\n-\tgfc_status (\" (%s)\", c->ext.omp_name);\n+\tfprintf (dumpfile, \" (%s)\", c->ext.omp_name);\n       break;\n     case EXEC_OMP_FLUSH:\n       if (c->ext.omp_namelist)\n \t{\n-\t  gfc_status (\" (\");\n-\t  gfc_show_namelist (c->ext.omp_namelist);\n-\t  gfc_status_char (')');\n+\t  fputs (\" (\", dumpfile);\n+\t  show_namelist (c->ext.omp_namelist);\n+\t  fputc (')', dumpfile);\n \t}\n       return;\n     case EXEC_OMP_BARRIER:\n@@ -907,15 +890,15 @@ gfc_show_omp_node (int level, gfc_code *c)\n \n       if (omp_clauses->if_expr)\n \t{\n-\t  gfc_status (\" IF(\");\n-\t  gfc_show_expr (omp_clauses->if_expr);\n-\t  gfc_status_char (')');\n+\t  fputs (\" IF(\", dumpfile);\n+\t  show_expr (omp_clauses->if_expr);\n+\t  fputc (')', dumpfile);\n \t}\n       if (omp_clauses->num_threads)\n \t{\n-\t  gfc_status (\" NUM_THREADS(\");\n-\t  gfc_show_expr (omp_clauses->num_threads);\n-\t  gfc_status_char (')');\n+\t  fputs (\" NUM_THREADS(\", dumpfile);\n+\t  show_expr (omp_clauses->num_threads);\n+\t  fputc (')', dumpfile);\n \t}\n       if (omp_clauses->sched_kind != OMP_SCHED_NONE)\n \t{\n@@ -929,13 +912,13 @@ gfc_show_omp_node (int level, gfc_code *c)\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  gfc_status (\" SCHEDULE (%s\", type);\n+\t  fprintf (dumpfile, \" SCHEDULE (%s\", type);\n \t  if (omp_clauses->chunk_size)\n \t    {\n-\t      gfc_status_char (',');\n-\t      gfc_show_expr (omp_clauses->chunk_size);\n+\t      fputc (',', dumpfile);\n+\t      show_expr (omp_clauses->chunk_size);\n \t    }\n-\t  gfc_status_char (')');\n+\t  fputc (')', dumpfile);\n \t}\n       if (omp_clauses->default_sharing != OMP_DEFAULT_UNKNOWN)\n \t{\n@@ -949,10 +932,10 @@ gfc_show_omp_node (int level, gfc_code *c)\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  gfc_status (\" DEFAULT(%s)\", type);\n+\t  fprintf (dumpfile, \" DEFAULT(%s)\", type);\n \t}\n       if (omp_clauses->ordered)\n-\tgfc_status (\" ORDERED\");\n+\tfputs (\" ORDERED\", dumpfile);\n       for (list_type = 0; list_type < OMP_LIST_NUM; list_type++)\n \tif (omp_clauses->lists[list_type] != NULL\n \t    && list_type != OMP_LIST_COPYPRIVATE)\n@@ -977,7 +960,7 @@ gfc_show_omp_node (int level, gfc_code *c)\n \t\t  default:\n \t\t    gcc_unreachable ();\n \t\t  }\n-\t\tgfc_status (\" REDUCTION(%s:\", type);\n+\t\tfprintf (dumpfile, \" REDUCTION(%s:\", type);\n \t      }\n \t    else\n \t      {\n@@ -991,52 +974,52 @@ gfc_show_omp_node (int level, gfc_code *c)\n \t\t  default:\n \t\t    gcc_unreachable ();\n \t\t  }\n-\t\tgfc_status (\" %s(\", type);\n+\t\tfprintf (dumpfile, \" %s(\", type);\n \t      }\n-\t    gfc_show_namelist (omp_clauses->lists[list_type]);\n-\t    gfc_status_char (')');\n+\t    show_namelist (omp_clauses->lists[list_type]);\n+\t    fputc (')', dumpfile);\n \t  }\n     }\n-  gfc_status_char ('\\n');\n+  fputc ('\\n', dumpfile);\n   if (c->op == EXEC_OMP_SECTIONS || c->op == EXEC_OMP_PARALLEL_SECTIONS)\n     {\n       gfc_code *d = c->block;\n       while (d != NULL)\n \t{\n-\t  gfc_show_code (level + 1, d->next);\n+\t  show_code (level + 1, d->next);\n \t  if (d->block == NULL)\n \t    break;\n \t  code_indent (level, 0);\n-\t  gfc_status (\"!$OMP SECTION\\n\");\n+\t  fputs (\"!$OMP SECTION\\n\", dumpfile);\n \t  d = d->block;\n \t}\n     }\n   else\n-    gfc_show_code (level + 1, c->block->next);\n+    show_code (level + 1, c->block->next);\n   if (c->op == EXEC_OMP_ATOMIC)\n     return;\n   code_indent (level, 0);\n-  gfc_status (\"!$OMP END %s\", name);\n+  fprintf (dumpfile, \"!$OMP END %s\", name);\n   if (omp_clauses != NULL)\n     {\n       if (omp_clauses->lists[OMP_LIST_COPYPRIVATE])\n \t{\n-\t  gfc_status (\" COPYPRIVATE(\");\n-\t  gfc_show_namelist (omp_clauses->lists[OMP_LIST_COPYPRIVATE]);\n-\t  gfc_status_char (')');\n+\t  fputs (\" COPYPRIVATE(\", dumpfile);\n+\t  show_namelist (omp_clauses->lists[OMP_LIST_COPYPRIVATE]);\n+\t  fputc (')', dumpfile);\n \t}\n       else if (omp_clauses->nowait)\n-\tgfc_status (\" NOWAIT\");\n+\tfputs (\" NOWAIT\", dumpfile);\n     }\n   else if (c->op == EXEC_OMP_CRITICAL && c->ext.omp_name)\n-    gfc_status (\" (%s)\", c->ext.omp_name);\n+    fprintf (dumpfile, \" (%s)\", c->ext.omp_name);\n }\n \n \n /* Show a single code node and everything underneath it if necessary.  */\n \n static void\n-gfc_show_code_node (int level, gfc_code *c)\n+show_code_node (int level, gfc_code *c)\n {\n   gfc_forall_iterator *fa;\n   gfc_open *open;\n@@ -1053,56 +1036,56 @@ gfc_show_code_node (int level, gfc_code *c)\n   switch (c->op)\n     {\n     case EXEC_NOP:\n-      gfc_status (\"NOP\");\n+      fputs (\"NOP\", dumpfile);\n       break;\n \n     case EXEC_CONTINUE:\n-      gfc_status (\"CONTINUE\");\n+      fputs (\"CONTINUE\", dumpfile);\n       break;\n \n     case EXEC_ENTRY:\n-      gfc_status (\"ENTRY %s\", c->ext.entry->sym->name);\n+      fprintf (dumpfile, \"ENTRY %s\", c->ext.entry->sym->name);\n       break;\n \n     case EXEC_INIT_ASSIGN:\n     case EXEC_ASSIGN:\n-      gfc_status (\"ASSIGN \");\n-      gfc_show_expr (c->expr);\n-      gfc_status_char (' ');\n-      gfc_show_expr (c->expr2);\n+      fputs (\"ASSIGN \", dumpfile);\n+      show_expr (c->expr);\n+      fputc (' ', dumpfile);\n+      show_expr (c->expr2);\n       break;\n \n     case EXEC_LABEL_ASSIGN:\n-      gfc_status (\"LABEL ASSIGN \");\n-      gfc_show_expr (c->expr);\n-      gfc_status (\" %d\", c->label->value);\n+      fputs (\"LABEL ASSIGN \", dumpfile);\n+      show_expr (c->expr);\n+      fprintf (dumpfile, \" %d\", c->label->value);\n       break;\n \n     case EXEC_POINTER_ASSIGN:\n-      gfc_status (\"POINTER ASSIGN \");\n-      gfc_show_expr (c->expr);\n-      gfc_status_char (' ');\n-      gfc_show_expr (c->expr2);\n+      fputs (\"POINTER ASSIGN \", dumpfile);\n+      show_expr (c->expr);\n+      fputc (' ', dumpfile);\n+      show_expr (c->expr2);\n       break;\n \n     case EXEC_GOTO:\n-      gfc_status (\"GOTO \");\n+      fputs (\"GOTO \", dumpfile);\n       if (c->label)\n-\tgfc_status (\"%d\", c->label->value);\n+\tfprintf (dumpfile, \"%d\", c->label->value);\n       else\n \t{\n-\t  gfc_show_expr (c->expr);\n+\t  show_expr (c->expr);\n \t  d = c->block;\n \t  if (d != NULL)\n \t    {\n-\t      gfc_status (\", (\");\n+\t      fputs (\", (\", dumpfile);\n \t      for (; d; d = d ->block)\n \t\t{\n \t\t  code_indent (level, d->label);\n \t\t  if (d->block != NULL)\n-\t\t    gfc_status_char (',');\n+\t\t    fputc (',', dumpfile);\n \t\t  else\n-\t\t    gfc_status_char (')');\n+\t\t    fputc (')', dumpfile);\n \t\t}\n \t    }\n \t}\n@@ -1111,705 +1094,705 @@ gfc_show_code_node (int level, gfc_code *c)\n     case EXEC_CALL:\n     case EXEC_ASSIGN_CALL:\n       if (c->resolved_sym)\n-\tgfc_status (\"CALL %s \", c->resolved_sym->name);\n+\tfprintf (dumpfile, \"CALL %s \", c->resolved_sym->name);\n       else if (c->symtree)\n-\tgfc_status (\"CALL %s \", c->symtree->name);\n+\tfprintf (dumpfile, \"CALL %s \", c->symtree->name);\n       else\n-\tgfc_status (\"CALL ?? \");\n+\tfputs (\"CALL ?? \", dumpfile);\n \n-      gfc_show_actual_arglist (c->ext.actual);\n+      show_actual_arglist (c->ext.actual);\n       break;\n \n     case EXEC_RETURN:\n-      gfc_status (\"RETURN \");\n+      fputs (\"RETURN \", dumpfile);\n       if (c->expr)\n-\tgfc_show_expr (c->expr);\n+\tshow_expr (c->expr);\n       break;\n \n     case EXEC_PAUSE:\n-      gfc_status (\"PAUSE \");\n+      fputs (\"PAUSE \", dumpfile);\n \n       if (c->expr != NULL)\n-\tgfc_show_expr (c->expr);\n+\tshow_expr (c->expr);\n       else\n-\tgfc_status (\"%d\", c->ext.stop_code);\n+\tfprintf (dumpfile, \"%d\", c->ext.stop_code);\n \n       break;\n \n     case EXEC_STOP:\n-      gfc_status (\"STOP \");\n+      fputs (\"STOP \", dumpfile);\n \n       if (c->expr != NULL)\n-\tgfc_show_expr (c->expr);\n+\tshow_expr (c->expr);\n       else\n-\tgfc_status (\"%d\", c->ext.stop_code);\n+\tfprintf (dumpfile, \"%d\", c->ext.stop_code);\n \n       break;\n \n     case EXEC_ARITHMETIC_IF:\n-      gfc_status (\"IF \");\n-      gfc_show_expr (c->expr);\n-      gfc_status (\" %d, %d, %d\",\n+      fputs (\"IF \", dumpfile);\n+      show_expr (c->expr);\n+      fprintf (dumpfile, \" %d, %d, %d\",\n \t\t  c->label->value, c->label2->value, c->label3->value);\n       break;\n \n     case EXEC_IF:\n       d = c->block;\n-      gfc_status (\"IF \");\n-      gfc_show_expr (d->expr);\n-      gfc_status_char ('\\n');\n-      gfc_show_code (level + 1, d->next);\n+      fputs (\"IF \", dumpfile);\n+      show_expr (d->expr);\n+      fputc ('\\n', dumpfile);\n+      show_code (level + 1, d->next);\n \n       d = d->block;\n       for (; d; d = d->block)\n \t{\n \t  code_indent (level, 0);\n \n \t  if (d->expr == NULL)\n-\t    gfc_status (\"ELSE\\n\");\n+\t    fputs (\"ELSE\\n\", dumpfile);\n \t  else\n \t    {\n-\t      gfc_status (\"ELSE IF \");\n-\t      gfc_show_expr (d->expr);\n-\t      gfc_status_char ('\\n');\n+\t      fputs (\"ELSE IF \", dumpfile);\n+\t      show_expr (d->expr);\n+\t      fputc ('\\n', dumpfile);\n \t    }\n \n-\t  gfc_show_code (level + 1, d->next);\n+\t  show_code (level + 1, d->next);\n \t}\n \n       code_indent (level, c->label);\n \n-      gfc_status (\"ENDIF\");\n+      fputs (\"ENDIF\", dumpfile);\n       break;\n \n     case EXEC_SELECT:\n       d = c->block;\n-      gfc_status (\"SELECT CASE \");\n-      gfc_show_expr (c->expr);\n-      gfc_status_char ('\\n');\n+      fputs (\"SELECT CASE \", dumpfile);\n+      show_expr (c->expr);\n+      fputc ('\\n', dumpfile);\n \n       for (; d; d = d->block)\n \t{\n \t  code_indent (level, 0);\n \n-\t  gfc_status (\"CASE \");\n+\t  fputs (\"CASE \", dumpfile);\n \t  for (cp = d->ext.case_list; cp; cp = cp->next)\n \t    {\n-\t      gfc_status_char ('(');\n-\t      gfc_show_expr (cp->low);\n-\t      gfc_status_char (' ');\n-\t      gfc_show_expr (cp->high);\n-\t      gfc_status_char (')');\n-\t      gfc_status_char (' ');\n+\t      fputc ('(', dumpfile);\n+\t      show_expr (cp->low);\n+\t      fputc (' ', dumpfile);\n+\t      show_expr (cp->high);\n+\t      fputc (')', dumpfile);\n+\t      fputc (' ', dumpfile);\n \t    }\n-\t  gfc_status_char ('\\n');\n+\t  fputc ('\\n', dumpfile);\n \n-\t  gfc_show_code (level + 1, d->next);\n+\t  show_code (level + 1, d->next);\n \t}\n \n       code_indent (level, c->label);\n-      gfc_status (\"END SELECT\");\n+      fputs (\"END SELECT\", dumpfile);\n       break;\n \n     case EXEC_WHERE:\n-      gfc_status (\"WHERE \");\n+      fputs (\"WHERE \", dumpfile);\n \n       d = c->block;\n-      gfc_show_expr (d->expr);\n-      gfc_status_char ('\\n');\n+      show_expr (d->expr);\n+      fputc ('\\n', dumpfile);\n \n-      gfc_show_code (level + 1, d->next);\n+      show_code (level + 1, d->next);\n \n       for (d = d->block; d; d = d->block)\n \t{\n \t  code_indent (level, 0);\n-\t  gfc_status (\"ELSE WHERE \");\n-\t  gfc_show_expr (d->expr);\n-\t  gfc_status_char ('\\n');\n-\t  gfc_show_code (level + 1, d->next);\n+\t  fputs (\"ELSE WHERE \", dumpfile);\n+\t  show_expr (d->expr);\n+\t  fputc ('\\n', dumpfile);\n+\t  show_code (level + 1, d->next);\n \t}\n \n       code_indent (level, 0);\n-      gfc_status (\"END WHERE\");\n+      fputs (\"END WHERE\", dumpfile);\n       break;\n \n \n     case EXEC_FORALL:\n-      gfc_status (\"FORALL \");\n+      fputs (\"FORALL \", dumpfile);\n       for (fa = c->ext.forall_iterator; fa; fa = fa->next)\n \t{\n-\t  gfc_show_expr (fa->var);\n-\t  gfc_status_char (' ');\n-\t  gfc_show_expr (fa->start);\n-\t  gfc_status_char (':');\n-\t  gfc_show_expr (fa->end);\n-\t  gfc_status_char (':');\n-\t  gfc_show_expr (fa->stride);\n+\t  show_expr (fa->var);\n+\t  fputc (' ', dumpfile);\n+\t  show_expr (fa->start);\n+\t  fputc (':', dumpfile);\n+\t  show_expr (fa->end);\n+\t  fputc (':', dumpfile);\n+\t  show_expr (fa->stride);\n \n \t  if (fa->next != NULL)\n-\t    gfc_status_char (',');\n+\t    fputc (',', dumpfile);\n \t}\n \n       if (c->expr != NULL)\n \t{\n-\t  gfc_status_char (',');\n-\t  gfc_show_expr (c->expr);\n+\t  fputc (',', dumpfile);\n+\t  show_expr (c->expr);\n \t}\n-      gfc_status_char ('\\n');\n+      fputc ('\\n', dumpfile);\n \n-      gfc_show_code (level + 1, c->block->next);\n+      show_code (level + 1, c->block->next);\n \n       code_indent (level, 0);\n-      gfc_status (\"END FORALL\");\n+      fputs (\"END FORALL\", dumpfile);\n       break;\n \n     case EXEC_DO:\n-      gfc_status (\"DO \");\n+      fputs (\"DO \", dumpfile);\n \n-      gfc_show_expr (c->ext.iterator->var);\n-      gfc_status_char ('=');\n-      gfc_show_expr (c->ext.iterator->start);\n-      gfc_status_char (' ');\n-      gfc_show_expr (c->ext.iterator->end);\n-      gfc_status_char (' ');\n-      gfc_show_expr (c->ext.iterator->step);\n-      gfc_status_char ('\\n');\n+      show_expr (c->ext.iterator->var);\n+      fputc ('=', dumpfile);\n+      show_expr (c->ext.iterator->start);\n+      fputc (' ', dumpfile);\n+      show_expr (c->ext.iterator->end);\n+      fputc (' ', dumpfile);\n+      show_expr (c->ext.iterator->step);\n+      fputc ('\\n', dumpfile);\n \n-      gfc_show_code (level + 1, c->block->next);\n+      show_code (level + 1, c->block->next);\n \n       code_indent (level, 0);\n-      gfc_status (\"END DO\");\n+      fputs (\"END DO\", dumpfile);\n       break;\n \n     case EXEC_DO_WHILE:\n-      gfc_status (\"DO WHILE \");\n-      gfc_show_expr (c->expr);\n-      gfc_status_char ('\\n');\n+      fputs (\"DO WHILE \", dumpfile);\n+      show_expr (c->expr);\n+      fputc ('\\n', dumpfile);\n \n-      gfc_show_code (level + 1, c->block->next);\n+      show_code (level + 1, c->block->next);\n \n       code_indent (level, c->label);\n-      gfc_status (\"END DO\");\n+      fputs (\"END DO\", dumpfile);\n       break;\n \n     case EXEC_CYCLE:\n-      gfc_status (\"CYCLE\");\n+      fputs (\"CYCLE\", dumpfile);\n       if (c->symtree)\n-\tgfc_status (\" %s\", c->symtree->n.sym->name);\n+\tfprintf (dumpfile, \" %s\", c->symtree->n.sym->name);\n       break;\n \n     case EXEC_EXIT:\n-      gfc_status (\"EXIT\");\n+      fputs (\"EXIT\", dumpfile);\n       if (c->symtree)\n-\tgfc_status (\" %s\", c->symtree->n.sym->name);\n+\tfprintf (dumpfile, \" %s\", c->symtree->n.sym->name);\n       break;\n \n     case EXEC_ALLOCATE:\n-      gfc_status (\"ALLOCATE \");\n+      fputs (\"ALLOCATE \", dumpfile);\n       if (c->expr)\n \t{\n-\t  gfc_status (\" STAT=\");\n-\t  gfc_show_expr (c->expr);\n+\t  fputs (\" STAT=\", dumpfile);\n+\t  show_expr (c->expr);\n \t}\n \n       for (a = c->ext.alloc_list; a; a = a->next)\n \t{\n-\t  gfc_status_char (' ');\n-\t  gfc_show_expr (a->expr);\n+\t  fputc (' ', dumpfile);\n+\t  show_expr (a->expr);\n \t}\n \n       break;\n \n     case EXEC_DEALLOCATE:\n-      gfc_status (\"DEALLOCATE \");\n+      fputs (\"DEALLOCATE \", dumpfile);\n       if (c->expr)\n \t{\n-\t  gfc_status (\" STAT=\");\n-\t  gfc_show_expr (c->expr);\n+\t  fputs (\" STAT=\", dumpfile);\n+\t  show_expr (c->expr);\n \t}\n \n       for (a = c->ext.alloc_list; a; a = a->next)\n \t{\n-\t  gfc_status_char (' ');\n-\t  gfc_show_expr (a->expr);\n+\t  fputc (' ', dumpfile);\n+\t  show_expr (a->expr);\n \t}\n \n       break;\n \n     case EXEC_OPEN:\n-      gfc_status (\"OPEN\");\n+      fputs (\"OPEN\", dumpfile);\n       open = c->ext.open;\n \n       if (open->unit)\n \t{\n-\t  gfc_status (\" UNIT=\");\n-\t  gfc_show_expr (open->unit);\n+\t  fputs (\" UNIT=\", dumpfile);\n+\t  show_expr (open->unit);\n \t}\n       if (open->iomsg)\n \t{\n-\t  gfc_status (\" IOMSG=\");\n-\t  gfc_show_expr (open->iomsg);\n+\t  fputs (\" IOMSG=\", dumpfile);\n+\t  show_expr (open->iomsg);\n \t}\n       if (open->iostat)\n \t{\n-\t  gfc_status (\" IOSTAT=\");\n-\t  gfc_show_expr (open->iostat);\n+\t  fputs (\" IOSTAT=\", dumpfile);\n+\t  show_expr (open->iostat);\n \t}\n       if (open->file)\n \t{\n-\t  gfc_status (\" FILE=\");\n-\t  gfc_show_expr (open->file);\n+\t  fputs (\" FILE=\", dumpfile);\n+\t  show_expr (open->file);\n \t}\n       if (open->status)\n \t{\n-\t  gfc_status (\" STATUS=\");\n-\t  gfc_show_expr (open->status);\n+\t  fputs (\" STATUS=\", dumpfile);\n+\t  show_expr (open->status);\n \t}\n       if (open->access)\n \t{\n-\t  gfc_status (\" ACCESS=\");\n-\t  gfc_show_expr (open->access);\n+\t  fputs (\" ACCESS=\", dumpfile);\n+\t  show_expr (open->access);\n \t}\n       if (open->form)\n \t{\n-\t  gfc_status (\" FORM=\");\n-\t  gfc_show_expr (open->form);\n+\t  fputs (\" FORM=\", dumpfile);\n+\t  show_expr (open->form);\n \t}\n       if (open->recl)\n \t{\n-\t  gfc_status (\" RECL=\");\n-\t  gfc_show_expr (open->recl);\n+\t  fputs (\" RECL=\", dumpfile);\n+\t  show_expr (open->recl);\n \t}\n       if (open->blank)\n \t{\n-\t  gfc_status (\" BLANK=\");\n-\t  gfc_show_expr (open->blank);\n+\t  fputs (\" BLANK=\", dumpfile);\n+\t  show_expr (open->blank);\n \t}\n       if (open->position)\n \t{\n-\t  gfc_status (\" POSITION=\");\n-\t  gfc_show_expr (open->position);\n+\t  fputs (\" POSITION=\", dumpfile);\n+\t  show_expr (open->position);\n \t}\n       if (open->action)\n \t{\n-\t  gfc_status (\" ACTION=\");\n-\t  gfc_show_expr (open->action);\n+\t  fputs (\" ACTION=\", dumpfile);\n+\t  show_expr (open->action);\n \t}\n       if (open->delim)\n \t{\n-\t  gfc_status (\" DELIM=\");\n-\t  gfc_show_expr (open->delim);\n+\t  fputs (\" DELIM=\", dumpfile);\n+\t  show_expr (open->delim);\n \t}\n       if (open->pad)\n \t{\n-\t  gfc_status (\" PAD=\");\n-\t  gfc_show_expr (open->pad);\n+\t  fputs (\" PAD=\", dumpfile);\n+\t  show_expr (open->pad);\n \t}\n       if (open->decimal)\n \t{\n-\t  gfc_status (\" DECIMAL=\");\n-\t  gfc_show_expr (open->decimal);\n+\t  fputs (\" DECIMAL=\", dumpfile);\n+\t  show_expr (open->decimal);\n \t}\n       if (open->encoding)\n \t{\n-\t  gfc_status (\" ENCODING=\");\n-\t  gfc_show_expr (open->encoding);\n+\t  fputs (\" ENCODING=\", dumpfile);\n+\t  show_expr (open->encoding);\n \t}\n       if (open->round)\n \t{\n-\t  gfc_status (\" ROUND=\");\n-\t  gfc_show_expr (open->round);\n+\t  fputs (\" ROUND=\", dumpfile);\n+\t  show_expr (open->round);\n \t}\n       if (open->sign)\n \t{\n-\t  gfc_status (\" SIGN=\");\n-\t  gfc_show_expr (open->sign);\n+\t  fputs (\" SIGN=\", dumpfile);\n+\t  show_expr (open->sign);\n \t}\n       if (open->convert)\n \t{\n-\t  gfc_status (\" CONVERT=\");\n-\t  gfc_show_expr (open->convert);\n+\t  fputs (\" CONVERT=\", dumpfile);\n+\t  show_expr (open->convert);\n \t}\n       if (open->asynchronous)\n \t{\n-\t  gfc_status (\" ASYNCHRONOUS=\");\n-\t  gfc_show_expr (open->asynchronous);\n+\t  fputs (\" ASYNCHRONOUS=\", dumpfile);\n+\t  show_expr (open->asynchronous);\n \t}\n       if (open->err != NULL)\n-\tgfc_status (\" ERR=%d\", open->err->value);\n+\tfprintf (dumpfile, \" ERR=%d\", open->err->value);\n \n       break;\n \n     case EXEC_CLOSE:\n-      gfc_status (\"CLOSE\");\n+      fputs (\"CLOSE\", dumpfile);\n       close = c->ext.close;\n \n       if (close->unit)\n \t{\n-\t  gfc_status (\" UNIT=\");\n-\t  gfc_show_expr (close->unit);\n+\t  fputs (\" UNIT=\", dumpfile);\n+\t  show_expr (close->unit);\n \t}\n       if (close->iomsg)\n \t{\n-\t  gfc_status (\" IOMSG=\");\n-\t  gfc_show_expr (close->iomsg);\n+\t  fputs (\" IOMSG=\", dumpfile);\n+\t  show_expr (close->iomsg);\n \t}\n       if (close->iostat)\n \t{\n-\t  gfc_status (\" IOSTAT=\");\n-\t  gfc_show_expr (close->iostat);\n+\t  fputs (\" IOSTAT=\", dumpfile);\n+\t  show_expr (close->iostat);\n \t}\n       if (close->status)\n \t{\n-\t  gfc_status (\" STATUS=\");\n-\t  gfc_show_expr (close->status);\n+\t  fputs (\" STATUS=\", dumpfile);\n+\t  show_expr (close->status);\n \t}\n       if (close->err != NULL)\n-\tgfc_status (\" ERR=%d\", close->err->value);\n+\tfprintf (dumpfile, \" ERR=%d\", close->err->value);\n       break;\n \n     case EXEC_BACKSPACE:\n-      gfc_status (\"BACKSPACE\");\n+      fputs (\"BACKSPACE\", dumpfile);\n       goto show_filepos;\n \n     case EXEC_ENDFILE:\n-      gfc_status (\"ENDFILE\");\n+      fputs (\"ENDFILE\", dumpfile);\n       goto show_filepos;\n \n     case EXEC_REWIND:\n-      gfc_status (\"REWIND\");\n+      fputs (\"REWIND\", dumpfile);\n       goto show_filepos;\n \n     case EXEC_FLUSH:\n-      gfc_status (\"FLUSH\");\n+      fputs (\"FLUSH\", dumpfile);\n \n     show_filepos:\n       fp = c->ext.filepos;\n \n       if (fp->unit)\n \t{\n-\t  gfc_status (\" UNIT=\");\n-\t  gfc_show_expr (fp->unit);\n+\t  fputs (\" UNIT=\", dumpfile);\n+\t  show_expr (fp->unit);\n \t}\n       if (fp->iomsg)\n \t{\n-\t  gfc_status (\" IOMSG=\");\n-\t  gfc_show_expr (fp->iomsg);\n+\t  fputs (\" IOMSG=\", dumpfile);\n+\t  show_expr (fp->iomsg);\n \t}\n       if (fp->iostat)\n \t{\n-\t  gfc_status (\" IOSTAT=\");\n-\t  gfc_show_expr (fp->iostat);\n+\t  fputs (\" IOSTAT=\", dumpfile);\n+\t  show_expr (fp->iostat);\n \t}\n       if (fp->err != NULL)\n-\tgfc_status (\" ERR=%d\", fp->err->value);\n+\tfprintf (dumpfile, \" ERR=%d\", fp->err->value);\n       break;\n \n     case EXEC_INQUIRE:\n-      gfc_status (\"INQUIRE\");\n+      fputs (\"INQUIRE\", dumpfile);\n       i = c->ext.inquire;\n \n       if (i->unit)\n \t{\n-\t  gfc_status (\" UNIT=\");\n-\t  gfc_show_expr (i->unit);\n+\t  fputs (\" UNIT=\", dumpfile);\n+\t  show_expr (i->unit);\n \t}\n       if (i->file)\n \t{\n-\t  gfc_status (\" FILE=\");\n-\t  gfc_show_expr (i->file);\n+\t  fputs (\" FILE=\", dumpfile);\n+\t  show_expr (i->file);\n \t}\n \n       if (i->iomsg)\n \t{\n-\t  gfc_status (\" IOMSG=\");\n-\t  gfc_show_expr (i->iomsg);\n+\t  fputs (\" IOMSG=\", dumpfile);\n+\t  show_expr (i->iomsg);\n \t}\n       if (i->iostat)\n \t{\n-\t  gfc_status (\" IOSTAT=\");\n-\t  gfc_show_expr (i->iostat);\n+\t  fputs (\" IOSTAT=\", dumpfile);\n+\t  show_expr (i->iostat);\n \t}\n       if (i->exist)\n \t{\n-\t  gfc_status (\" EXIST=\");\n-\t  gfc_show_expr (i->exist);\n+\t  fputs (\" EXIST=\", dumpfile);\n+\t  show_expr (i->exist);\n \t}\n       if (i->opened)\n \t{\n-\t  gfc_status (\" OPENED=\");\n-\t  gfc_show_expr (i->opened);\n+\t  fputs (\" OPENED=\", dumpfile);\n+\t  show_expr (i->opened);\n \t}\n       if (i->number)\n \t{\n-\t  gfc_status (\" NUMBER=\");\n-\t  gfc_show_expr (i->number);\n+\t  fputs (\" NUMBER=\", dumpfile);\n+\t  show_expr (i->number);\n \t}\n       if (i->named)\n \t{\n-\t  gfc_status (\" NAMED=\");\n-\t  gfc_show_expr (i->named);\n+\t  fputs (\" NAMED=\", dumpfile);\n+\t  show_expr (i->named);\n \t}\n       if (i->name)\n \t{\n-\t  gfc_status (\" NAME=\");\n-\t  gfc_show_expr (i->name);\n+\t  fputs (\" NAME=\", dumpfile);\n+\t  show_expr (i->name);\n \t}\n       if (i->access)\n \t{\n-\t  gfc_status (\" ACCESS=\");\n-\t  gfc_show_expr (i->access);\n+\t  fputs (\" ACCESS=\", dumpfile);\n+\t  show_expr (i->access);\n \t}\n       if (i->sequential)\n \t{\n-\t  gfc_status (\" SEQUENTIAL=\");\n-\t  gfc_show_expr (i->sequential);\n+\t  fputs (\" SEQUENTIAL=\", dumpfile);\n+\t  show_expr (i->sequential);\n \t}\n \n       if (i->direct)\n \t{\n-\t  gfc_status (\" DIRECT=\");\n-\t  gfc_show_expr (i->direct);\n+\t  fputs (\" DIRECT=\", dumpfile);\n+\t  show_expr (i->direct);\n \t}\n       if (i->form)\n \t{\n-\t  gfc_status (\" FORM=\");\n-\t  gfc_show_expr (i->form);\n+\t  fputs (\" FORM=\", dumpfile);\n+\t  show_expr (i->form);\n \t}\n       if (i->formatted)\n \t{\n-\t  gfc_status (\" FORMATTED\");\n-\t  gfc_show_expr (i->formatted);\n+\t  fputs (\" FORMATTED\", dumpfile);\n+\t  show_expr (i->formatted);\n \t}\n       if (i->unformatted)\n \t{\n-\t  gfc_status (\" UNFORMATTED=\");\n-\t  gfc_show_expr (i->unformatted);\n+\t  fputs (\" UNFORMATTED=\", dumpfile);\n+\t  show_expr (i->unformatted);\n \t}\n       if (i->recl)\n \t{\n-\t  gfc_status (\" RECL=\");\n-\t  gfc_show_expr (i->recl);\n+\t  fputs (\" RECL=\", dumpfile);\n+\t  show_expr (i->recl);\n \t}\n       if (i->nextrec)\n \t{\n-\t  gfc_status (\" NEXTREC=\");\n-\t  gfc_show_expr (i->nextrec);\n+\t  fputs (\" NEXTREC=\", dumpfile);\n+\t  show_expr (i->nextrec);\n \t}\n       if (i->blank)\n \t{\n-\t  gfc_status (\" BLANK=\");\n-\t  gfc_show_expr (i->blank);\n+\t  fputs (\" BLANK=\", dumpfile);\n+\t  show_expr (i->blank);\n \t}\n       if (i->position)\n \t{\n-\t  gfc_status (\" POSITION=\");\n-\t  gfc_show_expr (i->position);\n+\t  fputs (\" POSITION=\", dumpfile);\n+\t  show_expr (i->position);\n \t}\n       if (i->action)\n \t{\n-\t  gfc_status (\" ACTION=\");\n-\t  gfc_show_expr (i->action);\n+\t  fputs (\" ACTION=\", dumpfile);\n+\t  show_expr (i->action);\n \t}\n       if (i->read)\n \t{\n-\t  gfc_status (\" READ=\");\n-\t  gfc_show_expr (i->read);\n+\t  fputs (\" READ=\", dumpfile);\n+\t  show_expr (i->read);\n \t}\n       if (i->write)\n \t{\n-\t  gfc_status (\" WRITE=\");\n-\t  gfc_show_expr (i->write);\n+\t  fputs (\" WRITE=\", dumpfile);\n+\t  show_expr (i->write);\n \t}\n       if (i->readwrite)\n \t{\n-\t  gfc_status (\" READWRITE=\");\n-\t  gfc_show_expr (i->readwrite);\n+\t  fputs (\" READWRITE=\", dumpfile);\n+\t  show_expr (i->readwrite);\n \t}\n       if (i->delim)\n \t{\n-\t  gfc_status (\" DELIM=\");\n-\t  gfc_show_expr (i->delim);\n+\t  fputs (\" DELIM=\", dumpfile);\n+\t  show_expr (i->delim);\n \t}\n       if (i->pad)\n \t{\n-\t  gfc_status (\" PAD=\");\n-\t  gfc_show_expr (i->pad);\n+\t  fputs (\" PAD=\", dumpfile);\n+\t  show_expr (i->pad);\n \t}\n       if (i->convert)\n \t{\n-\t  gfc_status (\" CONVERT=\");\n-\t  gfc_show_expr (i->convert);\n+\t  fputs (\" CONVERT=\", dumpfile);\n+\t  show_expr (i->convert);\n \t}\n       if (i->asynchronous)\n \t{\n-\t  gfc_status (\" ASYNCHRONOUS=\");\n-\t  gfc_show_expr (i->asynchronous);\n+\t  fputs (\" ASYNCHRONOUS=\", dumpfile);\n+\t  show_expr (i->asynchronous);\n \t}\n       if (i->decimal)\n \t{\n-\t  gfc_status (\" DECIMAL=\");\n-\t  gfc_show_expr (i->decimal);\n+\t  fputs (\" DECIMAL=\", dumpfile);\n+\t  show_expr (i->decimal);\n \t}\n       if (i->encoding)\n \t{\n-\t  gfc_status (\" ENCODING=\");\n-\t  gfc_show_expr (i->encoding);\n+\t  fputs (\" ENCODING=\", dumpfile);\n+\t  show_expr (i->encoding);\n \t}\n       if (i->pending)\n \t{\n-\t  gfc_status (\" PENDING=\");\n-\t  gfc_show_expr (i->pending);\n+\t  fputs (\" PENDING=\", dumpfile);\n+\t  show_expr (i->pending);\n \t}\n       if (i->round)\n \t{\n-\t  gfc_status (\" ROUND=\");\n-\t  gfc_show_expr (i->round);\n+\t  fputs (\" ROUND=\", dumpfile);\n+\t  show_expr (i->round);\n \t}\n       if (i->sign)\n \t{\n-\t  gfc_status (\" SIGN=\");\n-\t  gfc_show_expr (i->sign);\n+\t  fputs (\" SIGN=\", dumpfile);\n+\t  show_expr (i->sign);\n \t}\n       if (i->size)\n \t{\n-\t  gfc_status (\" SIZE=\");\n-\t  gfc_show_expr (i->size);\n+\t  fputs (\" SIZE=\", dumpfile);\n+\t  show_expr (i->size);\n \t}\n       if (i->id)\n \t{\n-\t  gfc_status (\" ID=\");\n-\t  gfc_show_expr (i->id);\n+\t  fputs (\" ID=\", dumpfile);\n+\t  show_expr (i->id);\n \t}\n \n       if (i->err != NULL)\n-\tgfc_status (\" ERR=%d\", i->err->value);\n+\tfprintf (dumpfile, \" ERR=%d\", i->err->value);\n       break;\n \n     case EXEC_IOLENGTH:\n-      gfc_status (\"IOLENGTH \");\n-      gfc_show_expr (c->expr);\n+      fputs (\"IOLENGTH \", dumpfile);\n+      show_expr (c->expr);\n       goto show_dt_code;\n       break;\n \n     case EXEC_READ:\n-      gfc_status (\"READ\");\n+      fputs (\"READ\", dumpfile);\n       goto show_dt;\n \n     case EXEC_WRITE:\n-      gfc_status (\"WRITE\");\n+      fputs (\"WRITE\", dumpfile);\n \n     show_dt:\n       dt = c->ext.dt;\n       if (dt->io_unit)\n \t{\n-\t  gfc_status (\" UNIT=\");\n-\t  gfc_show_expr (dt->io_unit);\n+\t  fputs (\" UNIT=\", dumpfile);\n+\t  show_expr (dt->io_unit);\n \t}\n \n       if (dt->format_expr)\n \t{\n-\t  gfc_status (\" FMT=\");\n-\t  gfc_show_expr (dt->format_expr);\n+\t  fputs (\" FMT=\", dumpfile);\n+\t  show_expr (dt->format_expr);\n \t}\n \n       if (dt->format_label != NULL)\n-\tgfc_status (\" FMT=%d\", dt->format_label->value);\n+\tfprintf (dumpfile, \" FMT=%d\", dt->format_label->value);\n       if (dt->namelist)\n-\tgfc_status (\" NML=%s\", dt->namelist->name);\n+\tfprintf (dumpfile, \" NML=%s\", dt->namelist->name);\n \n       if (dt->iomsg)\n \t{\n-\t  gfc_status (\" IOMSG=\");\n-\t  gfc_show_expr (dt->iomsg);\n+\t  fputs (\" IOMSG=\", dumpfile);\n+\t  show_expr (dt->iomsg);\n \t}\n       if (dt->iostat)\n \t{\n-\t  gfc_status (\" IOSTAT=\");\n-\t  gfc_show_expr (dt->iostat);\n+\t  fputs (\" IOSTAT=\", dumpfile);\n+\t  show_expr (dt->iostat);\n \t}\n       if (dt->size)\n \t{\n-\t  gfc_status (\" SIZE=\");\n-\t  gfc_show_expr (dt->size);\n+\t  fputs (\" SIZE=\", dumpfile);\n+\t  show_expr (dt->size);\n \t}\n       if (dt->rec)\n \t{\n-\t  gfc_status (\" REC=\");\n-\t  gfc_show_expr (dt->rec);\n+\t  fputs (\" REC=\", dumpfile);\n+\t  show_expr (dt->rec);\n \t}\n       if (dt->advance)\n \t{\n-\t  gfc_status (\" ADVANCE=\");\n-\t  gfc_show_expr (dt->advance);\n+\t  fputs (\" ADVANCE=\", dumpfile);\n+\t  show_expr (dt->advance);\n \t}\n       if (dt->id)\n \t{\n-\t  gfc_status (\" ID=\");\n-\t  gfc_show_expr (dt->id);\n+\t  fputs (\" ID=\", dumpfile);\n+\t  show_expr (dt->id);\n \t}\n       if (dt->pos)\n \t{\n-\t  gfc_status (\" POS=\");\n-\t  gfc_show_expr (dt->pos);\n+\t  fputs (\" POS=\", dumpfile);\n+\t  show_expr (dt->pos);\n \t}\n       if (dt->asynchronous)\n \t{\n-\t  gfc_status (\" ASYNCHRONOUS=\");\n-\t  gfc_show_expr (dt->asynchronous);\n+\t  fputs (\" ASYNCHRONOUS=\", dumpfile);\n+\t  show_expr (dt->asynchronous);\n \t}\n       if (dt->blank)\n \t{\n-\t  gfc_status (\" BLANK=\");\n-\t  gfc_show_expr (dt->blank);\n+\t  fputs (\" BLANK=\", dumpfile);\n+\t  show_expr (dt->blank);\n \t}\n       if (dt->decimal)\n \t{\n-\t  gfc_status (\" DECIMAL=\");\n-\t  gfc_show_expr (dt->decimal);\n+\t  fputs (\" DECIMAL=\", dumpfile);\n+\t  show_expr (dt->decimal);\n \t}\n       if (dt->delim)\n \t{\n-\t  gfc_status (\" DELIM=\");\n-\t  gfc_show_expr (dt->delim);\n+\t  fputs (\" DELIM=\", dumpfile);\n+\t  show_expr (dt->delim);\n \t}\n       if (dt->pad)\n \t{\n-\t  gfc_status (\" PAD=\");\n-\t  gfc_show_expr (dt->pad);\n+\t  fputs (\" PAD=\", dumpfile);\n+\t  show_expr (dt->pad);\n \t}\n       if (dt->round)\n \t{\n-\t  gfc_status (\" ROUND=\");\n-\t  gfc_show_expr (dt->round);\n+\t  fputs (\" ROUND=\", dumpfile);\n+\t  show_expr (dt->round);\n \t}\n       if (dt->sign)\n \t{\n-\t  gfc_status (\" SIGN=\");\n-\t  gfc_show_expr (dt->sign);\n+\t  fputs (\" SIGN=\", dumpfile);\n+\t  show_expr (dt->sign);\n \t}\n \n     show_dt_code:\n-      gfc_status_char ('\\n');\n+      fputc ('\\n', dumpfile);\n       for (c = c->block->next; c; c = c->next)\n-\tgfc_show_code_node (level + (c->next != NULL), c);\n+\tshow_code_node (level + (c->next != NULL), c);\n       return;\n \n     case EXEC_TRANSFER:\n-      gfc_status (\"TRANSFER \");\n-      gfc_show_expr (c->expr);\n+      fputs (\"TRANSFER \", dumpfile);\n+      show_expr (c->expr);\n       break;\n \n     case EXEC_DT_END:\n-      gfc_status (\"DT_END\");\n+      fputs (\"DT_END\", dumpfile);\n       dt = c->ext.dt;\n \n       if (dt->err != NULL)\n-\tgfc_status (\" ERR=%d\", dt->err->value);\n+\tfprintf (dumpfile, \" ERR=%d\", dt->err->value);\n       if (dt->end != NULL)\n-\tgfc_status (\" END=%d\", dt->end->value);\n+\tfprintf (dumpfile, \" END=%d\", dt->end->value);\n       if (dt->eor != NULL)\n-\tgfc_status (\" EOR=%d\", dt->eor->value);\n+\tfprintf (dumpfile, \" EOR=%d\", dt->eor->value);\n       break;\n \n     case EXEC_OMP_ATOMIC:\n@@ -1826,38 +1809,38 @@ gfc_show_code_node (int level, gfc_code *c)\n     case EXEC_OMP_SECTIONS:\n     case EXEC_OMP_SINGLE:\n     case EXEC_OMP_WORKSHARE:\n-      gfc_show_omp_node (level, c);\n+      show_omp_node (level, c);\n       break;\n \n     default:\n-      gfc_internal_error (\"gfc_show_code_node(): Bad statement code\");\n+      gfc_internal_error (\"show_code_node(): Bad statement code\");\n     }\n \n-  gfc_status_char ('\\n');\n+  fputc ('\\n', dumpfile);\n }\n \n \n /* Show an equivalence chain.  */\n \n-void\n-gfc_show_equiv (gfc_equiv *eq)\n+static void\n+show_equiv (gfc_equiv *eq)\n {\n   show_indent ();\n-  gfc_status (\"Equivalence: \");\n+  fputs (\"Equivalence: \", dumpfile);\n   while (eq)\n     {\n-      gfc_show_expr (eq->expr);\n+      show_expr (eq->expr);\n       eq = eq->eq;\n       if (eq)\n-\tgfc_status (\", \");\n+\tfputs (\", \", dumpfile);\n     }\n }\n \n-    \n+\n /* Show a freakin' whole namespace.  */\n \n-void\n-gfc_show_namespace (gfc_namespace *ns)\n+static void\n+show_namespace (gfc_namespace *ns)\n {\n   gfc_interface *intr;\n   gfc_namespace *save;\n@@ -1869,7 +1852,7 @@ gfc_show_namespace (gfc_namespace *ns)\n   show_level++;\n \n   show_indent ();\n-  gfc_status (\"Namespace:\");\n+  fputs (\"Namespace:\", dumpfile);\n \n   if (ns != NULL)\n     {\n@@ -1883,18 +1866,18 @@ gfc_show_namespace (gfc_namespace *ns)\n \t    i++;\n \n \t  if (i > l)\n-\t    gfc_status(\" %c-%c: \", l+'A', i+'A');\n+\t    fprintf (dumpfile, \" %c-%c: \", l+'A', i+'A');\n \t  else\n-\t    gfc_status(\" %c: \", l+'A');\n+\t    fprintf (dumpfile, \" %c: \", l+'A');\n \n-\t  gfc_show_typespec(&ns->default_type[l]);\n+\t  show_typespec(&ns->default_type[l]);\n \t  i++;\n       } while (i < GFC_LETTERS);\n \n       if (ns->proc_name != NULL)\n \t{\n \t  show_indent ();\n-\t  gfc_status (\"procedure name = %s\", ns->proc_name->name);\n+\t  fprintf (dumpfile, \"procedure name = %s\", ns->proc_name->name);\n \t}\n \n       gfc_current_ns = ns;\n@@ -1910,36 +1893,47 @@ gfc_show_namespace (gfc_namespace *ns)\n \t    continue;\n \n \t  show_indent ();\n-\t  gfc_status (\"Operator interfaces for %s:\", gfc_op2string (op));\n+\t  fprintf (dumpfile, \"Operator interfaces for %s:\",\n+\t\t   gfc_op2string (op));\n \n \t  for (; intr; intr = intr->next)\n-\t    gfc_status (\" %s\", intr->sym->name);\n+\t    fprintf (dumpfile, \" %s\", intr->sym->name);\n \t}\n \n       if (ns->uop_root != NULL)\n \t{\n \t  show_indent ();\n-\t  gfc_status (\"User operators:\\n\");\n+\t  fputs (\"User operators:\\n\", dumpfile);\n \t  gfc_traverse_user_op (ns, show_uop);\n \t}\n     }\n   \n   for (eq = ns->equiv; eq; eq = eq->next)\n-    gfc_show_equiv (eq);\n+    show_equiv (eq);\n \n-  gfc_status_char ('\\n');\n-  gfc_status_char ('\\n');\n+  fputc ('\\n', dumpfile);\n+  fputc ('\\n', dumpfile);\n \n-  gfc_show_code (0, ns->code);\n+  show_code (0, ns->code);\n \n   for (ns = ns->contained; ns; ns = ns->sibling)\n     {\n       show_indent ();\n-      gfc_status (\"CONTAINS\\n\");\n-      gfc_show_namespace (ns);\n+      fputs (\"CONTAINS\\n\", dumpfile);\n+      show_namespace (ns);\n     }\n \n   show_level--;\n-  gfc_status_char ('\\n');\n+  fputc ('\\n', dumpfile);\n   gfc_current_ns = save;\n }\n+\n+\n+/* Main function for dumping a parse tree.  */\n+\n+void\n+gfc_dump_parse_tree (gfc_namespace *ns, FILE *file)\n+{\n+  dumpfile = file;\n+  show_namespace (ns);\n+}"}, {"sha": "40eccde5adf426ca4d56e3cc1f89f78791e28284", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "patch": "@@ -963,31 +963,6 @@ gfc_free_error (gfc_error_buf *err)\n }\n \n \n-/* Debug wrapper for printf.  */\n-\n-void\n-gfc_status (const char *cmsgid, ...)\n-{\n-  va_list argp;\n-\n-  va_start (argp, cmsgid);\n-\n-  vprintf (_(cmsgid), argp);\n-\n-  va_end (argp);\n-}\n-\n-\n-/* Subroutine for outputting a single char so that we don't have to go\n-   around creating a lot of 1-character strings.  */\n-\n-void\n-gfc_status_char (char c)\n-{\n-  putchar (c);\n-}\n-\n-\n /* Report the number of warnings and errors that occurred to the caller.  */\n \n void"}, {"sha": "6035f629f56111bbce7b4816cd94f07cbdcd48c3", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "patch": "@@ -1818,7 +1818,7 @@ typedef struct\n   int max_continue_fixed;\n   int max_continue_free;\n   int max_identifier_length;\n-  int verbose;\n+  int dump_parse_tree;\n \n   int warn_aliasing;\n   int warn_ampersand;\n@@ -2012,9 +2012,6 @@ void gfc_push_error (gfc_error_buf *);\n void gfc_pop_error (gfc_error_buf *);\n void gfc_free_error (gfc_error_buf *);\n \n-void gfc_status (const char *, ...) ATTRIBUTE_PRINTF_1;\n-void gfc_status_char (char);\n-\n void gfc_get_errors (int *, int *);\n \n /* arith.c */\n@@ -2360,22 +2357,7 @@ void gfc_insert_bbt (void *, void *, compare_fn);\n void gfc_delete_bbt (void *, void *, compare_fn);\n \n /* dump-parse-tree.c */\n-void gfc_show_actual_arglist (gfc_actual_arglist *);\n-void gfc_show_array_ref (gfc_array_ref *);\n-void gfc_show_array_spec (gfc_array_spec *);\n-void gfc_show_attr (symbol_attribute *);\n-void gfc_show_code (int, gfc_code *);\n-void gfc_show_components (gfc_symbol *);\n-void gfc_show_constructor (gfc_constructor *);\n-void gfc_show_equiv (gfc_equiv *);\n-void gfc_show_expr (gfc_expr *);\n-void gfc_show_expr_n (const char *, gfc_expr *);\n-void gfc_show_namelist (gfc_namelist *);\n-void gfc_show_namespace (gfc_namespace *);\n-void gfc_show_ref (gfc_ref *);\n-void gfc_show_symbol (gfc_symbol *);\n-void gfc_show_symbol_n (const char *, gfc_symbol *);\n-void gfc_show_typespec (gfc_typespec *);\n+void gfc_dump_parse_tree (gfc_namespace *, FILE *);\n \n /* parse.c */\n try gfc_parse_file (void);"}, {"sha": "5ccbc77fb67ff1dde38e17e1084b4414155a5269", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "patch": "@@ -64,7 +64,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.max_subrecord_length = 0;\n   gfc_option.convert = GFC_CONVERT_NATIVE;\n   gfc_option.record_marker = 0;\n-  gfc_option.verbose = 0;\n+  gfc_option.dump_parse_tree = 0;\n \n   gfc_option.warn_aliasing = 0;\n   gfc_option.warn_ampersand = 0;\n@@ -391,16 +391,10 @@ gfc_handle_module_path_options (const char *arg)\n {\n \n   if (gfc_option.module_dir != NULL)\n-    {\n-      gfc_status (\"gfortran: Only one -M option allowed\\n\");\n-      exit (3);\n-    }\n+    gfc_fatal_error (\"gfortran: Only one -M option allowed\");\n \n   if (arg == NULL)\n-    {\n-      gfc_status (\"gfortran: Directory required after -M\\n\");\n-      exit (3);\n-    }\n+    gfc_fatal_error (\"gfortran: Directory required after -M\");\n \n   gfc_option.module_dir = (char *) gfc_getmem (strlen (arg) + 2);\n   strcpy (gfc_option.module_dir, arg);\n@@ -564,7 +558,7 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_fdump_parse_tree:\n-      gfc_option.verbose = value;\n+      gfc_option.dump_parse_tree = value;\n       break;\n \n     case OPT_ffixed_form:"}, {"sha": "872f35087da2df29ed8c9b5498a28fd3cf2a1785", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=6c1abb5c58569e9655b1f92fd0d8e9d2e29c9c4f", "patch": "@@ -1684,10 +1684,8 @@ gfc_new_file (void)\n \n #if 0 /* Debugging aid.  */\n   for (; line_head; line_head = line_head->next)\n-    gfc_status (\"%s:%3d %s\\n\",\n-\t\tLOCATION_FILE (line_head->location),\n-\t\tLOCATION_LINE (line_head->location),\n-\t\tline_head->line);\n+    printf (\"%s:%3d %s\\n\", LOCATION_FILE (line_head->location),\n+\t    LOCATION_LINE (line_head->location), line_head->line);\n \n   exit (0);\n #endif"}]}