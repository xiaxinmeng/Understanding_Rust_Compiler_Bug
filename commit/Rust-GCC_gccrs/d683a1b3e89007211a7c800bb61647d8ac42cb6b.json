{"sha": "d683a1b3e89007211a7c800bb61647d8ac42cb6b", "node_id": "C_kwDOANBUbNoAKGQ2ODNhMWIzZTg5MDA3MjExYTdjODAwYmI2MTY0N2Q4YWM0MmNiNmI", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-12-01T15:20:15Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-12-01T18:17:22Z"}, "message": "rs6000: Mirror fix for PR102347 in new builtins support\n\nRecently Kewen fixed a problem in the old builtins support where\nrs6000_builtin_decl prematurely indicated that a target builtin is\nunavailable.  This also needs to be done for the new builtins support, but in\nthis case we have to ensure the error message is still produced from the\noverload support in rs6000-c.c.  Unfortunately, this is less straightforward\nthan it could be, because header file includes need to be adjusted to make this\nhappen.  Someday we'll consolidate all the builtin code in one file and this\nwon't have to be so ugly.\n\n2021-12-01  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\tPR target/102347\n\t* config/rs6000/rs6000-c.c (rs6000-builtins.h): Stop including.\n\t(rs6000-internal.h): Include.\n\t(altivec_resolve_new_overloaded_builtin): Move call to\n\trs6000_invalid_new_builtin here from rs6000_new_builtin_decl.\n\t* config/rs6000/rs6000-call.c (rs6000-builtins.h): Stop including.\n\t(rs6000_invalid_new_builtin): Remove static qualifier.\n\t(rs6000_new_builtin_decl): Remove test for supported builtin.\n\t* config/rs6000/rs6000-internal.h (rs6000-builtins.h): Include.\n\t(rs6000_invalid_new_builtin): Declare.\n\t* config/rs6000/rs6000.c (rs6000-builtins.h): Don't include.", "tree": {"sha": "c4b9fcaa64487ec7441624b3884c08015d8631ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b9fcaa64487ec7441624b3884c08015d8631ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d683a1b3e89007211a7c800bb61647d8ac42cb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d683a1b3e89007211a7c800bb61647d8ac42cb6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d683a1b3e89007211a7c800bb61647d8ac42cb6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d683a1b3e89007211a7c800bb61647d8ac42cb6b/comments", "author": null, "committer": null, "parents": [{"sha": "54ebec35abec09a24b47b997172622ca0d8e2318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ebec35abec09a24b47b997172622ca0d8e2318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ebec35abec09a24b47b997172622ca0d8e2318"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "8e83d97e72f1e4dab05321f989ef1f7db1e22cde", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=d683a1b3e89007211a7c800bb61647d8ac42cb6b", "patch": "@@ -35,7 +35,7 @@\n #include \"langhooks.h\"\n #include \"c/c-tree.h\"\n \n-#include \"rs6000-builtins.h\"\n+#include \"rs6000-internal.h\"\n \n static tree altivec_resolve_new_overloaded_builtin (location_t, tree, void *);\n \n@@ -2987,11 +2987,14 @@ altivec_resolve_new_overloaded_builtin (location_t loc, tree fndecl,\n \tconst char *name = rs6000_overload_info[adj_fcode].ovld_name;\n \tif (!supported)\n \t  {\n+\t    /* Indicate that the instantiation of the overloaded builtin\n+\t       name is not available with the target flags in effect.  */\n+\t    rs6000_gen_builtins fcode = (rs6000_gen_builtins) instance->bifid;\n+\t    rs6000_invalid_new_builtin (fcode);\n+\t    /* Provide clarity of the relationship between the overload\n+\t       and the instantiation.  */\n \t    const char *internal_name\n \t      = rs6000_builtin_info_x[instance->bifid].bifname;\n-\t    /* An error message making reference to the name of the\n-\t       non-overloaded function has already been issued.  Add\n-\t       clarification of the previous message.  */\n \t    rich_location richloc (line_table, input_location);\n \t    inform (&richloc,\n \t\t    \"overloaded builtin %qs is implemented by builtin %qs\","}, {"sha": "01688c4169d468ff3e3299a3c27463473edbee26", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=d683a1b3e89007211a7c800bb61647d8ac42cb6b", "patch": "@@ -69,7 +69,6 @@\n #include \"opts.h\"\n \n #include \"rs6000-internal.h\"\n-#include \"rs6000-builtins.h\"\n \n #if TARGET_MACHO\n #include \"gstab.h\"  /* for N_SLINE */\n@@ -11905,7 +11904,7 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n /* Raise an error message for a builtin function that is called without the\n    appropriate target options being set.  */\n \n-static void\n+void\n rs6000_invalid_new_builtin (enum rs6000_gen_builtins fncode)\n {\n   size_t j = (size_t) fncode;\n@@ -16624,12 +16623,6 @@ rs6000_new_builtin_decl (unsigned code, bool /* initialize_p */)\n   if (fcode >= RS6000_OVLD_MAX)\n     return error_mark_node;\n \n-  if (!rs6000_new_builtin_is_supported (fcode))\n-    {\n-      rs6000_invalid_new_builtin (fcode);\n-      return error_mark_node;\n-    }\n-\n   return rs6000_builtin_decls_x[code];\n }\n "}, {"sha": "a880fd3761837445120f2d7a9b3c1386a8451905", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=d683a1b3e89007211a7c800bb61647d8ac42cb6b", "patch": "@@ -22,6 +22,8 @@\n #ifndef GCC_RS6000_INTERNAL_H\n #define GCC_RS6000_INTERNAL_H\n \n+#include \"rs6000-builtins.h\"\n+\n /* Structure used to define the rs6000 stack */\n typedef struct rs6000_stack {\n   int reload_completed;\t\t/* stack info won't change from here on */\n@@ -140,6 +142,7 @@ extern void rs6000_output_mi_thunk (FILE *file,\n extern bool rs6000_output_addr_const_extra (FILE *file, rtx x);\n extern bool rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi);\n extern tree rs6000_build_builtin_va_list (void);\n+extern void rs6000_invalid_new_builtin (rs6000_gen_builtins fncode);\n extern void rs6000_va_start (tree valist, rtx nextarg);\n extern tree rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t\t\t\t    gimple_seq *post_p);"}, {"sha": "945157b1c1ac85f2d557b8a1b1a4d397b3f91eb6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d683a1b3e89007211a7c800bb61647d8ac42cb6b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d683a1b3e89007211a7c800bb61647d8ac42cb6b", "patch": "@@ -78,7 +78,6 @@\n #include \"case-cfn-macros.h\"\n #include \"ppc-auxv.h\"\n #include \"rs6000-internal.h\"\n-#include \"rs6000-builtins.h\"\n #include \"opts.h\"\n \n /* This file should be included last.  */"}]}