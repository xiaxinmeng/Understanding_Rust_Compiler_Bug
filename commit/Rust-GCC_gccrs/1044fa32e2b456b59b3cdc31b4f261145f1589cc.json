{"sha": "1044fa32e2b456b59b3cdc31b4f261145f1589cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0NGZhMzJlMmI0NTZiNTliM2NkYzMxYjRmMjYxMTQ1ZjE1ODljYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-13T10:21:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-13T10:21:37Z"}, "message": "[AArch64] Use simd_immediate_info for SVE predicate constants\n\nThis patch makes predicate constants use the normal simd_immediate_info\nmachinery, rather than treating PFALSE and PTRUE as special cases.\nThis makes it easier to add other types of predicate constant later.\n\n2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_output_ptrue): Delete.\n\t* config/aarch64/aarch64-sve.md (*aarch64_sve_mov<PRED_ALL:mode>):\n\tUse a single Dn alternative instead of separate Dz and Dm\n\talternatives.  Use aarch64_output_sve_move_immediate.\n\t* config/aarch64/aarch64.c (aarch64_sve_element_int_mode): New\n\tfunction.\n\t(aarch64_simd_valid_immediate): Fill in the simd_immediate_info\n\tfor predicates too.\n\t(aarch64_output_sve_mov_immediate): Handle predicate modes.\n\t(aarch64_output_ptrue): Delete.\n\nFrom-SVN: r274372", "tree": {"sha": "b797c75b65591dfed0f621f3d4d064a5477ceb66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b797c75b65591dfed0f621f3d4d064a5477ceb66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1044fa32e2b456b59b3cdc31b4f261145f1589cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1044fa32e2b456b59b3cdc31b4f261145f1589cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1044fa32e2b456b59b3cdc31b4f261145f1589cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1044fa32e2b456b59b3cdc31b4f261145f1589cc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "020db7ae5d4be9cb39283d7c6a06211e441c79b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1044fa32e2b456b59b3cdc31b4f261145f1589cc", "patch": "@@ -1,3 +1,16 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_output_ptrue): Delete.\n+\t* config/aarch64/aarch64-sve.md (*aarch64_sve_mov<PRED_ALL:mode>):\n+\tUse a single Dn alternative instead of separate Dz and Dm\n+\talternatives.  Use aarch64_output_sve_move_immediate.\n+\t* config/aarch64/aarch64.c (aarch64_sve_element_int_mode): New\n+\tfunction.\n+\t(aarch64_simd_valid_immediate): Fill in the simd_immediate_info\n+\tfor predicates too.\n+\t(aarch64_output_sve_mov_immediate): Handle predicate modes.\n+\t(aarch64_output_ptrue): Delete.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (simd_immediate_info::insn_type): Add"}, {"sha": "3f5a348cc179c00debe81e9a869eb3265869f6a5", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=1044fa32e2b456b59b3cdc31b4f261145f1589cc", "patch": "@@ -462,7 +462,6 @@ char *aarch64_output_scalar_simd_mov_immediate (rtx, scalar_int_mode);\n char *aarch64_output_simd_mov_immediate (rtx, unsigned,\n \t\t\tenum simd_immediate_check w = AARCH64_CHECK_MOV);\n char *aarch64_output_sve_mov_immediate (rtx);\n-char *aarch64_output_ptrue (machine_mode, char);\n bool aarch64_pad_reg_upward (machine_mode, const_tree, bool);\n bool aarch64_regno_ok_for_base_p (int, bool);\n bool aarch64_regno_ok_for_index_p (int, bool);"}, {"sha": "fcac23b769dec28a6533c74db030417451d95d32", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=1044fa32e2b456b59b3cdc31b4f261145f1589cc", "patch": "@@ -453,17 +453,16 @@\n )\n \n (define_insn \"*aarch64_sve_mov<mode>\"\n-  [(set (match_operand:PRED_ALL 0 \"nonimmediate_operand\" \"=Upa, m, Upa, Upa, Upa\")\n-\t(match_operand:PRED_ALL 1 \"general_operand\" \"Upa, Upa, m, Dz, Dm\"))]\n+  [(set (match_operand:PRED_ALL 0 \"nonimmediate_operand\" \"=Upa, m, Upa, Upa\")\n+\t(match_operand:PRED_ALL 1 \"general_operand\" \"Upa, Upa, m, Dn\"))]\n   \"TARGET_SVE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n   \"@\n    mov\\t%0.b, %1.b\n    str\\t%1, %0\n    ldr\\t%0, %1\n-   pfalse\\t%0.b\n-   * return aarch64_output_ptrue (<MODE>mode, '<Vetype>');\"\n+   * return aarch64_output_sve_mov_immediate (operands[1]);\"\n )\n \n ;; ========================================================================="}, {"sha": "291cbb2696d2c166766d3fd443b9ab5055666b48", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1044fa32e2b456b59b3cdc31b4f261145f1589cc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1044fa32e2b456b59b3cdc31b4f261145f1589cc", "patch": "@@ -1635,6 +1635,16 @@ aarch64_get_mask_mode (poly_uint64 nunits, poly_uint64 nbytes)\n   return default_get_mask_mode (nunits, nbytes);\n }\n \n+/* Return the integer element mode associated with SVE mode MODE.  */\n+\n+static scalar_int_mode\n+aarch64_sve_element_int_mode (machine_mode mode)\n+{\n+  unsigned int elt_bits = vector_element_size (BITS_PER_SVE_VECTOR,\n+\t\t\t\t\t       GET_MODE_NUNITS (mode));\n+  return int_mode_for_size (elt_bits, 0).require ();\n+}\n+\n /* Implement TARGET_PREFERRED_ELSE_VALUE.  For binary operations,\n    prefer to use the first arithmetic operand as the else value if\n    the else value doesn't matter, since that exactly matches the SVE\n@@ -14700,8 +14710,18 @@ aarch64_simd_valid_immediate (rtx op, simd_immediate_info *info,\n \n   /* Handle PFALSE and PTRUE.  */\n   if (vec_flags & VEC_SVE_PRED)\n-    return (op == CONST0_RTX (mode)\n-\t    || op == CONSTM1_RTX (mode));\n+    {\n+      if (op == CONST0_RTX (mode) || op == CONSTM1_RTX (mode))\n+\t{\n+\t  if (info)\n+\t    {\n+\t      scalar_int_mode int_mode = aarch64_sve_element_int_mode (mode);\n+\t      *info = simd_immediate_info (int_mode, op == CONSTM1_RTX (mode));\n+\t    }\n+\t  return true;\n+\t}\n+      return false;\n+    }\n \n   scalar_float_mode elt_float_mode;\n   if (n_elts == 1\n@@ -16393,6 +16413,21 @@ aarch64_output_sve_mov_immediate (rtx const_vector)\n \n   element_char = sizetochar (GET_MODE_BITSIZE (info.elt_mode));\n \n+  machine_mode vec_mode = GET_MODE (const_vector);\n+  if (aarch64_sve_pred_mode_p (vec_mode))\n+    {\n+      static char buf[sizeof (\"ptrue\\t%0.N, vlNNNNN\")];\n+      unsigned int total_bytes;\n+      if (info.u.mov.value == const0_rtx)\n+\tsnprintf (buf, sizeof (buf), \"pfalse\\t%%0.b\");\n+      else if (BYTES_PER_SVE_VECTOR.is_constant (&total_bytes))\n+\tsnprintf (buf, sizeof (buf), \"ptrue\\t%%0.%c, vl%d\", element_char,\n+\t\t  total_bytes / GET_MODE_SIZE (info.elt_mode));\n+      else\n+\tsnprintf (buf, sizeof (buf), \"ptrue\\t%%0.%c, all\", element_char);\n+      return buf;\n+    }\n+\n   if (info.insn == simd_immediate_info::INDEX)\n     {\n       snprintf (templ, sizeof (templ), \"index\\t%%0.%c, #\"\n@@ -16425,21 +16460,6 @@ aarch64_output_sve_mov_immediate (rtx const_vector)\n   return templ;\n }\n \n-/* Return the asm format for a PTRUE instruction whose destination has\n-   mode MODE.  SUFFIX is the element size suffix.  */\n-\n-char *\n-aarch64_output_ptrue (machine_mode mode, char suffix)\n-{\n-  unsigned int nunits;\n-  static char buf[sizeof (\"ptrue\\t%0.N, vlNNNNN\")];\n-  if (GET_MODE_NUNITS (mode).is_constant (&nunits))\n-    snprintf (buf, sizeof (buf), \"ptrue\\t%%0.%c, vl%d\", suffix, nunits);\n-  else\n-    snprintf (buf, sizeof (buf), \"ptrue\\t%%0.%c, all\", suffix);\n-  return buf;\n-}\n-\n /* Split operands into moves from op[1] + op[2] into op[0].  */\n \n void"}]}