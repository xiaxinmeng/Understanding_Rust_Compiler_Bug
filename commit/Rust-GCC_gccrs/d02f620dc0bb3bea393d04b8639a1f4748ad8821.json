{"sha": "d02f620dc0bb3bea393d04b8639a1f4748ad8821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyZjYyMGRjMGJiM2JlYTM5M2QwNGI4NjM5YTFmNDc0OGFkODgyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-05-14T16:48:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-05-14T16:48:07Z"}, "message": "re PR c++/20332 (poor diagnostic when bind non lvalue to a reference for default arguments)\n\n\tPR c++/20332\n\tPR c++/21631\n\t* call.c (reference_binding): Treat lvalue/rvalue mismatch and\n\tdropped cv-quals as a bad conversion.\n\t(convert_like_real) [ck_ref_bind]: Explain them.\n\t(compare_ics): Check badness before stripping reference\n\tbindings.  Handle comparing bad reference bindings.\n\t* typeck.c (comp_cv_qualification): Add overload that just takes\n\tintegers.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r210436", "tree": {"sha": "fa4f8d8bc938c26bfd454f1b030d115993baceb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa4f8d8bc938c26bfd454f1b030d115993baceb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02f620dc0bb3bea393d04b8639a1f4748ad8821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02f620dc0bb3bea393d04b8639a1f4748ad8821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02f620dc0bb3bea393d04b8639a1f4748ad8821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02f620dc0bb3bea393d04b8639a1f4748ad8821/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89606913ce096b28d0a822fedf4a6333468a66cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89606913ce096b28d0a822fedf4a6333468a66cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89606913ce096b28d0a822fedf4a6333468a66cd"}], "stats": {"total": 334, "additions": 205, "deletions": 129}, "files": [{"sha": "b24a7c112b4ffd661957203d3b279544247f0d66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1,5 +1,16 @@\n 2014-05-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/20332\n+\tPR c++/21631\n+\t* call.c (reference_binding): Treat lvalue/rvalue mismatch and\n+\tdropped cv-quals as a bad conversion.\n+\t(convert_like_real) [ck_ref_bind]: Explain them.\n+\t(compare_ics): Check badness before stripping reference\n+\tbindings.  Handle comparing bad reference bindings.\n+\t* typeck.c (comp_cv_qualification): Add overload that just takes\n+\tintegers.\n+\t* cp-tree.h: Declare it.\n+\n \t* call.c (struct conversion_info): Rename 'from_type' to 'from'.\n \t(arg_conversion_rejection, bad_arg_conversion_rejection)\n \t(explicit_conversion_rejection, template_conversion_rejection): Adjust."}, {"sha": "23fad8fc70b34f58708fc29805a6608a71880297", "filename": "gcc/cp/call.c", "status": "modified", "additions": 79, "deletions": 54, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1540,15 +1540,11 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n      [8.5.3/5 dcl.init.ref] is changed to also require direct bindings for\n      const and rvalue references to rvalues of compatible class type.\n      We should also do direct bindings for non-class xvalues.  */\n-  if (compatible_p\n-      && (is_lvalue\n-\t  || (((CP_TYPE_CONST_NON_VOLATILE_P (to)\n-\t\t&& !(flags & LOOKUP_NO_RVAL_BIND))\n-\t       || TYPE_REF_IS_RVALUE (rto))\n-\t      && (gl_kind\n-\t\t  || (!(flags & LOOKUP_NO_TEMP_BIND)\n-\t\t      && (CLASS_TYPE_P (from)\n-\t\t\t  || TREE_CODE (from) == ARRAY_TYPE))))))\n+  if (related_p\n+      && (gl_kind\n+\t  || (!(flags & LOOKUP_NO_TEMP_BIND)\n+\t      && (CLASS_TYPE_P (from)\n+\t\t  || TREE_CODE (from) == ARRAY_TYPE))))\n     {\n       /* [dcl.init.ref]\n \n@@ -1603,6 +1599,16 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n           && !(flags & LOOKUP_PREFER_RVALUE))\n \tconv->bad_p = true;\n \n+      /* Nor the reverse.  */\n+      if (!is_lvalue && !TYPE_REF_IS_RVALUE (rto)\n+\t  && (!CP_TYPE_CONST_NON_VOLATILE_P (to)\n+\t      || (flags & LOOKUP_NO_RVAL_BIND))\n+\t  && TREE_CODE (to) != FUNCTION_TYPE)\n+\tconv->bad_p = true;\n+\n+      if (!compatible_p)\n+\tconv->bad_p = true;\n+\n       return conv;\n     }\n   /* [class.conv.fct] A conversion function is never used to convert a\n@@ -1647,24 +1653,6 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n      difference in top-level cv-qualification is subsumed by the\n      initialization itself and does not constitute a conversion.  */\n \n-  /* [dcl.init.ref]\n-\n-     Otherwise, the reference shall be an lvalue reference to a\n-     non-volatile const type, or the reference shall be an rvalue\n-     reference.  */\n-  if (!CP_TYPE_CONST_NON_VOLATILE_P (to) && !TYPE_REF_IS_RVALUE (rto))\n-    return NULL;\n-\n-  /* [dcl.init.ref]\n-\n-     Otherwise, a temporary of type \"cv1 T1\" is created and\n-     initialized from the initializer expression using the rules for a\n-     non-reference copy initialization.  If T1 is reference-related to\n-     T2, cv1 must be the same cv-qualification as, or greater\n-     cv-qualification than, cv2; otherwise, the program is ill-formed.  */\n-  if (related_p && !at_least_as_qualified_p (to, from))\n-    return NULL;\n-\n   /* We're generating a temporary now, but don't bind any more in the\n      conversion (specifically, don't slice the temporary returned by a\n      conversion operator).  */\n@@ -1710,6 +1698,24 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n   conv->need_temporary_p = true;\n   conv->rvaluedness_matches_p = TYPE_REF_IS_RVALUE (rto);\n \n+  /* [dcl.init.ref]\n+\n+     Otherwise, the reference shall be an lvalue reference to a\n+     non-volatile const type, or the reference shall be an rvalue\n+     reference.  */\n+  if (!CP_TYPE_CONST_NON_VOLATILE_P (to) && !TYPE_REF_IS_RVALUE (rto))\n+    conv->bad_p = true;\n+\n+  /* [dcl.init.ref]\n+\n+     Otherwise, a temporary of type \"cv1 T1\" is created and\n+     initialized from the initializer expression using the rules for a\n+     non-reference copy initialization.  If T1 is reference-related to\n+     T2, cv1 must be the same cv-qualification as, or greater\n+     cv-qualification than, cv2; otherwise, the program is ill-formed.  */\n+  if (related_p && !at_least_as_qualified_p (to, from))\n+    conv->bad_p = true;\n+\n   return conv;\n }\n \n@@ -6334,12 +6340,20 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n \tif (convs->bad_p && !next_conversion (convs)->bad_p)\n \t  {\n-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)\n-\t\t\t&& (real_lvalue_p (expr)\n-\t\t\t    || next_conversion(convs)->kind == ck_rvalue));\n-\n-\t    error_at (loc, \"cannot bind %qT lvalue to %qT\",\n-\t\t      TREE_TYPE (expr), totype);\n+\t    tree extype = TREE_TYPE (expr);\n+\t    if (TYPE_REF_IS_RVALUE (ref_type)\n+\t\t&& real_lvalue_p (expr))\n+\t      error_at (loc, \"cannot bind %qT lvalue to %qT\",\n+\t\t\textype, totype);\n+\t    else if (!TYPE_REF_IS_RVALUE (ref_type) && !real_lvalue_p (expr)\n+\t\t     && !CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (ref_type)))\n+\t      error_at (loc, \"invalid initialization of non-const reference of \"\n+\t\t\t\"type %qT from an rvalue of type %qT\", totype, extype);\n+\t    else if (!reference_compatible_p (TREE_TYPE (totype), extype))\n+\t      error_at (loc, \"binding %qT to reference of type %qT \"\n+\t\t\t\"discards qualifiers\", extype, totype);\n+\t    else\n+\t      gcc_unreachable ();\n \t    maybe_print_user_conv_context (convs);\n \t    if (fn)\n \t      inform (input_location,\n@@ -8230,6 +8244,12 @@ compare_ics (conversion *ics1, conversion *ics2)\n   conversion *ref_conv1;\n   conversion *ref_conv2;\n \n+  /* Compare badness before stripping the reference conversion.  */\n+  if (ics1->bad_p > ics2->bad_p)\n+    return -1;\n+  else if (ics1->bad_p < ics2->bad_p)\n+    return 1;\n+\n   /* Handle implicit object parameters.  */\n   maybe_handle_implicit_object (&ics1);\n   maybe_handle_implicit_object (&ics2);\n@@ -8258,31 +8278,19 @@ compare_ics (conversion *ics1, conversion *ics2)\n      --a user-defined conversion sequence (_over.ics.user_) is a\n        better conversion sequence than an ellipsis conversion sequence\n        (_over.ics.ellipsis_).  */\n-  rank1 = CONVERSION_RANK (ics1);\n-  rank2 = CONVERSION_RANK (ics2);\n+  /* Use BAD_CONVERSION_RANK because we already checked for a badness\n+     mismatch.  If both ICS are bad, we try to make a decision based on\n+     what would have happened if they'd been good.  This is not an\n+     extension, we'll still give an error when we build up the call; this\n+     just helps us give a more helpful error message.  */\n+  rank1 = BAD_CONVERSION_RANK (ics1);\n+  rank2 = BAD_CONVERSION_RANK (ics2);\n \n   if (rank1 > rank2)\n     return -1;\n   else if (rank1 < rank2)\n     return 1;\n \n-  if (rank1 == cr_bad)\n-    {\n-      /* Both ICS are bad.  We try to make a decision based on what would\n-\t have happened if they'd been good.  This is not an extension,\n-\t we'll still give an error when we build up the call; this just\n-\t helps us give a more helpful error message.  */\n-      rank1 = BAD_CONVERSION_RANK (ics1);\n-      rank2 = BAD_CONVERSION_RANK (ics2);\n-\n-      if (rank1 > rank2)\n-\treturn -1;\n-      else if (rank1 < rank2)\n-\treturn 1;\n-\n-      /* We couldn't make up our minds; try to figure it out below.  */\n-    }\n-\n   if (ics1->ellipsis_p)\n     /* Both conversions are ellipsis conversions.  */\n     return 0;\n@@ -8602,13 +8610,30 @@ compare_ics (conversion *ics1, conversion *ics2)\n \t      || (TYPE_REF_IS_RVALUE (ref_conv1->type)\n \t\t  != TYPE_REF_IS_RVALUE (ref_conv2->type))))\n \t{\n+\t  if (ref_conv1->bad_p\n+\t      && !same_type_p (TREE_TYPE (ref_conv1->type),\n+\t\t\t       TREE_TYPE (ref_conv2->type)))\n+\t    /* Don't prefer a bad conversion that drops cv-quals to a bad\n+\t       conversion with the wrong rvalueness.  */\n+\t    return 0;\n \t  return (ref_conv1->rvaluedness_matches_p\n \t\t  - ref_conv2->rvaluedness_matches_p);\n \t}\n \n       if (same_type_ignoring_top_level_qualifiers_p (to_type1, to_type2))\n-\treturn comp_cv_qualification (TREE_TYPE (ref_conv2->type),\n-\t\t\t\t      TREE_TYPE (ref_conv1->type));\n+\t{\n+\t  int q1 = cp_type_quals (TREE_TYPE (ref_conv1->type));\n+\t  int q2 = cp_type_quals (TREE_TYPE (ref_conv2->type));\n+\t  if (ref_conv1->bad_p)\n+\t    {\n+\t      /* Prefer the one that drops fewer cv-quals.  */\n+\t      tree ftype = next_conversion (ref_conv1)->type;\n+\t      int fquals = cp_type_quals (ftype);\n+\t      q1 ^= fquals;\n+\t      q2 ^= fquals;\n+\t    }\n+\t  return comp_cv_qualification (q2, q1);\n+\t}\n     }\n \n   /* Neither conversion sequence is better than the other.  */"}, {"sha": "f3788a72d5ccf4bf015c498480816709a9ed5817", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -6034,6 +6034,7 @@ extern bool comptypes\t\t\t\t(tree, tree, int);\n extern bool same_type_ignoring_top_level_qualifiers_p (tree, tree);\n extern bool compparms\t\t\t\t(const_tree, const_tree);\n extern int comp_cv_qualification\t\t(const_tree, const_tree);\n+extern int comp_cv_qualification\t\t(int, int);\n extern int comp_cv_qual_signature\t\t(tree, tree);\n extern tree cxx_sizeof_or_alignof_expr\t\t(tree, enum tree_code, bool);\n extern tree cxx_sizeof_or_alignof_type\t\t(tree, enum tree_code, bool);"}, {"sha": "7420da42ede5f732a4dd5b9d2a7a235f24292b48", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1452,11 +1452,8 @@ at_least_as_qualified_p (const_tree type1, const_tree type2)\n    more cv-qualified that TYPE1, and 0 otherwise.  */\n \n int\n-comp_cv_qualification (const_tree type1, const_tree type2)\n+comp_cv_qualification (int q1, int q2)\n {\n-  int q1 = cp_type_quals (type1);\n-  int q2 = cp_type_quals (type2);\n-\n   if (q1 == q2)\n     return 0;\n \n@@ -1468,6 +1465,14 @@ comp_cv_qualification (const_tree type1, const_tree type2)\n   return 0;\n }\n \n+int\n+comp_cv_qualification (const_tree type1, const_tree type2)\n+{\n+  int q1 = cp_type_quals (type1);\n+  int q2 = cp_type_quals (type2);\n+  return comp_cv_qualification (q1, q2);\n+}\n+\n /* Returns 1 if the cv-qualification signature of TYPE1 is a proper\n    subset of the cv-qualification signature of TYPE2, and the types\n    are similar.  Returns -1 if the other way 'round, and 0 otherwise.  */"}, {"sha": "cb99a380b43215dd1e9a9489a5699b831673c755", "filename": "gcc/testsuite/g++.dg/conversion/op4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -9,11 +9,11 @@ struct X {\n   }\n };\n \n-void add_one (X & ref) { /* { dg-message \"in passing argument\" } */\n+void add_one (X & ref) { /* { dg-message \"argument\" } */\n   ++ ref.x;\n }\n \n void foo() {\n   X const a (2);\n-  add_one(a); /* { dg-error \"invalid initialization of reference of type\" } */\n+  add_one(a); /* { dg-error \"discards qualifiers\" } */\n }"}, {"sha": "0d01b1de795e0b585425be3f2358780856dc0bfb", "filename": "gcc/testsuite/g++.dg/cpp0x/diag2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag2.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct A {};\n+\n+// We shouldn't arbitarily choose which of these is better.\n+void f (A&);\n+void f (const A&&);\n+\n+// But do prefer the lvalue overload here.\n+void g (A&);\n+void g (A&&);\n+int main()\n+{\n+  const A a;\n+  f(a);\t\t\t\t// { dg-error \"no match\" }\n+  // { dg-error \"qualifiers\" \"\" { target *-*-* } 15 }\n+  // { dg-error \"lvalue\" \"\" { target *-*-* } 15 }\n+  g(a);\t\t\t\t// { dg-error \"qualifiers\" }\n+}"}, {"sha": "243f83be73e9d3c5730c2ed852a33a0b63d3dd39", "filename": "gcc/testsuite/g++.dg/cpp0x/overloadn.C", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverloadn.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverloadn.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverloadn.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -543,9 +543,9 @@ void ucr1111(const S&&) {}\n \n int main()\n {\n-  l0001(l); // { dg-error \"lvalue\" }\n-  l0010(l); // { dg-error \"lvalue\" }\n-  l0011(l); // { dg-error \"lvalue\" }\n+  l0001(l); // { dg-error \"\" }\n+  l0010(l); // { dg-error \"\" }\n+  l0011(l); // { dg-error \"\" }\n   l0100(l);\n   l0101(l);\n   l0110(l);\n@@ -564,8 +564,8 @@ int main()\n   cl0101(cl);\n   cl0110(cl);\n   cl0111(cl);\n-  cl1001(cl); // { dg-error \"lvalue\" }\n-  cl1011(cl); // { dg-error \"lvalue\" }\n+  cl1001(cl); // { dg-error \"\" }\n+  cl1011(cl); // { dg-error \"\" }\n   cl1100(cl);\n   cl1101(cl);\n   cl1110(cl);\n@@ -617,8 +617,8 @@ int main()\n   ncl0101(ncl);\n   ncl0110(ncl);\n   ncl0111(ncl);\n-  ncl1001(ncl); // { dg-error \"lvalue\" }\n-  ncl1011(ncl); // { dg-error \"lvalue\" }\n+  ncl1001(ncl); // { dg-error \"\" }\n+  ncl1011(ncl); // { dg-error \"\" }\n   ncl1100(ncl);\n   ncl1101(ncl);\n   ncl1110(ncl);\n@@ -644,8 +644,8 @@ int main()\n   ncr0101(ncr);\n   ncr0110(ncr);\n   ncr0111(ncr);\n-  ncr1001(ncr); // { dg-error \"lvalue\" }\n-  ncr1011(ncr); // { dg-error \"lvalue\" }\n+  ncr1001(ncr); // { dg-error \"\" }\n+  ncr1011(ncr); // { dg-error \"\" }\n   ncr1100(ncr);\n   ncr1101(ncr);\n   ncr1110(ncr);\n@@ -671,8 +671,8 @@ int main()\n   ucl0101(ucl());\n   ucl0110(ucl());\n   ucl0111(ucl());\n-  ucl1001(ucl()); // { dg-error \"lvalue\" }\n-  ucl1011(ucl()); // { dg-error \"lvalue\" }\n+  ucl1001(ucl()); // { dg-error \"\" }\n+  ucl1011(ucl()); // { dg-error \"\" }\n   ucl1100(ucl());\n   ucl1101(ucl());\n   ucl1110(ucl());"}, {"sha": "36368ded018e990b2db2a56758c9ee13afaa636e", "filename": "gcc/testsuite/g++.dg/diagnostic/ref1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fref1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/20332\n+\n+struct bar {};\n+void foo1() {\n+  bar& b = bar();\t\t// { dg-error \"rvalue\" }\n+}\n+void foo(bar& b = bar()) {}\t// { dg-error \"rvalue\" }"}, {"sha": "ded35e0d3af17691431b5e93b8493a06ba47a4a3", "filename": "gcc/testsuite/g++.dg/diagnostic/ref2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fref2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fref2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fref2.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/21631\n+\n+int f(int&);\n+int f();\n+\n+int g(void)\n+{\n+  return f(1);\t\t\t// { dg-error \"rvalue\" }\n+}"}, {"sha": "b344c1f683a1e3c6fda6794f4c51f5243e4f64f7", "filename": "gcc/testsuite/g++.dg/expr/cond9.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond9.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1,10 +1,10 @@\n // PR c++/27666\n \n struct A { // { dg-message \"A\" }\n-  A(int); // { dg-message \"A\" }\n+  A(int);\n };\n \n void foo(volatile A a) { \n-  1 ? a : 0; // { dg-error \"match|temporary\" }\n-  1 ? 0 : a; // { dg-error \"match|temporary\" }\n+  1 ? a : 0; // { dg-error \"qualifiers|lvalue|no match\" }\n+  1 ? 0 : a; // { dg-error \"qualifiers|lvalue|no match\" }\n } "}, {"sha": "cc6cce0e4a1b206c05ff7ef1ad590d04c39ec7b5", "filename": "gcc/testsuite/g++.dg/init/synth2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fsynth2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fsynth2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fsynth2.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1,7 +1,7 @@\n // PR c++/34180\n \n struct G {\n-  G();\t\t\t\t// { dg-message \"\" \"candidate\" }\n+  G();\n   G(G&);\t\t\t// { dg-message \"\" \"candidate\" }\n };\n "}, {"sha": "7d971094d1a3554f1c3594fc3d04796af8d68cdc", "filename": "gcc/testsuite/g++.dg/lookup/two-stage4.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ftwo-stage4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ftwo-stage4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ftwo-stage4.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -3,15 +3,15 @@\n \n template<class T> struct wrap {};\n \n-template<typename T> bool& operator==(wrap<T>, wrap<T>);\n+template<typename T> bool operator==(wrap<T>, wrap<T>);\n \n template<typename T>\n void g(T, wrap<wrap<int> > x)\n {\n-  bool& b = x == x; // { dg-bogus \"invalid initialization of reference\" \"\" { xfail *-*-*} }\n+  bool b = x == x; // { dg-bogus \"\" \"\" { xfail *-*-* } }\n }\n \n-template<typename T> int& operator==(wrap<wrap<T> >, wrap<wrap<T> >);\n+template<typename T> void operator==(wrap<wrap<T> >, wrap<wrap<T> >);\n \n void h()\n {"}, {"sha": "1684fccf5c73033e6a21d2078ab438ea2a78c3eb", "filename": "gcc/testsuite/g++.dg/overload/arg3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg3.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -10,13 +10,13 @@ struct A {};\n \n struct B : A\n {\n-  B(int); // { dg-message \"B::B|no known conversion\" \"\" }\n+  B(int);\n   B(B&);  // { dg-message \"note\" \"\" }\n };\n \n void foo(B);\t\t\t// { dg-message \"initializing\" }\n \n void bar()\n {\n-  foo(0); // { dg-error \"no matching function\" \"no matching\" }\n+  foo(0); // { dg-error \"\" }\n }"}, {"sha": "cd8d9f481ec60140d27761242291d62286c2245b", "filename": "gcc/testsuite/g++.dg/overload/conv-op1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -11,7 +11,7 @@ void f()\n {\n   const int i = 42;\n   A()(i);\t\t\t// { dg-message \"<conversion>\" }\n+  // { dg-error \"qualifiers\" \"\" { target *-*-* } 13 }\n }\n \n // { dg-prune-output \"no match\" }\n-// { dg-prune-output \"candidate\" }"}, {"sha": "5c7922f8330058aba7b90e0c362524b0b70b178c", "filename": "gcc/testsuite/g++.dg/overload/copy1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fcopy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fcopy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fcopy1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -4,7 +4,7 @@ struct A;\n \n struct B\n {\n-  B (A const &);\t\t// { dg-message \"note\" }\n+  B (A const &);\n   B (B &);\t\t\t// { dg-message \"note\" }\n };\n \n@@ -16,5 +16,5 @@ struct A\n B\n f (B const& b)\n {\n-  return b;\t\t\t// { dg-error \"matching\" \"matching\" }\n+  return b;\t\t\t// { dg-error \"\" }\n }"}, {"sha": "0426b8f361d423d61a3dfd481dff42f2b475b93d", "filename": "gcc/testsuite/g++.dg/overload/volatile1.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fvolatile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fvolatile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fvolatile1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1,5 +1,4 @@\n // PR c++/48118\n-// { dg-prune-output \"note\" }\n \n struct A { };\n \n@@ -9,6 +8,6 @@ void (*g)(A);\n int main()\n {\n   volatile A a;\n-  f(a);\t\t\t\t// { dg-error \"no match\" }\n-  g(a);\t\t\t\t// { dg-error \"no match\" }\n+  f(a);\t\t\t\t// { dg-error \"\" }\n+  g(a);\t\t\t\t// { dg-error \"\" }\n }"}, {"sha": "bfbf5117dd1aae5755a33d7778a88cf3e1243151", "filename": "gcc/testsuite/g++.dg/rtti/dyncast6.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast6.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -38,19 +38,19 @@ void r()\n   B b;\n \n   A& a1 = dynamic_cast<A&>(b);\n-  A& a2 = dynamic_cast<const A&>(b);                // { dg-error \"invalid\" }\n-  A& a3 = dynamic_cast<volatile A&>(b);             // { dg-error \"invalid\" }\n-  A& a4 = dynamic_cast<const volatile A&>(b);       // { dg-error \"invalid\" }\n+  A& a2 = dynamic_cast<const A&>(b);                // { dg-error \"\" }\n+  A& a3 = dynamic_cast<volatile A&>(b);             // { dg-error \"\" }\n+  A& a4 = dynamic_cast<const volatile A&>(b);       // { dg-error \"\" }\n \n   const A& ca1 = dynamic_cast<A&>(b);\n   const A& ca2 = dynamic_cast<const A&>(b);\n-  const A& ca3 = dynamic_cast<volatile A&>(b);       // { dg-error \"invalid\" }\n-  const A& ca4 = dynamic_cast<const volatile A&>(b); // { dg-error \"invalid\" }\n+  const A& ca3 = dynamic_cast<volatile A&>(b);       // { dg-error \"\" }\n+  const A& ca4 = dynamic_cast<const volatile A&>(b); // { dg-error \"\" }\n \n   volatile A& va1 = dynamic_cast<A&>(b);\n-  volatile A& va2 = dynamic_cast<const A&>(b);       // { dg-error \"invalid\" }\n+  volatile A& va2 = dynamic_cast<const A&>(b);       // { dg-error \"\" }\n   volatile A& va3 = dynamic_cast<volatile A&>(b);\n-  volatile A& va4 = dynamic_cast<const volatile A&>(b);// { dg-error \"invalid\" }\n+  volatile A& va4 = dynamic_cast<const volatile A&>(b);// { dg-error \"\" }\n \n   const volatile A& cva1 = dynamic_cast<A&>(b);\n   const volatile A& cva2 = dynamic_cast<const A&>(b);"}, {"sha": "bf5a37ce0ab63404d6dacde50c8ac0ecccfb846e", "filename": "gcc/testsuite/g++.dg/template/copy1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcopy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcopy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcopy1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -6,9 +6,9 @@\n \n struct A\n {\n-  A(A&); // { dg-message \"note\" }\n-  template <class T> A(T); \t// { dg-message \"note\" }\n+  A(A&);\t\t\t// { dg-message \"A::A\" }\n+  template <class T> A(T); \t// { dg-message \"A::A\" }\n };\n \n-A a = 0; // { dg-error \"no matching function\" }\n+A a = 0; // { dg-error \"\" }\n "}, {"sha": "5f2fe1047cdcf6e851632bc918f5c2b5fee346fb", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/15800-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15800-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15800-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15800-1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -12,6 +12,6 @@ extern panama dig();\n \n void foo() {\n    panama obj;\n-   obj = dig(); // { dg-error \"no match\" }\n+   obj = dig(); // { dg-error \"rvalue\" }\n }\n "}, {"sha": "8b253a10a1472e25599c5d5c879a5d72cdcef08b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt3.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -44,5 +44,5 @@ public:\n void\n foo (bar yylval, bar *yyvsp)\n {\n-  nnyacc::assign(yylval.valueList, yyvsp[0].valueList);// { dg-error \"no matching\" } \n+  nnyacc::assign(yylval.valueList, yyvsp[0].valueList);// { dg-error \"no matching|rvalue\" }\n }"}, {"sha": "fc4d2108456fbd4b02b8d692d2c897eb939e6824", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900514_03.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900514_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900514_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900514_03.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -71,8 +71,8 @@ void t_1_assignment ()\n   t_1_st_1 t_1_st_1_obj1;\n   t_1_st_1 t_1_st_1_obj2;\n \n-  t_1_st_1_obj0 = t_1_st_0_obj0;\t\t\t// { dg-error \"no match\" } \n-  t_1_st_1_obj1 = t_1_st_1 (t_1_st_0_obj0);\t\t// { dg-error \"no match\" } \n+  t_1_st_1_obj0 = t_1_st_0_obj0;\t\t\t// { dg-error \"no match|conversion\" }\n+  t_1_st_1_obj1 = t_1_st_1 (t_1_st_0_obj0);\t\t// { dg-error \"no match|rvalue\" }\n }\n \n void t_1_local_init ()"}, {"sha": "9b4adaf0e4a6027aa2ed3b153f90d1db7e92aea8", "filename": "gcc/testsuite/g++.old-deja/g++.eh/ctor1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n struct A\n {\n-  A();\t\t\t\t// { dg-message \"A::A|candidate expects\" } candidate\n+  A();\n   A(A&);\t\t\t// { dg-message \"A::A|no known conversion\" } referenced below\n };\n \n@@ -10,7 +10,7 @@ main ()\n {\n   try\n     {\n-      throw A();\t\t// { dg-error \"no matching\" \"match\" } can't copy\n+      throw A();\t\t// { dg-error \"rvalue\" \"\" } can't copy\n // { dg-error \"thrown expression\" \"expr\" { target *-*-* } 13 }\n     }\n   catch (...) { }"}, {"sha": "e55738477f22e0866cba819687c116552e9f88ee", "filename": "gcc/testsuite/g++.old-deja/g++.jason/temporary2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemporary2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemporary2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemporary2.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -2,7 +2,7 @@\n class X // Indentation has been done so to see the similarities.\n {\n public:\n-  X() {}\t\t  // { dg-message \"note\" } referenced below\n+  X() {}\n          X(X& x) {x.i=7;} // { dg-message \"note\" } Both functions modify the\n   void bar(X& x) {x.i=7;} // { dg-message \"note\" } reference parameter x.\n   int i;\n@@ -12,6 +12,6 @@ X foo() { X x; return x; }\n \n int main() \n {\n-  X   x(foo()); // { dg-error \"no match\" } Compiler doesn't warn about temporary reference.\n-  x.bar(foo()); // { dg-error \"no match\" } The same mistake is warned about in this case.\n+  X   x(foo()); // { dg-error \"rvalue\" } Compiler doesn't warn about temporary reference.\n+  x.bar(foo()); // { dg-error \"rvalue\" } The same mistake is warned about in this case.\n }"}, {"sha": "f5c703bccfd4fef190b9a964fb4f4c6d606b4716", "filename": "gcc/testsuite/g++.old-deja/g++.law/cvt20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt20.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -9,7 +9,7 @@\n \n // Compiles fine with Sun CC 2.1\n \n-void f(char *& x) // { dg-message \"passing argument\" }\n+void f(const char *& x) // { dg-message \"argument\" }\n {\n   x++;\n }"}, {"sha": "363f11493440407a30f21c2adb4e2e3e38b042f4", "filename": "gcc/testsuite/g++.old-deja/g++.law/enum4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum4.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -24,6 +24,6 @@ int main()\n   Enum e = enumerator1;\n   Struct s;\n   int x = funct(e+1);// { dg-error \"invalid\" }\n-  int y = s.getI(e+1);// { dg-error \"match|conv\" }\n+  int y = s.getI(e+1);// { dg-error \"invalid\" }\n   return x+y;\n }"}, {"sha": "829dd9be5a5f3b07aa569e15ff8d83e1d1c8598c", "filename": "gcc/testsuite/g++.old-deja/g++.law/init8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit8.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -8,15 +8,15 @@\n \n \n const int ic = 1;\n-void f(int& arg)  // { dg-message \"passing argument 1\" }\n+void f(int& arg)  // { dg-message \"argument 1\" }\n {\n         if (arg) ;\n }\n const int& icr = ic;\n \n int main(void)\n {\n-  f(icr);   // { dg-error \"invalid initialization\" }\n+  f(icr);   // { dg-error \"const\" }\n \n   return 0;\n }"}, {"sha": "8d5b686d9aeeb66f741e2e0e2ece674ed11c384c", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators9.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -16,5 +16,5 @@ public:\n void\n test(B &b1, const B &b2)\n {\n-        b1 = b2;// { dg-error \"match\" }\n+        b1 = b2;// { dg-error \"const\" }\n }"}, {"sha": "6c2cd7f92dd6a81cd033023ce80c37b62b168933", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net8.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet8.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -11,14 +11,14 @@ public:\n   int bar;\n };\n \n-void func(Base&);\t\t\t// { dg-message \"passing argument 1\" } \n+void func(Base&);\t\t\t// { dg-message \"argument 1\" }\n \n void func2(const Derived& d) {\n-  func(d);\t\t\t\t// { dg-error \"invalid initialization\" }\n+  func(d);\t\t\t\t// { dg-error \"\" }\n }\n \n void\n-foo (int& a)\t\t\t\t// { dg-message \"in passing argument 1\" } \n+foo (int& a)\t\t\t\t// { dg-message \"argument 1\" }\n {\n }\n \n@@ -27,6 +27,6 @@ int main ()\n   int b;\n   const int*const a = &b;\n   *a = 10;\t\t\t\t// { dg-error \"read-only location\" }\n-  foo (*a);\t\t\t\t// { dg-error \"invalid initialization\" }\n+  foo (*a);\t\t\t\t// { dg-error \"qualifiers\" }\n   return 0;\n }"}, {"sha": "376d1f5a949af1709a8ccb667dc0e8fe4d0d029e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p1989.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp1989.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp1989.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp1989.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -196,7 +196,7 @@ Pix\n List_DLS<T>::search(const T& item) const\n {\n     for (Pix x=this->first(); 0 != x; this->next(x)) {\n-\tif (item == this->operator()(x)) // { dg-error \"match\" } const subversion\n+\tif (item == this->operator()(x)) // { dg-error \"qualifiers\" } const subversion\n \t    return x;\n     }\n     return 0;\n@@ -485,8 +485,8 @@ class STRLIdentifier {\n     char buf[10];\n };\n \n-extern int operator==(vertex<STRLIdentifier*>&, vertex<STRLIdentifier*>&); // { dg-message \"note\" } const subversion\n-extern int operator==(STRLIdentifier&, STRLIdentifier&); // { dg-message \"note\" } fn ref in err msg\n+extern int operator==(vertex<STRLIdentifier*>&, vertex<STRLIdentifier*>&); // { dg-message \"argument 1\" } const subversion\n+extern int operator==(STRLIdentifier&, STRLIdentifier&);\n \n extern int x(List_DLSp<STRLIdentifier *>);\n "}, {"sha": "8a7ede660ba3397e74f412a58107bd2274b44e67", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p2431.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2431.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2431.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2431.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -18,6 +18,6 @@ class C\n \tC()\n \t{\n \t\tB\tb;\n-\t\tA a = b;// { dg-error \"match\" } \n+\t\tA a = b;// { dg-error \"rvalue\" }\n \t}\n };"}, {"sha": "18f926775e294a27ddb60415ac52b1987127d1e7", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p438.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp438.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp438.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp438.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -19,5 +19,5 @@ void C::test() const\n {\n    D d;\n \n-   d.a(*this);\t// { dg-error \"match\" } *this is const, so should get error\n+   d.a(*this);\t// { dg-error \"const\" } *this is const, so should get error\n }"}, {"sha": "99ef1f4d6c85459f79d9c6512444532898501823", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p701.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp701.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp701.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp701.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -7,7 +7,7 @@ extern \"C\"\n }\n \n \n-void Munge(int& x) \t// { dg-message \"passing argument 1\" }\n+void Munge(int& x) \t// { dg-message \"argument 1\" }\n {\n    x = 2;\n }\n@@ -24,7 +24,7 @@ class A\n void\n A::Safe() const \n {\n-   Munge(i);\t        // { dg-error \"invalid initialization\" }\n+   Munge(i);\t        // { dg-error \"const\" }\n }\n \n int main()"}, {"sha": "a4d655a796aaf8e02385d9481ccdc126c38eafe7", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash24.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash24.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -12,7 +12,7 @@ class foo {\n static void iteratorTest(const foo &x)\n {\n    foo::const_iterator i = x.begin();\t\t// { dg-error \"incomplete type\" \"incomplete type\" } \n-   // { dg-error \"no matching|const foo\" \"no matching\" { target *-*-* } 14 }\n+   // { dg-error \"const foo\" \"\" { target *-*-* } 14 }\n    for (; i; ++i)\n       *i;\n }"}, {"sha": "7d818fbe9e130a5277d306df0b86bf4ee2f50bf8", "filename": "gcc/testsuite/g++.old-deja/g++.other/volatile1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -15,6 +15,6 @@ ret_v_f_class()\n int main(void)\n {\n   volatile f_class vf;\n-  0 ? ret_v_f_class() : vf;\t// { dg-error \"match\" } can't copy volatile lvalue\n+  0 ? ret_v_f_class() : vf;\t// { dg-error \"volatile\" } can't copy volatile lvalue\n   return 0;\n }"}, {"sha": "4a363a27f30f1e920b5c60348b2f64fd4cd56ce8", "filename": "gcc/testsuite/g++.old-deja/g++.pt/auto_ptr.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fauto_ptr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fauto_ptr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fauto_ptr.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -11,7 +11,7 @@ template<typename X> struct auto_ptr {\n    explicit auto_ptr(X* p =0) throw() : px(p) {}\n    auto_ptr(auto_ptr& r) throw() : px(r.release()) {} // { dg-message \"note\" } candidate\n    template<typename Y>\n-      auto_ptr(auto_ptr<Y>& r) throw() : px(r.release()) {}// { dg-message \"note\" } candidate\n+      auto_ptr(auto_ptr<Y>& r) throw() : px(r.release()) {}\n \n    auto_ptr& operator=(auto_ptr& r) throw() { \n       reset(r.release()); \n@@ -30,7 +30,7 @@ template<typename X> struct auto_ptr {\n    X* release() throw() { X* p=px; px=0; return p; }\n    void reset(X* p=0) throw() { if (px != p) delete px, px = p; }\n \n-   auto_ptr(auto_ptr_ref<X> r) throw() : px(r.py) {} // { dg-message \"note\" } \n+   auto_ptr(auto_ptr_ref<X> r) throw() : px(r.py) {}\n    template<typename Y> operator auto_ptr_ref<Y>() throw() {\n       return auto_ptr_ref<Y>(release()); \n    }\n@@ -51,5 +51,5 @@ int main() {\n     auto_ptr<Derived> y(f());\n     x = y;\n     g(f());\n-    h(f());\t\t\t// { dg-error \"match\" \"match\" } no usable copy ctor\n+    h(f());\t\t\t// { dg-error \"rvalue\" \"\" } no usable copy ctor\n }"}, {"sha": "f1eda15db8351c0f5dfa1fb7cf03c405ce6ea929", "filename": "gcc/testsuite/g++.old-deja/g++.pt/t05.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft05.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft05.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft05.C?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -1,9 +1,9 @@\n // { dg-do assemble  }\n \n-template <class A> class B {    // { dg-message \"note\" } \n+template <class A> class B {\n   A a;                          \n  public:\n   B(A&aa);\t\t\t// { dg-message \"note\" }\n   ~B();\n };\n-static B<int> b_int (3);\t// { dg-error \"no matching function\" } \n+static B<int> b_int (3);\t// { dg-error \"no match|rvalue\" }"}, {"sha": "f34fc8a5d52cbf0e6935bf3ea2516bcde7e75cd1", "filename": "libstdc++-v3/testsuite/20_util/forward/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02f620dc0bb3bea393d04b8639a1f4748ad8821/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02f620dc0bb3bea393d04b8639a1f4748ad8821/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc?ref=d02f620dc0bb3bea393d04b8639a1f4748ad8821", "patch": "@@ -28,7 +28,7 @@ template<class T, class A1, class A2>\n   factory(A1&& a1, A2&& a2)\n   {\n     return std::shared_ptr<T>(new T(std::forward<A1>(a1),\n-\t\t\t\t    std::forward<A2>(a2))); // { dg-error \"no matching function\" }\n+\t\t\t\t    std::forward<A2>(a2))); // { dg-error \"rvalue\" }\n   }\n \n struct A"}]}