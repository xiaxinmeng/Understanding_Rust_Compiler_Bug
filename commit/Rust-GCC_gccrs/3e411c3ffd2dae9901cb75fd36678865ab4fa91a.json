{"sha": "3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0MTFjM2ZmZDJkYWU5OTAxY2I3NWZkMzY2Nzg4NjVhYjRmYTkxYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-05-02T14:38:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-05-02T14:38:35Z"}, "message": "call.c: NULL_PTR -> NULL.\n\ncp:\n\t* call.c: NULL_PTR -> NULL.\n\t* class.c: Likewise.\n\t* cvt.c: Likewise.\n\t* decl.c: Likewise.\n\t* decl2.c: Likewise.\n\t* except.c: Likewise.\n\t* init.c: Likewise.\n\t* rtti.c: Likewise.\n\t* search.c: Likewise.\n\t* tree.c: Likewise.\n\t* typeck.c: Likewise.\n\t* typeck2.c: Likewise.\n\nf:\n\t* com.c: NULL_PTR -> NULL.\n\njava:\n\t* decl.c: NULL_PTR -> NULL.\n\t* jcf-write.c: Likewise.\n\nFrom-SVN: r41762", "tree": {"sha": "6d379b98f3070c576a07a4b1a09a854e3edc90d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d379b98f3070c576a07a4b1a09a854e3edc90d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/comments", "author": null, "committer": null, "parents": [{"sha": "9714cf4399fc4833c9055d4a0e5c5cc504226c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9714cf4399fc4833c9055d4a0e5c5cc504226c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9714cf4399fc4833c9055d4a0e5c5cc504226c44"}], "stats": {"total": 155, "additions": 88, "deletions": 67}, "files": [{"sha": "76c301be6a720888ed092d1cabe44c4e726c4423", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -1,3 +1,18 @@\n+2001-05-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c: NULL_PTR -> NULL.\n+\t* class.c: Likewise.\n+\t* cvt.c: Likewise.\n+\t* decl.c: Likewise.\n+\t* decl2.c: Likewise.\n+\t* except.c: Likewise.\n+\t* init.c: Likewise.\n+\t* rtti.c: Likewise.\n+\t* search.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* typeck.c: Likewise.\n+\t* typeck2.c: Likewise.\n+\n 2001-05-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (do_using_directive): Revert previous patch."}, {"sha": "6694f563d4bd877648dfdf6488171b6465a50005", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -147,7 +147,7 @@ build_field_call (basetype_path, instance_ptr, name, parms)\n     {\n       /* If it's a field, try overloading operator (),\n \t or calling if the field is a pointer-to-function.  */\n-      instance = build_indirect_ref (instance_ptr, NULL_PTR);\n+      instance = build_indirect_ref (instance_ptr, NULL);\n       instance = build_component_ref_1 (instance, field, 0);\n \n       if (instance == error_mark_node)\n@@ -309,7 +309,7 @@ build_scoped_method_call (exp, basetype, name, parms)\n       if (TREE_CODE (exp) == INDIRECT_REF)\n \tdecl = build_indirect_ref\n \t  (convert_pointer_to_real\n-\t   (binfo, build_unary_op (ADDR_EXPR, exp, 0)), NULL_PTR);\n+\t   (binfo, build_unary_op (ADDR_EXPR, exp, 0)), NULL);\n       else\n \tdecl = build_scoped_ref (exp, basetype);\n \n@@ -3520,7 +3520,7 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \n     case MEMBER_REF:\n       return build_m_component_ref\n-\t(build_indirect_ref (arg1, NULL_PTR), arg2);\n+\t(build_indirect_ref (arg1, NULL), arg2);\n \n       /* The caller will deal with these.  */\n     case ADDR_EXPR:\n@@ -4340,7 +4340,7 @@ build_java_interface_fn_ref (fn, instance)\n       java_iface_lookup_fn \n \t= builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n \t\t\t    build_function_type (ptr_type_node, t),\n-\t\t\t    0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t    0, NOT_BUILT_IN, NULL);\n       ggc_add_tree_root (&java_iface_lookup_fn, 1);\n     }\n \n@@ -5112,7 +5112,7 @@ static void\n add_warning (winner, loser)\n      struct z_candidate *winner, *loser;\n {\n-  winner->warnings = tree_cons (NULL_PTR,\n+  winner->warnings = tree_cons (NULL_TREE,\n \t\t\t\tbuild_ptr_wrapper (loser),\n \t\t\t\twinner->warnings);\n }"}, {"sha": "17bf6211a953d9c622f945fb03f79b06a7819ed9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -416,7 +416,7 @@ build_vbase_path (code, type, expr, path, nonnull)\n \t\t      tree binfo = get_binfo (last, TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (nonnull_expr))), 0);\n \t\t      nonnull_expr = convert_pointer_to_real (binfo, nonnull_expr);\n \t\t    }\n-\t\t  ind = build_indirect_ref (nonnull_expr, NULL_PTR);\n+\t\t  ind = build_indirect_ref (nonnull_expr, NULL);\n \t\t  nonnull_expr = build_vbase_pointer (ind, last_virtual);\n \t\t  if (nonnull == 0\n \t\t      && TREE_CODE (type) == POINTER_TYPE"}, {"sha": "1dff9e5aadf49e4dc436fcc5b642af7087f2e431", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -594,7 +594,7 @@ convert_from_reference (val)\n   if (TREE_CODE (type) == OFFSET_TYPE)\n     type = TREE_TYPE (type);\n   if (TREE_CODE (type) == REFERENCE_TYPE)\n-    return build_indirect_ref (val, NULL_PTR);\n+    return build_indirect_ref (val, NULL);\n   return val;\n }\n \f"}, {"sha": "308d62f66e81661bf2bd6c6d7b25834376dc3e28", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -4683,7 +4683,7 @@ implicitly_declare (functionid)\n   /* ISO standard says implicit declarations are in the innermost block.\n      So we record the decl in the standard fashion.  */\n   pushdecl (decl);\n-  rest_of_decl_compilation (decl, NULL_PTR, 0, 0);\n+  rest_of_decl_compilation (decl, NULL, 0, 0);\n \n   if (warn_implicit\n       /* Only one warning per identifier.  */\n@@ -6434,7 +6434,7 @@ init_decl_processing ()\n   empty_except_spec = build_tree_list (NULL_TREE, NULL_TREE);\n \n #if 0\n-  record_builtin_type (RID_MAX, NULL_PTR, string_type_node);\n+  record_builtin_type (RID_MAX, NULL, string_type_node);\n #endif\n \n   delta_type_node = ptrdiff_type_node;\n@@ -6502,10 +6502,10 @@ init_decl_processing ()\n     = build_cplus_array_type (vtable_entry_type, NULL_TREE);\n   layout_type (vtbl_type_node);\n   vtbl_type_node = build_qualified_type (vtbl_type_node, TYPE_QUAL_CONST);\n-  record_builtin_type (RID_MAX, NULL_PTR, vtbl_type_node);\n+  record_builtin_type (RID_MAX, NULL, vtbl_type_node);\n   vtbl_ptr_type_node = build_pointer_type (vtable_entry_type);\n   layout_type (vtbl_ptr_type_node);\n-  record_builtin_type (RID_MAX, NULL_PTR, vtbl_ptr_type_node);\n+  record_builtin_type (RID_MAX, NULL, vtbl_ptr_type_node);\n \n   push_namespace (get_identifier (\"__cxxabiv1\"));\n   abi_node = current_namespace;\n@@ -8074,7 +8074,7 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n \t  && !COMPLETE_TYPE_P (TREE_TYPE (decl)))\n \tTYPE_DECL_SUPPRESS_DEBUG (decl) = 1;\n \n-      rest_of_decl_compilation (decl, NULL_PTR,\n+      rest_of_decl_compilation (decl, NULL,\n \t\t\t\tDECL_CONTEXT (decl) == NULL_TREE, at_eof);\n       goto finish_end;\n     }\n@@ -13508,7 +13508,7 @@ start_function (declspecs, declarator, attrs, flags)\n \t\t\t  19990811);\n \n       cp_function_chain->x_current_class_ref\n-\t= build_indirect_ref (t, NULL_PTR);\n+\t= build_indirect_ref (t, NULL);\n       cp_function_chain->x_current_class_ptr = t;\n \n       /* Constructors and destructors need to know whether they're \"in\n@@ -14248,7 +14248,7 @@ hack_incomplete_structures (type)\n \t\t  && TREE_TYPE (TREE_TYPE (decl)) == type)\n \t\tlayout_type (TREE_TYPE (decl));\n \t      layout_decl (decl, 0);\n-\t      rest_of_decl_compilation (decl, NULL_PTR, toplevel, 0);\n+\t      rest_of_decl_compilation (decl, NULL, toplevel, 0);\n \t      if (! toplevel)\n \t\t{\n \t\t  tree cleanup;"}, {"sha": "9010092e6ed32c3f1e17fb91311a9c2c0dc8cef8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -2582,7 +2582,7 @@ finish_vtable_vardecl (t, data)\n       if (flag_weak)\n \tcomdat_linkage (vars);\n \n-      rest_of_decl_compilation (vars, NULL_PTR, 1, 1);\n+      rest_of_decl_compilation (vars, NULL, 1, 1);\n \n       if (flag_vtable_gc)\n \toutput_vtable_inherit (vars);"}, {"sha": "aa372c8ed25739f4141bf5750a35cff4e4a4a769", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -394,7 +394,7 @@ expand_start_catch_block (decl)\n \t  init = build1 (NOP_EXPR, build_pointer_type (type), init);\n \t  init = build (MINUS_EXPR, TREE_TYPE (init), init,\n \t\t\tTYPE_SIZE_UNIT (TREE_TYPE (init)));\n-\t  init = build_indirect_ref (init, NULL_PTR);\n+\t  init = build_indirect_ref (init, NULL);\n \t  is_java = true;\n \t}\n       else\n@@ -643,7 +643,7 @@ build_throw (exp)\n       finish_expr_stmt (tmp);\n \n       object = build1 (NOP_EXPR, build_pointer_type (TREE_TYPE (exp)), ptr);\n-      object = build_indirect_ref (object, NULL_PTR);\n+      object = build_indirect_ref (object, NULL);\n \n       exp = build_modify_expr (object, INIT_EXPR, exp);\n       if (exp == error_mark_node)"}, {"sha": "589f7af05c0058d82ac946cfa0e637a900862e3d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -750,7 +750,7 @@ emit_base_init (mem_init_list, base_init_list)\n \t{\n \t  member = convert_pointer_to_real (base_binfo, current_class_ptr);\n \t  expand_aggr_init_1 (base_binfo, NULL_TREE,\n-\t\t\t      build_indirect_ref (member, NULL_PTR), init,\n+\t\t\t      build_indirect_ref (member, NULL), init,\n \t\t\t      LOOKUP_NORMAL);\n \t}\n \n@@ -880,7 +880,7 @@ expand_virtual_init (binfo, decl)\n \n   /* Compute the location of the vtpr.  */\n   decl = convert_pointer_to_real (vtype_binfo, decl);\n-  vtbl_ptr = build_vfield_ref (build_indirect_ref (decl, NULL_PTR), vtype);\n+  vtbl_ptr = build_vfield_ref (build_indirect_ref (decl, NULL), vtype);\n   if (vtbl_ptr == error_mark_node)\n     return;\n \n@@ -925,7 +925,7 @@ expand_aggr_vbase_init_1 (binfo, exp, addr, init_list)\n      tree binfo, exp, addr, init_list;\n {\n   tree init = purpose_member (binfo, init_list);\n-  tree ref = build_indirect_ref (addr, NULL_PTR);\n+  tree ref = build_indirect_ref (addr, NULL);\n \n   if (init)\n     init = TREE_VALUE (init);\n@@ -1593,7 +1593,7 @@ build_member_call (type, name, parmlist)\n \t{\n \t  tree newtype = build_qualified_type (type, TYPE_QUALS (oldtype));\n \t  decl = convert_force (build_pointer_type (newtype), olddecl, 0);\n-\t  decl = build_indirect_ref (decl, NULL_PTR);\n+\t  decl = build_indirect_ref (decl, NULL);\n \t}\n     }\n \n@@ -1926,7 +1926,7 @@ resolve_offset_ref (exp)\n \treturn error_mark_node;\n \n       expr = build (COMPONENT_REF, TREE_TYPE (member),\n-\t\t    build_indirect_ref (addr, NULL_PTR), member);\n+\t\t    build_indirect_ref (addr, NULL), member);\n       return convert_from_reference (expr);\n     }\n \n@@ -2237,7 +2237,7 @@ build_java_class_ref (type)\n       DECL_ARTIFICIAL (class_decl) = 1;\n       DECL_IGNORED_P (class_decl) = 1;\n       pushdecl_top_level (class_decl);\n-      make_decl_rtl (class_decl, NULL_PTR);\n+      make_decl_rtl (class_decl, NULL);\n     }\n   return class_decl;\n }\n@@ -2464,7 +2464,7 @@ build_new_1 (exp)\n \t elements.  */\n       cookie = build (MINUS_EXPR, build_pointer_type (sizetype),\n \t\t      alloc_node, size_in_bytes (sizetype));\n-      cookie = build_indirect_ref (cookie, NULL_PTR);\n+      cookie = build_indirect_ref (cookie, NULL);\n \n       cookie_expr = build (MODIFY_EXPR, void_type_node, cookie, nelts);\n       TREE_SIDE_EFFECTS (cookie_expr) = 1;\n@@ -2476,7 +2476,7 @@ build_new_1 (exp)\n   init_expr = NULL_TREE;\n   if (TYPE_NEEDS_CONSTRUCTING (type) || init)\n     {\n-      init_expr = build_indirect_ref (alloc_node, NULL_PTR);\n+      init_expr = build_indirect_ref (alloc_node, NULL);\n \n       if (init == void_zero_node)\n \tinit = build_default_init (full_type);\n@@ -3261,7 +3261,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t  auto_delete = sfk_complete_destructor;\n \t}\n \n-      expr = build_dtor_call (build_indirect_ref (addr, NULL_PTR),\n+      expr = build_dtor_call (build_indirect_ref (addr, NULL),\n \t\t\t      auto_delete, flags);\n       if (do_delete)\n \texpr = build (COMPOUND_EXPR, void_type_node, expr, do_delete);\n@@ -3286,7 +3286,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n       int i, n_baseclasses = CLASSTYPE_N_BASECLASSES (type);\n       tree base_binfo = n_baseclasses > 0 ? TREE_VEC_ELT (binfos, 0) : NULL_TREE;\n       tree exprstmt = NULL_TREE;\n-      tree ref = build_indirect_ref (addr, NULL_PTR);\n+      tree ref = build_indirect_ref (addr, NULL);\n \n       /* Set this again before we call anything, as we might get called\n \t recursively.  */\n@@ -3404,7 +3404,7 @@ build_vec_delete (base, maxindex, auto_delete_vec, use_global_delete)\n \t\t\t   build_pointer_type (sizetype),\n \t\t\t   base,\n \t\t\t   TYPE_SIZE_UNIT (sizetype));\n-      maxindex = build_indirect_ref (cookie_addr, NULL_PTR);\n+      maxindex = build_indirect_ref (cookie_addr, NULL);\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     {"}, {"sha": "1ce8f9895cf6cc270cc45476938be45ca1b2955a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -139,7 +139,7 @@ build_headof (exp)\n      the vptr.  */\n   index = build_int_2 (-2, -1);\n \n-  aref = build_vtbl_ref (build_indirect_ref (exp, NULL_PTR), index);\n+  aref = build_vtbl_ref (build_indirect_ref (exp, NULL), index);\n \n   if (flag_vtable_thunks)\n     offset = aref;\n@@ -233,7 +233,7 @@ get_tinfo_decl_dynamic (exp)\n \t{\n       \t  exp = build_unary_op (ADDR_EXPR, exp, 0);\n \t  exp = build_headof_sub (exp);\n-\t  exp = build_indirect_ref (exp, NULL_PTR);\n+\t  exp = build_indirect_ref (exp, NULL);\n \t}\n \n       /* The RTTI information is at index -1.  */"}, {"sha": "fe95c955111b67f97010aea05aae9de75b62d372", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -2355,7 +2355,7 @@ dfs_init_vbase_pointers (binfo, data)\n   while (fields && DECL_NAME (fields) && VBASE_NAME_P (DECL_NAME (fields)))\n     {\n       tree ref = build (COMPONENT_REF, TREE_TYPE (fields),\n-\t\t\tbuild_indirect_ref (this_vbase_ptr, NULL_PTR), fields);\n+\t\t\tbuild_indirect_ref (this_vbase_ptr, NULL), fields);\n       tree init;\n       tree vbase_type;\n       tree vbase_binfo;\n@@ -2558,7 +2558,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n \t      finish_expr_stmt (init);\n \t      /* Update the vtable pointers as necessary.  */\n \t      ref = build_vfield_ref\n-\t\t(build_indirect_ref (addr, NULL_PTR),\n+\t\t(build_indirect_ref (addr, NULL),\n \t\t DECL_CONTEXT (TYPE_VFIELD (BINFO_TYPE (binfo))));\n \t      finish_expr_stmt\n \t\t(build_modify_expr (ref, NOP_EXPR, nvtbl));"}, {"sha": "73f67bb86b44461ea463aa691120b26ce4b7bda9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -2137,7 +2137,7 @@ build_dummy_object (type)\n      tree type;\n {\n   tree decl = build1 (NOP_EXPR, build_pointer_type (type), void_zero_node);\n-  return build_indirect_ref (decl, NULL_PTR);\n+  return build_indirect_ref (decl, NULL);\n }\n \n /* We've gotten a reference to a member of TYPE.  Return *this if appropriate,"}, {"sha": "440955df232aab9622e4e9ca205282fafeff5f94", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -117,7 +117,7 @@ require_complete_type (value)\n       my_friendly_assert (TREE_CODE (member) == FIELD_DECL, 305);\n       base = convert_pointer_to (basetype, current_class_ptr);\n       value = build (COMPONENT_REF, TREE_TYPE (member),\n-\t\t     build_indirect_ref (base, NULL_PTR), member);\n+\t\t     build_indirect_ref (base, NULL), member);\n       return require_complete_type (value);\n     }\n \n@@ -2245,7 +2245,7 @@ build_component_ref (datum, component, basetype_path, protect)\n \t    }\n \t  else\n \t    addr = convert_pointer_to (base, addr);\n-\t  datum = build_indirect_ref (addr, NULL_PTR);\n+\t  datum = build_indirect_ref (addr, NULL);\n \t  if (datum == error_mark_node)\n \t    return error_mark_node;\n \t}\n@@ -2924,7 +2924,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \t(PLUS_EXPR,\n \t build_pointer_type (build_pointer_type (vtable_entry_type)),\n \t vtbl, cp_convert (ptrdiff_type_node, delta2));\n-      vtbl = build_indirect_ref (vtbl, NULL_PTR);\n+      vtbl = build_indirect_ref (vtbl, NULL);\n       aref = build_array_ref (vtbl, idx);\n \n       if (! flag_vtable_thunks)"}, {"sha": "959d979872d32cbf687e8655f07683cba759c7df", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -1063,7 +1063,7 @@ build_x_arrow (datum)\n     last_rval = default_conversion (rval);\n \n   if (TREE_CODE (TREE_TYPE (last_rval)) == POINTER_TYPE)\n-    return build_indirect_ref (last_rval, NULL_PTR);\n+    return build_indirect_ref (last_rval, NULL);\n \n   if (types_memoized)\n     error (\"result of `operator->()' yields non-pointer result\");"}, {"sha": "22660983eda7b0242ffed7faa16e5e8786737ad2", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -1,3 +1,7 @@\n+Wed May  2 10:20:08 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c: NULL_PTR -> NULL.\n+\n Sun Apr 22 20:18:01 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (ffecom_subscript_check_): Use concat in lieu of"}, {"sha": "6114a53c91a3ab9fd2137d7435295b474a4d69b7", "filename": "gcc/f/com.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -13493,7 +13493,7 @@ builtin_function (const char *name, tree type, int function_code,\n   TREE_PUBLIC (decl) = 1;\n   if (library_name)\n     SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-  make_decl_rtl (decl, NULL_PTR);\n+  make_decl_rtl (decl, NULL);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n@@ -13871,7 +13871,7 @@ finish_decl (tree decl, tree init, bool is_top_level)\n     }\n   else if (TREE_CODE (decl) == TYPE_DECL)\n     {\n-      rest_of_decl_compilation (decl, NULL_PTR,\n+      rest_of_decl_compilation (decl, NULL,\n \t\t\t\tDECL_CONTEXT (decl) == 0,\n \t\t\t\t0);\n     }\n@@ -16110,7 +16110,7 @@ ffecom_open_include_ (char *name, ffewhereLine l, ffewhereColumn c)\n     {\n       strncpy (fname, (char *) fbeg, flen);\n       fname[flen] = 0;\n-      f = open_include_file (fname, NULL_PTR);\n+      f = open_include_file (fname, NULL);\n     }\n   else\n     {"}, {"sha": "1f53bebc2c5dfa9e1bd9ea8f4dc3bdfc43aa2b02", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -1,3 +1,8 @@\n+2001-05-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c: NULL_PTR -> NULL.\n+\t* jcf-write.c: Likewise.\n+\n 2001-05-01  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in ($(srcdir)/java/gcj.info): Added `-I..'."}, {"sha": "02ac9d8e6b1fad01516982cd5819aa606a9a3983", "filename": "gcc/java/decl.c", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -378,7 +378,7 @@ builtin_function (name, type, function_code, class, library_name)\n   TREE_PUBLIC (decl) = 1;\n   if (library_name)\n     SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-  make_decl_rtl (decl, NULL_PTR);\n+  make_decl_rtl (decl, NULL);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n@@ -717,37 +717,34 @@ init_decl_processing ()\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   alloc_object_node = builtin_function (\"_Jv_AllocObject\",\n \t\t\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t\t\t0, NOT_BUILT_IN, NULL);\n   DECL_IS_MALLOC (alloc_object_node) = 1;\n \n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n   soft_initclass_node = builtin_function (\"_Jv_InitClass\",\n \t\t\t\t\t  build_function_type (void_type_node,\n \t\t\t\t\t\t\t       t),\n-\t\t\t\t\t  0, NOT_BUILT_IN,\n-\t\t\t\t\t  NULL_PTR);\n+\t\t\t\t\t  0, NOT_BUILT_IN, NULL);\n \n   throw_node = builtin_function (\"_Jv_Throw\",\n \t\t\t\t build_function_type (ptr_type_node, t),\n-\t\t\t\t 0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t\t 0, NOT_BUILT_IN, NULL);\n   /* Mark throw_nodes as `noreturn' functions with side effects.  */\n   TREE_THIS_VOLATILE (throw_node) = 1;\n   TREE_SIDE_EFFECTS (throw_node) = 1;\n \n   t = build_function_type (int_type_node, endlink);\n   soft_monitorenter_node \n-    = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,\n-\t\t\tNULL_PTR);\n+    = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN, NULL);\n   soft_monitorexit_node \n-    = builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN,\n-\t\t\tNULL_PTR);\n+    = builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN, NULL);\n   \n   t = tree_cons (NULL_TREE, int_type_node, \n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_newarray_node\n       = builtin_function (\"_Jv_NewPrimArray\",\n \t\t\t  build_function_type(ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t  0, NOT_BUILT_IN, NULL);\n   DECL_IS_MALLOC (soft_newarray_node) = 1;\n \n   t = tree_cons (NULL_TREE, int_type_node,\n@@ -756,22 +753,22 @@ init_decl_processing ()\n   soft_anewarray_node\n       = builtin_function (\"_Jv_NewObjectArray\",\n \t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t  0, NOT_BUILT_IN, NULL);\n   DECL_IS_MALLOC (soft_anewarray_node) = 1;\n \n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_multianewarray_node\n       = builtin_function (\"_Jv_NewMultiArray\",\n \t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t  0, NOT_BUILT_IN, NULL);\n   DECL_IS_MALLOC (soft_multianewarray_node) = 1;\n \n   t = build_function_type (void_type_node, \n \t\t\t   tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_badarrayindex_node\n       = builtin_function (\"_Jv_ThrowBadArrayIndex\", t, \n-\t\t\t  0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t  0, NOT_BUILT_IN, NULL);\n   /* Mark soft_badarrayindex_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_badarrayindex_node) = 1;\n@@ -780,7 +777,7 @@ init_decl_processing ()\n   soft_nullpointer_node\n     = builtin_function (\"_Jv_ThrowNullPointerException\",\n \t\t\tbuild_function_type (void_type_node, endlink),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n   /* Mark soft_nullpointer_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_nullpointer_node) = 1;\n@@ -791,43 +788,43 @@ init_decl_processing ()\n   soft_checkcast_node\n     = builtin_function (\"_Jv_CheckCast\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, class_ptr_type, endlink));\n   soft_instanceof_node\n     = builtin_function (\"_Jv_IsInstanceOf\",\n \t\t\tbuild_function_type (boolean_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n   soft_checkarraystore_node\n     = builtin_function (\"_Jv_CheckArrayStore\",\n \t\t\tbuild_function_type (void_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, int_type_node, endlink)));\n   soft_lookupinterfacemethod_node \n     = builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n \n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)));\n   soft_lookupjnimethod_node\n     = builtin_function (\"_Jv_LookupJNIMethod\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n   soft_getjnienvnewframe_node\n     = builtin_function (\"_Jv_GetJNIEnvNewFrame\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n   soft_jnipopsystemframe_node\n     = builtin_function (\"_Jv_JNI_PopSystemFrame\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n \n   t = tree_cons (NULL_TREE, double_type_node,\n \t\t tree_cons (NULL_TREE, double_type_node, endlink));\n@@ -848,22 +845,22 @@ init_decl_processing ()\n   soft_idiv_node\n     = builtin_function (\"_Jv_divI\",\n \t\t\tbuild_function_type (int_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n \n   soft_irem_node\n     = builtin_function (\"_Jv_remI\",\n \t\t\tbuild_function_type (int_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n \n   soft_ldiv_node\n     = builtin_function (\"_Jv_divJ\",\n \t\t\tbuild_function_type (long_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n \n   soft_lrem_node\n     = builtin_function (\"_Jv_remJ\",\n \t\t\tbuild_function_type (long_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL_PTR);\n+\t\t\t0, NOT_BUILT_IN, NULL);\n \n   /* Initialize variables for except.c.  */\n   eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS"}, {"sha": "750030aed167c816658bb39d0daf046ee43b74c7", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e411c3ffd2dae9901cb75fd36678865ab4fa91a/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=3e411c3ffd2dae9901cb75fd36678865ab4fa91a", "patch": "@@ -1406,7 +1406,7 @@ generate_bytecode_return (exp, state)\n   if (returns_void)\n     {\n       op = OPCODE_return;\n-      call_cleanups (NULL_PTR, state);\n+      call_cleanups (NULL, state);\n     }\n   else\n     {\n@@ -1420,7 +1420,7 @@ generate_bytecode_return (exp, state)\n \t      localvar_alloc (state->return_value_decl, state);\n \t    }\n \t  emit_store (state->return_value_decl, state);\n-\t  call_cleanups (NULL_PTR, state);\n+\t  call_cleanups (NULL, state);\n \t  emit_load (state->return_value_decl, state);\n \t  /* If we call localvar_free (state->return_value_decl, state),\n \t     then we risk the save decl erroneously re-used in the"}]}