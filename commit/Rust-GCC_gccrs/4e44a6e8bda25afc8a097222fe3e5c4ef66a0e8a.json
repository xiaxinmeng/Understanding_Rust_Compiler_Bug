{"sha": "4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0NGE2ZThiZGEyNWFmYzhhMDk3MjIyZmUzZTVjNGVmNjZhMGU4YQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2014-08-01T02:52:41Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2014-08-01T02:52:41Z"}, "message": "Convert tree-ssa-sccvn to inchash\n\ngcc/:\n\n2014-07-31  Andi Kleen  <ak@linux.intel.com>\n\n\t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Convert to\n\tinchash.\n\t(vn_reference_compute_hash): Dito.\n\t(vn_nary_op_compute_hash): Dito.\n\t(vn_phi_compute_hash): Dito.\n\t* tree-ssa-sccvn.h (vn_hash_constant_with_type): Dito.\n\nFrom-SVN: r213399", "tree": {"sha": "bcde686b471cf50fb706a4e798cc060291c10c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcde686b471cf50fb706a4e798cc060291c10c2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/comments", "author": null, "committer": null, "parents": [{"sha": "2bc105372d0b86ec475b1095a921410c23cd465a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc105372d0b86ec475b1095a921410c23cd465a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc105372d0b86ec475b1095a921410c23cd465a"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "331cd45f40c1166dce576dc0ffc67c25baefef1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "patch": "@@ -1,3 +1,12 @@\n+2014-07-31  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Convert to\n+\tinchash.\n+\t(vn_reference_compute_hash): Dito.\n+\t(vn_nary_op_compute_hash): Dito.\n+\t(vn_phi_compute_hash): Dito.\n+\t* tree-ssa-sccvn.h (vn_hash_constant_with_type): Dito.\n+\n 2014-07-31  Andi Kleen  <ak@linux.intel.com>\n \n \t* tree-ssa-dom.c (iterative_hash_exprs_commutative):"}, {"sha": "ec0bf6b402d02764f9dec4db58c375adca7d4fac", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "patch": "@@ -594,25 +594,25 @@ value_id_constant_p (unsigned int v)\n \n /* Compute the hash for a reference operand VRO1.  */\n \n-static hashval_t\n-vn_reference_op_compute_hash (const vn_reference_op_t vro1, hashval_t result)\n+static void\n+vn_reference_op_compute_hash (const vn_reference_op_t vro1, inchash::hash &hstate)\n {\n-  result = iterative_hash_hashval_t (vro1->opcode, result);\n+  hstate.add_int (vro1->opcode);\n   if (vro1->op0)\n-    result = iterative_hash_expr (vro1->op0, result);\n+    inchash::add_expr (vro1->op0, hstate);\n   if (vro1->op1)\n-    result = iterative_hash_expr (vro1->op1, result);\n+    inchash::add_expr (vro1->op1, hstate);\n   if (vro1->op2)\n-    result = iterative_hash_expr (vro1->op2, result);\n-  return result;\n+    inchash::add_expr (vro1->op2, hstate);\n }\n \n /* Compute a hash for the reference operation VR1 and return it.  */\n \n hashval_t\n vn_reference_compute_hash (const vn_reference_t vr1)\n {\n-  hashval_t result = 0;\n+  inchash::hash hstate;\n+  hashval_t result;\n   int i;\n   vn_reference_op_t vro;\n   HOST_WIDE_INT off = -1;\n@@ -634,22 +634,24 @@ vn_reference_compute_hash (const vn_reference_t vr1)\n \t{\n \t  if (off != -1\n \t      && off != 0)\n-\t    result = iterative_hash_hashval_t (off, result);\n+\t    hstate.add_int (off);\n \t  off = -1;\n \t  if (deref\n \t      && vro->opcode == ADDR_EXPR)\n \t    {\n \t      if (vro->op0)\n \t\t{\n \t\t  tree op = TREE_OPERAND (vro->op0, 0);\n-\t\t  result = iterative_hash_hashval_t (TREE_CODE (op), result);\n-\t\t  result = iterative_hash_expr (op, result);\n+\t\t  hstate.add_int (TREE_CODE (op));\n+\t\t  inchash::add_expr (op, hstate);\n \t\t}\n \t    }\n \t  else\n-\t    result = vn_reference_op_compute_hash (vro, result);\n+\t    vn_reference_op_compute_hash (vro, hstate);\n \t}\n     }\n+  result = hstate.end ();\n+  /* ??? We would ICE later if we hash instead of adding that in. */\n   if (vr1->vuse)\n     result += SSA_NAME_VERSION (vr1->vuse);\n \n@@ -2236,7 +2238,7 @@ vn_reference_insert_pieces (tree vuse, alias_set_type set, tree type,\n hashval_t\n vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n {\n-  hashval_t hash;\n+  inchash::hash hstate;\n   unsigned i;\n \n   for (i = 0; i < vno1->length; ++i)\n@@ -2252,11 +2254,11 @@ vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n       vno1->op[1] = temp;\n     }\n \n-  hash = iterative_hash_hashval_t (vno1->opcode, 0);\n+  hstate.add_int (vno1->opcode);\n   for (i = 0; i < vno1->length; ++i)\n-    hash = iterative_hash_expr (vno1->op[i], hash);\n+    inchash::add_expr (vno1->op[i], hstate);\n \n-  return hash;\n+  return hstate.end ();\n }\n \n /* Compare nary operations VNO1 and VNO2 and return true if they are\n@@ -2536,26 +2538,24 @@ vn_nary_op_insert_stmt (gimple stmt, tree result)\n static inline hashval_t\n vn_phi_compute_hash (vn_phi_t vp1)\n {\n-  hashval_t result;\n+  inchash::hash hstate (vp1->block->index);\n   int i;\n   tree phi1op;\n   tree type;\n \n-  result = vp1->block->index;\n-\n   /* If all PHI arguments are constants we need to distinguish\n      the PHI node via its type.  */\n   type = vp1->type;\n-  result += vn_hash_type (type);\n+  hstate.merge_hash (vn_hash_type (type));\n \n   FOR_EACH_VEC_ELT (vp1->phiargs, i, phi1op)\n     {\n       if (phi1op == VN_TOP)\n \tcontinue;\n-      result = iterative_hash_expr (phi1op, result);\n+      inchash::add_expr (phi1op, hstate);\n     }\n \n-  return result;\n+  return hstate.end ();\n }\n \n /* Compare two phi entries for equality, ignoring VN_TOP arguments.  */"}, {"sha": "84ea278f8464d17786f94ab3d0a5dbb8eeeaa788", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "patch": "@@ -140,8 +140,10 @@ vn_hash_type (tree type)\n static inline hashval_t\n vn_hash_constant_with_type (tree constant)\n {\n-  return (iterative_hash_expr (constant, 0)\n-\t  + vn_hash_type (TREE_TYPE (constant)));\n+  inchash::hash hstate;\n+  inchash::add_expr (constant, hstate);\n+  hstate.merge_hash (vn_hash_type (TREE_TYPE (constant)));\n+  return hstate.end ();\n }\n \n /* Compare the constants C1 and C2 with distinguishing type incompatible"}]}