{"sha": "9b3003d59044a53cddf432024579295ef5df1ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzMDAzZDU5MDQ0YTUzY2RkZjQzMjAyNDU3OTI5NWVmNWRmMWNhNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-18T07:35:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-18T07:35:36Z"}, "message": "system_error (system_category): To system_category().\n\n2009-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/system_error (system_category): To system_category().\n\t(generic_category): To generic_category. DR 890.\n\t* src/system_error.cc: Define.\n\t* include/bits/functexcept.h: Only one __throw_system_error.\n\t* src/functexcept.cc: Same.\n\t* include/std/mutex: Fixup for changes above.\n\t* testsuite/19_diagnostics/error_condition/cons/1.cc: Same.\n\t* testsuite/19_diagnostics/error_code/cons/1.cc: Same.\n\t* testsuite/19_diagnostics/system_error/cons-1.cc: Same.\n\t* config/abi/pre/gnu.ver: Clean up exports.\n\nFrom-SVN: r144259", "tree": {"sha": "d70eeaeb64ce9289bfb6e172e223f4c4cd5f2910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d70eeaeb64ce9289bfb6e172e223f4c4cd5f2910"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b3003d59044a53cddf432024579295ef5df1ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3003d59044a53cddf432024579295ef5df1ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3003d59044a53cddf432024579295ef5df1ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3003d59044a53cddf432024579295ef5df1ca7/comments", "author": null, "committer": null, "parents": [{"sha": "0705d3f487d2b8c709c25051f55079a6e22cb3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0705d3f487d2b8c709c25051f55079a6e22cb3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0705d3f487d2b8c709c25051f55079a6e22cb3d0"}], "stats": {"total": 128, "additions": 67, "deletions": 61}, "files": [{"sha": "1b04fe3504a5e49e614393e010931d0ad16e545a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,3 +1,21 @@\n+2009-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/system_error (system_category): To system_category().\n+\t(generic_category): To generic_category. DR 890.\n+\t* src/system_error.cc: Define.\n+\t* include/bits/functexcept.h: Only one __throw_system_error.\n+\t* src/functexcept.cc: Same.\n+\t* include/std/mutex: Fixup for changes above.\n+\t* testsuite/19_diagnostics/error_condition/cons/1.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/cons/1.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/cons-1.cc: Same.\n+\t* config/abi/pre/gnu.ver: Clean up exports.\n+\n+2009-02-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/thread: Fix typo.\n+\t* src/thread.cc (thread::join): Use NULL.\n+\n 2009-02-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/39168"}, {"sha": "1b8ebd4491367f99d799e3f457f176a5b33da1bd", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -902,8 +902,8 @@ GLIBCXX_3.4.11 {\n     _ZNSt6thread15_M_start_threadESt10shared_ptrINS_10_Impl_baseEE;\n \n     # system_error\n-    _ZSt15system_category;\n-    _ZSt16generic_category;\n+    _ZSt15system_categoryv;\n+    _ZSt16generic_categoryv;\n \n     _ZNKSt10error_code23default_error_conditionEv;\n     _ZNKSt14error_category23default_error_conditionEi;\n@@ -923,7 +923,6 @@ GLIBCXX_3.4.11 {\n \n     _ZNKSt4hashISt10error_codeEclES0_;\n \n-    _ZSt20__throw_system_errorPKc;\n     _ZSt20__throw_system_errori;\n \n     # char16_t and char32_t"}, {"sha": "0b02eede180f3b0d5476269be374db7a8b2af7d2", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,6 +1,6 @@\n // Function-Based Exception Support -*- C++ -*-\n \n-// Copyright (C) 2001, 2004, 2005, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -86,16 +86,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   void\n   __throw_underflow_error(const char*) __attribute__((__noreturn__));\n \n+  // Helpers for exception objects in <ios>\n   void\n-  __throw_system_error(const char*) __attribute__((__noreturn__));\n+  __throw_ios_failure(const char*) __attribute__((__noreturn__));\n \n   void\n   __throw_system_error(int) __attribute__((__noreturn__));\n \n-  // Helpers for exception objects in basic_ios\n-  void\n-  __throw_ios_failure(const char*) __attribute__((__noreturn__));\n-\n _GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "bdd5193f4d030c87451ef0ae2d4820c8aeb77297", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -493,9 +493,9 @@ namespace std\n       lock()\n       {\n \tif (!_M_device)\n-\t  __throw_system_error((int)errc::operation_not_permitted);\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n \telse if (_M_owns)\n-\t  __throw_system_error((int)errc::resource_deadlock_would_occur);\n+\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n \telse\n \t  {\n \t    _M_device->lock();\n@@ -507,9 +507,9 @@ namespace std\n       try_lock()\n       {\n \tif (!_M_device)\n-\t  __throw_system_error((int)errc::operation_not_permitted);\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n \telse if (_M_owns)\n-\t  __throw_system_error((int)errc::resource_deadlock_would_occur);\n+\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n \telse\n \t  {\n \t    _M_owns = _M_device->try_lock();\n@@ -522,9 +522,9 @@ namespace std\n \ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n \t{\n \t  if (!_M_device)\n-\t    __throw_system_error((int)errc::operation_not_permitted);\n+\t    __throw_system_error(int(errc::operation_not_permitted));\n \t  else if (_M_owns)\n-\t    __throw_system_error((int)errc::resource_deadlock_would_occur);\n+\t    __throw_system_error(int(errc::resource_deadlock_would_occur));\n \t  else\n \t    {\n \t      _M_owns = _M_device->try_lock_until(__atime);\n@@ -537,9 +537,9 @@ namespace std\n \ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n \t{\n \t  if (!_M_device)\n-\t    __throw_system_error((int)errc::operation_not_permitted);\n+\t    __throw_system_error(int(errc::operation_not_permitted));\n \t  else if (_M_owns)\n-\t    __throw_system_error((int)errc::resource_deadlock_would_occur);\n+\t    __throw_system_error(int(errc::resource_deadlock_would_occur));\n \t  else\n \t    {\n \t      _M_owns = _M_device->try_lock_for(__rtime);\n@@ -551,7 +551,7 @@ namespace std\n       unlock()\n       {\n \tif (!_M_owns)\n-\t  __throw_system_error((int)errc::operation_not_permitted);\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n \telse if (_M_device)\n \t  {\n \t    _M_device->unlock();"}, {"sha": "486c3e697a9b02dc260ee10891d3337cdade4b02", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,6 +1,6 @@\n // <system_error> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -110,23 +110,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   };\n \n   // DR 890.\n-  extern const error_category& system_category;\n-  extern const error_category& generic_category;\n+  const error_category& system_category();\n+  const error_category& generic_category();\n \n   /// error_code\n   // Implementation-specific error identification\n   struct error_code\n   {\n     error_code()\n-    : _M_value(0), _M_cat(&system_category) { }\n+      : _M_value(0), _M_cat(&system_category()) { }\n \n     error_code(int __v, const error_category& __cat)\n     : _M_value(__v), _M_cat(&__cat) { }\n \n     template<typename _ErrorCodeEnum>\n       error_code(_ErrorCodeEnum __e,\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type* = 0)\n-      : _M_value(static_cast<int>(__e)), _M_cat(&generic_category)\n+      : _M_value(static_cast<int>(__e)), _M_cat(&generic_category())\n       { }\n \n     void \n@@ -138,15 +138,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     void \n     clear()\n-    { assign(0, system_category); }\n+    { assign(0, system_category()); }\n \n     // DR 804.\n     template<typename _ErrorCodeEnum>\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,\n \t\t\t error_code&>::type\n       operator=(_ErrorCodeEnum __e)\n       {\n-\tassign(static_cast<int>(__e), generic_category);\n+\tassign(static_cast<int>(__e), generic_category());\n \treturn *this;\n       }\n \n@@ -182,7 +182,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 19.4.2.6 non-member functions\n   inline error_code\n   make_error_code(errc __e)\n-  { return error_code(static_cast<int>(__e), generic_category); }\n+  { return error_code(static_cast<int>(__e), generic_category()); }\n \n   inline bool\n   operator<(const error_code& __lhs, const error_code& __rhs)\n@@ -202,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Portable error identification\n   struct error_condition \n   {\n-    error_condition() : _M_value(0), _M_cat(&generic_category) { }\n+    error_condition() : _M_value(0), _M_cat(&generic_category()) { }\n \n     error_condition(int __v, const error_category& __cat)     \n     : _M_value(__v), _M_cat(&__cat) { }\n@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       error_condition(_ErrorConditionEnum __e,\n \t\t      typename enable_if<is_error_condition_enum\n \t\t                      <_ErrorConditionEnum>::value>::type* = 0)\n-      : _M_value(static_cast<int>(__e)), _M_cat(&generic_category) { }\n+\t: _M_value(static_cast<int>(__e)), _M_cat(&generic_category()) { }\n \n     void\n     assign(int __v, const error_category& __cat)\n@@ -226,13 +226,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t <_ErrorConditionEnum>::value, error_condition&>::type\n       operator=(_ErrorConditionEnum __e)\n       {\n-\tassign(static_cast<int>(__e), generic_category);\n+\tassign(static_cast<int>(__e), generic_category());\n \treturn *this;\n       }\n \n     void \n     clear()\n-    { assign(0, generic_category); }\n+    { assign(0, generic_category()); }\n \n     // 19.4.3.4 observers\n     int \n@@ -264,7 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 19.4.3.6 non-member functions\n   inline error_condition\n   make_error_condition(errc __e)\n-  { return error_condition(static_cast<int>(__e), generic_category); }\n+  { return error_condition(static_cast<int>(__e), generic_category()); }\n \n   inline bool \n   operator<(const error_condition& __lhs, const error_condition& __rhs)"}, {"sha": "8f00489262c7c9e0d1234ccc8650285a60d487eb", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -89,7 +89,7 @@ namespace std\n     };\n \n     // Simple base type that the templatized, derived class containing\n-    // an abitrary functor can be converted to and called.\n+    // an arbitrary functor can be converted to and called.\n     struct _Impl_base\n     {\n       __shared_base_type\t_M_this_ptr;"}, {"sha": "d1352d7941997bba29d626fc9a3b63002b45d607", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2005, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -97,16 +97,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { throw underflow_error(_(__s)); }\n \n   void\n-  __throw_system_error(const char* __s)\n-  { throw system_error(error_code(), _(__s)); }\n+  __throw_ios_failure(const char* __s)\n+  { throw ios_base::failure(_(__s)); }\n \n   void\n   __throw_system_error(int __i)\n-  { throw system_error(error_code(__i, generic_category)); }\n-\n-  void\n-  __throw_ios_failure(const char* __s)\n-  { throw ios_base::failure(_(__s)); }\n+  { throw system_error(error_code(__i, generic_category())); }\n #else\n   void\n   __throw_bad_exception(void)\n@@ -161,16 +157,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { std::abort(); }\n \n   void\n-  __throw_system_error(const char* __s)\n+  __throw_ios_failure(const char*)\n   { std::abort(); }\n \n   void\n   __throw_system_error(int __i)\n   { std::abort(); }\n-\n-  void\n-  __throw_ios_failure(const char*)\n-  { std::abort(); }\n #endif //__EXCEPTIONS\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "84e288e916dc43ee3b83f40b4997df02d92d4273", "filename": "libstdc++-v3/src/system_error.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,6 +1,6 @@\n // <system_error> implementation file\n \n-// Copyright (C) 2007, 2008\n+// Copyright (C) 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,8 +73,11 @@ namespace\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  const error_category& system_category = system_category_instance;\n-  const error_category& generic_category = generic_category_instance;\n+  const error_category& \n+  system_category() { return system_category_instance; }\n+\n+  const error_category& \n+  generic_category() { return generic_category_instance; }\n   \n   system_error::~system_error() throw() { }\n "}, {"sha": "f28544df91cc4d99f067bf2bd5f819564adad89d", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -62,10 +62,7 @@ namespace std\n     int __e = EINVAL;\n \n     if (_M_id != id())\n-    {\n-      void* __r = 0;\n-      __e = __gthread_join(_M_id._M_thread, &__r);\n-    }\n+      __e = __gthread_join(_M_id._M_thread, NULL);\n \n     if (__e)\n       __throw_system_error(__e);"}, {"sha": "db5803a51cbca1512b58ed4d647c362ce37e0ab4", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,7 @@ int main()\n   // 1\n   std::error_code e1;\n   VERIFY( e1.value() == 0 );\n-  VERIFY( e1.category() == std::system_category );\n+  VERIFY( e1.category() == std::system_category() );\n \n   // 2\n   const __gnu_test::test_category cat;\n@@ -40,7 +40,7 @@ int main()\n   // 3\n   std::error_code e3(std::errc::operation_not_supported);\n   VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n-  VERIFY( e3.category() == std::generic_category );\n+  VERIFY( e3.category() == std::generic_category() );\n \n   return 0;\n }"}, {"sha": "bad78a2ab74d1601a2b75c994112f1005f261227", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@ void test01()\n   // 1\n   std::error_condition e1;\n   VERIFY( e1.value() == 0 );\n-  VERIFY( e1.category() == std::generic_category );\n+  VERIFY( e1.category() == std::generic_category() );\n \n   // 2\n   const __gnu_test::test_category cat;\n@@ -39,7 +39,7 @@ void test01()\n   // 3\n   std::error_condition e3(std::errc::operation_not_supported);\n   VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n-  VERIFY( e3.category() == std::generic_category );\n+  VERIFY( e3.category() == std::generic_category() );\n }\n \n int main()"}, {"sha": "571032159d395e659032b0de4179859e1ebe1730", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons-1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3003d59044a53cddf432024579295ef5df1ca7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc?ref=9b3003d59044a53cddf432024579295ef5df1ca7", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,8 +38,8 @@ int main()\n \n   // 2\n   {\n-    std::system_error err2(95, std::system_category, s);\n-    VERIFY( err2.code() == std::error_code(95, std::system_category) ); \n+    std::system_error err2(95, std::system_category(), s);\n+    VERIFY( err2.code() == std::error_code(95, std::system_category()) ); \n     VERIFY( std::strcmp(err2.runtime_error::what(), s.c_str()) == 0 );\n   }\n "}]}