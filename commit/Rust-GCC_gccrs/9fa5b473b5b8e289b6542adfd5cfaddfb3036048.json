{"sha": "9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhNWI0NzNiNWI4ZTI4OWI2NTQyYWRmZDVjZmFkZGZiMzAzNjA0OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-31T16:51:33Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-31T16:51:33Z"}, "message": "vect: Fix bogus alignment assumption in alias checks [PR94994]\n\nThis PR is about a case in which the vectoriser was feeding\nincorrect alignment information to tree-data-ref.c, leading\nto incorrect runtime alias checks.  The alignment was taken\nfrom the TREE_TYPE of the DR_REF, which in this case was a\nCOMPONENT_REF with a normally-aligned type.  However, the\nunderlying MEM_REF was only byte-aligned.\n\nThis patch uses dr_alignment to calculate the (byte) alignment\ninstead, just like we do when creating vector MEM_REFs.\n\ngcc/\n\tPR tree-optimization/94994\n\t* tree-vect-data-refs.c (vect_vfa_align): Use dr_alignment.\n\ngcc/testsuite/\n\tPR tree-optimization/94994\n\t* gcc.dg/vect/pr94994.c: New test.", "tree": {"sha": "9de2507dc2fad33cd02214bcdd24b6deac975760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de2507dc2fad33cd02214bcdd24b6deac975760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5b473b5b8e289b6542adfd5cfaddfb3036048/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0411210fddbd3ec27c8dc1183f40f662712a2232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0411210fddbd3ec27c8dc1183f40f662712a2232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0411210fddbd3ec27c8dc1183f40f662712a2232"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "e98aeb090d8cbcfc9628052b553b7a7d226069d1", "filename": "gcc/testsuite/gcc.dg/vect/pr94994.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5b473b5b8e289b6542adfd5cfaddfb3036048/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr94994.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5b473b5b8e289b6542adfd5cfaddfb3036048/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr94994.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr94994.c?ref=9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "patch": "@@ -0,0 +1,61 @@\n+#include <stdint.h>\n+#include \"tree-vect.h\"\n+\n+#define BLOCK_SIZE (sizeof (uint32_t))\n+\n+struct unaligned {\n+  uint32_t x;\n+} __attribute__((packed, may_alias));\n+\n+static inline uint32_t\n+load_unaligned (const char *p)\n+{\n+  return ((struct unaligned *) p)->x;\n+}\n+\n+static inline void\n+store_unaligned (uint32_t x, char *p)\n+{\n+  ((struct unaligned *) p)->x = x;\n+}\n+\n+void __attribute__((noipa))\n+copy (char *dst, const char *src, size_t n)\n+{\n+  for (size_t i = 0; i < n; i += BLOCK_SIZE)\n+    store_unaligned (load_unaligned (src + i), dst + i);\n+}\n+\n+#define INPUT_SIZE 64\n+#define MAX_STEP 32\n+\n+char x[INPUT_SIZE + MAX_STEP];\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  for (unsigned int i = 1; i < MAX_STEP; ++i)\n+    {\n+      for (unsigned int j = 0; j < INPUT_SIZE + MAX_STEP; ++j)\n+\tx[j] = j + 10;\n+      copy (x + i, x, INPUT_SIZE);\n+      for (int j = 0; j < INPUT_SIZE + i; ++j)\n+\t{\n+\t  int expected;\n+\t  if (j < i)\n+\t    expected = j + 10;\n+\t  else if (i >= BLOCK_SIZE)\n+\t    expected = j % i + 10;\n+\t  else if ((j - i) % BLOCK_SIZE < i)\n+\t    expected = x[j - i];\n+\t  else\n+\t    expected = j - i + 10;\n+\t  if (x[j] != expected)\n+\t    __builtin_abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}"}, {"sha": "5fe9cad4da8ff498e7d1b740f2a093038f37a14b", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5b473b5b8e289b6542adfd5cfaddfb3036048/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5b473b5b8e289b6542adfd5cfaddfb3036048/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "patch": "@@ -3258,7 +3258,7 @@ vect_vfa_access_size (vec_info *vinfo, dr_vec_info *dr_info)\n static unsigned int\n vect_vfa_align (dr_vec_info *dr_info)\n {\n-  return TYPE_ALIGN_UNIT (TREE_TYPE (DR_REF (dr_info->dr)));\n+  return dr_alignment (dr_info->dr);\n }\n \n /* Function vect_no_alias_p."}]}