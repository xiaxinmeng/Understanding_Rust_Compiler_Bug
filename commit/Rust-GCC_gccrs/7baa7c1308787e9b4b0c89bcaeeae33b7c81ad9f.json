{"sha": "7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhYTdjMTMwODc4N2U5YjRiMGM4OWJjYWVlYWUzM2I3YzgxYWQ5Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-03-25T11:57:29Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-03-25T11:57:29Z"}, "message": "vfp.md (arm_movdi_vfp): Enable only when not tuning for Cortex-A8.\n\n2011-03-25  Bernd Schmidt  <bernds@codesourcery.com>\n\t    Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/arm/vfp.md (arm_movdi_vfp): Enable only when not tuning\n\tfor Cortex-A8.\n\t(arm_movdi_vfp_cortexa8): New pattern.\n\t* config/arm/neon.md (adddi3_neon, subdi3_neon, anddi3_neon,\n\tiordi3_neon, xordi3_neon): Add alternatives to discourage Neon\n\tinstructions when tuning for Cortex-A8.  Set attribute \"arch\".\n\t* config/arm/arm.md: Move include arm-tune.md up a bit.\n\t(define_attr \"arch\"): Add \"onlya8\" and \"nota8\" values.\n\t(define_attr \"arch_enabled\"): Handle \"onlya8\" and \"nota8\".\n\n\n\nCo-Authored-By: Andrew Stubbs <ams@codesourcery.com>\n\nFrom-SVN: r171449", "tree": {"sha": "17f89e87d0acaeca63af78a3afacf547786193cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17f89e87d0acaeca63af78a3afacf547786193cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/comments", "author": null, "committer": null, "parents": [{"sha": "4ff08abfef7cb6e4fc9fec536e24de880b1a80a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff08abfef7cb6e4fc9fec536e24de880b1a80a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff08abfef7cb6e4fc9fec536e24de880b1a80a6"}], "stats": {"total": 155, "additions": 115, "deletions": 40}, "files": [{"sha": "03e16086ae3dbc8f746b771ecc8ee1a43f05968a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "patch": "@@ -1,3 +1,16 @@\n+2011-03-25  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/arm/vfp.md (arm_movdi_vfp): Enable only when not tuning\n+\tfor Cortex-A8.\n+\t(arm_movdi_vfp_cortexa8): New pattern.\n+\t* config/arm/neon.md (adddi3_neon, subdi3_neon, anddi3_neon,\n+\tiordi3_neon, xordi3_neon): Add alternatives to discourage Neon\n+\tinstructions when tuning for Cortex-A8.  Set attribute \"arch\".\n+\t* config/arm/arm.md: Move include arm-tune.md up a bit.\n+\t(define_attr \"arch\"): Add \"onlya8\" and \"nota8\" values.\n+\t(define_attr \"arch_enabled\"): Handle \"onlya8\" and \"nota8\".\n+\n 2011-03-25  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR bootstrap/48282"}, {"sha": "03561e0cf08d9ff6da8f3c1aad130bf3736b6f64", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "patch": "@@ -149,6 +149,9 @@\n ;;---------------------------------------------------------------------------\n ;; Attributes\n \n+;; Processor type.  This is created automatically from arm-cores.def.\n+(include \"arm-tune.md\")\n+\n ; IS_THUMB is set to 'yes' when we are generating Thumb code, and 'no' when\n ; generating ARM code.  This is used to control the length of some insn\n ; patterns that share the same RTL in both ARM and Thumb code.\n@@ -192,7 +195,7 @@\n ; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n ; arm_arch6.  This attribute is used to compute attribute \"enabled\",\n ; use type \"any\" to enable an alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6\"\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,onlya8,nota8\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -225,6 +228,14 @@\n \n \t (and (eq_attr \"arch\" \"nov6\")\n \t      (ne (symbol_ref \"(TARGET_32BIT && !arm_arch6)\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"onlya8\")\n+\t      (eq_attr \"tune\" \"cortexa8\"))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"nota8\")\n+\t      (not (eq_attr \"tune\" \"cortexa8\")))\n \t (const_string \"yes\")]\n \t(const_string \"no\")))\n \n@@ -485,9 +496,6 @@\n ;;---------------------------------------------------------------------------\n ;; Pipeline descriptions\n \n-;; Processor type.  This is created automatically from arm-cores.def.\n-(include \"arm-tune.md\")\n-\n (define_attr \"tune_cortexr4\" \"yes,no\"\n   (const (if_then_else\n \t  (eq_attr \"tune\" \"cortexr4,cortexr4f\")"}, {"sha": "87ae2faa09be7f6ca3463076b04c44594a6717a0", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "patch": "@@ -583,23 +583,25 @@\n )\n \n (define_insn \"adddi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r\")\n-        (plus:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0\")\n-                 (match_operand:DI 2 \"s_register_operand\" \"w,r,0\")))\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?w\")\n+        (plus:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,w\")\n+                 (match_operand:DI 2 \"s_register_operand\" \"w,r,0,w\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_NEON\"\n {\n   switch (which_alternative)\n     {\n-    case 0: return \"vadd.i64\\t%P0, %P1, %P2\";\n+    case 0: /* fall through */\n+    case 3: return \"vadd.i64\\t%P0, %P1, %P2\";\n     case 1: return \"#\";\n     case 2: return \"#\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_1,*,*\")\n-   (set_attr \"conds\" \"*,clob,clob\")\n-   (set_attr \"length\" \"*,8,8\")]\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1\")\n+   (set_attr \"conds\" \"*,clob,clob,*\")\n+   (set_attr \"length\" \"*,8,8,*\")\n+   (set_attr \"arch\" \"nota8,*,*,onlya8\")]\n )\n \n (define_insn \"*sub<mode>3_neon\"\n@@ -617,24 +619,26 @@\n )\n \n (define_insn \"subdi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?&r\")\n-        (minus:DI (match_operand:DI 1 \"s_register_operand\" \"w,0,r,0\")\n-                  (match_operand:DI 2 \"s_register_operand\" \"w,r,0,0\")))\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?&r,?w\")\n+        (minus:DI (match_operand:DI 1 \"s_register_operand\" \"w,0,r,0,w\")\n+                  (match_operand:DI 2 \"s_register_operand\" \"w,r,0,0,w\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_NEON\"\n {\n   switch (which_alternative)\n     {\n-    case 0: return \"vsub.i64\\t%P0, %P1, %P2\";\n+    case 0: /* fall through */\n+    case 4: return \"vsub.i64\\t%P0, %P1, %P2\";\n     case 1: /* fall through */ \n     case 2: /* fall through */\n     case 3: return  \"subs\\\\t%Q0, %Q1, %Q2\\;sbc\\\\t%R0, %R1, %R2\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_2,*,*,*\")\n-   (set_attr \"conds\" \"*,clob,clob,clob\")\n-   (set_attr \"length\" \"*,8,8,8\")]\n+  [(set_attr \"neon_type\" \"neon_int_2,*,*,*,neon_int_2\")\n+   (set_attr \"conds\" \"*,clob,clob,clob,*\")\n+   (set_attr \"length\" \"*,8,8,8,*\")\n+   (set_attr \"arch\" \"nota8,*,*,*,onlya8\")]\n )\n \n (define_insn \"*mul<mode>3_neon\"\n@@ -720,23 +724,26 @@\n )\n \n (define_insn \"iordi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r\")\n-        (ior:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r\")\n-\t\t(match_operand:DI 2 \"neon_logic_op2\" \"w,Dl,r,r\")))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r,?w,?w\")\n+        (ior:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r,w,0\")\n+\t\t(match_operand:DI 2 \"neon_logic_op2\" \"w,Dl,r,r,w,Dl\")))]\n   \"TARGET_NEON\"\n {\n   switch (which_alternative)\n     {\n-    case 0: return \"vorr\\t%P0, %P1, %P2\";\n-    case 1: return neon_output_logic_immediate (\"vorr\", &operands[2],\n+    case 0: /* fall through */\n+    case 4: return \"vorr\\t%P0, %P1, %P2\";\n+    case 1: /* fall through */\n+    case 5: return neon_output_logic_immediate (\"vorr\", &operands[2],\n \t\t     DImode, 0, VALID_NEON_QREG_MODE (DImode));\n     case 2: return \"#\";\n     case 3: return \"#\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*\")\n-   (set_attr \"length\" \"*,*,8,8\")]\n+  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n+   (set_attr \"length\" \"*,*,8,8,*,*\")\n+   (set_attr \"arch\" \"nota8,nota8,*,*,onlya8,onlya8\")]\n )\n \n ;; The concrete forms of the Neon immediate-logic instructions are vbic and\n@@ -762,23 +769,26 @@\n )\n \n (define_insn \"anddi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r\")\n-        (and:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r\")\n-\t\t(match_operand:DI 2 \"neon_inv_logic_op2\" \"w,DL,r,r\")))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r,?w,?w\")\n+        (and:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r,w,0\")\n+\t\t(match_operand:DI 2 \"neon_inv_logic_op2\" \"w,DL,r,r,w,DL\")))]\n   \"TARGET_NEON\"\n {\n   switch (which_alternative)\n     {\n-    case 0: return \"vand\\t%P0, %P1, %P2\";\n-    case 1: return neon_output_logic_immediate (\"vand\", &operands[2],\n+    case 0: /* fall through */\n+    case 4: return \"vand\\t%P0, %P1, %P2\";\n+    case 1: /* fall through */\n+    case 5: return neon_output_logic_immediate (\"vand\", &operands[2],\n     \t\t     DImode, 1, VALID_NEON_QREG_MODE (DImode));\n     case 2: return \"#\";\n     case 3: return \"#\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*\")\n-   (set_attr \"length\" \"*,*,8,8\")]\n+  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n+   (set_attr \"length\" \"*,*,8,8,*,*\")\n+   (set_attr \"arch\" \"nota8,nota8,*,*,onlya8,onlya8\")]\n )\n \n (define_insn \"orn<mode>3_neon\"\n@@ -836,16 +846,18 @@\n )\n \n (define_insn \"xordi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r\")\n-        (xor:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,r\")\n-\t        (match_operand:DI 2 \"s_register_operand\" \"w,r,r\")))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?w\")\n+        (xor:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,r,w\")\n+\t        (match_operand:DI 2 \"s_register_operand\" \"w,r,r,w\")))]\n   \"TARGET_NEON\"\n   \"@\n    veor\\t%P0, %P1, %P2\n    #\n-   #\"\n-  [(set_attr \"neon_type\" \"neon_int_1,*,*\")\n-   (set_attr \"length\" \"*,8,8\")]\n+   #\n+   veor\\t%P0, %P1, %P2\"\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1\")\n+   (set_attr \"length\" \"*,8,8,*\")\n+   (set_attr \"arch\" \"nota8,*,*,onlya8\")]\n )\n \n (define_insn \"one_cmpl<mode>2\""}, {"sha": "d257cb8a1e622da49f3641060ac31df90e24fd9b", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=7baa7c1308787e9b4b0c89bcaeeae33b7c81ad9f", "patch": "@@ -134,9 +134,51 @@\n ;; DImode moves\n \n (define_insn \"*arm_movdi_vfp\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r,m,w,r,w,w, Uv\")\n+  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, m,w,r,w,w, Uv\")\n \t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,w,w,Uvi,w\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\n+  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune != cortexa8\n+   && (   register_operand (operands[0], DImode)\n+       || register_operand (operands[1], DImode))\"\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 0: \n+      return \\\"#\\\";\n+    case 1:\n+    case 2:\n+      return output_move_double (operands);\n+    case 3:\n+      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+    case 4:\n+      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n+    case 5:\n+      if (TARGET_VFP_SINGLE)\n+\treturn \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\;fcpys%?\\\\t%p0, %p1\\\\t%@ int\\\";\n+      else\n+\treturn \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n+    case 6: case 7:\n+      return output_move_vfp (operands);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"type\" \"*,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n+   (set_attr \"neon_type\" \"*,*,*,neon_mcr_2_mcrr,neon_mrrc,neon_vmov,*,*\")\n+   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"0,1,2\") (const_int 8)\n+\t\t\t       (eq_attr \"alternative\" \"5\")\n+\t\t\t\t(if_then_else\n+\t\t\t\t (eq (symbol_ref \"TARGET_VFP_SINGLE\") (const_int 1))\n+\t\t\t\t (const_int 8)\n+\t\t\t\t (const_int 4))]\n+\t\t\t      (const_int 4)))\n+   (set_attr \"pool_range\"     \"*,1020,*,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,1008,*,*,*,*,1008,*\")]\n+)\n+\n+(define_insn \"*arm_movdi_vfp_cortexa8\"\n+  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r,m,w,!r,w,w, Uv\")\n+\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,w,w,Uvi,w\"))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune == cortexa8\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   \"*"}]}