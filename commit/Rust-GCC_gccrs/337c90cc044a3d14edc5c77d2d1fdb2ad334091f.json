{"sha": "337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3YzkwY2MwNDRhM2QxNGVkYzVjNzdkMmQxZmRiMmFkMzM0MDkxZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-04-20T21:48:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-20T21:48:52Z"}, "message": "cp-tree.h (build_binary_op): Remove unneeded parameter.\n\n\t* cp-tree.h (build_binary_op): Remove unneeded parameter.\n\t* class.c (build_vrable_entry_ref): Adjust call to\n\tbuild_binary_op.\n\t* decl.c (expand_static_init): Likewise.\n\t(grokdeclarator): Likewise.\n\t(finish_function): Likewise.\n\t* decl2.c (delete_sanity): Likewise.\n\t(do_dtors): Likewise.\n\t(do_ctors): Likewise.\n\t* error.c (dump_type_suffix): Likewise.\n\t* expr.c (cplus_expand_expr): Likewise.\n\t* init.c (resolve_offset_ref): Likewise.\n\t(build_new): Likewise.\n\t(build_new_1): Likewise.\n\t(build_vec_delete_1): Likewise.\n\t(expand_vec_init_catch_clause): Likewise.\n\t(build_delete): Likewise.\n\t* pt.c (tsubst): Likewise.\n\t* rtti.c (synthesize_tinfo_fn): Likewise.\n\t* search.c (expand_upcast_fixups): Likewise.\n\t(expand_direct_vtbls_init): Likewise.\n\t* typeck.c (get_member_function_from_ptrfunc): Likewise.\n\t(build_binary_op_nodefault): Likewise.\n\t(point_int_sum): Likewise.\n\t(pointer_diff): Likewise.\n\t(build_unary_op): Likewise.\n\t(build_modify_expr): Likewise.\n\t(get_delta_difference): Likewise.\n\t(build_ptrmemfunc): Likewise.\n\t(expand_ptrmemfunc_cst): Likewise.\n\nFrom-SVN: r26566", "tree": {"sha": "a9618f69f5a04ef8d0a3563b173d727af81c5354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9618f69f5a04ef8d0a3563b173d727af81c5354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/comments", "author": null, "committer": null, "parents": [{"sha": "37679e060354a880f3c7cdd8deb852aa67c1206d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37679e060354a880f3c7cdd8deb852aa67c1206d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37679e060354a880f3c7cdd8deb852aa67c1206d"}], "stats": {"total": 155, "additions": 89, "deletions": 66}, "files": [{"sha": "4740af53e6bed35b7e6eaff2b0b3abaf0c8ba83e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -1,3 +1,36 @@\n+1999-04-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (build_binary_op): Remove unneeded parameter.\n+\t* class.c (build_vrable_entry_ref): Adjust call to\n+\tbuild_binary_op.\n+\t* decl.c (expand_static_init): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(finish_function): Likewise.\n+\t* decl2.c (delete_sanity): Likewise.\n+\t(do_dtors): Likewise.\n+\t(do_ctors): Likewise.\n+\t* error.c (dump_type_suffix): Likewise.\n+\t* expr.c (cplus_expand_expr): Likewise.\n+\t* init.c (resolve_offset_ref): Likewise.\n+\t(build_new): Likewise.\n+\t(build_new_1): Likewise.\n+\t(build_vec_delete_1): Likewise.\n+\t(expand_vec_init_catch_clause): Likewise.\n+\t(build_delete): Likewise.\n+\t* pt.c (tsubst): Likewise.\n+\t* rtti.c (synthesize_tinfo_fn): Likewise.\n+\t* search.c (expand_upcast_fixups): Likewise.\n+\t(expand_direct_vtbls_init): Likewise.\n+\t* typeck.c (get_member_function_from_ptrfunc): Likewise.\n+\t(build_binary_op_nodefault): Likewise.\n+\t(point_int_sum): Likewise.\n+\t(pointer_diff): Likewise.\n+\t(build_unary_op): Likewise.\n+\t(build_modify_expr): Likewise.\n+\t(get_delta_difference): Likewise.\n+\t(build_ptrmemfunc): Likewise.\n+\t(expand_ptrmemfunc_cst): Likewise.\n+\t\n 1999-04-20  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grokfndecl): Always call cplus_decl_attributes."}, {"sha": "87a82c7beea1a583d282beba8e7a52522b38ac27", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -489,7 +489,7 @@ build_vtable_entry_ref (basetype, vtbl, idx)\n   i = build_c_cast (ptrdiff_type_node, build_unary_op (ADDR_EXPR, i, 0));\n   i2 = build_array_ref (vtbl, build_int_2(0,0));\n   i2 = build_c_cast (ptrdiff_type_node, build_unary_op (ADDR_EXPR, i2, 0));\n-  i = build_binary_op (MINUS_EXPR, i, i2, 0);\n+  i = build_binary_op (MINUS_EXPR, i, i2);\n   i = build_tree_list (build_string (1, \"i\"), i);\n \n   expand_asm_operands (build_string (sizeof(asm_stmt)-1, asm_stmt),"}, {"sha": "b94f6f50af50a3d277cded3549084f7920fbef81", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -3425,7 +3425,7 @@ extern tree build_function_call\t\t\tPROTO((tree, tree));\n extern tree build_function_call_maybe\t\tPROTO((tree, tree));\n extern tree convert_arguments\t\t\tPROTO((tree, tree, tree, int));\n extern tree build_x_binary_op\t\t\tPROTO((enum tree_code, tree, tree));\n-extern tree build_binary_op\t\t\tPROTO((enum tree_code, tree, tree, int));\n+extern tree build_binary_op\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree build_binary_op_nodefault\t\tPROTO((enum tree_code, tree, tree, enum tree_code));\n extern tree build_component_addr\t\tPROTO((tree, tree, const char *));\n extern tree build_x_unary_op\t\t\tPROTO((enum tree_code, tree));"}, {"sha": "331d6272985e7589f1dc11dec104145543f36d4f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -8303,7 +8303,7 @@ expand_static_init (decl, init)\n \n       /* Begin the conditional initialization.  */\n       expand_start_cond (build_binary_op (EQ_EXPR, temp,\n-\t\t\t\t\t  integer_zero_node, 1), 0);\n+\t\t\t\t\t  integer_zero_node), 0);\n       expand_start_target_temps ();\n \n       /* Do the initialization itself.  */\n@@ -10225,7 +10225,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t  = fold (build_binary_op (MINUS_EXPR,\n \t\t\t\t\t   cp_convert (index_type, size),\n \t\t\t\t\t   cp_convert (index_type,\n-\t\t\t\t\t\t       integer_one_node), 1));\n+\t\t\t\t\t\t       integer_one_node)));\n \t\tif (! TREE_CONSTANT (itype))\n \t\t  itype = variable_size (itype);\n \t\telse if (TREE_OVERFLOW (itype))\n@@ -13973,7 +13973,7 @@ finish_function (lineno, flags, nested)\n \t  if (! ok_to_optimize_dtor)\n \t    {\n \t      cond = build_binary_op (NE_EXPR,\n-\t\t\t\t      current_class_ptr, integer_zero_node, 1);\n+\t\t\t\t      current_class_ptr, integer_zero_node);\n \t      expand_start_cond (cond, 0);\n \t    }\n \n@@ -14033,7 +14033,7 @@ finish_function (lineno, flags, nested)\n \t  if (flag_this_is_variable > 0)\n \t    {\n \t      cond = build_binary_op (EQ_EXPR,\n-\t\t\t\t      current_class_ptr, integer_zero_node, 1);\n+\t\t\t\t      current_class_ptr, integer_zero_node);\n \t      thenclause = build_modify_expr (current_class_ptr, NOP_EXPR,\n \t\t\t\t\t      build_new (NULL_TREE, current_class_type, void_type_node, 0));\n \t    }"}, {"sha": "ac52f6dd3d65c100f4feea4a3cb8532cae670c4d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -1176,7 +1176,7 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n \n   if (doing_vec == 2)\n     {\n-      maxindex = build_binary_op (MINUS_EXPR, size, integer_one_node, 1);\n+      maxindex = build_binary_op (MINUS_EXPR, size, integer_one_node);\n       pedwarn (\"anachronistic use of array size in vector delete\");\n     }\n \n@@ -3176,7 +3176,7 @@ do_dtors (start)\n \t    {\n \t      tree sentry = get_sentry (DECL_ASSEMBLER_NAME (decl));\n \t      sentry = build_unary_op (PREDECREMENT_EXPR, sentry, 0);\n-\t      sentry = build_binary_op (EQ_EXPR, sentry, integer_zero_node, 1);\n+\t      sentry = build_binary_op (EQ_EXPR, sentry, integer_zero_node);\n \t      expand_start_cond (sentry, 0);\n \t    }\n \n@@ -3255,7 +3255,7 @@ do_ctors (start)\n \t      tree sentry = get_sentry (DECL_ASSEMBLER_NAME (decl));\n \t      sentry = build_unary_op (PREINCREMENT_EXPR, sentry, 0);\n \t      sentry = build_binary_op\n-\t\t(EQ_EXPR, sentry, integer_one_node, 1);\n+\t\t(EQ_EXPR, sentry, integer_one_node);\n \t      expand_start_cond (sentry, 0);\n \t    }\n "}, {"sha": "b59b61922cbe714b071705b53a8ede17bd3aed0d", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -579,7 +579,7 @@ dump_type_suffix (t, v, canonical_name)\n \t  else\n \t    dump_expr (fold (build_binary_op\n \t\t\t     (PLUS_EXPR, TYPE_MAX_VALUE (TYPE_DOMAIN (t)),\n-\t\t\t      integer_one_node, 1)), 0);\n+\t\t\t      integer_one_node)), 0);\n \t}\n       OB_PUTC (']');\n       dump_type_suffix (TREE_TYPE (t), v, canonical_name);"}, {"sha": "bc745ff0a00b25b05e00a46c16149d95ed42d07a", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -219,7 +219,7 @@ cplus_expand_expr (exp, target, tmode, modifier)\n \t(expand_vec_init\n \t (NULL_TREE, TREE_OPERAND (exp, 0),\n \t  build_binary_op (MINUS_EXPR, TREE_OPERAND (exp, 2),\n-\t\t\t   integer_one_node, 1),\n+\t\t\t   integer_one_node),\n \t  TREE_OPERAND (exp, 1), 0), target, tmode, modifier);\n \n     case NEW_EXPR:"}, {"sha": "b825bfbe2a179b8dcac38666a66267b94565031f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -1793,8 +1793,7 @@ resolve_offset_ref (exp)\n \t pointer with a real value of 0 is distinguishable from an\n \t offset of the first member of a structure.  */\n       member = build_binary_op (MINUS_EXPR, member,\n-\t\t\t\tcp_convert (ptrdiff_type_node, integer_one_node),\n-\t\t\t\t0);\n+\t\t\t\tcp_convert (ptrdiff_type_node, integer_one_node));\n \n       return build1 (INDIRECT_REF, type,\n \t\t     build (PLUS_EXPR, build_pointer_type (type),\n@@ -1945,7 +1944,7 @@ build_new (placement, decl, init, use_global_new)\n \t\t      nelts = integer_zero_node;\n \t\t    }\n \t\t  else\n-\t\t    nelts = build_binary_op (MULT_EXPR, nelts, this_nelts, 1);\n+\t\t    nelts = build_binary_op (MULT_EXPR, nelts, this_nelts);\n \t\t}\n \t    }\n \t  else\n@@ -2134,7 +2133,7 @@ build_new_1 (exp)\n   while (TREE_CODE (true_type) == ARRAY_TYPE)\n     {\n       tree this_nelts = array_type_nelts_top (true_type);\n-      nelts = build_binary_op (MULT_EXPR, nelts, this_nelts, 1);\n+      nelts = build_binary_op (MULT_EXPR, nelts, this_nelts);\n       true_type = TREE_TYPE (true_type);\n     }\n \n@@ -2143,7 +2142,7 @@ build_new_1 (exp)\n \n   if (has_array)\n     size = fold (build_binary_op (MULT_EXPR, size_in_bytes (true_type),\n-\t\t\t\t  nelts, 1));\n+\t\t\t\t  nelts));\n   else\n     size = size_in_bytes (type);\n \n@@ -2285,7 +2284,7 @@ build_new_1 (exp)\n       tree extra = BI_header_size;\n       tree cookie, exp1;\n       rval = convert (string_type_node, rval); /* for ptr arithmetic */\n-      rval = save_expr (build_binary_op (PLUS_EXPR, rval, extra, 1));\n+      rval = save_expr (build_binary_op (PLUS_EXPR, rval, extra));\n       /* Store header info.  */\n       cookie = build_indirect_ref (build (MINUS_EXPR,\n \t\t\t\t\t  build_pointer_type (BI_header_type),\n@@ -2471,7 +2470,7 @@ build_new_1 (exp)\n     {\n       /* Did we modify the storage?  */\n       tree ifexp = build_binary_op (NE_EXPR, alloc_node,\n-\t\t\t\t    integer_zero_node, 1);\n+\t\t\t\t    integer_zero_node);\n       rval = build_conditional_expr (ifexp, rval, alloc_node);\n     }\n \n@@ -2541,8 +2540,7 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n       tree base_tbd = cp_convert (ptype,\n \t\t\t\t  build_binary_op (MINUS_EXPR,\n \t\t\t\t\t\t   cp_convert (ptr_type_node, base),\n-\t\t\t\t\t\t   BI_header_size,\n-\t\t\t\t\t\t   1));\n+\t\t\t\t\t\t   BI_header_size));\n       /* This is the real size */\n       virtual_size = size_binop (PLUS_EXPR, virtual_size, BI_header_size);\n       body = build_expr_list (NULL_TREE,\n@@ -2597,8 +2595,7 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n \t  base_tbd = cp_convert (ptype,\n \t\t\t\t build_binary_op (MINUS_EXPR,\n \t\t\t\t\t\t  cp_convert (string_type_node, base),\n-\t\t\t\t\t\t  BI_header_size,\n-\t\t\t\t\t\t  1));\n+\t\t\t\t\t\t  BI_header_size));\n \t  /* True size with header.  */\n \t  virtual_size = size_binop (PLUS_EXPR, virtual_size, BI_header_size);\n \t}\n@@ -2697,7 +2694,7 @@ expand_vec_init_catch_clause (rval, type, maxindex, iterator)\n     \n   e = build_vec_delete_1 (rval,\n \t\t\t  build_binary_op (MINUS_EXPR, maxindex, \n-\t\t\t\t\t   iterator, 1),\n+\t\t\t\t\t   iterator),\n \t\t\t  type,\n \t\t\t  /*auto_delete_vec=*/integer_zero_node,\n \t\t\t  /*auto_delete=*/integer_zero_node,\n@@ -3091,7 +3088,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \tifexp = integer_one_node;\n       else\n \t/* Handle deleting a null pointer.  */\n-\tifexp = fold (build_binary_op (NE_EXPR, addr, integer_zero_node, 1));\n+\tifexp = fold (build_binary_op (NE_EXPR, addr, integer_zero_node));\n \n       if (ifexp != integer_one_node)\n \texpr = build (COND_EXPR, void_type_node,"}, {"sha": "5a3624705722c663af23983de2b54992e78f7267", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -6136,7 +6136,7 @@ tsubst (t, args, complain, in_decl)\n \t    return error_mark_node;\n \t  }\n \n-\tmax = fold (build_binary_op (MINUS_EXPR, max, integer_one_node, 1));\n+\tmax = fold (build_binary_op (MINUS_EXPR, max, integer_one_node));\n \tif (!TREE_PERMANENT (max) && !allocation_temporary_p ())\n \t  max = copy_to_permanent (max);\n \treturn build_index_type (max);"}, {"sha": "15efd618d2ef79c2b53c0df42055c74de2a3ff03", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -1129,7 +1129,7 @@ synthesize_tinfo_fn (fndecl)\n   addr = decay_conversion (tdecl);\n   tmp = cp_convert (build_pointer_type (ptr_type_node), addr);\n   tmp = build_indirect_ref (tmp, 0);\n-  tmp = build_binary_op (EQ_EXPR, tmp, integer_zero_node, 1);\n+  tmp = build_binary_op (EQ_EXPR, tmp, integer_zero_node);\n   expand_start_cond (tmp, 0);\n \n   if (TREE_CODE (type) == FUNCTION_TYPE)"}, {"sha": "0551474bc69f5747ab2e8a47a20c5ac77678624b", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -2527,7 +2527,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n \t  /* This is a upcast, so we have to add the offset for the\n \t     virtual base.  */\n \t  old_delta = build_binary_op (PLUS_EXPR, old_delta,\n-\t\t\t\t       TREE_VALUE (delta), 0);\n+\t\t\t\t       TREE_VALUE (delta));\n \t  if (vc)\n \t    {\n \t      /* If this is set, we need to subtract out the delta\n@@ -2548,7 +2548,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n    \n \t      /* This is a downcast, so we have to subtract the offset\n \t\t for the virtual base.  */\n-\t      old_delta = build_binary_op (MINUS_EXPR, old_delta, vc_delta, 0);\n+\t      old_delta = build_binary_op (MINUS_EXPR, old_delta, vc_delta);\n \t    }\n \n \t  TREE_READONLY (new_delta) = 0;\n@@ -2690,7 +2690,7 @@ expand_indirect_vtbls_init (binfo, true_exp, decl_ptr)\n \t      warning (\"recoverable internal compiler error, nobody's in charge!\");\n \t      in_charge_node = integer_zero_node;\n \t    }\n-\t  in_charge_node = build_binary_op (EQ_EXPR, in_charge_node, integer_zero_node, 1);\n+\t  in_charge_node = build_binary_op (EQ_EXPR, in_charge_node, integer_zero_node);\n \t  expand_start_cond (in_charge_node, 0);\n \t  emit_insns (fixup_insns);\n \t  expand_end_cond ();"}, {"sha": "c74692c51b65ae9463b6a2c48bc3130101dbb467", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337c90cc044a3d14edc5c77d2d1fdb2ad334091f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=337c90cc044a3d14edc5c77d2d1fdb2ad334091f", "patch": "@@ -2871,7 +2871,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \t\t\t   (build_component_ref (function,\n \t\t\t\t\t\t index_identifier,\n \t\t\t\t\t\t NULL_TREE, 0)));\n-\t  e1 = build_binary_op (GT_EXPR, idx, integer_zero_node, 1);\n+\t  e1 = build_binary_op (GT_EXPR, idx, integer_zero_node);\n \n \t  /* Convert down to the right base, before using the instance.  */\n \t  instance = convert_pointer_to_real (basetype, instance_ptr);\n@@ -2887,7 +2887,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \t  vtbl = build_indirect_ref (vtbl, NULL_PTR);\n \t  aref = build_array_ref (vtbl, build_binary_op (MINUS_EXPR,\n \t\t\t\t\t\t\t idx,\n-\t\t\t\t\t\t\t integer_one_node, 1));\n+\t\t\t\t\t\t\t integer_one_node));\n \t  if (! flag_vtable_thunks)\n \t    {\n \t      aref = save_expr (aref);\n@@ -2899,7 +2899,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \t\t\t\t\t\t\t      delta_identifier,\n \t\t\t\t\t\t\t      NULL_TREE, 0),\n \t\t\t\t\t integer_zero_node),\n-\t\t delta, 1);\n+\t\t delta);\n \t    }\n \n \t  if (flag_vtable_thunks)\n@@ -3262,10 +3262,9 @@ build_x_binary_op (code, arg1, arg2)\n }\n \n tree\n-build_binary_op (code, arg1, arg2, convert_p)\n+build_binary_op (code, arg1, arg2)\n      enum tree_code code;\n      tree arg1, arg2;\n-     int convert_p ATTRIBUTE_UNUSED;\n {\n   return build_binary_op_nodefault (code, arg1, arg2, code);\n }\n@@ -3661,18 +3660,17 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t  tree e1, e2, e3;\n \t  tree integer_neg_one_node\n \t    = build_binary_op (MINUS_EXPR, integer_zero_node,\n-\t\t\t       integer_one_node, 1);\n-\t  e1 = build_binary_op (EQ_EXPR, index0, index1, 1);\n-\t  e2 = build_binary_op (NE_EXPR, index1, integer_neg_one_node, 1);\n+\t\t\t       integer_one_node);\n+\t  e1 = build_binary_op (EQ_EXPR, index0, index1);\n+\t  e2 = build_binary_op (NE_EXPR, index1, integer_neg_one_node);\n \t  e2 = build_binary_op (TRUTH_ANDIF_EXPR, e2,\n-\t\t\t\tbuild_binary_op (EQ_EXPR, delta20, delta21, 1),\n-\t\t\t\t1);\n-\t  e3 = build_binary_op (EQ_EXPR, pfn0, pfn1, 1);\n-\t  e2 = build_binary_op (TRUTH_ORIF_EXPR, e2, e3, 1);\n-\t  e2 = build_binary_op (TRUTH_ANDIF_EXPR, e1, e2, 1);\n+\t\t\t\tbuild_binary_op (EQ_EXPR, delta20, delta21));\n+\t  e3 = build_binary_op (EQ_EXPR, pfn0, pfn1);\n+\t  e2 = build_binary_op (TRUTH_ORIF_EXPR, e2, e3);\n+\t  e2 = build_binary_op (TRUTH_ANDIF_EXPR, e1, e2);\n \t  if (code == EQ_EXPR)\n \t    return e2;\n-\t  return build_binary_op (EQ_EXPR, e2, integer_zero_node, 1);\n+\t  return build_binary_op (EQ_EXPR, e2, integer_zero_node);\n \t}\n       else if (TYPE_PTRMEMFUNC_P (type0)\n \t       && TYPE_PTRMEMFUNC_FN_TYPE (type0) == type1)\n@@ -3685,7 +3683,7 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t  tree delta21 = integer_zero_node;\n \t  tree e1, e2, e3;\n \t  tree integer_neg_one_node\n-\t    = build_binary_op (MINUS_EXPR, integer_zero_node, integer_one_node, 1);\n+\t    = build_binary_op (MINUS_EXPR, integer_zero_node, integer_one_node);\n \t  if (TREE_CODE (TREE_OPERAND (op1, 0)) == FUNCTION_DECL\n \t      && DECL_VINDEX (TREE_OPERAND (op1, 0)))\n \t    {\n@@ -3710,23 +3708,20 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t    TREE_CONSTANT (nop1) = TREE_CONSTANT (op1);\n \t    op1 = nop1;\n \t  }\n-\t  e1 = build_binary_op (EQ_EXPR, index0, index1, 1);\n-\t  e2 = build_binary_op (NE_EXPR, index1, integer_neg_one_node, 1);\n+\t  e1 = build_binary_op (EQ_EXPR, index0, index1);\n+\t  e2 = build_binary_op (NE_EXPR, index1, integer_neg_one_node);\n \t  e2 = build_binary_op (TRUTH_ANDIF_EXPR, e2,\n-\t\t\t\tbuild_binary_op (EQ_EXPR, delta20, delta21, 1),\n-\t\t\t\t1);\n-\t  e3 = build_binary_op (EQ_EXPR, pfn0, op1, 1);\n-\t  e2 = build_binary_op (TRUTH_ORIF_EXPR, e2, e3, 1);\n-\t  e2 = build_binary_op (TRUTH_ANDIF_EXPR, e1, e2, 1);\n+\t\t\t\tbuild_binary_op (EQ_EXPR, delta20, delta21));\n+\t  e3 = build_binary_op (EQ_EXPR, pfn0, op1);\n+\t  e2 = build_binary_op (TRUTH_ORIF_EXPR, e2, e3);\n+\t  e2 = build_binary_op (TRUTH_ANDIF_EXPR, e1, e2);\n \t  if (code == EQ_EXPR)\n \t    return e2;\n-\t  return build_binary_op (EQ_EXPR, e2, integer_zero_node, 1);\n+\t  return build_binary_op (EQ_EXPR, e2, integer_zero_node);\n \t}\n       else if (TYPE_PTRMEMFUNC_P (type1)\n \t       && TYPE_PTRMEMFUNC_FN_TYPE (type1) == type0)\n-\t{\n-\t  return build_binary_op (code, op1, op0, 1);\n-\t}\n+\treturn build_binary_op (code, op1, op0);\n       break;\n \n     case MAX_EXPR:\n@@ -4165,7 +4160,7 @@ pointer_int_sum (resultcode, ptrop, intop)\n       enum tree_code subcode = resultcode;\n       if (TREE_CODE (intop) == MINUS_EXPR)\n \tsubcode = (subcode == PLUS_EXPR ? MINUS_EXPR : PLUS_EXPR);\n-      ptrop = build_binary_op (subcode, ptrop, TREE_OPERAND (intop, 1), 1);\n+      ptrop = build_binary_op (subcode, ptrop, TREE_OPERAND (intop, 1));\n       intop = TREE_OPERAND (intop, 0);\n     }\n \n@@ -4182,8 +4177,7 @@ pointer_int_sum (resultcode, ptrop, intop)\n   intop = cp_convert (result_type,\n \t\t      build_binary_op (MULT_EXPR, intop,\n \t\t\t\t       cp_convert (TREE_TYPE (intop),\n-\t\t\t\t\t\t   size_exp),\n-\t\t\t\t       1));\n+\t\t\t\t\t\t   size_exp)));\n \n   /* Create the sum or difference.  */\n \n@@ -4226,7 +4220,7 @@ pointer_diff (op0, op1, ptrtype)\n      then drop through to build the divide operator.  */\n \n   op0 = build_binary_op (MINUS_EXPR, cp_convert (restype, op0),\n-\t\t\t cp_convert (restype, op1), 1);\n+\t\t\t cp_convert (restype, op1));\n \n   /* This generates an error if op1 is a pointer to an incomplete type.  */\n   if (TYPE_SIZE (TREE_TYPE (TREE_TYPE (op1))) == 0)\n@@ -4669,7 +4663,7 @@ build_unary_op (code, xarg, noconvert)\n \t  if (mark_addressable (TREE_OPERAND (arg, 0)) == 0)\n \t    return error_mark_node;\n \t  return build_binary_op (PLUS_EXPR, TREE_OPERAND (arg, 0),\n-\t\t\t\t  TREE_OPERAND (arg, 1), 1);\n+\t\t\t\t  TREE_OPERAND (arg, 1));\n \t}\n \n       /* Uninstantiated types are all functions.  Taking the\n@@ -6025,7 +6019,7 @@ build_modify_expr (lhs, modifycode, rhs)\n   else\n     {\n       lhs = stabilize_reference (lhs);\n-      newrhs = build_binary_op (modifycode, lhs, rhs, 1);\n+      newrhs = build_binary_op (modifycode, lhs, rhs);\n       if (newrhs == error_mark_node)\n \t{\n \t  cp_error (\"  in evaluation of `%Q(%#T, %#T)'\", modifycode,\n@@ -6387,7 +6381,7 @@ get_delta_difference (from, to, force)\n       \n       return build_binary_op (MINUS_EXPR,\n \t\t\t      integer_zero_node,\n-\t\t\t      delta, 1);\n+\t\t\t      delta);\n     }\n \n   if (TREE_VIA_VIRTUAL (binfo))\n@@ -6525,8 +6519,8 @@ build_ptrmemfunc (type, pfn, force)\n \t\t\t\tTYPE_METHOD_BASETYPE (TREE_TYPE (type)),\n \t\t\t\tforce);\n \n-      delta = build_binary_op (PLUS_EXPR, ndelta, n, 1);\n-      delta2 = build_binary_op (PLUS_EXPR, ndelta2, n, 1);\n+      delta = build_binary_op (PLUS_EXPR, ndelta, n);\n+      delta2 = build_binary_op (PLUS_EXPR, ndelta2, n);\n       e1 = fold (build (GT_EXPR, boolean_type_node, idx, integer_zero_node));\n \t  \n       e2 = build_ptrmemfunc1 (TYPE_GET_PTRMEMFUNC_TYPE (type), delta, idx,\n@@ -6605,8 +6599,7 @@ expand_ptrmemfunc_cst (cst, delta, idx, pfn, delta2)\n       *delta2 = size_binop (PLUS_EXPR, *delta2,\n \t\t\t   build_binary_op (PLUS_EXPR,\n \t\t\t\t\t    *delta, \n-\t\t\t\t\t    integer_zero_node,\n-\t\t\t\t\t    1));\n+\t\t\t\t\t    integer_zero_node));\n     }\n }\n "}]}