{"sha": "68dc87c3600fe0b6b629b45e5efc058c32b7bccc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkYzg3YzM2MDBmZTBiNmI2MjliNDVlNWVmYzA1OGMzMmI3YmNjYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-01-10T23:14:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-01-10T23:14:49Z"}, "message": "c-ada-spec.c (dump_number): Add FLOAT_P parameter.\n\n\t* c-ada-spec.c (dump_number): Add FLOAT_P parameter.\n\tSkip 'f' and 'F' characters if it is true.\n\t(store_ada_macro): Minor tweak.\n\t(dump_ada_macros) <CPP_COMMENT>: Likewise.\n\t<CPP_WSTRING>: Likewise.\n\t<CPP_STRING>: Output '&' in the buffer if not the first string.\n\t<CPP_NUMBER>: Adjust calls to dump_number.\n\nFrom-SVN: r256463", "tree": {"sha": "03daab767b941cb7e519f462abf28e90a617ce76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03daab767b941cb7e519f462abf28e90a617ce76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68dc87c3600fe0b6b629b45e5efc058c32b7bccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68dc87c3600fe0b6b629b45e5efc058c32b7bccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68dc87c3600fe0b6b629b45e5efc058c32b7bccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68dc87c3600fe0b6b629b45e5efc058c32b7bccc/comments", "author": null, "committer": null, "parents": [{"sha": "8cad5b143e23668e4b59596972b2249ce2d2d637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cad5b143e23668e4b59596972b2249ce2d2d637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cad5b143e23668e4b59596972b2249ce2d2d637"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "1e490afe3318845e4e457e949888a181f30efea5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68dc87c3600fe0b6b629b45e5efc058c32b7bccc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68dc87c3600fe0b6b629b45e5efc058c32b7bccc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=68dc87c3600fe0b6b629b45e5efc058c32b7bccc", "patch": "@@ -1,3 +1,13 @@\n+2018-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_number): Add FLOAT_P parameter.\n+\tSkip 'f' and 'F' characters if it is true.\n+\t(store_ada_macro): Minor tweak.\n+\t(dump_ada_macros) <CPP_COMMENT>: Likewise.\n+\t<CPP_WSTRING>: Likewise.\n+\t<CPP_STRING>: Output '&' in the buffer if not the first string.\n+\t<CPP_NUMBER>: Adjust calls to dump_number.\n+\n 2018-01-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/43486"}, {"sha": "914ded9efc9a89f447f0010bb0b71e979ff52af1", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68dc87c3600fe0b6b629b45e5efc058c32b7bccc/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68dc87c3600fe0b6b629b45e5efc058c32b7bccc/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=68dc87c3600fe0b6b629b45e5efc058c32b7bccc", "patch": "@@ -113,14 +113,15 @@ macro_length (const cpp_macro *macro, int *supported, int *buffer_len,\n }\n \n /* Dump all digits/hex chars from NUMBER to BUFFER and return a pointer\n-   to the character after the last character written.  */\n+   to the character after the last character written.  If FLOAT_P is true,\n+   this is a floating-point number.  */\n \n static unsigned char *\n-dump_number (unsigned char *number, unsigned char *buffer)\n+dump_number (unsigned char *number, unsigned char *buffer, bool float_p)\n {\n   while (*number != '\\0'\n-\t && *number != 'U'\n-\t && *number != 'u'\n+\t && *number != (float_p ? 'F' : 'U')\n+\t && *number != (float_p ? 'f' : 'u')\n \t && *number != 'l'\n \t && *number != 'L')\n     *buffer++ = *number++;\n@@ -192,7 +193,8 @@ store_ada_macro (cpp_reader *pfile ATTRIBUTE_UNUSED,\n {\n   const cpp_macro *macro = node->value.macro;\n \n-  if (node->type == NT_MACRO && !(node->flags & NODE_BUILTIN)\n+  if (node->type == NT_MACRO\n+      && !(node->flags & NODE_BUILTIN)\n       && macro->count\n       && *NODE_NAME (node) != '_'\n       && LOCATION_FILE (macro->line) == macro_source_file)\n@@ -345,7 +347,8 @@ dump_ada_macros (pretty_printer *pp, const char* file)\n \t\t    is_one = prev_is_one;\n \t\t    break;\n \n-\t\t  case CPP_COMMENT: break;\n+\t\t  case CPP_COMMENT:\n+\t\t    break;\n \n \t\t  case CPP_WSTRING:\n \t\t  case CPP_STRING16:\n@@ -359,11 +362,18 @@ dump_ada_macros (pretty_printer *pp, const char* file)\n \t\t    if (!macro->fun_like)\n \t\t      supported = 0;\n \t\t    else\n-\t\t      buffer = cpp_spell_token (parse_in, token, buffer, false);\n+\t\t      buffer\n+\t\t\t= cpp_spell_token (parse_in, token, buffer, false);\n \t\t    break;\n \n \t\t  case CPP_STRING:\n-\t\t    is_string = 1;\n+\t\t    if (is_string)\n+\t\t      {\n+\t\t\t*buffer++ = '&';\n+\t\t\t*buffer++ = ' ';\n+\t\t      }\n+\t\t    else\n+\t\t      is_string = 1;\n \t\t    {\n \t\t      const unsigned char *s = token->val.str.text;\n \n@@ -428,47 +438,52 @@ dump_ada_macros (pretty_printer *pp, const char* file)\n \t\t\t\t*buffer++ = '1';\n \t\t\t\t*buffer++ = '6';\n \t\t\t\t*buffer++ = '#';\n-\t\t\t\tbuffer = dump_number (tmp + 2, buffer);\n+\t\t\t\tbuffer = dump_number (tmp + 2, buffer, false);\n \t\t\t\t*buffer++ = '#';\n \t\t\t\tbreak;\n \n \t\t\t      case 'b':\n \t\t\t      case 'B':\n \t\t\t\t*buffer++ = '2';\n \t\t\t\t*buffer++ = '#';\n-\t\t\t\tbuffer = dump_number (tmp + 2, buffer);\n+\t\t\t\tbuffer = dump_number (tmp + 2, buffer, false);\n \t\t\t\t*buffer++ = '#';\n \t\t\t\tbreak;\n \n \t\t\t      default:\n-\t\t\t\t/* Dump floating constants unmodified.  */\n+\t\t\t\t/* Dump floating-point constant unmodified.  */\n \t\t\t\tif (strchr ((const char *)tmp, '.'))\n-\t\t\t\t  buffer = dump_number (tmp, buffer);\n+\t\t\t\t  buffer = dump_number (tmp, buffer, true);\n \t\t\t\telse\n \t\t\t\t  {\n \t\t\t\t    *buffer++ = '8';\n \t\t\t\t    *buffer++ = '#';\n-\t\t\t\t    buffer = dump_number (tmp + 1, buffer);\n+\t\t\t\t    buffer\n+\t\t\t\t      = dump_number (tmp + 1, buffer, false);\n \t\t\t\t    *buffer++ = '#';\n \t\t\t\t  }\n \t\t\t\tbreak;\n \t\t\t    }\n \t\t\t  break;\n \n \t\t\tcase '1':\n-\t\t\t  if (tmp[1] == '\\0' || tmp[1] == 'l' || tmp[1] == 'u'\n-\t\t\t      || tmp[1] == 'L' || tmp[1] == 'U')\n+\t\t\t  if (tmp[1] == '\\0'\n+\t\t\t      || tmp[1] == 'u'\n+\t\t\t      || tmp[1] == 'U'\n+\t\t\t      || tmp[1] == 'l'\n+\t\t\t      || tmp[1] == 'L')\n \t\t\t    {\n \t\t\t      is_one = 1;\n \t\t\t      char_one = buffer;\n \t\t\t      *buffer++ = '1';\n+\t\t\t      break;\n \t\t\t    }\n-\t\t\t  else\n-\t\t\t    buffer = dump_number (tmp, buffer);\n-\t\t\t  break;\n+\t\t\t  /* fallthrough */\n \n \t\t\tdefault:\n-\t\t\t  buffer = dump_number (tmp, buffer);\n+\t\t\t  buffer\n+\t\t\t    = dump_number (tmp, buffer,\n+\t\t\t\t\t   strchr ((const char *)tmp, '.'));\n \t\t\t  break;\n \t\t      }\n \t\t    break;"}]}