{"sha": "7481021364e75ba583972e15ed421a53988368ea", "node_id": "C_kwDOANBUbNoAKDc0ODEwMjEzNjRlNzViYTU4Mzk3MmUxNWVkNDIxYTUzOTg4MzY4ZWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-12T14:09:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-12T15:05:15Z"}, "message": "libstdc++: Fix move construction of std::tuple with array elements [PR101960]\n\nThe r12-3022 commit only fixed the case where an array is the last\nelement of the tuple. This fixes the other cases too. We can just define\nthe move constructor as defaulted, which does the right thing. Changing\nthe move constructor to be trivial would be an ABI break, but since the\nlast base class still has a non-trivial move constructor, defining the\nderived ones as defaulted doesn't change anything.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101960\n\t* include/std/tuple (_Tuple_impl(_Tuple_impl&&)): Define as\n\tdefauled.\n\t* testsuite/20_util/tuple/cons/101960.cc: Check tuples with\n\tarray elements before the last element.", "tree": {"sha": "153fe85eed952f390dc504d9e5982e48f25da0bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/153fe85eed952f390dc504d9e5982e48f25da0bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7481021364e75ba583972e15ed421a53988368ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7481021364e75ba583972e15ed421a53988368ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7481021364e75ba583972e15ed421a53988368ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7481021364e75ba583972e15ed421a53988368ea/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9dfd7ad3e0196f60a3fc6df6d65a40fb905409f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9dfd7ad3e0196f60a3fc6df6d65a40fb905409f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9dfd7ad3e0196f60a3fc6df6d65a40fb905409f"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "aaee0b8826a96fcceff4c95d56cd4a184fdffe52", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7481021364e75ba583972e15ed421a53988368ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7481021364e75ba583972e15ed421a53988368ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=7481021364e75ba583972e15ed421a53988368ea", "patch": "@@ -298,13 +298,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // 2729. Missing SFINAE on std::pair::operator=\n       _Tuple_impl& operator=(const _Tuple_impl&) = delete;\n \n-      constexpr\n-      _Tuple_impl(_Tuple_impl&& __in)\n-      noexcept(__and_<is_nothrow_move_constructible<_Head>,\n-\t\t      is_nothrow_move_constructible<_Inherited>>::value)\n-      : _Inherited(std::move(_M_tail(__in))),\n-\t_Base(std::forward<_Head>(_M_head(__in)))\n-      { }\n+      _Tuple_impl(_Tuple_impl&&) = default;\n \n       template<typename... _UElements>\n \tconstexpr"}, {"sha": "42d17b182ed576cb6ea1f98a75ab0331e2593527", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/101960.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7481021364e75ba583972e15ed421a53988368ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F101960.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7481021364e75ba583972e15ed421a53988368ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F101960.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F101960.cc?ref=7481021364e75ba583972e15ed421a53988368ea", "patch": "@@ -1,4 +1,13 @@\n // { dg-do compile { target c++11 } }\n #include <tuple>\n+\n+// PR libstdc++/101960\n+\n std::tuple<int[1]> t;\n-auto tt = std::move(t); // PR libstdc++/101960\n+auto tt = std::move(t);\n+\n+std::tuple<int[1], int> t2;\n+auto tt2 = std::move(t2);\n+\n+std::tuple<int[1], int[2], int[3]> t3;\n+auto tt3 = std::move(t3);"}]}