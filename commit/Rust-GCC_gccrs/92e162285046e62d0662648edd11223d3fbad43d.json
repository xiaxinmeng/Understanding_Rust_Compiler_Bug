{"sha": "92e162285046e62d0662648edd11223d3fbad43d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlMTYyMjg1MDQ2ZTYyZDA2NjI2NDhlZGQxMTIyM2QzZmJhZDQzZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-01-20T15:49:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-01-20T15:49:39Z"}, "message": "re PR libstdc++/56267 (unordered containers require Assignable hash function)\n\n\tPR libstdc++/56267\n\t* include/bits/hashtable_policy.h (_Hash_code_base<... false>): Grant\n\tfriendship to _Local_iterator_base<..., false>.\n\t(_Local_iterator_base): Give protected access to all existing members.\n\t(_Local_iterator_base::_M_curr()): New public accessor.\n\t(_Local_iterator_base::_M_get_bucket()): New public accessor.\n\t(_Local_iterator_base<..., false>::_M_init()): New function to manage\n\tthe lifetime of the _Hash_code_base explicitly.\n\t(_Local_iterator_base<..., false>::_M_destroy()): Likewise.\n\t(_Local_iterator_base<..., false>): Define copy constructor and copy\n\tassignment operator that use new functions to manage _Hash_code_base.\n\t(operator==(const _Local_iterator_base&, const _Local_iterator_base&),\n\toperator==(const _Local_iterator_base&, const _Local_iterator_base&)):\n\tUse public API for _Local_iterator_base.\n\t* include/debug/safe_local_iterator.h (_Safe_local_iterator): Likewise.\n\t* include/debug/unordered_map (__debug::unordered_map::erase(),\n\t__debug::unordered_multimap::erase()): Likewise.\n\t* include/debug/unordered_set (__debug::unordered_set::erase(),\n\t__debug::unordered_multiset::erase()): Likewise.\n\t* testsuite/23_containers/unordered_set/56267-2.cc: New test.\n\nFrom-SVN: r206834", "tree": {"sha": "fc11c1e5cd8a03a58439ed2e28082fd5ee493633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc11c1e5cd8a03a58439ed2e28082fd5ee493633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e162285046e62d0662648edd11223d3fbad43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e162285046e62d0662648edd11223d3fbad43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e162285046e62d0662648edd11223d3fbad43d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e162285046e62d0662648edd11223d3fbad43d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d"}], "stats": {"total": 206, "additions": 180, "deletions": 26}, "files": [{"sha": "32f3f36a91b837a177ec224a3ced14350ffef6da", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92e162285046e62d0662648edd11223d3fbad43d", "patch": "@@ -1,3 +1,26 @@\n+2014-01-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/56267\n+\t* include/bits/hashtable_policy.h (_Hash_code_base<... false>): Grant\n+\tfriendship to _Local_iterator_base<..., false>.\n+\t(_Local_iterator_base): Give protected access to all existing members.\n+\t(_Local_iterator_base::_M_curr()): New public accessor.\n+\t(_Local_iterator_base::_M_get_bucket()): New public accessor.\n+\t(_Local_iterator_base<..., false>::_M_init()): New function to manage\n+\tthe lifetime of the _Hash_code_base explicitly.\n+\t(_Local_iterator_base<..., false>::_M_destroy()): Likewise.\n+\t(_Local_iterator_base<..., false>): Define copy constructor and copy\n+\tassignment operator that use new functions to manage _Hash_code_base.\n+\t(operator==(const _Local_iterator_base&, const _Local_iterator_base&),\n+\toperator==(const _Local_iterator_base&, const _Local_iterator_base&)):\n+\tUse public API for _Local_iterator_base.\n+\t* include/debug/safe_local_iterator.h (_Safe_local_iterator): Likewise.\n+\t* include/debug/unordered_map (__debug::unordered_map::erase(),\n+\t__debug::unordered_multimap::erase()): Likewise.\n+\t* include/debug/unordered_set (__debug::unordered_set::erase(),\n+\t__debug::unordered_multiset::erase()): Likewise.\n+\t* testsuite/23_containers/unordered_set/56267-2.cc: New test.\n+\n 2014-01-19  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex_compiler.h (_Comipler<>::_M_quantifier()):"}, {"sha": "ef15b0e5a77807b1ad253faa5603f766a90c9929", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 101, "deletions": 13, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=92e162285046e62d0662648edd11223d3fbad43d", "patch": "@@ -1147,6 +1147,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;\n       using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;\n \n+      // Gives the local iterator implementation access to _M_bucket_index().\n+      friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2,\n+\t\t\t\t\t _Default_ranged_hash, false>;\n+\n     public:\n       typedef _H1 \t\t\t\t\thasher;\n \n@@ -1228,7 +1232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       private _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n-      // Gives access to _M_h2() to the local iterator implementation.\n+      // Gives the local iterator implementation access to _M_h2().\n       friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t\t\t _Default_ranged_hash, true>;\n \n@@ -1334,7 +1338,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n \n-  /// Specialization.\n+  /// Partial specialization used when nodes contain a cached hash code.\n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n@@ -1346,7 +1350,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t       _H1, _H2, _Hash, true>;\n \n-    public:\n       _Local_iterator_base() = default;\n       _Local_iterator_base(const __hash_code_base& __base,\n \t\t\t   _Hash_node<_Value, true>* __p,\n@@ -1371,35 +1374,106 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Hash_node<_Value, true>*  _M_cur;\n       std::size_t _M_bucket;\n       std::size_t _M_bucket_count;\n+\n+    public:\n+      const void*\n+      _M_curr() const { return _M_cur; }  // for equality ops\n+\n+      std::size_t\n+      _M_get_bucket() const { return _M_bucket; }  // for debug mode\n+    };\n+\n+  // Uninitialized storage for a _Hash_code_base.\n+  // This type is DefaultConstructible and Assignable even if the\n+  // _Hash_code_base type isn't, so that _Local_iterator_base<..., false>\n+  // can be DefaultConstructible and Assignable.\n+  template<typename _Tp, bool _IsEmpty = std::is_empty<_Tp>::value>\n+    struct _Hash_code_storage\n+    {\n+      __gnu_cxx::__aligned_buffer<_Tp> _M_storage;\n+\n+      _Tp*\n+      _M_h() { return _M_storage._M_ptr(); }\n+\n+      const _Tp*\n+      _M_h() const { return _M_storage._M_ptr(); }\n+    };\n+\n+  // Empty partial specialization for empty _Hash_code_base types.\n+  template<typename _Tp>\n+    struct _Hash_code_storage<_Tp, true>\n+    {\n+      static_assert( std::is_empty<_Tp>::value, \"Type must be empty\" );\n+\n+      // As _Tp is an empty type there will be no bytes written/read through\n+      // the cast pointer, so no strict-aliasing violation.\n+      _Tp*\n+      _M_h() { return reinterpret_cast<_Tp*>(this); }\n+\n+      const _Tp*\n+      _M_h() const { return reinterpret_cast<const _Tp*>(this); }\n     };\n \n-  /// Specialization.\n+  template<typename _Key, typename _Value, typename _ExtractKey,\n+\t   typename _H1, typename _H2, typename _Hash>\n+    using __hash_code_for_local_iter\n+      = _Hash_code_storage<_Hash_code_base<_Key, _Value, _ExtractKey,\n+\t\t\t\t\t   _H1, _H2, _Hash, false>>;\n+\n+  // Partial specialization used when hash codes are not cached\n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, false>\n-    : private _Hash_code_base<_Key, _Value, _ExtractKey,\n-\t\t\t      _H1, _H2, _Hash, false>\n+    : __hash_code_for_local_iter<_Key, _Value, _ExtractKey, _H1, _H2, _Hash>\n     {\n     protected:\n       using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t       _H1, _H2, _Hash, false>;\n \n-    public:\n-      _Local_iterator_base() = default;\n+      _Local_iterator_base() : _M_bucket_count(-1) { }\n+\n       _Local_iterator_base(const __hash_code_base& __base,\n \t\t\t   _Hash_node<_Value, false>* __p,\n \t\t\t   std::size_t __bkt, std::size_t __bkt_count)\n-\t: __hash_code_base(__base),\n-\t  _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count) { }\n+      : _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)\n+      { _M_init(__base); }\n+\n+      ~_Local_iterator_base()\n+      {\n+\tif (_M_bucket_count != -1)\n+\t  _M_destroy();\n+      }\n+\n+      _Local_iterator_base(const _Local_iterator_base& __iter)\n+      : _M_cur(__iter._M_cur), _M_bucket(__iter._M_bucket),\n+        _M_bucket_count(__iter._M_bucket_count)\n+      {\n+\tif (_M_bucket_count != -1)\n+\t  _M_init(*__iter._M_h());\n+      }\n+\n+      _Local_iterator_base&\n+      operator=(const _Local_iterator_base& __iter)\n+      {\n+\tif (_M_bucket_count != -1)\n+\t  _M_destroy();\n+\t_M_cur = __iter._M_cur;\n+\t_M_bucket = __iter._M_bucket;\n+\t_M_bucket_count = __iter._M_bucket_count;\n+\tif (_M_bucket_count != -1)\n+\t  _M_init(*__iter._M_h());\n+\treturn *this;\n+      }\n \n       void\n       _M_incr()\n       {\n \t_M_cur = _M_cur->_M_next();\n \tif (_M_cur)\n \t  {\n-\t    std::size_t __bkt = this->_M_bucket_index(_M_cur, _M_bucket_count);\n+\t    std::size_t __bkt = this->_M_h()->_M_bucket_index(_M_cur,\n+\t\t\t\t\t\t\t      _M_bucket_count);\n \t    if (__bkt != _M_bucket)\n \t      _M_cur = nullptr;\n \t  }\n@@ -1408,6 +1482,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Hash_node<_Value, false>*  _M_cur;\n       std::size_t _M_bucket;\n       std::size_t _M_bucket_count;\n+\n+      void\n+      _M_init(const __hash_code_base& __base)\n+      { ::new(this->_M_h()) __hash_code_base(__base); }\n+\n+      void\n+      _M_destroy() { this->_M_h()->~__hash_code_base(); }\n+\n+    public:\n+      const void*\n+      _M_curr() const { return _M_cur; }  // for equality ops and debug mode\n+\n+      std::size_t\n+      _M_get_bucket() const { return _M_bucket; }  // for debug mode\n     };\n \n   template<typename _Key, typename _Value, typename _ExtractKey,\n@@ -1417,7 +1505,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t  _H1, _H2, _Hash, __cache>& __x,\n \t       const _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t  _H1, _H2, _Hash, __cache>& __y)\n-    { return __x._M_cur == __y._M_cur; }\n+    { return __x._M_curr() == __y._M_curr(); }\n \n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash, bool __cache>\n@@ -1426,7 +1514,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t  _H1, _H2, _Hash, __cache>& __x,\n \t       const _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t  _H1, _H2, _Hash, __cache>& __y)\n-    { return __x._M_cur != __y._M_cur; }\n+    { return __x._M_curr() != __y._M_curr(); }\n \n   /// local iterators\n   template<typename _Key, typename _Value, typename _ExtractKey,"}, {"sha": "77552ced0b17e90f6a8e2d327dee3e3304c46b12", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=92e162285046e62d0662648edd11223d3fbad43d", "patch": "@@ -219,7 +219,7 @@ namespace __gnu_debug\n        * @brief Return the bucket\n        */\n       size_type\n-      bucket() const { return _M_current._M_bucket; }\n+      bucket() const { return _M_current._M_get_bucket(); }\n \n       /**\n        * @brief Conversion to underlying non-debug iterator to allow"}, {"sha": "821bf0bfe813a226a1e3e3fe5539fcc6a2bccd0e", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=92e162285046e62d0662648edd11223d3fbad43d", "patch": "@@ -389,7 +389,7 @@ namespace __debug\n \t\t\t    { return __it == __victim; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__victim](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __victim._M_cur; });\n+\t\t\t    { return __it._M_curr() == __victim._M_cur; });\n \t    size_type __bucket_count = this->bucket_count();\n \t    _Base::erase(__victim);\n \t    _M_check_rehashed(__bucket_count);\n@@ -407,7 +407,7 @@ namespace __debug\n \t\t\t{ return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t\t\t[__victim](_Base_const_local_iterator __it)\n-\t\t\t{ return __it._M_cur == __victim._M_cur; });\n+\t\t\t{ return __it._M_curr() == __victim._M_cur; });\n \tsize_type __bucket_count = this->bucket_count();\n \t_Base_iterator __next = _Base::erase(__it.base()); \n \t_M_check_rehashed(__bucket_count);\n@@ -433,7 +433,7 @@ namespace __debug\n \t\t\t    { return __it == __tmp; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__tmp](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __tmp._M_cur; });\n+\t\t\t    { return __it._M_curr() == __tmp._M_cur; });\n \t  }\n \tsize_type __bucket_count = this->bucket_count();\n \t_Base_iterator __next = _Base::erase(__first.base(), __last.base());\n@@ -842,7 +842,7 @@ namespace __debug\n \t\t\t    { return __it == __victim; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__victim](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __victim._M_cur; });\n+\t\t\t    { return __it._M_curr() == __victim._M_cur; });\n \t    _Base::erase(__victim++);\n \t    ++__ret;\n \t  }\n@@ -859,7 +859,7 @@ namespace __debug\n \t\t\t{ return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t\t\t[__victim](_Base_const_local_iterator __it)\n-\t\t\t{ return __it._M_cur == __victim._M_cur; });\n+\t\t\t{ return __it._M_curr() == __victim._M_cur; });\n \tsize_type __bucket_count = this->bucket_count();\n \t_Base_iterator __next = _Base::erase(__it.base());\n \t_M_check_rehashed(__bucket_count);\n@@ -885,7 +885,7 @@ namespace __debug\n \t\t\t    { return __it == __tmp; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__tmp](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __tmp._M_cur; });\n+\t\t\t    { return __it._M_curr() == __tmp._M_cur; });\n \t  }\n \tsize_type __bucket_count = this->bucket_count();\n \t_Base_iterator __next = _Base::erase(__first.base(), __last.base());"}, {"sha": "3bc3fab56107b7b988e8d2d5ce714f0d50bd6d57", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=92e162285046e62d0662648edd11223d3fbad43d", "patch": "@@ -383,7 +383,7 @@ namespace __debug\n \t\t\t    { return __it == __victim; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__victim](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __victim._M_cur; });\n+\t\t\t    { return __it._M_curr() == __victim._M_cur; });\n \t    size_type __bucket_count = this->bucket_count();\n \t    _Base::erase(__victim);\n \t    _M_check_rehashed(__bucket_count);\n@@ -402,7 +402,7 @@ namespace __debug\n \t\t\t{ return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t\t\t[__victim](_Base_const_local_iterator __it)\n-\t\t\t{ return __it._M_cur == __victim._M_cur; });\n+\t\t\t{ return __it._M_curr() == __victim._M_cur; });\n \tsize_type __bucket_count = this->bucket_count();\n \t_Base_iterator __next = _Base::erase(__it.base());\n \t_M_check_rehashed(__bucket_count);\n@@ -429,7 +429,7 @@ namespace __debug\n \t\t\t    { return __it == __tmp; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__tmp](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __tmp._M_cur; });\n+\t\t\t    { return __it._M_curr() == __tmp._M_cur; });\n \t  }\n \tsize_type __bucket_count = this->bucket_count();\n \t_Base_iterator __next = _Base::erase(__first.base(),\n@@ -832,7 +832,7 @@ namespace __debug\n \t\t\t    { return __it == __victim; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__victim](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __victim._M_cur; });\n+\t\t\t    { return __it._M_curr() == __victim._M_cur; });\n \t    _Base::erase(__victim++);\n \t    ++__ret;\n \t  }\n@@ -848,7 +848,7 @@ namespace __debug\n \t\t\t{ return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t\t\t[__victim](_Base_const_local_iterator __it)\n-\t\t\t{ return __it._M_cur == __victim._M_cur; });\n+\t\t\t{ return __it._M_curr() == __victim._M_cur; });\n \treturn iterator(_Base::erase(__it.base()), this);\n       }\n \n@@ -871,7 +871,7 @@ namespace __debug\n \t\t\t    { return __it == __tmp; });\n \t    this->_M_invalidate_local_if(\n \t\t\t    [__tmp](_Base_const_local_iterator __it)\n-\t\t\t    { return __it._M_cur == __tmp._M_cur; });\n+\t\t\t    { return __it._M_curr() == __tmp._M_cur; });\n \t  }\n \treturn iterator(_Base::erase(__first.base(),\n \t\t\t\t     __last.base()), this);"}, {"sha": "cae451a53f726cedd08728ce833d53501fa14dd2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/56267-2.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F56267-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e162285046e62d0662648edd11223d3fbad43d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F56267-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F56267-2.cc?ref=92e162285046e62d0662648edd11223d3fbad43d", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <unordered_set>\n+\n+struct audrey2hash : std::hash<int>\n+{\n+  audrey2hash() { throw \"Seed me, Seymour\"; } // must not use default ctor\n+\n+  audrey2hash(int) { }\n+\n+  audrey2hash&\n+  operator=(const audrey2hash&) { throw \"Don't assign the plants\"; }\n+};\n+\n+void test01()\n+{\n+  typedef std::unordered_set<int, audrey2hash> test_type;\n+  test_type::local_iterator it __attribute__((unused));\n+  test_type c{ {1, 2, 3}, 3u, audrey2hash{1} };\n+  it = c.begin(0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}