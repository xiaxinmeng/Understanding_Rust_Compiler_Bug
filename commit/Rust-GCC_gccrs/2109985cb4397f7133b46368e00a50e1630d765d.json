{"sha": "2109985cb4397f7133b46368e00a50e1630d765d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEwOTk4NWNiNDM5N2Y3MTMzYjQ2MzY4ZTAwYTUwZTE2MzBkNzY1ZA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-09-20T14:20:16Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:21Z"}, "message": "Attempt to consolidate CompoundAssignmentExpr parsing", "tree": {"sha": "876ece54c658be7f6b18b4b414eae69ee53c8d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876ece54c658be7f6b18b4b414eae69ee53c8d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2109985cb4397f7133b46368e00a50e1630d765d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2109985cb4397f7133b46368e00a50e1630d765d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2109985cb4397f7133b46368e00a50e1630d765d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2109985cb4397f7133b46368e00a50e1630d765d/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd68a282ede655b89665744b368f512167ef49db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd68a282ede655b89665744b368f512167ef49db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd68a282ede655b89665744b368f512167ef49db"}], "stats": {"total": 136, "additions": 116, "deletions": 20}, "files": [{"sha": "d60ae86c4398c8abfeea99fc896c70e2cce075c5", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 112, "deletions": 20, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2109985cb4397f7133b46368e00a50e1630d765d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2109985cb4397f7133b46368e00a50e1630d765d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=2109985cb4397f7133b46368e00a50e1630d765d", "patch": "@@ -12023,55 +12023,86 @@ Parser<ManagedTokenSource>::left_denotation (\n     case PLUS_EQ:\n       /* plus-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_plus_assig_expr (tok, std::move (left),\n-\t\t\t\t    std::move (outer_attrs), restrictions);\n+      /*return parse_plus_assig_expr (tok, std::move (left),\n+\t\t\t\t    std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (tok, std::move (left),\n+\t\t\t\t\t     std::move (outer_attrs),\n+\t\t\t\t\t     AST::CompoundAssignmentExpr::ADD,\n+\t\t\t\t\t     restrictions);\n     case MINUS_EQ:\n       /* minus-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_minus_assig_expr (tok, std::move (left),\n-\t\t\t\t     std::move (outer_attrs), restrictions);\n+      /*return parse_minus_assig_expr (tok, std::move (left),\n+\t\t\t\t     std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::SUBTRACT, restrictions);\n     case ASTERISK_EQ:\n       /* multiply-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_mult_assig_expr (tok, std::move (left),\n-\t\t\t\t    std::move (outer_attrs), restrictions);\n+      /*return parse_mult_assig_expr (tok, std::move (left),\n+\t\t\t\t    std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::MULTIPLY, restrictions);\n     case DIV_EQ:\n       /* division-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_div_assig_expr (tok, std::move (left),\n-\t\t\t\t   std::move (outer_attrs), restrictions);\n+      /*return parse_div_assig_expr (tok, std::move (left),\n+\t\t\t\t   std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::DIVIDE, restrictions);\n     case PERCENT_EQ:\n       /* modulo-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_mod_assig_expr (tok, std::move (left),\n-\t\t\t\t   std::move (outer_attrs), restrictions);\n+      /*return parse_mod_assig_expr (tok, std::move (left),\n+\t\t\t\t   std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::MODULUS, restrictions);\n     case AMP_EQ:\n       /* bitwise and-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_and_assig_expr (tok, std::move (left),\n-\t\t\t\t   std::move (outer_attrs), restrictions);\n+      /*return parse_and_assig_expr (tok, std::move (left),\n+\t\t\t\t   std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::BITWISE_AND, restrictions);\n     case PIPE_EQ:\n       /* bitwise or-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_or_assig_expr (tok, std::move (left),\n-\t\t\t\t  std::move (outer_attrs), restrictions);\n+      /*return parse_or_assig_expr (tok, std::move (left),\n+\t\t\t\t  std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::BITWISE_OR, restrictions);\n     case CARET_EQ:\n       /* bitwise xor-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_xor_assig_expr (tok, std::move (left),\n-\t\t\t\t   std::move (outer_attrs), restrictions);\n+      /*return parse_xor_assig_expr (tok, std::move (left),\n+\t\t\t\t   std::move (outer_attrs), restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::BITWISE_XOR, restrictions);\n     case LEFT_SHIFT_EQ:\n       /* left shift-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_left_shift_assig_expr (tok, std::move (left),\n+      /*return parse_left_shift_assig_expr (tok, std::move (left),\n \t\t\t\t\t  std::move (outer_attrs),\n-\t\t\t\t\t  restrictions);\n+\t\t\t\t\t  restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::LEFT_SHIFT, restrictions);\n     case RIGHT_SHIFT_EQ:\n       /* right shift-assignment expression - binary infix (note right-to-left\n        * associativity) */\n-      return parse_right_shift_assig_expr (tok, std::move (left),\n+      /*return parse_right_shift_assig_expr (tok, std::move (left),\n \t\t\t\t\t   std::move (outer_attrs),\n-\t\t\t\t\t   restrictions);\n+\t\t\t\t\t   restrictions);*/\n+      return parse_compound_assignment_expr (\n+\ttok, std::move (left), std::move (outer_attrs),\n+\tAST::CompoundAssignmentExpr::RIGHT_SHIFT, restrictions);\n     case DOT_DOT:\n       /* range exclusive expression - binary infix (no associativity)\n        * either \"range\" or \"range from\" */\n@@ -12718,6 +12749,67 @@ Parser<ManagedTokenSource>::parse_assig_expr (\n     new AST::AssignmentExpr (std::move (left), std::move (right), locus));\n }\n \n+/* Returns the left binding power for the given CompoundAssignmentExpr type.\n+ * TODO make constexpr? Would that even do anything useful? */\n+inline binding_powers\n+get_lbp_for_compound_assignment_expr (\n+  AST::CompoundAssignmentExpr::ExprType expr_type)\n+{\n+  switch (expr_type)\n+    {\n+    case AST::CompoundAssignmentExpr::ADD:\n+      return LBP_PLUS;\n+    case AST::CompoundAssignmentExpr::SUBTRACT:\n+      return LBP_MINUS;\n+    case AST::CompoundAssignmentExpr::MULTIPLY:\n+      return LBP_MUL;\n+    case AST::CompoundAssignmentExpr::DIVIDE:\n+      return LBP_DIV;\n+    case AST::CompoundAssignmentExpr::MODULUS:\n+      return LBP_MOD;\n+    case AST::CompoundAssignmentExpr::BITWISE_AND:\n+      return LBP_AMP;\n+    case AST::CompoundAssignmentExpr::BITWISE_OR:\n+      return LBP_PIPE;\n+    case AST::CompoundAssignmentExpr::BITWISE_XOR:\n+      return LBP_CARET;\n+    case AST::CompoundAssignmentExpr::LEFT_SHIFT:\n+      return LBP_L_SHIFT;\n+    case AST::CompoundAssignmentExpr::RIGHT_SHIFT:\n+      return LBP_R_SHIFT;\n+    default:\n+      // WTF? should not happen, this is an error\n+      rust_error_at (\n+\tLocation (),\n+\t\"could not get LBP for CompoundAssignmentExpr - unknown ExprType!\");\n+      return LBP_PLUS;\n+    }\n+}\n+\n+// Parses a compound assignment expression (with Pratt parsing).\n+template <typename ManagedTokenSource>\n+std::unique_ptr<AST::CompoundAssignmentExpr>\n+Parser<ManagedTokenSource>::parse_compound_assignment_expr (\n+  const_TokenPtr, std::unique_ptr<AST::Expr> left, std::vector<AST::Attribute>,\n+  AST::CompoundAssignmentExpr::ExprType expr_type,\n+  ParseRestrictions restrictions)\n+{\n+  // parse RHS (as tok has already been consumed in parse_expression)\n+  std::unique_ptr<AST::Expr> right\n+    = parse_expr (get_lbp_for_compound_assignment_expr (expr_type) - 1,\n+\t\t  std::vector<AST::Attribute> (), restrictions);\n+  if (right == nullptr)\n+    return nullptr;\n+  // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n+\n+  // TODO: check types. actually, do so during semantic analysis\n+  Location locus = left->get_locus_slow ();\n+\n+  return std::unique_ptr<AST::CompoundAssignmentExpr> (\n+    new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n+\t\t\t\t     expr_type, locus));\n+}\n+\n // Parses a binary add-assignment expression (with Pratt parsing).\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::CompoundAssignmentExpr>"}, {"sha": "382bba6ea83c601add2b523c73f7d73add82dd3e", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2109985cb4397f7133b46368e00a50e1630d765d/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2109985cb4397f7133b46368e00a50e1630d765d/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=2109985cb4397f7133b46368e00a50e1630d765d", "patch": "@@ -333,6 +333,10 @@ template <typename ManagedTokenSource> class Parser\n \t\t    std::vector<AST::Attribute> outer_attrs,\n \t\t    ParseRestrictions restrictions = ParseRestrictions ());\n   std::unique_ptr<AST::CompoundAssignmentExpr>\n+  parse_compound_assignment_expr (const_TokenPtr tok, std::unique_ptr<AST::Expr> left,\n+\t\t\t std::vector<AST::Attribute> outer_attrs, AST::CompoundAssignmentExpr::ExprType expr_type,\n+\t\t\t ParseRestrictions restrictions = ParseRestrictions ());\n+  std::unique_ptr<AST::CompoundAssignmentExpr>\n   parse_plus_assig_expr (const_TokenPtr tok, std::unique_ptr<AST::Expr> left,\n \t\t\t std::vector<AST::Attribute> outer_attrs,\n \t\t\t ParseRestrictions restrictions = ParseRestrictions ());"}]}