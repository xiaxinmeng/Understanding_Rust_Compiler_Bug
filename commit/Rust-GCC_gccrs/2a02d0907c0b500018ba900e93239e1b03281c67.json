{"sha": "2a02d0907c0b500018ba900e93239e1b03281c67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwMmQwOTA3YzBiNTAwMDE4YmE5MDBlOTMyMzllMWIwMzI4MWM2Nw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2011-01-04T09:30:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-01-04T09:30:06Z"}, "message": "trans.c (BLOCK_SOURCE_END_LOCATION): Provide default.\n\n\t* gcc-interface/trans.c (BLOCK_SOURCE_END_LOCATION): Provide default.\n\t(set_end_locus_from_node): New function.\n\t(Subprogram_Body_to_gnu): Use it to mark both the inner BIND_EXPR we\n\tmake and the function end_locus.\n\t(Compilation_Unit_to_gnu): Call it instead of a straight Sloc_to_locus\n\tfor the elaboration subprogram.\n\t(set_gnu_expr_location_from_node) <default case>: Use it to attempt to\n\tset the end_locus of the expression as well.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r168455", "tree": {"sha": "fe02110a5e9b80b984e5374d408f68b56fd163ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe02110a5e9b80b984e5374d408f68b56fd163ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a02d0907c0b500018ba900e93239e1b03281c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a02d0907c0b500018ba900e93239e1b03281c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a02d0907c0b500018ba900e93239e1b03281c67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a02d0907c0b500018ba900e93239e1b03281c67/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89f5e978044c3086e99418ea6855bd1faacba2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f5e978044c3086e99418ea6855bd1faacba2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f5e978044c3086e99418ea6855bd1faacba2a0"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "57d9c58b28f713686eaac4171704e81360a4814b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a02d0907c0b500018ba900e93239e1b03281c67/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a02d0907c0b500018ba900e93239e1b03281c67/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a02d0907c0b500018ba900e93239e1b03281c67", "patch": "@@ -1,3 +1,15 @@\n+2011-01-04  Olivier Hainque  <hainque@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (BLOCK_SOURCE_END_LOCATION): Provide default.\n+\t(set_end_locus_from_node): New function.\n+\t(Subprogram_Body_to_gnu): Use it to mark both the inner BIND_EXPR we\n+\tmake and the function end_locus.\n+\t(Compilation_Unit_to_gnu): Call it instead of a straight Sloc_to_locus\n+\tfor the elaboration subprogram.\n+\t(set_gnu_expr_location_from_node) <default case>: Use it to attempt to\n+\tset the end_locus of the expression as well.\n+\n 2011-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/47131"}, {"sha": "9bf7c3d77b7af06b4b82b648f46a1a2174add94d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a02d0907c0b500018ba900e93239e1b03281c67/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a02d0907c0b500018ba900e93239e1b03281c67/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2a02d0907c0b500018ba900e93239e1b03281c67", "patch": "@@ -64,6 +64,13 @@\n #define TARGET_ABI_OPEN_VMS 0\n #endif\n \n+/* In configurations where blocks have no end_locus attached, just\n+   sink assignments into a dummy global.  */\n+#ifndef BLOCK_SOURCE_END_LOCATION\n+static location_t block_end_locus_sink;\n+#define BLOCK_SOURCE_END_LOCATION(BLOCK) block_end_locus_sink\n+#endif\n+\n /* For efficient float-to-int rounding, it is necessary to know whether\n    floating-point arithmetic may use wider intermediate results.  When\n    FP_ARITH_MAY_WIDEN is not defined, be conservative and only assume\n@@ -205,6 +212,7 @@ static tree extract_values (tree, tree);\n static tree pos_to_constructor (Node_Id, tree, Entity_Id);\n static tree maybe_implicit_deref (tree);\n static void set_expr_location_from_node (tree, Node_Id);\n+static bool set_end_locus_from_node (tree, Node_Id);\n static void set_gnu_expr_location_from_node (tree, Node_Id);\n static int lvalue_required_p (Node_Id, tree, bool, bool, bool);\n static tree build_raise_check (int, tree, enum exception_info_kind);\n@@ -2654,15 +2662,14 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       gnu_result = end_stmt_group ();\n     }\n \n-  /* Set the end location.  */\n-  Sloc_to_locus\n-    ((Present (End_Label (Handled_Statement_Sequence (gnat_node)))\n-      ? Sloc (End_Label (Handled_Statement_Sequence (gnat_node)))\n-      : Sloc (gnat_node)),\n-     &DECL_STRUCT_FUNCTION (gnu_subprog_decl)->function_end_locus);\n-\n   end_subprog_body (gnu_result);\n \n+  /* Attempt setting the end_locus of our GCC body tree, typically a\n+     BIND_EXPR or STATEMENT_LIST, then the end_locus of our GCC subprogram\n+     declaration tree.  */\n+  set_end_locus_from_node (gnu_result, gnat_node);\n+  set_end_locus_from_node (gnu_subprog_decl, gnat_node);\n+\n   /* Finally annotate the parameters and disconnect the trees for parameters\n      that we have turned into variables since they are now unusable.  */\n   for (gnat_param = First_Formal_With_Extras (gnat_subprog_id);\n@@ -3797,9 +3804,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   gnat_poplevel ();\n   DECL_SAVED_TREE (gnu_elab_proc_decl) = end_stmt_group ();\n \n-  Sloc_to_locus\n-    (Sloc (gnat_unit),\n-     &DECL_STRUCT_FUNCTION (gnu_elab_proc_decl)->function_end_locus);\n+  set_end_locus_from_node (gnu_elab_proc_decl, gnat_unit);\n \n   info->next = elab_info_list;\n   info->elab_proc = gnu_elab_proc_decl;\n@@ -7741,7 +7746,10 @@ set_gnu_expr_location_from_node (tree node, Node_Id gnat_node)\n \n     default:\n       if (!REFERENCE_CLASS_P (node) && !EXPR_HAS_LOCATION (node))\n-\tset_expr_location_from_node (node, gnat_node);\n+\t{\n+\t  set_expr_location_from_node (node, gnat_node);\n+\t  set_end_locus_from_node (node, gnat_node);\n+\t}\n       break;\n     }\n }\n@@ -7806,6 +7814,61 @@ post_error_ne_num (const char *msg, Node_Id node, Entity_Id ent, int num)\n   Error_Msg_Uint_1 = UI_From_Int (num);\n   post_error_ne (msg, node, ent);\n }\n+\n+/* Set the end_locus information for GNU_NODE, if any, from an explicit end\n+   location associated with GNAT_NODE or GNAT_NODE itself, whichever makes\n+   most sense.  Return true if a sensible assignment was performed.  */\n+\n+static bool\n+set_end_locus_from_node (tree gnu_node, Node_Id gnat_node)\n+{\n+  Node_Id gnat_end_label = Empty;\n+  location_t end_locus;\n+\n+  /* Pick the GNAT node of which we'll take the sloc to assign to the GCC node\n+     end_locus when there is one.  We consider only GNAT nodes with a possible\n+     End_Label attached.  If the End_Label actually was unassigned, fallback\n+     on the orginal node.  We'd better assign an explicit sloc associated with\n+     the outer construct in any case.  */\n+\n+  switch (Nkind (gnat_node))\n+    {\n+    case N_Package_Body:\n+    case N_Subprogram_Body:\n+    case N_Block_Statement:\n+      gnat_end_label = End_Label (Handled_Statement_Sequence (gnat_node));\n+      break;\n+\n+    case N_Package_Declaration:\n+      gnat_end_label = End_Label (Specification (gnat_node));\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+\n+  gnat_node = Present (gnat_end_label) ? gnat_end_label : gnat_node;\n+\n+  /* Some expanded subprograms have neither an End_Label nor a Sloc\n+     attached.  Notify that to callers.  */\n+\n+  if (!Sloc_to_locus (Sloc (gnat_node), &end_locus))\n+    return false;\n+\n+  switch (TREE_CODE (gnu_node))\n+    {\n+    case BIND_EXPR:\n+      BLOCK_SOURCE_END_LOCATION (BIND_EXPR_BLOCK (gnu_node)) = end_locus;\n+      return true;\n+\n+    case FUNCTION_DECL:\n+      DECL_STRUCT_FUNCTION (gnu_node)->function_end_locus = end_locus;\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n \f\n /* Similar to post_error_ne, but T is a GCC tree representing the number to\n    write.  If T represents a constant, the text inside curly brackets in"}]}