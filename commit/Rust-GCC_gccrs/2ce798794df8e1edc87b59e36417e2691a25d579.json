{"sha": "2ce798794df8e1edc87b59e36417e2691a25d579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlNzk4Nzk0ZGY4ZTFlZGM4N2I1OWUzNjQxN2UyNjkxYTI1ZDU3OQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-05-01T20:52:21Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-05-01T20:52:21Z"}, "message": "tree-into-ssa.c (phis_to_rewrite, [...]): New variables.\n\n\t* tree-into-ssa.c (phis_to_rewrite, blocks_with_phis_to_rewrite): New\n\tvariables.\n\t(mark_phi_for_rewrite): New function.\n\t(insert_phi_nodes_for, mark_use_interesting): Call\n\tmark_phi_for_rewrite.\n\t(rewrite_update_phi_arguments): Traverse only phis in phis_to_rewrite.\n\t(update_ssa): Initialize and free phis_to_rewrite.\n\nFrom-SVN: r113431", "tree": {"sha": "e316f4f280dbfe842a97f5a881dde85219628b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e316f4f280dbfe842a97f5a881dde85219628b95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce798794df8e1edc87b59e36417e2691a25d579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce798794df8e1edc87b59e36417e2691a25d579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce798794df8e1edc87b59e36417e2691a25d579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce798794df8e1edc87b59e36417e2691a25d579/comments", "author": null, "committer": null, "parents": [{"sha": "ed541ddb26f84f183c62bfa726c08eab458d5249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed541ddb26f84f183c62bfa726c08eab458d5249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed541ddb26f84f183c62bfa726c08eab458d5249"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "c91f26294a47943ddfe3632e40d3159c4aa2aaad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce798794df8e1edc87b59e36417e2691a25d579/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce798794df8e1edc87b59e36417e2691a25d579/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ce798794df8e1edc87b59e36417e2691a25d579", "patch": "@@ -1,3 +1,13 @@\n+2006-05-01  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-into-ssa.c (phis_to_rewrite, blocks_with_phis_to_rewrite): New\n+\tvariables.\n+\t(mark_phi_for_rewrite): New function.\n+\t(insert_phi_nodes_for, mark_use_interesting): Call\n+\tmark_phi_for_rewrite.\n+\t(rewrite_update_phi_arguments): Traverse only phis in phis_to_rewrite.\n+\t(update_ssa): Initialize and free phis_to_rewrite.\n+\n 2006-05-01  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR rtl-optimization/27291"}, {"sha": "3e8cebfbf4b3bb118bf18d9709d9dcb1e73f9f42", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce798794df8e1edc87b59e36417e2691a25d579/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce798794df8e1edc87b59e36417e2691a25d579/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=2ce798794df8e1edc87b59e36417e2691a25d579", "patch": "@@ -121,6 +121,19 @@ static bitmap syms_to_rename;\n    released after we finish updating the SSA web.  */\n static bitmap names_to_release;\n \n+/* For each block, the phi nodes that need to be rewritten are stored into\n+   these vectors.  */\n+\n+typedef VEC(tree, heap) *tree_vec;\n+DEF_VEC_P (tree_vec);\n+DEF_VEC_ALLOC_P (tree_vec, heap);\n+\n+static VEC(tree_vec, heap) *phis_to_rewrite;\n+\n+/* The bitmap of non-NULL elements of PHIS_TO_REWRITE.  */\n+\n+static bitmap blocks_with_phis_to_rewrite;\n+\n /* Growth factor for NEW_SSA_NAMES and OLD_SSA_NAMES.  These sets need\n    to grow as the callers to register_new_name_mapping will typically\n    create new names on the fly.  FIXME.  Currently set to 1/3 to avoid\n@@ -773,6 +786,34 @@ get_default_def_for (tree sym)\n }\n \n \n+/* Marks phi node PHI in basic block BB for rewrite.  */\n+\n+static void\n+mark_phi_for_rewrite (basic_block bb, tree phi)\n+{\n+  tree_vec phis;\n+  unsigned i, idx = bb->index;\n+\n+  if (REWRITE_THIS_STMT (phi))\n+    return;\n+  REWRITE_THIS_STMT (phi) = 1;\n+\n+  if (!blocks_with_phis_to_rewrite)\n+    return;\n+\n+  bitmap_set_bit (blocks_with_phis_to_rewrite, idx);\n+  VEC_reserve (tree_vec, heap, phis_to_rewrite, last_basic_block + 1);\n+  for (i = VEC_length (tree_vec, phis_to_rewrite); i <= idx; i++)\n+    VEC_quick_push (tree_vec, phis_to_rewrite, NULL);\n+\n+  phis = VEC_index (tree_vec, phis_to_rewrite, idx);\n+  if (!phis)\n+    phis = VEC_alloc (tree, heap, 10);\n+\n+  VEC_safe_push (tree, heap, phis, phi);\n+  VEC_replace (tree_vec, phis_to_rewrite, idx, phis);\n+}\n+\n /* Insert PHI nodes for variable VAR using the iterated dominance\n    frontier given in PHI_INSERTION_POINTS.  If UPDATE_P is true, this\n    function assumes that the caller is incrementally updating the SSA\n@@ -841,7 +882,7 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n \n       /* Mark this PHI node as interesting for update_ssa.  */\n       REGISTER_DEFS_IN_THIS_STMT (phi) = 1;\n-      REWRITE_THIS_STMT (phi) = 1;\n+      mark_phi_for_rewrite (bb, phi);\n     }\n }\n \n@@ -1504,19 +1545,23 @@ rewrite_update_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n {\n   edge e;\n   edge_iterator ei;\n+  unsigned i;\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {\n       tree phi;\n+      tree_vec phis;\n \n-      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n+      if (!bitmap_bit_p (blocks_with_phis_to_rewrite, e->dest->index))\n+\tcontinue;\n+     \n+      phis = VEC_index (tree_vec, phis_to_rewrite, e->dest->index);\n+      for (i = 0; VEC_iterate (tree, phis, i, phi); i++)\n \t{\n \t  tree arg;\n \t  use_operand_p arg_p;\n \n-\t  /* Skip PHI nodes that are not marked for rewrite.  */\n-\t  if (!REWRITE_THIS_STMT (phi))\n-\t    continue;\n+  \t  gcc_assert (REWRITE_THIS_STMT (phi));\n \n \t  arg_p = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n \t  arg = USE_FROM_PTR (arg_p);\n@@ -1833,7 +1878,12 @@ static inline void\n mark_use_interesting (tree var, tree stmt, basic_block bb, bitmap blocks,\n \t\t      bool insert_phi_p)\n {\n-  REWRITE_THIS_STMT (stmt) = 1;\n+  basic_block def_bb = bb_for_stmt (stmt);\n+\n+  if (TREE_CODE (stmt) == PHI_NODE)\n+    mark_phi_for_rewrite (def_bb, stmt);\n+  else\n+    REWRITE_THIS_STMT (stmt) = 1;\n   bitmap_set_bit (blocks, bb->index);\n \n   /* If VAR has not been defined in BB, then it is live-on-entry\n@@ -2627,6 +2677,10 @@ update_ssa (unsigned update_flags)\n \n   timevar_push (TV_TREE_SSA_INCREMENTAL);\n \n+  blocks_with_phis_to_rewrite = BITMAP_ALLOC (NULL);\n+  if (!phis_to_rewrite)\n+    phis_to_rewrite = VEC_alloc (tree_vec, heap, last_basic_block);\n+\n   /* Ensure that the dominance information is up-to-date.  */\n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -2830,6 +2884,14 @@ update_ssa (unsigned update_flags)\n \n   /* Free allocated memory.  */\n done:\n+  EXECUTE_IF_SET_IN_BITMAP (blocks_with_phis_to_rewrite, 0, i, bi)\n+    {\n+      tree_vec phis = VEC_index (tree_vec, phis_to_rewrite, i);\n+\n+      VEC_free (tree, heap, phis);\n+      VEC_replace (tree_vec, phis_to_rewrite, i, NULL);\n+    }\n+  BITMAP_FREE (blocks_with_phis_to_rewrite);\n   BITMAP_FREE (blocks);\n   delete_update_ssa ();\n "}]}