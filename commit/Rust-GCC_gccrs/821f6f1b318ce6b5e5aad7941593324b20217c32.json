{"sha": "821f6f1b318ce6b5e5aad7941593324b20217c32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxZjZmMWIzMThjZTZiNWU1YWFkNzk0MTU5MzMyNGIyMDIxN2MzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-24T15:42:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-24T15:42:06Z"}, "message": "random.h (random_device): Avoid using the FILE type.\n\n2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (random_device): Avoid using the FILE type.\n\t* include/std/random: Do not include <cstdio>.\n\t* src/c++11/random.cc: ... include it here.\n\t(random_device::_M_init, random_device::_M_fini,\n\trandom_device::_M_getval): Cast back and forth void* and FILE*.\n\nFrom-SVN: r201215", "tree": {"sha": "e3393e23fa07c37c8b5a59a402016f4bad3f6f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3393e23fa07c37c8b5a59a402016f4bad3f6f0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821f6f1b318ce6b5e5aad7941593324b20217c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821f6f1b318ce6b5e5aad7941593324b20217c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821f6f1b318ce6b5e5aad7941593324b20217c32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821f6f1b318ce6b5e5aad7941593324b20217c32/comments", "author": null, "committer": null, "parents": [{"sha": "37c74e2816535f654390781de97cc01206b0ff31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c74e2816535f654390781de97cc01206b0ff31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c74e2816535f654390781de97cc01206b0ff31"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "13d80f2d4dddf8d572f716823e7f3daa0df31d46", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=821f6f1b318ce6b5e5aad7941593324b20217c32", "patch": "@@ -1,3 +1,11 @@\n+2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (random_device): Avoid using the FILE type.\n+\t* include/std/random: Do not include <cstdio>.\n+\t* src/c++11/random.cc: ... include it here.\n+\t(random_device::_M_init, random_device::_M_fini,\n+\trandom_device::_M_getval): Cast back and forth void* and FILE*.\n+\n 2013-07-24  Tim Shen  <timshen91@gmail.com>\n \n \tReimplment matcher using Depth-first search(backtracking).\n@@ -24,8 +32,8 @@\n \tNew.\n \t* testsuite/28_regex/iterators/regex_token_iterator/char/string_01.cc:\n \tNew.\n-\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/string_01.cc:\n-\tNew.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n+\tstring_01.cc: New.\n \n 2013-07-23  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "bf7f32ff0f2618f7d8388656ee87645d788994a9", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=821f6f1b318ce6b5e5aad7941593324b20217c32", "patch": "@@ -1638,9 +1638,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     union\n     {\n-    FILE*        _M_file;\n-    mt19937      _M_mt;\n-  };\n+      void*      _M_file;\n+      mt19937    _M_mt;\n+    };\n   };\n \n   /* @} */ // group random_generators"}, {"sha": "84b176154b9b4e0787004525d45c81f577ae04bc", "filename": "libstdc++-v3/include/std/random", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom?ref=821f6f1b318ce6b5e5aad7941593324b20217c32", "patch": "@@ -36,7 +36,6 @@\n #else\n \n #include <cmath>\n-#include <cstdio> // For FILE\n #include <cstdlib>\n #include <string>\n #include <iosfwd>"}, {"sha": "939bf02583cfb0fb5b7bcbc387f773d53a658fbc", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821f6f1b318ce6b5e5aad7941593324b20217c32/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=821f6f1b318ce6b5e5aad7941593324b20217c32", "patch": "@@ -30,13 +30,14 @@\n # include <cpuid.h>\n #endif\n \n+#include <cstdio>\n+\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n # include <unistd.h>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-\n   namespace\n   {\n     static unsigned long\n@@ -72,7 +73,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #endif\n   }\n \n-\n   void\n   random_device::_M_init(const std::string& token)\n   {\n@@ -102,8 +102,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       std::__throw_runtime_error(__N(\"random_device::\"\n \t\t\t\t     \"random_device(const std::string&)\"));\n \n-    _M_file = std::fopen(fname, \"rb\");\n-    if (! _M_file)\n+    _M_file = static_cast<void*>(std::fopen(fname, \"rb\"));\n+    if (!_M_file)\n       goto fail;\n   }\n \n@@ -117,23 +117,24 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   random_device::_M_fini()\n   {\n     if (_M_file)\n-      std::fclose(_M_file);\n+      std::fclose(static_cast<FILE*>(_M_file));\n   }\n \n   random_device::result_type\n   random_device::_M_getval()\n   {\n #if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n-    if (! _M_file)\n+    if (!_M_file)\n       return __x86_rdrand();\n #endif\n \n     result_type __ret;\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n-    read(fileno(_M_file), reinterpret_cast<void*>(&__ret), sizeof(result_type));\n+    read(fileno(static_cast<FILE*>(_M_file)),\n+\t static_cast<void*>(&__ret), sizeof(result_type));\n #else\n-    std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),\n-\t       1, _M_file);\n+    std::fread(static_cast<void*>(&__ret), sizeof(result_type),\n+\t       1, static_cast<FILE*>(_M_file));\n #endif\n     return __ret;\n   }"}]}