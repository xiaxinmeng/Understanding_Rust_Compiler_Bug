{"sha": "9a52433e8a3895cfef67eabcf9d0021b67827026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1MjQzM2U4YTM4OTVjZmVmNjdlYWJjZjlkMDAyMWI2NzgyNzAyNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-15T14:10:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-15T14:10:02Z"}, "message": "h8300.c (print_operand): Remove support for unused operand characters.\n\n\t* confiig/h8300/h8300.c (print_operand): Remove support for\n\tunused operand characters.\n\nFrom-SVN: r48871", "tree": {"sha": "54720d6484cbd296ba7e5e1e430ffa5988abf89d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54720d6484cbd296ba7e5e1e430ffa5988abf89d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a52433e8a3895cfef67eabcf9d0021b67827026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a52433e8a3895cfef67eabcf9d0021b67827026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a52433e8a3895cfef67eabcf9d0021b67827026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a52433e8a3895cfef67eabcf9d0021b67827026/comments", "author": null, "committer": null, "parents": [{"sha": "8e2e89f78ac366d74ac9a0e75afe056073589ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2e89f78ac366d74ac9a0e75afe056073589ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2e89f78ac366d74ac9a0e75afe056073589ef1"}], "stats": {"total": 88, "additions": 5, "deletions": 83}, "files": [{"sha": "70428b15078fde94d47836c97bc6700394586fc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52433e8a3895cfef67eabcf9d0021b67827026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52433e8a3895cfef67eabcf9d0021b67827026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a52433e8a3895cfef67eabcf9d0021b67827026", "patch": "@@ -1,3 +1,8 @@\n+2002-01-15  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* confiig/h8300/h8300.c (print_operand): Remove support for\n+\tunused operand characters.\n+\n 2002-01-15  Kazu Hirata  <kazu@hxi.com>\n \n \t* read-rtl.c: Fix formatting."}, {"sha": "26cc30af2347411cb5cc88b57e6bd7c5b3117fe3", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52433e8a3895cfef67eabcf9d0021b67827026/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52433e8a3895cfef67eabcf9d0021b67827026/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9a52433e8a3895cfef67eabcf9d0021b67827026", "patch": "@@ -938,12 +938,9 @@ const_costs (r, c)\n /* Documentation for the machine specific operand escapes:\n \n    'A' print rn in H8/300 mode, erN in H8/300H mode\n-   'C' print (operand - 2).\n    'E' like s but negative.\n    'F' like t but negative.\n    'G' constant just the negative\n-   'M' turn a 'M' constant into its negative mod 2.\n-   'P' if operand is incing/decing sp, print .w, otherwise .b.\n    'R' print operand as a byte:8 address if appropriate, else fall back to\n        'X' handling.\n    'S' print operand as a long word\n@@ -956,13 +953,10 @@ const_costs (r, c)\n        If this operand isn't a register, fall back to 'R' handling.\n    'Z' print int & 7.\n    'b' print the bit opcode\n-   'c' print the ibit opcode\n-   'd' bcc if EQ, bcs if NE\n    'e' first word of 32 bit value - if reg, then least reg. if mem\n        then least. if const then most sig word\n    'f' second word of 32 bit value - if reg, then biggest reg. if mem\n        then +2. if const then least sig word\n-   'g' bcs if EQ, bcc if NE\n    'j' print operand as condition code.\n    'k' print operand as reverse condition code.\n    's' print as low byte of 16 bit value\n@@ -1029,9 +1023,6 @@ print_operand (file, x, code)\n       else\n \tgoto def;\n       break;\n-    case 'C':\n-      fprintf (file, \"#%d\", INTVAL (x) - 2);\n-      break;\n     case 'E':\n       switch (GET_CODE (x))\n \t{\n@@ -1063,38 +1054,6 @@ print_operand (file, x, code)\n \tabort ();\n       fprintf (file, \"#%d\", 0xff & (-INTVAL (x)));\n       break;\n-    case 'M':\n-      /* For 3/-3 and 4/-4, the other 2 is handled separately.  */\n-      switch (INTVAL (x))\n-\t{\n-\tcase 2:\n-\tcase 4:\n-\tcase -2:\n-\tcase -4:\n-\t  fprintf (file, \"#2\");\n-\t  break;\n-\tcase 1:\n-\tcase 3:\n-\tcase -1:\n-\tcase -3:\n-\t  fprintf (file, \"#1\");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-    case 'P':\n-      if (REGNO (XEXP (XEXP (x, 0), 0)) == STACK_POINTER_REGNUM)\n-\t{\n-\t  last_p = \"\";\n-\t  fprintf (file, \".w\");\n-\t}\n-      else\n-\t{\n-\t  last_p = \"l\";\n-\t  fprintf (file, \".b\");\n-\t}\n-      break;\n     case 'S':\n       if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\", names_extended[REGNO (x)]);\n@@ -1158,35 +1117,6 @@ print_operand (file, x, code)\n \t  break;\n \t}\n       break;\n-    case 'c':\n-      switch (GET_CODE (x))\n-\t{\n-\tcase IOR:\n-\t  fprintf (file, \"bior\");\n-\t  break;\n-\tcase XOR:\n-\t  fprintf (file, \"bixor\");\n-\t  break;\n-\tcase AND:\n-\t  fprintf (file, \"biand\");\n-\t  break;\n-\tdefault:\n-\t  break;\n-\t}\n-      break;\n-    case 'd':\n-      switch (GET_CODE (x))\n-\t{\n-\tcase EQ:\n-\t  fprintf (file, \"bcc\");\n-\t  break;\n-\tcase NE:\n-\t  fprintf (file, \"bcs\");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n     case 'e':\n       switch (GET_CODE (x))\n \t{\n@@ -1245,19 +1175,6 @@ print_operand (file, x, code)\n \t  abort ();\n \t}\n       break;\n-    case 'g':\n-      switch (GET_CODE (x))\n-\t{\n-\tcase NE:\n-\t  fprintf (file, \"bcc\");\n-\t  break;\n-\tcase EQ:\n-\t  fprintf (file, \"bcs\");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n     case 'j':\n       asm_fprintf (file, cond_string (GET_CODE (x)));\n       break;"}]}