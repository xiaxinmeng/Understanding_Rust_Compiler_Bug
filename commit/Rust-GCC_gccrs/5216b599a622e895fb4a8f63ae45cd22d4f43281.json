{"sha": "5216b599a622e895fb4a8f63ae45cd22d4f43281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIxNmI1OTlhNjIyZTg5NWZiNGE4ZjYzYWU0NWNkMjJkNGY0MzI4MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:19:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:19:06Z"}, "message": "[multiple changes]\n\n2014-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_rm.texi: Small wording tweak.\n\n2014-02-06  Pascal Obry  <obry@adacore.com>\n\n\t* prj-attr.adb, projects.texi, snames.ads-tmpl: Add Included_Patterns\n\tand Included_Artifact_Patterns attribute definitions.\n\n2014-02-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set\n\tSPARK_Mode pragma component for all subprograms, including stubs.\n\n2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch10.adb (Analyze_Package_Body_Stub): Maintain\n\tthe configuration options of the enclosing context in a\n\tstack-like fasion.\n\t(Analyze_Subprogram_Body_Stub): Maintain the\n\tconfiguration options of the enclosing context in a stack-like\n\tfashion.\n\n2014-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: -gnatd.u sets Modify_Tree_For C\n\t* exp_ch4.adb (Expand_N_Op_Rotate_Left): Expand out\n\tif Modify_Tree_For_C (Expand_N_Op_Rotate_Right): ditto.\n\t(Expand_N_Op_Arithmetic_Right_Shift): ditto.\n\t* exp_intr.adb (Expand_Shift): Call expander so we do\n\tModify_Tree_For_C expansions.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set Modify_Tree_For_C\n\tif -gnatd.u set.\n\n2014-02-06  Fedor Rybin  <frybin@adacore.com>\n\n\t* prj-proc.ads (Tree_Loaded_Callback): new type Callback used\n\tafter the phase 1 of the processing of each aggregated project\n\tto get access to project trees of aggregated projects.\n\t(Process_Project_Tree_Phase_1): new parameter On_New_Tree_Loaded\n\tIf specified, On_New_Tree_Loaded is called after each aggregated\n\tproject has been processed succesfully.\n\t(Process): new parameter On_New_Tree_Loaded.\n\t* prj-proc.adb (Process_Aggregated_Projects): On_New_Tree_Loaded\n\tcallback added after processing of each aggregated project.\n\t(Recursive_Process): new parameter On_New_Tree_Loaded.\n\t(Process): new parameter On_New_Tree_Loaded.\n\t(Process_Project_Tree_Phase_1): new parameter On_New_Tree_Loaded.\n\t* prj-conf.ads (Parse_Project_And_Apply_Config): new parameter\n\tOn_New_Tree_Loaded.\n\t* prj-conf.adb (Parse_Project_And_Apply_Config): new parameter\n\tOn_New_Tree_Loaded.\n\n2014-02-06  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Implement --insert-blank-lines and\n\t--preserve-blank-lines switches.\n\nFrom-SVN: r207545", "tree": {"sha": "70f1831653300095e4ad7c8d1f70957a7acbb97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70f1831653300095e4ad7c8d1f70957a7acbb97e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5216b599a622e895fb4a8f63ae45cd22d4f43281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5216b599a622e895fb4a8f63ae45cd22d4f43281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5216b599a622e895fb4a8f63ae45cd22d4f43281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5216b599a622e895fb4a8f63ae45cd22d4f43281/comments", "author": null, "committer": null, "parents": [{"sha": "4a985a3778e38b8a9fc169f238069303a047c236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a985a3778e38b8a9fc169f238069303a047c236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a985a3778e38b8a9fc169f238069303a047c236"}], "stats": {"total": 407, "additions": 358, "deletions": 49}, "files": [{"sha": "70bd9fc908f409328994eb505060d5a8697a4481", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -1,3 +1,61 @@\n+2014-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_rm.texi: Small wording tweak.\n+\n+2014-02-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-attr.adb, projects.texi, snames.ads-tmpl: Add Included_Patterns\n+\tand Included_Artifact_Patterns attribute definitions.\n+\n+2014-02-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set\n+\tSPARK_Mode pragma component for all subprograms, including stubs.\n+\n+2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_Package_Body_Stub): Maintain\n+\tthe configuration options of the enclosing context in a\n+\tstack-like fasion.\n+\t(Analyze_Subprogram_Body_Stub): Maintain the\n+\tconfiguration options of the enclosing context in a stack-like\n+\tfashion.\n+\n+2014-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: -gnatd.u sets Modify_Tree_For C\n+\t* exp_ch4.adb (Expand_N_Op_Rotate_Left): Expand out\n+\tif Modify_Tree_For_C (Expand_N_Op_Rotate_Right): ditto.\n+\t(Expand_N_Op_Arithmetic_Right_Shift): ditto.\n+\t* exp_intr.adb (Expand_Shift): Call expander so we do\n+\tModify_Tree_For_C expansions.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set Modify_Tree_For_C\n+\tif -gnatd.u set.\n+\n+2014-02-06  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* prj-proc.ads (Tree_Loaded_Callback): new type Callback used\n+\tafter the phase 1 of the processing of each aggregated project\n+\tto get access to project trees of aggregated projects.\n+\t(Process_Project_Tree_Phase_1): new parameter On_New_Tree_Loaded\n+\tIf specified, On_New_Tree_Loaded is called after each aggregated\n+\tproject has been processed succesfully.\n+\t(Process): new parameter On_New_Tree_Loaded.\n+\t* prj-proc.adb (Process_Aggregated_Projects): On_New_Tree_Loaded\n+\tcallback added after processing of each aggregated project.\n+\t(Recursive_Process): new parameter On_New_Tree_Loaded.\n+\t(Process): new parameter On_New_Tree_Loaded.\n+\t(Process_Project_Tree_Phase_1): new parameter On_New_Tree_Loaded.\n+\t* prj-conf.ads (Parse_Project_And_Apply_Config): new parameter\n+\tOn_New_Tree_Loaded.\n+\t* prj-conf.adb (Parse_Project_And_Apply_Config): new parameter\n+\tOn_New_Tree_Loaded.\n+\n+2014-02-06  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Implement --insert-blank-lines and\n+\t--preserve-blank-lines switches.\n+\n 2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n \n \t* gnat_ugn.texi, vms_data.ads: Add documentation of -j option for"}, {"sha": "11237e23dc9e5148b81cd016bd36bb36575f91b6", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -111,7 +111,7 @@ package body Debug is\n    --  d.r  Enable OK_To_Reorder_Components in non-variant records\n    --  d.s  Disable expansion of slice move, use memmove\n    --  d.t  Disable static allocation of library level dispatch tables\n-   --  d.u\n+   --  d.u  Enable Modify_Tree_For_C (update tree for c)\n    --  d.v  Enable OK_To_Reorder_Components in variant records\n    --  d.w  Do not check for infinite loops\n    --  d.x  No exception handlers\n@@ -575,6 +575,9 @@ package body Debug is\n    --       previous dynamic construction of tables. It is there as a possible\n    --       work around if we run into trouble with the new implementation.\n \n+   --  d.u  Sets Modify_Tree_For_C mode in which tree is modified to make it\n+   --       easier to generate code using a C compiler.\n+\n    --  d.v  Forces the flag OK_To_Reorder_Components to be set in all record\n    --       base types that have at least one discriminant (v = variant).\n "}, {"sha": "d45d5098b4599dcc0f0f606f3849caf2769a0140", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -8756,6 +8756,49 @@ package body Exp_Ch4 is\n    procedure Expand_N_Op_Rotate_Left (N : Node_Id) is\n    begin\n       Binary_Op_Validity_Checks (N);\n+\n+      --  If we are in Modify_Tree_For_C mode, there is no rotate left in C,\n+      --  so we rewrite in terms of logical shifts\n+\n+      --    Shift_Left (Num, Bits) or Shift_Right (num, Esize - Bits)\n+\n+      --  where Bits is the shift count mod Esize (the mod operation here\n+      --  deals with ludicrous large shift counts, which are apparently OK).\n+\n+      --  What about non-binary modulus ???\n+\n+      declare\n+         Loc : constant Source_Ptr := Sloc (N);\n+         Rtp : constant Entity_Id  := Etype (Right_Opnd (N));\n+         Typ : constant Entity_Id  := Etype (N);\n+\n+      begin\n+         if Modify_Tree_For_C then\n+            Rewrite (Right_Opnd (N),\n+              Make_Op_Rem (Loc,\n+                Left_Opnd  => Relocate_Node (Right_Opnd (N)),\n+                Right_Opnd => Make_Integer_Literal (Loc, Esize (Typ))));\n+\n+            Analyze_And_Resolve (Right_Opnd (N), Rtp);\n+\n+            Rewrite (N,\n+              Make_Op_Or (Loc,\n+                Left_Opnd =>\n+                  Make_Op_Shift_Left (Loc,\n+                    Left_Opnd  => Left_Opnd (N),\n+                    Right_Opnd => Right_Opnd (N)),\n+                Right_Opnd =>\n+                  Make_Op_Shift_Right (Loc,\n+                    Left_Opnd  => Duplicate_Subexpr_No_Checks (Left_Opnd (N)),\n+                    Right_Opnd =>\n+                      Make_Op_Subtract (Loc,\n+                        Left_Opnd  => Make_Integer_Literal (Loc, Esize (Typ)),\n+                        Right_Opnd =>\n+                          Duplicate_Subexpr_No_Checks (Right_Opnd (N))))));\n+\n+            Analyze_And_Resolve (N, Typ);\n+         end if;\n+      end;\n    end Expand_N_Op_Rotate_Left;\n \n    ------------------------------\n@@ -8765,6 +8808,49 @@ package body Exp_Ch4 is\n    procedure Expand_N_Op_Rotate_Right (N : Node_Id) is\n    begin\n       Binary_Op_Validity_Checks (N);\n+\n+      --  If we are in Modify_Tree_For_C mode, there is no rotate right in C,\n+      --  so we rewrite in terms of logical shifts\n+\n+      --    Shift_Right (Num, Bits) or Shift_Left (num, Esize - Bits)\n+\n+      --  where Bits is the shift count mod Esize (the mod operation here\n+      --  deals with ludicrous large shift counts, which are apparently OK).\n+\n+      --  What about non-binary modulus ???\n+\n+      declare\n+         Loc : constant Source_Ptr := Sloc (N);\n+         Rtp : constant Entity_Id  := Etype (Right_Opnd (N));\n+         Typ : constant Entity_Id  := Etype (N);\n+\n+      begin\n+         Rewrite (Right_Opnd (N),\n+           Make_Op_Rem (Loc,\n+             Left_Opnd  => Relocate_Node (Right_Opnd (N)),\n+             Right_Opnd => Make_Integer_Literal (Loc, Esize (Typ))));\n+\n+         Analyze_And_Resolve (Right_Opnd (N), Rtp);\n+\n+         if Modify_Tree_For_C then\n+            Rewrite (N,\n+              Make_Op_Or (Loc,\n+                Left_Opnd =>\n+                  Make_Op_Shift_Right (Loc,\n+                    Left_Opnd  => Left_Opnd (N),\n+                    Right_Opnd => Right_Opnd (N)),\n+                Right_Opnd =>\n+                  Make_Op_Shift_Left (Loc,\n+                    Left_Opnd  => Duplicate_Subexpr_No_Checks (Left_Opnd (N)),\n+                    Right_Opnd =>\n+                      Make_Op_Subtract (Loc,\n+                        Left_Opnd  => Make_Integer_Literal (Loc, Esize (Typ)),\n+                        Right_Opnd =>\n+                          Duplicate_Subexpr_No_Checks (Right_Opnd (N))))));\n+\n+            Analyze_And_Resolve (N, Typ);\n+         end if;\n+      end;\n    end Expand_N_Op_Rotate_Right;\n \n    ----------------------------\n@@ -8792,6 +8878,80 @@ package body Exp_Ch4 is\n    procedure Expand_N_Op_Shift_Right_Arithmetic (N : Node_Id) is\n    begin\n       Binary_Op_Validity_Checks (N);\n+\n+      --  If we are in Modify_Tree_For_C mode, there is no shift right\n+      --  arithmetic in C, so we rewrite in terms of logical shifts.\n+\n+      --    Shift_Right (Num, Bits) or\n+      --      (if Num >= Sign\n+      --       then not (Shift_Right (Mask, bits))\n+      --       else 0)\n+\n+      --  Here Mask is all 1 bits (2**size - 1), and Sign is 2**(size - 1)\n+\n+      --  Note: in almost all C compilers it would work to just shift a\n+      --  signed integer right, but it's undefined and we cannot rely on it.\n+\n+      --  What about non-binary modulus ???\n+\n+      declare\n+         Loc   : constant Source_Ptr := Sloc (N);\n+         Typ   : constant Entity_Id  := Etype (N);\n+         Sign  : constant Uint       := 2 ** (Esize (Typ) - 1);\n+         Mask  : constant Uint       := (2 ** Esize (Typ)) - 1;\n+         Left  : constant Node_Id    := Left_Opnd (N);\n+         Right : constant Node_Id    := Right_Opnd (N);\n+         Maskx : Node_Id;\n+\n+      begin\n+         if Modify_Tree_For_C then\n+\n+            --  Here if not (Shift_Right (Mask, bits)) can be computed at\n+            --  compile time as a single constant.\n+\n+            if Compile_Time_Known_Value (Right) then\n+               declare\n+                  Val : constant Uint := Expr_Value (Right);\n+\n+               begin\n+                  if Val >= Esize (Typ) then\n+                     Maskx := Make_Integer_Literal (Loc, Mask);\n+\n+                  else\n+                     Maskx :=\n+                       Make_Integer_Literal (Loc,\n+                         Intval => Mask - (Mask / (2 ** Expr_Value (Right))));\n+                  end if;\n+               end;\n+\n+            else\n+               Maskx :=\n+                 Make_Op_Not (Loc,\n+                   Right_Opnd =>\n+                     Make_Op_Shift_Right (Loc,\n+                       Left_Opnd  => Make_Integer_Literal (Loc, Mask),\n+                       Right_Opnd => Duplicate_Subexpr_No_Checks (Right)));\n+            end if;\n+\n+            --  Now do the rewrite\n+\n+            Rewrite (N,\n+              Make_Op_Or (Loc,\n+                Left_Opnd =>\n+                  Make_Op_Shift_Right (Loc,\n+                    Left_Opnd  => Left,\n+                    Right_Opnd => Right),\n+                Right_Opnd =>\n+                  Make_If_Expression (Loc,\n+                    Expressions => New_List (\n+                      Make_Op_Ge (Loc,\n+                        Left_Opnd  => Duplicate_Subexpr_No_Checks (Left),\n+                        Right_Opnd => Make_Integer_Literal (Loc, Sign)),\n+                      Maskx,\n+                      Make_Integer_Literal (Loc, 0)))));\n+            Analyze_And_Resolve (N, Typ);\n+         end if;\n+      end;\n    end Expand_N_Op_Shift_Right_Arithmetic;\n \n    --------------------------"}, {"sha": "fa0ced2f08ead9d3392d3a45cb504c6974e13587", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n+with Expander; use Expander;\n with Exp_Atag; use Exp_Atag;\n with Exp_Ch4;  use Exp_Ch4;\n with Exp_Ch7;  use Exp_Ch7;\n@@ -643,7 +644,7 @@ package body Exp_Intr is\n \n    --  As a result, whenever a shift is used in the source program, it will\n    --  remain as a call until converted by this routine to the operator node\n-   --  form which Gigi is expecting to see.\n+   --  form which the back end is expecting to see.\n \n    --  Note: it is possible for the expander to generate shift operator nodes\n    --  directly, which will be analyzed in the normal manner by calling Analyze\n@@ -681,8 +682,15 @@ package body Exp_Intr is\n          Rewrite (N, Snode);\n          Set_Analyzed (N);\n \n-      else\n+         --  However, we do call the expander, so that the expansion for\n+         --  rotates and shift_right_arithmetic happens if Modify_Tree_For_C\n+         --  is set.\n+\n+         if Expander_Active then\n+            Expand (N);\n+         end if;\n \n+      else\n          --  If the context type is not the type of the operator, it is an\n          --  inherited operator for a derived type. Wrap the node in a\n          --  conversion so that it is type-consistent for possible further"}, {"sha": "d6df2a0eeb3797e867ff2201e104aba281e962a6", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -117,9 +117,9 @@ procedure Gnat1drv is\n          Relaxed_RM_Semantics := True;\n       end if;\n \n-      --  -gnatd.V enables special C expansion mode\n+      --  -gnatd.V or -gnatd.u enables special C expansion mode\n \n-      if Debug_Flag_Dot_VV then\n+      if Debug_Flag_Dot_VV or Debug_Flag_Dot_U then\n          Modify_Tree_For_C := True;\n       end if;\n "}, {"sha": "b7c97ac7c413a31e1d15d6e505c15293416235d4", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -4849,7 +4849,7 @@ whose length depends on a discriminant), has a pragma Pack, then it is not\n in general possible to set the alignment of such a record to one, so the\n pragma is ignored in this case (with a warning).\n \n-Specifying SPACE also disables individual alignment promotions for objects,\n+Specifying SPACE also disables alignment promotions for standalone objects,\n which occur when the compiler increases the alignment of a specific object\n without changing the alignment of its type.\n "}, {"sha": "bbe9900c5d2bf8206424151dbdf90e1d55b2cc10", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -14351,6 +14351,16 @@ Start each USE clause in a context clause from a separate line.\n Use a separate line for a loop or block statement name, but do not use an extra\n indentation level for the statement itself.\n \n+@cindex @option{^--insert-blank-lines^/INSERT_BLANK_LINES^} (@command{gnatpp})\n+@item ^--insert-blank-lines^/INSERT_BLANK_LINES^\n+Insert blank lines where appropriate (between bodies and other large\n+constructs).\n+\n+@cindex @option{^--preserve-blank-lines^/PRESERVE_BLANK_LINES^} (@command{gnatpp})\n+@item ^--preserve-blank-lines^/PRESERVE_BLANK_LINES^\n+Preserve blank lines in the input. By default, gnatpp will squeeze\n+multiple blank lines down to one.\n+\n @end table\n \n @ifclear vms"}, {"sha": "b46f9e7b58e3972ff6ed3fe6be70cad7226bfc0b", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -370,6 +370,8 @@ package body Prj.Attr is\n    \"Premote#\" &\n    \"SVroot_dir#\" &\n    \"LVexcluded_patterns#\" &\n+   \"LVincluded_patterns#\" &\n+   \"LVincluded_artifact_patterns#\" &\n \n    --  package Stack\n "}, {"sha": "300c33c942edc89e1454fc843fec415e041d5527", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -1463,7 +1463,8 @@ package body Prj.Conf is\n             From_Project_Node      => Config_Project_Node,\n             From_Project_Node_Tree => Project_Node_Tree,\n             Env                    => Env,\n-            Reset_Tree             => False);\n+            Reset_Tree             => False,\n+            On_New_Tree_Loaded     => null);\n       end if;\n \n       if Config_Project_Node = Empty_Node\n@@ -1575,7 +1576,8 @@ package body Prj.Conf is\n       Target_Name                : String := \"\";\n       Normalized_Hostname        : String;\n       On_Load_Config             : Config_File_Hook := null;\n-      Implicit_Project           : Boolean := False)\n+      Implicit_Project           : Boolean := False;\n+      On_New_Tree_Loaded         : Prj.Proc.Tree_Loaded_Callback := null)\n    is\n    begin\n       pragma Assert (Prj.Env.Is_Initialized (Env.Project_Path));\n@@ -1617,7 +1619,8 @@ package body Prj.Conf is\n          Config_File_Path           => Config_File_Path,\n          Target_Name                => Target_Name,\n          Normalized_Hostname        => Normalized_Hostname,\n-         On_Load_Config             => On_Load_Config);\n+         On_Load_Config             => On_Load_Config,\n+         On_New_Tree_Loaded         => On_New_Tree_Loaded);\n    end Parse_Project_And_Apply_Config;\n \n    --------------------------------------\n@@ -1639,7 +1642,8 @@ package body Prj.Conf is\n       Target_Name                : String := \"\";\n       Normalized_Hostname        : String;\n       On_Load_Config             : Config_File_Hook := null;\n-      Reset_Tree                 : Boolean := True)\n+      Reset_Tree                 : Boolean := True;\n+      On_New_Tree_Loaded         : Prj.Proc.Tree_Loaded_Callback := null)\n    is\n       Shared              : constant Shared_Project_Tree_Data_Access :=\n                               Project_Tree.Shared;\n@@ -1695,7 +1699,8 @@ package body Prj.Conf is\n          From_Project_Node      => User_Project_Node,\n          From_Project_Node_Tree => Project_Node_Tree,\n          Env                    => Env,\n-         Reset_Tree             => Reset_Tree);\n+         Reset_Tree             => Reset_Tree,\n+         On_New_Tree_Loaded     => On_New_Tree_Loaded);\n \n       if not Success then\n          Main_Project := No_Project;"}, {"sha": "70382c3da839ffd782ca6cab3254722e7006032d", "filename": "gcc/ada/prj-conf.ads", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-conf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-conf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.ads?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -26,6 +26,7 @@\n --  The following package manipulates the configuration files\n \n with Prj.Tree;\n+with Prj.Proc;\n \n package Prj.Conf is\n \n@@ -49,20 +50,21 @@ package Prj.Conf is\n    procedure Parse_Project_And_Apply_Config\n      (Main_Project               : out Prj.Project_Id;\n       User_Project_Node          : out Prj.Tree.Project_Node_Id;\n-      Config_File_Name           : String := \"\";\n+      Config_File_Name           : String                        := \"\";\n       Autoconf_Specified         : Boolean;\n       Project_File_Name          : String;\n       Project_Tree               : Prj.Project_Tree_Ref;\n       Project_Node_Tree          : Prj.Tree.Project_Node_Tree_Ref;\n       Env                        : in out Prj.Tree.Environment;\n       Packages_To_Check          : String_List_Access;\n-      Allow_Automatic_Generation : Boolean := True;\n+      Allow_Automatic_Generation : Boolean                       := True;\n       Automatically_Generated    : out Boolean;\n       Config_File_Path           : out String_Access;\n-      Target_Name                : String := \"\";\n+      Target_Name                : String                        := \"\";\n       Normalized_Hostname        : String;\n-      On_Load_Config             : Config_File_Hook := null;\n-      Implicit_Project           : Boolean := False);\n+      On_Load_Config             : Config_File_Hook              := null;\n+      Implicit_Project           : Boolean                       := False;\n+      On_New_Tree_Loaded         : Prj.Proc.Tree_Loaded_Callback := null);\n    --  Find the main configuration project and parse the project tree rooted at\n    --  this configuration project.\n    --\n@@ -103,23 +105,27 @@ package Prj.Conf is\n    --  invoked without a project file and is using an implicit project file\n    --  that is virtually in the current working directory, but is physically\n    --  in another directory.\n+   --\n+   --  If specified, On_New_Tree_Loaded is called after each aggregated project\n+   --  has been processed succesfully.\n \n    procedure Process_Project_And_Apply_Config\n      (Main_Project               : out Prj.Project_Id;\n       User_Project_Node          : Prj.Tree.Project_Node_Id;\n-      Config_File_Name           : String := \"\";\n+      Config_File_Name           : String                       := \"\";\n       Autoconf_Specified         : Boolean;\n       Project_Tree               : Prj.Project_Tree_Ref;\n       Project_Node_Tree          : Prj.Tree.Project_Node_Tree_Ref;\n       Env                        : in out Prj.Tree.Environment;\n       Packages_To_Check          : String_List_Access;\n-      Allow_Automatic_Generation : Boolean := True;\n+      Allow_Automatic_Generation : Boolean                      := True;\n       Automatically_Generated    : out Boolean;\n       Config_File_Path           : out String_Access;\n-      Target_Name                : String := \"\";\n+      Target_Name                : String                       := \"\";\n       Normalized_Hostname        : String;\n-      On_Load_Config             : Config_File_Hook := null;\n-      Reset_Tree                 : Boolean := True);\n+      On_Load_Config             : Config_File_Hook             := null;\n+      Reset_Tree                 : Boolean                      := True;\n+      On_New_Tree_Loaded         : Prj.Proc.Tree_Loaded_Callback := null);\n    --  Same as above, except the project must already have been parsed through\n    --  Prj.Part.Parse, and only the processing of the project and the\n    --  configuration is done at this level.\n@@ -142,15 +148,15 @@ package Prj.Conf is\n       Project_Node_Tree          : Prj.Tree.Project_Node_Tree_Ref;\n       Env                        : in out Prj.Tree.Environment;\n       Allow_Automatic_Generation : Boolean;\n-      Config_File_Name           : String := \"\";\n+      Config_File_Name           : String             := \"\";\n       Autoconf_Specified         : Boolean;\n-      Target_Name                : String := \"\";\n+      Target_Name                : String             := \"\";\n       Normalized_Hostname        : String;\n       Packages_To_Check          : String_List_Access := null;\n       Config                     : out Prj.Project_Id;\n       Config_File_Path           : out String_Access;\n       Automatically_Generated    : out Boolean;\n-      On_Load_Config             : Config_File_Hook := null);\n+      On_Load_Config             : Config_File_Hook   := null);\n    --  Compute the name of the configuration file that should be used. If no\n    --  default configuration file is found, a new one will be automatically\n    --  generated if Allow_Automatic_Generation is true. This configuration"}, {"sha": "b7a34b39598e953f537541329be56b0cf98825a6", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -153,7 +153,8 @@ package body Prj.Proc is\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n       Extended_By            : Project_Id;\n-      From_Encapsulated_Lib  : Boolean);\n+      From_Encapsulated_Lib  : Boolean;\n+      On_New_Tree_Loaded     : Tree_Loaded_Callback := null);\n    --  Process project with node From_Project_Node in the tree. Do nothing if\n    --  From_Project_Node is Empty_Node. If project has already been processed,\n    --  simply return its project id. Otherwise create a new project id, mark it\n@@ -168,6 +169,9 @@ package body Prj.Proc is\n    --\n    --  From_Encapsulated_Lib is true if we are parsing a project from\n    --  encapsulated library dependencies.\n+   --\n+   --  If specified, On_New_Tree_Loaded is called after each aggregated project\n+   --  has been processed succesfully.\n \n    function Get_Attribute_Index\n      (Tree  : Project_Node_Tree_Ref;\n@@ -1360,7 +1364,8 @@ package body Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Reset_Tree             : Boolean := True)\n+      Reset_Tree             : Boolean              := True;\n+      On_New_Tree_Loaded     : Tree_Loaded_Callback := null)\n    is\n    begin\n       Process_Project_Tree_Phase_1\n@@ -1371,7 +1376,8 @@ package body Prj.Proc is\n          From_Project_Node_Tree => From_Project_Node_Tree,\n          Env                    => Env,\n          Packages_To_Check      => Packages_To_Check,\n-         Reset_Tree             => Reset_Tree);\n+         Reset_Tree             => Reset_Tree,\n+         On_New_Tree_Loaded     => On_New_Tree_Loaded);\n \n       if Project_Qualifier_Of\n            (From_Project_Node, From_Project_Node_Tree) /= Configuration\n@@ -2357,7 +2363,8 @@ package body Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Reset_Tree             : Boolean := True)\n+      Reset_Tree             : Boolean              := True;\n+      On_New_Tree_Loaded     : Tree_Loaded_Callback := null)\n    is\n    begin\n       if Reset_Tree then\n@@ -2382,7 +2389,8 @@ package body Prj.Proc is\n          From_Project_Node_Tree => From_Project_Node_Tree,\n          Env                    => Env,\n          Extended_By            => No_Project,\n-         From_Encapsulated_Lib  => False);\n+         From_Encapsulated_Lib  => False,\n+         On_New_Tree_Loaded     => On_New_Tree_Loaded);\n \n       Success :=\n         Total_Errors_Detected = 0\n@@ -2517,7 +2525,8 @@ package body Prj.Proc is\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n       Extended_By            : Project_Id;\n-      From_Encapsulated_Lib  : Boolean)\n+      From_Encapsulated_Lib  : Boolean;\n+      On_New_Tree_Loaded     : Tree_Loaded_Callback := null)\n    is\n       Shared : constant Shared_Project_Tree_Data_Access := In_Tree.Shared;\n \n@@ -2577,7 +2586,8 @@ package body Prj.Proc is\n                   From_Project_Node_Tree => From_Project_Node_Tree,\n                   Env                    => Env,\n                   Extended_By            => No_Project,\n-                  From_Encapsulated_Lib  => From_Encapsulated_Lib);\n+                  From_Encapsulated_Lib  => From_Encapsulated_Lib,\n+                  On_New_Tree_Loaded     => On_New_Tree_Loaded);\n \n                if Imported = null then\n                   Project.Imported_Projects := new Project_List_Element'\n@@ -2668,7 +2678,8 @@ package body Prj.Proc is\n                      From_Project_Node      => Loaded_Project,\n                      From_Project_Node_Tree => Node_Tree,\n                      Env                    => Child_Env,\n-                     Reset_Tree             => False);\n+                     Reset_Tree             => False,\n+                     On_New_Tree_Loaded     => On_New_Tree_Loaded);\n                else\n                   --  use the same environment as the rest of the aggregated\n                   --  projects, ie the one that was setup by the root aggregate\n@@ -2680,7 +2691,13 @@ package body Prj.Proc is\n                      From_Project_Node      => Loaded_Project,\n                      From_Project_Node_Tree => Node_Tree,\n                      Env                    => Env,\n-                     Reset_Tree             => False);\n+                     Reset_Tree             => False,\n+                     On_New_Tree_Loaded     => On_New_Tree_Loaded);\n+               end if;\n+\n+               if On_New_Tree_Loaded /= null then\n+                  On_New_Tree_Loaded\n+                    (Node_Tree, Tree, Loaded_Project, List.Project);\n                end if;\n \n             else\n@@ -2912,7 +2929,8 @@ package body Prj.Proc is\n                From_Project_Node_Tree => From_Project_Node_Tree,\n                Env                    => Env,\n                Extended_By            => Project,\n-               From_Encapsulated_Lib  => From_Encapsulated_Lib);\n+               From_Encapsulated_Lib  => From_Encapsulated_Lib,\n+               On_New_Tree_Loaded     => On_New_Tree_Loaded);\n \n             Process_Declarative_Items\n               (Project                => Project,"}, {"sha": "97d7310dda7984646676218a04b19750ed671dac", "filename": "gcc/ada/prj-proc.ads", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-proc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprj-proc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.ads?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,14 @@ with Prj.Tree;  use Prj.Tree;\n \n package Prj.Proc is\n \n+   type Tree_Loaded_Callback is access procedure\n+     (Node_Tree    : Project_Node_Tree_Ref;\n+      Tree         : Project_Tree_Ref;\n+      Project_Node : Project_Node_Id;\n+      Project      : Project_Id);\n+   --  Callback used after the phase 1 of the processing of each aggregated\n+   --  project to get access to project trees of aggregated projects.\n+\n    procedure Process_Project_Tree_Phase_1\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n@@ -39,7 +47,8 @@ package Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Reset_Tree             : Boolean := True);\n+      Reset_Tree             : Boolean              := True;\n+      On_New_Tree_Loaded     : Tree_Loaded_Callback := null);\n    --  Process a project tree (ie the direct resulting of parsing a .gpr file)\n    --  based on the current external references.\n    --\n@@ -51,6 +60,9 @@ package Prj.Proc is\n    --\n    --  When Reset_Tree is True, all the project data are removed from the\n    --  project table before processing.\n+   --\n+   --  If specified, On_New_Tree_Loaded is called after each aggregated project\n+   --  has been processed succesfully.\n \n    procedure Process_Project_Tree_Phase_2\n      (In_Tree                : Project_Tree_Ref;\n@@ -74,7 +86,8 @@ package Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Reset_Tree             : Boolean := True);\n+      Reset_Tree             : Boolean              := True;\n+      On_New_Tree_Loaded     : Tree_Loaded_Callback := null);\n    --  Performs the two phases of the processing\n \n end Prj.Proc;"}, {"sha": "9f9151d53bcf5eb62446a0dab0261675163d64b5", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -4990,6 +4990,19 @@ invoking @code{gnatpp} for the source.\n \n @itemize @bullet\n \n+@item @b{Included_Patterns}: list\n+\n+If this attribute is defined it sets the patterns to\n+synchronized from the master to the slaves. It is exclusive\n+with Excluded_Patterns, that is it is an error to define\n+both.\n+\n+@item @b{Included_Artifact_Patterns}: list\n+\n+If this attribute is defined it sets the patterns of compilation\n+artifacts to synchronized from the slaves to the build master.\n+This attribute replace the default hard-coded patterns.\n+\n @item @b{Excluded_Patterns}: list\n \n Set of patterns to ignore when synchronizing sources from the build"}, {"sha": "b72fdd33a4e07758d308224ce626b6514bd45f4b", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -1513,8 +1513,9 @@ package body Sem_Ch10 is\n    -------------------------------\n \n    procedure Analyze_Package_Body_Stub (N : Node_Id) is\n-      Id  : constant Entity_Id := Defining_Identifier (N);\n-      Nam : Entity_Id;\n+      Id   : constant Entity_Id := Defining_Identifier (N);\n+      Nam  : Entity_Id;\n+      Opts : Config_Switches_Type;\n \n    begin\n       --  The package declaration must be in the current declarative part\n@@ -1531,6 +1532,11 @@ package body Sem_Ch10 is\n          Error_Msg_N (\"duplicate or redundant stub for package\", N);\n \n       else\n+         --  Retain and restore the configuration options of the enclosing\n+         --  context as the proper body may introduce a set of its own.\n+\n+         Save_Opt_Config_Switches (Opts);\n+\n          --  Indicate that the body of the package exists. If we are doing\n          --  only semantic analysis, the stub stands for the body. If we are\n          --  generating code, the existence of the body will be confirmed\n@@ -1541,6 +1547,8 @@ package body Sem_Ch10 is\n          Set_Corresponding_Spec_Of_Stub (N, Nam);\n          Generate_Reference (Nam, Id, 'b');\n          Analyze_Proper_Body (N, Nam);\n+\n+         Restore_Opt_Config_Switches (Opts);\n       end if;\n    end Analyze_Package_Body_Stub;\n \n@@ -1913,6 +1921,7 @@ package body Sem_Ch10 is\n \n    procedure Analyze_Subprogram_Body_Stub (N : Node_Id) is\n       Decl : Node_Id;\n+      Opts : Config_Switches_Type;\n \n    begin\n       Check_Stub_Level (N);\n@@ -1937,11 +1946,18 @@ package body Sem_Ch10 is\n          end loop;\n       end if;\n \n+      --  Retain and restore the configuration options of the enclosing context\n+      --  as the proper body may introduce a set of its own.\n+\n+      Save_Opt_Config_Switches (Opts);\n+\n       --  Treat stub as a body, which checks conformance if there is a previous\n       --  declaration, or else introduces entity and its signature.\n \n       Analyze_Subprogram_Body (N);\n       Analyze_Proper_Body (N, Empty);\n+\n+      Restore_Opt_Config_Switches (Opts);\n    end Analyze_Subprogram_Body_Stub;\n \n    ---------------------"}, {"sha": "853dfc6654d364fe4fcd344b8967ec8a135aa260", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -3000,11 +3000,6 @@ package body Sem_Ch6 is\n \n             Push_Scope (Spec_Id);\n \n-            --  Set SPARK_Mode from context\n-\n-            Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n-            Set_SPARK_Pragma_Inherited (Body_Id, True);\n-\n             --  Make sure that the subprogram is immediately visible. For\n             --  child units that have no separate spec this is indispensable.\n             --  Otherwise it is safe albeit redundant.\n@@ -3052,11 +3047,6 @@ package body Sem_Ch6 is\n             Install_Formals (Body_Id);\n \n             Push_Scope (Body_Id);\n-\n-            --  Set SPARK_Mode from context\n-\n-            Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n-            Set_SPARK_Pragma_Inherited (Body_Id, True);\n          end if;\n \n          --  For stubs and bodies with no previous spec, generate references to\n@@ -3065,6 +3055,11 @@ package body Sem_Ch6 is\n          Generate_Reference_To_Formals (Body_Id);\n       end if;\n \n+      --  Set SPARK_Mode from context\n+\n+      Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n+      Set_SPARK_Pragma_Inherited (Body_Id, True);\n+\n       --  If the return type is an anonymous access type whose designated type\n       --  is the limited view of a class-wide type and the non-limited view is\n       --  available, update the return type accordingly."}, {"sha": "69f66472d4d7e7e355010c1d9ee689c7313d3755", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5216b599a622e895fb4a8f63ae45cd22d4f43281/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=5216b599a622e895fb4a8f63ae45cd22d4f43281", "patch": "@@ -1278,6 +1278,8 @@ package Snames is\n    Name_Implementation                     : constant Name_Id := N + $;\n    Name_Implementation_Exceptions          : constant Name_Id := N + $;\n    Name_Implementation_Suffix              : constant Name_Id := N + $;\n+   Name_Included_Artifact_Patterns         : constant Name_Id := N + $;\n+   Name_Included_Patterns                  : constant Name_Id := N + $;\n    Name_Include_Switches                   : constant Name_Id := N + $;\n    Name_Include_Path                       : constant Name_Id := N + $;\n    Name_Include_Path_File                  : constant Name_Id := N + $;"}]}