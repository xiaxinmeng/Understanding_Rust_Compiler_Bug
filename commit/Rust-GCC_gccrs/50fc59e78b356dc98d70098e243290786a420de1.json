{"sha": "50fc59e78b356dc98d70098e243290786a420de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmYzU5ZTc4YjM1NmRjOThkNzAwOThlMjQzMjkwNzg2YTQyMGRlMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-25T10:52:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-25T10:52:31Z"}, "message": "extend.texi (Function Attributes): GNU C++ does now allow unused parameter decls.\n\n\t* doc/extend.texi (Function Attributes): GNU C++ does now allow\n\tunused parameter decls.\n\t(Attribute Syntax): GNU C++ does not allow label attributes to be\n\tafter the ':'.\n\nFrom-SVN: r69781", "tree": {"sha": "0df8d2ae367eb2ac46fe9493f067c47d2c25b9c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0df8d2ae367eb2ac46fe9493f067c47d2c25b9c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50fc59e78b356dc98d70098e243290786a420de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50fc59e78b356dc98d70098e243290786a420de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50fc59e78b356dc98d70098e243290786a420de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50fc59e78b356dc98d70098e243290786a420de1/comments", "author": null, "committer": null, "parents": [{"sha": "cd47580517bf12a070ba8b5e76043d9df813acc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd47580517bf12a070ba8b5e76043d9df813acc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd47580517bf12a070ba8b5e76043d9df813acc6"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "2b3db6360a8ed4497c12696cb175e2f753b0cf68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50fc59e78b356dc98d70098e243290786a420de1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50fc59e78b356dc98d70098e243290786a420de1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50fc59e78b356dc98d70098e243290786a420de1", "patch": "@@ -1,3 +1,10 @@\n+2003-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/extend.texi (Function Attributes): GNU C++ does now allow\n+\tunused parameter decls.\n+\t(Attribute Syntax): GNU C++ does not allow label attributes to be\n+\tafter the ':'.\n+\n 2003-07-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* objc/objc-act.c (objc_check_decl): Don't use xxx_with_decl."}, {"sha": "0e76b6b08e1994a16727c2bd1ed951ae3f20c904", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50fc59e78b356dc98d70098e243290786a420de1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50fc59e78b356dc98d70098e243290786a420de1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=50fc59e78b356dc98d70098e243290786a420de1", "patch": "@@ -2268,8 +2268,7 @@ These attributes are not currently implemented for Objective-C@.\n @item unused\n This attribute, attached to a function, means that the function is meant\n to be possibly unused.  GCC will not produce a warning for this\n-function.  GNU C++ does not currently support this attribute as\n-definitions without parameters are valid in C++.\n+function.\n \n @cindex @code{used} attribute.\n @item used\n@@ -2725,14 +2724,18 @@ with the list being a single string constant.\n An @dfn{attribute specifier list} is a sequence of one or more attribute\n specifiers, not separated by any other tokens.\n \n-An attribute specifier list may appear after the colon following a\n+In GNU C, an attribute specifier list may appear after the colon following a\n label, other than a @code{case} or @code{default} label.  The only\n attribute it makes sense to use after a label is @code{unused}.  This\n feature is intended for code generated by programs which contains labels\n that may be unused but which is compiled with @option{-Wall}.  It would\n not normally be appropriate to use in it human-written code, though it\n could be useful in cases where the code that jumps to the label is\n-contained within an @code{#ifdef} conditional.\n+contained within an @code{#ifdef} conditional. GNU C++ does not permit\n+such placement of attribute lists, as it is permissible for a\n+declaration, which could begin with an attribute list, to be labelled in\n+C++. Declarations cannot be labelled in C90 or C99, so the ambiguity\n+does not arise there.\n \n An attribute specifier list may appear as part of a @code{struct},\n @code{union} or @code{enum} specifier.  It may go either immediately"}]}