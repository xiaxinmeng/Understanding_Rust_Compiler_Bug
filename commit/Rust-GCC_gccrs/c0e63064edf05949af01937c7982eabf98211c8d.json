{"sha": "c0e63064edf05949af01937c7982eabf98211c8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlNjMwNjRlZGYwNTk0OWFmMDE5MzdjNzk4MmVhYmY5ODIxMWM4ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-09T14:37:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-09T14:37:05Z"}, "message": "* config/m32r/m32r.md: Remove all define_peephole's.\n\nFrom-SVN: r79170", "tree": {"sha": "7d76cc37bf5e0adb01126fb17bd6caf4748c9d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d76cc37bf5e0adb01126fb17bd6caf4748c9d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0e63064edf05949af01937c7982eabf98211c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e63064edf05949af01937c7982eabf98211c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e63064edf05949af01937c7982eabf98211c8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e63064edf05949af01937c7982eabf98211c8d/comments", "author": null, "committer": null, "parents": [{"sha": "6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7"}], "stats": {"total": 62, "additions": 4, "deletions": 58}, "files": [{"sha": "abdf3fa3d5173822ba1b1e3ae2c5267585f65183", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e63064edf05949af01937c7982eabf98211c8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e63064edf05949af01937c7982eabf98211c8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0e63064edf05949af01937c7982eabf98211c8d", "patch": "@@ -1,3 +1,7 @@\n+2004-03-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/m32r/m32r.md: Remove all define_peephole's.\n+\n 2004-03-09  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.md: Remove trailing whitespace."}, {"sha": "b969bb15815ac4cff9f359f7d60dd21cde744804", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e63064edf05949af01937c7982eabf98211c8d/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e63064edf05949af01937c7982eabf98211c8d/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=c0e63064edf05949af01937c7982eabf98211c8d", "patch": "@@ -2599,64 +2599,6 @@\n )\n \n \f\n-;; Split up troublesome insns for better scheduling.\n-;; FIXME: Peepholes go at the end.\n-\n-;; ??? Setting the type attribute may not be useful, but for completeness\n-;; we do it.\n-\n-(define_peephole\n-  [(set (mem:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t\t (const_int 4)))\n-        (match_operand:SI 1 \"register_operand\" \"r\"))]\n-  \"0 && dead_or_set_p (insn, operands[0])\"\n-  \"st %1,@+%0\"\n-  [(set_attr \"type\" \"store2\")\n-   (set_attr \"length\" \"2\")])\n-\n-;; This case is triggered by compiling this code:\n-;; \n-;; extern void sub(int *);\n-;; void main (void)\n-;; {\n-;;   int i=2,j=3,k;\n-;;   while (i < j)  sub(&k);\n-;;   i = j / k;\n-;;   sub(&i);\n-;;   i = j - k;\n-;;   sub(&i);\n-;; }\n-;;\n-;; Without the peephole the following assembler is generated for the\n-;; divide and subtract expressions:\n-;;\n-;;         div r5,r4     \n-;;         mv r4,r5      \n-;;         st r4,@(4,sp) \n-;;         bl sub\n-;; \n-;; Similar code is produced for the subtract expression.  With this\n-;; peephole the redundant move is eliminated.\n-;;\n-;; This optimization only works if PRESERVE_DEATH_INFO_REGNO_P is\n-;; defined in m32r.h\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (match_operand:SI 1 \"register_operand\" \"r\")\n-   )\n-   (set (mem:SI (plus: SI (match_operand:SI 2 \"register_operand\" \"r\")\n-                (match_operand:SI 3 \"immediate_operand\" \"J\")))\n-        (match_dup 0)\n-   )\n-  ]\n-  \"0 && dead_or_set_p (insn, operands [0])\"\n-  \"st %1,@(%3,%2)\"\n-  [(set_attr \"type\" \"store4\")\n-   (set_attr \"length\" \"4\")\n-  ]\n-)\n-\n ;; Block moves, see m32r.c for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source"}]}