{"sha": "ef3be7da315db90f5d311b43464c5341fa33d5e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzYmU3ZGEzMTVkYjkwZjVkMzExYjQzNDY0YzUzNDFmYTMzZDVlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-09-13T21:00:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-09-13T21:00:03Z"}, "message": "re PR rtl-optimization/45617 (optimize bit shift+compare at RTL level)\n\n\tPR rtl-optimization/45617\n\t* combine.c (simplify_comparison): Optimize (X >> N) {>,>=,<,<=} C\n\teven if low N bits of X aren't known to be zero.\n\n\t* gcc.target/i386/pr45617.c: New test.\n\nFrom-SVN: r164257", "tree": {"sha": "142dc459a1da90111739127e8c28d54c9c9564e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142dc459a1da90111739127e8c28d54c9c9564e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef3be7da315db90f5d311b43464c5341fa33d5e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3be7da315db90f5d311b43464c5341fa33d5e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3be7da315db90f5d311b43464c5341fa33d5e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3be7da315db90f5d311b43464c5341fa33d5e2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa0921fcd0c899546fe2d4f6f4cee0ab01ea97eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0921fcd0c899546fe2d4f6f4cee0ab01ea97eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0921fcd0c899546fe2d4f6f4cee0ab01ea97eb"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "5c0c7318f1128e72a239641e2e361fb989f5675d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef3be7da315db90f5d311b43464c5341fa33d5e2", "patch": "@@ -1,3 +1,9 @@\n+2010-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/45617\n+\t* combine.c (simplify_comparison): Optimize (X >> N) {>,>=,<,<=} C\n+\teven if low N bits of X aren't known to be zero.\n+\n 2010-09-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386-protos.h (ix86_units_per_simd_word): New."}, {"sha": "618e07df4f022f4846efbae5b27f28cb9b7c080b", "filename": "gcc/combine.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ef3be7da315db90f5d311b43464c5341fa33d5e2", "patch": "@@ -11773,29 +11773,42 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  /* If we have (compare (xshiftrt FOO N) (const_int C)) and\n \t     the low order N bits of FOO are known to be zero, we can do this\n \t     by comparing FOO with C shifted left N bits so long as no\n-\t     overflow occurs.  */\n+\t     overflow occurs.  Even if the low order N bits of FOO aren't known\n+\t     to be zero, if the comparison is >= or < we can use the same\n+\t     optimization and for > or <= by setting all the low\n+\t     order N bits in the comparison constant.  */\n \t  if (CONST_INT_P (XEXP (op0, 1))\n-\t      && INTVAL (XEXP (op0, 1)) >= 0\n+\t      && INTVAL (XEXP (op0, 1)) > 0\n \t      && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT\n \t      && mode_width <= HOST_BITS_PER_WIDE_INT\n-\t      && (nonzero_bits (XEXP (op0, 0), mode)\n-\t\t  & (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1)) == 0\n \t      && (((unsigned HOST_WIDE_INT) const_op\n \t\t   + (GET_CODE (op0) != LSHIFTRT\n \t\t      ? ((GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1)) >> 1)\n \t\t\t + 1)\n \t\t      : 0))\n \t\t  <= GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1))))\n \t    {\n-\t      /* If the shift was logical, then we must make the condition\n-\t\t unsigned.  */\n-\t      if (GET_CODE (op0) == LSHIFTRT)\n-\t\tcode = unsigned_condition (code);\n-\n-\t      const_op <<= INTVAL (XEXP (op0, 1));\n-\t      op1 = GEN_INT (const_op);\n-\t      op0 = XEXP (op0, 0);\n-\t      continue;\n+\t      unsigned HOST_WIDE_INT low_bits\n+\t\t= (nonzero_bits (XEXP (op0, 0), mode)\n+\t\t   & (((unsigned HOST_WIDE_INT) 1\n+\t\t       << INTVAL (XEXP (op0, 1))) - 1));\n+\t      if (low_bits == 0 || !equality_comparison_p)\n+\t\t{\n+\t\t  /* If the shift was logical, then we must make the condition\n+\t\t     unsigned.  */\n+\t\t  if (GET_CODE (op0) == LSHIFTRT)\n+\t\t    code = unsigned_condition (code);\n+\n+\t\t  const_op <<= INTVAL (XEXP (op0, 1));\n+\t\t  if (low_bits != 0\n+\t\t      && (code == GT || code == GTU\n+\t\t\t  || code == LE || code == LEU))\n+\t\t    const_op\n+\t\t      |= (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1);\n+\t\t  op1 = GEN_INT (const_op);\n+\t\t  op0 = XEXP (op0, 0);\n+\t\t  continue;\n+\t\t}\n \t    }\n \n \t  /* If we are using this shift to extract just the sign bit, we"}, {"sha": "c663a4b6f1b775f6d3457b35672be799a733f075", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef3be7da315db90f5d311b43464c5341fa33d5e2", "patch": "@@ -1,3 +1,8 @@\n+2010-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/45617\n+\t* gcc.target/i386/pr45617.c: New test.\n+\n 2010-09-13  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \t* gcc.target/i386/volatile-2.c: Allow underscores before symbols."}, {"sha": "58f977289c8648bcd21951451b60e81e1941f249", "filename": "gcc/testsuite/gcc.target/i386/pr45617.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45617.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3be7da315db90f5d311b43464c5341fa33d5e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45617.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45617.c?ref=ef3be7da315db90f5d311b43464c5341fa33d5e2", "patch": "@@ -0,0 +1,22 @@\n+/* PR rtl-optimization/45617 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int f1 (int x)\n+{\n+  return (x >> 23) > 12;\n+}\n+int f2 (int x)\n+{\n+  return x > ((13 << 23) - 1);\n+}\n+int f3 (int x)\n+{\n+  return (x >> 23) >= 12;\n+}\n+int f4 (int x)\n+{\n+  return x >= (12 << 23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"sarl\" } } */"}]}