{"sha": "89d825c9a663b84fb5b4dfae80650d2c340bc69f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkODI1YzlhNjYzYjg0ZmI1YjRkZmFlODA2NTBkMmMzNDBiYzY5Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-03T21:42:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-03T21:42:58Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r675", "tree": {"sha": "cffcbab67b6b5e9536086ffbadaa529bb663e41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffcbab67b6b5e9536086ffbadaa529bb663e41f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d825c9a663b84fb5b4dfae80650d2c340bc69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d825c9a663b84fb5b4dfae80650d2c340bc69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d825c9a663b84fb5b4dfae80650d2c340bc69f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d825c9a663b84fb5b4dfae80650d2c340bc69f/comments", "author": null, "committer": null, "parents": [{"sha": "dd43f13d02bb92dc7d14ac5036de4f954f0c5fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd43f13d02bb92dc7d14ac5036de4f954f0c5fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd43f13d02bb92dc7d14ac5036de4f954f0c5fd1"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "f2b72f6969c52b979f5b58e646076060c9d15dd8", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d825c9a663b84fb5b4dfae80650d2c340bc69f/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d825c9a663b84fb5b4dfae80650d2c340bc69f/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=89d825c9a663b84fb5b4dfae80650d2c340bc69f", "patch": "@@ -764,8 +764,10 @@ allocate_dynamic_stack_space (size, target, known_align)\n      way of knowing which systems have this problem.  So we avoid even\n      momentarily mis-aligning the stack.  */\n \n+#ifdef STACK_BOUNDARY\n   if (known_align % STACK_BOUNDARY != 0)\n     size = round_push (size);\n+#endif\n \n   do_pending_stack_adjust ();\n "}]}