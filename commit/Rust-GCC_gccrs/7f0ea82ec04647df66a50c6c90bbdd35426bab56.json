{"sha": "7f0ea82ec04647df66a50c6c90bbdd35426bab56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwZWE4MmVjMDQ2NDdkZjY2YTUwYzZjOTBiYmRkMzU0MjZiYWI1Ng==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-04-16T17:41:10Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-04-16T17:41:10Z"}, "message": "Re-apply this patch:\n\n\t2002-05-16  Dale Johannesen  <dalej@apple.com>\n\t  * combine.c (cant_combine_insn_p):  Reenable combinations\n\t  involving hard regs unless CLASS_LIKELY_SPILLED_P.\n\nFrom-SVN: r65689", "tree": {"sha": "7a8e74a29d0fa7c9df1898d34e665463cf70b23e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a8e74a29d0fa7c9df1898d34e665463cf70b23e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0ea82ec04647df66a50c6c90bbdd35426bab56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0ea82ec04647df66a50c6c90bbdd35426bab56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0ea82ec04647df66a50c6c90bbdd35426bab56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0ea82ec04647df66a50c6c90bbdd35426bab56/comments", "author": null, "committer": null, "parents": [{"sha": "c328adfa0e5f040d37332c9770bb7fcf50c1d1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c328adfa0e5f040d37332c9770bb7fcf50c1d1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c328adfa0e5f040d37332c9770bb7fcf50c1d1d5"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "6fd841d902a59ca49bafdfe7eee756d8a2213d0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0ea82ec04647df66a50c6c90bbdd35426bab56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0ea82ec04647df66a50c6c90bbdd35426bab56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f0ea82ec04647df66a50c6c90bbdd35426bab56", "patch": "@@ -1,3 +1,11 @@\n+2003-04-16  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\tRe-apply this patch:\n+\n+\t2002-05-16  Dale Johannesen  <dalej@apple.com>\n+\t  * combine.c (cant_combine_insn_p):  Reenable combinations\n+\t  involving hard regs unless CLASS_LIKELY_SPILLED_P.\n+\n 2003-04-16  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR/10271"}, {"sha": "f7c98526833e23f11bb7f2d6123a34dc8d375dd1", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0ea82ec04647df66a50c6c90bbdd35426bab56/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0ea82ec04647df66a50c6c90bbdd35426bab56/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7f0ea82ec04647df66a50c6c90bbdd35426bab56", "patch": "@@ -1435,10 +1435,10 @@ cant_combine_insn_p (insn)\n   if (! INSN_P (insn))\n     return 1;\n \n-  /* Never combine loads and stores involving hard regs.  The register\n-     allocator can usually handle such reg-reg moves by tying.  If we allow\n-     the combiner to make substitutions of hard regs, we risk aborting in\n-     reload on machines that have SMALL_REGISTER_CLASSES.\n+  /* Never combine loads and stores involving hard regs that are likely\n+     to be spilled.  The register allocator can usually handle such\n+     reg-reg moves by tying.  If we allow the combiner to make \n+     substitutions of likely-spilled regs, we may abort in reload.\n      As an exception, we allow combinations involving fixed regs; these are\n      not available to the register allocator so there's no risk involved.  */\n \n@@ -1453,9 +1453,11 @@ cant_combine_insn_p (insn)\n     dest = SUBREG_REG (dest);\n   if (REG_P (src) && REG_P (dest)\n       && ((REGNO (src) < FIRST_PSEUDO_REGISTER\n-\t   && ! fixed_regs[REGNO (src)])\n+\t   && ! fixed_regs[REGNO (src)]\n+\t   && CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (REGNO (src))))\n \t  || (REGNO (dest) < FIRST_PSEUDO_REGISTER\n-\t      && ! fixed_regs[REGNO (dest)])))\n+\t      && ! fixed_regs[REGNO (dest)]\n+\t      && CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (REGNO (dest))))))\n     return 1;\n \n   return 0;"}]}