{"sha": "25b75a48d2a2d0a4d65708da7402f238a10da115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViNzVhNDhkMmEyZDBhNGQ2NTcwOGRhNzQwMmYyMzhhMTBkYTExNQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-07-11T15:02:12Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-07-11T15:02:12Z"}, "message": "Convert TYPE_ALIGN_OK to a TYPE_LANG_FLAG.\n\n2016-07-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Convert TYPE_ALIGN_OK to a TYPE_LANG_FLAG.\n        * tree-core.h (tree_base::nothrow_flag): Adjust comment.\n        (tree_type_common::lang_flag_7): New.\n        (tree_type_common::spare): Reduce size.\n        * tree.h (TYPE_ALIGN_OK): Remove.\n        (TYPE_LANG_FLAG_7): New.\n        (get_inner_reference): Adjust header.\n        * print-tree.c (print_node): Adjust.\n        * expr.c (get_inner_reference): Remove parameter keep_aligning.\n        (get_bit_range, expand_assignment, expand_expr_addr_expr_1): Adjust\n        calls to get_inner_reference.\n        (expand_expr_real_1): Adjust call to get_inner_reference.  Remove\n        handling of TYPE_ALIGN_OK.\n        * builtins.c (get_object_alignment_2): Adjust call to\n        get_inner_reference.  Remove handling of VIEW_CONVERT_EXPR.\n        * emit-rtl.c (set_mem_attributes_minus_bitpos): Remove handling of\n        TYPE_ALIGN_OK.\n        * asan.c (instrument_derefs): Adjust calls to get_inner_reference.\n        * cfgexpand.c (expand_debug_expr): Likewise.\n        * dbxout.c (dbxout_expand_expr): Likewise.\n        * dwarf2out.c (loc_list_for_address_of_addr_expr_of_indirect_ref,\n        loc_list_from_tree, fortran_common): Likewise.\n        * fold-const.c (optimize_bit_field_compare,\n        decode_field_reference, fold_unary_loc, fold_comparison,\n        split_address_to_core_and_offset): Likewise.\n        * gimple-laddress.c (execute): Likewise.\n        * gimple-ssa-strength-reduction.c (slsr_process_ref): Likewise.\n        * gimplify.c (gimplify_scan_omp_clauses): Likewise.\n        * hsa-gen.c (gen_hsa_addr): Likewise.\n        * simplifx-rtx.c (delegitimize_mem_from_attrs): Likewise.\n        * tsan.c (instrument_expr): Likewise.\n        * ubsan.c (instrument_bool_enum_load, instrument_object_size): Likewise.\n        * tree.c (verify_type_variant): Remove handling of TYPE_ALIGN_OK.\n        * tree-affine.c (tree_to_aff_combination,\n        get_inner_reference_aff): Adjust calls to get_inner_reference.\n        * tree-data-ref.c (split_constant_offset_1,\n        dr_analyze_innermost): Likewise.\n        * tree-scalar-evolution.c (interpret_rhs_expr): Likewise.\n        * tree-sra.c (ipa_sra_check_caller): Likewise.\n        * tree-ssa-loop-ivopts.c (split_address_cost): Likewise.\n        * tree-ssa-math-opts.c (find_bswap_or_nop_load,\n        bswap_replace): Likewise.\n        * tree-vect-data-refs.c (vect_check_gather,\n        vect_analyze_data_refs): Likewise.\n        * config/mips/mips.c (r10k_safe_mem_expr_p): Likewise.\n        * config/pa/pa.c (pa_emit_move_sequence): Remove handling of\n        TYPE_ALIGN_OK.\n\nada:\n2016-07-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Convert TYPE_ALIGN_OK to a TYPE_LANG_FLAG.\n        * gcc-interface/ada-tree.h (TYPE_ALIGN_OK): Define.\n        * gcc-interface/trans.c (Attribute_to_gnu): Adjust call to\n        get_inner_reference.\n        * gcc-interface/utils2.c (build_unary_op): Likewise.\n\nFrom-SVN: r238210", "tree": {"sha": "a354fec980b4a777495acfd3885fe5e1fdd28ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a354fec980b4a777495acfd3885fe5e1fdd28ff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b75a48d2a2d0a4d65708da7402f238a10da115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b75a48d2a2d0a4d65708da7402f238a10da115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b75a48d2a2d0a4d65708da7402f238a10da115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b75a48d2a2d0a4d65708da7402f238a10da115/comments", "author": null, "committer": null, "parents": [{"sha": "9e34db2e031f28f7cc622b6955c241b47bbc081e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e34db2e031f28f7cc622b6955c241b47bbc081e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e34db2e031f28f7cc622b6955c241b47bbc081e"}], "stats": {"total": 244, "additions": 124, "deletions": 120}, "files": [{"sha": "8ddd878527a4b5c9379dda730918aa6e6d23dcba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1,3 +1,53 @@\n+2016-07-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tConvert TYPE_ALIGN_OK to a TYPE_LANG_FLAG.\n+\t* tree-core.h (tree_base::nothrow_flag): Adjust comment.\n+\t(tree_type_common::lang_flag_7): New.\n+\t(tree_type_common::spare): Reduce size.\n+\t* tree.h (TYPE_ALIGN_OK): Remove.\n+\t(TYPE_LANG_FLAG_7): New.\n+\t(get_inner_reference): Adjust header.\n+\t* print-tree.c (print_node): Adjust.\n+\t* expr.c (get_inner_reference): Remove parameter keep_aligning.\n+\t(get_bit_range, expand_assignment, expand_expr_addr_expr_1): Adjust\n+\tcalls to get_inner_reference.\n+\t(expand_expr_real_1): Adjust call to get_inner_reference.  Remove\n+\thandling of TYPE_ALIGN_OK.\n+\t* builtins.c (get_object_alignment_2): Adjust call to\n+\tget_inner_reference.  Remove handling of VIEW_CONVERT_EXPR.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove handling of\n+\tTYPE_ALIGN_OK.\n+\t* asan.c (instrument_derefs): Adjust calls to get_inner_reference.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* dbxout.c (dbxout_expand_expr): Likewise.\n+\t* dwarf2out.c (loc_list_for_address_of_addr_expr_of_indirect_ref,\n+\tloc_list_from_tree, fortran_common): Likewise.\n+\t* fold-const.c (optimize_bit_field_compare,\n+\tdecode_field_reference, fold_unary_loc, fold_comparison,\n+\tsplit_address_to_core_and_offset): Likewise.\n+\t* gimple-laddress.c (execute): Likewise.\n+\t* gimple-ssa-strength-reduction.c (slsr_process_ref): Likewise.\n+\t* gimplify.c (gimplify_scan_omp_clauses): Likewise.\n+\t* hsa-gen.c (gen_hsa_addr): Likewise.\n+\t* simplifx-rtx.c (delegitimize_mem_from_attrs): Likewise.\n+\t* tsan.c (instrument_expr): Likewise.\n+\t* ubsan.c (instrument_bool_enum_load, instrument_object_size): Likewise.\n+\t* tree.c (verify_type_variant): Remove handling of TYPE_ALIGN_OK.\n+\t* tree-affine.c (tree_to_aff_combination,\n+\tget_inner_reference_aff): Adjust calls to get_inner_reference.\n+\t* tree-data-ref.c (split_constant_offset_1,\n+\tdr_analyze_innermost): Likewise.\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): Likewise.\n+\t* tree-sra.c (ipa_sra_check_caller): Likewise.\n+\t* tree-ssa-loop-ivopts.c (split_address_cost): Likewise.\n+\t* tree-ssa-math-opts.c (find_bswap_or_nop_load,\n+\tbswap_replace): Likewise.\n+\t* tree-vect-data-refs.c (vect_check_gather,\n+\tvect_analyze_data_refs): Likewise.\n+\t* config/mips/mips.c (r10k_safe_mem_expr_p): Likewise.\n+\t* config/pa/pa.c (pa_emit_move_sequence): Remove handling of\n+\tTYPE_ALIGN_OK.\n+\n 2016-07-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (selftest-valgrind): New phony target.\n@@ -32,7 +82,7 @@\n \t* lra-constraints.c (process_alt_operands): Check combination of\n \treg class and mode.\n \n-2016-06-25  Jason Merrill  <jason@redhat.com>\n+2016-07-08  Jason Merrill  <jason@redhat.com>\n \t    Richard Biener  <rguenther@suse.de>\n \n \tP0145: Refining Expression Order for C++."}, {"sha": "ba624df07f1d142d92e090af8648df8eb3c83482", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1,3 +1,11 @@\n+2016-07-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tConvert TYPE_ALIGN_OK to a TYPE_LANG_FLAG.\n+\t* gcc-interface/ada-tree.h (TYPE_ALIGN_OK): Define.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Adjust call to\n+\tget_inner_reference.\n+\t* gcc-interface/utils2.c (build_unary_op): Likewise.\n+\n 2016-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (add_decl_expr): Minor tweak."}, {"sha": "a3d38b1b22e9fd2415fd4451f78919947c87451a", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -199,6 +199,9 @@ do {\t\t\t\t\t\t\t \\\n    alignment value the type ought to have.  */\n #define TYPE_MAX_ALIGN(NODE) (TYPE_PRECISION (RECORD_OR_UNION_CHECK (NODE)))\n \n+/* True if objects of tagged types are guaranteed to be properly aligned.  */\n+#define TYPE_ALIGN_OK(NODE) TYPE_LANG_FLAG_7 (NODE)\n+\n /* For an UNCONSTRAINED_ARRAY_TYPE, this is the record containing both the\n    template and the object.\n "}, {"sha": "57d5235c4a5ce77b507c11e0597be7074feb8b7f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -2181,7 +2181,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t\t  && TREE_CODE (gnu_prefix) == FIELD_DECL));\n \n \tget_inner_reference (gnu_prefix, &bitsize, &bitpos, &gnu_offset,\n-\t\t\t     &mode, &unsignedp, &reversep, &volatilep, false);\n+\t\t\t     &mode, &unsignedp, &reversep, &volatilep);\n \n \tif (TREE_CODE (gnu_prefix) == COMPONENT_REF)\n \t  {"}, {"sha": "1e5b3ef6611045211cdaefef19491a004097e041", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1419,7 +1419,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \n \t      inner = get_inner_reference (operand, &bitsize, &bitpos, &offset,\n \t\t\t\t\t   &mode, &unsignedp, &reversep,\n-\t\t\t\t\t   &volatilep, false);\n+\t\t\t\t\t   &volatilep);\n \n \t      /* If INNER is a padding type whose field has a self-referential\n \t\t size, convert to that inner type.  We know the offset is zero"}, {"sha": "0900634f8ee5da48c2a0097761547edaf7cfad7d", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1793,7 +1793,7 @@ instrument_derefs (gimple_stmt_iterator *iter, tree t,\n   machine_mode mode;\n   int unsignedp, reversep, volatilep = 0;\n   tree inner = get_inner_reference (t, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t    &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t    &unsignedp, &reversep, &volatilep);\n \n   if (TREE_CODE (t) == COMPONENT_REF\n       && DECL_BIT_FIELD_REPRESENTATIVE (TREE_OPERAND (t, 1)) != NULL_TREE)"}, {"sha": "5f1fd82be926b298ededa0092cc3f6bd0029b0b0", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -259,7 +259,7 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n   /* Get the innermost object and the constant (bitpos) and possibly\n      variable (offset) offset of the access.  */\n   exp = get_inner_reference (exp, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t     &unsignedp, &reversep, &volatilep, true);\n+\t\t\t     &unsignedp, &reversep, &volatilep);\n \n   /* Extract alignment information from the innermost object and\n      possibly adjust bitpos and offset.  */\n@@ -289,10 +289,6 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       align = DECL_ALIGN (exp);\n       known_alignment = true;\n     }\n-  else if (TREE_CODE (exp) == VIEW_CONVERT_EXPR)\n-    {\n-      align = TYPE_ALIGN (TREE_TYPE (exp));\n-    }\n   else if (TREE_CODE (exp) == INDIRECT_REF\n \t   || TREE_CODE (exp) == MEM_REF\n \t   || TREE_CODE (exp) == TARGET_MEM_REF)"}, {"sha": "43a655b01e512dda0dadd422dc6b133c870205b1", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -4444,7 +4444,7 @@ expand_debug_expr (tree exp)\n \tint reversep, volatilep = 0;\n \ttree tem\n \t  = get_inner_reference (exp, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t &unsignedp, &reversep, &volatilep);\n \trtx orig_op0;\n \n \tif (bitsize == 0)"}, {"sha": "d9edb39c302a40c8f231e1eb73c30a2aa5a71501", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -17470,7 +17470,7 @@ r10k_safe_mem_expr_p (tree expr, unsigned HOST_WIDE_INT offset)\n   int unsigned_p, reverse_p, volatile_p;\n \n   inner = get_inner_reference (expr, &bitsize, &bitoffset, &var_offset, &mode,\n-\t\t\t       &unsigned_p, &reverse_p, &volatile_p, false);\n+\t\t\t       &unsigned_p, &reverse_p, &volatile_p);\n   if (!DECL_P (inner) || !DECL_SIZE_UNIT (inner) || var_offset)\n     return false;\n "}, {"sha": "2b5a579b34f5ebff46a5917b53ba386b3ed36b8f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1929,16 +1929,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t\t  type = strip_array_types (type);\n \n \t\t  if (POINTER_TYPE_P (type))\n-\t\t    {\n-\t\t      int align;\n-\n-\t\t      type = TREE_TYPE (type);\n-\t\t      /* Using TYPE_ALIGN_OK is rather conservative as\n-\t\t\t only the ada frontend actually sets it.  */\n-\t\t      align = (TYPE_ALIGN_OK (type) ? TYPE_ALIGN (type)\n-\t\t\t       : BITS_PER_UNIT);\n-\t\t      mark_reg_pointer (operand0, align);\n-\t\t    }\n+\t\t    mark_reg_pointer (operand0, BITS_PER_UNIT);\n \t\t}\n \t    }\n "}, {"sha": "da0987f0f43be65c3f576267760cfefed24bdcbb", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -2485,7 +2485,7 @@ dbxout_expand_expr (tree expr)\n \trtx x;\n \n \ttem = get_inner_reference (expr, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, true);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n \n \tx = dbxout_expand_expr (tem);\n \tif (x == NULL || !MEM_P (x))"}, {"sha": "4c0332f86e998272de2e6f2b3c8c917e0c0387e4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -15136,7 +15136,7 @@ loc_list_for_address_of_addr_expr_of_indirect_ref (tree loc, bool toplev,\n \n   obj = get_inner_reference (TREE_OPERAND (loc, 0),\n \t\t\t     &bitsize, &bitpos, &offset, &mode,\n-\t\t\t     &unsignedp, &reversep, &volatilep, false);\n+\t\t\t     &unsignedp, &reversep, &volatilep);\n   STRIP_NOPS (obj);\n   if (bitpos % BITS_PER_UNIT)\n     {\n@@ -16073,7 +16073,7 @@ loc_list_from_tree_1 (tree loc, int want_address,\n \tint unsignedp, reversep, volatilep = 0;\n \n \tobj = get_inner_reference (loc, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n \n \tgcc_assert (obj != loc);\n \n@@ -17548,7 +17548,7 @@ fortran_common (tree decl, HOST_WIDE_INT *value)\n     return NULL_TREE;\n \n   cvar = get_inner_reference (val_expr, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t      &unsignedp, &reversep, &volatilep, true);\n+\t\t\t      &unsignedp, &reversep, &volatilep);\n \n   if (cvar == NULL_TREE\n       || TREE_CODE (cvar) != VAR_DECL"}, {"sha": "055cee9e7a02fe255e8b09781f0aee4ce158b81f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1813,9 +1813,9 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t able to simply always use TYPE_ALIGN?  */\n     }\n \n-  /* We can set the alignment from the type if we are making an object,\n-     this is an INDIRECT_REF, or if TYPE_ALIGN_OK.  */\n-  if (objectp || TREE_CODE (t) == INDIRECT_REF || TYPE_ALIGN_OK (type))\n+  /* We can set the alignment from the type if we are making an object or if\n+     this is an INDIRECT_REF.  */\n+  if (objectp || TREE_CODE (t) == INDIRECT_REF)\n     attrs.align = MAX (attrs.align, TYPE_ALIGN (type));\n \n   /* If the size is known, we can set that.  */"}, {"sha": "fbc91ad667fd46bfe4c6e5e8812ee12019d9ea77", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 43, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -4828,7 +4828,7 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n       int unsignedp, reversep, volatilep = 0;\n       get_inner_reference (TREE_OPERAND (exp, 0), &rbitsize, &rbitpos,\n \t\t\t   &roffset, &rmode, &unsignedp, &reversep,\n-\t\t\t   &volatilep, false);\n+\t\t\t   &volatilep);\n       if ((rbitpos % BITS_PER_UNIT) != 0)\n \t{\n \t  *bitstart = *bitend = 0;\n@@ -4984,7 +4984,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \n       push_temp_slots ();\n       tem = get_inner_reference (to, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t &unsignedp, &reversep, &volatilep, true);\n+\t\t\t\t &unsignedp, &reversep, &volatilep);\n \n       /* Make sure bitpos is not negative, it can wreak havoc later.  */\n       if (bitpos < 0)\n@@ -6971,27 +6971,13 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \n    If the field describes a variable-sized object, *PMODE is set to\n    BLKmode and *PBITSIZE is set to -1.  An access cannot be made in\n-   this case, but the address of the object can be found.\n-\n-   If KEEP_ALIGNING is true and the target is STRICT_ALIGNMENT, we don't\n-   look through nodes that serve as markers of a greater alignment than\n-   the one that can be deduced from the expression.  These nodes make it\n-   possible for front-ends to prevent temporaries from being created by\n-   the middle-end on alignment considerations.  For that purpose, the\n-   normal operating mode at high-level is to always pass FALSE so that\n-   the ultimate containing object is really returned; moreover, the\n-   associated predicate handled_component_p will always return TRUE\n-   on these nodes, thus indicating that they are essentially handled\n-   by get_inner_reference.  TRUE should only be passed when the caller\n-   is scanning the expression in order to build another representation\n-   and specifically knows how to handle these nodes; as such, this is\n-   the normal operating mode in the RTL expanders.  */\n+   this case, but the address of the object can be found.  */\n \n tree\n get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t\t     HOST_WIDE_INT *pbitpos, tree *poffset,\n \t\t     machine_mode *pmode, int *punsignedp,\n-\t\t     int *preversep, int *pvolatilep, bool keep_aligning)\n+\t\t     int *preversep, int *pvolatilep)\n {\n   tree size_tree = 0;\n   machine_mode mode = VOIDmode;\n@@ -7113,14 +7099,6 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t  break;\n \n \tcase VIEW_CONVERT_EXPR:\n-\t  if (keep_aligning && STRICT_ALIGNMENT\n-\t      && (TYPE_ALIGN (TREE_TYPE (exp))\n-\t       > TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t      && (TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0)))\n-\t\t  < BIGGEST_ALIGNMENT)\n-\t      && (TYPE_ALIGN_OK (TREE_TYPE (exp))\n-\t\t  || TYPE_ALIGN_OK (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n-\t    goto done;\n \t  break;\n \n \tcase MEM_REF:\n@@ -7839,7 +7817,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, machine_mode tmode,\n \t they won't change the final object whose address will be returned\n \t (they actually exist only for that purpose).  */\n       inner = get_inner_reference (exp, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n       break;\n     }\n \n@@ -10369,7 +10347,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tint reversep, volatilep = 0, must_force_mem;\n \ttree tem\n \t  = get_inner_reference (exp, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t &unsignedp, &reversep, &volatilep, true);\n+\t\t\t\t &unsignedp, &reversep, &volatilep);\n \trtx orig_op0, memloc;\n \tbool clear_mem_expr = false;\n \n@@ -10767,7 +10745,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tint unsignedp, reversep, volatilep = 0;\n \ttree tem\n \t  = get_inner_reference (treeop0, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t &unsignedp, &reversep, &volatilep, true);\n+\t\t\t\t &unsignedp, &reversep, &volatilep);\n \trtx orig_op0;\n \n \t/* ??? We should work harder and deal with non-zero offsets.  */\n@@ -10878,20 +10856,11 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t{\n \t  enum insn_code icode;\n \n-\t  if (TYPE_ALIGN_OK (type))\n-\t    {\n-\t      /* ??? Copying the MEM without substantially changing it might\n-\t\t run afoul of the code handling volatile memory references in\n-\t\t store_expr, which assumes that TARGET is returned unmodified\n-\t\t if it has been used.  */\n-\t      op0 = copy_rtx (op0);\n-\t      set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));\n-\t    }\n-\t  else if (modifier != EXPAND_WRITE\n-\t\t   && modifier != EXPAND_MEMORY\n-\t\t   && !inner_reference_p\n-\t\t   && mode != BLKmode\n-\t\t   && MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode))\n+\t  if (modifier != EXPAND_WRITE\n+\t      && modifier != EXPAND_MEMORY\n+\t      && !inner_reference_p\n+\t      && mode != BLKmode\n+\t      && MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode))\n \t    {\n \t      /* If the target does have special handling for unaligned\n \t\t loads of mode then use them.  */"}, {"sha": "40a8de1c93d607960a6319162efab43bd971f55b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -3880,7 +3880,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n      do anything if the inner expression is a PLACEHOLDER_EXPR since we\n      then will no longer be able to replace it.  */\n   linner = get_inner_reference (lhs, &lbitsize, &lbitpos, &offset, &lmode,\n-\t\t\t\t&lunsignedp, &lreversep, &lvolatilep, false);\n+\t\t\t\t&lunsignedp, &lreversep, &lvolatilep);\n   if (linner == lhs || lbitsize == GET_MODE_BITSIZE (lmode) || lbitsize < 0\n       || offset != 0 || TREE_CODE (linner) == PLACEHOLDER_EXPR || lvolatilep)\n     return 0;\n@@ -3893,7 +3893,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n \tsizes, signedness and storage order are the same.  */\n      rinner\n        = get_inner_reference (rhs, &rbitsize, &rbitpos, &offset, &rmode,\n-\t\t\t      &runsignedp, &rreversep, &rvolatilep, false);\n+\t\t\t      &runsignedp, &rreversep, &rvolatilep);\n \n      if (rinner == rhs || lbitpos != rbitpos || lbitsize != rbitsize\n \t || lunsignedp != runsignedp || lreversep != rreversep || offset != 0\n@@ -4075,7 +4075,7 @@ decode_field_reference (location_t loc, tree *exp_, HOST_WIDE_INT *pbitsize,\n     }\n \n   inner = get_inner_reference (exp, pbitsize, pbitpos, &offset, pmode,\n-\t\t\t       punsignedp, preversep, pvolatilep, false);\n+\t\t\t       punsignedp, preversep, pvolatilep);\n   if ((inner == exp && and_mask == 0)\n       || *pbitsize < 0 || offset != 0\n       || TREE_CODE (inner) == PLACEHOLDER_EXPR)\n@@ -7730,7 +7730,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t  tree base\n \t    = get_inner_reference (TREE_OPERAND (op0, 0), &bitsize, &bitpos,\n \t\t\t\t   &offset, &mode, &unsignedp, &reversep,\n-\t\t\t\t   &volatilep, false);\n+\t\t\t\t   &volatilep);\n \t  /* If the reference was to a (constant) zero offset, we can use\n \t     the address of the base if it has the same base type\n \t     as the result type and the pointer type is unqualified.  */\n@@ -8334,7 +8334,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t  base0\n \t    = get_inner_reference (TREE_OPERAND (arg0, 0),\n \t\t\t\t   &bitsize, &bitpos0, &offset0, &mode,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n \t  if (TREE_CODE (base0) == INDIRECT_REF)\n \t    base0 = TREE_OPERAND (base0, 0);\n \t  else\n@@ -8349,8 +8349,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t      base0\n \t\t= get_inner_reference (TREE_OPERAND (base0, 0),\n \t\t\t\t       &bitsize, &bitpos0, &offset0, &mode,\n-\t\t\t\t       &unsignedp, &reversep, &volatilep,\n-\t\t\t\t       false);\n+\t\t\t\t       &unsignedp, &reversep, &volatilep);\n \t      if (TREE_CODE (base0) == INDIRECT_REF)\n \t\tbase0 = TREE_OPERAND (base0, 0);\n \t      else\n@@ -8381,7 +8380,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t  base1\n \t    = get_inner_reference (TREE_OPERAND (arg1, 0),\n \t\t\t\t   &bitsize, &bitpos1, &offset1, &mode,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n \t  if (TREE_CODE (base1) == INDIRECT_REF)\n \t    base1 = TREE_OPERAND (base1, 0);\n \t  else\n@@ -8396,8 +8395,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t      base1\n \t\t= get_inner_reference (TREE_OPERAND (base1, 0),\n \t\t\t\t       &bitsize, &bitpos1, &offset1, &mode,\n-\t\t\t\t       &unsignedp, &reversep, &volatilep,\n-\t\t\t\t       false);\n+\t\t\t\t       &unsignedp, &reversep, &volatilep);\n \t      if (TREE_CODE (base1) == INDIRECT_REF)\n \t\tbase1 = TREE_OPERAND (base1, 0);\n \t      else\n@@ -14295,7 +14293,7 @@ split_address_to_core_and_offset (tree exp,\n     {\n       core = get_inner_reference (TREE_OPERAND (exp, 0), &bitsize, pbitpos,\n \t\t\t\t  poffset, &mode, &unsignedp, &reversep,\n-\t\t\t\t  &volatilep, false);\n+\t\t\t\t  &volatilep);\n       core = build_fold_addr_expr_loc (loc, core);\n     }\n   else"}, {"sha": "4cc57cf17d27158e2d4d87c9b5aaa4fa3e233643", "filename": "gcc/gimple-laddress.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fgimple-laddress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fgimple-laddress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-laddress.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -105,7 +105,7 @@ pass_laddress::execute (function *fun)\n \t  int volatilep = 0, reversep, unsignedp = 0;\n \t  base = get_inner_reference (TREE_OPERAND (expr, 0), &bitsize,\n \t\t\t\t      &bitpos, &offset, &mode, &unsignedp,\n-\t\t\t\t      &reversep, &volatilep, false);\n+\t\t\t\t      &reversep, &volatilep);\n \t  gcc_assert (base != NULL_TREE && (bitpos % BITS_PER_UNIT) == 0);\n \t  if (offset != NULL_TREE)\n \t    {"}, {"sha": "6e277e7ecde11914911b64c39c7613cbbb973770", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -987,7 +987,7 @@ slsr_process_ref (gimple *gs)\n     return;\n \n   base = get_inner_reference (ref_expr, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t      &unsignedp, &reversep, &volatilep, false);\n+\t\t\t      &unsignedp, &reversep, &volatilep);\n   if (reversep)\n     return;\n   widest_int index = bitpos;"}, {"sha": "2ea1e571bdd39f8594dde17d487f5d89000fa690", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -7071,7 +7071,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t    base = TREE_OPERAND (base, 0);\n \t\t  base = get_inner_reference (base, &bitsize, &bitpos, &offset,\n \t\t\t\t\t      &mode, &unsignedp, &reversep,\n-\t\t\t\t\t      &volatilep, false);\n+\t\t\t\t\t      &volatilep);\n \t\t  tree orig_base = base;\n \t\t  if ((TREE_CODE (base) == INDIRECT_REF\n \t\t       || (TREE_CODE (base) == MEM_REF\n@@ -7207,8 +7207,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t\t    base = get_inner_reference (base, &bitsize2,\n \t\t\t\t\t\t\t&bitpos2, &offset2,\n \t\t\t\t\t\t\t&mode, &unsignedp,\n-\t\t\t\t\t\t\t&reversep, &volatilep,\n-\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\t\t\t&reversep, &volatilep);\n \t\t\t    if ((TREE_CODE (base) == INDIRECT_REF\n \t\t\t\t || (TREE_CODE (base) == MEM_REF\n \t\t\t\t     && integer_zerop (TREE_OPERAND (base,"}, {"sha": "6cf153843636e1b1a595e1262c19e66a780726b5", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -2045,7 +2045,7 @@ gen_hsa_addr (tree ref, hsa_bb *hbb, HOST_WIDE_INT *output_bitsize = NULL,\n       int unsignedp, volatilep, preversep;\n \n       ref = get_inner_reference (ref, &bitsize, &bitpos, &varoffset, &mode,\n-\t\t\t\t &unsignedp, &preversep, &volatilep, false);\n+\t\t\t\t &unsignedp, &preversep, &volatilep);\n \n       offset = bitpos;\n       offset = wi::rshift (offset, LOG2_BITS_PER_UNIT, SIGNED);"}, {"sha": "468f1ff49e1deca66630877bd19e2289516fc588", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -316,7 +316,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   if (TREE_USED (node))\n     fputs (\" used\", file);\n   if (TREE_NOTHROW (node))\n-    fputs (TYPE_P (node) ? \" align-ok\" : \" nothrow\", file);\n+    fputs (\" nothrow\", file);\n   if (TREE_PUBLIC (node))\n     fputs (\" public\", file);\n   if (TREE_PRIVATE (node))\n@@ -601,6 +601,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \tfputs (\" type_5\", file);\n       if (TYPE_LANG_FLAG_6 (node))\n \tfputs (\" type_6\", file);\n+      if (TYPE_LANG_FLAG_7 (node))\n+\tfputs (\" type_7\", file);\n \n       mode = TYPE_MODE (node);\n       fprintf (file, \" %s\", GET_MODE_NAME (mode));"}, {"sha": "f5c530a45032db8d1ac8c99f3bdbb61f51593c60", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -305,7 +305,7 @@ delegitimize_mem_from_attrs (rtx x)\n \n \t    decl\n \t      = get_inner_reference (decl, &bitsize, &bitpos, &toffset, &mode,\n-\t\t\t\t     &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t     &unsignedp, &reversep, &volatilep);\n \t    if (bitsize != GET_MODE_BITSIZE (mode)\n \t\t|| (bitpos % BITS_PER_UNIT)\n \t\t|| (toffset && !tree_fits_shwi_p (toffset)))"}, {"sha": "5c4b52101314477ae96de9670209e7cd46178be2", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -318,7 +318,7 @@ tree_to_aff_combination (tree expr, tree type, aff_tree *comb)\n \t}\n       core = get_inner_reference (TREE_OPERAND (expr, 0), &bitsize, &bitpos,\n \t\t\t\t  &toffset, &mode, &unsignedp, &reversep,\n-\t\t\t\t  &volatilep, false);\n+\t\t\t\t  &volatilep);\n       if (bitpos % BITS_PER_UNIT != 0)\n \tbreak;\n       aff_combination_const (comb, type, bitpos / BITS_PER_UNIT);\n@@ -888,7 +888,7 @@ get_inner_reference_aff (tree ref, aff_tree *addr, widest_int *size)\n   int uns, rev, vol;\n   aff_tree tmp;\n   tree base = get_inner_reference (ref, &bitsize, &bitpos, &toff, &mode,\n-\t\t\t\t   &uns, &rev, &vol, false);\n+\t\t\t\t   &uns, &rev, &vol);\n   tree base_addr = build_fold_addr_expr (base);\n \n   /* ADDR = &BASE + TOFF + BITPOS / BITS_PER_UNIT.  */"}, {"sha": "6e8595c3855c69d8a3f4673e2d5e59112db0d13a", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1154,9 +1154,6 @@ struct GTY(()) tree_base {\n            CALL_EXPR\n            FUNCTION_DECL\n \n-       TYPE_ALIGN_OK in\n-           all types\n-\n        TREE_THIS_NOTRAP in\n           INDIRECT_REF, MEM_REF, TARGET_MEM_REF, ARRAY_REF, ARRAY_RANGE_REF\n \n@@ -1447,14 +1444,15 @@ struct GTY(()) tree_type_common {\n   unsigned lang_flag_4 : 1;\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n+  unsigned lang_flag_7 : 1;\n \n   /* TYPE_ALIGN in log2; this has to be large enough to hold values\n      of the maximum of BIGGEST_ALIGNMENT and MAX_OFILE_ALIGNMENT,\n      the latter being usually the larger.  For ELF it is 8<<28,\n      so we need to store the value 32 (not 31, as we need the zero\n      as well), hence six bits.  */\n   unsigned align : 6;\n-  unsigned spare : 26;\n+  unsigned spare : 25;\n   alias_set_type alias_set;\n   tree pointer_to;\n   tree reference_to;"}, {"sha": "522ac2c4dc677b5f0debf390381db83cc2d255be", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -618,7 +618,7 @@ split_constant_offset_1 (tree type, tree op0, enum tree_code code, tree op1,\n \top0 = TREE_OPERAND (op0, 0);\n \tbase\n \t  = get_inner_reference (op0, &pbitsize, &pbitpos, &poffset, &pmode,\n-\t\t\t\t &punsignedp, &preversep, &pvolatilep, false);\n+\t\t\t\t &punsignedp, &preversep, &pvolatilep);\n \n \tif (pbitpos % BITS_PER_UNIT != 0)\n \t  return false;\n@@ -771,7 +771,7 @@ dr_analyze_innermost (struct data_reference *dr, struct loop *nest)\n     fprintf (dump_file, \"analyze_innermost: \");\n \n   base = get_inner_reference (ref, &pbitsize, &pbitpos, &poffset, &pmode,\n-\t\t\t      &punsignedp, &preversep, &pvolatilep, false);\n+\t\t\t      &punsignedp, &preversep, &pvolatilep);\n   gcc_assert (base != NULL_TREE);\n \n   if (pbitpos % BITS_PER_UNIT != 0)"}, {"sha": "ae5e907932868c158fd4bf5007e5a003b0dd4fa8", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1744,8 +1744,7 @@ interpret_rhs_expr (struct loop *loop, gimple *at_stmt,\n \n \t  base = get_inner_reference (TREE_OPERAND (rhs1, 0),\n \t\t\t\t      &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t      &unsignedp, &reversep, &volatilep,\n-\t\t\t\t      false);\n+\t\t\t\t      &unsignedp, &reversep, &volatilep);\n \n \t  if (TREE_CODE (base) == MEM_REF)\n \t    {"}, {"sha": "3c7e4c0c9ccf51615f28d656174364288798f15a", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -5230,7 +5230,7 @@ ipa_sra_check_caller (struct cgraph_node *node, void *data)\n \t  machine_mode mode;\n \t  int unsignedp, reversep, volatilep = 0;\n \t  get_inner_reference (arg, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t       &unsignedp, &reversep, &volatilep, false);\n+\t\t\t       &unsignedp, &reversep, &volatilep);\n \t  if (bitpos % BITS_PER_UNIT)\n \t    {\n \t      iscc->bad_arg_alignment = true;"}, {"sha": "f5f6e78bff06b1644249c460a3dcf6cdfbd706a8", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -4526,7 +4526,7 @@ split_address_cost (struct ivopts_data *data,\n   int unsignedp, reversep, volatilep;\n \n   core = get_inner_reference (addr, &bitsize, &bitpos, &toffset, &mode,\n-\t\t\t      &unsignedp, &reversep, &volatilep, false);\n+\t\t\t      &unsignedp, &reversep, &volatilep);\n \n   if (toffset != 0\n       || bitpos % BITS_PER_UNIT != 0"}, {"sha": "b93bcf348d18a1a68e1def466427815c85a6fd1f", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -2097,7 +2097,7 @@ find_bswap_or_nop_load (gimple *stmt, tree ref, struct symbolic_number *n)\n     return false;\n \n   base_addr = get_inner_reference (ref, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n \n   if (TREE_CODE (base_addr) == MEM_REF)\n     {\n@@ -2640,7 +2640,7 @@ bswap_replace (gimple *cur_stmt, gimple *src_stmt, tree fndecl,\n \t  tree offset;\n \n \t  get_inner_reference (src, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t       &unsignedp, &reversep, &volatilep, false);\n+\t\t\t       &unsignedp, &reversep, &volatilep);\n \t  if (n->range < (unsigned HOST_WIDE_INT) bitsize)\n \t    {\n \t      load_offset = (bitsize - n->range) / BITS_PER_UNIT;"}, {"sha": "353d1df25d494ee17370901b22942f29326f7c21", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -3239,7 +3239,7 @@ vect_check_gather_scatter (gimple *stmt, loop_vec_info loop_vinfo,\n      SSA_NAME OFF and put the loop invariants into a tree BASE\n      that can be gimplified before the loop.  */\n   base = get_inner_reference (base, &pbitsize, &pbitpos, &off, &pmode,\n-\t\t\t      &punsignedp, &reversep, &pvolatilep, false);\n+\t\t\t      &punsignedp, &reversep, &pvolatilep);\n   gcc_assert (base && (pbitpos % BITS_PER_UNIT) == 0 && !reversep);\n \n   if (TREE_CODE (base) == MEM_REF)\n@@ -3709,7 +3709,7 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n \n \t  outer_base = get_inner_reference (inner_base, &pbitsize, &pbitpos,\n \t\t\t\t\t    &poffset, &pmode, &punsignedp,\n-\t\t\t\t\t    &preversep, &pvolatilep, false);\n+\t\t\t\t\t    &preversep, &pvolatilep);\n \t  gcc_assert (outer_base != NULL_TREE);\n \n \t  if (pbitpos % BITS_PER_UNIT != 0)"}, {"sha": "768424459249b94d43f0afa15c478b089a5bc422", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -13204,7 +13204,6 @@ verify_type_variant (const_tree t, tree tv)\n     verify_variant_match (TYPE_REF_CAN_ALIAS_ALL);\n   /* FIXME: TYPE_SIZES_GIMPLIFIED may differs for Ada build.  */\n   verify_variant_match (TYPE_UNSIGNED);\n-  verify_variant_match (TYPE_ALIGN_OK);\n   verify_variant_match (TYPE_PACKED);\n   if (TREE_CODE (t) == REFERENCE_TYPE)\n     verify_variant_match (TYPE_REF_IS_RVALUE);"}, {"sha": "3dcc5600d8e9d945d256f8dc0015c09baeaf209a", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -916,14 +916,6 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* In a CALL_EXPR, means call was instrumented by Pointer Bounds Checker.  */\n #define CALL_WITH_BOUNDS_P(NODE) (CALL_EXPR_CHECK (NODE)->base.deprecated_flag)\n \n-/* In a type, nonzero means that all objects of the type are guaranteed by the\n-   language or front-end to be properly aligned, so we can indicate that a MEM\n-   of this type is aligned at least to the alignment of the type, even if it\n-   doesn't appear that it is.  We see this, for example, in object-oriented\n-   languages where a tag field may show this is an object of a more-aligned\n-   variant of the more generic type.  */\n-#define TYPE_ALIGN_OK(NODE) (TYPE_CHECK (NODE)->base.nothrow_flag)\n-\n /* Used in classes in C++.  */\n #define TREE_PRIVATE(NODE) ((NODE)->base.private_flag)\n /* Used in classes in C++. */\n@@ -1960,6 +1952,7 @@ extern machine_mode element_mode (const_tree t);\n #define TYPE_LANG_FLAG_4(NODE) (TYPE_CHECK (NODE)->type_common.lang_flag_4)\n #define TYPE_LANG_FLAG_5(NODE) (TYPE_CHECK (NODE)->type_common.lang_flag_5)\n #define TYPE_LANG_FLAG_6(NODE) (TYPE_CHECK (NODE)->type_common.lang_flag_6)\n+#define TYPE_LANG_FLAG_7(NODE) (TYPE_CHECK (NODE)->type_common.lang_flag_7)\n \n /* Used to keep track of visited nodes in tree traversals.  This is set to\n    0 by copy_node and make_node.  */\n@@ -5387,8 +5380,7 @@ extern bool complete_ctor_at_level_p (const_tree, HOST_WIDE_INT, const_tree);\n    look for the ultimate containing object, which is returned and specify\n    the access position and size.  */\n extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n-\t\t\t\t tree *, machine_mode *, int *, int *,\n-\t\t\t\t int *, bool);\n+\t\t\t\t tree *, machine_mode *, int *, int *, int *);\n \n extern tree build_personality_function (const char *);\n "}, {"sha": "aa95f4ee69e0eaf0e5a8e9651733c663b0d7ae76", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -110,7 +110,7 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n   machine_mode mode;\n   int unsignedp, reversep, volatilep = 0;\n   base = get_inner_reference (expr, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t      &unsignedp, &reversep, &volatilep, false);\n+\t\t\t      &unsignedp, &reversep, &volatilep);\n \n   /* No need to instrument accesses to decls that don't escape,\n      they can't escape to other threads then.  */"}, {"sha": "322fe30720a8e4ea65ce059f6a11cce1f4308485", "filename": "gcc/ubsan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b75a48d2a2d0a4d65708da7402f238a10da115/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=25b75a48d2a2d0a4d65708da7402f238a10da115", "patch": "@@ -1360,7 +1360,7 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   machine_mode mode;\n   int volatilep = 0, reversep, unsignedp = 0;\n   tree base = get_inner_reference (rhs, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t   &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t   &unsignedp, &reversep, &volatilep);\n   tree utype = build_nonstandard_integer_type (modebitsize, 1);\n \n   if ((TREE_CODE (base) == VAR_DECL && DECL_HARD_REGISTER (base))\n@@ -1781,7 +1781,7 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n   machine_mode mode;\n   int volatilep = 0, reversep, unsignedp = 0;\n   tree inner = get_inner_reference (t, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t    &unsignedp, &reversep, &volatilep, false);\n+\t\t\t\t    &unsignedp, &reversep, &volatilep);\n \n   if (bitpos % BITS_PER_UNIT != 0\n       || bitsize != size_in_bytes * BITS_PER_UNIT)"}]}