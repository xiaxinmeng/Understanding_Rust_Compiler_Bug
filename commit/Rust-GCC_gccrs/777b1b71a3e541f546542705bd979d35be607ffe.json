{"sha": "777b1b71a3e541f546542705bd979d35be607ffe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3YjFiNzFhM2U1NDFmNTQ2NTQyNzA1YmQ5NzlkMzViZTYwN2ZmZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-02-02T21:49:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-02-02T21:49:34Z"}, "message": "Missed from last commit.\n\nFrom-SVN: r24987", "tree": {"sha": "c7c03f0c59daa179abc1be58d4ac2c375ecb8047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7c03f0c59daa179abc1be58d4ac2c375ecb8047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/777b1b71a3e541f546542705bd979d35be607ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777b1b71a3e541f546542705bd979d35be607ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777b1b71a3e541f546542705bd979d35be607ffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777b1b71a3e541f546542705bd979d35be607ffe/comments", "author": null, "committer": null, "parents": [{"sha": "0daa67d1d652bafcfb4130b9b8ad4471bd89405d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0daa67d1d652bafcfb4130b9b8ad4471bd89405d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0daa67d1d652bafcfb4130b9b8ad4471bd89405d"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "08858ad8d2fa737091961bdeb266af2081857d88", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777b1b71a3e541f546542705bd979d35be607ffe/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777b1b71a3e541f546542705bd979d35be607ffe/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=777b1b71a3e541f546542705bd979d35be607ffe", "patch": "@@ -2218,3 +2218,36 @@ insn_first_p (insn, reference)\n \treturn 0;\n     }\n }\n+\n+\n+/* Searches X for any reference to REGNO, returning the rtx of the\n+   reference found if any.  Otherwise, returns NULL_RTX.  */\n+\n+rtx\n+regno_use_in (regno, x)\n+     int regno;\n+     rtx x;\n+{\n+  register char *fmt;\n+  int i, j;\n+  rtx tem;\n+\n+  if (GET_CODE (x) == REG && REGNO (x) == regno)\n+    return x;\n+\n+  fmt = GET_RTX_FORMAT (GET_CODE (x));\n+  for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e')\n+\t{\n+\t  if ((tem = regno_use_in (regno, XEXP (x, i))))\n+\t    return tem;\n+\t}\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t  if ((tem = regno_use_in (regno , XVECEXP (x, i, j))))\n+\t    return tem;\n+    }\n+\n+  return NULL_RTX;\n+}"}]}