{"sha": "6c99a5a8f1a62976ff58d89034642f28128a2033", "node_id": "C_kwDOANBUbNoAKDZjOTlhNWE4ZjFhNjI5NzZmZjU4ZDg5MDM0NjQyZjI4MTI4YTIwMzM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-25T08:50:48Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-25T10:22:17Z"}, "message": "parser: Move outer attrs properly intoto AssignmentExpr\n\nAssignmentExpressions could not access their outer attributes properly,\nsince they were being eagerly moved into the `IdentifierExpr` type they\nare based on. The base `OperatorExpr` class would thus end up with an\nempty vector of outer attributes", "tree": {"sha": "552e0db021066676ec91f43242476edb1121b2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/552e0db021066676ec91f43242476edb1121b2ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c99a5a8f1a62976ff58d89034642f28128a2033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c99a5a8f1a62976ff58d89034642f28128a2033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c99a5a8f1a62976ff58d89034642f28128a2033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c99a5a8f1a62976ff58d89034642f28128a2033/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2249a4d5125689e9012a866537bade963317fab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2249a4d5125689e9012a866537bade963317fab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2249a4d5125689e9012a866537bade963317fab8"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "1966a590c94a6a8790b3e0bb4446ce5fd0c8e398", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c99a5a8f1a62976ff58d89034642f28128a2033/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c99a5a8f1a62976ff58d89034642f28128a2033/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=6c99a5a8f1a62976ff58d89034642f28128a2033", "patch": "@@ -704,8 +704,9 @@ class AssignmentExpr : public OperatorExpr\n \n   // Call OperatorExpr constructor to initialise left_expr\n   AssignmentExpr (std::unique_ptr<Expr> value_to_assign_to,\n-\t\t  std::unique_ptr<Expr> value_to_assign, Location locus)\n-    : OperatorExpr (std::move (value_to_assign_to), std::vector<Attribute> (),\n+\t\t  std::unique_ptr<Expr> value_to_assign,\n+\t\t  std::vector<Attribute> outer_attribs, Location locus)\n+    : OperatorExpr (std::move (value_to_assign_to), std::move (outer_attribs),\n \t\t    locus),\n       right_expr (std::move (value_to_assign))\n   {}"}, {"sha": "189074580aa8023c34f89f67fbea2287faabd4ca", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c99a5a8f1a62976ff58d89034642f28128a2033/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c99a5a8f1a62976ff58d89034642f28128a2033/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=6c99a5a8f1a62976ff58d89034642f28128a2033", "patch": "@@ -11694,7 +11694,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t  {\n \t    // should be expr without block\n \t    std::unique_ptr<AST::ExprWithoutBlock> expr\n-\t      = parse_expr_without_block ();\n+\t      = parse_expr_without_block (std::move (outer_attrs));\n \n \t    if (lexer.peek_token ()->get_id () == SEMICOLON)\n \t      {\n@@ -11739,7 +11739,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t  // FIXME: old code was good until composability was required\n \t  // return parse_path_based_stmt_or_expr(std::move(outer_attrs));\n \t  std::unique_ptr<AST::ExprWithoutBlock> expr\n-\t    = parse_expr_without_block ();\n+\t    = parse_expr_without_block (std::move (outer_attrs));\n \n \t  if (lexer.peek_token ()->get_id () == SEMICOLON)\n \t    {\n@@ -11762,7 +11762,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t * expression then make it statement if semi afterwards */\n \n \tstd::unique_ptr<AST::ExprWithoutBlock> expr\n-\t  = parse_expr_without_block ();\n+\t  = parse_expr_without_block (std::move (outer_attrs));\n \n \tif (lexer.peek_token ()->get_id () == SEMICOLON)\n \t  {\n@@ -12437,7 +12437,7 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n \n   // parse null denotation (unary part of expression)\n   std::unique_ptr<AST::Expr> expr\n-    = null_denotation (current_token, std::move (outer_attrs), restrictions);\n+    = null_denotation (current_token, {}, restrictions);\n \n   if (expr == nullptr)\n     {\n@@ -12452,8 +12452,8 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n       current_token = lexer.peek_token ();\n       lexer.skip_token ();\n \n-      expr = left_denotation (current_token, std::move (expr), AST::AttrVec (),\n-\t\t\t      restrictions);\n+      expr = left_denotation (current_token, std::move (expr),\n+\t\t\t      std::move (outer_attrs), restrictions);\n \n       if (expr == nullptr)\n \t{\n@@ -13786,7 +13786,7 @@ template <typename ManagedTokenSource>\n std::unique_ptr<AST::AssignmentExpr>\n Parser<ManagedTokenSource>::parse_assig_expr (\n   const_TokenPtr tok ATTRIBUTE_UNUSED, std::unique_ptr<AST::Expr> left,\n-  AST::AttrVec outer_attrs ATTRIBUTE_UNUSED, ParseRestrictions restrictions)\n+  AST::AttrVec outer_attrs, ParseRestrictions restrictions)\n {\n   // parse RHS (as tok has already been consumed in parse_expression)\n   std::unique_ptr<AST::Expr> right\n@@ -13799,7 +13799,8 @@ Parser<ManagedTokenSource>::parse_assig_expr (\n   Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::AssignmentExpr> (\n-    new AST::AssignmentExpr (std::move (left), std::move (right), locus));\n+    new AST::AssignmentExpr (std::move (left), std::move (right),\n+\t\t\t     std::move (outer_attrs), locus));\n }\n \n /* Returns the left binding power for the given CompoundAssignmentExpr type."}, {"sha": "581a29bb89d092227874737d7bc255f39ee47950", "filename": "gcc/testsuite/rust/execute/torture/cfg5.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c99a5a8f1a62976ff58d89034642f28128a2033/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c99a5a8f1a62976ff58d89034642f28128a2033/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs?ref=6c99a5a8f1a62976ff58d89034642f28128a2033", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+\n+fn main() -> i32 {\n+    let mut a = 0;\n+\n+    #[cfg(A)]\n+    a = 3;\n+\n+    #[cfg(B)]\n+    a = 40;\n+\n+    a - 3\n+}"}]}