{"sha": "050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUwZDNlMTNkOGIzY2E3ZjI2YzAxN2FhOThlMzJjZDg2NjUzYmVkNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-24T13:50:32Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-24T13:50:32Z"}, "message": "2003-03-24  Michael Koch  <koqnueror@gmx.de>\n\n\t* java/awt/ContainerOrderFocusTraversalPolicy.java\n\t(getFirstComponent): Implemented.\n\t(getLastComponent): Implemented.\n\t(getDefaultComponent): Implemented.\n\t(setImplicitDownCycleTraversal): Fixed implementation.\n\t* java/awt/Robot.java\n\t(Robot): Added documentation.\n\t* java/awt/Toolkit.java\n\t(getFontList): Deprecated.\n\t(getFontMetrics): Deprecated.\n\t(getPrintJob): Added documentation.\n\t(getSystemSelection): Added documentation.\n\t(getLockingKeyState): Added documentation.\n\t(setLockingKeyState): Added documentation.\n\t(createCustomCursor): Added documentation.\n\t(getBestCursorSize): Added documentation.\n\t(getMaximumCursorColors): Added documentation.\n\t(isFrameStateSupported): Added documentation.\n\nFrom-SVN: r64798", "tree": {"sha": "fe092331f090ab7028ada88711937e3affcc3050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe092331f090ab7028ada88711937e3affcc3050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/comments", "author": null, "committer": null, "parents": [{"sha": "3d6431d724aade8b479a5fc7864bd9bd4a855ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6431d724aade8b479a5fc7864bd9bd4a855ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6431d724aade8b479a5fc7864bd9bd4a855ef7"}], "stats": {"total": 186, "additions": 180, "deletions": 6}, "files": [{"sha": "a304c941f2f1ff079968da67abf9b664f8ec0bcf", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "patch": "@@ -1,3 +1,24 @@\n+2003-03-24  Michael Koch  <koqnueror@gmx.de>\n+\n+\t* java/awt/ContainerOrderFocusTraversalPolicy.java\n+\t(getFirstComponent): Implemented.\n+\t(getLastComponent): Implemented.\n+\t(getDefaultComponent): Implemented.\n+\t(setImplicitDownCycleTraversal): Fixed implementation.\n+\t* java/awt/Robot.java\n+\t(Robot): Added documentation.\n+\t* java/awt/Toolkit.java\n+\t(getFontList): Deprecated.\n+\t(getFontMetrics): Deprecated.\n+\t(getPrintJob): Added documentation.\n+\t(getSystemSelection): Added documentation.\n+\t(getLockingKeyState): Added documentation.\n+\t(setLockingKeyState): Added documentation.\n+\t(createCustomCursor): Added documentation.\n+\t(getBestCursorSize): Added documentation.\n+\t(getMaximumCursorColors): Added documentation.\n+\t(isFrameStateSupported): Added documentation.\n+\n 2003-03-24  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/RandomAccessFile.java:"}, {"sha": "ce4bdf8bc0eec515c8845258e3545508afe3c4f2", "filename": "libjava/java/awt/ContainerOrderFocusTraversalPolicy.java", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2Fjava%2Fawt%2FContainerOrderFocusTraversalPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2Fjava%2Fawt%2FContainerOrderFocusTraversalPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainerOrderFocusTraversalPolicy.java?ref=050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "patch": "@@ -104,6 +104,33 @@ public Component getFirstComponent(Container root)\n     if (root == null)\n       throw new IllegalArgumentException ();\n \n+    if (!root.isVisible ()\n+        || !root.isDisplayable ())\n+      return null;\n+\n+    if (accept (root))\n+      return root;\n+\n+    Component[] componentArray = root.getComponents ();\n+    \n+    for (int i = 0; i < componentArray.length; i++)\n+      {\n+        Component component = componentArray [i];\n+\t\n+        if (component instanceof Container)\n+          {\n+            Component result = getLastComponent ((Container) component);\n+\n+            if (result != null)\n+              return result;\n+          }\n+        else\n+          {\n+            if (accept (component))\n+              return component;\n+          }\n+      }\n+\n     return null;\n   }\n \n@@ -117,6 +144,33 @@ public Component getLastComponent(Container root)\n     if (root == null)\n       throw new IllegalArgumentException ();\n \n+    if (!root.isVisible ()\n+        || !root.isDisplayable ())\n+      return null;\n+\n+    if (accept (root))\n+      return root;\n+\n+    Component[] componentArray = root.getComponents ();\n+    \n+    for (int i = componentArray.length - 1; i >= 0; i++)\n+      {\n+        Component component = componentArray [i];\n+\t\n+        if (component instanceof Container)\n+          {\n+            Component result = getLastComponent ((Container) component);\n+\n+            if (result != null)\n+              return result;\n+          }\n+        else\n+          {\n+            if (accept (component))\n+              return component;\n+          }\n+      }\n+\n     return null;\n   }\n \n@@ -127,15 +181,12 @@ public Component getLastComponent(Container root)\n    */\n   public Component getDefaultComponent(Container root)\n   {\n-    if (root == null)\n-      throw new IllegalArgumentException ();\n-\n-    return null;\n+    return getFirstComponent (root);\n   }\n \n   public void setImplicitDownCycleTraversal(boolean value)\n   {\n-    boolean implicitDownCycleTraversal = value;\n+    implicitDownCycleTraversal = value;\n   }\n \n   public boolean getImplicitDownCycleTraversal()"}, {"sha": "cc0ab15c6e9c08e112c59311912d8095abbe0c81", "filename": "libjava/java/awt/Robot.java", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2Fjava%2Fawt%2FRobot.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2Fjava%2Fawt%2FRobot.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FRobot.java?ref=050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "patch": "@@ -45,66 +45,98 @@\n {\n   private boolean waitForIdle;\n   private int autoDelay;\n+  \n+  /**\n+   * Creates a <code>Robot</code> object.\n+   * \n+   * @exception AWTException If GraphicsEnvironment.isHeadless() returns true.\n+   * @exception SecurityException If createRobot permission is not granted.\n+   */\n   public Robot() throws AWTException\n   {\n     throw new Error(\"not implemented\");\n   }\n+\n+  /**\n+   * Creates a <code>Robot</code> object.\n+   * \n+   * @exception AWTException If GraphicsEnvironment.isHeadless() returns true.\n+   * @exception IllegalArgumentException If <code>screen</code> is not a screen\n+   * GraphicsDevice.\n+   * @exception SecurityException If createRobot permission is not granted.\n+   */\n   public Robot(GraphicsDevice screen) throws AWTException\n   {\n     this();\n   }\n+\n   public void mouseMove(int x, int y)\n   {\n   }\n+\n   public void mousePress(int buttons)\n   {\n   }\n+\n   public void mouseRelease(int buttons)\n   {\n   }\n+\n   public void mouseWheel(int wheelAmt)\n   {\n   }\n+\n   public void keyPress(int keycode)\n   {\n   }\n+\n   public void keyRelease(int keycode)\n   {\n   }\n+  \n   public Color getPixelColor(int x, int y)\n   {\n     return null;\n   }\n+\n   public BufferedImage createScreenCapture(Rectangle screen)\n   {\n     return null;\n   }\n+  \n   public boolean isAutoWaitForIdle()\n   {\n     return waitForIdle;\n   }\n+  \n   public void setAutoWaitForIdle(boolean value)\n   {\n     waitForIdle = value;\n   }\n+  \n   public int getAutoDelay()\n   {\n     return autoDelay;\n   }\n+  \n   public void setAutoDelay(int ms)\n   {\n     if (ms < 0 || ms > 60000)\n       throw new IllegalArgumentException();\n+    \n     autoDelay = ms;\n   }\n+\n   public void delay(int ms)\n   {\n     if (ms < 0 || ms > 60000)\n       throw new IllegalArgumentException();\n   }\n+\n   public void waitForIdle()\n   {\n   }\n+\n   public String toString()\n   {\n     return \"unimplemented\";"}, {"sha": "36615944a203d542cd5f7ea72d5842c1b8981085", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3e13d8b3ca7f26c017aa98e32cd86653bed4/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=050d3e13d8b3ca7f26c017aa98e32cd86653bed4", "patch": "@@ -448,6 +448,8 @@ public Insets getScreenInsets(GraphicsConfiguration gc)\n    * Returns the names of the available fonts.\n    *\n    * @return The names of the available fonts.\n+   *\n+   * @deprecated\n    */\n   public abstract String[] getFontList();\n \n@@ -457,6 +459,8 @@ public Insets getScreenInsets(GraphicsConfiguration gc)\n    * @param name The name of the font to return metrics for.\n    *\n    * @return The requested font metrics.\n+   *\n+   * @deprecated\n    */\n   public abstract FontMetrics getFontMetrics(Font name);\n \n@@ -597,12 +601,32 @@ public Image createImage(byte[] data)\n    *\n    * @return The requested print job, or <code>null</code> if the job\n    * was cancelled.\n+   *\n+   * @exception NullPointerException If frame is null,\n+   * or GraphicsEnvironment.isHeadless() returns true.\n+   * @exception SecurityException If this thread is not allowed to initiate\n+   * a print job request.\n    */\n   public abstract PrintJob getPrintJob(Frame frame, String title,\n                                        Properties props);\n \n-\n   /**\n+   * Returns a instance of <code>PrintJob</code> for the specified\n+   * arguments.\n+   *\n+   * @param frame The window initiating the print job.\n+   * @param title The print job title.\n+   * @param jobAttr A set of job attributes which will control the print job.\n+   * @param pageAttr A set of page attributes which will control the print job.\n+   *\n+   * @exception NullPointerException If frame is null, and either jobAttr is null\n+   * or jobAttr.getDialog() returns JobAttributes.DialogType.NATIVE.\n+   * @exception IllegalArgumentException If pageAttrspecifies differing cross\n+   * feed and feed resolutions, or when GraphicsEnvironment.isHeadless() returns\n+   * true.\n+   * @exception SecurityException If this thread is not allowed to initiate\n+   * a print job request.\n+   *\n    * @since 1.3\n    */\n   public PrintJob getPrintJob(Frame frame, String title,\n@@ -626,6 +650,8 @@ public PrintJob getPrintJob(Frame frame, String title,\n   public abstract Clipboard getSystemClipboard();\n \n   /**\n+   * Gets the singleton instance of the system selection as a Clipboard object.\n+   *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    *\n    * @since 1.4\n@@ -649,21 +675,42 @@ public int getMenuShortcutKeyMask()\n     return Event.CTRL_MASK;\n   }\n \n+  /**\n+   * Returns whether the given locking key on the keyboard is currently in its\n+   * \"on\" state.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   * @exception IllegalArgumentException If keyCode is not one of the valid keys.\n+   * @exception UnsupportedOperationException If the host system doesn't allow\n+   * getting the state of this key programmatically, or if the keyboard doesn't\n+   * have this key.\n+   */\n   public boolean getLockingKeyState(int keyCode)\n   {\n     if (keyCode != KeyEvent.VK_CAPS_LOCK\n         && keyCode != KeyEvent.VK_NUM_LOCK\n         && keyCode != KeyEvent.VK_SCROLL_LOCK)\n       throw new IllegalArgumentException();\n+    \n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Sets the state of the given locking key on the keyboard.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   * @exception IllegalArgumentException If keyCode is not one of the valid keys.\n+   * @exception UnsupportedOperationException If the host system doesn't allow\n+   * getting the state of this key programmatically, or if the keyboard doesn't\n+   * have this key.\n+   */\n   public void setLockingKeyState(int keyCode, boolean on)\n   {\n     if (keyCode != KeyEvent.VK_CAPS_LOCK\n         && keyCode != KeyEvent.VK_NUM_LOCK\n         && keyCode != KeyEvent.VK_SCROLL_LOCK)\n       throw new IllegalArgumentException();\n+    \n     throw new UnsupportedOperationException();\n   }\n \n@@ -697,24 +744,47 @@ protected static Container getNativeContainer(Component component)\n       }\n   }\n \n+  /**\n+   * Creates a new custom cursor object.\n+   *\n+   * @exception IndexOutOfBoundsException If the hotSpot values are outside\n+   * the bounds of the cursor.\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   */\n   public Cursor createCustomCursor(Image cursor, Point hotSpot, String name)\n   {\n     // Presumably the only reason this isn't abstract is for backwards\n     // compatibility? FIXME?\n     return null;\n   }\n \n+  /**\n+   * Returns the supported cursor dimension which is closest to the\n+   * desired sizes.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   */\n   public Dimension getBestCursorSize(int preferredWidth, int preferredHeight)\n   {\n     return new Dimension (0,0);\n   }\n \n+  /**\n+   * Returns the maximum number of colors the Toolkit supports in a custom\n+   * cursor palette.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   */\n   public int getMaximumCursorColors()\n   {\n     return 0;\n   }\n \n   /**\n+   * Returns whether Toolkit supports this state for Frames.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   * \n    * @since 1.4\n    */\n   public boolean isFrameStateSupported(int state)"}]}