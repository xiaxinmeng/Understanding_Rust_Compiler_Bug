{"sha": "9c78b944a868e858864f058edc672a334191cc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3OGI5NDRhODY4ZTg1ODg2NGYwNThlZGM2NzJhMzM0MTkxY2MyYQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-09-24T15:39:18Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2007-09-24T15:39:18Z"}, "message": "rs6000-protos.h (rs6000_emit_swrsqrtsf): Declare.\n\n\t* config/rs6000/rs6000-protos.h (rs6000_emit_swrsqrtsf): Declare.\n\t* config/rs6000/rs6000.opt (swdiv): Change option to ...\n\t(recip): this.\n\t* config/rs6000/rs6000.c (rs6000_builtin_reciprocal): New\n\tfunction.\n\t(TARGET_BUILTIN_RECIPROCAL): Use it.\n\t(rs6000_builtin_expand): Expand recip, recipf, and rsqrtf.\n\t(rs6000_init_builtins): Initialize recip, recipf, and rsqrtf.\n\t(rs6000_emit_swrsqrtsf): New.\n\t* config/rs6000/rs6000.h (rs6000_builtins): Add recip, recipf, and\n\trsqrtf. \n\t* config/rs6000/rs6000.md (UNSPEC_RSQRT): Define.\n\t(divsf3): Remove swdiv support.\n\t(recipsf3): New.\n\t(rsqrtsf2): New.\n\t(rsqrt_internal1): New.\n\t(divdf3): Remove swdiv support.\n\t(reciptdf3): New.\n\nFrom-SVN: r128719", "tree": {"sha": "cba47602080f01479272aef009c94899cd5da45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba47602080f01479272aef009c94899cd5da45f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c78b944a868e858864f058edc672a334191cc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c78b944a868e858864f058edc672a334191cc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c78b944a868e858864f058edc672a334191cc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c78b944a868e858864f058edc672a334191cc2a/comments", "author": null, "committer": null, "parents": [{"sha": "2dff8956e37c835db601f922cadc5b1229a0a6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dff8956e37c835db601f922cadc5b1229a0a6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dff8956e37c835db601f922cadc5b1229a0a6bd"}], "stats": {"total": 281, "additions": 242, "deletions": 39}, "files": [{"sha": "935f3033139c7024b606e0a34af21f6b42e99a8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c78b944a868e858864f058edc672a334191cc2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c78b944a868e858864f058edc672a334191cc2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c78b944a868e858864f058edc672a334191cc2a", "patch": "@@ -1,3 +1,24 @@\n+2007-09-24  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_emit_swrsqrtsf): Declare.\n+\t* config/rs6000/rs6000.opt (swdiv): Change option to ...\n+\t(recip): this.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_reciprocal): New\n+\tfunction.\n+\t(TARGET_BUILTIN_RECIPROCAL): Use it.\n+\t(rs6000_builtin_expand): Expand recip, recipf, and rsqrtf.\n+\t(rs6000_init_builtins): Initialize recip, recipf, and rsqrtf.\n+\t(rs6000_emit_swrsqrtsf): New.\n+\t* config/rs6000/rs6000.h (rs6000_builtins): Add recip, recipf, and\n+\trsqrtf. \n+\t* config/rs6000/rs6000.md (UNSPEC_RSQRT): Define.\n+\t(divsf3): Remove swdiv support.\n+\t(recipsf3): New.\n+\t(rsqrtsf2): New.\n+\t(rsqrt_internal1): New.\n+\t(divdf3): Remove swdiv support.\n+\t(reciptdf3): New.\n+\n 2007-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/33506"}, {"sha": "799a15ac0a4b2ef55edc3a263b9c35ff85e6670b", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9c78b944a868e858864f058edc672a334191cc2a", "patch": "@@ -89,6 +89,7 @@ extern void rs6000_split_compare_and_swapqhi (rtx, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_split_lock_test_and_set (rtx, rtx, rtx, rtx);\n extern void rs6000_emit_swdivsf (rtx, rtx, rtx);\n extern void rs6000_emit_swdivdf (rtx, rtx, rtx);\n+extern void rs6000_emit_swrsqrtsf (rtx, rtx);\n extern void output_toc (FILE *, rtx, int, enum machine_mode);\n extern void rs6000_initialize_trampoline (rtx, rtx, rtx);\n extern rtx rs6000_longcall_ref (rtx);"}, {"sha": "0e9db742af33bd24437a6391a726c371fa80658f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 153, "deletions": 6, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9c78b944a868e858864f058edc672a334191cc2a", "patch": "@@ -799,6 +799,7 @@ static int rs6000_sched_reorder (FILE *, int, rtx *, int *, int);\n static int rs6000_sched_reorder2 (FILE *, int, rtx *, int *, int);\n static int rs6000_use_sched_lookahead (void);\n static int rs6000_use_sched_lookahead_guard (rtx);\n+static tree rs6000_builtin_reciprocal (unsigned int, bool, bool);\n static tree rs6000_builtin_mask_for_load (void);\n static tree rs6000_builtin_mul_widen_even (tree);\n static tree rs6000_builtin_mul_widen_odd (tree);\n@@ -1213,6 +1214,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_USE_BLOCKS_FOR_CONSTANT_P\n #define TARGET_USE_BLOCKS_FOR_CONSTANT_P rs6000_use_blocks_for_constant_p\n \n+#undef TARGET_BUILTIN_RECIPROCAL\n+#define TARGET_BUILTIN_RECIPROCAL rs6000_builtin_reciprocal\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -8652,6 +8656,15 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   rtx ret;\n   bool success;\n \n+  if (fcode == RS6000_BUILTIN_RECIP)\n+      return rs6000_expand_binop_builtin (CODE_FOR_recipdf3, exp, target);    \n+\n+  if (fcode == RS6000_BUILTIN_RECIPF)\n+      return rs6000_expand_binop_builtin (CODE_FOR_recipsf3, exp, target);    \n+\n+  if (fcode == RS6000_BUILTIN_RSQRTF)\n+      return rs6000_expand_unop_builtin (CODE_FOR_rsqrtsf2, exp, target);    \n+\n   if (fcode == ALTIVEC_BUILTIN_MASK_FOR_LOAD\n       || fcode == ALTIVEC_BUILTIN_MASK_FOR_STORE)\n     {\n@@ -8858,6 +8871,31 @@ rs6000_init_builtins (void)\n     altivec_init_builtins ();\n   if (TARGET_ALTIVEC || TARGET_SPE || TARGET_PAIRED_FLOAT)\n     rs6000_common_init_builtins ();\n+  if (TARGET_PPC_GFXOPT)\n+    {\n+      tree ftype = build_function_type_list (float_type_node,\n+\t\t\t\t\t     float_type_node,\n+\t\t\t\t\t     float_type_node,\n+\t\t\t\t\t     NULL_TREE);\n+      def_builtin (MASK_PPC_GFXOPT, \"__builtin_recipdivf\", ftype,\n+\t\t   RS6000_BUILTIN_RECIPF);\n+\n+      ftype = build_function_type_list (float_type_node,\n+\t\t\t\t\tfloat_type_node,\n+\t\t\t\t\tNULL_TREE);\n+      def_builtin (MASK_PPC_GFXOPT, \"__builtin_rsqrtf\", ftype,\n+\t\t   RS6000_BUILTIN_RSQRTF);\n+    }\n+  if (TARGET_POPCNTB)\n+    {\n+      tree ftype = build_function_type_list (double_type_node,\n+\t\t\t\t\t     double_type_node,\n+\t\t\t\t\t     double_type_node,\n+\t\t\t\t\t     NULL_TREE);\n+      def_builtin (MASK_POPCNTB, \"__builtin_recipdiv\", ftype,\n+\t\t   RS6000_BUILTIN_RECIP);\n+\n+    }\n \n #if TARGET_XCOFF\n   /* AIX libm provides clog as __clog.  */\n@@ -20874,11 +20912,36 @@ rs6000_memory_move_cost (enum machine_mode mode, enum reg_class class,\n     return 4 + rs6000_register_move_cost (mode, class, GENERAL_REGS);\n }\n \n+/* Returns a code for a target-specific builtin that implements\n+   reciprocal of the function, or NULL_TREE if not available.  */\n+\n+static tree\n+rs6000_builtin_reciprocal (unsigned int fn, bool md_fn,\n+\t\t\t   bool sqrt ATTRIBUTE_UNUSED)\n+{\n+  if (! (TARGET_RECIP && TARGET_PPC_GFXOPT && !optimize_size\n+\t && flag_finite_math_only && !flag_trapping_math\n+\t && flag_unsafe_math_optimizations))\n+    return NULL_TREE;\n+\n+  if (md_fn)\n+    return NULL_TREE;\n+  else\n+    switch (fn)\n+      {\n+      case BUILT_IN_SQRTF:\n+\treturn rs6000_builtin_decls[RS6000_BUILTIN_RSQRTF];\n+\n+      default:\n+\treturn NULL_TREE;\n+      }\n+}\n+\n /* Newton-Raphson approximation of single-precision floating point divide n/d.\n    Assumes no trapping math and finite arguments.  */\n \n void\n-rs6000_emit_swdivsf (rtx res, rtx n, rtx d)\n+rs6000_emit_swdivsf (rtx dst, rtx n, rtx d)\n {\n   rtx x0, e0, e1, y1, u0, v0, one;\n \n@@ -20913,8 +20976,8 @@ rs6000_emit_swdivsf (rtx res, rtx n, rtx d)\n   emit_insn (gen_rtx_SET (VOIDmode, v0,\n \t\t\t  gen_rtx_MINUS (SFmode, n,\n \t\t\t\t\t gen_rtx_MULT (SFmode, d, u0))));\n-  /* res = u0 + v0 * y1 */\n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n+  /* dst = u0 + v0 * y1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, dst,\n \t\t\t  gen_rtx_PLUS (SFmode,\n \t\t\t\t\tgen_rtx_MULT (SFmode, v0, y1), u0)));\n }\n@@ -20923,7 +20986,7 @@ rs6000_emit_swdivsf (rtx res, rtx n, rtx d)\n    Assumes no trapping math and finite arguments.  */\n \n void\n-rs6000_emit_swdivdf (rtx res, rtx n, rtx d)\n+rs6000_emit_swdivdf (rtx dst, rtx n, rtx d)\n {\n   rtx x0, e0, e1, e2, y1, y2, y3, u0, v0, one;\n \n@@ -20971,13 +21034,97 @@ rs6000_emit_swdivdf (rtx res, rtx n, rtx d)\n   emit_insn (gen_rtx_SET (VOIDmode, v0,\n \t\t\t  gen_rtx_MINUS (DFmode, n,\n \t\t\t\t\t gen_rtx_MULT (DFmode, d, u0))));\n-  /* res = u0 + v0 * y3 */\n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n+  /* dst = u0 + v0 * y3 */\n+  emit_insn (gen_rtx_SET (VOIDmode, dst,\n \t\t\t  gen_rtx_PLUS (DFmode,\n \t\t\t\t\tgen_rtx_MULT (DFmode, v0, y3), u0)));\n }\n \n \n+/* Newton-Raphson approximation of single-precision floating point rsqrt.\n+   Assumes no trapping math and finite arguments.  */\n+\n+void\n+rs6000_emit_swrsqrtsf (rtx dst, rtx src)\n+{\n+  rtx x0, x1, x2, y1, u0, u1, u2, v0, v1, v2, t0,\n+    half, one, halfthree, c1, cond, label;\n+\n+  x0 = gen_reg_rtx (SFmode);\n+  x1 = gen_reg_rtx (SFmode);\n+  x2 = gen_reg_rtx (SFmode);\n+  y1 = gen_reg_rtx (SFmode);\n+  u0 = gen_reg_rtx (SFmode);\n+  u1 = gen_reg_rtx (SFmode);\n+  u2 = gen_reg_rtx (SFmode);\n+  v0 = gen_reg_rtx (SFmode);\n+  v1 = gen_reg_rtx (SFmode);\n+  v2 = gen_reg_rtx (SFmode);\n+  t0 = gen_reg_rtx (SFmode);\n+  halfthree = gen_reg_rtx (SFmode);\n+  cond = gen_rtx_REG (CCFPmode, CR1_REGNO);\n+  label = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+\n+  /* check 0.0, 1.0, NaN, Inf by testing src * src = src */\n+  emit_insn (gen_rtx_SET (VOIDmode, t0,\n+\t\t\t  gen_rtx_MULT (SFmode, src, src)));\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, cond,\n+\t\t\t  gen_rtx_COMPARE (CCFPmode, t0, src)));\n+  c1 = gen_rtx_EQ (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (c1, label);\n+\n+  half = force_reg (SFmode, CONST_DOUBLE_FROM_REAL_VALUE (dconsthalf, SFmode));\n+  one = force_reg (SFmode, CONST_DOUBLE_FROM_REAL_VALUE (dconst1, SFmode));\n+\n+  /* halfthree = 1.5 = 1.0 + 0.5 */\n+  emit_insn (gen_rtx_SET (VOIDmode, halfthree,\n+\t\t\t  gen_rtx_PLUS (SFmode, one, half)));\n+\n+  /* x0 = rsqrt estimate */\n+  emit_insn (gen_rtx_SET (VOIDmode, x0,\n+\t\t\t  gen_rtx_UNSPEC (SFmode, gen_rtvec (1, src),\n+\t\t\t\t\t  UNSPEC_RSQRT)));\n+\n+  /* y1 = 0.5 * src = 1.5 * src - src -> fewer constants */\n+  emit_insn (gen_rtx_SET (VOIDmode, y1,\n+\t\t\t  gen_rtx_MINUS (SFmode,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, src, halfthree),\n+\t\t\t\t\t src)));\n+\n+  /* x1 = x0 * (1.5 - y1 * (x0 * x0)) */\n+  emit_insn (gen_rtx_SET (VOIDmode, u0,\n+\t\t\t  gen_rtx_MULT (SFmode, x0, x0)));\n+  emit_insn (gen_rtx_SET (VOIDmode, v0,\n+\t\t\t  gen_rtx_MINUS (SFmode,\n+\t\t\t\t\t halfthree,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, y1, u0))));\n+  emit_insn (gen_rtx_SET (VOIDmode, x1,\n+\t\t\t  gen_rtx_MULT (SFmode, x0, v0)));\n+\n+  /* x2 = x1 * (1.5 - y1 * (x1 * x1)) */\n+  emit_insn (gen_rtx_SET (VOIDmode, u1,\n+\t\t\t  gen_rtx_MULT (SFmode, x1, x1)));\n+  emit_insn (gen_rtx_SET (VOIDmode, v1,\n+\t\t\t  gen_rtx_MINUS (SFmode,\n+\t\t\t\t\t halfthree,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, y1, u1))));\n+  emit_insn (gen_rtx_SET (VOIDmode, x2,\n+\t\t\t  gen_rtx_MULT (SFmode, x1, v1)));\n+\n+  /* dst = x2 * (1.5 - y1 * (x2 * x2)) */\n+  emit_insn (gen_rtx_SET (VOIDmode, u2,\n+\t\t\t  gen_rtx_MULT (SFmode, x2, x2)));\n+  emit_insn (gen_rtx_SET (VOIDmode, v2,\n+\t\t\t  gen_rtx_MINUS (SFmode,\n+\t\t\t\t\t halfthree,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, y1, u2))));\n+  emit_insn (gen_rtx_SET (VOIDmode, dst,\n+\t\t\t  gen_rtx_MULT (SFmode, x2, v2)));\n+\n+  emit_label (XEXP (label, 0));\n+}\n+\n /* Emit popcount intrinsic on TARGET_POPCNTB targets.  DST is the\n    target, and SRC is the argument operand.  */\n "}, {"sha": "5ace155565054475fc866ab05f120b9b9c6c213f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9c78b944a868e858864f058edc672a334191cc2a", "patch": "@@ -2993,6 +2993,10 @@ enum rs6000_builtins\n   PAIRED_BUILTIN_CMPU0,\n   PAIRED_BUILTIN_CMPU1,\n \n+  RS6000_BUILTIN_RECIP,\n+  RS6000_BUILTIN_RECIPF,\n+  RS6000_BUILTIN_RSQRTF,\n+\n   RS6000_BUILTIN_COUNT\n };\n "}, {"sha": "954dfec6f0c4fb72ed960d0a243c828705942fc6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9c78b944a868e858864f058edc672a334191cc2a", "patch": "@@ -98,6 +98,7 @@\n    (UNSPEC_DLMZB\t\t45)\n    (UNSPEC_DLMZB_CR\t\t46)\n    (UNSPEC_DLMZB_STRLEN\t\t47)\n+   (UNSPEC_RSQRT\t\t48)\n   ])\n \n ;;\n@@ -5197,26 +5198,12 @@\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n-(define_insn \"fres\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n-  \"TARGET_PPC_GFXOPT && flag_finite_math_only\"\n-  \"fres %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-{\n-  if (swdiv && !optimize_size && TARGET_PPC_GFXOPT\n-  && flag_finite_math_only && !flag_trapping_math)\n-    {\n-      rs6000_emit_swdivsf (operands[0], operands[1], operands[2]);\n-      DONE;\n-    }\n-})\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5234,6 +5221,25 @@\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n+(define_expand \"recipsf3\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"gpc_reg_operand\" \"f\")]\n+\t\t   UNSPEC_FRES))]\n+  \"TARGET_RECIP && TARGET_HARD_FLOAT && TARGET_PPC_GFXOPT && !optimize_size\n+   && flag_finite_math_only && !flag_trapping_math\"\n+{\n+   rs6000_emit_swdivsf (operands[0], operands[1], operands[2]);\n+   DONE;\n+})\n+\n+(define_insn \"fres\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n+  \"TARGET_PPC_GFXOPT && flag_finite_math_only\"\n+  \"fres %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n@@ -5368,6 +5374,25 @@\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n+(define_expand \"rsqrtsf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_RECIP && TARGET_HARD_FLOAT && TARGET_PPC_GFXOPT && !optimize_size\n+   && flag_finite_math_only && !flag_trapping_math\"\n+{\n+  rs6000_emit_swrsqrtsf (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_insn \"*rsqrt_internal1\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_HARD_FLOAT && TARGET_PPC_GFXOPT\"\n+  \"frsqrte %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_expand \"copysignsf3\"\n   [(set (match_dup 3)\n         (abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))\n@@ -5599,26 +5624,12 @@\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n-(define_insn \"fred\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n-  \"TARGET_POPCNTB && flag_finite_math_only\"\n-  \"fre %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n-{\n-  if (swdiv && !optimize_size && TARGET_POPCNTB\n-  && flag_finite_math_only && !flag_trapping_math)\n-    {\n-      rs6000_emit_swdivdf (operands[0], operands[1], operands[2]);\n-      DONE;\n-    }\n-})\n+  \"\")\n \n (define_insn \"*divdf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5628,6 +5639,25 @@\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n+(define_expand \"recipdf3\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"gpc_reg_operand\" \"f\")]\n+\t\t   UNSPEC_FRES))]\n+  \"TARGET_RECIP && TARGET_HARD_FLOAT && TARGET_POPCNTB && !optimize_size\n+   && flag_finite_math_only && !flag_trapping_math\"\n+{\n+   rs6000_emit_swdivdf (operands[0], operands[1], operands[2]);\n+   DONE;\n+})\n+\n+(define_insn \"fred\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n+  \"TARGET_POPCNTB && flag_finite_math_only\"\n+  \"fre %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")"}, {"sha": "c552a03c8fa7f510ae4f915b3aaf0b8ff0f3ddc2", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c78b944a868e858864f058edc672a334191cc2a/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=9c78b944a868e858864f058edc672a334191cc2a", "patch": "@@ -146,9 +146,9 @@ mxl-compat\n Target Report Var(TARGET_XL_COMPAT)\n Conform more closely to IBM XLC semantics\n \n-mswdiv\n-Target Report Var(swdiv)\n-Generate software floating point divide for better throughput\n+mrecip\n+Target Report Var(TARGET_RECIP)\n+Generate software reciprocal sqrt for better throughput\n \n mno-fp-in-toc\n Target Report RejectNegative Var(TARGET_NO_FP_IN_TOC)"}]}