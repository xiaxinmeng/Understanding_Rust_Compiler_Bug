{"sha": "6493b7af37e473a89c67afab474330f931dd8447", "node_id": "C_kwDOANBUbNoAKDY0OTNiN2FmMzdlNDczYTg5YzY3YWZhYjQ3NDMzMGY5MzFkZDg0NDc", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-02-09T22:50:07Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-02-10T14:46:33Z"}, "message": "Query rangers cache in readonly mode only from within\n\nThe change for 108356 allowed the cache to scan the dominator trees when\nit was attempting a lookup rather than using the local value.  I\ninadvertantly changed the externbal interface to also do this, so all\nthe GORI queries via range_on_edge of the cache could also do lookups.\n\nThis triggered a quadratic, possible expoential time increase when\nthe right conditions were presented. That being a cascading series of\nrecomputaions on outgoing edge calucaltions that at then searched the dom tree\ninstead of being a simple calcualtion using whats easily available.\n\nThe fix is to use the internal API within the cache rather than the\nextrenal one that GORI uses.   This leaves GORI computations to be\nresovled in linear time.\n\n\tPR tree-optimization/108687\n\tgcc/\n\t* gimple-range-cache.cc (ranger_cache::range_on_edge): Revert\n\tback to RFD_NONE mode for calculations.\n\t(ranger_cache::propagate_cache): Call the internal edge range API\n\twith RFD_READ_ONLY instead of changing the external routine.", "tree": {"sha": "bec420504e0a4f16341132f9d0ffd27bd9d71bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bec420504e0a4f16341132f9d0ffd27bd9d71bad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6493b7af37e473a89c67afab474330f931dd8447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6493b7af37e473a89c67afab474330f931dd8447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6493b7af37e473a89c67afab474330f931dd8447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6493b7af37e473a89c67afab474330f931dd8447/comments", "author": null, "committer": null, "parents": [{"sha": "99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "546262c47946785b059130d42c67d1d823eb37ad", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6493b7af37e473a89c67afab474330f931dd8447/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6493b7af37e473a89c67afab474330f931dd8447/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=6493b7af37e473a89c67afab474330f931dd8447", "patch": "@@ -998,7 +998,7 @@ bool\n ranger_cache::range_on_edge (vrange &r, edge e, tree expr)\n {\n   if (gimple_range_ssa_p (expr))\n-    return edge_range (r, e, expr, RFD_READ_ONLY);\n+    return edge_range (r, e, expr, RFD_NONE);\n   return get_tree_range (r, expr, NULL);\n }\n \n@@ -1081,7 +1081,7 @@ ranger_cache::propagate_cache (tree name)\n       new_range.set_undefined ();\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n-\t  range_on_edge (e_range, e, name);\n+\t  edge_range (e_range, e, name, RFD_READ_ONLY);\n \t  if (DEBUG_RANGE_CACHE)\n \t    {\n \t      fprintf (dump_file, \"   edge %d->%d :\", e->src->index, bb->index);"}]}