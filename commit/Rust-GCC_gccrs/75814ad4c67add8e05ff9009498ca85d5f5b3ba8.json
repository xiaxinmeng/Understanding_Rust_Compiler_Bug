{"sha": "75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU4MTRhZDRjNjdhZGQ4ZTA1ZmY5MDA5NDk4Y2E4NWQ1ZjViM2JhOA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-05-10T18:26:30Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-05-10T18:26:30Z"}, "message": "Add little endian PowerPC support.\n\nFrom-SVN: r9613", "tree": {"sha": "fc307b656f05ebe484de2818a4081c7db5cae1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc307b656f05ebe484de2818a4081c7db5cae1b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/comments", "author": null, "committer": null, "parents": [{"sha": "8f28aa336ed35c60d313f448ac16289c0e8d16f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f28aa336ed35c60d313f448ac16289c0e8d16f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f28aa336ed35c60d313f448ac16289c0e8d16f2"}], "stats": {"total": 206, "additions": 194, "deletions": 12}, "files": [{"sha": "1f06bb6edd263a6602775c22352c64955767078a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -185,6 +185,20 @@ rs6000_override_options ()\n   if (TARGET_MULTIPLE_SET)\n     target_flags = (target_flags & ~MASK_MULTIPLE) | multiple;\n }\n+\f\n+/* Create a CONST_DOUBLE like immed_double_const, except reverse the\n+   two parts of the constant if the target is little endian.  */\n+\n+struct rtx_def *rs6000_immed_double_const (i0, i1, mode)\n+     HOST_WIDE_INT i0, i1;\n+     enum machine_mode mode;\n+{\n+  if (! WORDS_BIG_ENDIAN)\n+    return immed_double_const (i1, i0, mode);\n+\n+  return immed_double_const (i0, i1, mode);\n+}\n+\n \f\n /* Return non-zero if this function is known to have a null epilogue.  */\n "}, {"sha": "96b7951c7a778fc688a71ba720cb5efcc16866ce", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -2345,3 +2345,61 @@ toc_section ()\t\t\t\t\t\t\\\n \t\t\t\t  GT, LEU, LTU, GEU, GTU}},\t\\\n   {\"scc_comparison_operator\", {EQ, NE, LE, LT, GE,\t\t\\\n \t\t\t       GT, LEU, LTU, GEU, GTU}},\n+\n+/* Declare functions in rs6000.c */\n+extern void rs6000_override_options ();\n+extern struct rtx_def *rs6000_immed_double_const ();\n+extern int direct_return ();\n+extern int any_operand ();\n+extern int short_cint_operand ();\n+extern int u_short_cint_operand ();\n+extern int non_short_cint_operand ();\n+extern int gpc_reg_operand ();\n+extern int cc_reg_operand ();\n+extern int reg_or_short_operand ();\n+extern int reg_or_neg_short_operand ();\n+extern int reg_or_u_short_operand ();\n+extern int reg_or_cint_operand ();\n+extern int easy_fp_constant ();\n+extern int low_32_bit_operand ();\n+extern int fp_reg_or_mem_operand ();\n+extern int mem_or_easy_const_operand ();\n+extern int add_operand ();\n+extern int non_add_cint_operand ();\n+extern int logical_operand ();\n+extern int non_logical_operand ();\n+extern int mask_constant ();\n+extern int mask_operand ();\n+extern int and_operand ();\n+extern int non_and_cint_operand ();\n+extern int reg_or_mem_operand ();\n+extern int lwa_operand ();\n+extern int call_operand ();\n+extern int current_file_function_operand ();\n+extern int input_operand ();\n+extern int load_multiple_operation ();\n+extern int store_multiple_operation ();\n+extern int branch_comparison_operator ();\n+extern int scc_comparison_operator ();\n+extern int includes_lshift_p ();\n+extern int includes_rshift_p ();\n+extern int registers_ok_for_quad_peep ();\n+extern int addrs_ok_for_quad_peep ();\n+extern enum reg_class secondary_reload_class ();\n+extern int ccr_bit ();\n+extern void print_operand ();\n+extern void print_operand_address ();\n+extern int first_reg_to_save ();\n+extern int first_fp_reg_to_save ();\n+extern int must_save_cr ();\n+extern int rs6000_sa_size ();\n+extern int rs6000_makes_calls ();\n+extern int rs6000_pushes_stack ();\n+extern void svr4_traceback ();\n+extern void output_prolog ();\n+extern void output_epilog ();\n+extern void output_toc ();\n+extern void output_ascii ();\n+extern void rs6000_gen_section_name ();\n+extern void output_function_profiler ();\n+extern int rs6000_adjust_cost ();"}, {"sha": "ecbbc3695f46c12b00b156ddc940c3a127dabc89", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -3297,9 +3297,10 @@\n {\n   operands[2] = gen_reg_rtx (DImode);\n   operands[3] = gen_rtx (CONST_INT, VOIDmode, 0x80000000);\n-  operands[4] = immed_double_const (0, 0x43300000, DImode);\n-  operands[5] = force_reg (DFmode, immed_double_const (0x43300000,\n-\t\t\t\t\t\t       0x80000000, DFmode));\n+  operands[4] = rs6000_immed_double_const (0, 0x43300000, DImode);\n+  operands[5] = force_reg (DFmode, rs6000_immed_double_const (0x43300000,\n+\t\t\t\t\t\t\t      0x80000000,\n+\t\t\t\t\t\t\t      DFmode));\n }\")\n \n (define_expand \"floatunssidf2\"\n@@ -3313,8 +3314,8 @@\n   \"\n {\n   operands[2] = gen_reg_rtx (DImode);\n-  operands[3] = immed_double_const (0, 0x43300000, DImode);\n-  operands[4] = force_reg (DFmode, immed_double_const (0x43300000, 0, DFmode));\n+  operands[3] = rs6000_immed_double_const (0, 0x43300000, DImode);\n+  operands[4] = force_reg (DFmode, rs6000_immed_double_const (0x43300000, 0, DFmode));\n }\")\n \n ;; For the above two cases, we always split."}, {"sha": "b309fa34a9d338c2f0ff7b419bef05a8e940af70", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -25,13 +25,16 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define\tMASK_STRICT_ALIGN\t0x20000000\t/* Set STRICT_ALIGNMENT to 1.  */\n #define MASK_RELOCATABLE\t0x10000000\t/* GOT pointers are PC relative */\n #define\tMASK_NO_TRACEBACK\t0x08000000\t/* eliminate traceback words */\n+#define MASK_LITTLE_ENDIAN\t0x04000000\t/* target is little endian */\n \n #define\tTARGET_NO_BITFIELD_TYPE\t(target_flags & MASK_NO_BITFIELD_TYPE)\n #define\tTARGET_BITFIELD_TYPE\t(! TARGET_NO_BITFIELD_TYPE)\n #define TARGET_STRICT_ALIGN\t(target_flags & MASK_STRICT_ALIGN)\n #define TARGET_RELOCATABLE\t(target_flags & MASK_RELOCATABLE)\n #define TARGET_NO_TRACEBACK\t(target_flags & MASK_NO_TRACEBACK)\n #define\tTARGET_TRACEBACK\t(! TARGET_NO_TRACEBACK)\n+#define TARGET_LITTLE_ENDIAN\t(target_flags & MASK_LITTLE_ENDIAN)\n+#define TARGET_BIG_ENDIAN\t(! TARGET_LITTLE_ENDIAN)\n \n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n@@ -42,10 +45,31 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   { \"relocatable\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC }, \\\n   { \"no-relocatable\",\t-MASK_RELOCATABLE },\t\t\t\t\\\n   { \"traceback\",\t-MASK_NO_TRACEBACK },\t\t\t\t\\\n-  { \"no-traceback\",\t MASK_NO_TRACEBACK },\n+  { \"no-traceback\",\t MASK_NO_TRACEBACK },\t\t\t\t\\\n+  { \"little-endian\",\t MASK_LITTLE_ENDIAN },\t\t\t\t\\\n+  { \"little\",\t\t MASK_LITTLE_ENDIAN },\t\t\t\t\\\n+  { \"big-endian\",\t-MASK_LITTLE_ENDIAN },\t\t\t\t\\\n+  { \"big\",\t\t-MASK_LITTLE_ENDIAN },\n+\n+/* If the user wants little endian support, don't allow -mmultiple */\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_LITTLE_ENDIAN && TARGET_MULTIPLE)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags &= ~MASK_MULTIPLE;\t\t\t\t\t\\\n+      if (TARGET_MULTIPLE_SET)\t\t\t\t\t\t\\\n+\twarning (\"-mmultiple is not supported on little endian PowerPC systems\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n \n #include \"rs6000/powerpc.h\"\n \n+/* Override default big endianism */\n+#undef  BYTES_BIG_ENDIAN\n+#undef  WORDS_BIG_ENDIAN\n+#define BYTES_BIG_ENDIAN (TARGET_BIG_ENDIAN)\n+#define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN)\n+\n /* Don't generate XCOFF debugging information.  */\n \n #undef XCOFF_DEBUGGING_INFO\n@@ -239,7 +263,13 @@ extern int rs6000_pic_labelno;\n    implies.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n-  \"-u -mppc %{V} %{v:%{!V:-V}} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} %{mrelocatable}\"\n+  \"-u \\\n+%{mcpu=601: -m601} %{mcpu=ppc601: -m601} %{mcpu=mpc601: -m601} \\\n+%{!mcpu=601: %{!mcpu=ppc601: %{!mcpu=mpc601: -mppc }}} \\\n+%{V} %{v:%{!V:-V}} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n+%{mrelocatable} \\\n+%{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}\"\n+\n /* This is the end of what might become sysv4.h.  */\n \n /* Allow stabs and dwarf, prefer dwarf.  */\n@@ -272,6 +302,21 @@ extern int rs6000_pic_labelno;\n #define CPP_PREDEFINES \\\n   \"-DPPC -Dunix -D__svr4__ -Asystem(unix) -Asystem(svr4) -Acpu(powerpc) -Amachine(powerpc)\"\n \n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{h*} %{V} %{v:%{!V:-V}} \\\n+%{b} %{Wl,*:%*} \\\n+%{static:-dn -Bstatic} \\\n+%{shared:-G -dy -z text %{!h*:%{o*:-h %*}}} \\\n+%{symbolic:-Bsymbolic -G -dy -z text %{!h*:%{o*:-h %*}}} \\\n+%{G:-G} \\\n+%{YP,*} \\\n+%{!YP,*:%{p:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n+%{!p:-Y P,/usr/ccs/lib:/usr/lib}} \\\n+%{Qy:} %{!Qn:-Qy} \\\n+%{mlittle: -m elf32-powerpcle } %{mlittle-endian: -m elf32-powerpcle } \\\n+%{mbig: -m elf32-powerpc } %{mbig-endian: -m elf32-powerpc }\"\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n %{posix: -D_POSIX_SOURCE} \\"}, {"sha": "fbb26ef7414cd702d0e0b647017758d7c2ab9791", "filename": "gcc/config/rs6000/t-ppc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Ft-ppc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Ft-ppc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppc?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -0,0 +1,31 @@\n+# Do not build libgcc1.\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build libgcc.a with different options.  If no gas support, don't build\n+# explicit little endian or big endian libraries, since it depends on the\n+# -mbig/-mlittle switches passed to gas.\n+\n+MULTILIB_OPTIONS\t= msoft-float \\\n+\t\t\t  mmultiple/mno-multiple\n+\n+MULTILIB_DIRNAMES\t= soft-float \\\n+\t\t\t  multiple no-multiple\n+\n+MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n+\t\t\t  msoft-float=mcpu?mpc403 \\\n+\t\t\t  msoft-float=mcpu?ppc403\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "b9da6c73fcffce0b0efad164f89071d9aab3a492", "filename": "gcc/config/rs6000/t-ppcgas", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Ft-ppcgas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fconfig%2Frs6000%2Ft-ppcgas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppcgas?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -0,0 +1,33 @@\n+# Do not build libgcc1.\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build libgcc.a with different options.\n+\n+MULTILIB_OPTIONS\t= msoft-float \\\n+\t\t\t  mlittle/mbig \\\n+\t\t\t  mmultiple/mno-multiple\n+\n+MULTILIB_DIRNAMES\t= soft-float \\\n+\t\t\t  little-endian big-endian \\\n+\t\t\t  multiple no-multiple\n+\n+MULTILIB_MATCHES\t= mlittle=mlittle-endian \\\n+\t\t\t  mbig=mbig-endian \\\n+\t\t\t  msoft-float=mcpu?403 \\\n+\t\t\t  msoft-float=mcpu?mpc403 \\\n+\t\t\t  msoft-float=mcpu?ppc403\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "66dc0d477d912439037b809c5588582f849fd8aa", "filename": "gcc/genmultilib", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75814ad4c67add8e05ff9009498ca85d5f5b3ba8/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=75814ad4c67add8e05ff9009498ca85d5f5b3ba8", "patch": "@@ -39,7 +39,7 @@\n # identical.  The elements in the list are separated by spaces.  Each\n # element must be of the form OPTION=OPTION.  The first OPTION should\n # appear in the first argument, and the second should be a synonym for\n-# it.\n+# it.  Question marks are replaced with equal signs in both options.\n \n # The output looks like\n #   #define MULTILIB_MATCHES \"\\\n@@ -132,8 +132,8 @@ fi\n # quoted spaces when expanding a variable.\n matchnegations=\n for i in ${matches}; do\n-  l=`echo $i | sed -e 's/=.*$//'`\n-  r=`echo $i | sed -e 's/^.*=//'`\n+  l=`echo $i | sed -e 's/=.*$//' -e 's/?/=/g'`\n+  r=`echo $i | sed -e 's/^.*=//' -e 's/?/=/g'`\n   matchnegations=\"${matchnegations} -e s/;!${l};/;!${l};!${r};/\"\n done\n \n@@ -158,8 +158,8 @@ else\n   first=$1\n   shift\n   dirout=\"${dirout}\" optout=\"${optout}\" ./tmpmultilib2 $@\n-  l=`echo ${first} | sed -e 's/=.*$//'`\n-  r=`echo ${first} | sed -e 's/^.*=//'`\n+  l=`echo ${first} | sed -e 's/=.*$//' -e 's/?/=/g'`\n+  r=`echo ${first} | sed -e 's/^.*=//' -e 's/?/=/g'`\n   case \" ${optout} \" in\n   *\" ${l} \"*)\n     newopt=`echo \" ${optout} \" | sed -e \"s/ ${l} / ${r} /\" -e 's/^ //' -e 's/ $//'`"}]}