{"sha": "5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwY2FiOTRkMDAyMDc1ZWI3MjhhYzVkNmNlM2E5ZWViMDliMWY5MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-08-13T08:27:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-08-13T08:27:08Z"}, "message": "* jump.c: Fix formatting.\n\nFrom-SVN: r44846", "tree": {"sha": "1ce1321ac3b9c93d610003f06c507e1989c48d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce1321ac3b9c93d610003f06c507e1989c48d8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90/comments", "author": null, "committer": null, "parents": [{"sha": "7ba7767b1c013a98e5007119c38d2e7415ad1eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba7767b1c013a98e5007119c38d2e7415ad1eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba7767b1c013a98e5007119c38d2e7415ad1eb9"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "9fa0b62182697744bcdccf1ae6fb05955fd3e8b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90", "patch": "@@ -1,3 +1,7 @@\n+2001-08-13  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* jump.c: Fix formatting.\n+\n 2001-08-13  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md (zero_extendqihi2): Correct the insn"}, {"sha": "0b62ab42114d7ce88d0c5962e1e0589f269d9a7b", "filename": "gcc/jump.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=5d0cab94d002075eb728ac5d6ce3a9eeb09b1f90", "patch": "@@ -653,40 +653,40 @@ reversed_comparison_code_parts (code, arg0, arg1, insn)\n       && REVERSIBLE_CC_MODE (mode))\n     {\n #ifdef REVERSE_CONDITION\n-\t   return REVERSE_CONDITION (code, mode);\n+      return REVERSE_CONDITION (code, mode);\n #endif\n-\t   return reverse_condition (code);\n-\t}\n+      return reverse_condition (code);\n+    }\n #endif\n \n   /* Try a few special cases based on the comparison code.  */\n   switch (code)\n     {\n-      case GEU:\n-      case GTU:\n-      case LEU:\n-      case LTU:\n-      case NE:\n-      case EQ:\n-        /* It is always safe to reverse EQ and NE, even for the floating\n-\t   point.  Similary the unsigned comparisons are never used for\n-\t   floating point so we can reverse them in the default way.  */\n-\treturn reverse_condition (code);\n-      case ORDERED:\n-      case UNORDERED:\n-      case LTGT:\n-      case UNEQ:\n-\t/* In case we already see unordered comparison, we can be sure to\n-\t   be dealing with floating point so we don't need any more tests.  */\n-\treturn reverse_condition_maybe_unordered (code);\n-      case UNLT:\n-      case UNLE:\n-      case UNGT:\n-      case UNGE:\n-\t/* We don't have safe way to reverse these yet.  */\n-\treturn UNKNOWN;\n-      default:\n-\tbreak;\n+    case GEU:\n+    case GTU:\n+    case LEU:\n+    case LTU:\n+    case NE:\n+    case EQ:\n+      /* It is always safe to reverse EQ and NE, even for the floating\n+\t point.  Similary the unsigned comparisons are never used for\n+\t floating point so we can reverse them in the default way.  */\n+      return reverse_condition (code);\n+    case ORDERED:\n+    case UNORDERED:\n+    case LTGT:\n+    case UNEQ:\n+      /* In case we already see unordered comparison, we can be sure to\n+\t be dealing with floating point so we don't need any more tests.  */\n+      return reverse_condition_maybe_unordered (code);\n+    case UNLT:\n+    case UNLE:\n+    case UNGT:\n+    case UNGE:\n+      /* We don't have safe way to reverse these yet.  */\n+      return UNKNOWN;\n+    default:\n+      break;\n     }\n \n   /* In case we give up IEEE compatibility, all comparisons are reversible.  */"}]}