{"sha": "1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhMmU3M2YzNTcyMmZkNjU0NmJjYjFlODlhMWQ3MTZkM2QyYzkwNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-07-21T08:57:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-07-21T08:57:27Z"}, "message": "alpha.md (fix_truncdfsi2, [...]): Remove the define_expands, but keep the insns and splits.\n\n        * alpha.md (fix_truncdfsi2, fix_truncsfsi2): Remove the define_expands,\n        but keep the insns and splits.  Adjust so when the ultimate destination\n        is memory, use cvtql.\n\nFrom-SVN: r21322", "tree": {"sha": "1caf0d8b5f04ebfb1866e4bec972841018552245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1caf0d8b5f04ebfb1866e4bec972841018552245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905/comments", "author": null, "committer": null, "parents": [{"sha": "bd80fbde8eb422f5afdbfbcace63db46c80e44bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd80fbde8eb422f5afdbfbcace63db46c80e44bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd80fbde8eb422f5afdbfbcace63db46c80e44bf"}], "stats": {"total": 123, "additions": 64, "deletions": 59}, "files": [{"sha": "8af00453b1b3d20fae17d61c5155936b654c641a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "patch": "@@ -1,3 +1,9 @@\n+Tue Jul 21 08:56:42 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (fix_truncdfsi2, fix_truncsfsi2): Remove the define_expands,\n+\tbut keep the insns and splits.  Adjust so when the ultimate destination\n+\tis memory, use cvtql.\n+\n Tue Jul 21 08:55:09 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (regno_uninitialized): Fixed regs are never uninitialized."}, {"sha": "bb9a30bcc68e3e553dd09cc2f736a8b465df1d06", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 58, "deletions": 59, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "patch": "@@ -1794,58 +1794,60 @@\n ;; instruction.  To allow combine et al to do useful things, we keep the\n ;; operation as a unit until after reload, at which point we split the\n ;; instructions.\n+;;\n+;; Note that we (attempt to) only consider this optimization when the\n+;; ultimate destination is memory.  If we will be doing further integer\n+;; processing, it is cheaper to do the truncation in the int regs.\n+\n+(define_insn \"*cvtql\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n+\t(unspec:SI [(match_operand:DI 1 \"reg_or_fp0_operand\" \"fG\")] 5))]\n+  \"TARGET_FP\"\n+  \"cvtql%` %R1,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"reg_or_fp0_operand\" \"\")))\n-   (clobber (match_scratch:DI 2 \"\"))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n+\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"\")) 0))\n+   (clobber (match_scratch:DI 2 \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_FP && reload_completed\"\n   [(set (match_dup 2) (fix:DI (match_dup 1)))\n-   (set (match_dup 0) (unspec:SI [(match_dup 2)] 5))]\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n   \"\")\n \n-;; Due to issues with CLASS_CANNOT_CHANGE_SIZE, we cannot use a subreg here.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"reg_or_fp0_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n+\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"\")) 0))\n+   (clobber (match_scratch:DI 2 \"\"))]\n   \"TARGET_FP && reload_completed\"\n   [(set (match_dup 2) (fix:DI (match_dup 1)))\n-   (set (match_dup 0) (unspec:SI [(match_dup 2)] 5))]\n-  \"operands[2] = gen_rtx_REG (DImode, REGNO (operands[0]));\")\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n+  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n+  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(unspec:SI [(match_operand:DI 1 \"reg_or_fp0_operand\" \"fG\")] 5))]\n-  \"TARGET_FP\"\n-  \"cvtql%` %R1,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n-\n-(define_insn \"fix_truncdfsi2_tp\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&f\")\n-\t(fix:SI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))\n-   (clobber (match_scratch:DI 2 \"=&f\"))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")) 0))\n+   (clobber (match_scratch:DI 2 \"=&f\"))\n+   (clobber (match_scratch:SI 3 \"=&f\"))]\n   \"TARGET_FP && alpha_tp == ALPHA_TP_INSN\"\n   \"#\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(fix:SI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")) 0))\n+   (clobber (match_scratch:DI 2 \"=f\"))]\n   \"TARGET_FP && alpha_tp != ALPHA_TP_INSN\"\n   \"#\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_expand \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(fix:SI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"{ if (alpha_tp == ALPHA_TP_INSN)\n-       { emit_insn(gen_fix_truncdfsi2_tp(operands[0], operands[1])); DONE; }\n-   }\")\n-\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&f\")\n \t(fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -1865,53 +1867,50 @@\n ;; Likewise between SFmode and SImode.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"\"))))\n-   (clobber (match_scratch:DI 2 \"\"))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n+\t(subreg:SI (fix:DI (float_extend:DF\n+\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"\"))) 0))\n+   (clobber (match_scratch:DI 2 \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_FP && reload_completed\"\n   [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n-   (set (match_dup 0) (unspec:SI [(match_dup 2)] 5))]\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n   \"\")\n \n-;; Due to issues with CLASS_CANNOT_CHANGE_SIZE, we cannot use a subreg here.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"\"))))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n+\t(subreg:SI (fix:DI (float_extend:DF\n+\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"\"))) 0))\n+   (clobber (match_scratch:DI 2 \"\"))]\n   \"TARGET_FP && reload_completed\"\n   [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n-   (set (match_dup 0) (unspec:SI [(match_dup 2)] 5))]\n-  \"operands[2] = gen_rtx_REG (DImode, REGNO (operands[0]));\")\n-\n-(define_insn \"fix_truncsfsi2_tp\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&f\")\n-\t(fix:SI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))\n-   (clobber (match_scratch:DI 2 \"=&f\"))]\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n+  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n+  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(subreg:SI (fix:DI (float_extend:DF\n+\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))) 0))\n+   (clobber (match_scratch:DI 2 \"=&f\"))\n+   (clobber (match_scratch:SI 3 \"=&f\"))]\n   \"TARGET_FP && alpha_tp == ALPHA_TP_INSN\"\n   \"#\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(fix:SI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(subreg:SI (fix:DI (float_extend:DF\n+\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))) 0))\n+   (clobber (match_scratch:DI 2 \"=f\"))]\n   \"TARGET_FP && alpha_tp != ALPHA_TP_INSN\"\n   \"#\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_expand \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(fix:SI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n-  \"TARGET_FP\"\n-  \"{ if (alpha_tp == ALPHA_TP_INSN)\n-       { emit_insn(gen_fix_truncsfsi2_tp(operands[0], operands[1])); DONE; }\n-   }\")\n-\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&f\")\n \t(fix:DI (float_extend:DF"}]}