{"sha": "bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjM2VlODFlM2M2MGJjNGU4MDAxODcxZWRlMmIwYjA3ZmY0MTdmMQ==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2018-05-18T12:31:04Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2018-05-18T12:31:04Z"}, "message": "re PR middle-end/85817 (ICE in expand_call at gcc/calls.c:4291)\n\n2018-05-18  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR middle-end/85817\n\t* ipa-pure-const.c (malloc_candidate_p): Remove the check integer_zerop\n\tfor retval and return false if all args to phi are zero.\t\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr83648.c: Change scan-tree-dump to\n\tscan-tree-dump-not for h.\n\nFrom-SVN: r260358", "tree": {"sha": "3b5a9fcb699e42d0db04126b33ecc6cd67e594fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b5a9fcb699e42d0db04126b33ecc6cd67e594fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/comments", "author": null, "committer": null, "parents": [{"sha": "b55fbca39ee2568d007ce835f7684f3d2ec2e986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55fbca39ee2568d007ce835f7684f3d2ec2e986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55fbca39ee2568d007ce835f7684f3d2ec2e986"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "479b032c040b61124e091aef89e1896b1f2fe68c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "patch": "@@ -1,3 +1,9 @@\n+2018-05-18  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR middle-end/85817\n+\t* ipa-pure-const.c (malloc_candidate_p): Remove the check integer_zerop\n+\tfor retval and return false if all args to phi are zero.\t\n+\n 2018-05-18  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-ssa-evrp.c (class evrp_folder): Add simplify_stmt_using_ranges"}, {"sha": "528ea6695ac3aadb3c1da76ef57d51788788a535", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "patch": "@@ -940,9 +940,6 @@ malloc_candidate_p (function *fun, bool ipa)\n       if (!retval)\n \tDUMP_AND_RETURN(\"No return value.\")\n \n-      if (integer_zerop (retval))\n-\tcontinue;\n-\n       if (TREE_CODE (retval) != SSA_NAME\n \t  || TREE_CODE (TREE_TYPE (retval)) != POINTER_TYPE)\n \tDUMP_AND_RETURN(\"Return value is not SSA_NAME or not a pointer type.\")\n@@ -972,37 +969,44 @@ malloc_candidate_p (function *fun, bool ipa)\n \t}\n \n       else if (gphi *phi = dyn_cast<gphi *> (def))\n-\tfor (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n-\t  {\n-\t    tree arg = gimple_phi_arg_def (phi, i);\n-\t    if (integer_zerop (arg))\n-\t      continue;\n+\t{\n+\t  bool all_args_zero = true;\n+\t  for (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n+\t    {\n+\t      tree arg = gimple_phi_arg_def (phi, i);\n+\t      if (integer_zerop (arg))\n+\t\tcontinue;\n+\n+\t      all_args_zero = false;\n+\t      if (TREE_CODE (arg) != SSA_NAME)\n+\t\tDUMP_AND_RETURN (\"phi arg is not SSA_NAME.\");\n+\t      if (!check_retval_uses (arg, phi))\n+\t\tDUMP_AND_RETURN (\"phi arg has uses outside phi\"\n+\t\t\t\t \" and comparisons against 0.\")\n+\n+\t      gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n+\t      gcall *call_stmt = dyn_cast<gcall *> (arg_def);\n+\t      if (!call_stmt)\n+\t\treturn false;\n+\t      tree callee_decl = gimple_call_fndecl (call_stmt);\n+\t      if (!callee_decl)\n+\t\treturn false;\n+\t      if (!ipa && !DECL_IS_MALLOC (callee_decl))\n+\t\tDUMP_AND_RETURN(\"callee_decl does not have malloc attribute\"\n+\t\t\t\t\" for non-ipa mode.\")\n+\n+\t      cgraph_edge *cs = node->get_edge (call_stmt);\n+\t      if (cs)\n+\t\t{\n+\t\t  ipa_call_summary *es = ipa_call_summaries->get (cs);\n+\t\t  gcc_assert (es);\n+\t\t  es->is_return_callee_uncaptured = true;\n+\t\t}\n+\t    }\n \n-\t    if (TREE_CODE (arg) != SSA_NAME)\n-\t      DUMP_AND_RETURN (\"phi arg is not SSA_NAME.\");\n-\t    if (!check_retval_uses (arg, phi))\n-\t      DUMP_AND_RETURN (\"phi arg has uses outside phi\"\n-\t\t\t       \" and comparisons against 0.\")\n-\n-\t    gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n-\t    gcall *call_stmt = dyn_cast<gcall *> (arg_def);\n-\t    if (!call_stmt)\n-\t      return false;\n-\t    tree callee_decl = gimple_call_fndecl (call_stmt);\n-\t    if (!callee_decl)\n-\t      return false;\n-\t    if (!ipa && !DECL_IS_MALLOC (callee_decl))\n-\t      DUMP_AND_RETURN(\"callee_decl does not have malloc attribute for\"\n-\t\t\t      \" non-ipa mode.\")\n-\n-\t    cgraph_edge *cs = node->get_edge (call_stmt);\n-\t    if (cs)\n-\t      {\n-\t\tipa_call_summary *es = ipa_call_summaries->get (cs);\n-\t\tgcc_assert (es);\n-\t\tes->is_return_callee_uncaptured = true;\n-\t      }\n-\t  }\n+\t  if (all_args_zero)\n+\t    DUMP_AND_RETURN (\"Return value is a phi with all args equal to 0.\");\n+\t}\n \n       else\n \tDUMP_AND_RETURN(\"def_stmt of return value is not a call or phi-stmt.\")"}, {"sha": "cbd2266c49846fcd37e04c8e2819368d44433859", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "patch": "@@ -1,3 +1,9 @@\n+2018-05-18  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR middle-end/85817\n+\t* gcc.dg/tree-ssa/pr83648.c: Change scan-tree-dump to\n+\tscan-tree-dump-not for h.\n+\n 2018-05-18  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/pr21559.c: Adjust."}, {"sha": "884faf81167414684f10544ec00bb8fe515de036", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83648.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83648.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3ee81e3c60bc4e8001871ede2b0b07ff417f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83648.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83648.c?ref=bec3ee81e3c60bc4e8001871ede2b0b07ff417f1", "patch": "@@ -12,4 +12,4 @@ void *h()\n }\n \n /* { dg-final { scan-tree-dump \"Function found to be malloc: g\" \"local-pure-const1\" } } */\n-/* { dg-final { scan-tree-dump \"Function found to be malloc: h\" \"local-pure-const1\" } } */\n+/* { dg-final { scan-tree-dump-not \"Function found to be malloc: h\" \"local-pure-const1\" } } */"}]}