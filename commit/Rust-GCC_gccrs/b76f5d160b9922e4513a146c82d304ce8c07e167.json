{"sha": "b76f5d160b9922e4513a146c82d304ce8c07e167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2ZjVkMTYwYjk5MjJlNDUxM2ExNDZjODJkMzA0Y2U4YzA3ZTE2Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-29T00:39:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-29T00:39:50Z"}, "message": "implement-c.texi: Document C11 implementation-defined behavior.\n\n\t* doc/implement-c.texi: Document C11 implementation-defined\n\tbehavior.  Refer to -ffp-contract=fast for contraction behavior.\n\t* doc/invoke.texi (-std=c99, std=c11): Update description of\n\tcompleteness.\n\t(-std=gnu99): Don't mention as future default.\n\t(-std=gnu11): Mention as intended future default.\n\t* doc/standards.texi: Update descriptions of C99 and C11 support.\n\tLimit statement about C99 facilities for freestanding\n\timplementations to some platforms only.\n\nFrom-SVN: r205505", "tree": {"sha": "a15a9d0d7aae4993357c39e115e14417f91b642d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15a9d0d7aae4993357c39e115e14417f91b642d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76f5d160b9922e4513a146c82d304ce8c07e167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f5d160b9922e4513a146c82d304ce8c07e167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76f5d160b9922e4513a146c82d304ce8c07e167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f5d160b9922e4513a146c82d304ce8c07e167/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6797ed61fab0f8ce584c885db9b06ec03deaed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6797ed61fab0f8ce584c885db9b06ec03deaed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6797ed61fab0f8ce584c885db9b06ec03deaed9"}], "stats": {"total": 258, "additions": 170, "deletions": 88}, "files": [{"sha": "414e88822567dc9527c05206bfc5f0ed6043c2b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b76f5d160b9922e4513a146c82d304ce8c07e167", "patch": "@@ -1,3 +1,15 @@\n+2013-11-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/implement-c.texi: Document C11 implementation-defined\n+\tbehavior.  Refer to -ffp-contract=fast for contraction behavior.\n+\t* doc/invoke.texi (-std=c99, std=c11): Update description of\n+\tcompleteness.\n+\t(-std=gnu99): Don't mention as future default.\n+\t(-std=gnu11): Mention as intended future default.\n+\t* doc/standards.texi: Update descriptions of C99 and C11 support.\n+\tLimit statement about C99 facilities for freestanding\n+\timplementations to some platforms only.\n+\n 2013-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/59327"}, {"sha": "974546c1ca8a96fb2787484e56a4023379fc1d5f", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 135, "deletions": 71, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=b76f5d160b9922e4513a146c82d304ce8c07e167", "patch": "@@ -9,9 +9,9 @@\n A conforming implementation of ISO C is required to document its\n choice of behavior in each of the areas that are designated\n ``implementation defined''.  The following lists all such areas,\n-along with the section numbers from the ISO/IEC 9899:1990 and ISO/IEC\n-9899:1999 standards.  Some areas are only implementation-defined in\n-one version of the standard.\n+along with the section numbers from the ISO/IEC 9899:1990, ISO/IEC\n+9899:1999 and ISO/IEC 9899:2011 standards.  Some areas are only\n+implementation-defined in one version of the standard.\n \n Some choices depend on the externally determined ABI for the platform\n (including standard character encodings) which GCC follows; these are\n@@ -47,14 +47,15 @@ a freestanding environment); refer to their documentation for details.\n \n @itemize @bullet\n @item\n-@cite{How a diagnostic is identified (C90 3.7, C99 3.10, C90 and C99 5.1.1.3).}\n+@cite{How a diagnostic is identified (C90 3.7, C99 and C11 3.10, C90,\n+C99 and C11 5.1.1.3).}\n \n Diagnostics consist of all the output sent to stderr by GCC@.\n \n @item\n @cite{Whether each nonempty sequence of white-space characters other than\n new-line is retained or replaced by one space character in translation\n-phase 3 (C90 and C99 5.1.1.2).}\n+phase 3 (C90, C99 and C11 5.1.1.2).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n@@ -70,7 +71,8 @@ of the C library, and are not defined by GCC itself.\n @itemize @bullet\n @item\n @cite{The mapping between physical source file multibyte characters\n-and the source character set in translation phase 1 (C90 and C99 5.1.1.2).}\n+and the source character set in translation phase 1 (C90, C99 and C11\n+5.1.1.2).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n@@ -83,14 +85,14 @@ behavior, cpp, The C Preprocessor}.\n @itemize @bullet\n @item\n @cite{Which additional multibyte characters may appear in identifiers\n-and their correspondence to universal character names (C99 6.4.2).}\n+and their correspondence to universal character names (C99 and C11 6.4.2).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The number of significant initial characters in an identifier\n-(C90 6.1.2, C90 and C99 5.2.4.1, C99 6.4.2).}\n+(C90 6.1.2, C90, C99 and C11 5.2.4.1, C99 and C11 6.4.2).}\n \n For internal names, all characters are significant.  For external names,\n the number of significant characters are defined by the linker; for\n@@ -100,7 +102,7 @@ almost all targets, all characters are significant.\n @cite{Whether case distinctions are significant in an identifier with\n external linkage (C90 6.1.2).}\n \n-This is a property of the linker.  C99 requires that case distinctions\n+This is a property of the linker.  C99 and C11 require that case distinctions\n are always significant in identifiers with external linkage and\n systems without this property are not supported by GCC@.\n \n@@ -111,33 +113,34 @@ systems without this property are not supported by GCC@.\n \n @itemize @bullet\n @item\n-@cite{The number of bits in a byte (C90 3.4, C99 3.6).}\n+@cite{The number of bits in a byte (C90 3.4, C99 and C11 3.6).}\n \n Determined by ABI@.\n \n @item\n-@cite{The values of the members of the execution character set (C90\n-and C99 5.2.1).}\n+@cite{The values of the members of the execution character set (C90,\n+C99 and C11 5.2.1).}\n \n Determined by ABI@.\n \n @item\n @cite{The unique value of the member of the execution character set produced\n-for each of the standard alphabetic escape sequences (C90 and C99 5.2.2).}\n+for each of the standard alphabetic escape sequences (C90, C99 and C11\n+5.2.2).}\n \n Determined by ABI@.\n \n @item\n @cite{The value of a @code{char} object into which has been stored any\n character other than a member of the basic execution character set\n-(C90 6.1.2.5, C99 6.2.5).}\n+(C90 6.1.2.5, C99 and C11 6.2.5).}\n \n Determined by ABI@.\n \n @item\n @cite{Which of @code{signed char} or @code{unsigned char} has the same\n range, representation, and behavior as ``plain'' @code{char} (C90\n-6.1.2.5, C90 6.2.1.1, C99 6.2.5, C99 6.3.1.1).}\n+6.1.2.5, C90 6.2.1.1, C99 and C11 6.2.5, C99 and C11 6.3.1.1).}\n \n @opindex fsigned-char\n @opindex funsigned-char\n@@ -148,23 +151,25 @@ Options Controlling C Dialect}.\n @item\n @cite{The mapping of members of the source character set (in character\n constants and string literals) to members of the execution character\n-set (C90 6.1.3.4, C99 6.4.4.4, C90 and C99 5.1.1.2).}\n+set (C90 6.1.3.4, C99 and C11 6.4.4.4, C90, C99 and C11 5.1.1.2).}\n \n Determined by ABI@.\n \n @item\n @cite{The value of an integer character constant containing more than one\n character or containing a character or escape sequence that does not map\n-to a single-byte execution character (C90 6.1.3.4, C99 6.4.4.4).}\n+to a single-byte execution character (C90 6.1.3.4, C99 and C11 6.4.4.4).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The value of a wide character constant containing more than one\n-multibyte character, or containing a multibyte character or escape\n-sequence not represented in the extended execution character set (C90\n-6.1.3.4, C99 6.4.4.4).}\n+multibyte character or a single multibyte character that maps to\n+multiple members of the extended execution character set, or\n+containing a multibyte character or escape sequence not represented in\n+the extended execution character set (C90 6.1.3.4, C99 and C11\n+6.4.4.4).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n@@ -173,32 +178,53 @@ behavior, cpp, The C Preprocessor}.\n @cite{The current locale used to convert a wide character constant consisting\n of a single multibyte character that maps to a member of the extended\n execution character set into a corresponding wide character code (C90\n-6.1.3.4, C99 6.4.4.4).}\n+6.1.3.4, C99 and C11 6.4.4.4).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n \n+@item\n+@cite{Whether differently-prefixed wide string literal tokens can be\n+concatenated and, if so, the treatment of the resulting multibyte\n+character sequence (C11 6.4.5).}\n+\n+Such tokens may not be concatenated.\n+\n @item\n @cite{The current locale used to convert a wide string literal into\n-corresponding wide character codes (C90 6.1.4, C99 6.4.5).}\n+corresponding wide character codes (C90 6.1.4, C99 and C11 6.4.5).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The value of a string literal containing a multibyte character or escape\n-sequence not represented in the execution character set (C90 6.1.4, C99 6.4.5).}\n+sequence not represented in the execution character set (C90 6.1.4,\n+C99 and C11 6.4.5).}\n \n @xref{Implementation-defined behavior, , Implementation-defined\n behavior, cpp, The C Preprocessor}.\n+\n+@item\n+@cite{The encoding of any of @code{wchar_t}, @code{char16_t}, and\n+@code{char32_t} where the corresponding standard encoding macro\n+(@code{__STDC_ISO_10646__}, @code{__STDC_UTF_16__}, or\n+@code{__STDC_UTF_32__}) is not defined (C11 6.10.8.2).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.  @code{char16_t} and\n+@code{char32_t} literals are always encoded in UTF-16 and UTF-32\n+respectively.\n+\n @end itemize\n \n @node Integers implementation\n @section Integers\n \n @itemize @bullet\n @item\n-@cite{Any extended integer types that exist in the implementation (C99 6.2.5).}\n+@cite{Any extended integer types that exist in the implementation (C99\n+and C11 6.2.5).}\n \n GCC does not support any extended integer types.\n @c The __mode__ attribute might create types of precisions not\n@@ -211,43 +237,43 @@ GCC does not support any extended integer types.\n @item\n @cite{Whether signed integer types are represented using sign and magnitude,\n two's complement, or one's complement, and whether the extraordinary value\n-is a trap representation or an ordinary value (C99 6.2.6.2).}\n+is a trap representation or an ordinary value (C99 and C11 6.2.6.2).}\n \n GCC supports only two's complement integer types, and all bit patterns\n are ordinary values.\n \n @item\n @cite{The rank of any extended integer type relative to another extended\n-integer type with the same precision (C99 6.3.1.1).}\n+integer type with the same precision (C99 and C11 6.3.1.1).}\n \n GCC does not support any extended integer types.\n @c If it did, there would only be one of each precision and signedness.\n \n @item\n @cite{The result of, or the signal raised by, converting an integer to a\n signed integer type when the value cannot be represented in an object of\n-that type (C90 6.2.1.2, C99 6.3.1.3).}\n+that type (C90 6.2.1.2, C99 and C11 6.3.1.3).}\n \n For conversion to a type of width @math{N}, the value is reduced\n modulo @math{2^N} to be within range of the type; no signal is raised.\n \n @item\n @cite{The results of some bitwise operations on signed integers (C90\n-6.3, C99 6.5).}\n+6.3, C99 and C11 6.5).}\n \n Bitwise operators act on the representation of the value including\n both the sign and value bits, where the sign bit is considered\n immediately above the highest-value value bit.  Signed @samp{>>} acts\n on negative numbers by sign extension.\n \n-GCC does not use the latitude given in C99 only to treat certain\n+GCC does not use the latitude given in C99 and C11 only to treat certain\n aspects of signed @samp{<<} as undefined, but this is subject to\n change.\n \n @item\n @cite{The sign of the remainder on integer division (C90 6.3.5).}\n \n-GCC always follows the C99 requirement that the result of division is\n+GCC always follows the C99 and C11 requirement that the result of division is\n truncated towards zero.\n \n @end itemize\n@@ -259,72 +285,76 @@ truncated towards zero.\n @item\n @cite{The accuracy of the floating-point operations and of the library\n functions in @code{<math.h>} and @code{<complex.h>} that return floating-point\n-results (C90 and C99 5.2.4.2.2).}\n+results (C90, C99 and C11 5.2.4.2.2).}\n \n The accuracy is unknown.\n \n @item\n @cite{The rounding behaviors characterized by non-standard values\n of @code{FLT_ROUNDS} @gol\n-(C90 and C99 5.2.4.2.2).}\n+(C90, C99 and C11 5.2.4.2.2).}\n \n GCC does not use such values.\n \n @item\n @cite{The evaluation methods characterized by non-standard negative\n-values of @code{FLT_EVAL_METHOD} (C99 5.2.4.2.2).}\n+values of @code{FLT_EVAL_METHOD} (C99 and C11 5.2.4.2.2).}\n \n GCC does not use such values.\n \n @item\n @cite{The direction of rounding when an integer is converted to a\n floating-point number that cannot exactly represent the original\n-value (C90 6.2.1.3, C99 6.3.1.4).}\n+value (C90 6.2.1.3, C99 and C11 6.3.1.4).}\n \n C99 Annex F is followed.\n \n @item\n @cite{The direction of rounding when a floating-point number is\n-converted to a narrower floating-point number (C90 6.2.1.4, C99\n+converted to a narrower floating-point number (C90 6.2.1.4, C99 and C11\n 6.3.1.5).}\n \n C99 Annex F is followed.\n \n @item\n @cite{How the nearest representable value or the larger or smaller\n representable value immediately adjacent to the nearest representable\n-value is chosen for certain floating constants (C90 6.1.3.1, C99\n+value is chosen for certain floating constants (C90 6.1.3.1, C99 and C11\n 6.4.4.2).}\n \n C99 Annex F is followed.\n \n @item\n @cite{Whether and how floating expressions are contracted when not\n-disallowed by the @code{FP_CONTRACT} pragma (C99 6.5).}\n+disallowed by the @code{FP_CONTRACT} pragma (C99 and C11 6.5).}\n \n-Expressions are currently only contracted if\n+Expressions are currently only contracted if @option{-ffp-contract=fast},\n @option{-funsafe-math-optimizations} or @option{-ffast-math} are used.\n This is subject to change.\n \n @item\n-@cite{The default state for the @code{FENV_ACCESS} pragma (C99 7.6.1).}\n+@cite{The default state for the @code{FENV_ACCESS} pragma (C99 and C11\n+7.6.1).}\n \n This pragma is not implemented, but the default is to ``off'' unless\n @option{-frounding-math} is used in which case it is ``on''.\n \n @item\n @cite{Additional floating-point exceptions, rounding modes, environments,\n-and classifications, and their macro names (C99 7.6, C99 7.12).}\n+and classifications, and their macro names (C99 and C11 7.6, C99 and\n+C11 7.12).}\n \n This is dependent on the implementation of the C library, and is not\n defined by GCC itself.\n \n @item\n-@cite{The default state for the @code{FP_CONTRACT} pragma (C99 7.12.2).}\n+@cite{The default state for the @code{FP_CONTRACT} pragma (C99 and C11\n+7.12.2).}\n \n This pragma is not implemented.  Expressions are currently only\n-contracted if @option{-funsafe-math-optimizations} or\n-@option{-ffast-math} are used.  This is subject to change.\n+contracted if @option{-ffp-contract=fast},\n+@option{-funsafe-math-optimizations} or @option{-ffast-math} are used.\n+This is subject to change.\n \n @item\n @cite{Whether the ``inexact'' floating-point exception can be raised\n@@ -350,7 +380,7 @@ defined by GCC itself.\n @itemize @bullet\n @item\n @cite{The result of converting a pointer to an integer or\n-vice versa (C90 6.3.4, C99 6.3.2.3).}\n+vice versa (C90 6.3.4, C99 and C11 6.3.2.3).}\n \n A cast from pointer to integer discards most-significant bits if the\n pointer representation is larger than the integer type,\n@@ -373,11 +403,11 @@ When casting from pointer to integer and back again, the resulting\n pointer must reference the same object as the original pointer, otherwise\n the behavior is undefined.  That is, one may not use integer arithmetic to\n avoid the undefined behavior of pointer arithmetic as proscribed in\n-C99 6.5.6/8.\n+C99 and C11 6.5.6/8.\n \n @item\n @cite{The size of the result of subtracting two pointers to elements\n-of the same array (C90 6.3.6, C99 6.5.6).}\n+of the same array (C90 6.3.6, C99 and C11 6.5.6).}\n \n The value is as specified in the standard and the type is determined\n by the ABI@.\n@@ -390,7 +420,7 @@ by the ABI@.\n @itemize @bullet\n @item\n @cite{The extent to which suggestions made by using the @code{register}\n-storage-class specifier are effective (C90 6.5.1, C99 6.7.1).}\n+storage-class specifier are effective (C90 6.5.1, C99 and C11 6.7.1).}\n \n The @code{register} specifier affects code generation only in these ways:\n \n@@ -415,7 +445,7 @@ in registers unless they are marked @code{register}.\n \n @item\n @cite{The extent to which suggestions made by using the inline function\n-specifier are effective (C99 6.7.4).}\n+specifier are effective (C99 and C11 6.7.4).}\n \n GCC will not inline any functions if the @option{-fno-inline} option is\n used or if @option{-O0} is used.  Otherwise, GCC may still be unable to\n@@ -439,41 +469,46 @@ may be a trap representation.\n @item\n @cite{Whether a ``plain'' @code{int} bit-field is treated as a\n @code{signed int} bit-field or as an @code{unsigned int} bit-field\n-(C90 6.5.2, C90 6.5.2.1, C99 6.7.2, C99 6.7.2.1).}\n+(C90 6.5.2, C90 6.5.2.1, C99 and C11 6.7.2, C99 and C11 6.7.2.1).}\n \n @opindex funsigned-bitfields\n By default it is treated as @code{signed int} but this may be changed\n by the @option{-funsigned-bitfields} option.\n \n @item\n @cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n-and @code{unsigned int} (C99 6.7.2.1).}\n+and @code{unsigned int} (C99 and C11 6.7.2.1).}\n \n No other types are permitted in strictly conforming mode.\n @c Would it be better to restrict the pedwarn for other types to C90\n-@c mode and document the other types for C99 mode?\n+@c mode and document the other types for C99/C11 mode?\n+\n+@item\n+@cite{Whether atomic types are permitted for bit-fields (C11 6.7.2.1).}\n+\n+Atomic types are not permitted for bit-fields.\n \n @item\n @cite{Whether a bit-field can straddle a storage-unit boundary (C90\n-6.5.2.1, C99 6.7.2.1).}\n+6.5.2.1, C99 and C11 6.7.2.1).}\n \n Determined by ABI@.\n \n @item\n @cite{The order of allocation of bit-fields within a unit (C90\n-6.5.2.1, C99 6.7.2.1).}\n+6.5.2.1, C99 and C11 6.7.2.1).}\n \n Determined by ABI@.\n \n @item\n @cite{The alignment of non-bit-field members of structures (C90\n-6.5.2.1, C99 6.7.2.1).}\n+6.5.2.1, C99 and C11 6.7.2.1).}\n \n Determined by ABI@.\n \n @item\n @cite{The integer type compatible with each enumerated type (C90\n-6.5.2.2, C99 6.7.2.2).}\n+6.5.2.2, C99 and C11 6.7.2.2).}\n \n @opindex fshort-enums\n Normally, the type is @code{unsigned int} if there are no negative\n@@ -501,7 +536,7 @@ determined by the ABI@.\n @itemize @bullet\n @item\n @cite{What constitutes an access to an object that has volatile-qualified\n-type (C90 6.5.3, C99 6.7.3).}\n+type (C90 6.5.3, C99 and C11 6.7.3).}\n \n Such an object is normally accessed by pointers and used for accessing\n hardware.  In most expressions, it is intuitively obvious what is a read\n@@ -574,46 +609,50 @@ behavior, cpp, The C Preprocessor}, for details of these aspects of\n implementation-defined behavior.\n \n @itemize @bullet\n+@item\n+@cite{The locations within @code{#pragma} directives where header name\n+preprocessing tokens are recognized (C11 6.4, C11 6.4.7).}\n+\n @item\n @cite{How sequences in both forms of header names are mapped to headers\n-or external source file names (C90 6.1.7, C99 6.4.7).}\n+or external source file names (C90 6.1.7, C99 and C11 6.4.7).}\n \n @item\n @cite{Whether the value of a character constant in a constant expression\n that controls conditional inclusion matches the value of the same character\n-constant in the execution character set (C90 6.8.1, C99 6.10.1).}\n+constant in the execution character set (C90 6.8.1, C99 and C11 6.10.1).}\n \n @item\n @cite{Whether the value of a single-character character constant in a\n constant expression that controls conditional inclusion may have a\n-negative value (C90 6.8.1, C99 6.10.1).}\n+negative value (C90 6.8.1, C99 and C11 6.10.1).}\n \n @item\n @cite{The places that are searched for an included @samp{<>} delimited\n header, and how the places are specified or the header is\n-identified (C90 6.8.2, C99 6.10.2).}\n+identified (C90 6.8.2, C99 and C11 6.10.2).}\n \n @item\n @cite{How the named source file is searched for in an included @samp{\"\"}\n-delimited header (C90 6.8.2, C99 6.10.2).}\n+delimited header (C90 6.8.2, C99 and C11 6.10.2).}\n \n @item\n @cite{The method by which preprocessing tokens (possibly resulting from\n macro expansion) in a @code{#include} directive are combined into a header\n-name (C90 6.8.2, C99 6.10.2).}\n+name (C90 6.8.2, C99 and C11 6.10.2).}\n \n @item\n @cite{The nesting limit for @code{#include} processing (C90 6.8.2, C99\n-6.10.2).}\n+and C11 6.10.2).}\n \n @item\n @cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n the @samp{\\} character that begins a universal character name in a\n-character constant or string literal (C99 6.10.3.2).}\n+character constant or string literal (C99 and C11 6.10.3.2).}\n \n @item\n @cite{The behavior on each recognized non-@code{STDC #pragma}\n-directive (C90 6.8.6, C99 6.10.6).}\n+directive (C90 6.8.6, C99 and C11 6.10.6).}\n \n @xref{Pragmas, , Pragmas, cpp, The C Preprocessor}, for details of\n pragmas accepted by GCC on all targets.  @xref{Pragmas, , Pragmas\n@@ -622,7 +661,7 @@ Accepted by GCC}, for details of target-specific pragmas.\n @item\n @cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n respectively, the date and time of translation are not available (C90\n-6.8.8, C99 6.10.8).}\n+6.8.8, C99 6.10.8, C11 6.10.8.1).}\n \n @end itemize\n \n@@ -635,7 +674,7 @@ of the C library, and are not defined by GCC itself.\n @itemize @bullet\n @item\n @cite{The null pointer constant to which the macro @code{NULL} expands\n-(C90 7.1.6, C99 7.17).}\n+(C90 7.1.6, C99 7.17, C11 7.19).}\n \n In @code{<stddef.h>}, @code{NULL} expands to @code{((void *)0)}.  GCC\n does not provide the other headers which define @code{NULL} and some\n@@ -650,19 +689,44 @@ library implementations may use other definitions in those headers.\n @item\n @cite{The values or expressions assigned to the macros specified in the\n headers @code{<float.h>}, @code{<limits.h>}, and @code{<stdint.h>}\n-(C90 and C99 5.2.4.2, C99 7.18.2, C99 7.18.3).}\n+(C90, C99 and C11 5.2.4.2, C99 7.18.2, C99 7.18.3, C11 7.20.2, C11 7.20.3).}\n \n Determined by ABI@.\n \n+@item\n+@cite{The result of attempting to indirectly access an object with\n+automatic or thread storage duration from a thread other than the one\n+with which it is associated (C11 6.2.4).}\n+\n+Such accesses are supported, subject to the same requirements for\n+synchronization for concurrent accesses as for concurrent accesses to\n+any object.\n+\n @item\n @cite{The number, order, and encoding of bytes in any object\n-(when not explicitly specified in this International Standard) (C99 6.2.6.1).}\n+(when not explicitly specified in this International Standard) (C99\n+and C11 6.2.6.1).}\n \n Determined by ABI@.\n \n @item\n-@cite{The value of the result of the @code{sizeof} operator (C90\n-6.3.3.4, C99 6.5.3.4).}\n+@cite{Whether any extended alignments are supported and the contexts\n+in which they are supported (C11 6.2.8).}\n+\n+Extended alignments up to @math{2^{28}} (bytes) are supported for\n+objects of automatic storage duration.  Alignments supported for\n+objects of static and thread storage duration are determined by the\n+ABI.\n+\n+@item\n+@cite{Valid alignment values other than those returned by an _Alignof\n+expression for fundamental types, if any (C11 6.2.8).}\n+\n+Valid alignments are powers of 2 up to and including @math{2^{28}}.\n+\n+@item\n+@cite{The value of the result of the @code{sizeof} and @code{_Alignof}\n+operators (C90 6.3.3.4, C99 and C11 6.5.3.4).}\n \n Determined by ABI@.\n "}, {"sha": "efc8e54c8160820434fa2d79bc24877eb02fe147", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b76f5d160b9922e4513a146c82d304ce8c07e167", "patch": "@@ -1654,16 +1654,24 @@ ISO C90 as modified in amendment 1.\n @itemx c9x\n @itemx iso9899:1999\n @itemx iso9899:199x\n-ISO C99.  Note that this standard is not yet fully supported; see\n+ISO C99.  This standard is substantially completely supported, modulo\n+bugs, extended identifiers (supported except for corner cases when\n+@option{-fextended-identifiers} is used) and floating-point issues\n+(mainly but not entirely relating to optional C99 features from\n+Annexes F and G).  See\n @w{@uref{http://gcc.gnu.org/c99status.html}} for more information.  The\n names @samp{c9x} and @samp{iso9899:199x} are deprecated.\n \n @item c11\n @itemx c1x\n @itemx iso9899:2011\n-ISO C11, the 2011 revision of the ISO C standard.\n-Support is incomplete and experimental.  The name @samp{c1x} is\n-deprecated.\n+ISO C11, the 2011 revision of the ISO C standard.  This standard is\n+substantially completely supported, modulo bugs, extended identifiers\n+(supported except for corner cases when\n+@option{-fextended-identifiers} is used), floating-point issues\n+(mainly but not entirely relating to optional C11 features from\n+Annexes F and G) and the optional Annexes K (Bounds-checking\n+interfaces) and L (Analyzability).  The name @samp{c1x} is deprecated.\n \n @item gnu90\n @itemx gnu89\n@@ -1672,13 +1680,12 @@ is the default for C code.\n \n @item gnu99\n @itemx gnu9x\n-GNU dialect of ISO C99.  When ISO C99 is fully implemented in GCC,\n-this will become the default.  The name @samp{gnu9x} is deprecated.\n+GNU dialect of ISO C99.  The name @samp{gnu9x} is deprecated.\n \n @item gnu11\n @itemx gnu1x\n-GNU dialect of ISO C11.  Support is incomplete and experimental.  The\n-name @samp{gnu1x} is deprecated.\n+GNU dialect of ISO C11.  This is intended to become the default in a\n+future release of GCC.  The name @samp{gnu1x} is deprecated.\n \n @item c++98\n @itemx c++03"}, {"sha": "3c1f480f3de9466bd46e28537acbfae55697331b", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f5d160b9922e4513a146c82d304ce8c07e167/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=b76f5d160b9922e4513a146c82d304ce8c07e167", "patch": "@@ -85,8 +85,8 @@ as @dfn{AMD1}; the amended standard is sometimes known as @dfn{C94} or\n @option{-pedantic} to receive all required diagnostics).\n \n A new edition of the ISO C standard was published in 1999 as ISO/IEC\n-9899:1999, and is commonly known as @dfn{C99}.  GCC has incomplete\n-support for this standard version; see\n+9899:1999, and is commonly known as @dfn{C99}.  GCC has substantially\n+complete support for this standard version; see\n @uref{http://gcc.gnu.org/c99status.html} for details.  To select this\n standard, use @option{-std=c99} or @option{-std=iso9899:1999}.  (While in\n development, drafts of this standard version were referred to as\n@@ -97,8 +97,8 @@ Corrigenda published in 2001, 2004 and 2007.  GCC does not support the\n uncorrected version.\n \n A fourth version of the C standard, known as @dfn{C11}, was published\n-in 2011 as ISO/IEC 9899:2011.  GCC has limited incomplete support for\n-parts of this standard, enabled with @option{-std=c11} or\n+in 2011 as ISO/IEC 9899:2011.  GCC has substantially complete support\n+for this standard, enabled with @option{-std=c11} or\n @option{-std=iso9899:2011}.  (While in development, drafts of this\n standard version were referred to as @dfn{C1X}.)\n \n@@ -111,10 +111,9 @@ select an extended version of the C language explicitly with\n @option{-std=gnu90} (for C90 with GNU extensions), @option{-std=gnu99}\n (for C99 with GNU extensions) or @option{-std=gnu11} (for C11 with GNU\n extensions).  The default, if no C language dialect\n-options are given, is @option{-std=gnu90}; this will change to\n-@option{-std=gnu99} or @option{-std=gnu11} in some future release when\n-the C99 or C11 support is\n-complete.  Some features that are part of the C99 standard are\n+options are given, is @option{-std=gnu90}; this is intended to change\n+to @option{-std=gnu11} in some future release.  Some features that are\n+part of the C99 standard are\n accepted as extensions in C90 mode, and some features that are part of\n the C11 standard are accepted as extensions in C90 and C99 modes.\n \n@@ -156,7 +155,7 @@ your own arrangements for linking and startup.\n \n GCC does not provide the library facilities required only of hosted\n implementations, nor yet all the facilities required by C99 of\n-freestanding implementations; to use the facilities of a hosted\n+freestanding implementations on all platforms; to use the facilities of a hosted\n environment, you will need to find them elsewhere (for example, in the\n GNU C library).  @xref{Standard Libraries,,Standard Libraries}.\n "}]}