{"sha": "33defa7c6c36c0671b81b4785fbb250430a4a953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkZWZhN2M2YzM2YzA2NzFiODFiNDc4NWZiYjI1MDQzMGE0YTk1Mw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-08-12T08:59:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T08:59:33Z"}, "message": "[Ada] Inconsistent compile time Constraint_Error warning\n\nThis patch corrects several bugs within the compiler which led to\ninconsistent handling of compile time Constraint_Errors. Notibly,\nsubtype out of range checks which are only out of range of the subtype\nmust be warnings while out of range checks where the value is out of\nrange of the base type must be an error. Also, type conversions and\nqualified expressions on literals constitute errors on any out of range\nvalue. The compiler needed many of these cases clarified.\n\n------------\n-- Source --\n------------\n\n--  main.ads\n\nwith System;\npackage Main is\n\n   type T_Enum is (Enum_1, Enum_2, Unknown)\n     with Default_Value => Unknown;\n\n   subtype T_Valid_Enum is T_Enum range Enum_1 .. Enum_2;\n\n   Value : T_Valid_Enum; --  WARNING\n\n   generic\n      type T_Element is (<>);\n      Init : T_Element;\n   package Generic_Test is\n      Value : T_Element := Init;\n   end;\n\n   package titi is new Generic_Test (T_Valid_Enum, Unknown); --  WARNING\n\n   type My_Float is digits System.Max_Base_Digits;\n\n   My_Float_Last : constant := My_Float'Last;\n   Out_Of_Range  : constant := My_Float_Last + 1.0;\n\n   Flt1 : My_Float := Out_Of_Range; --  ERROR\n\n   A : Positive := Positive (16#9999_9999_9999#); --  ERROR\n   B : Positive := 16#9999_9999_9999#;            --  ERROR\n   C : Positive := 0;                             --  WARNING\n   D : Positive := Positive (0);                  --  ERROR\n   E : Positive := Positive'(16#9999_9999_9999#); --  ERROR\n   F : Positive := Positive'(0);                  --  ERROR\nend;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gnatmake -q -gnatw_a main.adb\nmain.ads:9:12: warning: value not in range of type \"T_Valid_Enum\" defined at\nline 7\nmain.ads:9:12: warning: \"Constraint_Error\" will be raised at run time\nmain.ads:18:52: warning: value not in range of type \"T_Element\" defined at\nline 12, instance at line 18\nmain.ads:18:52: warning: \"Constraint_Error\" will be raised at run time\nmain.ads:25:23: value not in range of type \"My_Float\" defined at line 20\nmain.ads:25:23: static expression fails Constraint_Check\nmain.ads:27:19: value not in range of type \"Standard.Positive\"\nmain.ads:27:19: static expression fails Constraint_Check\nmain.ads:28:19: value not in range of type \"Standard.Positive\"\nmain.ads:28:19: static expression fails Constraint_Check\nmain.ads:29:19: warning: value not in range of type \"Standard.Positive\"\nmain.ads:29:19: warning: \"Constraint_Error\" will be raised at run time\nmain.ads:30:19: value not in range of type \"Standard.Positive\"\nmain.ads:30:19: static expression fails Constraint_Check\nmain.ads:31:27: value not in range of type \"Standard.Positive\"\nmain.ads:31:27: static expression fails Constraint_Check\nmain.ads:32:27: value not in range of type \"Standard.Positive\"\nmain.ads:32:27: static expression fails Constraint_Check\ngnatmake: \"main.ads\" compilation error\n\n2019-08-12  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Check_Non_Static_Context): Add a condition to\n\tdetermine if a range violation constitues a warning or an error.\n\t(Out_Of_Range): Add a condition to determine if a range\n\tviolation constitues a warning or an error.\n\nFrom-SVN: r274288", "tree": {"sha": "51388445d5dfda223c47e86395fbd2b514cb8572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51388445d5dfda223c47e86395fbd2b514cb8572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33defa7c6c36c0671b81b4785fbb250430a4a953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33defa7c6c36c0671b81b4785fbb250430a4a953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33defa7c6c36c0671b81b4785fbb250430a4a953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33defa7c6c36c0671b81b4785fbb250430a4a953/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e896dad492f7484cc239f105454713a3c4596eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e896dad492f7484cc239f105454713a3c4596eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e896dad492f7484cc239f105454713a3c4596eb"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "07166c6b3ea157f2b5237043185e806188c72335", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33defa7c6c36c0671b81b4785fbb250430a4a953/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33defa7c6c36c0671b81b4785fbb250430a4a953/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=33defa7c6c36c0671b81b4785fbb250430a4a953", "patch": "@@ -1,3 +1,10 @@\n+2019-08-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_eval.adb (Check_Non_Static_Context): Add a condition to\n+\tdetermine if a range violation constitues a warning or an error.\n+\t(Out_Of_Range): Add a condition to determine if a range\n+\tviolation constitues a warning or an error.\n+\n 2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Real_Range_Check): Do not rewrite the conversion"}, {"sha": "e417a0719d1dac8a0f72cecbdc654d4051aa9f26", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33defa7c6c36c0671b81b4785fbb250430a4a953/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33defa7c6c36c0671b81b4785fbb250430a4a953/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=33defa7c6c36c0671b81b4785fbb250430a4a953", "patch": "@@ -562,23 +562,31 @@ package body Sem_Eval is\n       elsif Is_Out_Of_Range (N, Base_Type (T), Assume_Valid => True) then\n          Out_Of_Range (N);\n \n-      --  Give warning if outside subtype (where one or both of the bounds of\n-      --  the subtype is static). This warning is omitted if the expression\n-      --  appears in a range that could be null (warnings are handled elsewhere\n-      --  for this case).\n+      --  Give a warning or error on the value outside the subtype. A\n+      --  warning is omitted if the expression appears in a range that could\n+      --  be null (warnings are handled elsewhere for this case).\n \n       elsif T /= Base_Type (T) and then Nkind (Parent (N)) /= N_Range then\n          if Is_In_Range (N, T, Assume_Valid => True) then\n             null;\n \n          elsif Is_Out_Of_Range (N, T, Assume_Valid => True) then\n-\n             --  Ignore out of range values for System.Priority in CodePeer\n             --  mode since the actual target compiler may provide a wider\n             --  range.\n \n             if CodePeer_Mode and then T = RTE (RE_Priority) then\n                Set_Do_Range_Check (N, False);\n+\n+            --  Determine if the out of range violation constitutes a warning\n+            --  or an error based on context according to RM 4.9 (34/3).\n+\n+            elsif Nkind_In (Original_Node (N), N_Type_Conversion,\n+                                               N_Qualified_Expression)\n+              and then Comes_From_Source (Original_Node (N))\n+            then\n+               Apply_Compile_Time_Constraint_Error\n+                 (N, \"value not in range of}\", CE_Range_Check_Failed);\n             else\n                Apply_Compile_Time_Constraint_Error\n                  (N, \"value not in range of}<<\", CE_Range_Check_Failed);\n@@ -5515,8 +5523,18 @@ package body Sem_Eval is\n          --  CodePeer mode where the target runtime may have more priorities.\n \n          elsif not CodePeer_Mode or else Etype (N) /= RTE (RE_Priority) then\n-            Apply_Compile_Time_Constraint_Error\n-              (N, \"value not in range of}\", CE_Range_Check_Failed);\n+            --  Determine if the out of range violation constitutes a warning\n+            --  or an error based on context according to RM 4.9 (34/3).\n+\n+            if Nkind (Original_Node (N)) = N_Type_Conversion\n+              and then not Comes_From_Source (Original_Node (N))\n+            then\n+               Apply_Compile_Time_Constraint_Error\n+                 (N, \"value not in range of}??\", CE_Range_Check_Failed);\n+            else\n+               Apply_Compile_Time_Constraint_Error\n+                 (N, \"value not in range of}\", CE_Range_Check_Failed);\n+            end if;\n          end if;\n \n       --  Here we generate a warning for the Ada 83 case, or when we are in an"}]}