{"sha": "46b2356df0c3f882b44f93101701f5c3f32bb830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiMjM1NmRmMGMzZjg4MmI0NGY5MzEwMTcwMWY1YzNmMzJiYjgzMA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-04-17T20:04:32Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-04-17T20:04:32Z"}, "message": "sourcebuild.texi (Test Suites): Document support for testing binary compatibility (moved from...\n\n2003-04-17  Janis Johnson  <janis187@us.ibm.com>\n\n\t* doc/sourcebuild.texi (Test Suites): Document support for testing\n\tbinary compatibility (moved from testsuite/README.compat).\n\n\t* testsuite/README.compat: Remove; content now in doc/sourcebuild.texi.\n\nFrom-SVN: r65748", "tree": {"sha": "23e0b8e2bc71e29b41eb81b0f35072a199cc7002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e0b8e2bc71e29b41eb81b0f35072a199cc7002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b2356df0c3f882b44f93101701f5c3f32bb830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b2356df0c3f882b44f93101701f5c3f32bb830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b2356df0c3f882b44f93101701f5c3f32bb830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b2356df0c3f882b44f93101701f5c3f32bb830/comments", "author": null, "committer": null, "parents": [{"sha": "3907500bf1cd491b1adb5a924dd9df028dd6b41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3907500bf1cd491b1adb5a924dd9df028dd6b41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3907500bf1cd491b1adb5a924dd9df028dd6b41f"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "09dae8bb7be1e019c4faa7945c61474e959ca91b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46b2356df0c3f882b44f93101701f5c3f32bb830", "patch": "@@ -1,3 +1,8 @@\n+2003-04-09  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Test Suites): Document support for testing\n+\tbinary compatibility (moved from testsuite/README.compat).\n+\n 2003-04-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_in_small_data_p): Disallow strings."}, {"sha": "d1e1e411284769d1388317a1001de663ffd81ca0", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=46b2356df0c3f882b44f93101701f5c3f32bb830", "patch": "@@ -759,6 +759,7 @@ here; FIXME: document the others.\n * libgcj Tests::    The Java library test suites.\n * gcov Testing::    Support for testing gcov.\n * profopt Testing:: Support for testing profile-directed optimizations.\n+* compat Testing::  Support for testing binary compatibility.\n @end menu\n \n @node Test Idioms\n@@ -1063,3 +1064,88 @@ suffix of profile data files\n list of options with which to run each test, similar to the lists for\n torture tests\n @end table\n+\n+@node compat Testing\n+@subsection Support for testing binary compatibility\n+\n+The file @file{compat.exp} provides language-independent support for\n+binary compatibility testing.  It supports testing interoperability\n+of two compilers that follow the same ABI, or of multiple sets of\n+compiler options that should not affect binary compatibility.\n+It is intended to be used for test suites that complement ABI test\n+suites.\n+\n+A test supported by this framework has three parts, each in a\n+separate source file: a main program and two pieces that interact\n+with each other to split up the functionality being tested.\n+\n+@table @file\n+@item @var{testname}_main.@var{suffix}\n+Contains the main program, which calls a function in file\n+@file{@var{testname}_x.@var{suffix}}.\n+\n+@item @var{testname}_x.@var{suffix}\n+Contains at least one call to a function in\n+@file{@var{testname}_y.@var{suffix}}.\n+\n+@item @var{testname}_y.@var{suffix}\n+Shares data with, or gets arguments from,\n+@file{@var{testname}_x.@var{suffix}}.\n+@end table\n+\n+Within each test, the main program and one functional piece are\n+compiled by the GCC under test.  The other piece can be compiled by\n+an alternate compiler.  If no alternate compiler is specified,\n+then all three source files are all compiled by the GCC under test.\n+It's also possible to specify a pair of lists of compiler options,\n+one list for each compiler, so that each test will be compiled with\n+each pair of options.\n+\n+@file{compat.exp} defines default pairs of compiler options.\n+These can be overridden by defining the environment variable\n+@env{COMPAT_OPTIONS} as:\n+\n+@smallexample\n+COMPAT_OPTIONS=\"[list [list @{@var{tst1}@} @{@var{alt1}@}]\n+  ...[list @{@var{tstn}@} @{@var{altn}@}]]\"\n+@end smallexample\n+\n+where @var{tsti} and @var{alti} are lists of options, with @var{tsti}\n+used by the compiler under test and @var{alti} used by the alternate\n+compiler.  For example, with\n+@code{[list [list @{-g -O0@} @{-O3@}] [list @{-fpic@} @{-fPIC -O2@}]]},\n+the test is first built with @code{-g -O0} by the compiler under\n+test and with @code{-O3} by the alternate compiler.  The test is\n+built a second time using @code{-fpic} by the compiler under test\n+and @code{-fPIC -O2} by the alternate compiler.\n+\n+An alternate compiler is specified by defining an environment\n+variable; for C++ define @env{ALT_CXX_UNDER_TEST} to be the full\n+pathname of an installed compiler.  That will be written to the\n+@file{site.exp} file used by DejaGNU.  The default is to build each\n+test with the compiler under test using the first of each pair of\n+compiler options from @env{COMPAT_OPTIONS}.  When\n+@env{ALT_CXX_UNDER_TEST} is @code{same}, each test is built using\n+the compiler under test but with combinations of the options from\n+@env{COMPAT_OPTIONS}.\n+\n+To run only the C++ compatibility suite using the compiler under test\n+and another version of GCC using specific compiler options, do the\n+following from @file{@var{objdir}/gcc}:\n+\n+@smallexample\n+rm site.exp\n+make -k \\\n+  ALT_CXX_UNDER_TEST=$@{alt_prefix@}/bin/g++ \\\n+  COMPAT_OPTIONS=\"lists as shown above\" \\\n+  check-c++ \\\n+  RUNTESTFLAGS=\"compat.exp\"\n+@end smallexample\n+\n+A test that fails when the source files are compiled with different\n+compilers, but passes when the files are compiled with the same\n+compiler, demonstrates incompatibility of the generated code or\n+runtime support.  A test that fails for the alternate compiler but\n+passes for the compiler under test probably tests for a bug that was\n+fixed in the compiler under test but is present in the alternate\n+compiler."}, {"sha": "fb5d59ebc1d38faf10f4dfb6afd79c840a97d567", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46b2356df0c3f882b44f93101701f5c3f32bb830", "patch": "@@ -1,3 +1,7 @@\n+2003-04-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* README.compat: Remove; content moved to doc/sourcebuild.texi.\n+\n 2003-04-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/10347"}, {"sha": "5295821c6f4b15847eb584046e74ae7f412b1631", "filename": "gcc/testsuite/README.compat", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2Ftestsuite%2FREADME.compat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b2356df0c3f882b44f93101701f5c3f32bb830/gcc%2Ftestsuite%2FREADME.compat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.compat?ref=46b2356df0c3f882b44f93101701f5c3f32bb830", "patch": "@@ -24,7 +24,19 @@ sets of compiler options.\n   with the compiler under test using the first of each pair of compiler\n   options from COMPAT_OPTIONS.  When ALT_CXX_UNDER_TEST is \"same\", each\n   test is built using the compiler under test but with combinations of\n-  the options from COMPAT_OPTIONS.\n+  the options from COMPAT_OPTIONS.  If the alternate compiler needs a\n+  different setting for LD_LIBRARY_PATH, specify it in the environment\n+  varible ALT_LD_LIBRARY_PATH.  If it needs different options to build\n+  a shared object, define those in ALT_SHOBJ_OPTIONS.\n+\n+To run only the C++ compatibility tests, optionally specifying an\n+alternate compiler and/or sets of options, do from $objdir/gcc:\n+\n+  rm site.exp\n+  make -k ALT_CXX_UNDER_TEST=<prefix>/bin/g++ \\\n+    ALT_LD_LIBRARY_PATH=<prefix>/lib \\\n+    COMPAT_OPTIONS=\"list as shown above\" check-c++ \\\n+    RUNTESTFLAGS=\"compat.exp\"\n \n A test that fails when the pieces are compiled with different compilers\n but passes when the pieces are compiled with the same compiler\n@@ -53,10 +65,6 @@ There's a lot more that can be done with these tests.\n       LD_LIBRARY_PATH for the alternate compiler in the support for each\n       language\n \n-   -  build pieces of the test into shared libraries; this requires\n-      support for LD_LIBRARY_PATH for the alternate compiler, and\n-      knowledge about how to build a shared library for each target\n-\n    -  build pieces of the test into static libraries; this requires\n       knowledge about how to build a static library for each target\n "}]}