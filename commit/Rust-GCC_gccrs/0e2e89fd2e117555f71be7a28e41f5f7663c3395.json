{"sha": "0e2e89fd2e117555f71be7a28e41f5f7663c3395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyZTg5ZmQyZTExNzU1NWY3MWJlN2EyOGU0MWY1Zjc2NjNjMzM5NQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2001-01-06T23:28:40Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-01-06T23:28:40Z"}, "message": "Fix comments for doclets\n\nFrom-SVN: r38754", "tree": {"sha": "0941167f6a15cc7309347da34644f836f6ad051a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0941167f6a15cc7309347da34644f836f6ad051a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e2e89fd2e117555f71be7a28e41f5f7663c3395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2e89fd2e117555f71be7a28e41f5f7663c3395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2e89fd2e117555f71be7a28e41f5f7663c3395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2e89fd2e117555f71be7a28e41f5f7663c3395/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7c523527123600f9628305940023031af8ece90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c523527123600f9628305940023031af8ece90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c523527123600f9628305940023031af8ece90"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "40eee95a95882fc3f75b43a3993105f0792ab9e4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -1,3 +1,13 @@\n+2001-01-06  Anthony Green  <green@redhat.com>\n+\n+\t* java/beans/PropertyDescriptor.java: Fix comment.\n+\t* java/io/PushbackReader.java: Fix comment.\n+\t* java/io/ObjectStreamClass.java: Fix comment.\n+\t* java/io/DataInputStream.java: Fix comment.\n+\t* java/io/PipedInputStream.java: Fix comments.\n+\t* java/io/PipedReader.java: Fix comments.\n+\t* java/sql/DatabaseMetaData.java: Fix comments.\n+\n 2001-01-06  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/io/PipedReader: Synchronize on \"lock\" instead of this."}, {"sha": "ed5b8c28102c574661cab82a17f10dda6914bd3a", "filename": "libjava/java/beans/PropertyDescriptor.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fbeans%2FPropertyDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fbeans%2FPropertyDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyDescriptor.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.PropertyDescriptor\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -208,7 +208,7 @@ public boolean isBound() {\n \t ** will be undefined.<P>\n \t **\n \t ** When a property is bound, its set method is required to fire the\n-\t ** <CODE>PropertyChangeListener.propertyChange())</CODE event\n+\t ** <CODE>PropertyChangeListener.propertyChange())</CODE> event\n \t ** after the value has changed.\n \t ** @param bound whether the property is bound or not.\n \t **/"}, {"sha": "643f0993f6df0cac6931180e9ccb86893880297f", "filename": "libjava/java/io/DataInputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FDataInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FDataInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInputStream.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -534,7 +534,7 @@ public final int readUnsignedByte() throws IOException\n    * significant byte first (i.e., \"big endian\") regardless of the native\n    * host byte ordering. \n    * <p>\n-   * As an example, if <code>byte1</code> and code{byte2</code>\n+   * As an example, if <code>byte1</code> and <code>byte2</code>\n    * represent the first and second byte read from the stream\n    * respectively, they will be transformed to an <code>int</code> in\n    * the following manner:"}, {"sha": "d7306f81b74cbda5d195d8ef191a21de8e2d3ef5", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -1,6 +1,6 @@\n /* ObjectStreamClass.java -- Class used to write class information\n    about serialized objects.\n-   Copyright (C) 1998, 1999, 2000  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -186,7 +186,7 @@ boolean isExternalizable ()\n \n   // Returns the <code>ObjectStreamClass</code> that represents the\n   // class that is the superclass of the class this\n-  // <code>ObjectStreamClass</cdoe> represents.  If the superclass is\n+  // <code>ObjectStreamClass</code> represents.  If the superclass is\n   // not Serializable, null is returned.\n   ObjectStreamClass getSuper ()\n   {"}, {"sha": "328a1c0c19d0216028a3d69f68a642f55b9828bf", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -209,7 +209,7 @@ synchronized void receive(byte[] buf, int offset, int len)\n   /**\n     * This method reads bytes from the stream into a caller supplied buffer.\n     * It starts storing bytes at position <code>offset</code> into the buffer and\n-    * reads a maximum of <cod>>len</code> bytes.  Note that this method can actually\n+    * reads a maximum of <code>len</code> bytes.  Note that this method can actually\n     * read fewer than <code>len</code> bytes.  The actual number of bytes read is\n     * returned.  A -1 is returned to indicated that no bytes can be read\n     * because the end of the stream was reached.  If the stream is already\n@@ -240,7 +240,7 @@ public int read() throws IOException\n   /**\n     * This method reads bytes from the stream into a caller supplied buffer.\n     * It starts storing bytes at position <code>offset</code> into the buffer and\n-    * reads a maximum of <cod>>len</code> bytes.  Note that this method can actually\n+    * reads a maximum of <code>len</code> bytes.  Note that this method can actually\n     * read fewer than <code>len</code> bytes.  The actual number of bytes read is\n     * returned.  A -1 is returned to indicated that no bytes can be read\n     * because the end of the stream was reached - ie close() was called on the"}, {"sha": "8047d55a437895e358c7afa89e928476ca118113", "filename": "libjava/java/io/PipedReader.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FPipedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FPipedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedReader.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -197,7 +197,7 @@ void receive(char[] buf, int offset, int len)\n   /**\n     * This method reads chars from the stream into a caller supplied buffer.\n     * It starts storing chars at position <code>offset</code> into the buffer and\n-    * reads a maximum of <cod>>len</code> chars.  Note that this method can actually\n+    * reads a maximum of <code>len</code> chars.  Note that this method can actually\n     * read fewer than <code>len</code> chars.  The actual number of chars read is\n     * returned.  A -1 is returned to indicated that no chars can be read\n     * because the end of the stream was reached.  If the stream is already\n@@ -228,7 +228,7 @@ public int read() throws IOException\n   /**\n     * This method reads characters from the stream into a caller supplied buffer.\n     * It starts storing chars at position <code>offset</code> into the buffer and\n-    * reads a maximum of <cod>>len</code> chars.  Note that this method can actually\n+    * reads a maximum of <code>len</code> chars.  Note that this method can actually\n     * read fewer than <code>len</code> chars.  The actual number of chars read is\n     * returned.  A -1 is returned to indicated that no chars can be read\n     * because the end of the stream was reached - ie close() was called on the"}, {"sha": "6aeda79e26f61b27769207d19aa51698c4cc9ce9", "filename": "libjava/java/io/PushbackReader.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FPushbackReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fio%2FPushbackReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackReader.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -1,5 +1,5 @@\n /* PushbackReader.java -- An character stream that can unread chars\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -391,7 +391,7 @@ public class PushbackReader extends FilterReader\n \n /**\n   * This method pushed back chars from the passed in array into the pushback\n-  * buffer.  The chars from <code>buf[offset]</code> to <cdoe>buf[offset + len]</code>\n+  * buffer.  The chars from <code>buf[offset]</code> to <code>buf[offset + len]</code>\n   * are pushed in reverse order so that the next char read from the stream\n   * after this operation will be <code>buf[offset]</code> followed by\n   * <code>buf[offset + 1]</code>, etc."}, {"sha": "92ed44e4551ba806cf80c6a1e1a0dfe7ef9579e7", "filename": "libjava/java/sql/DatabaseMetaData.java", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2e89fd2e117555f71be7a28e41f5f7663c3395/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java?ref=0e2e89fd2e117555f71be7a28e41f5f7663c3395", "patch": "@@ -1,5 +1,5 @@\n /* DatabaseMetaData.java -- Information about the database itself.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -2109,7 +2109,7 @@\n   * <ol>\n   * <li>SCOPE - The scope of the results returned.  This is one of the \n   * constants defined in this class (<code>bestRowTemporary</code>,\n-  * <code>bestRowTransaction</code>, or <code>bestRowSession</code).\n+  * <code>bestRowTransaction</code>, or <code>bestRowSession</code>).\n   * <li>COLUMN_NAME - The name of the column.\n   * <li>DATA_TYPE - The SQL type of the column. This is one of the constants\n   * defined in <code>Types</code>.\n@@ -2193,6 +2193,7 @@\n   * <li>COLUMN_NAME - The name of the column.\n   * <li>KEY_SEQ - The sequence number of the column within the primary key.\n   * <li>PK_NAME - The name of the primary key, which may be <code>null</code>.\n+  * </ol>\n   *\n   * @param catalog The catalog to retrieve information from, or the empty string\n   * to return entities not associated with a catalog, or <code>null</code>\n@@ -2241,6 +2242,7 @@\n   * constants defined in this table (<code>importedKeyInitiallyDeferred</code>,\n   * <code>importedKeyInitiallyImmediate</code>, or\n   * <code>importedKeyNotDeferrable</code>).\n+  * </ol>\n   *\n   * @param catalog The catalog to retrieve information from, or the empty string\n   * to return entities not associated with a catalog, or <code>null</code>\n@@ -2289,6 +2291,7 @@\n   * constants defined in this table (<code>importedKeyInitiallyDeferred</code>,\n   * <code>importedKeyInitiallyImmediate</code>, or\n   * <code>importedKeyNotDeferrable</code>).\n+  * </ol>\n   *\n   * @param catalog The catalog to retrieve information from, or the empty string\n   * to return entities not associated with a catalog, or <code>null</code>\n@@ -2337,6 +2340,7 @@\n   * constants defined in this table (<code>importedKeyInitiallyDeferred</code>,\n   * <code>importedKeyInitiallyImmediate</code>, or\n   * <code>importedKeyNotDeferrable</code>).\n+  * </ol>\n   *\n   * @param primCatalog The catalog to retrieve information from, or the empty string\n   * to return entities not associated with a catalog, or <code>null</code>\n@@ -2436,6 +2440,7 @@\n   * in the table if the index type is <code>tableIndexStatistic</code>.\n   * <li>FILTER_CONDITION - The filter condition for this index, which may be\n   * <code>null</code>.\n+  * </ol>\n   *\n   * @param catalog The catalog to retrieve information from, or the empty string\n   * to return entities not associated with a catalog, or <code>null</code>"}]}