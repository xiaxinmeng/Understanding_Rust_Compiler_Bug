{"sha": "bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxMjE2MGFiODVlNGEyNTFiZmJkMjhlMmRiNTRlMTkxY2NjZTFiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-07-27T17:25:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-07-27T17:25:04Z"}, "message": "re PR libstdc++/32907 (Inefficient operator== in std::string)\n\n2007-07-27  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/32907\n\t* include/bits/basic_string.h (operator==(const basic_string<_CharT>&,\n\tconst basic_string<_CharT>&)): Add.\n\t(operator!=): Forward to operator==.\n\t* include/ext/vstring.h(operator==(const __versa_string<_CharT,\n\tstd::char_traits<_CharT>, std::allocator<_CharT>, _Base>&,\n\tconst __versa_string<_CharT, std::char_traits<_CharT>,\n\tstd::allocator<_CharT>, _Base>&)): Add.\n\t(operator!=): Forward to operator==.\n\n\t* include/ext/sso_string_base.h (_M_compare): Remove.\n\nFrom-SVN: r126988", "tree": {"sha": "44b5ce6b12e7d56639fbe7683c39b8fc421dae62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44b5ce6b12e7d56639fbe7683c39b8fc421dae62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/comments", "author": null, "committer": null, "parents": [{"sha": "e4142b7c1b884fa2a33c4aaa3f3603c23586de7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4142b7c1b884fa2a33c4aaa3f3603c23586de7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4142b7c1b884fa2a33c4aaa3f3603c23586de7d"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "b0ab719c06517ef98f167d4600096c9c52fbb4f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "patch": "@@ -1,8 +1,22 @@\n+2007-07-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/32907\n+\t* include/bits/basic_string.h (operator==(const basic_string<_CharT>&,\n+\tconst basic_string<_CharT>&)): Add.\n+\t(operator!=): Forward to operator==.\n+\t* include/ext/vstring.h(operator==(const __versa_string<_CharT,\n+\tstd::char_traits<_CharT>, std::allocator<_CharT>, _Base>&,\n+\tconst __versa_string<_CharT, std::char_traits<_CharT>,\n+\tstd::allocator<_CharT>, _Base>&)): Add.\n+\t(operator!=): Forward to operator==.\n+\n+\t* include/ext/sso_string_base.h (_M_compare): Remove.\n+\n 2007-07-25  Stephen M. Webb  <stephenw@xandros.com>\n \n-  Fixed abi_check for missing symbol size changes.\n-\t* testsuite/util/testsuite_abi.cc: Changed local variable name to prevent\n-\tmember variable hiding.\n+\tFixed abi_check for missing symbol size changes.\n+\t* testsuite/util/testsuite_abi.cc: Changed local variable name to\n+\tprevent member variable hiding.\n \n 2007-07-25  John Davind Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n@@ -26,8 +40,10 @@\n \t* testsuite/thread/pthread5.cc: Likewise.\n \t* testsuite/thread/pthread6.cc: Likewise.\n \t* testsuite/thread/pthread7-rope.cc: Likewise.\n-\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/default_weaktoshared.cc: Likewise.\n-\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/mutex_weaktoshared.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/\n+\tdefault_weaktoshared.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/\n+\tmutex_weaktoshared.cc: Likewise.\n \n 2007-07-16  Danny Smith  <dannysmith@users.sourceforge.net>\n "}, {"sha": "2dc3b37253eba7135f23e6cdda336baa91bc64d6", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "patch": "@@ -2157,6 +2157,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     { return __lhs.compare(__rhs) == 0; }\n \n+  template<typename _CharT>\n+    inline\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type\n+    operator==(const basic_string<_CharT>& __lhs,\n+\t       const basic_string<_CharT>& __rhs)\n+    { return (__lhs.size() == __rhs.size()\n+\t      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),\n+\t\t\t\t\t\t    __lhs.size())); }\n+\n   /**\n    *  @brief  Test equivalence of C string and string.\n    *  @param lhs  C string.\n@@ -2192,7 +2201,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline bool\n     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-    { return __rhs.compare(__lhs) != 0; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    *  @brief  Test difference of C string and string.\n@@ -2204,7 +2213,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline bool\n     operator!=(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-    { return __rhs.compare(__lhs) != 0; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    *  @brief  Test difference of string and C string.\n@@ -2216,7 +2225,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline bool\n     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n-    { return __lhs.compare(__rhs) != 0; }\n+    { return !(__lhs == __rhs); }\n \n   // operator <\n   /**"}, {"sha": "0b576ba35b14ffb0493eb251ca357495af133019", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "patch": "@@ -540,30 +540,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_set_length(_M_length() - __n);\n     }\n \n-  template<>\n-    inline bool\n-    __sso_string_base<char, std::char_traits<char>,\n-\t\t      std::allocator<char> >::\n-    _M_compare(const __sso_string_base& __rcs) const\n-    {\n-      if (this == &__rcs)\n-\treturn true;\n-      return false;\n-    }\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    inline bool\n-    __sso_string_base<wchar_t, std::char_traits<wchar_t>,\n-\t\t      std::allocator<wchar_t> >::\n-    _M_compare(const __sso_string_base& __rcs) const\n-    {\n-      if (this == &__rcs)\n-\treturn true;\n-      return false;\n-    }\n-#endif\n-\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _SSO_STRING_BASE_H */"}, {"sha": "bafa0449b2391f155a41a09286fa5700b44ffaf4", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd12160ab85e4a251bfbd28e2db54e191ccce1b6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=bd12160ab85e4a251bfbd28e2db54e191ccce1b6", "patch": "@@ -1867,6 +1867,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     { return __lhs.compare(__rhs) == 0; }\n \n+  template<typename _CharT,\n+\t   template <typename, typename, typename> class _Base>\n+    inline typename __enable_if<std::__is_char<_CharT>::__value, bool>::__type\n+    operator==(const __versa_string<_CharT, std::char_traits<_CharT>,\n+\t       std::allocator<_CharT>, _Base>& __lhs,\n+\t       const __versa_string<_CharT, std::char_traits<_CharT>,\n+\t       std::allocator<_CharT>, _Base>& __rhs)\n+    { return (__lhs.size() == __rhs.size()\n+\t      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),\n+\t\t\t\t\t\t    __lhs.size())); }\n+\n   /**\n    *  @brief  Test equivalence of C string and string.\n    *  @param lhs  C string.\n@@ -1905,7 +1916,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     inline bool\n     operator!=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n \t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    { return __rhs.compare(__lhs) != 0; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    *  @brief  Test difference of C string and string.\n@@ -1918,7 +1929,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     inline bool\n     operator!=(const _CharT* __lhs,\n \t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    { return __rhs.compare(__lhs) != 0; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    *  @brief  Test difference of string and C string.\n@@ -1931,7 +1942,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     inline bool\n     operator!=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n \t       const _CharT* __rhs)\n-    { return __lhs.compare(__rhs) != 0; }\n+    { return !(__lhs == __rhs); }\n \n   // operator <\n   /**"}]}