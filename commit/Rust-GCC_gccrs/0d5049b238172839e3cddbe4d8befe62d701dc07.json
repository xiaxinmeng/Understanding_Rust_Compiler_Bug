{"sha": "0d5049b238172839e3cddbe4d8befe62d701dc07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1MDQ5YjIzODE3MjgzOWUzY2RkYmU0ZDhiZWZlNjJkNzAxZGMwNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-08T09:07:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-08T09:07:49Z"}, "message": "Makefile.in (tree-tailcall.o): Add $(CFGLOOP_H) dependency.\n\n2013-02-08  Richard Biener  <rguenther@suse.de>\n\n\t* Makefile.in (tree-tailcall.o): Add $(CFGLOOP_H) dependency.\n\t* ipa-pure-const.c (analyze_function): Avoid calling\n\tmark_irreducible_loops twice.\n\t* tree-tailcall.c (tree_optimize_tail_calls_1): Mark loops\n\tfor fixup.\n\nFrom-SVN: r195876", "tree": {"sha": "9bca4cf2b5d36002a2728c433192b80cd309a75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bca4cf2b5d36002a2728c433192b80cd309a75c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5049b238172839e3cddbe4d8befe62d701dc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5049b238172839e3cddbe4d8befe62d701dc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5049b238172839e3cddbe4d8befe62d701dc07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5049b238172839e3cddbe4d8befe62d701dc07/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce3aef7d2b5bf49fedcb36950012f50f94a13953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3aef7d2b5bf49fedcb36950012f50f94a13953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3aef7d2b5bf49fedcb36950012f50f94a13953"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "575f74a19a1e651ce5c1732d751e94f9ad962f70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d5049b238172839e3cddbe4d8befe62d701dc07", "patch": "@@ -1,3 +1,11 @@\n+2013-02-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* Makefile.in (tree-tailcall.o): Add $(CFGLOOP_H) dependency.\n+\t* ipa-pure-const.c (analyze_function): Avoid calling\n+\tmark_irreducible_loops twice.\n+\t* tree-tailcall.c (tree_optimize_tail_calls_1): Mark loops\n+\tfor fixup.\n+\n 2013-02-07  David S. Miller  <davem@davemloft.net>\n \n \t* dwarf2out.c (based_loc_descr): Perform leaf register remapping"}, {"sha": "375d5f54c490297e263648fc454299a6b14c15a1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0d5049b238172839e3cddbe4d8befe62d701dc07", "patch": "@@ -2391,7 +2391,7 @@ tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(EXCEPT_H) $(TREE_PASS_H) $(FLAGS_H) langhooks.h \\\n    $(BASIC_BLOCK_H) $(DBGCNT_H) $(GIMPLE_PRETTY_PRINT_H) $(TARGET_H) \\\n-   $(COMMON_TARGET_H)\n+   $(COMMON_TARGET_H) $(CFGLOOP_H)\n tree-ssa-sink.o : tree-ssa-sink.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n    $(TM_H) coretypes.h $(TREE_PASS_H) $(FLAGS_H) alloc-pool.h \\"}, {"sha": "07ba90fa19b4ea8dcb4c1be501aa080a735d2753", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=0d5049b238172839e3cddbe4d8befe62d701dc07", "patch": "@@ -779,8 +779,10 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n         {\n \t  /* Preheaders are needed for SCEV to work.\n \t     Simple latches and recorded exits improve chances that loop will\n-\t     proved to be finite in testcases such as in loop-15.c and loop-24.c  */\n-\t  loop_optimizer_init (LOOPS_NORMAL\n+\t     proved to be finite in testcases such as in loop-15.c\n+\t     and loop-24.c  */\n+\t  loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n+\t\t\t       | LOOPS_HAVE_SIMPLE_LATCHES\n \t\t\t       | LOOPS_HAVE_RECORDED_EXITS);\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    flow_loops_dump (dump_file, NULL, 0);\n@@ -799,7 +801,8 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n \t\tif (!finite_loop_p (loop))\n \t\t  {\n \t\t    if (dump_file)\n-\t\t      fprintf (dump_file, \"    can not prove finiteness of loop %i\\n\", loop->num);\n+\t\t      fprintf (dump_file, \"    can not prove finiteness of \"\n+\t\t\t       \"loop %i\\n\", loop->num);\n \t\t    l->looping =true;\n \t\t    FOR_EACH_LOOP_BREAK (li);\n \t\t  }"}, {"sha": "80c0521d831f4a6f30ca4f6d0325d1274aa3cce7", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5049b238172839e3cddbe4d8befe62d701dc07/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=0d5049b238172839e3cddbe4d8befe62d701dc07", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"dbgcnt.h\"\n #include \"target.h\"\n+#include \"cfgloop.h\"\n #include \"common/common-target.h\"\n \n /* The file implements the tail recursion elimination.  It is also used to\n@@ -1011,7 +1012,12 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n     }\n \n   if (changed)\n-    free_dominance_info (CDI_DOMINATORS);\n+    {\n+      /* We may have created new loops.  Make them magically appear.  */\n+      if (current_loops)\n+\tloops_state_set (LOOPS_NEED_FIXUP);\n+      free_dominance_info (CDI_DOMINATORS);\n+    }\n \n   /* Add phi nodes for the virtual operands defined in the function to the\n      header of the loop created by tail recursion elimination.  Do so"}]}