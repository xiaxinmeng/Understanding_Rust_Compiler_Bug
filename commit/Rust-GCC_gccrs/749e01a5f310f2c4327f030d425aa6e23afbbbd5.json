{"sha": "749e01a5f310f2c4327f030d425aa6e23afbbbd5", "node_id": "C_kwDOANBUbNoAKDc0OWUwMWE1ZjMxMGYyYzQzMjdmMDMwZDQyNWFhNmUyM2FmYmJiZDU", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-10-08T21:57:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:04Z"}, "message": "[Ada] Warning on nonmatching subtypes in fully conforming subprogram specs and bodies\n\ngcc/ada/\n\n\t* sem_ch6.adb: Add with and use of Warnsw.\n\t(Check_Conformance): Report a warning when subtypes or\n\tdesignated subtypes of formal parameters or result subtypes\n\tdenote different declarations between the spec and body of the\n\t(Subprogram_Subtypes_Have_Same_Declaration): New function nested\n\twithin Check_Conformance that determines whether two subtype\n\tentities referenced in a subprogram come from the same\n\tdeclaration. Returns True immediately if the subprogram is in a\n\tgeneric instantiation, or the subprogram is marked Is_Internal\n\tor is declared in an internal (GNAT library) unit, or GNAT_Mode\n\tis enabled, otherwise compares the nonlimited views of the\n\tentities (or their designated subtypes' nonlimited views in the\n\tanonymous access cases).\n\t(Nonlimited_View_Of_Subtype): New function nested within\n\tfunction Subprogram_Subtypes_Have_Same_Declaration that returns\n\tNon_Limited_View of a type or subtype that is an incomplete or\n\tclass-wide type that comes from a limited of a\n\tpackage (From_Limited_With is True for the entity), or returns\n\tFull_View when the nonlimited view is an incomplete type.\n\tOtherwise returns the entity passed in.\n\t* warnsw.ads (Warn_On_Pedantic_Checks): New warning flag.\n\t(type Warning_Record): New component Warn_On_Pedantic_Checks.\n\t* warnsw.adb (All_Warnings): Set Warn_On_Pedantic_Checks from\n\tparameter Setting.\n\t(Restore_Warnings): Restore the value of the\n\tWarn_On_Pedantic_Checks flag.\n\t(Save_Warnings): Save the value of the Warn_On_Pedantic_Checks\n\tflag.\n\t(Set_Underscore_Warning_Switch): Add settings of the\n\tWarn_On_Pedantic flag according to the switch (\"-gnatw_p\" vs.\n\t\"-gnatw_P\").\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Add\n\tdocumentation of new switches -gnatw_p and -gnatw_P (warnings\n\tfor pedantic checks).\n\t* gnat_ugn.texi: Regenerate.\n\t* usage.adb: Add Warn_On_Pedantic_Checks.", "tree": {"sha": "c94bcefc1cabb116c33ba92a7fe4aed9bd974c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c94bcefc1cabb116c33ba92a7fe4aed9bd974c2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/749e01a5f310f2c4327f030d425aa6e23afbbbd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749e01a5f310f2c4327f030d425aa6e23afbbbd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749e01a5f310f2c4327f030d425aa6e23afbbbd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749e01a5f310f2c4327f030d425aa6e23afbbbd5/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2746728050429684bf62729df798189cc1d396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2746728050429684bf62729df798189cc1d396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2746728050429684bf62729df798189cc1d396"}], "stats": {"total": 186, "additions": 185, "deletions": 1}, "files": [{"sha": "48b7623c1de2c5dfb287f2ed826a46eb9cb1a63b", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=749e01a5f310f2c4327f030d425aa6e23afbbbd5", "patch": "@@ -3582,6 +3582,25 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   ordering.\n \n \n+.. index:: -gnatw_p  (gcc)\n+\n+:switch:`-gnatw_p`\n+  *Activate warnings for pedantic checks.*\n+\n+  This switch activates warnings for the failure of certain pedantic checks.\n+  The only case currently supported is a check that the subtype_marks given\n+  for corresponding formal parameter and function results in a subprogram\n+  declaration and its body denote the same subtype declaration. The default\n+  is that such warnings are not given.\n+\n+.. index:: -gnatw_P  (gcc)\n+\n+:switch:`-gnatw_P`\n+  *Suppress warnings for pedantic checks.*\n+\n+  This switch suppresses warnings on violations of pedantic checks.\n+\n+\n .. index:: -gnatwq  (gcc)\n .. index:: Parentheses, warnings\n "}, {"sha": "cae1fadc46482976a6cad88d1d245f0c6b53582f", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=749e01a5f310f2c4327f030d425aa6e23afbbbd5", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Sep 28, 2021\n+GNAT User's Guide for Native Platforms , Oct 19, 2021\n \n AdaCore\n \n@@ -11800,6 +11800,34 @@ This switch suppresses warnings on cases of suspicious parameter\n ordering.\n @end table\n \n+@geindex -gnatw_p (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_p}\n+\n+@emph{Activate warnings for pedantic checks.}\n+\n+This switch activates warnings for the failure of certain pedantic checks.\n+The only case currently supported is a check that the subtype_marks given\n+for corresponding formal parameter and function results in a subprogram\n+declaration and its body denote the same subtype declaration. The default\n+is that such warnings are not given.\n+@end table\n+\n+@geindex -gnatw_P (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_P}\n+\n+@emph{Suppress warnings for pedantic checks.}\n+\n+This switch suppresses warnings on violations of pedantic checks.\n+@end table\n+\n @geindex -gnatwq (gcc)\n \n @geindex Parentheses"}, {"sha": "a316214f22324ba4a38aed1f267f7834c45765a4", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=749e01a5f310f2c4327f030d425aa6e23afbbbd5", "patch": "@@ -90,6 +90,7 @@ with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n with Urealp;         use Urealp;\n with Validsw;        use Validsw;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch6 is\n \n@@ -5962,6 +5963,17 @@ package body Sem_Ch6 is\n       --  True if the null exclusions of two formals of anonymous access type\n       --  match.\n \n+      function Subprogram_Subtypes_Have_Same_Declaration\n+        (Subp         : Entity_Id;\n+         Decl_Subtype : Entity_Id;\n+         Body_Subtype : Entity_Id) return Boolean;\n+      --  Checks whether corresponding subtypes named within a subprogram\n+      --  declaration and body originate from the same declaration, and returns\n+      --  True when they do. In the case of anonymous access-to-object types,\n+      --  checks the designated types. Also returns True when GNAT_Mode is\n+      --  enabled, or when the subprogram is marked Is_Internal or occurs\n+      --  within a generic instantiation or internal unit (GNAT library unit).\n+\n       -----------------------\n       -- Conformance_Error --\n       -----------------------\n@@ -6094,6 +6106,86 @@ package body Sem_Ch6 is\n          end if;\n       end Null_Exclusions_Match;\n \n+      function Subprogram_Subtypes_Have_Same_Declaration\n+        (Subp         : Entity_Id;\n+         Decl_Subtype : Entity_Id;\n+         Body_Subtype : Entity_Id) return Boolean\n+      is\n+\n+         function Nonlimited_View_Of_Subtype\n+           (Subt : Entity_Id) return Entity_Id;\n+         --  Returns the nonlimited view of a type or subtype that is an\n+         --  incomplete or class-wide type that comes from a limited view of\n+         --  a package (From_Limited_With is True for the entity), or the\n+         --  full view when the subtype is an incomplete type. Otherwise\n+         --  returns the entity passed in.\n+\n+         function Nonlimited_View_Of_Subtype\n+           (Subt : Entity_Id) return Entity_Id\n+         is\n+            Subt_Temp : Entity_Id := Subt;\n+         begin\n+            if Ekind (Subt) in Incomplete_Kind | E_Class_Wide_Type\n+              and then From_Limited_With (Subt)\n+            then\n+               Subt_Temp := Non_Limited_View (Subt);\n+            end if;\n+\n+            --  If the subtype is incomplete, return full view if present\n+            --  (and accounts for the case where a type from a limited view\n+            --  is itself an incomplete type).\n+\n+            if Ekind (Subt_Temp) in Incomplete_Kind\n+              and then Present (Full_View (Subt_Temp))\n+            then\n+               Subt_Temp := Full_View (Subt_Temp);\n+            end if;\n+\n+            return Subt_Temp;\n+         end Nonlimited_View_Of_Subtype;\n+\n+      --  Start of processing for Subprogram_Subtypes_Have_Same_Declaration\n+\n+      begin\n+         if not In_Instance\n+           and then not In_Internal_Unit (Subp)\n+           and then not Is_Internal (Subp)\n+           and then not GNAT_Mode\n+           and then\n+             Ekind (Etype (Decl_Subtype)) not in Access_Subprogram_Kind\n+         then\n+            if Ekind (Etype (Decl_Subtype)) = E_Anonymous_Access_Type then\n+               if Nonlimited_View_Of_Subtype (Designated_Type (Decl_Subtype))\n+                 /= Nonlimited_View_Of_Subtype (Designated_Type (Body_Subtype))\n+               then\n+                  return False;\n+               end if;\n+\n+            elsif Nonlimited_View_Of_Subtype (Decl_Subtype)\n+               /= Nonlimited_View_Of_Subtype (Body_Subtype)\n+            then\n+               --  Avoid returning False (and a false-positive warning) for\n+               --  the case of \"not null\" itypes, which will appear to be\n+               --  different subtypes even when the subtype_marks denote\n+               --  the same subtype.\n+\n+               if Ekind (Decl_Subtype) = E_Access_Subtype\n+                 and then Ekind (Body_Subtype) = E_Access_Subtype\n+                 and then Is_Itype (Body_Subtype)\n+                 and then Can_Never_Be_Null (Body_Subtype)\n+                 and then Etype (Decl_Subtype) = Etype (Body_Subtype)\n+               then\n+                  return True;\n+\n+               else\n+                  return False;\n+               end if;\n+            end if;\n+         end if;\n+\n+         return True;\n+      end Subprogram_Subtypes_Have_Same_Declaration;\n+\n       --  Local Variables\n \n       Old_Type           : constant Entity_Id := Etype (Old_Id);\n@@ -6147,6 +6239,18 @@ package body Sem_Ch6 is\n             end if;\n \n             return;\n+\n+         --  If the result subtypes conform and pedantic checks are enabled,\n+         --  check to see whether the subtypes originate from different\n+         --  declarations, and issue a warning when they do.\n+\n+         elsif Ctype = Fully_Conformant\n+           and then Warn_On_Pedantic_Checks\n+           and then not Subprogram_Subtypes_Have_Same_Declaration\n+                          (Old_Id, Old_Type, New_Type)\n+         then\n+            Error_Msg_N (\"result subtypes conform but come from different \"\n+                          & \"declarations??\", New_Id);\n          end if;\n \n          --  Ada 2005 (AI-231): In case of anonymous access types check the\n@@ -6343,6 +6447,18 @@ package body Sem_Ch6 is\n             end if;\n \n             return;\n+\n+         --  If the formals' subtypes conform and pedantic checks are enabled,\n+         --  check to see whether the subtypes originate from different\n+         --  declarations, and issue a warning when they do.\n+\n+         elsif Ctype = Fully_Conformant\n+           and then Warn_On_Pedantic_Checks\n+           and then not Subprogram_Subtypes_Have_Same_Declaration\n+                          (Old_Id, Old_Formal_Base, New_Formal_Base)\n+         then\n+            Error_Msg_N (\"formal subtypes conform but come from \"\n+                          & \"different declarations??\", New_Formal);\n          end if;\n \n          --  For mode conformance, mode must match"}, {"sha": "207303bed0e5fd7d9a5d54caf4d45aed632f2e25", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=749e01a5f310f2c4327f030d425aa6e23afbbbd5", "patch": "@@ -557,6 +557,8 @@ begin\n                                                   \"order\");\n    Write_Line (\"        .P*  turn off warnings for suspicious parameter \" &\n                                                   \"order\");\n+   Write_Line (\"        _p   turn on warnings for pedantic checks\");\n+   Write_Line (\"        _P   turn off warnings for pedantic checks\");\n    Write_Line (\"        q*+  turn on warnings for questionable \" &\n                                                   \"missing parenthesis\");\n    Write_Line (\"        Q    turn off warnings for questionable \" &"}, {"sha": "149e2fdbe294c6c6797821060b4faee2af24e75f", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=749e01a5f310f2c4327f030d425aa6e23afbbbd5", "patch": "@@ -76,6 +76,7 @@ package body Warnsw is\n       Warn_On_Overlap                      := Setting;\n       Warn_On_Overridden_Size              := Setting;\n       Warn_On_Parameter_Order              := Setting;\n+      Warn_On_Pedantic_Checks              := Setting;\n       Warn_On_Questionable_Layout          := Setting;\n       Warn_On_Questionable_Missing_Parens  := Setting;\n       Warn_On_Record_Holes                 := Setting;\n@@ -172,6 +173,8 @@ package body Warnsw is\n         W.Warn_On_Overridden_Size;\n       Warn_On_Parameter_Order              :=\n         W.Warn_On_Parameter_Order;\n+      Warn_On_Pedantic_Checks              :=\n+        W.Warn_On_Pedantic_Checks;\n       Warn_On_Questionable_Layout          :=\n         W.Warn_On_Questionable_Layout;\n       Warn_On_Questionable_Missing_Parens  :=\n@@ -284,6 +287,8 @@ package body Warnsw is\n         Warn_On_Overridden_Size;\n       W.Warn_On_Parameter_Order              :=\n         Warn_On_Parameter_Order;\n+      W.Warn_On_Pedantic_Checks              :=\n+        Warn_On_Pedantic_Checks;\n       W.Warn_On_Questionable_Layout          :=\n         Warn_On_Questionable_Layout;\n       W.Warn_On_Questionable_Missing_Parens  :=\n@@ -505,6 +510,12 @@ package body Warnsw is\n          when 'C' =>\n             Warn_On_Unknown_Compile_Time_Warning := False;\n \n+         when 'p' =>\n+            Warn_On_Pedantic_Checks := True;\n+\n+         when 'P' =>\n+            Warn_On_Pedantic_Checks := False;\n+\n          when 'r' =>\n             Warn_On_Component_Order := True;\n "}, {"sha": "611353835ea21af1505328cbbdc47b791e6ad78b", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749e01a5f310f2c4327f030d425aa6e23afbbbd5/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=749e01a5f310f2c4327f030d425aa6e23afbbbd5", "patch": "@@ -58,6 +58,13 @@ package Warnsw is\n    --  set with an explicit size clause. Off by default, modified by use of\n    --  -gnatw.s/.S (but not -gnatwa).\n \n+   Warn_On_Pedantic_Checks : Boolean := False;\n+   --  Warn for violation of miscellaneous pedantic rules (such as when the\n+   --  subtype of a formal parameter given in a subprogram body's specification\n+   --  comes from a different subtype declaration that the subtype of the\n+   --  formal in the subprogram declaration). Off by default, and set by\n+   --  -gnatw_p (but not -gnatwa).\n+\n    Warn_On_Questionable_Layout : Boolean := False;\n    --  Warn when default layout of a record type is questionable for run-time\n    --  efficiency reasons and would be improved by reordering the components.\n@@ -128,6 +135,7 @@ package Warnsw is\n       Warn_On_Overlap                      : Boolean;\n       Warn_On_Overridden_Size              : Boolean;\n       Warn_On_Parameter_Order              : Boolean;\n+      Warn_On_Pedantic_Checks              : Boolean;\n       Warn_On_Questionable_Layout          : Boolean;\n       Warn_On_Questionable_Missing_Parens  : Boolean;\n       Warn_On_Record_Holes                 : Boolean;"}]}