{"sha": "5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExY2NmYjE0MjA2ZmQ5NzE4YjZmNDk5MGM2ZmQ5ZmFiOWVjY2I5OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:56:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:56:52Z"}, "message": "[multiple changes]\n\n2009-07-20  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Record_Representation_Clause): Use \"and then\"\n\tinstead of \"and\", because otherwise Parent_Last_Bit is read\n\tuninitialized in the case where it's not a tagged type, or the tagged\n\tparent does not have a complete rep clause.\n\n2009-07-20  Robert Dewar  <dewar@adacore.com>\n\n\t* stylesw.ads: Minor documentation change.\n\n\t* types.ads: Minor reformatting\n\n2009-07-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.ads (Apply_Access_Checks): New subprogram that takes care of\n\tgenerating the tag checks associated with dispatching calls.\n\t* exp_disp.adb (Apply_Access_Checks): New subprogram.\n\t(New_Value): This routine was previously local to expand dispatching\n\tcalls but it is now used also by Apply_Access_Checks.\n\t(Expand_Dispatching_Calls): Cleanup code because the functionality of\n\ttag checks is now provided by Apply_Access_Checks. \n\t* exp_ch6.adb (Expand_Call): Incorporate generation of tag checks in\n\tcase of dispatching calls.\n\n2009-07-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Gnat1drv): Also disable Elaboration_Check in\n\tCodePeer_Mode.\n\nFrom-SVN: r149821", "tree": {"sha": "c50fe08a4c3e69568b9d9c63f63df7463beee966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c50fe08a4c3e69568b9d9c63f63df7463beee966"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/comments", "author": null, "committer": null, "parents": [{"sha": "151293b57f144ea83d7d4057515879282b42a800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151293b57f144ea83d7d4057515879282b42a800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151293b57f144ea83d7d4057515879282b42a800"}], "stats": {"total": 489, "additions": 327, "deletions": 162}, "files": [{"sha": "41b24fd986ec36757f7d99a5e52b8b5f18e540de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -1,3 +1,33 @@\n+2009-07-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Record_Representation_Clause): Use \"and then\"\n+\tinstead of \"and\", because otherwise Parent_Last_Bit is read\n+\tuninitialized in the case where it's not a tagged type, or the tagged\n+\tparent does not have a complete rep clause.\n+\n+2009-07-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* stylesw.ads: Minor documentation change.\n+\n+\t* types.ads: Minor reformatting\n+\n+2009-07-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads (Apply_Access_Checks): New subprogram that takes care of\n+\tgenerating the tag checks associated with dispatching calls.\n+\t* exp_disp.adb (Apply_Access_Checks): New subprogram.\n+\t(New_Value): This routine was previously local to expand dispatching\n+\tcalls but it is now used also by Apply_Access_Checks.\n+\t(Expand_Dispatching_Calls): Cleanup code because the functionality of\n+\ttag checks is now provided by Apply_Access_Checks. \n+\t* exp_ch6.adb (Expand_Call): Incorporate generation of tag checks in\n+\tcase of dispatching calls.\n+\n+2009-07-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Also disable Elaboration_Check in\n+\tCodePeer_Mode.\n+\n 2009-07-20  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_prag.adb (Expand_Pragma_Import_Export_Exception): When compiling"}, {"sha": "dfcf37c7d51881895bfbe0fe5e97ac418f5fd5d3", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -2612,12 +2612,14 @@ package body Exp_Ch6 is\n \n             return;\n \n-         --  Expansion of a dispatching call results in an indirect call, which\n-         --  in turn causes current values to be killed (see Resolve_Call), so\n-         --  on VM targets we do the call here to ensure consistent warnings\n-         --  between VM and non-VM targets.\n-\n          else\n+            Apply_Tag_Checks (N);\n+\n+            --  Expansion of a dispatching call results in an indirect call,\n+            --  which in turn causes current values to be killed (see\n+            --  Resolve_Call), so on VM targets we do the call here to ensure\n+            --  consistent warnings between VM and non-VM targets.\n+\n             Kill_Current_Values;\n          end if;\n       end if;"}, {"sha": "165d9080383512670c87e04dcab47ece62ed39ec", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 203, "deletions": 73, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -80,6 +80,11 @@ package body Exp_Disp is\n    --  Returns true if Prim is not a predefined dispatching primitive but it is\n    --  an alias of a predefined dispatching primitive (i.e. through a renaming)\n \n+   function New_Value (From : Node_Id) return Node_Id;\n+   --  From is the original Expression. New_Value is equivalent to a call\n+   --  to Duplicate_Subexpr with an explicit dereference when From is an\n+   --  access parameter.\n+\n    function Original_View_In_Visible_Part (Typ : Entity_Id) return Boolean;\n    --  Check if the type has a private view or if the public view appears\n    --  in the visible part of a package spec.\n@@ -95,6 +100,182 @@ package body Exp_Disp is\n    --  Ada 2005 (AI-345): Determine the tagged kind of T and return a reference\n    --  to an RE_Tagged_Kind enumeration value.\n \n+   ----------------------\n+   -- Apply_Tag_Checks --\n+   ----------------------\n+\n+   procedure Apply_Tag_Checks (Call_Node : Node_Id) is\n+      Loc        : constant Source_Ptr := Sloc (Call_Node);\n+      Ctrl_Arg   : constant Node_Id   := Controlling_Argument (Call_Node);\n+      Ctrl_Typ   : constant Entity_Id := Base_Type (Etype (Ctrl_Arg));\n+      Param_List : constant List_Id   := Parameter_Associations (Call_Node);\n+\n+      Subp            : Entity_Id;\n+      CW_Typ          : Entity_Id;\n+      Param           : Node_Id;\n+      Typ             : Entity_Id;\n+      Eq_Prim_Op      : Entity_Id := Empty;\n+\n+   begin\n+      if No_Run_Time_Mode then\n+         Error_Msg_CRT (\"tagged types\", Call_Node);\n+         return;\n+      end if;\n+\n+      --  Apply_Tag_Checks is called directly from the semantics, so we need\n+      --  a check to see whether expansion is active before proceeding. In\n+      --  addition, there is no need to expand the call when compiling under\n+      --  restriction No_Dispatching_Calls; the semantic analyzer has\n+      --  previously notified the violation of this restriction.\n+\n+      if not Expander_Active\n+        or else Restriction_Active (No_Dispatching_Calls)\n+      then\n+         return;\n+      end if;\n+\n+      --  Set subprogram. If this is an inherited operation that was\n+      --  overridden, the body that is being called is its alias.\n+\n+      Subp := Entity (Name (Call_Node));\n+\n+      if Present (Alias (Subp))\n+        and then Is_Inherited_Operation (Subp)\n+        and then No (DTC_Entity (Subp))\n+      then\n+         Subp := Alias (Subp);\n+      end if;\n+\n+      --  Definition of the class-wide type and the tagged type\n+\n+      --  If the controlling argument is itself a tag rather than a tagged\n+      --  object, then use the class-wide type associated with the subprogram's\n+      --  controlling type. This case can occur when a call to an inherited\n+      --  primitive has an actual that originated from a default parameter\n+      --  given by a tag-indeterminate call and when there is no other\n+      --  controlling argument providing the tag (AI-239 requires dispatching).\n+      --  This capability of dispatching directly by tag is also needed by the\n+      --  implementation of AI-260 (for the generic dispatching constructors).\n+\n+      if Ctrl_Typ = RTE (RE_Tag)\n+        or else (RTE_Available (RE_Interface_Tag)\n+                  and then Ctrl_Typ = RTE (RE_Interface_Tag))\n+      then\n+         CW_Typ := Class_Wide_Type (Find_Dispatching_Type (Subp));\n+\n+      --  Class_Wide_Type is applied to the expressions used to initialize\n+      --  CW_Typ, to ensure that CW_Typ always denotes a class-wide type, since\n+      --  there are cases where the controlling type is resolved to a specific\n+      --  type (such as for designated types of arguments such as CW'Access).\n+\n+      elsif Is_Access_Type (Ctrl_Typ) then\n+         CW_Typ := Class_Wide_Type (Designated_Type (Ctrl_Typ));\n+\n+      else\n+         CW_Typ := Class_Wide_Type (Ctrl_Typ);\n+      end if;\n+\n+      Typ := Root_Type (CW_Typ);\n+\n+      if Ekind (Typ) = E_Incomplete_Type then\n+         Typ := Non_Limited_View (Typ);\n+      end if;\n+\n+      if not Is_Limited_Type (Typ) then\n+         Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n+      end if;\n+\n+      --  Dispatching call to C++ primitive\n+\n+      if Is_CPP_Class (Typ) then\n+         null;\n+\n+      --  Dispatching call to Ada primitive\n+\n+      elsif Present (Param_List) then\n+\n+         --  Generate the Tag checks when appropriate\n+\n+         Param := First_Actual (Call_Node);\n+         while Present (Param) loop\n+\n+            --  No tag check with itself\n+\n+            if Param = Ctrl_Arg then\n+               null;\n+\n+            --  No tag check for parameter whose type is neither tagged nor\n+            --  access to tagged (for access parameters)\n+\n+            elsif No (Find_Controlling_Arg (Param)) then\n+               null;\n+\n+            --  No tag check for function dispatching on result if the\n+            --  Tag given by the context is this one\n+\n+            elsif Find_Controlling_Arg (Param) = Ctrl_Arg then\n+               null;\n+\n+            --  \"=\" is the only dispatching operation allowed to get\n+            --  operands with incompatible tags (it just returns false).\n+            --  We use Duplicate_Subexpr_Move_Checks instead of calling\n+            --  Relocate_Node because the value will be duplicated to\n+            --  check the tags.\n+\n+            elsif Subp = Eq_Prim_Op then\n+               null;\n+\n+            --  No check in presence of suppress flags\n+\n+            elsif Tag_Checks_Suppressed (Etype (Param))\n+              or else (Is_Access_Type (Etype (Param))\n+                         and then Tag_Checks_Suppressed\n+                                    (Designated_Type (Etype (Param))))\n+            then\n+               null;\n+\n+            --  Optimization: no tag checks if the parameters are identical\n+\n+            elsif Is_Entity_Name (Param)\n+              and then Is_Entity_Name (Ctrl_Arg)\n+              and then Entity (Param) = Entity (Ctrl_Arg)\n+            then\n+               null;\n+\n+            --  Now we need to generate the Tag check\n+\n+            else\n+               --  Generate code for tag equality check\n+               --  Perhaps should have Checks.Apply_Tag_Equality_Check???\n+\n+               Insert_Action (Ctrl_Arg,\n+                 Make_Implicit_If_Statement (Call_Node,\n+                   Condition =>\n+                     Make_Op_Ne (Loc,\n+                       Left_Opnd =>\n+                         Make_Selected_Component (Loc,\n+                           Prefix => New_Value (Ctrl_Arg),\n+                           Selector_Name =>\n+                             New_Reference_To\n+                               (First_Tag_Component (Typ), Loc)),\n+\n+                       Right_Opnd =>\n+                         Make_Selected_Component (Loc,\n+                           Prefix =>\n+                             Unchecked_Convert_To (Typ, New_Value (Param)),\n+                           Selector_Name =>\n+                             New_Reference_To\n+                               (First_Tag_Component (Typ), Loc))),\n+\n+                   Then_Statements =>\n+                     New_List (New_Constraint_Error (Loc))));\n+            end if;\n+\n+            Next_Actual (Param);\n+         end loop;\n+      end if;\n+   end Apply_Tag_Checks;\n+\n    ------------------------\n    -- Building_Static_DT --\n    ------------------------\n@@ -469,8 +650,9 @@ package body Exp_Disp is\n       --  Dispatching call to C++ primitive. Create a new parameter list\n       --  with no tag checks.\n \n+      New_Params := New_List;\n+\n       if Is_CPP_Class (Typ) then\n-         New_Params := New_List;\n          Param := First_Actual (Call_Node);\n          while Present (Param) loop\n             Append_To (New_Params, Relocate_Node (Param));\n@@ -480,86 +662,19 @@ package body Exp_Disp is\n       --  Dispatching call to Ada primitive\n \n       elsif Present (Param_List) then\n+         Apply_Tag_Checks (Call_Node);\n \n-         --  Generate the Tag checks when appropriate\n-\n-         New_Params := New_List;\n          Param := First_Actual (Call_Node);\n          while Present (Param) loop\n+            --  Cases in which we may have generated runtime checks\n \n-            --  No tag check with itself\n-\n-            if Param = Ctrl_Arg then\n-               Append_To (New_Params,\n-                 Duplicate_Subexpr_Move_Checks (Param));\n-\n-            --  No tag check for parameter whose type is neither tagged nor\n-            --  access to tagged (for access parameters)\n-\n-            elsif No (Find_Controlling_Arg (Param)) then\n-               Append_To (New_Params, Relocate_Node (Param));\n-\n-            --  No tag check for function dispatching on result if the\n-            --  Tag given by the context is this one\n-\n-            elsif Find_Controlling_Arg (Param) = Ctrl_Arg then\n-               Append_To (New_Params, Relocate_Node (Param));\n-\n-            --  \"=\" is the only dispatching operation allowed to get\n-            --  operands with incompatible tags (it just returns false).\n-            --  We use Duplicate_Subexpr_Move_Checks instead of calling\n-            --  Relocate_Node because the value will be duplicated to\n-            --  check the tags.\n-\n-            elsif Subp = Eq_Prim_Op then\n+            if Param = Ctrl_Arg\n+              or else Subp = Eq_Prim_Op\n+            then\n                Append_To (New_Params,\n                  Duplicate_Subexpr_Move_Checks (Param));\n \n-            --  No check in presence of suppress flags\n-\n-            elsif Tag_Checks_Suppressed (Etype (Param))\n-              or else (Is_Access_Type (Etype (Param))\n-                         and then Tag_Checks_Suppressed\n-                                    (Designated_Type (Etype (Param))))\n-            then\n-               Append_To (New_Params, Relocate_Node (Param));\n-\n-            --  Optimization: no tag checks if the parameters are identical\n-\n-            elsif Is_Entity_Name (Param)\n-              and then Is_Entity_Name (Ctrl_Arg)\n-              and then Entity (Param) = Entity (Ctrl_Arg)\n-            then\n-               Append_To (New_Params, Relocate_Node (Param));\n-\n-            --  Now we need to generate the Tag check\n-\n             else\n-               --  Generate code for tag equality check\n-               --  Perhaps should have Checks.Apply_Tag_Equality_Check???\n-\n-               Insert_Action (Ctrl_Arg,\n-                 Make_Implicit_If_Statement (Call_Node,\n-                   Condition =>\n-                     Make_Op_Ne (Loc,\n-                       Left_Opnd =>\n-                         Make_Selected_Component (Loc,\n-                           Prefix => New_Value (Ctrl_Arg),\n-                           Selector_Name =>\n-                             New_Reference_To\n-                               (First_Tag_Component (Typ), Loc)),\n-\n-                       Right_Opnd =>\n-                         Make_Selected_Component (Loc,\n-                           Prefix =>\n-                             Unchecked_Convert_To (Typ, New_Value (Param)),\n-                           Selector_Name =>\n-                             New_Reference_To\n-                               (First_Tag_Component (Typ), Loc))),\n-\n-                   Then_Statements =>\n-                     New_List (New_Constraint_Error (Loc))));\n-\n                Append_To (New_Params, Relocate_Node (Param));\n             end if;\n \n@@ -6192,6 +6307,21 @@ package body Exp_Disp is\n       return Result;\n    end Make_Tags;\n \n+   ---------------\n+   -- New_Value --\n+   ---------------\n+\n+   function New_Value (From : Node_Id) return Node_Id is\n+      Res : constant Node_Id := Duplicate_Subexpr (From);\n+   begin\n+      if Is_Access_Type (Etype (From)) then\n+         return Make_Explicit_Dereference (Sloc (From),\n+                  Prefix => Res);\n+      else\n+         return Res;\n+      end if;\n+   end New_Value;\n+\n    -----------------------------------\n    -- Original_View_In_Visible_Part --\n    -----------------------------------"}, {"sha": "18f751d978dc8bb96670d7756223947ec3168f9a", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -170,6 +170,9 @@ package Exp_Disp is\n    --    Exp_Disp.Default_Prim_Op_Position - indirect use\n    --    Exp_Disp.Set_All_DT_Position      - direct   use\n \n+   procedure Apply_Tag_Checks (Call_Node : Node_Id);\n+   --  Generate checks required on dispatching calls\n+\n    function Building_Static_DT (Typ : Entity_Id) return Boolean;\n    pragma Inline (Building_Static_DT);\n    --  Returns true when building statically allocated dispatch tables"}, {"sha": "0e7fd15b74b28a25c5a53539727564e8be9ca671", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -158,20 +158,22 @@ procedure Gnat1drv is\n \n          ASIS_Mode := False;\n \n-         --  Turn off dynamic elaboration checks: generates inconsitencies in\n+         --  Suppress overflow checks and access checks since they are handled\n+         --  implicitely by CodePeer.\n+\n+         --  Turn off dynamic elaboration checks: generates inconsistencies in\n          --  trees between specs compiled as part of a main unit or as part of\n          --  a with-clause.\n \n-         Dynamic_Elaboration_Checks := False;\n-\n-         --  Suppress overflow checks and access checks since they are handled\n-         --  implicitely by CodePeer. Enable all other language checks.\n+         --  Enable all other language checks\n \n          Suppress_Options :=\n-           (Overflow_Check => True,\n-            Access_Check   => True,\n-            others         => False);\n+           (Overflow_Check    => True,\n+            Access_Check      => True,\n+            Elaboration_Check => True,\n+            others            => False);\n          Enable_Overflow_Checks := False;\n+         Dynamic_Elaboration_Checks := False;\n \n          --  Kill debug of generated code, since it messes up sloc values\n "}, {"sha": "059abe3f9f7789a7dd87b64ebeb69ebe1e69d5b8", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -2623,7 +2623,7 @@ package body Sem_Ch13 is\n                      --  this component might overlap a parent field.\n \n                      if Present (Tagged_Parent)\n-                       and Fbit <= Parent_Last_Bit\n+                       and then Fbit <= Parent_Last_Bit\n                      then\n                         Pcomp := First_Entity (Tagged_Parent);\n                         while Present (Pcomp) loop"}, {"sha": "37154c05045d4c5438e40a3c6dd60f08b1d5f909", "filename": "gcc/ada/stylesw.ads", "status": "modified", "additions": 68, "deletions": 70, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fstylesw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Fstylesw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.ads?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,28 +48,28 @@ package Stylesw is\n    --  other manner.\n \n    Style_Check_Array_Attribute_Index : Boolean := False;\n-   --  This can be set True by using -gnatg or -gnatyA switches. If it is True\n-   --  then index numbers for array attributes (like Length) are required to\n-   --  be absent for one-dimensional arrays and present for multi-dimensional\n+   --  This can be set True by using the -gnatyA switch. If it is True then\n+   --  index numbers for array attributes (like Length) are required to be\n+   --  absent for one-dimensional arrays and present for multi-dimensional\n    --  array attribute references.\n \n    Style_Check_Attribute_Casing : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatya switches. If it is\n-   --  True, then attribute names (including keywords such as digits used as\n-   --  attribute names) must be in mixed case.\n+   --  This can be set True by using the -gnatya switch. If it is True, then\n+   --  attribute names (including keywords such as digits used as attribute\n+   --  names) must be in mixed case.\n \n    Style_Check_Blanks_At_End : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyb switches. If it is\n-   --  True, then spaces at the end of lines are not permitted.\n+   --  This can be set True by using the -gnatyb switch. If it is True, then\n+   --  spaces at the end of lines are not permitted.\n \n    Style_Check_Blank_Lines : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyu switches. If it is\n-   --  True, then multiple blank lines are not permitted, and there may not be\n-   --  a blank line at the end of the file.\n+   --  This can be set True by using the -gnatyu switch. If it is True, then\n+   --  multiple blank lines are not permitted, and there may not be a blank\n+   --  line at the end of the file.\n \n    Style_Check_Comments : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyc switches. If it is\n-   --  True, then comments are style checked as follows:\n+   --  This can be set True by using the -gnatyc switch. If it is True, then\n+   --  comments are style checked as follows:\n    --\n    --    All comments must be at the start of the line, or the first minus must\n    --    be preceded by at least one space.\n@@ -96,27 +96,26 @@ package Stylesw is\n    --  comments where only a single space separates the comment characters.\n \n    Style_Check_DOS_Line_Terminator : Boolean := False;\n-   --  This can be set true by using the -gnatg or -gnatyd switches. If it\n-   --  is True, then the line terminator must be a single LF, without an\n-   --  associated CR (e.g. DOS line terminator sequence CR/LF not allowed).\n+   --  This can be set true by using the -gnatyd switch. If it is True, then\n+   --  the line terminator must be a single LF, without an associated CR (e.g.\n+   --  DOS line terminator sequence CR/LF not allowed).\n \n    Style_Check_End_Labels : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatye switches. If it is\n-   --  True, then optional END labels must always be present.\n+   --  This can be set True by using the -gnatye switch. If it is True, then\n+   --  optional END labels must always be present.\n \n    Style_Check_Form_Feeds : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyf switches. If it is\n-   --  True, then form feeds and vertical tabs are not allowed in the source\n-   --  text.\n+   --  This can be set True by using the -gnatyf switch. If it is True, then\n+   --  form feeds and vertical tabs are not allowed in the source text.\n \n    Style_Check_Horizontal_Tabs : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyh switches. If it is\n-   --  True, then horizontal tabs are not allowed in source text.\n+   --  This can be set True by using the -gnatyh switch. If it is True, then\n+   --  horizontal tabs are not allowed in source text.\n \n    Style_Check_If_Then_Layout : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyi switches. If it is\n-   --  True, then a THEN keyword may not appear on the line that immediately\n-   --  follows the line containing the corresponding IF.\n+   --  This can be set True by using the -gnatyi switch. If it is True, then a\n+   --  THEN keyword may not appear on the line that immediately follows the\n+   --  line containing the corresponding IF.\n    --\n    --  This permits one of two styles for IF-THEN layout. Either the IF and\n    --  THEN keywords are on the same line, where the condition is short enough,\n@@ -137,28 +136,27 @@ package Stylesw is\n    --  is not allowed.\n \n    Style_Check_Indentation : Column_Number range 0 .. 9 := 0;\n-   --  This can be set non-zero by using the -gnatg or -gnatyn (n a digit)\n-   --  switches. If it is non-zero it activates indentation checking with the\n-   --  indicated indentation value. A value of zero turns off checking. The\n-   --  requirement is that any new statement, line comment, declaration or\n-   --  keyword such as END, start on a column that is a multiple of the\n-   --  indentation value.\n+   --  This can be set non-zero by using the -gnatyn (n a digit) switch. If\n+   --  it is non-zero it activates indentation checking with the indicated\n+   --  indentation value. A value of zero turns off checking. The requirement\n+   --  is that any new statement, line comment, declaration or keyword such\n+   --  as END, start on a column that is a multiple of the indentation value.\n \n    Style_Check_Keyword_Casing : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyk switches. If it is\n-   --  True, then keywords are required to be in all lower case. This rule does\n-   --  not apply to keywords such as digits appearing as an attribute name.\n+   --  This can be set True by using the -gnatyk switch. If it is True, then\n+   --  keywords are required to be in all lower case. This rule does not apply\n+   --  to keywords such as digits appearing as an attribute name.\n \n    Style_Check_Layout : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyl switches. If it is\n-   --  True, it activates checks that constructs are indented as suggested by\n-   --  the examples in the RM syntax, e.g. that the ELSE keyword must line up\n+   --  This can be set True by using the -gnatyl switch. If it is True, it\n+   --  activates checks that constructs are indented as suggested by the\n+   --  examples in the RM syntax, e.g. that the ELSE keyword must line up\n    --  with the IF keyword.\n \n    Style_Check_Max_Line_Length : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatym/M switches.\n-   --  If it is True, it activates checking for a maximum line length of\n-   --  Style_Max_Line_Length characters.\n+   --  This can be set True by using the -gnatym/M switches. If it is True, it\n+   --  activates checking for a maximum line length of Style_Max_Line_Length\n+   --  characters.\n \n    Style_Check_Max_Nesting_Level : Boolean := False;\n    --  This can be set True by using -gnatyLnnn with a value other than zero\n@@ -175,44 +173,44 @@ package Stylesw is\n    --  that mode IN is not used on its own (since it is the default).\n \n    Style_Check_Order_Subprograms : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyo switch. If it is\n-   --  True, then names of subprogram bodies must be in alphabetical order\n-   --  (not taking casing into account).\n+   --  This can be set True by using the -gnatyo switch. If it is True, then\n+   --  names of subprogram bodies must be in alphabetical order (not taking\n+   --  casing into account).\n \n    Style_Check_Pragma_Casing : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyp switches. If it is\n-   --  True, then pragma names must use mixed case.\n+   --  This can be set True by using the -gnatyp switch. If it is True, then\n+   --  pragma names must use mixed case.\n \n    Style_Check_References : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyr switches. If it is\n-   --  True, then all references to declared identifiers are checked. The\n-   --  requirement is that casing of the reference be the same as the casing\n-   --  of the corresponding declaration.\n+   --  This can be set True by using the -gnatyr switch. If it is True, then\n+   --  all references to declared identifiers are checked. The requirement\n+   --  is that casing of the reference be the same as the casing of the\n+   --  corresponding declaration.\n \n    Style_Check_Separate_Stmt_Lines : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyS switches. If it is\n-   --  TRUE, then for the case of keywords THEN (not preceded by AND) or ELSE\n-   --  (not preceded by OR) which introduce a conditionally executed statement\n+   --  This can be set True by using the -gnatyS switch. If it is TRUE,\n+   --  then for the case of keywords THEN (not preceded by AND) or ELSE (not\n+   --  preceded by OR) which introduce a conditionally executed statement\n    --  sequence, there must be no tokens on the same line as the keyword, so\n    --  that coverage testing can clearly identify execution of the statement\n    --  sequence. A comment is permitted, as is THEN ABORT or a PRAGMA keyword\n    --  after ELSE (a common style to specify the condition for the ELSE).\n \n    Style_Check_Specs : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatys switches. If it is\n-   --  True, then separate specs are required to be present for all procedures\n-   --  except parameterless library level procedures. The exception means that\n-   --  typical main programs do not require separate specs.\n+   --  This can be set True by using the -gnatys switches. If it is True, then\n+   --  separate specs are required to be present for all procedures except\n+   --  parameterless library level procedures. The exception means that typical\n+   --  main programs do not require separate specs.\n \n    Style_Check_Standard : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyn switches. If it is\n-   --  True, then any references to names in Standard have to be in mixed case\n-   --  mode (e.g. Integer, Boolean).\n+   --  This can be set True by using the -gnatyn switch. If it is True, then\n+   --  any references to names in Standard have to be in mixed case mode (e.g.\n+   --  Integer, Boolean).\n \n    Style_Check_Tokens : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyt switches. If it is\n-   --  True, then the style check that requires canonical spacing between\n-   --  various punctuation tokens as follows:\n+   --  This can be set True by using the -gnatyt switch. If it is True, then\n+   --  the style check that requires canonical spacing between various\n+   --  punctuation tokens as follows:\n    --\n    --    ABS and NOT must be followed by a space\n    --\n@@ -254,14 +252,14 @@ package Stylesw is\n    --  for a space.\n \n    Style_Check_Xtra_Parens : Boolean := False;\n-   --  This can be set True by using the -gnatg or -gnatyx switch. If true,\n-   --  then it is not allowed to enclose entire conditional expressions in\n-   --  parentheses (C style).\n+   --  This can be set True by using the -gnatyx switch. If true, then it is\n+   --  not allowed to enclose entire conditional expressions in parentheses\n+   --  (C style).\n \n    Style_Max_Line_Length : Int := 0;\n-   --  Value used to check maximum line length. Gets reset as a result of use\n-   --  of -gnatym or -gnatyMnnn switches (or by use of -gnatg). This value is\n-   --  only read if Style_Check_Max_Line_Length is True.\n+   --  Value used to check maximum line length. Gets reset as a result of\n+   --  use of -gnatym or -gnatyMnnn switches. This value is only read if\n+   --  Style_Check_Max_Line_Length is True.\n \n    Style_Max_Nesting_Level : Int := 0;\n    --  Value used to check maximum nesting level. Gets reset as a result"}, {"sha": "714018d1ff62ec342908b039c0c1b052d44952c9", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=5a1ccfb14206fd9718b6f4990c6fd9fab9eccb98", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---      Copyright (C) 1992-2009  Free Software Foundation, Inc.             --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -384,10 +384,10 @@ package Types is\n    --  Type used to identify nodes in the tree\n \n    subtype Entity_Id is Node_Id;\n-   --  A synonym for node types, used in the entity package to refer to\n-   --  nodes that are entities (i.e. nodes with an Nkind of N_Defining_xxx)\n-   --  All such nodes are extended nodes and these are the only extended\n-   --  nodes, so that in practice entity and extended nodes are synonymous.\n+   --  A synonym for node types, used in the entity package to refer to nodes\n+   --  that are entities (i.e. nodes with an Nkind of N_Defining_xxx) All such\n+   --  nodes are extended nodes and these are the only extended nodes, so that\n+   --  in practice entity and extended nodes are synonymous.\n \n    subtype Node_Or_Entity_Id is Node_Id;\n    --  A synonym for node types, used in cases where a given value may be used"}]}