{"sha": "f8c29d983969a1dd7a8563ba0f2432733e88e76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjMjlkOTgzOTY5YTFkZDdhODU2M2JhMGYyNDMyNzMzZTg4ZTc2Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-16T18:50:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-16T18:50:43Z"}, "message": "re PR tree-optimization/65427 (ICE in emit_move_insn with wide vector types)\n\n\tPR tree-optimization/65427\n\t* tree-vect-generic.c (do_cond, expand_vector_scalar_condition): New\n\tfunctions.\n\t(expand_vector_operations_1): Handle BLKmode vector COND_EXPR.\n\n\t* gcc.c-torture/execute/pr65427.c: New test.\n\nFrom-SVN: r221464", "tree": {"sha": "2d5ef1e10fdc62722a5cb8da2aaf18c20be64a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d5ef1e10fdc62722a5cb8da2aaf18c20be64a7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c29d983969a1dd7a8563ba0f2432733e88e76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c29d983969a1dd7a8563ba0f2432733e88e76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c29d983969a1dd7a8563ba0f2432733e88e76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c29d983969a1dd7a8563ba0f2432733e88e76f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec638c5590b4e7c278c5b624c490fffad38bc639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec638c5590b4e7c278c5b624c490fffad38bc639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec638c5590b4e7c278c5b624c490fffad38bc639"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "c849fd9aef8979511437529b70357ac4e29f9ae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8c29d983969a1dd7a8563ba0f2432733e88e76f", "patch": "@@ -1,3 +1,10 @@\n+2015-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/65427\n+\t* tree-vect-generic.c (do_cond, expand_vector_scalar_condition): New\n+\tfunctions.\n+\t(expand_vector_operations_1): Handle BLKmode vector COND_EXPR.\n+\n 2015-03-16  Marek Polacek  <polacek@redhat.com>\n \n \t* cgraph.h (add_new_static_var): Remove declaration."}, {"sha": "bf995c79f456ebca1b1f5032a4f8bc2809354a63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8c29d983969a1dd7a8563ba0f2432733e88e76f", "patch": "@@ -1,3 +1,8 @@\n+2015-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/65427\n+\t* gcc.c-torture/execute/pr65427.c: New test.\n+\n 2015-03-16  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1688"}, {"sha": "dd28a5d941255a0a288079cb0939c11f111459c7", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65427.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65427.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65427.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65427.c?ref=f8c29d983969a1dd7a8563ba0f2432733e88e76f", "patch": "@@ -0,0 +1,34 @@\n+/* PR tree-optimization/65427 */\n+\n+typedef int V __attribute__ ((vector_size (8 * sizeof (int))));\n+V a, b, c, d, e, f;\n+\n+__attribute__((noinline, noclone)) void\n+foo (int x, int y)\n+{\n+  do\n+    {\n+      if (x)\n+\td = a ^ c;\n+      else\n+\td = a ^ b;\n+    }\n+  while (y);\n+}\n+\n+int\n+main ()\n+{\n+  a = (V) { 1, 2, 3, 4, 5, 6, 7, 8 };\n+  b = (V) { 0x40, 0x80, 0x40, 0x80, 0x40, 0x80, 0x40, 0x80 };\n+  e = (V) { 0x41, 0x82, 0x43, 0x84, 0x45, 0x86, 0x47, 0x88 };\n+  foo (0, 0);\n+  if (__builtin_memcmp (&d, &e, sizeof (V)) != 0)\n+    __builtin_abort ();\n+  c = (V) { 0x80, 0x40, 0x80, 0x40, 0x80, 0x40, 0x80, 0x40 };\n+  f = (V) { 0x81, 0x42, 0x83, 0x44, 0x85, 0x46, 0x87, 0x48 };\n+  foo (1, 0);\n+  if (__builtin_memcmp (&d, &f, sizeof (V)) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "dc110282719c5c6fdf6d6b07432b17700efc4e28", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c29d983969a1dd7a8563ba0f2432733e88e76f/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=f8c29d983969a1dd7a8563ba0f2432733e88e76f", "patch": "@@ -1417,6 +1417,57 @@ count_type_subparts (tree type)\n   return VECTOR_TYPE_P (type) ? TYPE_VECTOR_SUBPARTS (type) : 1;\n }\n \n+static tree\n+do_cond (gimple_stmt_iterator *gsi, tree inner_type, tree a, tree b,\n+\t tree bitpos, tree bitsize, enum tree_code code)\n+{\n+  if (TREE_CODE (TREE_TYPE (a)) == VECTOR_TYPE)\n+    a = tree_vec_extract (gsi, inner_type, a, bitsize, bitpos);\n+  if (TREE_CODE (TREE_TYPE (b)) == VECTOR_TYPE)\n+    b = tree_vec_extract (gsi, inner_type, b, bitsize, bitpos);\n+  tree cond = gimple_assign_rhs1 (gsi_stmt (*gsi));\n+  return gimplify_build3 (gsi, code, inner_type, cond, a, b);\n+}\n+\n+/* Expand a vector COND_EXPR to scalars, piecewise.  */\n+static void\n+expand_vector_scalar_condition (gimple_stmt_iterator *gsi)\n+{\n+  gassign *stmt = as_a <gassign *> (gsi_stmt (*gsi));\n+  tree type = gimple_expr_type (stmt);\n+  tree compute_type = get_compute_type (COND_EXPR, mov_optab, type);\n+  machine_mode compute_mode = TYPE_MODE (compute_type);\n+  gcc_assert (compute_mode != BLKmode);\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree rhs2 = gimple_assign_rhs2 (stmt);\n+  tree rhs3 = gimple_assign_rhs3 (stmt);\n+  tree new_rhs;\n+\n+  /* If the compute mode is not a vector mode (hence we are not decomposing\n+     a BLKmode vector to smaller, hardware-supported vectors), we may want\n+     to expand the operations in parallel.  */\n+  if (GET_MODE_CLASS (compute_mode) != MODE_VECTOR_INT\n+      && GET_MODE_CLASS (compute_mode) != MODE_VECTOR_FLOAT\n+      && GET_MODE_CLASS (compute_mode) != MODE_VECTOR_FRACT\n+      && GET_MODE_CLASS (compute_mode) != MODE_VECTOR_UFRACT\n+      && GET_MODE_CLASS (compute_mode) != MODE_VECTOR_ACCUM\n+      && GET_MODE_CLASS (compute_mode) != MODE_VECTOR_UACCUM)\n+    new_rhs = expand_vector_parallel (gsi, do_cond, type, rhs2, rhs3,\n+\t\t\t\t      COND_EXPR);\n+  else\n+    new_rhs = expand_vector_piecewise (gsi, do_cond, type, compute_type,\n+\t\t\t\t       rhs2, rhs3, COND_EXPR);\n+  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (new_rhs)))\n+    new_rhs = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, TREE_TYPE (lhs),\n+\t\t\t       new_rhs);\n+\n+  /* NOTE:  We should avoid using gimple_assign_set_rhs_from_tree. One\n+     way to do it is change expand_vector_operation and its callees to\n+     return a tree_code, RHS1 and RHS2 instead of a tree. */\n+  gimple_assign_set_rhs_from_tree (gsi, new_rhs);\n+  update_stmt (gsi_stmt (*gsi));\n+}\n+\n /* Process one statement.  If we identify a vector operation, expand it.  */\n \n static void\n@@ -1449,6 +1500,14 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       return;\n     }\n \n+  if (code == COND_EXPR\n+      && TREE_CODE (TREE_TYPE (gimple_assign_lhs (stmt))) == VECTOR_TYPE\n+      && TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt))) == BLKmode)\n+    {\n+      expand_vector_scalar_condition (gsi);\n+      return;\n+    }\n+\n   if (code == CONSTRUCTOR\n       && TREE_CODE (lhs) == SSA_NAME\n       && VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (lhs)))"}]}