{"sha": "6b67572ed1a6f2fc43d07eead15e9eda973d339d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2NzU3MmVkMWE2ZjJmYzQzZDA3ZWVhZDE1ZTllZGE5NzNkMzM5ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-02-19T10:51:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-02-19T10:51:04Z"}, "message": "re PR target/39228 (387 optimised __builtin_isinf() gives incorrect result)\n\n\tPR target/39228\n\t* config/i386/i386.md (isinfxf2): Split from isinf<mode>2.\n\t(UNSPEC_FXAM_MEM): New unspec.\n\t(fxam<mode>2_i387_with_temp): New insn and split pattern.\n\t(isinf<mode>2): Use MODEF mode iterator.  Force operand[1] through\n\tmemory using fxam<mode>2_i387_with_temp to remove excess precision.\n\ntestsuite/ChangeLog:\n\n\tPR target/39228\n\t* gcc.c-torture/execute/pr39228.c: New test.\n\nFrom-SVN: r144293", "tree": {"sha": "baeea59617c20a8903bff056b002279a5993025a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baeea59617c20a8903bff056b002279a5993025a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b67572ed1a6f2fc43d07eead15e9eda973d339d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b67572ed1a6f2fc43d07eead15e9eda973d339d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b67572ed1a6f2fc43d07eead15e9eda973d339d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b67572ed1a6f2fc43d07eead15e9eda973d339d/comments", "author": null, "committer": null, "parents": [{"sha": "9e39dba643323a8bf07e1435657eebd3985452db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e39dba643323a8bf07e1435657eebd3985452db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e39dba643323a8bf07e1435657eebd3985452db"}], "stats": {"total": 138, "additions": 122, "deletions": 16}, "files": [{"sha": "8ca48493c4db9cae642265082eb57ca3c5e23948", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b67572ed1a6f2fc43d07eead15e9eda973d339d", "patch": "@@ -1,12 +1,20 @@\n+2009-02-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39228\n+\t* config/i386/i386.md (isinfxf2): Split from isinf<mode>2.\n+\t(UNSPEC_FXAM_MEM): New unspec.\n+\t(fxam<mode>2_i387_with_temp): New insn and split pattern.\n+\t(isinf<mode>2): Use MODEF mode iterator.  Force operand[1] through\n+\tmemory using fxam<mode>2_i387_with_temp to remove excess precision.\n+\n 2009-02-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39207\n \tPR tree-optimization/39074\n \t* tree-ssa-structalias.c (storedanything_id, var_storedanything,\n \tstoredanything_tree): New.\n \t(do_ds_constraint): Simplify ANYTHING shortcutting.  Update\n-\tthe STOREDANYTHING solution if the lhs solution contains\n-\tANYTHING.\n+\tthe STOREDANYTHING solution if the lhs solution contains ANYTHING.\n \t(build_succ_graph): Add edges from STOREDANYTHING to all\n \tnon-direct nodes.\n \t(init_base_vars): Initialize STOREDANYTHING.\n@@ -29,8 +37,7 @@\n 2009-02-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39224\n-\t* config/i386/i386.c (ix86_return_in_memory): Properly check\n-\tABI.\n+\t* config/i386/i386.c (ix86_return_in_memory): Properly check ABI.\n \n 2009-02-18  Jason Merrill  <jason@redhat.com>\n \n@@ -197,8 +204,7 @@\n \n \tPR target/39149\n \t* config/i386/i386.c (override_options): Correct warning\n-\tmessages for -malign-loops,  -malign-jumps and\n-\t-malign-functions.\n+\tmessages for -malign-loops,  -malign-jumps and -malign-functions.\n \n 2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -210,8 +216,7 @@\n \n \tPR target/39162\n \t* config/i386/i386.c (type_natural_mode): Add a new argument.\n-\tReturn the original mode and warn ABI change if vector size\n-\tis 32byte.\n+\tReturn the original mode and warn ABI change if vector size is 32byte.\n \t(function_arg_advance): Updated.\n \t(function_arg): Likewise.\n \t(ix86_function_value): Likewise.\n@@ -290,7 +295,7 @@\n \t(TARGET_INIT_LIBFUNCS): Likewise.\n \n \t* config/ia64/t-glibc (SHLINB_MAPFILES):\n-\tAdd $(srcdir)/config/ia64/libgcc-glibc.ver,\n+\tAdd $(srcdir)/config/ia64/libgcc-glibc.ver.\n \n 2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -736,7 +741,7 @@\n \t* c-decl.c (pop_scope): Set DECL_EXTERNAL for functions declared\n \tinline but never defined.\n \n-2009-01-30  Wolfgang Gellerich  <gellerich@de,ibm.com>\n+2009-01-30  Wolfgang Gellerich  <gellerich@de.ibm.com>\n \n \t* config/s390/s390.md (*insv<mode>_reg_extimm): Removed.\n \t(*insv_h_di_reg_extimm): New insn.\n@@ -875,7 +880,7 @@\n \t* reload1.c (compute_use_by_pseudos, reload, count_pseudo,\n \tcount_spilled_pseudo, find_reg, alter_reg, delete_output_reload):\n \tRemove flag_ira.\n-\t(finish_spills): Ditto.  Remove code for !flga_ira.\n+\t(finish_spills): Ditto.  Remove code for !flag_ira.\n \t\n 2009-01-29  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n@@ -978,7 +983,8 @@\n 2009-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/38740\n-\t* reorg.c (gate_handle_delay_slots): Avoid dbr scheduling if !optimize.\n+\t* reorg.c (gate_handle_delay_slots): Avoid dbr scheduling\n+\tif !optimize.\n \t* config/mips/mips.c (mips_reorg): Likewise.\n \n 2009-01-28  Richard Guenther  <rguenther@suse.de>\n@@ -1242,8 +1248,8 @@\n 2009-01-20  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR other/38758\n-\t* longlong.h: Update copyright years.  Use soft-fp license\n-\tnotice.  Sync __clz_tab declaration with glibc.\n+\t* longlong.h: Update copyright years.  Use soft-fp license notice.\n+\tSync __clz_tab declaration with glibc.\n \n 2009-01-20  Steve Ellcey  <sje@cup.hp.com>\n "}, {"sha": "2fbf654a208dd96a84c462764733eff396a26cfc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6b67572ed1a6f2fc43d07eead15e9eda973d339d", "patch": "@@ -146,6 +146,7 @@\n    (UNSPEC_FPREM1_U\t\t91)\n \n    (UNSPEC_C2_FLAG\t\t95)\n+   (UNSPEC_FXAM_MEM\t\t96)\n \n    ; SSP patterns\n    (UNSPEC_SP_SET\t\t100)\n@@ -18811,9 +18812,56 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"fxam<mode>2_i387_with_temp\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(unspec:HI\n+\t  [(match_operand:MODEF 1 \"memory_operand\" \"\")]\n+\t  UNSPEC_FXAM_MEM))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 2)(match_dup 1))\n+   (set (match_dup 0)\n+\t(unspec:HI [(match_dup 2)] UNSPEC_FXAM))]\n+{\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"isinfxf2\"\n+  [(use (match_operand:SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && TARGET_C99_FUNCTIONS\"\n+{\n+  rtx mask = GEN_INT (0x45);\n+  rtx val = GEN_INT (0x05);\n+\n+  rtx cond;\n+\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx res = gen_reg_rtx (QImode);\n+\n+  emit_insn (gen_fxamxf2_i387 (scratch, operands[1]));\n+\n+  emit_insn (gen_andqi_ext_0 (scratch, scratch, mask));\n+  emit_insn (gen_cmpqi_ext_3 (scratch, val));\n+  cond = gen_rtx_fmt_ee (EQ, QImode,\n+\t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, res, cond));\n+  emit_insn (gen_zero_extendqisi2 (operands[0], res));\n+  DONE;\n+})\n+\n (define_expand \"isinf<mode>2\"\n   [(use (match_operand:SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:X87MODEF 1 \"register_operand\" \"\"))]\n+   (use (match_operand:MODEF 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && TARGET_C99_FUNCTIONS\n    && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n@@ -18826,7 +18874,18 @@\n   rtx scratch = gen_reg_rtx (HImode);\n   rtx res = gen_reg_rtx (QImode);\n \n-  emit_insn (gen_fxam<mode>2_i387 (scratch, operands[1]));\n+  /* Remove excess precision by forcing value through memory. */\n+  if (memory_operand (operands[1], VOIDmode))\n+    emit_insn (gen_fxam<mode>2_i387_with_temp (scratch, operands[1]));\n+  else\n+    {\n+      int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n+      rtx temp = assign_386_stack_local (<MODE>mode, slot);\n+\n+      emit_move_insn (temp, operands[1]);\n+      emit_insn (gen_fxam<mode>2_i387_with_temp (scratch, temp));\n+    }\n+\n   emit_insn (gen_andqi_ext_0 (scratch, scratch, mask));\n   emit_insn (gen_cmpqi_ext_3 (scratch, val));\n   cond = gen_rtx_fmt_ee (EQ, QImode,"}, {"sha": "a01fa1fd018977cd48afc97f49dad3300893fc5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b67572ed1a6f2fc43d07eead15e9eda973d339d", "patch": "@@ -1,3 +1,8 @@\n+2009-02-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39228\n+\t* gcc.c-torture/execute/pr39228.c: New test.\n+\n 2009-02-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39074"}, {"sha": "06d8efd1a5bba8b5d48b6cc65a293242ad09d2b6", "filename": "gcc/testsuite/gcc.c-torture/execute/pr39228.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr39228.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67572ed1a6f2fc43d07eead15e9eda973d339d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr39228.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr39228.c?ref=6b67572ed1a6f2fc43d07eead15e9eda973d339d", "patch": "@@ -0,0 +1,36 @@\n+extern void abort (void);\n+\n+static int __attribute__((always_inline)) testf (float b)\n+{\n+  float c = 1.01f * b;\n+\n+  return __builtin_isinff (c);\n+}\n+\n+static int __attribute__((always_inline)) test (double b)\n+{\n+  double c = 1.01 * b;\n+\n+  return __builtin_isinf (c);\n+}\n+\n+static int __attribute__((always_inline)) testl (long double b)\n+{\n+  long double c = 1.01L * b;\n+\n+  return __builtin_isinfl (c);\n+}\n+\n+int main()\n+{\n+  if (testf (__FLT_MAX__) < 1)\n+    abort ();\n+\n+  if (test (__DBL_MAX__) < 1)\n+    abort ();\n+\n+  if (testl (__LDBL_MAX__) < 1)\n+    abort ();\n+\n+  return 0;\n+}"}]}