{"sha": "8a902edbbdb53a00209e88b6182457941ff196a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5MDJlZGJiZGI1M2EwMDIwOWU4OGI2MTgyNDU3OTQxZmYxOTZhOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-29T03:11:50Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-29T03:11:50Z"}, "message": "Implement P1152R4: Deprecating some uses of volatile.\n\n\tPR c++/91361\n\t* c-opts.c (c_common_post_options): Enable -Wvolatile by\n\tdefault for C++2a, unless -Wno-deprecated.\n\t* c.opt (Wvolatile): New warning.\n\n\t* cp-gimplify.c (cp_fold): Set TREE_THIS_VOLATILE.\n\t* decl.c (grokdeclarator): Warn about a volatile-qualified structured\n\tbinding and return type.\n\t(grokparms): Warn about a volatile-qualified function parameter.\n\t* expr.c (mark_use) <case MODIFY_EXPR>: Emit a -Wvolatile warning.\n\t* typeck.c (cp_build_unary_op): Emit a -Wvolatile warning for pre and\n\tpost ++/-- on a volatile operand.\n\t(genericize_compound_lvalue): Use a better location.  Don't lose\n\tTREE_THIS_VOLATILE.\n\t(cp_build_modify_expr): Emit a -Wvolatile warning for a compound\n\tassignment whose LHS is volatile-qualified.  Build the assignment with\n\ta more precise location.\n\n\t* doc/invoke.texi: Document -Wvolatile.\n\n\t* c-c++-common/Wbool-operation-1.c: Use -Wno-volatile in C++.\n\t* c-c++-common/gomp/atomic-1.c: Likewise.\n\t* c-c++-common/gomp/atomic-9.c: Likewise.\n\t* c-c++-common/gomp/depend-iterator-1.c: Likewise.\n\t* c-c++-common/gomp/loop-1.c: Adjust warning location for C++.\n\t* c-c++-common/gomp/order-3.c: Likewise.\n\t* c-c++-common/pr69733.c: Use -Wno-volatile in C++.\n\t* c-c++-common/spec-barrier-2.c: Likewise.\n\t* c-c++-common/tm/pr54893.c: Likewise.\n\t* g++.dg/cpp0x/pr65327.C: Add dg-warning.\n\t* g++.dg/cpp0x/rv-conv2.C: Likewise.\n\t* g++.dg/cpp0x/rv1n.C: Likewise.\n\t* g++.dg/cpp0x/rv1p.C: Likewise.\n\t* g++.dg/cpp0x/rv2n.C: Likewise.\n\t* g++.dg/cpp0x/rv2p.C: Likewise.\n\t* g++.dg/cpp0x/rv3n.C: Likewise.\n\t* g++.dg/cpp0x/rv3p.C: Likewise.\n\t* g++.dg/cpp0x/rv4n.C: Likewise.\n\t* g++.dg/cpp0x/rv4p.C: Likewise.\n\t* g++.dg/cpp0x/rv5n.C: Likewise.\n\t* g++.dg/cpp0x/rv5p.C: Likewise.\n\t* g++.dg/cpp0x/rv6n.C: Likewise.\n\t* g++.dg/cpp0x/rv6p.C: Likewise.\n\t* g++.dg/cpp0x/rv7n.C: Likewise.\n\t* g++.dg/cpp0x/rv7p.C: Likewise.\n\t* g++.dg/cpp0x/rv8p.C: Likewise.\n\t* g++.dg/cpp0x/trailing14.C: Use -Wno-volatile.\n\t* g++.dg/cpp1y/new1.C: Add dg-warning.\n\t* g++.dg/cpp2a/volatile1.C: New test.\n\t* g++.dg/cpp2a/volatile2.C: New test.\n\t* g++.dg/cpp2a/volatile3.C: New test.\n\t* g++.dg/cpp2a/volatile4.C: New test.\n\t* g++.dg/expr/bool3.C: Add dg-warning.\n\t* g++.dg/expr/bool4.C: Likewise.\n\t* g++.dg/expr/cond9.C: Likewise.\n\t* g++.dg/ext/vector25.C: Likewise.\n\t* g++.dg/gomp/depend-iterator-1.C: Use -Wno-volatile.\n\t* g++.dg/inherit/covariant21.C: Add dg-warning.\n\t* g++.dg/init/ref18.C: Likewise.\n\t* g++.dg/ipa/pr63838.C: Likewise.\n\t* g++.dg/overload/rvalue2.C: Likewise.\n\t* g++.dg/parse/semicolon4.C: Likewise.\n\t* g++.dg/warn/Wreturn-type-4.C: Likewise.\n\t* g++.dg/warn/pr36069.C: Likewise.\n\t* g++.old-deja/g++.mike/p9506.C: Likewise.\n\t* g++.old-deja/g++.other/volatile1.C: Likewise.\n\nFrom-SVN: r275022", "tree": {"sha": "076d856b22bc8d9eda1ac6a617c05a42fe929c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076d856b22bc8d9eda1ac6a617c05a42fe929c7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a902edbbdb53a00209e88b6182457941ff196a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a902edbbdb53a00209e88b6182457941ff196a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a902edbbdb53a00209e88b6182457941ff196a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a902edbbdb53a00209e88b6182457941ff196a9/comments", "author": null, "committer": null, "parents": [{"sha": "737c5bac68732abe28a374658fe85396f92b9ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737c5bac68732abe28a374658fe85396f92b9ef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737c5bac68732abe28a374658fe85396f92b9ef5"}], "stats": {"total": 881, "additions": 814, "deletions": 67}, "files": [{"sha": "c4a7b30ead89ad401afb993db52662e1aee07dba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,3 +1,9 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P1152R4: Deprecating some uses of volatile.\n+\tPR c++/91361\n+\t* doc/invoke.texi: Document -Wvolatile.\n+\n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91360 - Implement C++20 P1143R2: constinit."}, {"sha": "8b4e75cb78eb1ef59155642025c6170846557ef5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,3 +1,11 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P1152R4: Deprecating some uses of volatile.\n+\tPR c++/91361\n+\t* c-opts.c (c_common_post_options): Enable -Wvolatile by\n+\tdefault for C++2a, unless -Wno-deprecated.\n+\t* c.opt (Wvolatile): New warning.\n+\n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91360 - Implement C++20 P1143R2: constinit."}, {"sha": "fa8cd0ccb097e8e0b6eee5621b2f6df66c020974", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -919,6 +919,10 @@ c_common_post_options (const char **pfilename)\n   if (!global_options_set.x_warn_comma_subscript)\n     warn_comma_subscript = (cxx_dialect >= cxx2a && warn_deprecated);\n \n+  /* -Wvolatile is enabled by default in C++20.  */\n+  if (!global_options_set.x_warn_volatile)\n+    warn_volatile = (cxx_dialect >= cxx2a && warn_deprecated);\n+\n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;"}, {"sha": "f8a1a1dbdad90dda1dc4fe401e90603f285b0f0b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1228,6 +1228,10 @@ Wno-vla-larger-than\n C ObjC C++ LTO ObjC++ Alias(Wvla-larger-than=,18446744073709551615EiB,none) Warning\n -Wno-vla-larger-than Disable Wvla-larger-than= warning.  Equivalent to Wvla-larger-than=<SIZE_MAX> or larger.\n \n+Wvolatile\n+C++ ObjC++ Var(warn_volatile) Warning\n+Warn about deprecated uses of volatile qualifier.\n+\n Wvolatile-register-var\n C ObjC C++ ObjC++ Var(warn_volatile_register_var) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn when a register variable is declared volatile."}, {"sha": "818d32b29d336d622c621d5f14c192668ac2d9f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,3 +1,20 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P1152R4: Deprecating some uses of volatile.\n+\tPR c++/91361\n+\t* cp-gimplify.c (cp_fold): Set TREE_THIS_VOLATILE.\n+\t* decl.c (grokdeclarator): Warn about a volatile-qualified structured\n+\tbinding and return type.\n+\t(grokparms): Warn about a volatile-qualified function parameter.\n+\t* expr.c (mark_use) <case MODIFY_EXPR>: Emit a -Wvolatile warning.\n+\t* typeck.c (cp_build_unary_op): Emit a -Wvolatile warning for pre and\n+\tpost ++/-- on a volatile operand.\n+\t(genericize_compound_lvalue): Use a better location.  Don't lose\n+\tTREE_THIS_VOLATILE.\n+\t(cp_build_modify_expr): Emit a -Wvolatile warning for a compound\n+\tassignment whose LHS is volatile-qualified.  Build the assignment with\n+\ta more precise location.\n+\n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91360 - Implement C++20 P1143R2: constinit."}, {"sha": "49fa47ac3af80b54cd3d95897715a3b1aaf6cfa8", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -2507,6 +2507,9 @@ cp_fold (tree x)\n \t  else\n \t    x = org_x;\n \t}\n+      if (code == MODIFY_EXPR && TREE_CODE (x) == MODIFY_EXPR)\n+\tTREE_THIS_VOLATILE (x) = TREE_THIS_VOLATILE (org_x);\n+\n       break;\n \n     case VEC_COND_EXPR:"}, {"sha": "2aef330455f8d2e3d4044ddb4f29417f869e3f23", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -11233,6 +11233,10 @@ grokdeclarator (const cp_declarator *declarator,\n       if (concept_p)\n \terror_at (declspecs->locations[ds_concept],\n \t\t  \"structured binding declaration cannot be %qs\", \"concept\");\n+      /* [dcl.struct.bind] \"A cv that includes volatile is deprecated.\"  */\n+      if (type_quals & TYPE_QUAL_VOLATILE)\n+\twarning_at (declspecs->locations[ds_volatile], OPT_Wvolatile,\n+\t\t    \"%<volatile%>-qualified structured binding is deprecated\");\n       switch (storage_class)\n \t{\n \tcase sc_none:\n@@ -11623,6 +11627,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n \t\t  warning_at (typespec_loc, OPT_Wignored_qualifiers, \"type \"\n \t\t\t      \"qualifiers ignored on function return type\");\n+\t\t/* [dcl.fct] \"A volatile-qualified return type is\n+\t\t   deprecated.\"  */\n+\t\tif (type_quals & TYPE_QUAL_VOLATILE)\n+\t\t  warning_at (typespec_loc, OPT_Wvolatile,\n+\t\t\t      \"%<volatile%>-qualified return type is \"\n+\t\t\t      \"deprecated\");\n+\n \t\t/* We now know that the TYPE_QUALS don't apply to the\n \t\t   decl, but to its return type.  */\n \t\ttype_quals = TYPE_UNQUALIFIED;\n@@ -13378,6 +13389,13 @@ grokparms (tree parmlist, tree *parms)\n \t\tcp_warn_deprecated_use (deptype);\n \t    }\n \n+\t  /* [dcl.fct] \"A parameter with volatile-qualified type is\n+\t     deprecated.\"  */\n+\t  if (CP_TYPE_VOLATILE_P (type))\n+\t    warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wvolatile,\n+\t\t\t\"%<volatile%>-qualified parameter is \"\n+\t\t\t\"deprecated\");\n+\n \t  /* Top-level qualifiers on the parameters are\n \t     ignored for function types.  */\n \t  type = cp_build_qualified_type (type, 0);"}, {"sha": "212a7f93c5a21125577669d6d8c52510ef0dd0fa", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -207,6 +207,28 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n       recurse_op[0] = true;\n       break;\n \n+    case MODIFY_EXPR:\n+\t{\n+\t  tree lhs = TREE_OPERAND (expr, 0);\n+\t  /* [expr.ass] \"A simple assignment whose left operand is of\n+\t     a volatile-qualified type is deprecated unless the assignment\n+\t     is either a discarded-value expression or appears in an\n+\t     unevaluated context.\"  */\n+\t  if (read_p\n+\t      && !cp_unevaluated_operand\n+\t      && (TREE_THIS_VOLATILE (lhs)\n+\t\t  || CP_TYPE_VOLATILE_P (TREE_TYPE (lhs)))\n+\t      && !TREE_THIS_VOLATILE (expr))\n+\t    {\n+\t      warning_at (location_of (expr), OPT_Wvolatile,\n+\t\t\t  \"using value of simple assignment with %<volatile%>-\"\n+\t\t\t  \"qualified left operand is deprecated\");\n+\t      /* Make sure not to warn about this assignment again.  */\n+\t      TREE_THIS_VOLATILE (expr) = true;\n+\t    }\n+\t  break;\n+\t}\n+\n     default:\n       break;\n     }"}, {"sha": "d4f2d98143b10c7aa23ec9aecb7b9f5d398f66ea", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -6459,6 +6459,17 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n                              complain))\n \t  return error_mark_node;\n \n+\t/* [depr.volatile.type] \"Postfix ++ and -- expressions and\n+\t   prefix ++ and -- expressions of volatile-qualified arithmetic\n+\t   and pointer types are deprecated.\"  */\n+\tif (TREE_THIS_VOLATILE (arg) || CP_TYPE_VOLATILE_P (TREE_TYPE (arg)))\n+\t  warning_at (location, OPT_Wvolatile,\n+\t\t      \"%qs expression of %<volatile%>-qualified type is \"\n+\t\t      \"deprecated\",\n+\t\t      ((code == PREINCREMENT_EXPR\n+\t\t\t|| code == POSTINCREMENT_EXPR)\n+\t\t       ? \"++\" : \"--\"));\n+\n \t/* Forbid using -- or ++ in C++17 on `bool'.  */\n \tif (TREE_CODE (declared_type) == BOOLEAN_TYPE)\n \t  {\n@@ -8278,6 +8289,15 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t\t\t && MAYBE_CLASS_TYPE_P (TREE_TYPE (lhstype)))\n \t\t\t|| MAYBE_CLASS_TYPE_P (lhstype)));\n \n+\t  /* An expression of the form E1 op= E2.  [expr.ass] says:\n+\t     \"Such expressions are deprecated if E1 has volatile-qualified\n+\t     type.\"  We warn here rather than in cp_genericize_r because\n+\t     for compound assignments we are supposed to warn even if the\n+\t     assignment is a discarded-value expression.  */\n+\t  if (TREE_THIS_VOLATILE (lhs) || CP_TYPE_VOLATILE_P (lhstype))\n+\t    warning_at (loc, OPT_Wvolatile,\n+\t\t\t\"compound assignment with %<volatile%>-qualified left \"\n+\t\t\t\"operand is deprecated\");\n \t  /* Preevaluate the RHS to make sure its evaluation is complete\n \t     before the lvalue-to-rvalue conversion of the LHS:\n \n@@ -8450,8 +8470,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \tgoto ret;\n     }\n \n-  result = build2 (modifycode == NOP_EXPR ? MODIFY_EXPR : INIT_EXPR,\n-\t\t   lhstype, lhs, newrhs);\n+  result = build2_loc (loc, modifycode == NOP_EXPR ? MODIFY_EXPR : INIT_EXPR,\n+\t\t       lhstype, lhs, newrhs);\n \n   TREE_SIDE_EFFECTS (result) = 1;\n   if (!plain_assign)"}, {"sha": "aa9886ee09f2772162b683db88e25f948c53c812", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -243,7 +243,7 @@ in the following sections.\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n -Wno-class-conversion  -Wno-terminate @gol\n--Wsign-promo  -Wvirtual-inheritance}\n+-Wsign-promo  -Wvirtual-inheritance  -Wvolatile}\n \n @item Objective-C and Objective-C++ Language Options\n @xref{Objective-C and Objective-C++ Dialect Options,,Options Controlling\n@@ -3516,6 +3516,19 @@ result in a call to @code{terminate}.\n Disable the warning about the case when a conversion function converts an\n object to the same type, to a base class of that type, or to void; such\n a conversion function will never be called.\n+\n+@item -Wvolatile @r{(C++ and Objective-C++ only)}\n+@opindex Wvolatile\n+@opindex Wno-volatile\n+Warn about deprecated uses of the volatile qualifier.  This includes postfix\n+and prefix @code{++} and @code{--} expressions of volatile-qualified types,\n+using simple assignments where the left operand is a volatile-qualified\n+non-class type for their value, compound assignments where the left operand\n+is a volatile-qualified non-class type, volatile-qualified function return\n+type, volatile-qualified parameter type, and structured bindings of a\n+volatile-qualified type.  This usage was deprecated in C++20.\n+\n+Enabled by default with @option{-std=c++2a}.\n @end table\n \n @node Objective-C and Objective-C++ Dialect Options"}, {"sha": "3a503ac8b3daf1cb589d9d26a92e9dd15a96c4df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,7 +1,58 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P1152R4: Deprecating some uses of volatile.\n+\tPR c++/91361\n+\t* c-c++-common/Wbool-operation-1.c: Use -Wno-volatile in C++.\n+\t* c-c++-common/gomp/atomic-1.c: Likewise.\n+\t* c-c++-common/gomp/atomic-9.c: Likewise.\n+\t* c-c++-common/gomp/depend-iterator-1.c: Likewise.\n+\t* c-c++-common/gomp/loop-1.c: Adjust warning location for C++.\n+\t* c-c++-common/gomp/order-3.c: Likewise.\n+\t* c-c++-common/pr69733.c: Use -Wno-volatile in C++.\n+\t* c-c++-common/spec-barrier-2.c: Likewise.\n+\t* c-c++-common/tm/pr54893.c: Likewise.\n+\t* g++.dg/cpp0x/pr65327.C: Add dg-warning.\n+\t* g++.dg/cpp0x/rv-conv2.C: Likewise.\n+\t* g++.dg/cpp0x/rv1n.C: Likewise.\n+\t* g++.dg/cpp0x/rv1p.C: Likewise.\n+\t* g++.dg/cpp0x/rv2n.C: Likewise.\n+\t* g++.dg/cpp0x/rv2p.C: Likewise.\n+\t* g++.dg/cpp0x/rv3n.C: Likewise.\n+\t* g++.dg/cpp0x/rv3p.C: Likewise.\n+\t* g++.dg/cpp0x/rv4n.C: Likewise.\n+\t* g++.dg/cpp0x/rv4p.C: Likewise.\n+\t* g++.dg/cpp0x/rv5n.C: Likewise.\n+\t* g++.dg/cpp0x/rv5p.C: Likewise.\n+\t* g++.dg/cpp0x/rv6n.C: Likewise.\n+\t* g++.dg/cpp0x/rv6p.C: Likewise.\n+\t* g++.dg/cpp0x/rv7n.C: Likewise.\n+\t* g++.dg/cpp0x/rv7p.C: Likewise.\n+\t* g++.dg/cpp0x/rv8p.C: Likewise.\n+\t* g++.dg/cpp0x/trailing14.C: Use -Wno-volatile.\n+\t* g++.dg/cpp1y/new1.C: Add dg-warning.\n+\t* g++.dg/cpp2a/volatile1.C: New test.\n+\t* g++.dg/cpp2a/volatile2.C: New test.\n+\t* g++.dg/cpp2a/volatile3.C: New test.\n+\t* g++.dg/cpp2a/volatile4.C: New test.\n+\t* g++.dg/expr/bool3.C: Add dg-warning.\n+\t* g++.dg/expr/bool4.C: Likewise.\n+\t* g++.dg/expr/cond9.C: Likewise.\n+\t* g++.dg/ext/vector25.C: Likewise.\n+\t* g++.dg/gomp/depend-iterator-1.C: Use -Wno-volatile.\n+\t* g++.dg/inherit/covariant21.C: Add dg-warning.\n+\t* g++.dg/init/ref18.C: Likewise.\n+\t* g++.dg/ipa/pr63838.C: Likewise.\n+\t* g++.dg/overload/rvalue2.C: Likewise.\n+\t* g++.dg/parse/semicolon4.C: Likewise.\n+\t* g++.dg/warn/Wreturn-type-4.C: Likewise.\n+\t* g++.dg/warn/pr36069.C: Likewise.\n+\t* g++.old-deja/g++.mike/p9506.C: Likewise.\n+\t* g++.old-deja/g++.other/volatile1.C: Likewise.\n+\n 2019-08-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91551\n- \t* gfortran.dg/allocated_3.f90\n+\t* gfortran.dg/allocated_3.f90\n \n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "ce87705692af7ccd47f13d8384614898662792d6", "filename": "gcc/testsuite/c-c++-common/Wbool-operation-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,6 +1,7 @@\n /* PR c/77490 */\n /* { dg-do compile } */\n /* { dg-options \"-Wall -Wno-psabi\" } */\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n \n #ifndef __cplusplus\n # define bool _Bool"}, {"sha": "1facf4586f5b1af10614710cfea205a232dada74", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-1.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n \n int x;\n volatile int y;"}, {"sha": "35548395f369eaed7adab4e833d682d8fd51ea55", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-9.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-9.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-fopenmp -fdump-tree-ompexp\" } */\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n /* { dg-require-effective-target cas_int } */\n \n volatile int *bar(void);"}, {"sha": "6fa60215f4349438ef74aefaf31988b67a98e301", "filename": "gcc/testsuite/c-c++-common/gomp/depend-iterator-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepend-iterator-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepend-iterator-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepend-iterator-1.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n+\n int arr[64], arr2[64];\n struct S { int a[4]; } k;\n short arr4[4];"}, {"sha": "4fb995c02a770ef6674891dbf59dc13f47f5f30e", "filename": "gcc/testsuite/c-c++-common/gomp/loop-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-1.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -100,8 +100,8 @@ f4 (int *a)\n   #pragma omp loop order(concurrent) bind(parallel)\n   for (i = 0; i < 64; i++)\n     {\n-      #pragma omp atomic read\n-      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" } */\n+      #pragma omp atomic read\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c++ } } */\n+      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c } } */\n     }\n   #pragma omp loop order(concurrent) bind(parallel)\n   for (i = 0; i < 64; i++)\n@@ -172,8 +172,8 @@ f5 (int *a)\n   #pragma omp loop\n   for (i = 0; i < 64; i++)\n     {\n-      #pragma omp atomic read\n-      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" } */\n+      #pragma omp atomic read\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c++ } } */\n+      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c } } */\n     }\n   #pragma omp loop\n   for (i = 0; i < 64; i++)\n@@ -245,8 +245,8 @@ f6 (int *a)\n   #pragma omp loop\n   for (i = 0; i < 64; i++)\n     {\n-      #pragma omp atomic read\n-      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" } */\n+      #pragma omp atomic read\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c++ } } */\n+      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c } } */\n     }\n   #pragma omp loop\n   for (i = 0; i < 64; i++)"}, {"sha": "e33386dd5ccd10fdd3bfb77322ff1f23c624f2bf", "filename": "gcc/testsuite/c-c++-common/gomp/order-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-3.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -50,8 +50,8 @@ f1 (int *a)\n   #pragma omp simd order(concurrent)\n   for (i = 0; i < 64; i++)\n     {\n-      #pragma omp atomic read\n-      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" } */\n+      #pragma omp atomic read\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" \"\" { target c++ } } */\n+      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" \"\" { target c } } */\n     }\n   #pragma omp simd order(concurrent)\n   for (i = 0; i < 64; i++)\n@@ -112,8 +112,8 @@ f2 (int *a)\n   #pragma omp for simd order(concurrent)\n   for (i = 0; i < 64; i++)\n     {\n-      #pragma omp atomic read\n-      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" } */\n+      #pragma omp atomic read\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" \"\" { target c++ } } */\n+      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" \"\" { target c } } */\n     }\n   #pragma omp for simd order(concurrent)\n   for (i = 0; i < 64; i++)\n@@ -174,8 +174,8 @@ f3 (int *a)\n   #pragma omp for order(concurrent)\n   for (i = 0; i < 64; i++)\n     {\n-      #pragma omp atomic read\n-      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" } */\n+      #pragma omp atomic read\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" \"\" { target c++ } } */\n+      a[i] = v;\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" \"\" { target c } } */\n     }\n   #pragma omp for order(concurrent)\n   for (i = 0; i < 64; i++)"}, {"sha": "ab70f49009c3832e729db929f0b47a73f68612cc", "filename": "gcc/testsuite/c-c++-common/pr69733.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69733.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-W -fdiagnostics-show-caret\" } */\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n \n typedef const double cd;\n double val;\n@@ -21,4 +22,3 @@ cd val2() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n  cd val2() {return val;}\n  ^~\n { dg-end-multiline-output \"\" } */\n-"}, {"sha": "a27ec54f0d3822f503103f2b475c6978b70aac76", "filename": "gcc/testsuite/c-c++-common/spec-barrier-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspec-barrier-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspec-barrier-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspec-barrier-2.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n \n /* Even on targets that don't need the optional failval parameter,\n    side-effects on the operand should still be calculated.  */"}, {"sha": "266cbe9c6524c76cf81ae5c7f1fbcf4d13a12ff1", "filename": "gcc/testsuite/c-c++-common/tm/pr54893.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fpr54893.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fpr54893.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fpr54893.c?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-fgnu-tm -fdump-ipa-tmipa\" } */\n+/* { dg-additional-options \"-Wno-volatile\" { target c++ } } */\n \n /* Test that volatiles are allowed inside relaxed transactions.  */\n "}, {"sha": "6e888ebff2ce0fef44de5dbc0decfef2582d6b60", "filename": "gcc/testsuite/g++.dg/cpp0x/pr65327.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65327.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65327.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65327.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -11,7 +11,7 @@ foo ()\n   static constexpr volatile int k = 5;\n }\n \n-constexpr volatile int\n+constexpr volatile int // { dg-warning \"deprecated\" \"\" { target c++2a } }\n bar ()\n {\n   return i;"}, {"sha": "2f2a1fa702a512cec5443f55b77f4bc77454d4b3", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-conv2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-conv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-conv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-conv2.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,16 +1,16 @@\n // PR c++/89705\n // { dg-do compile { target c++11 } }\n \n-struct W { operator const volatile int(); };\n+struct W { operator const volatile int(); }; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n const int& rci = W();\n \n struct X { operator const int(); };\n int&& rri = X();\n \n-struct Y { operator volatile int(); };\n+struct Y { operator volatile int(); }; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n int&& rri2 = Y();\n \n-struct Z { operator const volatile int(); };\n+struct Z { operator const volatile int(); }; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n volatile int&& rri3 = Z();\n \n enum E { A };"}, {"sha": "a762fc858625271a98df67890471c75917c05949", "filename": "gcc/testsuite/g++.dg/cpp0x/rv1n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv1n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv1n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv1n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -26,8 +26,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 1 at a time\n "}, {"sha": "e2a983a77086d1e3415e8125b900c8db7fbe6708", "filename": "gcc/testsuite/g++.dg/cpp0x/rv1p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv1p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv1p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv1p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -26,8 +26,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 1 at a time\n "}, {"sha": "2871ccf9ab3b2204a3f37fa431922317df6a1432", "filename": "gcc/testsuite/g++.dg/cpp0x/rv2n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 2 at a time\n "}, {"sha": "bab0dce3d977d30137289e043f5f921131a46a81", "filename": "gcc/testsuite/g++.dg/cpp0x/rv2p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 2 at a time\n "}, {"sha": "35cdba9585811d7e8650bc455b15e46cbb2778c1", "filename": "gcc/testsuite/g++.dg/cpp0x/rv3n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 3 at a time\n "}, {"sha": "b25aa26c9b0d1fdbfddd6a2443f3aead83f806a4", "filename": "gcc/testsuite/g++.dg/cpp0x/rv3p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 3 at a time\n "}, {"sha": "6941a13de6c002ccebfbaab2adde4fc6c31033f3", "filename": "gcc/testsuite/g++.dg/cpp0x/rv4n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv4n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv4n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv4n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 4 at a time\n "}, {"sha": "cd0d631d780ee97372cf3c54f6e88117d0dbdb87", "filename": "gcc/testsuite/g++.dg/cpp0x/rv4p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv4p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv4p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv4p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 4 at a time\n "}, {"sha": "086aa460c68a83d24b5ece9fc2983325b87500ca", "filename": "gcc/testsuite/g++.dg/cpp0x/rv5n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv5n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv5n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv5n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 5 at a time\n "}, {"sha": "34c1017f5786a50efd6c0cd2fc2592e138e1ad5f", "filename": "gcc/testsuite/g++.dg/cpp0x/rv5p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv5p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv5p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv5p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 5 at a time\n "}, {"sha": "b21d22a5b87058c4fdbd10c321a9ca7eaa4632d5", "filename": "gcc/testsuite/g++.dg/cpp0x/rv6n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv6n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv6n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv6n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 6 at a time\n "}, {"sha": "fee692bb08f3564e8eebed179e039a9ffdb94b4d", "filename": "gcc/testsuite/g++.dg/cpp0x/rv6p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv6p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv6p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv6p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 6 at a time\n "}, {"sha": "5bc313cc07fad8655a6792f32992130ec52ea2c1", "filename": "gcc/testsuite/g++.dg/cpp0x/rv7n.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv7n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv7n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv7n.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 7 at a time\n "}, {"sha": "b0b8f96549832081a7e1d7ed02080987d9259e4b", "filename": "gcc/testsuite/g++.dg/cpp0x/rv7p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv7p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv7p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv7p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 7 at a time\n "}, {"sha": "287fb93b432dd8e64152321b94925d104e650240", "filename": "gcc/testsuite/g++.dg/cpp0x/rv8p.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv8p.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv8p.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv8p.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,8 +25,8 @@ struct A\n \n                A    source();\n const          A  c_source();\n-      volatile A  v_source();\n-const volatile A cv_source();\n+      volatile A  v_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n+const volatile A cv_source(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n // 8 at a time\n "}, {"sha": "4ebb37406ad9abd24b2a634e0f2582412f0e4f69", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing14.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,6 +1,6 @@\n // PR c++/65775\n // { dg-do compile { target c++11 } }\n-// { dg-options \"-Wignored-qualifiers\" }\n+// { dg-options \"-Wignored-qualifiers -Wno-volatile\" }\n \n using Qi = int const volatile;\n Qi q1();           // { dg-warning \"1: type qualifiers ignored\" }"}, {"sha": "b9ad64dfcc0db938158006f3a9f9699d7b1c3010", "filename": "gcc/testsuite/g++.dg/cpp1y/new1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnew1.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -65,7 +65,7 @@ void\n test_unused() {\n   volatile double d = 0.0;\n   double *p = new double ();\n-  d += 1.0;\n+  d += 1.0; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n   delete p;\n }\n "}, {"sha": "e47591b13bce5d0f2a82eaa8a257c86124cbda96", "filename": "gcc/testsuite/g++.dg/cpp2a/volatile1.C", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile1.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -0,0 +1,141 @@\n+// PR c++/91361 - P1152R4: Deprecating some uses of volatile.\n+// { dg-do compile { target c++17 } }\n+\n+#define ACCESS_ONCE(x) (*(volatile __typeof(x) *)&(x))\n+\n+struct S {\n+  volatile int a : 4;\n+  int b : 2;\n+};\n+\n+struct T {\n+  int a : 4;\n+  int b : 2;\n+};\n+\n+union U {\n+  char c;\n+  int i;\n+};\n+\n+struct W {\n+  W();\n+  W(volatile W&);\n+  W& operator=(volatile W&) volatile;\n+};\n+\n+volatile int // { dg-warning \".volatile.-qualified return type is deprecated\" \"\" { target c++2a } }\n+fn (volatile int i) // { dg-warning \".volatile.-qualified parameter is deprecated\" \"\" { target c++2a } }\n+{\n+  volatile int v = 10;\n+  int *volatile p = nullptr;\n+\n+  // Pre/post ++/--.\n+  v++; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  ++v; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  v--; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  --v; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  p++; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  ++p; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  p--; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  --p; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" \"\" { target c++2a } }\n+  return v + i + *p;\n+}\n+\n+void\n+fn2 ()\n+{\n+  volatile int vi = 42;\n+  int i = 24;\n+\n+  // Discarded-value expression ([expr.context]).\n+  // The lvalue-to-rvalue conversion is applied here:\n+  vi;\n+  // ...but not here.  Otherwise we'd write to VI and then immediately read it.\n+  vi = 42;\n+  vi = i;\n+  vi = i = 42;\n+  i = vi = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  &(vi = i); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  (vi = 42, 45);\n+  (i = vi = 42, 10); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  i = vi; // LHS not volatile.\n+  i = (vi = i, 42);\n+  static_cast<void>(vi = i);\n+  static_cast<void>(i = vi = 42); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  (void)(vi = i);\n+  (void)(i = vi = 42); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+\n+  // Unevaluated operand.\n+  decltype(vi = 42) x = vi;\n+  decltype(i = vi = 42) x3 = i;\n+\n+  // Compound assignments.\n+  vi += i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi -= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi %= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi ^= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi |= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi /= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi = vi += 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  vi += vi = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  i *= vi;\n+  decltype(vi -= 42) x2 = vi; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+\n+  // Structured bindings.\n+  int a[] = { 10, 5 };\n+  const auto & [cxr, cyr] = a;\n+  const volatile auto & [cvxr, cvyr] = a; // { dg-warning \".volatile.-qualified structured binding is deprecated\" \"\" { target c++2a } }\n+  volatile auto & [vxr, vyr] = a; // { dg-warning \".volatile.-qualified structured binding is deprecated\" \"\" { target c++2a } }\n+}\n+\n+void\n+fn3 ()\n+{\n+  volatile int i, j, k = 0;\n+  i = j = k; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+\n+  ACCESS_ONCE(j);\n+\n+  S s;\n+  s.b = 1;\n+\n+  volatile U u;\n+  u.c = 42;\n+  i = u.c = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  u.c += 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+\n+  volatile T t;\n+  t.a = 3;\n+  j = t.a = 3; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  t.a += 3; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+\n+  volatile int *src = &i;\n+  *src; // No assignment, don't warn.\n+}\n+\n+void\n+fn4 ()\n+{\n+  volatile W vw;\n+  W w;\n+  // Assignment to objects of a class is defined by the copy/move assignment\n+  // operator.\n+  vw = w;\n+  w = vw;\n+}\n+\n+template<typename T>\n+void raccoon ()\n+{\n+  volatile T t, u;\n+  t = 42;\n+  u = t = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+  t &= 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" \"\" { target c++2a } }\n+}\n+\n+void\n+fn5 ()\n+{\n+  raccoon<int>();\n+}"}, {"sha": "1a7889a6a8cb3b0596e940e720a8cc90a6d1af5d", "filename": "gcc/testsuite/g++.dg/cpp2a/volatile2.C", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile2.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -0,0 +1,142 @@\n+// PR c++/91361 - P1152R4: Deprecating some uses of volatile.\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wno-volatile\" }\n+\n+#define ACCESS_ONCE(x) (*(volatile __typeof(x) *)&(x))\n+\n+struct S {\n+  volatile int a : 4;\n+  int b : 2;\n+};\n+\n+struct T {\n+  int a : 4;\n+  int b : 2;\n+};\n+\n+union U {\n+  char c;\n+  int i;\n+};\n+\n+struct W {\n+  W();\n+  W(volatile W&);\n+  W& operator=(volatile W&) volatile;\n+};\n+\n+volatile int\n+fn (volatile int i)\n+{\n+  volatile int v = 10;\n+  int *volatile p = nullptr;\n+\n+  // Pre/post ++/--.\n+  v++;\n+  ++v;\n+  v--;\n+  --v;\n+  p++;\n+  ++p;\n+  p--;\n+  --p;\n+  return v + i + *p;\n+}\n+\n+void\n+fn2 ()\n+{\n+  volatile int vi = 42;\n+  int i = 24;\n+\n+  // Discarded-value expression ([expr.context]).\n+  // The lvalue-to-rvalue conversion is applied here:\n+  vi;\n+  // ...but not here.  Otherwise we'd write to VI and then immediately read it.\n+  vi = 42;\n+  vi = i;\n+  vi = i = 42;\n+  i = vi = 42;\n+  &(vi = i);\n+  (vi = 42, 45);\n+  (i = vi = 42, 10);\n+  i = vi; // LHS not volatile.\n+  i = (vi = i, 42);\n+  static_cast<void>(vi = i);\n+  static_cast<void>(i = vi = 42);\n+  (void)(vi = i);\n+  (void)(i = vi = 42);\n+\n+  // Unevaluated operand.\n+  decltype(vi = 42) x = vi;\n+  decltype(i = vi = 42) x3 = i;\n+\n+  // Compound assignments.\n+  vi += i;\n+  vi -= i;\n+  vi %= i;\n+  vi ^= i;\n+  vi |= i;\n+  vi /= i;\n+  vi = vi += 42;\n+  vi += vi = 42;\n+  i *= vi;\n+  decltype(vi -= 42) x2 = vi;\n+\n+  // Structured bindings.\n+  int a[] = { 10, 5 };\n+  const auto & [cxr, cyr] = a;\n+  const volatile auto & [cvxr, cvyr] = a;\n+  volatile auto & [vxr, vyr] = a;\n+}\n+\n+void\n+fn3 ()\n+{\n+  volatile int i, j, k = 0;\n+  i = j = k;\n+\n+  ACCESS_ONCE(j);\n+\n+  S s;\n+  s.b = 1;\n+\n+  volatile U u;\n+  u.c = 42;\n+  i = u.c = 42;\n+  u.c += 42;\n+\n+  volatile T t;\n+  t.a = 3;\n+  j = t.a = 3;\n+  t.a += 3;\n+\n+  volatile int *src = &i;\n+  *src; // No assignment, don't warn.\n+}\n+\n+void\n+fn4 ()\n+{\n+  volatile W vw;\n+  W w;\n+  // Assignment to objects of a class is defined by the copy/move assignment\n+  // operator.\n+  vw = w;\n+  w = vw;\n+}\n+\n+template<typename T>\n+void raccoon ()\n+{\n+  volatile T t, u;\n+  t = 42;\n+  u = t = 42;\n+  t &= 42;\n+}\n+\n+void\n+fn5 ()\n+{\n+  raccoon<int>();\n+}"}, {"sha": "f10a29756a9dbc286bdb8de1254d034784a6fe06", "filename": "gcc/testsuite/g++.dg/cpp2a/volatile3.C", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile3.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -0,0 +1,142 @@\n+// PR c++/91361 - P1152R4: Deprecating some uses of volatile.\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wvolatile\" }\n+\n+#define ACCESS_ONCE(x) (*(volatile __typeof(x) *)&(x))\n+\n+struct S {\n+  volatile int a : 4;\n+  int b : 2;\n+};\n+\n+struct T {\n+  int a : 4;\n+  int b : 2;\n+};\n+\n+union U {\n+  char c;\n+  int i;\n+};\n+\n+struct W {\n+  W();\n+  W(volatile W&);\n+  W& operator=(volatile W&) volatile;\n+};\n+\n+volatile int // { dg-warning \".volatile.-qualified return type is deprecated\" }\n+fn (volatile int i) // { dg-warning \".volatile.-qualified parameter is deprecated\" }\n+{\n+  volatile int v = 10;\n+  int *volatile p = nullptr;\n+\n+  // Pre/post ++/--.\n+  v++; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  ++v; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  v--; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  --v; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  p++; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  ++p; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  p--; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  --p; // { dg-warning \"expression of .volatile.-qualified type is deprecated\" }\n+  return v + i + *p;\n+}\n+\n+void\n+fn2 ()\n+{\n+  volatile int vi = 42;\n+  int i = 24;\n+\n+  // Discarded-value expression ([expr.context]).\n+  // The lvalue-to-rvalue conversion is applied here:\n+  vi;\n+  // ...but not here.  Otherwise we'd write to VI and then immediately read it.\n+  vi = 42;\n+  vi = i;\n+  vi = i = 42;\n+  i = vi = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  &(vi = i); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  (vi = 42, 45);\n+  (i = vi = 42, 10); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  i = vi; // LHS not volatile.\n+  i = (vi = i, 42);\n+  static_cast<void>(vi = i);\n+  static_cast<void>(i = vi = 42); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  (void)(vi = i);\n+  (void)(i = vi = 42); // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+\n+  // Unevaluated operand.\n+  decltype(vi = 42) x = vi;\n+  decltype(i = vi = 42) x3 = i;\n+\n+  // Compound assignments.\n+  vi += i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi -= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi %= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi ^= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi |= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi /= i; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi = vi += 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  vi += vi = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  i *= vi;\n+  decltype(vi -= 42) x2 = vi; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+\n+  // Structured bindings.\n+  int a[] = { 10, 5 };\n+  const auto & [cxr, cyr] = a;\n+  const volatile auto & [cvxr, cvyr] = a; // { dg-warning \".volatile.-qualified structured binding is deprecated\" }\n+  volatile auto & [vxr, vyr] = a; // { dg-warning \".volatile.-qualified structured binding is deprecated\" }\n+}\n+\n+void\n+fn3 ()\n+{\n+  volatile int i, j, k = 0;\n+  i = j = k; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+\n+  ACCESS_ONCE(j);\n+\n+  S s;\n+  s.b = 1;\n+\n+  volatile U u;\n+  u.c = 42;\n+  i = u.c = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  u.c += 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+\n+  volatile T t;\n+  t.a = 3;\n+  j = t.a = 3; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  t.a += 3; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+\n+  volatile int *src = &i;\n+  *src; // No assignment, don't warn.\n+}\n+\n+void\n+fn4 ()\n+{\n+  volatile W vw;\n+  W w;\n+  // Assignment to objects of a class is defined by the copy/move assignment\n+  // operator.\n+  vw = w;\n+  w = vw;\n+}\n+\n+template<typename T>\n+void raccoon ()\n+{\n+  volatile T t, u;\n+  t = 42;\n+  u = t = 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+  t &= 42; // { dg-warning \"assignment with .volatile.-qualified left operand is deprecated\" }\n+}\n+\n+void\n+fn5 ()\n+{\n+  raccoon<int>();\n+}"}, {"sha": "2148cdeb3d1564a28cae6f5f1057ac7ecf91390c", "filename": "gcc/testsuite/g++.dg/cpp2a/volatile4.C", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile4.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -0,0 +1,142 @@\n+// PR c++/91361 - P1152R4: Deprecating some uses of volatile.\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wno-deprecated\" }\n+\n+#define ACCESS_ONCE(x) (*(volatile __typeof(x) *)&(x))\n+\n+struct S {\n+  volatile int a : 4;\n+  int b : 2;\n+};\n+\n+struct T {\n+  int a : 4;\n+  int b : 2;\n+};\n+\n+union U {\n+  char c;\n+  int i;\n+};\n+\n+struct W {\n+  W();\n+  W(volatile W&);\n+  W& operator=(volatile W&) volatile;\n+};\n+\n+volatile int\n+fn (volatile int i)\n+{\n+  volatile int v = 10;\n+  int *volatile p = nullptr;\n+\n+  // Pre/post ++/--.\n+  v++;\n+  ++v;\n+  v--;\n+  --v;\n+  p++;\n+  ++p;\n+  p--;\n+  --p;\n+  return v + i + *p;\n+}\n+\n+void\n+fn2 ()\n+{\n+  volatile int vi = 42;\n+  int i = 24;\n+\n+  // Discarded-value expression ([expr.context]).\n+  // The lvalue-to-rvalue conversion is applied here:\n+  vi;\n+  // ...but not here.  Otherwise we'd write to VI and then immediately read it.\n+  vi = 42;\n+  vi = i;\n+  vi = i = 42;\n+  i = vi = 42;\n+  &(vi = i);\n+  (vi = 42, 45);\n+  (i = vi = 42, 10);\n+  i = vi; // LHS not volatile.\n+  i = (vi = i, 42);\n+  static_cast<void>(vi = i);\n+  static_cast<void>(i = vi = 42);\n+  (void)(vi = i);\n+  (void)(i = vi = 42);\n+\n+  // Unevaluated operand.\n+  decltype(vi = 42) x = vi;\n+  decltype(i = vi = 42) x3 = i;\n+\n+  // Compound assignments.\n+  vi += i;\n+  vi -= i;\n+  vi %= i;\n+  vi ^= i;\n+  vi |= i;\n+  vi /= i;\n+  vi = vi += 42;\n+  vi += vi = 42;\n+  i *= vi;\n+  decltype(vi -= 42) x2 = vi;\n+\n+  // Structured bindings.\n+  int a[] = { 10, 5 };\n+  const auto & [cxr, cyr] = a;\n+  const volatile auto & [cvxr, cvyr] = a;\n+  volatile auto & [vxr, vyr] = a;\n+}\n+\n+void\n+fn3 ()\n+{\n+  volatile int i, j, k = 0;\n+  i = j = k;\n+\n+  ACCESS_ONCE(j);\n+\n+  S s;\n+  s.b = 1;\n+\n+  volatile U u;\n+  u.c = 42;\n+  i = u.c = 42;\n+  u.c += 42;\n+\n+  volatile T t;\n+  t.a = 3;\n+  j = t.a = 3;\n+  t.a += 3;\n+\n+  volatile int *src = &i;\n+  *src; // No assignment, don't warn.\n+}\n+\n+void\n+fn4 ()\n+{\n+  volatile W vw;\n+  W w;\n+  // Assignment to objects of a class is defined by the copy/move assignment\n+  // operator.\n+  vw = w;\n+  w = vw;\n+}\n+\n+template<typename T>\n+void raccoon ()\n+{\n+  volatile T t, u;\n+  t = 42;\n+  u = t = 42;\n+  t &= 42;\n+}\n+\n+void\n+fn5 ()\n+{\n+  raccoon<int>();\n+}"}, {"sha": "f27399cfc8a9e6af15d1cd5b778d23ab18d4f1d2", "filename": "gcc/testsuite/g++.dg/expr/bool3.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -13,8 +13,10 @@ int main()\n \n   b++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n+  // { dg-warning \".volatile.-qualified type is deprecated\" \"\" { target c++2a } .-2 }\n   b++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n+  // { dg-warning \".volatile.-qualified type is deprecated\" \"\" { target c++2a } .-2 }\n   i = b;\n   if (i != 1)\n     abort ();"}, {"sha": "5891bc311bd24f1106f81f3d3cb723987d8672e5", "filename": "gcc/testsuite/g++.dg/expr/bool4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool4.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -8,6 +8,6 @@ int main()\n {\n   my_bool b = false;\n   b--; // { dg-error \"\" }\n+  // { dg-warning \".volatile.-qualified type is deprecated\" \"\" { target c++2a } .-1 }\n   return 0;\n }\n-"}, {"sha": "f7e092e1445bedc2add9627b83ccba2be79901c1", "filename": "gcc/testsuite/g++.dg/expr/cond9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond9.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -4,7 +4,7 @@ struct A { // { dg-message \"A\" }\n   A(int);\n };\n \n-void foo(volatile A a) { \n+void foo(volatile A a) {  // { dg-warning \"deprecated\" \"\" { target c++2a } }\n   1 ? a : 0; // { dg-error \"qualifiers|lvalue|no match\" }\n   1 ? 0 : a; // { dg-error \"qualifiers|lvalue|no match\" }\n } "}, {"sha": "339865d694295079151994389b46a13c21215e1b", "filename": "gcc/testsuite/g++.dg/ext/vector25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector25.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -2,5 +2,5 @@ volatile int i __attribute__((vector_size(8)));\n \n void foo()\n {\n-  i += i;\n+  i += i; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n }"}, {"sha": "d12670c5159498f10320db443d30043390f18777", "filename": "gcc/testsuite/g++.dg/gomp/depend-iterator-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepend-iterator-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepend-iterator-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepend-iterator-1.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,3 +1,5 @@\n+// { dg-additional-options \"-Wno-volatile\" }\n+\n int arr[64], arr2[64];\n struct S { int a[4]; } k;\n short arr4[4];"}, {"sha": "769cb14ecbcc0a6c774585b63806ee56bc566d52", "filename": "gcc/testsuite/g++.dg/inherit/covariant21.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant21.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -6,12 +6,12 @@ struct C : A, B {};\n \n struct X\n {\n-  virtual B* foo(volatile int);\n+  virtual B* foo(volatile int); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n };\n \n struct Y : X\n {\n-  virtual C* foo(volatile int);\n+  virtual C* foo(volatile int); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n };\n \n-C* Y::foo(volatile int) { return 0; }\n+C* Y::foo(volatile int) { return 0; } // { dg-warning \"deprecated\" \"\" { target c++2a } }"}, {"sha": "81ac76a40d312e2432b91375398afa9b75f913f5", "filename": "gcc/testsuite/g++.dg/init/ref18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref18.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -1,6 +1,6 @@\n // PR c++/49395\n \n-volatile int foo();\n+volatile int foo(); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n struct A { volatile int i; };\n typedef volatile int vi;\n "}, {"sha": "5b6b11d70e5abf825c446e601d313576e7ed35c8", "filename": "gcc/testsuite/g++.dg/ipa/pr63838.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -7,20 +7,20 @@\n __attribute__((noinline, noclone)) static void bar (int);\n volatile int v;\n void (*fn) ();\n-struct S { S () { v++; } ~S () { v++; } };\n+struct S { S () { v++; } ~S () { v++; } }; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n \n __attribute__((noinline, noclone)) static void\n foo (int x)\n {\n-  v++;\n+  v++; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n   if (x == 5)\n     bar (x);\n }\n \n __attribute__((noinline, noclone)) static void\n bar (int x)\n {\n-  v++;\n+  v++; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n   if (x == 6)\n     foo (x);\n   else if (x == 5)"}, {"sha": "a829fb5e8ccd0891c02bbb6183cdbe5ea1b7d407", "filename": "gcc/testsuite/g++.dg/overload/rvalue2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Frvalue2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Frvalue2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Frvalue2.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -7,5 +7,5 @@ template <class T> void f(const T&);\n int main()\n {\n   volatile int i = 0;\n-  f(i++);\n+  f(i++); // { dg-warning \"deprecated\" \"\" { target c++2a } }\n }"}, {"sha": "bdd1c8451871a19e46255cce4ca3ae6691687b48", "filename": "gcc/testsuite/g++.dg/parse/semicolon4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -25,7 +25,7 @@ struct E1\n } const;\t\t\t// { dg-error \"'const' can only be specified for objects and functions\" }\n \n void foo (\n-struct E2\n+struct E2\t\t\t// { dg-warning \"deprecated\" \"\" { target c++2a } }\n {\t\t\t\t// { dg-error \"types may not be defined in parameter types\" }\n   int i;\n } volatile);"}, {"sha": "24a6b41cbd8cb122b8cc0957e5736e3e74c8f6dc", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-type-4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-4.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -3,6 +3,7 @@\n /* { dg-options \"-Wignored-qualifiers\" } */\n \n volatile void bar(); /* { dg-warning \"type qualifiers ignored\" } */\n+// { dg-warning \".volatile.-qualified return type is deprecated\" \"\" { target c++2a } .-1 }\n \n struct A\n {"}, {"sha": "7b166351a4b5c2c814af5914baa0909c0aec75c1", "filename": "gcc/testsuite/g++.dg/warn/pr36069.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr36069.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr36069.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr36069.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -6,11 +6,13 @@ struct foo {\n   bool a;\n   volatile bool b,c;  \n   foo() { a = b = c = false; } // { dg-bogus \"parentheses\" }\n+  // { dg-warning \"deprecated\" \"\" { target c++2a } .-1 }\n };\n \n int main() {\n   bool a;\n   volatile bool b,c;\n   a = b = c = false; // { dg-bogus \"parentheses\" }\n+  // { dg-warning \"deprecated\" \"\" { target c++2a } .-1 }\n   foo A;\n }"}, {"sha": "97594640f9686577485f87ec6fc299d307df0693", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p9506.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp9506.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp9506.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp9506.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -3,5 +3,5 @@\n \n char * volatile p;\n void foo() {\n-  --p = 0;\n+  --p = 0; // { dg-warning \"deprecated\" \"\" { target c++2a } }\n }"}, {"sha": "a93ef58aa9ff55f1eb9c378a2499c589a32adcc3", "filename": "gcc/testsuite/g++.old-deja/g++.other/volatile1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a902edbbdb53a00209e88b6182457941ff196a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C?ref=8a902edbbdb53a00209e88b6182457941ff196a9", "patch": "@@ -5,7 +5,7 @@\n class f_class\t\t       // { dg-message \"note\" \"candidates\" }\n { };\n \n-volatile f_class\n+volatile f_class\t      // { dg-warning \"deprecated\" \"\" { target c++2a } }\n ret_v_f_class()\n {\n   f_class t;"}]}