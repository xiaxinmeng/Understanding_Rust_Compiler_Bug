{"sha": "b685dbaebcd1ac317b3095f251d6a55ad055fd27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY4NWRiYWViY2QxYWMzMTdiMzA5NWYyNTFkNmE1NWFkMDU1ZmQyNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-03T15:50:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-03T15:50:25Z"}, "message": "(find_reloads): If replaced a PLUS or MULT with a simple operand,\n\nstart over again.\n\nFrom-SVN: r13360", "tree": {"sha": "fd09ee1b46c14ec6279c39002bce10d336464385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd09ee1b46c14ec6279c39002bce10d336464385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b685dbaebcd1ac317b3095f251d6a55ad055fd27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b685dbaebcd1ac317b3095f251d6a55ad055fd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b685dbaebcd1ac317b3095f251d6a55ad055fd27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b685dbaebcd1ac317b3095f251d6a55ad055fd27/comments", "author": null, "committer": null, "parents": [{"sha": "161cca9adcb7e801eb24b0b0a2cc5014b492a174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161cca9adcb7e801eb24b0b0a2cc5014b492a174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161cca9adcb7e801eb24b0b0a2cc5014b492a174"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "f1674f705c0f8edb47887ff2eb8117760373c3fd", "filename": "gcc/reload.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685dbaebcd1ac317b3095f251d6a55ad055fd27/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685dbaebcd1ac317b3095f251d6a55ad055fd27/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=b685dbaebcd1ac317b3095f251d6a55ad055fd27", "patch": "@@ -1,5 +1,5 @@\n /* Search an insn for pseudo regs that must be in hard regs and are not.\n-   Copyright (C) 1987, 88, 89, 92-5, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-6, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2518,6 +2518,20 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t  find_reloads_address (VOIDmode, NULL_PTR,\n \t\t\t\trecog_operand[i], recog_operand_loc[i],\n \t\t\t\ti, operand_type[i], ind_levels);\n+\n+\t  /* If we now have a simple operand where we used to have a \n+\t     PLUS or MULT, re-recognize and try again.  */\n+\t  if ((GET_RTX_CLASS (GET_CODE (*recog_operand_loc[i])) == 'o'\n+\t       || GET_CODE (*recog_operand_loc[i]) == SUBREG)\n+\t      && (GET_CODE (recog_operand[i]) == MULT\n+\t\t  || GET_CODE (recog_operand[i]) == PLUS))\n+\t    {\n+\t      INSN_CODE (insn) = -1;\n+\t      find_reloads (insn, replace, ind_levels, live_known,\n+\t\t\t    reload_reg_p);\n+\t      return;\n+\t    }\n+\n \t  substed_operand[i] = recog_operand[i] = *recog_operand_loc[i];\n \t}\n       else if (code == MEM)"}]}