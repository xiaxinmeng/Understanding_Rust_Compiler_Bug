{"sha": "03873eb98330b17e73ada713f31bcbcd50d74026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4NzNlYjk4MzMwYjE3ZTczYWRhNzEzZjMxYmNiY2Q1MGQ3NDAyNg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T19:24:35Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T19:24:35Z"}, "message": "[AArch64] Add vcvt(_high)?_f32_f16 intrinsics, with BE RTL fix\n\ngcc/:\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_unpacks_lo_<mode>,\n\taarch64_simd_vec_unpacks_hi_<mode>): New insn.\n\t(vec_unpacks_lo_v4sf, vec_unpacks_hi_v4sf): Delete insn.\n\t(vec_unpacks_lo_<mode>, vec_unpacks_hi_<mode>): New expand.\n\t(aarch64_float_extend_lo_v2df): Rename to...\n\t(aarch64_float_extend_lo_<Vwide>): this, using VDF and so adding V4SF.\n\n\t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi): Add v8hf.\n\t(float_extend_lo): Add v4sf.\n\n\t* config/aarch64/arm_neon.h (vcvt_f32_f16, vcvt_high_f32_f16): New.\n\t* config/aarch64/iterators.md (VQ_HSF): New iterator.\n\t(VWIDE, Vwtype, Vhalftype): Add V8HF, V4SF.\n\t(Vwide): New mode_attr.\n\nFrom-SVN: r227551", "tree": {"sha": "d98f7ca7a0157c1fa28bdf8b91d634d68db2be05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d98f7ca7a0157c1fa28bdf8b91d634d68db2be05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03873eb98330b17e73ada713f31bcbcd50d74026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03873eb98330b17e73ada713f31bcbcd50d74026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03873eb98330b17e73ada713f31bcbcd50d74026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03873eb98330b17e73ada713f31bcbcd50d74026/comments", "author": null, "committer": null, "parents": [{"sha": "862abc04beb0874f2e4352c44f28849a52c5c434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862abc04beb0874f2e4352c44f28849a52c5c434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862abc04beb0874f2e4352c44f28849a52c5c434"}], "stats": {"total": 117, "additions": 86, "deletions": 31}, "files": [{"sha": "127829c2baa7f2467a3f5534f2157a3b15c2e5d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03873eb98330b17e73ada713f31bcbcd50d74026", "patch": "@@ -1,3 +1,20 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_unpacks_lo_<mode>,\n+\taarch64_simd_vec_unpacks_hi_<mode>): New insn.\n+\t(vec_unpacks_lo_v4sf, vec_unpacks_hi_v4sf): Delete insn.\n+\t(vec_unpacks_lo_<mode>, vec_unpacks_hi_<mode>): New expand.\n+\t(aarch64_float_extend_lo_v2df): Rename to...\n+\t(aarch64_float_extend_lo_<Vwide>): this, using VDF and so adding V4SF.\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi): Add v8hf.\n+\t(float_extend_lo): Add v4sf.\n+\n+\t* config/aarch64/arm_neon.h (vcvt_f32_f16, vcvt_high_f32_f16): New.\n+\t* config/aarch64/iterators.md (VQ_HSF): New iterator.\n+\t(VWIDE, Vwtype, Vhalftype): Add V8HF, V4SF.\n+\t(Vwide): New mode_attr.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>,"}, {"sha": "2c13cfb0823640254f02c202b19ddae78484d537", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=03873eb98330b17e73ada713f31bcbcd50d74026", "patch": "@@ -361,11 +361,12 @@\n   BUILTIN_VSDQ_I_DI (UNOP, abs, 0)\n   BUILTIN_VDQF (UNOP, abs, 2)\n \n-  VAR1 (UNOP, vec_unpacks_hi_, 10, v4sf)\n+  BUILTIN_VQ_HSF (UNOP, vec_unpacks_hi_, 10)\n   VAR1 (BINOP, float_truncate_hi_, 0, v4sf)\n   VAR1 (BINOP, float_truncate_hi_, 0, v8hf)\n \n   VAR1 (UNOP, float_extend_lo_, 0, v2df)\n+  VAR1 (UNOP, float_extend_lo_,  0, v4sf)\n   BUILTIN_VDF (UNOP, float_truncate_lo_, 0)\n \n   /* Implemented by aarch64_ld1<VALL_F16:mode>.  */"}, {"sha": "a4eaecae2a04e9a58dc867af27aa3d9949a81174", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=03873eb98330b17e73ada713f31bcbcd50d74026", "patch": "@@ -1692,36 +1692,57 @@\n \n ;; Float widening operations.\n \n-(define_insn \"vec_unpacks_lo_v4sf\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-\t(float_extend:V2DF\n-\t  (vec_select:V2SF\n-\t    (match_operand:V4SF 1 \"register_operand\" \"w\")\n-\t    (parallel [(const_int 0) (const_int 1)])\n-\t  )))]\n+(define_insn \"aarch64_simd_vec_unpacks_lo_<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (float_extend:<VWIDE> (vec_select:<VHALF>\n+\t\t\t       (match_operand:VQ_HSF 1 \"register_operand\" \"w\")\n+\t\t\t       (match_operand:VQ_HSF 2 \"vect_par_cnst_lo_half\" \"\")\n+\t\t\t    )))]\n   \"TARGET_SIMD\"\n-  \"fcvtl\\\\t%0.2d, %1.2s\"\n+  \"fcvtl\\\\t%0.<Vwtype>, %1.<Vhalftype>\"\n   [(set_attr \"type\" \"neon_fp_cvt_widen_s\")]\n )\n \n-(define_insn \"aarch64_float_extend_lo_v2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-\t(float_extend:V2DF\n-\t  (match_operand:V2SF 1 \"register_operand\" \"w\")))]\n+(define_expand \"vec_unpacks_lo_<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+   (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n   \"TARGET_SIMD\"\n-  \"fcvtl\\\\t%0.2d, %1.2s\"\n+  {\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    emit_insn (gen_aarch64_simd_vec_unpacks_lo_<mode> (operands[0],\n+\t\t\t\t\t\t       operands[1], p));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_simd_vec_unpacks_hi_<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (float_extend:<VWIDE> (vec_select:<VHALF>\n+\t\t\t       (match_operand:VQ_HSF 1 \"register_operand\" \"w\")\n+\t\t\t       (match_operand:VQ_HSF 2 \"vect_par_cnst_hi_half\" \"\")\n+\t\t\t    )))]\n+  \"TARGET_SIMD\"\n+  \"fcvtl2\\\\t%0.<Vwtype>, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_fp_cvt_widen_s\")]\n )\n \n-(define_insn \"vec_unpacks_hi_v4sf\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-\t(float_extend:V2DF\n-\t  (vec_select:V2SF\n-\t    (match_operand:V4SF 1 \"register_operand\" \"w\")\n-\t    (parallel [(const_int 2) (const_int 3)])\n-\t  )))]\n+(define_expand \"vec_unpacks_hi_<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+   (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+    emit_insn (gen_aarch64_simd_vec_unpacks_lo_<mode> (operands[0],\n+\t\t\t\t\t\t       operands[1], p));\n+    DONE;\n+  }\n+)\n+(define_insn \"aarch64_float_extend_lo_<Vwide>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(float_extend:<VWIDE>\n+\t  (match_operand:VDF 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"fcvtl2\\\\t%0.2d, %1.4s\"\n+  \"fcvtl\\\\t%0<Vmwtype>, %1<Vmtype>\"\n   [(set_attr \"type\" \"neon_fp_cvt_widen_s\")]\n )\n "}, {"sha": "91ada618b79e038eb61e09ecd29af5129de81f51", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=03873eb98330b17e73ada713f31bcbcd50d74026", "patch": "@@ -6025,10 +6025,6 @@ vaddlvq_u32 (uint32x4_t a)\n        result;                                                          \\\n      })\n \n-/* vcvt_f32_f16 not supported */\n-\n-/* vcvt_high_f32_f16 not supported */\n-\n #define vcvt_n_f32_s32(a, b)                                            \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -13436,13 +13432,25 @@ vcvt_high_f32_f64 (float32x2_t __a, float64x2_t __b)\n \n /* vcvt (float -> double).  */\n \n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vcvt_f32_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_float_extend_lo_v4sf (__a);\n+}\n+\n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vcvt_f64_f32 (float32x2_t __a)\n {\n \n   return __builtin_aarch64_float_extend_lo_v2df (__a);\n }\n \n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vcvt_high_f32_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_vec_unpacks_hi_v8hf (__a);\n+}\n+\n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vcvt_high_f64_f32 (float32x4_t __a)\n {"}, {"sha": "2bd64c897cffee9e99958ffce8f94f57e35f03b8", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03873eb98330b17e73ada713f31bcbcd50d74026/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=03873eb98330b17e73ada713f31bcbcd50d74026", "patch": "@@ -94,6 +94,9 @@\n ;; Vector single Float modes.\n (define_mode_iterator VDQSF [V2SF V4SF])\n \n+;; Quad vector Float modes with half/single elements.\n+(define_mode_iterator VQ_HSF [V8HF V4SF])\n+\n ;; Modes suitable to use as the return type of a vcond expression.\n (define_mode_iterator VDQF_COND [V2SF V2SI V4SF V4SI V2DF V2DI])\n \n@@ -492,14 +495,18 @@\n \t\t\t (V2SI \"V2DI\") (V16QI \"V8HI\") \n \t\t\t (V8HI \"V4SI\") (V4SI \"V2DI\")\n \t\t\t (HI \"SI\")     (SI \"DI\")\n+\t\t\t (V8HF \"V4SF\") (V4SF \"V2DF\")\n \t\t\t (V4HF \"V4SF\") (V2SF \"V2DF\")]\n-\n )\n \n-;; Widened mode register suffixes for VD_BHSI/VQW.\n+;; Widened modes of vector modes, lowercase\n+(define_mode_attr Vwide [(V2SF \"v2df\") (V4HF \"v4sf\")])\n+\n+;; Widened mode register suffixes for VD_BHSI/VQW/VQ_HSF.\n (define_mode_attr Vwtype [(V8QI \"8h\") (V4HI \"4s\")\n \t\t\t  (V2SI \"2d\") (V16QI \"8h\") \n-\t\t\t  (V8HI \"4s\") (V4SI \"2d\")])\n+\t\t\t  (V8HI \"4s\") (V4SI \"2d\")\n+\t\t\t  (V8HF \"4s\") (V4SF \"2d\")])\n \n ;; Widened mode register suffixes for VDW/VQW.\n (define_mode_attr Vmwtype [(V8QI \".8h\") (V4HI \".4s\")\n@@ -508,9 +515,10 @@\n \t\t\t   (V4HF \".4s\") (V2SF \".2d\")\n \t\t\t   (SI   \"\")    (HI   \"\")])\n \n-;; Lower part register suffixes for VQW.\n+;; Lower part register suffixes for VQW/VQ_HSF.\n (define_mode_attr Vhalftype [(V16QI \"8b\") (V8HI \"4h\")\n-\t\t\t     (V4SI \"2s\")])\n+\t\t\t     (V4SI \"2s\") (V8HF \"4h\")\n+\t\t\t     (V4SF \"2s\")])\n \n ;; Define corresponding core/FP element mode for each vector mode.\n (define_mode_attr vw   [(V8QI \"w\") (V16QI \"w\")"}]}