{"sha": "db3d8cded1c77bed802062a6cea77f47055206af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzZDhjZGVkMWM3N2JlZDgwMjA2MmE2Y2VhNzdmNDcwNTUyMDZhZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-06-14T16:10:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-14T16:10:14Z"}, "message": "cp-tree.h (BINFO_OVERRIDE_ALONG_VIRTUAL_PATH): New macro.\n\n\t* cp-tree.h (BINFO_OVERRIDE_ALONG_VIRTUAL_PATH): New macro.\n\t* class.c (dfs_find_final_overrider): Set it appropriately.\n\t(dfs_built_vtt_inits): Check BINFO_OVERRIDE_ALONG_VIRTUAL_PATH to\n\tavoid unneeded secondary vptrs.\n\nFrom-SVN: r34549", "tree": {"sha": "e6cfdc2deec6747ae993b71bf734b3140debe6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6cfdc2deec6747ae993b71bf734b3140debe6c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3d8cded1c77bed802062a6cea77f47055206af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3d8cded1c77bed802062a6cea77f47055206af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3d8cded1c77bed802062a6cea77f47055206af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3d8cded1c77bed802062a6cea77f47055206af/comments", "author": null, "committer": null, "parents": [{"sha": "33261b0a223af58f76d07f7e4b082fa77bdc2082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33261b0a223af58f76d07f7e4b082fa77bdc2082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33261b0a223af58f76d07f7e4b082fa77bdc2082"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "1cf4879cf0f56e692d6c9f1ebf2ac206502b246a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3d8cded1c77bed802062a6cea77f47055206af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3d8cded1c77bed802062a6cea77f47055206af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db3d8cded1c77bed802062a6cea77f47055206af", "patch": "@@ -1,3 +1,10 @@\n+2000-06-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (BINFO_OVERRIDE_ALONG_VIRTUAL_PATH): New macro.\n+\t* class.c (dfs_find_final_overrider): Set it appropriately.\n+\t(dfs_built_vtt_inits): Check BINFO_OVERRIDE_ALONG_VIRTUAL_PATH to\n+\tavoid unneeded secondary vptrs.\n+\n 2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* class.c (build_secondary_vtable): Set DECL_USER_ALIGN."}, {"sha": "33f12b56b54cc6469d23673d8b84a7c4a52a836f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3d8cded1c77bed802062a6cea77f47055206af/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3d8cded1c77bed802062a6cea77f47055206af/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=db3d8cded1c77bed802062a6cea77f47055206af", "patch": "@@ -2453,9 +2453,11 @@ dfs_find_final_overrider (binfo, data)\n       tree path;\n       tree method;\n \n+      /* We haven't found an overrider yet.  */\n+      method = NULL_TREE;\n       /* We've found a path to the declaring base.  Walk down the path\n \t looking for an overrider for FN.  */\n-      for (path = reverse_path (binfo); \n+      for (path = reverse_path (binfo);\n \t   path; \n \t   path = TREE_CHAIN (path))\n \t{\n@@ -2474,6 +2476,24 @@ dfs_find_final_overrider (binfo, data)\n \t the base from which it came.  */\n       if (path)\n \t{\n+\t  tree base;\n+\n+\t  /* Assume the path is non-virtual.  See if there are any base from\n+\t     (but not including) the overrider up to and including the\n+\t     base where the function is defined. */\n+\t  for (base = TREE_CHAIN (path); base; base = TREE_CHAIN (base))\n+\t    if (TREE_VIA_VIRTUAL (TREE_VALUE (base)))\n+\t      {\n+\t\tbase = ffod->declaring_base;\n+\t\twhile (BINFO_PRIMARY_MARKED_P (base))\n+\t\t  {\n+\t\t    BINFO_OVERRIDE_ALONG_VIRTUAL_PATH_P (base) = 1;\n+\t\t    base = BINFO_INHERITANCE_CHAIN (base);\n+\t\t  }\n+\t\tBINFO_OVERRIDE_ALONG_VIRTUAL_PATH_P (base) = 1;\n+\t\tbreak;\n+\t      }\n+\n \t  if (ffod->overriding_fn && ffod->overriding_fn != method)\n \t    {\n \t      /* We've found a different overrider along a different\n@@ -6729,10 +6749,19 @@ dfs_build_vtt_inits (binfo, data)\n \n   /* If BINFO doesn't have virtual bases, then we have to look to see\n      whether or not any virtual functions were overidden along a\n-     virtual path between the declaration and T.  */\n-  if (!TYPE_USES_VIRTUAL_BASECLASSES (BINFO_TYPE (binfo)))\n-    /* FIXME: Implement this.  */\n-    ;\n+     virtual path.  The point is that given:\n+\n+       struct V { virtual void f(); int i; };\n+       struct C : public V { void f (); };\n+\n+     when we constrct C we need a secondary vptr for V-in-C because we\n+     don't know what the vcall offset for `f' should be.  If `V' ends\n+     up in a different place in the complete object, then we'll need a\n+     different vcall offset than that present in the normal V-in-C\n+     vtable.  */\n+  if (!TYPE_USES_VIRTUAL_BASECLASSES (BINFO_TYPE (binfo))\n+      && !BINFO_OVERRIDE_ALONG_VIRTUAL_PATH_P (binfo))\n+    return NULL_TREE;\n \n   /* Record the index where this secondary vptr can be found.  */\n   index = TREE_TYPE (l);"}, {"sha": "9418b2aa7df3f5127af1c78b82c66d1a5b278957", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3d8cded1c77bed802062a6cea77f47055206af/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3d8cded1c77bed802062a6cea77f47055206af/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=db3d8cded1c77bed802062a6cea77f47055206af", "patch": "@@ -55,11 +55,13 @@ Boston, MA 02111-1307, USA.  */\n       BASELINK_P (in TREE_LIST)\n       ICS_ELLIPSIS_FLAG (in _CONV)\n       STMT_IS_FULL_EXPR_P (in _STMT)\n+      BINFO_ACCESS (in BINFO)\n    2: IDENTIFIER_OPNAME_P.\n       TYPE_POLYMORHPIC_P (in _TYPE)\n       ICS_THIS_FLAG (in _CONV)\n       STMT_LINENO_FOR_FN_P (in _STMT)\n       BINDING_HAS_LEVEL_P (in CPLUS_BINDING)\n+      BINFO_OVERRIDE_ALONG_VIRTUAL_PATH_P (in BINFO)\n    3: TYPE_USES_VIRTUAL_BASECLASSES (in a class TYPE).\n       BINFO_VTABLE_PATH_MARKED.\n       BINFO_PUSHDECLS_MARKED.\n@@ -76,6 +78,7 @@ Boston, MA 02111-1307, USA.  */\n       IDENTIFIER_TYPENAME_P (in IDENTIFIER_NODE)\n    5: BINFO_PRIMARY_MARKED_P (in BINFO)\n    6: BINFO_VBASE_PRIMARY_P (in BINFO)\n+      BINFO_ACCESS (in BINFO)\n \n    Usage of TYPE_LANG_FLAG_?:\n    0: C_TYPE_FIELDS_READONLY (in RECORD_TYPE or UNION_TYPE).\n@@ -1784,6 +1787,10 @@ struct lang_type\n    found.  NULL_TREE if there is no secondary vptr in the VTT.  */\n #define BINFO_VPTR_INDEX(NODE) TREE_VEC_ELT ((NODE), 9)\n \n+/* Nonzero if this binfo declares a virtual function which is\n+   overridden along a virtual path.  */\n+#define BINFO_OVERRIDE_ALONG_VIRTUAL_PATH_P(NODE) TREE_LANG_FLAG_2 (NODE)\n+\n /* Used by various search routines.  */\n #define IDENTIFIER_MARKED(NODE) TREE_LANG_FLAG_0 (NODE)\n \f"}]}