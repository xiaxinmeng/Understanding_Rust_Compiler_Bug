{"sha": "d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg0MGJmZDM0NWEwOGUwMTAyYWNlNjQyMmRjZmQ5NWVmNGYzYmZmYQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2004-10-05T07:15:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-10-05T07:15:03Z"}, "message": "invoke.texi (-mpaired-single): Link to the new description of the built-in functions.\n\n\t* doc/invoke.texi (-mpaired-single): Link to the new description of the\n\tbuilt-in functions.  Document dependencies.\n\t(-mips3d): Add link here too.\n\t* doc/extend.texi (MIPS Paired-Single Support): New section.\n\nCo-Authored-By: Richard Sandiford <rsandifo@redhat.com>\n\nFrom-SVN: r88547", "tree": {"sha": "66216265301fcde00eb23c8fbcd962944baa3b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66216265301fcde00eb23c8fbcd962944baa3b79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/comments", "author": null, "committer": null, "parents": [{"sha": "0e98ac6223832590234fdea04397db1ceb19fb31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e98ac6223832590234fdea04397db1ceb19fb31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e98ac6223832590234fdea04397db1ceb19fb31"}], "stats": {"total": 333, "additions": 330, "deletions": 3}, "files": [{"sha": "0c6c928307fd52e2d4d659f028a4d2a59c06e4d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "patch": "@@ -1,3 +1,11 @@\n+2004-10-05  Chao-Ying Fu  <fu@mips.com>\n+\t    Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/invoke.texi (-mpaired-single): Link to the new description of the\n+\tbuilt-in functions.  Document dependencies.\n+\t(-mips3d): Add link here too.\n+\t* doc/extend.texi (MIPS Paired-Single Support): New section.\n+\n 2004-10-04  Chao-ying Fu  <fu@mips.com>\n \n \t* config/mips/mips.h (UNITS_PER_SIMD_WORD): Define."}, {"sha": "417736695c5bd90db8550bf53f70ed1b6de64c36", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "patch": "@@ -5316,6 +5316,7 @@ instructions, but allow the compiler to schedule those calls.\n * ARM Built-in Functions::\n * FR-V Built-in Functions::\n * X86 Built-in Functions::\n+* MIPS Paired-Single Support::\n * PowerPC AltiVec Built-in Functions::\n @end menu\n \n@@ -6199,6 +6200,321 @@ v2sf __builtin_ia32_pswapdsf (v2sf)\n v2si __builtin_ia32_pswapdsi (v2si)\n @end smallexample\n \n+@node MIPS Paired-Single Support\n+@subsection MIPS Paired-Single Support\n+\n+The MIPS64 architecture includes a number of instructions that\n+operate on pairs of single-precision floating-point values.\n+Each pair is packed into a 64-bit floating-point register,\n+with one element being designated the ``upper half'' and\n+the other being designated the ``lower half''.\n+\n+GCC supports paired-single operations using both the generic\n+vector extensions (@pxref{Vector Extensions}) and a collection of\n+MIPS-specific built-in functions.  Both kinds of support are\n+enabled by the @option{-mpaired-single} command-line option.\n+\n+The vector type associated with paired-single values is usually\n+called @code{v2sf}.  It can be defined in C as follows:\n+\n+@smallexample\n+typedef float v2sf __attribute__ ((vector_size (8)));\n+@end smallexample\n+\n+@code{v2sf} values are initialized in the same way as aggregates.\n+For example:\n+\n+@smallexample\n+v2sf a = @{1.5, 9.1@};\n+v2sf b;\n+float e, f;\n+b = (v2sf) @{e, f@};\n+@end smallexample\n+\n+@emph{Note:} The CPU's endianness determines which value is stored in\n+the upper half of a register and which value is stored in the lower half.\n+On little-endian targets, the first value is the lower one and the second\n+value is the upper one.  The opposite order applies to big-endian targets.\n+For example, the code above will set the lower half of @code{a} to\n+@code{1.5} on little-endian targets and @code{9.1} on big-endian targets.\n+\n+@menu\n+* Paired-Single Arithmetic::\n+* Paired-Single Built-in Functions::\n+* MIPS-3D Built-in Functions::\n+@end menu\n+\n+@node Paired-Single Arithmetic\n+@subsubsection Paired-Single Arithmetic\n+\n+The table below lists the @code{v2sf} operations for which hardware\n+support exists.  @code{a}, @code{b} and @code{c} are @code{v2sf}\n+values and @code{x} is an integral value.\n+\n+@multitable @columnfractions .50 .50\n+@item C code @tab MIPS instruction\n+@item @code{a + b} @tab @code{add.ps}\n+@item @code{a - b} @tab @code{sub.ps}\n+@item @code{-a} @tab @code{neg.ps}\n+@item @code{a * b} @tab @code{mul.ps}\n+@item @code{a * b + c} @tab @code{madd.ps}\n+@item @code{a * b - c} @tab @code{msub.ps}\n+@item @code{-(a * b + c)} @tab @code{nmadd.ps}\n+@item @code{-(a * b - c)} @tab @code{nmsub.ps}\n+@item @code{x ? a : b} @tab @code{movn.ps}/@code{movz.ps}\n+@end multitable\n+\n+Note that the multiply-accumulate instructions can be disabled\n+using the command-line option @code{-mno-fused-madd}.\n+\n+@node Paired-Single Built-in Functions\n+@subsubsection Paired-Single Built-in Functions\n+\n+The following paired-single functions map directly to a particular\n+MIPS instruction.  Please refer to the architecture specification\n+for details on what each instruction does.\n+\n+@table @code\n+@item v2sf __builtin_mips_pll_ps (v2sf, v2sf)\n+Pair lower lower (@code{pll.ps}).\n+\n+@item v2sf __builtin_mips_pul_ps (v2sf, v2sf)\n+Pair upper lower (@code{pul.ps}).\n+\n+@item v2sf __builtin_mips_plu_ps (v2sf, v2sf)\n+Pair lower upper (@code{plu.ps}).\n+\n+@item v2sf __builtin_mips_puu_ps (v2sf, v2sf)\n+Pair upper upper (@code{puu.ps}).\n+\n+@item v2sf __builtin_mips_cvt_ps_s (float, float)\n+Convert pair to paired single (@code{cvt.ps.s}).\n+\n+@item float __builtin_mips_cvt_s_pl (v2sf)\n+Convert pair lower to single (@code{cvt.s.pl}).\n+\n+@item float __builtin_mips_cvt_s_pu (v2sf)\n+Convert pair upper to single (@code{cvt.s.pu}).\n+\n+@item v2sf __builtin_mips_abs_ps (v2sf)\n+Absolute value (@code{abs.ps}).\n+\n+@item v2sf __builtin_mips_alnv_ps (v2sf, v2sf, int)\n+Align variable (@code{alnv.ps}).\n+\n+@emph{Note:} The value of the third parameter must be 0 or 4\n+modulo 8, otherwise the result will be unpredictable.  Please read the\n+instruction description for details.\n+@end table\n+\n+The following multi-instruction functions are also available.\n+In each case, @var{cond} can be any of the 16 floating-point conditions:\n+@code{f}, @code{un}, @code{eq}, @code{ueq}, @code{olt}, @code{ult},\n+@code{ole}, @code{ule}, @code{sf}, @code{ngle}, @code{seq}, @code{ngl},\n+@code{lt}, @code{nge}, @code{le} or @code{ngt}.\n+\n+@table @code\n+@item v2sf __builtin_mips_movt_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+@itemx v2sf __builtin_mips_movf_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+Conditional move based on floating point comparison (@code{c.@var{cond}.ps},\n+@code{movt.ps}/@code{movf.ps}).\n+\n+The @code{movt} functions return the value @var{x} computed by:\n+\n+@smallexample\n+c.@var{cond}.ps @var{cc},@var{a},@var{b}\n+mov.ps @var{x},@var{c}\n+movt.ps @var{x},@var{d},@var{cc}\n+@end smallexample\n+\n+The @code{movf} functions are similar but use @code{movf.ps} instead\n+of @code{movt.ps}.\n+\n+@item int __builtin_mips_upper_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+@itemx int __builtin_mips_lower_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+Comparison of two paired-single values (@code{c.@var{cond}.ps},\n+@code{bc1t}/@code{bc1f}).\n+\n+These functions compare @var{a} and @var{b} using @code{c.@var{cond}.ps}\n+and return either the upper or lower half of the result.  For example:\n+\n+@smallexample\n+v2sf a, b;\n+if (__builtin_mips_upper_c_eq_ps (a, b))\n+  upper_halves_are_equal ();\n+else\n+  upper_halves_are_unequal ();\n+\n+if (__builtin_mips_lower_c_eq_ps (a, b))\n+  lower_halves_are_equal ();\n+else\n+  lower_halves_are_unequal ();\n+@end smallexample\n+@end table\n+\n+@node MIPS-3D Built-in Functions\n+@subsubsection MIPS-3D Built-in Functions\n+\n+The MIPS-3D Application-Specific Extension (ASE) includes additional\n+paired-single instructions that are designed to improve the performance\n+of 3D graphics operations.  Support for these instructions is controlled\n+by the @option{-mips3d} command-line option.\n+\n+The functions listed below map directly to a particular MIPS-3D\n+instruction.  Please refer to the architecture specification for\n+more details on what each instruction does.\n+\n+@table @code\n+@item v2sf __builtin_mips_addr_ps (v2sf, v2sf)\n+Reduction add (@code{addr.ps}).\n+\n+@item v2sf __builtin_mips_mulr_ps (v2sf, v2sf)\n+Reduction multiply (@code{mulr.ps}).\n+\n+@item v2sf __builtin_mips_cvt_pw_ps (v2sf)\n+Convert paired single to paired word (@code{cvt.pw.ps}).\n+\n+@item v2sf __builtin_mips_cvt_ps_pw (v2sf)\n+Convert paired word to paired single (@code{cvt.ps.pw}).\n+\n+@item float __builtin_mips_recip1_s (float)\n+@itemx double __builtin_mips_recip1_d (double)\n+@itemx v2sf __builtin_mips_recip1_ps (v2sf)\n+Reduced precision reciprocal (sequence step 1) (@code{recip1.@var{fmt}}).\n+\n+@item float __builtin_mips_recip2_s (float, float)\n+@itemx double __builtin_mips_recip2_d (double, double)\n+@itemx v2sf __builtin_mips_recip2_ps (v2sf, v2sf)\n+Reduced precision reciprocal (sequence step 2) (@code{recip2.@var{fmt}}).\n+\n+@item float __builtin_mips_rsqrt1_s (float)\n+@itemx double __builtin_mips_rsqrt1_d (double)\n+@itemx v2sf __builtin_mips_rsqrt1_ps (v2sf)\n+Reduced precision reciprocal square root (sequence step 1)\n+(@code{rsqrt1.@var{fmt}}).\n+\n+@item float __builtin_mips_rsqrt2_s (float, float)\n+@itemx double __builtin_mips_rsqrt2_d (double, double)\n+@itemx v2sf __builtin_mips_rsqrt2_ps (v2sf, v2sf)\n+Reduced precision reciprocal square root (sequence step 2)\n+(@code{rsqrt2.@var{fmt}}).\n+@end table\n+\n+The following multi-instruction functions are also available.\n+In each case, @var{cond} can be any of the 16 floating-point conditions:\n+@code{f}, @code{un}, @code{eq}, @code{ueq}, @code{olt}, @code{ult},\n+@code{ole}, @code{ule}, @code{sf}, @code{ngle}, @code{seq},\n+@code{ngl}, @code{lt}, @code{nge}, @code{le} or @code{ngt}.\n+\n+@table @code\n+@item int __builtin_mips_cabs_@var{cond}_s (float @var{a}, float @var{b})\n+@itemx int __builtin_mips_cabs_@var{cond}_d (double @var{a}, double @var{b})\n+Absolute comparison of two scalar values (@code{cabs.@var{cond}.@var{fmt}},\n+@code{bc1t}/@code{bc1f}).\n+\n+These functions compare @var{a} and @var{b} using @code{cabs.@var{cond}.s}\n+or @code{cabs.@var{cond}.d} and return the result as a boolean value.\n+For example:\n+\n+@smallexample\n+float a, b;\n+if (__builtin_mips_cabs_eq_s (a, b))\n+  true ();\n+else\n+  false ();\n+@end smallexample\n+\n+@item int __builtin_mips_upper_cabs_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+@itemx int __builtin_mips_lower_cabs_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+Absolute comparison of two paired-single values (@code{cabs.@var{cond}.ps},\n+@code{bc1t}/@code{bc1f}).\n+\n+These functions compare @var{a} and @var{b} using @code{cabs.@var{cond}.ps}\n+and return either the upper or lower half of the result.  For example:\n+\n+@smallexample\n+v2sf a, b;\n+if (__builtin_mips_upper_cabs_eq_ps (a, b))\n+  upper_halves_are_equal ();\n+else\n+  upper_halves_are_unequal ();\n+\n+if (__builtin_mips_lower_cabs_eq_ps (a, b))\n+  lower_halves_are_equal ();\n+else\n+  lower_halves_are_unequal ();\n+@end smallexample\n+\n+@item v2sf __builtin_mips_movt_cabs_@var{cond}_ps (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+@itemx v2sf __builtin_mips_movf_cabs_@var{cond}_ps (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+Conditional move based on absolute comparison (@code{cabs.@var{cond}.ps},\n+@code{movt.ps}/@code{movf.ps}).\n+\n+The @code{movt} functions return the value @var{x} computed by:\n+\n+@smallexample\n+cabs.@var{cond}.ps @var{cc},@var{a},@var{b}\n+mov.ps @var{x},@var{c}\n+movt.ps @var{x},@var{d},@var{cc}\n+@end smallexample\n+\n+The @code{movf} functions are similar but use @code{movf.ps} instead\n+of @code{movt.ps}.\n+\n+@item int __builtin_mips_any_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+@itemx int __builtin_mips_all_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+@itemx int __builtin_mips_any_cabs_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+@itemx int __builtin_mips_all_cabs_@var{cond}_ps (v2sf @var{a}, v2sf @var{b})\n+Comparison of two paired-single values\n+(@code{c.@var{cond}.ps}/@code{cabs.@var{cond}.ps},\n+@code{bc1any2t}/@code{bc1any2f}).\n+\n+These functions compare @var{a} and @var{b} using @code{c.@var{cond}.ps}\n+or @code{cabs.@var{cond}.ps}.  The @code{any} forms return true if either\n+result is true and the @code{all} forms return true if both results are true.\n+For example:\n+\n+@smallexample\n+v2sf a, b;\n+if (__builtin_mips_any_c_eq_ps (a, b))\n+  one_is_true ();\n+else\n+  both_are_false ();\n+\n+if (__builtin_mips_all_c_eq_ps (a, b))\n+  both_are_true ();\n+else\n+  one_is_false ();\n+@end smallexample\n+\n+@item int __builtin_mips_any_c_@var{cond}_4s (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+@itemx int __builtin_mips_all_c_@var{cond}_4s (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+@itemx int __builtin_mips_any_cabs_@var{cond}_4s (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+@itemx int __builtin_mips_all_cabs_@var{cond}_4s (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n+Comparison of four paired-single values\n+(@code{c.@var{cond}.ps}/@code{cabs.@var{cond}.ps},\n+@code{bc1any4t}/@code{bc1any4f}).\n+\n+These functions use @code{c.@var{cond}.ps} or @code{cabs.@var{cond}.ps}\n+to compare @var{a} with @var{b} and to compare @var{c} with @var{d}.\n+The @code{any} forms return true if any of the four results are true\n+and the @code{all} forms return true if all four results are true.\n+For example:\n+\n+@smallexample\n+v2sf a, b, c, d;\n+if (__builtin_mips_any_c_eq_4s (a, b, c, d))\n+  some_are_true ();\n+else\n+  all_are_false ();\n+\n+if (__builtin_mips_all_c_eq_4s (a, b, c, d))\n+  all_are_true ();\n+else\n+  some_are_false ();\n+@end smallexample\n+@end table\n+\n @node PowerPC AltiVec Built-in Functions\n @subsection PowerPC AltiVec Built-in Functions\n "}, {"sha": "8e39ba7f4d8d8a114b0684682fd4af663f55cf4c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d840bfd345a08e0102ace6422dcfd95ef4f3bffa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d840bfd345a08e0102ace6422dcfd95ef4f3bffa", "patch": "@@ -9464,14 +9464,17 @@ operations.  This is the default.\n @itemx -mno-paired-single\n @opindex mpaired-single\n @opindex mno-paired-single\n-Use (do not use) the paired single instructions.\n+Use (do not use) paired-single floating-point instructions.\n+@xref{MIPS Paired-Single Support}.  This option can only be used\n+when generating 64-bit code and requires hardware floating-point\n+support to be enabled.\n \n @itemx -mips3d\n @itemx -mno-mips3d\n @opindex mips3d\n @opindex mno-mips3d\n-Use (do not use) the MIPS-3D ASE.  The option @option{-mips3d} implies\n-@option{-mpaired-single}.\n+Use (do not use) the MIPS-3D ASE.  @xref{MIPS-3D Built-in Functions}.\n+The option @option{-mips3d} implies @option{-mpaired-single}.\n \n @item -mint64\n @opindex mint64"}]}