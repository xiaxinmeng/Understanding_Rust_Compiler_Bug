{"sha": "018577e42637f1d1e57406142066b6f285a75ff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4NTc3ZTQyNjM3ZjFkMWU1NzQwNjE0MjA2NmI2ZjI4NWE3NWZmNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-08-04T22:06:49Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-08-04T22:06:49Z"}, "message": "function.c (schedule_fixup_var_refs): New function, broken out of put_reg_into_stack.\n\n\t* function.c (schedule_fixup_var_refs): New function, broken out\n\tof put_reg_into_stack.\n\t(put_reg_into_stack): Use it.\n\t(put_var_into_stack): In CONCAT case, fixup up references for\n\tcomponents only after fixing up references to the whole concat.\ntestsuite:\n\t* gcc.c-torture/execute/20000804-1.c: New test.\n\nFrom-SVN: r35495", "tree": {"sha": "077f3e3553c2f5adf1e1c801685b2403f89e09f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/077f3e3553c2f5adf1e1c801685b2403f89e09f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018577e42637f1d1e57406142066b6f285a75ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018577e42637f1d1e57406142066b6f285a75ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018577e42637f1d1e57406142066b6f285a75ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018577e42637f1d1e57406142066b6f285a75ff4/comments", "author": null, "committer": null, "parents": [{"sha": "2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "4552578089ff8b94dbda0a697533dca0740bb4bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=018577e42637f1d1e57406142066b6f285a75ff4", "patch": "@@ -1,3 +1,11 @@\n+Fri Aug  4 23:01:58 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* function.c (schedule_fixup_var_refs): New function, broken out\n+\tof put_reg_into_stack.\n+\t(put_reg_into_stack): Use it.\n+\t(put_var_into_stack): In CONCAT case, fixup up references for\n+\tcomponents only after fixing up references to the whole concat.\n+\n 2000-08-04  Rodney Brown  <RodneyBrown@pmsc.com>\n \n \t* alias.c (mark_constant_function): Use INSN_P."}, {"sha": "9fa8861c71ebda1d9ec7b0cfb1974d0b3f6179c2", "filename": "gcc/function.c", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=018577e42637f1d1e57406142066b6f285a75ff4", "patch": "@@ -253,6 +253,9 @@ static void put_reg_into_stack\tPARAMS ((struct function *, rtx, tree,\n \t\t\t\t\t enum machine_mode, enum machine_mode,\n \t\t\t\t\t int, unsigned int, int,\n \t\t\t\t\t struct hash_table *));\n+static void schedule_fixup_var_refs PARAMS ((struct function *, rtx, tree,\n+\t\t\t\t\t     enum machine_mode,\n+\t\t\t\t\t     struct hash_table *));\n static void fixup_var_refs\tPARAMS ((rtx, enum machine_mode, int, \n \t\t\t\t\t struct hash_table *));\n static struct fixup_replacement\n@@ -1405,20 +1408,25 @@ put_var_into_stack (decl)\n   else if (GET_CODE (reg) == CONCAT)\n     {\n       /* A CONCAT contains two pseudos; put them both in the stack.\n-\t We do it so they end up consecutive.  */\n+\t We do it so they end up consecutive.\n+\t We fixup references to the parts only after we fixup references\n+\t to the whole CONCAT, lest we do double fixups for the latter\n+\t references.  */\n       enum machine_mode part_mode = GET_MODE (XEXP (reg, 0));\n       tree part_type = type_for_mode (part_mode, 0);\n+      rtx lopart = XEXP (reg, 0);\n+      rtx hipart = XEXP (reg, 1);\n #ifdef FRAME_GROWS_DOWNWARD\n       /* Since part 0 should have a lower address, do it second.  */\n-      put_reg_into_stack (function, XEXP (reg, 1), part_type, part_mode,\n-\t\t\t  part_mode, volatilep, 0, usedp, 0);\n-      put_reg_into_stack (function, XEXP (reg, 0), part_type, part_mode,\n-\t\t\t  part_mode, volatilep, 0, usedp, 0);\n+      put_reg_into_stack (function, hipart, part_type, part_mode,\n+\t\t\t  part_mode, volatilep, 0, 0, 0);\n+      put_reg_into_stack (function, lopart, part_type, part_mode,\n+\t\t\t  part_mode, volatilep, 0, 0, 0);\n #else\n-      put_reg_into_stack (function, XEXP (reg, 0), part_type, part_mode,\n-\t\t\t  part_mode, volatilep, 0, usedp, 0);\n-      put_reg_into_stack (function, XEXP (reg, 1), part_type, part_mode,\n-\t\t\t  part_mode, volatilep, 0, usedp, 0);\n+      put_reg_into_stack (function, lopart, part_type, part_mode,\n+\t\t\t  part_mode, volatilep, 0, 0, 0);\n+      put_reg_into_stack (function, hipart, part_type, part_mode,\n+\t\t\t  part_mode, volatilep, 0, 0, 0);\n #endif\n \n       /* Change the CONCAT into a combined MEM for both parts.  */\n@@ -1431,6 +1439,13 @@ put_var_into_stack (decl)\n       /* Prevent sharing of rtl that might lose.  */\n       if (GET_CODE (XEXP (reg, 0)) == PLUS)\n \tXEXP (reg, 0) = copy_rtx (XEXP (reg, 0));\n+      if (usedp)\n+\t{\n+\t  schedule_fixup_var_refs (function, reg, TREE_TYPE (decl),\n+\t\t\t\t   promoted_mode, 0);\n+\t  schedule_fixup_var_refs (function, lopart, part_type, part_mode, 0);\n+\t  schedule_fixup_var_refs (function, hipart, part_type, part_mode, 0);\n+\t}\n     }\n   else\n     return;\n@@ -1490,11 +1505,22 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode, volatile_p,\n   MEM_SET_IN_STRUCT_P (reg,\n \t\t       AGGREGATE_TYPE_P (type) || MEM_IN_STRUCT_P (new));\n   MEM_ALIAS_SET (reg) = get_alias_set (type);\n+  if (used_p)\n+    schedule_fixup_var_refs (function, reg, type, promoted_mode, ht);\n+}\n \n-  /* Now make sure that all refs to the variable, previously made\n-     when it was a register, are fixed up to be valid again.  */\n-\n-  if (used_p && function != 0)\n+/* Make sure that all refs to the variable, previously made\n+   when it was a register, are fixed up to be valid again.\n+   See function above for meaning of arguments.  */\n+static void\n+schedule_fixup_var_refs (function, reg, type, promoted_mode, ht)\n+     struct function *function;\n+     rtx reg;\n+     tree type;\n+     enum machine_mode promoted_mode;\n+     struct hash_table *ht;\n+{\n+  if (function != 0)\n     {\n       struct var_refs_queue *temp;\n \n@@ -1506,7 +1532,7 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode, volatile_p,\n       temp->next = function->fixup_var_refs_queue;\n       function->fixup_var_refs_queue = temp;\n     }\n-  else if (used_p)\n+  else\n     /* Variable is local; fix it up now.  */\n     fixup_var_refs (reg, promoted_mode, TREE_UNSIGNED (type), ht);\n }"}, {"sha": "8faddfe81b99ed681d82db4964dcd90890c03b1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=018577e42637f1d1e57406142066b6f285a75ff4", "patch": "@@ -1,3 +1,7 @@\n+Fri Aug  4 23:00:50 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* gcc.c-torture/execute/20000804-1.c: New test.\n+\n 2000-08-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c90-printf-1.c, gcc.dg/c94-printf-1.c: New tests."}, {"sha": "d99cb7b5584934c20ee33db8c4afd0a056718d78", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018577e42637f1d1e57406142066b6f285a75ff4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c?ref=018577e42637f1d1e57406142066b6f285a75ff4", "patch": "@@ -0,0 +1,12 @@\n+/* Copyright (C) 2000 Free Software Foundation */\n+__complex__ long long f ()\n+{\n+  int i[99];\n+  __complex__ long long v;\n+\n+  v += f ();\n+  asm(\"\": \"+r\" (v) : \"r\" (0), \"r\" (1));\n+  v = 2;\n+  return v;\n+  g (&v);\n+}"}]}