{"sha": "9258ac53cfcbe546e8b86a433e59343538743f74", "node_id": "C_kwDOANBUbNoAKDkyNThhYzUzY2ZjYmU1NDZlOGI4NmE0MzNlNTkzNDM1Mzg3NDNmNzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-28T16:41:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-28T16:41:24Z"}, "message": "fold-const: Fix up fold_truth_andor_1 shift handling [PR103813]\n\nSome time ago I've changed const_binop -> wide_int_binop, so that it punts\non shifts by negative count.  fold_truth_andor_1 doesn't check the results\nof const_binop (?SHIFT_EXPR, ) though and assumes they will be always\nnon-NULL, which is no longer the case.\n\n2021-12-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/103813\n\t* fold-const.c (fold_truth_andor_1): Punt of const_binop LSHIFT_EXPR\n\tor RSHIFT_EXPR returns NULL.  Formatting fix.\n\n\t* gcc.c-torture/compile/pr103813.c: New test.", "tree": {"sha": "8bbf5d5db4bc08119c925088e715f374cd84d027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bbf5d5db4bc08119c925088e715f374cd84d027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9258ac53cfcbe546e8b86a433e59343538743f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9258ac53cfcbe546e8b86a433e59343538743f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9258ac53cfcbe546e8b86a433e59343538743f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9258ac53cfcbe546e8b86a433e59343538743f74/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "14aa9ca659b549c95c8725d2911713d845bb52bb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9258ac53cfcbe546e8b86a433e59343538743f74/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9258ac53cfcbe546e8b86a433e59343538743f74/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9258ac53cfcbe546e8b86a433e59343538743f74", "patch": "@@ -6454,15 +6454,19 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n \t\t\t size_int (xll_bitpos));\n   rl_mask = const_binop (LSHIFT_EXPR, fold_convert_loc (loc, lntype, rl_mask),\n \t\t\t size_int (xrl_bitpos));\n+  if (ll_mask == NULL_TREE || rl_mask == NULL_TREE)\n+    return 0;\n \n   if (l_const)\n     {\n       l_const = fold_convert_loc (loc, lntype, l_const);\n       l_const = unextend (l_const, ll_bitsize, ll_unsignedp, ll_and_mask);\n       l_const = const_binop (LSHIFT_EXPR, l_const, size_int (xll_bitpos));\n+      if (l_const == NULL_TREE)\n+\treturn 0;\n       if (! integer_zerop (const_binop (BIT_AND_EXPR, l_const,\n \t\t\t\t\tfold_build1_loc (loc, BIT_NOT_EXPR,\n-\t\t\t\t\t\t     lntype, ll_mask))))\n+\t\t\t\t\t\t\t lntype, ll_mask))))\n \t{\n \t  warning (0, \"comparison is always %d\", wanted_code == NE_EXPR);\n \n@@ -6474,9 +6478,11 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n       r_const = fold_convert_loc (loc, lntype, r_const);\n       r_const = unextend (r_const, rl_bitsize, rl_unsignedp, rl_and_mask);\n       r_const = const_binop (LSHIFT_EXPR, r_const, size_int (xrl_bitpos));\n+      if (r_const == NULL_TREE)\n+\treturn 0;\n       if (! integer_zerop (const_binop (BIT_AND_EXPR, r_const,\n \t\t\t\t\tfold_build1_loc (loc, BIT_NOT_EXPR,\n-\t\t\t\t\t\t     lntype, rl_mask))))\n+\t\t\t\t\t\t\t lntype, rl_mask))))\n \t{\n \t  warning (0, \"comparison is always %d\", wanted_code == NE_EXPR);\n \n@@ -6521,6 +6527,8 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n       rr_mask = const_binop (LSHIFT_EXPR, fold_convert_loc (loc,\n \t\t\t\t\t\t\t    rntype, rr_mask),\n \t\t\t     size_int (xrr_bitpos));\n+      if (lr_mask == NULL_TREE || rr_mask == NULL_TREE)\n+\treturn 0;\n \n       /* Make a mask that corresponds to both fields being compared.\n \t Do this for both items being compared.  If the operands are the\n@@ -6580,6 +6588,8 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n \t\t\t\t size_int (MIN (xll_bitpos, xrl_bitpos)));\n \t  lr_mask = const_binop (RSHIFT_EXPR, lr_mask,\n \t\t\t\t size_int (MIN (xlr_bitpos, xrr_bitpos)));\n+\t  if (ll_mask == NULL_TREE || lr_mask == NULL_TREE)\n+\t    return 0;\n \n \t  /* Convert to the smaller type before masking out unwanted bits.  */\n \t  type = lntype;"}, {"sha": "b3fc066beed2e84ed183675148fb0aae19db0b8d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr103813.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9258ac53cfcbe546e8b86a433e59343538743f74/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr103813.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9258ac53cfcbe546e8b86a433e59343538743f74/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr103813.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr103813.c?ref=9258ac53cfcbe546e8b86a433e59343538743f74", "patch": "@@ -0,0 +1,10 @@\n+/* PR middle-end/103813 */\n+\n+struct A { char b; char c[0x21000000]; };\n+struct A d;\n+\n+int\n+foo ()\n+{\n+  return d.c[0x20000000] || d.c[1];\n+}"}]}