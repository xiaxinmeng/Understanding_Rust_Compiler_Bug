{"sha": "f991b1d853560928299d8dea3885da56ad8048b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5MWIxZDg1MzU2MDkyODI5OWQ4ZGVhMzg4NWRhNTZhZDgwNDhiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-16T17:24:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-16T17:24:07Z"}, "message": "re PR libstdc++/12540 (Memory leak in locale::locale(const char*))\n\n2003-10-16  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12540\n\t* config/locale/gnu/monetary_members.cc\n\t(moneypunct<wchar_t, true/false>::_M_initialize_moneypunct):\n\tDon't leak memory if new throws.\n\t* src/locale.cc (locale::locale(const char*)): In order not\n\tto leak memory in case new throws, use a basic_string type\n\tfor __res too and avoid strdup.\n\nFrom-SVN: r72553", "tree": {"sha": "4980f05e99f727db30eb95c041e7c98bb689d201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4980f05e99f727db30eb95c041e7c98bb689d201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f991b1d853560928299d8dea3885da56ad8048b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f991b1d853560928299d8dea3885da56ad8048b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f991b1d853560928299d8dea3885da56ad8048b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f991b1d853560928299d8dea3885da56ad8048b6/comments", "author": null, "committer": null, "parents": [{"sha": "968e3f935ba908bea6ff1348e033be77f652586d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968e3f935ba908bea6ff1348e033be77f652586d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968e3f935ba908bea6ff1348e033be77f652586d"}], "stats": {"total": 221, "additions": 128, "deletions": 93}, "files": [{"sha": "c53f88538f6d0efff652f4d87081f13bef63101c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991b1d853560928299d8dea3885da56ad8048b6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991b1d853560928299d8dea3885da56ad8048b6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f991b1d853560928299d8dea3885da56ad8048b6", "patch": "@@ -1,3 +1,13 @@\n+2003-10-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12540\n+\t* config/locale/gnu/monetary_members.cc\n+\t(moneypunct<wchar_t, true/false>::_M_initialize_moneypunct):\n+\tDon't leak memory if new throws.\n+\t* src/locale.cc (locale::locale(const char*)): In order not\n+\tto leak memory in case new throws, use a basic_string type\n+\tfor __res too and avoid strdup.\n+\n 2003-10-14  Jeff Bailey  <jbailey@nisa.net>\n \t\n \tPR libstdc++/12562"}, {"sha": "0c03feb66fad9450f7215453787ad2c31c5e8d3d", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 111, "deletions": 85, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991b1d853560928299d8dea3885da56ad8048b6/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991b1d853560928299d8dea3885da56ad8048b6/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=f991b1d853560928299d8dea3885da56ad8048b6", "patch": "@@ -379,47 +379,60 @@ namespace std\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  const char* __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n \n-\t  mbstate_t __state;\n-\t  size_t __len = strlen(__cpossign);\n-\t  if (__len)\n+\t  wchar_t* __wcs_ps = 0;\n+\t  wchar_t* __wcs_ns = 0;\n+\t  const char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n+\t  try\n \t    {\n-\t      ++__len;\n-\t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      wchar_t* __wcs = new wchar_t[__len];\n-\t      mbsrtowcs(__wcs, &__cpossign, __len, &__state);\n-\t      _M_data->_M_positive_sign = __wcs;\n+\t      mbstate_t __state;\n+\t      size_t __len = strlen(__cpossign);\n+\t      if (__len)\n+\t\t{\n+\t\t  ++__len;\n+\t\t  memset(&__state, 0, sizeof(mbstate_t));\n+\t\t  __wcs_ps = new wchar_t[__len];\n+\t\t  mbsrtowcs(__wcs_ps, &__cpossign, __len, &__state);\n+\t\t  _M_data->_M_positive_sign = __wcs_ps;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_positive_sign = L\"\";\n+\t      \n+\t      __len = strlen(__cnegsign);\n+\t      if (!__nposn)\n+\t\t_M_data->_M_negative_sign = L\"()\";\n+\t      else if (__len)\n+\t\t{ \n+\t\t  ++__len;\n+\t\t  memset(&__state, 0, sizeof(mbstate_t));\n+\t\t  __wcs_ns = new wchar_t[__len];\n+\t\t  mbsrtowcs(__wcs_ns, &__cnegsign, __len, &__state);\n+\t\t  _M_data->_M_negative_sign = __wcs_ns;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_negative_sign = L\"\";\n+\t      \n+\t      // _Intl == true.\n+\t      __len = strlen(__ccurr);\n+\t      if (__len)\n+\t\t{\n+\t\t  ++__len;\n+\t\t  memset(&__state, 0, sizeof(mbstate_t));\n+\t\t  wchar_t* __wcs = new wchar_t[__len];\n+\t\t  mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n+\t\t  _M_data->_M_curr_symbol = __wcs;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_curr_symbol = L\"\";\n \t    }\n-\t  else\n-\t    _M_data->_M_positive_sign = L\"\";\n-\n-\t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t  __len = strlen(__cnegsign);\n-\t  if (!__nposn)\n-\t    _M_data->_M_negative_sign = L\"()\";\n-\t  else if (__len)\n-\t    { \n-\t      ++__len;\n-\t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      wchar_t* __wcs = new wchar_t[__len];\n-\t      mbsrtowcs(__wcs, &__cnegsign, __len, &__state);\n-\t      _M_data->_M_negative_sign = __wcs;\n-\t    }\n-\t  else\n-\t    _M_data->_M_negative_sign = L\"\";\n-\n-\t  // _Intl == true.\n-\t  __len = strlen(__ccurr);\n-\t  if (__len)\n+\t  catch (...)\n \t    {\n-\t      ++__len;\n-\t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      wchar_t* __wcs = new wchar_t[__len];\n-\t      mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n-\t      _M_data->_M_curr_symbol = __wcs;\n-\t    }\n-\t  else\n-\t    _M_data->_M_curr_symbol = L\"\";\n-\n+\t      delete _M_data;\n+\t      _M_data = 0;\n+\t      delete __wcs_ps;\n+\t      delete __wcs_ns;\t      \n+\t      __throw_exception_again;\n+\t    } \n+\t  \n \t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n \t\t\t\t\t\t      __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n@@ -442,18 +455,18 @@ namespace std\n     }\n \n   template<> \n-    void\n-    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc,\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \n-\t\t\t\t\t\t\t const char*)\n+  void\n+  moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc,\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+\t\t\t\t\t\t       const char*)\n #else\n-\t\t\t\t\t\t\t const char* __name)\n+                                                       const char* __name)\n #endif\n-    {\n-      if (!_M_data)\n-\t_M_data = new __moneypunct_cache<wchar_t>;\n+  {\n+    if (!_M_data)\n+      _M_data = new __moneypunct_cache<wchar_t>;\n \n-      if (!__cloc)\n+    if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_decimal_point = L'.';\n@@ -489,47 +502,60 @@ namespace std\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  const char* __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n \n-\t  mbstate_t __state;\n-\t  size_t __len;\n-\t  __len = strlen(__cpossign);\n-\t  if (__len)\n-\t    {\n-\t      ++__len;\n-\t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      wchar_t* __wcs = new wchar_t[__len];\n-\t      mbsrtowcs(__wcs, &__cpossign, __len, &__state);\n-\t      _M_data->_M_positive_sign = __wcs;\n-\t    }\n-\t  else\n-\t    _M_data->_M_positive_sign = L\"\";\n-\n-\t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t  __len = strlen(__cnegsign);\n-\t  if (!__nposn)\n-\t    _M_data->_M_negative_sign = L\"()\";\n-\t  else if (__len)\n-\t    { \n-\t      ++__len;\n-\t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      wchar_t* __wcs = new wchar_t[__len];\n-\t      mbsrtowcs(__wcs, &__cnegsign, __len, &__state);\n-\t      _M_data->_M_negative_sign = __wcs;\n+\t  wchar_t* __wcs_ps = 0;\n+\t  wchar_t* __wcs_ns = 0;\n+\t  const char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t  try\n+            {\n+              mbstate_t __state;\n+              size_t __len;\n+              __len = strlen(__cpossign);\n+              if (__len)\n+                {\n+\t\t  ++__len;\n+\t\t  memset(&__state, 0, sizeof(mbstate_t));\n+\t\t  __wcs_ps = new wchar_t[__len];\n+\t\t  mbsrtowcs(__wcs_ps, &__cpossign, __len, &__state);\n+\t\t  _M_data->_M_positive_sign = __wcs_ps;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_positive_sign = L\"\";\n+\t      \n+\t      __len = strlen(__cnegsign);\n+\t      if (!__nposn)\n+\t\t_M_data->_M_negative_sign = L\"()\";\n+\t      else if (__len)\n+\t\t{ \n+\t\t  ++__len;\n+\t\t  memset(&__state, 0, sizeof(mbstate_t));\n+\t\t  __wcs_ns = new wchar_t[__len];\n+\t\t  mbsrtowcs(__wcs_ns, &__cnegsign, __len, &__state);\n+\t\t  _M_data->_M_negative_sign = __wcs_ns;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_negative_sign = L\"\";\n+\t      \n+\t      // _Intl == true.\n+\t      __len = strlen(__ccurr);\n+\t      if (__len)\n+\t\t{\n+\t\t  ++__len;\n+\t\t  memset(&__state, 0, sizeof(mbstate_t));\n+\t\t  wchar_t* __wcs = new wchar_t[__len];\n+\t\t  mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n+\t\t  _M_data->_M_curr_symbol = __wcs;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_curr_symbol = L\"\";\n \t    }\n-\t  else\n-\t    _M_data->_M_negative_sign = L\"\";\n-\n-\t  // _Intl == true.\n-\t  __len = strlen(__ccurr);\n-\t  if (__len)\n+          catch (...)\n \t    {\n-\t      ++__len;\n-\t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      wchar_t* __wcs = new wchar_t[__len];\n-\t      mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n-\t      _M_data->_M_curr_symbol = __wcs;\n+\t      delete _M_data;\n+              _M_data = 0;\n+\t      delete __wcs_ps;\n+\t      delete __wcs_ns;\t      \n+              __throw_exception_again;\n \t    }\n-\t  else\n-\t    _M_data->_M_curr_symbol = L\"\";\n \n \t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));"}, {"sha": "12f77e1997e444c0ff48c0ddccc60188cab1d1c9", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991b1d853560928299d8dea3885da56ad8048b6/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991b1d853560928299d8dea3885da56ad8048b6/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=f991b1d853560928299d8dea3885da56ad8048b6", "patch": "@@ -208,20 +208,20 @@ namespace std\n \t      }\n \t    else\n \t      {\n-\t\tchar* __res;\n+\t\tstring __res;\n \t\t// LANG may set a default different from \"C\".\n \t\tchar* __env = std::getenv(\"LANG\");\n \t\tif (!__env || std::strcmp(__env, \"\") == 0 \n \t\t    || std::strcmp(__env, \"C\") == 0 \n \t\t    || std::strcmp(__env, \"POSIX\") == 0)\n-\t\t  __res = strdup(\"C\");\n+\t\t  __res = \"C\";\n \t\telse \n-\t\t  __res = strdup(__env);\n+\t\t  __res = __env;\n \t\t\n \t\t// Scan the categories looking for the first one\n \t\t// different from LANG.\n \t\tsize_t __i = 0;\n-\t\tif (std::strcmp(__res, \"C\") == 0)\n+\t\tif (std::strcmp(__res.c_str(), \"C\") == 0)\n \t\t  for (; __i < _S_categories_size; ++__i)\n \t\t    {\n \t\t      __env = std::getenv(_S_categories[__i]);\n@@ -235,7 +235,7 @@ namespace std\n \t\t    {\n \t\t      __env = std::getenv(_S_categories[__i]);\n \t\t      if (__env && std::strcmp(__env, \"\") != 0 \n-\t\t\t  && std::strcmp(__env, __res) != 0) \n+\t\t\t  && std::strcmp(__env, __res.c_str()) != 0) \n \t\t\tbreak;\n \t\t    }\n \t\n@@ -285,11 +285,10 @@ namespace std\n \t\t  }\n \t\t// ... otherwise either an additional instance of\n \t\t// the \"C\" locale or LANG.\n-\t\telse if (std::strcmp(__res, \"C\") == 0)\n+\t\telse if (std::strcmp(__res.c_str(), \"C\") == 0)\n \t\t  (_M_impl = _S_classic)->_M_add_reference();\n \t\telse\n-\t\t  _M_impl = new _Impl(__res, 1);\n-\t\tstd::free(__res);\n+\t\t  _M_impl = new _Impl(__res.c_str(), 1);\n \t      }\n \t  }\n       }"}]}