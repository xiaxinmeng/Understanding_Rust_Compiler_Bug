{"sha": "c0edbb32c15b1c5c2145294641e1dec688d23adc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlZGJiMzJjMTViMWM1YzIxNDUyOTQ2NDFlMWRlYzY4OGQyM2FkYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-24T15:56:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-24T15:56:06Z"}, "message": "cp-tree.h (ovl_skip_hidden): Declare.\n\n\t* cp-tree.h (ovl_skip_hidden): Declare.\n\t* tree.c (ovl_skip_hidden): New.\n\t* name-lookup.c (arg_assoc_namespace): Call ovl_skip_hidden.\n\t(lookup_arg_dependent_1): Likewise.\n\t(ambiguous_decl): Use DECL_HIDDEN_P, ovl_skip_hidden.\n\t(hidden_name_p, remove_hidden_names): Delete.\n\t(lookup_name_real_1): Do not strip hidden names.\n\t* name-lookup.h (hidden_name_p, remove_hidden_names): Delete.\n\nFrom-SVN: r248423", "tree": {"sha": "df0dd2d62b585a644ae547c4f2636c5f02ec758b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df0dd2d62b585a644ae547c4f2636c5f02ec758b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0edbb32c15b1c5c2145294641e1dec688d23adc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0edbb32c15b1c5c2145294641e1dec688d23adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0edbb32c15b1c5c2145294641e1dec688d23adc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0edbb32c15b1c5c2145294641e1dec688d23adc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "657e5f832623af590eabf9794dd2f9b0d7ac0855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657e5f832623af590eabf9794dd2f9b0d7ac0855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657e5f832623af590eabf9794dd2f9b0d7ac0855"}], "stats": {"total": 104, "additions": 36, "deletions": 68}, "files": [{"sha": "27716d3d382df3c5062ca99191bd12e15c80505c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0edbb32c15b1c5c2145294641e1dec688d23adc", "patch": "@@ -1,5 +1,14 @@\n 2017-05-24  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (ovl_skip_hidden): Declare.\n+\t* tree.c (ovl_skip_hidden): New.\n+\t* name-lookup.c (arg_assoc_namespace): Call ovl_skip_hidden.\n+\t(lookup_arg_dependent_1): Likewise.\n+\t(ambiguous_decl): Use DECL_HIDDEN_P, ovl_skip_hidden.\n+\t(hidden_name_p, remove_hidden_names): Delete.\n+\t(lookup_name_real_1): Do not strip hidden names.\n+\t* name-lookup.h (hidden_name_p, remove_hidden_names): Delete.\n+\n \t* cp-tree.h (OVL_HIDDEN_P): New.\n \t(ovl_iterator::hidden_p, ovl_iterator::reveal_node): New.\n \t(ovl_iterator::reveal_node): Declare."}, {"sha": "d52a784f2f7c5ad2b7555b712901c32bde331958", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c0edbb32c15b1c5c2145294641e1dec688d23adc", "patch": "@@ -6852,6 +6852,7 @@ extern tree ovl_make\t\t\t\t(tree fn,\n \t\t\t\t\t\t tree next = NULL_TREE);\n extern tree ovl_insert\t\t\t\t(tree fn, tree maybe_ovl,\n \t\t\t\t\t\t bool using_p = false);\n+extern tree ovl_skip_hidden\t\t\t(tree);\n extern tree lookup_add\t\t\t\t(tree fns, tree lookup);\n extern void lookup_keep\t\t\t\t(tree lookup, bool keep);\n extern int is_overloaded_fn\t\t\t(tree);"}, {"sha": "88fd7edcb21f2b13e4c8d2179bebbd1e412a660c", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 66, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c0edbb32c15b1c5c2145294641e1dec688d23adc", "patch": "@@ -275,14 +275,10 @@ arg_assoc_namespace (struct arg_lookup *k, tree scope)\n   if (!value)\n     return false;\n \n+  value = ovl_skip_hidden (value);\n+  \n   for (; value; value = OVL_NEXT (value))\n     {\n-      /* We don't want to find arbitrary hidden functions via argument\n-\t dependent lookup.  We only want to find friends of associated\n-\t classes, which we'll do via arg_assoc_class.  */\n-      if (hidden_name_p (OVL_CURRENT (value)))\n-\tcontinue;\n-\n       if (add_function (k, OVL_CURRENT (value)))\n \treturn true;\n     }\n@@ -630,7 +626,7 @@ lookup_arg_dependent_1 (tree name, tree fns, vec<tree, va_gc> *args)\n   /* Remove any hidden friend functions from the list of functions\n      found so far.  They will be added back by arg_assoc_class as\n      appropriate.  */\n-  fns = remove_hidden_names (fns);\n+  fns = ovl_skip_hidden (fns);\n \n   k.name = name;\n   k.args = args;\n@@ -4347,15 +4343,15 @@ ambiguous_decl (struct scope_binding *old, cxx_binding *new_binding, int flags)\n   /* Copy the type.  */\n   type = new_binding->type;\n   if (LOOKUP_NAMESPACES_ONLY (flags)\n-      || (type && hidden_name_p (type) && !(flags & LOOKUP_HIDDEN)))\n+      || (type && !(flags & LOOKUP_HIDDEN) && DECL_HIDDEN_P (type)))\n     type = NULL_TREE;\n \n   /* Copy the value.  */\n   val = new_binding->value;\n   if (val)\n     {\n       if (!(flags & LOOKUP_HIDDEN))\n-\tval = remove_hidden_names (val);\n+\tval = ovl_skip_hidden (val);\n       if (val)\n \tswitch (TREE_CODE (val))\n \t  {\n@@ -4465,59 +4461,6 @@ qualify_lookup (tree val, int flags)\n   return true;\n }\n \n-/* Given a lookup that returned VAL, decide if we want to ignore it or\n-   not based on DECL_ANTICIPATED.  */\n-\n-bool\n-hidden_name_p (tree val)\n-{\n-  if (DECL_P (val)\n-      && DECL_LANG_SPECIFIC (val)\n-      && TYPE_FUNCTION_OR_TEMPLATE_DECL_P (val)\n-      && DECL_ANTICIPATED (val))\n-    return true;\n-  if (TREE_CODE (val) == OVERLOAD)\n-    {\n-      for (tree o = val; o; o = OVL_CHAIN (o))\n-\tif (!hidden_name_p (OVL_FUNCTION (o)))\n-\t  return false;\n-      return true;\n-    }\n-  return false;\n-}\n-\n-/* Remove any hidden declarations from a possibly overloaded set\n-   of functions.  */\n-\n-tree\n-remove_hidden_names (tree fns)\n-{\n-  if (!fns)\n-    return fns;\n-\n-  if (DECL_P (fns) && hidden_name_p (fns))\n-    fns = NULL_TREE;\n-  else if (TREE_CODE (fns) == OVERLOAD)\n-    {\n-      tree o;\n-\n-      for (o = fns; o; o = OVL_NEXT (o))\n-\tif (hidden_name_p (OVL_CURRENT (o)))\n-\t  break;\n-      if (o)\n-\t{\n-\t  tree n = NULL_TREE;\n-\n-\t  for (o = fns; o; o = OVL_NEXT (o))\n-\t    if (!hidden_name_p (OVL_CURRENT (o)))\n-\t      n = lookup_add (OVL_CURRENT (o), n);\n-\t  fns = n;\n-\t}\n-    }\n-\n-  return fns;\n-}\n-\n /* Suggest alternatives for NAME, an IDENTIFIER_NODE for which name\n    lookup failed.  Search through all available namespaces and print out\n    possible candidates.  If no exact matches are found, and\n@@ -5337,10 +5280,6 @@ lookup_name_real_1 (tree name, int prefer_type, int nonclass, bool block_p,\n   if (!val)\n     val = unqualified_namespace_lookup (name, flags);\n \n-  /* Anticipated built-ins and friends aren't found by normal lookup.  */\n-  if (val && !(flags & LOOKUP_HIDDEN))\n-    val = remove_hidden_names (val);\n-\n   /* If we have a single function from a using decl, pull it out.  */\n   if (val && TREE_CODE (val) == OVERLOAD && !really_overloaded_fn (val))\n     val = OVL_FUNCTION (val);"}, {"sha": "f0df1c9c30d0450b73f8ea778eebb068b7a5981d", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=c0edbb32c15b1c5c2145294641e1dec688d23adc", "patch": "@@ -308,8 +308,6 @@ extern tree lookup_name_real (tree, int, int, bool, int, int);\n extern tree lookup_type_scope (tree, tag_scope);\n extern tree get_namespace_binding (tree ns, tree id);\n extern void set_global_binding (tree id, tree val);\n-extern bool hidden_name_p (tree);\n-extern tree remove_hidden_names (tree);\n extern tree lookup_qualified_name (tree, tree, int, bool, /*hidden*/bool = false);\n extern tree lookup_name_nonclass (tree);\n extern tree lookup_name_innermost_nonclass_level (tree);"}, {"sha": "29e3256c8711fbf0eac9524f5a116ac944fb4994", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0edbb32c15b1c5c2145294641e1dec688d23adc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c0edbb32c15b1c5c2145294641e1dec688d23adc", "patch": "@@ -2204,6 +2204,27 @@ ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n   return result;\n }\n \n+/* Skip any hidden names at the beginning of OVL.   */\n+\n+tree\n+ovl_skip_hidden (tree ovl)\n+{\n+  for (;\n+       ovl && TREE_CODE (ovl) == OVERLOAD && OVL_HIDDEN_P (ovl);\n+       ovl = OVL_CHAIN (ovl))\n+    gcc_checking_assert (DECL_HIDDEN_P (OVL_FUNCTION (ovl)));\n+\n+  if (ovl && TREE_CODE (ovl) != OVERLOAD && DECL_HIDDEN_P (ovl))\n+    {\n+      /* Any hidden functions should have been wrapped in an\n+\t overload, but injected friend classes will not.  */\n+      gcc_checking_assert (!DECL_DECLARES_FUNCTION_P (ovl));\n+      ovl = NULL_TREE;\n+    }\n+\n+  return ovl;\n+}\n+\n /* NODE is an OVL_HIDDEN_P node which is now revealed.  */\n \n tree"}]}