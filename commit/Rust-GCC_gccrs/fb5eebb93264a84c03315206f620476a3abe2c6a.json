{"sha": "fb5eebb93264a84c03315206f620476a3abe2c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1ZWViYjkzMjY0YTg0YzAzMzE1MjA2ZjYyMDQ3NmEzYWJlMmM2YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-25T12:31:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-25T12:31:52Z"}, "message": "calls.c (emit_call_1): New arg rounded_stack_size; update callers.\n\n        * calls.c (emit_call_1): New arg rounded_stack_size; update callers.\n        Update pending_stack_adjust based on this value.\n        (compute_argument_block_size): Include pending_stack_adjust in\n        PREFERRED_STACK_BOUNDARY alignment.\n        * function.c (assign_parms): Don't round to PREFERRED_STACK_BOUNDARY.\n\nFrom-SVN: r26623", "tree": {"sha": "462c9190e0e1a76ae0949ac258aa4d45dcae71e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462c9190e0e1a76ae0949ac258aa4d45dcae71e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb5eebb93264a84c03315206f620476a3abe2c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5eebb93264a84c03315206f620476a3abe2c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5eebb93264a84c03315206f620476a3abe2c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5eebb93264a84c03315206f620476a3abe2c6a/comments", "author": null, "committer": null, "parents": [{"sha": "ed856f4c7069b83eca592489cec4c86b3a702830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed856f4c7069b83eca592489cec4c86b3a702830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed856f4c7069b83eca592489cec4c86b3a702830"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "d0af7b2ffcac7b4505741f0c2618960e5980e297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5eebb93264a84c03315206f620476a3abe2c6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5eebb93264a84c03315206f620476a3abe2c6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb5eebb93264a84c03315206f620476a3abe2c6a", "patch": "@@ -1,3 +1,11 @@\n+Sun Apr 25 12:30:50 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* calls.c (emit_call_1): New arg rounded_stack_size; update callers.\n+\tUpdate pending_stack_adjust based on this value.\n+\t(compute_argument_block_size): Include pending_stack_adjust in\n+\tPREFERRED_STACK_BOUNDARY alignment.\n+\t* function.c (assign_parms): Don't round to PREFERRED_STACK_BOUNDARY.\n+\n Sun Apr 25 14:38:10 EDT 1999  John Wehle  (john@feith.com)\n \n \t* stupid.c (stupid_mark_refs): Generate a REG_UNUSED note"}, {"sha": "808ff56a74d9622295f90a87e36b39ebfbaa1f34", "filename": "gcc/calls.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5eebb93264a84c03315206f620476a3abe2c6a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5eebb93264a84c03315206f620476a3abe2c6a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=fb5eebb93264a84c03315206f620476a3abe2c6a", "patch": "@@ -127,8 +127,8 @@ int stack_arg_under_construction;\n static int calls_function\tPROTO ((tree, int));\n static int calls_function_1\tPROTO ((tree, int));\n static void emit_call_1\t\tPROTO ((rtx, tree, tree, HOST_WIDE_INT,\n-\t\t\t\t        HOST_WIDE_INT, rtx, rtx,\n-\t\t\t\t        int, rtx, int));\n+\t\t\t\t\tHOST_WIDE_INT, HOST_WIDE_INT, rtx,\n+\t\t\t\t\trtx, int, rtx, int));\n static void special_function_p\tPROTO ((char *, tree, int *, int *,\n \t\t\t\t\tint *, int *));\n static void precompute_register_parameters\tPROTO ((int, struct arg_data *,\n@@ -374,13 +374,14 @@ prepare_call_address (funexp, fndecl, call_fusage, reg_parm_seen)\n    IS_CONST is true if this is a `const' call.  */\n \n static void\n-emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size, \n-             next_arg_reg, valreg, old_inhibit_defer_pop, call_fusage,\n-\t     is_const)\n+emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n+\t     struct_value_size, next_arg_reg, valreg, old_inhibit_defer_pop,\n+\t     call_fusage, is_const)\n      rtx funexp;\n      tree fndecl ATTRIBUTE_UNUSED;\n      tree funtype ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT stack_size;\n+     HOST_WIDE_INT rounded_stack_size;\n      HOST_WIDE_INT struct_value_size;\n      rtx next_arg_reg;\n      rtx valreg;\n@@ -393,6 +394,7 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size,\n   rtx call_insn;\n #ifndef ACCUMULATE_OUTGOING_ARGS\n   int already_popped = 0;\n+  HOST_WIDE_INT n_popped = RETURN_POPS_ARGS (fndecl, funtype, stack_size);\n #endif\n \n   /* Ensure address is valid.  SYMBOL_REF is already valid, so no need,\n@@ -403,11 +405,9 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size,\n \n #ifndef ACCUMULATE_OUTGOING_ARGS\n #if defined (HAVE_call_pop) && defined (HAVE_call_value_pop)\n-  if (HAVE_call_pop && HAVE_call_value_pop\n-      && (RETURN_POPS_ARGS (fndecl, funtype, stack_size) > 0 \n-          || stack_size == 0))\n+  if (HAVE_call_pop && HAVE_call_value_pop && n_popped > 0)\n     {\n-      rtx n_pop = GEN_INT (RETURN_POPS_ARGS (fndecl, funtype, stack_size));\n+      rtx n_pop = GEN_INT (n_popped);\n       rtx pat;\n \n       /* If this subroutine pops its own args, record that in the call insn\n@@ -485,23 +485,23 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size,\n      If returning from the subroutine does pop the args, indicate that the\n      stack pointer will be changed.  */\n \n-  if (stack_size != 0 && RETURN_POPS_ARGS (fndecl, funtype, stack_size) > 0)\n+  if (n_popped > 0)\n     {\n       if (!already_popped)\n \tCALL_INSN_FUNCTION_USAGE (call_insn)\n \t  = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t       gen_rtx_CLOBBER (VOIDmode, stack_pointer_rtx),\n \t\t\t       CALL_INSN_FUNCTION_USAGE (call_insn));\n-      stack_size -= RETURN_POPS_ARGS (fndecl, funtype, stack_size);\n-      stack_size_rtx = GEN_INT (stack_size);\n+      stack_size -= n_popped;\n+      rounded_stack_size -= n_popped;\n     }\n \n-  if (stack_size != 0)\n+  if (rounded_stack_size != 0)\n     {\n       if (flag_defer_pop && inhibit_defer_pop == 0 && !is_const)\n-\tpending_stack_adjust += stack_size;\n+\tpending_stack_adjust += rounded_stack_size;\n       else\n-\tadjust_stack (stack_size_rtx);\n+\tadjust_stack (GEN_INT (rounded_stack_size));\n     }\n #endif\n }\n@@ -1168,8 +1168,11 @@ compute_argument_block_size (reg_parm_stack_space, args_size)\n   else\n     {\n #ifdef PREFERRED_STACK_BOUNDARY\n-      args_size->constant = (((args_size->constant + (STACK_BYTES - 1))\n-\t\t\t      / STACK_BYTES) * STACK_BYTES);\n+      args_size->constant = (((args_size->constant\n+\t\t\t       + pending_stack_adjust\n+\t\t\t       + STACK_BYTES - 1)\n+\t\t\t      / STACK_BYTES * STACK_BYTES)\n+\t\t\t     - pending_stack_adjust);\n #endif\n \n       args_size->constant = MAX (args_size->constant,\n@@ -2272,7 +2275,8 @@ expand_call (exp, target, ignore)\n   /* All arguments and registers used for the call must be set up by now!  */\n \n   /* Generate the actual call instruction.  */\n-  emit_call_1 (funexp, fndecl, funtype, args_size.constant, struct_value_size,\n+  emit_call_1 (funexp, fndecl, funtype, unadjusted_args_size,\n+\t       args_size.constant, struct_value_size,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n \t       valreg, old_inhibit_defer_pop, call_fusage, is_const);\n \n@@ -2957,7 +2961,7 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n                get_identifier (XSTR (orgfun, 0)), \n \t       build_function_type (outmode == VOIDmode ? void_type_node\n \t\t\t\t    : type_for_mode (outmode, 0), NULL_TREE),\n-               args_size.constant, 0,\n+\t       original_args_size.constant, args_size.constant, 0,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n \t       outmode != VOIDmode ? hard_libcall_value (outmode) : NULL_RTX,\n \t       old_inhibit_defer_pop + 1, call_fusage, no_queue);\n@@ -3530,7 +3534,8 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n   emit_call_1 (fun, \n                get_identifier (XSTR (orgfun, 0)),\n \t       build_function_type (type_for_mode (outmode, 0), NULL_TREE),\n-               args_size.constant, struct_value_size,\n+               original_args_size.constant, args_size.constant,\n+\t       struct_value_size,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n \t       mem_value == 0 ? hard_libcall_value (outmode) : NULL_RTX,\n \t       old_inhibit_defer_pop + 1, call_fusage, is_const);"}, {"sha": "7590caf2d04588c123087a568db7a04248e48def", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5eebb93264a84c03315206f620476a3abe2c6a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5eebb93264a84c03315206f620476a3abe2c6a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fb5eebb93264a84c03315206f620476a3abe2c6a", "patch": "@@ -58,10 +58,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"hash.h\"\n \n-#if !defined PREFERRED_STACK_BOUNDARY && defined STACK_BOUNDARY\n-#define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n-#endif\n-\n #ifndef TRAMPOLINE_ALIGNMENT\n #define TRAMPOLINE_ALIGNMENT FUNCTION_BOUNDARY\n #endif\n@@ -5063,14 +5059,6 @@ assign_parms (fndecl, second_time)\n #endif\n #endif\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n-#define STACK_BYTES (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)\n-\n-  current_function_args_size\n-    = ((current_function_args_size + STACK_BYTES - 1)\n-       / STACK_BYTES) * STACK_BYTES;\n-#endif  \n-\n #ifdef ARGS_GROW_DOWNWARD\n   current_function_arg_offset_rtx\n     = (stack_args_size.var == 0 ? GEN_INT (-stack_args_size.constant)"}]}