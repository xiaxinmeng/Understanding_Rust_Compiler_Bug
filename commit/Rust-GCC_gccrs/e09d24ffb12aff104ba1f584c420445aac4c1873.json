{"sha": "e09d24ffb12aff104ba1f584c420445aac4c1873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5ZDI0ZmZiMTJhZmYxMDRiYTFmNTg0YzQyMDQ0NWFhYzRjMTg3Mw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-01-26T22:27:31Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-01-26T22:27:31Z"}, "message": "calls.c (special_function_p): New argument fork_or_exec.\n\ngcc:\n\t* calls.c (special_function_p): New argument fork_or_exec.\n\t(expand_call): When profile_arc_flag is set and the function\n\tis in the fork_or_exec group, call __bb_fork_func first.\n\t* libgcc2.c, _bb module (__bb_fork_func): New function.\n\t(__bb_exit_func): If fcntl F_SETLKW is available, use it to lock\n\toutput file.\n\t* config/svr4.h (TARGET_HAS_F_SETLKW): Define.\n\t* tree.h (special_function_p): Update prototype.\n\ngcc/cp:\n\t* cp/optimize.c (calls_setjmp_r): Supply new argument\n\tto special_function_p.\n\nFrom-SVN: r31635", "tree": {"sha": "a0a5ab7d409b5f49313a069ba391408c5b9a49b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0a5ab7d409b5f49313a069ba391408c5b9a49b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09d24ffb12aff104ba1f584c420445aac4c1873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09d24ffb12aff104ba1f584c420445aac4c1873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09d24ffb12aff104ba1f584c420445aac4c1873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09d24ffb12aff104ba1f584c420445aac4c1873/comments", "author": null, "committer": null, "parents": [{"sha": "628d74de0e60a79f0b0e745a790c573663315f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628d74de0e60a79f0b0e745a790c573663315f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628d74de0e60a79f0b0e745a790c573663315f9e"}], "stats": {"total": 125, "additions": 109, "deletions": 16}, "files": [{"sha": "6801c8872504c6a483ae0f105bad6b6b805ac01d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -1,3 +1,14 @@\n+Wed Jan 26 22:19:14 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* calls.c (special_function_p): New argument fork_or_exec.\n+\t(expand_call): When profile_arc_flag is set and the function\n+\tis in the fork_or_exec group, call __bb_fork_func first.\n+\t* libgcc2.c, _bb module (__bb_fork_func): New function.\n+\t(__bb_exit_func): If fcntl F_SETLKW is available, use it to lock\n+\toutput file.\n+\t* config/svr4.h (TARGET_HAS_F_SETLKW): Define.\n+\t* tree.h (special_function_p): Update prototype.\n+\n 2000-01-26  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (alpha_split_tfmode_pair): New."}, {"sha": "23911d9e6f7c3850836efef25e1c6a517cf2cd0f", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -235,3 +235,4 @@ Boston, MA 02111-1307, USA.\n    to support ANSI C.  */\n /* #define MULTIBYTE_CHARS */\n \n+#define TARGET_HAS_F_SETLKW"}, {"sha": "2834ebb78634ba545c6cdd4bd55c89ee7cc7e302", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -1,3 +1,8 @@\n+Wed Jan 26 22:19:14 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* cp/optimize.c (calls_setjmp_r): Supply new argument\n+\tto special_function_p.\n+\n 2000-01-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* call.c: PROTO -> PARAMS."}, {"sha": "60ccbbddee26db7c3367e5808657c3dd64ce209a", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -732,14 +732,16 @@ calls_setjmp_r (tp, walk_subtrees, data)\n {\n   int setjmp_p;\n   int longjmp_p;\n+  int fork_or_exec_p;\n   int malloc_p;\n   int alloca_p;\n \n   /* We're only interested in FUNCTION_DECLS.  */\n   if (TREE_CODE (*tp) != FUNCTION_DECL)\n     return NULL_TREE;\n \n-  special_function_p (*tp, &setjmp_p, &longjmp_p, &malloc_p, &alloca_p);\n+  special_function_p (*tp, &setjmp_p, &longjmp_p, &fork_or_exec_p, &malloc_p,\n+\t\t      &alloca_p);\n \n   return setjmp_p ? *tp : NULL_TREE;\n }"}, {"sha": "de140514707d272db049d669d29729d7880b6a89", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -1,6 +1,7 @@\n /* More subroutines needed by GCC output code on some machines.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1989, 92-98, 1999 Free Software Foundation, Inc.\n+/* Copyright (C) 1989, 92, 93, 94, 95, 96, 97, 98, 1999, 2000\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1563,6 +1564,10 @@ char *ctime ();\n #include \"gbl-ctors.h\"\n #include \"gcov-io.h\"\n #include <string.h>\n+#ifdef TARGET_HAS_F_SETLKW\n+#include <fcntl.h>\n+#include <errno.h>\n+#endif\n \n static struct bb *bb_head;\n \n@@ -1606,13 +1611,64 @@ __bb_exit_func (void)\n \n       for (ptr = bb_head; ptr != (struct bb *) 0; ptr = ptr->next)\n \t{\n-\t  /* If the file exists, and the number of counts in it is the same,\n-\t     then merge them in.  */\n-\t     \n-\t  if ((da_file = fopen (ptr->filename, \"rb\")) != 0)\n+\t  int firstchar;\n+\n+\t  /* Make sure the output file exists -\n+\t     but don't clobber exiting data.  */\n+\t  if ((da_file = fopen (ptr->filename, \"a\")) != 0)\n+\t    fclose (da_file);\n+\n+\t  /* Need to re-open in order to be able to write from the start.  */\n+\t  da_file = fopen (ptr->filename, \"r+b\");\n+\t  /* Some old systems might not allow the 'b' mode modifier.\n+\t     Therefore, try to open without it.  This can lead to a race\n+\t     condition so that when you delete and re-create the file, the\n+\t     file might be opened in text mode, but then, you shouldn't\n+\t     delete the file in the first place.  */\n+\t  if (da_file == 0)\n+\t    da_file = fopen (ptr->filename, \"r+\");\n+\t  if (da_file == 0)\n+\t    {\n+\t      fprintf (stderr, \"arc profiling: Can't open output file %s.\\n\",\n+\t\t       ptr->filename);\n+\t      continue;\n+\t    }\n+\n+\t  /* After a fork, another process might try to read and/or write\n+\t     the same file simultanously.  So if we can, lock the file to\n+\t     avoid race conditions.  */\n+#if defined (TARGET_HAS_F_SETLKW)\n+\t  {\n+\t    struct flock s_flock;\n+\n+\t    s_flock.l_type = F_WRLCK;\n+\t    s_flock.l_whence = SEEK_SET;\n+\t    s_flock.l_start = 0;\n+\t    s_flock.l_len = 1;\n+\t    s_flock.l_pid = getpid ();\n+\n+\t    while (fcntl (fileno (da_file), F_SETLKW, &s_flock)\n+\t\t   && errno == EINTR);\n+\t  }\n+#endif\n+\n+\t  /* If the file is not empty, and the number of counts in it is the\n+\t     same, then merge them in.  */\n+\t  firstchar = fgetc (da_file);\n+\t  if (firstchar == EOF)\n+\t    {\n+\t      if (ferror (da_file))\n+\t\t{\n+\t\t  fprintf (stderr, \"arc profiling: Can't read output file \");\n+\t\t  perror (ptr->filename);\n+\t\t}\n+\t    }\n+\t  else\n \t    {\n \t      long n_counts = 0;\n \t      \n+\t      if (ungetc (firstchar, da_file) == EOF)\n+\t\trewind (da_file);\n \t      if (__read_long (&n_counts, da_file, 8) != 0)\n \t\t{\n \t\t  fprintf (stderr, \"arc profiling: Can't read output file %s.\\n\",\n@@ -1638,17 +1694,10 @@ __bb_exit_func (void)\n \t\t    }\n \t\t}\n \n-\t      if (fclose (da_file) == EOF)\n-\t\tfprintf (stderr, \"arc profiling: Error closing output file %s.\\n\",\n-\t\t\t ptr->filename);\n-\t    }\n-\t  if ((da_file = fopen (ptr->filename, \"wb\")) == 0)\n-\t    {\n-\t      fprintf (stderr, \"arc profiling: Can't open output file %s.\\n\",\n-\t\t       ptr->filename);\n-\t      continue;\n \t    }\n \n+\t  rewind (da_file);\n+\n \t  /* ??? Should first write a header to the file.  Preferably, a 4 byte\n \t     magic number, 4 bytes containing the time the program was\n \t     compiled, 4 bytes containing the last modification time of the\n@@ -1826,6 +1875,23 @@ __bb_init_func (struct bb *blocks)\n   bb_head = blocks;\n }\n \n+/* Called before fork or exec - write out profile information gathered so\n+   far and reset it to zero.  This avoids duplication or loss of the\n+   profile information gathered so far.  */\n+void\n+__bb_fork_func (void)\n+{\n+  struct bb *ptr;\n+\n+  __bb_exit_func ();\n+  for (ptr = bb_head; ptr != (struct bb *) 0; ptr = ptr->next)\n+    {\n+      long i;\n+      for (i = ptr->ncounts - 1; i >= 0; i--)\n+\tptr->counts[i] = 0;\n+    }\n+}\n+\n #ifndef MACHINE_STATE_SAVE\n #define MACHINE_STATE_SAVE(ID)\n #endif"}, {"sha": "d648344268cd2c0d6d1c36ba226e7a9d46758a3d", "filename": "gcc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -7815,4 +7815,12 @@ specifies where the linker should look for libraries.\n \n You need only define this macro if the default of @samp{\"LIBRARY_PATH\"}\n is wrong.\n+\n+@findex TARGET_HAS_F_SETLKW\n+@item TARGET_HAS_F_SETLKW\n+Define this macro iff the target supports file locking with fcntl / F_SETLKW.\n+Note that this functionality is part of POSIX.\n+Defining @code{TARGET_HAS_F_SETLKW} will enable the test coverage code\n+to use file locking when exiting a program, which avoids race conditions\n+if the program has forked.\n @end table"}, {"sha": "976f70f86a2e9c32737b3624eeeedafdd49ace13", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09d24ffb12aff104ba1f584c420445aac4c1873/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e09d24ffb12aff104ba1f584c420445aac4c1873", "patch": "@@ -2431,7 +2431,7 @@ extern struct rtx_def *emit_line_note_force\tPARAMS ((char *, int));\n \n /* In calls.c */\n extern void special_function_p\t        PARAMS ((tree, int *, int *,\n-\t\t\t\t\t\tint *, int *));\n+\t\t\t\t\t\tint *, int *, int *));\n \n /* In c-typeck.c */\n extern int mark_addressable\t\tPARAMS ((tree));"}]}