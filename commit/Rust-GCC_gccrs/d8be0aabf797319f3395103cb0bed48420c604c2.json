{"sha": "d8be0aabf797319f3395103cb0bed48420c604c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiZTBhYWJmNzk3MzE5ZjMzOTUxMDNjYjBiZWQ0ODQyMGM2MDRjMg==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-05-04T01:46:41Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-05-04T01:46:41Z"}, "message": "re PR java/20309 (gcjh needs a -force option)\n\n2005-05-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n        PR java/20309\n        * Make-lang.in (java): Add gjnih.\n        (JAVA_TARGET_INDEPENDENT_BIN_TOOLS): Likewise.\n        (GJNIH_OBJS): New variable.\n        (gjnih$(exeext)): New target.\n        (JAVA_MANFILES): Add gjnih.1.\n        (java.uninstall): Add gjnih.1.\n        (java.mostlyclean): Add gjnih.\n        (java.maintainer-clean): Add gjnih.1.\n        (java/gjavah-jni.o): New target.\n        (.INTERMEDIATE): Add gjnih.pod.\n        (gjnih.pod): New target.\n        * config-lang.in (stagestuff): Add gjnih.\n        * gcj.texi (Top): Add gjnih node.\n        (Invoking gcjh): Add descriptions of -force, -old, -trace, -J and\n        -bootclasspath options.\n        (Invoking gjnih): New node.\n        * gjavah.c Initialize flag_jni to 1 if JNI_DEFAULT is defined.\n        (TOOLNAME): New macro.\n        (error): Replace hard-coded gcjh with TOOLNAME.\n        (process_file): Likewise.\n        (usage): Likewise.\n        (version): Likewise.\n        (help): Likewise.  Add help output for -force, -old, -trace and -J\n        options.\n        (OPT_FORCE, OPT_OLD, OPT_TRACE): New macros.\n        (options): Add force, old, trace and J fields.\n        (main): Handle -force, -old, -trace and -J options.\n\nFrom-SVN: r99206", "tree": {"sha": "e8e97f92431a39873002e0cc9d3804b0f4f94c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e97f92431a39873002e0cc9d3804b0f4f94c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8be0aabf797319f3395103cb0bed48420c604c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8be0aabf797319f3395103cb0bed48420c604c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8be0aabf797319f3395103cb0bed48420c604c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8be0aabf797319f3395103cb0bed48420c604c2/comments", "author": null, "committer": null, "parents": [{"sha": "fbdd0b09248e2b49f21116fd7520b33c9b493f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdd0b09248e2b49f21116fd7520b33c9b493f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdd0b09248e2b49f21116fd7520b33c9b493f3f"}], "stats": {"total": 250, "additions": 234, "deletions": 16}, "files": [{"sha": "5b3adf8c6d7067f9c4a10d83600cae1a8ab3d23d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d8be0aabf797319f3395103cb0bed48420c604c2", "patch": "@@ -1,3 +1,34 @@\n+2005-05-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\tPR java/20309\n+\t* Make-lang.in (java): Add gjnih.\n+\t(JAVA_TARGET_INDEPENDENT_BIN_TOOLS): Likewise.\n+\t(GJNIH_OBJS): New variable.\n+\t(gjnih$(exeext)): New target.\n+\t(JAVA_MANFILES): Add gjnih.1.\n+\t(java.uninstall): Add gjnih.1.\n+\t(java.mostlyclean): Add gjnih.\n+\t(java.maintainer-clean): Add gjnih.1.\n+\t(java/gjavah-jni.o): New target.\n+\t(.INTERMEDIATE): Add gjnih.pod.\n+\t(gjnih.pod): New target.\n+\t* config-lang.in (stagestuff): Add gjnih.\n+\t* gcj.texi (Top): Add gjnih node.\n+\t(Invoking gcjh): Add descriptions of -force, -old, -trace, -J and\n+\t-bootclasspath options.\n+\t(Invoking gjnih): New node.\n+\t* gjavah.c Initialize flag_jni to 1 if JNI_DEFAULT is defined.\n+\t(TOOLNAME): New macro.\n+\t(error): Replace hard-coded gcjh with TOOLNAME.\n+\t(process_file): Likewise.\n+\t(usage): Likewise.\n+\t(version): Likewise.\n+\t(help): Likewise.  Add help output for -force, -old, -trace and -J\n+\toptions.\n+\t(OPT_FORCE, OPT_OLD, OPT_TRACE): New macros.\n+\t(options): Add force, old, trace and J fields.\n+\t(main): Handle -force, -old, -trace and -J options.\n+\n 2005-05-03  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/21245:"}, {"sha": "17aa70a7a94f07a97feb6566de5ea84fa34b9dc9", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=d8be0aabf797319f3395103cb0bed48420c604c2", "patch": "@@ -49,11 +49,12 @@ GCJ = gcj\n \n # Define the names for selecting java in LANGUAGES.\n java: jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) \\\n-      gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext)\n+      gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext) \\\n+      gjnih$(exeext)\n \n # Define the name of target independent tools to be installed in $(bindir)\n # Names are subject to changes\n-JAVA_TARGET_INDEPENDENT_BIN_TOOLS = gcjh jv-scan jcf-dump\n+JAVA_TARGET_INDEPENDENT_BIN_TOOLS = gcjh gjnih jv-scan jcf-dump\n \n # Tell GNU make to ignore these if they exist.\n .PHONY: java\n@@ -112,6 +113,10 @@ GCJH_OBJS = java/gjavah.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n   java/win32-host.o java/zextract.o version.o errors.o ggc-none.o \\\n   intl.o\n \n+GJNIH_OBJS = java/gjavah-jni.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n+  java/win32-host.o java/zextract.o version.o errors.o \\\n+  ggc-none.o intl.o\n+\n JVSCAN_OBJS = java/parse-scan.o java/jv-scan.o version.o intl.o\n \n JCFDUMP_OBJS = java/jcf-dump.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n@@ -138,6 +143,10 @@ gcjh$(exeext): $(GCJH_OBJS) $(LIBDEPS)\n \trm -f $@\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GCJH_OBJS) $(CPPLIBS) $(ZLIB) $(LIBS)\n \n+gjnih$(exeext): $(GJNIH_OBJS) $(LIBDEPS)\n+\trm -f $@\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GJNIH_OBJS) $(CPPLIBS) $(ZLIB) $(LIBS)\n+\n jv-scan$(exeext): $(JVSCAN_OBJS) $(LIBDEPS)\n \trm -f $@\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JVSCAN_OBJS) $(LIBICONV) $(LIBS)\n@@ -175,7 +184,7 @@ dvi:: doc/gcj.dvi\n html:: $(htmldir)/java/index.html\n JAVA_MANFILES = doc/gcj.1 doc/gcjh.1 doc/jv-scan.1 doc/jcf-dump.1 doc/gij.1 \\\n                 doc/jv-convert.1 doc/grmic.1 doc/grmiregistry.1 \\\n-\t\tdoc/gcj-dbtool.1\n+\t\tdoc/gcj-dbtool.1 doc/gjnih.1\n \n java.man: $(JAVA_MANFILES)\n \n@@ -231,6 +240,7 @@ java.uninstall:\n \t-rm -rf $(DESTDIR)$(bindir)/$(JAVA_INSTALL_NAME)$(exeext)\n \t-rm -rf $(DESTDIR)$(man1dir)/$(JAVA_INSTALL_NAME)$(man1ext)\n \t-rm -rf $(DESTDIR)$(man1dir)/gcjh$(man1ext)\n+\t-rm -rf $(DESTDIR)$(man1dir)/gjnih$(man1ext)\n \t-rm -rf $(DESTDIR)$(man1dir)/jv-scan$(man1ext)\n \t-rm -rf $(DESTDIR)$(man1dir)/jcf-dump$(man1ext)\n \t-rm -rf $(DESTDIR)$(man1dir)/gij$(man1ext)\n@@ -248,13 +258,14 @@ java.mostlyclean:\n \t-rm -f java/parse.c java/parse-scan.c\n \t-rm -f java/*$(objext) $(DEMANGLER_PROG)\n \t-rm -f java/*$(coverageexts)\n-\t-rm -f jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext) s-java\n+\t-rm -f jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) gcjh$(exeext) \\\n+          gjnih$(exeext) jv-scan$(exeext) jcf-dump$(exeext) s-java\n java.clean:\n java.distclean:\n \t-rm -f java/config.status java/Makefile\n \t-rm -f java/parse.output java/y.tab.c\n java.maintainer-clean:\n-\t-rm -f $(docobjdir)/gcj.1 $(docobjdir)/gcjh.1\n+\t-rm -f $(docobjdir)/gcj.1 $(docobjdir)/gcjh.1 $(docobjdir)/gjnih.1\n \t-rm -f $(docobjdir)/jv-scan.1 $(docobjdir)/jcf-dump.1\n \t-rm -f $(docobjdir)/gij.1\n \t-rm -f $(docobjdir)/jv-convert.1\n@@ -370,6 +381,14 @@ java/jcf-path.o: java/jcf-path.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n \t  $(srcdir)/java/jcf-path.c $(OUTPUT_OPTION)\n \n+# create gjnih's object\n+java/gjavah-jni.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(JAVA_TREE_H) \\\n+  java/gjavah.c java/jcf-reader.c java/jcf.h java/javaop.h version.h $(GGC_H) \\\n+  intl.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ZLIBINC) \\\n+\t\t-DJNI_DEFAULT=1 \\\n+\t\t$(srcdir)/java/gjavah.c $(OUTPUT_OPTION)\n+\n TEXI_JAVA_FILES = java/gcj.texi $(docdir)/include/fdl.texi\t\t\\\n \t $(docdir)/include/gpl.texi $(docdir)/include/gcc-common.texi   \\\n \t gcc-vers.texi\n@@ -390,12 +409,14 @@ $(htmldir)/java/index.html: $(TEXI_JAVA_FILES)\n \t$(TEXI2HTML) -I $(docdir)/include -I $(srcdir)/java -o $(@D) $<\n \n .INTERMEDIATE: gcj.pod gcjh.pod jv-scan.pod jcf-dump.pod gij.pod \\\n-  jv-convert.pod grmic.pod grmiregistry.pod gcj-dbtool.pod\n+  jv-convert.pod grmic.pod grmiregistry.pod gcj-dbtool.pod gjnih.pod\n \n gcj.pod: java/gcj.texi\n \t-$(TEXI2POD) -D gcj < $< > $@\n gcjh.pod: java/gcj.texi\n \t-$(TEXI2POD) -D gcjh < $< > $@\n+gjnih.pod: java/gcj.texi\n+\t-$(TEXI2POD) -D gjnih < $< > $@\n jv-scan.pod: java/gcj.texi\n \t-$(TEXI2POD) -D jv-scan < $< > $@\n jcf-dump.pod: java/gcj.texi"}, {"sha": "2216c6b2318deb3d3c634bdb56c76a4503eb8829", "filename": "gcc/java/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconfig-lang.in?ref=d8be0aabf797319f3395103cb0bed48420c604c2", "patch": "@@ -34,7 +34,7 @@ language=\"java\"\n \n compilers=\"jc1\\$(exeext) jvgenmain\\$(exeext)\"\n \n-stagestuff=\"jc1\\$(exeext) gcj\\$(exeext) jvgenmain\\$(exeext) gcjh\\$(exeext) jv-scan\\$(exeext) jcf-dump\\$(exeext)\"\n+stagestuff=\"jc1\\$(exeext) gcj\\$(exeext) jvgenmain\\$(exeext) gcjh\\$(exeext) gjnih\\$(exeext) jv-scan\\$(exeext) jcf-dump\\$(exeext)\"\n \n gtfiles=\"\\$(srcdir)/java/java-tree.h \\$(srcdir)/java/jcf.h \\$(srcdir)/java/lex.h \\$(srcdir)/java/parse.h \\$(srcdir)/java/builtins.c \\$(srcdir)/java/class.c \\$(srcdir)/java/constants.c \\$(srcdir)/java/decl.c \\$(srcdir)/java/expr.c \\$(srcdir)/java/jcf-parse.c \\$(srcdir)/java/jcf-write.c \\$(srcdir)/java/lang.c \\$(srcdir)/java/mangle.c \\$(srcdir)/java/parse.y \\$(srcdir)/java/resource.c\"\n "}, {"sha": "b5fc57a170a9ea4e682a4f68da813f3465d2d84a", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=d8be0aabf797319f3395103cb0bed48420c604c2", "patch": "@@ -59,6 +59,8 @@ man page gfdl(7).\n @direntry\n * gcjh: (gcj)Invoking gcjh.\n                             Generate header files from Java class files\n+* gjnih: (gcj)Invoking gjnih.\n+                            Generate JNI header files from Java class files\n * jv-scan: (gcj)Invoking jv-scan.\n                             Print information about Java source files\n * jcf-dump: (gcj)Invoking jcf-dump.\n@@ -111,6 +113,7 @@ files and object files, and it can read both Java source code and\n * Invoking gcj::\tCompiler options supported by @command{gcj}\n * Compatibility::\tCompatibility between gcj and other tools for Java\n * Invoking gcjh::       Generate header files from class files\n+* Invoking gjnih::      Generate JNI header files from class files\n * Invoking jv-scan::    Print information about source files\n * Invoking jcf-dump::   Print information about class files\n * Invoking gij::\tInterpreting Java bytecodes\n@@ -145,7 +148,7 @@ gcj [@option{-I}@var{dir}@dots{}] [@option{-d} @var{dir}@dots{}]\n     @var{sourcefile}@dots{}\n @c man end\n @c man begin SEEALSO gcj\n-gcc(1), gcjh(1), gij(1), jv-scan(1), jcf-dump(1), gfdl(7),\n+gcc(1), gcjh(1), gjnih(1), gij(1), jv-scan(1), jcf-dump(1), gfdl(7),\n and the Info entries for @file{gcj} and @file{gcc}.\n @c man end\n @end ignore\n@@ -673,9 +676,11 @@ required native methods.\n @ignore\n @c man begin SYNOPSIS gcjh\n gcjh [@option{-stubs}] [@option{-jni}]\n+    [@option{-force}] [@option{-old}] [@option{-trace}] [@option{-J} @var{option}]\n     [@option{-add} @var{text}] [@option{-append} @var{text}] [@option{-friend} @var{text}]\n     [@option{-preprend} @var{text}]\n     [@option{--classpath}=@var{path}] [@option{--CLASSPATH}=@var{path}]\n+    [@option{--bootclasspath}=@var{path}]\n     [@option{-I}@var{dir}@dots{}] [@option{-d} @var{dir}@dots{}]\n     [@option{-o} @var{file}] [@option{-td} @var{dir}]\n     [@option{-M}] [@option{-MM}] [@option{-MD}] [@option{-MMD}]\n@@ -701,6 +706,18 @@ By default the stub file will be named after the class, with a suffix of\n This tells @code{gcjh} to generate a JNI header or stub.  By default,\n CNI headers are generated.\n \n+@item -force\n+This option forces @code{gcjh} to write the output file.\n+\n+@item -old\n+This option is accepted but ignored for compatibility.\n+\n+@item -trace\n+This option is accepted but ignored for compatibility.\n+\n+@item -J @var{option}\n+This option is accepted but ignored for compatibility.\n+\n @item -add @var{text}\n Inserts @var{text} into the class body.  This is ignored in JNI mode.\n \n@@ -718,6 +735,7 @@ This is ignored in JNI mode.\n \n @item --classpath=@var{path}\n @itemx --CLASSPATH=@var{path}\n+@itemx --bootclasspath=@var{path}\n @itemx -I@var{directory}\n @itemx -d @var{directory}\n @itemx -o @var{file}\n@@ -757,6 +775,120 @@ All remaining options are considered to be names of classes.\n \n @c man end\n \n+@node Invoking gjnih\n+@chapter Invoking gjnih\n+\n+@c man title gjnih generate JNI header files from Java class files\n+\n+@c man begin DESCRIPTION gjnih\n+\n+The @code{gjnih} program is used to generate JNI header files from class\n+files.  Running it is equivalent to running @code{gcjh -jni}.\n+\n+@c man end\n+\n+@ignore\n+@c man begin SYNOPSIS gjnih\n+gjnih [@option{-stubs}] [@option{-jni}]\n+    [@option{-force}] [@option{-old}] [@option{-trace}] [@option{-J} @var{option}]\n+    [@option{-add} @var{text}] [@option{-append} @var{text}] [@option{-friend} @var{text}]\n+    [@option{-preprend} @var{text}]\n+    [@option{--classpath}=@var{path}] [@option{--CLASSPATH}=@var{path}]\n+    [@option{--bootclasspath}=@var{path}]\n+    [@option{-I}@var{dir}@dots{}] [@option{-d} @var{dir}@dots{}]\n+    [@option{-o} @var{file}] [@option{-td} @var{dir}]\n+    [@option{-M}] [@option{-MM}] [@option{-MD}] [@option{-MMD}]\n+    [@option{--version}] [@option{--help}] [@option{-v}] [@option{--verbose}]\n+    @var{classname}@dots{}\n+@c man end\n+@c man begin SEEALSO gjnih\n+gcc(1), gcj(1), gcjh(1), gij(1), jv-scan(1), jcf-dump(1), gfdl(7),\n+and the Info entries for @file{gcj} and @file{gcc}.\n+@c man end\n+@end ignore\n+\n+@c man begin OPTIONS gjnih\n+\n+@table @gcctabopt\n+@item -stubs\n+This causes @code{gjnih} to generate stub files instead of header files.\n+By default the stub file will be named after the class, with a suffix of\n+@samp{.c}.\n+\n+@item -jni\n+This option specifies the default behavior which is to generate a JNI\n+header or stub.\n+\n+@item -force\n+This option forces @code{gjnih} to write the output file.\n+\n+@item -old\n+This option is accepted but ignored for compatibility.\n+\n+@item -trace\n+This option is accepted but ignored for compatibility.\n+\n+@item -J @var{option}\n+This option is accepted but ignored for compatibility.\n+\n+@item -add @var{text}\n+Inserts @var{text} into the class body.  This is ignored in by\n+@code{gjnih}.\n+\n+@item -append @var{text}\n+Inserts @var{text} into the header file after the class declaration.\n+This is ignored in by @code{gjnih}.\n+\n+@item -friend @var{text}\n+Inserts @var{text} into the class as a @code{friend} declaration.\n+This is ignored by @code{gjnih}.\n+\n+@item -prepend @var{text}\n+Inserts @var{text} into the header file before the class declaration.\n+This is ignored in by @code{gjnih}.\n+\n+@item --classpath=@var{path}\n+@itemx --CLASSPATH=@var{path}\n+@itemx --bootclasspath=@var{path}\n+@itemx -I@var{directory}\n+@itemx -d @var{directory}\n+@itemx -o @var{file}\n+These options are all identical to the corresponding @command{gcj} options.\n+\n+@item -o @var{file}\n+Sets the output file name.  This cannot be used if there is more than\n+one class on the command line.\n+\n+@item -td @var{directory}\n+Sets the name of the directory to use for temporary files.\n+\n+@item -M\n+Print all dependencies to stdout; suppress ordinary output.\n+\n+@item -MM\n+Print non-system dependencies to stdout; suppress ordinary output.\n+\n+@item -MD\n+Print all dependencies to stdout.\n+\n+@item -MMD\n+Print non-system dependencies to stdout.\n+\n+@item --help\n+Print help about @code{gjnih} and exit.  No further processing is done.\n+\n+@item --version\n+Print version information for @code{gjnih} and exit.  No further\n+processing is done.\n+\n+@item -v, --verbose\n+Print extra information while running.\n+@end table\n+\n+All remaining options are considered to be names of classes.\n+\n+@c man end\n+\n @node Invoking jv-scan\n @chapter Invoking jv-scan\n "}, {"sha": "d25dab8d0f790344d4327076e9a3c645e60d4537", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8be0aabf797319f3395103cb0bed48420c604c2/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=d8be0aabf797319f3395103cb0bed48420c604c2", "patch": "@@ -53,8 +53,16 @@ FILE *out = NULL;\n /* Nonzero on failure.  */\n static int found_error = 0;\n \n+#ifdef JNI_DEFAULT\n+#define TOOLNAME \"gjnih\"\n+\n /* Nonzero if we're generating JNI output.  */\n+int flag_jni = 1;\n+#else\n+#define TOOLNAME \"gcjh\"\n+\n int flag_jni = 0;\n+#endif\n \n /* When nonzero, warn when source file is newer than matching class\n    file.  */\n@@ -266,7 +274,7 @@ error (const char *msgid, ...)\n \n   va_start (ap, msgid);\n \n-  fprintf (stderr, \"gcjh: \");\n+  fprintf (stderr, TOOLNAME \": \");\n   vfprintf (stderr, _(msgid), ap);\n   va_end (ap);\n   fprintf (stderr, \"\\n\");\n@@ -2093,11 +2101,11 @@ process_file (JCF *jcf, FILE *out)\n \t\t cstart, mode, cend);\n       else\n \t{\n-\t  fprintf (out, \"%s This file was created by `gcjh -stubs%s'.%s\\n\\\n+\t  fprintf (out, \"%s This file was created by `\" TOOLNAME \" -stubs%s'.%s\\n\\\n %s\\n\\\n %s This file is intended to give you a head start on implementing native\\n\\\n %s methods using %s.\\n\\\n-%s Be aware: running `gcjh -stubs %s' once more for this class may\\n\\\n+%s Be aware: running `\" TOOLNAME \" -stubs %s' once more for this class may\\n\\\n %s overwrite any edits you have made to this file.%s\\n\\n\",\n \t\t   cstart, jflag, mode,\n \t\t   cstart2,\n@@ -2299,6 +2307,9 @@ process_file (JCF *jcf, FILE *out)\n #define OPT_MG            LONG_OPT (12)\n #define OPT_MD            LONG_OPT (13)\n #define OPT_MMD           LONG_OPT (14)\n+#define OPT_FORCE         LONG_OPT (15)\n+#define OPT_OLD           LONG_OPT (16)\n+#define OPT_TRACE         LONG_OPT (17)\n \n static const struct option options[] =\n {\n@@ -2321,23 +2332,33 @@ static const struct option options[] =\n   { \"MD\",            no_argument,       NULL, OPT_MD  },\n   { \"MMD\",           no_argument,       NULL, OPT_MMD },\n   { \"jni\",           no_argument,       &flag_jni, 1 },\n+  { \"force\",         no_argument,       NULL, OPT_FORCE },\n+  /* If the output file should be named \"ld\" then a space is needed\n+     between -o and its argument, ld. */\n+  { \"old\",           no_argument,       NULL, OPT_OLD },\n+  { \"trace\",         no_argument,       NULL, OPT_TRACE },\n+  { NULL,            required_argument, NULL, 'J' },\n   { NULL,            no_argument,       NULL, 0 }\n };\n \n static void\n usage (void)\n {\n-  fprintf (stderr, _(\"Try 'gcjh --help' for more information.\\n\"));\n+  fprintf (stderr, _(\"Try '\" TOOLNAME \" --help' for more information.\\n\"));\n   exit (1);\n }\n \n static void\n help (void)\n {\n-  printf (_(\"Usage: gcjh [OPTION]... CLASS...\\n\\n\"));\n-  printf (_(\"Generate C++ header files from .class files\\n\\n\"));\n+  printf (_(\"Usage: \" TOOLNAME \" [OPTION]... CLASS...\\n\\n\"));\n+  printf (_(\"Generate C or C++ header files from .class files\\n\\n\"));\n   printf (_(\"  -stubs                  Generate an implementation stub file\\n\"));\n   printf (_(\"  -jni                    Generate a JNI header or stub\\n\"));\n+  printf (_(\"  -force                  Always overwrite output files\\n\"));\n+  printf (_(\"  -old                    Unused compatibility option\\n\"));\n+  printf (_(\"  -trace                  Unused compatibility option\\n\"));\n+  printf (_(\"  -J OPTION               Unused compatibility option\\n\"));\n   printf (\"\\n\");\n   printf (_(\"  -add TEXT               Insert TEXT into class body\\n\"));\n   printf (_(\"  -append TEXT            Insert TEXT after class declaration\\n\"));\n@@ -2372,7 +2393,7 @@ help (void)\n static void\n version (void)\n {\n-  printf (\"gcjh (GCC) %s\\n\\n\", version_string);\n+  printf (TOOLNAME \" (GCC) %s\\n\\n\", version_string);\n   printf (\"Copyright %s 2004 Free Software Foundation, Inc.\\n\", _(\"(C)\"));\n   printf (_(\"This is free software; see the source for copying conditions.  There is NO\\n\"\n \t    \"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"));\n@@ -2404,7 +2425,7 @@ main (int argc, char** argv)\n \n   /* We use getopt_long_only to allow single `-' long options.  For\n      some of our options this is more natural.  */\n-  while ((opt = getopt_long_only (argc, argv, \"I:d:o:v\", options, NULL)) != -1)\n+  while ((opt = getopt_long_only (argc, argv, \"J:I:d:o:v\", options, NULL)) != -1)\n     {\n       switch (opt)\n \t{\n@@ -2502,6 +2523,19 @@ main (int argc, char** argv)\n \t  jcf_dependency_init (0);\n \t  break;\n \n+\tcase OPT_FORCE:\n+\t  break;\n+\n+\tcase OPT_OLD:\n+\t  break;\n+\n+\tcase OPT_TRACE:\n+\t  break;\n+\n+\tcase 'J':\n+          /* Ignore -J options. */\n+\t  break;\n+\n \tdefault:\n \t  usage ();\n \t  break;"}]}