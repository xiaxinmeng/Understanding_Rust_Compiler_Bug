{"sha": "4eb28483004f8291c1f17df3b242716a5151c180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGViMjg0ODMwMDRmODI5MWMxZjE3ZGYzYjI0MjcxNmE1MTUxYzE4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-09T03:05:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-09T05:36:07Z"}, "message": "c++: Don't require accessible dtors for some forms of new [PR59238]\n\nJakub noticed that in build_new_1 we needed to add tf_no_cleanup to avoid\nbuilding a cleanup for a TARGET_EXPR that we already know is going to be\nused to initialize something, so the cleanup will never be run.  The best\nplace to add it is close to where we build the INIT_EXPR; in\ncp_build_modify_expr fixes the single-object new, in expand_default_init\nfixes array new.\n\nCo-authored-by: Jakub Jelinek  <jakub@redhat.com>\n\ngcc/cp/ChangeLog:\n\n\tPR c++/59238\n\t* init.c (expand_default_init): Pass tf_no_cleanup when building\n\ta TARGET_EXPR to go on the RHS of an INIT_EXPR.\n\t* typeck.c (cp_build_modify_expr): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/59238\n\t* g++.dg/cpp0x/new4.C: New test.", "tree": {"sha": "5c7a70117b394a18685e1d30946071f2b0f7e69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c7a70117b394a18685e1d30946071f2b0f7e69e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eb28483004f8291c1f17df3b242716a5151c180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb28483004f8291c1f17df3b242716a5151c180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb28483004f8291c1f17df3b242716a5151c180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb28483004f8291c1f17df3b242716a5151c180/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e8e2797ebae21e483373e303ec1c7596309625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e8e2797ebae21e483373e303ec1c7596309625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e8e2797ebae21e483373e303ec1c7596309625"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "3c3e05d9b212112667ecef1ef21757e30449bd54", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb28483004f8291c1f17df3b242716a5151c180/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb28483004f8291c1f17df3b242716a5151c180/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4eb28483004f8291c1f17df3b242716a5151c180", "patch": "@@ -1922,7 +1922,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \t   in an exception region.  */;\n       else\n \tinit = ocp_convert (type, init, CONV_IMPLICIT|CONV_FORCE_TEMP,\n-\t\t\t    flags, complain);\n+\t\t\t    flags, complain | tf_no_cleanup);\n \n       if (TREE_CODE (init) == MUST_NOT_THROW_EXPR)\n \t/* We need to protect the initialization of a catch parm with a"}, {"sha": "afbb8ef02e6e894fbdce72bd395dd533a59d88e0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb28483004f8291c1f17df3b242716a5151c180/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb28483004f8291c1f17df3b242716a5151c180/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4eb28483004f8291c1f17df3b242716a5151c180", "patch": "@@ -8860,7 +8860,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n        LOOKUP_ONLYCONVERTING.  */\n     newrhs = convert_for_initialization (lhs, olhstype, newrhs, LOOKUP_NORMAL,\n \t\t\t\t\t ICR_INIT, NULL_TREE, 0,\n-                                         complain);\n+\t\t\t\t\t complain | tf_no_cleanup);\n   else\n     newrhs = convert_for_assignment (olhstype, newrhs, ICR_ASSIGN,\n \t\t\t\t     NULL_TREE, 0, complain, LOOKUP_IMPLICIT);"}, {"sha": "728ef4ee7ce30039887ad7320fe7c2f499aa933c", "filename": "gcc/testsuite/g++.dg/cpp0x/new4.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb28483004f8291c1f17df3b242716a5151c180/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb28483004f8291c1f17df3b242716a5151c180/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew4.C?ref=4eb28483004f8291c1f17df3b242716a5151c180", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/59238\n+// { dg-do compile { target c++11 } }\n+\n+struct A { ~A () = delete; };\n+A *pa{new A{}};\n+A *pa2{new A[2]{}};\n+\n+class B { ~B () = default; };\n+B *pb{new B{}};\n+\n+struct E {\n+  ~E () = delete;\n+private:\n+  int x;\n+};\n+E *pe{new E{}};\n+\n+class C { ~C (); };\n+C *pc{new C{}};\n+\n+class D { ~D () {} };\n+D *pd{new D{}};\n+\n+struct F {\n+  F () = default;\n+  ~F () = delete;\n+};\n+F *pf{new F{}};\n+\n+struct G {\n+  G () = default;\n+  ~G () = delete;\n+private:\n+  int x;\n+};\n+G *pg{new G{}};"}]}