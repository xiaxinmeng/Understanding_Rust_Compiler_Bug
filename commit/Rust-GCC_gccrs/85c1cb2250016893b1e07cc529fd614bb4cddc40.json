{"sha": "85c1cb2250016893b1e07cc529fd614bb4cddc40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjMWNiMjI1MDAxNjg5M2IxZTA3Y2M1MjlmZDYxNGJiNGNkZGM0MA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-06-22T17:18:05Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-06-22T17:18:05Z"}, "message": "rs6000: Merge ashrsi3 and ashrdi3\n\nFrom-SVN: r211879", "tree": {"sha": "8ca0d631562ce39b907ecc1109d3aa70653f1bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca0d631562ce39b907ecc1109d3aa70653f1bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c1cb2250016893b1e07cc529fd614bb4cddc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c1cb2250016893b1e07cc529fd614bb4cddc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c1cb2250016893b1e07cc529fd614bb4cddc40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c1cb2250016893b1e07cc529fd614bb4cddc40/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "137b8eb295ac9373609d0b6db5302d330c7fc6f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137b8eb295ac9373609d0b6db5302d330c7fc6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137b8eb295ac9373609d0b6db5302d330c7fc6f2"}], "stats": {"total": 219, "additions": 72, "deletions": 147}, "files": [{"sha": "d706772bb8044f3c96af17dc718afa0f28691e79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1cb2250016893b1e07cc529fd614bb4cddc40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1cb2250016893b1e07cc529fd614bb4cddc40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85c1cb2250016893b1e07cc529fd614bb4cddc40", "patch": "@@ -1,3 +1,12 @@\n+2014-06-22  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (ashrsi3, two anonymous define_insns and\n+\tdefine_splits, ashrdi3, *ashrdi3_internal1, *ashrdi3_internal2 and\n+\tsplit, *ashrdi3_internal3 and split): Delete, merge into...\n+\t(ashr<mode>3): New expander.\n+\t(*ashr<mode>3, ashr<mode>3_dot, ashr<mode>3_dot2): New.\n+\t(*ashrsi3_64): Fix formatting.  Replace \"i\" by \"n\".\n+\n 2014-06-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (rotlsi3, *rotlsi3_internal2 and split,"}, {"sha": "4d0b5ae5224354094e4270ee2112665f8c7bfb8d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 63, "deletions": 147, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1cb2250016893b1e07cc529fd614bb4cddc40/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1cb2250016893b1e07cc529fd614bb4cddc40/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=85c1cb2250016893b1e07cc529fd614bb4cddc40", "patch": "@@ -5007,73 +5007,98 @@\n   \"\")\n \n \n-(define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n+(define_expand \"ashr<mode>3\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n+\t(ashiftrt:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n+\t\t      (match_operand:GPR 2 \"reg_or_cint_operand\" \"\")))]\n+  \"\"\n+{\n+  /* The generic code does not generate optimal code for the low word\n+     (it should be a rlwimi and a rot).  Until we have target code to\n+     solve this generically, keep this expander.  */\n+\n+  if (<MODE>mode == DImode && !TARGET_POWERPC64)\n+    {\n+      if (CONST_INT_P (operands[2]))\n+\t{\n+\t  emit_insn (gen_ashrdi3_no_power (operands[0], operands[1], operands[2]));\n+\t  DONE;\n+\t}\n+      else\n+\tFAIL;\n+    }\n+})\n+\n+(define_insn \"*ashr<mode>3\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ashiftrt:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t      (match_operand:GPR 2 \"reg_or_cint_operand\" \"r,n\")))]\n   \"\"\n   \"@\n-   sraw %0,%1,%2\n-   srawi %0,%1,%h2\"\n+   sra<wd> %0,%1,%2\n+   sra<wd>i %0,%1,%<hH>2\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"var_shift\" \"yes,no\")])\n \n (define_insn \"*ashrsi3_64\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-  \t(sign_extend:DI\n+\t(sign_extend:DI\n \t    (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\"))))]\n+\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,n\"))))]\n   \"TARGET_POWERPC64\"\n   \"@\n    sraw %0,%1,%2\n    srawi %0,%1,%h2\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"var_shift\" \"yes,no\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n+(define_insn_and_split \"*ashr<mode>3_dot\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashiftrt:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t  (match_operand:GPR 2 \"reg_or_cint_operand\" \"r,n,r,n\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n-  \"\"\n+   (clobber (match_scratch:GPR 0 \"=r,r,r,r\"))]\n+  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n   \"@\n-   sraw. %3,%1,%2\n-   srawi. %3,%1,%h2\n+   sra<wd>. %0,%1,%2\n+   sra<wd>i. %0,%1,%<hH>2\n    #\n    #\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(ashiftrt:GPR (match_dup 1)\n+\t\t      (match_dup 2)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"var_shift\" \"yes,no,yes,no\")\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,4,8,8\")])\n \n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 3)\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n+(define_insn_and_split \"*ashr<mode>3_dot2\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n+\t(compare:CC (ashiftrt:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t  (match_operand:GPR 2 \"reg_or_cint_operand\" \"r,n,r,n\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+\t(ashiftrt:GPR (match_dup 1)\n+\t\t      (match_dup 2)))]\n+  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n   \"@\n-   sraw. %0,%1,%2\n-   srawi. %0,%1,%h2\n+   sra<wd>. %0,%1,%2\n+   sra<wd>i. %0,%1,%<hH>2\n    #\n    #\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(ashiftrt:GPR (match_dup 1)\n+\t\t      (match_dup 2)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"var_shift\" \"yes,no,yes,no\")\n    (set_attr \"dot\" \"yes\")\n@@ -5117,22 +5142,6 @@\n   rs6000_emit_swrsqrt (operands[0], operands[1]);\n   DONE;\n })\n-\f\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n \f\n ;; Floating-point insns, excluding normal data motion.  We combine the SF/DF\n ;; modes here, and also add in conditional vsx/power8-vector support to access\n@@ -7718,99 +7727,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"ashrdi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWERPC64)\n-    ;\n-  else if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      emit_insn (gen_ashrdi3_no_power (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\")\n-\n-(define_insn \"*ashrdi3_internal1\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   srad %0,%1,%2\n-   sradi %0,%1,%H2\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"var_shift\" \"yes,no\")])\n-\n-(define_insn \"*ashrdi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   srad. %3,%1,%2\n-   sradi. %3,%1,%H2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"var_shift\" \"yes,no,yes,no\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 3)\n-\t(ashiftrt:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*ashrdi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   srad. %0,%1,%2\n-   sradi. %0,%1,%H2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"var_shift\" \"yes,no,yes,no\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ashiftrt:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_expand \"anddi3\"\n   [(parallel\n     [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")"}]}