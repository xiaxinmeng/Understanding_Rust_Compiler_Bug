{"sha": "a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwYmE0MWY0MWJjYTZkMTk2NWU2MTc2ODZhYjAyZmM2ZWI0MmM1Zg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-10-18T17:17:21Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-10-18T17:17:21Z"}, "message": "Fix common-related error recovery ICE.\n\nFix an inconsistent state, between the in_common attribute\nand the common_block pointer.\n\n - adding a symbol to a common block list in gfc_match_common is delayed\n   after the call to gfc_add_in_common.\n - gfc_restore_latest_undo_checkpoint is changed to check the common_block\n   pointer directly instead of the in_common attribute.\n - gfc_restore_old_symbol is changed to also restore\n   the common-related pointers.  This is done using a new function created\n   to factor the related memory management.\n - In gfc_restore_last_undo_checkpoint, when a symbol has been removed\n   from the common block linked list, its common_next pointer is cleared.\n\n\tPR fortran/67758\ngcc/fortran/\n\t* gfortran.h (gfc_symbol): Expand comment.\n\t* match.c (gfc_match_common): Delay adding the symbol to\n\tthe common_block after the gfc_add_in_common call.\n\t* symbol.c (gfc_free_symbol): Move common block memory handling...\n\t(gfc_set_symbol_common_block): ... here as a new function.\n\t(restore_old_symbol): Restore common block fields.\n\t(gfc_restore_last_undo_checkpoint):\n\tCheck the common_block pointer instead of the in_common attribute.\n\tWhen a symbol has been removed from the common block linked list,\n\tclear its common_next pointer.\ngcc/testsuite/\n\t* gfortran.dg/common_25.f90: New file.\n\nFrom-SVN: r228947", "tree": {"sha": "825f09b858c7489a7824b502280e56fef764f000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/825f09b858c7489a7824b502280e56fef764f000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/comments", "author": null, "committer": null, "parents": [{"sha": "45c3fea9baf7690791680ad24eacc01376b6dbd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c3fea9baf7690791680ad24eacc01376b6dbd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c3fea9baf7690791680ad24eacc01376b6dbd3"}], "stats": {"total": 97, "additions": 74, "deletions": 23}, "files": [{"sha": "53d309447b70c0f6d1f0673aad183d01f17bd6d6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "patch": "@@ -1,3 +1,17 @@\n+2015-10-18  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/67758\n+\t* gfortran.h (gfc_symbol): Expand comment.\n+\t* match.c (gfc_match_common): Delay adding the symbol to\n+\tthe common_block after the gfc_add_in_common call.\n+\t* symbol.c (gfc_free_symbol): Move common block memory handling...\n+\t(gfc_set_symbol_common_block): ... here as a new function.\n+\t(restore_old_symbol): Restore common block fields.\n+\t(gfc_restore_last_undo_checkpoint):\n+\tCheck the common_block pointer instead of the in_common attribute.\n+\tWhen a symbol has been removed from the common block linked list,\n+\tclear its common_next pointer.\n+\n 2015-10-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/67177"}, {"sha": "b2894cc22c46f8c36cba88f67dc918cdd9509d2d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "patch": "@@ -1411,8 +1411,12 @@ typedef struct gfc_symbol\n \n   struct gfc_symbol *common_next;\t/* Links for COMMON syms */\n \n-  /* This is in fact a gfc_common_head but it is only used for pointer\n-     comparisons to check if symbols are in the same common block.  */\n+  /* This is only used for pointer comparisons to check if symbols\n+     are in the same common block.\n+     In opposition to common_block, the common_head pointer takes into account\n+     equivalences: if A is in a common block C and A and B are in equivalence,\n+     then both A and B have common_head pointing to C, while A's common_block\n+     points to C and B's is NULL.  */\n   struct gfc_common_head* common_head;\n \n   /* Make sure setup code for dummy arguments is generated in the correct"}, {"sha": "74f26b7b7fe5e5ffeae34ef2ff27148a0b653269", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "patch": "@@ -4365,16 +4365,6 @@ gfc_match_common (void)\n \t\tgoto cleanup;\n \t    }\n \n-\t  sym->common_block = t;\n-\t  sym->common_block->refs++;\n-\n-\t  if (tail != NULL)\n-\t    tail->common_next = sym;\n-\t  else\n-\t    *head = sym;\n-\n-\t  tail = sym;\n-\n \t  /* Deal with an optional array specification after the\n \t     symbol name.  */\n \t  m = gfc_match_array_spec (&as, true, true);\n@@ -4409,6 +4399,16 @@ gfc_match_common (void)\n \t     if any, and continue matching.  */\n \t  gfc_add_in_common (&sym->attr, sym->name, NULL);\n \n+\t  sym->common_block = t;\n+\t  sym->common_block->refs++;\n+\n+\t  if (tail != NULL)\n+\t    tail->common_next = sym;\n+\t  else\n+\t    *head = sym;\n+\n+\t  tail = sym;\n+\n \t  sym->common_head = t;\n \n \t  /* Check to see if the symbol is already in an equivalence group."}, {"sha": "a9a0dc07e5b2e3b10b318b45a1b8d84c1d357782", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "patch": "@@ -2585,6 +2585,25 @@ gfc_find_uop (const char *name, gfc_namespace *ns)\n }\n \n \n+/* Update a symbol's common_block field, and take care of the associated\n+   memory management.  */\n+\n+static void\n+set_symbol_common_block (gfc_symbol *sym, gfc_common_head *common_block)\n+{\n+  if (sym->common_block == common_block)\n+    return;\n+\n+  if (sym->common_block && sym->common_block->name[0] != '\\0')\n+    {\n+      sym->common_block->refs--;\n+      if (sym->common_block->refs == 0)\n+\tfree (sym->common_block);\n+    }\n+  sym->common_block = common_block;\n+}\n+\n+\n /* Remove a gfc_symbol structure and everything it points to.  */\n \n void\n@@ -2612,12 +2631,7 @@ gfc_free_symbol (gfc_symbol *sym)\n \n   gfc_free_namespace (sym->f2k_derived);\n \n-  if (sym->common_block && sym->common_block->name[0] != '\\0')\n-    { \n-      sym->common_block->refs--; \n-      if (sym->common_block->refs == 0)\n-\tfree (sym->common_block);\n-    }\n+  set_symbol_common_block (sym, NULL);\n \n   free (sym);\n }\n@@ -3090,6 +3104,9 @@ restore_old_symbol (gfc_symbol *p)\n       p->formal = old->formal;\n     }\n \n+  set_symbol_common_block (p, old->common_block);\n+  p->common_head = old->common_head;\n+\n   p->old_symbol = old->old_symbol;\n   free (old);\n }\n@@ -3178,15 +3195,13 @@ gfc_restore_last_undo_checkpoint (void)\n \n   FOR_EACH_VEC_ELT (latest_undo_chgset->syms, i, p)\n     {\n-      /* Symbol was new. Or was old and just put in common */\n-      if ((p->gfc_new\n-\t   || (p->attr.in_common && !p->old_symbol->attr.in_common ))\n-\t  && p->attr.in_common && p->common_block && p->common_block->head)\n+      /* Symbol in a common block was new. Or was old and just put in common */\n+      if (p->common_block\n+\t  && (p->gfc_new || !p->old_symbol->common_block))\n \t{\n \t  /* If the symbol was added to any common block, it\n \t     needs to be removed to stop the resolver looking\n \t     for a (possibly) dead symbol.  */\n-\n \t  if (p->common_block->head == p && !p->common_next)\n \t    {\n \t      gfc_symtree st, *st0;\n@@ -3218,6 +3233,7 @@ gfc_restore_last_undo_checkpoint (void)\n \t      gcc_assert(cparent->common_next == p);\n \t      cparent->common_next = csym->common_next;\n \t    }\n+\t  p->common_next = NULL;\n \t}\n       if (p->gfc_new)\n \t{"}, {"sha": "95d68856e3a8cda4449b926967925df09d9ad538", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "patch": "@@ -1,3 +1,8 @@\n+2015-10-18  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/67758\n+\t* gfortran.dg/common_25.f90: New file.\n+\n 2015-10-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/67177"}, {"sha": "b5921babb22e9b95ffe16515f1c594a16cee023f", "filename": "gcc/testsuite/gfortran.dg/common_25.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70ba41f41bca6d1965e617686ab02fc6eb42c5f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_25.f90?ref=a70ba41f41bca6d1965e617686ab02fc6eb42c5f", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! PR fortran/67758\n+!\n+! Check the absence of ICE after emitting the error message\n+!\n+! This test is  the free form variant of common_24.f.\n+\n+      REAL :: X\n+      COMMON /FMCOM / X(80 000 000)  ! { dg-error \"Expected another dimension\" }\n+      CALL T(XX(A))\n+      COMMON /FMCOM / XX(80 000 000) ! { dg-error \"Expected another dimension\" }\n+      END"}]}