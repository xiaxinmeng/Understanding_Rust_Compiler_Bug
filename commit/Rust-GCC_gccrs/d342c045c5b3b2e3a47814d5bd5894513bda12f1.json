{"sha": "d342c045c5b3b2e3a47814d5bd5894513bda12f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0MmMwNDVjNWIzYjJlM2E0NzgxNGQ1YmQ1ODk0NTEzYmRhMTJmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-01T19:43:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-01T19:43:24Z"}, "message": "dwarf2out.c (dwarf2out_cfi_label): Add FORCE argument...\n\n\t* dwarf2out.c (dwarf2out_cfi_label): Add FORCE argument, if true,\n\tforce output of the label even for dwarf2out_do_cfi_asm.\n\t(add_fde_cfi): If -g2 and above and cfi might change CFA,\n\tforce creation of CFI label and chain DW_CFA_set_loc jumping to it\n\tfor convert_cfa_to_fb_loc_list.  Adjust other dwarf2out_cfi_label\n\tcaller.\n\t(dwarf2out_stack_adjust, dwarf2out_frame_debug,\n\tdwarf2out_begin_epilogue, dwarf2out_frame_debug_restore_state): Adjust\n\tdwarf2out_cfi_label callers.\n\t* tree.h (dwarf2out_cfi_label): Adjust prototype.\n\t* config/arm/arm.c (thumb_pushpop, thumb1_output_function_prologue):\n\tAdjust dwarf2out_cfi_label callers.\n\t* config/vax/vax.c (vax_output_function_prologue): Likewise.\n\nFrom-SVN: r148066", "tree": {"sha": "32fb3efb4fd0a4c84395072ec08c028a01dc6c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32fb3efb4fd0a4c84395072ec08c028a01dc6c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d342c045c5b3b2e3a47814d5bd5894513bda12f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d342c045c5b3b2e3a47814d5bd5894513bda12f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d342c045c5b3b2e3a47814d5bd5894513bda12f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d342c045c5b3b2e3a47814d5bd5894513bda12f1/comments", "author": null, "committer": null, "parents": [{"sha": "604a6be92208db9abcbc799879413169e5e02c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604a6be92208db9abcbc799879413169e5e02c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604a6be92208db9abcbc799879413169e5e02c13"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "8ae8dab2914c2eae31043d1406d8d71e1216f469", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d342c045c5b3b2e3a47814d5bd5894513bda12f1", "patch": "@@ -16984,7 +16984,7 @@ thumb_pushpop (FILE *f, unsigned long mask, int push, int *cfa_offset,\n \n   if (push && pushed_words && dwarf2out_do_frame ())\n     {\n-      char *l = dwarf2out_cfi_label ();\n+      char *l = dwarf2out_cfi_label (false);\n       int pushed_mask = real_regs;\n \n       *cfa_offset += pushed_words * 4;\n@@ -17880,7 +17880,7 @@ thumb1_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t the stack pointer.  */\n       if (dwarf2out_do_frame ())\n \t{\n-\t  char *l = dwarf2out_cfi_label ();\n+\t  char *l = dwarf2out_cfi_label (false);\n \n \t  cfa_offset = cfa_offset + crtl->args.pretend_args_size;\n \t  dwarf2out_def_cfa (l, SP_REGNUM, cfa_offset);\n@@ -17929,7 +17929,7 @@ thumb1_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \n       if (dwarf2out_do_frame ())\n \t{\n-\t  char *l = dwarf2out_cfi_label ();\n+\t  char *l = dwarf2out_cfi_label (false);\n \n \t  cfa_offset = cfa_offset + 16;\n \t  dwarf2out_def_cfa (l, SP_REGNUM, cfa_offset);"}, {"sha": "a783b6f71317583a9f96fd46affd7f3616b13948", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=d342c045c5b3b2e3a47814d5bd5894513bda12f1", "patch": "@@ -133,7 +133,7 @@ vax_output_function_prologue (FILE * file, HOST_WIDE_INT size)\n \n   if (dwarf2out_do_frame ())\n     {\n-      const char *label = dwarf2out_cfi_label ();\n+      const char *label = dwarf2out_cfi_label (false);\n       int offset = 0;\n \n       for (regno = FIRST_PSEUDO_REGISTER-1; regno >= 0; --regno)"}, {"sha": "c23344430c9870f2d977329391b63086e81e62bf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d342c045c5b3b2e3a47814d5bd5894513bda12f1", "patch": "@@ -693,14 +693,15 @@ add_cfi (dw_cfi_ref *list_head, dw_cfi_ref cfi)\n   *p = cfi;\n }\n \n-/* Generate a new label for the CFI info to refer to.  */\n+/* Generate a new label for the CFI info to refer to.  FORCE is true\n+   if a label needs to be output even when using .cfi_* directives.  */\n \n char *\n-dwarf2out_cfi_label (void)\n+dwarf2out_cfi_label (bool force)\n {\n   static char label[20];\n \n-  if (dwarf2out_do_cfi_asm ())\n+  if (!force && dwarf2out_do_cfi_asm ())\n     {\n       /* In this case, we will be emitting the asm directive instead of\n \t the label, so just return a placeholder to keep the rest of the\n@@ -728,11 +729,59 @@ add_fde_cfi (const char *label, dw_cfi_ref cfi)\n     {\n       if (label)\n \t{\n-\t  output_cfi_directive (cfi);\n+\t  dw_fde_ref fde = current_fde ();\n+\n+\t  gcc_assert (fde != NULL);\n \n \t  /* We still have to add the cfi to the list so that\n-\t     lookup_cfa works later on.  */\n-\t  list_head = &current_fde ()->dw_fde_cfi;\n+\t     lookup_cfa works later on.  When -g2 and above we\n+\t     even need to force emitting of CFI labels and\n+\t     add to list a DW_CFA_set_loc for convert_cfa_to_fb_loc_list\n+\t     purposes.  */\n+\t  switch (cfi->dw_cfi_opc)\n+\t    {\n+\t    case DW_CFA_def_cfa_offset:\n+\t    case DW_CFA_def_cfa_offset_sf:\n+\t    case DW_CFA_def_cfa_register:\n+\t    case DW_CFA_def_cfa:\n+\t    case DW_CFA_def_cfa_sf:\n+\t    case DW_CFA_def_cfa_expression:\n+\t    case DW_CFA_restore_state:\n+\t      if (write_symbols != DWARF2_DEBUG\n+\t\t  && write_symbols != VMS_AND_DWARF2_DEBUG)\n+\t\tbreak;\n+\t      if (debug_info_level <= DINFO_LEVEL_TERSE)\n+\t\tbreak;\n+\n+\t      if (*label == 0 || strcmp (label, \"<do not output>\") == 0)\n+\t\tlabel = dwarf2out_cfi_label (true);\n+\n+\t      if (fde->dw_fde_current_label == NULL\n+\t\t  || strcmp (label, fde->dw_fde_current_label) != 0)\n+\t\t{\n+\t\t  dw_cfi_ref xcfi;\n+\n+\t\t  label = xstrdup (label);\n+\n+\t\t  /* Set the location counter to the new label.  */\n+\t\t  xcfi = new_cfi ();\n+\t\t  /* It doesn't metter whether DW_CFA_set_loc\n+\t\t     or DW_CFA_advance_loc4 is added here, those aren't\n+\t\t     emitted into assembly, only looked up by\n+\t\t     convert_cfa_to_fb_loc_list.  */\n+\t\t  xcfi->dw_cfi_opc = DW_CFA_set_loc;\n+\t\t  xcfi->dw_cfi_oprnd1.dw_cfi_addr = label;\n+\t\t  add_cfi (&fde->dw_fde_cfi, xcfi);\n+\t\t  fde->dw_fde_current_label = label;\n+\t\t}\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\n+\t  output_cfi_directive (cfi);\n+\n+\t  list_head = &fde->dw_fde_cfi;\n \t}\n       /* ??? If this is a CFI for the CIE, we don't emit.  This\n \t assumes that the standard CIE contents that the assembler\n@@ -747,7 +796,7 @@ add_fde_cfi (const char *label, dw_cfi_ref cfi)\n       gcc_assert (fde != NULL);\n \n       if (*label == 0)\n-\tlabel = dwarf2out_cfi_label ();\n+\tlabel = dwarf2out_cfi_label (false);\n \n       if (fde->dw_fde_current_label == NULL\n \t  || strcmp (label, fde->dw_fde_current_label) != 0)\n@@ -1477,7 +1526,7 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n   if (offset == 0)\n     return;\n \n-  label = dwarf2out_cfi_label ();\n+  label = dwarf2out_cfi_label (false);\n   dwarf2out_args_size_adjust (offset, label);\n }\n \n@@ -2580,7 +2629,7 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n       return;\n     }\n \n-  label = dwarf2out_cfi_label ();\n+  label = dwarf2out_cfi_label (false);\n \n   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n     switch (REG_NOTE_KIND (note))\n@@ -2709,7 +2758,7 @@ dwarf2out_begin_epilogue (rtx insn)\n   /* Emit the state save.  */\n   cfi = new_cfi (); \n   cfi->dw_cfi_opc = DW_CFA_remember_state;\n-  add_fde_cfi (dwarf2out_cfi_label (), cfi);\n+  add_fde_cfi (dwarf2out_cfi_label (false), cfi);\n \n   /* And emulate the state save.  */\n   gcc_assert (!cfa_remember.in_use);\n@@ -2723,7 +2772,7 @@ void\n dwarf2out_frame_debug_restore_state (void)\n {\n   dw_cfi_ref cfi = new_cfi (); \n-  const char *label = dwarf2out_cfi_label ();\n+  const char *label = dwarf2out_cfi_label (false);\n \n   cfi->dw_cfi_opc = DW_CFA_restore_state;\n   add_fde_cfi (label, cfi);"}, {"sha": "d88d85f18c04c1ee627a05f6ca4f9ab6a5b28147", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d342c045c5b3b2e3a47814d5bd5894513bda12f1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d342c045c5b3b2e3a47814d5bd5894513bda12f1", "patch": "@@ -5025,7 +5025,7 @@ extern tree tree_overlaps_hard_reg_set (tree, HARD_REG_SET *);\n \n /* Generate a new label for the CFI info to refer to.  */\n \n-extern char *dwarf2out_cfi_label (void);\n+extern char *dwarf2out_cfi_label (bool);\n \n /* Entry point to update the canonical frame address (CFA).  */\n "}]}