{"sha": "b3ac43a3c05744d62a963d656bed782fc867ad79", "node_id": "C_kwDOANBUbNoAKGIzYWM0M2EzYzA1NzQ0ZDYyYTk2M2Q2NTZiZWQ3ODJmYzg2N2FkNzk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-09T21:44:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-11T04:00:58Z"}, "message": "libstdc++: Avoid redundant checks in std::use_facet [PR103755]\n\nWe do not need to do bounds checks or a runtime dynamic_cast when using\nstd::has_facet and std::use_facet to access the default facets that are\nguaranteed to be present in every std::locale object. We can just index\nstraight into the array and use a static_cast for the conversion.\n\nThis patch adds a new std::__try_use_facet function that is like\nstd::use_facet but returns a pointer, so can be used to implement both\nstd::has_facet and std::use_facet. We can then do the necessary\nmetaprogramming to skip the redundant checks in std::__try_use_facet.\n\nTo avoid having to export (or hide) instantiations of the new function\nfrom libstdc++.so the instantiations are given hidden visibility. This\nallows them to be used in the library, but user code will instantiate it\nagain using the definition in the header. That would happen anyway,\nbecause there are no explicit instantiation declarations for any of\nstd::has_facet, std::use_facet, or the new std::__try_use_facet.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103755\n\t* config/abi/pre/gnu.ver: Tighten patterns for facets in the\n\tbase version. Add exports for __try_use_facet.\n\t* include/bits/basic_ios.tcc (basic_ios::_M_cache_locale): Use\n\t__try_use_facet instead of has_facet and use_facet.\n\t* include/bits/fstream.tcc (basic_filebuf::basic_filebuf()):\n\tLikewise.\n\t(basic_filebuf::imbue): Likewise.\n\t* include/bits/locale_classes.h (locale, locale::id)\n\t(locale::_Impl): Declare __try_use_facet as a friend.\n\t* include/bits/locale_classes.tcc (__try_use_facet): Define new\n\tfunction template with special cases for default facets.\n\t(has_facet, use_facet): Call __try_use_facet.\n\t* include/bits/locale_facets.tcc (__try_use_facet): Declare\n\texplicit instantiations.\n\t* include/bits/locale_facets_nonio.tcc (__try_use_facet):\n\tLikewise.\n\t* src/c++11/locale-inst-monetary.h (INSTANTIATE_FACET_ACCESSORS):\n\tUse new macro for facet accessor instantiations.\n\t* src/c++11/locale-inst-numeric.h (INSTANTIATE_FACET_ACCESSORS):\n\tLikewise.\n\t* src/c++11/locale-inst.cc (INSTANTIATE_USE_FACET): Define new\n\tmacro for instantiating __try_use_facet and use_facet.\n\t(INSTANTIATE_FACET_ACCESSORS): Define new macro for also\n\tdefining has_facet.\n\t* src/c++98/compatibility-ldbl.cc (__try_use_facet):\n\tInstantiate.\n\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: Adjust\n\texpected errors.", "tree": {"sha": "18b46c22d56372621932f6e33f2b8f09ca52085a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b46c22d56372621932f6e33f2b8f09ca52085a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3ac43a3c05744d62a963d656bed782fc867ad79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ac43a3c05744d62a963d656bed782fc867ad79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ac43a3c05744d62a963d656bed782fc867ad79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ac43a3c05744d62a963d656bed782fc867ad79/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fe767c16e7c528e4fc71c8a68ac14b4573d880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fe767c16e7c528e4fc71c8a68ac14b4573d880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fe767c16e7c528e4fc71c8a68ac14b4573d880"}], "stats": {"total": 411, "additions": 276, "deletions": 135}, "files": [{"sha": "225d6dc482b5515cd8d31fc9400ac3d09cd9636f", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -133,17 +133,18 @@ GLIBCXX_3.4 {\n #     std::logic_error::~l*;\n #     std::[m-r]*;\n #     std::[m]*;\n-      std::messages[^_]*;\n+#     std::messages[^_]*;\n #     std::messages_byname*;\n-      std::money_*;\n-      std::moneypunct[^_]*;\n+#     std::money_*;\n+      std::money_base*;\n+#     std::moneypunct[^_]*;\n #     std::moneypunct_byname*;\n #     std::n[^u]*;\n       std::n[^aueo]*;\n       std::nothrow;\n       std::nu[^m]*;\n-      std::num[^ep]*;\n-      std::numpunct[^_]*;\n+      std::num[^_ep]*;\n+#     std::numpunct[^_]*;\n #     std::numpunct_byname*;\n       std::ostrstream*;\n #     std::out_of_range::o*;\n@@ -597,28 +598,49 @@ GLIBCXX_3.4 {\n     _ZNSt12ctype_bynameI[cw]ED*;\n \n     # std::num_get\n+    _ZNSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[CD][012]*;\n+    _ZNSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE2idE;\n     _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n     _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE14_M_extract_intI*;\n-    _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE16_M_extract_floatI*;\n+    _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE16_M_extract_float*;\n \n     # std::num_put\n+    _ZNSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[CD][012]*;\n+    _ZNSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE2idE;\n     _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n     _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE1[234]*;\n     _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE15_M_insert_floatI*;\n \n+    # std::numpunct\n+    _ZNSt8numpunctI[cw]E[CD][012]*;\n+    _ZNSt8numpunctI[cw]E2idE;\n+    _ZNSt8numpunctI[cw]E[2]*;\n+    _ZNKSt8numpunctI[cw]E[189]*;\n+\n     # std::numpunct_byname\n     _ZNSt15numpunct_bynameI[cw]EC[12]EPKc[jmy];\n     _ZNSt15numpunct_bynameI[cw]ED*;\n \n     # std::money_get\n+    _ZNSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[CD][012]*;\n+    _ZNSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE2idE;\n     _ZNKSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n     _ZNKSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE10_M_extractILb[01]EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs;\n \n     # std::money_put\n+    _ZNSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[CD][012]*;\n+    _ZNSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE2idE;\n     _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[1-8]*;\n     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb[01]EEES3_S3_RSt8ios_basecRKSs;\n     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb[01]EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE;\n \n+    # std::moneypunct\n+    _ZNSt10moneypunctI[cw]Lb[01]EE[CD][012]*;\n+    _ZNSt10moneypunctI[cw]Lb[01]EE2idE;\n+    _ZNSt10moneypunctI[cw]Lb[01]EE24*;\n+    _ZNSt10moneypunctI[cw]Lb[01]EE4intlE;\n+    _ZNKSt10moneypunctI[cw]Lb[01]EE[18]*;\n+\n     # std::moneypunct_byname\n     _ZNSt17moneypunct_bynameI[cw]Lb[01]EEC[12]EPKc[jmy];\n     _ZNSt17moneypunct_bynameI[cw]Lb[01]EED*;\n@@ -657,6 +679,11 @@ GLIBCXX_3.4 {\n     _ZNSt14numeric_limitsI[a-m]E1[0-7]max_e*;\n     _ZNSt14numeric_limitsI[p-z]E1[0-7]max_e*;\n \n+    # std::messages\n+    _ZNSt8messagesI[cw]E[CD][012]*;\n+    _ZNSt8messagesI[cw]E2idE;\n+    _ZNKSt8messagesI[cw]E[1-8]*;\n+\n     # std::messages_byname\n     _ZNSt15messages_bynameI[cw]EC[12]EPKc[jmy];\n     _ZNSt15messages_bynameI[cw]ED*;\n@@ -2446,6 +2473,7 @@ GLIBCXX_3.4.30 {\n \n GLIBCXX_3.4.31 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE15_M_replace_cold*;\n+\n     _ZSt20__to_chars_float16_tPcS_fSt12chars_format;\n     _ZSt21__to_chars_bfloat16_tPcS_fSt12chars_format;\n     _ZSt22__from_chars_float16_tPKcS0_RfSt12chars_format;\n@@ -2454,6 +2482,9 @@ GLIBCXX_3.4.31 {\n     _ZSt8to_charsPcS_DF128_St12chars_format;\n     _ZSt8to_charsPcS_DF128_St12chars_formati;\n     _ZSt10from_charsPKcS0_RDF128_St12chars_format;\n+\n+    _ZSt15__try_use_facet*;\n+\n } GLIBCXX_3.4.30;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "15d35a46cf4e22973a268c7f9c1dc08b36b24c9f", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -156,20 +156,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)\n     {\n-      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n-\t_M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));\n-      else\n-\t_M_ctype = 0;\n-\n-      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))\n-\t_M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));\n-      else\n-\t_M_num_put = 0;\n-\n-      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))\n-\t_M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));\n-      else\n-\t_M_num_get = 0;\n+      _M_ctype = std::__try_use_facet<__ctype_type>(__loc);\n+      _M_num_put = std::__try_use_facet<__num_put_type>(__loc);\n+      _M_num_get = std::__try_use_facet<__num_get_type>(__loc);\n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "8158ab30312541916834c81f1dba42a2d7ddf3ad", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -86,8 +86,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),\n     _M_ext_end(0)\n     {\n-      if (has_facet<__codecvt_type>(this->_M_buf_locale))\n-\t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n+      _M_codecvt = std::__try_use_facet<__codecvt_type>(this->_M_buf_locale);\n     }\n \n #if __cplusplus >= 201103L\n@@ -1028,9 +1027,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       bool __testvalid = true;\n \n-      const __codecvt_type* _M_codecvt_tmp = 0;\n-      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\n-\t_M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);\n+      const __codecvt_type* const _M_codecvt_tmp\n+\t= __try_use_facet<__codecvt_type>(__loc);\n \n       if (this->is_open())\n \t{"}, {"sha": "6912a54d607b9f364a7b58f4c9f17d8d92f7dfd2", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -82,6 +82,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend const _Facet&\n       use_facet(const locale&);\n \n+    template<typename _Facet>\n+      friend const _Facet*\n+      __try_use_facet(const locale&) _GLIBCXX_NOTHROW;\n+\n     template<typename _Cache>\n       friend struct __use_cache;\n \n@@ -496,6 +500,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       has_facet(const locale&) throw();\n \n+    template<typename _Facet>\n+      friend const _Facet*\n+      __try_use_facet(const locale&) _GLIBCXX_NOTHROW;\n+\n     // NB: There is no accessor for _M_index because it may be used\n     // before the constructor is run; the effect of calling a member\n     // function (even an inline) would be undefined.\n@@ -536,6 +544,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend const _Facet&\n       use_facet(const locale&);\n \n+    template<typename _Facet>\n+      friend const _Facet*\n+      __try_use_facet(const locale&) _GLIBCXX_NOTHROW;\n+\n     template<typename _Cache>\n       friend struct __use_cache;\n "}, {"sha": "7a67f5cd31517574da8515fab7a3bbd897d79ba0", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 84, "deletions": 15, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -87,6 +87,68 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t__s2.data(), __s2.data() + __s2.length()) < 0);\n     }\n \n+  template<typename _Facet>\n+    inline const _Facet*\n+    __try_use_facet(const locale& __loc) _GLIBCXX_NOTHROW\n+    {\n+      const size_t __i = _Facet::id._M_id();\n+      const locale::facet** __facets = __loc._M_impl->_M_facets;\n+\n+      // We know these standard facets are always installed in every locale\n+      // so dynamic_cast always succeeds, just use static_cast instead.\n+#define _GLIBCXX_STD_FACET(...) \\\n+      if _GLIBCXX17_CONSTEXPR (__is_same(_Facet, __VA_ARGS__)) \\\n+\treturn static_cast<const _Facet*>(__facets[__i])\n+\n+      _GLIBCXX_STD_FACET(ctype<char>);\n+      _GLIBCXX_STD_FACET(num_get<char>);\n+      _GLIBCXX_STD_FACET(num_put<char>);\n+      _GLIBCXX_STD_FACET(codecvt<char, char, mbstate_t>);\n+      _GLIBCXX_STD_FACET(collate<char>);\n+      _GLIBCXX_STD_FACET(moneypunct<char>);\n+      _GLIBCXX_STD_FACET(moneypunct<char, true>);\n+      _GLIBCXX_STD_FACET(money_get<char>);\n+      _GLIBCXX_STD_FACET(money_put<char>);\n+      _GLIBCXX_STD_FACET(numpunct<char>);\n+      _GLIBCXX_STD_FACET(time_get<char>);\n+      _GLIBCXX_STD_FACET(time_put<char>);\n+      _GLIBCXX_STD_FACET(messages<char>);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+      _GLIBCXX_STD_FACET(ctype<wchar_t>);\n+      _GLIBCXX_STD_FACET(num_get<wchar_t>);\n+      _GLIBCXX_STD_FACET(num_put<wchar_t>);\n+      _GLIBCXX_STD_FACET(codecvt<wchar_t, char, mbstate_t>);\n+      _GLIBCXX_STD_FACET(collate<wchar_t>);\n+      _GLIBCXX_STD_FACET(moneypunct<wchar_t>);\n+      _GLIBCXX_STD_FACET(moneypunct<wchar_t, true>);\n+      _GLIBCXX_STD_FACET(money_get<wchar_t>);\n+      _GLIBCXX_STD_FACET(money_put<wchar_t>);\n+      _GLIBCXX_STD_FACET(numpunct<wchar_t>);\n+      _GLIBCXX_STD_FACET(time_get<wchar_t>);\n+      _GLIBCXX_STD_FACET(time_put<wchar_t>);\n+      _GLIBCXX_STD_FACET(messages<wchar_t>);\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      _GLIBCXX_STD_FACET(codecvt<char8_t, char, mbstate_t>);\n+#endif\n+#if __cplusplus >= 201103L\n+      _GLIBCXX_STD_FACET(codecvt<char16_t, char, mbstate_t>);\n+      _GLIBCXX_STD_FACET(codecvt<char32_t, char, mbstate_t>);\n+#endif\n+\n+#undef _GLIBCXX_STD_FACET\n+\n+      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])\n+\treturn 0;\n+\n+#if __cpp_rtti\n+      return dynamic_cast<const _Facet*>(__facets[__i]);\n+#else\n+      return static_cast<const _Facet*>(__facets[__i]);\n+#endif\n+    }\n+\n   /**\n    *  @brief  Test for the presence of a facet.\n    *  @ingroup locales\n@@ -100,17 +162,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return  true if @p __loc contains a facet of type _Facet, else false.\n   */\n   template<typename _Facet>\n-    bool\n+    inline bool\n     has_facet(const locale& __loc) throw()\n     {\n-      const size_t __i = _Facet::id._M_id();\n-      const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      return (__i < __loc._M_impl->_M_facets_size\n-#if __cpp_rtti\n-\t      && dynamic_cast<const _Facet*>(__facets[__i]));\n+#if __cplusplus >= 201103L\n+      static_assert(__is_base_of(locale::facet, _Facet),\n+\t\t    \"template argument must be derived from locale::facet\");\n #else\n-              && static_cast<const _Facet*>(__facets[__i]));\n+      (void) static_cast<const _Facet*>(static_cast<const locale::facet*>(0));\n #endif\n+      return std::__try_use_facet<_Facet>(__loc) != 0;\n     }\n \n   /**\n@@ -130,18 +191,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdangling-reference\"\n   template<typename _Facet>\n-    const _Facet&\n+    inline const _Facet&\n     use_facet(const locale& __loc)\n     {\n-      const size_t __i = _Facet::id._M_id();\n-      const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])\n-        __throw_bad_cast();\n-#if __cpp_rtti\n-      return dynamic_cast<const _Facet&>(*__facets[__i]);\n+#if __cplusplus >= 201103L\n+      static_assert(__is_base_of(locale::facet, _Facet),\n+\t\t    \"template argument must be derived from locale::facet\");\n #else\n-      return static_cast<const _Facet&>(*__facets[__i]);\n+      (void) static_cast<const _Facet*>(static_cast<const locale::facet*>(0));\n #endif\n+      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))\n+\treturn *__f;\n+      __throw_bad_cast();\n     }\n #pragma GCC diagnostic pop\n \n@@ -273,6 +334,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern template class collate<char>;\n   extern template class collate_byname<char>;\n \n+  extern template\n+    const collate<char>*\n+    __try_use_facet<collate<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n   extern template\n     const collate<char>&\n     use_facet<collate<char> >(const locale&);\n@@ -285,6 +350,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern template class collate<wchar_t>;\n   extern template class collate_byname<wchar_t>;\n \n+  extern template\n+    const collate<wchar_t>*\n+    __try_use_facet<collate<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n   extern template\n     const collate<wchar_t>&\n     use_facet<collate<wchar_t> >(const locale&);"}, {"sha": "dd5c45e223b2c42c651e6885a73795c89c32d476", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -1325,6 +1325,22 @@ _GLIBCXX_END_NAMESPACE_LDBL\n   extern template class _GLIBCXX_NAMESPACE_LDBL num_put<char>;\n   extern template class ctype_byname<char>;\n \n+  extern template\n+    const ctype<char>*\n+    __try_use_facet<ctype<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const numpunct<char>*\n+    __try_use_facet<numpunct<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const num_put<char>*\n+    __try_use_facet<num_put<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const num_get<char>*\n+    __try_use_facet<num_get<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n   extern template\n     const ctype<char>&\n     use_facet<ctype<char> >(const locale&);\n@@ -1364,6 +1380,22 @@ _GLIBCXX_END_NAMESPACE_LDBL\n   extern template class _GLIBCXX_NAMESPACE_LDBL num_put<wchar_t>;\n   extern template class ctype_byname<wchar_t>;\n \n+  extern template\n+    const ctype<wchar_t>*\n+    __try_use_facet<ctype<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const numpunct<wchar_t>*\n+    __try_use_facet<numpunct<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const num_put<wchar_t>*\n+    __try_use_facet<num_put<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const num_get<wchar_t>*\n+    __try_use_facet<num_get<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n   extern template\n     const ctype<wchar_t>&\n     use_facet<ctype<wchar_t> >(const locale&);\n@@ -1380,7 +1412,7 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     const num_get<wchar_t>&\n     use_facet<num_get<wchar_t> >(const locale&);\n \n- extern template\n+  extern template\n     bool\n     has_facet<ctype<wchar_t> >(const locale&);\n "}, {"sha": "320bcf222068d8240d7f2ab1c41f40c8770a0c3a", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -1691,6 +1691,38 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n   extern template class messages<char>;\n   extern template class messages_byname<char>;\n \n+  extern template\n+    const moneypunct<char, true>*\n+    __try_use_facet<moneypunct<char, true> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const moneypunct<char, false>*\n+    __try_use_facet<moneypunct<char, false> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const money_put<char>*\n+    __try_use_facet<money_put<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const money_get<char>*\n+    __try_use_facet<money_get<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const __timepunct<char>*\n+    __try_use_facet<__timepunct<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const time_put<char>*\n+    __try_use_facet<time_put<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const time_get<char>*\n+    __try_use_facet<time_get<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const messages<char>*\n+    __try_use_facet<messages<char> >(const locale&) _GLIBCXX_NOTHROW;\n+\n   extern template\n     const moneypunct<char, true>&\n     use_facet<moneypunct<char, true> >(const locale&);\n@@ -1766,6 +1798,38 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n   extern template class messages<wchar_t>;\n   extern template class messages_byname<wchar_t>;\n \n+  extern template\n+    const moneypunct<wchar_t, true>*\n+    __try_use_facet<moneypunct<wchar_t, true> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const moneypunct<wchar_t, false>*\n+    __try_use_facet<moneypunct<wchar_t, false> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const money_put<wchar_t>*\n+    __try_use_facet<money_put<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const money_get<wchar_t>*\n+    __try_use_facet<money_get<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const __timepunct<wchar_t>*\n+    __try_use_facet<__timepunct<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const time_put<wchar_t>*\n+    __try_use_facet<time_put<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const time_get<wchar_t>*\n+    __try_use_facet<time_get<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n+  extern template\n+    const messages<wchar_t>*\n+    __try_use_facet<messages<wchar_t> >(const locale&) _GLIBCXX_NOTHROW;\n+\n   extern template\n     const moneypunct<wchar_t, true>&\n     use_facet<moneypunct<wchar_t, true> >(const locale&);"}, {"sha": "ff8439857d2e8985dd2355c95af0e64d51058e66", "filename": "libstdc++-v3/src/c++11/locale-inst-monetary.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-monetary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-monetary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-monetary.h?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -32,11 +32,9 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-  template const money_put<C>& use_facet<money_put<C> >(const locale&);\n-  template const money_get<C>& use_facet<money_get<C> >(const locale&);\n-\n-  template bool has_facet<money_put<C> >(const locale&);\n-  template bool has_facet<money_get<C> >(const locale&);\n+// use_facet and has_facet instantiations\n+INSTANTIATE_FACET_ACCESSORS(money_put<C>);\n+INSTANTIATE_FACET_ACCESSORS(money_get<C>);\n \n _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n   template class money_get<C, istreambuf_iterator<C> >;"}, {"sha": "4b970f75f6ef3b76607fc3a5a31922caa21be6cf", "filename": "libstdc++-v3/src/c++11/locale-inst-numeric.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-numeric.h?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -29,11 +29,9 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template const num_get<C>& use_facet<num_get<C> >(const locale&);\n-  template const num_put<C>& use_facet<num_put<C> >(const locale&);\n-\n-  template bool has_facet<num_get<C> >(const locale&);\n-  template bool has_facet<num_put<C> >(const locale&);\n+// use_facet and has_facet instantiations\n+INSTANTIATE_FACET_ACCESSORS(num_get<C>);\n+INSTANTIATE_FACET_ACCESSORS(num_put<C>);\n #endif\n \n _GLIBCXX_BEGIN_NAMESPACE_LDBL"}, {"sha": "b264cb381ec1987abaf0a40e48dddc5eee8028a0", "filename": "libstdc++-v3/src/c++11/locale-inst.cc", "status": "modified", "additions": 23, "deletions": 82, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -43,6 +43,17 @@\n # define C_is_char\n #endif\n \n+#define INSTANTIATE_USE_FACET(...)\t\t\t    \\\n+  template const __VA_ARGS__*\t\t\t\t    \\\n+    __try_use_facet< __VA_ARGS__ >(const locale&) noexcept; \\\n+  template const __VA_ARGS__&\t\t\t\t    \\\n+    use_facet<__VA_ARGS__>(const locale&)\t\t    \\\n+\n+#define INSTANTIATE_FACET_ACCESSORS(...)\t\t    \\\n+  INSTANTIATE_USE_FACET(__VA_ARGS__);\t\t\t    \\\n+  template bool\t\t\t\t\t\t    \\\n+    has_facet<__VA_ARGS__>(const locale&) noexcept\n+\n #include \"locale-inst-numeric.h\"\n #include \"locale-inst-monetary.h\"\n \n@@ -116,92 +127,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class collate_byname<C>;\n _GLIBCXX_END_NAMESPACE_CXX11\n \n-  // use_facet\n-#if ! _GLIBCXX_USE_CXX11_ABI\n-  template\n-    const ctype<C>&\n-    use_facet<ctype<C> >(const locale&);\n-\n-  template\n-    const codecvt<C, char, mbstate_t>&\n-    use_facet<codecvt<C, char, mbstate_t> >(const locale&);\n-#endif\n-\n-  template\n-    const collate<C>&\n-    use_facet<collate<C> >(const locale&);\n-\n-  template\n-    const numpunct<C>&\n-    use_facet<numpunct<C> >(const locale&);\n-\n-  template\n-    const moneypunct<C, true>&\n-    use_facet<moneypunct<C, true> >(const locale&);\n-\n-  template\n-    const moneypunct<C, false>&\n-    use_facet<moneypunct<C, false> >(const locale&);\n-\n-#if ! _GLIBCXX_USE_CXX11_ABI\n-  template\n-    const __timepunct<C>&\n-    use_facet<__timepunct<C> >(const locale&);\n-\n-  template\n-    const time_put<C>&\n-    use_facet<time_put<C> >(const locale&);\n-#endif\n-\n-  template\n-    const time_get<C>&\n-    use_facet<time_get<C> >(const locale&);\n-\n-  template\n-    const messages<C>&\n-    use_facet<messages<C> >(const locale&);\n-\n-  // has_facet\n+// use_facet and has_facet instantiations\n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template\n-    bool\n-    has_facet<ctype<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<codecvt<C, char, mbstate_t> >(const locale&);\n+INSTANTIATE_FACET_ACCESSORS(ctype<C>);\n+INSTANTIATE_FACET_ACCESSORS(codecvt<C, char, mbstate_t>);\n #endif\n-\n-  template\n-    bool\n-    has_facet<collate<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<numpunct<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<moneypunct<C> >(const locale&);\n-\n+INSTANTIATE_FACET_ACCESSORS(collate<C>);\n+INSTANTIATE_FACET_ACCESSORS(numpunct<C>);\n+INSTANTIATE_FACET_ACCESSORS(moneypunct<C, false>);\n+// No explicit instantiation of has_facet<moneypunct<C, true>> for some reason.\n+INSTANTIATE_USE_FACET      (moneypunct<C, true>);\n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template\n-    bool\n-    has_facet<__timepunct<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<time_put<C> >(const locale&);\n+INSTANTIATE_FACET_ACCESSORS(__timepunct<C>);\n+INSTANTIATE_FACET_ACCESSORS(time_put<C>);\n #endif\n-\n-  template\n-    bool\n-    has_facet<time_get<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<messages<C> >(const locale&);\n-\n+INSTANTIATE_FACET_ACCESSORS(time_get<C>);\n+INSTANTIATE_FACET_ACCESSORS(messages<C>);\n \n #if ! _GLIBCXX_USE_CXX11_ABI\n   // locale functions."}, {"sha": "55a594380376393b6b325f78fc2ac654d6adc248", "filename": "libstdc++-v3/src/c++98/compatibility-ldbl.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -48,6 +48,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   template bool has_facet<num_get<C> >(const locale&);\n   template bool has_facet<money_put<C> >(const locale&);\n   template bool has_facet<money_get<C> >(const locale&);\n+  template const num_put<C>* __try_use_facet<num_put<C> >(const locale&);\n+  template const num_get<C>* __try_use_facet<num_get<C> >(const locale&);\n+  template const money_put<C>* __try_use_facet<money_put<C> >(const locale&);\n+  template const money_get<C>* __try_use_facet<money_get<C> >(const locale&);\n #undef C\n #ifdef _GLIBCXX_USE_WCHAR_T\n #define C wchar_t\n@@ -63,6 +67,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   template bool has_facet<num_get<C> >(const locale&);\n   template bool has_facet<money_put<C> >(const locale&);\n   template bool has_facet<money_get<C> >(const locale&);\n+  template const num_put<C>* __try_use_facet<num_put<C> >(const locale&);\n+  template const num_get<C>* __try_use_facet<num_get<C> >(const locale&);\n+  template const money_put<C>* __try_use_facet<money_put<C> >(const locale&);\n+  template const money_get<C>* __try_use_facet<money_get<C> >(const locale&);\n #undef C\n #endif\n }"}, {"sha": "047df40e1d41e73ff5ec6e98b757ce20c7763a1d", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/string/89728_neg.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ac43a3c05744d62a963d656bed782fc867ad79/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc?ref=b3ac43a3c05744d62a963d656bed782fc867ad79", "patch": "@@ -17,14 +17,15 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"complete\" \"\" { target *-*-* } 0 }\n-// { dg-error \"invalid 'static_cast'\" \"\" { target { ! rtti }  } 0 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"invalid 'static_cast'\" \"\" { target c++98_only } 0 }\n \n #include <locale>\n \n template <class Char, int I>\n struct trait: std::char_traits<Char> {};\n \n+// Generates unique types so we get distinct diagnostics for each line.\n template <class Char, int I>\n std::basic_string<Char, trait<Char, I> > make_str()\n {"}]}