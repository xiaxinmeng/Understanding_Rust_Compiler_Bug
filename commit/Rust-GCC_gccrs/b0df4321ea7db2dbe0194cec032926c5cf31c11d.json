{"sha": "b0df4321ea7db2dbe0194cec032926c5cf31c11d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkZjQzMjFlYTdkYjJkYmUwMTk0Y2VjMDMyOTI2YzVjZjMxYzExZA==", "commit": {"author": {"name": "Laurent Guerby", "email": "guerby@acm.org", "date": "2001-11-17T11:35:08Z"}, "committer": {"name": "Laurent Guerby", "email": "guerby@gcc.gnu.org", "date": "2001-11-17T11:35:08Z"}, "message": "Make-lang.in (GNATLIBFLAGS): Add -W -Wall.\n\n2001-11-17  Laurent Guerby  <guerby@acm.org>\n\n\t* Make-lang.in (GNATLIBFLAGS): Add -W -Wall.\n\t* gigi.h (init_decl_processing): Rename to gnat_init_decl_processing.\n\t* io-aux.c: Provide K&R prototypes to all functions, reformat code.\n\t* lang-spec.h: Add missing struct field to silence warnings.\n\t* sysdep.c (rts_get_*): Provide K&R prototype.\n\t* sysdep.c (Unlock_Task, Lock_Task): Move to K&R prototype.\n\t* traceback.c (Unlock_Task, Lock_Task): Likewise.\n\t* tracebak.c (__gnat_backtrace): Remove unused variable.\n\t* utils.c (end_subprog_body): Move to K&R style.\n\nFrom-SVN: r47117", "tree": {"sha": "39e493e87df2945a110142da9ac42207c0aaa146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e493e87df2945a110142da9ac42207c0aaa146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0df4321ea7db2dbe0194cec032926c5cf31c11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0df4321ea7db2dbe0194cec032926c5cf31c11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0df4321ea7db2dbe0194cec032926c5cf31c11d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0df4321ea7db2dbe0194cec032926c5cf31c11d/comments", "author": null, "committer": null, "parents": [{"sha": "b605ed61ea5d9003fdee72c0dc8e86b80ee15c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b605ed61ea5d9003fdee72c0dc8e86b80ee15c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b605ed61ea5d9003fdee72c0dc8e86b80ee15c43"}], "stats": {"total": 116, "additions": 89, "deletions": 27}, "files": [{"sha": "b5a7745b7dae13a68b69268079a318003e88b41a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -1,3 +1,15 @@\n+2001-11-17  Laurent Guerby  <guerby@acm.org>\n+\n+\t* Make-lang.in (GNATLIBFLAGS): Add -W -Wall.\n+\t* gigi.h (init_decl_processing): Rename to gnat_init_decl_processing.\n+\t* io-aux.c: Provide K&R prototypes to all functions, reformat code.\n+\t* lang-spec.h: Add missing struct field to silence warnings.\n+\t* sysdep.c (rts_get_*): Provide K&R prototype.\n+\t* sysdep.c (Unlock_Task, Lock_Task): Move to K&R prototype.\n+\t* traceback.c (Unlock_Task, Lock_Task): Likewise.\n+\t* tracebak.c (__gnat_backtrace): Remove unused variable.\n+\t* utils.c (end_subprog_body): Move to K&R style.\n+\n Thu Nov 15 18:16:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* trans.c, utils2.c: Remove PALIGN parameter to get_inner_reference."}, {"sha": "ab61917d3effa38a801420b3a7816fdda95b39ea", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -48,7 +48,7 @@ shext  =\n # Extra flags to pass to recursive makes.\n BOOT_ADAFLAGS= $(ADAFLAGS)\n ADAFLAGS= -W -Wall -gnatpg -gnata\n-GNATLIBFLAGS= -gnatpg\n+GNATLIBFLAGS= -W -Wall -gnatpg\n GNATLIBCFLAGS= -g -O2\n ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n ADA_RTL_OBJ_DIR = $(libsubdir)/adalib"}, {"sha": "15d3b65871f2210166e111ce9ca734cb41bf5636", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -433,7 +433,7 @@ extern tree pushdecl\t\t\tPARAMS ((tree));\n \n /* Create the predefined scalar types such as `integer_type_node' needed \n    in the gcc back-end and initialize the global binding level.  */\n-extern void init_decl_processing\tPARAMS ((void));\n+extern void gnat_init_decl_processing\tPARAMS ((void));\n extern void init_gigi_decls\t\tPARAMS ((tree, tree));\n \n /* Return an integer type with the number of bits of precision given by  "}, {"sha": "d42f362caec72c29279a8dd06d9971c941b37daa", "filename": "gcc/ada/io-aux.c", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Fio-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Fio-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fio-aux.c?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.5 $\n+ *                            $Revision: 1.1 $\n  *                                                                          *\n  *           Copyright (C) 1992-2001 Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -34,21 +34,67 @@\n \n #include <stdio.h>\n \n+#ifdef IN_RTS\n+#include \"tconfig.h\"\n+#else\n+#include \"config.h\"\n+#endif\n+\n /* Function wrappers are needed to access the values from Ada which are */\n /* defined as C macros.                                                 */\n \n-FILE *c_stdin  (void) { return stdin; }\n-FILE *c_stdout (void) { return stdout;}\n-FILE *c_stderr (void) { return stderr;}\n+FILE *c_stdin         PARAMS ((void));\n+FILE *c_stdout        PARAMS ((void));\n+FILE *c_stderr        PARAMS ((void));\n+int seek_set_function PARAMS ((void));\n+int seek_end_function PARAMS ((void));\n+void *null_function   PARAMS ((void));\n+int c_fileno          PARAMS ((FILE *));\n+\n+FILE *\n+c_stdin () \n+{ \n+  return stdin; \n+}\n+\n+FILE *\n+c_stdout () \n+{ \n+  return stdout;\n+}\n+\n+FILE *\n+c_stderr () \n+{ \n+  return stderr;\n+}\n \n #ifndef SEEK_SET    /* Symbolic constants for the \"fseek\" function: */\n #define SEEK_SET 0  /* Set file pointer to offset */\n #define SEEK_CUR 1  /* Set file pointer to its current value plus offset */\n #define SEEK_END 2  /* Set file pointer to the size of the file plus offset */\n #endif\n \n-int   seek_set_function (void)  { return SEEK_SET; }\n-int   seek_end_function (void)  { return SEEK_END; }\n-void *null_function     (void)  { return NULL;     }\n+int   \n+seek_set_function ()  \n+{ \n+  return SEEK_SET; \n+}\n+\n+int   \n+seek_end_function ()  \n+{ \n+  return SEEK_END; \n+}\n+\n+void *null_function ()  \n+{ \n+  return NULL;     \n+}\n \n-int c_fileno (FILE *s) { return fileno (s); }\n+int \n+c_fileno (s) \n+     FILE *s;\n+{ \n+  return fileno (s); \n+}"}, {"sha": "cc29d528b17ead26dd71d99d926dcc16d08349b6", "filename": "gcc/ada/lang-specs.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flang-specs.h?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *                            $Revision: 1.17 $\n+ *                            $Revision: 1.1 $\n  *                                                                          *\n  *           Copyright (C) 1992-2001 Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -29,8 +29,8 @@\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    GNAT.  */\n \n-  {\".ads\", \"@ada\"},\n-  {\".adb\", \"@ada\"},\n+  {\".ads\", \"@ada\", 0},\n+  {\".adb\", \"@ada\", 0},\n   {\"@ada\",\n    \"gnat1 %{^I*} %{k8:-gnatk8} %{w:-gnatws} %1 %{!Q:-quiet} %{nostdinc*}\\\n     -dumpbase %{.adb:%b.adb}%{.ads:%b.ads}%{!.adb:%{!.ads:%b.ada}}\\\n@@ -40,4 +40,4 @@\n     %i %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n     %{!S:%{!gnatc:%{!gnatz:%{!gnats:as %a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}\\\n \t\t\t\t    %{!c:%e-c or -S required for Ada}\\\n-\t\t\t\t    %{!pipe:%g.s} %A\\n}}}} \"},\n+\t\t\t\t    %{!pipe:%g.s} %A\\n}}}} \", 0},"}, {"sha": "ed8988a8f5a9eea2dba53b7546915a8036ef9614", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision$\n+ *                            $Revision: 1.3 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -521,10 +521,15 @@ getc_immediate_common (stream, ch, end_of_file, avail, waiting)\n    will want to import these).  We use the same names as the routines used\n    by AdaMagic for compatibility.  */\n \n-char *rts_get_hInstance     (void) { return (GetModuleHandleA (0)); }\n-char *rts_get_hPrevInstance (void) { return (0); }\n-char *rts_get_lpCommandLine (void) { return (GetCommandLineA ()); }\n-int   rts_get_nShowCmd      (void) { return (1); }\n+char *rts_get_hInstance     PARAMS ((void));\n+char *rts_get_hPrevInstance PARAMS ((void));\n+char *rts_get_lpCommandLine PARAMS ((void));\n+int   rts_get_nShowCmd      PARAMS ((void));\n+\n+char *rts_get_hInstance     () { return (GetModuleHandleA (0)); }\n+char *rts_get_hPrevInstance () { return (0); }\n+char *rts_get_lpCommandLine () { return (GetCommandLineA ()); }\n+int   rts_get_nShowCmd      () { return (1); }\n \n #endif /* WINNT */\n #ifdef VMS\n@@ -551,10 +556,10 @@ get_gmtoff ()\n \n #if defined (_AIX) || defined (__EMX__)\n #define Lock_Task system__soft_links__lock_task\n-extern void (*Lock_Task) (void);\n+extern void (*Lock_Task) PARAMS ((void));\n \n #define Unlock_Task system__soft_links__unlock_task\n-extern void (*Unlock_Task) (void);\n+extern void (*Unlock_Task) PARAMS ((void));\n \n /* Provide reentrant version of localtime on Aix and OS/2. Note that AiX does\n    provide localtime_r, but in the library libc_r which doesn't get included"}, {"sha": "287e8d4608b544aceed92c867cd13317e81984ee", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision$\n+ *                            $Revision: 1.2 $\n  *                                                                          *\n  *           Copyright (C) 2000-2001 Ada Core Technologies, Inc.            *\n  *                                                                          *\n@@ -61,10 +61,10 @@\n #endif\n \n #define Lock_Task system__soft_links__lock_task\n-extern void (*Lock_Task) (void);\n+extern void (*Lock_Task) PARAMS ((void));\n \n #define Unlock_Task system__soft_links__unlock_task\n-extern void (*Unlock_Task) (void);\n+extern void (*Unlock_Task) PARAMS ((void));\n \n #ifndef CURRENT_STACK_FRAME\n # define CURRENT_STACK_FRAME  ({ char __csf; &__csf; })\n@@ -202,7 +202,6 @@ __gnat_backtrace (array, size, exclude_min, exclude_max)\n   struct layout *current;\n   void *top_frame;\n   void *top_stack;\n-  void *ret;\n   int cnt = 0;\n \n #ifdef PROTECT_SEGV"}, {"sha": "e5375b4b96a8a2da00906e27dd84fdbaadd17a24", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0df4321ea7db2dbe0194cec032926c5cf31c11d/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=b0df4321ea7db2dbe0194cec032926c5cf31c11d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.3 $\n+ *                            $Revision: 1.4 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -1829,7 +1829,7 @@ begin_subprog_body (subprog_decl)\n    to assembler language output.  */\n \n void\n-end_subprog_body (void)\n+end_subprog_body ()\n {\n   tree decl;\n   tree cico_list;"}]}