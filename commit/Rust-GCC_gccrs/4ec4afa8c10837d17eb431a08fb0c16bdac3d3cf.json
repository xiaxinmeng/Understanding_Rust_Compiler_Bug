{"sha": "4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVjNGFmYThjMTA4MzdkMTdlYjQzMWEwOGZiMGMxNmJkYWMzZDNjZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-02-12T11:58:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-02-12T11:58:40Z"}, "message": "[PR c++/84263] GC ICE with decltype\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-02/msg00435.html\n\tPR c++/84263\n\t* parser.c (cp_parser_decltype): Push and pop\n\tdeferring_access_checks.  Reorganize to avoid goto.\n\n\t* g++.dg/parse/pr84263.C: New.\n\nFrom-SVN: r257584", "tree": {"sha": "7a110bd311e8c5013a731a8fe37d27b5163b5d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a110bd311e8c5013a731a8fe37d27b5163b5d58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "790cc674b649940c8981023a3249db946b6aced4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790cc674b649940c8981023a3249db946b6aced4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790cc674b649940c8981023a3249db946b6aced4"}], "stats": {"total": 157, "additions": 103, "deletions": 54}, "files": [{"sha": "2f12a35a1b536483b5c431483002791c38bfcab0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "patch": "@@ -1,3 +1,9 @@\n+2018-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/84263\n+\t* parser.c (cp_parser_decltype): Push and pop\n+\tdeferring_access_checks.  Reorganize to avoid goto.\n+\n 2018-02-12  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/84281"}, {"sha": "e1e8741d21de84ede76be197f3a99e7348a9e777", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 57, "deletions": 54, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "patch": "@@ -14049,12 +14049,7 @@ cp_parser_decltype_expr (cp_parser *parser,\n static tree\n cp_parser_decltype (cp_parser *parser)\n {\n-  tree expr;\n   bool id_expression_or_member_access_p = false;\n-  const char *saved_message;\n-  bool saved_integral_constant_expression_p;\n-  bool saved_non_integral_constant_expression_p;\n-  bool saved_greater_than_is_operator_p;\n   cp_token *start_token = cp_lexer_peek_token (parser->lexer);\n \n   if (start_token->type == CPP_DECLTYPE)\n@@ -14073,77 +14068,83 @@ cp_parser_decltype (cp_parser *parser)\n   if (!parens.require_open (parser))\n     return error_mark_node;\n \n-  /* decltype (auto) */\n+  push_deferring_access_checks (dk_deferred);\n+\n+  tree expr = NULL_TREE;\n+  \n   if (cxx_dialect >= cxx14\n       && cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))\n+    /* decltype (auto) */\n+    cp_lexer_consume_token (parser->lexer);\n+  else\n     {\n-      cp_lexer_consume_token (parser->lexer);\n-      if (!parens.require_close (parser))\n-\treturn error_mark_node;\n-      expr = make_decltype_auto ();\n-      AUTO_IS_DECLTYPE (expr) = true;\n-      goto rewrite;\n-    }\n-\n-  /* Types cannot be defined in a `decltype' expression.  Save away the\n-     old message.  */\n-  saved_message = parser->type_definition_forbidden_message;\n+      /* decltype (expression)  */\n \n-  /* And create the new one.  */\n-  parser->type_definition_forbidden_message\n-    = G_(\"types may not be defined in %<decltype%> expressions\");\n+      /* Types cannot be defined in a `decltype' expression.  Save away the\n+\t old message and set the new one.  */\n+      const char *saved_message = parser->type_definition_forbidden_message;\n+      parser->type_definition_forbidden_message\n+\t= G_(\"types may not be defined in %<decltype%> expressions\");\n \n-  /* The restrictions on constant-expressions do not apply inside\n-     decltype expressions.  */\n-  saved_integral_constant_expression_p\n-    = parser->integral_constant_expression_p;\n-  saved_non_integral_constant_expression_p\n-    = parser->non_integral_constant_expression_p;\n-  parser->integral_constant_expression_p = false;\n+      /* The restrictions on constant-expressions do not apply inside\n+\t decltype expressions.  */\n+      bool saved_integral_constant_expression_p\n+\t= parser->integral_constant_expression_p;\n+      bool saved_non_integral_constant_expression_p\n+\t= parser->non_integral_constant_expression_p;\n+      parser->integral_constant_expression_p = false;\n \n-  /* Within a parenthesized expression, a `>' token is always\n-     the greater-than operator.  */\n-  saved_greater_than_is_operator_p\n-    = parser->greater_than_is_operator_p;\n-  parser->greater_than_is_operator_p = true;\n+      /* Within a parenthesized expression, a `>' token is always\n+\t the greater-than operator.  */\n+      bool saved_greater_than_is_operator_p\n+\t= parser->greater_than_is_operator_p;\n+      parser->greater_than_is_operator_p = true;\n \n-  /* Do not actually evaluate the expression.  */\n-  ++cp_unevaluated_operand;\n+      /* Do not actually evaluate the expression.  */\n+      ++cp_unevaluated_operand;\n \n-  /* Do not warn about problems with the expression.  */\n-  ++c_inhibit_evaluation_warnings;\n+      /* Do not warn about problems with the expression.  */\n+      ++c_inhibit_evaluation_warnings;\n \n-  expr = cp_parser_decltype_expr (parser, id_expression_or_member_access_p);\n+      expr = cp_parser_decltype_expr (parser, id_expression_or_member_access_p);\n \n-  /* Go back to evaluating expressions.  */\n-  --cp_unevaluated_operand;\n-  --c_inhibit_evaluation_warnings;\n+      /* Go back to evaluating expressions.  */\n+      --cp_unevaluated_operand;\n+      --c_inhibit_evaluation_warnings;\n \n-  /* The `>' token might be the end of a template-id or\n-     template-parameter-list now.  */\n-  parser->greater_than_is_operator_p\n-    = saved_greater_than_is_operator_p;\n+      /* The `>' token might be the end of a template-id or\n+\t template-parameter-list now.  */\n+      parser->greater_than_is_operator_p\n+\t= saved_greater_than_is_operator_p;\n \n-  /* Restore the old message and the integral constant expression\n-     flags.  */\n-  parser->type_definition_forbidden_message = saved_message;\n-  parser->integral_constant_expression_p\n-    = saved_integral_constant_expression_p;\n-  parser->non_integral_constant_expression_p\n-    = saved_non_integral_constant_expression_p;\n+      /* Restore the old message and the integral constant expression\n+\t flags.  */\n+      parser->type_definition_forbidden_message = saved_message;\n+      parser->integral_constant_expression_p\n+\t= saved_integral_constant_expression_p;\n+      parser->non_integral_constant_expression_p\n+\t= saved_non_integral_constant_expression_p;\n+    }\n \n   /* Parse to the closing `)'.  */\n   if (!parens.require_close (parser))\n     {\n       cp_parser_skip_to_closing_parenthesis (parser, true, false,\n \t\t\t\t\t     /*consume_paren=*/true);\n+      pop_deferring_access_checks ();\n       return error_mark_node;\n     }\n \n-  expr = finish_decltype_type (expr, id_expression_or_member_access_p,\n-\t\t\t       tf_warning_or_error);\n+  if (!expr)\n+    {\n+      /* Build auto.  */\n+      expr = make_decltype_auto ();\n+      AUTO_IS_DECLTYPE (expr) = true;\n+    }\n+  else\n+    expr = finish_decltype_type (expr, id_expression_or_member_access_p,\n+\t\t\t\t tf_warning_or_error);\n \n- rewrite:\n   /* Replace the decltype with a CPP_DECLTYPE so we don't need to parse\n      it again.  */\n   start_token->type = CPP_DECLTYPE;\n@@ -14153,6 +14154,8 @@ cp_parser_decltype (cp_parser *parser)\n   start_token->keyword = RID_MAX;\n   cp_lexer_purge_tokens_after (parser->lexer, start_token);\n \n+  pop_to_parent_deferring_access_checks ();\n+  \n   return expr;\n }\n "}, {"sha": "677fed9da3f419d7b62c7e053cc915ed1823dbfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "patch": "@@ -1,3 +1,7 @@\n+2018-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/parse/pr84263.C: New.\n+\n 2018-02-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/79626"}, {"sha": "e492d8c9e2573c858cda3131a6ac5903d45215da", "filename": "gcc/testsuite/g++.dg/parse/pr84263.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr84263.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr84263.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr84263.C?ref=4ec4afa8c10837d17eb431a08fb0c16bdac3d3cf", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"--param ggc-min-expand=0 --param ggc-min-heapsize=0\" }\n+// PR 84263, a GC bug exposed on i686 native compiler (and possibly\n+// other 32-bit hosts).  decltype parsing could create a \n+// pointer that would be gc-freed by later actions.\n+\n+namespace std {\n+template <typename a> struct b {\n+  int c;\n+  a d;\n+};\n+template <typename> class g;\n+template <class> class initializer_list {\n+  void *e;\n+  __SIZE_TYPE__ f;\n+};\n+class h;\n+class j {\n+  typedef b<h> i;\n+\n+public:\n+  j();\n+  j(initializer_list<i>);\n+};\n+template <typename> struct m;\n+template <int k> struct m<char[k]> {};\n+class h {\n+public:\n+  template <typename l> h(l &);\n+};\n+class G {\n+  G();\n+  j n;\n+};\n+G::G() { n = decltype(n){{0, \"\"}, {1, \".unoLineArrowEnd\"}}; }\n+}"}]}