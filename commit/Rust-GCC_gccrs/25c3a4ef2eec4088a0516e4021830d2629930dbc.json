{"sha": "25c3a4ef2eec4088a0516e4021830d2629930dbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVjM2E0ZWYyZWVjNDA4OGEwNTE2ZTQwMjE4MzBkMjYyOTkzMGRiYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-22T17:23:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-22T17:23:14Z"}, "message": "predict.c (estimate_bb_frequencies): Do not handle conditional jumps jumping to fallthru basic block as conditional...\n\n\n\t* predict.c (estimate_bb_frequencies): Do not handle conditional\n\tjumps jumping to fallthru basic block as conditional jumps.\n\n\t* tm.texi (GCOV_TYPE_SIZE): Document.\n\t* basic-block.h (gcov_type): Define.\n\t(struct edge_def): Use gcov_type for count field.\n\t(struct basic_block_def): Likewise.\n\t* defaults.h (GCOV_TYPE_SIZE): Define.\n\t* final.c (end_final): Use GCOV_TYPE_SIZE.\n\t* flow.c (dump_edge_info, dump_flow_info, dump_bb): Print count fields\n\tusing HOST_WIDEST_INT_PRINT_DEC.\n\t* gcov-io.h (__fetch_gcov_type, __store_gcov_type, __read_gcov_type,\n\t__write_gcov_type): New.\n\t(store_long): Remove.\n\t* gcov.c (gcov_type): Set default.\n\t(struct adj_list): Use gcov_type for arc_count.\n\t(bb_info): Use gcov_type for succ_count, pred_count and exec_count.\n\t(create_program_flow_graph): Read arc_count properly.\n\t(solve_program_flow_graph): 'total' is gcov_type.\n\t(output_data): Line_counts is gcov_type, print it properly.\n\t* libgcc2.c (struct bb): Counts is gcov_type.\n\t(__bb_exit_func): Use __read_gcov_type and __write_gcov_type.\n\t* profile.c (LONG_TYPE_SIZE, LONG_LONG_TYPE_SIZE): Set default.\n\t(GCOV_TYPE_SIZE): Define.\n\t(struct bb_info): succ_count and pred_count is gcov_type.\n\t(compute_branch_probabilities): Use __read_gcov_type,\n\tprint read edges to the dump file.\n\t(total): Is gcov_type.\n\t(gen_edge_profiler): Use GCOV_TYPE_SIZE.\n\nFrom-SVN: r43506", "tree": {"sha": "dd8484defdb75a57e43380239e2d1f1b2bcafed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd8484defdb75a57e43380239e2d1f1b2bcafed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25c3a4ef2eec4088a0516e4021830d2629930dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c3a4ef2eec4088a0516e4021830d2629930dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c3a4ef2eec4088a0516e4021830d2629930dbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c3a4ef2eec4088a0516e4021830d2629930dbc/comments", "author": null, "committer": null, "parents": [{"sha": "b2aec5c0ebe5c21cf62cc40f578ebc800ea02e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2aec5c0ebe5c21cf62cc40f578ebc800ea02e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2aec5c0ebe5c21cf62cc40f578ebc800ea02e7a"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "d6c7f33d04b35abaa1608b7f3cd3b363e3e0c4f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c3a4ef2eec4088a0516e4021830d2629930dbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c3a4ef2eec4088a0516e4021830d2629930dbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25c3a4ef2eec4088a0516e4021830d2629930dbc", "patch": "@@ -1,3 +1,8 @@\n+Fri Jun 22 19:20:59 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (estimate_bb_frequencies): Do not handle conditional\n+\tjumps jumping to fallthru basic block as conditional jumps.\n+\n Fri Jun 22 19:11:28 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* regs.h (struct reg_info_def): Add freq field."}, {"sha": "8e3602257189c0ecc4dc50e8a55f5c77ba8aad58", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c3a4ef2eec4088a0516e4021830d2629930dbc/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c3a4ef2eec4088a0516e4021830d2629930dbc/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=25c3a4ef2eec4088a0516e4021830d2629930dbc", "patch": "@@ -25,9 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/types.h>\n \n static int __fetch_long\tPARAMS ((long *, char *, size_t)) ATTRIBUTE_UNUSED;\n-static int __store_long PARAMS ((long, char *, size_t)) ATTRIBUTE_UNUSED;\n static int __read_long  PARAMS ((long *, FILE *, size_t)) ATTRIBUTE_UNUSED;\n static int __write_long PARAMS ((long, FILE *, size_t)) ATTRIBUTE_UNUSED;\n+static int __fetch_gcov_type PARAMS ((gcov_type *, char *, size_t)) ATTRIBUTE_UNUSED;\n+static int __store_gcov_type PARAMS ((gcov_type, char *, size_t)) ATTRIBUTE_UNUSED;\n+static int __read_gcov_type  PARAMS ((gcov_type *, FILE *, size_t)) ATTRIBUTE_UNUSED;\n+static int __write_gcov_type PARAMS ((gcov_type, FILE *, size_t)) ATTRIBUTE_UNUSED;\n \n /* These routines only work for signed values. */\n \n@@ -36,8 +39,8 @@ static int __write_long PARAMS ((long, FILE *, size_t)) ATTRIBUTE_UNUSED;\n    to store. */\n \n static int\n-__store_long (value, dest, bytes)\n-     long value;\n+__store_gcov_type (value, dest, bytes)\n+     gcov_type value;\n      char *dest;\n      size_t bytes;\n {\n@@ -46,7 +49,7 @@ __store_long (value, dest, bytes)\n \n   if (value < 0)\n     {\n-      long oldvalue = value;\n+      gcov_type oldvalue = value;\n       value = -value;\n       if (oldvalue != -value)\n \treturn 1;\n@@ -70,6 +73,29 @@ __store_long (value, dest, bytes)\n    the result in DEST. Returns a non-zero value if the value in SOURCE\n    will not fit in DEST. */\n \n+static int\n+__fetch_gcov_type (dest, source, bytes)\n+     gcov_type *dest;\n+     char *source;\n+     size_t bytes;\n+{\n+  gcov_type value = 0;\n+  int i;\n+\n+  for (i = bytes - 1; (size_t) i > (sizeof (*dest) - 1); i--)\n+    if (source[i] & ((size_t) i == (bytes - 1) ? 127 : 255 ))\n+      return 1;\n+\n+  for (; i >= 0; i--)\n+    value = value * 256 + (source[i] & ((size_t)i == (bytes - 1) ? 127 : 255));\n+\n+  if ((source[bytes - 1] & 128) && (value > 0))\n+    value = - value;\n+\n+  *dest = value;\n+  return 0;\n+}\n+\n static int\n __fetch_long (dest, source, bytes)\n      long *dest;\n@@ -102,6 +128,20 @@ __fetch_long (dest, source, bytes)\n \n    BYTES may be a maximum of 10. */\n \n+static int\n+__write_gcov_type (value, file, bytes)\n+     gcov_type value;\n+     FILE *file;\n+     size_t bytes;\n+{\n+  char c[10];\n+\n+  if (bytes > 10 || __store_gcov_type (value, c, bytes))\n+    return 1;\n+  else\n+    return fwrite(c, 1, bytes, file) != bytes;\n+}\n+\n static int\n __write_long (value, file, bytes)\n      long value;\n@@ -110,7 +150,7 @@ __write_long (value, file, bytes)\n {\n   char c[10];\n \n-  if (bytes > 10 || __store_long (value, c, bytes))\n+  if (bytes > 10 || __store_gcov_type ((gcov_type)value, c, bytes))\n     return 1;\n   else\n     return fwrite(c, 1, bytes, file) != bytes;\n@@ -125,6 +165,20 @@ __write_long (value, file, bytes)\n \n    BYTES may be a maximum of 10. */\n \n+static int\n+__read_gcov_type (dest, file, bytes)\n+     gcov_type *dest;\n+     FILE *file;\n+     size_t bytes;\n+{\n+  char c[10];\n+\n+  if (bytes > 10 || fread(c, 1, bytes, file) != bytes)\n+    return 1;\n+  else\n+    return __fetch_gcov_type (dest, c, bytes);\n+}\n+\n static int\n __read_long (dest, file, bytes)\n      long *dest;"}, {"sha": "e51128264dbef9cd31aa0e3f6f8d05ee01a7fa12", "filename": "gcc/predict.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c3a4ef2eec4088a0516e4021830d2629930dbc/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c3a4ef2eec4088a0516e4021830d2629930dbc/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=25c3a4ef2eec4088a0516e4021830d2629930dbc", "patch": "@@ -187,8 +187,18 @@ dump_prediction (predictor, probability, bb)\n \t   probability * 100.0 / REG_BR_PROB_BASE);\n \n   if (bb->count)\n-    fprintf (rtl_dump_file, \"  exec %i hit %i (%.1f%%)\",\n-\t     bb->count, e->count, e->count * 100.0 / bb->count);\n+    {\n+      fprintf (rtl_dump_file, \"  exec \",\n+\t       bb->count, e->count, e->count * 100.0 / bb->count);\n+      fprintf (rtl_dump_file, HOST_WIDEST_INT_PRINT_DEC,\n+\t       (HOST_WIDEST_INT) bb->count);\n+      fprintf (rtl_dump_file, \" hit \",\n+\t       e->count, e->count * 100.0 / bb->count);\n+      fprintf (rtl_dump_file, HOST_WIDEST_INT_PRINT_DEC,\n+\t       (HOST_WIDEST_INT) e->count);\n+      fprintf (rtl_dump_file, \" (%.1f%%)\",\n+\t       e->count, e->count * 100.0 / bb->count);\n+    }\n   fprintf (rtl_dump_file, \"\\n\");\n }\n \n@@ -701,7 +711,9 @@ estimate_bb_frequencies (loops)\n       int probability;\n       edge fallthru, branch;\n \n-      if (GET_CODE (last_insn) != JUMP_INSN || !any_condjump_p (last_insn))\n+      if (GET_CODE (last_insn) != JUMP_INSN || !any_condjump_p (last_insn)\n+\t  /* Avoid handling of conditionals jump jumping to fallthru edge.  */\n+\t  || BASIC_BLOCK (i)->succ->succ_next == NULL)\n \t{\n \t  /* We can predict only conditional jumps at the moment.\n \t     Expect each edge to be equall probable."}]}