{"sha": "49576e25cbab7891bc3296e2bcd84d0c284560a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1NzZlMjVjYmFiNzg5MWJjMzI5NmUyYmNkODRkMGMyODQ1NjBhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-09-20T10:36:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-09-20T10:36:05Z"}, "message": "configure.ac (gcc_cv_ld_mips_personality_relaxation): New feature check.\n\ngcc/\n\t* configure.ac (gcc_cv_ld_mips_personality_relaxation): New\n\tfeature check.\n\t(HAVE_LD_PERSONALITY_RELAXATION): New macro definition.\n\t* configure, config.in: Regenerate.\n\t* dwarf2asm.c (eh_data_format_name): Handle DW_EH_PE_indirect |\n\tDW_EH_PE_absptr.\n\t* config/mips/mips.h (TARGET_WRITABLE_EH_FRAME): New macro.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Define.  Use MIPS_EH_INDIRECT\n\tfor global data if the output could be used in a shared library.\n\t* config/mips/mips.c (mips_override_options): Set flag_dwarf2_cfi_asm\n\tto 0 if TARGET_WRITABLE_EH_FRAME.\n\nFrom-SVN: r151896", "tree": {"sha": "a84e1e4e16568ba17408fdb8f2fe99d6a35e7ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a84e1e4e16568ba17408fdb8f2fe99d6a35e7ea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49576e25cbab7891bc3296e2bcd84d0c284560a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49576e25cbab7891bc3296e2bcd84d0c284560a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49576e25cbab7891bc3296e2bcd84d0c284560a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49576e25cbab7891bc3296e2bcd84d0c284560a6/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63c6c7e070b9c79d0a797ed50fa90c8f1d35480d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c6c7e070b9c79d0a797ed50fa90c8f1d35480d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c6c7e070b9c79d0a797ed50fa90c8f1d35480d"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "91b323e5f8cc30861bb055dc10a664191c0a2311", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -1,3 +1,17 @@\n+2009-09-20  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* configure.ac (gcc_cv_ld_mips_personality_relaxation): New\n+\tfeature check.\n+\t(HAVE_LD_PERSONALITY_RELAXATION): New macro definition.\n+\t* configure, config.in: Regenerate.\n+\t* dwarf2asm.c (eh_data_format_name): Handle DW_EH_PE_indirect |\n+\tDW_EH_PE_absptr.\n+\t* config/mips/mips.h (TARGET_WRITABLE_EH_FRAME): New macro.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Define.  Use MIPS_EH_INDIRECT\n+\tfor global data if the output could be used in a shared library.\n+\t* config/mips/mips.c (mips_override_options): Set flag_dwarf2_cfi_asm\n+\tto 0 if TARGET_WRITABLE_EH_FRAME.\n+\n 2009-09-20  Paolo Bonzini <bonzini@gnu.org>\n \n \tPR/39886"}, {"sha": "9ee0bde2b5a42bad6eaea13f1f1e77bbcd229a60", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -1108,6 +1108,13 @@\n #endif\n \n \n+/* Define if your linker can relax absolute .eh_frame personality pointers\n+   into PC-relative form. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_PERSONALITY_RELAXATION\n+#endif\n+\n+\n /* Define if your linker supports -pie option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_PIE"}, {"sha": "ace48bafe7923a2b100c92b80138f47b51ac6fc3", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -15528,6 +15528,11 @@ mips_override_options (void)\n   if (mips_abi == ABI_EABI && TARGET_64BIT)\n     flag_dwarf2_cfi_asm = 0;\n \n+  /* .cfi_* directives generate a read-only section, so fall back on\n+     manual .eh_frame creation if we need the section to be writable.  */\n+  if (TARGET_WRITABLE_EH_FRAME)\n+    flag_dwarf2_cfi_asm = 0;\n+\n   mips_init_print_operand_punct ();\n \n   /* Set up array to map GCC register number to debug register number."}, {"sha": "defcd6ef7df702a40595d0108a58851b2c94f4cc", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -230,6 +230,14 @@ enum mips_code_readable_setting {\n    && !TARGET_ABSOLUTE_ABICALLS\t\t\t\\\n    && !(mips_abi == ABI_64 && TARGET_IRIX))\n \n+/* True if the output must have a writable .eh_frame.\n+   See ASM_PREFERRED_EH_DATA_FORMAT for details.  */\n+#ifdef HAVE_LD_PERSONALITY_RELAXATION\n+#define TARGET_WRITABLE_EH_FRAME 0\n+#else\n+#define TARGET_WRITABLE_EH_FRAME (flag_pic && TARGET_SHARED)\n+#endif\n+\n /* Generate mips16 code */\n #define TARGET_MIPS16\t\t((target_flags & MASK_MIPS16) != 0)\n /* Generate mips16e code. Default 16bit ASE for mips32* and mips64* */\n@@ -3182,3 +3190,30 @@ extern enum mips_code_readable_setting mips_code_readable;\n /* This is necessary to avoid a warning about comparing different enum\n    types.  */\n #define mips_tune_attr ((enum attr_cpu) mips_tune)\n+\n+/* As on most targets, we want the .eh_frame section to be read-only where\n+   possible.  And as on most targets, this means two things:\n+\n+     (a) Non-locally-binding pointers must have an indirect encoding,\n+\t so that the addresses in the .eh_frame section itself become\n+\t locally-binding.\n+\n+     (b) A shared library's .eh_frame section must encode locally-binding\n+\t pointers in a relative (relocation-free) form.\n+\n+   However, MIPS has traditionally not allowed directives like:\n+\n+\t.long\tx-.\n+\n+   in cases where \"x\" is in a different section, or is not defined in the\n+   same assembly file.  We are therefore unable to emit the PC-relative\n+   form required by (b) at assembly time.\n+\n+   Fortunately, the linker is able to convert absolute addresses into\n+   PC-relative addresses on our behalf.  Unfortunately, only certain\n+   versions of the linker know how to do this for indirect pointers,\n+   and for personality data.  We must fall back on using writable\n+   .eh_frame sections for shared libraries if the linker does not\n+   support this feature.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL) \\\n+  (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_absptr)"}, {"sha": "ced17cdbb14756a336e4bf204a8b5946552dbec8", "filename": "gcc/configure", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -23725,6 +23725,57 @@ $as_echo_n \"checking assembler and linker for explicit JALR relocation... \" >&6;\n     fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ld_jalr_reloc\" >&5\n $as_echo \"$gcc_cv_as_ld_jalr_reloc\" >&6; }\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker for .eh_frame personality relaxation\" >&5\n+$as_echo_n \"checking linker for .eh_frame personality relaxation... \" >&6; }\n+if test \"${gcc_cv_ld_mips_personality_relaxation+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_ld_mips_personality_relaxation=no\n+       if test $in_tree_ld = yes ; then\n+\t if test \"$gcc_cv_gld_major_version\" -eq 2 \\\n+\t\t -a \"$gcc_cv_gld_minor_version\" -ge 21 \\\n+\t\t -o \"$gcc_cv_gld_major_version\" -gt 2; then\n+\t   gcc_cv_ld_mips_personality_relaxation=yes\n+\t fi\n+       elif test x$gcc_cv_as != x \\\n+       \t    \t -a x$gcc_cv_ld != x \\\n+\t\t -a x$gcc_cv_readelf != x ; then\n+\t cat > conftest.s <<EOF\n+\t.cfi_startproc\n+\t.cfi_personality 0x80,indirect_ptr\n+\t.ent test\n+test:\n+\tnop\n+\t.end test\n+\t.cfi_endproc\n+\n+\t.section .data,\"aw\",@progbits\n+indirect_ptr:\n+\t.dc.a personality\n+EOF\n+\t if $gcc_cv_as -KPIC -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t    && $gcc_cv_ld -o conftest conftest.o -shared > /dev/null 2>&1; then\n+\t   if $gcc_cv_readelf -d conftest 2>&1 \\\n+\t      | grep TEXTREL > /dev/null 2>&1; then\n+\t     :\n+\t   elif $gcc_cv_readelf --relocs conftest 2>&1 \\\n+\t        | grep 'R_MIPS_REL32 *$' > /dev/null 2>&1; then\n+\t     :\n+\t   else\n+\t     gcc_cv_ld_mips_personality_relaxation=yes\n+\t   fi\n+\t fi\n+       fi\n+       rm -f conftest.s conftest.o conftest\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_mips_personality_relaxation\" >&5\n+$as_echo \"$gcc_cv_ld_mips_personality_relaxation\" >&6; }\n+    if test x$gcc_cv_ld_mips_personality_relaxation = xyes; then\n+\n+$as_echo \"#define HAVE_LD_PERSONALITY_RELAXATION 1\" >>confdefs.h\n+\n+    fi\n     ;;\n esac\n "}, {"sha": "3f0ff7dea59587db12116e68a6a6e85448b5faee", "filename": "gcc/configure.ac", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -3315,6 +3315,51 @@ x:\n       fi\n     fi\n     AC_MSG_RESULT($gcc_cv_as_ld_jalr_reloc)\n+\n+    AC_CACHE_CHECK([linker for .eh_frame personality relaxation],\n+      [gcc_cv_ld_mips_personality_relaxation],\n+      [gcc_cv_ld_mips_personality_relaxation=no\n+       if test $in_tree_ld = yes ; then\n+\t if test \"$gcc_cv_gld_major_version\" -eq 2 \\\n+\t\t -a \"$gcc_cv_gld_minor_version\" -ge 21 \\\n+\t\t -o \"$gcc_cv_gld_major_version\" -gt 2; then\n+\t   gcc_cv_ld_mips_personality_relaxation=yes\n+\t fi\n+       elif test x$gcc_cv_as != x \\\n+       \t    \t -a x$gcc_cv_ld != x \\\n+\t\t -a x$gcc_cv_readelf != x ; then\n+\t cat > conftest.s <<EOF\n+\t.cfi_startproc\n+\t.cfi_personality 0x80,indirect_ptr\n+\t.ent test\n+test:\n+\tnop\n+\t.end test\n+\t.cfi_endproc\n+\n+\t.section .data,\"aw\",@progbits\n+indirect_ptr:\n+\t.dc.a personality\n+EOF\n+\t if $gcc_cv_as -KPIC -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t    && $gcc_cv_ld -o conftest conftest.o -shared > /dev/null 2>&1; then\n+\t   if $gcc_cv_readelf -d conftest 2>&1 \\\n+\t      | grep TEXTREL > /dev/null 2>&1; then\n+\t     :\n+\t   elif $gcc_cv_readelf --relocs conftest 2>&1 \\\n+\t        | grep 'R_MIPS_REL32 *$' > /dev/null 2>&1; then\n+\t     :\n+\t   else\n+\t     gcc_cv_ld_mips_personality_relaxation=yes\n+\t   fi\n+\t fi\n+       fi\n+       rm -f conftest.s conftest.o conftest])\n+    if test x$gcc_cv_ld_mips_personality_relaxation = xyes; then\n+\t    AC_DEFINE(HAVE_LD_PERSONALITY_RELAXATION, 1,\n+      [Define if your linker can relax absolute .eh_frame personality\n+pointers into PC-relative form.])\n+    fi\n     ;;\n esac\n "}, {"sha": "c779e07609ede48abf3e76d3afc53fd02c799ad2", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49576e25cbab7891bc3296e2bcd84d0c284560a6/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=49576e25cbab7891bc3296e2bcd84d0c284560a6", "patch": "@@ -446,6 +446,8 @@ eh_data_format_name (int format)\n   S(DW_EH_PE_sdata4 | DW_EH_PE_funcrel, \"funcrel sdata4\")\n   S(DW_EH_PE_sdata8 | DW_EH_PE_funcrel, \"funcrel sdata8\")\n \n+  S(DW_EH_PE_indirect | DW_EH_PE_absptr, \"indirect absolute\")\n+\n   S(DW_EH_PE_indirect | DW_EH_PE_absptr | DW_EH_PE_pcrel,\n     \"indirect pcrel\")\n   S(DW_EH_PE_indirect | DW_EH_PE_uleb128 | DW_EH_PE_pcrel,"}]}