{"sha": "315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1ZWI0YmIwOGFiYWVlNzk0YzVmOGE5MjRjYjRhZTBkOWZjMmM2MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-06-02T15:45:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-06-02T15:45:09Z"}, "message": "condition_variable (condition_variable_any::_Unlock): Do not swallow __forced_unwind.\n\n\t* include/std/condition_variable (condition_variable_any::_Unlock): Do\n\tnot swallow __forced_unwind.\n\t* include/std/future (__future_base::_Task_setter): Likewise.\n\t(__future_base::_Async_state_impl): Turn __forced_unwind into broken\n\tpromise and rethrow.\n\t* include/std/mutex (try_lock): Likewise.\n\t* testsuite/30_threads/async/forced_unwind.cc: New.\n\t* testsuite/30_threads/packaged_task/forced_unwind.cc: New.\n\nFrom-SVN: r211138", "tree": {"sha": "0670f33a721969f98ca0ad554c29777ad772aa43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0670f33a721969f98ca0ad554c29777ad772aa43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d371802725867b21958d4457cb7a796b6399935b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d371802725867b21958d4457cb7a796b6399935b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d371802725867b21958d4457cb7a796b6399935b"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "be5a0fbb93bd33aa5976313a9af7a395dd6a8bd5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "patch": "@@ -1,3 +1,14 @@\n+2014-06-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/condition_variable (condition_variable_any::_Unlock): Do\n+\tnot swallow __forced_unwind.\n+\t* include/std/future (__future_base::_Task_setter): Likewise.\n+\t(__future_base::_Async_state_impl): Turn __forced_unwind into broken\n+\tpromise and rethrow.\n+\t* include/std/mutex (try_lock): Likewise.\n+\t* testsuite/30_threads/async/forced_unwind.cc: New.\n+\t* testsuite/30_threads/packaged_task/forced_unwind.cc: New.\n+\n 2014-06-02  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "921cb837de94c2dc920fea8d2aa026accf43fb85", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "patch": "@@ -189,7 +189,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t~_Unlock() noexcept(false)\n \t{\n \t  if (uncaught_exception())\n-\t    __try { _M_lock.lock(); } __catch(...) { }\n+\t    {\n+\t      __try\n+\t      { _M_lock.lock(); }\n+\t      __catch(const __cxxabiv1::__forced_unwind&)\n+\t      { __throw_exception_again; }\n+\t      __catch(...)\n+\t      { }\n+\t    }\n \t  else\n \t    _M_lock.lock();\n \t}"}, {"sha": "094914448c43475c34919033cf8b48fb4e6518eb", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "patch": "@@ -1230,6 +1230,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    _M_result->_M_set(_M_fn());\n \t  }\n+\t__catch(const __cxxabiv1::__forced_unwind&)\n+\t  {\n+\t    __throw_exception_again; // will cause broken_promise\n+\t  }\n \t__catch(...)\n \t  {\n \t    _M_result->_M_error = current_exception();\n@@ -1249,6 +1253,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    _M_fn();\n \t  }\n+\t__catch(const __cxxabiv1::__forced_unwind&)\n+\t  {\n+\t    __throw_exception_again; // will cause broken_promise\n+\t  }\n \t__catch(...)\n \t  {\n \t    _M_result->_M_error = current_exception();\n@@ -1509,7 +1517,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))\n       {\n \t_M_thread = std::thread{ [this] {\n-\t  _M_set_result(_S_task_setter(_M_result, _M_fn));\n+\t    __try\n+\t      {\n+\t\t_M_set_result(_S_task_setter(_M_result, _M_fn));\n+\t      }\n+\t    __catch (const __cxxabiv1::__forced_unwind&)\n+\t      {\n+\t\t// make the shared state ready on thread cancellation\n+\t\tif (static_cast<bool>(_M_result))\n+\t\t  this->_M_break_promise(std::move(_M_result));\n+\t\t__throw_exception_again;\n+\t      }\n         } };\n       }\n "}, {"sha": "f6b851c90b0844d97fbf7a0093e4222dec93a44e", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "patch": "@@ -44,6 +44,7 @@\n #include <bits/functexcept.h>\n #include <bits/gthr.h>\n #include <bits/move.h> // for std::swap\n+#include <bits/cxxabi_forced.h>\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n \n@@ -631,6 +632,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       auto __locks = std::tie(__l1, __l2, __l3...);\n       __try\n       { __try_lock_impl<0>::__do_try_lock(__locks, __idx); }\n+      __catch(const __cxxabiv1::__forced_unwind&)\n+      { __throw_exception_again; }\n       __catch(...)\n       { }\n       return __idx;"}, {"sha": "7b0a49280fc3eca8b7c52152c9217a62a801d0d0", "filename": "libstdc++-v3/testsuite/30_threads/async/forced_unwind.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fforced_unwind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fforced_unwind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fforced_unwind.cc?ref=315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do run { target *-*-linux* *-*-gnu* } }\n+// { dg-options \" -std=gnu++11 -pthread\" { target *-*-linux* *-*-gnu* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test (non-standard) handling of __forced_unwind exception.\n+\n+#include <future>\n+#include <stdexcept>\n+#include <pthread.h>\n+#include <testsuite_hooks.h>\n+\n+void f() { pthread_exit(nullptr); }\n+\n+int main()\n+{\n+  auto fut = std::async(std::launch::async, f);\n+  try\n+  {\n+    fut.get();\n+    throw std::logic_error(\"Unreachable\");\n+  }\n+  catch (const std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::broken_promise );\n+  }\n+}"}, {"sha": "235ab178f051b57435b27ef8e64423675c32eb68", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/forced_unwind.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fforced_unwind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fforced_unwind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fforced_unwind.cc?ref=315eb4bb08abaee794c5f8a924cb4ae0d9fc2c61", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run { target *-*-linux* *-*-gnu* } }\n+// { dg-options \" -std=gnu++11 -pthread\" { target *-*-linux* *-*-gnu* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test (non-standard) handling of __forced_unwind exception.\n+\n+#include <future>\n+#include <stdexcept>\n+#include <pthread.h>\n+#include <testsuite_hooks.h>\n+\n+void f() { pthread_exit(nullptr); }\n+\n+int main()\n+{\n+  std::packaged_task<void()> p(f);\n+  auto fut = p.get_future();\n+  std::thread t(std::move(p));\n+  try\n+  {\n+    fut.get();\n+    throw std::logic_error(\"Unreachable\");\n+  }\n+  catch (const std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::broken_promise );\n+  }\n+  t.join();\n+}"}]}