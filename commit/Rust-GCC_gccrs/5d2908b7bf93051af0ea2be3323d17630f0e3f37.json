{"sha": "5d2908b7bf93051af0ea2be3323d17630f0e3f37", "node_id": "C_kwDOANBUbNoAKDVkMjkwOGI3YmY5MzA1MWFmMGVhMmJlMzMyM2QxNzYzMGYwZTNmMzc", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-24T01:43:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-24T01:43:32Z"}, "message": "analyzer: eliminate region_model::on_ fns for sockets\n\nThis mostly mechanical patch eliminates a confusing extra layer of\nredundant calls in the handling of socket-related functions.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.h (region_model::on_socket): Delete decl.\n\t(region_model::on_bind): Likewise.\n\t(region_model::on_listen): Likewise.\n\t(region_model::on_accept): Likewise.\n\t(region_model::on_connect): Likewise.\n\t* sm-fd.cc (kf_socket::outcome_of_socket::update_model): Move body\n\tof region_model::on_socket into here, ...\n\t(region_model::on_socket): ...eliminating this function.\n\t(kf_bind::outcome_of_bind::update_model): Likewise for on_bind...\n\t(region_model::on_bind): ...eliminating this function.\n\t(kf_listen::outcome_of_listen::update_model): Likewise fo\n\ton_listen...\n\t(region_model::on_listen): ...eliminating this function.\n\t(kf_accept::outcome_of_accept::update_model): Likewise fo\n\ton_accept...\n\t(region_model::on_accept): ...eliminating this function.\n\t(kf_connect::outcome_of_connect::update_model): Likewise fo\n\ton_connect...\n\t(region_model::on_connect): ...eliminating this function.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "5be8e8fe58a526c2865154c9eaf44a038d6e0bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be8e8fe58a526c2865154c9eaf44a038d6e0bfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d2908b7bf93051af0ea2be3323d17630f0e3f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2908b7bf93051af0ea2be3323d17630f0e3f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2908b7bf93051af0ea2be3323d17630f0e3f37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2908b7bf93051af0ea2be3323d17630f0e3f37/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d5b240424d2b16ecd8563f64de04a38296efb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d5b240424d2b16ecd8563f64de04a38296efb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d5b240424d2b16ecd8563f64de04a38296efb8"}], "stats": {"total": 149, "additions": 49, "deletions": 100}, "files": [{"sha": "4413f5542d9d0899bde5162350d34e151f46dff5", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2908b7bf93051af0ea2be3323d17630f0e3f37/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2908b7bf93051af0ea2be3323d17630f0e3f37/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=5d2908b7bf93051af0ea2be3323d17630f0e3f37", "patch": "@@ -515,11 +515,6 @@ class region_model\n \n   /* Implemented in sm-fd.cc  */\n   void mark_as_valid_fd (const svalue *sval, region_model_context *ctxt);\n-  bool on_socket (const call_details &cd, bool successful);\n-  bool on_bind (const call_details &cd, bool successful);\n-  bool on_listen (const call_details &cd, bool successful);\n-  bool on_accept (const call_details &cd, bool successful);\n-  bool on_connect (const call_details &cd, bool successful);\n \n   /* Implemented in sm-malloc.cc  */\n   void on_realloc_with_move (const call_details &cd,"}, {"sha": "8f8ec851babba30bd7c82710469238a5fb7fa207", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 49, "deletions": 95, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2908b7bf93051af0ea2be3323d17630f0e3f37/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2908b7bf93051af0ea2be3323d17630f0e3f37/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=5d2908b7bf93051af0ea2be3323d17630f0e3f37", "patch": "@@ -2270,7 +2270,16 @@ class kf_socket : public known_function\n \t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n-      return cd.get_model ()->on_socket (cd, m_success);\n+      sm_state_map *smap;\n+      const fd_state_machine *fd_sm;\n+      std::unique_ptr<sm_context> sm_ctxt;\n+      if (!get_fd_state (ctxt, &smap, &fd_sm, NULL, &sm_ctxt))\n+\treturn true;\n+      const extrinsic_state *ext_state = ctxt->get_ext_state ();\n+      if (!ext_state)\n+\treturn true;\n+\n+      return fd_sm->on_socket (cd, m_success, sm_ctxt.get (), *ext_state);\n     }\n   };\n \n@@ -2290,24 +2299,6 @@ class kf_socket : public known_function\n   }\n };\n \n-/* Specialcase hook for handling \"socket\", for use by\n-   kf_socket::outcome_of_socket::update_model.  */\n-\n-bool\n-region_model::on_socket (const call_details &cd, bool successful)\n-{\n-  sm_state_map *smap;\n-  const fd_state_machine *fd_sm;\n-  std::unique_ptr<sm_context> sm_ctxt;\n-  if (!get_fd_state (cd.get_ctxt (), &smap, &fd_sm, NULL, &sm_ctxt))\n-    return true;\n-  const extrinsic_state *ext_state = cd.get_ctxt ()->get_ext_state ();\n-  if (!ext_state)\n-    return true;\n-\n-  return fd_sm->on_socket (cd, successful, sm_ctxt.get (), *ext_state);\n-}\n-\n /* Handle calls to \"bind\".\n    See e.g. https://man7.org/linux/man-pages/man3/bind.3p.html  */\n \n@@ -2326,7 +2317,15 @@ class kf_bind : public known_function\n \t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n-      return cd.get_model ()->on_bind (cd, m_success);\n+      sm_state_map *smap;\n+      const fd_state_machine *fd_sm;\n+      std::unique_ptr<sm_context> sm_ctxt;\n+      if (!get_fd_state (ctxt, &smap, &fd_sm, NULL, &sm_ctxt))\n+\treturn true;\n+      const extrinsic_state *ext_state = ctxt->get_ext_state ();\n+      if (!ext_state)\n+\treturn true;\n+      return fd_sm->on_bind (cd, m_success, sm_ctxt.get (), *ext_state);\n     }\n   };\n \n@@ -2346,24 +2345,6 @@ class kf_bind : public known_function\n   }\n };\n \n-/* Specialcase hook for handling \"bind\", for use by\n-   kf_bind::outcome_of_bind::update_model.  */\n-\n-bool\n-region_model::on_bind (const call_details &cd, bool successful)\n-{\n-  sm_state_map *smap;\n-  const fd_state_machine *fd_sm;\n-  std::unique_ptr<sm_context> sm_ctxt;\n-  if (!get_fd_state (cd.get_ctxt (), &smap, &fd_sm, NULL, &sm_ctxt))\n-    return true;\n-  const extrinsic_state *ext_state = cd.get_ctxt ()->get_ext_state ();\n-  if (!ext_state)\n-    return true;\n-\n-  return fd_sm->on_bind (cd, successful, sm_ctxt.get (), *ext_state);\n-}\n-\n /* Handle calls to \"listen\".\n    See e.g. https://man7.org/linux/man-pages/man3/listen.3p.html  */\n \n@@ -2381,7 +2362,16 @@ class kf_listen : public known_function\n \t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n-      return cd.get_model ()->on_listen (cd, m_success);\n+      sm_state_map *smap;\n+      const fd_state_machine *fd_sm;\n+      std::unique_ptr<sm_context> sm_ctxt;\n+      if (!get_fd_state (ctxt, &smap, &fd_sm, NULL, &sm_ctxt))\n+\treturn true;\n+      const extrinsic_state *ext_state = ctxt->get_ext_state ();\n+      if (!ext_state)\n+\treturn true;\n+\n+      return fd_sm->on_listen (cd, m_success, sm_ctxt.get (), *ext_state);\n     }\n   };\n \n@@ -2401,24 +2391,6 @@ class kf_listen : public known_function\n   }\n };\n \n-/* Specialcase hook for handling \"listen\", for use by\n-   kf_listen::outcome_of_listen::update_model.  */\n-\n-bool\n-region_model::on_listen (const call_details &cd, bool successful)\n-{\n-  sm_state_map *smap;\n-  const fd_state_machine *fd_sm;\n-  std::unique_ptr<sm_context> sm_ctxt;\n-  if (!get_fd_state (cd.get_ctxt (), &smap, &fd_sm, NULL, &sm_ctxt))\n-    return true;\n-  const extrinsic_state *ext_state = cd.get_ctxt ()->get_ext_state ();\n-  if (!ext_state)\n-    return true;\n-\n-  return fd_sm->on_listen (cd, successful, sm_ctxt.get (), *ext_state);\n-}\n-\n /* Handle calls to \"accept\".\n    See e.g. https://man7.org/linux/man-pages/man3/accept.3p.html  */\n \n@@ -2436,7 +2408,16 @@ class kf_accept : public known_function\n \t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n-      return cd.get_model ()->on_accept (cd, m_success);\n+      sm_state_map *smap;\n+      const fd_state_machine *fd_sm;\n+      std::unique_ptr<sm_context> sm_ctxt;\n+      if (!get_fd_state (ctxt, &smap, &fd_sm, NULL, &sm_ctxt))\n+\treturn true;\n+      const extrinsic_state *ext_state = ctxt->get_ext_state ();\n+      if (!ext_state)\n+\treturn true;\n+\n+      return fd_sm->on_accept (cd, m_success, sm_ctxt.get (), *ext_state);\n     }\n   };\n \n@@ -2458,24 +2439,6 @@ class kf_accept : public known_function\n   }\n };\n \n-/* Specialcase hook for handling \"accept\", for use by\n-   kf_accept::outcome_of_accept::update_model.  */\n-\n-bool\n-region_model::on_accept (const call_details &cd, bool successful)\n-{\n-  sm_state_map *smap;\n-  const fd_state_machine *fd_sm;\n-  std::unique_ptr<sm_context> sm_ctxt;\n-  if (!get_fd_state (cd.get_ctxt (), &smap, &fd_sm, NULL, &sm_ctxt))\n-    return true;\n-  const extrinsic_state *ext_state = cd.get_ctxt ()->get_ext_state ();\n-  if (!ext_state)\n-    return true;\n-\n-  return fd_sm->on_accept (cd, successful, sm_ctxt.get (), *ext_state);\n-}\n-\n /* Handle calls to \"connect\".\n    See e.g. https://man7.org/linux/man-pages/man3/connect.3p.html  */\n \n@@ -2494,7 +2457,16 @@ class kf_connect : public known_function\n \t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n-      return cd.get_model ()->on_connect (cd, m_success);\n+      sm_state_map *smap;\n+      const fd_state_machine *fd_sm;\n+      std::unique_ptr<sm_context> sm_ctxt;\n+      if (!get_fd_state (ctxt, &smap, &fd_sm, NULL, &sm_ctxt))\n+\treturn true;\n+      const extrinsic_state *ext_state = ctxt->get_ext_state ();\n+      if (!ext_state)\n+\treturn true;\n+\n+      return fd_sm->on_connect (cd, m_success, sm_ctxt.get (), *ext_state);\n     }\n   };\n \n@@ -2515,24 +2487,6 @@ class kf_connect : public known_function\n   }\n };\n \n-/* Specialcase hook for handling \"connect\", for use by\n-   kf_connect::outcome_of_connect::update_model.  */\n-\n-bool\n-region_model::on_connect (const call_details &cd, bool successful)\n-{\n-  sm_state_map *smap;\n-  const fd_state_machine *fd_sm;\n-  std::unique_ptr<sm_context> sm_ctxt;\n-  if (!get_fd_state (cd.get_ctxt (), &smap, &fd_sm, NULL, &sm_ctxt))\n-    return true;\n-  const extrinsic_state *ext_state = cd.get_ctxt ()->get_ext_state ();\n-  if (!ext_state)\n-    return true;\n-\n-  return fd_sm->on_connect (cd, successful, sm_ctxt.get (), *ext_state);\n-}\n-\n /* Handler for calls to \"pipe\" and \"pipe2\".\n    See e.g. https://www.man7.org/linux/man-pages/man2/pipe.2.html  */\n "}]}