{"sha": "b46616fda7124e8a4b3b976255cbca66258cd152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2NjE2ZmRhNzEyNGU4YTRiM2I5NzYyNTVjYmNhNjYyNThjZDE1Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2011-03-03T12:08:21Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2011-03-03T12:08:21Z"}, "message": "s390.c (s390_function_value): Rename to ...\n\n2011-03-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_function_value): Rename to ...\n\t(s390_function_and_libcall_value): ... this.\n\t(s390_function_value): New function.\n\t(s390_libcall_value): New function.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Define target\n\thooks.\n\t* config/s390/s390.h (FUNCTION_VALUE, LIBCALL_VALUE): Remove\n\ttarget macro definitions.\n\t* config/s390/s390-protos.h (s390_function_value): Remove prototype.\n\nFrom-SVN: r170649", "tree": {"sha": "2724f334bcb989a0973c1199565a37a36f6e3006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2724f334bcb989a0973c1199565a37a36f6e3006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b46616fda7124e8a4b3b976255cbca66258cd152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46616fda7124e8a4b3b976255cbca66258cd152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46616fda7124e8a4b3b976255cbca66258cd152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46616fda7124e8a4b3b976255cbca66258cd152/comments", "author": null, "committer": null, "parents": [{"sha": "f7a10f0d78147f8fb1391474b76202ca37b0c998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a10f0d78147f8fb1391474b76202ca37b0c998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a10f0d78147f8fb1391474b76202ca37b0c998"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "ede6eea09d0bbb25a705c18392bb3d031cf64ec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b46616fda7124e8a4b3b976255cbca66258cd152", "patch": "@@ -1,3 +1,15 @@\n+2011-03-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_function_value): Rename to ...\n+\t(s390_function_and_libcall_value): ... this.\n+\t(s390_function_value): New function.\n+\t(s390_libcall_value): New function.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Define target\n+\thooks.\n+\t* config/s390/s390.h (FUNCTION_VALUE, LIBCALL_VALUE): Remove\n+\ttarget macro definitions.\n+\t* config/s390/s390-protos.h (s390_function_value): Remove prototype.\n+\n 2011-03-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/freebsd64.h (CC1_SPEC): Define."}, {"sha": "94648792b316f8d82cd310ea289a994197c7cf8e", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=b46616fda7124e8a4b3b976255cbca66258cd152", "patch": "@@ -111,9 +111,3 @@ extern int s390_branch_condition_mask (rtx);\n extern int s390_compare_and_branch_condition_mask (rtx);\n \n #endif /* RTX_CODE */\n-\n-#ifdef TREE_CODE\n-#ifdef RTX_CODE\n-extern rtx s390_function_value (const_tree, const_tree, enum machine_mode);\n-#endif /* RTX_CODE */\n-#endif /* TREE_CODE */"}, {"sha": "f43b3765032b1c98161a06d9326e271554e336c8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b46616fda7124e8a4b3b976255cbca66258cd152", "patch": "@@ -8687,17 +8687,23 @@ s390_promote_function_mode (const_tree type, enum machine_mode mode,\n   return mode;\n }\n \n-/* Define where to return a (scalar) value of type TYPE.\n-   If TYPE is null, define where to return a (scalar)\n+/* Define where to return a (scalar) value of type RET_TYPE.\n+   If RET_TYPE is null, define where to return a (scalar)\n    value of mode MODE from a libcall.  */\n \n-rtx\n-s390_function_value (const_tree type, const_tree fn, enum machine_mode mode)\n+static rtx\n+s390_function_and_libcall_value (enum machine_mode mode,\n+\t\t\t\t const_tree ret_type,\n+\t\t\t\t const_tree fntype_or_decl,\n+\t\t\t\t bool outgoing ATTRIBUTE_UNUSED)\n {\n-  if (type)\n+  /* For normal functions perform the promotion as\n+     promote_function_mode would do.  */\n+  if (ret_type)\n     {\n-      int unsignedp = TYPE_UNSIGNED (type);\n-      mode = promote_function_mode (type, TYPE_MODE (type), &unsignedp, fn, 1);\n+      int unsignedp = TYPE_UNSIGNED (ret_type);\n+      mode = promote_function_mode (ret_type, mode, &unsignedp,\n+\t\t\t\t    fntype_or_decl, 1);\n     }\n \n   gcc_assert (GET_MODE_CLASS (mode) == MODE_INT || SCALAR_FLOAT_MODE_P (mode));\n@@ -8710,6 +8716,10 @@ s390_function_value (const_tree type, const_tree fn, enum machine_mode mode)\n     return gen_rtx_REG (mode, 2);\n   else if (GET_MODE_SIZE (mode) == 2 * UNITS_PER_LONG)\n     {\n+      /* This case is triggered when returning a 64 bit value with\n+\t -m31 -mzarch.  Although the value would fit into a single\n+\t register it has to be forced into a 32 bit register pair in\n+\t order to match the ABI.  */\n       rtvec p = rtvec_alloc (2);\n \n       RTVEC_ELT (p, 0)\n@@ -8723,6 +8733,26 @@ s390_function_value (const_tree type, const_tree fn, enum machine_mode mode)\n   gcc_unreachable ();\n }\n \n+/* Define where to return a scalar return value of type RET_TYPE.  */\n+\n+static rtx\n+s390_function_value (const_tree ret_type, const_tree fn_decl_or_type,\n+\t\t     bool outgoing)\n+{\n+  return s390_function_and_libcall_value (TYPE_MODE (ret_type), ret_type,\n+\t\t\t\t\t  fn_decl_or_type, outgoing);\n+}\n+\n+/* Define where to return a scalar libcall return value of mode\n+   MODE.  */\n+\n+static rtx\n+s390_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return s390_function_and_libcall_value (mode, NULL_TREE,\n+\t\t\t\t\t  NULL_TREE, true);\n+}\n+\n \n /* Create and return the va_list datatype.\n \n@@ -10694,6 +10724,10 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #define TARGET_FUNCTION_ARG s390_function_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE s390_function_arg_advance\n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE s390_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE s390_libcall_value\n \n #undef TARGET_FIXED_CONDITION_CODE_REGS\n #define TARGET_FIXED_CONDITION_CODE_REGS s390_fixed_condition_code_regs"}, {"sha": "105f5aa0c51c79db5d414adb0d6dbffa327f835d", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46616fda7124e8a4b3b976255cbca66258cd152/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=b46616fda7124e8a4b3b976255cbca66258cd152", "patch": "@@ -688,14 +688,6 @@ CUMULATIVE_ARGS;\n   (N) == 16 || (N) == 17 || (TARGET_64BIT && ((N) == 18 || (N) == 19)))\n \n \n-/* Scalar return values.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  s390_function_value ((VALTYPE), (FUNC), VOIDmode)\n-\n-#define LIBCALL_VALUE(MODE) \\\n-  s390_function_value (NULL, NULL, (MODE))\n-\n /* Only gpr 2 and fpr 0 are ever used as return registers.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 2 || (N) == 16)\n "}]}