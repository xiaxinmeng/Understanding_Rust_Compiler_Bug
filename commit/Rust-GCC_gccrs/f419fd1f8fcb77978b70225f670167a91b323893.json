{"sha": "f419fd1f8fcb77978b70225f670167a91b323893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxOWZkMWY4ZmNiNzc5NzhiNzAyMjVmNjcwMTY3YTkxYjMyMzg5Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-17T14:49:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-17T14:49:05Z"}, "message": "[PATCH PR/82546] tree node size\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00899.html\n\tPR middle-end/82546\n\tgcc/\n\t* tree.c (tree_code_size): Reformat.  Punt to lang hook for unknown\n\tTYPE nodes.\n\tgcc/cp/\n\t* cp-objcp-common.c (cp_tree_size): Reformat.  Adjust returns size\n\tof TYPE nodes.\n\tgcc/objc/\n\t* objc-act.c (objc_common_tree_size): Return size of TYPE nodes.\n\nFrom-SVN: r253817", "tree": {"sha": "0a9abc2a8f40b61202554b123b8a167f236f726b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9abc2a8f40b61202554b123b8a167f236f726b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f419fd1f8fcb77978b70225f670167a91b323893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f419fd1f8fcb77978b70225f670167a91b323893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f419fd1f8fcb77978b70225f670167a91b323893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f419fd1f8fcb77978b70225f670167a91b323893/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07c0e0ad79473125b8ad2737f5af746e5247c0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c0e0ad79473125b8ad2737f5af746e5247c0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c0e0ad79473125b8ad2737f5af746e5247c0ea"}], "stats": {"total": 183, "additions": 104, "deletions": 79}, "files": [{"sha": "02d8e313d287173f972edf8a118ba6ec13a33df7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f419fd1f8fcb77978b70225f670167a91b323893", "patch": "@@ -1,3 +1,9 @@\n+2017-10-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR middle-end/82546\n+\t* tree.c (tree_code_size): Reformat.  Punt to lang hook for unknown\n+\tTYPE nodes.\n+\n 2017-10-17  Qing Zhao <qing.zhao@oracle.com>\n \t    Wilco Dijkstra <wilco.dijkstra@arm.com>\n "}, {"sha": "621efed82acbd6df188f2a67b8c33ac652580cac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f419fd1f8fcb77978b70225f670167a91b323893", "patch": "@@ -1,3 +1,9 @@\n+2017-10-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR middle-end/82546\n+\t* cp-objcp-common.c (cp_tree_size): Reformat.  Adjust returns size\n+\tof TYPE nodes.\n+\n 2017-10-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/82357 - bit-field in template"}, {"sha": "e051d66b67b837b41b83af772006d1e5a25ae83e", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=f419fd1f8fcb77978b70225f670167a91b323893", "patch": "@@ -61,43 +61,34 @@ cxx_warn_unused_global_decl (const_tree decl)\n size_t\n cp_tree_size (enum tree_code code)\n {\n+  gcc_checking_assert (code >= NUM_TREE_CODES);\n   switch (code)\n     {\n-    case PTRMEM_CST:\t\treturn sizeof (struct ptrmem_cst);\n-    case BASELINK:\t\treturn sizeof (struct tree_baselink);\n+    case PTRMEM_CST:\t\treturn sizeof (ptrmem_cst);\n+    case BASELINK:\t\treturn sizeof (tree_baselink);\n     case TEMPLATE_PARM_INDEX:\treturn sizeof (template_parm_index);\n-    case DEFAULT_ARG:\t\treturn sizeof (struct tree_default_arg);\n-    case DEFERRED_NOEXCEPT:\treturn sizeof (struct tree_deferred_noexcept);\n-    case OVERLOAD:\t\treturn sizeof (struct tree_overload);\n-    case STATIC_ASSERT:         return sizeof (struct tree_static_assert);\n+    case DEFAULT_ARG:\t\treturn sizeof (tree_default_arg);\n+    case DEFERRED_NOEXCEPT:\treturn sizeof (tree_deferred_noexcept);\n+    case OVERLOAD:\t\treturn sizeof (tree_overload);\n+    case STATIC_ASSERT:         return sizeof (tree_static_assert);\n     case TYPE_ARGUMENT_PACK:\n-    case TYPE_PACK_EXPANSION:\n-      return sizeof (struct tree_common);\n-\n+    case TYPE_PACK_EXPANSION:\treturn sizeof (tree_type_non_common);\n     case NONTYPE_ARGUMENT_PACK:\n-    case EXPR_PACK_EXPANSION:\n-      return sizeof (struct tree_exp);\n-\n-    case ARGUMENT_PACK_SELECT:\n-      return sizeof (struct tree_argument_pack_select);\n-\n-    case TRAIT_EXPR:\n-      return sizeof (struct tree_trait_expr);\n-\n-    case LAMBDA_EXPR:           return sizeof (struct tree_lambda_expr);\n-\n-    case TEMPLATE_INFO:         return sizeof (struct tree_template_info);\n-\n-    case CONSTRAINT_INFO:       return sizeof (struct tree_constraint_info);\n-\n-    case USERDEF_LITERAL:\treturn sizeof (struct tree_userdef_literal);\n-\n-    case TEMPLATE_DECL:\t\treturn sizeof (struct tree_template_decl);\n-\n+    case EXPR_PACK_EXPANSION:\treturn sizeof (tree_exp);\n+    case ARGUMENT_PACK_SELECT:\treturn sizeof (tree_argument_pack_select);\n+    case TRAIT_EXPR:\t\treturn sizeof (tree_trait_expr);\n+    case LAMBDA_EXPR:           return sizeof (tree_lambda_expr);\n+    case TEMPLATE_INFO:         return sizeof (tree_template_info);\n+    case CONSTRAINT_INFO:       return sizeof (tree_constraint_info);\n+    case USERDEF_LITERAL:\treturn sizeof (tree_userdef_literal);\n+    case TEMPLATE_DECL:\t\treturn sizeof (tree_template_decl);\n     default:\n-      if (TREE_CODE_CLASS (code) == tcc_declaration)\n-\treturn sizeof (struct tree_decl_non_common);\n-      gcc_unreachable ();\n+      switch (TREE_CODE_CLASS (code))\n+\t{\n+\tcase tcc_declaration:\treturn sizeof (tree_decl_non_common);\n+\tcase tcc_type:\t\treturn sizeof (tree_type_non_common);\n+\tdefault: gcc_unreachable ();\n+\t}\n     }\n   /* NOTREACHED */\n }"}, {"sha": "a387814e9adc561dd387e5e7cfa885a8189f2590", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=f419fd1f8fcb77978b70225f670167a91b323893", "patch": "@@ -1,3 +1,7 @@\n+2017-10-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* objc-act.c (objc_common_tree_size): Return size of TYPE nodes.\n+\n 2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* objc-act.c (objc_decl_method_attributes): Use wi::to_wide when"}, {"sha": "765192c82aaa548ec4fa8eb12cc92d36a0803589", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f419fd1f8fcb77978b70225f670167a91b323893", "patch": "@@ -10118,11 +10118,14 @@ objc_common_tree_size (enum tree_code code)\n     case CLASS_METHOD_DECL:\n     case INSTANCE_METHOD_DECL:\n     case KEYWORD_DECL:\n-    case PROPERTY_DECL:\n-      return sizeof (struct tree_decl_non_common);\n+    case PROPERTY_DECL:\t\t\treturn sizeof (tree_decl_non_common);\n+    case CLASS_INTERFACE_TYPE:\n+    case CLASS_IMPLEMENTATION_TYPE:\n+    case CATEGORY_INTERFACE_TYPE:\n+    case CATEGORY_IMPLEMENTATION_TYPE:\n+    case PROTOCOL_INTERFACE_TYPE:\treturn sizeof (tree_type_non_common);\n     default:\n       gcc_unreachable ();\n-  \n     }\n }\n "}, {"sha": "cd77f08a331944ee5548572f2e01f799a4daff62", "filename": "gcc/tree.c", "status": "modified", "additions": 60, "deletions": 45, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f419fd1f8fcb77978b70225f670167a91b323893/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f419fd1f8fcb77978b70225f670167a91b323893", "patch": "@@ -763,40 +763,53 @@ tree_code_size (enum tree_code code)\n   switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_declaration:  /* A decl node */\n-      {\n-\tswitch (code)\n-\t  {\n-\t  case FIELD_DECL:\n-\t    return sizeof (struct tree_field_decl);\n-\t  case PARM_DECL:\n-\t    return sizeof (struct tree_parm_decl);\n-\t  case VAR_DECL:\n-\t    return sizeof (struct tree_var_decl);\n-\t  case LABEL_DECL:\n-\t    return sizeof (struct tree_label_decl);\n-\t  case RESULT_DECL:\n-\t    return sizeof (struct tree_result_decl);\n-\t  case CONST_DECL:\n-\t    return sizeof (struct tree_const_decl);\n-\t  case TYPE_DECL:\n-\t    return sizeof (struct tree_type_decl);\n-\t  case FUNCTION_DECL:\n-\t    return sizeof (struct tree_function_decl);\n-\t  case DEBUG_EXPR_DECL:\n-\t    return sizeof (struct tree_decl_with_rtl);\n-\t  case TRANSLATION_UNIT_DECL:\n-\t    return sizeof (struct tree_translation_unit_decl);\n-\t  case NAMESPACE_DECL:\n-\t  case IMPORTED_DECL:\n-\t  case NAMELIST_DECL:\n-\t    return sizeof (struct tree_decl_non_common);\n-\t  default:\n-\t    return lang_hooks.tree_size (code);\n-\t  }\n-      }\n+      switch (code)\n+\t{\n+\tcase FIELD_DECL:\treturn sizeof (tree_field_decl);\n+\tcase PARM_DECL:\t\treturn sizeof (tree_parm_decl);\n+\tcase VAR_DECL:\t\treturn sizeof (tree_var_decl);\n+\tcase LABEL_DECL:\treturn sizeof (tree_label_decl);\n+\tcase RESULT_DECL:\treturn sizeof (tree_result_decl);\n+\tcase CONST_DECL:\treturn sizeof (tree_const_decl);\n+\tcase TYPE_DECL:\t\treturn sizeof (tree_type_decl);\n+\tcase FUNCTION_DECL:\treturn sizeof (tree_function_decl);\n+\tcase DEBUG_EXPR_DECL:\treturn sizeof (tree_decl_with_rtl);\n+\tcase TRANSLATION_UNIT_DECL: return sizeof (tree_translation_unit_decl);\n+\tcase NAMESPACE_DECL:\n+\tcase IMPORTED_DECL:\n+\tcase NAMELIST_DECL:\treturn sizeof (tree_decl_non_common);\n+\tdefault:\n+\t  gcc_checking_assert (code >= NUM_TREE_CODES);\n+\t  return lang_hooks.tree_size (code);\n+\t}\n \n     case tcc_type:  /* a type node */\n-      return sizeof (struct tree_type_non_common);\n+      switch (code)\n+\t{\n+\tcase OFFSET_TYPE:\n+\tcase ENUMERAL_TYPE:\n+\tcase BOOLEAN_TYPE:\n+\tcase INTEGER_TYPE:\n+\tcase REAL_TYPE:\n+\tcase POINTER_TYPE:\n+\tcase REFERENCE_TYPE:\n+\tcase NULLPTR_TYPE:\n+\tcase FIXED_POINT_TYPE:\n+\tcase COMPLEX_TYPE:\n+\tcase VECTOR_TYPE:\n+\tcase ARRAY_TYPE:\n+\tcase RECORD_TYPE:\n+\tcase UNION_TYPE:\n+\tcase QUAL_UNION_TYPE:\n+\tcase VOID_TYPE:\n+\tcase POINTER_BOUNDS_TYPE:\n+\tcase FUNCTION_TYPE:\n+\tcase METHOD_TYPE:\n+\tcase LANG_TYPE:\t\treturn sizeof (tree_type_non_common);\n+\tdefault:\n+\t  gcc_checking_assert (code >= NUM_TREE_CODES);\n+\t  return lang_hooks.tree_size (code);\n+\t}\n \n     case tcc_reference:   /* a reference */\n     case tcc_expression:  /* an expression */\n@@ -810,38 +823,40 @@ tree_code_size (enum tree_code code)\n     case tcc_constant:  /* a constant */\n       switch (code)\n \t{\n-\tcase VOID_CST:\t\treturn sizeof (struct tree_typed);\n+\tcase VOID_CST:\t\treturn sizeof (tree_typed);\n \tcase INTEGER_CST:\tgcc_unreachable ();\n-\tcase REAL_CST:\t\treturn sizeof (struct tree_real_cst);\n-\tcase FIXED_CST:\t\treturn sizeof (struct tree_fixed_cst);\n-\tcase COMPLEX_CST:\treturn sizeof (struct tree_complex);\n-\tcase VECTOR_CST:\treturn sizeof (struct tree_vector);\n+\tcase REAL_CST:\t\treturn sizeof (tree_real_cst);\n+\tcase FIXED_CST:\t\treturn sizeof (tree_fixed_cst);\n+\tcase COMPLEX_CST:\treturn sizeof (tree_complex);\n+\tcase VECTOR_CST:\treturn sizeof (tree_vector);\n \tcase STRING_CST:\tgcc_unreachable ();\n \tdefault:\n+\t  gcc_checking_assert (code >= NUM_TREE_CODES);\n \t  return lang_hooks.tree_size (code);\n \t}\n \n     case tcc_exceptional:  /* something random, like an identifier.  */\n       switch (code)\n \t{\n \tcase IDENTIFIER_NODE:\treturn lang_hooks.identifier_size;\n-\tcase TREE_LIST:\t\treturn sizeof (struct tree_list);\n+\tcase TREE_LIST:\t\treturn sizeof (tree_list);\n \n \tcase ERROR_MARK:\n-\tcase PLACEHOLDER_EXPR:\treturn sizeof (struct tree_common);\n+\tcase PLACEHOLDER_EXPR:\treturn sizeof (tree_common);\n \n-\tcase TREE_VEC:\n+\tcase TREE_VEC:\t\tgcc_unreachable ();\n \tcase OMP_CLAUSE:\tgcc_unreachable ();\n \n-\tcase SSA_NAME:\t\treturn sizeof (struct tree_ssa_name);\n+\tcase SSA_NAME:\t\treturn sizeof (tree_ssa_name);\n \n-\tcase STATEMENT_LIST:\treturn sizeof (struct tree_statement_list);\n+\tcase STATEMENT_LIST:\treturn sizeof (tree_statement_list);\n \tcase BLOCK:\t\treturn sizeof (struct tree_block);\n-\tcase CONSTRUCTOR:\treturn sizeof (struct tree_constructor);\n-\tcase OPTIMIZATION_NODE: return sizeof (struct tree_optimization_option);\n-\tcase TARGET_OPTION_NODE: return sizeof (struct tree_target_option);\n+\tcase CONSTRUCTOR:\treturn sizeof (tree_constructor);\n+\tcase OPTIMIZATION_NODE: return sizeof (tree_optimization_option);\n+\tcase TARGET_OPTION_NODE: return sizeof (tree_target_option);\n \n \tdefault:\n+\t  gcc_checking_assert (code >= NUM_TREE_CODES);\n \t  return lang_hooks.tree_size (code);\n \t}\n "}]}