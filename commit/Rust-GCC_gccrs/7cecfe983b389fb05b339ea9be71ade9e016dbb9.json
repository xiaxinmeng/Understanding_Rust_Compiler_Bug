{"sha": "7cecfe983b389fb05b339ea9be71ade9e016dbb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlY2ZlOTgzYjM4OWZiMDViMzM5ZWE5YmU3MWFkZTllMDE2ZGJiOQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-12T08:36:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-12T08:36:08Z"}, "message": "Merge #559\n\n559: add some comments about FindEntryPoints and MarkLive in dead code sca\u2026 r=philberty a=thomasyonug\n\nAdd some comments about FindEntryPoints and MarkLive in dead code scan\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "4994d0b0fe6667064d1bed535c70ce5b90ff68cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4994d0b0fe6667064d1bed535c70ce5b90ff68cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cecfe983b389fb05b339ea9be71ade9e016dbb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6/74CRBK7hj4Ov3rIwAAbnEIAHxHafmN97MFVBGB/BzLkOle\n3a2GoVXnZ3wOGPtp6QXye3XU8Y98Q6/Kg32nLnchseFm9Uezr/J3N0KgS1ZC5CZ3\nDfZ1limNuTflmqkG3XMIKldfxKM3ftXMPK2pgIGp88BaQIdvgbB6qeckXRIxRWi3\nwBo23lQCxFgt5yGg0QqxTNWGRJBl1+3TudC3/BXgIKlq/yMvM/CO+RXUGpS4wwS4\nZ1Atvza/ARgtPs3Ilwuc9V6Dty2dlTWmRpoBq++TUjeqKNH17xIHBBDaQ7cB9Lhe\nQrWAzt9CSNVm+Kk6CqBlnGmNs1nlV8VBgn6mSrYUysj+hQ4XBXFqG5rz3CcUu8I=\n=Vknd\n-----END PGP SIGNATURE-----\n", "payload": "tree 4994d0b0fe6667064d1bed535c70ce5b90ff68cd\nparent 6d2a3d03ad256ab924dfddb4d200d1b6c11c7410\nparent 200fcaad46236f83d46ae277fa6e902419db2e58\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626078968 +0000\ncommitter GitHub <noreply@github.com> 1626078968 +0000\n\nMerge #559\n\n559: add some comments about FindEntryPoints and MarkLive in dead code sca\u2026 r=philberty a=thomasyonug\n\nAdd some comments about FindEntryPoints and MarkLive in dead code scan\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cecfe983b389fb05b339ea9be71ade9e016dbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cecfe983b389fb05b339ea9be71ade9e016dbb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cecfe983b389fb05b339ea9be71ade9e016dbb9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d2a3d03ad256ab924dfddb4d200d1b6c11c7410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2a3d03ad256ab924dfddb4d200d1b6c11c7410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2a3d03ad256ab924dfddb4d200d1b6c11c7410"}, {"sha": "200fcaad46236f83d46ae277fa6e902419db2e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200fcaad46236f83d46ae277fa6e902419db2e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200fcaad46236f83d46ae277fa6e902419db2e58"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "d436f1a2b138534626fe6f30d93e62ecf215fa35", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cecfe983b389fb05b339ea9be71ade9e016dbb9/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cecfe983b389fb05b339ea9be71ade9e016dbb9/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=7cecfe983b389fb05b339ea9be71ade9e016dbb9", "patch": "@@ -16,13 +16,23 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The idea is that all reachable symbols are live, codes called\n+// from live codes are live, and everything else is dead.\n+\n #include \"rust-lint-marklive.h\"\n #include \"rust-hir-full.h\"\n #include \"rust-name-resolver.h\"\n \n namespace Rust {\n namespace Analysis {\n \n+// This class trys to find the live symbols which can be used as\n+// seeds in MarkLive\n+//\n+// 1. TODO: explicit live\n+//    - Attribute like #[allow(dead_code)]\n+//    - Attribute like #[lang=\"..\"], it's not a intra-crate item.\n+// 2. TODO: foreign item\n class FindEntryPoint : public MarkLiveBase\n {\n   using Rust::Analysis::MarkLiveBase::visit;\n@@ -62,6 +72,11 @@ MarkLive::Analysis (HIR::Crate &crate)\n   return marklive.liveSymbols;\n }\n \n+// pop a live symbol from worklist every iteration,\n+// if it's a function then walk the function body, and\n+// 1. save all the live symbols in worklist which is\n+//    visited first time\n+// 2. save all the live symbols in liveSymbols\n void\n MarkLive::go (HIR::Crate &crate)\n {"}]}