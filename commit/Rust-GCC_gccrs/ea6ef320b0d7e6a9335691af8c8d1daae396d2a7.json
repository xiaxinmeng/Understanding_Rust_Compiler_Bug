{"sha": "ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "node_id": "C_kwDOANBUbNoAKGVhNmVmMzIwYjBkN2U2YTkzMzU2OTFhZjhjOGQxZGFhZTM5NmQyYTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-03T00:17:04Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-03T00:17:04Z"}, "message": "Daily bump.", "tree": {"sha": "ebce4b31b82870bcb4ea50e7360b875bfb18c006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebce4b31b82870bcb4ea50e7360b875bfb18c006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/comments", "author": null, "committer": null, "parents": [{"sha": "c841dc0a4dd944cf8f76f414a286aedff1e38dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c841dc0a4dd944cf8f76f414a286aedff1e38dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c841dc0a4dd944cf8f76f414a286aedff1e38dce"}], "stats": {"total": 771, "additions": 770, "deletions": 1}, "files": [{"sha": "0ab31125653f7081cd0707fdfe012755c498ab93", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,9 @@\n+2021-12-02  Pekka Sepp\u00e4nen  <pexu@gcc.mail.kapsi.fi>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: For CPP_FOR_BUILD use $(CC_FOR_BUILD) -E instead of\n+\t$(CPP).\n+\n 2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* Makefile.def: Add bootstrap to libbacktrace, libphobos, zlib, and"}, {"sha": "60bf621f28f60cbf6cc75792d80ba9bad116665b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,110 @@\n+2021-12-02  Ilya Lipnitskiy  <ilya.lipnitskiy@gmail.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Define TARGET_LIBC_GNUSTACK on musl.\n+\n+2021-12-02  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/55610\n+\t* config/host-darwin.c (TRY_EMPTY_VM_SPACE,\n+\tSAFE_ALLOC_SIZE): New.\n+\t(darwin_gt_pch_get_address): Rewrite to use nominated\n+\tmemory segments rather than part of the compiler __DATA\n+\tsegment.\n+\t(darwin_gt_pch_use_address): Likewise.\n+\n+2021-12-02  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/install.texi (*-*-freebsd*): Remove references to\n+\tFreeBSD 1 and FreeBSD 2.\n+\n+2021-12-02  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/103437\n+\t* ira-color.c (setup_allocno_priorities): Switch off backup code\n+\tfor overflow if compiler has __builtin_smul_overflow.  Use <\n+\tfor comparison with -INT_MAX.\n+\n+2021-12-02  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.h: Delete a number of #defines that are\tnow\n+\tsuperfluous.  Alphabetize.  Include rs6000-vecdefines.h.  Include some\n+\tsynonyms.\n+\t* config/rs6000/rs6000-builtin-new.def (CMPB): Flag as no32bit.\n+\t(BPERMD): Flag as 32bit (needing special handling for 32-bit).\n+\t(UNPACK_TD): Return unsigned long long instead of unsigned long.\n+\t(GET_TEXASR): Return unsigned long instead of unsigned long long.\n+\t(GET_TEXASRU): Likewise.\n+\t(GET_TFHAR): Likewise.\n+\t(GET_TFIAR): Likewise.\n+\t(SET_TEXASR): Pass unsigned long instead of unsigned long long.\n+\t(SET_TEXASRU): Likewise.\n+\t(SET_TFHAR): Likewise.\n+\t(SET_TFIAR): Likewise.\n+\t(TABORTDC): Likewise.\n+\t(TABORTDCI): Likewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_expand_new_builtin): Fix error\n+\thandling for no32bit.  Add 32bit handling for RS6000_BIF_BPERMD.\n+\t* config/rs6000/rs6000-gen-builtins.c (write_init_file): Initialize\n+\tnew_builtins_are_live to 1.\n+\n+2021-12-02  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/103437\n+\t* ira-color.c (setup_allocno_priorities): Use long long\n+\tmultiplication as backup for overflow processing.\n+\n+2021-12-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_gen_shareable_zero): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rshrn<mode>,\n+\taarch64_rshrn2<mode>): Generate rounding half-ing add when appropriate.\n+\t* config/aarch64/aarch64.c (aarch64_gen_shareable_zero): New.\n+\n+2021-12-02  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/103437\n+\t* ira-color.c (setup_allocno_priorities): Process multiplication\n+\toverflow.\n+\n+2021-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/96092\n+\t* common.opt: New option.\n+\t* coverage.c (coverage_begin_function): Emit filename with\n+\tremap_profile_filename.\n+\t* doc/invoke.texi: Document the new option.\n+\t* file-prefix-map.c (add_profile_prefix_map): New.\n+\t(remap_profile_filename): Likewise.\n+\t* file-prefix-map.h (add_profile_prefix_map): Likewise.\n+\t(remap_profile_filename): Likewise.\n+\t* lto-opts.c (lto_write_options): Handle\n+\tOPT_fprofile_prefix_map_.\n+\t* opts-global.c (handle_common_deferred_options): Likewise.\n+\t* opts.c (common_handle_option): Likewise.\n+\t(gen_command_line_string): Likewise.\n+\t* profile.c (output_location): Emit filename with\n+\tremap_profile_filename.\n+\n+2021-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103271\n+\t* internal-fn.c (expand_DEFERRED_INIT): When the base\n+\tof the LHS is a decl with matching constant size use\n+\tthat as the initialization target instead of an\n+\teventual VLA typed one.\n+\n+2021-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103527\n+\t* tree-vect-stmts.c (vect_build_gather_load_calls): Always\n+\tuse a truth type for building the vector mask.\n+\n+2021-12-02  Rasmus Villemoes  <rasmus.villemoes@prevas.dk>\n+\n+\t* config/vxworks.h (LTO_PLUGIN_SPEC): Adapt to corrected\n+\tspelling of -linker-output-auto-nolto-rel.\n+\n 2021-12-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/102811"}, {"sha": "9098a5700ef3c0770544c0d271b4810cab5a4fd1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1 +1 @@\n-20211202\n+20211203"}, {"sha": "7d7d8116a562b82695f0b236ac9250352e9a9136", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 489, "deletions": 0, "changes": 489, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,492 @@\n+2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in (ADA_GENERATED_FILES): Add warning.\n+\n+2021-12-02  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* gcc-interface/a-assert.ads, gcc-interface/a-assert.adb: Remove.\n+\n+2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not back-annotate a\n+\tmaximum size for the Esize of limited record and concurrent types.\n+\n+2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (aggregate_type_contains_array_p): Delete.\n+\t(type_has_variable_size): Declare.\n+\t* gcc-interface/decl.c (adjust_packed): Return 0 only if the field\n+\ttype is an array with variable size.\n+\t* gcc-interface/utils.c (aggregate_type_contains_array_p): Make\n+\tstatic and remove SELF_REFERENTIAL parameter.\n+\t(type_has_variable_size): Make public.\n+\t(create_field_decl): Adjust call to aggregate_type_contains_array_p.\n+\n+2021-12-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Skip normal\n+\tprocessing for Itypes that are E_Class_Wide_Subtype with\n+\tEquivalent_Type set.\n+\n+2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Call_to_gnu): Rename GNAT_NAME variable\n+\tinto GNAT_SUBPROG to avoid later shadowing.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit32.adb: Add ghost instances and lemmas.\n+\t(Scaled_Divide32): Add ghost code to prove. Minor code\n+\tmodification to return early in error when divisor is zero.\n+\t* libgnat/s-arit32.ads: Add ghost instances and utilities.\n+\t(Scaled_Divide32): Add contract.\n+\n+2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sprint.adb (Source_Dump): Set both Print_Generated_Code and\n+\tDebug_Generated_Code to False at the end.\n+\n+2021-12-02  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Filter out nodes not\n+\tcoming from source before emitting the warning.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb (Log_Single_Size, Big_0): New ghost\n+\tconstants.\n+\t(Lemma_Mult_Non_Negative, Lemma_Mult_Non_Positive,\n+\tLemma_Not_In_Range_Big2xx64): New lemmas on big integers.\n+\t(Double_Divide): Remove justifications. Amend for that local\n+\tlemma Prove_Overflow_Case.\n+\t(Scaled_Divide): Remove justifications. Insert for that local\n+\tlemmas Prove_Negative_Dividend, Prove_Positive_Dividend and\n+\tProve_Q_Too_Big, and amend local lemma Prove_Overflow.  To prove\n+\tthe loop invariant on (Shift mod 2 = 0), introduce local ghost\n+\tvariable Iter to count loop iterations, and relate its value to\n+\tthe value of Shift through Log_Single_Size, with the help of\n+\tlocal lemma Prove_Power. Deal with proof regression by adding\n+\tnew local lemma Prove_First_Iteration and local ghost variable\n+\tD123.\n+\t* libgnat/s-arit64.ads (Multiply_With_Ovflo_Check64): Remove\n+\tunnecessary Pure_Function on function as package is Pure.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-widthi.adb: Add pragma Annotate.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-widint.ads: Mark in SPARK.\n+\t* libgnat/s-widlli.ads: Likewise.\n+\t* libgnat/s-widllli.ads: Likewise.\n+\t* libgnat/s-widlllu.ads: Likewise.\n+\t* libgnat/s-widllu.ads: Disable ghost/contract.\n+\t* libgnat/s-widthi.adb: Replicate and adapt the proof from\n+\ts-widthu.adb.\n+\t* libgnat/s-widthi.ads: Add minimal postcondition.\n+\t* libgnat/s-widthu.adb: Fix comments in the modular case.\n+\t* libgnat/s-widthu.ads: Add minimal postcondition.\n+\t* libgnat/s-widuns.ads: Disable ghost/contract.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* rtsfind.ads (RE_Id, RE_Unit_Table): Add RE_Suspension_Object.\n+\t* sem_util.adb (Is_Descendant_Of_Suspension_Object): Use Is_RTE.\n+\t(Is_Suspension_Object): Remove body.\n+\t* sem_util.ads (Is_Suspension_Object): Remove spec.\n+\t* snames.ads-tmpl (Name_Suspension_Object): Remove, now\n+\tunreferenced.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Append_Freeze_Action): Tune whitespace to make\n+\tthe code look similar to Append_Freeze_Actions, which takes a\n+\tList_Id.\n+\t* sem_ch6.adb (Analyze_Return_Type): Cleanup with\n+\tAppend_Freeze_Action.\n+\t* exp_ch3.adb (Build_Access_Subprogram_Wrapper_Body): Likewise.\n+\t* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Likewise.\n+\t* contracts.adb (Add_Indirect_Call_Wrapper): Remove extra call\n+\tto Ensure_Freeze_Node.\n+\t(Add_Call_Helper): Likewise.\n+\t* freeze.adb (Check_Inherited_Conditions): Likewise.\n+\t(Attribute_Renaming): Likewise.\n+\t* sem_ch8.adb: Likewise.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst\n+\t(No_Dispatching_Calls): Fix whitespace in example code.\n+\t* gnat_rm.texi: Regenerate.\n+\t* exp_ch13.adb (Expand_N_Freeze_Entity): Replace low-level\n+\tmembership test with a high-level wrapper.\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Remove unnecessary\n+\tinitialization of list of wrapper declarations and unnecessary\n+\tguard for list of their bodies (if no bodies are created then\n+\tAppend_Freeze_Actions is a no-op).\n+\n+2021-12-02  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_imgv.adb (Append_Table_To): Add new parameter to\n+\tMake_Aggregate call.\n+\t* gen_il-fields.ads (Opt_Field_Enum):\n+\tAdd Is_Parenthesis_Aggregate and Is_Enum_Array_Aggregate.\n+\t* gen_il-gen-gen_nodes.adb (Union): Add Is_Enum_Array_Aggregate\n+\tand Is_Parenthesis_Aggregate field to N_Aggregate.\n+\t* libgnarl/s-interr.adb (User_Handler, User_Entry, Blocked)\n+\t(Ignored, Last_Unblocker, Server_ID): Likewise.\n+\t* libgnarl/s-intman.ads (Keep_Unmasked, Reserve): Likewise.\n+\t* libgnarl/s-intman__posix.adb (Exception_Interrupts)\n+\t(Initialize): Likewise.\n+\t* libgnarl/s-mudido__affinity.adb (Create): Likewise.\n+\t* libgnarl/s-osinte__linux.ads (Unmasked, Reserved): Likewise.\n+\t* libgnarl/s-taprop__linux.adb (Create_Task, Set_Task_Affinity)\n+\t* libgnarl/s-tasdeb.adb (Trace_On): Likewise.\n+\t* libgnarl/s-tasdeb.ads (Known_Tasks): Likewise.\n+\t* libgnarl/s-tasinf__linux.ads (Any_CPU, No_CPU): Likewise.\n+\t* libgnarl/s-taskin.adb (Initialize_ATCB): Likewise.\n+\t* libgnarl/s-taskin.ads (Ada_Task_Control_Block): Likewise.\n+\t* libgnarl/s-tasren.adb (Default_Treatment)\n+\t(New_State): Likewise.\n+\t* libgnarl/s-tassta.adb (Trace_Unhandled_Exception_In_Task):\n+\tLikewise.\n+\t* libgnarl/s-tataat.adb (Index_Array): Likewise.\n+\t* libgnarl/s-tpobop.adb (New_State): Likewise.\n+\t* libgnat/a-calend.adb (Cumulative_Days_Before_Month)\n+\t(Leap_Second_Times): Likewise.\n+\t* libgnat/a-calend.ads (Days_In_Month): Likewise.\n+\t* libgnat/a-cfinve.adb (Insert): Likewise.\n+\t* libgnat/a-chahan.adb (Char_Map): Likewise.\n+\t* libgnat/a-chtgbo.adb (Clear): Likewise.\n+\t* libgnat/a-cobove.adb (\"&\", Insert, To_Vector): Likewise.\n+\t* libgnat/a-cofove.adb (Insert, To_Vector): Likewise.\n+\t* libgnat/a-cohata.ads (Hash_Table_Type): Likewise.\n+\t* libgnat/a-coinve.adb (Merge, Insert, Insert_Space): Likewise.\n+\t* libgnat/a-convec.adb (Insert, To_Vector): Likewise.\n+\t* libgnat/a-coprnu.ads (Primes): Likewise.\n+\t* libgnat/a-direct.adb (Empty_String): Use regular \"\" instead\n+\tof aggregate.\n+\t(Start_Search_Internal, Name_Case_Equivalence, Search)\n+\t(Start_Search, Start_Search_Internal): Use bracket for\n+\taggregate.\n+\t* libgnat/a-direct.ads (Start_Search,Search): Likewise.\n+\t* libgnat/a-direio.adb (Zeroes): Likewise.\n+\t* libgnat/a-nbnbre.adb (Leading_Padding, Trailing_Padding)\n+\t(Numerator_Image): Likewise.\n+\t* libgnat/a-ngrear.adb (Jacobi): Likewise.\n+\t* libgnat/a-stbubo.adb (Get_UTF_8): Likewise.\n+\t* libgnat/a-stbufo.adb (Put): Likewise.\n+\t* libgnat/a-stbuun.adb (Get_UTF_8): Likewise.\n+\t* libgnat/a-stbuut.adb (Put_7bit, Put_Character)\n+\t(Put_Wide_Character, Put_Wide_Wide_Character): Likewise.\n+\t* libgnat/a-stmaco.ads (Control_Set,Graphic_Set,Letter_Set)\n+\t(Lower_Set, Upper_Set, Basic_Set, Decimal_Digit_Set)\n+\t(Hexadecimal_Digit_Set, Alphanumeric_Set, Special_Set)\n+\t(ISO_646_Set): Likewise.\n+\t* libgnat/a-strbou.ads (Insert, Tail, \"*\", Replicate)\n+\t(Null_Bounded_String): Likewise.\n+\t* libgnat/a-strfix.ads (Head, Tail): Likewise.\n+\t* libgnat/a-strmap.adb (To_Domain, Lemma_Is_Sorted): Likewise.\n+\t* libgnat/a-strmap.ads (Null_Set): Likewise.\n+\t* libgnat/a-strsup.adb (Super_Head, Super_Replicate)\n+\t(Super_Tail): Likewise.\n+\t* libgnat/a-strsup.ads (Super_Head, Super_Tail, Times)\n+\t(Super_Replicate): Likewise.\n+\t* libgnat/a-sttebu.adb (Put_UTF8, Wide_Put_UTF_16): Likewise.\n+\t* libgnat/a-stuten.ads (BOM_16): Likewise.\n+\t* libgnat/a-stwibo.ads (Null_Bounded_Wide_String): Likewise.\n+\t* libgnat/a-stwima.ads (Null_Range): Likewise.\n+\t* libgnat/a-stwisu.adb (Super_Head, Super_Replicate)\n+\t(Super_Tail): Likewise.\n+\t* libgnat/a-stzbou.ads\n+\t(Null_Bounded_Wide_Wide_String): Likewise.\n+\t* libgnat/a-stzmap.ads (Null_Range): Likewise.\n+\t* libgnat/a-stzsup.adb (Super_Head, Super_Replicate)\n+\t(Super_Tail, Super_Trim): Likewise.\n+\t* libgnat/a-swmwco.ads (Control_Ranges, Graphic_Ranges)\n+\t(Letter_Ranges, Lower_Ranges, Upeer_Ranges, Basic_Ranges)\n+\t(Decimal_Digit_Ranges, Hexadecimal_Digit_Ranges)\n+\t(Alphanumeric_Ranges, Special_Graphic_Ranges, ISO_646_Ranges)\n+\t(Character_Ranges, Lower_Case_Mapping, Upper_Case_Mapping)\n+\t(Basic_Mapping): Likewise.\n+\t* libgnat/a-szmzco.ads (Control_Ranges, Graphic_Ranges)\n+\t(Letter_Ranges, Lower_Ranges, Upeer_Ranges, Basic_Ranges)\n+\t(Decimal_Digit_Ranges, Hexadecimal_Digit_Ranges)\n+\t(Alphanumeric_Ranges, Special_Graphic_Ranges, ISO_646_Ranges)\n+\t(Character_Ranges, Lower_Case_Mapping, Upper_Case_Mapping)\n+\t(Basic_Mapping): Likewise.\n+\t* libgnat/a-teioed.adb (Format_Number): Likewise.\n+\t* libgnat/a-wtedit.adb (Format_Number): Likewise.\n+\t* libgnat/a-ztedit.adb (Format_Number): Likewise.\n+\t* libgnat/g-arrspl.adb (Separators): Likewise.\n+\t* libgnat/g-catiio.adb (Month_Name_To_Number): Likewise.\n+\t* libgnat/g-cgideb.adb (NL, Title): Likewise.\n+\t* libgnat/g-comlin.adb (Internal_Initialize_Option_Scan)\n+\t(Display_Section_Help): Likewise.\n+\t* libgnat/g-comlin.ads (Opt_Parser_Data): Likewise.\n+\t* libgnat/g-debpoo.adb (Set_Dead_Beef, Dump): Likewise.\n+\t* libgnat/g-expect.adb (Expect, Has_Process, Send): Likewise.\n+\t* libgnat/g-forstr.adb (\"+\", Get_Formatted): Likewise.\n+\t* libgnat/g-memdum.adb (Dump): Likewise.\n+\t* libgnat/g-rannum.adb (Image): Likewise.\n+\t* libgnat/g-sechas.adb (Final, HMAC_Initial_Context): Likewise.\n+\t* libgnat/g-sehamd.ads (Initial_State): Likewise.\n+\t* libgnat/g-sehash.ads (Initial_State): Likewise.\n+\t* libgnat/g-sercom.ads (Data_Rate_Value): Likewise.\n+\t* libgnat/g-sercom__linux.adb (C_Data_Rate, C_Bits, C_Stop_Bits)\n+\t(C_Parity): Likewise.\n+\t* libgnat/g-shsh32.ads (K, Transform): Likewise.\n+\t* libgnat/g-shsh64.ads (K, Transform): Likewise.\n+\t* libgnat/g-socket.adb (Levels, Modes, Shutmodes, Requests)\n+\t(Options, Flags, Get_Name_Info, Image): Likewise.\n+\t* libgnat/g-socket.ads (Inet_Addr_Bytes_Length, Inet_Addr_Type)\n+\t(IPv4_To_IPv6_Prefix, Any_Inet_Addr, Any_Inet6_Addr)\n+\t(No_Inet_Addr, Broadcast_Inet_Addr, Loopback_Inet_Addr)\n+\t(Loopback_Inet6_Addr, Unspecified_Group_Inet_Addr)\n+\t(All_Hosts_Group_Inet_Addr, All_Routers_Group_Inet_Addr)\n+\t(Unspecified_Group_Inet6_Addr, All_Hosts_Group_Inet6_Addr)\n+\t(All_Routers_Group_Inet6_Addr):\tLikewise.\n+\t* libgnat/g-socpol.adb (To_C, Status, Get_Events): Likewise.\n+\t* libgnat/g-socpol.ads (Input_Event, Output_Event, Both_Event)\n+\t(Error_Event): Likewise.\n+\t* libgnat/g-sothco.ads (Families, Lengths, Sockaddr): Likewise.\n+\t* libgnat/g-spipat.adb (OK_For_Simple_Arbno): Likewise.\n+\t* libgnat/i-cobol.ads (Ada_To_COBOL, COBOL_To_Ada): Likewise.\n+\t* libgnat/i-pacdec.adb (Packed_Byte): Likewise.\n+\t* libgnat/i-pacdec.ads (Packed_Size): Likewise.\n+\t* libgnat/s-bitops.adb (Masks): Likewise.\n+\t* libgnat/s-crc32.adb (Table): Likewise.\n+\t* libgnat/s-gearop.adb (Unit_Matrix, Unit_Vector): Likewise.\n+\t* libgnat/s-genbig.adb (Out_data, Zero_Data, Big_Exp, Big_Mul)\n+\t(To_Bignum, To_String, Image, Leading_Padding): Likewise.\n+\t* libgnat/s-htable.adb (Reset): Likewise.\n+\t* libgnat/s-imgcha.adb (C0, C1): Likewise.\n+\t* libgnat/s-powflt.ads (Powten): Likewise.\n+\t* libgnat/s-powlfl.ads (Powten): Likewise.\n+\t* libgnat/s-powllf.ads (Powten): Likewise.\n+\t* libgnat/s-rannum.adb (Matrix_A, Random_Float_Template, Image):\n+\tLikewise.\n+\t* libgnat/s-rannum.ads (Generator): Likewise.\n+\t* libgnat/s-regexp.adb (Compile,Create_Primary_Table)\n+\t(Create_Primary_Table_Glob, Create_Secondary_Table, Compile):\n+\tLikewise.\n+\t* libgnat/s-regpat.adb (Bit_Conversion, Set, Dump_Until)\n+\t(Dump_Current, Dump_Error, Try, Reset_Class): Likewise.\n+\t* libgnat/s-regpat.ads (Pattern_Matcher, Never_Match): Likewise.\n+\t* libgnat/s-scaval__128.adb (Initialize): Likewise.\n+\t* libgnat/s-statxd.adb (Fields, W_F, W_LF)\n+\t(W_LLF, W_SF): Likewise.\n+\t* libgnat/s-stausa.adb (Initialize, Initialize_Analyzer)\n+\t(Output_Results): Likewise.\n+\t* libgnat/s-strops.adb (Str_Concat_SC): Likewise.\n+\t* libgnat/s-valrea.adb (Maxexp32, Maxexp64, Maxexp80): Likewise.\n+\t* libgnat/s-wchcon.ads (WC_Encoding_Letters)\n+\t(WC_Longest_Sequences): Likewise.\n+\t* par-ch4.adb (P_Aggregate_Or_Paren_Expr): Set\n+\tIs_Parenthesis_Aggregate when creating a N_Aggregate using\n+\tparenthesis.\n+\t* scng.adb (Scan): Lower version needed for bracket syntax from\n+\tExtensions to Ada2022.\n+\t* sem_aggr.adb (Resolve_Aggregate): Raise error for container\n+\taggregate using parenthesis instead of bracket.\n+\t(Resolve_Array_Aggregate): Raise warning for aggregate using\n+\tparenthesis in Ada2022 with obsolescent warning enabled and not\n+\tin GNAT mode.\n+\t* sem_util.ads (Check_Ambiguous_Aggregate): Typo fix in comment.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnarl/a-taside.ads (Activation_Is_Complete): Add pragma\n+\tInline.\n+\n+2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Freeze_Package_Instance): Consistently consider\n+\tthe freeze node of the parent and use large inequality for\n+\tSlocs.\n+\t(Freeze_Subprogram_Instance): Likewise.\n+\t(Insert_Freeze_Node_For_Instance): For an instance in a package\n+\tspec with no source body that immediately follows, consider the\n+\tbody of the package for the placement of the freeze node and go\n+\tto the outer level if there is no such body.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch13.ads (Expand_N_Freeze_Entity): Add note about a SPARK\n+\ttwin.\n+\t* exp_ch3.ads (Freeze_Type): Likewise.\n+\t* exp_spark.adb (Expand_SPARK_N_Freeze_Entity): Mimic what is\n+\tdone in Freeze_Entity.\n+\t(SPARK_Freeze_Type): Mimic what is done in Freeze_Type; add call\n+\tto Make_Predefined_Primitive_Eq_Spec.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Predefined_Primitive_Specs): Move code for\n+\tspec of dispatching equality.\n+\t(Predefined_Primitive_Bodies): Move code for body if dispatching\n+\tequality.\n+\t(Make_Predefined_Primitive_Eq_Spec): Separated code for spec of\n+\tdispatching equality.\n+\t(Predefined_Primitive_Eq_Body): Separated code for body of\n+\tdispatching equality.\n+\t* exp_ch3.ads: Update.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/s-valuti.ads (Scan_Natural_Ghost): Split body from\n+\tspec and put it into private part, so that GNATprove can pick it\n+\tboth when analysing the unit and its clients.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch6.adb, par-ch4.adb, sem_ch13.adb: Remove\n+\textra space after \":=\" symbol.\n+\t* gen_il-gen.adb: Likewise; add missing headerbox.\n+\n+2021-12-02  Richard Kenner  <kenner@adacore.com>\n+\n+\t* rtsfind.adb (Maybe_Add_With): Ensure that the added \"with\" is\n+\tnever marked as ignored ghost code.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Replace First_Entity/Next_Entity\n+\twith First_Component/Next_Component; remove condition with Ekind\n+\tequal to E_Component.\n+\t* sem_ch13.adb (Check_Record_Representation_Clause): Likewise\n+\tfor component-or-discriminant.\n+\t* sem_util.adb (Is_Fully_Initialized_Type): Likewise; rename Ent\n+\tto a more specific Comp.\n+\t* sem_warn.adb (Check_References): Likewise.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Unassigned_Out_Parameter): Move inner\n+\tloop at the beginning of subprogram, so it is executed only\n+\tonce; fix order in the \"add an ad hoc\" phrase.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Remove redundant condition.\n+\n+2021-12-02  Doug Rupp  <rupp@adacore.com>\n+\n+\t* vxworks7-cert-rtp-link__ppcXX.spec: New file.\n+\t* Makefile.rtl: Use it.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/i-c.adb: Add ghost code.\n+\t(C_Length_Ghost): New ghost functions to query the C length of a\n+\tstring.\n+\t(To_Ada): Insert constant Count_Cst where needed to comply with\n+\tSPARK.  Homogeneize code between variants for char, wchar_t,\n+\tchar16_t and char32_t. Use char16_nul and char32_nul\n+\tsystematically instead of their value. Fix the type of index To\n+\tto be Integer instead of Positive, to avoid a possible range\n+\tcheck failure on an empty Target. Insert an exit statement to\n+\tavoid a possible overflow failure when the last index in Target\n+\tis Natural'Last (possibly on a small string as well).\n+\t* libgnat/i-c.ads: Add contracts.\n+\t(C_Length_Ghost): New ghost functions to query the C length of a\n+\tstring.\n+\t* libgnat/s-os_lib.adb: Remove pragma Compiler_Unit_Warning\n+\tcausing a spurious error during compilation of GNAT, as this\n+\tpragma is not needed anymore now that we bootstrap (stage1) with\n+\tthe base compiler runtime.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnarl/a-taside.ads (Activation_Is_Complete): Add\n+\tprecondition.\n+\n+2021-12-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Derived_Type): Rename local variables; fix\n+\tstyle in comment.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-valboo.adb (First_Non_Space_Ghost): Move to\n+\tutilities.\n+\t(Value_Boolean): Prefix call to First_Non_Space_Ghost.\n+\t* libgnat/s-valboo.ads (First_Non_Space_Ghost): Move to\n+\tutilities.\n+\t(Is_Boolean_Image_Ghost, Value_Boolean): Prefix call to\n+\tFirst_Non_Space_Ghost.\n+\t* libgnat/s-valuer.adb (Scan_Raw_Real): Adapt to change of\n+\tfunction Scan_Exponent to procedure.\n+\t* libgnat/s-valueu.adb (Scan_Raw_Unsigned): Adapt to change of\n+\tfunction Scan_Exponent to procedure.\n+\t* libgnat/s-valuti.adb (First_Non_Space_Ghost): Function moved\n+\there.\n+\t(Last_Number_Ghost): New ghost query function.\n+\t(Scan_Exponent): Change function with side-effects into\n+\tprocedure, to mark in SPARK. Prove procedure wrt contract.\n+\tChange type of local P to avoid possible range check failure (it\n+\tis not known whether this can be activated by callers).\n+\t(Scan_Plus_Sign, Scan_Sign): Change type of local P to avoid\n+\tpossible range check failure. Add loop invariants and assertions\n+\tfor proof.\n+\t(Scan_Trailing_Blanks): Add loop invariant.\n+\t(Scan_Underscore): Remove SPARK_Mode Off.\n+\t* libgnat/s-valuti.ads (First_Non_Space_Ghost): Function moved\n+\there.\n+\t(Last_Number_Ghost, Only_Number_Ghost, Is_Natural_Format_Ghost,\n+\tScan_Natural_Ghost): New ghost query functions.\n+\t(Scan_Plus_Sign, Scan_Sign, Scan_Exponent, Scan_Trailing_Blanks,\n+\tScan_Underscore): Add functional contracts.\n+\n+2021-12-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-imgboo.adb: Mark in SPARK.\n+\t* libgnat/s-imgboo.ads: Mark in SPARK. Change from Pure to\n+\tPreelaborate unit in order to be able to depend on\n+\tSystem.Val_Bool.\n+\t(Image_Boolean): Functionally specify the result of the\n+\tprocedure by calling System.Val_Bool.Value_Boolean on the\n+\tresult.\n+\t* libgnat/s-valboo.adb: Mark in SPARK.\n+\t(First_Non_Space_Ghost): New ghost function.\n+\t(Value_Boolean): Change type of L and F to avoid possible range\n+\tcheck failure on empty Str.\n+\t* libgnat/s-valboo.ads: Mark in SPARK. Duplicate with-clause\n+\tfrom body in the spec to be able to call\n+\tSystem.Val_Util.Only_Space_Ghost in the contract.\n+\t(First_Non_Space_Ghost): New ghost function computing the first\n+\tnon-space character in a string.\n+\t(Is_Boolean_Image_Ghost): New ghost function computing whether a\n+\tstring is the image of a boolean value.\n+\t(Value_Boolean): Add in precondition the conditions to avoid\n+\traising Constraint_Error. This precondition is never executed,\n+\tand only used in proof, thanks to the use of pragma\n+\tAssertion_Policy. Given that precondition, the postcondition can\n+\tsimply check the first non-space character to decide whether\n+\tTrue or False is read.\n+\t* libgnat/s-valuti.adb: Mark in SPARK, but use SPARK_Mode Off on\n+\tall subprograms not yet proved.\n+\t(Bad_Value): Annotate expected exception.\n+\t(Normalize_String): Rewrite to avoid possible overflow when\n+\tincrementing F in the first loop. Add loop invariants.\n+\t* libgnat/s-valuti.ads: Mark in SPARK.\n+\t(Bad_Value): Add Depends contract to avoid warning on unused S.\n+\t(Only_Space_Ghost): New ghost function to query if string has\n+\tonly space in the specified range.\n+\t(Normalize_String): Add functional contract.\n+\t(Scan_Exponent): Mark spec as not in SPARK as this function has\n+\tside-effects.\n+\n+2021-12-02  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-socket.ads (Max_Name_Length): Initialize with\n+\tNI_MAXHOST.\n+\n+2021-12-02  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-socket.ads: Minor style fix.\n+\n 2021-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* einfo.ads (E_Decimal_Fixed_Point_Subtype): Fix pasto."}, {"sha": "81d433a989d82e5f00042859d77deefaf72d8274", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,15 @@\n+2021-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94490\n+\t* pt.c (expand_integer_pack): Call\n+\tinstantiate_non_dependent_expr_sfinae.\n+\n+2021-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103408\n+\t* cxx-pretty-print.c (pp_cxx_parameter_mapping): Print \"<unnamed>\"\n+\trather than crash on an unnamed template parameter.\n+\n 2021-12-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/103310"}, {"sha": "fa5c5cf1e6a286c747b9c31ba96cf3818e718557", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,16 @@\n+2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/103520\n+\t* d-frontend.h (gc_disable): Declare.\n+\t* d-lang.cc (d_init_options): Disable the D runtime garbage collector\n+\tafter initializing.\n+\n+2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (D_FRONTEND_OBJS): Prefix object files from the root\n+\tpackage with root-.\n+\t(d/root-%.o): New recipe.\n+\n 2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-spec.cc (lang_specific_driver): Set SKIPOPT on -static-libstdc++"}, {"sha": "362f6ba5810972dba66bdcca65dce481c8159421", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,11 @@\n+2021-12-02  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR fortran/90030\n+\t* trans-openmp.c (gfc_omp_finish_clause): Remove fold_convert to pointer\n+\tto char_type_node, add gcc_assert of POINTER_TYPE_P.\n+\t(gfc_trans_omp_array_section): Likewise.\n+\t(gfc_trans_omp_clauses): Likewise.\n+\n 2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102787"}, {"sha": "cf1fcfbc357ecc60822724238baf6b7ac1f758c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,86 @@\n+2021-12-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103526\n+\t* gcc.dg/analyzer/pr103526.c: New test.\n+\n+2021-12-02  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/bfp/scalar-extract-exp-2.c: Adjust expected error\n+\tmessage.\n+\t* gcc.target/powerpc/bfp/scalar-extract-sig-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-5.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-8.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-5.c: Likewise.\n+\t* gcc.target/powerpc/byte-in-set-2.c: Likewise.\n+\t* gcc.target/powerpc/cmpb-2.c: Likewise.\n+\t* gcc.target/powerpc/cmpb-3.c: Likewise.\n+\t* gcc.target/powerpc/cmpb32-2.c: Likewise.\n+\t* gcc.target/powerpc/crypto-builtin-2.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-splat-floatdouble.c: Remove invalid\n+\ttest and adjust xxpermdi count.\n+\t* gcc.target/powerpc/fold-vec-splat-longlong.c: Remove invalid\n+\ttests and adjust instruction counts.\n+\t* gcc.target/powerpc/fold-vec-splat-misc-invalid.c: Adjust expected\n+\terror messages.\n+\t* gcc.target/powerpc/int_128bit-runnable.c: Adjust instruction counts.\n+\t* gcc.target/powerpc/pr80315-1.c: Adjust expected error message.\n+\t* gcc.target/powerpc/pr80315-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-3.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-4.c: Likewise.\n+\t* gcc.target/powerpc/pr88100.c: Likewise.\n+\t* gcc.target/powerpc/pragma_misc9.c: Likewise.\n+\t* gcc.target/powerpc/pragma_power8.c: Undef _RS6000_VECDEFINES_H.\n+\t* gcc.target/powerpc/pragma_power9.c: Likewise.\n+\t* gcc.target/powerpc/test_fpscr_drn_builtin_error.c: Adjust expected\n+\terror messages.\n+\t* gcc.target/powerpc/test_fpscr_rn_builtin_error.c: Likewise.\n+\t* gcc.target/powerpc/vec-gnb-2.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-7.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-7.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-13.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-12.c: Likewise.\n+\n+2021-12-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/shrn-1.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/shrn-2.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/shrn-3.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/shrn-4.c: New test.\n+\n+2021-12-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR testsuite/103479\n+\t* gcc.dg/bic-bitmask-18.c: Update regexpr to expect = 0;.\n+\n+2021-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94490\n+\t* g++.dg/ext/integer-pack5.C: New test.\n+\n+2021-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103408\n+\t* g++.dg/cpp23/concepts-err1.C: New test.\n+\n+2021-12-02  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR fortran/90030\n+\t* gfortran.dg/goacc/finalize-1.f: Adjust scan test.\n+\t* gfortran.dg/gomp/affinity-clause-1.f90: Likewise.\n+\t* gfortran.dg/gomp/affinity-clause-5.f90: Likewise.\n+\t* gfortran.dg/gomp/defaultmap-4.f90: Likewise.\n+\t* gfortran.dg/gomp/defaultmap-5.f90: Likewise.\n+\t* gfortran.dg/gomp/defaultmap-6.f90: Likewise.\n+\t* gfortran.dg/gomp/map-3.f90: Likewise.\n+\t* gfortran.dg/gomp/pr78260-2.f90: Likewise.\n+\t* gfortran.dg/gomp/pr78260-3.f90: Likewise.\n+\n 2021-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/102471"}, {"sha": "0b4fe4ae50e0ca30f9336bd0a5b0638f6c3f0d5d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,9 @@\n+2021-12-02  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR fortran/90030\n+\t* testsuite/libgomp.oacc-fortran/pr90030.f90: New test.\n+\t* testsuite/libgomp.fortran/pr90030.f90: New test.\n+\n 2021-11-30  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "6632404e979e35d8403b4213a352e818d48ae38a", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,13 @@\n+2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/core/thread/osthread.d (callWithStackShell): Push all\n+\tcallee-save registers on the stack for AArch64 and ARM.\n+\n+2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* src/std/math/hardware.d (FloatingPointControl.getControlState): Add\n+\tmissing ControlState variable for AArch64.\n+\n 2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* testsuite/testsuite_flags.in: Add libphobos library directory as"}, {"sha": "49017443af32dafffff6490fda8a9d7a19ac8107", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,31 @@\n+2021-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/cow-stdexcept.cc [_GLIBCXX_FULY_DYNAMIC_STRING]\n+\t(logic_error, runtime_error): Remove custom definitions.\n+\n+2021-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103340\n+\tPR libstdc++/103400\n+\tPR libstdc++/103381\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Remove mt, bitmap\n+\tand pool options.\n+\t* configure: Regenerate.\n+\t* config/allocator/bitmap_allocator_base.h: Removed.\n+\t* config/allocator/mt_allocator_base.h: Removed.\n+\t* config/allocator/pool_allocator_base.h: Removed.\n+\t* doc/xml/manual/allocator.xml: Update.\n+\t* doc/xml/manual/configure.xml: Update.\n+\t* doc/xml/manual/evolution.xml: Document removal.\n+\t* doc/xml/manual/mt_allocator.xml: Editorial tweaks.\n+\t* doc/html/manual/*: Regenerate.\n+\n+2021-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h (basic_string::_M_is_leaked()):\n+\tRevert change to check __is_single_threaded() before using\n+\tatomic load.\n+\n 2021-12-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/103501"}, {"sha": "6fe559beb4fc9674480eea25cc786bbc513f9e62", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6ef320b0d7e6a9335691af8c8d1daae396d2a7/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=ea6ef320b0d7e6a9335691af8c8d1daae396d2a7", "patch": "@@ -1,3 +1,10 @@\n+2021-12-02  Rasmus Villemoes  <rasmus.villemoes@prevas.dk>\n+\n+\t* lto-plugin.c: Fix -linker-output-auto-notlo-rel ->\n+\t-linker-output-auto-nolto-rel typo.\n+\t(process_option): Adjust accordingly, accepting both old and\n+\tnew spelling.\n+\n 2021-09-13  Andrew Pinski  <apinski@marvell.com>\n \n \tPR lto/49664"}]}