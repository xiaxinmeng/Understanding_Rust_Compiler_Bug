{"sha": "ca76982841fd54733f9d6e9cb380453675978204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3Njk4Mjg0MWZkNTQ3MzNmOWQ2ZTljYjM4MDQ1MzY3NTk3ODIwNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-19T23:20:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-19T23:20:04Z"}, "message": "(push_reload, find_reloads): If an operand is a SUBREG of a PLUS,\n\nforce a reload and reload what is inside.\n\nFrom-SVN: r5814", "tree": {"sha": "4c3c9e3eec798df975f74296417d4b76b0766652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3c9e3eec798df975f74296417d4b76b0766652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca76982841fd54733f9d6e9cb380453675978204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca76982841fd54733f9d6e9cb380453675978204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca76982841fd54733f9d6e9cb380453675978204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca76982841fd54733f9d6e9cb380453675978204/comments", "author": null, "committer": null, "parents": [{"sha": "98c131c38295833821a84f9dc834b7a2dc127856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c131c38295833821a84f9dc834b7a2dc127856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c131c38295833821a84f9dc834b7a2dc127856"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "ca2ed814e81ce7e9192a0e449c829bd986d808b6", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca76982841fd54733f9d6e9cb380453675978204/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca76982841fd54733f9d6e9cb380453675978204/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ca76982841fd54733f9d6e9cb380453675978204", "patch": "@@ -615,7 +615,7 @@ push_reload (in, out, inloc, outloc, class,\n     }\n \n   /* If we are reloading a (SUBREG constant ...), really reload just the\n-     inside expression in its own mode.\n+     inside expression in its own mode.  Similarly for (SUBREG (PLUS ...)).\n      If we have (SUBREG:M1 (MEM:M2 ...) ...) (or an inner REG that is still\n      a pseudo and hence will become a MEM) with M1 wider than M2 and the\n      register is a pseudo, also reload the inside expression.\n@@ -639,6 +639,7 @@ push_reload (in, out, inloc, outloc, class,\n \n   if (in != 0 && GET_CODE (in) == SUBREG\n       && (CONSTANT_P (SUBREG_REG (in))\n+\t  || GET_CODE (SUBREG_REG (in)) == PLUS\n \t  || strict_low\n \t  || (((GET_CODE (SUBREG_REG (in)) == REG\n \t\t&& REGNO (SUBREG_REG (in)) >= FIRST_PSEUDO_REGISTER)\n@@ -2599,9 +2600,10 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    {\n \t      offset += SUBREG_WORD (operand);\n \t      operand = SUBREG_REG (operand);\n-\t      /* Force reload if this is a constant or if there may may\n+\t      /* Force reload if this is a constant or PLUS or if there may may\n \t\t be a problem accessing OPERAND in the outer mode.  */\n \t      if (CONSTANT_P (operand)\n+\t\t  || GET_CODE (operand) == PLUS\n #ifdef LOAD_EXTEND_OP\n \t\t  /* If we have a SUBREG where both the inner and outer\n \t\t     modes are different size but no wider than a word,"}]}