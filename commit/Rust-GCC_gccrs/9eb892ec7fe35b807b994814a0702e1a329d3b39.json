{"sha": "9eb892ec7fe35b807b994814a0702e1a329d3b39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViODkyZWM3ZmUzNWI4MDdiOTk0ODE0YTA3MDJlMWEzMjlkM2IzOQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-12-30T10:18:18Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-12-30T10:18:18Z"}, "message": "re PR objc/18971 (Can't send messages to methods with arrays as parameters)\n\n[gcc/objc/ChangeLog]\n2004-12-30  Ziemowit Laski  <zlaski@apple.com>\n\n        PR objc/18971\n        * objc-act.c (get_arg_type_list, start_method_def): Decay\n        array arguments into pointers.\n        (gen_type_name_0): Learn to pretty-print array types.\n\n[gcc/testsuite/ChangeLog]\n2004-12-30  Alexander Malmberg  <alexander@malmberg.org>\n            Ziemowit Laski  <zlaski@apple.com>\n\n        PR objc/18971\n        * objc.dg/encode-5.m: New test.\n\nFrom-SVN: r92731", "tree": {"sha": "e953af77b1c8271be70bd8c5ea131146aca32efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e953af77b1c8271be70bd8c5ea131146aca32efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb892ec7fe35b807b994814a0702e1a329d3b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb892ec7fe35b807b994814a0702e1a329d3b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb892ec7fe35b807b994814a0702e1a329d3b39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb892ec7fe35b807b994814a0702e1a329d3b39/comments", "author": null, "committer": null, "parents": [{"sha": "2fdb7cd791dc85ada9ffc675623fc0389af78794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdb7cd791dc85ada9ffc675623fc0389af78794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdb7cd791dc85ada9ffc675623fc0389af78794"}], "stats": {"total": 136, "additions": 130, "deletions": 6}, "files": [{"sha": "04b94c0eb224ababfb4c93f5a2498768bcc4982a", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=9eb892ec7fe35b807b994814a0702e1a329d3b39", "patch": "@@ -1,3 +1,10 @@\n+2004-12-30  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tPR objc/18971\n+\t* objc-act.c (get_arg_type_list, start_method_def): Decay\n+\tarray arguments into pointers.\n+\t(gen_type_name_0): Learn to pretty-print array types.\n+\n 2004-12-15  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (build_private_template): Change to return 'void'; do"}, {"sha": "09525007b9f6db1ba649bc556256cf7a7b7ba4e0", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9eb892ec7fe35b807b994814a0702e1a329d3b39", "patch": "@@ -5300,6 +5300,10 @@ get_arg_type_list (tree meth, int context, int superflag)\n     {\n       tree arg_type = TREE_VALUE (TREE_TYPE (akey));\n \n+      /* Decay arrays into pointers.  */\n+      if (TREE_CODE (arg_type) == ARRAY_TYPE)\n+\targ_type = build_pointer_type (TREE_TYPE (arg_type));\n+\n       chainon (arglist, build_tree_list (NULL_TREE, arg_type));\n     }\n \n@@ -7473,9 +7477,13 @@ start_method_def (tree method)\n   parmlist = METHOD_SEL_ARGS (method);\n   while (parmlist)\n     {\n-      tree parm = build_decl (PARM_DECL, KEYWORD_ARG_NAME (parmlist),\n-\t\t\t      TREE_VALUE (TREE_TYPE (parmlist)));\n+      tree type = TREE_VALUE (TREE_TYPE (parmlist)), parm;\n+\n+      /* Decay arrays into pointers.  */\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n+\ttype = build_pointer_type (TREE_TYPE (type));\n \n+      parm = build_decl (PARM_DECL, KEYWORD_ARG_NAME (parmlist), type);\n       objc_push_parm (parm);\n       parmlist = TREE_CHAIN (parmlist);\n     }\n@@ -7941,14 +7949,39 @@ gen_type_name_0 (tree type)\n \n   if (TYPE_P (type) && TYPE_NAME (type))\n     type = TYPE_NAME (type);\n-  else if (POINTER_TYPE_P (type))\n+  else if (POINTER_TYPE_P (type) || TREE_CODE (type) == ARRAY_TYPE)\n     {\n-      gen_type_name_0 (TREE_TYPE (type));\n+      tree inner = TREE_TYPE (type);\n+\n+      while (TREE_CODE (inner) == ARRAY_TYPE)\n+\tinner = TREE_TYPE (inner);\n+\n+      gen_type_name_0 (inner);\n       \n-      if (!POINTER_TYPE_P (TREE_TYPE (type)))\n+      if (!POINTER_TYPE_P (inner))\n \tstrcat (errbuf, \" \");\n \n-      strcat (errbuf, \"*\");\n+      if (POINTER_TYPE_P (type))\n+\tstrcat (errbuf, \"*\");\n+      else\n+\twhile (type != inner)\n+\t  {\n+\t    strcat (errbuf, \"[\");\n+\n+\t    if (TYPE_DOMAIN (type))\n+\t      {\n+\t\tchar sz[20];\n+\n+\t\tsprintf (sz, HOST_WIDE_INT_PRINT_DEC,\n+\t\t\t (TREE_INT_CST_LOW \n+\t\t\t  (TYPE_MAX_VALUE (TYPE_DOMAIN (type))) + 1));\n+\t\tstrcat (errbuf, sz);\n+\t      }\n+\n+\t    strcat (errbuf, \"]\");\n+\t    type = TREE_TYPE (type);\n+\t  }\n+\n       goto exit_function;\n     }\n "}, {"sha": "5bb895777e0627dee693b66484805ef23f9fa008", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9eb892ec7fe35b807b994814a0702e1a329d3b39", "patch": "@@ -1,3 +1,9 @@\n+2004-12-30  Alexander Malmberg  <alexander@malmberg.org>\n+\t    Ziemowit Laski  <zlaski@apple.com>\n+\n+        PR objc/18971\n+\t* objc.dg/encode-5.m: New test.\n+\n 2004-12-29  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/20040813-1.c: Disable for alpha and ia64."}, {"sha": "f2cb693b1b7249e1639811d37685da1b4c3557d7", "filename": "gcc/testsuite/objc.dg/encode-5.m", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb892ec7fe35b807b994814a0702e1a329d3b39/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m?ref=9eb892ec7fe35b807b994814a0702e1a329d3b39", "patch": "@@ -0,0 +1,78 @@\n+/* Check if array arguments of ObjC methods are decayed to pointer types\n+   in a proper fashion:\n+     (1) The _encodings_ for the array arguments should remain to be '[4i]' and\n+         such, since this has been the case since at least gcc 3.3.\n+     (2) However, when building the static C functions out of ObjC method signatures,\n+         we need to decay the arrays into pointers (as C does).\n+     (3) If array size is not known (e.g., 'int a[]'), then the type shall be\n+         encoded as a pointer.  */\n+\n+/* Contributed by Alexander Malmberg <alexander@malmberg.org>  */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+#ifdef __NEXT_RUNTIME__\n+#define METHOD Method\n+#define OBJC_GETCLASS objc_getClass\n+#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n+#else\n+#include <objc/objc-api.h>\n+#define METHOD Method_t\n+#define OBJC_GETCLASS objc_get_class\n+#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#endif\n+\n+@interface Test : Object\n+{ float j; }\n+-(void) test2: (int [5])a with: (int [])b;\n+-(id) test3: (Test **)b; /* { dg-warning \"previous declaration of .\\\\-\\\\(id\\\\)test3:\\\\(Test \\\\*\\\\*\\\\)b.\" } */\n+@end\n+\n+@implementation Test\n+-(void) test2: (int [5])a with: (int [])b\n+{\n+  a[3] = *b;\n+}\n+-(void) test3: (Test [3][4])b {  /* { dg-warning \"conflicting types for .\\\\-\\\\(void\\\\)test3:\\\\(Test \\\\\\[3\\\\\\]\\\\\\[4\\\\\\]\\\\)b.\" } */\n+}\n+@end\n+\n+int bb[6] = { 0, 1, 2, 3, 4, 5 };\n+int *b = bb;\n+Test *cc[4];\n+Test **c = cc;\n+\n+int offs1, offs2, offs3, offs4, offs5, offs6;\n+\n+int main(int argc, char **argv)\n+{\n+  Class testClass = OBJC_GETCLASS(\"Test\");\n+  METHOD meth;\n+\n+  cc[0] = [Test new];\n+  CHECK_IF (bb[3] == 3);\n+  [*c test2: b with: bb + 4];\n+  CHECK_IF (bb[3] == 4);\n+  bb[3] = 0;\n+  [*c test2: bb with: bb + 5];\n+  CHECK_IF (bb[3] == 5);\n+\n+  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test2:with:));\n+  offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n+  sscanf(meth->method_types, \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6);\n+  CHECK_IF (!offs2 && offs4 == 5 && offs3 > 0);\n+  CHECK_IF (offs5 == 2 * offs3 && offs6 == 3 * offs3 && offs1 == 4 * offs3);\n+  \n+  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test3:));\n+  offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n+  sscanf(meth->method_types, \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6);\n+  CHECK_IF (!offs2 && offs4 == 3 && offs5 == 4 && offs3 > 0);\n+  CHECK_IF (offs6 == 2 * offs3 && offs1 == 3 * offs3);\n+  \n+  return 0;\n+}"}]}