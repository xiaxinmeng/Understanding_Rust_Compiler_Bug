{"sha": "927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3ODE4YTU5ODRjNmZlNTIxY2Q4ZTZjOWExMWM3ZjM1OTlhODdhNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-01-11T01:17:19Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-01-11T01:17:19Z"}, "message": "2003-01-10  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(ch): Description added.\n\t(remotePort): Initialize with -1.\n\t(connect): Doesnt throws SocketException.\n\t* java/net/MulticastSocket.java\n\t(setInterface): Merge with Classpath.\n\t* java/net/ServerSocket.java\n\t(closed): New member variable.\n\t(bind): Check if socket is closed.\n\t(close): Close an associated channel too, set new value to closed.\n\t(isBound): Reindented.\n\t(isClosed): Implemented.\n\t* java/net/Socket.java\n\t(closed): New member variable.\n\t(bind): Check if socket is closed.\n\t(connect): Check if socket is closed.\n\t(close): Close an associated channel too, set new value to closed.\n\t(isClosed): Implemented.\n\nFrom-SVN: r61185", "tree": {"sha": "52d5c61480de7bafcb2350a66e100dff889e5727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d5c61480de7bafcb2350a66e100dff889e5727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/comments", "author": null, "committer": null, "parents": [{"sha": "b1771c6ac2f7917c10a8c47c61201f88e63eb2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1771c6ac2f7917c10a8c47c61201f88e63eb2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1771c6ac2f7917c10a8c47c61201f88e63eb2bb"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "e4d66e96ad35c84e96becd57b1aa05f6401251d5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "patch": "@@ -1,3 +1,24 @@\n+2003-01-10  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(ch): Description added.\n+\t(remotePort): Initialize with -1.\n+\t(connect): Doesnt throws SocketException.\n+\t* java/net/MulticastSocket.java\n+\t(setInterface): Merge with Classpath.\n+\t* java/net/ServerSocket.java\n+\t(closed): New member variable.\n+\t(bind): Check if socket is closed.\n+\t(close): Close an associated channel too, set new value to closed.\n+\t(isBound): Reindented.\n+\t(isClosed): Implemented.\n+\t* java/net/Socket.java\n+\t(closed): New member variable.\n+\t(bind): Check if socket is closed.\n+\t(connect): Check if socket is closed.\n+\t(close): Close an associated channel too, set new value to closed.\n+\t(isClosed): Implemented.\n+\n 2003-01-10  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/DisplayMode.java"}, {"sha": "c286d650b73699985dd555d7768f24f56bcd68a4", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "patch": "@@ -72,6 +72,10 @@\n    */\n   DatagramSocketImpl impl;\n \n+  /**\n+   * The unique DatagramChannel object associated with this datagram socket,\n+   * or null.\n+   */\n   DatagramChannel ch;\n \n   /**\n@@ -82,7 +86,7 @@\n   /**\n    * This is the port we are \"connected\" to\n    */\n-  private int remotePort;\n+  private int remotePort = -1;\n \n   /**\n    * Creates a DatagramSocket from a specified DatagramSocketImpl instance\n@@ -439,7 +443,6 @@ public void setReceiveBufferSize(int size) throws SocketException\n    * @since 1.2\n    */\n   public void connect(InetAddress address, int port)\n-    throws SocketException\n   {\n     if (address == null)\n       throw new IllegalArgumentException (\"Address may not be null\");\n@@ -451,10 +454,15 @@ public void connect(InetAddress address, int port)\n     if (sm != null)\n       sm.checkAccept(address.getHostName (), port);\n \n+    try\n+      {\n     impl.connect (address, port);\n-\n     remoteAddress = address;\n     remotePort = port;\n+      }\n+    catch (SocketException e)\n+      {\n+      }\n   }\n \n   /**"}, {"sha": "2535a48bea0cc0064097f529af8048555de0cfef", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "patch": "@@ -1,5 +1,6 @@\n /* MulticastSocket.java -- Class for using multicast sockets\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -163,13 +164,15 @@ public int getTimeToLive() throws IOException\n    /**\n     * Sets the interface to use for sending multicast packets.\n     *\n-    * @param inf The new interface to use\n+   * @param addr The new interface to use.\n     *\n-    * @exception SocketException If an error occurs\n+   * @exception SocketException If an error occurs.\n+   *\n+   * @since 1.4\n     */\n-  public void setInterface(InetAddress inf) throws SocketException\n+  public void setInterface(InetAddress addr) throws SocketException\n   {\n-    impl.setOption(SocketOptions.IP_MULTICAST_IF, inf);\n+    impl.setOption(SocketOptions.IP_MULTICAST_IF, addr);\n   }\n \n   /**"}, {"sha": "e2f8e637d09d16e0b8b67fbf1679b8da92c3375c", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "patch": "@@ -77,6 +77,8 @@\n    */\n   private ServerSocketChannel ch;\n \n+  private boolean closed = false;\n+  \n   /**\n    * Constructor that simply sets the implementation.\n    * \n@@ -200,6 +202,9 @@ public void bind (SocketAddress endpoint)\n    */\n   public void bind (SocketAddress endpoint, int backlog) throws IOException\n   {\n+    if (closed)\n+      throw new SocketException (\"ServerSocket is closed\");\n+    \n     if (impl == null)\n       throw new IOException (\"Cannot initialize Socket implementation\");\n \n@@ -315,7 +320,13 @@ protected final void implAccept (Socket s)\n    */\n   public void close () throws IOException\n   {\n-    impl.close();\n+    if (impl != null)\n+      impl.close ();\n+\n+    if (ch != null)\n+      ch.close ();\n+    \n+    closed = true;\n   }\n \n   /**\n@@ -358,8 +369,7 @@ public boolean isBound()\n    */\n   public boolean isClosed()\n   {\n-    // FIXME: implement this\n-    return false;\n+    return closed;\n   }\n \n   /**"}, {"sha": "e57c1ed5381016f4a670f324f57d0ef79fd2be5d", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927818a5984c6fe521cd8e6c9a11c7f3599a87a5/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=927818a5984c6fe521cd8e6c9a11c7f3599a87a5", "patch": "@@ -85,6 +85,8 @@\n \n   SocketChannel ch; // this field must have been set if created by SocketChannel\n \n+  private boolean closed = false;\n+\n   // Constructors\n \n   /**\n@@ -308,6 +310,9 @@ private Socket(InetAddress raddr, int rport, InetAddress laddr, int lport,\n    */\n   public void bind (SocketAddress bindpoint) throws IOException\n   {\n+    if (closed)\n+      throw new SocketException (\"Socket is closed\");\n+    \n     if ( !(bindpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException ();\n \n@@ -330,6 +335,9 @@ public void bind (SocketAddress bindpoint) throws IOException\n   public void connect (SocketAddress endpoint)\n     throws IOException\n   {\n+    if (closed)\n+      throw new SocketException (\"Socket is closed\");\n+    \n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n \n@@ -357,6 +365,9 @@ public void connect (SocketAddress endpoint)\n   public void connect (SocketAddress endpoint, int timeout)\n     throws IOException\n   {\n+    if (closed)\n+      throw new SocketException (\"Socket is closed\");\n+    \n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n \n@@ -853,6 +864,11 @@ public synchronized void close ()  throws IOException\n   {\n     if (impl != null)\n       impl.close();\n+\n+    if (ch != null)\n+      ch.close();\n+    \n+    closed = true;\n   }\n \n   /**\n@@ -1035,8 +1051,7 @@ public boolean isBound ()\n    */\n   public boolean isClosed ()\n   {\n-    // FIXME: implement this.\n-    return false;\n+    return closed;\n   }\n \n   /**"}]}