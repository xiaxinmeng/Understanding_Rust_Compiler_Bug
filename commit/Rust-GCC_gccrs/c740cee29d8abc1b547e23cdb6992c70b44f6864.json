{"sha": "c740cee29d8abc1b547e23cdb6992c70b44f6864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0MGNlZTI5ZDhhYmMxYjU0N2UyM2NkYjY5OTJjNzBiNDRmNjg2NA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-02-20T22:52:11Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-02-20T22:52:11Z"}, "message": "cppinit.c (set_lang): Move builtin handling to...\n\n        * cppinit.c (set_lang):  Move builtin handling to...\n        (init_builtins): ...here.\n        (_cpp_create_reader): Move call to set_lang.\n\nFrom-SVN: r39934", "tree": {"sha": "da85e6f46726842d6187a452b89d7a507bc2f85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da85e6f46726842d6187a452b89d7a507bc2f85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c740cee29d8abc1b547e23cdb6992c70b44f6864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c740cee29d8abc1b547e23cdb6992c70b44f6864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c740cee29d8abc1b547e23cdb6992c70b44f6864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c740cee29d8abc1b547e23cdb6992c70b44f6864/comments", "author": null, "committer": null, "parents": [{"sha": "064a552c29257fc313b13ebe1e9bd18047b8d2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064a552c29257fc313b13ebe1e9bd18047b8d2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064a552c29257fc313b13ebe1e9bd18047b8d2c4"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "c801bed510be81b8b5a73fafda791776b5e6aaf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c740cee29d8abc1b547e23cdb6992c70b44f6864/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c740cee29d8abc1b547e23cdb6992c70b44f6864/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c740cee29d8abc1b547e23cdb6992c70b44f6864", "patch": "@@ -1,3 +1,9 @@\n+2001-02-20  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppinit.c (set_lang):  Move builtin handling to...\n+\t(init_builtins): ...here.\n+\t(_cpp_create_reader): Move call to set_lang.\n+\n 2001-02-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* stmt.c (expand_return): If an attempt is made to return the"}, {"sha": "d885a764615a60ebbf14ccc87f3a7fc94d6b742b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c740cee29d8abc1b547e23cdb6992c70b44f6864/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c740cee29d8abc1b547e23cdb6992c70b44f6864/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=c740cee29d8abc1b547e23cdb6992c70b44f6864", "patch": "@@ -371,8 +371,6 @@ set_lang (pfile, lang)\n      cpp_reader *pfile;\n      enum c_lang lang;\n {\n-  struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n-\n   /* Defaults.  */\n   CPP_OPTION (pfile, lang) = lang;\n   CPP_OPTION (pfile, objc) = 0;\n@@ -388,7 +386,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n       CPP_OPTION (pfile, c99) = 1;\n-      new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n       break;\n     case CLK_GNUC89:\n       CPP_OPTION (pfile, trigraphs) = 0;\n@@ -400,29 +397,24 @@ set_lang (pfile, lang)\n \n       /* ISO C.  */\n     case CLK_STDC94:\n-      new_pending_directive (pend, \"__STDC_VERSION__=199409L\", cpp_define);\n     case CLK_STDC89:\n       CPP_OPTION (pfile, trigraphs) = 1;\n       CPP_OPTION (pfile, dollars_in_ident) = 0;\n       CPP_OPTION (pfile, cplusplus_comments) = 0;\n       CPP_OPTION (pfile, digraphs) = lang == CLK_STDC94;\n       CPP_OPTION (pfile, c99) = 0;\n       CPP_OPTION (pfile, extended_numbers) = 0;\n-      new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n       break;\n     case CLK_STDC99:\n       CPP_OPTION (pfile, trigraphs) = 1;\n       CPP_OPTION (pfile, dollars_in_ident) = 0;\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n       CPP_OPTION (pfile, c99) = 1;\n-      new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n-      new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n       break;\n \n       /* Objective C.  */\n     case CLK_OBJCXX:\n-      new_pending_directive (pend, \"__cplusplus\", cpp_define);\n       CPP_OPTION (pfile, cplusplus) = 1;\n     case CLK_OBJC:\n       CPP_OPTION (pfile, trigraphs) = 0;\n@@ -431,7 +423,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, digraphs) = 1;\n       CPP_OPTION (pfile, c99) = 0;\n       CPP_OPTION (pfile, objc) = 1;\n-      new_pending_directive (pend, \"__OBJC__\", cpp_define);\n       break;\n \n       /* C++.  */\n@@ -443,7 +434,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n       CPP_OPTION (pfile, c99) = 0;\n-      new_pending_directive (pend, \"__cplusplus\", cpp_define);\n       break;\n \n       /* Assembler.  */\n@@ -453,7 +443,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 0; \n       CPP_OPTION (pfile, c99) = 0;\n-      new_pending_directive (pend, \"__ASSEMBLER__\", cpp_define);\n       break;\n     }\n }\n@@ -509,6 +498,7 @@ cpp_create_reader (lang)\n \n   pfile = (cpp_reader *) xcalloc (1, sizeof (cpp_reader));\n \n+  set_lang (pfile, lang);\n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, show_column) = 1;\n@@ -518,9 +508,6 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n \n-  /* After creating pfile->pending.  */\n-  set_lang (pfile, lang);\n-\n   /* It's simplest to just create this struct whether or not it will\n      be needed.  */\n   pfile->deps = deps_init ();\n@@ -757,6 +744,23 @@ init_builtins (pfile)\n \t  _cpp_define_builtin (pfile, str);\n \t}\n     }\n+\n+  if (CPP_OPTION (pfile, cplusplus))\n+    _cpp_define_builtin (pfile, \"__cplusplus 1\");\n+  if (CPP_OPTION (pfile, objc))\n+    _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n+\n+  if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n+    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n+  else if (CPP_OPTION (pfile, c99))\n+    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n+\n+  if (CPP_OPTION (pfile, lang) == CLK_STDC89\n+      || CPP_OPTION (pfile, lang) == CLK_STDC94\n+      || CPP_OPTION (pfile, lang) == CLK_STDC99)\n+    _cpp_define_builtin (pfile, \"__STRICT_ANSI__ 1\");\n+  else if (CPP_OPTION (pfile, lang) == CLK_ASM)\n+    _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n }\n #undef BUILTIN\n #undef OPERATOR"}]}