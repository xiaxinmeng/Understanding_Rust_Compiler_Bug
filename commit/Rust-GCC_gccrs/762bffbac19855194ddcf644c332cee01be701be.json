{"sha": "762bffbac19855194ddcf644c332cee01be701be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyYmZmYmFjMTk4NTUxOTRkZGNmNjQ0YzMzMmNlZTAxYmU3MDFiZQ==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-01-14T11:02:18Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-01-14T11:02:18Z"}, "message": "re PR rtl-optimization/42388 (ICE in move_bb_info with sel-sched and modulo-sched for 176.gcc)\n\n        PR rtl-optimization/42388\n        * sel-sched-ir.c (maybe_tidy_empty_bb): Do not delete empty blocks\n        that have no predecessors nor successors.  Do not call move_bb_info\n        for empty blocks outside of current region.\n\nFrom-SVN: r155894", "tree": {"sha": "165cee59cff3d4e82367f1cdae0dc08c4edabb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/165cee59cff3d4e82367f1cdae0dc08c4edabb65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/762bffbac19855194ddcf644c332cee01be701be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762bffbac19855194ddcf644c332cee01be701be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762bffbac19855194ddcf644c332cee01be701be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762bffbac19855194ddcf644c332cee01be701be/comments", "author": null, "committer": null, "parents": [{"sha": "14f30b877fe018475154a6e4d8979bc57528232d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f30b877fe018475154a6e4d8979bc57528232d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f30b877fe018475154a6e4d8979bc57528232d"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "eb096499c85f08c6e816d3303f72c4d925162444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762bffbac19855194ddcf644c332cee01be701be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762bffbac19855194ddcf644c332cee01be701be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=762bffbac19855194ddcf644c332cee01be701be", "patch": "@@ -1,3 +1,10 @@\n+2010-01-14  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/42388\n+\t* sel-sched-ir.c (maybe_tidy_empty_bb): Do not delete empty blocks\n+\tthat have no predecessors nor successors.  Do not call move_bb_info\n+\tfor empty blocks outside of current region.\n+\n 2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/42294"}, {"sha": "1353b4cfc65bfd4a0a1e8e5adc0eed1c06fc0d94", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762bffbac19855194ddcf644c332cee01be701be/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762bffbac19855194ddcf644c332cee01be701be/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=762bffbac19855194ddcf644c332cee01be701be", "patch": "@@ -3540,12 +3540,15 @@ maybe_tidy_empty_bb (basic_block bb, bool recompute_toporder_p)\n   bool rescan_p;\n \n   /* Keep empty bb only if this block immediately precedes EXIT and\n-     has incoming non-fallthrough edge.  Otherwise remove it.  */\n+     has incoming non-fallthrough edge, or it has no predecessors or\n+     successors.  Otherwise remove it.  */\n   if (!sel_bb_empty_p (bb)\n       || (single_succ_p (bb)\n           && single_succ (bb) == EXIT_BLOCK_PTR\n           && (!single_pred_p (bb)\n-              || !(single_pred_edge (bb)->flags & EDGE_FALLTHRU))))\n+              || !(single_pred_edge (bb)->flags & EDGE_FALLTHRU)))\n+      || EDGE_COUNT (bb->preds) == 0\n+      || EDGE_COUNT (bb->succs) == 0)\n     return false;\n \n   /* Do not attempt to redirect complex edges.  */\n@@ -3595,7 +3598,8 @@ maybe_tidy_empty_bb (basic_block bb, bool recompute_toporder_p)\n     {\n       gcc_assert (pred_bb != NULL);\n \n-      move_bb_info (pred_bb, bb);\n+      if (in_current_region_p (pred_bb))\n+\tmove_bb_info (pred_bb, bb);\n       remove_empty_bb (bb, true);\n     }\n "}, {"sha": "dfc02daad65c183d0e73102b69a1380b65de11be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762bffbac19855194ddcf644c332cee01be701be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762bffbac19855194ddcf644c332cee01be701be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=762bffbac19855194ddcf644c332cee01be701be", "patch": "@@ -1,3 +1,8 @@\n+2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/42388\n+\t* gcc.dg/pr42388.c: New.\n+\n 2010-01-14  Alexander Monakov <amonakov@ispras.ru>\n \n \tPR rtl-optimization/42294"}, {"sha": "ad97eb4d98a75d31133c89101de127fb9ef6576a", "filename": "gcc/testsuite/gcc.dg/pr42388.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762bffbac19855194ddcf644c332cee01be701be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42388.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762bffbac19855194ddcf644c332cee01be701be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42388.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42388.c?ref=762bffbac19855194ddcf644c332cee01be701be", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fselective-scheduling -fmodulo-sched\" } */\n+\n+enum rtx_code\n+{\n+  INSN, ADDR_VEC, ADDR_DIFF_VEC, CALL_INSN, CODE_LABEL, BARRIER, NOTE\n+};\n+typedef union rtunion_def\n+{\n+  int rtint;\n+  char *rtstr;\n+  struct rtx_def *rtx;\n+  struct rtvec_def *rtvec;\n+}\n+rtunion;\n+typedef struct rtx_def\n+{\n+  unsigned short code;\n+  rtunion fld[1];\n+}\n+ *rtx;\n+typedef struct rtvec_def\n+{\n+  unsigned num_elem;\n+  rtunion elem[1];\n+}\n+ *rtvec;\n+extern rtx emit_barrier (void);\n+extern rtx emit_note (char *);\n+\n+static void\n+copy_loop_body (rtx *map)\n+{\n+  int i;\n+  rtx insn, copy;\n+  rtx pat = copy->fld[3].rtx;\n+\n+  switch (insn->code)\n+    {\n+    case INSN:\n+      if (insn->fld[7].rtx)\n+\t{\n+\t}\n+      else if (pat->code == ADDR_VEC || pat->code == ADDR_DIFF_VEC)\n+\t{\n+\t  int diff_vec_p = pat->code == ADDR_DIFF_VEC;\n+\t  int len = pat->fld[diff_vec_p].rtvec->num_elem;\n+\t  for (i = 0; i < len; i++)\n+\t    pat->fld[diff_vec_p].rtvec->elem[i].rtx->fld[5].rtint++;\n+\t}\n+    case CALL_INSN:\n+      for (i = 0; i < 64; i++)\n+\tmap[i] = 0;\n+    case CODE_LABEL:\n+    case BARRIER:\n+      copy = emit_barrier ();\n+    case NOTE:\n+      copy = emit_note (\"x\");\n+    }\n+}\n+void\n+unroll_loop (int insn_count, rtx *map)\n+{\n+  if (insn_count > 50)\n+    copy_loop_body (map);\n+}\n+"}]}