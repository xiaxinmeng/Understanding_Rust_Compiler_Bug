{"sha": "93cbebde76ac7de2d69b223d99acb39e0370687f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjYmViZGU3NmFjN2RlMmQ2OWIyMjNkOTlhY2IzOWUwMzcwNjg3Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-06T23:34:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-06T23:34:00Z"}, "message": "compiler: permit inlining temporary statements and references\n    \n    This increases the number of inlinable functions from 439 to 455.\n    An example is math/bits.Mul32, which uses temporaries to handle the\n    tuple assignment.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/180837\n\nFrom-SVN: r272022", "tree": {"sha": "66c133d573a219583b5c460b329b900c18ee0ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c133d573a219583b5c460b329b900c18ee0ac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93cbebde76ac7de2d69b223d99acb39e0370687f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cbebde76ac7de2d69b223d99acb39e0370687f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93cbebde76ac7de2d69b223d99acb39e0370687f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cbebde76ac7de2d69b223d99acb39e0370687f/comments", "author": null, "committer": null, "parents": [{"sha": "5e664ed0938357392823d2a43be8a196526dd97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e664ed0938357392823d2a43be8a196526dd97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e664ed0938357392823d2a43be8a196526dd97c"}], "stats": {"total": 261, "additions": 255, "deletions": 6}, "files": [{"sha": "4d455ea802360bfa08771a8274909db9c3dc6c6c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -1,4 +1,4 @@\n-bc7374913367fba9b10dc284af87eb539fb6c5b2\n+015785baa74629baafe520367b9c71707366c6eb\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "0890b0961f718363dd24aa847c32369236901817", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -6,15 +6,14 @@\n \n #include \"go-system.h\"\n \n-#include \"go-sha1.h\"\n #include \"go-c.h\"\n-\n+#include \"go-diagnostics.h\"\n+#include \"go-sha1.h\"\n #include \"gogo.h\"\n #include \"types.h\"\n #include \"expressions.h\"\n #include \"statements.h\"\n #include \"export.h\"\n-\n #include \"go-linemap.h\"\n #include \"backend.h\"\n \n@@ -1297,3 +1296,33 @@ Stream_to_section::do_write(const char* bytes, size_t length)\n {\n   this->backend_->write_export_data (bytes, length);\n }\n+\n+// Class Export_function_body.\n+\n+// Record a temporary statement.\n+\n+unsigned int\n+Export_function_body::record_temporary(const Temporary_statement* temp)\n+{\n+  unsigned int ret = this->next_temporary_index_;\n+  if (ret > 0x7fffffff)\n+    go_error_at(temp->location(),\n+\t\t\"too many temporary statements in export data\");\n+  ++this->next_temporary_index_;\n+  std::pair<const Temporary_statement*, unsigned int> val(temp, ret);\n+  std::pair<Unordered_map(const Temporary_statement*, unsigned int)::iterator,\n+\t    bool> ins = this->temporary_indexes_.insert(val);\n+  go_assert(ins.second);\n+  return ret;\n+}\n+\n+// Return the index of a temporary statement.\n+\n+unsigned int\n+Export_function_body::temporary_index(const Temporary_statement* temp)\n+{\n+  Unordered_map(const Temporary_statement*, unsigned int)::const_iterator p =\n+    this->temporary_indexes_.find(temp);\n+  go_assert(p != this->temporary_indexes_.end());\n+  return p->second;\n+}"}, {"sha": "92d0180dde6a05506f1c66fab7a57e9b5c345ac5", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -20,6 +20,7 @@ class Type;\n class Package;\n class Import_init_set;\n class Backend;\n+class Temporary_statement;\n \n // Codes used for the builtin types.  These are all negative to make\n // them easily distinct from the codes assigned by Export::write_type.\n@@ -307,7 +308,8 @@ class Export_function_body : public String_dump\n {\n  public:\n   Export_function_body(Export* exp, int indent)\n-    : exp_(exp), type_context_(NULL), indent_(indent)\n+    : exp_(exp), body_(), type_context_(NULL), next_temporary_index_(0),\n+      temporary_indexes_(), indent_(indent)\n   { }\n \n   // Write a character to the body.\n@@ -363,6 +365,14 @@ class Export_function_body : public String_dump\n   package_index(const Package* p) const\n   { return this->exp_->package_index(p); }\n \n+  // Record a temporary statement and return its index.\n+  unsigned int\n+  record_temporary(const Temporary_statement*);\n+\n+  // Return the index of a temporary statement.\n+  unsigned int\n+  temporary_index(const Temporary_statement*);\n+\n   // Return a reference to the completed body.\n   const std::string&\n   body() const\n@@ -375,6 +385,10 @@ class Export_function_body : public String_dump\n   std::string body_;\n   // Current type context.  Used to avoid duplicate type conversions.\n   Type* type_context_;\n+  // Index to give to next temporary statement.\n+  unsigned int next_temporary_index_;\n+  // Map temporary statements to indexes.\n+  Unordered_map(const Temporary_statement*, unsigned int) temporary_indexes_;\n   // Current indentation level: the number of spaces before each statement.\n   int indent_;\n };"}, {"sha": "273c8f074c790ad217b67776d6556a5c8e027e2d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -1025,6 +1025,57 @@ Temporary_reference_expression::do_address_taken(bool)\n   this->statement_->set_is_address_taken();\n }\n \n+// Export a reference to a temporary.\n+\n+void\n+Temporary_reference_expression::do_export(Export_function_body* efb) const\n+{\n+  unsigned int idx = efb->temporary_index(this->statement_);\n+  char buf[50];\n+  snprintf(buf, sizeof buf, \"$t%u\", idx);\n+  efb->write_c_string(buf);\n+}\n+\n+// Import a reference to a temporary.\n+\n+Expression*\n+Temporary_reference_expression::do_import(Import_function_body* ifb,\n+\t\t\t\t\t  Location loc)\n+{\n+  std::string id = ifb->read_identifier();\n+  go_assert(id[0] == '$' && id[1] == 't');\n+  const char *p = id.c_str();\n+  char *end;\n+  long idx = strtol(p + 2, &end, 10);\n+  if (*end != '\\0' || idx > 0x7fffffff)\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(loc,\n+\t\t    (\"invalid export data for %qs: \"\n+\t\t     \"invalid temporary reference index at %lu\"),\n+\t\t    ifb->name().c_str(),\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return Expression::make_error(loc);\n+    }\n+\n+  Temporary_statement* temp =\n+    ifb->temporary_statement(static_cast<unsigned int>(idx));\n+  if (temp == NULL)\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(loc,\n+\t\t    (\"invalid export data for %qs: \"\n+\t\t     \"undefined temporary reference index at %lu\"),\n+\t\t    ifb->name().c_str(),\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return Expression::make_error(loc);\n+    }\n+\n+  return Expression::make_temporary_reference(temp, loc);\n+}\n+\n // Get a backend expression referring to the variable.\n \n Bexpression*\n@@ -17819,6 +17870,10 @@ Expression::import_expression_without_suffix(Import_expression* imp,\n     }\n   if (ifb->saw_error())\n     return Expression::make_error(loc);\n+\n+  if (ifb->match_c_string(\"$t\"))\n+    return Temporary_reference_expression::do_import(ifb, loc);\n+\n   return Expression::import_identifier(ifb, loc);\n }\n "}, {"sha": "09c71adbd315bfa04b0f08c3de9a27013a0a6da5", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -1531,6 +1531,9 @@ class Temporary_reference_expression : public Expression\n   set_is_lvalue()\n   { this->is_lvalue_ = true; }\n \n+  static Expression*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   Type*\n   do_type();\n@@ -1543,6 +1546,13 @@ class Temporary_reference_expression : public Expression\n   do_copy()\n   { return make_temporary_reference(this->statement_, this->location()); }\n \n+  int\n+  do_inlining_cost() const\n+  { return 1; }\n+\n+  void\n+  do_export(Export_function_body*) const;\n+\n   bool\n   do_is_addressable() const\n   { return true; }"}, {"sha": "70e92ab9d3b5d034e758978c87349b0bd685bd7e", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -1611,3 +1611,34 @@ Import_function_body::read_type()\n \n   return type;\n }\n+\n+// Record the index of a temporary statement.\n+\n+void\n+Import_function_body::record_temporary(Temporary_statement* temp,\n+\t\t\t\t       unsigned int idx)\n+{\n+  size_t have = this->temporaries_.size();\n+  if (static_cast<size_t>(idx) >= have)\n+    {\n+      size_t want;\n+      if (have == 0)\n+\twant = 8;\n+      else if (have < 256)\n+\twant = have * 2;\n+      else\n+\twant = have + 64;\n+      this->temporaries_.resize(want, NULL);\n+    }\n+  this->temporaries_[idx] = temp;\n+}\n+\n+// Return a temporary statement given an index.\n+\n+Temporary_statement*\n+Import_function_body::temporary_statement(unsigned int idx)\n+{\n+  if (static_cast<size_t>(idx) >= this->temporaries_.size())\n+    return NULL;\n+  return this->temporaries_[idx];\n+}"}, {"sha": "4afeb4a29588f76aa055c5f28b29c4c800550290", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -587,7 +587,8 @@ class Import_function_body : public Import_expression\n \t\t       const std::string& body, size_t off, Block* block,\n \t\t       int indent)\n     : gogo_(gogo), imp_(imp), named_object_(named_object), body_(body),\n-      off_(off), block_(block), indent_(indent), saw_error_(false)\n+      off_(off), block_(block), indent_(indent), temporaries_(),\n+      saw_error_(false)\n   { }\n \n   // The IR.\n@@ -695,6 +696,14 @@ class Import_function_body : public Import_expression\n   version() const\n   { return this->imp_->version(); }\n \n+  // Record the index of a temporary statement.\n+  void\n+  record_temporary(Temporary_statement*, unsigned int);\n+\n+  // Return a temporary statement given an index.\n+  Temporary_statement*\n+  temporary_statement(unsigned int);\n+\n   // Implement Import_expression.\n   Import_function_body*\n   ifb()\n@@ -736,6 +745,8 @@ class Import_function_body : public Import_expression\n   Block* block_;\n   // Current expected indentation level.\n   int indent_;\n+  // Temporary statements by index.\n+  std::vector<Temporary_statement*> temporaries_;\n   // Whether we've seen an error.  Used to avoid reporting excess\n   // errors.\n   bool saw_error_;"}, {"sha": "cd7b8568a1285a73851d4af9d2050a88e7359ff1", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -155,6 +155,8 @@ Statement::import_statement(Import_function_body* ifb, Location loc)\n       ifb->advance(6);\n       return Statement::make_return_statement(NULL, loc);\n     }\n+  else if (ifb->match_c_string(\"var $t\"))\n+    return Temporary_statement::do_import(ifb, loc);\n   else if (ifb->match_c_string(\"var \"))\n     return Variable_declaration_statement::do_import(ifb, loc);\n \n@@ -693,6 +695,92 @@ Statement::make_temporary(Type* type, Expression* init,\n   return new Temporary_statement(type, init, location);\n }\n \n+// Export a temporary statement.\n+\n+void\n+Temporary_statement::do_export_statement(Export_function_body* efb)\n+{\n+  unsigned int idx = efb->record_temporary(this);\n+  char buf[100];\n+  snprintf(buf, sizeof buf, \"var $t%u\", idx);\n+  efb->write_c_string(buf);\n+  if (this->type_ != NULL)\n+    {\n+      efb->write_c_string(\" \");\n+      efb->write_type(this->type_);\n+    }\n+  if (this->init_ != NULL)\n+    {\n+      efb->write_c_string(\" = \");\n+\n+      go_assert(efb->type_context() == NULL);\n+      efb->set_type_context(this->type_);\n+\n+      this->init_->export_expression(efb);\n+\n+      efb->set_type_context(NULL);\n+    }\n+}\n+\n+// Import a temporary statement.\n+\n+Statement*\n+Temporary_statement::do_import(Import_function_body* ifb, Location loc)\n+{\n+  ifb->require_c_string(\"var \");\n+  std::string id = ifb->read_identifier();\n+  go_assert(id[0] == '$' && id[1] == 't');\n+  const char *p = id.c_str();\n+  char *end;\n+  long idx = strtol(p + 2, &end, 10);\n+  if (*end != '\\0' || idx > 0x7fffffff)\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(loc,\n+\t\t    (\"invalid export data for %qs: \"\n+\t\t     \"bad temporary statement index at %lu\"),\n+\t\t    ifb->name().c_str(),\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return Statement::make_error_statement(loc);\n+    }\n+\n+  Type* type = NULL;\n+  if (!ifb->match_c_string(\" = \"))\n+    {\n+      ifb->require_c_string(\" \");\n+      type = ifb->read_type();\n+    }\n+  Expression* init = NULL;\n+  if (ifb->match_c_string(\" = \"))\n+    {\n+      ifb->advance(3);\n+      init = Expression::import_expression(ifb, loc);\n+      if (type != NULL)\n+\t{\n+\t  Type_context context(type, false);\n+\t  init->determine_type(&context);\n+\t}\n+    }\n+  if (type == NULL && init == NULL)\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(loc,\n+\t\t    (\"invalid export data for %qs: \"\n+\t\t     \"temporary statement has neither type nor init at %lu\"),\n+\t\t    ifb->name().c_str(),\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return Statement::make_error_statement(loc);\n+    }\n+\n+  Temporary_statement* temp = Statement::make_temporary(type, init, loc);\n+\n+  ifb->record_temporary(temp, static_cast<unsigned int>(idx));\n+\n+  return temp;\n+}\n+\n // The Move_subexpressions class is used to move all top-level\n // subexpressions of an expression.  This is used for things like\n // index expressions in which we must evaluate the index value before"}, {"sha": "bb7150164338e9c4c84b0ad8c75f3ef51c6030e9", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cbebde76ac7de2d69b223d99acb39e0370687f/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=93cbebde76ac7de2d69b223d99acb39e0370687f", "patch": "@@ -739,6 +739,10 @@ class Temporary_statement : public Statement\n   Bvariable*\n   get_backend_variable(Translate_context*) const;\n \n+  // Import the declaration of a temporary.\n+  static Statement*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -752,6 +756,13 @@ class Temporary_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n+  int\n+  do_inlining_cost()\n+  { return 1; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   Statement*\n   do_flatten(Gogo*, Named_object*, Block*, Statement_inserter*);\n "}]}