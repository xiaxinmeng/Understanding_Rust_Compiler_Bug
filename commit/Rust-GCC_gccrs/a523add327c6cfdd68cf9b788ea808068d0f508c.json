{"sha": "a523add327c6cfdd68cf9b788ea808068d0f508c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyM2FkZDMyN2M2Y2ZkZDY4Y2Y5Yjc4OGVhODA4MDY4ZDBmNTA4Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-27T14:35:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-28T08:14:46Z"}, "message": "rtl-optimization/80960 - avoid creating garbage RTL in DSE\n\nThe following avoids repeatedly turning VALUE RTXen into\nsth useful and re-applying a constant offset through get_addr\nvia DSE check_mem_read_rtx.  Instead perform this once for\nall stores to be visited in check_mem_read_rtx.  This avoids\nallocating 1.6GB of garbage PLUS RTXen on the PR80960\ntestcase, fixing the memory usage regression from old GCC.\n\n2021-01-27  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/80960\n\t* dse.c (check_mem_read_rtx): Call get_addr on the\n\toffsetted address.", "tree": {"sha": "70405368b4b570d343d2a1b5b041beb8a3fd7ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70405368b4b570d343d2a1b5b041beb8a3fd7ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a523add327c6cfdd68cf9b788ea808068d0f508c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a523add327c6cfdd68cf9b788ea808068d0f508c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a523add327c6cfdd68cf9b788ea808068d0f508c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a523add327c6cfdd68cf9b788ea808068d0f508c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "da0df54a2dde089ad0c48ee63de956f1473dc4fb", "filename": "gcc/dse.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a523add327c6cfdd68cf9b788ea808068d0f508c/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a523add327c6cfdd68cf9b788ea808068d0f508c/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=a523add327c6cfdd68cf9b788ea808068d0f508c", "patch": "@@ -2219,6 +2219,11 @@ check_mem_read_rtx (rtx *loc, bb_info_t bb_info)\n     }\n   if (maybe_ne (offset, 0))\n     mem_addr = plus_constant (get_address_mode (mem), mem_addr, offset);\n+  /* Avoid passing VALUE RTXen as mem_addr to canon_true_dependence\n+     which will over and over re-create proper RTL and re-apply the\n+     offset above.  See PR80960 where we almost allocate 1.6GB of PLUS\n+     RTXen that way.  */\n+  mem_addr = get_addr (mem_addr);\n \n   if (group_id >= 0)\n     {"}]}