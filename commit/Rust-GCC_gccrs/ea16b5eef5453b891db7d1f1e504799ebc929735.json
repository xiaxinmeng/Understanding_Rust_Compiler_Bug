{"sha": "ea16b5eef5453b891db7d1f1e504799ebc929735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExNmI1ZWVmNTQ1M2I4OTFkYjdkMWYxZTUwNDc5OWViYzkyOTczNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-06-10T12:27:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-06-10T12:27:55Z"}, "message": "gcc.c (process_command): Avoid assignment to read-only location.\n\n\t* gcc.c (process_command): Avoid assignment to read-only location.\n\tFix sizeof calculation.\n\nFrom-SVN: r54439", "tree": {"sha": "0cb9205966f95f0e05aaa98c93a03c7255a9008f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb9205966f95f0e05aaa98c93a03c7255a9008f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea16b5eef5453b891db7d1f1e504799ebc929735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea16b5eef5453b891db7d1f1e504799ebc929735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea16b5eef5453b891db7d1f1e504799ebc929735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea16b5eef5453b891db7d1f1e504799ebc929735/comments", "author": null, "committer": null, "parents": [{"sha": "1e4b0830e2e3f2f53a5cb367753aeac0ec9c1d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4b0830e2e3f2f53a5cb367753aeac0ec9c1d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4b0830e2e3f2f53a5cb367753aeac0ec9c1d11"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "af27923a72fd28bac99dbd7f9040112646249656", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea16b5eef5453b891db7d1f1e504799ebc929735/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea16b5eef5453b891db7d1f1e504799ebc929735/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea16b5eef5453b891db7d1f1e504799ebc929735", "patch": "@@ -1,3 +1,8 @@\n+2002-06-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c (process_command): Avoid assignment to read-only location.\n+\tFix sizeof calculation.\n+\n 2002-06-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h (struct cpp_macro): Put comments on their own lines."}, {"sha": "c5f02d6040b64a691e7da5fa8f2429e50a19bea6", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea16b5eef5453b891db7d1f1e504799ebc929735/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea16b5eef5453b891db7d1f1e504799ebc929735/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ea16b5eef5453b891db7d1f1e504799ebc929735", "patch": "@@ -3192,26 +3192,27 @@ process_command (argc, argv)\n     {\n       const char *new_version = DEFAULT_TARGET_VERSION;\n       const char *new_machine = DEFAULT_TARGET_MACHINE;\n-      const char *const *new_argv = argv;\n+      const char *progname = argv[0];\n+      char **new_argv;\n       char *new_argv0;\n       int baselen;\n       \n-      while (argc > 1 && new_argv[1][0] == '-'\n-\t     && (new_argv[1][1] == 'V' || new_argv[1][1] == 'b'))\n+      while (argc > 1 && argv[1][0] == '-'\n+\t     && (argv[1][1] == 'V' || argv[1][1] == 'b'))\n \t{\n-\t  char opt = new_argv[1][1];\n+\t  char opt = argv[1][1];\n \t  const char *arg;\n-\t  if (new_argv[1][2] != '\\0')\n+\t  if (argv[1][2] != '\\0')\n \t    {\n-\t      arg = new_argv[1] + 2;\n+\t      arg = argv[1] + 2;\n \t      argc -= 1;\n-\t      new_argv += 1;\n+\t      argv += 1;\n \t    }\n \t  else if (argc > 2)\n \t    {\n-\t      arg = new_argv[2];\n+\t      arg = argv[2];\n \t      argc -= 2;\n-\t      new_argv += 2;\n+\t      argv += 2;\n \t    }\n \t  else\n \t    fatal (\"`-%c' option must have argument\", opt);\n@@ -3221,22 +3222,22 @@ process_command (argc, argv)\n \t    new_machine = arg;\n \t}\n \n-      for (baselen = strlen (argv[0]); baselen > 0; baselen--)\n-\tif (IS_DIR_SEPARATOR (argv[0][baselen-1]))\n+      for (baselen = strlen (progname); baselen > 0; baselen--)\n+\tif (IS_DIR_SEPARATOR (progname[baselen-1]))\n \t  break;\n-      new_argv0 = xmemdup (argv[0], baselen, \n+      new_argv0 = xmemdup (progname, baselen, \n \t\t\t   baselen + concat_length (new_version, new_machine,\n \t\t\t\t\t\t    \"-gcc-\", NULL) + 1);\n       strcpy (new_argv0 + baselen, new_machine);\n       strcat (new_argv0, \"-gcc-\");\n       strcat (new_argv0, new_version);\n \n-      new_argv = xmemdup (new_argv, (argc+1) * sizeof (new_argv0[0]),\n-\t\t\t   (argc+1) * sizeof (new_argv0[0]));\n+      new_argv = xmemdup (argv, (argc + 1) * sizeof (argv[0]),\n+\t\t\t  (argc + 1) * sizeof (argv[0]));\n       new_argv[0] = new_argv0;\n \n       execvp (new_argv0, new_argv);\n-      fatal (\"couldn't run `%s': %s\", new_argv0, xstrerror(errno));\n+      fatal (\"couldn't run `%s': %s\", new_argv0, xstrerror (errno));\n     }\n \n   /* Set up the default search paths.  If there is no GCC_EXEC_PREFIX,"}]}