{"sha": "d2423144eb36a68fd0da9224857ce807714874a7", "node_id": "C_kwDOANBUbNoAKGQyNDIzMTQ0ZWIzNmE2OGZkMGRhOTIyNDg1N2NlODA3NzE0ODc0YTc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-02T09:54:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-02T09:54:54Z"}, "message": "Replace IFN_TRAP with BUILT_IN_UNREACHABLE_TRAP [PR107300]\n\nFor PR106099 I've added IFN_TRAP as an alternative to __builtin_trap\nmeant for __builtin_unreachable purposes (e.g. with -funreachable-traps\nor some sanitizers) which doesn't need vops because __builtin_unreachable\ndoesn't need them either.  This works in various cases, but unfortunately\nIPA likes to decide on the redirection to unreachable just by tweaking\nthe cgraph edge to point to a different FUNCTION_DECL.  As internal\nfunctions don't have a decl, this causes problems like in the following\ntestcase.\n\nThe following patch fixes it by removing IFN_TRAP again and replacing\nit with user inaccessible BUILT_IN_UNREACHABLE_TRAP, so that e.g.\nbuiltin_decl_unreachable can return it directly and we don't need to tweak\nit later in wherever we actually replace the call stmt.\n\n2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR ipa/107300\n\t* builtins.def (BUILT_IN_UNREACHABLE_TRAP): New builtin.\n\t* internal-fn.def (TRAP): Remove.\n\t* internal-fn.cc (expand_TRAP): Remove.\n\t* tree.cc (build_common_builtin_nodes): Define\n\tBUILT_IN_UNREACHABLE_TRAP if not yet defined.\n\t(builtin_decl_unreachable): Use BUILT_IN_UNREACHABLE_TRAP\n\tinstead of BUILT_IN_TRAP.\n\t* gimple.cc (gimple_build_builtin_unreachable): Remove\n\temitting internal function for BUILT_IN_TRAP.\n\t* asan.cc (maybe_instrument_call): Handle BUILT_IN_UNREACHABLE_TRAP.\n\t* cgraph.cc (cgraph_edge::verify_corresponds_to_fndecl): Handle\n\tBUILT_IN_UNREACHABLE_TRAP instead of BUILT_IN_TRAP.\n\t* ipa-devirt.cc (possible_polymorphic_call_target_p): Handle\n\tBUILT_IN_UNREACHABLE_TRAP.\n\t* builtins.cc (expand_builtin, is_inexpensive_builtin): Likewise.\n\t* tree-cfg.cc (verify_gimple_call,\n\tpass_warn_function_return::execute): Likewise.\n\t* attribs.cc (decl_attributes): Don't report exclusions on\n\tBUILT_IN_UNREACHABLE_TRAP either.\n\n\t* gcc.dg/pr107300.c: New test.", "tree": {"sha": "8e7cf8009eb3608cb87336a6a533f1d121863ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e7cf8009eb3608cb87336a6a533f1d121863ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2423144eb36a68fd0da9224857ce807714874a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2423144eb36a68fd0da9224857ce807714874a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2423144eb36a68fd0da9224857ce807714874a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2423144eb36a68fd0da9224857ce807714874a7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "57834b70dbae31b432905a8bbc095053e8359101", "filename": "gcc/asan.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -2951,6 +2951,7 @@ maybe_instrument_call (gimple_stmt_iterator *iter)\n \t  switch (DECL_FUNCTION_CODE (callee))\n \t    {\n \t    case BUILT_IN_UNREACHABLE:\n+\t    case BUILT_IN_UNREACHABLE_TRAP:\n \t    case BUILT_IN_TRAP:\n \t      /* Don't instrument these.  */\n \t      return false;"}, {"sha": "b1300018d1e8ed8e02ded1ea721dc192a6d32a49", "filename": "gcc/attribs.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fattribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fattribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -846,6 +846,7 @@ decl_attributes (tree *node, tree attributes, int flags,\n \t      || !DECL_P (*anode)\n \t      || DECL_BUILT_IN_CLASS (*anode) != BUILT_IN_NORMAL\n \t      || (DECL_FUNCTION_CODE (*anode) != BUILT_IN_UNREACHABLE\n+\t\t  && DECL_FUNCTION_CODE (*anode) != BUILT_IN_UNREACHABLE_TRAP\n \t\t  && (DECL_FUNCTION_CODE (*anode)\n \t\t      != BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE)))\n \t    {"}, {"sha": "8327bcb2c3a301a1b380143f54db6935e2e25318", "filename": "gcc/builtins.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -7844,6 +7844,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       break;\n \n     case BUILT_IN_TRAP:\n+    case BUILT_IN_UNREACHABLE_TRAP:\n       expand_builtin_trap ();\n       return const0_rtx;\n \n@@ -11310,6 +11311,7 @@ is_inexpensive_builtin (tree decl)\n       case BUILT_IN_VA_ARG_PACK_LEN:\n       case BUILT_IN_VA_COPY:\n       case BUILT_IN_TRAP:\n+      case BUILT_IN_UNREACHABLE_TRAP:\n       case BUILT_IN_SAVEREGS:\n       case BUILT_IN_POPCOUNTL:\n       case BUILT_IN_POPCOUNTLL:"}, {"sha": "4ad95a12f83ea663b64cfc9f90a5cec45bcb97a8", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -1048,6 +1048,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_SETJMP, \"setjmp\", BT_FN_INT_PTR, ATTR_RT_NOTHRO\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRFMON, \"strfmon\", BT_FN_SSIZE_STRING_SIZE_CONST_STRING_VAR, ATTR_FORMAT_STRFMON_NOTHROW_3_4)\n DEF_LIB_BUILTIN        (BUILT_IN_STRFTIME, \"strftime\", BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_TM_PTR, ATTR_FORMAT_STRFTIME_NOTHROW_3_0)\n DEF_GCC_BUILTIN        (BUILT_IN_TRAP, \"trap\", BT_FN_VOID, ATTR_NORETURN_NOTHROW_LEAF_COLD_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UNREACHABLE_TRAP, \"unreachable trap\", BT_FN_VOID, ATTR_CONST_NORETURN_NOTHROW_LEAF_COLD_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_UNREACHABLE, \"unreachable\", BT_FN_VOID, ATTR_CONST_NORETURN_NOTHROW_LEAF_COLD_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_UNWIND_INIT, \"unwind_init\", BT_FN_VOID, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_UPDATE_SETJMP_BUF, \"update_setjmp_buf\", BT_FN_VOID_PTR, ATTR_NULL)"}, {"sha": "f0d06bfe36b82a8a0ac65f4dda1e789a17e06aa9", "filename": "gcc/cgraph.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fcgraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fcgraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -3248,11 +3248,11 @@ cgraph_edge::verify_corresponds_to_fndecl (tree decl)\n   node = node->ultimate_alias_target ();\n \n   /* Optimizers can redirect unreachable calls or calls triggering undefined\n-     behavior to __builtin_unreachable or __builtin_trap.  */\n+     behavior to __builtin_unreachable or __builtin_unreachable trap.  */\n \n   if (fndecl_built_in_p (callee->decl, BUILT_IN_NORMAL)\n       && (DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_UNREACHABLE\n-\t  || DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_TRAP))\n+\t  || DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_UNREACHABLE_TRAP))\n     return false;\n \n   if (callee->former_clone_of != node->decl"}, {"sha": "5e4eda417fbd17440f4e7220e99e6400c769b9ba", "filename": "gcc/gimple.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fgimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fgimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -430,16 +430,7 @@ gimple_build_builtin_unreachable (location_t loc)\n {\n   tree data = NULL_TREE;\n   tree fn = sanitize_unreachable_fn (&data, loc);\n-  gcall *g;\n-  if (DECL_FUNCTION_CODE (fn) != BUILT_IN_TRAP)\n-    g = gimple_build_call (fn, data != NULL_TREE, data);\n-  else\n-    {\n-      /* Instead of __builtin_trap use .TRAP, so that it doesn't\n-\t need vops.  */\n-      gcc_checking_assert (data == NULL_TREE);\n-      g = gimple_build_call_internal (IFN_TRAP, 0);\n-    }\n+  gcall *g = gimple_build_call (fn, data != NULL_TREE, data);\n   gimple_call_set_ctrl_altering (g, true);\n   gimple_set_location (g, loc);\n   return g;"}, {"sha": "a7936ff37ef6f3e15b3c0439b93d85cc1234751d", "filename": "gcc/internal-fn.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Finternal-fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Finternal-fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -4517,12 +4517,6 @@ expand_SPACESHIP (internal_fn, gcall *stmt)\n     emit_move_insn (target, ops[0].value);\n }\n \n-void\n-expand_TRAP (internal_fn, gcall *)\n-{\n-  expand_builtin_trap ();\n-}\n-\n void\n expand_ASSUME (internal_fn, gcall *)\n {"}, {"sha": "22b4a2d92967076c658965afcaeaf39b449a8caf", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -457,11 +457,6 @@ DEF_INTERNAL_FN (SHUFFLEVECTOR, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n /* <=> optimization.  */\n DEF_INTERNAL_FN (SPACESHIP, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n \n-/* __builtin_trap created from/for __builtin_unreachable.  */\n-DEF_INTERNAL_FN (TRAP, ECF_CONST | ECF_LEAF | ECF_NORETURN\n-\t\t       | ECF_NOTHROW | ECF_COLD | ECF_LOOPING_CONST_OR_PURE,\n-\t\t NULL)\n-\n /* [[assume (cond)]].  */\n DEF_INTERNAL_FN (ASSUME, ECF_CONST | ECF_LEAF | ECF_NOTHROW\n \t\t\t | ECF_LOOPING_CONST_OR_PURE, NULL)"}, {"sha": "14cf132c76713461eb9df0deab64f1a262a357ce", "filename": "gcc/ipa-devirt.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fipa-devirt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Fipa-devirt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -3471,8 +3471,10 @@ possible_polymorphic_call_target_p (tree otr_type,\n   unsigned int i;\n   bool final;\n \n-  if (fndecl_built_in_p (n->decl, BUILT_IN_UNREACHABLE)\n-      || fndecl_built_in_p (n->decl, BUILT_IN_TRAP))\n+  if (fndecl_built_in_p (n->decl, BUILT_IN_NORMAL)\n+      && (DECL_FUNCTION_CODE (n->decl) == BUILT_IN_UNREACHABLE\n+\t  || DECL_FUNCTION_CODE (n->decl) == BUILT_IN_TRAP\n+\t  || DECL_FUNCTION_CODE (n->decl) == BUILT_IN_UNREACHABLE_TRAP))\n     return true;\n \n   if (is_cxa_pure_virtual_p (n->decl))"}, {"sha": "836908ee9dd8775d400b1a27898f38a665bd6971", "filename": "gcc/testsuite/gcc.dg/pr107300.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107300.c?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -0,0 +1,19 @@\n+/* PR ipa/107300 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fipa-cp-clone -funreachable-traps -fno-inline\" } */\n+\n+void\n+bar (int x, int y)\n+{\n+  if (x)\n+    __builtin_unreachable ();\n+\n+  if (y)\n+    __builtin_abort ();\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (0, 0);\n+}"}, {"sha": "a9fcc7fd050f871437ef336ecfb8d6cc81280ee0", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -3503,6 +3503,7 @@ verify_gimple_call (gcall *stmt)\n       switch (DECL_FUNCTION_CODE (fndecl))\n \t{\n \tcase BUILT_IN_UNREACHABLE:\n+\tcase BUILT_IN_UNREACHABLE_TRAP:\n \tcase BUILT_IN_TRAP:\n \t  if (gimple_call_num_args (stmt) > 0)\n \t    {\n@@ -9681,6 +9682,8 @@ pass_warn_function_return::execute (function *fun)\n \t\t  && ((LOCATION_LOCUS (gimple_location (last))\n \t\t       == BUILTINS_LOCATION\n \t\t       && (gimple_call_builtin_p (last, BUILT_IN_UNREACHABLE)\n+\t\t\t   || gimple_call_builtin_p (last,\n+\t\t\t\t\t\t     BUILT_IN_UNREACHABLE_TRAP)\n \t\t\t   || gimple_call_builtin_p (last, BUILT_IN_TRAP)))\n \t\t      || gimple_call_builtin_p (last, ubsan_missing_ret)))\n \t\t{"}, {"sha": "41ccbf3b3cbffddc4c79cb79eee560b392602d09", "filename": "gcc/tree.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2423144eb36a68fd0da9224857ce807714874a7/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=d2423144eb36a68fd0da9224857ce807714874a7", "patch": "@@ -9758,6 +9758,7 @@ build_common_builtin_nodes (void)\n \n   if (!builtin_decl_explicit_p (BUILT_IN_UNREACHABLE)\n       || !builtin_decl_explicit_p (BUILT_IN_TRAP)\n+      || !builtin_decl_explicit_p (BUILT_IN_UNREACHABLE_TRAP)\n       || !builtin_decl_explicit_p (BUILT_IN_ABORT))\n     {\n       ftype = build_function_type (void_type_node, void_list_node);\n@@ -9767,6 +9768,12 @@ build_common_builtin_nodes (void)\n \t\t\t      \"__builtin_unreachable\",\n \t\t\t      ECF_NOTHROW | ECF_LEAF | ECF_NORETURN\n \t\t\t      | ECF_CONST | ECF_COLD);\n+      if (!builtin_decl_explicit_p (BUILT_IN_UNREACHABLE_TRAP))\n+\tlocal_define_builtin (\"__builtin_unreachable trap\", ftype,\n+\t\t\t      BUILT_IN_UNREACHABLE_TRAP,\n+\t\t\t      \"__builtin_unreachable trap\",\n+\t\t\t      ECF_NOTHROW | ECF_LEAF | ECF_NORETURN\n+\t\t\t      | ECF_CONST | ECF_COLD);\n       if (!builtin_decl_explicit_p (BUILT_IN_ABORT))\n \tlocal_define_builtin (\"__builtin_abort\", ftype, BUILT_IN_ABORT,\n \t\t\t      \"abort\",\n@@ -10908,7 +10915,7 @@ builtin_decl_unreachable ()\n   if (sanitize_flags_p (SANITIZE_UNREACHABLE)\n       ? (flag_sanitize_trap & SANITIZE_UNREACHABLE)\n       : flag_unreachable_traps)\n-    fncode = BUILT_IN_TRAP;\n+    fncode = BUILT_IN_UNREACHABLE_TRAP;\n   /* For non-trapping sanitize, we will rewrite __builtin_unreachable () later,\n      in the sanopt pass.  */\n "}]}