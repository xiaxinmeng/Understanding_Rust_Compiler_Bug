{"sha": "400053660cdd089c226a6f6fdb4e6793c6384f16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwMDUzNjYwY2RkMDg5YzIyNmE2ZjZmZGI0ZTY3OTNjNjM4NGYxNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-15T07:59:27Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-15T07:59:27Z"}, "message": "vec.h (VEC_T_truncate): Allow truncation of an empty vector.\n\n\t* vec.h (VEC_T_truncate): Allow truncation of an empty vector.\n\t(VEC_T_quick_insert, VEC_T_ordered_remove): Fix sizeof(T) thinko.\n\nFrom-SVN: r84746", "tree": {"sha": "00ea87f0e87cbfc75186c13146ad863fa097b11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ea87f0e87cbfc75186c13146ad863fa097b11c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/400053660cdd089c226a6f6fdb4e6793c6384f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400053660cdd089c226a6f6fdb4e6793c6384f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400053660cdd089c226a6f6fdb4e6793c6384f16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400053660cdd089c226a6f6fdb4e6793c6384f16/comments", "author": null, "committer": null, "parents": [{"sha": "ad5dc4b35a862383516694d2a76832625c9a98b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5dc4b35a862383516694d2a76832625c9a98b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5dc4b35a862383516694d2a76832625c9a98b6"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "b76a1c346394dc0e758c68fde47fb89426244bac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400053660cdd089c226a6f6fdb4e6793c6384f16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400053660cdd089c226a6f6fdb4e6793c6384f16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=400053660cdd089c226a6f6fdb4e6793c6384f16", "patch": "@@ -1,3 +1,8 @@\n+2004-07-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* vec.h (VEC_T_truncate): Allow truncation of an empty vector.\n+\t(VEC_T_quick_insert, VEC_T_ordered_remove): Fix sizeof(T) thinko.\n+\n 2004-07-14  Richard Henderson  <rth@redhat.com>\n \n \t* print-tree.c (print_node): Fix casts last change."}, {"sha": "f795ba13f0bb5c88200a481d0f1af424cca62c43", "filename": "gcc/vec.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400053660cdd089c226a6f6fdb4e6793c6384f16/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400053660cdd089c226a6f6fdb4e6793c6384f16/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=400053660cdd089c226a6f6fdb4e6793c6384f16", "patch": "@@ -382,8 +382,9 @@ static inline TDEF VEC_OP (TDEF,pop)\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,truncate)\t\t\t\t  \\\n      (VEC (TDEF) *vec_, size_t size_)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  VEC_ASSERT (vec_->num >= size_, \"truncate\", TDEF);\t\t\t  \\\n-  vec_->num = size_;\t\t\t\t\t\t\t  \\\n+  VEC_ASSERT (vec_ ? vec_->num >= size_ : !size_, \"truncate\", TDEF);\t  \\\n+  if (vec_)\t\t\t\t\t\t\t\t  \\\n+    vec_->num = size_;\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF VEC_OP (TDEF,replace)\t\t  \t     \t  \\\n@@ -406,7 +407,7 @@ static inline TDEF *VEC_OP (TDEF,quick_insert)\t\t     \t  \t  \\\n   VEC_ASSERT (vec_->num < vec_->alloc, \"insert\", TDEF);\t\t\t  \\\n   VEC_ASSERT (ix_ <= vec_->num, \"insert\", TDEF);\t\t\t  \\\n   slot_ = &vec_->vec[ix_];\t\t\t\t\t\t  \\\n-  memmove (slot_ + 1, slot_, vec_->num++ - ix_);\t\t\t  \\\n+  memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (TDEF));\t  \\\n   *slot_ = obj_;\t\t\t\t\t\t\t  \\\n   \t\t\t\t\t\t\t\t\t  \\\n   return slot_;\t\t\t\t\t\t\t\t  \\\n@@ -429,7 +430,7 @@ static inline TDEF VEC_OP (TDEF,ordered_remove)\t\t\t\t  \\\n   VEC_ASSERT (ix_ < vec_->num, \"remove\", TDEF);\t\t\t\t  \\\n   slot_ = &vec_->vec[ix_];\t\t\t\t\t\t  \\\n   obj_ = *slot_;\t\t\t\t\t\t\t  \\\n-  memmove (slot_, slot_ + 1, --vec_->num - ix_);       \t\t\t  \\\n+  memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (TDEF));     \t  \\\n \t\t\t\t\t\t\t\t\t  \\\n   return obj_;\t\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n@@ -553,8 +554,9 @@ static inline void VEC_OP (TDEF,pop)\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,truncate)\t\t\t\t  \\\n      (VEC (TDEF) *vec_, size_t size_)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  VEC_ASSERT (vec_->num >= size_, \"truncate\", TDEF);\t\t\t  \\\n-  vec_->num = size_;\t\t\t\t\t\t\t  \\\n+  VEC_ASSERT (vec_ ? vec_->num >= size_ : !size_, \"truncate\", TDEF);\t  \\\n+  if (vec_)\t\t\t\t\t\t\t\t  \\\n+    vec_->num = size_;\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,replace)\t\t\t\t  \\\n@@ -578,7 +580,7 @@ static inline TDEF *VEC_OP (TDEF,quick_insert)\t\t\t\t  \\\n   VEC_ASSERT (vec_->num < vec_->alloc, \"insert\", TDEF);\t\t\t  \\\n   VEC_ASSERT (ix_ <= vec_->num, \"insert\", TDEF);\t\t\t  \\\n   slot_ = &vec_->vec[ix_];\t\t\t\t\t\t  \\\n-  memmove (slot_ + 1, slot_, vec_->num++ - ix_);\t\t\t  \\\n+  memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (TDEF));\t  \\\n   if (obj_)\t\t\t\t\t\t\t\t  \\\n     *slot_ = *obj_;\t\t\t\t\t\t\t  \\\n   \t\t\t\t\t\t\t\t\t  \\\n@@ -600,7 +602,7 @@ static inline void VEC_OP (TDEF,ordered_remove)\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n   VEC_ASSERT (ix_ < vec_->num, \"remove\", TDEF);\t\t\t\t  \\\n   slot_ = &vec_->vec[ix_];\t\t\t\t\t\t  \\\n-  memmove (slot_, slot_ + 1, --vec_->num - ix_);       \t\t\t  \\\n+  memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (TDEF));\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,unordered_remove)\t\t\t  \\"}]}